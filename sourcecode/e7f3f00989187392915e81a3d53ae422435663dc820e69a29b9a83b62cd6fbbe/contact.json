{
  "address": "0x61ec1a25f763eef9823773c7bdb9d7c644fb3503",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Gofind XR Token",
  "contractName": "SingleToken",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-27\n*/\n\npragma solidity 0.5.2;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        require(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n        require(token.approve(spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        require(token.approve(spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        require(token.approve(spender, newAllowance));\n    }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\ncontract Freeze is Ownable, ERC20 {\n  \n    using SafeMath for uint256;\n\n    uint256 public endOfIco;\n    uint256 public unlockSchema = 12;\n\n    struct Group {\n        address[] holders;\n        uint until;\n    }\n    \n    /**\n    * @dev number of groups\n    */\n    uint public groups;\n    \n    address[] public gofindAllowedAddresses; // ADD 0xO ADDRESS AT FIRST PLACE\n    \n    /**\n    * @dev link group ID ---> Group structure\n    */\n    mapping (uint => Group) public lockup;\n    \n    /**\n    * @dev Check if holder under lock up\n    */\n    modifier lockupEnded (address _holder, address _recipient, uint256 actionAmount) {\n        uint index = indexOf(_recipient, gofindAllowedAddresses);\n        if (index == 0) {\n            bool freezed;\n            uint groupId;\n            (freezed, groupId) = isFreezed(_holder);\n            \n            if (freezed) {\n                if (lockup[groupId-1].until < block.timestamp)\n                    _;\n                    \n                else if (getFullMonthAfterIco() != 0) {\n                    uint256 available = getAvailableAmount();\n                    if (actionAmount > available)\n                        revert(\"Your holdings are freezed and your trying to use amount more than available\");\n                    else \n                        _;\n                }\n                else \n                    revert(\"Your holdings are freezed, wait until transfers become allowed\");\n            }\n            else \n                _;\n        }\n        else\n        _;\n    }\n    \n    /**\n     * @dev in timestamp\n    */\n    function changeEndOfIco (uint256 _date) public onlyOwner returns (bool) {\n        endOfIco = _date;\n    }\n    \n    function addGofindAllowedAddress (address _newAddress) public onlyOwner returns (bool) {\n        require(indexOf(_newAddress, gofindAllowedAddresses) == 0, \"that address already exists\");\n        gofindAllowedAddresses.push(_newAddress);\n        return true;\n    }\n\t\n\t/**\n\t * @param _holder address of token holder to check\n\t * @return bool - status of freezing and group\n\t */\n    function isFreezed (address _holder) public view returns(bool, uint) {\n        bool freezed = false;\n        uint i = 0;\n        while (i < groups) {\n            uint index  = indexOf(_holder, lockup[i].holders);\n\n            if (index == 0) {\n                if (checkZeroIndex(_holder, i)) {\n                    freezed = true;\n                    i++;\n                    continue;\n                }  \n                else {\n                    i++;\n                    continue;\n                }\n            } \n        \n            if (index != 0) {\n                freezed = true;\n                i++;\n                continue;\n            }\n            i++;\n        }\n        if (!freezed) i = 0;\n        \n        return (freezed, i);\n    }\n  \n\t/**\n\t * @dev internal usage to get index of holder in group\n\t * @param element address of token holder to check\n\t * @param at array of addresses that is group of holders\n\t * @return index of holder at array\n\t */\n    function indexOf (address element, address[] memory at) internal pure returns (uint) {\n        for (uint i=0; i < at.length; i++) {\n            if (at[i] == element) return i;\n        }\n        return 0;\n    }\n  \n\t/**\n\t * @dev internal usage to check that 0 is 0 index or it means that address not exists\n\t * @param _holder address of token holder to check\n\t * @param lockGroup id of group to check address existance in it\n\t * @return true if holder at zero index at group false if holder doesn't exists\n\t */\n    function checkZeroIndex (address _holder, uint lockGroup) internal view returns (bool) {\n        if (lockup[lockGroup].holders[0] == _holder)\n            return true;\n            \n        else \n            return false;\n    }\n\n    /**\n     * @dev returns available tokens amount after linear release for msg.sender\n     */\n    function getAvailableAmount () internal view returns (uint256) {\n        uint256 monthes = getFullMonthAfterIco();\n        uint256 balance = balanceOf(msg.sender);\n        uint256 monthShare = balance.div(unlockSchema);\n        uint256 available = monthShare * monthes;\n        return available;\n    }\n    \n    /**\n     * @dev calculate how much month have gone after end of ICO\n     */\n    function getFullMonthAfterIco () internal view returns (uint256) {\n        uint256 currentTime = block.timestamp;\n        if (currentTime < endOfIco)\n            return 0;\n        else {\n            uint256 delta = currentTime - endOfIco;\n            uint256 step = 2592000;\n            if (delta > step) {\n                uint256 times = delta.div(step);\n                return times;\n            }\n            else {\n                return 0;\n            }\n        }\n    }\n  \n\t/**\n\t * @dev Will set group of addresses that will be under lock. When locked address can't\n\t  \t\t  do some actions with token\n\t * @param _holders array of addresses to lock\n\t * @param _until   timestamp until that lock up will last\n\t * @return bool result of operation\n\t */\n    function setGroup (address[] memory _holders, uint _until) public onlyOwner returns (bool) {\n        lockup[groups].holders = _holders;\n        lockup[groups].until   = _until;\n        \n        groups++;\n        return true;\n    }\n}\n\n/**\n * @dev This contract needed for inheritance of StandardToken interface,\n        but with freezing modifiers. So, it have exactly same methods, but with \n        lockupEnded(msg.sender) modifier.\n * @notice Inherit from it at ERC20, to make freezing functionality works\n*/\ncontract PausableToken is Freeze {\n\n    function transfer(address _to, uint256 _value) public lockupEnded(msg.sender, _to, _value) returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public lockupEnded(msg.sender, _to, _value) returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public lockupEnded(msg.sender, _spender, _value) returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseAllowance(address _spender, uint256 _addedValue)\n        public lockupEnded(msg.sender, _spender, _addedValue) returns (bool success)\n    {\n        return super.increaseAllowance(_spender, _addedValue);\n    }\n\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\n        public lockupEnded(msg.sender, _spender, _subtractedValue) returns (bool success)\n    {\n        return super.decreaseAllowance(_spender, _subtractedValue);\n    }\n}\n\n\ncontract SingleToken is PausableToken {\n\n    using SafeMath for uint256;\n    \n    event TokensBurned(address from, uint256 value);\n    event TokensMinted(address to, uint256 value);\n\n    string  public constant name      = \"Gofind XR\"; \n\n    string  public constant symbol    = \"XR\";\n\n    uint32  public constant decimals  = 8;\n\n    uint256 public constant maxSupply = 13E16;\n    \n    constructor() public {\n        totalSupply().add(maxSupply);\n        super._mint(msg.sender, maxSupply);\n    }\n    \n    function burn (address account, uint256 value) public onlyOwner returns (bool) {\n        super._burn(account, value);\n        return true;\n    }\n    \n    function burnFrom (address account, uint256 value) public onlyOwner returns (bool) {\n        super._burnFrom(account, value);\n        return true;\n    }\n    \n    function mint (address account, uint256 value) public onlyOwner returns (bool) {\n        super._mint(account, value);\n        return true;\n    }\n  \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"addGofindAllowedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gofindAllowedAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endOfIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holders\",\"type\":\"address[]\"},{\"name\":\"_until\",\"type\":\"uint256\"}],\"name\":\"setGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"groups\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"isFreezed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"changeEndOfIco\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockSchema\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockup\",\"outputs\":[{\"name\":\"until\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "6080604052600c6005553480156200001657600080fd5b5060008054600160a060020a031916331790556200005e6701cdda4faccd00006200004964010000000062000087810204565b90640100000000620018096200008d82021704565b5062000081336701cdda4faccd000064010000000062001463620000a182021704565b62000162565b60035490565b818101828110156200009b57fe5b92915050565b600160a060020a0382161515620000b757600080fd5b600354620000d49082640100000000620018096200008d82021704565b600355600160a060020a0382166000908152600160205260409020546200010a9082640100000000620018096200008d82021704565b600160a060020a03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b61198480620001726000396000f3fe608060405234801561001057600080fd5b50600436106101c6576000357c010000000000000000000000000000000000000000000000000000000090048063715018a611610116578063a457c2d7116100b4578063d5abeb011161008e578063d5abeb01146105bb578063dd62ed3e146105c3578063f2fde38b146105f1578063faa009e814610617576101c6565b8063a457c2d71461055b578063a9059cbb14610587578063c9c80c99146105b3576101c6565b80638da5cb5b116100f05780638da5cb5b1461050257806395d89b411461050a5780639dc29fac14610512578063a0e1812a1461053e576101c6565b8063715018a61461048b57806379cc6790146104955780638111f24e146104c1576101c6565b80632cad1d8411610183578063395093511161015d578063395093511461040557806340c10f19146104315780635bf89d9e1461045d57806370a0823114610465576101c6565b80632cad1d8414610337578063313ce5671461033f5780633300d9ab14610360576101c6565b806306fdde03146101cb578063095ea7b3146102485780631718e5ef1461028857806318160ddd146102ae5780631e80230a146102c857806323b872dd14610301575b600080fd5b6101d3610634565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561020d5781810151838201526020016101f5565b50505050905090810190601f16801561023a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102746004803603604081101561025e57600080fd5b50600160a060020a03813516906020013561066b565b604080519115158252519081900360200190f35b6102746004803603602081101561029e57600080fd5b5035600160a060020a03166107fc565b6102b661092c565b60408051918252519081900360200190f35b6102e5600480360360208110156102de57600080fd5b5035610933565b60408051600160a060020a039092168252519081900360200190f35b6102746004803603606081101561031757600080fd5b50600160a060020a0381358116916020810135909116906040013561095b565b6102b6610ab1565b610347610ab7565b6040805163ffffffff9092168252519081900360200190f35b6102746004803603604081101561037657600080fd5b81019060208101813564010000000081111561039157600080fd5b8201836020820111156103a357600080fd5b803590602001918460208302840111640100000000831117156103c557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505091359250610abc915050565b6102746004803603604081101561041b57600080fd5b50600160a060020a038135169060200135610b20565b6102746004803603604081101561044757600080fd5b50600160a060020a038135169060200135610c4a565b6102b6610c75565b6102b66004803603602081101561047b57600080fd5b5035600160a060020a0316610c7b565b610493610c96565b005b610274600480360360408110156104ab57600080fd5b50600160a060020a038135169060200135610d02565b6104e7600480360360208110156104d757600080fd5b5035600160a060020a0316610d24565b60408051921515835260208301919091528051918290030190f35b6102e5610df4565b6101d3610e03565b6102746004803603604081101561052857600080fd5b50600160a060020a038135169060200135610e3a565b6102746004803603602081101561055457600080fd5b5035610e5c565b6102746004803603604081101561057157600080fd5b50600160a060020a038135169060200135610e7d565b6102746004803603604081101561059d57600080fd5b50600160a060020a038135169060200135610fa7565b6102b66110d1565b6102b66110d7565b6102b6600480360360408110156105d957600080fd5b50600160a060020a03813581169160200135166110e3565b6104936004803603602081101561060757600080fd5b5035600160a060020a031661110e565b6102b66004803603602081101561062d57600080fd5b50356111a2565b60408051808201909152600981527f476f66696e642058520000000000000000000000000000000000000000000000602082015281565b600033838360006106d68360078054806020026020016040519081016040528092919081815260200182805480156106cc57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116106ae575b50505050506111b7565b90508015156107e5576000806106eb86610d24565b909250905081156107d15760001981016000908152600860205260409020600101544211156107255761071e898961120e565b96506107cc565b61072d61127a565b1561079257600061073c6112d2565b9050808511156107805760405160e560020a62461bcd02815260040180806020018281038252604b8152602001806118b0604b913960600191505060405180910390fd5b61078a8a8a61120e565b9750506107cc565b60405160e560020a62461bcd02815260040180806020018281038252603e81526020018061191b603e913960400191505060405180910390fd5b6107de565b6107db898961120e565b96505b50506107f2565b6107ef878761120e565b94505b5050505092915050565b60008054600160a060020a0316331461081457600080fd5b6108768260078054806020026020016040519081016040528092919081815260200182805480156106cc57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116106ae5750505050506111b7565b156108cb576040805160e560020a62461bcd02815260206004820152601b60248201527f74686174206164647265737320616c7265616479206578697374730000000000604482015290519081900360640190fd5b5060078054600181810183556000929092527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688018054600160a060020a03841673ffffffffffffffffffffffffffffffffffffffff19909116179055919050565b6003545b90565b600780548290811061094157fe5b600091825260209091200154600160a060020a0316905081565b600033838360006109c48360078054806020026020016040519081016040528092919081815260200182805480156106cc57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116106ae5750505050506111b7565b9050801515610a98576000806109d986610d24565b90925090508115610a83576000198101600090815260086020526040902060010154421115610a1457610a0d8a8a8a61130e565b9650610a7e565b610a1c61127a565b15610792576000610a2b6112d2565b905080851115610a6f5760405160e560020a62461bcd02815260040180806020018281038252604b8152602001806118b0604b913960600191505060405180910390fd5b610a7a8b8b8b61130e565b9750505b610a91565b610a8e8a8a8a61130e565b96505b5050610aa6565b610aa388888861130e565b94505b505050509392505050565b60045481565b600881565b60008054600160a060020a03163314610ad457600080fd5b60065460009081526008602090815260409091208451610af692860190611816565b50506006805460009081526008602052604090206001908101839055815481019091555b92915050565b60003383836000610b898360078054806020026020016040519081016040528092919081815260200182805480156106cc57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116106ae5750505050506111b7565b9050801515610c4057600080610b9e86610d24565b90925090508115610c36576000198101600090815260086020526040902060010154421115610bd15761071e89896113c5565b610bd961127a565b15610792576000610be86112d2565b905080851115610c2c5760405160e560020a62461bcd02815260040180806020018281038252604b8152602001806118b0604b913960600191505060405180910390fd5b61078a8a8a6113c5565b6107db89896113c5565b6107ef87876113c5565b60008054600160a060020a03163314610c6257600080fd5b610c6c8383611463565b50600192915050565b60065481565b600160a060020a031660009081526001602052604090205490565b600054600160a060020a03163314610cad57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60008054600160a060020a03163314610d1a57600080fd5b610c6c838361150f565b60008080805b600654811015610ddf5760008181526008602090815260408083208054825181850281018501909352808352610da0938a939291908301828280156106cc57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116106ae5750505050506111b7565b9050801515610dcd57610db386836115bf565b15610dc45750600191508101610d2a565b50600101610d2a565b8015610dc45750600191508101610d2a565b811515610dea575060005b9092509050915091565b600054600160a060020a031681565b60408051808201909152600281527f5852000000000000000000000000000000000000000000000000000000000000602082015281565b60008054600160a060020a03163314610e5257600080fd5b610c6c8383611610565b60008054600160a060020a03163314610e7457600080fd5b60049190915590565b60003383836000610ee68360078054806020026020016040519081016040528092919081815260200182805480156106cc57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116106ae5750505050506111b7565b9050801515610f9d57600080610efb86610d24565b90925090508115610f93576000198101600090815260086020526040902060010154421115610f2e5761071e89896116bb565b610f3661127a565b15610792576000610f456112d2565b905080851115610f895760405160e560020a62461bcd02815260040180806020018281038252604b8152602001806118b0604b913960600191505060405180910390fd5b61078a8a8a6116bb565b6107db89896116bb565b6107ef87876116bb565b600033838360006110108360078054806020026020016040519081016040528092919081815260200182805480156106cc57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116106ae5750505050506111b7565b90508015156110c75760008061102586610d24565b909250905081156110bd5760001981016000908152600860205260409020600101544211156110585761071e8989611706565b61106061127a565b1561079257600061106f6112d2565b9050808511156110b35760405160e560020a62461bcd02815260040180806020018281038252604b8152602001806118b0604b913960600191505060405180910390fd5b61078a8a8a611706565b6107db8989611706565b6107ef8787611706565b60055481565b6701cdda4faccd000081565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600054600160a060020a0316331461112557600080fd5b600160a060020a038116151561113a57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60086020526000908152604090206001015481565b6000805b82518110156112045783600160a060020a031683828151811015156111dc57fe5b90602001906020020151600160a060020a031614156111fc579050610b1a565b6001016111bb565b5060009392505050565b6000600160a060020a038316151561122557600080fd5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293926000805160206118fb833981519152929181900390910190a350600192915050565b6004546000904290811015611293576000915050610930565b600454810362278d00808211156112c25760006112b6838363ffffffff61171316565b94506109309350505050565b60009350505050610930565b5090565b6000806112dd61127a565b905060006112ea33610c7b565b905060006113036005548361171390919063ffffffff16565b929092029250505090565b600160a060020a0383166000908152600260209081526040808320338452909152812054611342908363ffffffff61172816565b600160a060020a038516600090815260026020908152604080832033845290915290205561137184848461173a565b600160a060020a0384166000818152600260209081526040808320338085529083529281902054815190815290519293926000805160206118fb833981519152929181900390910190a35060019392505050565b6000600160a060020a03831615156113dc57600080fd5b336000908152600260209081526040808320600160a060020a0387168452909152902054611410908363ffffffff61180916565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191936000805160206118fb833981519152929081900390910190a350600192915050565b600160a060020a038216151561147857600080fd5b60035461148b908263ffffffff61180916565b600355600160a060020a0382166000908152600160205260409020546114b7908263ffffffff61180916565b600160a060020a03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a0382166000908152600260209081526040808320338452909152902054611543908263ffffffff61172816565b600160a060020a03831660009081526002602090815260408083203384529091529020556115718282611610565b600160a060020a0382166000818152600260209081526040808320338085529083529281902054815190815290519293926000805160206118fb833981519152929181900390910190a35050565b60008181526008602052604081208054600160a060020a0385169190839081106115e557fe5b600091825260209091200154600160a060020a0316141561160857506001610b1a565b506000610b1a565b600160a060020a038216151561162557600080fd5b600354611638908263ffffffff61172816565b600355600160a060020a038216600090815260016020526040902054611664908263ffffffff61172816565b600160a060020a0383166000818152600160209081526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b6000600160a060020a03831615156116d257600080fd5b336000908152600260209081526040808320600160a060020a0387168452909152902054611410908363ffffffff61172816565b6000610c6c33848461173a565b6000818381151561172057fe5b049392505050565b60008282111561173457fe5b50900390565b600160a060020a038216151561174f57600080fd5b600160a060020a038316600090815260016020526040902054611778908263ffffffff61172816565b600160a060020a0380851660009081526001602052604080822093909355908416815220546117ad908263ffffffff61180916565b600160a060020a0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b81810182811015610b1a57fe5b828054828255906000526020600020908101928215611878579160200282015b82811115611878578251825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909116178255602090920191600190910190611836565b506112ce926109309250905b808211156112ce57805473ffffffffffffffffffffffffffffffffffffffff1916815560010161188456fe596f757220686f6c64696e67732061726520667265657a656420616e6420796f757220747279696e6720746f2075736520616d6f756e74206d6f7265207468616e20617661696c61626c658c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925596f757220686f6c64696e67732061726520667265657a65642c207761697420756e74696c207472616e7366657273206265636f6d6520616c6c6f776564a165627a7a72305820a27669bf225afa54835485aad824cc7185aa70dc94f9de46bf4867be399479030029"
}