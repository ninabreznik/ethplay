{
  "address": "0xba3a4fb35599634a60b2562720c721ec5d8d3a1a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WeedConnect",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-26\n*/\n\npragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract ERC20Interface {\n     function totalSupply() public view returns (uint256);\n     function balanceOf(address tokenOwner) public view returns (uint256 balance);\n     function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\n     function transfer(address to, uint256 tokens) public returns (bool success);\n     function approve(address spender, uint256 tokens) public returns (bool success);\n     function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n\n     event Transfer(address indexed from, address indexed to, uint256 tokens);\n     event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n}\n\ncontract WeedConnect is ERC20Interface, Ownable{\n     using SafeMath for uint256;\n\n     uint256 private _totalSupply;\n     mapping(address => uint256) private _balances;\n     mapping(address => mapping (address => uint256)) private _allowed;\n\n     string public constant symbol = \"420\";\n     string public constant name = \"WeedConnect\";\n     uint public constant decimals = 18;\n     \n     constructor () public {\n          _totalSupply = 420000000 * (10 ** decimals);\n          _balances[msg.sender] = _totalSupply;\n          \n          emit Transfer(address(0), msg.sender, _totalSupply);\n     }\n\n     /**\n     * @dev Total number of tokens in existence\n     */\n     function totalSupply() public view returns (uint256) {\n          return _totalSupply;\n     }\n\n     /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n     function balanceOf(address owner) public view returns (uint256) {\n          return _balances[owner];\n     }\n\n     /**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n     function transfer(address to, uint256 value) public returns (bool) {\n          _transfer(msg.sender, to, value);\n          return true;\n     }\n\n     /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n     function approve(address spender, uint256 value) public returns (bool) {\n          _approve(msg.sender, spender, value);\n          return true;\n     }\n\n     /**\n     * @dev Transfer tokens from one address to another.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n     function transferFrom(address from, address to, uint256 value) public returns (bool) {\n          _transfer(from, to, value);\n          _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n          return true;\n     }\n\n     /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n     function allowance(address owner, address spender) public view returns (uint256) {\n          return _allowed[owner][spender];\n     }\n\n     /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n          _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n          return true;\n     }\n\n     /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n          _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n          return true;\n     }\n\n     /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n     function _transfer(address from, address to, uint256 value) internal {\n          require(to != address(0));\n\n          _balances[from] = _balances[from].sub(value);\n          _balances[to] = _balances[to].add(value);\n          emit Transfer(from, to, value);\n     }\n\n     /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n     function _approve(address owner, address spender, uint256 value) internal {\n          require(spender != address(0));\n          require(owner != address(0));\n\n          _allowed[owner][spender] = value;\n          emit Approval(owner, spender, value);\n     }\n\n     function () external payable {\n          revert();\n     }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a0319163317808255604051600160a060020a039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36b015b6a759f4835dc240000006001819055336000818152600260209081526040808320859055805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a361087f806100c46000396000f3fe6080604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100df578063095ea7b31461016957806318160ddd146101b657806323b872dd146101dd578063313ce56714610220578063395093511461023557806370a082311461026e578063715018a6146102a15780638da5cb5b146102b85780638f32d59b146102e957806395d89b41146102fe578063a457c2d714610313578063a9059cbb1461034c578063dd62ed3e14610385578063f2fde38b146103c0575b600080fd5b3480156100eb57600080fd5b506100f46103f3565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012e578181015183820152602001610116565b50505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017557600080fd5b506101a26004803603604081101561018c57600080fd5b50600160a060020a03813516906020013561042a565b604080519115158252519081900360200190f35b3480156101c257600080fd5b506101cb610440565b60408051918252519081900360200190f35b3480156101e957600080fd5b506101a26004803603606081101561020057600080fd5b50600160a060020a03813581169160208101359091169060400135610446565b34801561022c57600080fd5b506101cb61049d565b34801561024157600080fd5b506101a26004803603604081101561025857600080fd5b50600160a060020a0381351690602001356104a2565b34801561027a57600080fd5b506101cb6004803603602081101561029157600080fd5b5035600160a060020a03166104de565b3480156102ad57600080fd5b506102b66104f9565b005b3480156102c457600080fd5b506102cd610563565b60408051600160a060020a039092168252519081900360200190f35b3480156102f557600080fd5b506101a2610572565b34801561030a57600080fd5b506100f4610583565b34801561031f57600080fd5b506101a26004803603604081101561033657600080fd5b50600160a060020a0381351690602001356105ba565b34801561035857600080fd5b506101a26004803603604081101561036f57600080fd5b50600160a060020a0381351690602001356105f6565b34801561039157600080fd5b506101cb600480360360408110156103a857600080fd5b50600160a060020a0381358116916020013516610603565b3480156103cc57600080fd5b506102b6600480360360208110156103e357600080fd5b5035600160a060020a031661062e565b60408051808201909152600b81527f57656564436f6e6e656374000000000000000000000000000000000000000000602082015281565b600061043733848461064d565b50600192915050565b60015490565b60006104538484846106d9565b600160a060020a03841660009081526003602090815260408083203380855292529091205461049391869161048e908663ffffffff6107a816565b61064d565b5060019392505050565b601281565b336000818152600360209081526040808320600160a060020a0387168452909152812054909161043791859061048e908663ffffffff6107bd16565b600160a060020a031660009081526002602052604090205490565b610501610572565b151561050c57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031690565b600054600160a060020a0316331490565b60408051808201909152600381527f3432300000000000000000000000000000000000000000000000000000000000602082015281565b336000818152600360209081526040808320600160a060020a0387168452909152812054909161043791859061048e908663ffffffff6107a816565b60006104373384846106d9565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b610636610572565b151561064157600080fd5b61064a816107d6565b50565b600160a060020a038216151561066257600080fd5b600160a060020a038316151561067757600080fd5b600160a060020a03808416600081815260036020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600160a060020a03821615156106ee57600080fd5b600160a060020a038316600090815260026020526040902054610717908263ffffffff6107a816565b600160a060020a03808516600090815260026020526040808220939093559084168152205461074c908263ffffffff6107bd16565b600160a060020a0380841660008181526002602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828211156107b757600080fd5b50900390565b6000828201838110156107cf57600080fd5b9392505050565b600160a060020a03811615156107eb57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a72305820b22243d08fbc571c9e6a5197ddde61e58a7b39fb3f4901a8f096fad36dfe133f0029"
}