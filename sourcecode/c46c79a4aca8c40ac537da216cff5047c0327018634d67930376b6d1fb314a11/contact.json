{
  "address": "0xa512d49c8753c476bf5e9c87f6a11dbb71af054c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HarukaTest01",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "10",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-04\n*/\n\npragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract HarukaTest01 is IERC20 {\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    using SafeMath for uint256;\n\n    enum ReleaseType {\n        Public,\n        Private1,\n        Private23,\n        Foundation,\n        Ecosystem,\n        Team,\n        Airdrop,\n        Contributor\n    }\n\n    // Default is Public aka no locking\n    mapping (address => ReleaseType) private _accountType;\n\n    // Required to calculate actual balance\n    // uint256 should be more than enough in lifetime\n    mapping (address => uint256) private _totalBalance;\n    mapping (address => uint256) private _spentBalance;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply = 10_000_000_000E18;\n\n    string private _name = \"Haruka Test Token #01\";\n    string private _symbol = \"HARUKAT01\";\n    uint8 private _decimals = 18;\n\n    address public owner;\n\n    // Used when calculating available balance\n    // Will change after\n    uint256 public reference_time = 2000000000;\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n\n        // Initial balance\n        _totalBalance[owner] = _totalSupply;\n        _accountType[owner] = ReleaseType.Private1;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        require(_spender != address(0));\n\n        _allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        _transfer(_from, _to, _value);\n        _allowed[_from][_to] = _allowed[_from][_to].sub(_value);\n        return true;\n    }\n\n    function _transfer(address from, address to, uint256 value) internal {\n        require(value <= balanceOf(from));\n        require(to != address(0));\n\n        _spentBalance[from] = _spentBalance[from].add(value);\n        _totalBalance[to] = _totalBalance[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    // For ERC20 compatible clients, show current available balance instead of total balance\n    // This is also called in other functions to get the balance\n    // SafeMath should be unnecessary as all calculations should be already \"safe\"\n    // May lose precision due to truncating but it only loses fraction of E-18 so should be safe to ignore\n    // Overflow should be impossible as uint256 has E+77 and total supply has only E+28\n    // For complete readable schedule, please refer to official documents\n    function balanceOf(address _owner) public view returns (uint256) {\n        // Type of address\n        ReleaseType _type = _accountType[_owner];\n        uint256 balance = _totalBalance[_owner].sub(_spentBalance[_owner]);\n\n        // Contract owner is exempt from \"before release\" check to be able to make initial distribution\n        // Contract owner is also exempt from locking\n        if (_owner == owner) {\n            return balance;\n        }\n\n        // Elapsed time since release\n        uint256 elapsed = now - reference_time;\n        // Before release\n        if (elapsed < 0) {\n            return 0;\n        }\n        // Shortcut: after complete unlock\n        if (elapsed >= 21 * 30 minutes) {\n            return balance;\n        }\n\n        // Available amount for each type of address\n        if (_type == ReleaseType.Public) {\n            // No locking\n            return balance;\n        } else if (_type == ReleaseType.Private1) {\n            if (elapsed < 3 * 30 minutes) {\n                return 0;\n            } else if (elapsed < 6 * 30 minutes) {\n                return balance / 6;\n            } else if (elapsed < 9 * 30 minutes) {\n                return balance * 2 / 6;\n            } else if (elapsed < 12 * 30 minutes) {\n                return balance * 3 / 6;\n            } else if (elapsed < 15 * 30 minutes) {\n                return balance * 4 / 6;\n            } else if (elapsed < 18 * 30 minutes) {\n                return balance * 5 / 6;\n            } else {\n                return balance;\n            }\n        } else if (_type == ReleaseType.Private23) {\n            if (elapsed < 6 * 30 minutes) {\n                return 0;\n            } else if (elapsed < 9 * 30 minutes) {\n                return balance / 4;\n            } else if (elapsed < 12 * 30 minutes) {\n                return balance * 2 / 4;\n            } else if (elapsed < 15 * 30 minutes) {\n                return balance * 3 / 4;\n            } else {\n                return balance;\n            }\n        } else if (_type == ReleaseType.Foundation) {\n            if (elapsed < 3 * 30 minutes) {\n                return 0;\n            } else if (elapsed < 6 * 30 minutes) {\n                return balance * 3 / 20;\n            } else if (elapsed < 9 * 30 minutes) {\n                return balance * 6 / 20;\n            } else if (elapsed < 12 * 30 minutes) {\n                return balance * 9 / 20;\n            } else if (elapsed < 15 * 30 minutes) {\n                return balance * 12 / 20;\n            } else if (elapsed < 18 * 30 minutes) {\n                return balance * 15 / 20;\n            } else if (elapsed < 21 * 30 minutes) {\n                return balance * 18 / 20;\n            } else {\n                return balance;\n            }\n        } else if (_type == ReleaseType.Ecosystem) {\n            if (elapsed < 3 * 30 minutes) {\n                return balance * 5 / 30;\n            } else if (elapsed < 6 * 30 minutes) {\n                return balance * 10 / 30;\n            } else if (elapsed < 9 * 30 minutes) {\n                return balance * 15 / 30;\n            } else if (elapsed < 12 * 30 minutes) {\n                return balance * 18 / 30;\n            } else if (elapsed < 15 * 30 minutes) {\n                return balance * 21 / 30;\n            } else if (elapsed < 18 * 30 minutes) {\n                return balance * 24 / 30;\n            } else if (elapsed < 21 * 30 minutes) {\n                return balance * 27 / 30;\n            } else {\n                return balance;\n            }\n        } else if (_type == ReleaseType.Team) {\n            if (elapsed < 12 * 30 minutes) {\n                return 0;\n            } else if (elapsed < 15 * 30 minutes) {\n                return balance / 4;\n            } else if (elapsed < 18 * 30 minutes) {\n                return balance * 2 / 4;\n            } else if (elapsed < 21 * 30 minutes) {\n                return balance * 3 / 4;\n            } else {\n                return balance;\n            }\n        } else if (_type == ReleaseType.Airdrop) {\n            if (elapsed < 3 * 30 minutes) {\n                return balance / 2;\n            } else {\n                return balance;\n            }\n        } else if (_type == ReleaseType.Contributor) {\n            if (elapsed < 12 * 30 minutes) {\n                return 0;\n            } else if (elapsed < 15 * 30 minutes) {\n                return balance / 4;\n            } else if (elapsed < 18 * 30 minutes) {\n                return balance * 2 / 4;\n            } else if (elapsed < 21 * 30 minutes) {\n                return balance * 3 / 4;\n            } else {\n                return balance;\n            }\n        }\n\n        // For unknown type which is quite impossible, return zero\n        return 0;\n\n    }\n\n    // Total balance including locked part\n    function totalBalanceOf(address _owner) public view returns (uint256) {\n        return _totalBalance[_owner].sub(_spentBalance[_owner]);\n    }\n\n    // Allowance is not affected by locking\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return _allowed[_owner][_spender];\n    }\n\n    // Set the release type of specified address\n    // Only contract owner could call this\n    function setReleaseType(address _target, ReleaseType _type) public onlyOwner {\n        require(_target != address(0));\n        _accountType[_target] = _type;\n    }\n\n    // Set reference time\n    // Only contract owner could call this\n    function setReferenceTime(uint256 newTime) public onlyOwner {\n        reference_time = newTime;\n    }\n\n    // Contract owner transfer\n    // Note that only current contract owner and \"Public\" addresses are exempt from locking\n    function ownerTransfer(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}",
  "bytecode": "6b204fce5e3e2502611000000060045560c0604052601560808190527f486172756b61205465737420546f6b656e20233031000000000000000000000060a090815261004e916005919061011c565b506040805180820190915260098082527f484152554b41543031000000000000000000000000000000000000000000000060209092019182526100939160069161011c565b506007805460ff1916601217905563773594006008553480156100b557600080fd5b5060078054610100600160a81b03191633610100908102919091178083556004546001600160a01b0391839004821660009081526001602081815260408084209490945595549490940490921682529281905291909120805460ff191690911790556101b7565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061015d57805160ff191683800117855561018a565b8280016001018555821561018a579182015b8281111561018a57825182559160200191906001019061016f565b5061019692915061019a565b5090565b6101b491905b8082111561019657600081556001016101a0565b90565b610be5806101c66000396000f3fe608060405234801561001057600080fd5b50600436106100c55760003560e01c806306fdde03146100ca578063095ea7b3146101475780631815c2081461018757806318160ddd146101af578063212918fb146101c957806323b872dd146101d1578063313ce567146102075780634b0ee02a1461022557806370a082311461024b5780638da5cb5b1461027157806395d89b41146102955780639c8aefda1461029d578063a9059cbb146102cc578063bc57d143146102f8578063dd62ed3e14610315575b600080fd5b6100d2610343565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561010c5781810151838201526020016100f4565b50505050905090810190601f1680156101395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101736004803603604081101561015d57600080fd5b506001600160a01b0381351690602001356103d9565b604080519115158252519081900360200190f35b6101ad6004803603602081101561019d57600080fd5b50356001600160a01b0316610455565b005b6101b76104eb565b60408051918252519081900360200190f35b6101b76104f1565b610173600480360360608110156101e757600080fd5b506001600160a01b038135811691602081013590911690604001356104f7565b61020f61056a565b6040805160ff9092168252519081900360200190f35b6101b76004803603602081101561023b57600080fd5b50356001600160a01b0316610573565b6101b76004803603602081101561026157600080fd5b50356001600160a01b03166105ae565b610279610964565b604080516001600160a01b039092168252519081900360200190f35b6100d2610978565b6101ad600480360360408110156102b357600080fd5b5080356001600160a01b0316906020013560ff166109d9565b610173600480360360408110156102e257600080fd5b506001600160a01b038135169060200135610a40565b6101ad6004803603602081101561030e57600080fd5b5035610a56565b6101b76004803603604081101561032b57600080fd5b506001600160a01b0381358116916020013516610a77565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103cf5780601f106103a4576101008083540402835291602001916103cf565b820191906000526020600020905b8154815290600101906020018083116103b257829003601f168201915b5050505050905090565b60006001600160a01b0383166103ee57600080fd5b3360008181526003602090815260408083206001600160a01b03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60075461010090046001600160a01b0316331461047157600080fd5b6001600160a01b03811661048457600080fd5b6007546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600780546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b60045490565b60085481565b6000610504848484610aa2565b6001600160a01b0380851660009081526003602090815260408083209387168352929052205461053a908363ffffffff610b8b16565b6001600160a01b038086166000908152600360209081526040808320938816835292905220555060019392505050565b60075460ff1690565b6001600160a01b03811660009081526002602090815260408083205460019092528220546105a69163ffffffff610b8b16565b90505b919050565b6001600160a01b03811660009081526020818152604080832054600283528184205460019093529083205460ff9091169183916105f09163ffffffff610b8b16565b6007549091506001600160a01b038581166101009092041614156106175791506105a99050565b60085442036193a8811061062f575091506105a99050565b600083600781111561063d57fe5b141561064d575091506105a99050565b600183600781111561065b57fe5b14156106ee5761151881101561067757600093505050506105a9565b612a30811015610690576006825b0493505050506105a9565b613f488110156106a557600660028302610685565b6154608110156106ba57600660038302610685565b6169788110156106cf57600660048302610685565b617e908110156106e457600660058302610685565b5091506105a99050565b60028360078111156106fc57fe5b141561075457612a3081101561071857600093505050506105a9565b613f4881101561072a57600482610685565b61546081101561073f57600460028302610685565b6169788110156106e457600460038302610685565b600383600781111561076257fe5b14156107fc5761151881101561077e57600093505050506105a9565b612a3081101561079357601460038302610685565b613f488110156107a857601460068302610685565b6154608110156107bd57601460098302610685565b6169788110156107d2576014600c8302610685565b617e908110156107e7576014600f8302610685565b6193a88110156106e457601460128302610685565b600483600781111561080a57fe5b14156108a35761151881101561082557601e60058302610685565b612a3081101561083a57601e600a8302610685565b613f4881101561084f57601e600f8302610685565b61546081101561086457601e60128302610685565b61697881101561087957601e60158302610685565b617e9081101561088e57601e60188302610685565b6193a88110156106e457601e601b8302610685565b60058360078111156108b157fe5b1415610909576154608110156108cd57600093505050506105a9565b6169788110156108df57600482610685565b617e908110156108f457600460028302610685565b6193a88110156106e457600460038302610685565b600683600781111561091757fe5b141561092f576115188110156106e457600282610685565b600783600781111561093d57fe5b1415610959576154608110156108cd57600093505050506105a9565b506000949350505050565b60075461010090046001600160a01b031681565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103cf5780601f106103a4576101008083540402835291602001916103cf565b60075461010090046001600160a01b031633146109f557600080fd5b6001600160a01b038216610a0857600080fd5b6001600160a01b0382166000908152602081905260409020805482919060ff19166001836007811115610a3757fe5b02179055505050565b6000610a4d338484610aa2565b50600192915050565b60075461010090046001600160a01b03163314610a7257600080fd5b600855565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b610aab836105ae565b811115610ab757600080fd5b6001600160a01b038216610aca57600080fd5b6001600160a01b038316600090815260026020526040902054610af3908263ffffffff610ba016565b6001600160a01b03808516600090815260026020908152604080832094909455918516815260019091522054610b2f908263ffffffff610ba016565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600082821115610b9a57600080fd5b50900390565b600082820183811015610bb257600080fd5b939250505056fea165627a7a723058208533a011d2b3b84169c294519e2d401bc5f99c0cfe10d876cb70e1518b2748e50029"
}