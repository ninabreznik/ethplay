{
  "address": "0x28e784b2aE288220Ac2760d34E04a6aFF65705f9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DKEHedge",
  "compilerVersion": "v0.4.26+commit.4563c3fc",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-08\n*/\n\npragma solidity ^0.4.17;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    require(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    ERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    require(token.approve(spender, value));\n  }\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title DKE hedge contract\n */\ncontract DKEHedge is Ownable {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20Basic;\n\n  event Released(uint256 amount);\n  event Revoked();\n\n  // beneficiary of tokens after they are released\n  address public beneficiary;\n  // start timestamp\n  uint256 public start;\n  // mt (cd or qt)\n  uint256 public mt;\n  // released list\n  uint256[] public released = new uint256[](39);\n\n  /**\n   * @dev DKE linear cycle release\n   * @param _beneficiary address of the beneficiary to whom vested DKE are transferred\n   * @param _mt MT，minimum value of 1\n   */\n  constructor(\n    address _beneficiary,\n    uint256 _mt\n  )\n    public\n  {\n    require(_beneficiary != address(0));\n    // require(_mt >= 100000000000);\n    require(_mt >= 100000000);\n\n    beneficiary = _beneficiary;\n    mt = _mt;\n    start = block.timestamp;\n  }\n\n  /**\n   * @notice Release record every day\n   */\n  function release(uint16 price) public onlyOwner {\n    uint256 idx = getCycleIndex();\n    // 39 days (39 * 24 * 3600) 3369600\n    require(idx >= 1 && idx <= 39);\n\n    // dke = mt / 39 * 0.13 / price\n    uint256 dke = mt.mul(1300).div(39).div(price);\n    released[idx.sub(1)] = dke;\n\n    emit Released(dke);\n  }\n\n  /**\n   * @notice release and revoke\n   * @param token DKEToken address\n   */\n  function revoke(uint16 price, ERC20Basic token) public onlyOwner {\n    uint256 income = getIncome(price);\n    uint256 balance = token.balanceOf(this);\n    if (balance <= income) {\n      token.safeTransfer(beneficiary, balance);\n    } else {\n      token.safeTransfer(beneficiary, income);\n      token.safeTransfer(owner, balance.sub(income));\n    }\n\n    emit Revoked();\n  }\n\n  /**\n   * @dev get cycle index\n   */\n  function getCycleIndex() public view returns (uint256) {\n    // 1 days （24 * 3600） 86400\n    return block.timestamp.sub(start).div(1800);\n  }\n\n  /**\n   * @dev get released list in 39 days\n   */\n  function getReleased() public view returns (uint256[]) {\n    return released;\n  }\n\n  /**\n   * @dev get income for DKE\n   */\n  function getIncome(uint16 price) public view returns (uint256) {\n    uint256 idx = getCycleIndex();\n    require(idx >= 39);\n\n    uint256 origin = mt.mul(13).div(100);\n\n    uint256 total = 0;\n\n    for(uint8 i = 0; i < released.length; i++) {\n      uint256 item = released[i];\n      total = total.add(item);\n    }\n\n    uint256 current = total.mul(price).div(10000);\n    if (current <= origin) {\n      current = origin;\n    } else {\n      current = current.add(current.sub(origin).mul(5).div(100));\n    }\n\n    return current.mul(10000).div(price);\n  }\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000009b61d7476db6febd63353f84f09b099f5f2814b50000000000000000000000000000000000000000000000000000000011e1a300"
}