{
  "address": "0xc40bf00de77912ea51c4cf1c517f761a9d0ad491",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AudigentAudience",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-30\n*/\n\npragma solidity ^0.4.21;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\ncontract AudigentAudience is Ownable {\n    struct Signature {\n        address partner;\n        address[] signatures;\n    }\n\n    mapping (uint256 => Signature) private _hashToSignature;\n    mapping (address => address) private _signerToPartner;\n\n    modifier onlyPartnerSigner(uint256 _hash) {\n        require(_signerToPartner[msg.sender] == _hashToSignature[_hash].partner);\n        _;\n    }\n\n    modifier onlySignerPartner(address _signer) {\n        require(_signerToPartner[_signer] == msg.sender);\n        _;\n    }\n\n    modifier onlyNewSigner(address _signer) {\n        if (_signerToPartner[_signer] == msg.sender) {\n            revert('Signer already assigned to this partner');\n        }\n        require(_signer != owner);\n        require(_signerToPartner[_signer] != _signer);\n        require(_signerToPartner[_signer] == address(0));\n        _;\n    }\n\n    modifier onlyHashPartner(uint256 _hash) {\n        require(_hashToSignature[_hash].partner == msg.sender);\n        _;\n    }\n\n    function createHash(uint256 _hash, address _partner) public onlyOwner {\n        if (_hashToSignature[_hash].partner != address(0)) {\n            revert('Hash already exists');\n        }\n        _hashToSignature[_hash] = Signature(_partner, new address[](0));\n    }\n\n    function transferHashOwnership(uint256 _hash, address _newOwner) public onlyHashPartner(_hash) {\n        require(_newOwner != address(0));\n        _hashToSignature[_hash].partner = _newOwner;\n    }\n\n    function addSigner(address _signer) public onlyNewSigner(_signer) {\n        _signerToPartner[_signer] = msg.sender;\n    }\n\n    function removeSigner(address _signer) public onlySignerPartner(_signer) {\n        _signerToPartner[_signer] = address(0);\n    }\n\n    function signHash(uint256 _hash) public onlyPartnerSigner(_hash) {\n        address[] memory signatures = _hashToSignature[_hash].signatures;\n\n        bool alreadySigned = false;\n        for (uint i = 0; i < signatures.length; i++) {\n            if (signatures[i] == msg.sender) {\n                alreadySigned = true;\n                break;\n            }\n        }\n        if (alreadySigned == true) {\n            revert('Hash already signed');\n        }\n\n        _hashToSignature[_hash].signatures.push(msg.sender);\n    }\n\n    function isHashSigned(uint256 _hash) public view returns (bool isSigned) {\n        return _hashToSignature[_hash].signatures.length > 0;\n    }\n\n    function getHashSignatures(uint256 _hash) public view returns (address[] signatures) {\n        return _hashToSignature[_hash].signatures;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"uint256\"}],\"name\":\"getHashSignatures\",\"outputs\":[{\"name\":\"signatures\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"removeSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"uint256\"}],\"name\":\"isHashSigned\",\"outputs\":[{\"name\":\"isSigned\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"uint256\"},{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferHashOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"uint256\"}],\"name\":\"signHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"uint256\"},{\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"createHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405260008054600160a060020a033316600160a060020a03199091161790556108cf806100306000396000f3006080604052600436106100975763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662d2c31d811461009c5780630e316ab7146101045780632039b3861461012757806359d998e41461015357806370b3d68c14610177578063769edf6a1461018f5780638da5cb5b146101b3578063eb12d61e146101e4578063f2fde38b14610205575b600080fd5b3480156100a857600080fd5b506100b4600435610226565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156100f05781810151838201526020016100d8565b505050509050019250505060405180910390f35b34801561011057600080fd5b50610125600160a060020a0360043516610295565b005b34801561013357600080fd5b5061013f6004356102e8565b604080519115158252519081900360200190f35b34801561015f57600080fd5b50610125600435600160a060020a03602435166102fe565b34801561018357600080fd5b5061012560043561036b565b34801561019b57600080fd5b50610125600435600160a060020a0360243516610519565b3480156101bf57600080fd5b506101c861062f565b60408051600160a060020a039092168252519081900360200190f35b3480156101f057600080fd5b50610125600160a060020a036004351661063e565b34801561021157600080fd5b50610125600160a060020a036004351661078c565b60008181526001602081815260409283902090910180548351818402810184019094528084526060939283018282801561028957602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161026b575b50505050509050919050565b600160a060020a0381811660009081526002602052604090205482913381169116146102c057600080fd5b50600160a060020a031660009081526002602052604090208054600160a060020a0319169055565b6000908152600160208190526040822001541190565b600082815260016020526040902054829033600160a060020a0390811691161461032757600080fd5b600160a060020a038216151561033c57600080fd5b506000918252600160205260409091208054600160a060020a031916600160a060020a03909216919091179055565b60008181526001602090815260408083205433600160a060020a039081168552600290935290832054606093928392869282169116146103aa57600080fd5b6000858152600160208181526040928390209091018054835181840281018401909452808452909183018282801561040b57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116103ed575b5050505050935060009250600091505b83518210156104695733600160a060020a0316848381518110151561043c57fe5b90602001906020020151600160a060020a0316141561045e5760019250610469565b60019091019061041b565b600183151514156104db57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4861736820616c7265616479207369676e656400000000000000000000000000604482015290519081900360640190fd5b50505060009182525060016020818152604083208201805492830181558352909120018054600160a060020a03191633600160a060020a0316179055565b60005433600160a060020a0390811691161461053457600080fd5b600082815260016020526040902054600160a060020a0316156105b857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4861736820616c72656164792065786973747300000000000000000000000000604482015290519081900360640190fd5b604080518082018252600160a060020a03831681528151600080825260208281019094529192830191509052600083815260016020818152604090922083518154600160a060020a031916600160a060020a03909116178155838301518051919361062893850192910190610817565b5050505050565b600054600160a060020a031681565b600160a060020a038181166000908152600260205260409020548291338116911614156106f257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f5369676e657220616c72656164792061737369676e656420746f20746869732060448201527f706172746e657200000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600054600160a060020a038281169116141561070d57600080fd5b600160a060020a03808216600081815260026020526040902054909116141561073557600080fd5b600160a060020a03818116600090815260026020526040902054161561075a57600080fd5b50600160a060020a0390811660009081526002602052604090208054600160a060020a03191633909216919091179055565b60005433600160a060020a039081169116146107a757600080fd5b600160a060020a03811615156107bc57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b82805482825590600052602060002090810192821561086c579160200282015b8281111561086c5782518254600160a060020a031916600160a060020a03909116178255602090920191600190910190610837565b5061087892915061087c565b5090565b6108a091905b80821115610878578054600160a060020a0319168155600101610882565b905600a165627a7a723058202638e0e44ec6e5463937a5cd180459647bbf4bb9b6894d45ddd89770ec80831c0029"
}