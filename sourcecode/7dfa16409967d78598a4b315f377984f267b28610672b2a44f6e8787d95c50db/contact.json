{
  "address": "0xe5a724c8b9514327102feb9fe5f8f3d7813c91bc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NokuCustomReservationService",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-11\n*/\n\npragma solidity ^0.4.23;\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: contracts/Administrable.sol\n\n/**\n * @title Administrable\n * @dev Base contract extending Ownable with support for administration capabilities.\n */\ncontract Administrable is Ownable {\n\n    event LogAdministratorAdded(address indexed caller, address indexed administrator);\n    event LogAdministratorRemoved(address indexed caller, address indexed administrator);\n\n    mapping (address => bool) private administrators;\n\n    modifier onlyAdministrator() {\n        require(administrators[msg.sender], \"caller is not administrator\");\n        _;\n    }\n\n    constructor() internal {\n        administrators[msg.sender] = true;\n\n        emit LogAdministratorAdded(msg.sender, msg.sender);\n    }\n\n    /**\n     * Add a new administrator to the list.\n     * @param newAdministrator The administrator address to add.\n     */\n    function addAdministrator(address newAdministrator) public onlyOwner {\n        require(newAdministrator != address(0), \"newAdministrator is zero\");\n        require(!administrators[newAdministrator], \"newAdministrator is already present\");\n\n        administrators[newAdministrator] = true;\n\n        emit LogAdministratorAdded(msg.sender, newAdministrator);\n    }\n\n    /**\n     * Remove an existing administrator from the list.\n     * @param oldAdministrator The administrator address to remove.\n     */\n    function removeAdministrator(address oldAdministrator) public onlyOwner {\n        require(oldAdministrator != address(0), \"oldAdministrator is zero\");\n        require(administrators[oldAdministrator], \"oldAdministrator is not present\");\n\n        administrators[oldAdministrator] = false;\n\n        emit LogAdministratorRemoved(msg.sender, oldAdministrator);\n    }\n\n    /**\n     * @return true if target address has administrator privileges, false otherwise\n     */\n    function isAdministrator(address target) public view returns(bool isReallyAdministrator) {\n        return administrators[target];\n    }\n\n    /**\n     * Transfer ownership taking administration privileges into account.\n     * @param newOwner The new contract owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        administrators[msg.sender] = false;\n        emit LogAdministratorRemoved(msg.sender, msg.sender);\n\n        administrators[newOwner] = true;\n        emit LogAdministratorAdded(msg.sender, newOwner);\n\n        Ownable.transferOwnership(newOwner);\n    }\n}\n\n// File: contracts/TokenSale.sol\n\ncontract TokenSale {\n    /**\n    * Buy tokens for the beneficiary using paid Ether.\n    * @param beneficiary the beneficiary address that will receive the tokens.\n    */\n    function buyTokens(address beneficiary) public payable;\n}\n\n// File: contracts/WhitelistableConstraints.sol\n\n/**\n * @title WhitelistableConstraints\n * @dev Contract encapsulating the constraints applicable to a Whitelistable contract.\n */\ncontract WhitelistableConstraints {\n\n    /**\n     * @dev Check if whitelist with specified parameters is allowed.\n     * @param _maxWhitelistLength The maximum length of whitelist. Zero means no whitelist.\n     * @param _weiWhitelistThresholdBalance The threshold balance triggering whitelist check.\n     * @return true if whitelist with specified parameters is allowed, false otherwise\n     */\n    function isAllowedWhitelist(uint256 _maxWhitelistLength, uint256 _weiWhitelistThresholdBalance)\n        public pure returns(bool isReallyAllowedWhitelist) {\n        return _maxWhitelistLength > 0 || _weiWhitelistThresholdBalance > 0;\n    }\n}\n\n// File: contracts/Whitelistable.sol\n\n/**\n * @title Whitelistable\n * @dev Base contract implementing a whitelist to keep track of investors.\n * The construction parameters allow for both whitelisted and non-whitelisted contracts:\n * 1) maxWhitelistLength = 0 and whitelistThresholdBalance > 0: whitelist disabled\n * 2) maxWhitelistLength > 0 and whitelistThresholdBalance = 0: whitelist enabled, full whitelisting\n * 3) maxWhitelistLength > 0 and whitelistThresholdBalance > 0: whitelist enabled, partial whitelisting\n */\ncontract Whitelistable is WhitelistableConstraints {\n\n    event LogMaxWhitelistLengthChanged(address indexed caller, uint256 indexed maxWhitelistLength);\n    event LogWhitelistThresholdBalanceChanged(address indexed caller, uint256 indexed whitelistThresholdBalance);\n    event LogWhitelistAddressAdded(address indexed caller, address indexed subscriber);\n    event LogWhitelistAddressRemoved(address indexed caller, address indexed subscriber);\n\n    mapping (address => bool) public whitelist;\n\n    uint256 public whitelistLength;\n\n    uint256 public maxWhitelistLength;\n\n    uint256 public whitelistThresholdBalance;\n\n    constructor(uint256 _maxWhitelistLength, uint256 _whitelistThresholdBalance) internal {\n        require(isAllowedWhitelist(_maxWhitelistLength, _whitelistThresholdBalance), \"parameters not allowed\");\n\n        maxWhitelistLength = _maxWhitelistLength;\n        whitelistThresholdBalance = _whitelistThresholdBalance;\n    }\n\n    /**\n     * @return true if whitelist is currently enabled, false otherwise\n     */\n    function isWhitelistEnabled() public view returns(bool isReallyWhitelistEnabled) {\n        return maxWhitelistLength > 0;\n    }\n\n    /**\n     * @return true if subscriber is whitelisted, false otherwise\n     */\n    function isWhitelisted(address _subscriber) public view returns(bool isReallyWhitelisted) {\n        return whitelist[_subscriber];\n    }\n\n    function setMaxWhitelistLengthInternal(uint256 _maxWhitelistLength) internal {\n        require(isAllowedWhitelist(_maxWhitelistLength, whitelistThresholdBalance),\n            \"_maxWhitelistLength not allowed\");\n        require(_maxWhitelistLength != maxWhitelistLength, \"_maxWhitelistLength equal to current one\");\n\n        maxWhitelistLength = _maxWhitelistLength;\n\n        emit LogMaxWhitelistLengthChanged(msg.sender, maxWhitelistLength);\n    }\n\n    function setWhitelistThresholdBalanceInternal(uint256 _whitelistThresholdBalance) internal {\n        require(isAllowedWhitelist(maxWhitelistLength, _whitelistThresholdBalance),\n            \"_whitelistThresholdBalance not allowed\");\n        require(whitelistLength == 0 || _whitelistThresholdBalance > whitelistThresholdBalance,\n            \"_whitelistThresholdBalance not greater than current one\");\n\n        whitelistThresholdBalance = _whitelistThresholdBalance;\n\n        emit LogWhitelistThresholdBalanceChanged(msg.sender, _whitelistThresholdBalance);\n    }\n\n    function addToWhitelistInternal(address _subscriber) internal {\n        require(_subscriber != address(0), \"_subscriber is zero\");\n        require(!whitelist[_subscriber], \"already whitelisted\");\n        require(whitelistLength < maxWhitelistLength, \"max whitelist length reached\");\n\n        whitelistLength++;\n\n        whitelist[_subscriber] = true;\n\n        emit LogWhitelistAddressAdded(msg.sender, _subscriber);\n    }\n\n    function removeFromWhitelistInternal(address _subscriber, uint256 _balance) internal {\n        require(_subscriber != address(0), \"_subscriber is zero\");\n        require(whitelist[_subscriber], \"not whitelisted\");\n        require(_balance <= whitelistThresholdBalance, \"_balance greater than whitelist threshold\");\n\n        assert(whitelistLength > 0);\n\n        whitelistLength--;\n\n        whitelist[_subscriber] = false;\n\n        emit LogWhitelistAddressRemoved(msg.sender, _subscriber);\n    }\n\n    /**\n     * @param _subscriber The subscriber for which the balance check is required.\n     * @param _balance The balance value to check for allowance.\n     * @return true if the balance is allowed for the subscriber, false otherwise\n     */\n    function isAllowedBalance(address _subscriber, uint256 _balance) public view returns(bool isReallyAllowed) {\n        return !isWhitelistEnabled() || _balance <= whitelistThresholdBalance || whitelist[_subscriber];\n    }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/MultipleBidReservation.sol\n\n/**\n * A multiple-bid Reservation Contract (RC) for early deposit collection and manual token bid during\n * the Initial Coin Offering (ICO) crowdsale events.\n * The RC implements the following spec:\n * - investors allowed to simply send ethers to the RC address\n * - investors allowed to get refunded after ICO event if RC failed\n * - multiple bids using investor addresses performed by owner or authorized administator\n * - maximum cap on the total balance\n * - minimum threshold on each subscriber balance\n * - maximum number of subscribers\n * - optional whitelist with max deposit threshold for non-whitelisted subscribers\n * - kill switch callable by owner or authorized administator\n * - withdraw pattern for refunding\n * Just the RC owner or an authorized administator is allowed to shutdown the lifecycle halting the\n * RC; no bounties are provided.\n */\ncontract MultipleBidReservation is Administrable, Whitelistable {\n    using SafeMath for uint256;\n\n    event LogMultipleBidReservationCreated(\n        uint256 indexed startBlock,\n        uint256 indexed endBlock,\n        uint256 maxSubscribers,\n        uint256 maxCap,\n        uint256 minDeposit,\n        uint256 maxWhitelistLength,\n        uint256 indexed whitelistThreshold\n    );\n    event LogStartBlockChanged(uint256 indexed startBlock);\n    event LogEndBlockChanged(uint256 indexed endBlock);\n    event LogMaxCapChanged(uint256 indexed maxCap);\n    event LogMinDepositChanged(uint256 indexed minDeposit);\n    event LogMaxSubscribersChanged(uint256 indexed maxSubscribers);\n    event LogCrowdsaleAddressChanged(address indexed crowdsale);\n    event LogAbort(address indexed caller);\n    event LogDeposit(\n        address indexed subscriber,\n        uint256 indexed amount,\n        uint256 indexed balance,\n        uint256 raisedFunds\n    );\n    event LogBuy(address caller, uint256 indexed from, uint256 indexed to);\n    event LogRefund(address indexed subscriber, uint256 indexed amount, uint256 indexed raisedFunds);\n\n    // The block interval [start, end] where investments are allowed (both inclusive)\n    uint256 public startBlock;\n    uint256 public endBlock;\n\n    // RC maximum cap (expressed in wei)\n    uint256 public maxCap;\n\n    // RC minimum balance per subscriber (expressed in wei)\n    uint256 public minDeposit;\n\n    // RC maximum number of allowed subscribers\n    uint256 public maxSubscribers;\n\n    // Crowdsale public address\n    TokenSale public crowdsale;\n\n    // RC current raised balance expressed in wei\n    uint256 public raisedFunds;\n\n    // ERC20-compliant token issued during ICO\n    ERC20 public token;\n\n    // Reservation balances (expressed in wei) deposited by each subscriber\n    mapping (address => uint256) public balances;\n\n    // The list of subscribers in incoming order\n    address[] public subscribers;\n\n    // Flag indicating if reservation has been forcibly terminated\n    bool public aborted;\n\n    // The maximum value for whitelist threshold in wei\n    uint256 constant public MAX_WHITELIST_THRESHOLD = 2**256 - 1;\n\n    modifier beforeStart() {\n        require(block.number < startBlock, \"already started\");\n        _;\n    }\n\n    modifier beforeEnd() {\n        require(block.number <= endBlock, \"already ended\");\n        _;\n    }\n\n    modifier whenReserving() {\n        require(!aborted, \"aborted\");\n        _;\n    }\n\n    modifier whenAborted() {\n        require(aborted, \"not aborted\");\n        _;\n    }\n\n    constructor(\n        uint256 _startBlock,\n        uint256 _endBlock,\n        uint256 _maxSubscribers,\n        uint256 _maxCap,\n        uint256 _minDeposit,\n        uint256 _maxWhitelistLength,\n        uint256 _whitelistThreshold\n    )\n    Whitelistable(_maxWhitelistLength, _whitelistThreshold) public\n    {\n        require(_startBlock >= block.number, \"_startBlock < current block\");\n        require(_endBlock >= _startBlock, \"_endBlock < _startBlock\");\n        require(_maxSubscribers > 0, \"_maxSubscribers is 0\");\n        require(_maxCap > 0, \"_maxCap is 0\");\n        require(_minDeposit > 0, \"_minDeposit is 0\");\n\n        startBlock = _startBlock;\n        endBlock = _endBlock;\n        maxSubscribers = _maxSubscribers;\n        maxCap = _maxCap;\n        minDeposit = _minDeposit;\n\n        emit LogMultipleBidReservationCreated(\n            startBlock,\n            endBlock,\n            maxSubscribers,\n            maxCap,\n            minDeposit,\n            _maxWhitelistLength,\n            _whitelistThreshold\n        );\n    }\n\n    function hasStarted() public view returns(bool started) {\n        return block.number >= startBlock;\n    }\n\n    function hasEnded() public view returns(bool ended) {\n        return block.number > endBlock;\n    }\n\n    /**\n     * @return The current number of RC subscribers\n     */\n    function numSubscribers() public view returns(uint256 numberOfSubscribers) {\n        return subscribers.length;\n    }\n\n    /**\n     * Change the RC start block number.\n     * @param _startBlock The start block\n     */\n    function setStartBlock(uint256 _startBlock) external onlyOwner beforeStart whenReserving {\n        require(_startBlock >= block.number, \"_startBlock < current block\");\n        require(_startBlock <= endBlock, \"_startBlock > endBlock\");\n        require(_startBlock != startBlock, \"_startBlock == startBlock\");\n\n        startBlock = _startBlock;\n\n        emit LogStartBlockChanged(_startBlock);\n    }\n\n    /**\n     * Change the RC end block number.\n     * @param _endBlock The end block\n     */\n    function setEndBlock(uint256 _endBlock) external onlyOwner beforeEnd whenReserving {\n        require(_endBlock >= block.number, \"_endBlock < current block\");\n        require(_endBlock >= startBlock, \"_endBlock < startBlock\");\n        require(_endBlock != endBlock, \"_endBlock == endBlock\");\n\n        endBlock = _endBlock;\n\n        emit LogEndBlockChanged(_endBlock);\n    }\n\n    /**\n     * Change the RC maximum cap. New value shall be at least equal to raisedFunds.\n     * @param _maxCap The RC maximum cap, expressed in wei\n     */\n    function setMaxCap(uint256 _maxCap) external onlyOwner beforeEnd whenReserving {\n        require(_maxCap > 0 && _maxCap >= raisedFunds, \"invalid _maxCap\");\n\n        maxCap = _maxCap;\n\n        emit LogMaxCapChanged(maxCap);\n    }\n\n    /**\n     * Change the minimum deposit for each RC subscriber. New value shall be lower than previous.\n     * @param _minDeposit The minimum deposit for each RC subscriber, expressed in wei\n     */\n    function setMinDeposit(uint256 _minDeposit) external onlyOwner beforeEnd whenReserving {\n        require(_minDeposit > 0 && _minDeposit < minDeposit, \"_minDeposit not in (0, minDeposit)\");\n\n        minDeposit = _minDeposit;\n\n        emit LogMinDepositChanged(minDeposit);\n    }\n\n    /**\n     * Change the maximum number of accepted RC subscribers. New value shall be at least equal to the current\n     * number of subscribers.\n     * @param _maxSubscribers The maximum number of subscribers\n     */\n    function setMaxSubscribers(uint256 _maxSubscribers) external onlyOwner beforeEnd whenReserving {\n        require(_maxSubscribers > 0 && _maxSubscribers >= subscribers.length, \"invalid _maxSubscribers\");\n\n        maxSubscribers = _maxSubscribers;\n\n        emit LogMaxSubscribersChanged(maxSubscribers);\n    }\n\n    /**\n     * Change the ICO crowdsale address.\n     * @param _crowdsale The ICO crowdsale address\n     */\n    function setCrowdsaleAddress(address _crowdsale) external onlyOwner whenReserving {\n        require(_crowdsale != address(0), \"_crowdsale is 0\");\n\n        crowdsale = TokenSale(_crowdsale);\n\n        emit LogCrowdsaleAddressChanged(_crowdsale);\n    }\n\n    /**\n     * Change the maximum whitelist length. New value shall satisfy the #isAllowedWhitelist conditions.\n     * @param _maxWhitelistLength The maximum whitelist length\n     */\n    function setMaxWhitelistLength(uint256 _maxWhitelistLength) external onlyOwner beforeEnd whenReserving {\n        setMaxWhitelistLengthInternal(_maxWhitelistLength);\n    }\n\n    /**\n     * Change the whitelist threshold balance. New value shall satisfy the #isAllowedWhitelist conditions.\n     * @param _whitelistThreshold The threshold balance (in wei) above which whitelisting is required to invest\n     */\n    function setWhitelistThresholdBalance(uint256 _whitelistThreshold) external onlyOwner beforeEnd whenReserving {\n        setWhitelistThresholdBalanceInternal(_whitelistThreshold);\n    }\n\n    /**\n     * Add the subscriber to the whitelist.\n     * @param _subscriber The subscriber to add to the whitelist.\n     */\n    function addToWhitelist(address _subscriber) external onlyOwner beforeEnd whenReserving {\n        addToWhitelistInternal(_subscriber);\n    }\n\n    /**\n     * Removed the subscriber from the whitelist.\n     * @param _subscriber The subscriber to remove from the whitelist.\n     */\n    function removeFromWhitelist(address _subscriber) external onlyOwner beforeEnd whenReserving {\n        removeFromWhitelistInternal(_subscriber, balances[_subscriber]);\n    }\n\n    /**\n     * Abort the contract before the ICO start time. An administrator is allowed to use this 'kill switch'\n     * to deactivate any contract function except the investor refunding.\n     */\n    function abort() external onlyAdministrator whenReserving {\n        aborted = true;\n\n        emit LogAbort(msg.sender);\n    }\n\n    /**\n     * Let the caller invest its money before the ICO start time.\n     */\n    function invest() external payable whenReserving {\n        deposit(msg.sender, msg.value);\n    }\n\n    /**\n     * Execute a batch of multiple bids into the ICO crowdsale.\n     * @param _from The subscriber index, included, from which the batch starts.\n     * @param _to The subscriber index, excluded, to which the batch ends.\n     */\n    function buy(uint256 _from, uint256 _to) external onlyAdministrator whenReserving {\n        require(_from < _to, \"_from >= _to\");\n        require(crowdsale != address(0), \"crowdsale not set\");\n        require(subscribers.length > 0, \"subscribers size is 0\");\n        require(hasEnded(), \"not ended\");\n\n        uint to = _to > subscribers.length ? subscribers.length : _to;\n\n        for (uint256 i=_from; i<to; i++) {\n            address subscriber = subscribers[i];\n\n            uint256 subscriberBalance = balances[subscriber];\n\n            if (subscriberBalance > 0) {\n                balances[subscriber] = 0;\n\n                crowdsale.buyTokens.value(subscriberBalance)(subscriber);\n            }\n        }\n\n        emit LogBuy(msg.sender, _from, _to);\n    }\n\n    /**\n     * Refund the invested money to the caller after the RC termination.\n     */\n    function refund() external whenAborted {\n        // Read the calling subscriber balance once\n        uint256 subscriberBalance = balances[msg.sender];\n\n        // Withdraw is allowed IFF the calling subscriber has not zero balance\n        require(subscriberBalance > 0, \"caller balance is 0\");\n\n        // Withdraw is allowed IFF the contract has some token balance\n        require(raisedFunds > 0, \"token balance is 0\");\n\n        // Safely decrease the total balance\n        raisedFunds = raisedFunds.sub(subscriberBalance);\n\n        // Clear the subscriber balance before transfer to prevent re-entrant attacks\n        balances[msg.sender] = 0;\n\n        emit LogRefund(msg.sender, subscriberBalance, raisedFunds);\n\n        // Transfer the balance back to the calling subscriber or throws on error\n        msg.sender.transfer(subscriberBalance);\n    }\n\n    /**\n     * Allow investing by just sending money to the contract address.\n     */\n    function () external payable whenReserving {\n        deposit(msg.sender, msg.value);\n    }\n\n    /**\n     * Deposit the money amount for the beneficiary when RC is running.\n     */\n    function deposit(address beneficiary, uint256 amount) internal {\n        // Deposit is allowed IFF the RC is currently running\n        require(startBlock <= block.number && block.number <= endBlock, \"not open\");\n\n        uint256 newRaisedFunds = raisedFunds.add(amount);\n\n        // Deposit is allowed IFF the contract balance will not reach its maximum cap\n        require(newRaisedFunds <= maxCap, \"over max cap\");\n\n        uint256 currentBalance = balances[beneficiary];\n        uint256 finalBalance = currentBalance.add(amount);\n\n        // Deposit is allowed IFF investor deposit shall be at least equal to the minimum deposit threshold\n        require(finalBalance >= minDeposit, \"deposit < min deposit\");\n\n        // Balances over whitelist threshold are allowed IFF the sender is in whitelist\n        require(isAllowedBalance(beneficiary, finalBalance), \"balance not allowed\");\n\n        // Increase the subscriber count if sender does not have a balance yet\n        if (currentBalance == 0) {\n            // New subscribers are allowed IFF the contract has not yet the max number of subscribers\n            require(subscribers.length < maxSubscribers, \"max subscribers reached\");\n\n            subscribers.push(beneficiary);\n        }\n\n        // Add the received amount to the subscriber balance\n        balances[beneficiary] = finalBalance;\n\n        raisedFunds = newRaisedFunds;\n\n        emit LogDeposit(beneficiary, amount, finalBalance, newRaisedFunds);\n    }\n}\n\n// File: contracts/NokuCustomReservation.sol\n\n/**\n * @title NokuCustomReservation\n * @dev Extension of MultipleBidReservation.\n */\ncontract NokuCustomReservation is MultipleBidReservation {\n    event LogNokuCustomReservationCreated();\n\n    constructor(\n        uint256 _startBlock,\n        uint256 _endBlock,\n        uint256 _maxSubscribers,\n        uint256 _maxCap,\n        uint256 _minDeposit,\n        uint256 _maxWhitelistLength,\n        uint256 _whitelistThreshold\n    )\n    MultipleBidReservation(\n        _startBlock,\n        _endBlock,\n        _maxSubscribers,\n        _maxCap,\n        _minDeposit,\n        _maxWhitelistLength,\n        _whitelistThreshold\n    )\n    public {\n        emit LogNokuCustomReservationCreated();\n    }\n}\n\n// File: contracts/NokuPricingPlan.sol\n\n/**\n* @dev The NokuPricingPlan contract defines the responsibilities of a Noku pricing plan.\n*/\ncontract NokuPricingPlan {\n    /**\n    * @dev Pay the fee for the service identified by the specified name.\n    * The fee amount shall already be approved by the client.\n    * @param serviceName The name of the target service.\n    * @param multiplier The multiplier of the base service fee to apply.\n    * @param client The client of the target service.\n    * @return true if fee has been paid.\n    */\n    function payFee(bytes32 serviceName, uint256 multiplier, address client) public returns(bool paid);\n\n    /**\n    * @dev Get the usage fee for the service identified by the specified name.\n    * The returned fee amount shall be approved before using #payFee method.\n    * @param serviceName The name of the target service.\n    * @param multiplier The multiplier of the base service fee to apply.\n    * @return The amount to approve before really paying such fee.\n    */\n    function usageFee(bytes32 serviceName, uint256 multiplier) public constant returns(uint fee);\n}\n\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   *  as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\n    return size > 0;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: contracts/NokuCustomService.sol\n\ncontract NokuCustomService is Pausable {\n    using AddressUtils for address;\n\n    event LogPricingPlanChanged(address indexed caller, address indexed pricingPlan);\n\n    // The pricing plan determining the fee to be paid in NOKU tokens by customers\n    NokuPricingPlan public pricingPlan;\n\n    constructor(address _pricingPlan) internal {\n        require(_pricingPlan.isContract(), \"_pricingPlan is not contract\");\n\n        pricingPlan = NokuPricingPlan(_pricingPlan);\n    }\n\n    function setPricingPlan(address _pricingPlan) public onlyOwner {\n        require(_pricingPlan.isContract(), \"_pricingPlan is not contract\");\n        require(NokuPricingPlan(_pricingPlan) != pricingPlan, \"_pricingPlan equal to current\");\n        \n        pricingPlan = NokuPricingPlan(_pricingPlan);\n\n        emit LogPricingPlanChanged(msg.sender, _pricingPlan);\n    }\n}\n\n// File: contracts/NokuCustomReservationService.sol\n\n/**\n * @title NokuCustomReservationService\n * @dev Extension of NokuCustomService adding the fee payment in NOKU tokens.\n */\ncontract NokuCustomReservationService is NokuCustomService {\n    event LogNokuCustomReservationServiceCreated(address indexed caller);\n\n    bytes32 public constant SERVICE_NAME = \"NokuCustomERC20.reservation\";\n    uint256 public constant CREATE_AMOUNT = 1 * 10**18;\n\n    constructor(address _pricingPlan) NokuCustomService(_pricingPlan) public {\n        emit LogNokuCustomReservationServiceCreated(msg.sender);\n    }\n\n    function createCustomReservation(\n        uint256 _startBlock,\n        uint256 _endBlock,\n        uint256 _maxSubscribers,\n        uint256 _maxCap,\n        uint256 _minDeposit,\n        uint256 _maxWhitelistLength,\n        uint256 _whitelistThreshold\n    )\n    public returns(NokuCustomReservation customReservation)\n    {\n        customReservation = new NokuCustomReservation(\n            _startBlock,\n            _endBlock,\n            _maxSubscribers,\n            _maxCap,\n            _minDeposit,\n            _maxWhitelistLength,\n            _whitelistThreshold\n        );\n\n        // Transfer NokuCustomReservation ownership to the client\n        customReservation.transferOwnership(msg.sender);\n\n        require(pricingPlan.payFee(SERVICE_NAME, CREATE_AMOUNT, msg.sender), \"fee payment failed\");\n    }\n}",
  "bytecode": "60806040526000805460a060020a60ff021916905534801561002057600080fd5b50604051602080613552833981016040525160008054600160a060020a03191633600160a060020a0390811691909117909155819061006d90821664010000000061012a81026107fb1704565b15156100da57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5f70726963696e67506c616e206973206e6f7420636f6e747261637400000000604482015290519081900360640190fd5b60018054600160a060020a031916600160a060020a0392831617905560405133909116907fba13997e73c8ba591ebd5d13ba15dcd2284ea912bea64b54f7759db9c5f9362c90600090a250610132565b6000903b1190565b613411806101416000396000f300608060405260043610620000ae5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633f4ba83a8114620000b357806345fc916c14620000cd5780635c975abb14620000f15780638456cb59146200011d5780638da5cb5b1462000135578063d6c12f881462000169578063d72e3de11462000181578063e3f305c514620001ae578063f2fde38b14620001d8578063f97944e014620001fc575b600080fd5b348015620000c057600080fd5b50620000cb62000214565b005b348015620000da57600080fd5b50620000cb600160a060020a0360043516620002a1565b348015620000fe57600080fd5b50620001096200041a565b604080519115158252519081900360200190f35b3480156200012a57600080fd5b50620000cb6200043b565b3480156200014257600080fd5b506200014d620004de565b60408051600160a060020a039092168252519081900360200190f35b3480156200017657600080fd5b506200014d620004ed565b3480156200018e57600080fd5b506200014d60043560243560443560643560843560a43560c435620004fc565b348015620001bb57600080fd5b50620001c662000731565b60408051918252519081900360200190f35b348015620001e557600080fd5b50620000cb600160a060020a036004351662000755565b3480156200020957600080fd5b50620001c6620007ef565b60005433600160a060020a039081169116146200023057600080fd5b60005474010000000000000000000000000000000000000000900460ff1615156200025a57600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b60005433600160a060020a03908116911614620002bd57600080fd5b620002d181600160a060020a0316620007fb565b15156200033f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5f70726963696e67506c616e206973206e6f7420636f6e747261637400000000604482015290519081900360640190fd5b600154600160a060020a0382811691161415620003bd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5f70726963696e67506c616e20657175616c20746f2063757272656e74000000604482015290519081900360640190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691821790925560405190913316907f9c9a71911f32ca6a40ea2146f75e1c43335f2862b3c1c9696d22cd10e86311c290600090a350565b60005474010000000000000000000000000000000000000000900460ff1681565b60005433600160a060020a039081169116146200045757600080fd5b60005474010000000000000000000000000000000000000000900460ff16156200048057600080fd5b6000805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b600054600160a060020a031681565b600154600160a060020a031681565b6000878787878787876200050f62000803565b96875260208701959095526040808701949094526060860192909252608085015260a084015260c0830191909152519081900360e001906000f0801580156200055c573d6000803e3d6000fd5b50905080600160a060020a031663f2fde38b336040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a03168152602001915050600060405180830381600087803b158015620005d457600080fd5b505af1158015620005e9573d6000803e3d6000fd5b5050600154604080517fd30b53860000000000000000000000000000000000000000000000000000000081527f4e6f6b75437573746f6d45524332302e7265736572766174696f6e00000000006004820152670de0b6b3a76400006024820152600160a060020a033381166044830152915191909216935063d30b5386925060648083019260209291908290030181600087803b1580156200068a57600080fd5b505af11580156200069f573d6000803e3d6000fd5b505050506040513d6020811015620006b657600080fd5b505115156200072657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f666565207061796d656e74206661696c65640000000000000000000000000000604482015290519081900360640190fd5b979650505050505050565b7f4e6f6b75437573746f6d45524332302e7265736572766174696f6e000000000081565b60005433600160a060020a039081169116146200077157600080fd5b600160a060020a03811615156200078757600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b670de0b6b3a764000081565b6000903b1190565b604051612bd1806200081583390190560060806040523480156200001157600080fd5b5060405160e08062002bd18339810160408181528251602080850151838601516060870151608088015160a089015160c09099015160008054600160a060020a03191633600160a060020a03169081178255808252600197889052988120805460ff191690971790965595989397929691959094909289928992899289928992899289928492849282917f7b0ebb85b3e4339f3168d663c8c9dc718d009cdccce86a25853e636fb2e5e40591a3620000d382826401000000006200041f810204565b15156200014157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f706172616d6574657273206e6f7420616c6c6f77656400000000000000000000604482015290519081900360640190fd5b60049190915560055543871015620001ba57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f5f7374617274426c6f636b203c2063757272656e7420626c6f636b0000000000604482015290519081900360640190fd5b868610156200022a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5f656e64426c6f636b203c205f7374617274426c6f636b000000000000000000604482015290519081900360640190fd5b600085116200029a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5f6d617853756273637269626572732069732030000000000000000000000000604482015290519081900360640190fd5b600084116200030a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5f6d617843617020697320300000000000000000000000000000000000000000604482015290519081900360640190fd5b600083116200037a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5f6d696e4465706f736974206973203000000000000000000000000000000000604482015290519081900360640190fd5b60068790556007869055600a859055600884905560098390556040805186815260208101869052808201859052606081018490529051829188918a917f7452c70faf334d65f3000cfeae67bbb138ef3ce4e36e43f0ac4a64fca137375d919081900360800190a450506040517f399d4c4a37688f9ff574c1347899c775a763928c10225b3b6c3e879dade42afa95506000945092505050a15050505050505062000437565b600080831180620004305750600082115b9392505050565b61278a80620004476000396000f3006080604052600436106102035763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630317c06e8114610257578063083c63231461028f5780630a2eb301146102b6578063184d69ab146102d75780631f35bc40146102ec57806323548b8b1461030d57806327e235e3146103225780633405ae401461034357806335a063b41461035b5780633af32abf1461037057806341b3d1851461039157806344691f7e146103a657806348cd4cb1146103bb578063590e1ae3146103d057806359221a68146103e55780635d1cc97c146104195780636606224f1461042e57806366e8730f1461044357806368fa813414610458578063763265de1461047957806378bb5164146104915780637e737551146104a657806380b62b70146104be5780638ab1d681146104d35780638da5cb5b146104f45780638fcc9cfb146105095780639b19251a146105215780639c1e03a0146105425780639c7ab76714610557578063c713aa941461056c578063c999117614610584578063ca5a3b4a146105a5578063d6febde8146105c0578063dfb8dca9146105db578063e43252d7146105f0578063e5560a5914610611578063e8b5e51f14610626578063ecb70fb71461062e578063f2fde38b14610643578063f35e4a6e14610664578063fc0c546a1461067c578063fe164a5b14610691575b60105460ff161561024b576040805160e560020a62461bcd028152602060048201526007602482015260ca60020a6618589bdc9d195902604482015290519081900360640190fd5b61025533346106a9565b005b34801561026357600080fd5b5061027b600160a060020a036004351660243561098c565b604080519115158252519081900360200190f35b34801561029b57600080fd5b506102a46109ce565b60408051918252519081900360200190f35b3480156102c257600080fd5b5061027b600160a060020a03600435166109d4565b3480156102e357600080fd5b5061027b6109f2565b3480156102f857600080fd5b50610255600160a060020a03600435166109fb565b34801561031957600080fd5b506102a4610b15565b34801561032e57600080fd5b506102a4600160a060020a0360043516610b1b565b34801561034f57600080fd5b50610255600435610b2d565b34801561036757600080fd5b50610255610c73565b34801561037c57600080fd5b5061027b600160a060020a0360043516610d70565b34801561039d57600080fd5b506102a4610d8e565b3480156103b257600080fd5b5061027b610d94565b3480156103c757600080fd5b506102a4610d9d565b3480156103dc57600080fd5b50610255610da3565b3480156103f157600080fd5b506103fd600435610f65565b60408051600160a060020a039092168252519081900360200190f35b34801561042557600080fd5b506102a4610f8d565b34801561043a57600080fd5b506102a4610f93565b34801561044f57600080fd5b506102a4610f99565b34801561046457600080fd5b50610255600160a060020a0360043516610f9f565b34801561048557600080fd5b506102556004356110db565b34801561049d57600080fd5b506102a4611221565b3480156104b257600080fd5b50610255600435611227565b3480156104ca57600080fd5b5061027b6112de565b3480156104df57600080fd5b50610255600160a060020a03600435166112e7565b34801561050057600080fd5b506103fd6113b6565b34801561051557600080fd5b506102556004356113c5565b34801561052d57600080fd5b5061027b600160a060020a0360043516611530565b34801561054e57600080fd5b506103fd611545565b34801561056357600080fd5b506102a4611554565b34801561057857600080fd5b5061025560043561155a565b34801561059057600080fd5b50610255600160a060020a0360043516611744565b3480156105b157600080fd5b5061027b6004356024356118ab565b3480156105cc57600080fd5b506102556004356024356118bf565b3480156105e757600080fd5b506102a4611c33565b3480156105fc57600080fd5b50610255600160a060020a0360043516611c39565b34801561061d57600080fd5b506102a4611ced565b610255611cf3565b34801561063a57600080fd5b5061027b611d47565b34801561064f57600080fd5b50610255600160a060020a0360043516611d4f565b34801561067057600080fd5b50610255600435611e0c565b34801561068857600080fd5b506103fd612007565b34801561069d57600080fd5b50610255600435612016565b600080600043600654111580156106c257506007544311155b1515610718576040805160e560020a62461bcd02815260206004820152600860248201527f6e6f74206f70656e000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600c5461072b908563ffffffff6120ca16565b600854909350831115610788576040805160e560020a62461bcd02815260206004820152600c60248201527f6f766572206d6178206361700000000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a0385166000908152600e602052604090205491506107b3828563ffffffff6120ca16565b600954909150811015610810576040805160e560020a62461bcd02815260206004820152601560248201527f6465706f736974203c206d696e206465706f7369740000000000000000000000604482015290519081900360640190fd5b61081a858261098c565b1515610870576040805160e560020a62461bcd02815260206004820152601360248201527f62616c616e6365206e6f7420616c6c6f77656400000000000000000000000000604482015290519081900360640190fd5b81151561092b57600a54600f54106108d2576040805160e560020a62461bcd02815260206004820152601760248201527f6d61782073756273637269626572732072656163686564000000000000000000604482015290519081900360640190fd5b600f80546001810182556000919091527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387161790555b600160a060020a0385166000818152600e6020908152604091829020849055600c869055815186815291518493889390927f4b2bcb0ca50531683faa51870e1018aa0d7272c7f2acc5399389b0c0493865d992918290030190a45050505050565b60006109966109f2565b15806109a457506005548211155b806109c75750600160a060020a03831660009081526002602052604090205460ff165b9392505050565b60075481565b600160a060020a031660009081526001602052604090205460ff1690565b60045460001090565b60005433600160a060020a03908116911614610a1657600080fd5b60105460ff1615610a5e576040805160e560020a62461bcd028152602060048201526007602482015260ca60020a6618589bdc9d195902604482015290519081900360640190fd5b600160a060020a0381161515610abe576040805160e560020a62461bcd02815260206004820152600f60248201527f5f63726f776473616c6520697320300000000000000000000000000000000000604482015290519081900360640190fd5b600b805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383169081179091556040517fec1de9083ff4db3d965e99ae673fb478402dcf92e4e2cc59d687d1a93337adcf90600090a250565b60085481565b600e6020526000908152604090205481565b60005433600160a060020a03908116911614610b4857600080fd5b600754431115610b90576040805160e560020a62461bcd02815260206004820152600d602482015260008051602061273f833981519152604482015290519081900360640190fd5b60105460ff1615610bd8576040805160e560020a62461bcd028152602060048201526007602482015260ca60020a6618589bdc9d195902604482015290519081900360640190fd5b600081118015610bea5750600f548110155b1515610c40576040805160e560020a62461bcd02815260206004820152601760248201527f696e76616c6964205f6d61785375627363726962657273000000000000000000604482015290519081900360640190fd5b600a81905560405181907faddf9749d373eb2c46fc9706fa1791b76703c1d26cddbaf86c4e0cfe84c8144290600090a250565b600160a060020a03331660009081526001602052604090205460ff161515610ce5576040805160e560020a62461bcd02815260206004820152601b60248201527f63616c6c6572206973206e6f742061646d696e6973747261746f720000000000604482015290519081900360640190fd5b60105460ff1615610d2d576040805160e560020a62461bcd028152602060048201526007602482015260ca60020a6618589bdc9d195902604482015290519081900360640190fd5b6010805460ff19166001179055604051600160a060020a033316907fd9b16d11a396fc77b587a51d75b47cb95e5cebc300ef6c11c85bbfdc1ea7616a90600090a2565b600160a060020a031660009081526002602052604090205460ff1690565b60095481565b60065443101590565b60065481565b60105460009060ff161515610e02576040805160e560020a62461bcd02815260206004820152600b60248201527f6e6f742061626f72746564000000000000000000000000000000000000000000604482015290519081900360640190fd5b50600160a060020a0333166000908152600e6020526040812054908111610e73576040805160e560020a62461bcd02815260206004820152601360248201527f63616c6c65722062616c616e6365206973203000000000000000000000000000604482015290519081900360640190fd5b600c54600010610ecd576040805160e560020a62461bcd02815260206004820152601260248201527f746f6b656e2062616c616e636520697320300000000000000000000000000000604482015290519081900360640190fd5b600c54610ee0908263ffffffff6120dd16565b600c908155600160a060020a0333166000818152600e6020526040808220829055925492518492917fd4b15ee0724fec3829ddfdba102b0b2056d212596a309b0e5667c22b1506553a91a4604051600160a060020a0333169082156108fc029083906000818181858888f19350505050158015610f61573d6000803e3d6000fd5b5050565b600f805482908110610f7357fe5b600091825260209091200154600160a060020a0316905081565b600a5481565b60001981565b60055481565b60005433600160a060020a03908116911614610fba57600080fd5b600160a060020a038116151561101a576040805160e560020a62461bcd02815260206004820152601860248201527f6f6c6441646d696e6973747261746f72206973207a65726f0000000000000000604482015290519081900360640190fd5b600160a060020a03811660009081526001602052604090205460ff16151561108c576040805160e560020a62461bcd02815260206004820152601f60248201527f6f6c6441646d696e6973747261746f72206973206e6f742070726573656e7400604482015290519081900360640190fd5b600160a060020a03808216600081815260016020526040808220805460ff191690555191923316917fe2b00e6bef2e7f0943cdcc803df98741c31707c2cb8918c875eefb64607550789190a350565b60005433600160a060020a039081169116146110f657600080fd5b60075443111561113e576040805160e560020a62461bcd02815260206004820152600d602482015260008051602061273f833981519152604482015290519081900360640190fd5b60105460ff1615611186576040805160e560020a62461bcd028152602060048201526007602482015260ca60020a6618589bdc9d195902604482015290519081900360640190fd5b6000811180156111985750600c548110155b15156111ee576040805160e560020a62461bcd02815260206004820152600f60248201527f696e76616c6964205f6d61784361700000000000000000000000000000000000604482015290519081900360640190fd5b600881905560405181907fe30a8c4ea6ace3f66654d14f0bbef5d83e66bd5ad51e43e357642f72ccd4c61d90600090a250565b60035481565b60005433600160a060020a0390811691161461124257600080fd5b60075443111561128a576040805160e560020a62461bcd02815260206004820152600d602482015260008051602061273f833981519152604482015290519081900360640190fd5b60105460ff16156112d2576040805160e560020a62461bcd028152602060048201526007602482015260ca60020a6618589bdc9d195902604482015290519081900360640190fd5b6112db816120ef565b50565b60105460ff1681565b60005433600160a060020a0390811691161461130257600080fd5b60075443111561134a576040805160e560020a62461bcd02815260206004820152600d602482015260008051602061273f833981519152604482015290519081900360640190fd5b60105460ff1615611392576040805160e560020a62461bcd028152602060048201526007602482015260ca60020a6618589bdc9d195902604482015290519081900360640190fd5b600160a060020a0381166000908152600e60205260409020546112db90829061220f565b600054600160a060020a031681565b60005433600160a060020a039081169116146113e057600080fd5b600754431115611428576040805160e560020a62461bcd02815260206004820152600d602482015260008051602061273f833981519152604482015290519081900360640190fd5b60105460ff1615611470576040805160e560020a62461bcd028152602060048201526007602482015260ca60020a6618589bdc9d195902604482015290519081900360640190fd5b600081118015611481575060095481105b15156114fd576040805160e560020a62461bcd02815260206004820152602260248201527f5f6d696e4465706f736974206e6f7420696e2028302c206d696e4465706f736960448201527f7429000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600981905560405181907f8dfd94aabfe41493b190227cb7ad7f4bb5d3195b4a8ebd1aa4c9071d7e1da52090600090a250565b60026020526000908152604090205460ff1681565b600b54600160a060020a031681565b600f5490565b60005433600160a060020a0390811691161461157557600080fd5b6007544311156115bd576040805160e560020a62461bcd02815260206004820152600d602482015260008051602061273f833981519152604482015290519081900360640190fd5b60105460ff1615611605576040805160e560020a62461bcd028152602060048201526007602482015260ca60020a6618589bdc9d195902604482015290519081900360640190fd5b4381101561165d576040805160e560020a62461bcd02815260206004820152601960248201527f5f656e64426c6f636b203c2063757272656e7420626c6f636b00000000000000604482015290519081900360640190fd5b6006548110156116b7576040805160e560020a62461bcd02815260206004820152601660248201527f5f656e64426c6f636b203c207374617274426c6f636b00000000000000000000604482015290519081900360640190fd5b600754811415611711576040805160e560020a62461bcd02815260206004820152601560248201527f5f656e64426c6f636b203d3d20656e64426c6f636b0000000000000000000000604482015290519081900360640190fd5b600781905560405181907fe6ffc56a5fcf08fb9f4ba47da94e3227eb1b200b2fb96f98566cdb821d8054cd90600090a250565b60005433600160a060020a0390811691161461175f57600080fd5b600160a060020a03811615156117bf576040805160e560020a62461bcd02815260206004820152601860248201527f6e657741646d696e6973747261746f72206973207a65726f0000000000000000604482015290519081900360640190fd5b600160a060020a03811660009081526001602052604090205460ff1615611856576040805160e560020a62461bcd02815260206004820152602360248201527f6e657741646d696e6973747261746f7220697320616c7265616479207072657360448201527f656e740000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a038082166000818152600160208190526040808320805460ff19169092179091555191923316917f7b0ebb85b3e4339f3168d663c8c9dc718d009cdccce86a25853e636fb2e5e4059190a350565b6000808311806109c7575050600010919050565b600160a060020a03331660009081526001602052604081205481908190819060ff161515611937576040805160e560020a62461bcd02815260206004820152601b60248201527f63616c6c6572206973206e6f742061646d696e6973747261746f720000000000604482015290519081900360640190fd5b60105460ff161561197f576040805160e560020a62461bcd028152602060048201526007602482015260ca60020a6618589bdc9d195902604482015290519081900360640190fd5b8486106119d6576040805160e560020a62461bcd02815260206004820152600c60248201527f5f66726f6d203e3d205f746f0000000000000000000000000000000000000000604482015290519081900360640190fd5b600b54600160a060020a03161515611a38576040805160e560020a62461bcd02815260206004820152601160248201527f63726f776473616c65206e6f7420736574000000000000000000000000000000604482015290519081900360640190fd5b600f54600010611a92576040805160e560020a62461bcd02815260206004820152601560248201527f73756273637269626572732073697a6520697320300000000000000000000000604482015290519081900360640190fd5b611a9a611d47565b1515611af0576040805160e560020a62461bcd02815260206004820152600960248201527f6e6f7420656e6465640000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600f548511611aff5784611b03565b600f545b93508592505b83831015611beb57600f805484908110611b1f57fe5b6000918252602080832090910154600160a060020a0316808352600e90915260408220549093509150811115611be057600160a060020a038083166000818152600e6020526040808220829055600b5481517fec8ac4d80000000000000000000000000000000000000000000000000000000081526004810194909452905193169263ec8ac4d8928592602480830193919282900301818588803b158015611bc657600080fd5b505af1158015611bda573d6000803e3d6000fd5b50505050505b600190920191611b09565b60408051600160a060020a03331681529051869188917ffdc3511207b85adf52e88a10ecce8f8420f75147db52a28775b919765859abbf9181900360200190a3505050505050565b600c5481565b60005433600160a060020a03908116911614611c5457600080fd5b600754431115611c9c576040805160e560020a62461bcd02815260206004820152600d602482015260008051602061273f833981519152604482015290519081900360640190fd5b60105460ff1615611ce4576040805160e560020a62461bcd028152602060048201526007602482015260ca60020a6618589bdc9d195902604482015290519081900360640190fd5b6112db816123c7565b60045481565b60105460ff1615611d3b576040805160e560020a62461bcd028152602060048201526007602482015260ca60020a6618589bdc9d195902604482015290519081900360640190fd5b611d4533346106a9565b565b600754431190565b60005433600160a060020a03908116911614611d6a57600080fd5b600160a060020a033316600081815260016020526040808220805460ff191690555182917fe2b00e6bef2e7f0943cdcc803df98741c31707c2cb8918c875eefb646075507891a3600160a060020a038082166000818152600160208190526040808320805460ff19169092179091555191923316917f7b0ebb85b3e4339f3168d663c8c9dc718d009cdccce86a25853e636fb2e5e4059190a36112db81612554565b60005433600160a060020a03908116911614611e2757600080fd5b6006544310611e80576040805160e560020a62461bcd02815260206004820152600f60248201527f616c726561647920737461727465640000000000000000000000000000000000604482015290519081900360640190fd5b60105460ff1615611ec8576040805160e560020a62461bcd028152602060048201526007602482015260ca60020a6618589bdc9d195902604482015290519081900360640190fd5b43811015611f20576040805160e560020a62461bcd02815260206004820152601b60248201527f5f7374617274426c6f636b203c2063757272656e7420626c6f636b0000000000604482015290519081900360640190fd5b600754811115611f7a576040805160e560020a62461bcd02815260206004820152601660248201527f5f7374617274426c6f636b203e20656e64426c6f636b00000000000000000000604482015290519081900360640190fd5b600654811415611fd4576040805160e560020a62461bcd02815260206004820152601960248201527f5f7374617274426c6f636b203d3d207374617274426c6f636b00000000000000604482015290519081900360640190fd5b600681905560405181907f66d92a6c659b7b4cfd2921195dcee1473e8641f17990b926b1ed0687562f787790600090a250565b600d54600160a060020a031681565b60005433600160a060020a0390811691161461203157600080fd5b600754431115612079576040805160e560020a62461bcd02815260206004820152600d602482015260008051602061273f833981519152604482015290519081900360640190fd5b60105460ff16156120c1576040805160e560020a62461bcd028152602060048201526007602482015260ca60020a6618589bdc9d195902604482015290519081900360640190fd5b6112db816125ec565b818101828110156120d757fe5b92915050565b6000828211156120e957fe5b50900390565b6120fb816005546118ab565b1515612151576040805160e560020a62461bcd02815260206004820152601f60248201527f5f6d617857686974656c6973744c656e677468206e6f7420616c6c6f77656400604482015290519081900360640190fd5b6004548114156121d1576040805160e560020a62461bcd02815260206004820152602860248201527f5f6d617857686974656c6973744c656e67746820657175616c20746f2063757260448201527f72656e74206f6e65000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60048190556040518190600160a060020a033316907f302325103a9b6166a9c7e9e5a9678fda5b674f8eafd3bef31defd87f1297904990600090a350565b600160a060020a038216151561226f576040805160e560020a62461bcd02815260206004820152601360248201527f5f73756273637269626572206973207a65726f00000000000000000000000000604482015290519081900360640190fd5b600160a060020a03821660009081526002602052604090205460ff1615156122e1576040805160e560020a62461bcd02815260206004820152600f60248201527f6e6f742077686974656c69737465640000000000000000000000000000000000604482015290519081900360640190fd5b600554811115612361576040805160e560020a62461bcd02815260206004820152602960248201527f5f62616c616e63652067726561746572207468616e2077686974656c6973742060448201527f7468726573686f6c640000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60035460001061236d57fe5b60038054600019019055600160a060020a03808316600081815260026020526040808220805460ff191690555191923316917f47661714b17c6a031ca58137c30f0488e4c3f807339a60d1f291285a94e20a799190a35050565b600160a060020a0381161515612427576040805160e560020a62461bcd02815260206004820152601360248201527f5f73756273637269626572206973207a65726f00000000000000000000000000604482015290519081900360640190fd5b600160a060020a03811660009081526002602052604090205460ff1615612498576040805160e560020a62461bcd02815260206004820152601360248201527f616c72656164792077686974656c697374656400000000000000000000000000604482015290519081900360640190fd5b600454600354106124f3576040805160e560020a62461bcd02815260206004820152601c60248201527f6d61782077686974656c697374206c656e677468207265616368656400000000604482015290519081900360640190fd5b600380546001908101909155600160a060020a03808316600081815260026020526040808220805460ff19169095179094559251909233909216917fdb06c9d55aafafeffbeaf4857d757a34fbfa810b67516a13e8fd264a058d0fc691a350565b60005433600160a060020a0390811691161461256f57600080fd5b600160a060020a038116151561258457600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6125f8600454826118ab565b1515612674576040805160e560020a62461bcd02815260206004820152602660248201527f5f77686974656c6973745468726573686f6c6442616c616e6365206e6f74206160448201527f6c6c6f7765640000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6003541580612684575060055481115b1515612700576040805160e560020a62461bcd02815260206004820152603760248201527f5f77686974656c6973745468726573686f6c6442616c616e6365206e6f74206760448201527f726561746572207468616e2063757272656e74206f6e65000000000000000000606482015290519081900360840190fd5b60058190556040518190600160a060020a033316907fb5ed79d5f982fdccbd0eeefa0720eb98036492bcc58b4612852b610bc418219c90600090a3505600616c726561647920656e64656400000000000000000000000000000000000000a165627a7a7230582010fd9fa2137d04846c32e5c24d5eb33a3de1b2344bc3bb73cef0b4ea2b14eeaf0029a165627a7a72305820efdc3391cc5a7b04d68c077bf328a0293dff40a1c2a2ad3eafccbb8df288ffae0029000000000000000000000000749aba9e082ccb185d1ef88fa514339e3c3368d3",
  "constructorArguments": "000000000000000000000000749aba9e082ccb185d1ef88fa514339e3c3368d3"
}