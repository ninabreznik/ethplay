{
  "address": "0xe4089b2e6c1bf4cb3dd267ed3b7fc98362e80e61",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HotExchangeCoin",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-04\n*/\n\npragma solidity ^0.4.16;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n contract StandardToken is ERC20, BasicToken {\n\n   mapping (address => mapping (address => uint256)) allowed;\n\n\n   /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amout of tokens to be transfered\n    */\n   function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n     var _allowance = allowed[_from][msg.sender];\n\n     // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n     // require (_value <= _allowance);\n\n     balances[_to] = balances[_to].add(_value);\n     balances[_from] = balances[_from].sub(_value);\n     allowed[_from][msg.sender] = _allowance.sub(_value);\n     Transfer(_from, _to, _value);\n     return true;\n   }\n\n   /**\n    * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n   function approve(address _spender, uint256 _value) returns (bool) {\n\n     // To change the approve amount you first have to reduce the addresses`\n     //  allowance to zero by calling `approve(_spender, 0)` if it is not\n     //  already 0 to mitigate the race condition described here:\n     //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n     allowed[msg.sender][_spender] = _value;\n     Approval(msg.sender, _spender, _value);\n     return true;\n   }\n\n   /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifing the amount of tokens still avaible for the spender.\n    */\n   function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n     return allowed[_owner][_spender];\n   }\n\n }\n\ncontract MintableToken is StandardToken, Ownable {\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will recieve the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n    require(totalSupply.add(_amount) <= 21000000 * 1 ether);\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Transfer(0X0, _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\ncontract HotExchangeCoin is MintableToken {\n  string public name = \"HotExchangeCoin\";\n  string public symbol = \"HTEC\";\n  uint256 public decimals = 18;\n\n  /**\n   * @dev Allows anyone to transfer the tokens\n   * @param _to the recipient address of the tokens.\n   * @param _value number of tokens to be transfered.\n   */\n  function transfer(address _to, uint _value) returns (bool){\n    return super.transfer(_to, _value);\n  }\n\n  /**\n   * @dev Allows anyone to transfer the tokens\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint _value) returns (bool){\n    return super.transferFrom(_from, _to, _value);\n  }\n}",
  "bytecode": "606060409081526003805460a060020a60ff02191690558051908101604052600f81527f486f7445786368616e6765436f696e00000000000000000000000000000000006020820152600490805161005b9291602001906100cb565b5060408051908101604052600481527f4854454300000000000000000000000000000000000000000000000000000000602082015260059080516100a39291602001906100cb565b5060126006555b60038054600160a060020a03191633600160a060020a03161790555b61016b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010c57805160ff1916838001178555610139565b82800160010185558215610139579182015b8281111561013957825182559160200191906001019061011e565b5b5061014692915061014a565b5090565b61016891905b808211156101465760008155600101610150565b5090565b90565b610acb8061017a6000396000f300606060405236156100cd5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146100d257806306fdde03146100f9578063095ea7b31461018457806318160ddd146101ba57806323b872dd146101df578063313ce5671461021b57806340c10f191461024057806370a08231146102765780637d64bcb4146102a75780638da5cb5b146102ce57806395d89b41146102fd578063a9059cbb14610388578063dd62ed3e146103be578063f2fde38b146103f5575b600080fd5b34156100dd57600080fd5b6100e5610416565b604051901515815260200160405180910390f35b341561010457600080fd5b61010c610437565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101495780820151818401525b602001610130565b50505050905090810190601f1680156101765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018f57600080fd5b6100e5600160a060020a03600435166024356104d5565b604051901515815260200160405180910390f35b34156101c557600080fd5b6101cd61057c565b60405190815260200160405180910390f35b34156101ea57600080fd5b6100e5600160a060020a0360043581169060243516604435610582565b604051901515815260200160405180910390f35b341561022657600080fd5b6101cd610599565b60405190815260200160405180910390f35b341561024b57600080fd5b6100e5600160a060020a036004351660243561059f565b604051901515815260200160405180910390f35b341561028157600080fd5b6101cd600160a060020a03600435166106ac565b60405190815260200160405180910390f35b34156102b257600080fd5b6100e56106cb565b604051901515815260200160405180910390f35b34156102d957600080fd5b6102e1610752565b604051600160a060020a03909116815260200160405180910390f35b341561030857600080fd5b61010c610761565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101495780820151818401525b602001610130565b50505050905090810190601f1680156101765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561039357600080fd5b6100e5600160a060020a03600435166024356107ff565b604051901515815260200160405180910390f35b34156103c957600080fd5b6101cd600160a060020a0360043581169060243516610814565b60405190815260200160405180910390f35b341561040057600080fd5b610414600160a060020a0360043516610841565b005b60035474010000000000000000000000000000000000000000900460ff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104cd5780601f106104a2576101008083540402835291602001916104cd565b820191906000526020600020905b8154815290600101906020018083116104b057829003601f168201915b505050505081565b60008115806105075750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561051257600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b600061058f848484610899565b90505b9392505050565b60065481565b60035460009033600160a060020a039081169116146105bd57600080fd5b60035474010000000000000000000000000000000000000000900460ff16156105e557600080fd5b6000546a115eec47f6cf7e3500000090610605908463ffffffff6109ae16565b111561061057600080fd5b600054610623908363ffffffff6109ae16565b6000908155600160a060020a03841681526001602052604090205461064e908363ffffffff6109ae16565b600160a060020a0384166000818152600160205260408082209390935590917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b5b5b92915050565b600160a060020a0381166000908152600160205260409020545b919050565b60035460009033600160a060020a039081169116146106e957600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a15060015b5b90565b600354600160a060020a031681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104cd5780601f106104a2576101008083540402835291602001916104cd565b820191906000526020600020905b8154815290600101906020018083116104b057829003601f168201915b505050505081565b600061080b83836109c8565b90505b92915050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a0390811691161461085c57600080fd5b600160a060020a03811615610894576003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b5b50565b600160a060020a0380841660009081526002602090815260408083203385168452825280832054938616835260019091528120549091906108e0908463ffffffff6109ae16565b600160a060020a038086166000908152600160205260408082209390935590871681522054610915908463ffffffff610a8816565b600160a060020a03861660009081526001602052604090205561093e818463ffffffff610a8816565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b6000828201838110156109bd57fe5b8091505b5092915050565b600160a060020a0333166000908152600160205260408120546109f1908363ffffffff610a8816565b600160a060020a033381166000908152600160205260408082209390935590851681522054610a26908363ffffffff6109ae16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600082821115610a9457fe5b508082035b929150505600a165627a7a72305820424dac94972d4f490bc8f4452313d79d39e6898e4fd0e44775b7ee2f9b76e4e40029"
}