{
  "address": "0x4de0a119f7e2dd1bad85ac5028a51fabfcccf909",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ETHFlow",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-09\n*/\n\npragma solidity ^0.5.0;\n\ncontract ETHFlow {\n    using SafeMath for uint256;\n    \n    struct Tariff {\n        uint256 id;\n        string name;\n        uint256 price;\n        uint256 time;\n        uint256 value;\n        uint256 duration;\n        uint256 monthly;\n    }\n\n    mapping(uint256 => Tariff) public tariffs;\n    mapping(address => uint256) public tariffOf;\n    mapping(address => uint256) public tariffTime;\n    mapping(address => uint256) public time;\n    mapping(address => bool) public active;\n    mapping(address => uint256) public balanceUser;\n    mapping(address => address) public myReferrer;\n    //address of refer - address of referal - amount of percentage\n    mapping(address => mapping(address => uint256)) public statistic;\n    mapping(address => address[]) public referals;\n    mapping(address => uint256) public referalsEarning;\n    address payable private admin = 0xc5568a59A56cFe4887fCca38eDA3dF202b8654d0;\n    uint256 private adminPercent = 10;\n    uint256 private percentFromEachProfit = 20;\n\n    event Deposit(\n        address Investor, \n        uint256 Amount\n    );\n\n    constructor() public {\n        tariffs[1].id = 1;\n        tariffs[1].name = 'free';\n        tariffs[1].price = 0;\n        tariffs[1].time = 3 * 1 hours;                      //180 min\n        tariffs[1].value = 360 * 1 szabo;          //0.00036 ETH\n        tariffs[1].duration = 0;\n        tariffs[1].monthly = 108 * 1 finney;    //0.108 ETH\n\n        tariffs[2].id = 2;\n        tariffs[2].name = 'tariff1';\n        tariffs[2].price = 50 * 1 finney;       //0.05 ETH\n        tariffs[2].time = 90 * 1 minutes;                     //90 min\n        tariffs[2].value = 540 * 1 szabo;         //0.00054 ETH\n        tariffs[2].duration = 476 * 1 hours;              //19 days 20 hours\n        tariffs[2].monthly = 259200 * 1 szabo;    //0.2592 ETH\n\n        tariffs[3].id = 3;\n        tariffs[3].name = 'tariff2';\n        tariffs[3].price = 100 * 1 finney;      //0.1 ETH\n        tariffs[3].time = 1 hours;                     //60 min\n        tariffs[3].value = 900 * 1 szabo;         //0.0009 ETH\n        tariffs[3].duration = 438 * 1 hours;              //18 days 6 hours\n        tariffs[3].monthly = 648 * 1 finney;    //0.648 ETH\n\n        tariffs[4].id = 4;\n        tariffs[4].name = 'tariff3';\n        tariffs[4].price = 250 * 1 finney;      //0.25 ETH\n        tariffs[4].time = 225 * 1 minutes;                    //225 min\n        tariffs[4].value = 9 * 1 finney;        //0.009 ETH\n        tariffs[4].duration = 416 * 1 hours;              //17 days 8 hours\n        tariffs[4].monthly = 1728 * 1 finney;   //1.728 ETH\n\n        tariffs[5].id = 5;\n        tariffs[5].name = 'tariff4';\n        tariffs[5].price = 1 ether;     //1 ETH\n        tariffs[5].time = 35295;                    //588.235 min\n        tariffs[5].value = 100 * 1 finney;      //0.1 ETH\n        tariffs[5].duration = 391 * 1 hours;              //16 days 7 hours\n        tariffs[5].monthly = 7344 * 1 finney;   //7.344 ETH\n\n        tariffs[6].id = 6;\n        tariffs[6].name = 'tariff5';\n        tariffs[6].price = 5 * 1 ether;     //5 ETH\n        tariffs[6].time = 66667;                    //1111.11 min\n        tariffs[6].value = 1 ether;     //1 ETH\n        tariffs[6].duration = 15 * 1 days;              //15 days\n        tariffs[6].monthly = 38880 * 1 ether;  //38.88 ETH\n\n        tariffs[7].id = 7;\n        tariffs[7].name = 'tariff6';\n        tariffs[7].price = 25 * 1 ether;    //25 ETH\n        tariffs[7].time = 2000 * 1 minutes;                   //2000 min\n        tariffs[7].value = 10 * 1 ether;    //10 ETH\n        tariffs[7].duration = 314 * 1 hours;              //13 days 2 hours\n        tariffs[7].monthly = 216 * 1 ether; //216 ETH\n\n        tariffs[8].id = 8;\n        tariffs[8].name = 'tariff7';\n        tariffs[8].price = 100 * 1 ether;   //100 ETH\n        tariffs[8].time = 62500;                    //1041,66 min\n        tariffs[8].value = 25 * 1 ether;    //25 ETH\n        tariffs[8].duration = 11 * 1 days;               //11 days\n        tariffs[8].monthly = 1036 * 1 ether;//1036 ETH\n    }\n\n    function activate(address _referrer) public {\n        require(myReferrer[msg.sender] == address(0));\n        \n        active[msg.sender] = true;\n        time[msg.sender] = now;\n        tariffOf[msg.sender] = 1;\n        \n        address referrer = _referrer;\n\n        if(referrer == address(0)) {\n            referrer = admin;\n        }\n    \n        myReferrer[msg.sender] = referrer;\n            \n        referals[referrer].push(msg.sender);\n    }\n\n    function getETH() public payable {\n        require(active[msg.sender], \"Need activate first\");\n\n        uint256 userTariff = tariffOf[msg.sender];\n        uint256 value;\n\n        //tariff expire\n        if(userTariff > 1 && \n            now > tariffTime[msg.sender].add(tariffs[userTariff].duration)\n        ) {\n            uint256 expire = tariffTime[msg.sender].add(tariffs[userTariff].duration);\n            uint256 tariffDuration = expire.sub(time[msg.sender]);\n            uint256 defaultDuration = now.sub(expire);\n\n            value = tariffs[userTariff].value\n                        .div(tariffs[userTariff].time)\n                        .mul(tariffDuration);\n            value = value.add(tariffs[1].value\n                        .div(tariffs[1].time)\n                        .mul(defaultDuration));\n\n            require(value >= tariffs[1].value , \"Too early\");\n\n            userTariff = 1;\n            tariffOf[msg.sender] = 1;\n        } else {\n            value = getAmountOfEthForWithdrawal();\n\n            require(value >= tariffs[userTariff].value , \"Too early\");\n        }\n\n        uint256 sum = value;\n        \n        if (myReferrer[msg.sender] != address(0)) {\n            uint256 refSum = sum.mul(percentFromEachProfit).div(100);\n            balanceUser[myReferrer[msg.sender]] = \n                balanceUser[myReferrer[msg.sender]].add(refSum);\n                \n            statistic[myReferrer[msg.sender]][msg.sender] =\n                statistic[myReferrer[msg.sender]][msg.sender].add(refSum);\n            referalsEarning[myReferrer[msg.sender]] = \n                referalsEarning[myReferrer[msg.sender]].add(refSum);\n        }\n        \n        balanceUser[msg.sender] = balanceUser[msg.sender].add(sum);\n        time[msg.sender] = now;\n    }\n\n    function getAmountOfEthForWithdrawal() public view returns (uint256) {\n        uint256 value;\n        if(now >= tariffs[tariffOf[msg.sender]].time.add(time[msg.sender])) {\n            value = tariffs[tariffOf[msg.sender]].value;\n        } else {\n            value = now.sub(time[msg.sender])\n                .mul(tariffs[tariffOf[msg.sender]].value\n                    .div(tariffs[tariffOf[msg.sender]].time));\n        }\n        \n        return value;\n    }\n    \n    function getStatistic(address _refer, address _referal) public view returns (uint256) {\n        return statistic[myReferrer[_refer]][_referal];\n    }\n    \n    function getAmountOfReferals() public view returns (uint256) {\n        return referals[msg.sender].length;\n    }\n    \n    function getEarnedMonetFromReferals() public view returns (uint256) {\n        return referalsEarning[msg.sender];\n    }\n\n    function() external payable {\n        if(msg.value == 0) {\n            getETH();\n        } else {\n            changeTariff();\n        }\n    }\n\n    function deposit() public payable {\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    function withdrawal() public {\n        uint256 value = balanceUser[msg.sender];\n\n        require(value <= address(this).balance, \"Not enough ETH on the contract\");\n        require(value >= 100 * 1 szabo, \"Minimum withdrawal 0.0001 ETH\");\n\n        balanceUser[msg.sender] = 0;\n        msg.sender.transfer(value);\n    }\n\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\n        assembly {\n            addr := mload(add(bys,20))\n        } \n    }\n\n    function detectTariffId() public payable returns (uint256) {\n        require(msg.value >= tariffs[1].price, \"Insufficient funds\");\n\n        uint256 found = 0;\n        for(uint256 i = 1; i < 8; i++) {\n            if(msg.value >= getPriceForNewTariff(i) && \n            msg.value < getPriceForNewTariff(i+1)) {\n                found = i;\n            }\n        }\n        if(msg.value >= getPriceForNewTariff(8)) {\n            found = 8;\n        }\n        \n        return found;\n    }\n    \n    function getPriceForNewTariff(uint256 _newTariff) public view returns (uint256) {\n        if(tariffOf[msg.sender] == 1) {\n            return tariffs[_newTariff].price;\n        }\n        \n        uint256 duration = now - time[msg.sender];\n        uint256 timeLeft = tariffs[tariffOf[msg.sender]].duration\n                    - duration;\n                    \n        if(timeLeft == 0) {\n            return tariffs[_newTariff].price;\n        }\n        \n        uint256 pricePerOneSec = tariffs[tariffOf[msg.sender]].price\n                    / tariffs[tariffOf[msg.sender]].duration;\n        uint256 moneyLeft = pricePerOneSec * timeLeft * 90 / 100;\n        \n        return tariffs[_newTariff].price - moneyLeft;\n    }\n \n    function changeTariff() public payable {\n        uint256 id = detectTariffId();\n\n        require(id >= tariffOf[msg.sender]);\n        \n        uint256 commission = getPriceForNewTariff(id).mul(adminPercent).div(100);\n        commission = commission.add(tariffs[id].price\n                        .sub(getPriceForNewTariff(id)).mul(100).div(90)\n                        .sub(tariffs[id].price.sub(getPriceForNewTariff(id))));\n\n        admin.transfer(commission);\n        msg.sender.transfer(msg.value.sub(getPriceForNewTariff(id)));\n\n        if(!active[msg.sender]) {\n            active[msg.sender] = true;\n        }\n        \n        time[msg.sender] = now;\n        tariffOf[msg.sender] = id;\n        tariffTime[msg.sender] = now;\n    }\n}\n\nlibrary SafeMath {\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    return _a / _b;\n  }\n\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"getETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAmountOfEthForWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"detectTariffId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_refer\",\"type\":\"address\"},{\"name\":\"_referal\",\"type\":\"address\"}],\"name\":\"getStatistic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referalsEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"active\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tariffTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tariffOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeTariff\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEarnedMonetFromReferals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"statistic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_newTariff\",\"type\":\"uint256\"}],\"name\":\"getPriceForNewTariff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"myReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tariffs\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"monthly\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAmountOfReferals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"}]",
  "bytecode": "6080604052600a8054600160a060020a03191673c5568a59a56cfe4887fcca38eda3df202b8654d0178155600b556014600c553480156200003f57600080fd5b5060017fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d81905560408051808201909152600481527f6672656500000000000000000000000000000000000000000000000000000000602082810191825260009384529290925251620000d4917fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7e9162000b52565b5060007fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7f819055612a307fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e80556601476b081e80007fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e81557fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e8281905567017fb16d83be00007fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e835560027fabbb5caa7dda850e60932de0934eb1f9d0f59695050f761dc64e443e5030a56981905560408051808201909152600781527f7461726966663100000000000000000000000000000000000000000000000000602082810191825292845292909152516200022b917fabbb5caa7dda850e60932de0934eb1f9d0f59695050f761dc64e443e5030a56a9162000b52565b5066b1a2bc2ec500007fabbb5caa7dda850e60932de0934eb1f9d0f59695050f761dc64e443e5030a56b556115187fabbb5caa7dda850e60932de0934eb1f9d0f59695050f761dc64e443e5030a56c556601eb208c2dc0007fabbb5caa7dda850e60932de0934eb1f9d0f59695050f761dc64e443e5030a56d55621a25c07fabbb5caa7dda850e60932de0934eb1f9d0f59695050f761dc64e443e5030a56e55670398dd06d5c800007fabbb5caa7dda850e60932de0934eb1f9d0f59695050f761dc64e443e5030a56f5560037f101e368776582e57ab3d116ffe2517c0a585cd5b23174b01e275c2d8329c3d8381905560408051808201909152600781527f74617269666632000000000000000000000000000000000000000000000000006020828101918252600093845292909252516200038a917f101e368776582e57ab3d116ffe2517c0a585cd5b23174b01e275c2d8329c3d849162000b52565b5067016345785d8a00007f101e368776582e57ab3d116ffe2517c0a585cd5b23174b01e275c2d8329c3d8555610e107f101e368776582e57ab3d116ffe2517c0a585cd5b23174b01e275c2d8329c3d86556603328b944c40007f101e368776582e57ab3d116ffe2517c0a585cd5b23174b01e275c2d8329c3d875562180f607f101e368776582e57ab3d116ffe2517c0a585cd5b23174b01e275c2d8329c3d88556708fe2891167400007f101e368776582e57ab3d116ffe2517c0a585cd5b23174b01e275c2d8329c3d895560047f52d75039926638d3c558b2bdefb945d5be8dae29dedd1c313212a4d472d9fde581905560408051808201909152600781527f7461726966663300000000000000000000000000000000000000000000000000602082810191825260009384529290925251620004ea917f52d75039926638d3c558b2bdefb945d5be8dae29dedd1c313212a4d472d9fde69162000b52565b506703782dace9d900007f52d75039926638d3c558b2bdefb945d5be8dae29dedd1c313212a4d472d9fde7556134bc7f52d75039926638d3c558b2bdefb945d5be8dae29dedd1c313212a4d472d9fde855661ff973cafa80007f52d75039926638d3c558b2bdefb945d5be8dae29dedd1c313212a4d472d9fde9556216da007f52d75039926638d3c558b2bdefb945d5be8dae29dedd1c313212a4d472d9fdea556717fb16d83be000007f52d75039926638d3c558b2bdefb945d5be8dae29dedd1c313212a4d472d9fdeb5560057f2b232c97452f0950c94e2539fdc7e69d21166113cf7a9bcb99b220a3fe5d720a81905560408051808201909152600781527f74617269666634000000000000000000000000000000000000000000000000006020828101918252600093845292909252516200064a917f2b232c97452f0950c94e2539fdc7e69d21166113cf7a9bcb99b220a3fe5d720b9162000b52565b50670de0b6b3a76400007f2b232c97452f0950c94e2539fdc7e69d21166113cf7a9bcb99b220a3fe5d720c556189df7f2b232c97452f0950c94e2539fdc7e69d21166113cf7a9bcb99b220a3fe5d720d5567016345785d8a00007f2b232c97452f0950c94e2539fdc7e69d21166113cf7a9bcb99b220a3fe5d720e5562157a707f2b232c97452f0950c94e2539fdc7e69d21166113cf7a9bcb99b220a3fe5d720f556765eb2116fe7800007f2b232c97452f0950c94e2539fdc7e69d21166113cf7a9bcb99b220a3fe5d72105560067f62103cf3131c85df57aad364d21cba02556d3092d6cb54c298c2e7726a7870bd81905560408051808201909152600781527f7461726966663500000000000000000000000000000000000000000000000000602082810191825260009384529290925251620007ab917f62103cf3131c85df57aad364d21cba02556d3092d6cb54c298c2e7726a7870be9162000b52565b50674563918244f400007f62103cf3131c85df57aad364d21cba02556d3092d6cb54c298c2e7726a7870bf556201046b7f62103cf3131c85df57aad364d21cba02556d3092d6cb54c298c2e7726a7870c055670de0b6b3a76400007f62103cf3131c85df57aad364d21cba02556d3092d6cb54c298c2e7726a7870c1556213c6807f62103cf3131c85df57aad364d21cba02556d3092d6cb54c298c2e7726a7870c25569083bb063d4ee738000007f62103cf3131c85df57aad364d21cba02556d3092d6cb54c298c2e7726a7870c35560077f870253054e3d98b71abec8fff9ebf8a15d167f15909091a800d4acaab9266d2b819055604080518082019091528181527f74617269666636000000000000000000000000000000000000000000000000006020828101918252600093845292909252516200090e917f870253054e3d98b71abec8fff9ebf8a15d167f15909091a800d4acaab9266d2c9162000b52565b5068015af1d78b58c400007f870253054e3d98b71abec8fff9ebf8a15d167f15909091a800d4acaab9266d2d556201d4c07f870253054e3d98b71abec8fff9ebf8a15d167f15909091a800d4acaab9266d2e55678ac7230489e800007f870253054e3d98b71abec8fff9ebf8a15d167f15909091a800d4acaab9266d2f5562113fa07f870253054e3d98b71abec8fff9ebf8a15d167f15909091a800d4acaab9266d3055680bb59a27953c6000007f870253054e3d98b71abec8fff9ebf8a15d167f15909091a800d4acaab9266d315560087f5b8b9143058ba3a137192c563ca6541845e62f0a2f9a667aac4db2fa3c334e3c81905560408051808201909152600781527f746172696666370000000000000000000000000000000000000000000000000060208281019182526000938452929092525162000a72917f5b8b9143058ba3a137192c563ca6541845e62f0a2f9a667aac4db2fa3c334e3d9162000b52565b506008600090815260205268056bc75e2d631000007f5b8b9143058ba3a137192c563ca6541845e62f0a2f9a667aac4db2fa3c334e3e5561f4247f5b8b9143058ba3a137192c563ca6541845e62f0a2f9a667aac4db2fa3c334e3f5568015af1d78b58c400007f5b8b9143058ba3a137192c563ca6541845e62f0a2f9a667aac4db2fa3c334e4055620e80807f5b8b9143058ba3a137192c563ca6541845e62f0a2f9a667aac4db2fa3c334e4155683829635f0968b000007f5b8b9143058ba3a137192c563ca6541845e62f0a2f9a667aac4db2fa3c334e425562000bf7565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000b9557805160ff191683800117855562000bc5565b8280016001018555821562000bc5579182015b8281111562000bc557825182559160200191906001019062000ba8565b5062000bd392915062000bd7565b5090565b62000bf491905b8082111562000bd3576000815560010162000bde565b90565b6112628062000c076000396000f3fe60806040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166314f6c3be811461013a5780631c27a992146101425780631c5a9d9c146101695780632e1868c21461019c57806332d34527146101a45780633d7c01f2146101df5780634ac8c112146102345780634ea71327146102675780636f9c5fb7146102ae57806370f9f8a8146102e15780637c67a3e2146103145780638bad27a614610130578063922a89f0146103475780639a34d4361461035c578063a0ff9aef14610397578063d0e30db0146103c1578063d4e93292146103c9578063e81758c6146103de578063e8f2be5214610411578063f5eb8890146104dd578063fd417af314610510575b3415156101305761012b610525565b610138565b6101386109a7565b005b610138610525565b34801561014e57600080fd5b50610157610b48565b60408051918252519081900360200190f35b34801561017557600080fd5b506101386004803603602081101561018c57600080fd5b5035600160a060020a0316610c09565b610157610cdb565b3480156101b057600080fd5b50610157600480360360408110156101c757600080fd5b50600160a060020a0381358116916020013516610dba565b3480156101eb57600080fd5b506102186004803603604081101561020257600080fd5b50600160a060020a038135169060200135610df3565b60408051600160a060020a039092168252519081900360200190f35b34801561024057600080fd5b506101576004803603602081101561025757600080fd5b5035600160a060020a0316610e2a565b34801561027357600080fd5b5061029a6004803603602081101561028a57600080fd5b5035600160a060020a0316610e3c565b604080519115158252519081900360200190f35b3480156102ba57600080fd5b50610157600480360360208110156102d157600080fd5b5035600160a060020a0316610e51565b3480156102ed57600080fd5b506101576004803603602081101561030457600080fd5b5035600160a060020a0316610e63565b34801561032057600080fd5b506101576004803603602081101561033757600080fd5b5035600160a060020a0316610e75565b34801561035357600080fd5b50610157610e87565b34801561036857600080fd5b506101576004803603604081101561037f57600080fd5b50600160a060020a0381358116916020013516610e9a565b3480156103a357600080fd5b50610157600480360360208110156103ba57600080fd5b5035610eb7565b610138610f95565b3480156103d557600080fd5b50610138610fd1565b3480156103ea57600080fd5b506102186004803603602081101561040157600080fd5b5035600160a060020a03166110d7565b34801561041d57600080fd5b5061043b6004803603602081101561043457600080fd5b50356110f2565b6040518088815260200180602001878152602001868152602001858152602001848152602001838152602001828103825288818151815260200191508051906020019080838360005b8381101561049c578181015183820152602001610484565b50505050905090810190601f1680156104c95780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156104e957600080fd5b506101576004803603602081101561050057600080fd5b5035600160a060020a03166111b4565b34801561051c57600080fd5b506101576111c6565b3360009081526004602052604090205460ff16151561058e576040805160e560020a62461bcd02815260206004820152601360248201527f4e65656420616374697661746520666972737400000000000000000000000000604482015290519081900360640190fd5b3360009081526001602081905260408220549190821180156105dc5750600082815260208181526040808320600501543384526002909252909120546105d99163ffffffff6111d916565b42115b156107a25760008281526020818152604080832060050154338452600290925282205461060e9163ffffffff6111d916565b336000908152600360205260408120549192509061063390839063ffffffff6111e616565b90506000610647428463ffffffff6111e616565b60008681526020819052604090206003810154600490910154919250610685918491610679919063ffffffff6111f816565b9063ffffffff61120d16565b600160009081526020527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e80547fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e81549195506106fc916106ef9184916106799163ffffffff6111f816565b859063ffffffff6111d916565b600160009081526020527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e8154909450841015610782576040805160e560020a62461bcd02815260206004820152600960248201527f546f6f206561726c790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b505033600090815260016020819052604090912081905592506108169050565b6107aa610b48565b600083815260208190526040902060040154909150811015610816576040805160e560020a62461bcd02815260206004820152600960248201527f546f6f206561726c790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b336000908152600660205260409020548190600160a060020a03161561096457600061085e6064610852600c548561120d90919063ffffffff16565b9063ffffffff6111f816565b33600090815260066020908152604080832054600160a060020a031683526005909152902054909150610897908263ffffffff6111d916565b3360008181526006602090815260408083208054600160a060020a0390811685526005845282852096909655549094168252600781528382209282529190915220546108e9908263ffffffff6111d916565b3360008181526006602090815260408083208054600160a060020a0390811685526007845282852095855294835281842095909555935490921681526009909152205461093c908263ffffffff6111d916565b33600090815260066020908152604080832054600160a060020a031683526009909152902055505b33600090815260056020526040902054610984908263ffffffff6111d916565b336000908152600560209081526040808320939093556003905220429055505050565b60006109b1610cdb565b336000908152600160205260409020549091508110156109d057600080fd5b60006109e66064610852600b5461067986610eb7565b9050610a65610a58610a186109fa85610eb7565b6000868152602081905260409020600201549063ffffffff6111e616565b610a4c605a6108526064610679610a2e8a610eb7565b60008b8152602081905260409020600201549063ffffffff6111e616565b9063ffffffff6111e616565b829063ffffffff6111d916565b600a54604051919250600160a060020a03169082156108fc029083906000818181858888f19350505050158015610aa0573d6000803e3d6000fd5b50336108fc610abe610ab185610eb7565b349063ffffffff6111e616565b6040518115909202916000818181858888f19350505050158015610ae6573d6000803e3d6000fd5b503360009081526004602052604090205460ff161515610b1b57336000908152600460205260409020805460ff191660011790555b50336000908152600360209081526040808320429081905560018352818420949094556002909152902055565b3360009081526003602081815260408084205460018352818520548552918490528320909101548291610b81919063ffffffff6111d916565b4210610bac575033600090815260016020908152604080832054835290829052902060040154610c04565b3360009081526001602090815260408083205483529082905290206003810154600490910154610c0191610be091906111f8565b3360009081526003602052604090205461067990429063ffffffff6111e616565b90505b905090565b33600090815260066020526040902054600160a060020a031615610c2c57600080fd5b336000908152600460209081526040808320805460ff1916600190811790915560038352818420429055918290529091205580600160a060020a0381161515610c7d5750600a54600160a060020a03165b3360008181526006602090815260408083208054600160a060020a0390961673ffffffffffffffffffffffffffffffffffffffff19968716811790915583526008825282208054600181018255908352912001805490921617905550565b6001600090815260208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7f54341015610d60576040805160e560020a62461bcd02815260206004820152601260248201527f496e73756666696369656e742066756e64730000000000000000000000000000604482015290519081900360640190fd5b600060015b6008811015610da157610d7781610eb7565b3410158015610d905750610d8d81600101610eb7565b34105b15610d99578091505b600101610d65565b50610dac6008610eb7565b3410610c0457506008905090565b600160a060020a038083166000908152600660209081526040808320548416835260078252808320938516835292905220545b92915050565b600860205281600052604060002081815481101515610e0e57fe5b600091825260209091200154600160a060020a03169150829050565b60096020526000908152604090205481565b60046020526000908152604090205460ff1681565b60026020526000908152604090205481565b60016020526000908152604090205481565b60036020526000908152604090205481565b3360009081526009602052604090205490565b600760209081526000928352604080842090915290825290205481565b3360009081526001602081905260408220541415610ee75750600081815260208190526040902060020154610f90565b33600090815260036020908152604080832054600183528184205484529183905290912060050154429190910390819003801515610f3957505050600081815260208190526040902060020154610f90565b3360009081526001602090815260408083205483529082905281206005810154600290910154811515610f6857fe5b60008781526020819052604090206002015460649290910493909302605a0204909103925050505b919050565b6040805133815234602082015281517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c929181900390910190a1565b33600090815260056020526040902054303181111561103a576040805160e560020a62461bcd02815260206004820152601e60248201527f4e6f7420656e6f75676820455448206f6e2074686520636f6e74726163740000604482015290519081900360640190fd5b655af3107a4000811015611098576040805160e560020a62461bcd02815260206004820152601d60248201527f4d696e696d756d207769746864726177616c20302e3030303120455448000000604482015290519081900360640190fd5b336000818152600560205260408082208290555183156108fc0291849190818181858888f193505050501580156110d3573d6000803e3d6000fd5b5050565b600660205260009081526040902054600160a060020a031681565b600060208181529181526040908190208054600180830180548551600293821615610100026000190190911692909204601f810187900487028301870190955284825291949293909283018282801561118c5780601f106111615761010080835404028352916020019161118c565b820191906000526020600020905b81548152906001019060200180831161116f57829003601f168201915b5050505050908060020154908060030154908060040154908060050154908060060154905087565b60056020526000908152604090205481565b3360009081526008602052604090205490565b81810182811015610ded57fe5b6000828211156111f257fe5b50900390565b6000818381151561120557fe5b049392505050565b600082151561121e57506000610ded565b5081810281838281151561122e57fe5b0414610ded57fefea165627a7a723058209ebcc27944cf2d52d0dd0a26567fab2271451aeb46b524e7197e1e58cf694a950029"
}