{
  "address": "0xabccaadd77078a67622dfd5f74066ce4581c0a99",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "mameCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-22\n*/\n\n/**\n * Reference Code\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/examples/SimpleToken.sol\n */\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n   * @dev Multiplies two numbers, throws on overflow.\n   */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n   * @dev Integer division of two numbers, truncating the quotient.\n   */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n   * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n   */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n   * @dev Adds two numbers, throws on overflow.\n   */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20\n * @dev Standard ERC20 token interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  function allowance(address owner, address spender) public view returns (uint256);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n/**\n * @title mameCoin\n * @dev see https://mamecoin.jp/\n */\ncontract mameCoin is ERC20, Ownable {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n  mapping(address => mapping (address => uint256)) internal allowed;\n  mapping(address => uint256) internal lockups;\n\n  string public constant name = \"mameCoin\";\n  string public constant symbol = \"MAME\";\n  uint8 public constant decimals = 8;\n  uint256 totalSupply_ = 25000000000 * (10 ** uint256(decimals));\n\n  event Burn(address indexed to, uint256 amount);\n  event Refund(address indexed to, uint256 amount);\n  event Lockup(address indexed to, uint256 lockuptime);\n\n  /**\n   * @dev Constructor that gives msg.sender all of existing tokens.\n   */\n  constructor() public {\n    balances[msg.sender] = totalSupply_;\n    emit Transfer(address(0), msg.sender, totalSupply_);\n  }\n\n  /**\n   * @dev total number of tokens in existence\n   */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n   * @dev Gets the balance of the specified address.\n   * @param _owner The address to query the the balance of.\n   * @return An uint256 representing the amount owned by the passed address.\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n  /**\n   * @dev transfer token for a specified address\n   * @param _to The address to transfer to.\n   * @param _amount The amount to be transferred.\n   */\n  function transfer(address _to, uint256 _amount) public returns (bool) {\n    require(_to != address(0));\n    require(_amount <= balances[msg.sender]);\n    require(block.timestamp > lockups[msg.sender]);\n    require(block.timestamp > lockups[_to]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Transfer(msg.sender, _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _amount uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool) {\n    require(_to != address(0));\n    require(_amount <= balances[_from]);\n    require(_amount <= allowed[_from][msg.sender]);\n    require(block.timestamp > lockups[_from]);\n    require(block.timestamp > lockups[_to]);\n\n    balances[_from] = balances[_from].sub(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n    emit Transfer(_from, _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _amount The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _amount) public returns (bool) {\n    allowed[msg.sender][_spender] = _amount;\n    emit Approval(msg.sender, _spender, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _to address The address which is burned.\n   * @param _amount The amount of token to be burned.\n   */\n  function burn(address _to, uint256 _amount) public onlyOwner {\n    require(_amount <= balances[_to]);\n    require(block.timestamp > lockups[_to]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_to] = balances[_to].sub(_amount);\n    totalSupply_ = totalSupply_.sub(_amount);\n    emit Burn(_to, _amount);\n    emit Transfer(_to, address(0), _amount);\n  }\n\n  /**\n   * @dev Refund a specific amount of tokens.\n   * @param _to The address that will receive the refunded tokens.\n   * @param _amount The amount of tokens to refund.\n   */\n  function refund(address _to, uint256 _amount) public onlyOwner {\n    require(block.timestamp > lockups[_to]);\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Refund(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n  }\n\n  /**\n   * @dev Gets the lockuptime of the specified address.\n   * @param _owner The address to query the the lockup of.\n   * @return An uint256 unixstime the lockuptime which is locked until that time.\n   */\n  function lockupOf(address _owner) public view returns (uint256) {\n    return lockups[_owner];\n  }\n\n  /**\n   * @dev Lockup a specific address until given time.\n   * @param _to address The address which is locked.\n   * @param _lockupTimeUntil The lockuptime which is locked until that time.\n   */\n  function lockup(address _to, uint256 _lockupTimeUntil) public onlyOwner {\n    require(lockups[_to] < _lockupTimeUntil);\n    lockups[_to] = _lockupTimeUntil;\n    emit Lockup(_to, _lockupTimeUntil);\n  }\n\n  /**\n   * @dev airdrop tokens for a specified addresses\n   * @param _receivers The addresses to transfer to.\n   * @param _amount The amount to be transferred.\n   */\n  function airdrop(address[] _receivers, uint256 _amount) public returns (bool) {\n    require(block.timestamp > lockups[msg.sender]);\n    require(_receivers.length > 0);\n    require(_amount > 0);\n\n    uint256 _total = 0;\n\n    for (uint256 i = 0; i < _receivers.length; i++) {\n      require(_receivers[i] != address(0));\n      require(block.timestamp > lockups[_receivers[i]]);\n      _total = _total.add(_amount);\n    }\n\n    require(_total <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_total);\n\n    for (i = 0; i < _receivers.length; i++) {\n      balances[_receivers[i]] = balances[_receivers[i]].add(_amount);\n      emit Transfer(msg.sender, _receivers[i], _amount);\n    }\n\n    return true;\n  }\n\n  /**\n   * @dev distribute tokens for a specified addresses\n   * @param _receivers The addresses to transfer to.\n   * @param _amounts The amounts to be transferred.\n   */\n  function distribute(address[] _receivers, uint256[] _amounts) public returns (bool) {\n    require(block.timestamp > lockups[msg.sender]);\n    require(_receivers.length > 0);\n    require(_amounts.length > 0);\n    require(_receivers.length == _amounts.length);\n\n    uint256 _total = 0;\n\n    for (uint256 i = 0; i < _receivers.length; i++) {\n      require(_receivers[i] != address(0));\n      require(block.timestamp > lockups[_receivers[i]]);\n      require(_amounts[i] > 0);\n      _total = _total.add(_amounts[i]);\n    }\n\n    require(_total <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_total);\n\n    for (i = 0; i < _receivers.length; i++) {\n      balances[_receivers[i]] = balances[_receivers[i]].add(_amounts[i]);\n      emit Transfer(msg.sender, _receivers[i], _amounts[i]);\n    }\n\n    return true;\n  }\n}",
  "bytecode": "60806040526722b1c8c1227a000060045534801561001c57600080fd5b5060008054600160a060020a0319163390811782556004548183526001602090815260408085208390558051928352519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a361109a806100886000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f57806318160ddd146101b757806323b872dd146101de5780632929abe614610208578063313ce56714610296578063410085df146102c157806370a08231146102e75780638da5cb5b1461030857806395d89b41146103395780639dc29fac1461034e578063a7b8682414610372578063a9059cbb14610396578063adf9ffea146103ba578063c204642c146103db578063dd62ed3e14610432578063f2fde38b14610459575b600080fd5b34801561010157600080fd5b5061010a61047a565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014457818101518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018b57600080fd5b506101a3600160a060020a03600435166024356104b1565b604080519115158252519081900360200190f35b3480156101c357600080fd5b506101cc610517565b60408051918252519081900360200190f35b3480156101ea57600080fd5b506101a3600160a060020a036004358116906024351660443561051d565b34801561021457600080fd5b50604080516020600480358082013583810280860185019096528085526101a395369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506106cc9650505050505050565b3480156102a257600080fd5b506102ab610950565b6040805160ff9092168252519081900360200190f35b3480156102cd57600080fd5b506102e5600160a060020a0360043516602435610955565b005b3480156102f357600080fd5b506101cc600160a060020a0360043516610a54565b34801561031457600080fd5b5061031d610a6f565b60408051600160a060020a039092168252519081900360200190f35b34801561034557600080fd5b5061010a610a7e565b34801561035a57600080fd5b506102e5600160a060020a0360043516602435610ab5565b34801561037e57600080fd5b506102e5600160a060020a0360043516602435610bdf565b3480156103a257600080fd5b506101a3600160a060020a0360043516602435610c6e565b3480156103c657600080fd5b506101cc600160a060020a0360043516610d7e565b3480156103e757600080fd5b50604080516020600480358082013583810280860185019096528085526101a3953695939460249493850192918291850190849080828437509497505093359450610d999350505050565b34801561043e57600080fd5b506101cc600160a060020a0360043581169060243516610f6a565b34801561046557600080fd5b506102e5600160a060020a0360043516610f95565b60408051808201909152600881527f6d616d65436f696e000000000000000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60045490565b6000600160a060020a038316151561053457600080fd5b600160a060020a03841660009081526001602052604090205482111561055957600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561058957600080fd5b600160a060020a03841660009081526003602052604090205442116105ad57600080fd5b600160a060020a03831660009081526003602052604090205442116105d157600080fd5b600160a060020a0384166000908152600160205260409020546105fa908363ffffffff61102916565b600160a060020a03808616600090815260016020526040808220939093559085168152205461062f908363ffffffff61103b16565b600160a060020a038085166000908152600160209081526040808320949094559187168152600282528281203382529091522054610673908363ffffffff61102916565b600160a060020a038086166000818152600260209081526040808320338452825291829020949094558051868152905192871693919260008051602061104f833981519152929181900390910190a35060019392505050565b336000908152600360205260408120548190819042116106eb57600080fd5b84516000106106f957600080fd5b835160001061070757600080fd5b835185511461071557600080fd5b5060009050805b84518110156107ea57845160009086908390811061073657fe5b60209081029091010151600160a060020a0316141561075457600080fd5b60036000868381518110151561076657fe5b6020908102909101810151600160a060020a0316825281019190915260400160002054421161079457600080fd5b600084828151811015156107a457fe5b60209081029091010151116107b857600080fd5b6107e084828151811015156107c957fe5b60209081029091010151839063ffffffff61103b16565b915060010161071c565b3360009081526001602052604090205482111561080657600080fd5b33600090815260016020526040902054610826908363ffffffff61102916565b3360009081526001602052604081209190915590505b8451811015610945576108a1848281518110151561085657fe5b9060200190602002015160016000888581518110151561087257fe5b6020908102909101810151600160a060020a03168252810191909152604001600020549063ffffffff61103b16565b6001600087848151811015156108b357fe5b6020908102909101810151600160a060020a031682528101919091526040016000205584518590829081106108e457fe5b90602001906020020151600160a060020a031633600160a060020a031660008051602061104f833981519152868481518110151561091e57fe5b906020019060200201516040518082815260200191505060405180910390a360010161083c565b506001949350505050565b600881565b600054600160a060020a0316331461096c57600080fd5b600160a060020a038216600090815260036020526040902054421161099057600080fd5b6004546109a3908263ffffffff61103b16565b600455600160a060020a0382166000908152600160205260409020546109cf908263ffffffff61103b16565b600160a060020a038316600081815260016020908152604091829020939093558051848152905191927fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d92918290030190a2604080518281529051600160a060020a0384169160009160008051602061104f8339815191529181900360200190a35050565b600160a060020a031660009081526001602052604090205490565b600054600160a060020a031681565b60408051808201909152600481527f4d414d4500000000000000000000000000000000000000000000000000000000602082015281565b600054600160a060020a03163314610acc57600080fd5b600160a060020a038216600090815260016020526040902054811115610af157600080fd5b600160a060020a0382166000908152600360205260409020544211610b1557600080fd5b600160a060020a038216600090815260016020526040902054610b3e908263ffffffff61102916565b600160a060020a038316600090815260016020526040902055600454610b6a908263ffffffff61102916565b600455604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a0385169160008051602061104f8339815191529181900360200190a35050565b600054600160a060020a03163314610bf657600080fd5b600160a060020a0382166000908152600360205260409020548111610c1a57600080fd5b600160a060020a038216600081815260036020908152604091829020849055815184815291517fa25dc2c532ce8bb5ca6f0bbb701ea285dfa8c5fe65cdba305f88a0bab852ef829281900390910190a25050565b6000600160a060020a0383161515610c8557600080fd5b33600090815260016020526040902054821115610ca157600080fd5b336000908152600360205260409020544211610cbc57600080fd5b600160a060020a0383166000908152600360205260409020544211610ce057600080fd5b33600090815260016020526040902054610d00908363ffffffff61102916565b3360009081526001602052604080822092909255600160a060020a03851681522054610d32908363ffffffff61103b16565b600160a060020a03841660008181526001602090815260409182902093909355805185815290519192339260008051602061104f8339815191529281900390910190a350600192915050565b600160a060020a031660009081526003602052604090205490565b33600090815260036020526040812054819081904211610db857600080fd5b8451600010610dc657600080fd5b60008411610dd357600080fd5b5060009050805b8451811015610e6c578451600090869083908110610df457fe5b60209081029091010151600160a060020a03161415610e1257600080fd5b600360008683815181101515610e2457fe5b6020908102909101810151600160a060020a03168252810191909152604001600020544211610e5257600080fd5b610e62828563ffffffff61103b16565b9150600101610dda565b33600090815260016020526040902054821115610e8857600080fd5b33600090815260016020526040902054610ea8908363ffffffff61102916565b3360009081526001602052604081209190915590505b845181101561094557610edd8460016000888581518110151561087257fe5b600160008784815181101515610eef57fe5b6020908102909101810151600160a060020a03168252810191909152604001600020558451859082908110610f2057fe5b90602001906020020151600160a060020a031633600160a060020a031660008051602061104f833981519152866040518082815260200191505060405180910390a3600101610ebe565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600054600160a060020a03163314610fac57600080fd5b600160a060020a0381161515610fc157600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282111561103557fe5b50900390565b8181018281101561104857fe5b929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820e20f6efef0003d63e33a0fce9d0cbdb7ad6bf5c04d2f0096a067a0a74823873b0029"
}