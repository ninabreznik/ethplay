{
  "address": "0x90d46a9636b973f18186541d1b04ed3621a49cb0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Natmin Token",
  "contractName": "NatminToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-30\n*/\n\npragma solidity ^0.4.22;\n\n//Math operations with safety checks that throw on error\n\nlibrary SafeMath {\n\n    //multiply\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n    //divide\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    //subtract\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    //addition\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Ownable {\n    address public contractOwner;\n\n    event TransferredOwnership(address indexed _previousOwner, address indexed _newOwner);\n\n    constructor() public {        \n        contractOwner = msg.sender;\n    }\n\n    modifier ownerOnly() {\n        require(msg.sender == contractOwner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) internal ownerOnly {\n        require(_newOwner != address(0));\n        contractOwner = _newOwner;\n\n        emit TransferredOwnership(contractOwner, _newOwner);\n    }\n\n}\n\n// Natmin vesting contract for team members\ncontract NatminVesting is Ownable {\n    struct Vesting {        \n        uint256 amount;\n        uint256 endTime;\n    }\n    mapping(address => Vesting) internal vestings;\n\n    function addVesting(address _user, uint256 _amount, uint256 _endTime) public ;\n    function getVestedAmount(address _user) public view returns (uint256 _amount);\n    function getVestingEndTime(address _user) public view returns (uint256 _endTime);\n    function vestingEnded(address _user) public view returns (bool) ;\n    function endVesting(address _user) public ;\n}\n\n//ERC20 Standard interface specification\ncontract ERC20Standard {\n    function balanceOf(address _user) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n//ERC223 Standard interface specification\ncontract ERC223Standard {\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success);\n    event Transfer(address indexed _from, address indexed _to, uint _value, bytes _data);\n}\n\n//ERC223 function to handle incoming token transfers\ncontract ERC223ReceivingContract { \n    function tokenFallback(address _from, uint256 _value, bytes _data) public;\n}\n\ncontract BurnToken is Ownable {\n    using SafeMath for uint256;\n    \n    function burn(uint256 _value) public;\n    function _burn(address _user, uint256 _value) internal;\n    event Burn(address indexed _user, uint256 _value);\n}\n\n//NatminToken implements the ERC20, ERC223 standard methods\ncontract NatminToken is ERC20Standard, ERC223Standard, Ownable, NatminVesting, BurnToken {\n    using SafeMath for uint256;\n\n    string _name = \"Natmin\";\n    string _symbol = \"NAT\";\n    string _standard = \"ERC20 / ERC223\";\n    uint256 _decimals = 18; // same value as wei\n    uint256 _totalSupply;\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n\n    constructor(uint256 _supply) public {\n        require(_supply != 0);\n        _totalSupply = _supply * (10 ** 18);\n        balances[contractOwner] = _totalSupply;\n    }\n\n    // Returns the _name of the token\n    function name() public view returns (string) {\n        return _name;        \n    }\n\n    // Returns the _symbol of the token\n    function symbol() public view returns (string) {\n        return _symbol;\n    }\n\n    // Returns the _standard of the token\n    function standard() public view returns (string) {\n        return _standard;\n    }\n\n    // Returns the _decimals of the token\n    function decimals() public view returns (uint256) {\n        return _decimals;\n    }\n\n    // Function to return the total supply of the token\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    // Function to return the balance of a specified address\n    function balanceOf(address _user) public view returns (uint256 balance){\n        return balances[_user];\n    }   \n\n    // Transfer function to be compatable with ERC20 Standard\n    function transfer(address _to, uint256 _value) public returns (bool success){\n        require(_to != 0x0);\n        bytes memory _empty;\n        if(isContract(_to)){\n            return transferToContract(_to, _value, _empty);\n        }else{\n            return transferToAddress(_to, _value, _empty);\n        }\n    }\n\n    // Transfer function to be compatable with ERC223 Standard\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success) {\n        require(_to != 0x0);\n        if(isContract(_to)){\n            return transferToContract(_to, _value, _data);\n        }else{\n            return transferToAddress(_to, _value, _data);\n        }\n    }\n\n    // This function checks if the address is a contract or wallet\n    // If the codeLength is greater than 0, it is a contract\n    function isContract(address _to) internal view returns (bool) {\n        uint256 _codeLength;\n\n        assembly {\n            _codeLength := extcodesize(_to)\n        }\n\n        return _codeLength > 0;\n    }\n\n    // This function to be used if the target is a contract address\n    function transferToContract(address _to, uint256 _value, bytes _data) internal returns (bool) {\n        require(balances[msg.sender] >= _value);\n        require(validateTransferAmount(msg.sender,_value));\n        \n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        ERC223ReceivingContract _tokenReceiver = ERC223ReceivingContract(_to);\n        _tokenReceiver.tokenFallback(msg.sender, _value, _data);\n\n        emit Transfer(msg.sender, _to, _value);\n        emit Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n\n    // This function to be used if the target is a normal eth/wallet address \n    function transferToAddress(address _to, uint256 _value, bytes _data) internal returns (bool) {\n        require(balances[msg.sender] >= _value);\n        require(validateTransferAmount(msg.sender,_value));\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n        emit Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n\n    // ERC20 standard function\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\n        require(_to != 0x0);\n        require(_value <= allowed[_from][msg.sender]);\n        require(_value <= balances[_from]);\n        require(validateTransferAmount(_from,_value));\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n        emit Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    // ERC20 standard function\n    function approve(address _spender, uint256 _value) public returns (bool success){\n        allowed[msg.sender][_spender] = 0;\n        allowed[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n\n    // ERC20 standard function\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining){\n        return allowed[_owner][_spender];\n    }\n\n    // Stops any attempt from sending Ether to this contract\n    function () public {\n        revert();\n    }\n\n    // public function to call the _burn function \n    function burn(uint256 _value) public ownerOnly {\n        _burn(msg.sender, _value);\n    }\n\n    // Burn the specified amount of tokens by the owner\n    function _burn(address _user, uint256 _value) internal ownerOnly {\n        require(balances[_user] >= _value);\n\n        balances[_user] = balances[_user].sub(_value);\n        _totalSupply = _totalSupply.sub(_value);\n        \n        emit Burn(_user, _value);\n        emit Transfer(_user, address(0), _value);\n\n        bytes memory _empty;\n        emit Transfer(_user, address(0), _value, _empty);\n    }\n\n    // Create a vesting entry for the specified user\n    function addVesting(address _user, uint256 _amount, uint256 _endTime) public ownerOnly {\n        vestings[_user].amount = _amount;\n        vestings[_user].endTime = _endTime;\n    }\n\n    // Returns the vested amount for a specified user\n    function getVestedAmount(address _user) public view returns (uint256 _amount) {\n        _amount = vestings[_user].amount;\n        return _amount;\n    }\n\n    // Returns the vested end time for a specified user\n    function getVestingEndTime(address _user) public view returns (uint256 _endTime) {\n        _endTime = vestings[_user].endTime;\n        return _endTime;\n    }\n\n    // Checks if the venting period is over for a specified user\n    function vestingEnded(address _user) public view returns (bool) {\n        if(vestings[_user].endTime <= now) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    // This function checks the transfer amount against the current balance and vested amount\n    // Returns true if transfer amount is smaller than the difference between the balance and vested amount\n    function validateTransferAmount(address _user, uint256 _amount) internal view returns (bool) {\n        if(vestingEnded(_user)){\n            return true;\n        }else{\n            uint256 _vestedAmount = getVestedAmount(_user);\n            uint256 _currentBalance = balanceOf(_user);\n            uint256 _availableBalance = _currentBalance.sub(_vestedAmount);\n\n            if(_amount <= _availableBalance) {\n                return true;\n            }else{\n                return false;\n            }\n        }\n    }\n\n    // Manual end vested time \n    function endVesting(address _user) public ownerOnly {\n        vestings[_user].endTime = now;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getVestingEndTime\",\"outputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"addVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"endVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getVestedAmount\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"vestingEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"TransferredOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60c0604052600660808190527f4e61746d696e000000000000000000000000000000000000000000000000000060a09081526200004091600291906200013f565b506040805180820190915260038082527f4e4154000000000000000000000000000000000000000000000000000000000060209092019182526200008591816200013f565b5060408051808201909152600e8082527f4552433230202f204552433232330000000000000000000000000000000000006020909201918252620000cc916004916200013f565b506012600555348015620000df57600080fd5b50604051602080620011dd833981016040525160008054600160a060020a031916331790558015156200011157600080fd5b670de0b6b3a764000002600681905560008054600160a060020a0316815260076020526040902055620001e4565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200018257805160ff1916838001178555620001b2565b82800160010185558215620001b2579182015b82811115620001b257825182559160200191906001019062000195565b50620001c0929150620001c4565b5090565b620001e191905b80821115620001c05760008155600101620001cb565b90565b610fe980620001f46000396000f3006080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461010d578063095ea7b31461019757806315875f54146101cf57806318160ddd1461020257806323b872dd14610217578063313ce5671461024157806342966c68146102565780634691a998146102705780635a3b7e421461029757806370a08231146102ac57806395d89b41146102cd578063a9059cbb146102e2578063be45fd6214610306578063bf05d6531461036f578063ce606ee014610390578063d5a73fdd146103c1578063dd62ed3e146103e2578063fe0c408514610409575b34801561010757600080fd5b50600080fd5b34801561011957600080fd5b5061012261042a565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015c578181015183820152602001610144565b50505050905090810190601f1680156101895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a357600080fd5b506101bb600160a060020a03600435166024356104bd565b604080519115158252519081900360200190f35b3480156101db57600080fd5b506101f0600160a060020a0360043516610523565b60408051918252519081900360200190f35b34801561020e57600080fd5b506101f0610546565b34801561022357600080fd5b506101bb600160a060020a036004358116906024351660443561054c565b34801561024d57600080fd5b506101f06106c9565b34801561026257600080fd5b5061026e6004356106cf565b005b34801561027c57600080fd5b5061026e600160a060020a03600435166024356044356106f3565b3480156102a357600080fd5b5061012261072d565b3480156102b857600080fd5b506101f0600160a060020a036004351661078e565b3480156102d957600080fd5b506101226107a9565b3480156102ee57600080fd5b506101bb600160a060020a036004351660243561080a565b34801561031257600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101bb948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506108559650505050505050565b34801561037b57600080fd5b5061026e600160a060020a0360043516610897565b34801561039c57600080fd5b506103a56108ce565b60408051600160a060020a039092168252519081900360200190f35b3480156103cd57600080fd5b506101f0600160a060020a03600435166108dd565b3480156103ee57600080fd5b506101f0600160a060020a03600435811690602435166108f8565b34801561041557600080fd5b506101bb600160a060020a0360043516610923565b60028054604080516020601f60001961010060018716150201909416859004938401819004810282018101909252828152606093909290918301828280156104b35780601f10610488576101008083540402835291602001916104b3565b820191906000526020600020905b81548152906001019060200180831161049657829003601f168201915b5050505050905090565b336000818152600860209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600160a060020a038116600090815260016020819052604090912001545b919050565b60065490565b6000600160a060020a038316151561056357600080fd5b600160a060020a038416600090815260086020908152604080832033845290915290205482111561059357600080fd5b600160a060020a0384166000908152600760205260409020548211156105b857600080fd5b6105c28483610955565b15156105cd57600080fd5b600160a060020a0384166000908152600760205260409020546105f6908363ffffffff6109b816565b600160a060020a03808616600090815260076020526040808220939093559085168152205461062b908363ffffffff6109ca16565b600160a060020a03808516600090815260076020908152604080832094909455918716815260088252828120338252909152205461066f908363ffffffff6109b816565b600160a060020a0380861660008181526008602090815260408083203384528252918290209490945580518681529051928716939192600080516020610f9e833981519152929181900390910190a35060015b9392505050565b60055490565b600054600160a060020a031633146106e657600080fd5b6106f033826109d9565b50565b600054600160a060020a0316331461070a57600080fd5b600160a060020a0390921660009081526001602081905260409091209182550155565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104b35780601f10610488576101008083540402835291602001916104b3565b600160a060020a031660009081526007602052604090205490565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104b35780601f10610488576101008083540402835291602001916104b3565b60006060600160a060020a038416151561082357600080fd5b61082c84610b99565b156108435761083c848483610ba1565b915061084e565b61083c848483610e18565b5092915050565b6000600160a060020a038416151561086c57600080fd5b61087584610b99565b1561088c57610885848484610ba1565b90506106c2565b610885848484610e18565b600054600160a060020a031633146108ae57600080fd5b600160a060020a0316600090815260016020819052604090912042910155565b600054600160a060020a031681565b600160a060020a031660009081526001602052604090205490565b600160a060020a03918216600090815260086020908152604080832093909416825291909152205490565b600160a060020a038116600090815260016020819052604082200154421061094d57506001610541565b506000610541565b60008060008061096486610923565b1561097257600193506109af565b61097b866108dd565b92506109868661078e565b9150610998828463ffffffff6109b816565b90508085116109aa57600193506109af565b600093505b50505092915050565b6000828211156109c457fe5b50900390565b6000828201838110156106c257fe5b600054606090600160a060020a031633146109f357600080fd5b600160a060020a038316600090815260076020526040902054821115610a1857600080fd5b600160a060020a038316600090815260076020526040902054610a41908363ffffffff6109b816565b600160a060020a038416600090815260076020526040902055600654610a6d908363ffffffff6109b816565b600655604080518381529051600160a060020a038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518381529051600091600160a060020a03861691600080516020610f9e8339815191529181900360200190a36000600160a060020a031683600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1684846040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610b59578181015183820152602001610b41565b50505050905090810190601f168015610b865780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3505050565b6000903b1190565b336000908152600760205260408120548190841115610bbf57600080fd5b610bc93385610955565b1515610bd457600080fd5b33600090815260076020526040902054610bf4908563ffffffff6109b816565b3360009081526007602052604080822092909255600160a060020a03871681522054610c26908563ffffffff6109ca16565b600160a060020a03861660008181526007602090815260408083209490945592517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081523360048201818152602483018a90526060604484019081528951606485015289518c9850959663c0ee0b8a9693958c958c956084909101928601918190849084905b83811015610cc4578181015183820152602001610cac565b50505050905090810190601f168015610cf15780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610d1257600080fd5b505af1158015610d26573d6000803e3d6000fd5b5050604080518781529051600160a060020a0389169350339250600080516020610f9e8339815191529181900360200190a384600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1686866040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610dd2578181015183820152602001610dba565b50505050905090810190601f168015610dff5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3506001949350505050565b33600090815260076020526040812054831115610e3457600080fd5b610e3e3384610955565b1515610e4957600080fd5b33600090815260076020526040902054610e69908463ffffffff6109b816565b3360009081526007602052604080822092909255600160a060020a03861681522054610e9b908463ffffffff6109ca16565b600160a060020a038516600081815260076020908152604091829020939093558051868152905191923392600080516020610f9e8339815191529281900390910190a383600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1685856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610f58578181015183820152602001610f40565b50505050905090810190601f168015610f855780820380516001836020036101000a031916815260200191505b50935050505060405180910390a350600193925050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820df7b03d92cdc22fe07016078e29862359b9f234beca31c1e025490f96eb52d2900290000000000000000000000000000000000000000000000000000000017d78400",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000017d78400"
}