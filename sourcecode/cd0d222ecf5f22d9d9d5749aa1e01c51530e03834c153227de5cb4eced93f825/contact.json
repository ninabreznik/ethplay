{
  "address": "0x90cc5df88b471e554aa63a18e2370f582709f1be",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "POMZ",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-07\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * title SafeMath\n * @dev Math operations with safety checks that throw on error\n*/\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title ERC20 interface\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n */\n\ninterface ERC20 {\n\n    //Returns the account balance of another account with address _owner.\n    function balanceOf(address _owner) external constant returns (uint256 balance);\n\n    //Transfers _value amount of tokens to address _to, and MUST fire the Transfer event.\n    //The function SHOULD throw if the _from account balance does not have enough tokens to spend.\n    //\n    //Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    //Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event.\n    //\n    //The transferFrom method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.\n    //This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge\n    //fees in sub-currencies. The function SHOULD throw unless the _from account has deliberately authorized\n    //the sender of the message via some mechanism.\n    //\n    //Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n\n    //Allows _spender to withdraw from your account multiple times, up to the _value amount.\n    //If this function is called again it overwrites the current allowance with _value.\n    //\n    //NOTE: To prevent attack vectors like the one described here and discussed here, clients SHOULD make\n    //sure to create user interfaces in such a way that they set the allowance first to 0 before setting it\n    //to another value for the same spender. THOUGH The contract itself shouldn't enforce it, to allow\n    //backwards compatibility with contracts deployed before\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    //Returns the amount which _spender is still allowed to withdraw from _owner.\n    function allowance(address _owner, address _spender) external returns (uint256 remaining);\n\n    //MUST trigger when tokens are transferred, including zero value transfers.\n    //\n    //A token contract which creates new tokens SHOULD trigger a Transfer event with the _from\n    //address set to 0x0 when tokens are created.\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    //MUST trigger on any successful call to approve(address _spender, uint256 _value).\n    event Approval(address indexed _owner, address indexed _spender, uint256  _value);\n}\n\n\ncontract POMZ is ERC20 {\n\n    //use libraries section\n\tusing SafeMath for uint256;\n\n    //token characteristics section\n    uint public constant decimals = 8;\n    uint256 public totalSupply = 5000000000 * 10 ** decimals;\n    string public constant name = \"POMZ\";\n    string public constant symbol = \"POMZ\";\n\n    //storage section\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    //all token to creator\n\tconstructor() public {\n\t\tbalances[msg.sender] = totalSupply;\n\t}\n\n    //Returns the account balance of another account with address _owner.\n    function balanceOf(address _owner) public view returns (uint256) {\n\t    return balances[_owner];\n    }\n\n    //Transfers _value amount of tokens to address _to, and MUST fire the Transfer event.\n    //The function SHOULD throw if the _from account balance does not have enough tokens to spend.\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0));\n        require(balances[msg.sender] >= _value);\n        require(balances[_to] + _value >= balances[_to]);\n\n        uint256 previousBalances = balances[_to];\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        assert(balances[_to].sub(_value) == previousBalances);\n        return true;\n    }\n\n    //Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event.\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0));\n        require(balances[_from] >= _value);\n        require(allowed[_from][msg.sender] >= _value);\n        require(balances[_to] + _value >= balances[_to]);\n\n        uint256 previousBalances = balances[_to];\n\t    balances[_from] = balances[_from].sub(_value);\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n\t\tassert(balances[_to].sub(_value) == previousBalances);\n        return true;\n    }\n\n    //Allows _spender to withdraw from your account multiple times, up to the _value amount.\n    //If this function is called again it overwrites the current allowance with _value.\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        \n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    //Returns the amount which _spender is still allowed to withdraw from _owner.\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    // If ether is sent to this address, send it back.\n\tfunction () public {\n        revert();\n    }\n\n}",
  "bytecode": "60806040526008600a0a64012a05f2000260005534801561001f57600080fd5b50600054600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f6f806100756000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100ab578063095ea7b31461013b57806318160ddd146101a057806323b872dd146101cb578063313ce5671461025057806370a082311461027b57806395d89b41146102d2578063a9059cbb14610362578063dd62ed3e146103c7575b3480156100a557600080fd5b50600080fd5b3480156100b757600080fd5b506100c061043e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101005780820151818401526020810190506100e5565b50505050905090810190601f16801561012d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014757600080fd5b50610186600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610477565b604051808215151515815260200191505060405180910390f35b3480156101ac57600080fd5b506101b56105b7565b6040518082815260200191505060405180910390f35b3480156101d757600080fd5b50610236600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105bd565b604051808215151515815260200191505060405180910390f35b34801561025c57600080fd5b50610265610aac565b6040518082815260200191505060405180910390f35b34801561028757600080fd5b506102bc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ab1565b6040518082815260200191505060405180910390f35b3480156102de57600080fd5b506102e7610afa565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561032757808201518184015260208101905061030c565b50505050905090810190601f1680156103545780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561036e57600080fd5b506103ad600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b33565b604051808215151515815260200191505060405180910390f35b3480156103d357600080fd5b50610428600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e87565b6040518082815260200191505060405180910390f35b6040805190810160405280600481526020017f504f4d5a0000000000000000000000000000000000000000000000000000000081525081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156104c757600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b600080600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156105fc57600080fd5b82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561064a57600080fd5b82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156106d557600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015151561076457600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506107f883600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f0e90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108ca83600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f0e90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061099c83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2790919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a380610a9784600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f0e90919063ffffffff16565b141515610aa057fe5b60019150509392505050565b600881565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040805190810160405280600481526020017f504f4d5a0000000000000000000000000000000000000000000000000000000081525081565b600080600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515610b7257600080fd5b82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610bc057600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110151515610c4f57600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610ce383600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f0e90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d7883600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2790919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a380610e7384600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f0e90919063ffffffff16565b141515610e7c57fe5b600191505092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000828211151515610f1c57fe5b818303905092915050565b60008183019050828110151515610f3a57fe5b809050929150505600a165627a7a723058208d438ce722bd25976f692c936834ed899532427a51cf6c0df68c9981d49ed9e90029"
}