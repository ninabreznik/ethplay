{
  "address": "0x028460acee8af696b6fe5801cb39a712de11b61a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PiggyBank",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-24\n*/\n\npragma solidity ^0.4.24;\n\n/*\n*\n*__/\\\\\\\\\\\\\\\\\\\\\\\\\\__________________________________________________/\\\\\\\\\\\\\\\\\\\\\\\\\\______________________________________________\n* _\\/\\\\\\/////////\\\\\\_______________________________________________\\/\\\\\\/////////\\\\\\_______________________________/\\\\\\_________\n*  _\\/\\\\\\_______\\/\\\\\\__/\\\\\\___/\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\_____/\\\\\\__/\\\\\\_\\/\\\\\\_______\\/\\\\\\______________________________\\/\\\\\\_________\n*   _\\/\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\///___/\\\\\\////\\\\\\__/\\\\\\////\\\\\\___\\//\\\\\\/\\\\\\__\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\\\\\\\_____/\\\\/\\\\\\\\\\\\___\\/\\\\\\\\\\\\\\\\____\n*    _\\/\\\\\\/////////_____/\\\\\\_\\//\\\\\\\\\\\\\\\\\\_\\//\\\\\\\\\\\\\\\\\\____\\//\\\\\\\\\\___\\/\\\\\\/////////\\\\\\_\\////////\\\\\\___\\/\\\\\\////\\\\\\__\\/\\\\\\////\\\\\\__\n*     _\\/\\\\\\_____________\\/\\\\\\__\\///////\\\\\\__\\///////\\\\\\_____\\//\\\\\\____\\/\\\\\\_______\\/\\\\\\___/\\\\\\\\\\\\\\\\\\\\__\\/\\\\\\__\\//\\\\\\_\\/\\\\\\\\\\\\\\\\/___\n*      _\\/\\\\\\_____________\\/\\\\\\__/\\\\_____\\\\\\__/\\\\_____\\\\\\__/\\\\_/\\\\\\_____\\/\\\\\\_______\\/\\\\\\__/\\\\\\/////\\\\\\__\\/\\\\\\___\\/\\\\\\_\\/\\\\\\///\\\\\\___\n*       _\\/\\\\\\_____________\\/\\\\\\_\\//\\\\\\\\\\\\\\\\__\\//\\\\\\\\\\\\\\\\__\\//\\\\\\\\/______\\/\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\//\\\\\\\\\\\\\\\\/\\\\_\\/\\\\\\___\\/\\\\\\_\\/\\\\\\_\\///\\\\\\_\n*        _\\///______________\\///___\\////////____\\////////____\\////________\\/////////////_____\\////////\\//__\\///____\\///__\\///____\\///__\n*/\n\nlibrary SafeMath {\n    function mul(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n\n        return c;\n    }\n\n    function div(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function sub(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        require(_b <= _a);\n        uint256 c = _a - _b;\n\n        return c;\n    }\n\n    function add(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        uint256 c = _a + _b;\n        require(c >= _a);\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns(uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyThisOwner(address _owner) {\n        require(owner == _owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\ncontract Betting {\n\n    uint8 public constant betsCount = 28;\n    uint8 public constant betKillCount = 2;\n    struct Bet {\n        uint256 minSum;     // min value eth for choose this bet\n        uint256 cooldown;   // time for reset timer\n    }\n\n    Bet[] public bets;\n\n    constructor() public {\n        bets.push(Bet(0.01 ether, 86400));  // 24 hour\n        bets.push(Bet(0.02 ether, 82800));  // 23 hour\n        bets.push(Bet(0.03 ether, 79200));  // 22 hour\n        bets.push(Bet(0.04 ether, 75600));  // 21 hour\n        bets.push(Bet(0.05 ether, 72000));  // 20 hour\n        bets.push(Bet(0.06 ether, 68400));  // 19 hour\n        bets.push(Bet(0.07 ether, 64800));  // 18 hour\n        bets.push(Bet(0.08 ether, 61200));  // 17 hour\n        bets.push(Bet(0.09 ether, 57600));  // 16 hour\n        bets.push(Bet(0.1 ether, 54000));   // 15 hour\n        bets.push(Bet(0.11 ether, 50400));  // 14 hour\n        bets.push(Bet(0.12 ether, 46800));  // 13 hour\n        bets.push(Bet(0.13 ether, 43200));  // 12 hour\n        bets.push(Bet(0.14 ether, 39600));  // 11 hour\n        bets.push(Bet(0.15 ether, 36000));  // 10 hour\n        bets.push(Bet(0.16 ether, 32400));  // 9 hour\n        bets.push(Bet(0.17 ether, 28800));  // 8 hour\n        bets.push(Bet(0.18 ether, 25200));  // 7 hour\n        bets.push(Bet(0.19 ether, 21600));  // 6 hour\n        bets.push(Bet(0.2 ether, 18000));   // 5 hour\n        bets.push(Bet(0.21 ether, 14400));  // 4 hour\n        bets.push(Bet(0.22 ether, 10800));  // 3 hour\n        bets.push(Bet(0.25 ether, 7200));   // 2 hour\n        bets.push(Bet(0.5 ether, 3600));    // 1 hour\n        bets.push(Bet(1 ether, 2400));      // 40 min\n        bets.push(Bet(5 ether, 1200));      // 20 min\n        bets.push(Bet(10 ether, 600));      // 10 min\n        bets.push(Bet(50 ether, 300));      // 5 min\n    }\n\n    function getBet(uint256 _betIndex) public view returns(uint256, uint256) {\n        Bet memory bet = bets[_betIndex];\n        return (bet.minSum, bet.cooldown);\n    }\n\n    function getBetIndex(uint256 _sum) public view returns(uint256) {\n        for (uint256 i = betsCount - 1; i >= 0; i--) {\n            if (_sum >= bets[i].minSum) return i;\n        }\n\n        revert('Bet not found');\n    }\n\n    function getMinBetIndexForKill(uint256 _index) public view returns(uint256) {\n        if (_index < betKillCount) return 0;\n\n        return _index - betKillCount;\n    }\n\n}\n\ncontract PiggyBank is Ownable, Betting {\n\n    using SafeMath for uint256;\n\n    event NewRound(uint256 _roundId, uint256 _endTime);\n    event CloseRound(uint256 _roundId);\n    event UpdateRound(uint256 _roundId, uint256 _sum, address _winner, uint256 _endTime, uint256 _cap);\n    event PayWinCap(uint256 _roundId, address _winner, uint256 _cap);\n\n    struct Round {\n        uint256 endTime;\n        uint256 cap;\n        uint256 lastBetIndex;\n        uint256 countBets;\n        address winner;\n        bool isPaid;\n    }\n\n    Round[] public rounds;\n    uint256 public currentRound;\n    uint256 public constant defaultRoundTime = 86400;   // 24 hours\n    uint256 public constant freeBetsCount = 5;\n    uint256 public constant ownerDistribution = 15;     // 15%\n    uint256 public constant referrerDistribution = 5;   // 5%\n    mapping (address => address) public playerToReferrer;\n\n    constructor() public {\n\n    }\n\n    function getRoundInfo(uint256 _roundId) public view returns(uint256, uint256, uint256, address) {\n        Round memory round = rounds[_roundId];\n        return (round.endTime, round.cap, round.lastBetIndex, round.winner);\n    }\n\n    function payWinCap(uint256 _roundId) {\n        require(rounds[_roundId].endTime < now, 'Round is not closed');\n        require(rounds[_roundId].isPaid == false, 'Round is paid');\n\n        rounds[_roundId].isPaid = true;\n        rounds[_roundId].winner.transfer(rounds[_roundId].cap);\n\n        emit PayWinCap(_roundId, rounds[_roundId].winner, rounds[_roundId].cap);\n    }\n\n    function _startNewRoundIfNeeded() private {\n        if (rounds.length > currentRound) return;\n\n        uint256 roundId = rounds.push(Round(now + defaultRoundTime, 0, 0, 0, 0x0, false)) - 1;\n        emit NewRound(roundId, now);\n    }\n\n    function _closeRoundIfNeeded() private {\n        if (rounds.length <= currentRound) return;\n        if (now <= rounds[currentRound].endTime) return;\n\n        currentRound = currentRound.add(1);\n        emit CloseRound(currentRound - 1);\n    }\n\n    function depositRef(address _referrer) payable public {\n        uint256 betIndex = getBetIndex(msg.value);\n        // close if needed\n        _closeRoundIfNeeded();\n\n        // for new rounds\n        _startNewRoundIfNeeded();\n\n        require(betIndex >= getMinBetIndexForKill(rounds[currentRound].lastBetIndex), \"More bet value required\");\n        Bet storage bet = bets[betIndex];\n\n        // work with actual\n        rounds[currentRound].countBets++;\n        rounds[currentRound].lastBetIndex = betIndex;\n        rounds[currentRound].endTime = now.add(bet.cooldown);\n        rounds[currentRound].winner = msg.sender;\n\n        // distribution\n        uint256 ownerPercent = 0;\n        uint256 referrerPercent = 0;\n        if (rounds[currentRound].countBets > freeBetsCount) {\n            ownerPercent = ownerDistribution;\n            if (playerToReferrer[msg.sender] == 0x0 && _referrer != 0x0 && _referrer != msg.sender) playerToReferrer[msg.sender] = _referrer;\n            if (playerToReferrer[msg.sender] != 0x0) referrerPercent = referrerDistribution;\n        }\n\n        ownerPercent = ownerPercent.sub(referrerPercent);\n        if (ownerPercent > 0) owner.transfer(msg.value * ownerPercent / 100);\n        if (referrerPercent > 0 && playerToReferrer[msg.sender] != 0x0) playerToReferrer[msg.sender].transfer(msg.value * referrerPercent / 100);\n\n        rounds[currentRound].cap = rounds[currentRound].cap.add(msg.value * (100 - (ownerPercent + referrerPercent)) / 100);\n\n        emit UpdateRound(currentRound, msg.value * (100 - (ownerPercent + referrerPercent)) / 100, rounds[currentRound].winner, rounds[currentRound].endTime, rounds[currentRound].cap);\n    }\n\n    function deposit() payable public {\n        depositRef(0x0);\n    }\n\n}",
  "bytecode": ""
}