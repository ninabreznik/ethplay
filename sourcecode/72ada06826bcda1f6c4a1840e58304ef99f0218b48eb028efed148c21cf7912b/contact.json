{
  "address": "0x8866d52303e372c2a2936d8ea09afd87bcbd8cf2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TrustPoolToken",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-08\n*/\n\npragma solidity ^0.4.16;\n\n/* \n   High value, community controlled token.\n   */\n   contract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) constant returns (uint256);\n    function transfer(address to, uint256 value) returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n  }\n\n/*\n   ERC20 interface\n  see https://github.com/ethereum/EIPs/issues/20\n  */\n  contract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) returns (bool);\n    function approve(address spender, uint256 value) returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n  }\n\n/*  SafeMath - the lowest gas library\n  Math operations with safety checks that throw on error\n  */\n  library SafeMath {\n\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n      uint256 c = a * b;\n      assert(a == 0 || c / a == b);\n      return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\n      uint256 c = a / b;\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n      return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n      assert(b <= a);\n      return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n      uint256 c = a + b;\n      assert(c >= a);\n      return c;\n    }\n\n  }\n\n/*\nBasic token\n Basic version of StandardToken, with no allowances. \n */\n contract BasicToken is ERC20Basic {\n\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /*\n  Gets the balance of the specified address.\n   param _owner The address to query the the balance of. \n   return An uint256 representing the amount owned by the passed address.\n   */\n   function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/* Implementation of the basic standard token.\n  https://github.com/ethereum/EIPs/issues/20\n  */\n  contract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) allowed;\n\n  /*\n    Transfer tokens from one address to another\n    param _from address The address which you want to send tokens from\n    param _to address The address which you want to transfer to\n    param _value uint256 the amout of tokens to be transfered\n    */\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n      var _allowance = allowed[_from][msg.sender];\n\n      // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n      // require (_value <= _allowance);\n\n      balances[_to] = balances[_to].add(_value);\n      balances[_from] = balances[_from].sub(_value);\n      allowed[_from][msg.sender] = _allowance.sub(_value);\n      Transfer(_from, _to, _value);\n      return true;\n    }\n\n  /*\n  Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   param _spender The address which will spend the funds.\n   param _value The amount of Roman Lanskoj's tokens to be spent.\n   */\n   function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /*\n  Function to check the amount of tokens that an owner allowed to a spender.\n  param _owner address The address which owns the funds.\n  param _spender address The address which will spend the funds.\n  return A uint256 specifing the amount of tokens still available for the spender.\n  */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n\n/*\nThe Ownable contract has an owner address, and provides basic authorization control\n functions, this simplifies the implementation of \"user permissions\".\n */\n contract Ownable {\n\n  address public owner;\n\n\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n  /*\n  Throws if called by any account other than the owner.\n  */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /*\n  Allows the current owner to transfer control of the contract to a newOwner.\n  param newOwner The address to transfer ownership to.\n  */\n  function transferOwnership(address newOwner) onlyOwner {\n    require(newOwner != address(0));      \n    owner = newOwner;\n  }\n\n}\n\ncontract TrustPoolToken is StandardToken {\n  string public constant name = \"Trust Pool Token\";\n  string public constant symbol = \"TPL\";\n  uint public constant decimals = 10;\n  uint256 public initialSupply;\n\n  // Original 10MTI contract\n  ERC20 public sourceTokens = ERC20(0x9742fA8CB51d294C8267DDFEad8582E16f18e421); //real\n\n\n  // Manager account initially holding all 50M tokens\n  address public manager = 0x36586ef28844D0f2587c4b565C6D57aA677Ef09E; //real\n\n  function TrustPoolToken() {\n   totalSupply = 50000000 * 10 ** decimals;\n   balances[msg.sender] = totalSupply;\n   initialSupply = totalSupply;\n\n   Transfer(0, this, totalSupply);\n   Transfer(this, msg.sender, totalSupply);\n  }\n\n  /*\n  Converts all 10MTI tokens approve()'d by msg.sender to this contract\n  */\n  function convert10MTI() external {\n    uint256 balance = sourceTokens.balanceOf(msg.sender);\n    uint256 allowed = sourceTokens.allowance(msg.sender, this); \n    uint256 tokensToTransfer = (balance < allowed) ? balance : allowed;\n    //burn 10MTI\n    sourceTokens.transferFrom(msg.sender, 0, tokensToTransfer);\n    // transferFrom(manager, msg.sender, tokensToTransfer); this should either be called as `this.call.transferFrom(...)'\n    // or just inlined\n    balances[manager] = balances[manager].sub(tokensToTransfer);\n    balances[msg.sender] = balances[msg.sender].add(tokensToTransfer);\n  }\n}",
  "bytecode": "606060405260048054600160a060020a0319908116739742fa8cb51d294c8267ddfead8582e16f18e42117909155600580549091167336586ef28844d0f2587c4b565c6d57aa677ef09e179055341561005757600080fd5b5b6706f05b59d3b200006000818155600160a060020a0333811682526001602052604080832084905560038490553090911692600080516020610a7f833981519152915190815260200160405180910390a333600160a060020a031630600160a060020a0316600080516020610a7f83398151915260005460405190815260200160405180910390a35b5b61098e806100f16000396000f300606060405236156100a95763ffffffff60e060020a60003504166306fdde0381146100ae578063095ea7b31461013957806318160ddd1461016f57806323b872dd14610194578063313ce567146101d0578063378dc3dc146101f5578063481c6a751461021a57806370a082311461024957806378a7e17d1461027a57806395d89b411461028f578063a9059cbb1461031a578063b2f7e98914610350578063dd62ed3e1461037f575b600080fd5b34156100b957600080fd5b6100c16103b6565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100fe5780820151818401525b6020016100e5565b50505050905090810190601f16801561012b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014457600080fd5b61015b600160a060020a03600435166024356103ed565b604051901515815260200160405180910390f35b341561017a57600080fd5b610182610494565b60405190815260200160405180910390f35b341561019f57600080fd5b61015b600160a060020a036004358116906024351660443561049a565b604051901515815260200160405180910390f35b34156101db57600080fd5b6101826105af565b60405190815260200160405180910390f35b341561020057600080fd5b6101826105b4565b60405190815260200160405180910390f35b341561022557600080fd5b61022d6105ba565b604051600160a060020a03909116815260200160405180910390f35b341561025457600080fd5b610182600160a060020a03600435166105c9565b60405190815260200160405180910390f35b341561028557600080fd5b61028d6105e8565b005b341561029a57600080fd5b6100c16107fe565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100fe5780820151818401525b6020016100e5565b50505050905090810190601f16801561012b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561032557600080fd5b61015b600160a060020a0360043516602435610835565b604051901515815260200160405180910390f35b341561035b57600080fd5b61022d6108f5565b604051600160a060020a03909116815260200160405180910390f35b341561038a57600080fd5b610182600160a060020a0360043581169060243516610904565b60405190815260200160405180910390f35b60408051908101604052601081527f547275737420506f6f6c20546f6b656e00000000000000000000000000000000602082015281565b600081158061041f5750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561042a57600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b600160a060020a0380841660009081526002602090815260408083203385168452825280832054938616835260019091528120549091906104e1908463ffffffff61093116565b600160a060020a038086166000908152600160205260408082209390935590871681522054610516908463ffffffff61094b16565b600160a060020a03861660009081526001602052604090205561053f818463ffffffff61094b16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b600a81565b60035481565b600554600160a060020a031681565b600160a060020a0381166000908152600160205260409020545b919050565b60045460009081908190600160a060020a03166370a0823133836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561064757600080fd5b6102c65a03f1151561065857600080fd5b5050506040518051600454909450600160a060020a0316905063dd62ed3e333060006040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b15156106c657600080fd5b6102c65a03f115156106d757600080fd5b50505060405180519250508183106106ef57816106f1565b825b600454909150600160a060020a03166323b872dd33600084816040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561076057600080fd5b6102c65a03f1151561077157600080fd5b50505060405180515050600554600160a060020a03166000908152600160205260409020546107a6908263ffffffff61094b16565b600554600160a060020a039081166000908152600160205260408082209390935533909116815220546107df908263ffffffff61093116565b600160a060020a0333166000908152600160205260409020555b505050565b60408051908101604052600381527f54504c0000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a03331660009081526001602052604081205461085e908363ffffffff61094b16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610893908363ffffffff61093116565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600454600160a060020a031681565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60008282018381101561094057fe5b8091505b5092915050565b60008282111561095757fe5b508082035b929150505600a165627a7a723058202fe4cff37c46991f530c1a7b9ba72d288ea32e24cf97972115db630ac8678bd50029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
  "constructorArguments": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
}