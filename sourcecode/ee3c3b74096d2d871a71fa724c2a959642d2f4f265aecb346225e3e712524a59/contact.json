{
  "address": "0x7600998c19453e2a7d911d8c528f50a8928dafce",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PuzzleBID",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-14\n*/\n\n//\npragma solidity ^0.5.0;\n\ninterface TeamInterface {\n\n    function isOwner() external view returns (bool);\n\n    function isAdmin(address _sender) external view returns (bool);\n\n    function isDev(address _sender) external view returns (bool);\n\n}\n\ninterface PlatformInterface {\n\n    function getAllTurnover() external view returns (uint256);\n\n    function getTurnover(bytes32 _worksID) external view returns (uint256);\n\n    function updateAllTurnover(uint256 _amount) external;\n\n    function updateTurnover(bytes32 _worksID, uint256 _amount) external;\n\n    function updateFoundAddress(address _foundation) external;\n\n    function deposit(bytes32 _worksID) external payable;\n\n    function transferTo(address _receiver, uint256 _amount) external;\n\n    function getFoundAddress() external view returns (address payable);\n\n    function balances() external view returns (uint256);\n\n}\n\ninterface ArtistInterface {\n\n    function getAddress(bytes32 _artistID) external view returns (address payable);\n\n    function add(bytes32 _artistID, address _address) external;\n\n    function hasArtist(bytes32 _artistID) external view returns (bool);\n\n    function updateAddress(bytes32 _artistID, address _address) external;\n\n}\n\ninterface WorksInterface {\n\n    function addWorks(\n        bytes32 _worksID,\n        bytes32 _artistID, \n        uint8 _debrisNum, \n        uint256 _price, \n        uint256 _beginTime\n    ) \n        external;\n\n    function configRule(\n        bytes32 _worksID,\n        uint8 _firstBuyLimit, \n        uint256 _freezeGap, \n        uint256 _protectGap, \n        uint256 _increaseRatio,\n        uint256 _discountGap, \n        uint256 _discountRatio, \n\n        uint8[3] calldata _firstAllot, \n        uint8[3] calldata _againAllot, \n        uint8[3] calldata _lastAllot \n    ) \n        external;\n\n    function publish(bytes32 _worksID, uint256 _beginTime) external;\n\n    function close(bytes32 _worksID) external;\n\n    function getWorks(bytes32 _worksID) external view returns (uint8, uint256, uint256, uint256, bool);\n\n    function getDebris(bytes32 _worksID, uint8 _debrisID) external view \n        returns (uint256, address, address, bytes32, bytes32, uint256);\n\n    function getRule(bytes32 _worksID) external view \n        returns (uint8, uint256, uint256, uint256, uint256, uint256, uint8[3] memory, uint8[3] memory, uint8[3] memory);\n\n    function hasWorks(bytes32 _worksID) external view returns (bool);\n\n    function hasDebris(bytes32 _worksID, uint8 _debrisID) external view returns (bool);\n\n    function isPublish(bytes32 _worksID) external view returns (bool);\n\n    function isStart(bytes32 _worksID) external view returns (bool);\n\n    function isProtect(bytes32 _worksID, uint8 _debrisID) external view returns (bool);\n\n    function isSecond(bytes32 _worksID, uint8 _debrisID) external view returns (bool);\n\n    function isGameOver(bytes32 _worksID) external view returns (bool);\n    \n    function isFinish(bytes32 _worksID, bytes32 _unionID) external view returns (bool);\n\n    function hasFirstUnionIds(bytes32 _worksID, bytes32 _unionID) external view returns (bool);\n\n    function hasSecondUnionIds(bytes32 _worksID, bytes32 _unionID) external view returns (bool);\n\n    function getFirstUnionIds(bytes32 _worksID) external view returns (bytes32[] memory);\n\n    function getSecondUnionIds(bytes32 _worksID) external view returns (bytes32[] memory);\n\n    function getPrice(bytes32 _worksID) external view returns (uint256);\n\n    function getDebrisPrice(bytes32 _worksID, uint8 _debrisID) external view returns (uint256);\n\n    function getDebrisStatus(bytes32 _worksID, uint8 _debrisID) external view returns (uint256[4] memory, uint256, bytes32);\n\n    function getInitPrice(bytes32 _worksID, uint8 _debrisID) external view returns (uint256);\n\n    function getLastPrice(bytes32 _worksID, uint8 _debrisID) external view returns (uint256);\n\n    function getLastBuyer(bytes32 _worksID, uint8 _debrisID) external view returns (address payable);\n\n    function getLastUnionId(bytes32 _worksID, uint8 _debrisID) external view returns (bytes32);\n\n    function getFreezeGap(bytes32 _worksID) external view returns (uint256);\n\n    function getFirstBuyLimit(bytes32 _worksID) external view returns (uint256);\n\n    function getArtistId(bytes32 _worksID) external view returns (bytes32);\n\n    function getDebrisNum(bytes32 _worksID) external view returns (uint8);\n\n    function getAllot(bytes32 _worksID, uint8 _flag) external view returns (uint8[3] memory);\n\n    function getAllot(bytes32 _worksID, uint8 _flag, uint8 _element) external view returns (uint8);\n\n    function getPools(bytes32 _worksID) external view returns (uint256);\n\n    function getPoolsAllot(bytes32 _worksID) external view returns (uint256, uint256[3] memory, uint8[3] memory);\n\n    function getStartHourglass(bytes32 _worksID) external view returns (uint256);\n\n    function getWorksStatus(bytes32 _worksID) external view returns (uint256, uint256, uint256, bytes32);\n\n    function getProtectHourglass(bytes32 _worksID, uint8 _debrisID) external view returns (uint256);\n\n    function getDiscountHourglass(bytes32 _worksID, uint8 _debrisID) external view returns (uint256);\n\n    function updateDebris(bytes32 _worksID, uint8 _debrisID, bytes32 _unionID, address _sender) external;\n\n    function updateFirstBuyer(bytes32 _worksID, uint8 _debrisID, bytes32 _unionID, address _sender) external;\n\n    function updateBuyNum(bytes32 _worksID, uint8 _debrisID) external;\n\n    function finish(bytes32 _worksID, bytes32 _unionID) external;\n\n    function updatePools(bytes32 _worksID, uint256 _value) external;\n\n    function updateFirstUnionIds(bytes32 _worksID, bytes32 _unionID) external;\n\n    function updateSecondUnionIds(bytes32 _worksID, bytes32 _unionID) external;\n\n }\n\ninterface PlayerInterface {\n\n    function hasAddress(address _address) external view returns (bool);\n\n    function hasUnionId(bytes32 _unionID) external view returns (bool);\n\n    function getInfoByUnionId(bytes32 _unionID) external view returns (address payable, bytes32, uint256);\n\n    function getUnionIdByAddress(address _address) external view returns (bytes32);\n\n    function isFreeze(bytes32 _unionID, bytes32 _worksID) external view returns (bool);\n\n    function getFirstBuyNum(bytes32 _unionID, bytes32 _worksID) external view returns (uint256);\n\n    function getSecondAmount(bytes32 _unionID, bytes32 _worksID) external view returns (uint256);\n\n    function getFirstAmount(bytes32 _unionID, bytes32 _worksID) external view returns (uint256);\n\n    function getLastAddress(bytes32 _unionID) external view returns (address payable);\n\n    function getRewardAmount(bytes32 _unionID, bytes32 _worksID) external view returns (uint256);\n\n    function getFreezeHourglass(bytes32 _unionID, bytes32 _worksID) external view returns (uint256);\n\n    function getMyReport(bytes32 _unionID, bytes32 _worksID) external view returns (uint256, uint256, uint256);\n\n    function getMyStatus(bytes32 _unionID, bytes32 _worksID) external view returns (uint256, uint256, uint256, uint256, uint256);\n\n    function getMyWorks(bytes32 _unionID, bytes32 _worksID) external view returns (address, bytes32, uint256, uint256, uint256);\n\n    function isLegalPlayer(bytes32 _unionID, address _address) external view returns (bool);\n\n    function register(bytes32 _unionID, address _address, bytes32 _worksID, bytes32 _referrer) external returns (bool);\n\n    function updateLastAddress(bytes32 _unionID, address payable _sender) external;\n\n    function updateLastTime(bytes32 _unionID, bytes32 _worksID) external;\n\n    function updateFirstBuyNum(bytes32 _unionID, bytes32 _worksID) external;\n\n    function updateSecondAmount(bytes32 _unionID, bytes32 _worksID, uint256 _amount) external;\n\n    function updateFirstAmount(bytes32 _unionID, bytes32 _worksID, uint256 _amount) external;\n\n    function updateRewardAmount(bytes32 _unionID, bytes32 _worksID, uint256 _amount) external;\n\n    function updateMyWorks(\n        bytes32 _unionID, \n        address _address, \n        bytes32 _worksID, \n        uint256 _totalInput, \n        uint256 _totalOutput\n    ) external;\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\n * - added sqrt\n * - added sq\n * - added pwr \n * - changed asserts to requires with error log outputs\n * - removed div, its useless\n */\nlibrary SafeMath {\n    \n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) \n        internal \n        pure \n        returns (uint256 c) \n    {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"SafeMath mul failed\");\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256) \n    {\n        require(b <= a, \"SafeMath sub failed\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c) \n    {\n        c = a + b;\n        require(c >= a, \"SafeMath add failed\");\n        return c;\n    }\n    \n    /**\n     * @dev gives square root of given x.\n     */\n    function sqrt(uint256 x)\n        internal\n        pure\n        returns (uint256 y) \n    {\n        uint256 z = ((add(x,1)) / 2);\n        y = x;\n        while (z < y) \n        {\n            y = z;\n            z = ((add((x / z),z)) / 2);\n        }\n    }\n    \n    /**\n     * @dev gives square. multiplies x by x\n     */\n    function sq(uint256 x)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (mul(x,x));\n    }\n    \n    /**\n     * @dev x to the power of y \n     */\n    function pwr(uint256 x, uint256 y)\n        internal \n        pure \n        returns (uint256)\n    {\n        if (x==0)\n            return (0);\n        else if (y==0)\n            return (1);\n        else \n        {\n            uint256 z = x;\n            for (uint256 i=1; i < y; i++)\n                z = mul(z,x);\n            return (z);\n        }\n    }\n\n}\n\nlibrary Datasets {\n\n    struct Player {\n        address[] ethAddress; \n        bytes32 referrer; \n        address payable lastAddress; \n        uint256 time;\n    }\n\n    struct MyWorks { \n        address ethAddress; \n        bytes32 worksID; \n        uint256 totalInput; \n        uint256 totalOutput; \n        uint256 time; \n    }\n\n\n    struct Works {\n        bytes32 worksID; \n        bytes32 artistID; \n        uint8 debrisNum; \n        uint256 price; \n        uint256 beginTime; \n        uint256 endTime;\n        bool isPublish; \n        bytes32 lastUnionID;\n    }\n\n    struct Debris {\n        uint8 debrisID; \n        bytes32 worksID; \n        uint256 initPrice; \n        uint256 lastPrice; \n        uint256 buyNum; \n        address payable firstBuyer; \n        address payable lastBuyer; \n        bytes32 firstUnionID; \n        bytes32 lastUnionID; \n        uint256 lastTime; \n    }\n    \n    struct Rule {       \n        uint8 firstBuyLimit; \n        uint256 freezeGap; \n        uint256 protectGap; \n        uint256 increaseRatio;\n        uint256 discountGap; \n        uint256 discountRatio; \n\n        uint8[3] firstAllot; \n        uint8[3] againAllot;\n        uint8[3] lastAllot; \n    }\n\n    struct PlayerCount {\n        uint256 lastTime; \n        uint256 firstBuyNum; \n        uint256 firstAmount; \n        uint256 secondAmount; \n        uint256 rewardAmount;\n    }\n\n}\n\n/**\n * @title PuzzleBID Game Main Contract\n * @dev http://www.puzzlebid.com/\n * @author PuzzleBID Game Team \n * @dev Simon<[email protected]>\n */\ncontract PuzzleBID {\n\n    using SafeMath for *;\n\n    string constant public name = \"PuzzleBID Game\";\n    string constant public symbol = \"PZB\";\n\n    TeamInterface private team; \n    PlatformInterface private platform; \n    ArtistInterface private artist; \n    WorksInterface private works; \n    PlayerInterface private player; \n    \n    constructor(\n        address _teamAddress,\n        address _platformAddress,\n        address _artistAddress,\n        address _worksAddress,\n        address _playerAddress\n    ) public {\n        require(\n            _teamAddress != address(0) &&\n            _platformAddress != address(0) &&\n            _artistAddress != address(0) &&\n            _worksAddress != address(0) &&\n            _playerAddress != address(0)\n        );\n        team = TeamInterface(_teamAddress);\n        platform = PlatformInterface(_platformAddress);\n        artist = ArtistInterface(_artistAddress);\n        works = WorksInterface(_worksAddress);\n        player = PlayerInterface(_playerAddress);\n    }  \n\n    function() external payable {\n        revert();\n    }\n\n    event OnUpgrade(\n        address indexed _teamAddress,\n        address indexed _platformAddress,\n        address indexed _artistAddress,\n        address _worksAddress,\n        address _playerAddress\n    );\n\n    modifier isHuman() {\n        address _address = msg.sender;\n        uint256 _size;\n\n        assembly {_size := extcodesize(_address)}\n        require(_size == 0, \"sorry humans only\");\n        _;\n    }\n\n    modifier checkPlay(bytes32 _worksID, uint8 _debrisID, bytes32 _unionID) {\n        require(msg.value > 0);\n\n        require(works.hasWorks(_worksID)); \n        require(works.hasDebris(_worksID, _debrisID)); \n        require(works.isGameOver(_worksID) == false);\n        require(works.isPublish(_worksID) && works.isStart(_worksID));\n        require(works.isProtect(_worksID, _debrisID) == false);\n         \n        require(player.isFreeze(_unionID, _worksID) == false); \n        if(player.getFirstBuyNum(_unionID, _worksID).add(1) > works.getFirstBuyLimit(_worksID)) {\n            require(works.isSecond(_worksID, _debrisID));\n        }      \n        require(msg.value >= works.getDebrisPrice(_worksID, _debrisID));\n        _;\n    } \n       \n    modifier onlyAdmin() {\n        require(team.isAdmin(msg.sender));\n        _;\n    }\n    \n    function upgrade(\n        address _teamAddress,\n        address _platformAddress,\n        address _artistAddress,\n        address _worksAddress,\n        address _playerAddress\n    ) external onlyAdmin() {\n        require(\n            _teamAddress != address(0) &&\n            _platformAddress != address(0) &&\n            _artistAddress != address(0) &&\n            _worksAddress != address(0) &&\n            _playerAddress != address(0)\n        );\n        team = TeamInterface(_teamAddress);\n        platform = PlatformInterface(_platformAddress);\n        artist = ArtistInterface(_artistAddress);\n        works = WorksInterface(_worksAddress);\n        player = PlayerInterface(_playerAddress);\n        emit OnUpgrade(_teamAddress, _platformAddress, _artistAddress, _worksAddress, _playerAddress);\n    }   \n\n    function startPlay(bytes32 _worksID, uint8 _debrisID, bytes32 _unionID, bytes32 _referrer) \n        isHuman()\n        checkPlay(_worksID, _debrisID, _unionID)\n        external\n        payable\n    {\n        player.register(_unionID, msg.sender, _worksID, _referrer); \n\n        uint256 lastPrice = works.getLastPrice(_worksID, _debrisID);\n\n        bytes32 lastUnionID = works.getLastUnionId(_worksID, _debrisID);\n\n        works.updateDebris(_worksID, _debrisID, _unionID, msg.sender); \n\n        player.updateLastTime(_unionID, _worksID); \n        \n        platform.updateTurnover(_worksID, msg.value); \n\n        platform.updateAllTurnover(msg.value); \n        \n        if(works.isSecond(_worksID, _debrisID)) {\n            secondPlay(_worksID, _debrisID, _unionID, lastUnionID, lastPrice);            \n        } else {\n            works.updateBuyNum(_worksID, _debrisID);\n            firstPlay(_worksID, _debrisID, _unionID);       \n        }\n\n        if(works.isFinish(_worksID, _unionID)) {\n            works.finish(_worksID, _unionID); \n            finishGame(_worksID);\n            collectWorks(_worksID, _unionID); \n        }\n\n    }\n\n    function firstPlay(bytes32 _worksID, uint8 _debrisID, bytes32 _unionID) private {    \n        works.updateFirstBuyer(_worksID, _debrisID, _unionID, msg.sender);    \n        player.updateFirstBuyNum(_unionID, _worksID); \n        player.updateFirstAmount(_unionID, _worksID, msg.value); \n\n        uint8[3] memory firstAllot = works.getAllot(_worksID, 0); \n        artist.getAddress(works.getArtistId(_worksID)).transfer(msg.value.mul(firstAllot[0]) / 100); \n        platform.getFoundAddress().transfer(msg.value.mul(firstAllot[1]) / 100); \n\n        works.updatePools(_worksID, msg.value.mul(firstAllot[2]) / 100); \n        platform.deposit.value(msg.value.mul(firstAllot[2]) / 100)(_worksID); \n\n    }\n\n    function secondPlay(bytes32 _worksID, uint8 _debrisID, bytes32 _unionID, bytes32 _oldUnionID, uint256 _oldPrice) private {\n\n        if(0 == player.getSecondAmount(_unionID, _worksID)) {\n            works.updateSecondUnionIds(_worksID, _unionID);\n        }\n\n        player.updateSecondAmount(_unionID, _worksID, msg.value);\n\n        uint8[3] memory againAllot = works.getAllot(_worksID, 1);\n        uint256 lastPrice = works.getLastPrice(_worksID, _debrisID); \n        uint256 commission = lastPrice.mul(againAllot[1]) / 100;\n        platform.getFoundAddress().transfer(commission); \n\n        lastPrice = lastPrice.sub(commission); \n\n        if(lastPrice > _oldPrice) {\n            uint256 overflow = lastPrice.sub(_oldPrice); \n            artist.getAddress(works.getArtistId(_worksID)).transfer(overflow.mul(againAllot[0]) / 100); \n            works.updatePools(_worksID, overflow.mul(againAllot[2]) / 100); \n            platform.deposit.value(overflow.mul(againAllot[2]) / 100)(_worksID); \n            player.getLastAddress(_oldUnionID).transfer(\n                lastPrice.sub(overflow.mul(againAllot[0]) / 100)                \n                .sub(overflow.mul(againAllot[2]) / 100)\n            ); \n        } else { \n            player.getLastAddress(_oldUnionID).transfer(lastPrice);\n        }\n\n    }\n\n    function finishGame(bytes32 _worksID) private {              \n        uint8 lastAllot = works.getAllot(_worksID, 2, 0);\n        platform.transferTo(msg.sender, works.getPools(_worksID).mul(lastAllot) / 100);\n        firstSend(_worksID); \n        secondSend(_worksID); \n    }\n\n    function collectWorks(bytes32 _worksID, bytes32 _unionID) private {\n        player.updateMyWorks(_unionID, msg.sender, _worksID, 0, 0);\n    }\n    \n    function firstSend(bytes32 _worksID) private {\n        uint8 i;\n        bytes32[] memory tmpFirstUnionId = works.getFirstUnionIds(_worksID); \n        address tmpAddress; \n        uint256 tmpAmount;\n        uint8 lastAllot = works.getAllot(_worksID, 2, 1);\n        for(i=0; i<tmpFirstUnionId.length; i++) {\n            tmpAddress = player.getLastAddress(tmpFirstUnionId[i]);\n            tmpAmount = player.getFirstAmount(tmpFirstUnionId[i], _worksID);\n            tmpAmount = works.getPools(_worksID).mul(lastAllot).mul(tmpAmount) / 100 / works.getPrice(_worksID);\n            platform.transferTo(tmpAddress, tmpAmount); \n        }\n    }\n\n    function secondSend(bytes32 _worksID) private {\n        uint8 i;\n        bytes32[] memory tmpSecondUnionId = works.getSecondUnionIds(_worksID); \n        address tmpAddress; \n        uint256 tmpAmount;\n        uint8 lastAllot = works.getAllot(_worksID, 2, 2);\n        for(i=0; i<tmpSecondUnionId.length; i++) {\n            tmpAddress = player.getLastAddress(tmpSecondUnionId[i]);\n            tmpAmount = player.getSecondAmount(tmpSecondUnionId[i], _worksID);\n            tmpAmount = works.getPools(_worksID).mul(lastAllot).mul(tmpAmount) / 100 / (platform.getTurnover(_worksID).sub(works.getPrice(_worksID)));\n            platform.transferTo(tmpAddress, tmpAmount); \n        }\n    }\n\n    function getNowTime() external view returns (uint256) {\n        return now;\n    }\n\n }",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000092b3be4b8ca3b4faaaf9d08ab9a8329465c1bdcc00000000000000000000000039fb2aad8f46debbcc586169def2500b0cb73ed2000000000000000000000000e789854ebe399b3b2c6c987f328904700fef926f000000000000000000000000c8e5cf09be2483b5486a9b30bca40e00bff685ba000000000000000000000000df1df98305b058d1cfb5978c1884550736a6709e"
}