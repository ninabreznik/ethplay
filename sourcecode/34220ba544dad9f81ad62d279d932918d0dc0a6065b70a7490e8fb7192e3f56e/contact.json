{
  "address": "0xbeeb655808e3bdb83b6998f09dfe1e0f2c66a9be",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SwissCryptoExchange",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-09\n*/\n\npragma solidity ^0.4.18;\n\n// File: contracts/AccountLevels.sol\n\ncontract AccountLevels {\n  //given a user, returns an account level\n  //0 = regular user (pays take fee and make fee)\n  //1 = market maker silver (pays take fee, no make fee, gets rebate)\n  //2 = market maker gold (pays take fee, no make fee, gets entire counterparty's take fee as rebate)\n  function accountLevel(address user) public constant returns(uint);\n}\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/SwissCryptoExchange.sol\n\n/**\n * @title SwissCryptoExchange\n */\ncontract SwissCryptoExchange {\n  using SafeMath for uint256;\n\n  // Storage definition.\n  address public admin; //the admin address\n  address public feeAccount; //the account that will receive fees\n  address public accountLevelsAddr; //the address of the AccountLevels contract\n  uint256 public feeMake; //percentage times (1 ether)\n  uint256 public feeTake; //percentage times (1 ether)\n  uint256 public feeRebate; //percentage times (1 ether)\n  mapping (address => mapping (address => uint256)) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)\n  mapping (address => bool) public whitelistedTokens; //mapping of whitelisted token addresses (token=0 means Ether)\n  mapping (address => bool) public whitelistedUsers; // mapping of whitelisted users that can perform trading\n  mapping (address => mapping (bytes32 => bool)) public orders; //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)\n  mapping (address => mapping (bytes32 => uint256)) public orderFills; //mapping of user accounts to mapping of order hashes to uint256s (amount of order that has been filled)\n\n  // Events definition.\n  event Order(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address user);\n  event Cancel(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s);\n  event Trade(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, address get, address give);\n  event Deposit(address token, address user, uint256 amount, uint256 balance);\n  event Withdraw(address token, address user, uint256 amount, uint256 balance);\n\n  /**\n   * @dev Create a new instance of the SwissCryptoExchange contract.\n   * @param _admin             address Admin address\n   * @param _feeAccount        address Fee Account address\n   * @param _accountLevelsAddr address AccountLevels contract address\n   * @param _feeMake           uint256 FeeMake amount\n   * @param _feeTake           uint256 FeeTake amount\n   * @param _feeRebate         uint256 FeeRebate amount\n   */\n  function SwissCryptoExchange(\n    address _admin,\n    address _feeAccount,\n    address _accountLevelsAddr,\n    uint256 _feeMake,\n    uint256 _feeTake,\n    uint256 _feeRebate\n  )\n    public\n  {\n    // Ensure the admin address is valid.\n    require(_admin != 0x0);\n\n    // Store the values.\n    admin = _admin;\n    feeAccount = _feeAccount;\n    accountLevelsAddr = _accountLevelsAddr;\n    feeMake = _feeMake;\n    feeTake = _feeTake;\n    feeRebate = _feeRebate;\n\n    // Validate \"ethereum address\".\n    whitelistedTokens[0x0] = true;\n  }\n\n  /**\n   * @dev Ensure the function caller is the contract admin.\n   */\n  modifier onlyAdmin() { \n    require(msg.sender == admin);\n    _; \n  }\n\n  /**\n   * @dev The fallback function is not used for receiving money. If someone sends\n   *      wei directly to the contract address the transaction will fail.\n   */\n  function () public payable {\n    revert();\n  }\n\n  /**\n   * @dev Change the admin address.\n   * @param _admin address The new admin address\n   */\n  function changeAdmin(address _admin) public onlyAdmin {\n    // The provided address should be valid and different from the current one.\n    require(_admin != 0x0 && admin != _admin);\n\n    // Store the new value.\n    admin = _admin;\n  }\n\n  /**\n   * @dev Change the AccountLevels contract address. This address could be set to 0x0\n   *      if the functionality is not needed.\n   * @param _accountLevelsAddr address The new AccountLevels contract address\n   */\n  function changeAccountLevelsAddr(address _accountLevelsAddr) public onlyAdmin {\n    // Store the new value.\n    accountLevelsAddr = _accountLevelsAddr;\n  }\n\n  /**\n   * @dev Change the feeAccount address.\n   * @param _feeAccount address\n   */\n  function changeFeeAccount(address _feeAccount) public onlyAdmin {\n    // The provided address should be valid.\n    require(_feeAccount != 0x0);\n\n    // Store the new value.\n    feeAccount = _feeAccount;\n  }\n\n  /**\n   * @dev Change the feeMake amount.\n   * @param _feeMake uint256 New fee make.\n   */\n  function changeFeeMake(uint256 _feeMake) public onlyAdmin {\n    // Store the new value.\n    feeMake = _feeMake;\n  }\n\n  /**\n   * @dev Change the feeTake amount.\n   * @param _feeTake uint256 New fee take.\n   */\n  function changeFeeTake(uint256 _feeTake) public onlyAdmin {\n    // The new feeTake should be greater than or equal to the feeRebate.\n    require(_feeTake >= feeRebate);\n\n    // Store the new value.\n    feeTake = _feeTake;\n  }\n\n  /**\n   * @dev Change the feeRebate amount.\n   * @param _feeRebate uint256 New fee rebate.\n   */\n  function changeFeeRebate(uint256 _feeRebate) public onlyAdmin {\n    // The new feeRebate should be less than or equal to the feeTake.\n    require(_feeRebate <= feeTake);\n\n    // Store the new value.\n    feeRebate = _feeRebate;\n  }\n\n  /**\n   * @dev Add a ERC20 token contract address to the whitelisted ones.\n   * @param token address Address of the contract to be added to the whitelist.\n   */\n  function addWhitelistedTokenAddr(address token) public onlyAdmin {\n    // Token address should not be 0x0 (ether) and it should not be already whitelisted.\n    require(token != 0x0 && !whitelistedTokens[token]);\n\n    // Change the flag for this contract address to true.\n    whitelistedTokens[token] = true;\n  }\n\n  /**\n   * @dev Remove a ERC20 token contract address from the whitelisted ones.\n   * @param token address Address of the contract to be removed from the whitelist.\n   */\n  function removeWhitelistedTokenAddr(address token) public onlyAdmin {\n    // Token address should not be 0x0 (ether) and it should be whitelisted.\n    require(token != 0x0 && whitelistedTokens[token]);\n\n    // Change the flag for this contract address to false.\n    whitelistedTokens[token] = false;\n  }\n\n  /**\n   * @dev Add an user address to the whitelisted ones.\n   * @param user address Address to be added to the whitelist.\n   */\n  function addWhitelistedUserAddr(address user) public onlyAdmin {\n    // Address provided should be valid and not already whitelisted.\n    require(user != 0x0 && !whitelistedUsers[user]);\n\n    // Change the flag for this address to false.\n    whitelistedUsers[user] = true;\n  }\n\n  /**\n   * @dev Remove an user address from the whitelisted ones.\n   * @param user address Address to be removed from the whitelist.\n   */\n  function removeWhitelistedUserAddr(address user) public onlyAdmin {\n    // Address provided should be valid and whitelisted.\n    require(user != 0x0 && whitelistedUsers[user]);\n\n    // Change the flag for this address to false.\n    whitelistedUsers[user] = false;\n  }\n\n  /**\n   * @dev Deposit wei into the exchange contract.\n   */\n  function deposit() public payable {\n    // Only whitelisted users can make deposits.\n    require(whitelistedUsers[msg.sender]);\n\n    // Add the deposited wei amount to the user balance.\n    tokens[0x0][msg.sender] = tokens[0x0][msg.sender].add(msg.value);\n\n    // Trigger the event.\n    Deposit(0x0, msg.sender, msg.value, tokens[0x0][msg.sender]);\n  }\n\n  /**\n   * @dev Withdraw wei from the exchange contract back to the user. \n   * @param amount uint256 Wei amount to be withdrawn.\n   */\n  function withdraw(uint256 amount) public {\n    // Requester should have enough balance.\n    require(tokens[0x0][msg.sender] >= amount);\n  \n    // Substract the withdrawn wei amount from the user balance.\n    tokens[0x0][msg.sender] = tokens[0x0][msg.sender].sub(amount);\n\n    // Transfer the wei to the requester.\n    msg.sender.transfer(amount);\n\n    // Trigger the event.\n    Withdraw(0x0, msg.sender, amount, tokens[0x0][msg.sender]);\n  }\n\n  /**\n   * @dev Perform a new token deposit to the exchange contract.\n   * @dev Remember to call ERC20(address).approve(this, amount) or this contract will not\n   *      be able to do the transfer on your behalf.\n   * @param token  address Address of the deposited token contract\n   * @param amount uint256 Amount to be deposited\n   */\n  function depositToken(address token, uint256 amount)\n    public\n  {\n    // Should not deposit wei using this function and\n    // token contract address should be whitelisted.\n    require(token != 0x0 && whitelistedTokens[token]);\n      \n    // Only whitelisted users can make deposits.\n    require(whitelistedUsers[msg.sender]);\n\n    // Add the deposited token amount to the user balance.\n    tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);\n    \n    // Transfer tokens from caller to this contract account.\n    require(ERC20(token).transferFrom(msg.sender, address(this), amount));\n  \n    // Trigger the event.    \n    Deposit(token, msg.sender, amount, tokens[token][msg.sender]);\n  }\n\n  /**\n   * @dev Withdraw the given token amount from the requester balance.\n   * @param token  address Address of the withdrawn token contract\n   * @param amount uint256 Amount of tokens to be withdrawn\n   */\n  function withdrawToken(address token, uint256 amount) public {\n    // Should not withdraw wei using this function.\n    require(token != 0x0);\n\n    // Requester should have enough balance.\n    require(tokens[token][msg.sender] >= amount);\n\n    // Substract the withdrawn token amount from the user balance.\n    tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount);\n    \n    // Transfer the tokens to the investor.\n    require(ERC20(token).transfer(msg.sender, amount));\n\n    // Trigger the event.\n    Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);\n  }\n\n  /**\n   * @dev Check the balance of the given user in the given token.\n   * @param token address Address of the token contract\n   * @param user  address Address of the user whom balance will be queried\n   */\n  function balanceOf(address token, address user)\n    public\n    constant\n    returns (uint256)\n  {\n    return tokens[token][user];\n  }\n\n  /**\n   * @dev Place a new order to the this contract. \n   * @param tokenGet   address\n   * @param amountGet  uint256\n   * @param tokenGive  address\n   * @param amountGive uint256\n   * @param expires    uint256\n   * @param nonce      uint256\n   */\n  function order(\n    address tokenGet,\n    uint256 amountGet,\n    address tokenGive,\n    uint256 amountGive,\n    uint256 expires,\n    uint256 nonce\n  )\n    public\n  {\n    // Order placer address should be whitelisted.\n    require(whitelistedUsers[msg.sender]);\n\n    // Order tokens addresses should be whitelisted. \n    require(whitelistedTokens[tokenGet] && whitelistedTokens[tokenGive]);\n\n    // Calculate the order hash.\n    bytes32 hash = keccak256(address(this), tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n    \n    // Store the order.\n    orders[msg.sender][hash] = true;\n\n    // Trigger the event.\n    Order(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender);\n  }\n\n  /**\n   * @dev Cancel an existing order.\n   * @param tokenGet   address\n   * @param amountGet  uint256\n   * @param tokenGive  address\n   * @param amountGive uint256\n   * @param expires    uint256\n   * @param nonce      uint256\n   * @param v          uint8\n   * @param r          bytes32\n   * @param s          bytes32\n   */\n  function cancelOrder(\n    address tokenGet,\n    uint256 amountGet,\n    address tokenGive,\n    uint256 amountGive,\n    uint256 expires,\n    uint256 nonce,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  )\n    public\n  {\n    // Calculate the order hash.\n    bytes32 hash = keccak256(address(this), tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n    \n    // Ensure the message validity.\n    require(validateOrderHash(hash, msg.sender, v, r, s));\n    \n    // Fill the order to the requested amount.\n    orderFills[msg.sender][hash] = amountGet;\n\n    // Trigger the event.\n    Cancel(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, v, r, s);\n  }\n\n  /**\n   * @dev Perform a trade.\n   * @param tokenGet   address\n   * @param amountGet  uint256\n   * @param tokenGive  address\n   * @param amountGive uint256\n   * @param expires    uint256\n   * @param nonce      uint256\n   * @param user       address\n   * @param v          uint8\n   * @param r          bytes32\n   * @param s          bytes32\n   * @param amount     uint256 Traded amount - in amountGet terms\n   */\n  function trade(\n    address tokenGet,\n    uint256 amountGet,\n    address tokenGive,\n    uint256 amountGive,\n    uint256 expires,\n    uint256 nonce,\n    address user,\n    uint8 v,\n    bytes32 r,\n    bytes32 s,\n    uint256 amount \n  )\n    public\n  {\n    // Only whitelisted users can perform trades.\n    require(whitelistedUsers[msg.sender]);\n\n    // Only whitelisted tokens can be traded.\n    require(whitelistedTokens[tokenGet] && whitelistedTokens[tokenGive]);\n\n    // Expire block number should be greater than current block.\n    require(block.number <= expires);\n\n    // Calculate the trade hash.\n    bytes32 hash = keccak256(address(this), tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n    \n    // Validate the hash.\n    require(validateOrderHash(hash, user, v, r, s));\n\n    // Ensure that after the trade the ordered amount will not be excedeed.\n    require(SafeMath.add(orderFills[user][hash], amount) <= amountGet); \n    \n    // Add the traded amount to the order fill.\n    orderFills[user][hash] = orderFills[user][hash].add(amount);\n\n    // Trade balances.\n    tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n    \n    // Trigger the event.\n    Trade(tokenGet, amount, tokenGive, SafeMath.mul(amountGive, amount).div(amountGet), user, msg.sender);\n  }\n\n  /**\n   * @dev Check if the trade with provided parameters will pass or not.\n   * @param tokenGet   address\n   * @param amountGet  uint256\n   * @param tokenGive  address\n   * @param amountGive uint256\n   * @param expires    uint256\n   * @param nonce      uint256\n   * @param user       address\n   * @param v          uint8\n   * @param r          bytes32\n   * @param s          bytes32\n   * @param amount     uint256\n   * @param sender     address\n   * @return bool\n   */\n  function testTrade(\n    address tokenGet,\n    uint256 amountGet,\n    address tokenGive,\n    uint256 amountGive,\n    uint256 expires,\n    uint256 nonce,\n    address user,\n    uint8 v,\n    bytes32 r,\n    bytes32 s,\n    uint256 amount,\n    address sender\n  )\n    public\n    constant\n    returns(bool)\n  {\n    // Traders should be whitelisted.\n    require(whitelistedUsers[user] && whitelistedUsers[sender]);\n\n    // Tokens should be whitelisted.\n    require(whitelistedTokens[tokenGet] && whitelistedTokens[tokenGive]);\n\n    // Sender should have at least the amount he wants to trade and \n    require(tokens[tokenGet][sender] >= amount);\n\n    // order should have available volume to fill.\n    return availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, user, v, r, s) >= amount;\n  }\n\n  /**\n   * @dev Calculate the available volume for a given trade.\n   * @param tokenGet   address\n   * @param amountGet  uint256\n   * @param tokenGive  address\n   * @param amountGive uint256\n   * @param expires    uint256\n   * @param nonce      uint256\n   * @param user       address\n   * @param v          uint8\n   * @param r          bytes32\n   * @param s          bytes32\n   * @return uint256\n   */\n  function availableVolume(\n    address tokenGet,\n    uint256 amountGet,\n    address tokenGive,\n    uint256 amountGive,\n    uint256 expires,\n    uint256 nonce,\n    address user,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  )\n    public\n    constant\n    returns (uint256)\n  {\n    // User should be whitelisted.\n    require(whitelistedUsers[user]);\n\n    // Tokens should be whitelisted.\n    require(whitelistedTokens[tokenGet] && whitelistedTokens[tokenGive]);\n\n    // Calculate the hash.\n    bytes32 hash = keccak256(address(this), tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n\n    // If the order is not valid or the trade is expired early exit with 0.\n    if (!(validateOrderHash(hash, user, v, r, s) && block.number <= expires)) {\n      return 0;\n    }\n\n    // Condition is used for ensuring the the value returned is\n    //   - the maximum available balance of the user in tokenGet terms if the user can't fullfil all the order\n    //     - SafeMath.sub(amountGet, orderFills[user][hash])\n    //     - amountGet - amountAvailableForFill\n    //   - the available balance of the the user in tokenGet terms if the user has enough to fullfil all the order \n    //     - SafeMath.mul(tokens[tokenGive][user], amountGet).div(amountGive) \n    //     - balanceGiveAvailable * amountGet / amountGive\n    //     - amountGet / amountGive represents the exchange rate \n    if (SafeMath.sub(amountGet, orderFills[user][hash]) < SafeMath.mul(tokens[tokenGive][user], amountGet).div(amountGive)) {\n      return SafeMath.sub(amountGet, orderFills[user][hash]);\n    }\n\n    return SafeMath.mul(tokens[tokenGive][user], amountGet).div(amountGive);\n  }\n\n  /**\n   * @dev Get the amount filled for the given order.\n   * @param tokenGet   address\n   * @param amountGet  uint256\n   * @param tokenGive  address\n   * @param amountGive uint256\n   * @param expires    uint256\n   * @param nonce      uint256\n   * @param user       address\n   * @return uint256\n   */\n  function amountFilled(\n    address tokenGet,\n    uint256 amountGet,\n    address tokenGive,\n    uint256 amountGive,\n    uint256 expires,\n    uint256 nonce,\n    address user\n  )\n    public\n    constant\n    returns (uint256)\n  {\n    // User should be whitelisted.\n    require(whitelistedUsers[user]);\n\n    // Tokens should be whitelisted.\n    require(whitelistedTokens[tokenGet] && whitelistedTokens[tokenGive]);\n\n    // Return the amount filled for the given order.\n    return orderFills[user][keccak256(address(this), tokenGet, amountGet, tokenGive, amountGive, expires, nonce)];\n  }\n\n    /**\n   * @dev Trade balances of given tokens amounts between two users.\n   * @param tokenGet   address\n   * @param amountGet  uint256\n   * @param tokenGive  address\n   * @param amountGive uint256\n   * @param user       address\n   * @param amount     uint256\n   */\n  function tradeBalances(\n    address tokenGet,\n    uint256 amountGet,\n    address tokenGive,\n    uint256 amountGive,\n    address user,\n    uint256 amount\n  )\n    private\n  {\n    // Calculate the constant taxes.\n    uint256 feeMakeXfer = amount.mul(feeMake).div(1 ether);\n    uint256 feeTakeXfer = amount.mul(feeTake).div(1 ether);\n    uint256 feeRebateXfer = 0;\n    \n    // Calculate the tax according to account level.\n    if (accountLevelsAddr != 0x0) {\n      uint256 accountLevel = AccountLevels(accountLevelsAddr).accountLevel(user);\n      if (accountLevel == 1) {\n        feeRebateXfer = amount.mul(feeRebate).div(1 ether);\n      } else if (accountLevel == 2) {\n        feeRebateXfer = feeTakeXfer;\n      }\n    }\n\n    // Update the balances for both maker and taker and add the fee to the feeAccount.\n    tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(feeTakeXfer));\n    tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.add(feeRebateXfer).sub(feeMakeXfer));\n    tokens[tokenGet][feeAccount] = tokens[tokenGet][feeAccount].add(feeMakeXfer.add(feeTakeXfer).sub(feeRebateXfer));\n    tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount).div(amountGet));\n    tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount).div(amountGet));\n  }\n\n  /**\n   * @dev Validate an order hash.\n   * @param hash bytes32\n   * @param user address\n   * @param v    uint8\n   * @param r    bytes32\n   * @param s    bytes32\n   * @return bool\n   */\n  function validateOrderHash(\n    bytes32 hash,\n    address user,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  )\n    private\n    constant\n    returns (bool)\n  {\n    return (\n      orders[user][hash] ||\n      ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash), v, r, s) == user\n    );\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"order\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderFills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addWhitelistedUserAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"amountFilled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeMake\",\"type\":\"uint256\"}],\"name\":\"changeFeeMake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeMake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeRebate\",\"type\":\"uint256\"}],\"name\":\"changeFeeRebate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeWhitelistedTokenAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"testTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeAccount\",\"type\":\"address\"}],\"name\":\"changeFeeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRebate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeTake\",\"type\":\"uint256\"}],\"name\":\"changeFeeTake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addWhitelistedTokenAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeWhitelistedUserAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accountLevelsAddr\",\"type\":\"address\"}],\"name\":\"changeAccountLevelsAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountLevelsAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"availableVolume\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_feeAccount\",\"type\":\"address\"},{\"name\":\"_accountLevelsAddr\",\"type\":\"address\"},{\"name\":\"_feeMake\",\"type\":\"uint256\"},{\"name\":\"_feeTake\",\"type\":\"uint256\"},{\"name\":\"_feeRebate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Order\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"v\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"r\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"get\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"give\",\"type\":\"address\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5060405160c0806200441a83398101806040528101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505060008673ffffffffffffffffffffffffffffffffffffffff161415151561008c57600080fd5b856000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260038190555081600481905550806005819055506001600760008073ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050505061425f80620001bb6000396000f300608060405260043610610196576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a19b14a1461019b5780630b9276661461027957806319774d4314610304578063278b8c0e1461036957806329b1ce4d1461041d5780632d804ca2146104605780632e1a7d4d1461051f578063338b5dea1461054c578063508493bc1461059957806354d03b5c14610610578063577863941461063d5780635e1d7ae41461066857806365e17c9d1461069557806368df4dda146106ec5780636c86888b1461072f57806371ffcb1614610845578063731c2f81146108885780638823a9c0146108b35780638f283970146108e05780639324dfff146109235780639e281a9814610966578063aaa6bc40146109b3578063bb5f4629146109f6578063c281309e14610a5f578063d0e30db014610a8a578063daf9c21014610a94578063e8f6bc2e14610aef578063f341294214610b32578063f621cc4814610b89578063f7888aec14610be4578063f851a44014610c5b578063fb6e155f14610cb2575b600080fd5b3480156101a757600080fd5b50610277600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff1690602001909291908035600019169060200190929190803560001916906020019092919080359060200190929190505050610d9a565b005b34801561028557600080fd5b50610302600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919050505061123e565b005b34801561031057600080fd5b50610353600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080356000191690602001909291905050506115a3565b6040518082815260200191505060405180910390f35b34801561037557600080fd5b5061041b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803560ff169060200190929190803560001916906020019092919080356000191690602001909291905050506115c8565b005b34801561042957600080fd5b5061045e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061185d565b005b34801561046c57600080fd5b50610509600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061198f565b6040518082815260200191505060405180910390f35b34801561052b57600080fd5b5061054a60048036038101908080359060200190929190505050611bf2565b005b34801561055857600080fd5b50610597600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611e8c565b005b3480156105a557600080fd5b506105fa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506122b2565b6040518082815260200191505060405180910390f35b34801561061c57600080fd5b5061063b600480360381019080803590602001909291905050506122d7565b005b34801561064957600080fd5b5061065261233c565b6040518082815260200191505060405180910390f35b34801561067457600080fd5b5061069360048036038101908080359060200190929190505050612342565b005b3480156106a157600080fd5b506106aa6123b8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106f857600080fd5b5061072d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123de565b005b34801561073b57600080fd5b5061082b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff1690602001909291908035600019169060200190929190803560001916906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061250f565b604051808215151515815260200191505060405180910390f35b34801561085157600080fd5b50610886600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061271d565b005b34801561089457600080fd5b5061089d6127e2565b6040518082815260200191505060405180910390f35b3480156108bf57600080fd5b506108de600480360381019080803590602001909291905050506127e8565b005b3480156108ec57600080fd5b50610921600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061285e565b005b34801561092f57600080fd5b50610964600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061297b565b005b34801561097257600080fd5b506109b1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612aad565b005b3480156109bf57600080fd5b506109f4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612e7d565b005b348015610a0257600080fd5b50610a45600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600019169060200190929190505050612fae565b604051808215151515815260200191505060405180910390f35b348015610a6b57600080fd5b50610a74612fdd565b6040518082815260200191505060405180910390f35b610a92612fe3565b005b348015610aa057600080fd5b50610ad5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613218565b604051808215151515815260200191505060405180910390f35b348015610afb57600080fd5b50610b30600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613238565b005b348015610b3e57600080fd5b50610b476132d7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b9557600080fd5b50610bca600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506132fd565b604051808215151515815260200191505060405180910390f35b348015610bf057600080fd5b50610c45600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061331d565b6040518082815260200191505060405180910390f35b348015610c6757600080fd5b50610c706133a4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610cbe57600080fd5b50610d84600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff169060200190929190803560001916906020019092919080356000191690602001909291905050506133c9565b6040518082815260200191505060405180910390f35b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610df457600080fd5b600760008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff168015610e965750600760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515610ea157600080fd5b874311151515610eb057600080fd5b308c8c8c8c8c8c604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140184815260200183815260200182815260200197505050505050505060405180910390209050610fb68187878787613805565b1515610fc157600080fd5b8a611024600a60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084600019166000191681526020019081526020016000205484613973565b1115151561103157600080fd5b61109c82600a60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084600019166000191681526020019081526020016000205461397390919063ffffffff16565b600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360001916600019168152602001908152602001600020819055506111068c8c8c8c8a87613991565b7f6effdda786735d5033bfad5f53e5131abcced9e52be6c507b62d639685fbed6d8c838c6111468f6111388f896141c4565b6141ff90919063ffffffff16565b8a33604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001965050505050505060405180910390a1505050505050505050505050565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561129857600080fd5b600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16801561133a5750600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b151561134557600080fd5b30878787878787604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401848152602001838152602001828152602001975050505050505050604051809103902090506001600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836000191660001916815260200190815260200160002060006101000a81548160ff0219169083151502179055507f3f7f2eda73683c21a15f9435af1028c93185b5f1fa38270762dc32be606b3e8587878787878733604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200197505050505050505060405180910390a150505050505050565b600a602052816000526040600020602052806000526040600020600091509150505481565b6000308a8a8a8a8a8a604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401848152602001838152602001828152602001975050505050505050604051809103902090506116d08133868686613805565b15156116db57600080fd5b88600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360001916600019168152602001908152602001600020819055507f1e0b760c386003e9cb9bcf4fcf3997886042859d9b6ed6320e804597fcdb28b08a8a8a8a8a8a338b8b8b604051808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018a81526020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018460ff1660ff168152602001836000191660001916815260200182600019166000191681526020019a505050505050505050505060405180910390a150505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118b857600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff16141580156119295750600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b151561193457600080fd5b6001600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156119e957600080fd5b600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff168015611a8b5750600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515611a9657600080fd5b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000308a8a8a8a8a8a604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401848152602001838152602001828152602001975050505050505050604051809103902060001916600019168152602001908152602001600020549050979650505050505050565b80600660008073ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611c6757600080fd5b611ce081600660008073ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461421a90919063ffffffff16565b600660008073ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611d90573d6000803e3d6000fd5b507ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb56760003383600660008073ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a150565b60008273ffffffffffffffffffffffffffffffffffffffff1614158015611efc5750600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515611f0757600080fd5b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611f5f57600080fd5b611fee81600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461397390919063ffffffff16565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561214557600080fd5b505af1158015612159573d6000803e3d6000fd5b505050506040513d602081101561216f57600080fd5b8101908080519060200190929190505050151561218b57600080fd5b7fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7823383600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a15050565b6006602052816000526040600020602052806000526040600020600091509150505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561233257600080fd5b8060038190555050565b60035481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561239d57600080fd5b60045481111515156123ae57600080fd5b8060058190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561243957600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff16141580156124a95750600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15156124b457600080fd5b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680156125b35750600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15156125be57600080fd5b600760008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680156126605750600760008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b151561266b57600080fd5b82600660008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156126f657600080fd5b826127098e8e8e8e8e8e8e8e8e8e6133c9565b101590509c9b505050505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561277857600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff161415151561279e57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60055481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561284357600080fd5b600554811015151561285457600080fd5b8060048190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156128b957600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff161415801561292d57508073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b151561293857600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156129d657600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff1614158015612a475750600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b1515612a5257600080fd5b6001600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60008273ffffffffffffffffffffffffffffffffffffffff1614151515612ad357600080fd5b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515612b5e57600080fd5b612bed81600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461421a90919063ffffffff16565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612d1057600080fd5b505af1158015612d24573d6000803e3d6000fd5b505050506040513d6020811015612d3a57600080fd5b81019080805190602001909291905050501515612d5657600080fd5b7ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567823383600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612ed857600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff1614158015612f485750600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515612f5357600080fd5b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60096020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60045481565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561303b57600080fd5b6130b434600660008073ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461397390919063ffffffff16565b600660008073ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d760003334600660008073ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a1565b60076020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561329357600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60086020528060005260406000206000915054906101000a900460ff1681565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561342457600080fd5b600760008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680156134c65750600760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15156134d157600080fd5b308c8c8c8c8c8c604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401848152602001838152602001828152602001975050505050505050604051809103902090506135d78187878787613805565b80156135e35750874311155b15156135f257600091506137f6565b61368a8961367c600660008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548e6141c4565b6141ff90919063ffffffff16565b6136ec8c600a60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085600019166000191681526020019081526020016000205461421a565b101561375b576137548b600a60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084600019166000191681526020019081526020016000205461421a565b91506137f6565b6137f3896137e5600660008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548e6141c4565b6141ff90919063ffffffff16565b91505b509a9950505050505050505050565b6000600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000876000191660001916815260200190815260200160002060009054906101000a900460ff168061396857508473ffffffffffffffffffffffffffffffffffffffff1660018760405180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c0182600019166000191681526020019150506040518091039020868686604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af1158015613946573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff16145b905095945050505050565b600080828401905083811015151561398757fe5b8091505092915050565b6000806000806139c6670de0b6b3a76400006139b8600354886141c490919063ffffffff16565b6141ff90919063ffffffff16565b93506139f7670de0b6b3a76400006139e9600454886141c490919063ffffffff16565b6141ff90919063ffffffff16565b9250600091506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515613b8757600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631cbd0519876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015613afc57600080fd5b505af1158015613b10573d6000803e3d6000fd5b505050506040513d6020811015613b2657600080fd5b810190808051906020019092919050505090506001811415613b7857613b71670de0b6b3a7640000613b63600554886141c490919063ffffffff16565b6141ff90919063ffffffff16565b9150613b86565b6002811415613b85578291505b5b5b613c28613b9d848761397390919063ffffffff16565b600660008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461421a90919063ffffffff16565b600660008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613d5b613cd085613cc2858961397390919063ffffffff16565b61421a90919063ffffffff16565b600660008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461397390919063ffffffff16565b600660008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613eb0613e0383613df5868861397390919063ffffffff16565b61421a90919063ffffffff16565b600660008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461397390919063ffffffff16565b600660008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550614005613f7a8a613f6c888b6141c490919063ffffffff16565b6141ff90919063ffffffff16565b600660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461421a90919063ffffffff16565b600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506141386140ad8a61409f888b6141c490919063ffffffff16565b6141ff90919063ffffffff16565b600660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461397390919063ffffffff16565b600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505050505050505050565b60008060008414156141d957600091506141f8565b82840290508284828115156141ea57fe5b041415156141f457fe5b8091505b5092915050565b600080828481151561420d57fe5b0490508091505092915050565b600082821115151561422857fe5b8183039050929150505600a165627a7a72305820234477659725ad38f361ac5a6b8b278da3ce8868b9cc541fd8eecc28ffe46b740029000000000000000000000000f909d2168d2623967e0e870c89576b0948dd32af00000000000000000000000061e6ecbcda879e42a9e98b7498bac5aa76b25d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aa87bee5380000000000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000f909d2168d2623967e0e870c89576b0948dd32af00000000000000000000000061e6ecbcda879e42a9e98b7498bac5aa76b25d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aa87bee5380000000000000000000000000000000000000000000000000000000000000000000"
}