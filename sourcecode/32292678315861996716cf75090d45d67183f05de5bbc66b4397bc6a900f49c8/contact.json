{
  "address": "0x2167d2c82f763257c4f0a3e40d9b494ef93702f1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BitUnitsXP",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-11\n*/\n\npragma solidity 0.4.19;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract ERC223 {\n  uint public totalSupply;\n  function balanceOf(address who) constant returns (uint);\n\n  function name() constant returns (string _name);\n  function symbol() constant returns (string _symbol);\n  function decimals() constant returns (uint8 _decimals);\n  function totalSupply() constant returns (uint256 _supply);\n\n  function transfer(address to, uint value) returns (bool ok);\n  function transfer(address to, uint value, bytes data) returns (bool ok);\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n}\n\ncontract ContractReceiver {\n  function tokenFallback(address _from, uint _value, bytes _data);\n}\n\n/**\n * @title PoSTokenStandard\n * @dev the interface of PoSTokenStandard\n */\ncontract PoSTokenStandard {\n    uint256 public stakeStartTime;\n    uint256 public stakeMinAge;\n    uint256 public stakeMaxAge;\n    function mint() public returns (bool);\n    function coinAge(address staker) public view returns (uint256);\n    function annualInterest() public view returns (uint256);\n    event Mint(address indexed _address, uint _reward);\n}\n\n\ncontract BitUnitsXP is ERC223, PoSTokenStandard {\n    using SafeMath for uint256;\n\n    string public name = \"BitUnits\";\n    string public symbol = \"XP\";\n    uint8 public decimals = 18;\n\n    uint public chainStartTime; //chain start time\n    uint public chainStartBlockNumber; //chain start block number\n    uint public stakeStartTime; //stake start time\n    uint public stakeMinAge = 3 days; // minimum age for coin age: 3D\n    uint public stakeMaxAge = 90 days; // stake age of full weight: 90D\n    uint public maxMintProofOfStake = 10**17; \n\n    uint public totalSupply;\n    uint public maxTotalSupply;\n    uint public totalInitialSupply;\n\n    struct transferInStruct{\n        uint128 amount;\n        uint64 time;\n    }\n\n    mapping(address => uint256) balances;\n    mapping(address => transferInStruct[]) transferIns;\n\n    modifier canPoSMint() {\n        require(totalSupply < maxTotalSupply);\n        _;\n    }\n\n\n    function BitUnits() public {\n        maxTotalSupply = 10**25; // 10 Mil.\n        totalInitialSupply = 10**24; // 1 Mil.\n\n        chainStartTime = now;\n        stakeStartTime = now + 5 days;\n        chainStartBlockNumber = block.number;\n\n        balances[msg.sender] = totalInitialSupply;\n        totalSupply = totalInitialSupply;\n    }\n\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) private returns (bool is_contract) {\n        uint length;\n        assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return (length > 0);\n    }\n\n    // Function that is called when a user or another contract wants to transfer funds .\n    function transfer(address _to, uint _value, bytes _data) returns (bool success) {\n        if(isContract(_to)) {\n          return transferToContract(_to, _value, _data);\n        } else {\n          return transferToAddress(_to, _value, _data);\n        }\n    }\n\n    // Standard function transfer similar to ERC20 transfer with no _data .\n    // Added due to backwards compatibility reasons .\n    function transfer(address _to, uint _value) returns (bool success) {\n        //standard function transfer similar to ERC20 transfer with no _data\n        //added due to backwards compatibility reasons\n        bytes memory empty;\n        if(isContract(_to)) {\n            return transferToContract(_to, _value, empty);\n        } else {\n            return transferToAddress(_to, _value, empty);\n        }\n    }\n\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n      if(msg.sender == _to) return mint();\n      if(balanceOf(msg.sender) < _value) revert();\n      balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n      balances[_to] = balanceOf(_to).add(_value);\n\n      if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\n      uint64 _now = uint64(now);\n      transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),_now));\n      transferIns[_to].push(transferInStruct(uint128(_value),_now));\n\n      Transfer(msg.sender, _to, _value);\n      ERC223Transfer(msg.sender, _to, _value, _data);\n      return true;\n    }\n\n    //function that is called when transaction target is a contract\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n      if(msg.sender == _to) return mint();\n      if (balanceOf(msg.sender) < _value) revert();\n      balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n      balances[_to] = balanceOf(_to).add(_value);\n      ContractReceiver reciever = ContractReceiver(_to);\n      reciever.tokenFallback(msg.sender, _value, _data);\n\n      if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\n      uint64 _now = uint64(now);\n      transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),_now));\n      transferIns[_to].push(transferInStruct(uint128(_value),_now));\n\n      Transfer(msg.sender, _to, _value);\n      ERC223Transfer(msg.sender, _to, _value, _data);\n      return true;\n    }\n\n    function mint() public canPoSMint returns (bool) {\n        if(balances[msg.sender] <= 0) return false;\n        if(transferIns[msg.sender].length <= 0) return false;\n\n        uint reward = getProofOfStakeReward(msg.sender);\n        if(reward <= 0) return false;\n\n        totalSupply = totalSupply.add(reward);\n        balances[msg.sender] = balances[msg.sender].add(reward);\n        delete transferIns[msg.sender];\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\n\n        Mint(msg.sender, reward);\n        return true;\n    }\n\n\n    function getBlockNumber() public view returns (uint blockNumber) {\n        blockNumber = block.number.sub(chainStartBlockNumber);\n    }\n\n\n    function coinAge(address staker) public view returns (uint256) {\n        return getCoinAge(staker, now);\n    }\n\n\n    function annualInterest() public view returns(uint interest) {\n        uint _now = now;\n        interest = maxMintProofOfStake;\n        if((_now.sub(stakeStartTime)).div(365 days) == 0) {\n            interest = (770 * maxMintProofOfStake).div(100);\n        } else if((_now.sub(stakeStartTime)).div(365 days) == 1){\n            interest = (435 * maxMintProofOfStake).div(100);\n        }\n    }\n\n\n    function getProofOfStakeReward(address _address) internal view returns (uint) {\n        require( (now >= stakeStartTime) && (stakeStartTime > 0) );\n\n        uint _now = now;\n        uint _coinAge = getCoinAge(_address, _now);\n        if(_coinAge <= 0) return 0;\n\n        uint interest = maxMintProofOfStake;\n        // Due to the high interest rate for the first two years, compounding should be taken into account.\n        // Effective annual interest rate = (1 + (nominal rate / number of compounding periods)) ^ (number of compounding periods) - 1\n        if((_now.sub(stakeStartTime)).div(365 days) == 0) {\n            // 1st year effective annual interest rate is 100% when we select the stakeMaxAge (90 days) as the compounding period.\n            interest = (770 * maxMintProofOfStake).div(100);\n        } else if((_now.sub(stakeStartTime)).div(365 days) == 1){\n            // 2nd year effective annual interest rate is 50%\n            interest = (435 * maxMintProofOfStake).div(100);\n        }\n\n        uint offset = 10**uint(decimals);\n\n        return (_coinAge * interest).div(365 * offset);\n    }\n\n\n    function getCoinAge(address _address, uint _now) internal view returns (uint _coinAge) {\n        if(transferIns[_address].length <= 0) return 0;\n\n        for (uint i = 0; i < transferIns[_address].length; i++){\n            if( _now < uint(transferIns[_address][i].time).add(stakeMinAge) ) continue;\n\n            uint nCoinSeconds = _now.sub(uint(transferIns[_address][i].time));\n            if( nCoinSeconds > stakeMaxAge ) nCoinSeconds = stakeMaxAge;\n\n            _coinAge = _coinAge.add(uint(transferIns[_address][i].amount) * nCoinSeconds.div(1 days));\n        }\n    }\n\n    function balanceOf(address _owner) constant returns (uint balance) {\n      return balances[_owner];\n    }\n\n    // Function to access name of token .\n    function name() constant returns (string _name) {\n        return name;\n    }\n    // Function to access symbol of token .\n    function symbol() constant returns (string _symbol) {\n        return symbol;\n    }\n    // Function to access decimals of token .\n    function decimals() constant returns (uint8 _decimals) {\n        return decimals;\n    }\n    // Function to access total supply of tokens .\n    function totalSupply() constant returns (uint256 _totalSupply) {\n        return totalSupply;\n    }\n}",
  "bytecode": "606060405260408051908101604052600881527f426974556e697473000000000000000000000000000000000000000000000000602082015260049080516200004d929160200190620000d1565b5060408051908101604052600281527f58500000000000000000000000000000000000000000000000000000000000006020820152600590805162000097929160200190620000d1565b506006805460ff191660121790556203f480600a556276a700600b5567016345785d8a0000600c553415620000cb57600080fd5b62000176565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200011457805160ff191683800117855562000144565b8280016001018555821562000144579182015b828111156200014457825182559160200191906001019062000127565b506200015292915062000156565b5090565b6200017391905b808211156200015257600081556001016200015d565b90565b61142d80620001866000396000f3006060604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101165780631249c58b146101a057806318160ddd146101c75780632ab4d052146101ec578063313ce567146101ff57806342cbb15c146102285780635b054f9b1461023b57806370a082311461024e5780637419f1901461026d57806395d89b41146102805780639fd4da4014610293578063a1706929146102a6578063a9059cbb146102bb578063aa9cdaf4146102dd578063b2552fc4146102fc578063be45fd621461030f578063cbd8877e14610374578063cd474b0414610387578063e1c3bac61461039a578063f2bb5ce1146103ad575b600080fd5b341561012157600080fd5b6101296103c0565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561016557808201518382015260200161014d565b50505050905090810190601f1680156101925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101ab57600080fd5b6101b3610469565b604051901515815260200160405180910390f35b34156101d257600080fd5b6101da610676565b60405190815260200160405180910390f35b34156101f757600080fd5b6101da61067c565b341561020a57600080fd5b610212610682565b60405160ff909116815260200160405180910390f35b341561023357600080fd5b6101da61068b565b341561024657600080fd5b6101da6106a7565b341561025957600080fd5b6101da600160a060020a03600435166106ad565b341561027857600080fd5b6101da6106c8565b341561028b57600080fd5b6101296106ce565b341561029e57600080fd5b6101da610741565b34156102b157600080fd5b6102b9610747565b005b34156102c657600080fd5b6101b3600160a060020a0360043516602435610798565b34156102e857600080fd5b6101da600160a060020a03600435166107d4565b341561030757600080fd5b6101da6107e6565b341561031a57600080fd5b6101b360048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061087d95505050505050565b341561037f57600080fd5b6101da6108b1565b341561039257600080fd5b6101da6108b7565b34156103a557600080fd5b6101da6108bd565b34156103b857600080fd5b6101da6108c3565b6103c8611370565b60048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561045e5780601f106104335761010080835404028352916020019161045e565b820191906000526020600020905b81548152906001019060200180831161044157829003601f168201915b505050505090505b90565b600080600e54600d5410151561047e57600080fd5b600160a060020a033316600090815260106020526040812054116104a55760009150610672565b600160a060020a033316600090815260116020526040812054116104cc5760009150610672565b6104d5336108c9565b9050600081116104e85760009150610672565b600d546104fb908263ffffffff6109c316565b600d55600160a060020a033316600090815260106020526040902054610527908263ffffffff6109c316565b600160a060020a0333166000908152601060209081526040808320939093556011905290812061055691611382565b600160a060020a033316600090815260116020526040902080546001810161057e83826113a3565b91600052602060002090016000604080519081016040908152600160a060020a033316600090815260106020908152919020546001608060020a0316825267ffffffffffffffff421690820152919050815181546fffffffffffffffffffffffffffffffff19166001608060020a03919091161781556020820151815467ffffffffffffffff91909116608060020a0277ffffffffffffffff00000000000000000000000000000000199091161790555050600160a060020a0333167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968858260405190815260200160405180910390a2600191505b5090565b600d5490565b600e5481565b60065460ff1690565b60006106a2600854436109d290919063ffffffff16565b905090565b60075481565b600160a060020a031660009081526010602052604090205490565b60095481565b6106d6611370565b60058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561045e5780601f106104335761010080835404028352916020019161045e565b600f5481565b6a084595161401484a000000600e5569d3c21bcecceda1000000600f819055426007819055620697800160095543600855600160a060020a0333166000908152601060205260409020819055600d55565b60006107a2611370565b6107ab846109e4565b156107c2576107bb8484836109ec565b91506107cd565b6107bb848483610e6e565b5092915050565b60006107e082426111d8565b92915050565b600c546009544290610815906301e133809061080990849063ffffffff6109d216565b9063ffffffff61135916565b151561083a57600c546108339061030202606463ffffffff61135916565b9150610672565b6108576301e13380610809600954846109d290919063ffffffff16565b6001141561067257600c54610877906101b302606463ffffffff61135916565b91505090565b6000610888846109e4565b1561089f576108988484846109ec565b90506108aa565b610898848484610e6e565b9392505050565b600a5481565b60085481565b600b5481565b600c5481565b600080600080600060095442101580156108e557506000600954115b15156108f057600080fd5b4293506108fd86856111d8565b92506000831161091057600094506109ba565b600c5491506109326301e13380610809600954876109d290919063ffffffff16565b151561095757600c546109509061030202606463ffffffff61135916565b9150610997565b6109746301e13380610809600954876109d290919063ffffffff16565b6001141561099757600c54610994906101b302606463ffffffff61135916565b91505b5060065460ff16600a0a6109b783830261016d830263ffffffff61135916565b94505b50505050919050565b6000828201838110156108aa57fe5b6000828211156109de57fe5b50900390565b6000903b1190565b600080600085600160a060020a031633600160a060020a03161415610a1a57610a13610469565b9250610e65565b84610a24336106ad565b1015610a2f57600080fd5b610a4885610a3c336106ad565b9063ffffffff6109d216565b600160a060020a033316600090815260106020526040902055610a7a85610a6e886106ad565b9063ffffffff6109c316565b600160a060020a03871660008181526010602052604090819020929092558793509063c0ee0b8a90339088908890518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610b2c578082015183820152602001610b14565b50505050905090810190601f168015610b595780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1515610b7957600080fd5b6102c65a03f11515610b8a57600080fd5b505050600160a060020a0333166000908152601160205260408120541115610bcd57600160a060020a0333166000908152601160205260408120610bcd91611382565b50600160a060020a0333166000908152601160205260409020805442919060018101610bf983826113a3565b91600052602060002090016000604080519081016040908152600160a060020a033316600090815260106020908152919020546001608060020a0316825267ffffffffffffffff861690820152919050815181546fffffffffffffffffffffffffffffffff19166001608060020a03919091161781556020820151815467ffffffffffffffff91909116608060020a0277ffffffffffffffff00000000000000000000000000000000199091161790555050600160a060020a0386166000908152601160205260409020805460018101610cd383826113a3565b91600052602060002090016000604080519081016040526001608060020a038916815267ffffffffffffffff85166020820152919050815181546fffffffffffffffffffffffffffffffff19166001608060020a03919091161781556020820151815467ffffffffffffffff91909116608060020a0277ffffffffffffffff00000000000000000000000000000000199091161790555050600160a060020a038087169033167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8760405190815260200160405180910390a385600160a060020a031633600160a060020a03167f9bfafdc2ae8835972d7b64ef3f8f307165ac22ceffde4a742c52da5487f45fd1878760405182815260406020820181815290820183818151815260200191508051906020019080838360005b83811015610e25578082015183820152602001610e0d565b50505050905090810190601f168015610e525780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3600192505b50509392505050565b60008084600160a060020a031633600160a060020a03161415610e9a57610e93610469565b91506111d0565b83610ea4336106ad565b1015610eaf57600080fd5b610ebc84610a3c336106ad565b600160a060020a033316600090815260106020526040902055610ee284610a6e876106ad565b600160a060020a038087166000908152601060209081526040808320949094553390921681526011909152908120541115610f3857600160a060020a0333166000908152601160205260408120610f3891611382565b50600160a060020a0333166000908152601160205260409020805442919060018101610f6483826113a3565b91600052602060002090016000604080519081016040908152600160a060020a033316600090815260106020908152919020546001608060020a0316825267ffffffffffffffff861690820152919050815181546fffffffffffffffffffffffffffffffff19166001608060020a03919091161781556020820151815467ffffffffffffffff91909116608060020a0277ffffffffffffffff00000000000000000000000000000000199091161790555050600160a060020a038516600090815260116020526040902080546001810161103e83826113a3565b91600052602060002090016000604080519081016040526001608060020a038816815267ffffffffffffffff85166020820152919050815181546fffffffffffffffffffffffffffffffff19166001608060020a03919091161781556020820151815467ffffffffffffffff91909116608060020a0277ffffffffffffffff00000000000000000000000000000000199091161790555050600160a060020a038086169033167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a384600160a060020a031633600160a060020a03167f9bfafdc2ae8835972d7b64ef3f8f307165ac22ceffde4a742c52da5487f45fd1868660405182815260406020820181815290820183818151815260200191508051906020019080838360005b83811015611190578082015183820152602001611178565b50505050905090810190601f1680156111bd5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3600191505b509392505050565b600160a060020a038216600090815260116020526040812054819081908190116112055760009250611351565b600091505b600160a060020a03851660009081526011602052604090205482101561135157600a54600160a060020a0386166000908152601160205260409020805461127a9291908590811061125757fe5b600091825260209091200154608060020a900467ffffffffffffffff16906109c3565b84101561128657611346565b600160a060020a038516600090815260116020526040902080546112d39190849081106112af57fe5b6000918252602090912001548590608060020a900467ffffffffffffffff166109d2565b9050600b548111156112e45750600b545b6113436112fa826201518063ffffffff61135916565b600160a060020a038716600090815260116020526040902080548590811061131e57fe5b60009182526020909120015485916001608060020a039091160263ffffffff6109c316565b92505b60019091019061120a565b505092915050565b600080828481151561136757fe5b04949350505050565b60206040519081016040526000815290565b50805460008255906000526020600020908101906113a091906113cc565b50565b8154818355818115116113c7576000838152602090206113c79181019083016113cc565b505050565b61046691905b8082111561067257805477ffffffffffffffffffffffffffffffffffffffffffffffff191681556001016113d25600a165627a7a7230582072938408f8365112ddd312931b4219b48eaa887089654ee491e73f0fa3ddb7400029"
}