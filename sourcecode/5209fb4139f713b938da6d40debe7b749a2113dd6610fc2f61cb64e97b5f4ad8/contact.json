{
  "address": "0x697beac28b09e122c4332d163985e8a73121b97f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Quantum Resistant Ledger Token",
  "contractName": "QRL_Token",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-06-12\n*/\n\npragma solidity ^0.4.11;\n// Standard token interface (ERC 20)\n// https://github.com/ethereum/EIPs/issues/20\ncontract Token {\n// Functions:\n    /// @return total amount of tokens\n    function totalSupply() constant returns (uint256 supply) {}\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) returns (bool success) {}\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) returns (bool success) {}\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n// Events:\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\ncontract StdToken is Token {\n// Fields:\n     mapping(address => uint256) balances;\n     mapping (address => mapping (address => uint256)) allowed;\n     uint256 public allSupply = 0;\n// Functions:\n     function transfer(address _to, uint256 _value) returns (bool success) {\n          if((balances[msg.sender] >= _value) && (balances[_to] + _value > balances[_to])){\n               balances[msg.sender] -= _value;\n               balances[_to] += _value;\n               Transfer(msg.sender, _to, _value);\n               return true;\n          } else { \n               return false; \n          }\n     }\n     function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n          if((balances[_from] >= _value) && (allowed[_from][msg.sender] >= _value) && (balances[_to] + _value > balances[_to])){\n               balances[_to] += _value;\n               balances[_from] -= _value;\n               allowed[_from][msg.sender] -= _value;\n               Transfer(_from, _to, _value);\n               return true;\n          } else { \n               return false; \n          }\n     }\n     function balanceOf(address _owner) constant returns (uint256 balance) {\n          return balances[_owner];\n     }\n     function approve(address _spender, uint256 _value) returns (bool success) {\n          allowed[msg.sender][_spender] = _value;\n          Approval(msg.sender, _spender, _value);\n          return true;\n     }\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n          return allowed[_owner][_spender];\n     }\n     function totalSupply() constant returns (uint256 supplyOut) {\n          supplyOut = allSupply;\n          return;\n     }\n}\ncontract QRL_Token is StdToken {\n     string public name = \"QRL\";\n     uint public decimals = 8;\n     string public symbol = \"QRL\";\n     address public creator = 0x0;\n     uint freezeblock = 0;\n     modifier notFrozen() {\n          if ((freezeblock != 0) && (block.number > freezeblock)) throw;\n          _;\n     }\n     modifier onlyPayloadSize(uint numwords) {\n          if (msg.data.length != numwords * 32 + 4) throw;\n          _;\n     }\n     modifier onlyInState(State state){\n          if(currentState!=state)\n               throw;\n          _;\n     }\n     modifier onlyByCreator(){\n          if(msg.sender!=creator)\n               throw;\n          _;\n     }\n// Functions:\n     function transfer(address _to, uint256 _value) notFrozen onlyPayloadSize(2) returns (bool success) {\n          if((balances[msg.sender] >= _value) && (balances[_to] + _value > balances[_to])){\n               balances[msg.sender] -= _value;\n               balances[_to] += _value;\n               Transfer(msg.sender, _to, _value);\n               return true;\n          } else { \n               return false; \n          }\n     }\n     function transferFrom(address _from, address _to, uint256 _value) notFrozen onlyPayloadSize(2) returns (bool success) {\n          if((balances[_from] >= _value) && (allowed[_from][msg.sender] >= _value) && (balances[_to] + _value > balances[_to])){\n               balances[_to] += _value;\n               balances[_from] -= _value;\n               allowed[_from][msg.sender] -= _value;\n               Transfer(_from, _to, _value);\n               return true;\n          } else { \n               return false; \n          }\n     }\n     function approve(address _spender, uint256 _value) returns (bool success) {\n          //require user to set to zero before resetting to nonzero\n          if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) {\n               return false;\n          }\n          allowed[msg.sender][_spender] = _value;\n          Approval(msg.sender, _spender, _value);\n          return true;\n     }\n     function QRL_Token(){\n          creator = msg.sender;\n     }\n     enum State {\n          Start,\n          Closed\n     }\n     State public currentState = State.Start;\n     function freeze(uint fb) onlyByCreator {\n          freezeblock = fb;\n     }\n     function issueTokens(address forAddress, uint tokenCount) onlyInState(State.Start) onlyByCreator{\n          balances[forAddress]=tokenCount;\n          \n          // This is removed for optimization (lower gas consumption for each call)\n          // Please see 'setAllSupply' function\n          //\n          // allBalances+=tokenCount\n     }\n     // This is called to close the contract (so no one could mint more tokens)\n     function close() onlyInState(State.Start) onlyByCreator{\n          currentState = State.Closed;\n     }\n     function setAllSupply(uint data) onlyInState(State.Start) onlyByCreator{\n          allSupply = data;\n     }\n     function changeCreator(address newCreator) onlyByCreator{\n          creator = newCreator;\n     }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supplyOut\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"forAddress\",\"type\":\"address\"},{\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"name\":\"issueTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"changeCreator\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fb\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"setAllSupply\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526000600255604060405190810160405280600381526020017f51524c000000000000000000000000000000000000000000000000000000000081525060039080519060200190620000579291906200016a565b506008600455604060405190810160405280600381526020017f51524c000000000000000000000000000000000000000000000000000000000081525060059080519060200190620000ab9291906200016a565b506000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006007556000600860006101000a81548160ff021916908360018111156200011357fe5b021790555034156200012157fe5b5b33600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b62000219565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001ad57805160ff1916838001178555620001de565b82800160010185558215620001de579182015b82811115620001dd578251825591602001919060010190620001c0565b5b509050620001ed9190620001f1565b5090565b6200021691905b8082111562000212576000816000905550600101620001f8565b5090565b90565b61128280620002296000396000f300606060405236156100ef576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302d05d3f146100f157806306fdde0314610143578063095ea7b3146101dc5780630c3f6acf1461023357806318160ddd1461026757806323b872dd1461028d578063313ce56714610303578063423207321461032957806343d726d61461034f578063475a9fa91461036157806370a08231146103a057806374580e2f146103ea57806395d89b4114610420578063a9059cbb146104b9578063d7a78db814610510578063dd62ed3e14610530578063ffaa9c2214610599575bfe5b34156100f957fe5b6101016105b9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561014b57fe5b6101536105df565b60405180806020018281038252838181518152602001915080519060200190808383600083146101a2575b8051825260208311156101a25760208201915060208101905060208303925061017e565b505050905090810190601f1680156101ce5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101e457fe5b610219600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061067d565b604051808215151515815260200191505060405180910390f35b341561023b57fe5b61024361080c565b6040518082600181111561025357fe5b60ff16815260200191505060405180910390f35b341561026f57fe5b61027761081f565b6040518082815260200191505060405180910390f35b341561029557fe5b6102e9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061082a565b604051808215151515815260200191505060405180910390f35b341561030b57fe5b610313610b67565b6040518082815260200191505060405180910390f35b341561033157fe5b610339610b6d565b6040518082815260200191505060405180910390f35b341561035757fe5b61035f610b73565b005b341561036957fe5b61039e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c30565b005b34156103a857fe5b6103d4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d0f565b6040518082815260200191505060405180910390f35b34156103f257fe5b61041e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d59565b005b341561042857fe5b610430610dfc565b604051808060200182810382528381815181526020019150805190602001908083836000831461047f575b80518252602083111561047f5760208201915060208101905060208303925061045b565b505050905090810190601f1680156104ab5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104c157fe5b6104f6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e9a565b604051808215151515815260200191505060405180910390f35b341561051857fe5b61052e60048080359060200190919050506110c4565b005b341561053857fe5b610583600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061112d565b6040518082815260200191505060405180910390f35b34156105a157fe5b6105b760048080359060200190919050506111b5565b005b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106755780601f1061064a57610100808354040283529160200191610675565b820191906000526020600020905b81548152906001019060200180831161065857829003601f168201915b505050505081565b60006000821415801561070d57506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b1561071b5760009050610806565b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b600860009054906101000a900460ff1681565b600060025490505b90565b6000600060075414158015610840575060075443115b1561084b5760006000fd5b60026004602082020160003690501415156108665760006000fd5b82600060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610931575082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156109bc5750600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15610b535782600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555082600060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150610b5d565b60009150610b5d565b5b5b505b9392505050565b60045481565b60025481565b6000806001811115610b8157fe5b600860009054906101000a900460ff166001811115610b9c57fe5b141515610ba95760006000fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c065760006000fd5b6001600860006101000a81548160ff02191690836001811115610c2557fe5b02179055505b5b5b50565b6000806001811115610c3e57fe5b600860009054906101000a900460ff166001811115610c5957fe5b141515610c665760006000fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610cc35760006000fd5b81600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b5b505050565b6000600060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610db65760006000fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e925780601f10610e6757610100808354040283529160200191610e92565b820191906000526020600020905b815481529060010190602001808311610e7557829003601f168201915b505050505081565b6000600060075414158015610eb0575060075443115b15610ebb5760006000fd5b6002600460208202016000369050141515610ed65760006000fd5b82600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610fa45750600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b156110b15782600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191506110bb565b600091506110bb565b5b5b505b92915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111215760006000fd5b806007819055505b5b50565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b60008060018111156111c357fe5b600860009054906101000a900460ff1660018111156111de57fe5b1415156111eb5760006000fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112485760006000fd5b816002819055505b5b5b50505600a165627a7a723058201dcf88a89e20b6e696555c04426b71860a39a8074c6f90f6718d9497d3ce7fd80029"
}