{
  "address": "0x7a18919f0b05fa5e91f3ef43afe8a72105c9d4b8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "WatermelonBlock Token",
  "contractName": "WatermelonBlockToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-24\n*/\n\n/*\n *  The WatermelonBlock Token contract complies with the ERC20 standard (see https://github.com/ethereum/EIPs/issues/20).\n *  Author: Justas Kregzde\n */\n \npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n    function mul(uint a, uint b) internal returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function sub(uint a, uint b) internal returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint a, uint b) internal returns (uint) {\n        uint c = a + b;\n        assert(c>=a && c>=b);\n        return c;\n    }\n}\n\ncontract WatermelonBlockToken {\n    using SafeMath for uint;\n\n    // Public variables of the token\n    string constant public standard = \"ERC20\";\n    string constant public name = \"WatermelonBlock tokens\";\n    string constant public symbol = \"WMB\";\n    uint8 constant public decimals = 6;\n\n    uint _totalSupply = 400000000e6; // Total supply of 400 million WatermelonBlock tokens\n    uint constant public tokensICO = 240000000e6; // 60% token sale\n    uint constant public teamReserve = 80000000e6; // 20% team\n    uint constant public seedInvestorsReserve = 40000000e6; // 10% seed investors\n    uint constant public emergencyReserve = 40000000e6; // 10% emergency\n\n    address public icoAddr;\n    address public teamAddr;\n    address public emergencyAddr;\n\n    uint constant public lockStartTime = 1527811200; // 2018 June 1, Friday, 00:00:00\n    bool icoEnded;\n\n    struct Lockup\n    {\n        uint lockupTime;\n        uint lockupAmount;\n    }\n    Lockup lockup;\n    mapping(address=>Lockup) lockupParticipants;\n\n    uint[] lockupTeamSum = [80000000e6,70000000e6,60000000e6,50000000e6,40000000e6,30000000e6,20000000e6,10000000e6];\n    uint[] lockupTeamDate = [1535760000,1543622400,1551398400,1559347200,1567296000,1575158400,1583020800,1590969600];\n\n    // Array with all balances\n    mapping (address => uint) balances;\n    mapping (address => mapping (address => uint)) allowed;\n\n    // Public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed _owner, address indexed spender, uint value);\n    event Burned(uint amount);\n\n    // What is the balance of a particular account?\n    function balanceOf(address _owner) constant returns (uint balance) {\n        return balances[_owner];\n    }\n\n    // Returns the amount which _spender is still allowed to withdraw from _owner\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    // Get the total token supply\n    function totalSupply() constant returns (uint totalSupply) {\n        totalSupply = _totalSupply;\n    }\n\n    // Initializes contract\n    function WatermelonBlockToken(address _icoAddr, address _teamAddr, address _emergencyAddr) {\n        icoAddr = _icoAddr;\n        teamAddr = _teamAddr;\n        emergencyAddr = _emergencyAddr;\n\n        balances[icoAddr] = tokensICO;\n        balances[teamAddr] = teamReserve;\n\n        // seed investors\n        address investor_1 = 0xF735e4a0A446ed52332AB891C46661cA4d9FD7b9;\n        balances[investor_1] = 20000000e6;\n        var lockupTime = lockStartTime.add(1 years);\n        lockup = Lockup({lockupTime:lockupTime,lockupAmount:balances[investor_1]});\n        lockupParticipants[investor_1] = lockup;\n\n        address investor_2 = 0x425207D7833737b62E76785A3Ab3f9dEce3953F5;\n        balances[investor_2] = 8000000e6;\n        lockup = Lockup({lockupTime:lockupTime,lockupAmount:balances[investor_2]});\n        lockupParticipants[investor_2] = lockup;\n\n        var leftover = seedInvestorsReserve.sub(balances[investor_1]).sub(balances[investor_2]);\n        balances[emergencyAddr] = emergencyReserve.add(leftover);\n    }\n\n    // Send some of your tokens to a given address\n    function transfer(address _to, uint _value) returns(bool) {\n        if (lockupParticipants[msg.sender].lockupAmount > 0) {\n            if (now < lockupParticipants[msg.sender].lockupTime) {\n                require(balances[msg.sender].sub(_value) >= lockupParticipants[msg.sender].lockupAmount);\n            }\n        }\n        if (msg.sender == teamAddr) {\n            for (uint i = 0; i < lockupTeamDate.length; i++) {\n                if (now < lockupTeamDate[i])\n                    require(balances[msg.sender].sub(_value) >= lockupTeamSum[i]);\n            }\n        }\n        balances[msg.sender] = balances[msg.sender].sub(_value); // Subtract from the sender\n        balances[_to] = balances[_to].add(_value); // Add the same to the recipient\n        Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\n        return true;\n    }\n\t\n    // A contract or person attempts to get the tokens of somebody else.\n    // This is only allowed if the token holder approved.\n    function transferFrom(address _from, address _to, uint _value) returns(bool) {\n        if (lockupParticipants[_from].lockupAmount > 0) {\n            if (now < lockupParticipants[_from].lockupTime) {\n                require(balances[_from].sub(_value) >= lockupParticipants[_from].lockupAmount);\n            }\n        }\n        if (_from == teamAddr) {\n            for (uint i = 0; i < lockupTeamDate.length; i++) {\n                if (now < lockupTeamDate[i])\n                    require(balances[_from].sub(_value) >= lockupTeamSum[i]);\n            }\n        }\n        var _allowed = allowed[_from][msg.sender];\n        balances[_from] = balances[_from].sub(_value); // Subtract from the sender\n        balances[_to] = balances[_to].add(_value); // Add the same to the recipient\n        allowed[_from][msg.sender] = _allowed.sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\t\n    // Approve the passed address to spend the specified amount of tokens\n    // on behalf of msg.sender.\n    function approve(address _spender, uint _value) returns (bool) {\n        //https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n}",
  "bytecode": "66016bcc41e900006000556101806040526548c2739500006080908152653faa2522600060a052653691d6afc00060c052652d79883d200060e05265246139ca800061010052651b48eb57e000610120526512309ce54000610140526509184e72a00061016052620000769060079060086200039e565b506040805161010081018252635b89d6808152635c01cf006020820152635c78760091810191909152635cf1c0006060820152635d6b0a006080820152635de3028060a0820152635e5afb0060c0820152635ed4450060e0820152620000e09060089081620003f8565b50348015620000ee57600080fd5b5060405160608062000e1d83398101604090815281516020808401519383015160018054600160a060020a03808616600160a060020a0319928316179283905560028054828a16908416178155600380548387169416939093179092559182166000908152600990945285842065da475abf00009055541682529281206548c273950000905573f735e4a0a446ed52332ab891c46661ca4d9fd7b98082526512309ce540007f36bd2bbeda8f9f52f4faf122dc279f5f3cda5027e850ac369af28ae42921f2d05591939291908080620001de635b108c806301e133806401000000006200095f6200036582021704565b604080518082018252828152600160a060020a038716600081815260096020818152858320805482870181905295516005968755858552600683528785209081558654600190910155650746a52880007fbe13c15555c9e10e05b70eb54dd6d899cff562c7f6fa1059788ac20598840d3c819055875180890190985288885273425207d7833737b62e76785a3ab3f9dece3953f580865284845288840182905297516004819055968190557f736f859f54f78f5d87f31f6e5834f0e9067baa2540802261c11fdd18c5f1b8e3969096557f736f859f54f78f5d87f31f6e5834f0e9067baa2540802261c11fdd18c5f1b8e4869055919052919052549295509093506200031a91620003059065246139ca8000906401000000006200038b81026200094d1704565b906401000000006200094d6200038b82021704565b90506200033c65246139ca8000826401000000006200095f6200036582021704565b600354600160a060020a0316600090815260096020526040902055506200045e95505050505050565b60008282018381108015906200037b5750828110155b15156200038457fe5b9392505050565b6000828211156200039857fe5b50900390565b828054828255906000526020600020908101928215620003e6579160200282015b82811115620003e6578251829065ffffffffffff16905591602001919060010190620003bf565b50620003f49291506200043e565b5090565b828054828255906000526020600020908101928215620003e6579160200282015b82811115620003e6578251829063ffffffff1690559160200191906001019062000419565b6200045b91905b80821115620003f4576000815560010162000445565b90565b6109af806200046e6000396000f3006080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610100578063095ea7b31461018a57806318160ddd146101c257806323b872dd146101e9578063313ce567146102135780634287f14a1461023e5780634a5ff749146102535780635a3b7e421461028457806362c7fa761461029957806370a08231146102ae5780637106312c146102cf578063721ed9ec146102e457806390a2e1ef146102f957806395d89b411461030e578063a9059cbb14610323578063ae5409fb146102f9578063dd62ed3e14610347578063fb64e6b11461036e575b600080fd5b34801561010c57600080fd5b50610115610383565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014f578181015183820152602001610137565b50505050905090810190601f16801561017c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019657600080fd5b506101ae600160a060020a03600435166024356103ba565b604080519115158252519081900360200190f35b3480156101ce57600080fd5b506101d761045c565b60408051918252519081900360200190f35b3480156101f557600080fd5b506101ae600160a060020a0360043581169060243516604435610462565b34801561021f57600080fd5b50610228610695565b6040805160ff9092168252519081900360200190f35b34801561024a57600080fd5b506101d761069a565b34801561025f57600080fd5b506102686106a4565b60408051600160a060020a039092168252519081900360200190f35b34801561029057600080fd5b506101156106b3565b3480156102a557600080fd5b506101d76106ea565b3480156102ba57600080fd5b506101d7600160a060020a03600435166106f2565b3480156102db57600080fd5b5061026861070d565b3480156102f057600080fd5b506101d761071c565b34801561030557600080fd5b506101d7610726565b34801561031a57600080fd5b50610115610730565b34801561032f57600080fd5b506101ae600160a060020a0360043516602435610767565b34801561035357600080fd5b506101d7600160a060020a0360043581169060243516610913565b34801561037a57600080fd5b5061026861093e565b60408051808201909152601681527f57617465726d656c6f6e426c6f636b20746f6b656e7300000000000000000000602082015281565b60008115806103ea5750336000908152600a60209081526040808320600160a060020a0387168452909152902054155b15156103f557600080fd5b336000818152600a60209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60005490565b600160a060020a038316600090815260066020526040812060010154819081908110156104ec57600160a060020a0386166000908152600660205260409020544210156104ec57600160a060020a0386166000908152600660209081526040808320600101546009909252909120546104e1908663ffffffff61094d16565b10156104ec57600080fd5b600254600160a060020a038781169116141561058a57600091505b60085482101561058a57600880548390811061051f57fe5b906000526020600020015442101561057f57600780548390811061053f57fe5b6000918252602080832090910154600160a060020a03891683526009909152604090912054610574908663ffffffff61094d16565b101561057f57600080fd5b600190910190610507565b50600160a060020a0385166000818152600a6020908152604080832033845282528083205493835260099091529020546105ca908563ffffffff61094d16565b600160a060020a0380881660009081526009602052604080822093909355908716815220546105ff908563ffffffff61095f16565b600160a060020a038616600090815260096020526040902055610628818563ffffffff61094d16565b600160a060020a038088166000818152600a6020908152604080832033845282529182902094909455805188815290519289169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600195945050505050565b600681565b6548c27395000081565b600254600160a060020a031681565b60408051808201909152600581527f4552433230000000000000000000000000000000000000000000000000000000602082015281565b635b108c8081565b600160a060020a031660009081526009602052604090205490565b600354600160a060020a031681565b65da475abf000081565b65246139ca800081565b60408051808201909152600381527f574d420000000000000000000000000000000000000000000000000000000000602082015281565b3360009081526006602052604081206001015481908110156107d457336000908152600660205260409020544210156107d457336000908152600660209081526040808320600101546009909252909120546107c9908563ffffffff61094d16565b10156107d457600080fd5b600254600160a060020a0316331415610862575060005b60085481101561086257600880548290811061080357fe5b906000526020600020015442101561085a57600780548290811061082357fe5b6000918252602080832090910154338352600990915260409091205461084f908563ffffffff61094d16565b101561085a57600080fd5b6001016107eb565b33600090815260096020526040902054610882908463ffffffff61094d16565b3360009081526009602052604080822092909255600160a060020a038616815220546108b4908463ffffffff61095f16565b600160a060020a0385166000818152600960209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b600160a060020a039182166000908152600a6020908152604080832093909416825291909152205490565b600154600160a060020a031681565b60008282111561095957fe5b50900390565b60008282018381108015906109745750828110155b151561097c57fe5b93925050505600a165627a7a72305820304a5c611b4ec542e0001d33dcece5320ddcf32adf181d90ce73fede843fcba100290000000000000000000000001cec2b588eee2cb56842ab09c009d470ff17408c000000000000000000000000162f9dd9e5bd80cad35b37c2eb5f78f3d50e8bd30000000000000000000000007b40ef4d92552e131b6538efdbd9c1e0aaef29ca",
  "constructorArguments": "0000000000000000000000001cec2b588eee2cb56842ab09c009d470ff17408c000000000000000000000000162f9dd9e5bd80cad35b37c2eb5f78f3d50e8bd30000000000000000000000007b40ef4d92552e131b6538efdbd9c1e0aaef29ca"
}