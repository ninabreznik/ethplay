{
  "address": "0xf2e88e0bfe61e5e41d9317e82c6938e67a913cc1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WhoWillRuleWesterosAtTheEnd",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-31\n*/\n\npragma solidity ^0.5.7;\n/*\nhttps://WhoWillRuleWesteros.flybet.online/\n*/\ncontract WhoWillRuleWesterosAtTheEnd {\n    \n    uint8 public constant Withdraw = 0;\n    uint8 public constant firstHero = 1;\n    uint8 public constant lastHero = 49;\n    uint8 public constant ArraySize = lastHero + 1;\n/*\nEuronGreyjoy = 1;\nCerseiLannister = 2;\nLordVarys = 3;\nJorahMormont = 4;\nBericDondarrion = 5;\nMelisandre = 6;\nJaimeLannister = 7;\nTheHound = 8;\nDaenerysTargaryen = 9;\nGreyWorm = 10;\nTheonGreyjoy = 11;\nTyrionLannister = 12;\nPodrickPayne = 14;\nBrienneOfTarth = 15;\nBronnOfTheBlackwater = 16;\nAryaStark = 17;\nJonSnow = 18;\nGendry = 19;\nBranStark = 20;\nGilly = 21;\nSamwellTarly = 22;\nSansaStark = 13;\nYaraGreyjoy = 23;\nAny Child of Cersei = 24;\nEddisonTollett = 25;\nEdmureTully = 26;\nGregorClegane = 27;\nHotPie = 28;\nLyannaMormont = 29;\nChild of Jon Snow & Daenerys Targaryen = 30;\nRobinArryn = 31;\nDavosSeaworth = 32;\nYohnRoyce = 33;\nMissandei = 34;\nTheNightKing = 35;\nTormundGiantsbane = 36;\nDaarioNaharis = 37;\nJaqunHâ€™ghar = 38;\nCatelyn Stark = 39;\nEd Sheeran = 40;\nEllaria Sand = 41;\nHodor = 42;\nIllyrio Mopatis = 43;\nMeera Reed = 44;\nNed Stark = 45;\nPetyr Baelish = 46;\nQyburn = 47;\nStannis Baratheon = 48;\nThe Children Of The Forest = 49;\n*/\n    mapping(address => bool) sith;\n    mapping(address => uint256[ArraySize]) public bets;\n    uint256[ArraySize] public betAmount;\n    uint256[ArraySize] public playerCount;\n    uint256 public resultWin = 0;\n    uint256 public winRatio;\n    uint256 constant minBet = 0.001 ether;\n    uint256 constant RR = 100000000000000;\n    uint256 sithCount;\n    uint256 public likeDAPP;\n    bool public endBetting = false;\n    bool public startPayment = false;\n    bool public onPause = false;\n    address payable Martin;\n    address payable George;\n    \n    event Bet(address indexed _who, uint8 _hero, uint256 amount);\n    \n    modifier onlySiths {\n        require(sith[msg.sender] == true);\n        _;\n    }\n\n    constructor(address payable _M, address payable _G) public {\n        Martin = _M;\n        George = _G;\n        sith[msg.sender] = true;\n        sithCount++;\n    }\n\n    function like() external {\n        likeDAPP++;\n    }\n\n    function dislike() external {\n        if (likeDAPP > 0) {\n            likeDAPP--;\n        }\n    }\n    \n    function getLikes() external view returns (uint256) {\n        return likeDAPP;\n    }\n\n    function setBet(uint8 _hero) external payable {\n        require(onPause == false);\n        require(msg.value >= minBet);\n        require(endBetting == false);\n        require(_hero >= firstHero || _hero <= lastHero);\n        if (bets[msg.sender][_hero] == 0) {\n            playerCount[_hero]++;\n        }\n        bets[msg.sender][_hero] += msg.value;\n        betAmount[_hero] += msg.value;\n        emit Bet(msg.sender, _hero, msg.value);\n\n    }\n\n    function getProfit(address payable _winer) external {\n        require(startPayment == true);\n        if (resultWin == Withdraw) {\n            uint256 retValue;\n            for(uint256 i = firstHero; i <= lastHero; i++) {\n                uint256 bet = bets[_winer][i];\n                if (bet > 0) {\n                    bets[_winer][i] = 0;\n                    retValue += bet;\n                }\n            }\n            if (retValue > 0) {\n                _winer.transfer(retValue); \n            }\n            return;\n        } else {\n            uint256 winersBet = bets[_winer][resultWin];\n            require(winersBet > 0);\n            bets[_winer][resultWin] = 0;\n            playerCount[resultWin]--;\n            _winer.transfer(winersBet + winersBet * winRatio / RR);\n        }\n    }\n\n    function getStatistics() external view returns (uint256[2 * ArraySize] memory) {\n        uint256[2 * ArraySize] memory output;\n        for(uint256 i = firstHero; i <= lastHero; i++) {\n            output[i] = betAmount[i];\n            output[i + ArraySize] = playerCount[i];\n        }\n        return output;\n    }\n\n    function getPlayerStatistics(address _player) external view returns (uint256[ArraySize] memory) {\n        uint256[ArraySize] memory output;\n        for(uint256 i = firstHero; i <= lastHero; i++) {\n            output[i] = bets[_player][i];\n        }\n        return output;\n    }\n    \n    function endBetPeriod() external onlySiths {\n        endBetting = true;\n    }\n\n    function setResult(uint32 _result) external onlySiths {\n        require(_result >=  firstHero || _result <= lastHero);\n        require(startPayment == false);\n        if (betAmount[_result] == 0) {\n            startWithdraw();\n            return;\n        }\n        uint256 donation = (address(this).balance - betAmount[_result]) / 10;\n        Martin.transfer(donation / 2);\n        George.transfer(donation / 2);\n        uint256 totalBets = (address(this).balance - betAmount[_result]);\n        winRatio = totalBets * RR / betAmount[_result];\n        resultWin = _result;\n        startPayment = true;\n        if (endBetting != true) {\n            endBetting = true;\n        }\n    }\n\n    function startWithdraw() public onlySiths {\n        require(startPayment == false);\n        startPayment = true;\n        if (endBetting != true) {\n            endBetting = true;\n        }\n        if (resultWin != Withdraw) {\n            resultWin = Withdraw;\n        }\n    }\n\n    function pauseOn() external onlySiths {\n        onPause = true;\n    }\n\n    function pauseOff() external onlySiths {\n        onPause = false;\n    }\n\n    function clearBlockchain() external {\n        require(startPayment && endBetting);\n        if (resultWin == Withdraw) {\n            require(address(this).balance < minBet);\n            selfdestruct(msg.sender);\n        } else {\n            require(playerCount[resultWin] == 0);\n            selfdestruct(msg.sender);\n        }\n    }\n\n    function addSith(address _sith) external onlySiths {\n        sith[_sith] = true;\n        sithCount++;\n    }\n\n    function delSith(address _sith) external onlySiths {\n        require(sithCount >= 2);\n        sith[_sith] = false;\n        sithCount--;\n    }\n}",
  "bytecode": "60806040526000606655606a805462ffffff1916905534801561002157600080fd5b50604051604080610e808339810180604052604081101561004157600080fd5b508051602091820151606a80546301000000600160b81b03191663010000006001600160a01b0394851602179055606b80546001600160a01b031916929091169190911790553360009081529081905260408120805460ff19166001908117909155606880549091019055610dc49081906100bc90396000f3fe6080604052600436106101b75760003560e01c806382bb8a7d116100ec578063c74ce1bb1161008a578063df5a11e111610064578063df5a11e1146104fa578063df5d2d651461050f578063e42421ce14610542578063f299f52614610557576101b7565b8063c74ce1bb14610487578063c7af17031461049c578063d01dbc62146104e5576101b7565b80639c62cfb2116100c65780639c62cfb21461040a578063a523b88a1461042a578063b90f4d131461043f578063c600e1dc14610454576101b7565b806382bb8a7d146103cb57806390ed6bf4146103e057806395469fe6146103f5576101b7565b806362a1c583116101595780637755c4ae116101335780637755c4ae14610359578063805cd0cc1461036e578063825241dc146103a1578063826f57a1146103b6576101b7565b806362a1c5831461031a578063686dc57c1461032f5780636cae4a8f14610344576101b7565b8063372d6b2711610195578063372d6b27146102535780633ada02e5146102a15780634a39ec90146102cc57806357ea89b614610305576101b7565b806318d92831146101bc57806319bd6086146101e55780632566c9ea14610217575b600080fd5b3480156101c857600080fd5b506101d1610581565b604080519115158252519081900360200190f35b3480156101f157600080fd5b506102156004803603602081101561020857600080fd5b503563ffffffff16610590565b005b34801561022357600080fd5b506102416004803603602081101561023a57600080fd5b503561073b565b60408051918252519081900360200190f35b34801561025f57600080fd5b5061026861074f565b6040518082610c8080838360005b8381101561028e578181015183820152602001610276565b5050505090500191505060405180910390f35b3480156102ad57600080fd5b506102b66107bb565b6040805160ff9092168252519081900360200190f35b3480156102d857600080fd5b50610241600480360360408110156102ef57600080fd5b506001600160a01b0381351690602001356107c0565b34801561031157600080fd5b506102b66107e2565b34801561032657600080fd5b506102416107e7565b34801561033b57600080fd5b506102156107ed565b34801561035057600080fd5b506102b6610821565b34801561036557600080fd5b50610215610826565b34801561037a57600080fd5b506102156004803603602081101561039157600080fd5b50356001600160a01b0316610856565b3480156103ad57600080fd5b506102416108a7565b3480156103c257600080fd5b506101d16108ad565b3480156103d757600080fd5b506102416108b6565b3480156103ec57600080fd5b506102156108bc565b34801561040157600080fd5b506101d161092d565b6102156004803603602081101561042057600080fd5b503560ff1661093b565b34801561043657600080fd5b50610215610a50565b34801561044b57600080fd5b50610215610a5b565b34801561046057600080fd5b506102156004803603602081101561047757600080fd5b50356001600160a01b0316610ab6565b34801561049357600080fd5b50610241610c43565b3480156104a857600080fd5b506104cf600480360360208110156104bf57600080fd5b50356001600160a01b0316610c49565b6040518151815280826106408083836020610276565b3480156104f157600080fd5b50610215610ca9565b34801561050657600080fd5b50610215610cd8565b34801561051b57600080fd5b506102156004803603602081101561053257600080fd5b50356001600160a01b0316610cec565b34801561054e57600080fd5b506102b6610d48565b34801561056357600080fd5b506102416004803603602081101561057a57600080fd5b5035610d4d565b606a5462010000900460ff1681565b3360009081526020819052604090205460ff1615156001146105b157600080fd5b600163ffffffff82161015806105ce5750603163ffffffff821611155b6105d757600080fd5b606a54610100900460ff16156105ec57600080fd5b60028163ffffffff16603281106105ff57fe5b01546106125761060d6108bc565b610738565b6000600a60028363ffffffff166032811061062957fe5b01543031038161063557fe5b606a546040519290910492506001600160a01b03630100000090910416906002830480156108fc02916000818181858888f1935050505015801561067d573d6000803e3d6000fd5b50606b546040516001600160a01b03909116906002830480156108fc02916000818181858888f193505050501580156106ba573d6000803e3d6000fd5b50600060028363ffffffff16603281106106d057fe5b01543031039050600263ffffffff8416603281106106ea57fe5b0154655af3107a40008202816106fc57fe5b0460675563ffffffff8316606655606a805461ff001916610100179081905560ff16151560011461073557606a805460ff191660011790555b50505b50565b6034816032811061074857fe5b0154905081565b610757610d5a565b61075f610d5a565b60015b603181116107b5576002816032811061077757fe5b015482826064811061078557fe5b60200201526034816032811061079757fe5b01548260328301606481106107a857fe5b6020020152600101610762565b50905090565b603281565b600160205281600052604060002081603281106107d957fe5b01549150829050565b600081565b60695490565b3360009081526020819052604090205460ff16151560011461080e57600080fd5b606a805462ff0000191662010000179055565b603181565b3360009081526020819052604090205460ff16151560011461084757600080fd5b606a805460ff19166001179055565b3360009081526020819052604090205460ff16151560011461087757600080fd5b6001600160a01b03166000908152602081905260409020805460ff19166001908117909155606880549091019055565b60665481565b606a5460ff1681565b60675481565b3360009081526020819052604090205460ff1615156001146108dd57600080fd5b606a54610100900460ff16156108f257600080fd5b606a805461ff001916610100179081905560ff16151560011461091d57606a805460ff191660011790555b6066541561092b5760006066555b565b606a54610100900460ff1681565b606a5462010000900460ff161561095157600080fd5b66038d7ea4c6800034101561096557600080fd5b606a5460ff161561097557600080fd5b600160ff821610158061098c5750603160ff821611155b61099557600080fd5b33600090815260016020526040902060ff8216603281106109b257fe5b01546109d15760348160ff16603281106109c857fe5b01805460010190555b336000908152600160205260409020349060ff8316603281106109f057fe5b018054909101905534600260ff831660328110610a0957fe5b01805490910190556040805160ff83168152346020820152815133927fb4f5f2ed7ba256671b209e2db48139923ef8f21339106cc653b58eff5058dda4928290030190a250565b606980546001019055565b606a54610100900460ff168015610a745750606a5460ff165b610a7d57600080fd5b606654610a9b5766038d7ea4c68000303110610a9857600080fd5b33ff5b603460665460328110610aaa57fe5b015415610a9857600080fd5b606a5460ff610100909104161515600114610ad057600080fd5b606654610b8957600060015b60318111610b44576001600160a01b03831660009081526001602052604081208260328110610b0757fe5b015490508015610b3b576001600160a01b03841660009081526001602052604081208360328110610b3457fe5b0155918201915b50600101610adc565b508015610b83576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015610b81573d6000803e3d6000fd5b505b50610738565b6001600160a01b038116600090815260016020526040812060665460328110610bae57fe5b0154905060008111610bbf57600080fd5b6001600160a01b038216600090815260016020526040812060665460328110610be457fe5b015560665460349060328110610bf657fe5b0180546000190190556067546040516001600160a01b03841691655af3107a400090840204830180156108fc02916000818181858888f19350505050158015610735573d6000803e3d6000fd5b60695481565b610c51610d79565b610c59610d79565b60015b60318111610ca2576001600160a01b03841660009081526001602052604090208160328110610c8757fe5b0154828260328110610c9557fe5b6020020152600101610c5c565b5092915050565b3360009081526020819052604090205460ff161515600114610cca57600080fd5b606a805462ff000019169055565b6069541561092b5760698054600019019055565b3360009081526020819052604090205460ff161515600114610d0d57600080fd5b60026068541015610d1d57600080fd5b6001600160a01b03166000908152602081905260409020805460ff1916905560688054600019019055565b600181565b6002816032811061074857fe5b60405180610c8001604052806064906020820280388339509192915050565b604051806106400160405280603290602082028038833950919291505056fea165627a7a723058204946b9a70f471cf856e6ee2d0686c38d3f3950fb52289a0596f09b4d9cf445240029000000000000000000000000be4a75b568d05131c3005f98182e20c2f0a851030000000000000000000000002f90cc66f0fd87ed3ca63fe5a254f4b6aa293368",
  "constructorArguments": "000000000000000000000000be4a75b568d05131c3005f98182e20c2f0a851030000000000000000000000002f90cc66f0fd87ed3ca63fe5a254f4b6aa293368"
}