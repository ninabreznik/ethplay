{
  "address": "0xa6230691b2b1cff2f9737ccfa3ff95d580e482a0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthPyramid",
  "compilerVersion": "v0.4.20-nightly.2018.1.29+commit.a668b9de",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-02\n*/\n\npragma solidity ^0.4.18;\n\n/*\n          ,/`.\n        ,'/ __`.\n      ,'_/_  _ _`.\n    ,'__/_ ___ _  `.\n  ,'_  /___ __ _ __ `.\n '-.._/___...-\"-.-..__`.\n  B\n\n EthPyramid. A no-bullshit, transparent, self-sustaining pyramid scheme.\n \n Inspired by https://test.jochen-hoenicke.de/eth/ponzitoken/\n\n Developers:\n\tArc\n\tDivine\n\tNorsefire\n\tToCsIcK\n\t\n Front-End:\n\tCardioth\n\ttenmei\n\tTrendium\n\t\n Moral Support:\n\tDeadCow.Rat\n\tDots\n\tFatKreamy\n\tKaseylol\n\tQuantumDeath666\n\tQuentin\n \n Shit-Tier:\n\tHentaiChrist\n \n*/\n\ncontract EthPyramid {\n\n\t// scaleFactor is used to convert Ether into tokens and vice-versa: they're of different\n\t// orders of magnitude, hence the need to bridge between the two.\n\tuint256 constant scaleFactor = 0x10000000000000000;  // 2^64\n\n\t// CRR = 50%\n\t// CRR is Cash Reserve Ratio (in this case Crypto Reserve Ratio).\n\t// For more on this: check out https://en.wikipedia.org/wiki/Reserve_requirement\n\tint constant crr_n = 1; // CRR numerator\n\tint constant crr_d = 2; // CRR denominator\n\n\t// The price coefficient. Chosen such that at 1 token total supply\n\t// the amount in reserve is 0.5 ether and token price is 1 Ether.\n\tint constant price_coeff = -0x296ABF784A358468C;\n\n\t// Typical values that we have to declare.\n\tstring constant public name = \"EthPyramid\";\n\tstring constant public symbol = \"EPY\";\n\tuint8 constant public decimals = 18;\n\n\t// Array between each address and their number of tokens.\n\tmapping(address => uint256) public tokenBalance;\n\t\t\n\t// Array between each address and how much Ether has been paid out to it.\n\t// Note that this is scaled by the scaleFactor variable.\n\tmapping(address => int256) public payouts;\n\n\t// Variable tracking how many tokens are in existence overall.\n\tuint256 public totalSupply;\n\n\t// Aggregate sum of all payouts.\n\t// Note that this is scaled by the scaleFactor variable.\n\tint256 totalPayouts;\n\n\t// Variable tracking how much Ether each token is currently worth.\n\t// Note that this is scaled by the scaleFactor variable.\n\tuint256 earningsPerToken;\n\t\n\t// Current contract balance in Ether\n\tuint256 public contractBalance;\n\n\tfunction EthPyramid() public {}\n\n\t// The following functions are used by the front-end for display purposes.\n\n\t// Returns the number of tokens currently held by _owner.\n\tfunction balanceOf(address _owner) public constant returns (uint256 balance) {\n\t\treturn tokenBalance[_owner];\n\t}\n\n\t// Withdraws all dividends held by the caller sending the transaction, updates\n\t// the requisite global variables, and transfers Ether back to the caller.\n\tfunction withdraw() public {\n\t\t// Retrieve the dividends associated with the address the request came from.\n\t\tvar balance = dividends(msg.sender);\n\t\t\n\t\t// Update the payouts array, incrementing the request address by `balance`.\n\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\n\t\t\n\t\t// Increase the total amount that's been paid out to maintain invariance.\n\t\ttotalPayouts += (int256) (balance * scaleFactor);\n\t\t\n\t\t// Send the dividends to the address that requested the withdraw.\n\t\tcontractBalance = sub(contractBalance, balance);\n\t\tmsg.sender.transfer(balance);\n\t}\n\n\t// Converts the Ether accrued as dividends back into EPY tokens without having to\n\t// withdraw it first. Saves on gas and potential price spike loss.\n\tfunction reinvestDividends() public {\n\t\t// Retrieve the dividends associated with the address the request came from.\n\t\tvar balance = dividends(msg.sender);\n\t\t\n\t\t// Update the payouts array, incrementing the request address by `balance`.\n\t\t// Since this is essentially a shortcut to withdrawing and reinvesting, this step still holds.\n\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\n\t\t\n\t\t// Increase the total amount that's been paid out to maintain invariance.\n\t\ttotalPayouts += (int256) (balance * scaleFactor);\n\t\t\n\t\t// Assign balance to a new variable.\n\t\tuint value_ = (uint) (balance);\n\t\t\n\t\t// If your dividends are worth less than 1 szabo, or more than a million Ether\n\t\t// (in which case, why are you even here), abort.\n\t\tif (value_ < 0.000001 ether || value_ > 1000000 ether)\n\t\t\trevert();\n\t\t\t\n\t\t// msg.sender is the address of the caller.\n\t\tvar sender = msg.sender;\n\t\t\n\t\t// A temporary reserve variable used for calculating the reward the holder gets for buying tokens.\n\t\t// (Yes, the buyer receives a part of the distribution as well!)\n\t\tvar res = reserve() - balance;\n\n\t\t// 10% of the total Ether sent is used to pay existing holders.\n\t\tvar fee = div(value_, 10);\n\t\t\n\t\t// The amount of Ether used to purchase new tokens for the caller.\n\t\tvar numEther = value_ - fee;\n\t\t\n\t\t// The number of tokens which can be purchased for numEther.\n\t\tvar numTokens = calculateDividendTokens(numEther, balance);\n\t\t\n\t\t// The buyer fee, scaled by the scaleFactor variable.\n\t\tvar buyerFee = fee * scaleFactor;\n\t\t\n\t\t// Check that we have tokens in existence (this should always be true), or\n\t\t// else you're gonna have a bad time.\n\t\tif (totalSupply > 0) {\n\t\t\t// Compute the bonus co-efficient for all existing holders and the buyer.\n\t\t\t// The buyer receives part of the distribution for each token bought in the\n\t\t\t// same way they would have if they bought each token individually.\n\t\t\tvar bonusCoEff =\n\t\t\t    (scaleFactor - (res + numEther) * numTokens * scaleFactor / (totalSupply + numTokens) / numEther)\n\t\t\t    * (uint)(crr_d) / (uint)(crr_d-crr_n);\n\t\t\t\t\n\t\t\t// The total reward to be distributed amongst the masses is the fee (in Ether)\n\t\t\t// multiplied by the bonus co-efficient.\n\t\t\tvar holderReward = fee * bonusCoEff;\n\t\t\t\n\t\t\tbuyerFee -= holderReward;\n\n\t\t\t// Fee is distributed to all existing token holders before the new tokens are purchased.\n\t\t\t// rewardPerShare is the amount gained per token thanks to this buy-in.\n\t\t\tvar rewardPerShare = holderReward / totalSupply;\n\t\t\t\n\t\t\t// The Ether value per token is increased proportionally.\n\t\t\tearningsPerToken += rewardPerShare;\n\t\t}\n\t\t\n\t\t// Add the numTokens which were just created to the total supply. We're a crypto central bank!\n\t\ttotalSupply = add(totalSupply, numTokens);\n\t\t\n\t\t// Assign the tokens to the balance of the buyer.\n\t\ttokenBalance[sender] = add(tokenBalance[sender], numTokens);\n\t\t\n\t\t// Update the payout array so that the buyer cannot claim dividends on previous purchases.\n\t\t// Also include the fee paid for entering the scheme.\n\t\t// First we compute how much was just paid out to the buyer...\n\t\tvar payoutDiff  = (int256) ((earningsPerToken * numTokens) - buyerFee);\n\t\t\n\t\t// Then we update the payouts array for the buyer with this amount...\n\t\tpayouts[sender] += payoutDiff;\n\t\t\n\t\t// And then we finally add it to the variable tracking the total amount spent to maintain invariance.\n\t\ttotalPayouts    += payoutDiff;\n\t\t\n\t}\n\n\t// Sells your tokens for Ether. This Ether is assigned to the callers entry\n\t// in the tokenBalance array, and therefore is shown as a dividend. A second\n\t// call to withdraw() must be made to invoke the transfer of Ether back to your address.\n\tfunction sellMyTokens() public {\n\t\tvar balance = balanceOf(msg.sender);\n\t\tsell(balance);\n\t}\n\n\t// The slam-the-button escape hatch. Sells the callers tokens for Ether, then immediately\n\t// invokes the withdraw() function, sending the resulting Ether to the callers address.\n    function getMeOutOfHere() public {\n\t\tsellMyTokens();\n        withdraw();\n\t}\n\n\t// Gatekeeper function to check if the amount of Ether being sent isn't either\n\t// too small or too large. If it passes, goes direct to buy().\n\tfunction fund() payable public {\n\t\t// Don't allow for funding if the amount of Ether sent is less than 1 szabo.\n\t\tif (msg.value > 0.000001 ether) {\n\t\t    contractBalance = add(contractBalance, msg.value);\n\t\t\tbuy();\n\t\t} else {\n\t\t\trevert();\n\t\t}\n    }\n\n\t// Function that returns the (dynamic) price of buying a finney worth of tokens.\n\tfunction buyPrice() public constant returns (uint) {\n\t\treturn getTokensForEther(1 finney);\n\t}\n\n\t// Function that returns the (dynamic) price of selling a single token.\n\tfunction sellPrice() public constant returns (uint) {\n        var eth = getEtherForTokens(1 finney);\n        var fee = div(eth, 10);\n        return eth - fee;\n    }\n\n\t// Calculate the current dividends associated with the caller address. This is the net result\n\t// of multiplying the number of tokens held by their current value in Ether and subtracting the\n\t// Ether that has already been paid out.\n\tfunction dividends(address _owner) public constant returns (uint256 amount) {\n\t\treturn (uint256) ((int256)(earningsPerToken * tokenBalance[_owner]) - payouts[_owner]) / scaleFactor;\n\t}\n\n\t// Version of withdraw that extracts the dividends and sends the Ether to the caller.\n\t// This is only used in the case when there is no transaction data, and that should be\n\t// quite rare unless interacting directly with the smart contract.\n\tfunction withdrawOld(address to) public {\n\t\t// Retrieve the dividends associated with the address the request came from.\n\t\tvar balance = dividends(msg.sender);\n\t\t\n\t\t// Update the payouts array, incrementing the request address by `balance`.\n\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\n\t\t\n\t\t// Increase the total amount that's been paid out to maintain invariance.\n\t\ttotalPayouts += (int256) (balance * scaleFactor);\n\t\t\n\t\t// Send the dividends to the address that requested the withdraw.\n\t\tcontractBalance = sub(contractBalance, balance);\n\t\tto.transfer(balance);\t\t\n\t}\n\n\t// Internal balance function, used to calculate the dynamic reserve value.\n\tfunction balance() internal constant returns (uint256 amount) {\n\t\t// msg.value is the amount of Ether sent by the transaction.\n\t\treturn contractBalance - msg.value;\n\t}\n\n\tfunction buy() internal {\n\t\t// Any transaction of less than 1 szabo is likely to be worth less than the gas used to send it.\n\t\tif (msg.value < 0.000001 ether || msg.value > 1000000 ether)\n\t\t\trevert();\n\t\t\t\t\t\t\n\t\t// msg.sender is the address of the caller.\n\t\tvar sender = msg.sender;\n\t\t\n\t\t// 10% of the total Ether sent is used to pay existing holders.\n\t\tvar fee = div(msg.value, 10);\n\t\t\n\t\t// The amount of Ether used to purchase new tokens for the caller.\n\t\tvar numEther = msg.value - fee;\n\t\t\n\t\t// The number of tokens which can be purchased for numEther.\n\t\tvar numTokens = getTokensForEther(numEther);\n\t\t\n\t\t// The buyer fee, scaled by the scaleFactor variable.\n\t\tvar buyerFee = fee * scaleFactor;\n\t\t\n\t\t// Check that we have tokens in existence (this should always be true), or\n\t\t// else you're gonna have a bad time.\n\t\tif (totalSupply > 0) {\n\t\t\t// Compute the bonus co-efficient for all existing holders and the buyer.\n\t\t\t// The buyer receives part of the distribution for each token bought in the\n\t\t\t// same way they would have if they bought each token individually.\n\t\t\tvar bonusCoEff =\n\t\t\t    (scaleFactor - (reserve() + numEther) * numTokens * scaleFactor / (totalSupply + numTokens) / numEther)\n\t\t\t    * (uint)(crr_d) / (uint)(crr_d-crr_n);\n\t\t\t\t\n\t\t\t// The total reward to be distributed amongst the masses is the fee (in Ether)\n\t\t\t// multiplied by the bonus co-efficient.\n\t\t\tvar holderReward = fee * bonusCoEff;\n\t\t\t\n\t\t\tbuyerFee -= holderReward;\n\n\t\t\t// Fee is distributed to all existing token holders before the new tokens are purchased.\n\t\t\t// rewardPerShare is the amount gained per token thanks to this buy-in.\n\t\t\tvar rewardPerShare = holderReward / totalSupply;\n\t\t\t\n\t\t\t// The Ether value per token is increased proportionally.\n\t\t\tearningsPerToken += rewardPerShare;\n\t\t\t\n\t\t}\n\n\t\t// Add the numTokens which were just created to the total supply. We're a crypto central bank!\n\t\ttotalSupply = add(totalSupply, numTokens);\n\n\t\t// Assign the tokens to the balance of the buyer.\n\t\ttokenBalance[sender] = add(tokenBalance[sender], numTokens);\n\n\t\t// Update the payout array so that the buyer cannot claim dividends on previous purchases.\n\t\t// Also include the fee paid for entering the scheme.\n\t\t// First we compute how much was just paid out to the buyer...\n\t\tvar payoutDiff = (int256) ((earningsPerToken * numTokens) - buyerFee);\n\t\t\n\t\t// Then we update the payouts array for the buyer with this amount...\n\t\tpayouts[sender] += payoutDiff;\n\t\t\n\t\t// And then we finally add it to the variable tracking the total amount spent to maintain invariance.\n\t\ttotalPayouts    += payoutDiff;\n\t\t\n\t}\n\n\t// Sell function that takes tokens and converts them into Ether. Also comes with a 10% fee\n\t// to discouraging dumping, and means that if someone near the top sells, the fee distributed\n\t// will be *significant*.\n\tfunction sell(uint256 amount) internal {\n\t    // Calculate the amount of Ether that the holders tokens sell for at the current sell price.\n\t\tvar numEthersBeforeFee = getEtherForTokens(amount);\n\t\t\n\t\t// 10% of the resulting Ether is used to pay remaining holders.\n        var fee = div(numEthersBeforeFee, 10);\n\t\t\n\t\t// Net Ether for the seller after the fee has been subtracted.\n        var numEthers = numEthersBeforeFee - fee;\n\t\t\n\t\t// *Remove* the numTokens which were just sold from the total supply. We're /definitely/ a crypto central bank.\n\t\ttotalSupply = sub(totalSupply, amount);\n\t\t\n        // Remove the tokens from the balance of the buyer.\n\t\ttokenBalance[msg.sender] = sub(tokenBalance[msg.sender], amount);\n\n        // Update the payout array so that the seller cannot claim future dividends unless they buy back in.\n\t\t// First we compute how much was just paid out to the seller...\n\t\tvar payoutDiff = (int256) (earningsPerToken * amount + (numEthers * scaleFactor));\n\t\t\n        // We reduce the amount paid out to the seller (this effectively resets their payouts value to zero,\n\t\t// since they're selling all of their tokens). This makes sure the seller isn't disadvantaged if\n\t\t// they decide to buy back in.\n\t\tpayouts[msg.sender] -= payoutDiff;\t\t\n\t\t\n\t\t// Decrease the total amount that's been paid out to maintain invariance.\n        totalPayouts -= payoutDiff;\n\t\t\n\t\t// Check that we have tokens in existence (this is a bit of an irrelevant check since we're\n\t\t// selling tokens, but it guards against division by zero).\n\t\tif (totalSupply > 0) {\n\t\t\t// Scale the Ether taken as the selling fee by the scaleFactor variable.\n\t\t\tvar etherFee = fee * scaleFactor;\n\t\t\t\n\t\t\t// Fee is distributed to all remaining token holders.\n\t\t\t// rewardPerShare is the amount gained per token thanks to this sell.\n\t\t\tvar rewardPerShare = etherFee / totalSupply;\n\t\t\t\n\t\t\t// The Ether value per token is increased proportionally.\n\t\t\tearningsPerToken = add(earningsPerToken, rewardPerShare);\n\t\t}\n\t}\n\t\n\t// Dynamic value of Ether in reserve, according to the CRR requirement.\n\tfunction reserve() internal constant returns (uint256 amount) {\n\t\treturn sub(balance(),\n\t\t\t ((uint256) ((int256) (earningsPerToken * totalSupply) - totalPayouts) / scaleFactor));\n\t}\n\n\t// Calculates the number of tokens that can be bought for a given amount of Ether, according to the\n\t// dynamic reserve and totalSupply values (derived from the buy and sell prices).\n\tfunction getTokensForEther(uint256 ethervalue) public constant returns (uint256 tokens) {\n\t\treturn sub(fixedExp(fixedLog(reserve() + ethervalue)*crr_n/crr_d + price_coeff), totalSupply);\n\t}\n\n\t// Semantically similar to getTokensForEther, but subtracts the callers balance from the amount of Ether returned for conversion.\n\tfunction calculateDividendTokens(uint256 ethervalue, uint256 subvalue) public constant returns (uint256 tokens) {\n\t\treturn sub(fixedExp(fixedLog(reserve() - subvalue + ethervalue)*crr_n/crr_d + price_coeff), totalSupply);\n\t}\n\n\t// Converts a number tokens into an Ether value.\n\tfunction getEtherForTokens(uint256 tokens) public constant returns (uint256 ethervalue) {\n\t\t// How much reserve Ether do we have left in the contract?\n\t\tvar reserveAmount = reserve();\n\n\t\t// If you're the Highlander (or bagholder), you get The Prize. Everything left in the vault.\n\t\tif (tokens == totalSupply)\n\t\t\treturn reserveAmount;\n\n\t\t// If there would be excess Ether left after the transaction this is called within, return the Ether\n\t\t// corresponding to the equation in Dr Jochen Hoenicke's original Ponzi paper, which can be found\n\t\t// at https://test.jochen-hoenicke.de/eth/ponzitoken/ in the third equation, with the CRR numerator \n\t\t// and denominator altered to 1 and 2 respectively.\n\t\treturn sub(reserveAmount, fixedExp((fixedLog(totalSupply - tokens) - price_coeff) * crr_d/crr_n));\n\t}\n\n\t// You don't care about these, but if you really do they're hex values for \n\t// co-efficients used to simulate approximations of the log and exp functions.\n\tint256  constant one        = 0x10000000000000000;\n\tuint256 constant sqrt2      = 0x16a09e667f3bcc908;\n\tuint256 constant sqrtdot5   = 0x0b504f333f9de6484;\n\tint256  constant ln2        = 0x0b17217f7d1cf79ac;\n\tint256  constant ln2_64dot5 = 0x2cb53f09f05cc627c8;\n\tint256  constant c1         = 0x1ffffffffff9dac9b;\n\tint256  constant c3         = 0x0aaaaaaac16877908;\n\tint256  constant c5         = 0x0666664e5e9fa0c99;\n\tint256  constant c7         = 0x049254026a7630acf;\n\tint256  constant c9         = 0x038bd75ed37753d68;\n\tint256  constant c11        = 0x03284a0c14610924f;\n\n\t// The polynomial R = c1*x + c3*x^3 + ... + c11 * x^11\n\t// approximates the function log(1+x)-log(1-x)\n\t// Hence R(s) = log((1+s)/(1-s)) = log(a)\n\tfunction fixedLog(uint256 a) internal pure returns (int256 log) {\n\t\tint32 scale = 0;\n\t\twhile (a > sqrt2) {\n\t\t\ta /= 2;\n\t\t\tscale++;\n\t\t}\n\t\twhile (a <= sqrtdot5) {\n\t\t\ta *= 2;\n\t\t\tscale--;\n\t\t}\n\t\tint256 s = (((int256)(a) - one) * one) / ((int256)(a) + one);\n\t\tvar z = (s*s) / one;\n\t\treturn scale * ln2 +\n\t\t\t(s*(c1 + (z*(c3 + (z*(c5 + (z*(c7 + (z*(c9 + (z*c11/one))\n\t\t\t\t/one))/one))/one))/one))/one);\n\t}\n\n\tint256 constant c2 =  0x02aaaaaaaaa015db0;\n\tint256 constant c4 = -0x000b60b60808399d1;\n\tint256 constant c6 =  0x0000455956bccdd06;\n\tint256 constant c8 = -0x000001b893ad04b3a;\n\t\n\t// The polynomial R = 2 + c2*x^2 + c4*x^4 + ...\n\t// approximates the function x*(exp(x)+1)/(exp(x)-1)\n\t// Hence exp(x) = (R(x)+x)/(R(x)-x)\n\tfunction fixedExp(int256 a) internal pure returns (uint256 exp) {\n\t\tint256 scale = (a + (ln2_64dot5)) / ln2 - 64;\n\t\ta -= scale*ln2;\n\t\tint256 z = (a*a) / one;\n\t\tint256 R = ((int256)(2) * one) +\n\t\t\t(z*(c2 + (z*(c4 + (z*(c6 + (z*c8/one))/one))/one))/one);\n\t\texp = (uint256) (((R + a) * one) / (R - a));\n\t\tif (scale >= 0)\n\t\t\texp <<= scale;\n\t\telse\n\t\t\texp >>= -scale;\n\t\treturn exp;\n\t}\n\t\n\t// The below are safemath implementations of the four arithmetic operators\n\t// designed to explicitly prevent over- and under-flows of integer values.\n\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\tuint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn c;\n\t}\n\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n\n\t// This allows you to buy tokens by sending Ether directly to the smart contract\n\t// without including any transaction data (useful for, say, mobile wallet apps).\n\tfunction () payable public {\n\t\t// msg.value is the amount of Ether sent by the transaction.\n\t\tif (msg.value > 0) {\n\t\t\tfund();\n\t\t} else {\n\t\t\twithdrawOld(msg.sender);\n\t\t}\n\t}\n}",
  "bytecode": "6060604052341561000f57600080fd5b610d1a8061001e6000396000f3006060604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461013257806318160ddd146101bc578063313ce567146101e157806339ffe67c1461020a5780633ccfd60b146102295780634b7503341461023c57806362dbf2611461024f57806365bcfbe71461026557806368306e431461028457806370a08231146102a35780638620410b146102c25780638b7afe2e146102d5578063957b2e56146102e857806395d89b41146102fb578063b1e352421461030e578063b60d428814610321578063b9f308f214610329578063bda5c4501461033f578063e555c1a314610358578063eedc966a1461036b575b60003411156101275761012261038a565b610130565b610130336103ba565b005b341561013d57600080fd5b61014561043d565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610181578082015183820152602001610169565b50505050905090810190601f1680156101ae5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101c757600080fd5b6101cf610474565b60405190815260200160405180910390f35b34156101ec57600080fd5b6101f461047a565b60405160ff909116815260200160405180910390f35b341561021557600080fd5b610130600160a060020a03600435166103ba565b341561023457600080fd5b61013061047f565b341561024757600080fd5b6101cf610501565b341561025a57600080fd5b6101cf60043561052c565b341561027057600080fd5b6101cf600160a060020a0360043516610574565b341561028f57600080fd5b6101cf600160a060020a0360043516610586565b34156102ae57600080fd5b6101cf600160a060020a03600435166105bb565b34156102cd57600080fd5b6101cf6105d6565b34156102e057600080fd5b6101cf6105ed565b34156102f357600080fd5b6101306105f3565b341561030657600080fd5b610145610790565b341561031957600080fd5b6101306107c7565b61013061038a565b341561033457600080fd5b6101cf6004356107d7565b341561034a57600080fd5b6101cf600435602435610838565b341561036357600080fd5b61013061086a565b341561037657600080fd5b6101cf600160a060020a0360043516610880565b64e8d4a510003411156103b3576103a360055434610892565b6005556103ae6108a1565b6103b8565b600080fd5b565b60006103c533610586565b600160a060020a03331660009081526001602052604090208054604060020a830290810190915560038054909101905560055490915061040590826109f3565b600555600160a060020a03821681156108fc0282604051600060405180830381858888f19350505050151561043957600080fd5b5050565b60408051908101604052600a81527f457468507972616d696400000000000000000000000000000000000000000000602082015281565b60025481565b601281565b600061048a33610586565b600160a060020a03331660009081526001602052604090208054604060020a83029081019091556003805490910190556005549091506104ca90826109f3565b600555600160a060020a03331681156108fc0282604051600060405180830381858888f1935050505015156104fe57600080fd5b50565b600080600061051666038d7ea4c680006107d7565b915061052382600a610a05565b90910392915050565b600061056e610566680296abf784a358468b19600260016105558761054f610a1c565b01610a41565b0281151561055f57fe5b0501610b26565b6002546109f3565b92915050565b60016020526000908152604090205481565b600160a060020a03166000908152600160209081526040808320549183905290912054600454604060020a9102919091030490565b600160a060020a031660009081526020819052604090205490565b60006105e866038d7ea4c6800061052c565b905090565b60055481565b60008060008060008060008060008060008061060e33610586565b600160a060020a03331660009081526001602052604090208054604060020a83029081019091556003805490910190559b508b9a5064e8d4a510008b108061065f575069d3c21bcecceda10000008b115b1561066957600080fd5b3399508b610675610a1c565b0398506106838b600a610a05565b9750878b039650610694878d610838565b9550604060020a88029450600060025411156107105760016002036002888860025401604060020a8a8c8f0102028115156106cb57fe5b048115156106d557fe5b04604060020a03028115156106e657fe5b049350838802925082850394506002548381151561070057fe5b6004805492909104918201905591505b61071c60025487610892565b600255600160a060020a038a166000908152602081905260409020546107429087610892565b600160a060020a03909a166000908152602081815260408083209c909c5560045460019091529a902080549a9096029490940398890190945550506003805490960190955550505050505050565b60408051908101604052600381527f4550590000000000000000000000000000000000000000000000000000000000602082015281565b6107cf61086a565b6103b861047f565b6000806107e2610a1c565b90506002548314156107f657809150610832565b61082f8161082a60016002680296abf784a358468b196108198960025403610a41565b030281151561082457fe5b05610b26565b6109f3565b91505b50919050565b6000610863610566680296abf784a358468b1960026001610555888861085c610a1c565b0301610a41565b9392505050565b6000610875336105bb565b90506104fe81610c0a565b60006020819052908152604090205481565b60008282018381101561086357fe5b600080600080600080600080600064e8d4a510003410806108cb575069d3c21bcecceda100000034115b156108d557600080fd5b3398506108e334600a610a05565b975087340396506108f38761052c565b9550604060020a88029450600060025411156109765760016002036002888860025401604060020a8a8c610925610a1c565b01020281151561093157fe5b0481151561093b57fe5b04604060020a030281151561094c57fe5b049350838802925082850394506002548381151561096657fe5b6004805492909104918201905591505b61098260025487610892565b600255600160a060020a0389166000908152602081905260409020546109a89087610892565b600160a060020a039099166000908152602081815260408083209b909b5560045460019091529990208054999096029490940397880190945550506003805490950190945550505050565b6000828211156109ff57fe5b50900390565b6000808284811515610a1357fe5b04949350505050565b60006105e8610a29610ce5565b600354600254600454604060020a92910203046109f3565b60008080805b68016a09e667f3bcc908851115610a6957600285049450600190920191610a47565b5b67b504f333f9de64848511610a8c576002949094029360001990920191610a6a565b604060020a8501604060020a80870302811515610aa557fe5b05915050604060020a818002819005906801ffffffffff9dac9b67666664e5e9fa0c996738bd75ed37753d68673284a0c14610924f85028490050184028390056749254026a7630acf01840283900501830282900567aaaaaaac168779080183028290050183020567b17217f7d1cf79ac8460030b02019350505050919050565b6000808080604067b17217f7d1cf79ac682cb53f09f05cc627c887010503925067b17217f7d1cf79ac830285039450604060020a858602811515610b6657fe5b059150604060020a672aaaaaaaaa015db0660455956bccdd06651b893ad04b3919850283900501840282900566b60b60808399d01901840282900501830205604060020a600202019050848103604060020a86830102811515610bc557fe5b05935060008312610be95782846000821215610bdd57fe5b9060020a029350610c02565b82600003846000821215610bf957fe5b9060020a900493505b505050919050565b600080600080600080610c1c876107d7565b9550610c2986600a610a05565b94508486039350610c3c600254886109f3565b600255600160a060020a033316600090815260208190526040902054610c6290886109f3565b600160a060020a0333166000908152602081815260408083209390935560045460019091529181208054928a02604060020a880201928390039055600380548390039055600254919450901115610cdc57604060020a8502915060025482811515610cc957fe5b049050610cd860045482610892565b6004555b50505050505050565b600554349003905600a165627a7a723058206c7d107dcbe6f00e6ccb3d36b76f1e1c60de2a3c015200fad50d432f2f7f92f30029"
}