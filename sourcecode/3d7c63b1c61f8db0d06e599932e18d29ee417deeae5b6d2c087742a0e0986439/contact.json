{
  "address": "0x0f00f1696218eaefa2d2330df3d6d1f94813b38f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SedoPoWToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-01\n*/\n\npragma solidity ^0.4.19;\n\n// ----------------------------------------------------------------------------\n\n// 'SEDO PoW Token' contract\n\n// Mineable ERC20 / ERC918 Token using Proof Of Work\n\n// Supported Merge Mining with 0xbitcoin and other compatible tokens\n\n// Based on technologies of 0xBitcoin (0xbitcoin.org)\n\n// Many thanks to the Mikers help (http://mike.rs) for pool help\n\n// ********************************************************\n\n// S.E.D.O. web site: http://sedocoin.org\n// S.E.D.O. pool address: http://pool.sedocoin.org\n\n// ********************************************************\n\n// Symbol      : SEDO\n\n// Name        : SEDO PoW Token\n\n// Total supply: 50,000,000.00\n// Premine     : 1,000,000\n\n// Decimals    : 8\n\n// Rewards     : 25 (initial)\n\n\n// ********************************************************\n\n// Safe maths\n\n// ----------------------------------------------------------------------------\n\nlibrary SafeMath {\n\n    function add(uint a, uint b) internal pure returns (uint c) {\n\n        c = a + b;\n\n        require(c >= a);\n\n    }\n\n    function sub(uint a, uint b) internal pure returns (uint c) {\n\n        require(b <= a);\n\n        c = a - b;\n\n    }\n\n    function mul(uint a, uint b) internal pure returns (uint c) {\n\n        c = a * b;\n\n        require(a == 0 || c / a == b);\n\n    }\n\n    function div(uint a, uint b) internal pure returns (uint c) {\n\n        require(b > 0);\n\n        c = a / b;\n\n    }\n\n}\n\n\n\nlibrary ExtendedMath {\n\n\n    //return the smaller of the two inputs (a or b)\n    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\n\n        if(a > b) return b;\n\n        return a;\n\n    }\n}\n\n// ----------------------------------------------------------------------------\n\n// ERC Token Standard #20 Interface\n\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n\n// ----------------------------------------------------------------------------\n\ncontract ERC20Interface {\n\n    function totalSupply() public constant returns (uint);\n\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n\n    function transfer(address to, uint tokens) public returns (bool success);\n\n    function approve(address spender, uint tokens) public returns (bool success);\n\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n\n}\n\n\n\n// ----------------------------------------------------------------------------\n\n// Contract function to receive approval and execute function in one call\n\n//\n\n// Borrowed from MiniMeToken\n\n// ----------------------------------------------------------------------------\n\ncontract ApproveAndCallFallBack {\n\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n\n}\n\n\n\n// ----------------------------------------------------------------------------\n\n// Owned contract\n\n// ----------------------------------------------------------------------------\n\ncontract Owned {\n\n    address public owner;\n\n    address public newOwner;\n\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n\n    function Owned() public {\n\n        owner = msg.sender;\n\n    }\n\n\n    modifier onlyOwner {\n\n        require(msg.sender == owner);\n\n        _;\n\n    }\n\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n\n        newOwner = _newOwner;\n\n    }\n\n    function acceptOwnership() public {\n\n        require(msg.sender == newOwner);\n\n        OwnershipTransferred(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0);\n\n    }\n\n}\n\n\n// ----------------------------------------------------------------------------\n\n// EIP-918 Interface\n\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-918.md\n\n// ----------------------------------------------------------------------------\n\n\ncontract ERC918Interface {\n  function totalSupply() public constant returns (uint);\n  function getMiningDifficulty() public constant returns (uint);\n  function getMiningTarget() public constant returns (uint);\n  function getMiningReward() public constant returns (uint);\n  function balanceOf(address tokenOwner) public constant returns (uint balance);\n\n  function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success);\n\n  event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n  address public lastRewardTo;\n  uint public lastRewardAmount;\n  uint public lastRewardEthBlockNumber;\n  bytes32 public challengeNumber;\n\n}\n\n\n// ----------------------------------------------------------------------------\n\n// ERC20 Token, with the addition of symbol, name and decimals and an\n\n// initial fixed supply\n\n// ----------------------------------------------------------------------------\n\n\ncontract SedoPoWToken is ERC20Interface, Owned {\n\n    using SafeMath for uint;\n    using ExtendedMath for uint;\n\n\n    string public symbol;\n\n    string public  name;\n\n    uint8 public decimals;\n\n    uint public _totalSupply;\n\n\n    uint public latestDifficultyPeriodStarted;\n\n    uint public epochCount;//number of 'blocks' mined\n\n    uint public _BLOCKS_PER_READJUSTMENT = 1024;\n\n    //a little number\n    uint public  _MINIMUM_TARGET = 2**16;\n\n    uint public  _MAXIMUM_TARGET = 2**234;\n\n    uint public miningTarget;\n\n    bytes32 public challengeNumber;   //generate a new one when a new reward is minted\n\n    uint public rewardEra;\n    uint public maxSupplyForEra;\n\n    address public lastRewardTo;\n    uint public lastRewardAmount;\n    uint public lastRewardEthBlockNumber;\n\n    bool locked = false;\n\n    mapping(bytes32 => bytes32) solutionForChallenge;\n\n    uint public tokensMinted; \n    address public parentAddress; //address of 0xbtc\n    uint public miningReward; //initial reward\n\n    mapping(address => uint) balances;\n    \n    mapping(address => uint) merge_mint_ious;\n    mapping(address => uint) merge_mint_payout_threshold;\n\n    mapping(address => mapping(address => uint)) allowed;\n\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n\n    // ------------------------------------------------------------------------\n\n    // Constructor\n\n    // ------------------------------------------------------------------------\n\n    function SedoPoWToken() public onlyOwner{\n\n        symbol = \"SEDO\";\n\n        name = \"SEDO PoW Token\";\n\n        decimals = 8; \n\n        _totalSupply = 50000000 * 10**uint(decimals);\n\n        if(locked) revert();\n        locked = true;\n\n        tokensMinted = 1000000 * 10**uint(decimals);\n        \n        miningReward = 25; //initial Mining reward for 1st half of totalSupply (50 000 000 / 2)\n \n        rewardEra = 0;\n        maxSupplyForEra = _totalSupply.div(2);\n\n        miningTarget = 2**220; //initial mining target\n\n        latestDifficultyPeriodStarted = block.number;\n\n        _startNewMiningEpoch();\n\n        parentAddress = 0x9D2Cc383E677292ed87f63586086CfF62a009010; //address of parent coin 0xBTC - need to be changed to actual in the mainnet !\n       //0xB6eD7644C69416d67B522e20bC294A9a9B405B31 - production\n\n        balances[owner] = balances[owner].add(tokensMinted);\n        Transfer(address(this), owner, tokensMinted); \n\n\n    }\n    \n    \n    // ------------------------------------------------------------------------\n\n    // Parent contract changing (it can be useful if parent will make a swap or in some other cases)\n\n    // ------------------------------------------------------------------------\n    \n\n    function ParentCoinAddress(address parent) public onlyOwner{\n        parentAddress = parent;\n    }\n\n\n    // ------------------------------------------------------------------------\n\n    // Main mint function\n\n    // ------------------------------------------------------------------------\n\n    function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\n\n\n            //the PoW must contain work that includes a recent ethereum block hash (challenge number) and the msg.sender's address to prevent MITM attacks\n            bytes32 digest =  keccak256(challengeNumber, msg.sender, nonce );\n\n            //the challenge digest must match the expected\n            if (digest != challenge_digest) revert();\n\n            //the digest must be smaller than the target\n            if(uint256(digest) > miningTarget) revert();\n\n\n            //only allow one reward for each challenge\n            bytes32 solution = solutionForChallenge[challengeNumber];\n            solutionForChallenge[challengeNumber] = digest;\n            if(solution != 0x0) revert();  //prevent the same answer from awarding twice\n\n\n            uint reward_amount = getMiningReward();\n\n            balances[msg.sender] = balances[msg.sender].add(reward_amount);\n\n            tokensMinted = tokensMinted.add(reward_amount);\n\n\n            //Cannot mint more tokens than there are\n            assert(tokensMinted <= maxSupplyForEra);\n\n            //set readonly diagnostics data\n            lastRewardTo = msg.sender;\n            lastRewardAmount = reward_amount;\n            lastRewardEthBlockNumber = block.number;\n            \n            _startNewMiningEpoch();\n\n            Mint(msg.sender, reward_amount, epochCount, challengeNumber );\n              \n            emit Transfer(address(this), msg.sender, reward_amount); //we need add it to show token transfers in the etherscan\n\n           return true;\n\n    }\n\n    \n    // ------------------------------------------------------------------------\n\n    // merge mint function\n\n    // ------------------------------------------------------------------------\n\n    function merge() public returns (bool success) {\n\n            // Function for the Merge mining (0xbitcoin as a parent coin)\n            // original idea by 0xbitcoin developers\n            // the idea is that the miner uses https://github.com/0xbitcoin/mint-helper/blob/master/contracts/MintHelper.sol \n            // to call mint() and then mergeMint() in the same transaction\n            // hard code a reference to the \"Parent\" ERC918 Contract ( in this case 0xBitcoin)\n            // Verify that the Parent contract was minted in this block, by the same person calling this contract\n            // then followthrough with the resulting mint logic\n            // don't call revert, but return true or false based on success\n            // this method shouldn't revert because it will be calleed in the same transaction as a \"Parent\" mint attempt\n            //ensure that mergeMint() can only be called once per Parent::mint()\n            //do this by ensuring that the \"new\" challenge number from Parent::challenge post mint can be called once\n            //and that this block time is the same as this mint, and the caller is msg.sender\n            //only allow one reward for each challenge\n            // do this by calculating what the new challenge will be in _startNewMiningEpoch, and verify that it is not that value\n            // this checks happen in the local contract, not in the parent\n\n            bytes32 future_challengeNumber = block.blockhash(block.number - 1);\n\n            if(challengeNumber == future_challengeNumber){\n                return false; // ( this is likely the second time that mergeMint() has been called in a transaction, so return false (don't revert))\n            }\n\n            if(ERC918Interface(parentAddress).lastRewardTo() != msg.sender){\n                return false; // a different address called mint last so return false ( don't revert)\n            }\n            \n\n            if(ERC918Interface(parentAddress).lastRewardEthBlockNumber() != block.number){\n                return false; // parent::mint() was called in a different block number so return false ( don't revert)\n            }\n\n            //we have verified that _startNewMiningEpoch has not been run more than once this block by verifying that\n            // the challenge is not the challenge that will be set by _startNewMiningEpoch\n            //we have verified that this is the same block as a call to Parent::mint() and that the sender\n            // is the sender that has called mint\n            \n            //SEDO will have the same challenge numbers as 0xBitcoin, this means that mining for one is literally the same process as mining for the other\n            // we want to make sure that one can't use a combination of merge and mint to get two blocks of SEDO for each valid nonce, since the same solution \n            //    applies to each coin\n            // for this reason, we update the solutionForChallenge hashmap with the value of parent::challengeNumber when a solution is merge minted.\n            // when a miner finds a valid solution, if they call this::mint(), without the next few lines of code they can then subsequently use the mint helper and in one transaction\n            //   call parent::mint() this::merge(). the following code will ensure that this::merge() does not give a block reward, because the challenge number will already be set in the \n            //   solutionForChallenge map\n            //only allow one reward for each challenge based on parent::challengeNumber\n            \n            bytes32 parentChallengeNumber = ERC918Interface(parentAddress).challengeNumber();\n            bytes32 solution = solutionForChallenge[parentChallengeNumber];\n            if(solution != 0x0) return false;  //prevent the same answer from awarding twice\n\n            //now that we've checked that the next challenge wasn't reused, apply the current SEDO challenge \n            //this will prevent the 'previous' challenge from being reused\n            \n            bytes32 digest = 'merge';\n            solutionForChallenge[challengeNumber] = digest;\n\n            //so now we may safely run the relevant logic to give an award to the sender, and update the contract\n\n            uint reward_amount = getMiningReward();\n\n            balances[msg.sender] = balances[msg.sender].add(reward_amount);\n\n            tokensMinted = tokensMinted.add(reward_amount);\n\n\n            //Cannot mint more tokens than there are\n            assert(tokensMinted <= maxSupplyForEra);\n\n            //set readonly diagnostics data\n            lastRewardTo = msg.sender;\n            lastRewardAmount = reward_amount;\n            lastRewardEthBlockNumber = block.number;\n\n\n            _startNewMiningEpoch();\n\n            Mint(msg.sender, reward_amount, epochCount, 0 ); // use 0 to indicate a merge mine\n\n            return true;\n\n    }\n\n\n    //a new 'block' to be mined\n    \n    function _startNewMiningEpoch() internal {\n\n      //if max supply for the era will be exceeded next reward round then enter the new era before that happens\n\n      //40 is the final reward era, almost all tokens minted\n      //once the final era is reached, more tokens will not be given out because the assert function\n      if( tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39)\n      {\n        rewardEra = rewardEra + 1;\n      }\n\n      //set the next minted supply at which the era will change\n      // total supply is 5000000000000000  because of 8 decimal places\n      maxSupplyForEra = _totalSupply - _totalSupply.div( 2**(rewardEra + 1));\n\n      epochCount = epochCount.add(1);\n\n      //every so often, readjust difficulty. Dont readjust when deploying\n      if(epochCount % _BLOCKS_PER_READJUSTMENT == 0)\n      {\n        _reAdjustDifficulty();\n      }\n\n\n      //make the latest ethereum block hash a part of the next challenge for PoW to prevent pre-mining future blocks\n      //do this last since this is a protection mechanism in the mint() function\n      challengeNumber = block.blockhash(block.number - 1);\n\n    }\n\n\n    //https://en.bitcoin.it/wiki/Difficulty#What_is_the_formula_for_difficulty.3F\n    //as of 2017 the bitcoin difficulty was up to 17 zeroes, it was only 8 in the early days\n\n    //readjust the target by 5 percent\n    \n    function _reAdjustDifficulty() internal {\n\n\n        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n\n        uint epochsMined = _BLOCKS_PER_READJUSTMENT; //256\n\n        uint targetEthBlocksPerDiffPeriod = epochsMined * 60; //should be 60 times slower than ethereum\n\n        //if there were less eth blocks passed in time than expected\n        if( ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod )\n        {\n            uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div( ethBlocksSinceLastDifficultyPeriod );\n\n            uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n            // If there were 5% more blocks mined than expected then this is 5.  If there were 100% more blocks mined than expected then this is 100.\n\n            //make it harder\n            miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));   //by up to 50 %\n        }else{\n            uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div( targetEthBlocksPerDiffPeriod );\n\n            uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000); //always between 0 and 1000\n\n            //make it easier\n            miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));   //by up to 50 %\n        }\n\n\n        latestDifficultyPeriodStarted = block.number;\n\n        if(miningTarget < _MINIMUM_TARGET) //very difficult\n        {\n          miningTarget = _MINIMUM_TARGET;\n        }\n\n        if(miningTarget > _MAXIMUM_TARGET) //very easy\n        {\n          miningTarget = _MAXIMUM_TARGET;\n        }\n    }\n\n\n    //this is a recent ethereum block hash, used to prevent pre-mining future blocks\n    function getChallengeNumber() public constant returns (bytes32) {\n        return challengeNumber;\n    }\n\n    //the number of zeroes the digest of the PoW solution requires.  Auto adjusts\n     function getMiningDifficulty() public constant returns (uint) {\n        return _MAXIMUM_TARGET.div(miningTarget);\n    }\n\n    function getMiningTarget() public constant returns (uint) {\n       return miningTarget;\n   }\n\n\n    //50m coins total\n    //reward begins at miningReward and is cut in half every reward era (as tokens are mined)\n    function getMiningReward() public constant returns (uint) {\n        //once we get half way thru the coins, only get 25 per block\n\n         //every reward era, the reward amount halves.\n\n         return (miningReward * 10**uint(decimals) ).div( 2**rewardEra ) ;\n\n    }\n\n    //help debug mining software\n    function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns (bytes32 digesttest) {\n\n        bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n\n        return digest;\n\n    }\n\n        //help debug mining software\n    function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\n\n          bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n\n          if(uint256(digest) > testTarget) revert();\n\n          return (digest == challenge_digest);\n\n    }\n\n\n    // ------------------------------------------------------------------------\n\n    // Total supply\n\n    // ------------------------------------------------------------------------\n\n    function totalSupply() public constant returns (uint) {\n\n        return _totalSupply  - balances[address(0)];\n\n    }\n\n\n    // ------------------------------------------------------------------------\n\n    // Get the token balance for account `tokenOwner`\n\n    // ------------------------------------------------------------------------\n\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n\n        return balances[tokenOwner];\n\n    }\n\n\n    // ------------------------------------------------------------------------\n\n    // Transfer the balance from token owner's account to `to` account\n\n    // - Owner's account must have sufficient balance to transfer\n\n    // - 0 value transfers are allowed\n\n    // ------------------------------------------------------------------------\n\n    function transfer(address to, uint tokens) public returns (bool success) {\n\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n\n        balances[to] = balances[to].add(tokens);\n\n        Transfer(msg.sender, to, tokens);\n\n        return true;\n\n    }\n\n\n    // ------------------------------------------------------------------------\n\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n\n    // from the token owner's account\n\n    //\n\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n\n    // recommends that there are no checks for the approval double-spend attack\n\n    // as this should be implemented in user interfaces\n\n    // ------------------------------------------------------------------------\n\n    function approve(address spender, uint tokens) public returns (bool success) {\n\n        allowed[msg.sender][spender] = tokens;\n\n        Approval(msg.sender, spender, tokens);\n\n        return true;\n\n    }\n\n\n    // ------------------------------------------------------------------------\n\n    // Transfer `tokens` from the `from` account to the `to` account\n\n    //\n\n    // The calling account must already have sufficient tokens approve(...)-d\n\n    // for spending from the `from` account and\n\n    // - From account must have sufficient balance to transfer\n\n    // - Spender must have sufficient allowance to transfer\n\n    // - 0 value transfers are allowed\n\n    // ------------------------------------------------------------------------\n\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n\n        balances[from] = balances[from].sub(tokens);\n\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n\n        balances[to] = balances[to].add(tokens);\n\n        Transfer(from, to, tokens);\n\n        return true;\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Returns the amount of tokens approved by the owner that can be\n\n    // transferred to the spender's account\n\n    // ------------------------------------------------------------------------\n\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n\n        return allowed[tokenOwner][spender];\n\n    }\n\n\n    // ------------------------------------------------------------------------\n\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n\n    // from the token owner's account. The `spender` contract function\n\n    // `receiveApproval(...)` is then executed\n\n    // ------------------------------------------------------------------------\n\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n\n        allowed[msg.sender][spender] = tokens;\n\n        Approval(msg.sender, spender, tokens);\n\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n\n        return true;\n\n    }\n\n    // ------------------------------------------------------------------------\n\n    // Don't accept ETH\n\n    // ------------------------------------------------------------------------\n\n    function () public payable {\n\n        revert();\n\n    }\n\n\n    // ------------------------------------------------------------------------\n\n    // Owner can transfer out any accidentally sent ERC20 tokens\n\n    // ------------------------------------------------------------------------\n\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n\n    }\n\n}",
  "bytecode": "6080604052610400600855620100006009557d040000000000000000000000000000000000000000000000000000000000600a556012805460ff191690553480156200004a57600080fd5b5060008054600160a060020a0319163390811791829055600160a060020a0391909116146200007857600080fd5b6040805180820190915260048082527f5345444f000000000000000000000000000000000000000000000000000000006020909201918252620000be91600291620005cd565b5060408051808201909152600e8082527f5345444f20506f5720546f6b656e00000000000000000000000000000000000060209092019182526200010591600391620005cd565b506004805460ff1916600817908190556302faf08060ff918216600a0a0260055560125416156200013557600080fd5b60128054600160ff1990911617905560045460ff16600a0a620f42400260145560196016556000600d556005546200017d906002640100000000620002738102620014731704565b600e557b10000000000000000000000000000000000000000000000000000000600b5543600655620001b764010000000062000296810204565b60158054600160a060020a031916739d2cc383e677292ed87f63586086cff62a00901017905560145460008054600160a060020a03168152601760205260409020546200021291640100000000620013c66200036b82021704565b60008054600160a060020a0390811682526017602090815260408084209490945591546014548451908152935191169230927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a36200066f565b60008082116200028257600080fd5b81838115156200028e57fe5b049392505050565b600e54620002c8620002b064010000000062000382810204565b60145490640100000000620013c66200036b82021704565b118015620002d857506027600d54105b15620002e857600d805460010190555b600d546005546200030d9160010160020a640100000000620014736200027382021704565b60055403600e5560075462000332906001640100000000620013c66200036b82021704565b6007819055600854908115156200034557fe5b061515620003605762000360640100000000620003ba810204565b600019430140600c55565b818101828110156200037c57600080fd5b92915050565b600d54600454601654600092620003b49260ff16600a0a9091029060020a640100000000620002738102620014731704565b90505b90565b600654600854439190910390603c8102600080808084871015620004ae576200040d87620003f8876064640100000000620015e36200057582021704565b90640100000000620014736200027382021704565b9350620004466103e862000431866064640100000000620014946200059d82021704565b9064010000000062001608620005b382021704565b9250620004a56200048d84620004786107d0600b54620002736401000000000262001473179091906401000000009004565b90640100000000620015e36200057582021704565b600b5490640100000000620014946200059d82021704565b600b5562000540565b620004ce85620003f8896064640100000000620015e36200057582021704565b9150620004f26103e862000431846064640100000000620014946200059d82021704565b90506200053c6200052482620004786107d0600b54620002736401000000000262001473179091906401000000009004565b600b5490640100000000620013c66200036b82021704565b600b555b43600655600954600b5410156200055857600954600b555b600a54600b5411156200056c57600a54600b555b50505050505050565b8181028215806200059157508183828115156200058e57fe5b04145b15156200037c57600080fd5b600082821115620005ad57600080fd5b50900390565b600081831115620005c65750806200037c565b5090919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200061057805160ff191683800117855562000640565b8280016001018555821562000640579182015b828111156200064057825182559160200191906001019062000623565b506200064e92915062000652565b5090565b620003b791905b808211156200064e576000815560010162000659565b61164c806200067f6000396000f3006080604052600436106101ec5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662821de381146101f157806306fdde0314610222578063095ea7b3146102ac5780630b65108b146102e4578063163aa00d146102f957806317da485f146103205780631801fbe51461033557806318160ddd1461035057806323b872dd146103655780632d38bf7a1461038f578063313ce567146103a457806332e99708146103cf5780633eaaf86b146103e4578063490203a7146103f95780634ac2d1031461040e5780634e1a1853146104235780634ef37628146104465780634fa972e11461045b5780636de9f32b146104705780636fd396d61461048557806370a082311461049a57806379ba5097146104bb57806381269a56146104d0578063829965cc146104f157806387a2a9d6146105065780638a769d351461051b5780638ae0368b146105305780638da5cb5b1461054557806395d89b411461055a57806397566aa01461056f578063a9059cbb1461058d578063b5ade81b146105b1578063bafedcaa146105c6578063cae9ca51146105db578063cb9ae70714610644578063d4ee1d9014610659578063dc39d06d1461066e578063dc6e9cf914610692578063dd62ed3e146106a7578063f2fde38b146106ce575b600080fd5b3480156101fd57600080fd5b506102066106ef565b60408051600160a060020a039092168252519081900360200190f35b34801561022e57600080fd5b506102376106fe565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610271578181015183820152602001610259565b50505050905090810190601f16801561029e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102b857600080fd5b506102d0600160a060020a036004351660243561078c565b604080519115158252519081900360200190f35b3480156102f057600080fd5b506102d06107f3565b34801561030557600080fd5b5061030e610b27565b60408051918252519081900360200190f35b34801561032c57600080fd5b5061030e610b2d565b34801561034157600080fd5b506102d0600435602435610b4b565b34801561035c57600080fd5b5061030e610cda565b34801561037157600080fd5b506102d0600160a060020a0360043581169060243516604435610d0c565b34801561039b57600080fd5b5061030e610e17565b3480156103b057600080fd5b506103b9610e1d565b6040805160ff9092168252519081900360200190f35b3480156103db57600080fd5b5061030e610e26565b3480156103f057600080fd5b5061030e610e2c565b34801561040557600080fd5b5061030e610e32565b34801561041a57600080fd5b5061030e610e54565b34801561042f57600080fd5b50610444600160a060020a0360043516610e5a565b005b34801561045257600080fd5b5061030e610ea0565b34801561046757600080fd5b5061030e610ea6565b34801561047c57600080fd5b5061030e610eac565b34801561049157600080fd5b50610206610eb2565b3480156104a657600080fd5b5061030e600160a060020a0360043516610ec1565b3480156104c757600080fd5b50610444610edc565b3480156104dc57600080fd5b506102d0600435602435604435606435610f64565b3480156104fd57600080fd5b5061030e610fae565b34801561051257600080fd5b5061030e610fb4565b34801561052757600080fd5b5061030e610fba565b34801561053c57600080fd5b5061030e610fc0565b34801561055157600080fd5b50610206610fc6565b34801561056657600080fd5b50610237610fd5565b34801561057b57600080fd5b5061030e60043560243560443561102d565b34801561059957600080fd5b506102d0600160a060020a0360043516602435611062565b3480156105bd57600080fd5b5061030e611112565b3480156105d257600080fd5b5061030e611118565b3480156105e757600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526102d0948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061111e9650505050505050565b34801561065057600080fd5b5061030e61127f565b34801561066557600080fd5b50610206611285565b34801561067a57600080fd5b506102d0600160a060020a0360043516602435611294565b34801561069e57600080fd5b5061030e61134f565b3480156106b357600080fd5b5061030e600160a060020a0360043581169060243516611355565b3480156106da57600080fd5b50610444600160a060020a0360043516611380565b601554600160a060020a031681565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107845780601f1061075957610100808354040283529160200191610784565b820191906000526020600020905b81548152906001019060200180831161076757829003601f168201915b505050505081565b336000818152601a60209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b600c546000906000194301409082908190819081908514156108185760009550610b1f565b601554604080517f6fd396d600000000000000000000000000000000000000000000000000000000815290513392600160a060020a031691636fd396d69160048083019260209291908290030181600087803b15801561087757600080fd5b505af115801561088b573d6000803e3d6000fd5b505050506040513d60208110156108a157600080fd5b5051600160a060020a0316146108ba5760009550610b1f565b601554604080517f163aa00d00000000000000000000000000000000000000000000000000000000815290514392600160a060020a03169163163aa00d9160048083019260209291908290030181600087803b15801561091957600080fd5b505af115801561092d573d6000803e3d6000fd5b505050506040513d602081101561094357600080fd5b5051146109535760009550610b1f565b601560009054906101000a9004600160a060020a0316600160a060020a0316638ae0368b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156109bf57600080fd5b505af11580156109d3573d6000803e3d6000fd5b505050506040513d60208110156109e957600080fd5b505160008181526013602052604090205490945092508215610a0e5760009550610b1f565b600c5460009081526013602052604090207f6d65726765000000000000000000000000000000000000000000000000000000908190559150610a4e610e32565b33600090815260176020526040902054909150610a71908263ffffffff6113c616565b33600090815260176020526040902055601454610a94908263ffffffff6113c616565b6014819055600e541015610aa457fe5b600f805473ffffffffffffffffffffffffffffffffffffffff191633179055601081905543601155610ad46113d6565b6007546040805183815260208101929092526000828201525133917fcf6fbb9dcea7d07263ab4f5c3a92f53af33dffc421d9d121e1c74b307e68189d919081900360600190a2600195505b505050505090565b60115481565b6000610b46600b54600a5461147390919063ffffffff16565b905090565b600c54604080519182526c010000000000000000000000003302602083015260348201849052519081900360540190206000908180848314610b8c57600080fd5b600b54831115610b9b57600080fd5b600c54600090815260136020526040902080549084905591508115610bbf57600080fd5b610bc7610e32565b33600090815260176020526040902054909150610bea908263ffffffff6113c616565b33600090815260176020526040902055601454610c0d908263ffffffff6113c616565b6014819055600e541015610c1d57fe5b600f805473ffffffffffffffffffffffffffffffffffffffff191633179055601081905543601155610c4d6113d6565b600754600c54604080518481526020810193909352828101919091525133917fcf6fbb9dcea7d07263ab4f5c3a92f53af33dffc421d9d121e1c74b307e68189d919081900360600190a2604080518281529051339130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600195945050505050565b6000805260176020527fd840e16649f6b9a295d95876f4633d3a6b10b55e8162971cf78afd886d5ec89b546005540390565b600160a060020a038316600090815260176020526040812054610d35908363ffffffff61149416565b600160a060020a038516600090815260176020908152604080832093909355601a815282822033835290522054610d72908363ffffffff61149416565b600160a060020a038086166000908152601a60209081526040808320338452825280832094909455918616815260179091522054610db6908363ffffffff6113c616565b600160a060020a0380851660008181526017602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b600d5481565b60045460ff1681565b600b5490565b60055481565b600d54600454601654600092610b469260ff16600a0a9091029060020a611473565b60165481565b600054600160a060020a03163314610e7157600080fd5b6015805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600c5490565b600e5481565b60145481565b600f54600160a060020a031681565b600160a060020a031660009081526017602052604090205490565b600154600160a060020a03163314610ef357600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b604080518381526c010000000000000000000000003302602082015260348101869052905190819003605401902060009082811115610fa257600080fd5b93909314949350505050565b60075481565b600a5481565b600b5481565b600c5481565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156107845780601f1061075957610100808354040283529160200191610784565b604080518281526c01000000000000000000000000330260208201526034810185905290519081900360540190209392505050565b33600090815260176020526040812054611082908363ffffffff61149416565b3360009081526017602052604080822092909255600160a060020a038516815220546110b4908363ffffffff6113c616565b600160a060020a0384166000818152601760209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b60085481565b60105481565b336000818152601a60209081526040808320600160a060020a038816808552908352818420879055815187815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a36040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018690523060448401819052608060648501908152865160848601528651600160a060020a038a1695638f4ffcb195948a94938a939192909160a490910190602085019080838360005b8381101561120e5781810151838201526020016111f6565b50505050905090810190601f16801561123b5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561125d57600080fd5b505af1158015611271573d6000803e3d6000fd5b506001979650505050505050565b60065481565b600154600160a060020a031681565b60008054600160a060020a031633146112ac57600080fd5b60008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810186905290519186169263a9059cbb926044808401936020939083900390910190829087803b15801561131c57600080fd5b505af1158015611330573d6000803e3d6000fd5b505050506040513d602081101561134657600080fd5b50519392505050565b60095481565b600160a060020a039182166000908152601a6020908152604080832093909416825291909152205490565b600054600160a060020a0316331461139757600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b818101828110156107ed57600080fd5b600e546113f36113e4610e32565b6014549063ffffffff6113c616565b11801561140257506027600d54105b1561141157600d805460010190555b600d5460055461142c9160010160020a63ffffffff61147316565b60055403600e5560075461144790600163ffffffff6113c616565b60078190556008549081151561145957fe5b061515611468576114686114a9565b600019430140600c55565b600080821161148157600080fd5b818381151561148c57fe5b049392505050565b6000828211156114a357600080fd5b50900390565b600654600854439190910390603c810260008080808487101561154f576114e7876114db87606463ffffffff6115e316565b9063ffffffff61147316565b935061150c6103e861150086606463ffffffff61149416565b9063ffffffff61160816565b92506115476115388461152c6107d0600b5461147390919063ffffffff16565b9063ffffffff6115e316565b600b549063ffffffff61149416565b600b556115b0565b611564856114db89606463ffffffff6115e316565b915061157d6103e861150084606463ffffffff61149416565b90506115ac61159d8261152c6107d0600b5461147390919063ffffffff16565b600b549063ffffffff6113c616565b600b555b43600655600954600b5410156115c757600954600b555b600a54600b5411156115da57600a54600b555b50505050505050565b8181028215806115fd57508183828115156115fa57fe5b04145b15156107ed57600080fd5b6000818311156116195750806107ed565b50909190505600a165627a7a72305820c4774b9768b3b751f21d10c61fa3e0c71800beaa69e1672013c69d5ace49c9fb0029"
}