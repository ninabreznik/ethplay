{
  "address": "0x4e49887fa338e0b1a213bda732bb4bbb79a129f0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NokuCustomCrowdsaleServiceKYC",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-28\n*/\n\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\n\npragma solidity ^0.4.23;\n\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   *  as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(addr) }\n    return size > 0;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.4.23;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\npragma solidity ^0.4.23;\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: contracts/NokuPricingPlan.sol\n\npragma solidity ^0.4.23;\n\n/**\n* @dev The NokuPricingPlan contract defines the responsibilities of a Noku pricing plan.\n*/\ncontract NokuPricingPlan {\n    /**\n    * @dev Pay the fee for the service identified by the specified name.\n    * The fee amount shall already be approved by the client.\n    * @param serviceName The name of the target service.\n    * @param multiplier The multiplier of the base service fee to apply.\n    * @param client The client of the target service.\n    * @return true if fee has been paid.\n    */\n    function payFee(bytes32 serviceName, uint256 multiplier, address client) public returns(bool paid);\n\n    /**\n    * @dev Get the usage fee for the service identified by the specified name.\n    * The returned fee amount shall be approved before using #payFee method.\n    * @param serviceName The name of the target service.\n    * @param multiplier The multiplier of the base service fee to apply.\n    * @return The amount to approve before really paying such fee.\n    */\n    function usageFee(bytes32 serviceName, uint256 multiplier) public view returns(uint fee);\n}\n\n// File: contracts/NokuCustomService.sol\n\npragma solidity ^0.4.23;\n\n\n\n\ncontract NokuCustomService is Pausable {\n    using AddressUtils for address;\n\n    event LogPricingPlanChanged(address indexed caller, address indexed pricingPlan);\n\n    // The pricing plan determining the fee to be paid in NOKU tokens by customers\n    NokuPricingPlan public pricingPlan;\n\n    constructor(address _pricingPlan) internal {\n        require(_pricingPlan.isContract(), \"_pricingPlan is not contract\");\n\n        pricingPlan = NokuPricingPlan(_pricingPlan);\n    }\n\n    function setPricingPlan(address _pricingPlan) public onlyOwner {\n        require(_pricingPlan.isContract(), \"_pricingPlan is not contract\");\n        require(NokuPricingPlan(_pricingPlan) != pricingPlan, \"_pricingPlan equal to current\");\n        \n        pricingPlan = NokuPricingPlan(_pricingPlan);\n\n        emit LogPricingPlanChanged(msg.sender, _pricingPlan);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.4.23;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\npragma solidity ^0.4.23;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\npragma solidity ^0.4.23;\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.4.23;\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\npragma solidity ^0.4.23;\n\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n\npragma solidity ^0.4.23;\n\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    hasMintPermission\n    canMint\n    public\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: contracts/KYCBase.sol\n\npragma solidity ^0.4.23;\n\n\n// Abstract base contract\ncontract KYCBase {\n    using SafeMath for uint256;\n\n    mapping (address => bool) public isKycSigner;\n    mapping (uint64 => uint256) public alreadyPayed;\n\n    event KycVerified(address indexed signer, address buyerAddress, uint64 buyerId, uint maxAmount);\n\n    constructor(address[] kycSigners) internal {\n        for (uint i = 0; i < kycSigners.length; i++) {\n            isKycSigner[kycSigners[i]] = true;\n        }\n    }\n\n    // Must be implemented in descending contract to assign tokens to the buyers. Called after the KYC verification is passed\n    function releaseTokensTo(address buyer) internal returns(bool);\n\n    // This method can be overridden to enable some sender to buy token for a different address\n    function senderAllowedFor(address buyer)\n        internal view returns(bool)\n    {\n        return buyer == msg.sender;\n    }\n\n    function buyTokensFor(address buyerAddress, uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n        public payable returns (bool)\n    {\n        require(senderAllowedFor(buyerAddress));\n        return buyImplementation(buyerAddress, buyerId, maxAmount, v, r, s);\n    }\n\n    function buyTokens(uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n        public payable returns (bool)\n    {\n        return buyImplementation(msg.sender, buyerId, maxAmount, v, r, s);\n    }\n\n    function buyImplementation(address buyerAddress, uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n        private returns (bool)\n    {\n        // check the signature\n        bytes32 hash = sha256(abi.encodePacked(\"Eidoo icoengine authorization\", this, buyerAddress, buyerId, maxAmount));\n        address signer = ecrecover(hash, v, r, s);\n        if (!isKycSigner[signer]) {\n            revert();\n        } else {\n            uint256 totalPayed = alreadyPayed[buyerId].add(msg.value);\n            require(totalPayed <= maxAmount);\n            alreadyPayed[buyerId] = totalPayed;\n            emit KycVerified(signer, buyerAddress, buyerId, maxAmount);\n            return releaseTokensTo(buyerAddress);\n        }\n    }\n\n    // No payable fallback function, the tokens must be buyed using the functions buyTokens and buyTokensFor\n    function () public {\n        revert();\n    }\n}\n\n// File: contracts/WhitelistableConstraints.sol\n\npragma solidity ^0.4.23;\n\n/**\n * @title WhitelistableConstraints\n * @dev Contract encapsulating the constraints applicable to a Whitelistable contract.\n */\ncontract WhitelistableConstraints {\n\n    /**\n     * @dev Check if whitelist with specified parameters is allowed.\n     * @param _maxWhitelistLength The maximum length of whitelist. Zero means no whitelist.\n     * @param _weiWhitelistThresholdBalance The threshold balance triggering whitelist check.\n     * @return true if whitelist with specified parameters is allowed, false otherwise\n     */\n    function isAllowedWhitelist(uint256 _maxWhitelistLength, uint256 _weiWhitelistThresholdBalance)\n        public pure returns(bool isReallyAllowedWhitelist) {\n        return _maxWhitelistLength > 0 || _weiWhitelistThresholdBalance > 0;\n    }\n}\n\n// File: contracts/Whitelistable.sol\n\npragma solidity ^0.4.23;\n\n\n/**\n * @title Whitelistable\n * @dev Base contract implementing a whitelist to keep track of investors.\n * The construction parameters allow for both whitelisted and non-whitelisted contracts:\n * 1) maxWhitelistLength = 0 and whitelistThresholdBalance > 0: whitelist disabled\n * 2) maxWhitelistLength > 0 and whitelistThresholdBalance = 0: whitelist enabled, full whitelisting\n * 3) maxWhitelistLength > 0 and whitelistThresholdBalance > 0: whitelist enabled, partial whitelisting\n */\ncontract Whitelistable is WhitelistableConstraints {\n\n    event LogMaxWhitelistLengthChanged(address indexed caller, uint256 indexed maxWhitelistLength);\n    event LogWhitelistThresholdBalanceChanged(address indexed caller, uint256 indexed whitelistThresholdBalance);\n    event LogWhitelistAddressAdded(address indexed caller, address indexed subscriber);\n    event LogWhitelistAddressRemoved(address indexed caller, address indexed subscriber);\n\n    mapping (address => bool) public whitelist;\n\n    uint256 public whitelistLength;\n\n    uint256 public maxWhitelistLength;\n\n    uint256 public whitelistThresholdBalance;\n\n    constructor(uint256 _maxWhitelistLength, uint256 _whitelistThresholdBalance) internal {\n        require(isAllowedWhitelist(_maxWhitelistLength, _whitelistThresholdBalance), \"parameters not allowed\");\n\n        maxWhitelistLength = _maxWhitelistLength;\n        whitelistThresholdBalance = _whitelistThresholdBalance;\n    }\n\n    /**\n     * @return true if whitelist is currently enabled, false otherwise\n     */\n    function isWhitelistEnabled() public view returns(bool isReallyWhitelistEnabled) {\n        return maxWhitelistLength > 0;\n    }\n\n    /**\n     * @return true if subscriber is whitelisted, false otherwise\n     */\n    function isWhitelisted(address _subscriber) public view returns(bool isReallyWhitelisted) {\n        return whitelist[_subscriber];\n    }\n\n    function setMaxWhitelistLengthInternal(uint256 _maxWhitelistLength) internal {\n        require(isAllowedWhitelist(_maxWhitelistLength, whitelistThresholdBalance),\n            \"_maxWhitelistLength not allowed\");\n        require(_maxWhitelistLength != maxWhitelistLength, \"_maxWhitelistLength equal to current one\");\n\n        maxWhitelistLength = _maxWhitelistLength;\n\n        emit LogMaxWhitelistLengthChanged(msg.sender, maxWhitelistLength);\n    }\n\n    function setWhitelistThresholdBalanceInternal(uint256 _whitelistThresholdBalance) internal {\n        require(isAllowedWhitelist(maxWhitelistLength, _whitelistThresholdBalance),\n            \"_whitelistThresholdBalance not allowed\");\n        require(whitelistLength == 0 || _whitelistThresholdBalance > whitelistThresholdBalance,\n            \"_whitelistThresholdBalance not greater than current one\");\n\n        whitelistThresholdBalance = _whitelistThresholdBalance;\n\n        emit LogWhitelistThresholdBalanceChanged(msg.sender, _whitelistThresholdBalance);\n    }\n\n    function addToWhitelistInternal(address _subscriber) internal {\n        require(_subscriber != address(0), \"_subscriber is zero\");\n        require(!whitelist[_subscriber], \"already whitelisted\");\n        require(whitelistLength < maxWhitelistLength, \"max whitelist length reached\");\n\n        whitelistLength++;\n\n        whitelist[_subscriber] = true;\n\n        emit LogWhitelistAddressAdded(msg.sender, _subscriber);\n    }\n\n    function removeFromWhitelistInternal(address _subscriber, uint256 _balance) internal {\n        require(_subscriber != address(0), \"_subscriber is zero\");\n        require(whitelist[_subscriber], \"not whitelisted\");\n        require(_balance <= whitelistThresholdBalance, \"_balance greater than whitelist threshold\");\n\n        assert(whitelistLength > 0);\n\n        whitelistLength--;\n\n        whitelist[_subscriber] = false;\n\n        emit LogWhitelistAddressRemoved(msg.sender, _subscriber);\n    }\n\n    /**\n     * @param _subscriber The subscriber for which the balance check is required.\n     * @param _balance The balance value to check for allowance.\n     * @return true if the balance is allowed for the subscriber, false otherwise\n     */\n    function isAllowedBalance(address _subscriber, uint256 _balance) public view returns(bool isReallyAllowed) {\n        return !isWhitelistEnabled() || _balance <= whitelistThresholdBalance || whitelist[_subscriber];\n    }\n}\n\n// File: contracts/CrowdsaleKYC.sol\n\npragma solidity ^0.4.23;\n\n\n\n\n\n\n\n/**\n * @title CrowdsaleKYC \n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end block, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet \n * as they arrive.\n */\ncontract CrowdsaleKYC is Pausable, Whitelistable, KYCBase {\n    using AddressUtils for address;\n    using SafeMath for uint256;\n\n    event LogStartBlockChanged(uint256 indexed startBlock);\n    event LogEndBlockChanged(uint256 indexed endBlock);\n    event LogMinDepositChanged(uint256 indexed minDeposit);\n    event LogTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 indexed amount, uint256 tokenAmount);\n\n    // The token being sold\n    MintableToken public token;\n\n    // The start and end block where investments are allowed (both inclusive)\n    uint256 public startBlock;\n    uint256 public endBlock;\n\n    // How many token units a buyer gets per wei\n    uint256 public rate;\n\n    // Amount of raised money in wei\n    uint256 public raisedFunds;\n\n    // Amount of tokens already sold\n    uint256 public soldTokens;\n\n    // Balances in wei deposited by each subscriber\n    mapping (address => uint256) public balanceOf;\n\n    // The minimum balance for each subscriber in wei\n    uint256 public minDeposit;\n\n    modifier beforeStart() {\n        require(block.number < startBlock, \"already started\");\n        _;\n    }\n\n    modifier beforeEnd() {\n        require(block.number <= endBlock, \"already ended\");\n        _;\n    }\n\n    constructor(\n        uint256 _startBlock,\n        uint256 _endBlock,\n        uint256 _rate,\n        uint256 _minDeposit,\n        uint256 maxWhitelistLength,\n        uint256 whitelistThreshold,\n        address[] kycSigner\n    )\n    Whitelistable(maxWhitelistLength, whitelistThreshold)\n    KYCBase(kycSigner) internal\n    {\n        require(_startBlock >= block.number, \"_startBlock is lower than current block.number\");\n        require(_endBlock >= _startBlock, \"_endBlock is lower than _startBlock\");\n        require(_rate > 0, \"_rate is zero\");\n        require(_minDeposit > 0, \"_minDeposit is zero\");\n\n        startBlock = _startBlock;\n        endBlock = _endBlock;\n        rate = _rate;\n        minDeposit = _minDeposit;\n    }\n\n    /*\n    * @return true if crowdsale event has started\n    */\n    function hasStarted() public view returns (bool started) {\n        return block.number >= startBlock;\n    }\n\n    /*\n    * @return true if crowdsale event has ended\n    */\n    function hasEnded() public view returns (bool ended) {\n        return block.number > endBlock;\n    }\n\n    /**\n     * Change the crowdsale start block number.\n     * @param _startBlock The new start block\n     */\n    function setStartBlock(uint256 _startBlock) external onlyOwner beforeStart {\n        require(_startBlock >= block.number, \"_startBlock < current block\");\n        require(_startBlock <= endBlock, \"_startBlock > endBlock\");\n        require(_startBlock != startBlock, \"_startBlock == startBlock\");\n\n        startBlock = _startBlock;\n\n        emit LogStartBlockChanged(_startBlock);\n    }\n\n    /**\n     * Change the crowdsale end block number.\n     * @param _endBlock The new end block\n     */\n    function setEndBlock(uint256 _endBlock) external onlyOwner beforeEnd {\n        require(_endBlock >= block.number, \"_endBlock < current block\");\n        require(_endBlock >= startBlock, \"_endBlock < startBlock\");\n        require(_endBlock != endBlock, \"_endBlock == endBlock\");\n\n        endBlock = _endBlock;\n\n        emit LogEndBlockChanged(_endBlock);\n    }\n\n    /**\n     * Change the minimum deposit for each subscriber. New value shall be lower than previous.\n     * @param _minDeposit The minimum deposit for each subscriber, expressed in wei\n     */\n    function setMinDeposit(uint256 _minDeposit) external onlyOwner beforeEnd {\n        require(0 < _minDeposit && _minDeposit < minDeposit, \"_minDeposit is not in [0, minDeposit]\");\n\n        minDeposit = _minDeposit;\n\n        emit LogMinDepositChanged(minDeposit);\n    }\n\n    /**\n     * Change the maximum whitelist length. New value shall satisfy the #isAllowedWhitelist conditions.\n     * @param maxWhitelistLength The maximum whitelist length\n     */\n    function setMaxWhitelistLength(uint256 maxWhitelistLength) external onlyOwner beforeEnd {\n        setMaxWhitelistLengthInternal(maxWhitelistLength);\n    }\n\n    /**\n     * Change the whitelist threshold balance. New value shall satisfy the #isAllowedWhitelist conditions.\n     * @param whitelistThreshold The threshold balance (in wei) above which whitelisting is required to invest\n     */\n    function setWhitelistThresholdBalance(uint256 whitelistThreshold) external onlyOwner beforeEnd {\n        setWhitelistThresholdBalanceInternal(whitelistThreshold);\n    }\n\n    /**\n     * Add the subscriber to the whitelist.\n     * @param subscriber The subscriber to add to the whitelist.\n     */\n    function addToWhitelist(address subscriber) external onlyOwner beforeEnd {\n        addToWhitelistInternal(subscriber);\n    }\n\n    /**\n     * Removed the subscriber from the whitelist.\n     * @param subscriber The subscriber to remove from the whitelist.\n     */\n    function removeFromWhitelist(address subscriber) external onlyOwner beforeEnd {\n        removeFromWhitelistInternal(subscriber, balanceOf[subscriber]);\n    }\n\n    // // fallback function can be used to buy tokens\n    // function () external payable whenNotPaused {\n    //     buyTokens(msg.sender);\n    // }\n\n    // No payable fallback function, the tokens must be buyed using the functions buyTokens and buyTokensFor\n    function () public {\n        revert(\"No payable fallback function\");\n    }\n\n    // low level token purchase function\n    // function buyTokens(address beneficiary) public payable whenNotPaused {\n    function releaseTokensTo(address beneficiary) internal whenNotPaused returns(bool) {\n        require(beneficiary != address(0), \"beneficiary is zero\");\n        require(isValidPurchase(beneficiary), \"invalid purchase by beneficiary\");\n\n        balanceOf[beneficiary] = balanceOf[beneficiary].add(msg.value);\n\n        raisedFunds = raisedFunds.add(msg.value);\n\n        uint256 tokenAmount = calculateTokens(msg.value);\n\n        soldTokens = soldTokens.add(tokenAmount);\n\n        distributeTokens(beneficiary, tokenAmount);\n\n        emit LogTokenPurchase(msg.sender, beneficiary, msg.value, tokenAmount);\n\n        forwardFunds(msg.value);\n\n        return true;\n    }\n\n    /**\n     * @dev Overrides Whitelistable#isAllowedBalance to add minimum deposit logic.\n     */\n    function isAllowedBalance(address beneficiary, uint256 balance) public view returns (bool isReallyAllowed) {\n        bool hasMinimumBalance = balance >= minDeposit;\n        return hasMinimumBalance && super.isAllowedBalance(beneficiary, balance);\n    }\n\n    /**\n     * @dev Determine if the token purchase is valid or not.\n     * @return true if the transaction can buy tokens\n     */\n    function isValidPurchase(address beneficiary) internal view returns (bool isValid) {\n        bool withinPeriod = startBlock <= block.number && block.number <= endBlock;\n        bool nonZeroPurchase = msg.value != 0;\n        bool isValidBalance = isAllowedBalance(beneficiary, balanceOf[beneficiary].add(msg.value));\n\n        return withinPeriod && nonZeroPurchase && isValidBalance;\n    }\n\n    // Calculate the token amount given the invested ether amount.\n    // Override to create custom fund forwarding mechanisms\n    function calculateTokens(uint256 amount) internal view returns (uint256 tokenAmount) {\n        return amount.mul(rate);\n    }\n\n    /**\n     * @dev Distribute the token amount to the beneficiary.\n     * @notice Override to create custom distribution mechanisms\n     */\n    function distributeTokens(address beneficiary, uint256 tokenAmount) internal {\n        token.mint(beneficiary, tokenAmount);\n    }\n\n    // Send ether amount to the fund collection wallet.\n    // override to create custom fund forwarding mechanisms\n    function forwardFunds(uint256 amount) internal;\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n\npragma solidity ^0.4.23;\n\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\n\npragma solidity ^0.4.23;\n\n\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\npragma solidity ^0.4.23;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    require(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    ERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    require(token.approve(spender, value));\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/TokenTimelock.sol\n\npragma solidity ^0.4.23;\n\n\n\n/**\n * @title TokenTimelock\n * @dev TokenTimelock is a token holder contract that will allow a\n * beneficiary to extract the tokens after a given release time\n */\ncontract TokenTimelock {\n  using SafeERC20 for ERC20Basic;\n\n  // ERC20 basic token contract being held\n  ERC20Basic public token;\n\n  // beneficiary of tokens after they are released\n  address public beneficiary;\n\n  // timestamp when token release is enabled\n  uint256 public releaseTime;\n\n  constructor(\n    ERC20Basic _token,\n    address _beneficiary,\n    uint256 _releaseTime\n  )\n    public\n  {\n    // solium-disable-next-line security/no-block-members\n    require(_releaseTime > block.timestamp);\n    token = _token;\n    beneficiary = _beneficiary;\n    releaseTime = _releaseTime;\n  }\n\n  /**\n   * @notice Transfers tokens held by timelock to beneficiary.\n   */\n  function release() public {\n    // solium-disable-next-line security/no-block-members\n    require(block.timestamp >= releaseTime);\n\n    uint256 amount = token.balanceOf(this);\n    require(amount > 0);\n\n    token.safeTransfer(beneficiary, amount);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/TokenVesting.sol\n\n/* solium-disable security/no-block-members */\n\npragma solidity ^0.4.23;\n\n\n\n\n\n\n/**\n * @title TokenVesting\n * @dev A token holder contract that can release its token balance gradually like a\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n * owner.\n */\ncontract TokenVesting is Ownable {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20Basic;\n\n  event Released(uint256 amount);\n  event Revoked();\n\n  // beneficiary of tokens after they are released\n  address public beneficiary;\n\n  uint256 public cliff;\n  uint256 public start;\n  uint256 public duration;\n\n  bool public revocable;\n\n  mapping (address => uint256) public released;\n  mapping (address => bool) public revoked;\n\n  /**\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n   * of the balance will have vested.\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n   * @param _start the time (as Unix time) at which point vesting starts \n   * @param _duration duration in seconds of the period in which the tokens will vest\n   * @param _revocable whether the vesting is revocable or not\n   */\n  constructor(\n    address _beneficiary,\n    uint256 _start,\n    uint256 _cliff,\n    uint256 _duration,\n    bool _revocable\n  )\n    public\n  {\n    require(_beneficiary != address(0));\n    require(_cliff <= _duration);\n\n    beneficiary = _beneficiary;\n    revocable = _revocable;\n    duration = _duration;\n    cliff = _start.add(_cliff);\n    start = _start;\n  }\n\n  /**\n   * @notice Transfers vested tokens to beneficiary.\n   * @param token ERC20 token which is being vested\n   */\n  function release(ERC20Basic token) public {\n    uint256 unreleased = releasableAmount(token);\n\n    require(unreleased > 0);\n\n    released[token] = released[token].add(unreleased);\n\n    token.safeTransfer(beneficiary, unreleased);\n\n    emit Released(unreleased);\n  }\n\n  /**\n   * @notice Allows the owner to revoke the vesting. Tokens already vested\n   * remain in the contract, the rest are returned to the owner.\n   * @param token ERC20 token which is being vested\n   */\n  function revoke(ERC20Basic token) public onlyOwner {\n    require(revocable);\n    require(!revoked[token]);\n\n    uint256 balance = token.balanceOf(this);\n\n    uint256 unreleased = releasableAmount(token);\n    uint256 refund = balance.sub(unreleased);\n\n    revoked[token] = true;\n\n    token.safeTransfer(owner, refund);\n\n    emit Revoked();\n  }\n\n  /**\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\n   * @param token ERC20 token which is being vested\n   */\n  function releasableAmount(ERC20Basic token) public view returns (uint256) {\n    return vestedAmount(token).sub(released[token]);\n  }\n\n  /**\n   * @dev Calculates the amount that has already vested.\n   * @param token ERC20 token which is being vested\n   */\n  function vestedAmount(ERC20Basic token) public view returns (uint256) {\n    uint256 currentBalance = token.balanceOf(this);\n    uint256 totalBalance = currentBalance.add(released[token]);\n\n    if (block.timestamp < cliff) {\n      return 0;\n    } else if (block.timestamp >= start.add(duration) || revoked[token]) {\n      return totalBalance;\n    } else {\n      return totalBalance.mul(block.timestamp.sub(start)).div(duration);\n    }\n  }\n}\n\n// File: contracts/NokuCustomToken.sol\n\npragma solidity ^0.4.23;\n\n\n\ncontract NokuCustomToken is Ownable {\n\n    event LogBurnFinished();\n    event LogPricingPlanChanged(address indexed caller, address indexed pricingPlan);\n\n    // The pricing plan determining the fee to be paid in NOKU tokens by customers for using Noku services\n    NokuPricingPlan public pricingPlan;\n\n    // The entity acting as Custom Token service provider i.e. Noku\n    address public serviceProvider;\n\n    // Flag indicating if Custom Token burning has been permanently finished or not.\n    bool public burningFinished;\n\n    /**\n    * @dev Modifier to make a function callable only by service provider i.e. Noku.\n    */\n    modifier onlyServiceProvider() {\n        require(msg.sender == serviceProvider, \"caller is not service provider\");\n        _;\n    }\n\n    modifier canBurn() {\n        require(!burningFinished, \"burning finished\");\n        _;\n    }\n\n    constructor(address _pricingPlan, address _serviceProvider) internal {\n        require(_pricingPlan != 0, \"_pricingPlan is zero\");\n        require(_serviceProvider != 0, \"_serviceProvider is zero\");\n\n        pricingPlan = NokuPricingPlan(_pricingPlan);\n        serviceProvider = _serviceProvider;\n    }\n\n    /**\n    * @dev Presence of this function indicates the contract is a Custom Token.\n    */\n    function isCustomToken() public pure returns(bool isCustom) {\n        return true;\n    }\n\n    /**\n    * @dev Stop burning new tokens.\n    * @return true if the operation was successful.\n    */\n    function finishBurning() public onlyOwner canBurn returns(bool finished) {\n        burningFinished = true;\n\n        emit LogBurnFinished();\n\n        return true;\n    }\n\n    /**\n    * @dev Change the pricing plan of service fee to be paid in NOKU tokens.\n    * @param _pricingPlan The pricing plan of NOKU token to be paid, zero means flat subscription.\n    */\n    function setPricingPlan(address _pricingPlan) public onlyServiceProvider {\n        require(_pricingPlan != 0, \"_pricingPlan is 0\");\n        require(_pricingPlan != address(pricingPlan), \"_pricingPlan == pricingPlan\");\n\n        pricingPlan = NokuPricingPlan(_pricingPlan);\n\n        emit LogPricingPlanChanged(msg.sender, _pricingPlan);\n    }\n}\n\n// File: contracts/NokuTokenBurner.sol\n\npragma solidity ^0.4.23;\n\n\n\n\ncontract BurnableERC20 is ERC20 {\n    function burn(uint256 amount) public returns (bool burned);\n}\n\n/**\n* @dev The NokuTokenBurner contract has the responsibility to burn the configured fraction of received\n* ERC20-compliant tokens and distribute the remainder to the configured wallet.\n*/\ncontract NokuTokenBurner is Pausable {\n    using SafeMath for uint256;\n\n    event LogNokuTokenBurnerCreated(address indexed caller, address indexed wallet);\n    event LogBurningPercentageChanged(address indexed caller, uint256 indexed burningPercentage);\n\n    // The wallet receiving the unburnt tokens.\n    address public wallet;\n\n    // The percentage of tokens to burn after being received (range [0, 100])\n    uint256 public burningPercentage;\n\n    // The cumulative amount of burnt tokens.\n    uint256 public burnedTokens;\n\n    // The cumulative amount of tokens transferred back to the wallet.\n    uint256 public transferredTokens;\n\n    /**\n    * @dev Create a new NokuTokenBurner with predefined burning fraction.\n    * @param _wallet The wallet receiving the unburnt tokens.\n    */\n    constructor(address _wallet) public {\n        require(_wallet != address(0), \"_wallet is zero\");\n        \n        wallet = _wallet;\n        burningPercentage = 100;\n\n        emit LogNokuTokenBurnerCreated(msg.sender, _wallet);\n    }\n\n    /**\n    * @dev Change the percentage of tokens to burn after being received.\n    * @param _burningPercentage The percentage of tokens to be burnt.\n    */\n    function setBurningPercentage(uint256 _burningPercentage) public onlyOwner {\n        require(0 <= _burningPercentage && _burningPercentage <= 100, \"_burningPercentage not in [0, 100]\");\n        require(_burningPercentage != burningPercentage, \"_burningPercentage equal to current one\");\n        \n        burningPercentage = _burningPercentage;\n\n        emit LogBurningPercentageChanged(msg.sender, _burningPercentage);\n    }\n\n    /**\n    * @dev Called after burnable tokens has been transferred for burning.\n    * @param _token THe extended ERC20 interface supported by the sent tokens.\n    * @param _amount The amount of burnable tokens just arrived ready for burning.\n    */\n    function tokenReceived(address _token, uint256 _amount) public whenNotPaused {\n        require(_token != address(0), \"_token is zero\");\n        require(_amount > 0, \"_amount is zero\");\n\n        uint256 amountToBurn = _amount.mul(burningPercentage).div(100);\n        if (amountToBurn > 0) {\n            assert(BurnableERC20(_token).burn(amountToBurn));\n            \n            burnedTokens = burnedTokens.add(amountToBurn);\n        }\n\n        uint256 amountToTransfer = _amount.sub(amountToBurn);\n        if (amountToTransfer > 0) {\n            assert(BurnableERC20(_token).transfer(wallet, amountToTransfer));\n\n            transferredTokens = transferredTokens.add(amountToTransfer);\n        }\n    }\n}\n\n// File: contracts/NokuCustomERC20.sol\n\npragma solidity ^0.4.23;\n\n\n\n\n\n\n\n\n\n/**\n* @dev The NokuCustomERC20Token contract is a custom ERC20-compliant token available in the Noku Service Platform (NSP).\n* The Noku customer is able to choose the token name, symbol, decimals, initial supply and to administer its lifecycle\n* by minting or burning tokens in order to increase or decrease the token supply.\n*/\ncontract NokuCustomERC20 is NokuCustomToken, DetailedERC20, MintableToken, BurnableToken {\n    using SafeMath for uint256;\n\n    event LogNokuCustomERC20Created(\n        address indexed caller,\n        string indexed name,\n        string indexed symbol,\n        uint8 decimals,\n        uint256 transferableFromBlock,\n        uint256 lockEndBlock,\n        address pricingPlan,\n        address serviceProvider\n    );\n    event LogMintingFeeEnabledChanged(address indexed caller, bool indexed mintingFeeEnabled);\n    event LogInformationChanged(address indexed caller, string name, string symbol);\n    event LogTransferFeePaymentFinished(address indexed caller);\n    event LogTransferFeePercentageChanged(address indexed caller, uint256 indexed transferFeePercentage);\n\n    // Flag indicating if minting fees are enabled or disabled\n    bool public mintingFeeEnabled;\n\n    // Block number from which tokens are initially transferable\n    uint256 public transferableFromBlock;\n\n    // Block number from which initial lock ends\n    uint256 public lockEndBlock;\n\n    // The initially locked balances by address\n    mapping (address => uint256) public initiallyLockedBalanceOf;\n\n    // The fee percentage for Custom Token transfer or zero if transfer is free of charge\n    uint256 public transferFeePercentage;\n\n    // Flag indicating if fee payment in Custom Token transfer has been permanently finished or not. \n    bool public transferFeePaymentFinished;\n\n    // Address of optional Timelock smart contract, otherwise 0x0\n    TokenTimelock public timelock;\n\n    // Address of optional Vesting smart contract, otherwise 0x0\n    TokenVesting public vesting;\n\n    bytes32 public constant BURN_SERVICE_NAME     = \"NokuCustomERC20.burn\";\n    bytes32 public constant MINT_SERVICE_NAME     = \"NokuCustomERC20.mint\";\n    bytes32 public constant TIMELOCK_SERVICE_NAME = \"NokuCustomERC20.timelock\";\n    bytes32 public constant VESTING_SERVICE_NAME  = \"NokuCustomERC20.vesting\";\n\n    modifier canTransfer(address _from, uint _value) {\n        require(block.number >= transferableFromBlock, \"token not transferable\");\n\n        if (block.number < lockEndBlock) {\n            uint256 locked = lockedBalanceOf(_from);\n            if (locked > 0) {\n                uint256 newBalance = balanceOf(_from).sub(_value);\n                require(newBalance >= locked, \"_value exceeds locked amount\");\n            }\n        }\n        _;\n    }\n\n    constructor(\n        string _name,\n        string _symbol,\n        uint8 _decimals,\n        uint256 _transferableFromBlock,\n        uint256 _lockEndBlock,\n        address _pricingPlan,\n        address _serviceProvider\n    )\n    NokuCustomToken(_pricingPlan, _serviceProvider)\n    DetailedERC20(_name, _symbol, _decimals) public\n    {\n        require(bytes(_name).length > 0, \"_name is empty\");\n        require(bytes(_symbol).length > 0, \"_symbol is empty\");\n        require(_lockEndBlock >= _transferableFromBlock, \"_lockEndBlock lower than _transferableFromBlock\");\n\n        transferableFromBlock = _transferableFromBlock;\n        lockEndBlock = _lockEndBlock;\n        mintingFeeEnabled = true;\n\n        emit LogNokuCustomERC20Created(\n            msg.sender,\n            _name,\n            _symbol,\n            _decimals,\n            _transferableFromBlock,\n            _lockEndBlock,\n            _pricingPlan,\n            _serviceProvider\n        );\n    }\n\n    function setMintingFeeEnabled(bool _mintingFeeEnabled) public onlyOwner returns(bool successful) {\n        require(_mintingFeeEnabled != mintingFeeEnabled, \"_mintingFeeEnabled == mintingFeeEnabled\");\n\n        mintingFeeEnabled = _mintingFeeEnabled;\n\n        emit LogMintingFeeEnabledChanged(msg.sender, _mintingFeeEnabled);\n\n        return true;\n    }\n\n    /**\n    * @dev Change the Custom Token detailed information after creation.\n    * @param _name The name to assign to the Custom Token.\n    * @param _symbol The symbol to assign to the Custom Token.\n    */\n    function setInformation(string _name, string _symbol) public onlyOwner returns(bool successful) {\n        require(bytes(_name).length > 0, \"_name is empty\");\n        require(bytes(_symbol).length > 0, \"_symbol is empty\");\n\n        name = _name;\n        symbol = _symbol;\n\n        emit LogInformationChanged(msg.sender, _name, _symbol);\n\n        return true;\n    }\n\n    /**\n    * @dev Stop trasfer fee payment for tokens.\n    * @return true if the operation was successful.\n    */\n    function finishTransferFeePayment() public onlyOwner returns(bool finished) {\n        require(!transferFeePaymentFinished, \"transfer fee finished\");\n\n        transferFeePaymentFinished = true;\n\n        emit LogTransferFeePaymentFinished(msg.sender);\n\n        return true;\n    }\n\n    /**\n    * @dev Change the transfer fee percentage to be paid in Custom tokens.\n    * @param _transferFeePercentage The fee percentage to be paid for transfer in range [0, 100].\n    */\n    function setTransferFeePercentage(uint256 _transferFeePercentage) public onlyOwner {\n        require(0 <= _transferFeePercentage && _transferFeePercentage <= 100, \"_transferFeePercentage not in [0, 100]\");\n        require(_transferFeePercentage != transferFeePercentage, \"_transferFeePercentage equal to current value\");\n\n        transferFeePercentage = _transferFeePercentage;\n\n        emit LogTransferFeePercentageChanged(msg.sender, _transferFeePercentage);\n    }\n\n    function lockedBalanceOf(address _to) public view returns(uint256 locked) {\n        uint256 initiallyLocked = initiallyLockedBalanceOf[_to];\n        if (block.number >= lockEndBlock) return 0;\n        else if (block.number <= transferableFromBlock) return initiallyLocked;\n\n        uint256 releaseForBlock = initiallyLocked.div(lockEndBlock.sub(transferableFromBlock));\n        uint256 released = block.number.sub(transferableFromBlock).mul(releaseForBlock);\n        return initiallyLocked.sub(released);\n    }\n\n    /**\n    * @dev Get the fee to be paid for the transfer of NOKU tokens.\n    * @param _value The amount of NOKU tokens to be transferred.\n    */\n    function transferFee(uint256 _value) public view returns(uint256 usageFee) {\n        return _value.mul(transferFeePercentage).div(100);\n    }\n\n    /**\n    * @dev Check if token transfer is free of any charge or not.\n    * @return true if transfer is free of any charge.\n    */\n    function freeTransfer() public view returns (bool isTransferFree) {\n        return transferFeePaymentFinished || transferFeePercentage == 0;\n    }\n\n    /**\n    * @dev Override #transfer for optionally paying fee to Custom token owner.\n    */\n    function transfer(address _to, uint256 _value) canTransfer(msg.sender, _value) public returns(bool transferred) {\n        if (freeTransfer()) {\n            return super.transfer(_to, _value);\n        }\n        else {\n            uint256 usageFee = transferFee(_value);\n            uint256 netValue = _value.sub(usageFee);\n\n            bool feeTransferred = super.transfer(owner, usageFee);\n            bool netValueTransferred = super.transfer(_to, netValue);\n\n            return feeTransferred && netValueTransferred;\n        }\n    }\n\n    /**\n    * @dev Override #transferFrom for optionally paying fee to Custom token owner.\n    */\n    function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from, _value) public returns(bool transferred) {\n        if (freeTransfer()) {\n            return super.transferFrom(_from, _to, _value);\n        }\n        else {\n            uint256 usageFee = transferFee(_value);\n            uint256 netValue = _value.sub(usageFee);\n\n            bool feeTransferred = super.transferFrom(_from, owner, usageFee);\n            bool netValueTransferred = super.transferFrom(_from, _to, netValue);\n\n            return feeTransferred && netValueTransferred;\n        }\n    }\n\n    /**\n    * @dev Burn a specific amount of tokens, paying the service fee.\n    * @param _amount The amount of token to be burned.\n    */\n    function burn(uint256 _amount) public canBurn {\n        require(_amount > 0, \"_amount is zero\");\n\n        super.burn(_amount);\n\n        require(pricingPlan.payFee(BURN_SERVICE_NAME, _amount, msg.sender), \"burn fee failed\");\n    }\n\n    /**\n    * @dev Mint a specific amount of tokens, paying the service fee.\n    * @param _to The address that will receive the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns(bool minted) {\n        require(_to != 0, \"_to is zero\");\n        require(_amount > 0, \"_amount is zero\");\n\n        super.mint(_to, _amount);\n\n        if (mintingFeeEnabled) {\n            require(pricingPlan.payFee(MINT_SERVICE_NAME, _amount, msg.sender), \"mint fee failed\");\n        }\n\n        return true;\n    }\n\n    /**\n    * @dev Mint new locked tokens, which will unlock progressively.\n    * @param _to The address that will receieve the minted locked tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mintLocked(address _to, uint256 _amount) public onlyOwner canMint returns(bool minted) {\n        initiallyLockedBalanceOf[_to] = initiallyLockedBalanceOf[_to].add(_amount);\n\n        return mint(_to, _amount);\n    }\n\n    /**\n     * @dev Mint the specified amount of timelocked tokens.\n     * @param _to The address that will receieve the minted locked tokens.\n     * @param _amount The amount of tokens to mint.\n     * @param _releaseTime The token release time as timestamp from Unix epoch.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mintTimelocked(address _to, uint256 _amount, uint256 _releaseTime) public onlyOwner canMint\n    returns(bool minted)\n    {\n        require(timelock == address(0), \"TokenTimelock already activated\");\n\n        timelock = new TokenTimelock(this, _to, _releaseTime);\n\n        minted = mint(timelock, _amount);\n\n        require(pricingPlan.payFee(TIMELOCK_SERVICE_NAME, _amount, msg.sender), \"timelock fee failed\");\n    }\n\n    /**\n    * @dev Mint the specified amount of vested tokens.\n    * @param _to The address that will receieve the minted vested tokens.\n    * @param _amount The amount of tokens to mint.\n    * @param _startTime When the vesting starts as timestamp in seconds from Unix epoch.\n    * @param _duration The duration in seconds of the period in which the tokens will vest.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mintVested(address _to, uint256 _amount, uint256 _startTime, uint256 _duration) public onlyOwner canMint\n    returns(bool minted)\n    {\n        require(vesting == address(0), \"TokenVesting already activated\");\n\n        vesting = new TokenVesting(_to, _startTime, 0, _duration, true);\n\n        minted = mint(vesting, _amount);\n\n        require(pricingPlan.payFee(VESTING_SERVICE_NAME, _amount, msg.sender), \"vesting fee failed\");\n    }\n\n    /**\n     * @dev Release vested tokens to the beneficiary. Anyone can release vested tokens.\n    * @return A boolean that indicates if the operation was successful.\n     */\n    function releaseVested() public returns(bool released) {\n        require(vesting != address(0), \"TokenVesting not activated\");\n\n        vesting.release(this);\n\n        return true;\n    }\n\n    /**\n     * @dev Revoke vested tokens. Just the token can revoke because it is the vesting owner.\n    * @return A boolean that indicates if the operation was successful.\n     */\n    function revokeVested() public onlyOwner returns(bool revoked) {\n        require(vesting != address(0), \"TokenVesting not activated\");\n\n        vesting.revoke(this);\n\n        return true;\n    }\n}\n\n// File: contracts/TokenCappedCrowdsaleKYC.sol\n\npragma solidity ^0.4.23;\n\n\n\n/**\n * @title CappedCrowdsale\n * @dev Extension of Crowsdale with a max amount of funds raised\n */\ncontract TokenCappedCrowdsaleKYC is CrowdsaleKYC {\n    using SafeMath for uint256;\n\n    // The maximum token cap, should be initialized in derived contract\n    uint256 public tokenCap;\n\n    // Overriding Crowdsale#hasEnded to add tokenCap logic\n    // @return true if crowdsale event has ended\n    function hasEnded() public view returns (bool) {\n        bool capReached = soldTokens >= tokenCap;\n        return super.hasEnded() || capReached;\n    }\n\n    // Overriding Crowdsale#isValidPurchase to add extra cap logic\n    // @return true if investors can buy at the moment\n    function isValidPurchase(address beneficiary) internal view returns (bool isValid) {\n        uint256 tokenAmount = calculateTokens(msg.value);\n        bool withinCap = soldTokens.add(tokenAmount) <= tokenCap;\n        return withinCap && super.isValidPurchase(beneficiary);\n    }\n}\n\n// File: contracts/NokuCustomCrowdsaleKYC.sol\n\npragma solidity ^0.4.23;\n\n\n\n\n\n\n/**\n * @title NokuCustomCrowdsaleKYC\n * @dev Extension of TokenCappedCrowdsaleKYC using values specific for Noku Custom ICO crowdsale\n */\ncontract NokuCustomCrowdsaleKYC is TokenCappedCrowdsaleKYC {\n    using AddressUtils for address;\n    using SafeMath for uint256;\n\n    event LogNokuCustomCrowdsaleCreated(\n        address sender,\n        uint256 indexed startBlock,\n        uint256 indexed endBlock,\n        address indexed wallet\n    );\n    event LogThreePowerAgesChanged(\n        address indexed sender,\n        uint256 indexed platinumAgeEndBlock,\n        uint256 indexed goldenAgeEndBlock,\n        uint256 silverAgeEndBlock,\n        uint256 platinumAgeRate,\n        uint256 goldenAgeRate,\n        uint256 silverAgeRate\n    );\n    event LogTwoPowerAgesChanged(\n        address indexed sender,\n        uint256 indexed platinumAgeEndBlock,\n        uint256 indexed goldenAgeEndBlock,\n        uint256 platinumAgeRate,\n        uint256 goldenAgeRate\n    );\n    event LogOnePowerAgeChanged(address indexed sender, uint256 indexed platinumAgeEndBlock, uint256 indexed platinumAgeRate);\n\n    // The end block of the 'platinum' age interval\n    uint256 public platinumAgeEndBlock;\n\n    // The end block of the 'golden' age interval\n    uint256 public goldenAgeEndBlock;\n\n    // The end block of the 'silver' age interval\n    uint256 public silverAgeEndBlock;\n\n    // The conversion rate of the 'platinum' age\n    uint256 public platinumAgeRate;\n\n    // The conversion rate of the 'golden' age\n    uint256 public goldenAgeRate;\n\n    // The conversion rate of the 'silver' age\n    uint256 public silverAgeRate;\n\n    // The wallet address or contract\n    address public wallet;\n\n    constructor(\n        uint256 _startBlock,\n        uint256 _endBlock,\n        uint256 _rate,\n        uint256 _minDeposit,\n        uint256 _maxWhitelistLength,\n        uint256 _whitelistThreshold,\n        address _token,\n        uint256 _tokenMaximumSupply,\n        address _wallet,\n        address[] _kycSigner\n    )\n    CrowdsaleKYC(\n        _startBlock,\n        _endBlock,\n        _rate,\n        _minDeposit,\n        _maxWhitelistLength,\n        _whitelistThreshold,\n        _kycSigner\n    )\n    public {\n        require(_token.isContract(), \"_token is not contract\");\n        require(_tokenMaximumSupply > 0, \"_tokenMaximumSupply is zero\");\n\n        platinumAgeRate = _rate;\n        goldenAgeRate = _rate;\n        silverAgeRate = _rate;\n\n        token = NokuCustomERC20(_token);\n        wallet = _wallet;\n\n        // Assume predefined token supply has been minted and calculate the maximum number of tokens that can be sold\n        tokenCap = _tokenMaximumSupply.sub(token.totalSupply());\n\n        emit LogNokuCustomCrowdsaleCreated(msg.sender, startBlock, endBlock, _wallet);\n    }\n\n    function setThreePowerAges(\n        uint256 _platinumAgeEndBlock,\n        uint256 _goldenAgeEndBlock,\n        uint256 _silverAgeEndBlock,\n        uint256 _platinumAgeRate,\n        uint256 _goldenAgeRate,\n        uint256 _silverAgeRate\n    )\n    external onlyOwner beforeStart\n    {\n        require(startBlock < _platinumAgeEndBlock, \"_platinumAgeEndBlock not greater than start block\");\n        require(_platinumAgeEndBlock < _goldenAgeEndBlock, \"_platinumAgeEndBlock not lower than _goldenAgeEndBlock\");\n        require(_goldenAgeEndBlock < _silverAgeEndBlock, \"_silverAgeEndBlock not greater than _goldenAgeEndBlock\");\n        require(_silverAgeEndBlock <= endBlock, \"_silverAgeEndBlock greater than end block\");\n        require(_platinumAgeRate > _goldenAgeRate, \"_platinumAgeRate not greater than _goldenAgeRate\");\n        require(_goldenAgeRate > _silverAgeRate, \"_goldenAgeRate not greater than _silverAgeRate\");\n        require(_silverAgeRate > rate, \"_silverAgeRate not greater than nominal rate\");\n\n        platinumAgeEndBlock = _platinumAgeEndBlock;\n        goldenAgeEndBlock = _goldenAgeEndBlock;\n        silverAgeEndBlock = _silverAgeEndBlock;\n\n        platinumAgeRate = _platinumAgeRate;\n        goldenAgeRate = _goldenAgeRate;\n        silverAgeRate = _silverAgeRate;\n\n        emit LogThreePowerAgesChanged(\n            msg.sender,\n            _platinumAgeEndBlock,\n            _goldenAgeEndBlock,\n            _silverAgeEndBlock,\n            _platinumAgeRate,\n            _goldenAgeRate,\n            _silverAgeRate\n        );\n    }\n\n    function setTwoPowerAges(\n        uint256 _platinumAgeEndBlock,\n        uint256 _goldenAgeEndBlock,\n        uint256 _platinumAgeRate,\n        uint256 _goldenAgeRate\n    )\n    external onlyOwner beforeStart\n    {\n        require(startBlock < _platinumAgeEndBlock, \"_platinumAgeEndBlock not greater than start block\");\n        require(_platinumAgeEndBlock < _goldenAgeEndBlock, \"_platinumAgeEndBlock not lower than _goldenAgeEndBlock\");\n        require(_goldenAgeEndBlock <= endBlock, \"_goldenAgeEndBlock greater than end block\");\n        require(_platinumAgeRate > _goldenAgeRate, \"_platinumAgeRate not greater than _goldenAgeRate\");\n        require(_goldenAgeRate > rate, \"_goldenAgeRate not greater than nominal rate\");\n\n        platinumAgeEndBlock = _platinumAgeEndBlock;\n        goldenAgeEndBlock = _goldenAgeEndBlock;\n\n        platinumAgeRate = _platinumAgeRate;\n        goldenAgeRate = _goldenAgeRate;\n        silverAgeRate = rate;\n\n        emit LogTwoPowerAgesChanged(\n            msg.sender,\n            _platinumAgeEndBlock,\n            _goldenAgeEndBlock,\n            _platinumAgeRate,\n            _goldenAgeRate\n        );\n    }\n\n    function setOnePowerAge(uint256 _platinumAgeEndBlock, uint256 _platinumAgeRate)\n    external onlyOwner beforeStart\n    {\n        require(startBlock < _platinumAgeEndBlock, \"_platinumAgeEndBlock not greater than start block\");\n        require(_platinumAgeEndBlock <= endBlock, \"_platinumAgeEndBlock greater than end block\");\n        require(_platinumAgeRate > rate, \"_platinumAgeRate not greater than nominal rate\");\n\n        platinumAgeEndBlock = _platinumAgeEndBlock;\n\n        platinumAgeRate = _platinumAgeRate;\n        goldenAgeRate = rate;\n        silverAgeRate = rate;\n\n        emit LogOnePowerAgeChanged(msg.sender, _platinumAgeEndBlock, _platinumAgeRate);\n    }\n\n    function grantTokenOwnership(address _client) external onlyOwner returns(bool granted) {\n        require(!_client.isContract(), \"_client is contract\");\n        require(hasEnded(), \"crowdsale not ended yet\");\n\n        // Transfer NokuCustomERC20 ownership back to the client\n        token.transferOwnership(_client);\n\n        return true;\n    }\n\n    // Overriding Crowdsale#calculateTokens to apply age discounts to token calculus.\n    function calculateTokens(uint256 amount) internal view returns(uint256 tokenAmount) {\n        uint256 conversionRate = block.number <= platinumAgeEndBlock ? platinumAgeRate :\n            block.number <= goldenAgeEndBlock ? goldenAgeRate :\n            block.number <= silverAgeEndBlock ? silverAgeRate :\n            rate;\n\n        return amount.mul(conversionRate);\n    }\n\n    /**\n     * @dev Overriding Crowdsale#distributeTokens to apply age rules to token distributions.\n     */\n    function distributeTokens(address beneficiary, uint256 tokenAmount) internal {\n        if (block.number <= platinumAgeEndBlock) {\n            NokuCustomERC20(token).mintLocked(beneficiary, tokenAmount);\n        }\n        else {\n            super.distributeTokens(beneficiary, tokenAmount);\n        }\n    }\n\n    /**\n     * @dev Overriding Crowdsale#forwardFunds to split net/fee payment.\n     */\n    function forwardFunds(uint256 amount) internal {\n        wallet.transfer(amount);\n    }\n}\n\n// File: contracts/NokuCustomCrowdsaleServiceKYC.sol\n\npragma solidity ^0.4.23;\n\n\n\n/**\n * @title NokuCustomCrowdsaleServiceKYC\n * @dev Extension of NokuCustomService adding the fee payment in NOKU tokens.\n */\ncontract NokuCustomCrowdsaleServiceKYC is NokuCustomService {\n    event LogNokuCustomCrowdsaleServiceKYCCreated(address indexed caller);\n\n    bytes32 public constant SERVICE_NAME = \"NokuCustomERC20.crowdsale\";\n    uint256 public constant CREATE_AMOUNT = 1 * 10**18;\n\n    constructor(address _pricingPlan) NokuCustomService(_pricingPlan) public {\n        emit LogNokuCustomCrowdsaleServiceKYCCreated(msg.sender);\n    }\n\n    function createCustomCrowdsale(\n        uint256 _startBlock,\n        uint256 _endBlock,\n        uint256 _rate,\n        uint256 _minDeposit,\n        uint256 _maxWhitelistLength,\n        uint256 _whitelistThreshold,\n        address _token,\n        uint256 _tokenMaximumSupply,\n        address _wallet,\n        address[] _kycSigner\n    )\n    public returns(NokuCustomCrowdsaleKYC customCrowdsale)\n    {\n        customCrowdsale = new NokuCustomCrowdsaleKYC(\n            _startBlock,\n            _endBlock,\n            _rate,\n            _minDeposit,\n            _maxWhitelistLength,\n            _whitelistThreshold,\n            _token,\n            _tokenMaximumSupply,\n            _wallet,\n            _kycSigner\n        );\n\n        // Transfer NokuCustomCrowdsaleKYC ownership to the client\n        customCrowdsale.transferOwnership(msg.sender);\n\n        require(pricingPlan.payFee(SERVICE_NAME, CREATE_AMOUNT, msg.sender), \"fee payment failed\");\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000749aba9e082ccb185d1ef88fa514339e3c3368d3"
}