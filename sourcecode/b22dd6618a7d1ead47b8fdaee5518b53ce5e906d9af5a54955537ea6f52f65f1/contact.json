{
  "address": "0x8d5c21734e7591c77638543b70640e9dc40c93f5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TYD",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-23\n*/\n\npragma solidity ^0.4.25;\n\ninterface IERC20 {\n    \n  function name() external view returns (string);\n  \n  function symbol() external view returns (string);\n  \n  function decimals() external view returns (uint8);\n\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0);\n    uint256 c = a / b;\n\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\ncontract TYD is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  string private _name = 'Tianya Diamond';\n  \n  string private _symbol = 'TYDã€€';\n  \n  uint8 private _decimals = 18;\n\n  uint256 private _totalSupply;\n  \n  constructor () public {\n      _mint(msg.sender, 900000000 ether);\n  }\n  \n  function name() public view returns (string) {\n      return _name;\n  }\n  \n  function symbol() public view returns (string) {\n      return _symbol;\n  }\n  \n  function decimals() public view returns (uint8) {\n      return _decimals;\n  }\n\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  function _transfer(address from, address to, uint256 value) internal {\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  function _mint(address account, uint256 value) internal {\n    require(account != address(0));\n\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  function _burn(address account, uint256 value) internal {\n    require(account != address(0));\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  function _burnFrom(address account, uint256 value) internal {\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n    _burn(account, value);\n  }\n}",
  "bytecode": "60c0604052600e60808190527f5469616e7961204469616d6f6e6400000000000000000000000000000000000060a090815261003e9160029190610193565b506040805180820190915260068082527f545944e380800000000000000000000000000000000000000000000000000000602090920191825261008391600391610193565b506004805460ff1916601217905534801561009d57600080fd5b506100bd336b02e87669c308736a040000006401000000006100c2810204565b61022e565b600160a060020a03821615156100d757600080fd5b6005546100f190826401000000006106e361017a82021704565b600555600160a060020a03821660009081526020819052604090205461012490826401000000006106e361017a82021704565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008282018381101561018c57600080fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101d457805160ff1916838001178555610201565b82800160010185558215610201579182015b828111156102015782518255916020019190600101906101e6565b5061020d929150610211565b5090565b61022b91905b8082111561020d5760008155600101610217565b90565b6107288061023d6000396000f3006080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100b3578063095ea7b31461013d57806318160ddd1461017557806323b872dd1461019c578063313ce567146101c657806339509351146101f157806370a082311461021557806395d89b4114610236578063a457c2d71461024b578063a9059cbb1461026f578063dd62ed3e14610293575b600080fd5b3480156100bf57600080fd5b506100c86102ba565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101025781810151838201526020016100ea565b50505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014957600080fd5b50610161600160a060020a036004351660243561034d565b604080519115158252519081900360200190f35b34801561018157600080fd5b5061018a6103cb565b60408051918252519081900360200190f35b3480156101a857600080fd5b50610161600160a060020a03600435811690602435166044356103d1565b3480156101d257600080fd5b506101db61043e565b6040805160ff9092168252519081900360200190f35b3480156101fd57600080fd5b50610161600160a060020a0360043516602435610447565b34801561022157600080fd5b5061018a600160a060020a03600435166104f7565b34801561024257600080fd5b506100c8610512565b34801561025757600080fd5b50610161600160a060020a0360043516602435610573565b34801561027b57600080fd5b50610161600160a060020a03600435166024356105be565b34801561029f57600080fd5b5061018a600160a060020a03600435811690602435166105d4565b60028054604080516020601f60001961010060018716150201909416859004938401819004810282018101909252828152606093909290918301828280156103435780601f1061031857610100808354040283529160200191610343565b820191906000526020600020905b81548152906001019060200180831161032657829003601f168201915b5050505050905090565b6000600160a060020a038316151561036457600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60055490565b600160a060020a0383166000908152600160209081526040808320338452909152812054610405908363ffffffff6105ff16565b600160a060020a0385166000908152600160209081526040808320338452909152902055610434848484610616565b5060019392505050565b60045460ff1690565b6000600160a060020a038316151561045e57600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610492908363ffffffff6106e316565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a031660009081526020819052604090205490565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103435780601f1061031857610100808354040283529160200191610343565b6000600160a060020a038316151561058a57600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610492908363ffffffff6105ff16565b60006105cb338484610616565b50600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6000808383111561060f57600080fd5b5050900390565b600160a060020a038216151561062b57600080fd5b600160a060020a038316600090815260208190526040902054610654908263ffffffff6105ff16565b600160a060020a038085166000908152602081905260408082209390935590841681522054610689908263ffffffff6106e316565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828201838110156106f557600080fd5b93925050505600a165627a7a723058205da693c9217622b07899f49cf35bfd464f52f0e9af46779e263cf1edcb1e9ee80029"
}