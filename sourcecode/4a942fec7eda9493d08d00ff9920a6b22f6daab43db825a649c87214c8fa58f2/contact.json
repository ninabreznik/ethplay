{
  "address": "0x9002d4485b7594e3e850f0a206713b305113f69e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HawalaToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-31\n*/\n\npragma solidity ^0.4.4;\n\ncontract SafeMath {\n  function safeMul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint a, uint b) internal returns (uint) {\n    assert(b > 0);\n    uint c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\n\n\n\ncontract Token is SafeMath {\n\n    function totalSupply()public constant returns (uint256 supply) {}\n\n    function balanceOf(address _owner)public constant returns (uint256 balance) {}\n    \n   \n    \n    function transfer(address _to, uint256 _value)public returns (bool success) {}\n\n    function transferFrom(address _from, address _to, uint256 _value)public returns (bool success) {}\n\n    function approve(address _spender, uint256 _value)public returns (bool success) {}\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {}\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    \n}\n\n\n//ERC20 Compliant\ncontract StandardToken is Token {\n\n    \n    \n    \n    \n    function transfer(address _to, uint256 _value) public  returns (bool success) {\n        if (balances[msg.sender] >= _value && _value > 0)\n        {\n            if(inflation_complete)\n            {\n              \n                uint256 CalculatedFee = safeMul(safeDiv(transactionfeeAmount,100000000000000),transactionfeeAmount);\n                balances[msg.sender] = safeSub(balances[msg.sender],_value);\n               _value = safeSub(_value,CalculatedFee);\n                totalFeeCollected = safeAdd(totalFeeCollected,CalculatedFee);\n                balances[_to] = safeAdd(balances[_to],_value);\n                Transfer(msg.sender, _to, _value);\n                return true;\n            }\n            else\n            {\n                balances[msg.sender] = safeSub(balances[msg.sender],_value);\n                balances[_to] = safeAdd(balances[_to],_value);\n                Transfer(msg.sender, _to, _value);\n                return true;\n                \n            }\n            \n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] =safeAdd(balances[_to],_value);\n            balances[_from] =safeSub(balances[_from],_value);\n            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value); \n            Transfer(_from, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n   \n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n   \n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    uint256 public totalSupply=   0;\n    uint256 public initialSupply= 2500000*10**12;\n    uint256 public rewardsupply= 4500000*10**12;\n    bool public inflation_complete;\n    uint256 public transactionfeeAmount; // This is the percentage per transaction Hawala.Today shall be collecting \n    uint256 public totalFeeCollected;\n}\n\n\n\ncontract HawalaToken is StandardToken {\n\n    \n    uint256 public  totalstakeamount;\n    uint256 public HawalaKickoffTime;\n    address _contractOwner;\n    uint256 public totalFeeCollected;\n  \n    string public name;                  \n    uint8 public decimals;               \n    string public symbol;\n    string public version = 'HAT';       \n\n  mapping (address => IFSBalance) public IFSBalances;\n   struct IFSBalance\n    {\n        \n         uint256 TotalRewardsCollected; \n        uint256 Amount; \n        uint256 IFSLockTime;\n        uint256 LastCollectedReward;\n    }\n    \n   \n    event IFSActive(address indexed _owner, uint256 _value,uint256 _locktime);\n    \n    function () public {\n        //if ether is sent to this address, send it back.\n    \n        throw;\n    }\n\n  \n\n      \n\n      function CalculateReward(uint256 stakingamount,uint256 initialLockTime,uint256 _currenttime) public returns (uint256 _amount) {\n         \n        \n         uint _timesinceStaking =(uint(_currenttime)-uint(initialLockTime))/ 1 days;\n         _timesinceStaking = safeDiv(_timesinceStaking,3);//exploiting non-floating point division\n         _timesinceStaking = safeMul(_timesinceStaking,3);//get to number of days reward shall be distributed\n        \n      \n        \n         if(safeSub(_currenttime,HawalaKickoffTime) <= 1 years)\n         {\n             //_amount = 1;//safeMul(safeDiv(stakingamount,100),15));\n              \n             _amount = safeMul(safeDiv(stakingamount,1000000000000),410958904) ;//15% safeDiv(4,100);//safeMul(stakingamount,safeDiv(4,100));\n             _amount = safeMul(_timesinceStaking,_amount);\n          \n         }\n        else if(safeSub(_currenttime,HawalaKickoffTime) <= 2 years)\n         {\n             _amount = safeMul(safeDiv(stakingamount,1000000000000),410958904) ;//15% safeDiv(4,100);//safeMul(stakingamount,safeDiv(4,100));\n             _amount = safeMul(_timesinceStaking,_amount);\n             \n         }\n        else  if(safeSub(_currenttime,HawalaKickoffTime) <= 3 years)\n         {\n             _amount = safeMul(safeDiv(stakingamount,1000000000000),328767123) ;//12% safeDiv(4,100);//safeMul(stakingamount,safeDiv(4,100));\n             _amount = safeMul(_timesinceStaking,_amount);\n             \n         }\n        else  if(safeSub(_currenttime,HawalaKickoffTime) <= 4 years)\n         {\n             _amount = safeMul(safeDiv(stakingamount,1000000000000),328767123) ;//12% safeDiv(4,100);//safeMul(stakingamount,safeDiv(4,100));\n             _amount = safeMul(_timesinceStaking,_amount);\n             \n         }\n       else   if(safeSub(_currenttime,HawalaKickoffTime) <= 5 years)\n         {\n             _amount = safeMul(safeDiv(stakingamount,1000000000000),328767123) ;//12% safeDiv(4,100);//safeMul(stakingamount,safeDiv(4,100));\n             _amount = safeMul(_timesinceStaking,_amount);\n             \n         }\n       else   if(safeSub(_currenttime,HawalaKickoffTime) <= 6 years)\n         {\n             _amount = safeMul(safeDiv(stakingamount,1000000000000),273972602) ;//10% safeDiv(4,100);//safeMul(stakingamount,safeDiv(4,100));\n             _amount = safeMul(_timesinceStaking,_amount);\n             \n         }\n      else    if(safeSub(_currenttime,HawalaKickoffTime) <= 7 years)\n         {\n             _amount = safeMul(safeDiv(stakingamount,1000000000000),273972602) ;//10%  safeDiv(4,100);//safeMul(stakingamount,safeDiv(4,100));\n             _amount = safeMul(_timesinceStaking,_amount);\n             \n         }\n       else   if(safeSub(_currenttime,HawalaKickoffTime) <= 8 years)\n         {\n             _amount = safeMul(safeDiv(stakingamount,1000000000000),219178082) ;//8% safeDiv(4,100);//safeMul(stakingamount,safeDiv(4,100));\n             _amount = safeMul(_timesinceStaking,_amount);\n             \n         }\n      else    if(safeSub(_currenttime,HawalaKickoffTime) <= 9 years)\n         {\n             _amount = safeMul(safeDiv(stakingamount,1000000000000),205479452) ;//7.50% safeDiv(4,100);//safeMul(stakingamount,safeDiv(4,100));\n             _amount = safeMul(_timesinceStaking,_amount);\n             \n         }\n       else   if(safeSub(_currenttime,HawalaKickoffTime) <= 10 years)\n         {\n             _amount = safeMul(safeDiv(stakingamount,1000000000000),198630136) ;//7.25% safeDiv(4,100);//safeMul(stakingamount,safeDiv(4,100));\n             _amount = safeMul(_timesinceStaking,_amount);\n             \n         }\n        else   if(safeSub(_currenttime,HawalaKickoffTime) > 10 years)\n         {\n             _amount = safeMul(safeDiv(stakingamount,1000000000000),198630136) ;//7.25% safeDiv(4,100);//safeMul(stakingamount,safeDiv(4,100));\n             _amount = safeMul(_timesinceStaking,_amount);\n             \n         }\n         return _amount;\n         //extract ony the quotient from _timesinceStaking\n        \n     }\n     \n     function changeTransactionFee(uint256 amount) public returns (bool success)\n     {\n          if (msg.sender == _contractOwner) {\n              \n              transactionfeeAmount = amount;\n            return true;\n          }\n       else{\n             return false;\n         }\n     }\n     \n     function canExecute(uint initialLockTime,uint256 _currenttime) public returns (bool success)\n     {\n          if (_currenttime >= initialLockTime + 3 days) {\n              \n            return true;\n          }\n       else{\n             return false;\n         }\n     }\n     \n     \n      function disperseRewards(address toaddress ,uint256 amount) public returns (bool success){\n      \n          if(msg.sender==_contractOwner)\n          {\n             if(inflation_complete)\n              {\n                  if(totalFeeCollected>0 && totalFeeCollected>amount)\n                  {\n                    totalFeeCollected = safeSub(totalFeeCollected,amount);\n                     balances[toaddress] = safeAdd(balances[toaddress],amount);\n                     Transfer(msg.sender, toaddress, amount);\n                     return true;\n                  }\n              \n              }\n              else\n              {\n                  return false;\n                  \n              }\n          }\n          return false;\n          \n      }\n       function claimIFSReward(address _sender) public returns (bool success){\n     \n       \n        if(msg.sender!=_sender)//Make sure only authorize owner of account could trigger IFS and he/she must have enough balance to trigger IFS\n        {\n            return false;\n        }\n        else\n        {\n            if(IFSBalances[_sender].Amount<=0)\n            {\n                return false;\n                \n            }\n            else{\n                // is IFS balance age minimum 3 day?\n                uint256 _currenttime = now;\n                if(canExecute(IFSBalances[_sender].IFSLockTime,_currenttime))\n                {\n                    //Get Total number of days in multiple of 3's.. Suppose if the staking lock was done 10 days ago\n                    //but the reward shall be allocated and calculated for 9 Days.\n                    uint256 calculatedreward = CalculateReward(IFSBalances[_sender].Amount,IFSBalances[_sender].IFSLockTime,_currenttime);\n                    \n                   if(!inflation_complete)\n                   {\n                    if(rewardsupply>=calculatedreward)\n                    {\n                   \n                   \n                         rewardsupply = safeSub(rewardsupply,calculatedreward);\n                         balances[_sender] =safeAdd(balances[_sender], calculatedreward);\n                         IFSBalances[_sender].IFSLockTime = _currenttime;//reset the clock\n                         IFSBalances[_sender].TotalRewardsCollected = safeAdd( IFSBalances[_sender].TotalRewardsCollected,calculatedreward);\n                          IFSBalances[_sender].LastCollectedReward = rewardsupply;//Set this to see last collected reward\n                    }\n                    else{\n                        \n                        if(rewardsupply>0)//whatever remaining in the supply hand it out to last staking account\n                        {\n                              \n                           balances[_sender] =safeAdd(balances[_sender], rewardsupply);\n                           rewardsupply = 0;\n                            \n                        }\n                        inflation_complete = true;\n                        \n                    }\n                    \n                   }\n                    \n                }\n                else{\n                    \n                    // Not time yet to process staking reward \n                    return false;\n                }\n                \n                \n                \n            }\n            return true;\n        }\n        \n    }\n   \n    function setIFS(address _sender,uint256 _amount) public returns (bool success){\n        if(msg.sender!=_sender || balances[_sender]<_amount || rewardsupply==0)//Make sure only authorize owner of account could trigger IFS and he/she must have enough balance to trigger IFS\n        {\n            return false;\n        }\n        balances[_sender] = safeSub(balances[_sender],_amount);\n        IFSBalances[_sender].Amount = safeAdd(IFSBalances[_sender].Amount,_amount);\n        IFSBalances[_sender].IFSLockTime = now;\n        IFSActive(_sender,_amount,IFSBalances[_sender].IFSLockTime);\n        totalstakeamount =  safeAdd(totalstakeamount,_amount);\n        return true;\n        \n    }\n    function reClaimIFS(address _sender)public returns (bool success){\n        if(msg.sender!=_sender || IFSBalances[_sender].Amount<=0 )//Make sure only authorize owner of account and > 0 staking could trigger reClaimIFS  \n        {\n            return false;\n        }\n        \n            balances[_sender] = safeAdd(balances[_sender],IFSBalances[_sender].Amount);\n            totalstakeamount =  safeSub(totalstakeamount,IFSBalances[_sender].Amount);\n            IFSBalances[_sender].Amount = 0;\n            IFSBalances[_sender].IFSLockTime = 0;// \n            IFSActive(_sender,0,IFSBalances[_sender].IFSLockTime);//Broadcast event ... Our mobile hooks should be listening to release time\n            \n            return true; \n        \n        \n    }\n    \n    \n    function HawalaToken(\n        )public {\n        //Add initial supply to total supply to make  7M. remaining 4.5M locked in for reward distribution        \n        totalSupply=safeAdd(initialSupply,rewardsupply);\n        balances[msg.sender] = initialSupply;               \n        name = \"HawalaToken\";                              \n        decimals = 12;                            \n        symbol = \"HAT\";  \n        inflation_complete = false;\n        HawalaKickoffTime=now;\n        totalstakeamount=0;\n        totalFeeCollected=0;\n        transactionfeeAmount=100000000000;// Initialized with 0.10 Percent per transaction after 10 years\n        _contractOwner = msg.sender;\n    }\n\n   \n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakingamount\",\"type\":\"uint256\"},{\"name\":\"initialLockTime\",\"type\":\"uint256\"},{\"name\":\"_currenttime\",\"type\":\"uint256\"}],\"name\":\"CalculateReward\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toaddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"disperseRewards\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"initialLockTime\",\"type\":\"uint256\"},{\"name\":\"_currenttime\",\"type\":\"uint256\"}],\"name\":\"canExecute\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setIFS\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalstakeamount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeTransactionFee\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inflation_complete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"claimIFSReward\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"IFSBalances\",\"outputs\":[{\"name\":\"TotalRewardsCollected\",\"type\":\"uint256\"},{\"name\":\"Amount\",\"type\":\"uint256\"},{\"name\":\"IFSLockTime\",\"type\":\"uint256\"},{\"name\":\"LastCollectedReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionfeeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFeeCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HawalaKickoffTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"reClaimIFS\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_locktime\",\"type\":\"uint256\"}],\"name\":\"IFSActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "606060405260006002556722b1c8c1227a0000600355673e733628714200006004556040805190810160405280600381526020017f4841540000000000000000000000000000000000000000000000000000000000815250600f90805190602001906200006e92919062000278565b5034156200007b57600080fd5b6200009f600354600454620002276401000000000262002750176401000000009004565b6002819055506003546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506040805190810160405280600b81526020017f486177616c61546f6b656e000000000000000000000000000000000000000000815250600c90805190602001906200013792919062000278565b50600c600d60006101000a81548160ff021916908360ff1602179055506040805190810160405280600381526020017f4841540000000000000000000000000000000000000000000000000000000000815250600e9080519060200190620001a192919062000278565b506000600560006101000a81548160ff0219169083151502179055504260098190555060006008819055506000600b8190555064174876e80060068190555033600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000327565b60008082840190506200025e848210158015620002445750838210155b62000268640100000000026200277a176401000000009004565b8091505092915050565b8015156200027557600080fd5b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002bb57805160ff1916838001178555620002ec565b82800160010185558215620002ec579182015b82811115620002eb578251825591602001919060010190620002ce565b5b509050620002fb9190620002ff565b5090565b6200032491905b808211156200032057600081600090555060010162000306565b5090565b90565b6127b580620003376000396000f300606060405260043610610154576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610164578063095ea7b3146101f25780630bdc9c351461024c57806318160ddd146102955780631a0fb847146102be57806323b872dd146103185780632ba2921714610391578063313ce567146103d5578063378dc3dc146104045780634403ee2b1461042d57806347582291146104875780635300a306146104b057806354fd4d50146104eb578063683b4184146105795780636e638d3b146105a657806370a08231146105f75780637b926c2a146106445780638e77d147146106a657806395d89b41146106cf578063a9059cbb1461075d578063b9b2b5cd146107b7578063cae9ca51146107e0578063cd06a7bf1461087d578063dd62ed3e146108a6578063e731b03414610912578063fa4c42711461093b575b341561015f57600080fd5b600080fd5b341561016f57600080fd5b61017761098c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101b757808201518184015260208101905061019c565b50505050905090810190601f1680156101e45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101fd57600080fd5b610232600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a2a565b604051808215151515815260200191505060405180910390f35b341561025757600080fd5b61027f6004808035906020019091908035906020019091908035906020019091905050610b1c565b6040518082815260200191505060405180910390f35b34156102a057600080fd5b6102a8610e69565b6040518082815260200191505060405180910390f35b34156102c957600080fd5b6102fe600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e6f565b604051808215151515815260200191505060405180910390f35b341561032357600080fd5b610377600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611018565b604051808215151515815260200191505060405180910390f35b341561039c57600080fd5b6103bb6004808035906020019091908035906020019091905050611389565b604051808215151515815260200191505060405180910390f35b34156103e057600080fd5b6103e86113ad565b604051808260ff1660ff16815260200191505060405180910390f35b341561040f57600080fd5b6104176113c0565b6040518082815260200191505060405180910390f35b341561043857600080fd5b61046d600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506113c6565b604051808215151515815260200191505060405180910390f35b341561049257600080fd5b61049a611673565b6040518082815260200191505060405180910390f35b34156104bb57600080fd5b6104d16004808035906020019091905050611679565b604051808215151515815260200191505060405180910390f35b34156104f657600080fd5b6104fe6116eb565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561053e578082015181840152602081019050610523565b50505050905090810190601f16801561056b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561058457600080fd5b61058c611789565b604051808215151515815260200191505060405180910390f35b34156105b157600080fd5b6105dd600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061179c565b604051808215151515815260200191505060405180910390f35b341561060257600080fd5b61062e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611bd4565b6040518082815260200191505060405180910390f35b341561064f57600080fd5b61067b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611c1c565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b34156106b157600080fd5b6106b9611c4c565b6040518082815260200191505060405180910390f35b34156106da57600080fd5b6106e2611c52565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610722578082015181840152602081019050610707565b50505050905090810190601f16801561074f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561076857600080fd5b61079d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611cf0565b604051808215151515815260200191505060405180910390f35b34156107c257600080fd5b6107ca6120a8565b6040518082815260200191505060405180910390f35b34156107eb57600080fd5b610863600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506120ae565b604051808215151515815260200191505060405180910390f35b341561088857600080fd5b61089061234f565b6040518082815260200191505060405180910390f35b34156108b157600080fd5b6108fc600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612355565b6040518082815260200191505060405180910390f35b341561091d57600080fd5b6109256123dc565b6040518082815260200191505060405180910390f35b341561094657600080fd5b610972600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506123e2565b604051808215151515815260200191505060405180910390f35b600c8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a225780601f106109f757610100808354040283529160200191610a22565b820191906000526020600020905b815481529060010190602001808311610a0557829003601f168201915b505050505081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008062015180848403811515610b2f57fe5b049050610b3d8160036126c3565b9050610b4a816003612704565b90506301e13380610b5d84600954612737565b111515610b9357610b80610b768664e8d4a510006126c3565b63187ebc38612704565b9150610b8c8183612704565b9150610e5e565b6303c26700610ba484600954612737565b111515610bda57610bc7610bbd8664e8d4a510006126c3565b63187ebc38612704565b9150610bd38183612704565b9150610e5d565b6305a39a80610beb84600954612737565b111515610c2157610c0e610c048664e8d4a510006126c3565b6313989693612704565b9150610c1a8183612704565b9150610e5c565b630784ce00610c3284600954612737565b111515610c6857610c55610c4b8664e8d4a510006126c3565b6313989693612704565b9150610c618183612704565b9150610e5b565b6309660180610c7984600954612737565b111515610caf57610c9c610c928664e8d4a510006126c3565b6313989693612704565b9150610ca88183612704565b9150610e5a565b630b473500610cc084600954612737565b111515610cf657610ce3610cd98664e8d4a510006126c3565b6310547d7a612704565b9150610cef8183612704565b9150610e59565b630d286880610d0784600954612737565b111515610d3d57610d2a610d208664e8d4a510006126c3565b6310547d7a612704565b9150610d368183612704565b9150610e58565b630f099c00610d4e84600954612737565b111515610d8457610d71610d678664e8d4a510006126c3565b630d106462612704565b9150610d7d8183612704565b9150610e57565b6310eacf80610d9584600954612737565b111515610dcb57610db8610dae8664e8d4a510006126c3565b630c3f5e1c612704565b9150610dc48183612704565b9150610e56565b6312cc0300610ddc84600954612737565b111515610e1257610dff610df58664e8d4a510006126c3565b630bd6daf8612704565b9150610e0b8183612704565b9150610e55565b6312cc0300610e2384600954612737565b1115610e5457610e45610e3b8664e8d4a510006126c3565b630bd6daf8612704565b9150610e518183612704565b91505b5b5b5b5b5b5b5b5b5b5b819150509392505050565b60025481565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561100d57600560009054906101000a900460ff1615611003576000600b54118015610eef575081600b54115b15610ffe57610f00600b5483612737565b600b81905550610f4e6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612750565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611012565b61100c565b60009050611012565b5b600090505b92915050565b6000816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156110e4575081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156110f05750600082115b1561137d5761113d6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612750565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111c76000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612737565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061128f600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612737565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611382565b600090505b9392505050565b60006203f4808301821015156113a257600190506113a7565b600090505b92915050565b600d60009054906101000a900460ff1681565b60035481565b60008273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415806114405750816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b8061144d57506000600454145b1561145b576000905061166d565b6114a36000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612737565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611531601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015483612750565b601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555042601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055508273ffffffffffffffffffffffffffffffffffffffff167f2335d307364f6d1d7a4351b21b5e4cb658829bc1233f01d4516e60c7bc8bd25883601060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154604051808381526020018281526020019250505060405180910390a261166260085483612750565b600881905550600190505b92915050565b60085481565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156116e15781600681905550600190506116e6565b600090505b919050565b600f8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117815780601f1061175657610100808354040283529160200191611781565b820191906000526020600020905b81548152906001019060200180831161176457829003601f168201915b505050505081565b600560009054906101000a900460ff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117df5760009250611bcd565b6000601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541115156118345760009250611bcd565b429150611883601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015483611389565b15611bbf57611917601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154601060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015484610b1c565b9050600560009054906101000a900460ff161515611bba5780600454101515611afd5761194660045482612737565b6004819055506119946000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482612750565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550611a69601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015482612750565b601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550600454601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030181905550611bb9565b60006004541115611b9d57611b526000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600454612750565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006004819055505b6001600560006101000a81548160ff0219169083151502179055505b5b611bc8565b60009250611bcd565b600192505b5050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60106020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b60065481565b600e8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ce85780601f10611cbd57610100808354040283529160200191611ce8565b820191906000526020600020905b815481529060010190602001808311611ccb57829003601f168201915b505050505081565b600080826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015611d415750600083115b1561209c57600560009054906101000a900460ff1615611f1a57611d78611d70600654655af3107a40006126c3565b600654612704565b9050611dc26000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484612737565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e0e8382612737565b9250611e1c60075482612750565b600781905550611e6a6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484612750565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191506120a1565b611f626000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484612737565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611fec6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484612750565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191506120a1565b600091505b5092915050565b600b5481565b600082600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff1660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e01905060405180910390207c01000000000000000000000000000000000000000000000000000000009004338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828051906020019080838360005b838110156122ef5780820151818401526020810190506122d4565b50505050905090810190601f16801561231c5780820380516001836020036101000a031916815260200191505b5094505050505060006040518083038160008761646e5a03f192505050151561234457600080fd5b600190509392505050565b60045481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60095481565b60008173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158061246257506000601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015411155b1561247057600090506126be565b6124fa6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154612750565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061258a600854601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154612737565b6008819055506000601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506000601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055508173ffffffffffffffffffffffffffffffffffffffff167f2335d307364f6d1d7a4351b21b5e4cb658829bc1233f01d4516e60c7bc8bd2586000601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154604051808381526020018281526020019250505060405180910390a2600190505b919050565b6000806126d26000841161277a565b82848115156126dd57fe5b0490506126fa83858115156126ee57fe5b0682850201851461277a565b8091505092915050565b600080828402905061272d6000851480612728575083858381151561272557fe5b04145b61277a565b8091505092915050565b60006127458383111561277a565b818303905092915050565b600080828401905061277084821015801561276b5750838210155b61277a565b8091505092915050565b80151561278657600080fd5b505600a165627a7a723058203f81fe4f382b54a34fd0ee3c1610a63771aee68e9cc62bea04f8a23a0fd0c91c0029"
}