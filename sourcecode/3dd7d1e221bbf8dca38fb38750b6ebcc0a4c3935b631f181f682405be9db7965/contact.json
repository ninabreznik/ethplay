{
  "address": "0x994239eec04766aade286f151a5fc13335ef1d26",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Oraclize",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "1333337",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-21\n*/\n\n/**\n *\n *  Provable Connector v1.3.0\n *\n *  Copyright (c) 2015-2016 Oraclize SRL\n *  Copyright (c) 2016-2019 Oraclize LTD\n *  Copyright (c) 2019 Provable Things LTD\n *\n */\npragma solidity 0.4.24;\n\ninterface ERC20Interface {\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n}\n\ncontract Oraclize {\n\n    mapping (address => uint256) requestCounter;\n    mapping (address => byte) public callbackAddresses;\n    mapping (address => bool) public offchainPayment;\n    address admin;\n    address paymentFlagger;\n    uint256 gasPrice = 20e9;\n    mapping (address => byte) addressProofType;\n    mapping (address => uint256) addressCustomGasPrice;\n    uint256 public basePrice;\n    mapping (bytes32 => uint256) public price;\n    mapping (bytes32 => uint256) priceMultiplier;\n    bytes32[] datasources;\n    bytes32[] public randomDS_sessionPublicKeyHash;\n    uint256 constant BASE_TX_COST = 21e3;\n    uint256 constant DEFAULT_GAS_LIMIT = 2e5;\n    mapping (address => uint256) public amplifiedTokenPrices;\n    mapping (address => address) public addressCustomPaymentToken;\n\n    event Log1(\n        address sender,\n        bytes32 cid,\n        uint256 timestamp,\n        string datasource,\n        string arg,\n        uint256 gaslimit,\n        byte proofType,\n        uint256 gasPrice\n    );\n\n    event Log1_byte(\n        address sender,\n        bytes32 cid,\n        uint256 timestamp,\n        byte datasource,\n        string arg,\n        uint256 gaslimit,\n        byte proofType,\n        uint256 gasPrice\n    );\n\n    event Log2(\n        address sender,\n        bytes32 cid,\n        uint256 timestamp,\n        string datasource,\n        string arg1,\n        string arg2,\n        uint256 gaslimit,\n        byte proofType,\n        uint256 gasPrice\n    );\n\n    event Log2_byte(\n        address sender,\n        bytes32 cid,\n        uint256 timestamp,\n        byte datasource,\n        string arg1,\n        string arg2,\n        uint256 gaslimit,\n        byte proofType,\n        uint256 gasPrice\n    );\n\n    event LogN(\n        address sender,\n        bytes32 cid,\n        uint256 timestamp,\n        string datasource,\n        bytes args,\n        uint256 gaslimit,\n        byte proofType,\n        uint256 gasPrice\n    );\n\n    event LogN_byte(\n        address sender,\n        bytes32 cid,\n        uint256 timestamp,\n        byte datasource,\n        bytes args,\n        uint256 gaslimit,\n        byte proofType,\n        uint256 gasPrice\n    );\n\n    event Emit_OffchainPaymentFlag(\n        address indexed idx_sender,\n        address sender,\n        bool indexed idx_flag,\n        bool flag\n    );\n\n    event CallbackRebroadcastRequest(\n      bytes32 indexed queryId,\n      uint256 gasLimit,\n      uint256 gasPrice\n    );\n\n    event LogTokenWhitelistRemoval(\n        address tokenAddress\n    );\n\n    event LogTokenWhitelisting(\n        string tokenTicker,\n        address tokenAddress\n    );\n\n    event EnableCache(\n        address indexed sender,\n        bytes32 cid\n    );\n\n    event LogCached(\n        address sender,\n        bytes32 cid,\n        uint256 value\n    );\n\n    constructor() public {\n        admin = msg.sender;\n    }\n\n    function onlyAdmin()\n        view\n        private\n    {\n        require(msg.sender == admin);\n    }\n\n    function onlyManagers()\n        view\n        private\n    {\n        require(msg.sender == admin || msg.sender == paymentFlagger);\n    }\n\n    /**\n     * @notice  The price amplification allows representation of lower-priced\n     *          tokens by the connector, & maintains higher precision during the\n     *          the conversion of a query price in ETH to it's token equivalent.\n     *\n     * @dev     Token price amplified via: tokenUSDPrice * 1e3.\n     */\n    function whitelistToken(\n        string _tokenTicker,\n        address _tokenAddress,\n        uint256 _amplifiedTokenPrice\n    )\n        external\n    {\n        onlyAdmin();\n        amplifiedTokenPrices[_tokenAddress] = _amplifiedTokenPrice;\n        emit LogTokenWhitelisting(_tokenTicker, _tokenAddress);\n    }\n\n    function updateTokenAmplifiedPrice(\n        address _tokenAddress,\n        uint256 _newAmplifiedTokenPrice\n    )\n        external\n    {\n        onlyManagers();\n        amplifiedTokenPrices[_tokenAddress] = _newAmplifiedTokenPrice;\n    }\n\n    function revokeTokenWhitelisting(address _tokenAddress)\n        external\n    {\n        onlyManagers();\n        delete amplifiedTokenPrices[_tokenAddress];\n        emit LogTokenWhitelistRemoval(_tokenAddress);\n    }\n\n    function setCustomTokenPayment(address _tokenAddress)\n        external\n    {\n        require(amplifiedTokenPrices[_tokenAddress] > 0);\n        addressCustomPaymentToken[msg.sender] = _tokenAddress;\n    }\n\n    function unsetCustomTokenPayment()\n        external\n    {\n        delete addressCustomPaymentToken[msg.sender];\n    }\n\n    function getTokenBalance(address _tokenAddress)\n    view\n        public\n        returns (uint256 _tokenBalance)\n    {\n        return ERC20Interface(_tokenAddress).balanceOf(address(this));\n    }\n\n    function withdrawTokens(address _tokenAddress)\n        external\n    {\n        onlyAdmin();\n        withdrawTokens(\n            _tokenAddress,\n            msg.sender,\n            getTokenBalance(_tokenAddress)\n        );\n    }\n\n    function withdrawTokens(\n        address _tokenAddress,\n        address _recipient,\n        uint256 _amount\n    )\n        public\n    {\n        onlyAdmin();\n        require(_recipient != address(0));\n        ERC20Interface(_tokenAddress).transfer(_recipient, _amount);\n    }\n\n    function migrateRequestCounter(\n        address _address,\n        uint256 _requestCounter\n    )\n        private\n    {\n        require(requestCounter[_address] == 0);\n        requestCounter[_address] = _requestCounter;\n    }\n\n    function batchMigrateRequestCounters(\n        address[] _addresses,\n        uint256[] _requestCounters\n    )\n        public\n    {\n        onlyManagers();\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            migrateRequestCounter(\n                _addresses[i],\n                _requestCounters[i]\n            );\n        }\n    }\n    function migrateCustomSettings(\n        address _address,\n        byte _proofType,\n        uint256 _gasPrice,\n        bool _offchainPayer,\n        uint256 _requestCounter\n    )\n        private\n    {\n        require(requestCounter[_address] == 0);\n        addressProofType[_address] = _proofType;\n        requestCounter[_address] = _requestCounter;\n        offchainPayment[_address] = _offchainPayer;\n        addressCustomGasPrice[_address] = _gasPrice;\n    }\n\n    function batchMigrateCustomSettings(\n        address[] _addresses,\n        byte[] _proofTypes,\n        uint256[] _gasPrices,\n        bool[] _offchainPayers,\n        uint256[] _requestCounters\n    )\n        public\n    {\n        onlyManagers();\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            migrateCustomSettings(\n                _addresses[i],\n                _proofTypes[i],\n                _gasPrices[i],\n                _offchainPayers[i],\n                _requestCounters[i]\n            );\n        }\n    }\n\n    function costs(\n        string _datasource,\n        uint256 _gasLimit\n    )\n        private\n    {\n        settlePayment(getPrice(_datasource, _gasLimit, msg.sender));\n    }\n\n    function costs(\n        byte _datasource,\n        uint256 _gasLimit\n    )\n        private\n    {\n        settlePayment(getPrice(_datasource, _gasLimit, msg.sender));\n    }\n\n    /**\n     * @dev Any ETH sent over and above a query price is refunded. Please note\n     *      that the same is NOT true for any queries paid for by ERC20 tokens.\n     *      In such cases, please ensure no ETH is sent along with query\n     *      function calls.\n     */\n    function settlePayment(uint256 _price)\n        private\n    {\n        if (msg.value == _price) {\n            return;\n        }\n        else if (msg.value > _price) {\n            msg.sender.transfer(msg.value - _price);\n            return;\n        }\n        address tokenAddress = addressCustomPaymentToken[msg.sender];\n        if (tokenAddress != address(0)) {\n            makeERC20Payment(\n                msg.sender,\n                convertToERC20Price(_price, tokenAddress)\n            );\n            return;\n        }\n        else {\n            revert('Error settling query payment');\n        }\n    }\n\n    /**\n     * @notice  The amplified token price here allows higher precision when\n     *          converting the query price in wei to its token equivalent.\n     */\n    function convertToERC20Price(\n        uint256 _queryPriceInWei,\n        address _tokenAddress\n    )\n        view\n        public\n        returns (uint256 _price)\n    {\n        uint256 erc20Price = (_queryPriceInWei * 1 ether) / (amplifiedTokenPrices[_tokenAddress] * basePrice);\n        require(erc20Price > 0);\n        return erc20Price;\n    }\n\n    function makeERC20Payment(\n        address _address,\n        uint256 _amount\n    )\n        private\n    {\n        ERC20Interface(addressCustomPaymentToken[_address])\n            .transferFrom(\n                _address,\n                address(this),\n                _amount\n            );\n    }\n\n    function changeAdmin(address _newAdmin)\n        external\n    {\n        onlyAdmin();\n        admin = _newAdmin;\n    }\n\n    function changePaymentFlagger(address _newFlagger)\n        external\n    {\n        onlyAdmin();\n        paymentFlagger = _newFlagger;\n    }\n\n    function addCallbackAddress(\n        address _newCallbackAddress,\n        byte _addressType\n    )\n        public\n    {\n        onlyAdmin();\n        addCallbackAddress(\n            _newCallbackAddress,\n            _addressType,\n            hex''\n        );\n    }\n\n    /**\n     * @dev \"proof\" is currently a placeholder for when associated proof\n     *      for _addressType is added.\n     */\n    function addCallbackAddress(\n        address _newCallbackAddress,\n        byte _addressType,\n        bytes _proof\n    )\n        public\n    {\n        onlyAdmin();\n        callbackAddresses[_newCallbackAddress] = _addressType;\n    }\n\n    function removeCallbackAddress(address _callbackAddress)\n        public\n    {\n        onlyAdmin();\n        delete callbackAddresses[_callbackAddress];\n    }\n\n    function isOriginCallbackAddress()\n        public\n        view\n        returns (bool _isCallback)\n    {\n        if (callbackAddresses[tx.origin] != 0)\n            return true;\n    }\n\n    function addDatasource(\n        string _datasourceName,\n        uint256 _multiplier\n    )\n        public\n    {\n        addDatasource(_datasourceName, 0x00, _multiplier);\n    }\n\n    function addDatasource(\n        byte _datasourceName,\n        uint256 _multiplier\n    )\n        external\n    {\n        addDatasource(_datasourceName, 0x00, _multiplier);\n    }\n\n    function addDatasource(\n        string _datasourceName,\n        byte _proofType,\n        uint256 _multiplier\n    )\n        public\n    {\n        onlyAdmin();\n        bytes32 dsname_hash = keccak256(\n            _datasourceName,\n            _proofType\n        );\n        datasources[datasources.length++] = dsname_hash;\n        priceMultiplier[dsname_hash] = _multiplier;\n    }\n\n    function addDatasource(\n        byte _datasourceName,\n        byte _proofType,\n        uint256 _multiplier\n    )\n        public\n    {\n        onlyAdmin();\n        bytes32 dsname_hash = keccak256(\n            _datasourceName,\n            _proofType\n        );\n        datasources[datasources.length++] = dsname_hash;\n        priceMultiplier[dsname_hash] = _multiplier;\n    }\n\n    /**\n     * @notice  Used by the \"ethereum-bridge\"\n     *\n     * @dev     Calculate dsHash via:\n     *          bytes32 hash = keccak256(DATASOURCE_NAME, PROOF_TYPE);\n     */\n    function multiAddDatasources(\n        bytes32[] _datasourceHash,\n        uint256[] _multiplier\n    )\n        public\n    {\n        onlyAdmin();\n        for (uint256 i = 0; i < _datasourceHash.length; i++) {\n            datasources[datasources.length++] = _datasourceHash[i];\n            priceMultiplier[_datasourceHash[i]] = _multiplier[i];\n        }\n    }\n\n    function multiSetProofTypes(\n        uint256[] _proofType,\n        address[] _address\n    )\n        public\n    {\n        onlyAdmin();\n        for (uint256 i = 0; i < _address.length; i++) {\n            addressProofType[_address[i]] = byte(_proofType[i]);\n        }\n    }\n\n    function multiSetCustomGasPrices(\n        uint256[] _gasPrice,\n        address[] _address\n    )\n        public\n    {\n        onlyAdmin();\n        for (uint256 i = 0; i < _address.length; i++) {\n            addressCustomGasPrice[_address[i]] = _gasPrice[i];\n        }\n    }\n\n    function setGasPrice(uint256 _newGasPrice)\n        external\n    {\n        onlyAdmin();\n        gasPrice = _newGasPrice;\n    }\n\n    /**\n     * @notice  Base price is maintained @ 0.001 USD in ether. Notice too that\n     *          any datasources need to be added before setting the base price\n     *          in order for datasource prices to be correctly persisted.\n     *\n     * @dev     To calculate base price:\n     *          uint256 basePrice = 1 * 10 ** _tokenDecimals / _USDPrice * 1000;\n     *\n     */\n    function setBasePrice(uint256 _newBasePrice)\n        external\n    {\n        onlyManagers();\n        basePrice = _newBasePrice;\n        for (uint256 i = 0; i < datasources.length; i++) {\n            price[datasources[i]] = _newBasePrice * priceMultiplier[datasources[i]];\n        }\n    }\n\n\n    function setOffchainPayment(\n        address _address,\n        bool _flag\n    )\n        external\n    {\n        onlyManagers();\n        offchainPayment[_address] = _flag;\n        emit Emit_OffchainPaymentFlag(_address, _address, _flag, _flag);\n    }\n\n    function withdrawFunds(address _address)\n        external\n    {\n        onlyAdmin();\n        _address.transfer(address(this).balance);\n    }\n\n    function randomDS_updateSessionPublicKeyHash(bytes32[] _newSessionPublicKeyHash)\n        public\n    {\n        onlyAdmin();\n        randomDS_sessionPublicKeyHash.length = 0;\n        for (uint256 i = 0; i < _newSessionPublicKeyHash.length; i++) {\n            randomDS_sessionPublicKeyHash.push(_newSessionPublicKeyHash[i]);\n        }\n    }\n\n    function randomDS_getSessionPublicKeyHash()\n        public\n        view\n        returns (bytes32)\n    {\n        uint256 i = uint256(keccak256(requestCounter[msg.sender])) % randomDS_sessionPublicKeyHash.length;\n        return randomDS_sessionPublicKeyHash[i];\n    }\n\n    function setCustomProofType(byte _proofType)\n        public\n    {\n        addressProofType[msg.sender] = _proofType;\n    }\n\n    function setCustomGasPrice(uint256 _gasPrice)\n        external\n    {\n        addressCustomGasPrice[msg.sender] = _gasPrice;\n    }\n\n    function getPrice(string _datasource)\n        view\n        public\n        returns (uint256 _datasourcePrice)\n    {\n        return getPrice(_datasource, msg.sender);\n    }\n\n    function getPrice(byte _datasource)\n        view\n        public\n        returns (uint256 _datasourcePrice)\n    {\n        return getPrice(_datasource, msg.sender);\n    }\n\n    function getPrice(\n        string _datasource,\n        uint256 _gasLimit\n    )\n        view\n        public\n        returns (uint256 _datasourcePrice)\n    {\n        return getPrice(_datasource, _gasLimit, msg.sender);\n    }\n\n    function getPrice(\n        byte _datasource,\n        uint256 _gasLimit\n    )\n        view\n        public\n        returns (uint256 _datasourcePrice)\n    {\n        return getPrice(_datasource, _gasLimit, msg.sender);\n    }\n\n    function getPrice(\n        string _datasource,\n        address _address\n    )\n        view\n        public\n        returns (uint256 _datasourcePrice)\n    {\n        return getPrice(_datasource, DEFAULT_GAS_LIMIT, _address);\n    }\n\n\n    function getPrice(\n        byte _datasource,\n        address _address\n    )\n        view\n        public\n        returns (uint256 _datasourcePrice)\n    {\n        return getPrice(_datasource, DEFAULT_GAS_LIMIT, _address);\n    }\n\n    /**\n     * @dev The ordering of the comparatives in the third `if` statement\n     *      provide the greatest efficiency with respect to gas prices.\n     */\n    function getPrice(\n        string _datasource,\n        uint256 _gasLimit,\n        address _address\n    )\n        view\n        public\n        returns (uint256 _datasourcePrice)\n    {\n        if (offchainPayment[_address]) return 0;\n        uint256 customGasPrice = addressCustomGasPrice[_address];\n        if (requestCounter[_address] == 0 &&\n            _gasLimit <= DEFAULT_GAS_LIMIT &&\n            customGasPrice <= gasPrice &&\n            !isOriginCallbackAddress()) return 0;\n        if (customGasPrice == 0) customGasPrice = gasPrice;\n       _datasourcePrice = price[keccak256(\n            _datasource,\n            addressProofType[_address]\n        )];\n        _datasourcePrice += _gasLimit * customGasPrice;\n        return _datasourcePrice;\n    }\n\n    /**\n     * @dev Ibid.\n    */\n    function getPrice(\n        byte _datasource,\n        uint256 _gasLimit,\n        address _address\n    )\n        view\n        public\n        returns (uint256 _datasourcePrice)\n    {\n\n        if (offchainPayment[_address]) return 0;\n        uint256 customGasPrice = addressCustomGasPrice[_address];\n        if (requestCounter[_address] == 0 &&\n            _gasLimit <= DEFAULT_GAS_LIMIT &&\n            customGasPrice <= gasPrice &&\n            !isOriginCallbackAddress()) return 0;\n        if (customGasPrice == 0) customGasPrice = gasPrice;\n       _datasourcePrice = price[keccak256(\n            _datasource,\n            addressProofType[_address]\n        )];\n        _datasourcePrice += _gasLimit * customGasPrice;\n        return _datasourcePrice;\n    }\n\n    function query(\n        string _datasource,\n        string _arg\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return query1(0, _datasource, _arg, DEFAULT_GAS_LIMIT);\n    }\n\n    function query(\n        byte _datasource,\n        string _arg\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return query1(0, _datasource, _arg, DEFAULT_GAS_LIMIT);\n    }\n\n    function query1(\n        string _datasource,\n        string _arg\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return query1(0, _datasource, _arg, DEFAULT_GAS_LIMIT);\n    }\n\n    function query1(\n        byte _datasource,\n        string _arg\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return query1(0, _datasource, _arg, DEFAULT_GAS_LIMIT);\n    }\n\n   function query2(\n        string _datasource,\n        string _arg1,\n        string _arg2\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return query2(0, _datasource, _arg1, _arg2, DEFAULT_GAS_LIMIT);\n    }\n\n    function query2(\n        byte _datasource,\n        string _arg1,\n        string _arg2\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return query2(0, _datasource, _arg1, _arg2, DEFAULT_GAS_LIMIT);\n    }\n\n    function queryN(\n        string _datasource,\n        bytes _args\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return queryN(0, _datasource, _args, DEFAULT_GAS_LIMIT);\n    }\n\n    function queryN(\n        byte _datasource,\n        bytes _args\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return queryN(0, _datasource, _args, DEFAULT_GAS_LIMIT);\n    }\n\n    function query(\n        uint256 _timestamp,\n        string _datasource,\n        string _arg\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return query1(_timestamp, _datasource, _arg, DEFAULT_GAS_LIMIT);\n    }\n\n    function query(\n        uint256 _timestamp,\n        byte _datasource,\n        string _arg\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return query1(_timestamp, _datasource, _arg, DEFAULT_GAS_LIMIT);\n    }\n\n    function query1(\n        uint256 _timestamp,\n        string _datasource,\n        string _arg\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return query1(_timestamp, _datasource, _arg, DEFAULT_GAS_LIMIT);\n    }\n\n    function query1(\n        uint256 _timestamp,\n        byte _datasource,\n        string _arg\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return query1(_timestamp, _datasource, _arg, DEFAULT_GAS_LIMIT);\n    }\n\n    function query2(\n        uint256 _timestamp,\n        string _datasource,\n        string _arg1,\n        string _arg2\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return query2(_timestamp, _datasource, _arg1, _arg2, DEFAULT_GAS_LIMIT);\n    }\n\n    function query2(\n        uint256 _timestamp,\n        byte _datasource,\n        string _arg1,\n        string _arg2\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return query2(_timestamp, _datasource, _arg1, _arg2, DEFAULT_GAS_LIMIT);\n    }\n\n    function queryN(\n        uint256 _timestamp,\n        string _datasource,\n        bytes _args\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return queryN(_timestamp, _datasource, _args, DEFAULT_GAS_LIMIT);\n    }\n\n    function queryN(\n        uint256 _timestamp,\n        byte _datasource,\n        bytes _args\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return queryN(_timestamp, _datasource, _args, DEFAULT_GAS_LIMIT);\n    }\n\n    function queryWithGasLimit(\n        uint256 _timestamp,\n        string _datasource,\n        string _arg,\n        uint256 _gasLimit\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return query1(_timestamp, _datasource, _arg, _gasLimit);\n    }\n\n    function queryWithGasLimit(\n        uint256 _timestamp,\n        byte _datasource,\n        string _arg,\n        uint256 _gasLimit\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return query1(_timestamp, _datasource, _arg, _gasLimit);\n    }\n\n    function query1WithGasLimit(\n        uint256 _timestamp,\n        string _datasource,\n        string _arg,\n        uint256 _gasLimit\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return query1(_timestamp, _datasource, _arg, _gasLimit);\n    }\n\n    function query1WithGasLimit(\n        uint256 _timestamp,\n        byte _datasource,\n        string _arg,\n        uint256 _gasLimit\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return query1(_timestamp, _datasource, _arg, _gasLimit);\n    }\n\n    function query2WithGasLimit(\n        uint256 _timestamp,\n        string _datasource,\n        string _arg1,\n        string _arg2,\n        uint256 _gasLimit\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return query2(_timestamp, _datasource, _arg1, _arg2, _gasLimit);\n    }\n\n    function query2WithGasLimit(\n        uint256 _timestamp,\n        byte _datasource,\n        string _arg1,\n        string _arg2,\n        uint256 _gasLimit\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return query2(_timestamp, _datasource, _arg1, _arg2, _gasLimit);\n    }\n\n    function queryNWithGasLimit(\n        uint256 _timestamp,\n        string _datasource,\n        bytes _args,\n        uint256 _gasLimit\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return queryN(_timestamp, _datasource, _args, _gasLimit);\n    }\n\n    function queryNWithGasLimit(\n        uint256 _timestamp,\n        byte _datasource,\n        bytes _args,\n        uint256 _gasLimit\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return queryN(_timestamp, _datasource, _args, _gasLimit);\n    }\n\n    /**\n     * @dev In the following `query` functions, any timestamps that pertain\n     *      to a delay greater than 60 days are invalid. This is enforced\n     *      off-chain and thus no check appears here.\n     *\n     *      Also enforced off-chain and so not checked herein is that the\n     *      provided `_gasLimit` is less than or equal to the current block\n     *      gas limit.\n     */\n    function query1(\n        uint256 _timestamp,\n        string _datasource,\n        string _arg,\n        uint256 _gasLimit\n    )\n        payable\n        public\n        returns (bytes32 _id)\n    {\n        costs(_datasource, _gasLimit);\n        _id = keccak256(\n            this,\n            msg.sender,\n            requestCounter[msg.sender]++\n        );\n        emit Log1(\n            msg.sender,\n            _id,\n            _timestamp,\n            _datasource,\n            _arg,\n            _gasLimit,\n            addressProofType[msg.sender],\n            addressCustomGasPrice[msg.sender]\n        );\n        return _id;\n    }\n\n    function query1(\n        uint256 _timestamp,\n        byte _datasource,\n        string _arg,\n        uint256 _gasLimit\n    )\n        payable\n        public\n        returns (bytes32 _id)\n    {\n        costs(_datasource, _gasLimit);\n        _id = keccak256(\n            this,\n            msg.sender,\n            requestCounter[msg.sender]++\n        );\n        emit Log1_byte(\n            msg.sender,\n            _id,\n            _timestamp,\n            _datasource,\n            _arg,\n            _gasLimit,\n            addressProofType[msg.sender],\n            addressCustomGasPrice[msg.sender]\n        );\n        return _id;\n    }\n\n    function query2(\n        uint256 _timestamp,\n        string _datasource,\n        string _arg1,\n        string _arg2,\n        uint256 _gasLimit\n    )\n        payable\n        public\n        returns (bytes32 _id)\n    {\n        costs(_datasource, _gasLimit);\n        _id = keccak256(\n            this,\n            msg.sender,\n            requestCounter[msg.sender]++\n        );\n        emit Log2(\n            msg.sender,\n            _id,\n            _timestamp,\n            _datasource,\n            _arg1,\n            _arg2,\n            _gasLimit,\n            addressProofType[msg.sender],\n            addressCustomGasPrice[msg.sender]\n        );\n        return _id;\n    }\n\n    function query2(\n        uint256 _timestamp,\n        byte _datasource,\n        string _arg1,\n        string _arg2,\n        uint256 _gasLimit\n    )\n        payable\n        public\n        returns (bytes32 _id)\n    {\n        costs(_datasource, _gasLimit);\n        _id = keccak256(\n            this,\n            msg.sender,\n            requestCounter[msg.sender]++\n        );\n        emit Log2_byte(\n            msg.sender,\n            _id,\n            _timestamp,\n            _datasource,\n            _arg1,\n            _arg2,\n            _gasLimit,\n            addressProofType[msg.sender],\n            addressCustomGasPrice[msg.sender]\n        );\n        return _id;\n    }\n\n    function queryN(\n        uint256 _timestamp,\n        string _datasource,\n        bytes _args,\n        uint256 _gasLimit\n    )\n        payable\n        public\n        returns (bytes32 _id)\n    {\n        costs(_datasource, _gasLimit);\n        _id = keccak256(\n            this,\n            msg.sender,\n            requestCounter[msg.sender]++\n        );\n        emit LogN(\n            msg.sender,\n            _id,\n            _timestamp,\n            _datasource,\n            _args,\n            _gasLimit,\n            addressProofType[msg.sender],\n            addressCustomGasPrice[msg.sender]\n        );\n        return _id;\n    }\n\n    function queryN(\n        uint256 _timestamp,\n        byte _datasource,\n        bytes _args,\n        uint256 _gasLimit\n    )\n        payable\n        public\n        returns (bytes32 _id)\n    {\n        costs(_datasource, _gasLimit);\n        _id = keccak256(\n            this,\n            msg.sender,\n            requestCounter[msg.sender]++\n        );\n        emit LogN_byte(\n            msg.sender,\n            _id,\n            _timestamp,\n            _datasource,\n            _args,\n            _gasLimit,\n            addressProofType[msg.sender],\n            addressCustomGasPrice[msg.sender]\n        );\n        return _id;\n    }\n\n    function getRebroadcastCost(\n        uint256 _gasLimit,\n        uint256 _gasPrice\n    )\n        pure\n        public\n        returns (uint256 _rebroadcastCost)\n    {\n        _rebroadcastCost = _gasPrice * _gasLimit;\n        /**\n         * @dev gas limit sanity check and overflow test\n         */\n        require(\n            _gasLimit >= BASE_TX_COST &&\n            _rebroadcastCost / _gasPrice == _gasLimit\n        );\n\n        return _rebroadcastCost;\n    }\n\n    /**\n     * @dev     Allows a user to increase the gas price of a query to aid in\n     *          ensuring prompt service during unexpected network traffic spikes.\n     *\n     * @notice  This function foregoes validation of the parameters provided\n     *          and retains any passing value sent to it. Parameters provided\n     *          are validated in the off-chain context, and irregular or\n     *          impossible parameters will simply be ignored (e.g. gas limit\n     *          above the current block gas limit).\n     */\n    function requestCallbackRebroadcast(\n        bytes32 _queryId,\n        uint256 _gasLimit,\n        uint256 _gasPrice\n    )\n        payable\n        external\n    {\n        uint256 ethCost = getRebroadcastCost(\n            _gasLimit,\n            _gasPrice\n        );\n\n        require (msg.value >= ethCost);\n\n        if (msg.value > ethCost) {\n            msg.sender.transfer(msg.value - ethCost);\n        }\n\n        emit CallbackRebroadcastRequest(\n            _queryId,\n            _gasLimit,\n            _gasPrice\n        );\n    }\n\n    /**\n     * @dev Fires an event the engine watches for, to notify it to cache the\n     *      specified query's parameters. ALL parameters for that specific\n     *      query are cached, including timestamps & gas prices. When calling\n     *      this function, a queryID needs to be explicitly sent in order to\n     *      specify the exact query whose parameters the caller wants cached.\n     */\n    function requestQueryCaching(\n        bytes32 _queryId\n    )\n        external\n    {\n        require(requestCounter[msg.sender] > 0);\n\n        emit EnableCache(\n            msg.sender,\n            _queryId\n        );\n    }\n\n    /**\n     * @dev     Function which requests the calling contract's cached query\n     *          be processed.\n     *\n     * @notice  A query must be cached by the sender first. Correct funding\n     *          must be provided, or will be ignored by the Provable service.\n     *          In order to make query-caching as efficient as possible there\n     *          are NO on-chain checks regarding sufficient payment. Thus any\n     *          queries found to be under-funded will be dropped by Provable.\n     */\n    function queryCached()\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        _id = keccak256(\n            this,\n            msg.sender,\n            requestCounter[msg.sender]++\n        );\n\n        emit LogCached(\n            msg.sender,\n            _id,\n            msg.value\n        );\n    }\n\n    /**\n     * @notice  The following functions provide backwards-compatibility\n     *          with previous Provable connectors.\n     *\n     */\n    function setProofType(byte _proofType)\n        external\n    {\n        setCustomProofType(_proofType);\n    }\n\n    function removeCbAddress(address _callbackAddress)\n        external\n    {\n        removeCallbackAddress(_callbackAddress);\n    }\n\n    function cbAddresses(address _address)\n        external\n        view\n        returns (byte)\n    {\n        return callbackAddresses[_address];\n    }\n\n\n    function cbAddress()\n        public\n        view\n        returns (address _callbackAddress)\n    {\n        if (callbackAddresses[tx.origin] != 0)\n            _callbackAddress = tx.origin;\n    }\n\n    function addCbAddress(\n        address _newCallbackAddress,\n        byte _addressType\n    )\n        external\n    {\n        addCallbackAddress(\n            _newCallbackAddress,\n            _addressType\n        );\n    }\n\n    function addCbAddress(\n        address _newCallbackAddress,\n        byte _addressType,\n        bytes _proof\n    )\n        external\n    {\n        addCallbackAddress(\n            _newCallbackAddress,\n            _addressType,\n            _proof\n        );\n    }\n\n    function addDSource(\n        string _datasourceName,\n        uint256 _multiplier\n    )\n        external\n    {\n        addDatasource(\n            _datasourceName,\n            _multiplier\n        );\n    }\n\n    function multiAddDSource(\n        bytes32[] _datasourceHashes,\n        uint256[] _multipliers\n    )\n        external\n    {\n        multiAddDatasources(\n            _datasourceHashes,\n            _multipliers\n        );\n    }\n\n    function multisetProofType(\n        uint256[] _proofTypes,\n        address[] _addresses\n    )\n        external\n    {\n        multiSetProofTypes(\n            _proofTypes,\n            _addresses\n        );\n    }\n\n    function multisetCustomGasPrice(\n        uint256[] _gasPrice,\n        address[] _addr\n    )\n        external\n    {\n        multiSetCustomGasPrices(\n            _gasPrice,\n            _addr\n        );\n    }\n\n    function randomDS_getSessionPubKeyHash()\n        external\n        view\n        returns (bytes32)\n    {\n        return randomDS_getSessionPublicKeyHash();\n    }\n\n\n    function randomDS_updateSessionPubKeysHash(\n        bytes32[] _newSessionPublicKeyHash\n    )\n        external\n    {\n        randomDS_updateSessionPublicKeyHash(_newSessionPublicKeyHash);\n    }\n\n    function query_withGasLimit(\n        uint256 _timestamp,\n        string _datasource,\n        string _arg,\n        uint256 _gasLimit\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return query1(\n            _timestamp,\n            _datasource,\n            _arg,\n            _gasLimit\n        );\n    }\n\n    function query1_withGasLimit(\n        uint256 _timestamp,\n        string _datasource,\n        string _arg,\n        uint256 _gasLimit\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return query1(\n            _timestamp,\n            _datasource,\n            _arg,\n            _gasLimit\n        );\n    }\n\n    function query2_withGasLimit(\n        uint256 _timestamp,\n        string _datasource,\n        string _arg1,\n        string _arg2,\n        uint256 _gasLimit\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return query2(\n            _timestamp,\n            _datasource,\n            _arg1,\n            _arg2,\n            _gasLimit\n        );\n    }\n\n    function queryN_withGasLimit(\n        uint256 _timestamp,\n        string _datasource,\n        bytes _args,\n        uint256 _gasLimit\n    )\n        payable\n        external\n        returns (bytes32 _id)\n    {\n        return queryN(\n            _timestamp,\n            _datasource,\n            _args,\n            _gasLimit\n        );\n    }\n}",
  "bytecode": "60806040526404a817c80060055534801561001957600080fd5b5060038054600160a060020a031916331790556147378061003b6000396000f3006080604052600436106104605763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301f9cd9681146104655780630e3a554c146104955780630fa3a07e14610523578063111b3ba41461053b578063130a002b1461056457806313725147146105b957806313c42ca1146105f95780631e1f3c61146106335780631f36e9b21461067357806323dc42e71461067b5780632ef3accc1461069e57806333889e8c146106f957806338c4a1b714610714578063399a80fd1461084d5780633aecd0e31461087357806340292f55146108a157806345362978146109045780634703385e14610923578063480981cd1461096057806349202c861461099957806349df728c14610a4e5780634a64c23f14610a7c5780634b14136c14610aaa5780634f52a96614610adb578063512c0b9c14610aec578063524f388914610b0c5780635284f94314610b6557806353a704b214610b9e57806357b958a01461092357806358b15c9514610be15780635c242c5914610c375780635e35359e14610cc8578063627fd3bb14610cff578063642b3f8514610d5257806367fe745c1461084d57806368742da614610d6a578063688dcfd714610d985780636c0f7ee714610dd25780636cd9fe5e14610dfe5780636d0dc65014610e2c5780636d1ae48314610e69578063742bf6bf14610f01578063757004371461084d5780637653740f14610f275780637722865914610f875780637a99a65a14610fb65780637bc9165b14610fff5780637e1c42051461102d578063801298fa146110fc57806380325b2d1461112a57806381ade3071461090457806383eed3d5146111bb5780638579cbde146111de57806385dee34c1461125557806388f3543a146112875780638a1fc9fa1461129f5780638f283970146112dd57806398cf6f221461130b5780639f71d9801461132a578063a2ec191a146113b8578063a32c1400146113dc578063a369e2d71461141c578063a4e5aee41461146f578063a782f9f5146114c2578063a8239d0b146114d7578063ab36247014611548578063abaa5f3e146115cb578063adf59f991461067b578063afdd7d6b146115e0578063b4c6154c14610b65578063b732b92214611657578063bcfaaa35146116e5578063bea75974146116fa578063bf1fe42014611728578063c2481c5414611740578063c281d19e1461177d578063c51be90f1461084d578063c53fbe0f146117bb578063c55c1cb614610f01578063c5a08b2f14611832578063c7876ea414611863578063ca6ad1e414611878578063cd29121214611890578063cedfd7c8146118eb578063d636c79014611255578063d959701614611928578063d9a0dfeb14611954578063db239951146119e2578063db37e42f14611a10578063de4b326214611a3c578063e839e65e14611a54578063e8be385314611a7f578063eaeae92c14611ab2578063eaefb88e14611ae0578063eb89c1a8146113dc578063f0e87a1a14611b1a578063fcce91c214611b5f575b600080fd5b34801561047157600080fd5b5061049373ffffffffffffffffffffffffffffffffffffffff60043516611bab565b005b3480156104a157600080fd5b506040805160206004803580820135838102808601850190965280855261049395369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750611c139650505050505050565b34801561052f57600080fd5b50610493600435611cba565b34801561054757600080fd5b50610550611d0d565b604080519115158252519081900360200190f35b34801561057057600080fd5b506040805160206004803580820135838102808601850190965280855261049395369593946024949385019291829185019084908082843750949750611d6d9650505050505050565b3480156105c557600080fd5b506105e773ffffffffffffffffffffffffffffffffffffffff60043516611dd1565b60408051918252519081900360200190f35b34801561060557600080fd5b506105e77fff0000000000000000000000000000000000000000000000000000000000000060043516611de3565b6105e76004803590602480357fff000000000000000000000000000000000000000000000000000000000000001691604435918201910135606435611df5565b6105e7611e3e565b6105e7600480359060248035808201929081013591604435908101910135611ec4565b3480156106aa57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526105e79436949293602493928401919081908401838280828437509497505093359450611f339350505050565b34801561070557600080fd5b506105e7600435602435611f47565b34801561072057600080fd5b506040805160206004803580820135838102808601850190965280855261049395369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750611f719650505050505050565b6105e7600480359060248035808201929081013591604435908101910135606435612018565b34801561087f57600080fd5b506105e773ffffffffffffffffffffffffffffffffffffffff6004351661208f565b3480156108ad57600080fd5b506108cf73ffffffffffffffffffffffffffffffffffffffff60043516612132565b604080517fff000000000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b6105e76024600480358281019290820135918135918201910135612166565b6105e76004803590602480357fff0000000000000000000000000000000000000000000000000000000000000016916044359182019101356121df565b6105e7600480357fff00000000000000000000000000000000000000000000000000000000000000169060248035908101910135612221565b604080516020600460443581810135601f81018490048402850184019095528484526105e794823594602480357fff00000000000000000000000000000000000000000000000000000000000000169536959460649492019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750509335945061226c9350505050565b348015610a5a57600080fd5b5061049373ffffffffffffffffffffffffffffffffffffffff6004351661246c565b348015610a8857600080fd5b5061049373ffffffffffffffffffffffffffffffffffffffff6004351661248a565b348015610ab657600080fd5b5061049373ffffffffffffffffffffffffffffffffffffffff60043516602435612493565b6104936004356024356044356124c4565b348015610af857600080fd5b506104936004803560248101910135612558565b348015610b1857600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526105e794369492936024939284019190819084018382808284375094975061258e9650505050505050565b6105e7600480357fff0000000000000000000000000000000000000000000000000000000000000016906024803590810191013561259a565b348015610baa57600080fd5b506104937fff00000000000000000000000000000000000000000000000000000000000000600435811690602435166044356125dd565b348015610bed57600080fd5b506105e77fff000000000000000000000000000000000000000000000000000000000000006004351660243573ffffffffffffffffffffffffffffffffffffffff60443516612669565b60408051602060046024803582810135601f81018590048502860185019096528585526105e795833595369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975050933594506127bf9350505050565b348015610cd457600080fd5b5061049373ffffffffffffffffffffffffffffffffffffffff600435811690602435166044356129b6565b348015610d0b57600080fd5b5061049373ffffffffffffffffffffffffffffffffffffffff600435167fff0000000000000000000000000000000000000000000000000000000000000060243516612ab4565b348015610d5e57600080fd5b506105e7600435612abe565b348015610d7657600080fd5b5061049373ffffffffffffffffffffffffffffffffffffffff60043516612add565b348015610da457600080fd5b506104937fff0000000000000000000000000000000000000000000000000000000000000060043516612b28565b348015610dde57600080fd5b506104936024600480358281019290820135918135918201910135612b31565b348015610e0a57600080fd5b5061049373ffffffffffffffffffffffffffffffffffffffff60043516612b98565b348015610e3857600080fd5b506105e77fff0000000000000000000000000000000000000000000000000000000000000060043516602435612bec565b348015610e7557600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261049394823573ffffffffffffffffffffffffffffffffffffffff1694602480357fff000000000000000000000000000000000000000000000000000000000000001695369594606494920191908190840183828082843750949750612bf99650505050505050565b6105e7600480359060248035808201929081013591604435908101910135606435612c79565b348015610f3357600080fd5b506104936004803573ffffffffffffffffffffffffffffffffffffffff1690602480357fff000000000000000000000000000000000000000000000000000000000000001691604435918201910135612ce5565b6105e7600480359060248035808201929081013591604435808201929081013591606435908101910135612d20565b6105e76004803590602480357fff000000000000000000000000000000000000000000000000000000000000001691604435808301929082013591606435918201910135612dc9565b34801561100b57600080fd5b5061055073ffffffffffffffffffffffffffffffffffffffff60043516612e39565b60408051602060046024803582810135601f81018590048502860185019096528585526105e795833595369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497505093359450612e4e9350505050565b34801561110857600080fd5b5061049373ffffffffffffffffffffffffffffffffffffffff600435166130ac565b60408051602060046024803582810135601f81018590048502860185019096528585526105e795833595369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975050933594506130fb9350505050565b6105e7600480359060248035808201929081013591604435908101910135613247565b3480156111ea57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526105e7943694929360249392840191908190840183828082843750949750508435955050505060209091013573ffffffffffffffffffffffffffffffffffffffff1690506132b6565b6105e760048035906024803580820192908101359160443580820192908101359160643590810191013560843561349a565b34801561129357600080fd5b506105e7600435613541565b3480156112ab57600080fd5b50610493602460048035828101929101359073ffffffffffffffffffffffffffffffffffffffff903516604435613553565b3480156112e957600080fd5b5061049373ffffffffffffffffffffffffffffffffffffffff600435166135e3565b6105e76024600480358281019290820135918135918201910135613632565b34801561133657600080fd5b506040805160206004803580820135838102808601850190965280855261049395369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506136a29650505050505050565b3480156113c457600080fd5b5061049360246004803582810192910135903561378b565b6105e76004803590602480357fff0000000000000000000000000000000000000000000000000000000000000016916044359182019101356064356137c6565b34801561142857600080fd5b506105e77fff000000000000000000000000000000000000000000000000000000000000006004351673ffffffffffffffffffffffffffffffffffffffff60243516613805565b34801561147b57600080fd5b5061049373ffffffffffffffffffffffffffffffffffffffff600435167fff0000000000000000000000000000000000000000000000000000000000000060243516613815565b3480156114ce57600080fd5b50610493613838565b3480156114e357600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526105e79436949293602493928401919081908401838280828437509497505050923573ffffffffffffffffffffffffffffffffffffffff16935061386f92505050565b34801561155457600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610493943694929360249392840191908190840183828082843750949750505083357fff000000000000000000000000000000000000000000000000000000000000001694505050602090910135905061387f565b3480156115d757600080fd5b506105e7613968565b604080516020600460443581810135601f81018490048402850184019095528484526105e794823594602480357fff00000000000000000000000000000000000000000000000000000000000000169536959460649492019190819084018382808284375094975050933594506139779350505050565b34801561166357600080fd5b506040805160206004803580820135838102808601850190965280855261049395369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750613b109650505050505050565b3480156116f157600080fd5b506105e7613b67565b34801561170657600080fd5b5061049373ffffffffffffffffffffffffffffffffffffffff60043516613bbc565b34801561173457600080fd5b50610493600435613c40565b6105e76004803590602480357fff000000000000000000000000000000000000000000000000000000000000001691604435918201910135613c4d565b34801561178957600080fd5b50611792613c8f565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b604080516020600460443581810135601f81018490048402850184019095528484526105e794823594602480357fff0000000000000000000000000000000000000000000000000000000000000016953695946064949201919081908401838280828437509497505093359450613ced9350505050565b34801561183e57600080fd5b506105e760043573ffffffffffffffffffffffffffffffffffffffff60243516613e3c565b34801561186f57600080fd5b506105e7613e8e565b34801561188457600080fd5b50610493600435613e94565b34801561189c57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104939436949293602493928401919081908401838280828437509497505093359450613ea69350505050565b3480156118f757600080fd5b506104937fff0000000000000000000000000000000000000000000000000000000000000060043516602435613eb2565b34801561193457600080fd5b506104936024600480358281019290820135918135918201910135613ebe565b34801561196057600080fd5b506040805160206004803580820135838102808601850190965280855261049395369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750613f1f9650505050505050565b3480156119ee57600080fd5b506108cf73ffffffffffffffffffffffffffffffffffffffff60043516613f98565b348015611a1c57600080fd5b506104936024600480358281019290820135918135918201910135613fe2565b348015611a4857600080fd5b50610493600435614043565b6105e760246004803582810192908201359181358083019290820135916044359182019101356140ce565b348015611a8b57600080fd5b5061049373ffffffffffffffffffffffffffffffffffffffff60043516602435151561416c565b348015611abe57600080fd5b5061179273ffffffffffffffffffffffffffffffffffffffff60043516614206565b348015611aec57600080fd5b506104937fff000000000000000000000000000000000000000000000000000000000000006004351661422e565b6105e7600480357fff0000000000000000000000000000000000000000000000000000000000000016906024803580820192908101359160443590810191013561428d565b6105e76004803590602480357fff0000000000000000000000000000000000000000000000000000000000000016916044358083019290820135916064359182019101356084356142fe565b611bb361436b565b73ffffffffffffffffffffffffffffffffffffffff81166000818152600d6020908152604080832092909255815192835290517ffaefc06c917e67083377d77146d5d5b28f2df2a9da66fff847c8c5c34a14ab169281900390910190a150565b6000611c1d6143b5565b5060005b8251811015611cb5578281815181101515611c3857fe5b60209081029091010151600b8054611c5382600183016146d2565b81548110611c5d57fe5b6000918252602090912001558151829082908110611c7757fe5b90602001906020020151600a60008584815181101515611c9357fe5b6020908102909101810151825281019190915260400160002055600101611c21565b505050565b3360009081526020819052604081205411611cd457600080fd5b60408051828152905133917f7a212ebee51485097ddd3fca6d4ea32b93e0b5ff7149da266189095c8f6a036e919081900360200190a250565b326000908152600160205260408120547f0100000000000000000000000000000000000000000000000000000000000000027fff000000000000000000000000000000000000000000000000000000000000001615611d6a575060015b90565b6000611d776143b5565b6000611d84600c826146d2565b50600090505b8151811015611dcd57600c8282815181101515611da357fe5b60209081029091018101518254600181810185556000948552929093209092019190915501611d8a565b5050565b600d6020526000908152604090205481565b6000611def8233613805565b92915050565b6000611e34868686868080601f016020809104026020016040519081016040528093929190818152602001838380828437508a9450613ced9350505050565b9695505050505050565b336000818152602081815260409182902080546001810190915582516c0100000000000000000000000030810282528502601482015260288101919091528251908190036048018120938152908101839052348183015290517fcbbbd0945b0123f2b62632915078d50b3b756603f8da41a64bca13737e208ea29181900360600190a190565b6000611e348686868080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8c018190048102820181019092528a815294508a935089925082915084018382808284375062030d4094506127bf9350505050565b6000611f408383336132b6565b9392505050565b8082026152088310801590611f665750828282811515611f6357fe5b04145b1515611def57600080fd5b6000611f7b61436b565b5060005b8551811015612010576120088682815181101515611f9957fe5b906020019060200201518683815181101515611fb157fe5b906020019060200201518684815181101515611fc957fe5b906020019060200201518685815181101515611fe157fe5b906020019060200201518686815181101515611ff957fe5b906020019060200201516143d9565b600101611f7f565b505050505050565b60006120848787878080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8d018190048102820181019092528b815294508b93508a92508291508401838280828437508a94506127bf9350505050565b979650505050505050565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009173ffffffffffffffffffffffffffffffffffffffff8416916370a082319160248082019260209290919082900301818787803b15801561210057600080fd5b505af1158015612114573d6000803e3d6000fd5b505050506040513d602081101561212a57600080fd5b505192915050565b6001602052600090815260409020547f01000000000000000000000000000000000000000000000000000000000000000281565b60006121d6600086868080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8c018190048102820181019092528a815294508a935089925082915084018382808284375062030d4094506127bf9350505050565b95945050505050565b60006121d6858585858080601f0160208091040260200160405190810160405280939291908181526020018383808284375062030d4094506139779350505050565b600061226460008585858080601f0160208091040260200160405190810160405280939291908181526020018383808284375062030d409450613ced9350505050565b949350505050565b600061227885836144aa565b503360008181526020818152604080832080546001810190915581516c0100000000000000000000000030810282528602601482015260288101919091528151908190036048018120858552600684528285205460078552838620548784528386018390529383018c90527fff00000000000000000000000000000000000000000000000000000000000000808c16606085015260c084018990527f010000000000000000000000000000000000000000000000000000000000000090910290811660e08401526101008301849052610120608084018181528b51918501919091528a5192977fc158eefabe26f38306464324a93676b7cd3f7eca56c40a613c648921699fcb1497909689968f968f968f968f968f969195909260a08501926101408601928b0191908190849084905b838110156123c05781810151838201526020016123a8565b50505050905090810190601f1680156123ed5780820380516001836020036101000a031916815260200191505b50838103825287518152875160209182019189019080838360005b83811015612420578181015183820152602001612408565b50505050905090810190601f16801561244d5780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390a195945050505050565b6124746143b5565b61248781336124828461208f565b6129b6565b50565b61248781612b98565b61249b61436b565b73ffffffffffffffffffffffffffffffffffffffff9091166000908152600d6020526040902055565b60006124d08383611f47565b9050348111156124df57600080fd5b803411156125185760405133903483900380156108fc02916000818181858888f19350505050158015612516573d6000803e3d6000fd5b505b6040805184815260208101849052815186927f84d01e805225e838aeaba7b6ddccfea6b6481a659a29c2808ca7ba0890fd6264928290030190a250505050565b611dcd82828080602002602001604051908101604052809392919081815260200183836020028082843750611d6d945050505050565b6000611def823361386f565b600061226460008585858080601f0160208091040260200160405190810160405280939291908181526020018383808284375062030d4094506139779350505050565b60006125e76143b5565b50604080517fff00000000000000000000000000000000000000000000000000000000000000808616825284166001808301919091529151908190036002019020600b8054919283929061263e90839083016146d2565b8154811061264857fe5b6000918252602080832090910192909255918252600a905260409020555050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040812054819060ff16156126a257600091506127b7565b5073ffffffffffffffffffffffffffffffffffffffff821660009081526007602090815260408083205491839052909120541580156126e4575062030d408411155b80156126f257506005548111155b80156127035750612701611d0d565b155b1561271157600091506127b7565b80151561271d57506005545b73ffffffffffffffffffffffffffffffffffffffff831660009081526006602090815260408083205481517fff00000000000000000000000000000000000000000000000000000000000000808b1682527f01000000000000000000000000000000000000000000000000000000000000009092029190911660018201528151908190036002019020835260099091529020548482020191505b509392505050565b60006127cb84836144bd565b503360008181526020818152604080832080546001810190915581516c0100000000000000000000000030810282528602601482015260288101919091528151908190036048018120858552600684528285205460078552838620548784528386018390529383018b905260a083018890527fff000000000000000000000000000000000000000000000000000000000000007f010000000000000000000000000000000000000000000000000000000000000090910290811660c084015260e08301849052610100606084018181528b51918501919091528a5192977fb76d0edd90c6a07aa3ff7a222d7f5933e29c6acc660c059c97837f05c4ca1a8497909689968e968e968e968e9690959394929390926080850192610120860192918b01918190849084905b8381101561290c5781810151838201526020016128f4565b50505050905090810190601f1680156129395780820380516001836020036101000a031916815260200191505b50838103825287518152875160209182019189019080838360005b8381101561296c578181015183820152602001612954565b50505050905090810190601f1680156129995780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390a1949350505050565b6129be6143b5565b73ffffffffffffffffffffffffffffffffffffffff821615156129e057600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612a8357600080fd5b505af1158015612a97573d6000803e3d6000fd5b505050506040513d6020811015612aad57600080fd5b5050505050565b611dcd8282613815565b600c805482908110612acc57fe5b600091825260209091200154905081565b612ae56143b5565b60405173ffffffffffffffffffffffffffffffffffffffff821690303180156108fc02916000818181858888f19350505050158015611dcd573d6000803e3d6000fd5b6124878161422e565b612b928484808060200260200160405190810160405280939291908181526020018383602002808284375050604080516020808a02828101820190935289825290955089945088935083925085019084908082843750611c13945050505050565b50505050565b612ba06143b5565b73ffffffffffffffffffffffffffffffffffffffff16600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b6000611f40838333612669565b612c016143b5565b5073ffffffffffffffffffffffffffffffffffffffff91909116600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00167f0100000000000000000000000000000000000000000000000000000000000000909204919091179055565b60006120848787878080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8d018190048102820181019092528b815294508b93508a92508291508401838280828437508a94506130fb9350505050565b612b92848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843750612bf9945050505050565b6000612dbd8888888080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8e018190048102820181019092528c815294508c93508b925082915084018382808284375050604080516020601f8d018190048102820181019092528b815294508b93508a925082915084018382808284375062030d409450612e4e9350505050565b98975050505050505050565b6000612084878787878080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8d018190048102820181019092528b815294508b93508a925082915084018382808284375062030d40945061226c9350505050565b60026020526000908152604090205460ff1681565b6000612e5a85836144bd565b503360008181526020818152604080832080546001810190915581516c0100000000000000000000000030810282528602601482015260288101919091528151908190036048018120858552600684528285205460078552838620548784528386018390529383018c905260c083018890527fff000000000000000000000000000000000000000000000000000000000000007f010000000000000000000000000000000000000000000000000000000000000090910290811660e08401526101008301849052610120606084018181528c51918501919091528b5192977faf30e4d66b2f1f23e63ef4591058a897f67e6867233e33ca3508b982dcc4129b97909689968f968f968f968f968f9691959092608085019260a0860192610140870192908d01918190849084905b83811015612f9f578181015183820152602001612f87565b50505050905090810190601f168015612fcc5780820380516001836020036101000a031916815260200191505b5084810383528951815289516020918201918b019080838360005b83811015612fff578181015183820152602001612fe7565b50505050905090810190601f16801561302c5780820380516001836020036101000a031916815260200191505b5084810382528851815288516020918201918a019080838360005b8381101561305f578181015183820152602001613047565b50505050905090810190601f16801561308c5780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390a195945050505050565b6130b46143b5565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600061310784836144bd565b503360008181526020818152604080832080546001810190915581516c0100000000000000000000000030810282528602601482015260288101919091528151908190036048018120858552600684528285205460078552838620548784528386018390529383018b905260a083018890527fff000000000000000000000000000000000000000000000000000000000000007f010000000000000000000000000000000000000000000000000000000000000090910290811660c084015260e08301849052610100606084018181528b51918501919091528a5192977f3af7d71c651d8670228b02a0b636ffa73a7f759ef99ff9c024bc3b044a72443897909689968e968e968e968e9690959394929390926080850192610120860192918b01918190849084908381101561290c5781810151838201526020016128f4565b6000611e348686868080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8c018190048102820181019092528a815294508a935089925082915084018382808284375062030d4094506130fb9350505050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040812054819060ff16156132ef57600091506127b7565b5073ffffffffffffffffffffffffffffffffffffffff82166000908152600760209081526040808320549183905290912054158015613331575062030d408411155b801561333f57506005548111155b8015613350575061334e611d0d565b155b1561335e57600091506127b7565b80151561336a57506005545b73ffffffffffffffffffffffffffffffffffffffff831660009081526006602090815260408083205490518851600994938a937f010000000000000000000000000000000000000000000000000000000000000002929182918501908083835b6020831061340757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016133ca565b5181517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60209485036101000a019081169019919091161790527fff00000000000000000000000000000000000000000000000000000000000000909516920191825250604080519182900360010190912085529184019490945291909101600020548684020193505050509392505050565b60006135348989898080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8f018190048102820181019092528d815294508d93508c925082915084018382808284375050604080516020601f8e018190048102820181019092528c815294508c93508b92508291508401838280828437508b9450612e4e9350505050565b9998505050505050505050565b60096020526000908152604090205481565b61355b6143b5565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600d602090815260409182902084905581519081019290925280825281018490527faf389ee747850e179d322750cb8a346d63b3af3823fad5cd4470b28e1423aaf79085908590859080606081018585808284376040519201829003965090945050505050a150505050565b6135eb6143b5565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006121d6600086868080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8c018190048102820181019092528a815294508a935089925082915084018382808284375062030d4094506130fb9350505050565b60006136ac6143b5565b5060005b8151811015611cb55782818151811015156136c757fe5b906020019060200201517f01000000000000000000000000000000000000000000000000000000000000000260066000848481518110151561370557fe5b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00167f01000000000000000000000000000000000000000000000000000000000000009092049190911790556001016136b0565b611cb583838080601f01602080910402602001604051908101604052809392919081815260200183838082843750879450613ea69350505050565b6000611e34868686868080601f016020809104026020016040519081016040528093929190818152602001838380828437508a94506139779350505050565b6000611f408362030d4084612669565b61381d6143b5565b611dcd82826020604051908101604052806000815250612bf9565b336000908152600e6020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6000611f408362030d40846132b6565b60006138896143b5565b83836040518083805190602001908083835b602083106138d857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161389b565b6001836020036101000a038019825116818451168082178552505050505050905001827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600101925050506040518091039020905080600b80805480919060010161263e91906146d2565b6000613972613b67565b905090565b600061398384836144aa565b503360008181526020818152604080832080546001810190915581516c0100000000000000000000000030810282528602601482015260288101919091528151908190036048018120858552600684528285205460078552838620548784528386018390529383018b90527fff00000000000000000000000000000000000000000000000000000000000000808b16606085015260a084018990527f010000000000000000000000000000000000000000000000000000000000000090910290811660c084015260e08301849052610100608084018181528a5191850191909152895192977fc91a7218b30de95a2c530aac470452b391fa0a304131b7e18889768e88aec29c97909689968e968e968e968e969095939492939092610120850192908901918190849084905b83811015613ac7578181015183820152602001613aaf565b50505050905090810190601f168015613af45780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390a1949350505050565b6000613b1a61436b565b5060005b8251811015611cb557613b5f8382815181101515613b3857fe5b906020019060200201518383815181101515613b5057fe5b906020019060200201516144cb565b600101613b1e565b600c5433600090815260208181526040808320548151908152905190819003909101902090918291811515613b9857fe5b069050600c81815481101515613baa57fe5b906000526020600020015491505b5090565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d602052604081205411613bec57600080fd5b336000908152600e6020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b613c486143b5565b600555565b60006121d6858585858080601f0160208091040260200160405190810160405280939291908181526020018383808284375062030d409450613ced9350505050565b326000908152600160205260408120547f0100000000000000000000000000000000000000000000000000000000000000027fff000000000000000000000000000000000000000000000000000000000000001615611d6a57503290565b6000613cf984836144aa565b503360008181526020818152604080832080546001810190915581516c0100000000000000000000000030810282528602601482015260288101919091528151908190036048018120858552600684528285205460078552838620548784528386018390529383018b90527fff00000000000000000000000000000000000000000000000000000000000000808b16606085015260a084018990527f010000000000000000000000000000000000000000000000000000000000000090910290811660c084015260e08301849052610100608084018181528a5191850191909152895192977f21973bb6503a3a8144379f099f5d39b40b399cef8c1038e6397d14ee1b5fbdfa97909689968e968e968e968e9690959394929390926101208501929089019181908490849083811015613ac7578181015183820152602001613aaf565b60085473ffffffffffffffffffffffffffffffffffffffff82166000908152600d60205260408120549091829102670de0b6b3a76400008502811515613e7e57fe5b04905060008111611f4057600080fd5b60085481565b33600090815260076020526040902055565b611dcd8260008361387f565b611dcd826000836125dd565b612b928484808060200260200160405190810160405280939291908181526020018383602002808284375050604080516020808a02828101820190935289825290955089945088935083925085019084908082843750613f1f945050505050565b6000613f296143b5565b5060005b8151811015611cb5578281815181101515613f4457fe5b90602001906020020151600760008484815181101515613f6057fe5b602090810290910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002055600101613f2d565b73ffffffffffffffffffffffffffffffffffffffff166000908152600160205260409020547f01000000000000000000000000000000000000000000000000000000000000000290565b612b928484808060200260200160405190810160405280939291908181526020018383602002808284375050604080516020808a028281018201909352898252909550899450889350839250850190849080828437506136a2945050505050565b600061404d61436b565b50600881905560005b600b54811015611dcd57600a6000600b8381548110151561407357fe5b90600052602060002001546000191660001916815260200190815260200160002054820260096000600b848154811015156140aa57fe5b60009182526020808320909101548352820192909252604001902055600101614056565b6000612084600088888080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8e018190048102820181019092528c815294508c93508b925082915084018382808284375050604080516020601f8d018190048102820181019092528b815294508b93508a925082915084018382808284375062030d409450612e4e9350505050565b61417461436b565b73ffffffffffffffffffffffffffffffffffffffff821660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016851515908117909155825184815291820181905282519093927f84feab93d65c19f28e91b26f8245938bf3a97dab7b8dafe3c8b028954e9ac934928290030190a35050565b600e6020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b33600090815260066020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00167f0100000000000000000000000000000000000000000000000000000000000000909204919091179055565b6000611e3460008787878080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8d018190048102820181019092528b815294508b93508a925082915084018382808284375062030d40945061226c9350505050565b6000612dbd888888888080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8e018190048102820181019092528c815294508c93508b92508291508401838280828437508b945061226c9350505050565b60035473ffffffffffffffffffffffffffffffffffffffff163314806143a8575060045473ffffffffffffffffffffffffffffffffffffffff1633145b15156143b357600080fd5b565b60035473ffffffffffffffffffffffffffffffffffffffff1633146143b357600080fd5b73ffffffffffffffffffffffffffffffffffffffff85166000908152602081905260409020541561440957600080fd5b73ffffffffffffffffffffffffffffffffffffffff909416600090815260066020908152604080832080547f01000000000000000000000000000000000000000000000000000000000000009097047fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009788161790558282528083209690965560028152858220805493151593909516929092179093556007905291902055565b611dcd6144b8838333612669565b614524565b611dcd6144b88383336132b6565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054156144fb57600080fd5b73ffffffffffffffffffffffffffffffffffffffff909116600090815260208190526040902055565b60008134141561453357611dcd565b813411156145705760405133903484900380156108fc02916000818181858888f1935050505015801561456a573d6000803e3d6000fd5b50611dcd565b50336000908152600e602052604090205473ffffffffffffffffffffffffffffffffffffffff1680156145b5576145b0336145ab8484613e3c565b61461c565b611dcd565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4572726f7220736574746c696e67207175657279207061796d656e7400000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8083166000818152600e602090815260408083205481517f23b872dd00000000000000000000000000000000000000000000000000000000815260048101959095523060248601526044850187905290519416936323b872dd93606480820194918390030190829087803b1580156146a857600080fd5b505af11580156146bc573d6000803e3d6000fd5b505050506040513d6020811015612b9257600080fd5b815481835581811115611cb557600083815260209020611cb5918101908301611d6a91905b80821115613bb857600081556001016146f75600a165627a7a723058208518ec9b3704fe18800d2c265f69d029b97ac9bf43adc9f10df2e72fafe44d550029"
}