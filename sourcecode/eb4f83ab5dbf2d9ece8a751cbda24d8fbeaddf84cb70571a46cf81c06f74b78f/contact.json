{
  "address": "0xcec7c850458e5b966df0e7aa6f8ab374e1cc2c68",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AOTreasury",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\npragma solidity >=0.5.4 <0.6.0;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\n\n\ninterface INameAccountRecovery {\n\tfunction isCompromised(address _id) external view returns (bool);\n}\n\n\ninterface INamePublicKey {\n\tfunction initialize(address _id, address _defaultKey, address _writerKey) external returns (bool);\n\n\tfunction isKeyExist(address _id, address _key) external view returns (bool);\n\n\tfunction getDefaultKey(address _id) external view returns (address);\n\n\tfunction whitelistAddKey(address _id, address _key) external returns (bool);\n}\n\n\ninterface INameTAOPosition {\n\tfunction senderIsAdvocate(address _sender, address _id) external view returns (bool);\n\tfunction senderIsListener(address _sender, address _id) external view returns (bool);\n\tfunction senderIsSpeaker(address _sender, address _id) external view returns (bool);\n\tfunction senderIsPosition(address _sender, address _id) external view returns (bool);\n\tfunction getAdvocate(address _id) external view returns (address);\n\tfunction nameIsAdvocate(address _nameId, address _id) external view returns (bool);\n\tfunction nameIsPosition(address _nameId, address _id) external view returns (bool);\n\tfunction initialize(address _id, address _advocateId, address _listenerId, address _speakerId) external returns (bool);\n\tfunction determinePosition(address _sender, address _id) external view returns (uint256);\n}\n\n\ncontract TheAO {\n\taddress public theAO;\n\taddress public nameTAOPositionAddress;\n\n\t// Check whether an address is whitelisted and granted access to transact\n\t// on behalf of others\n\tmapping (address => bool) public whitelist;\n\n\tconstructor() public {\n\t\ttheAO = msg.sender;\n\t}\n\n\t/**\n\t * @dev Checks if msg.sender is in whitelist.\n\t */\n\tmodifier inWhitelist() {\n\t\trequire (whitelist[msg.sender] == true);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n\t/**\n\t * @dev Multiplies two numbers, throws on overflow.\n\t */\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tc = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Integer division of two numbers, truncating the quotient.\n\t */\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\t// uint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn a / b;\n\t}\n\n\t/**\n\t * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n\t */\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\t/**\n\t * @dev Adds two numbers, throws on overflow.\n\t */\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\tc = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\n\ninterface IAOTreasury {\n\tfunction toBase(uint256 integerAmount, uint256 fractionAmount, bytes8 denominationName) external view returns (uint256);\n\tfunction isDenominationExist(bytes8 denominationName) external view returns (bool);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontract TokenERC20 {\n\t// Public variables of the token\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals = 18;\n\t// 18 decimals is the strongly suggested default, avoid changing it\n\tuint256 public totalSupply;\n\n\t// This creates an array with all balances\n\tmapping (address => uint256) public balanceOf;\n\tmapping (address => mapping (address => uint256)) public allowance;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\t// This notifies clients about the amount burnt\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * Constructor function\n\t *\n\t * Initializes contract with initial supply tokens to the creator of the contract\n\t */\n\tconstructor (uint256 initialSupply, string memory tokenName, string memory tokenSymbol) public {\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n\t\tname = tokenName;                                   // Set the name for display purposes\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\n\t}\n\n\t/**\n\t * Internal transfer, only can be called by this contract\n\t */\n\tfunction _transfer(address _from, address _to, uint _value) internal {\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(_to != address(0));\n\t\t// Check if the sender has enough\n\t\trequire(balanceOf[_from] >= _value);\n\t\t// Check for overflows\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\n\t\t// Save this for an assertion in the future\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t\t// Subtract from the sender\n\t\tbalanceOf[_from] -= _value;\n\t\t// Add the same to the recipient\n\t\tbalanceOf[_to] += _value;\n\t\temit Transfer(_from, _to, _value);\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\t}\n\n\t/**\n\t * Transfer tokens\n\t *\n\t * Send `_value` tokens to `_to` from your account\n\t *\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n\t\t_transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Transfer tokens from other address\n\t *\n\t * Send `_value` tokens to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\n\t\tallowance[_from][msg.sender] -= _value;\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t */\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\tallowance[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address and notify\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t * @param _extraData some extra information to send to the approved contract\n\t */\n\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n\t\ttokenRecipient spender = tokenRecipient(_spender);\n\t\tif (approve(_spender, _value)) {\n\t\t\tspender.receiveApproval(msg.sender, _value, address(this), _extraData);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Destroy tokens\n\t *\n\t * Remove `_value` tokens from the system irreversibly\n\t *\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burn(uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\n\t\ttotalSupply -= _value;                      // Updates totalSupply\n\t\temit Burn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Destroy tokens from other account\n\t *\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n\t\ttotalSupply -= _value;                              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n}\n\n\n/**\n * @title TAO\n */\ncontract TAO {\n\tusing SafeMath for uint256;\n\n\taddress public vaultAddress;\n\tstring public name;\t\t\t\t// the name for this TAO\n\taddress public originId;\t\t// the ID of the Name that created this TAO. If Name, it's the eth address\n\n\t// TAO's data\n\tstring public datHash;\n\tstring public database;\n\tstring public keyValue;\n\tbytes32 public contentId;\n\n\t/**\n\t * 0 = TAO\n\t * 1 = Name\n\t */\n\tuint8 public typeId;\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _vaultAddress\n\t) public {\n\t\tname = _name;\n\t\toriginId = _originId;\n\t\tdatHash = _datHash;\n\t\tdatabase = _database;\n\t\tkeyValue = _keyValue;\n\t\tcontentId = _contentId;\n\n\t\t// Creating TAO\n\t\ttypeId = 0;\n\n\t\tvaultAddress = _vaultAddress;\n\t}\n\n\t/**\n\t * @dev Checks if calling address is Vault contract\n\t */\n\tmodifier onlyVault {\n\t\trequire (msg.sender == vaultAddress);\n\t\t_;\n\t}\n\n\t/**\n\t * Will receive any ETH sent\n\t */\n\tfunction () external payable {\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ETH from this TAO to `_recipient`\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\t_recipient.transfer(_amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ERC20 Token from this TAO to `_recipient`\n\t * @param _erc20TokenAddress The address of ERC20 Token\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferERC20(address _erc20TokenAddress, address _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\tTokenERC20 _erc20 = TokenERC20(_erc20TokenAddress);\n\t\t_erc20.transfer(_recipient, _amount);\n\t\treturn true;\n\t}\n}\n\n\n\n\n/**\n * @title Name\n */\ncontract Name is TAO {\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name, address _originId, string memory _datHash, string memory _database, string memory _keyValue, bytes32 _contentId, address _vaultAddress)\n\t\tTAO (_name, _originId, _datHash, _database, _keyValue, _contentId, _vaultAddress) public {\n\t\t// Creating Name\n\t\ttypeId = 1;\n\t}\n}\n\n\n\n\n/**\n * @title AOLibrary\n */\nlibrary AOLibrary {\n\tusing SafeMath for uint256;\n\n\tuint256 constant private _MULTIPLIER_DIVISOR = 10 ** 6; // 1000000 = 1\n\tuint256 constant private _PERCENTAGE_DIVISOR = 10 ** 6; // 100% = 1000000\n\n\t/**\n\t * @dev Check whether or not the given TAO ID is a TAO\n\t * @param _taoId The ID of the TAO\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isTAO(address _taoId) public view returns (bool) {\n\t\treturn (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);\n\t}\n\n\t/**\n\t * @dev Check whether or not the given Name ID is a Name\n\t * @param _nameId The ID of the Name\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isName(address _nameId) public view returns (bool) {\n\t\treturn (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);\n\t}\n\n\t/**\n\t * @dev Check if `_tokenAddress` is a valid ERC20 Token address\n\t * @param _tokenAddress The ERC20 Token address to check\n\t */\n\tfunction isValidERC20TokenAddress(address _tokenAddress) public view returns (bool) {\n\t\tif (_tokenAddress == address(0)) {\n\t\t\treturn false;\n\t\t}\n\t\tTokenERC20 _erc20 = TokenERC20(_tokenAddress);\n\t\treturn (_erc20.totalSupply() >= 0 && bytes(_erc20.name()).length > 0 && bytes(_erc20.symbol()).length > 0);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t * @param _sender The address to check\n\t * @param _theAO The AO address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t * @return true if yes, false otherwise\n\t */\n\tfunction isTheAO(address _sender, address _theAO, address _nameTAOPositionAddress) public view returns (bool) {\n\t\treturn (_sender == _theAO ||\n\t\t\t(\n\t\t\t\t(isTAO(_theAO) || isName(_theAO)) &&\n\t\t\t\t_nameTAOPositionAddress != address(0) &&\n\t\t\t\tINameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate percentage.\n\t *\t\tPercentage stored throughout AO contracts covers 4 decimals,\n\t *\t\tso 1% is 10000, 1.25% is 12500, etc\n\t */\n\tfunction PERCENTAGE_DIVISOR() public pure returns (uint256) {\n\t\treturn _PERCENTAGE_DIVISOR;\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate multiplier.\n\t *\t\tMultiplier stored throughout AO contracts covers 6 decimals,\n\t *\t\tso 1 is 1000000, 0.023 is 23000, etc\n\t */\n\tfunction MULTIPLIER_DIVISOR() public pure returns (uint256) {\n\t\treturn _MULTIPLIER_DIVISOR;\n\t}\n\n\t/**\n\t * @dev deploy a TAO\n\t * @param _name The name of the TAO\n\t * @param _originId The Name ID the creates the TAO\n\t * @param _datHash The datHash of this TAO\n\t * @param _database The database for this TAO\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this TAO\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployTAO(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (TAO _tao) {\n\t\t_tao = new TAO(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev deploy a Name\n\t * @param _name The name of the Name\n\t * @param _originId The eth address the creates the Name\n\t * @param _datHash The datHash of this Name\n\t * @param _database The database for this Name\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this Name\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployName(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (Name _myName) {\n\t\t_myName = new Name(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev Calculate the new weighted multiplier when adding `_additionalPrimordialAmount` at `_additionalWeightedMultiplier` to the current `_currentPrimordialBalance` at `_currentWeightedMultiplier`\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _currentPrimordialBalance Account's current primordial ion balance\n\t * @param _additionalWeightedMultiplier The weighted multiplier to be added\n\t * @param _additionalPrimordialAmount The primordial ion amount to be added\n\t * @return the new primordial weighted multiplier\n\t */\n\tfunction calculateWeightedMultiplier(uint256 _currentWeightedMultiplier, uint256 _currentPrimordialBalance, uint256 _additionalWeightedMultiplier, uint256 _additionalPrimordialAmount) public pure returns (uint256) {\n\t\tif (_currentWeightedMultiplier > 0) {\n\t\t\tuint256 _totalWeightedIons = (_currentWeightedMultiplier.mul(_currentPrimordialBalance)).add(_additionalWeightedMultiplier.mul(_additionalPrimordialAmount));\n\t\t\tuint256 _totalIons = _currentPrimordialBalance.add(_additionalPrimordialAmount);\n\t\t\treturn _totalWeightedIons.div(_totalIons);\n\t\t} else {\n\t\t\treturn _additionalWeightedMultiplier;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the primordial ion multiplier on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Multiplier = S\n\t *\t\tEnding Multiplier = E\n\t *\t\tTo Purchase = P\n\t *\t\tMultiplier for next Lot of Amount = (1 - ((M + P/2) / T)) x (S-E)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion mintable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting multiplier in (10 ** 6)\n\t * @param _endingMultiplier The ending multiplier in (10 ** 6)\n\t * @return The multiplier in (10 ** 6)\n\t */\n\tfunction calculatePrimordialMultiplier(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * Multiplier = (1 - (temp / T)) x (S-E)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply multiplier with _MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR to account for 6 decimals\n\t\t\t * so, Multiplier = (_MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR) * (1 - (temp / T)) * (S-E)\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR * (1 - (temp / T))) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Take out the division by _MULTIPLIER_DIVISOR for now and include in later calculation\n\t\t\t * Multiplier = (_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)\n\t\t\t */\n\t\t\tuint256 multiplier = (_MULTIPLIER_DIVISOR.sub(_MULTIPLIER_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier));\n\t\t\t/**\n\t\t\t * Since _startingMultiplier and _endingMultiplier are in 6 decimals\n\t\t\t * Need to divide multiplier by _MULTIPLIER_DIVISOR\n\t\t\t */\n\t\t\treturn multiplier.div(_MULTIPLIER_DIVISOR);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus percentage of network ion on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Network Bonus Multiplier = Bs\n\t *\t\tEnding Network Bonus Multiplier = Be\n\t *\t\tTo Purchase = P\n\t *\t\tAO Bonus % = B% = (1 - ((M + P/2) / T)) x (Bs-Be)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusPercentage(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * B% = (1 - (temp / T)) x (Bs-Be)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply B% with _PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR to account for 6 decimals\n\t\t\t * so, B% = (_PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR) * (1 - (temp / T)) * (Bs-Be)\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR * (1 - (temp / T))) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * Take out the division by _PERCENTAGE_DIVISOR for now and include in later calculation\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)\n\t\t\t * But since Bs and Be are in 6 decimals, need to divide by _PERCENTAGE_DIVISOR\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be) / _PERCENTAGE_DIVISOR\n\t\t\t */\n\t\t\tuint256 bonusPercentage = (_PERCENTAGE_DIVISOR.sub(_PERCENTAGE_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier)).div(_PERCENTAGE_DIVISOR);\n\t\t\treturn bonusPercentage;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus amount of network ion on a given lot\n\t *\t\tAO Bonus Amount = B% x P\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusAmount(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tuint256 bonusPercentage = calculateNetworkBonusPercentage(_purchaseAmount, _totalPrimordialMintable, _totalPrimordialMinted, _startingMultiplier, _endingMultiplier);\n\t\t/**\n\t\t * Since bonusPercentage is in _PERCENTAGE_DIVISOR format, need to divide it with _PERCENTAGE DIVISOR\n\t\t * when calculating the network ion bonus amount\n\t\t */\n\t\tuint256 networkBonus = bonusPercentage.mul(_purchaseAmount).div(_PERCENTAGE_DIVISOR);\n\t\treturn networkBonus;\n\t}\n\n\t/**\n\t * @dev Calculate the maximum amount of Primordial an account can burn\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_maximumMultiplier = S\n\t *\t\t_amountToBurn = B\n\t *\t\tB = ((S x P) - (P x M)) / S\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _maximumMultiplier The maximum multiplier of this account\n\t * @return The maximum burn amount\n\t */\n\tfunction calculateMaximumBurnAmount(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _maximumMultiplier) public pure returns (uint256) {\n\t\treturn (_maximumMultiplier.mul(_primordialBalance).sub(_primordialBalance.mul(_currentWeightedMultiplier))).div(_maximumMultiplier);\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after burning primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToBurn = B\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P - B)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToBurn The amount of primordial ion to burn\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterBurn(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToBurn) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.sub(_amountToBurn));\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after converting network ion to primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToConvert = C\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P + C)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToConvert The amount of network ion to convert\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterConversion(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToConvert) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.add(_amountToConvert));\n\t}\n\n\t/**\n\t * @dev count num of digits\n\t * @param number uint256 of the nuumber to be checked\n\t * @return uint8 num of digits\n\t */\n\tfunction numDigits(uint256 number) public pure returns (uint8) {\n\t\tuint8 digits = 0;\n\t\twhile(number != 0) {\n\t\t\tnumber = number.div(10);\n\t\t\tdigits++;\n\t\t}\n\t\treturn digits;\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\ninterface ionRecipient {\n\tfunction receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;\n}\n\n/**\n * @title AOIonInterface\n */\ncontract AOIonInterface is TheAO {\n\tusing SafeMath for uint256;\n\n\taddress public namePublicKeyAddress;\n\taddress public nameAccountRecoveryAddress;\n\n\tINameTAOPosition internal _nameTAOPosition;\n\tINamePublicKey internal _namePublicKey;\n\tINameAccountRecovery internal _nameAccountRecovery;\n\n\t// Public variables of the contract\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals;\n\tuint256 public totalSupply;\n\n\t// To differentiate denomination of AO\n\tuint256 public powerOfTen;\n\n\t/***** NETWORK ION VARIABLES *****/\n\tuint256 public sellPrice;\n\tuint256 public buyPrice;\n\n\t// This creates an array with all balances\n\tmapping (address => uint256) public balanceOf;\n\tmapping (address => mapping (address => uint256)) public allowance;\n\tmapping (address => bool) public frozenAccount;\n\tmapping (address => uint256) public stakedBalance;\n\tmapping (address => uint256) public escrowedBalance;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent FrozenFunds(address target, bool frozen);\n\tevent Stake(address indexed from, uint256 value);\n\tevent Unstake(address indexed from, uint256 value);\n\tevent Escrow(address indexed from, address indexed to, uint256 value);\n\tevent Unescrow(address indexed from, uint256 value);\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\t// This notifies clients about the amount burnt\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor(string memory _name, string memory _symbol, address _nameTAOPositionAddress, address _namePublicKeyAddress, address _nameAccountRecoveryAddress) public {\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\n\t\tsetNamePublicKeyAddress(_namePublicKeyAddress);\n\t\tsetNameAccountRecoveryAddress(_nameAccountRecoveryAddress);\n\t\tname = _name;           // Set the name for display purposes\n\t\tsymbol = _symbol;       // Set the symbol for display purposes\n\t\tpowerOfTen = 0;\n\t\tdecimals = 0;\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t */\n\tmodifier onlyTheAO {\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\n\t\t_;\n\t}\n\n\t/***** The AO ONLY METHODS *****/\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n\n\t/**\n\t * @dev The AO set the NameTAOPosition Address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\n\t\trequire (_nameTAOPositionAddress != address(0));\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\n\t\t_nameTAOPosition = INameTAOPosition(nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the NamePublicKey Address\n\t * @param _namePublicKeyAddress The address of NamePublicKey\n\t */\n\tfunction setNamePublicKeyAddress(address _namePublicKeyAddress) public onlyTheAO {\n\t\trequire (_namePublicKeyAddress != address(0));\n\t\tnamePublicKeyAddress = _namePublicKeyAddress;\n\t\t_namePublicKey = INamePublicKey(namePublicKeyAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the NameAccountRecovery Address\n\t * @param _nameAccountRecoveryAddress The address of NameAccountRecovery\n\t */\n\tfunction setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {\n\t\trequire (_nameAccountRecoveryAddress != address(0));\n\t\tnameAccountRecoveryAddress = _nameAccountRecoveryAddress;\n\t\t_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);\n\t}\n\n\t/**\n\t * @dev Allows TheAO to transfer `_amount` of ETH from this address to `_recipient`\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t */\n\tfunction transferEth(address payable _recipient, uint256 _amount) public onlyTheAO {\n\t\trequire (_recipient != address(0));\n\t\t_recipient.transfer(_amount);\n\t}\n\n\t/**\n\t * @dev Prevent/Allow target from sending & receiving ions\n\t * @param target Address to be frozen\n\t * @param freeze Either to freeze it or not\n\t */\n\tfunction freezeAccount(address target, bool freeze) public onlyTheAO {\n\t\tfrozenAccount[target] = freeze;\n\t\temit FrozenFunds(target, freeze);\n\t}\n\n\t/**\n\t * @dev Allow users to buy ions for `newBuyPrice` eth and sell ions for `newSellPrice` eth\n\t * @param newSellPrice Price users can sell to the contract\n\t * @param newBuyPrice Price users can buy from the contract\n\t */\n\tfunction setPrices(uint256 newSellPrice, uint256 newBuyPrice) public onlyTheAO {\n\t\tsellPrice = newSellPrice;\n\t\tbuyPrice = newBuyPrice;\n\t}\n\n\t/***** NETWORK ION WHITELISTED ADDRESS ONLY METHODS *****/\n\t/**\n\t * @dev Create `mintedAmount` ions and send it to `target`\n\t * @param target Address to receive the ions\n\t * @param mintedAmount The amount of ions it will receive\n\t * @return true on success\n\t */\n\tfunction mint(address target, uint256 mintedAmount) public inWhitelist returns (bool) {\n\t\t_mint(target, mintedAmount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Stake `_value` ions on behalf of `_from`\n\t * @param _from The address of the target\n\t * @param _value The amount to stake\n\t * @return true on success\n\t */\n\tfunction stakeFrom(address _from, uint256 _value) public inWhitelist returns (bool) {\n\t\trequire (balanceOf[_from] >= _value);\t\t\t\t\t\t// Check if the targeted balance is enough\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);\t\t\t// Subtract from the targeted balance\n\t\tstakedBalance[_from] = stakedBalance[_from].add(_value);\t// Add to the targeted staked balance\n\t\temit Stake(_from, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Unstake `_value` ions on behalf of `_from`\n\t * @param _from The address of the target\n\t * @param _value The amount to unstake\n\t * @return true on success\n\t */\n\tfunction unstakeFrom(address _from, uint256 _value) public inWhitelist returns (bool) {\n\t\trequire (stakedBalance[_from] >= _value);\t\t\t\t\t// Check if the targeted staked balance is enough\n\t\tstakedBalance[_from] = stakedBalance[_from].sub(_value);\t// Subtract from the targeted staked balance\n\t\tbalanceOf[_from] = balanceOf[_from].add(_value);\t\t\t// Add to the targeted balance\n\t\temit Unstake(_from, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Store `_value` from `_from` to `_to` in escrow\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value The amount of network ions to put in escrow\n\t * @return true on success\n\t */\n\tfunction escrowFrom(address _from, address _to, uint256 _value) public inWhitelist returns (bool) {\n\t\trequire (balanceOf[_from] >= _value);\t\t\t\t\t\t// Check if the targeted balance is enough\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);\t\t\t// Subtract from the targeted balance\n\t\tescrowedBalance[_to] = escrowedBalance[_to].add(_value);\t// Add to the targeted escrowed balance\n\t\temit Escrow(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Create `mintedAmount` ions and send it to `target` escrow balance\n\t * @param target Address to receive ions\n\t * @param mintedAmount The amount of ions it will receive in escrow\n\t */\n\tfunction mintEscrow(address target, uint256 mintedAmount) public inWhitelist returns (bool) {\n\t\tescrowedBalance[target] = escrowedBalance[target].add(mintedAmount);\n\t\ttotalSupply = totalSupply.add(mintedAmount);\n\t\temit Escrow(address(this), target, mintedAmount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Release escrowed `_value` from `_from`\n\t * @param _from The address of the sender\n\t * @param _value The amount of escrowed network ions to be released\n\t * @return true on success\n\t */\n\tfunction unescrowFrom(address _from, uint256 _value) public inWhitelist returns (bool) {\n\t\trequire (escrowedBalance[_from] >= _value);\t\t\t\t\t\t// Check if the targeted escrowed balance is enough\n\t\tescrowedBalance[_from] = escrowedBalance[_from].sub(_value);\t// Subtract from the targeted escrowed balance\n\t\tbalanceOf[_from] = balanceOf[_from].add(_value);\t\t\t\t// Add to the targeted balance\n\t\temit Unescrow(_from, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t *\n\t * @dev Whitelisted address remove `_value` ions from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction whitelistBurnFrom(address _from, uint256 _value) public inWhitelist returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance\n\t\ttotalSupply = totalSupply.sub(_value);              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Whitelisted address transfer ions from other address\n\t *\n\t * Send `_value` ions to `_to` on behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction whitelistTransferFrom(address _from, address _to, uint256 _value) public inWhitelist returns (bool success) {\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * Transfer ions\n\t *\n\t * Send `_value` ions to `_to` from your account\n\t *\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n\t\t_transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Transfer ions from other address\n\t *\n\t * Send `_value` ions to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\n\t\tallowance[_from][msg.sender] -= _value;\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Transfer ions between public key addresses in a Name\n\t * @param _nameId The ID of the Name\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferBetweenPublicKeys(address _nameId, address _from, address _to, uint256 _value) public returns (bool success) {\n\t\trequire (AOLibrary.isName(_nameId));\n\t\trequire (_nameTAOPosition.senderIsAdvocate(msg.sender, _nameId));\n\t\trequire (!_nameAccountRecovery.isCompromised(_nameId));\n\t\t// Make sure _from exist in the Name's Public Keys\n\t\trequire (_namePublicKey.isKeyExist(_nameId, _from));\n\t\t// Make sure _to exist in the Name's Public Keys\n\t\trequire (_namePublicKey.isKeyExist(_nameId, _to));\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address\n\t *\n\t * Allows `_spender` to spend no more than `_value` ions in your behalf\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t */\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\tallowance[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address and notify\n\t *\n\t * Allows `_spender` to spend no more than `_value` ions in your behalf, and then ping the contract about it\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t * @param _extraData some extra information to send to the approved contract\n\t */\n\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n\t\tionRecipient spender = ionRecipient(_spender);\n\t\tif (approve(_spender, _value)) {\n\t\t\tspender.receiveApproval(msg.sender, _value, address(this), _extraData);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Destroy ions\n\t *\n\t * Remove `_value` ions from the system irreversibly\n\t *\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burn(uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\n\t\ttotalSupply -= _value;                      // Updates totalSupply\n\t\temit Burn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Destroy ions from other account\n\t *\n\t * Remove `_value` ions from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n\t\ttotalSupply -= _value;                              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Buy ions from contract by sending ether\n\t */\n\tfunction buy() public payable {\n\t\trequire (buyPrice > 0);\n\t\tuint256 amount = msg.value.div(buyPrice);\n\t\t_transfer(address(this), msg.sender, amount);\n\t}\n\n\t/**\n\t * @dev Sell `amount` ions to contract\n\t * @param amount The amount of ions to be sold\n\t */\n\tfunction sell(uint256 amount) public {\n\t\trequire (sellPrice > 0);\n\t\taddress myAddress = address(this);\n\t\trequire (myAddress.balance >= amount.mul(sellPrice));\n\t\t_transfer(msg.sender, address(this), amount);\n\t\tmsg.sender.transfer(amount.mul(sellPrice));\n\t}\n\n\t/***** INTERNAL METHODS *****/\n\t/**\n\t * @dev Send `_value` ions from `_from` to `_to`\n\t * @param _from The address of sender\n\t * @param _to The address of the recipient\n\t * @param _value The amount to send\n\t */\n\tfunction _transfer(address _from, address _to, uint256 _value) internal {\n\t\trequire (_to != address(0));\t\t\t\t\t\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire (balanceOf[_from] >= _value);\t\t\t\t\t// Check if the sender has enough\n\t\trequire (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\n\t\trequire (!frozenAccount[_from]);\t\t\t\t\t\t// Check if sender is frozen\n\t\trequire (!frozenAccount[_to]);\t\t\t\t\t\t\t// Check if recipient is frozen\n\t\tuint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);        // Subtract from the sender\n\t\tbalanceOf[_to] = balanceOf[_to].add(_value);            // Add the same to the recipient\n\t\temit Transfer(_from, _to, _value);\n\t\tassert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n\t}\n\n\t/**\n\t * @dev Create `mintedAmount` ions and send it to `target`\n\t * @param target Address to receive the ions\n\t * @param mintedAmount The amount of ions it will receive\n\t */\n\tfunction _mint(address target, uint256 mintedAmount) internal {\n\t\tbalanceOf[target] = balanceOf[target].add(mintedAmount);\n\t\ttotalSupply = totalSupply.add(mintedAmount);\n\t\temit Transfer(address(0), address(this), mintedAmount);\n\t\temit Transfer(address(this), target, mintedAmount);\n\t}\n}\n\n\n/**\n * @title AOTreasury\n *\n * The purpose of this contract is to list all of the valid denominations of AOIon and do the conversion between denominations\n */\ncontract AOTreasury is TheAO, IAOTreasury {\n\tusing SafeMath for uint256;\n\n\tuint256 public totalDenominations;\n\tuint256 public totalDenominationExchanges;\n\n\tstruct Denomination {\n\t\tbytes8 name;\n\t\taddress denominationAddress;\n\t}\n\n\tstruct DenominationExchange {\n\t\tbytes32 exchangeId;\n\t\taddress sender;\t\t\t// The sender address\n\t\taddress fromDenominationAddress;\t// The address of the from denomination\n\t\taddress toDenominationAddress;\t\t// The address of the target denomination\n\t\tuint256 amount;\n\t}\n\n\t// Mapping from denomination index to Denomination object\n\t// The list is in order from lowest denomination to highest denomination\n\t// i.e, denominations[1] is the base denomination\n\tmapping (uint256 => Denomination) internal denominations;\n\n\t// Mapping from denomination ID to index of denominations\n\tmapping (bytes8 => uint256) internal denominationIndex;\n\n\t// Mapping from exchange id to DenominationExchange object\n\tmapping (uint256 => DenominationExchange) internal denominationExchanges;\n\tmapping (bytes32 => uint256) internal denominationExchangeIdLookup;\n\n\t// Event to be broadcasted to public when a exchange between denominations happens\n\tevent ExchangeDenomination(address indexed account, bytes32 indexed exchangeId, uint256 amount, address fromDenominationAddress, string fromDenominationSymbol, address toDenominationAddress, string toDenominationSymbol);\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor(address _nameTAOPositionAddress) public {\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t */\n\tmodifier onlyTheAO {\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Checks if denomination is valid\n\t */\n\tmodifier isValidDenomination(bytes8 denominationName) {\n\t\trequire (this.isDenominationExist(denominationName));\n\t\t_;\n\t}\n\n\t/***** The AO ONLY METHODS *****/\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n\n\t/**\n\t * @dev The AO set the NameTAOPosition Address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\n\t\trequire (_nameTAOPositionAddress != address(0));\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\n\t}\n\n\t/**\n\t * @dev The AO adds denomination and the contract address associated with it\n\t * @param denominationName The name of the denomination, i.e ao, kilo, mega, etc.\n\t * @param denominationAddress The address of the denomination ion\n\t * @return true on success\n\t */\n\tfunction addDenomination(bytes8 denominationName, address denominationAddress) public onlyTheAO returns (bool) {\n\t\trequire (denominationName.length > 0);\n\t\trequire (denominationName[0] != 0);\n\t\trequire (denominationAddress != address(0));\n\t\trequire (denominationIndex[denominationName] == 0);\n\t\ttotalDenominations++;\n\t\t// Make sure the new denomination is higher than the previous\n\t\tif (totalDenominations > 1) {\n\t\t\tAOIonInterface _lastDenominationIon = AOIonInterface(denominations[totalDenominations - 1].denominationAddress);\n\t\t\tAOIonInterface _newDenominationIon = AOIonInterface(denominationAddress);\n\t\t\trequire (_newDenominationIon.powerOfTen() > _lastDenominationIon.powerOfTen());\n\t\t}\n\t\tdenominations[totalDenominations].name = denominationName;\n\t\tdenominations[totalDenominations].denominationAddress = denominationAddress;\n\t\tdenominationIndex[denominationName] = totalDenominations;\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev The AO updates denomination address or activates/deactivates the denomination\n\t * @param denominationName The name of the denomination, i.e ao, kilo, mega, etc.\n\t * @param denominationAddress The address of the denomination ion\n\t * @return true on success\n\t */\n\tfunction updateDenomination(bytes8 denominationName, address denominationAddress) public onlyTheAO isValidDenomination(denominationName) returns (bool) {\n\t\trequire (denominationAddress != address(0));\n\t\tuint256 _denominationNameIndex = denominationIndex[denominationName];\n\t\tAOIonInterface _newDenominationIon = AOIonInterface(denominationAddress);\n\t\tif (_denominationNameIndex > 1) {\n\t\t\tAOIonInterface _prevDenominationIon = AOIonInterface(denominations[_denominationNameIndex - 1].denominationAddress);\n\t\t\trequire (_newDenominationIon.powerOfTen() > _prevDenominationIon.powerOfTen());\n\t\t}\n\t\tif (_denominationNameIndex < totalDenominations) {\n\t\t\tAOIonInterface _lastDenominationIon = AOIonInterface(denominations[totalDenominations].denominationAddress);\n\t\t\trequire (_newDenominationIon.powerOfTen() < _lastDenominationIon.powerOfTen());\n\t\t}\n\t\tdenominations[denominationIndex[denominationName]].denominationAddress = denominationAddress;\n\t\treturn true;\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * @dev Check if denomination exist given a name\n\t * @param denominationName The denomination name to check\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isDenominationExist(bytes8 denominationName) external view returns (bool) {\n\t\treturn (denominationName.length > 0 &&\n\t\t\tdenominationName[0] != 0 &&\n\t\t\tdenominationIndex[denominationName] > 0 &&\n\t\t\tdenominations[denominationIndex[denominationName]].denominationAddress != address(0)\n\t   );\n\t}\n\n\t/**\n\t * @dev Get denomination info based on name\n\t * @param denominationName The name to be queried\n\t * @return the denomination short name\n\t * @return the denomination address\n\t * @return the denomination public name\n\t * @return the denomination symbol\n\t * @return the denomination num of decimals\n\t * @return the denomination multiplier (power of ten)\n\t */\n\tfunction getDenominationByName(bytes8 denominationName) public isValidDenomination(denominationName) view returns (bytes8, address, string memory, string memory, uint8, uint256) {\n\t\tAOIonInterface _ao = AOIonInterface(denominations[denominationIndex[denominationName]].denominationAddress);\n\t\treturn (\n\t\t\tdenominations[denominationIndex[denominationName]].name,\n\t\t\tdenominations[denominationIndex[denominationName]].denominationAddress,\n\t\t\t_ao.name(),\n\t\t\t_ao.symbol(),\n\t\t\t_ao.decimals(),\n\t\t\t_ao.powerOfTen()\n\t\t);\n\t}\n\n\t/**\n\t * @dev Get denomination info by index\n\t * @param index The index to be queried\n\t * @return the denomination short name\n\t * @return the denomination address\n\t * @return the denomination public name\n\t * @return the denomination symbol\n\t * @return the denomination num of decimals\n\t * @return the denomination multiplier (power of ten)\n\t */\n\tfunction getDenominationByIndex(uint256 index) public view returns (bytes8, address, string memory, string memory, uint8, uint256) {\n\t\trequire (index > 0 && index <= totalDenominations);\n\t\trequire (denominations[index].denominationAddress != address(0));\n\t\tAOIonInterface _ao = AOIonInterface(denominations[index].denominationAddress);\n\t\treturn (\n\t\t\tdenominations[index].name,\n\t\t\tdenominations[index].denominationAddress,\n\t\t\t_ao.name(),\n\t\t\t_ao.symbol(),\n\t\t\t_ao.decimals(),\n\t\t\t_ao.powerOfTen()\n\t\t);\n\t}\n\n\t/**\n\t * @dev Get base denomination info\n\t * @return the denomination short name\n\t * @return the denomination address\n\t * @return the denomination public name\n\t * @return the denomination symbol\n\t * @return the denomination num of decimals\n\t * @return the denomination multiplier (power of ten)\n\t */\n\tfunction getBaseDenomination() public view returns (bytes8, address, string memory, string memory, uint8, uint256) {\n\t\trequire (totalDenominations > 0);\n\t\treturn getDenominationByIndex(1);\n\t}\n\n\t/**\n\t * @dev convert ion from `denominationName` denomination to base denomination,\n\t *\t\tin this case it's similar to web3.toWei() functionality\n\t *\n\t * Example:\n\t * 9.1 Kilo should be entered as 9 integerAmount and 100 fractionAmount\n\t * 9.02 Kilo should be entered as 9 integerAmount and 20 fractionAmount\n\t * 9.001 Kilo should be entered as 9 integerAmount and 1 fractionAmount\n\t *\n\t * @param integerAmount uint256 of the integer amount to be converted\n\t * @param fractionAmount uint256 of the frational amount to be converted\n\t * @param denominationName bytes8 name of the ion denomination\n\t * @return uint256 converted amount in base denomination from target denomination\n\t */\n\tfunction toBase(uint256 integerAmount, uint256 fractionAmount, bytes8 denominationName) external view returns (uint256) {\n\t\tuint256 _fractionAmount = fractionAmount;\n\t\tif (this.isDenominationExist(denominationName) && (integerAmount > 0 || _fractionAmount > 0)) {\n\t\t\tDenomination memory _denomination = denominations[denominationIndex[denominationName]];\n\t\t\tAOIonInterface _denominationIon = AOIonInterface(_denomination.denominationAddress);\n\t\t\tuint8 fractionNumDigits = AOLibrary.numDigits(_fractionAmount);\n\t\t\trequire (fractionNumDigits <= _denominationIon.decimals());\n\t\t\tuint256 baseInteger = integerAmount.mul(10 ** _denominationIon.powerOfTen());\n\t\t\tif (_denominationIon.decimals() == 0) {\n\t\t\t\t_fractionAmount = 0;\n\t\t\t}\n\t\t\treturn baseInteger.add(_fractionAmount);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev convert ion from base denomination to `denominationName` denomination,\n\t *\t\tin this case it's similar to web3.fromWei() functionality\n\t * @param integerAmount uint256 of the base amount to be converted\n\t * @param denominationName bytes8 name of the target ion denomination\n\t * @return uint256 of the converted integer amount in target denomination\n\t * @return uint256 of the converted fraction amount in target denomination\n\t */\n\tfunction fromBase(uint256 integerAmount, bytes8 denominationName) public view returns (uint256, uint256) {\n\t\tif (this.isDenominationExist(denominationName)) {\n\t\t\tDenomination memory _denomination = denominations[denominationIndex[denominationName]];\n\t\t\tAOIonInterface _denominationIon = AOIonInterface(_denomination.denominationAddress);\n\t\t\tuint256 denominationInteger = integerAmount.div(10 ** _denominationIon.powerOfTen());\n\t\t\tuint256 denominationFraction = integerAmount.sub(denominationInteger.mul(10 ** _denominationIon.powerOfTen()));\n\t\t\treturn (denominationInteger, denominationFraction);\n\t\t} else {\n\t\t\treturn (0, 0);\n\t\t}\n\t}\n\n\t/**\n\t * @dev exchange `amount` ion from `fromDenominationName` denomination to ion in `toDenominationName` denomination\n\t * @param amount The amount of ion to exchange\n\t * @param fromDenominationName The origin denomination\n\t * @param toDenominationName The target denomination\n\t */\n\tfunction exchangeDenomination(uint256 amount, bytes8 fromDenominationName, bytes8 toDenominationName) public isValidDenomination(fromDenominationName) isValidDenomination(toDenominationName) {\n\t\trequire (amount > 0);\n\t\tDenomination memory _fromDenomination = denominations[denominationIndex[fromDenominationName]];\n\t\tDenomination memory _toDenomination = denominations[denominationIndex[toDenominationName]];\n\t\tAOIonInterface _fromDenominationIon = AOIonInterface(_fromDenomination.denominationAddress);\n\t\tAOIonInterface _toDenominationIon = AOIonInterface(_toDenomination.denominationAddress);\n\t\trequire (_fromDenominationIon.whitelistBurnFrom(msg.sender, amount));\n\t\trequire (_toDenominationIon.mint(msg.sender, amount));\n\n\t\t// Store the DenominationExchange information\n\t\ttotalDenominationExchanges++;\n\t\tbytes32 _exchangeId = keccak256(abi.encodePacked(this, msg.sender, totalDenominationExchanges));\n\t\tdenominationExchangeIdLookup[_exchangeId] = totalDenominationExchanges;\n\n\t\tDenominationExchange storage _denominationExchange = denominationExchanges[totalDenominationExchanges];\n\t\t_denominationExchange.exchangeId = _exchangeId;\n\t\t_denominationExchange.sender = msg.sender;\n\t\t_denominationExchange.fromDenominationAddress = _fromDenomination.denominationAddress;\n\t\t_denominationExchange.toDenominationAddress = _toDenomination.denominationAddress;\n\t\t_denominationExchange.amount = amount;\n\n\t\temit ExchangeDenomination(msg.sender, _exchangeId, amount, _fromDenomination.denominationAddress, AOIonInterface(_fromDenomination.denominationAddress).symbol(), _toDenomination.denominationAddress, AOIonInterface(_toDenomination.denominationAddress).symbol());\n\t}\n\n\t/**\n\t * @dev Get DenominationExchange information given an exchange ID\n\t * @param _exchangeId The exchange ID to query\n\t * @return The sender address\n\t * @return The from denomination address\n\t * @return The to denomination address\n\t * @return The from denomination symbol\n\t * @return The to denomination symbol\n\t * @return The amount exchanged\n\t */\n\tfunction getDenominationExchangeById(bytes32 _exchangeId) public view returns (address, address, address, string memory, string memory, uint256) {\n\t\trequire (denominationExchangeIdLookup[_exchangeId] > 0);\n\t\tDenominationExchange memory _denominationExchange = denominationExchanges[denominationExchangeIdLookup[_exchangeId]];\n\t\treturn (\n\t\t\t_denominationExchange.sender,\n\t\t\t_denominationExchange.fromDenominationAddress,\n\t\t\t_denominationExchange.toDenominationAddress,\n\t\t\tAOIonInterface(_denominationExchange.fromDenominationAddress).symbol(),\n\t\t\tAOIonInterface(_denominationExchange.toDenominationAddress).symbol(),\n\t\t\t_denominationExchange.amount\n\t\t);\n\t}\n\n\t/**\n\t * @dev Return the highest possible denomination given a base amount\n\t * @param amount The amount to be converted\n\t * @return the denomination short name\n\t * @return the denomination address\n\t * @return the integer amount at the denomination level\n\t * @return the fraction amount at the denomination level\n\t * @return the denomination public name\n\t * @return the denomination symbol\n\t * @return the denomination num of decimals\n\t * @return the denomination multiplier (power of ten)\n\t */\n\tfunction toHighestDenomination(uint256 amount) public view returns (bytes8, address, uint256, uint256, string memory, string memory, uint8, uint256) {\n\t\tuint256 integerAmount;\n\t\tuint256 fractionAmount;\n\t\tuint256 index;\n\t\tfor (uint256 i=totalDenominations; i>0; i--) {\n\t\t\tDenomination memory _denomination = denominations[i];\n\t\t\t(integerAmount, fractionAmount) = fromBase(amount, _denomination.name);\n\t\t\tif (integerAmount > 0) {\n\t\t\t\tindex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\trequire (index > 0 && index <= totalDenominations);\n\t\trequire (integerAmount > 0 || fractionAmount > 0);\n\t\trequire (denominations[index].denominationAddress != address(0));\n\t\tAOIonInterface _ao = AOIonInterface(denominations[index].denominationAddress);\n\t\treturn (\n\t\t\tdenominations[index].name,\n\t\t\tdenominations[index].denominationAddress,\n\t\t\tintegerAmount,\n\t\t\tfractionAmount,\n\t\t\t_ao.name(),\n\t\t\t_ao.symbol(),\n\t\t\t_ao.decimals(),\n\t\t\t_ao.powerOfTen()\n\t\t);\n\t}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"integerAmount\",\"type\":\"uint256\"},{\"name\":\"fractionAmount\",\"type\":\"uint256\"},{\"name\":\"denominationName\",\"type\":\"bytes8\"}],\"name\":\"toBase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"denominationName\",\"type\":\"bytes8\"},{\"name\":\"denominationAddress\",\"type\":\"address\"}],\"name\":\"updateDenomination\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_exchangeId\",\"type\":\"bytes32\"}],\"name\":\"getDenominationExchangeById\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameTAOPositionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDenominations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"name\":\"setNameTAOPositionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDenominationByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes8\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"fromDenominationName\",\"type\":\"bytes8\"},{\"name\":\"toDenominationName\",\"type\":\"bytes8\"}],\"name\":\"exchangeDenomination\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"denominationName\",\"type\":\"bytes8\"}],\"name\":\"isDenominationExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"toHighestDenomination\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes8\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDenominationExchanges\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"integerAmount\",\"type\":\"uint256\"},{\"name\":\"denominationName\",\"type\":\"bytes8\"}],\"name\":\"fromBase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theAO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"denominationName\",\"type\":\"bytes8\"}],\"name\":\"getDenominationByName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes8\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"denominationName\",\"type\":\"bytes8\"},{\"name\":\"denominationAddress\",\"type\":\"address\"}],\"name\":\"addDenomination\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBaseDenomination\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes8\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_theAO\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"exchangeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fromDenominationAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fromDenominationSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"toDenominationAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"toDenominationSymbol\",\"type\":\"string\"}],\"name\":\"ExchangeDenomination\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b5060405160208062002d46833981018060405260208110156200003357600080fd5b505160008054600160a060020a031916331790556200005b8164010000000062000062810204565b506200015d565b600054600154604080517ff66afcac000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015620000eb57600080fd5b505af415801562000100573d6000803e3d6000fd5b505050506040513d60208110156200011757600080fd5b505115156200012557600080fd5b600160a060020a03811615156200013b57600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b612bd9806200016d6000396000f3fe608060405234801561001057600080fd5b50600436106101255760003560e060020a9004806390358f5d116100b1578063a9b6b38e11610075578063a9b6b38e146106aa578063aa25c744146106b2578063c1e52775146106d9578063dc689d3c1461070f578063f2fde38b1461071757610125565b806390358f5d146104be578063932fd99f146104e55780639b19251a146106365780639d28d1d01461065c578063a46a891e1461066457610125565b806353d6fd59116100f857806353d6fd591461032a5780635768f84d1461035a5780635cfaf2ef146103625780635d990791146103885780636e0069241461048957610125565b8063217db8e81461012a5780633d9f923b1461016f578063446ea599146101b95780634ef033f014610306575b600080fd5b61015d6004803603606081101561014057600080fd5b5080359060208101359060400135600160c060020a03191661073d565b60408051918252519081900360200190f35b6101a56004803603604081101561018557600080fd5b508035600160c060020a0319169060200135600160a060020a0316610a7d565b604080519115158252519081900360200190f35b6101d6600480360360208110156101cf57600080fd5b5035610e5d565b6040518087600160a060020a0316600160a060020a0316815260200186600160a060020a0316600160a060020a0316815260200185600160a060020a0316600160a060020a031681526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b8381101561026557818101518382015260200161024d565b50505050905090810190601f1680156102925780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b838110156102c55781810151838201526020016102ad565b50505050905090810190601f1680156102f25780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b61030e6110ae565b60408051600160a060020a039092168252519081900360200190f35b6103586004803603604081101561034057600080fd5b50600160a060020a03813516906020013515156110bd565b005b61015d6111a6565b6103586004803603602081101561037857600080fd5b5035600160a060020a03166111ac565b6103a56004803603602081101561039e57600080fd5b5035611299565b6040518087600160c060020a031916600160c060020a031916815260200186600160a060020a0316600160a060020a0316815260200180602001806020018560ff1660ff168152602001848152602001838103835287818151815260200191508051906020019080838360005b8381101561042a578181015183820152602001610412565b50505050905090810190601f1680156104575780820380516001836020036101000a031916815260200191505b5083810382528651815286516020918201918801908083836000838110156102c55781810151838201526020016102ad565b6103586004803603606081101561049f57600080fd5b50803590600160c060020a03196020820135811691604001351661159c565b6101a5600480360360208110156104d457600080fd5b5035600160c060020a031916611cef565b610502600480360360208110156104fb57600080fd5b5035611da4565b6040518089600160c060020a031916600160c060020a031916815260200188600160a060020a0316600160a060020a0316815260200187815260200186815260200180602001806020018560ff1660ff168152602001848152602001838103835287818151815260200191508051906020019080838360005b8381101561059357818101518382015260200161057b565b50505050905090810190601f1680156105c05780820380516001836020036101000a031916815260200191505b50838103825286518152865160209182019188019080838360005b838110156105f35781810151838201526020016105db565b50505050905090810190601f1680156106205780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b6101a56004803603602081101561064c57600080fd5b5035600160a060020a0316612177565b61015d61218c565b6106916004803603604081101561067a57600080fd5b5080359060200135600160c060020a031916612192565b6040805192835260208301919091528051918290030190f35b61030e612393565b6103a5600480360360208110156106c857600080fd5b5035600160c060020a0319166123a2565b6101a5600480360360408110156106ef57600080fd5b508035600160c060020a0319169060200135600160a060020a031661270a565b6103a56129e7565b6103586004803603602081101561072d57600080fd5b5035600160a060020a0316612a1e565b6040805160e060020a6390358f5d028152600160c060020a0319831660048201529051600091849130916390358f5d916024808301926020929190829003018186803b15801561078c57600080fd5b505afa1580156107a0573d6000803e3d6000fd5b505050506040513d60208110156107b657600080fd5b505180156107ce575060008511806107ce5750600081115b15610a70576107db612b68565b50600160c060020a031983811660009081526006602090815260408083205483526005825280832081518083018352905460c060020a81029095168152604060020a909404600160a060020a031684830181905281517fdb9d28d5000000000000000000000000000000000000000000000000000000008152600481018790529151909392731150d53299abb7de27464d01b626728f5c8402299263db9d28d59260248083019392829003018186803b15801561089757600080fd5b505af41580156108ab573d6000803e3d6000fd5b505050506040513d60208110156108c157600080fd5b5051604080517f313ce5670000000000000000000000000000000000000000000000000000000081529051919250600160a060020a0384169163313ce56791600480820192602092909190829003018186803b15801561092057600080fd5b505afa158015610934573d6000803e3d6000fd5b505050506040513d602081101561094a57600080fd5b505160ff908116908216111561095f57600080fd5b60006109dc83600160a060020a0316630aa245466040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156109a057600080fd5b505afa1580156109b4573d6000803e3d6000fd5b505050506040513d60208110156109ca57600080fd5b50518a90600a0a63ffffffff612b0b16565b905082600160a060020a031663313ce5676040518163ffffffff1660e060020a02815260040160206040518083038186803b158015610a1a57600080fd5b505afa158015610a2e573d6000803e3d6000fd5b505050506040513d6020811015610a4457600080fd5b505160ff161515610a5457600094505b610a64818663ffffffff612b3416565b95505050505050610a76565b60009150505b9392505050565b600080546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015610af057600080fd5b505af4158015610b04573d6000803e3d6000fd5b505050506040513d6020811015610b1a57600080fd5b50511515610b2757600080fd5b6040805160e060020a6390358f5d028152600160c060020a0319851660048201529051849130916390358f5d91602480820192602092909190829003018186803b158015610b7457600080fd5b505afa158015610b88573d6000803e3d6000fd5b505050506040513d6020811015610b9e57600080fd5b50511515610bab57600080fd5b600160a060020a0383161515610bc057600080fd5b600160c060020a03198416600090815260066020526040902054836001821115610ce857600019820160009081526005602090815260409182902054825160e160020a63055122a30281529251604060020a909104600160a060020a0316928392630aa2454692600480840193829003018186803b158015610c4157600080fd5b505afa158015610c55573d6000803e3d6000fd5b505050506040513d6020811015610c6b57600080fd5b50516040805160e160020a63055122a30281529051600160a060020a03851691630aa24546916004808301926020929190829003018186803b158015610cb057600080fd5b505afa158015610cc4573d6000803e3d6000fd5b505050506040513d6020811015610cda57600080fd5b505111610ce657600080fd5b505b600354821015610df45760035460009081526005602090815260409182902054825160e160020a63055122a30281529251604060020a909104600160a060020a0316928392630aa2454692600480840193829003018186803b158015610d4d57600080fd5b505afa158015610d61573d6000803e3d6000fd5b505050506040513d6020811015610d7757600080fd5b50516040805160e160020a63055122a30281529051600160a060020a03851691630aa24546916004808301926020929190829003018186803b158015610dbc57600080fd5b505afa158015610dd0573d6000803e3d6000fd5b505050506040513d6020811015610de657600080fd5b505110610df257600080fd5b505b5050600160c060020a031984166000908152600660209081526040808320548352600590915290208054600160a060020a038516604060020a027bffffffffffffffffffffffffffffffffffffffff000000000000000019909116179055600191505092915050565b60008181526008602052604081205481908190606090819083908110610e8257600080fd5b610e8a612b7f565b50600087815260086020908152604080832054835260078252808320815160a081018352815481526001820154600160a060020a0390811694820185905260028301548116828501819052600384015490911660608301819052600493840154608084015284517f95d89b41000000000000000000000000000000000000000000000000000000008152945192969194909385936395d89b419383830193909290829003018186803b158015610f3f57600080fd5b505afa158015610f53573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610f7c57600080fd5b810190808051640100000000811115610f9457600080fd5b82016020810184811115610fa757600080fd5b8151640100000000811182820187101715610fc157600080fd5b50509291905050508460600151600160a060020a03166395d89b416040518163ffffffff1660e060020a02815260040160006040518083038186803b15801561100957600080fd5b505afa15801561101d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561104657600080fd5b81019080805164010000000081111561105e57600080fd5b8201602081018481111561107157600080fd5b815164010000000081118282018710171561108b57600080fd5b505060809890980151969f959e50939c50919a5094985092965090945050505050565b600154600160a060020a031681565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b15801561112f57600080fd5b505af4158015611143573d6000803e3d6000fd5b505050506040513d602081101561115957600080fd5b5051151561116657600080fd5b600160a060020a038216151561117b57600080fd5b600160a060020a03919091166000908152600260205260409020805460ff1916911515919091179055565b60035481565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b15801561121e57600080fd5b505af4158015611232573d6000803e3d6000fd5b505050506040513d602081101561124857600080fd5b5051151561125557600080fd5b600160a060020a038116151561126a57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000806060806000806000871180156112b457506003548711155b15156112bf57600080fd5b600087815260056020526040902054604060020a9004600160a060020a031615156112e957600080fd5b6000878152600560205260408082205481517f06fdde030000000000000000000000000000000000000000000000000000000081529151600160a060020a03604060020a8304169360c060020a90920292849283926306fdde03926004808201939291829003018186803b15801561136057600080fd5b505afa158015611374573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561139d57600080fd5b8101908080516401000000008111156113b557600080fd5b820160208101848111156113c857600080fd5b81516401000000008111828201871017156113e257600080fd5b505092919050505083600160a060020a03166395d89b416040518163ffffffff1660e060020a02815260040160006040518083038186803b15801561142657600080fd5b505afa15801561143a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561146357600080fd5b81019080805164010000000081111561147b57600080fd5b8201602081018481111561148e57600080fd5b81516401000000008111828201871017156114a857600080fd5b505092919050505084600160a060020a031663313ce5676040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156114ec57600080fd5b505afa158015611500573d6000803e3d6000fd5b505050506040513d602081101561151657600080fd5b50516040805160e160020a63055122a30281529051600160a060020a03881691630aa24546916004808301926020929190829003018186803b15801561155b57600080fd5b505afa15801561156f573d6000803e3d6000fd5b505050506040513d602081101561158557600080fd5b5051949d939c50919a509850965090945092505050565b6040805160e060020a6390358f5d028152600160c060020a0319841660048201529051839130916390358f5d91602480820192602092909190829003018186803b1580156115e957600080fd5b505afa1580156115fd573d6000803e3d6000fd5b505050506040513d602081101561161357600080fd5b5051151561162057600080fd5b6040805160e060020a6390358f5d028152600160c060020a0319841660048201529051839130916390358f5d91602480820192602092909190829003018186803b15801561166d57600080fd5b505afa158015611681573d6000803e3d6000fd5b505050506040513d602081101561169757600080fd5b505115156116a457600080fd5b600085116116b157600080fd5b6116b9612b68565b50600160c060020a03198481166000908152600660209081526040808320548352600582529182902082518084019093525460c060020a81029093168252604060020a909204600160a060020a031691810191909152611717612b68565b50600160c060020a031980851660009081526006602090815260408083205483526005825280832081518083018352905460c060020a81029095168152600160a060020a03604060020a90950485168184018190528684015183517fb1e19d45000000000000000000000000000000000000000000000000000000008152336004820152602481018e905293519296909591949086169363b1e19d459360448083019491928390030190829087803b1580156117d257600080fd5b505af11580156117e6573d6000803e3d6000fd5b505050506040513d60208110156117fc57600080fd5b5051151561180957600080fd5b604080517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018b90529051600160a060020a038316916340c10f199160448083019260209291908290030181600087803b15801561187157600080fd5b505af1158015611885573d6000803e3d6000fd5b505050506040513d602081101561189b57600080fd5b505115156118a857600080fd5b600460008154809291906001019190505550600030336004546040516020018084600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140183600160a060020a0316600160a060020a03166c010000000000000000000000000281526014018281526020019350505050604051602081830303815290604052805190602001209050600454600860008381526020019081526020016000208190555060006007600060045481526020019081526020016000209050818160000181905550338160010160006101000a815481600160a060020a030219169083600160a060020a0316021790555085602001518160020160006101000a815481600160a060020a030219169083600160a060020a0316021790555084602001518160030160006101000a815481600160a060020a030219169083600160a060020a031602179055508a81600401819055508133600160a060020a03167f82cf2552454b8d1e8c4cdb9c621ef4e6cb79e8614fa8044ce1903ae97eb46ff38d89602001518a60200151600160a060020a03166395d89b416040518163ffffffff1660e060020a02815260040160006040518083038186803b158015611a7357600080fd5b505afa158015611a87573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611ab057600080fd5b810190808051640100000000811115611ac857600080fd5b82016020810184811115611adb57600080fd5b8151640100000000811182820187101715611af557600080fd5b50509291905050508a602001518b60200151600160a060020a03166395d89b416040518163ffffffff1660e060020a02815260040160006040518083038186803b158015611b4257600080fd5b505afa158015611b56573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611b7f57600080fd5b810190808051640100000000811115611b9757600080fd5b82016020810184811115611baa57600080fd5b8151640100000000811182820187101715611bc457600080fd5b50509291905050506040518086815260200185600160a060020a0316600160a060020a031681526020018060200184600160a060020a0316600160a060020a0316815260200180602001838103835286818151815260200191508051906020019080838360005b83811015611c43578181015183820152602001611c2b565b50505050905090810190601f168015611c705780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015611ca3578181015183820152602001611c8b565b50505050905090810190601f168015611cd05780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a35050505050505050505050565b60007fff000000000000000000000000000000000000000000000000000000000000007f010000000000000000000000000000000000000000000000000000000000000083831a021615801590611d5d5750600160c060020a03198216600090815260066020526040812054115b8015611d9e5750600160c060020a0319821660009081526006602090815260408083205483526005909152902054604060020a9004600160a060020a031615155b92915050565b60008060008060608060008060008060008060035490505b6000811115611e4157611dcd612b68565b5060008181526005602090815260409182902082518084019093525460c060020a8102600160c060020a031916808452604060020a909104600160a060020a031691830191909152611e20908f90612192565b90955093506000851115611e375781925050611e41565b5060001901611dbc565b50600081118015611e5457506003548111155b1515611e5f57600080fd5b6000831180611e6e5750600082115b1515611e7957600080fd5b600081815260056020526040902054604060020a9004600160a060020a03161515611ea357600080fd5b6000818152600560205260408082205481517f06fdde030000000000000000000000000000000000000000000000000000000081529151600160a060020a03604060020a8304169360c060020a9092029284928892889285926306fdde0392600480840193829003018186803b158015611f1c57600080fd5b505afa158015611f30573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611f5957600080fd5b810190808051640100000000811115611f7157600080fd5b82016020810184811115611f8457600080fd5b8151640100000000811182820187101715611f9e57600080fd5b505092919050505085600160a060020a03166395d89b416040518163ffffffff1660e060020a02815260040160006040518083038186803b158015611fe257600080fd5b505afa158015611ff6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561201f57600080fd5b81019080805164010000000081111561203757600080fd5b8201602081018481111561204a57600080fd5b815164010000000081118282018710171561206457600080fd5b505092919050505086600160a060020a031663313ce5676040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156120a857600080fd5b505afa1580156120bc573d6000803e3d6000fd5b505050506040513d60208110156120d257600080fd5b50516040805160e160020a63055122a30281529051600160a060020a038a1691630aa24546916004808301926020929190829003018186803b15801561211757600080fd5b505afa15801561212b573d6000803e3d6000fd5b505050506040513d602081101561214157600080fd5b81019080805190602001909291905050508393508292509b509b509b509b509b509b509b509b5050505050919395975091939597565b60026020526000908152604090205460ff1681565b60045481565b6040805160e060020a6390358f5d028152600160c060020a0319831660048201529051600091829130916390358f5d916024808301926020929190829003018186803b1580156121e157600080fd5b505afa1580156121f5573d6000803e3d6000fd5b505050506040513d602081101561220b57600080fd5b5051156123855761221a612b68565b50600160c060020a031983811660009081526006602090815260408083205483526005825280832081518083018352905460c060020a81029095168152604060020a909404600160a060020a0316848301819052815160e160020a63055122a302815291519093926122e7928592630aa2454692600480840193919291829003018186803b1580156122ab57600080fd5b505afa1580156122bf573d6000803e3d6000fd5b505050506040513d60208110156122d557600080fd5b50518890600a0a63ffffffff612b4116565b9050600061237661236984600160a060020a0316630aa245466040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561232d57600080fd5b505afa158015612341573d6000803e3d6000fd5b505050506040513d602081101561235757600080fd5b50518490600a0a63ffffffff612b0b16565b899063ffffffff612b5616565b91955090935061238c92505050565b5060009050805b9250929050565b600054600160a060020a031681565b6000806060806000808630600160a060020a03166390358f5d826040518263ffffffff1660e060020a0281526004018082600160c060020a031916600160c060020a031916815260200191505060206040518083038186803b15801561240757600080fd5b505afa15801561241b573d6000803e3d6000fd5b505050506040513d602081101561243157600080fd5b5051151561243e57600080fd5b600160c060020a03198816600090815260066020908152604080832054835260059091528082205481517f06fdde030000000000000000000000000000000000000000000000000000000081529151604060020a8204600160a060020a03169360c060020a90920292849283926306fdde03926004808201939291829003018186803b1580156124cd57600080fd5b505afa1580156124e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561250a57600080fd5b81019080805164010000000081111561252257600080fd5b8201602081018481111561253557600080fd5b815164010000000081118282018710171561254f57600080fd5b505092919050505083600160a060020a03166395d89b416040518163ffffffff1660e060020a02815260040160006040518083038186803b15801561259357600080fd5b505afa1580156125a7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156125d057600080fd5b8101908080516401000000008111156125e857600080fd5b820160208101848111156125fb57600080fd5b815164010000000081118282018710171561261557600080fd5b505092919050505084600160a060020a031663313ce5676040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561265957600080fd5b505afa15801561266d573d6000803e3d6000fd5b505050506040513d602081101561268357600080fd5b50516040805160e160020a63055122a30281529051600160a060020a03881691630aa24546916004808301926020929190829003018186803b1580156126c857600080fd5b505afa1580156126dc573d6000803e3d6000fd5b505050506040513d60208110156126f257600080fd5b5051949e939d50919b50995097509095509350505050565b600080546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b15801561277d57600080fd5b505af4158015612791573d6000803e3d6000fd5b505050506040513d60208110156127a757600080fd5b505115156127b457600080fd5b7fff000000000000000000000000000000000000000000000000000000000000007f0100000000000000000000000000000000000000000000000000000000000000600085901a0216151561280857600080fd5b600160a060020a038216151561281d57600080fd5b600160c060020a031983166000908152600660205260409020541561284157600080fd5b60038054600190810191829055101561295f576003546000190160009081526005602090815260409182902054825160e160020a63055122a30281529251604060020a909104600160a060020a03169285928492630aa24546926004808201939291829003018186803b1580156128b757600080fd5b505afa1580156128cb573d6000803e3d6000fd5b505050506040513d60208110156128e157600080fd5b50516040805160e160020a63055122a30281529051600160a060020a03841691630aa24546916004808301926020929190829003018186803b15801561292657600080fd5b505afa15801561293a573d6000803e3d6000fd5b505050506040513d602081101561295057600080fd5b50511161295c57600080fd5b50505b50600380546000908152600560209081526040808320805467ffffffffffffffff191660c060020a88041790558354835280832080547bffffffffffffffffffffffffffffffffffffffff00000000000000001916604060020a600160a060020a038816021790559254600160c060020a031986168352600690915291902055600192915050565b6000806060806000806000600354111515612a0157600080fd5b612a0b6001611299565b949b939a50919850965094509092509050565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015612a9057600080fd5b505af4158015612aa4573d6000803e3d6000fd5b505050506040513d6020811015612aba57600080fd5b50511515612ac757600080fd5b600160a060020a0381161515612adc57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000821515612b1c57506000611d9e565b50818102818382811515612b2c57fe5b0414611d9e57fe5b81810182811015611d9e57fe5b60008183811515612b4e57fe5b049392505050565b600082821115612b6257fe5b50900390565b604080518082019091526000808252602082015290565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091529056fea165627a7a72305820ecd3898eb0ca88924b361a4cf437153e81671436b8baee15ead63153ca4497ef00290000000000000000000000001f7f65b220a0f2d48b28390380f57468e7a382fe",
  "constructorArguments": "0000000000000000000000001f7f65b220a0f2d48b28390380f57468e7a382fe",
  "libraries": [
    {
      "name": "AOLibrary",
      "address": "0x1150d53299Abb7DE27464D01B626728f5c840229"
    }
  ]
}