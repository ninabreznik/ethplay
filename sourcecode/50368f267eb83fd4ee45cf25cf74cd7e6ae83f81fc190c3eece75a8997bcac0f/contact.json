{
  "address": "0xf729b89d8053c31d83c807ed659686a5ed07e06a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BuToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-01\n*/\n\npragma solidity ^0.4.21;\n\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a / b;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// Interfaces \n\ncontract ERC20 {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// Implementation\n\ncontract ERC20Token is ERC20 {\n\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  uint256 totalSupply_;\n\n  event Burn(address indexed burner, uint256 value);\n\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }  \n\n  function burn(uint256 _value) public {\n    require(_value <= balances[msg.sender]);\n\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(burner, _value);\n    emit Transfer(burner, address(0), _value);\n  }  \n\n}\n\ncontract BuToken is ERC20Token {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  function BuToken() public {\n    name = \"BUY Payment Token\";\n    symbol = \"BUY\";\n    decimals = 0;  \n    balances[msg.sender] = 10**9;\n    totalSupply_ = 10**9;\n  }\n\n}",
  "bytecode": "6060604052341561000f57600080fd5b60408051908101604052601181527f425559205061796d656e7420546f6b656e000000000000000000000000000000602082015260039080516100569291602001906100d2565b5060408051908101604052600381527f42555900000000000000000000000000000000000000000000000000000000006020820152600490805161009e9291602001906100d2565b506005805460ff19169055600160a060020a0333166000908152602081905260409020633b9aca009081905560025561016d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011357805160ff1916838001178555610140565b82800160010185558215610140579182015b82811115610140578251825591602001919060010190610125565b5061014c929150610150565b5090565b61016a91905b8082111561014c5760008155600101610156565b90565b610a108061017c6000396000f3006060604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100be578063095ea7b31461014857806318160ddd1461017e57806323b872dd146101a3578063313ce567146101cb57806342966c68146101f4578063661884631461020c57806370a082311461022e57806395d89b411461024d578063a9059cbb14610260578063d73dd62314610282578063dd62ed3e146102a4575b600080fd5b34156100c957600080fd5b6100d16102c9565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561010d5780820151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015357600080fd5b61016a600160a060020a0360043516602435610367565b604051901515815260200160405180910390f35b341561018957600080fd5b6101916103d3565b60405190815260200160405180910390f35b34156101ae57600080fd5b61016a600160a060020a03600435811690602435166044356103d9565b34156101d657600080fd5b6101de610559565b60405160ff909116815260200160405180910390f35b34156101ff57600080fd5b61020a600435610562565b005b341561021757600080fd5b61016a600160a060020a036004351660243561065b565b341561023957600080fd5b610191600160a060020a0360043516610755565b341561025857600080fd5b6100d1610770565b341561026b57600080fd5b61016a600160a060020a03600435166024356107db565b341561028d57600080fd5b61016a600160a060020a03600435166024356108ed565b34156102af57600080fd5b610191600160a060020a0360043581169060243516610991565b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561035f5780601f106103345761010080835404028352916020019161035f565b820191906000526020600020905b81548152906001019060200180831161034257829003601f168201915b505050505081565b600160a060020a03338116600081815260016020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60025490565b6000600160a060020a03831615156103f057600080fd5b600160a060020a03841660009081526020819052604090205482111561041557600080fd5b600160a060020a038085166000908152600160209081526040808320339094168352929052205482111561044857600080fd5b600160a060020a038416600090815260208190526040902054610471908363ffffffff6109bc16565b600160a060020a0380861660009081526020819052604080822093909355908516815220546104a6908363ffffffff6109ce16565b600160a060020a03808516600090815260208181526040808320949094558783168252600181528382203390931682529190915220546104ec908363ffffffff6109bc16565b600160a060020a03808616600081815260016020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60055460ff1681565b600160a060020a03331660009081526020819052604081205482111561058757600080fd5b5033600160a060020a0381166000908152602081905260409020546105ac90836109bc565b600160a060020a0382166000908152602081905260409020556002546105d8908363ffffffff6109bc16565b600255600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a26000600160a060020a0382167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35050565b600160a060020a033381166000908152600160209081526040808320938616835292905290812054808311156106b857600160a060020a0333811660009081526001602090815260408083209388168352929052908120556106ef565b6106c8818463ffffffff6109bc16565b600160a060020a033381166000908152600160209081526040808320938916835292905220555b600160a060020a0333811660008181526001602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526020819052604090205490565b60048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561035f5780601f106103345761010080835404028352916020019161035f565b6000600160a060020a03831615156107f257600080fd5b600160a060020a03331660009081526020819052604090205482111561081757600080fd5b600160a060020a033316600090815260208190526040902054610840908363ffffffff6109bc16565b600160a060020a033381166000908152602081905260408082209390935590851681522054610875908363ffffffff6109ce16565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b600160a060020a033381166000908152600160209081526040808320938616835292905290812054610925908363ffffffff6109ce16565b600160a060020a0333811660008181526001602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6000828211156109c857fe5b50900390565b6000828201838110156109dd57fe5b93925050505600a165627a7a72305820ab305f9234bdaa6189eb1ede909cadebf69a05e7c02c92efda3684a629ec534d0029"
}