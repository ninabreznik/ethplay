{
  "address": "0xac27d299e2c1106daf33bc0971b7b97b96287493",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "DinarCoin",
  "contractName": "GoldBank",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-21\n*/\n\npragma solidity ^0.4.16;\n\ncontract ERC223Basic {\n    uint256 public totalSupply = 0;\n    function balanceOf(address who) constant returns (uint);\n    function transfer(address _to, uint _value) returns (bool);\n    event Transfer(address indexed from, address indexed to, uint value);\n}\n\n /*\n * Contract that is working with ERC223 tokens\n */\n \ncontract ERC223ReceivingContract {\n    function tokenFallback(address _from, uint _value, bytes _data);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n \n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n \n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n \n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n//   function assert(bool assertion) internal {\n//     if (!assertion) revert();\n//   }\n}\n\ncontract ERC223BasicToken is ERC223Basic{\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    // Standard function transfer similar to ERC20 transfer with no _data .\n    // Added due to backwards compatibility reasons .\n    function transfer(address _to, uint _value) returns (bool success) {\n        uint codeLength;\n        bytes memory empty;\n\n        assembly {\n            // Retrieve the size of the code on target address, this needs assembly .\n            codeLength := extcodesize(_to)\n        }\n        \n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        if(codeLength>0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, empty);\n        }\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) constant returns (uint balance) {\n        return balances[_owner];\n    }\n}\n\ncontract GoldBank is ERC223BasicToken{\n\taddress admin;\n\tstring public name = \"DinarCoin\";\n    string public symbol = \"DNC\";\n    uint public decimals = 18;\n\tmapping (address => bool) public mintable;\n\n\tevent Minted(address indexed recipient, uint256 value);\n\tevent Burned(address indexed user, uint256 value);\n\n\tfunction GoldBank() {\n\t\tadmin = msg.sender;\n\t}\n\n\tmodifier onlyadmin { if (msg.sender == admin) _; }\n\n\tfunction changeAdmin(address _newAdminAddr) onlyadmin {\n\t\tadmin = _newAdminAddr;\n\t}\n\n\tfunction createNewMintableUser (address newAddr) onlyadmin {\n\t\tif(balances[newAddr] == 0)  \n    \t\tmintable[newAddr] = true;\n\t}\n\t\n\tfunction deleteMintable (address addr) onlyadmin {\n\t    mintable[addr] = false;\n\t}\n\t\n\tfunction adminTransfer(address from, address to, uint256 value) onlyadmin {\n        if(mintable[from] == true) {\n    \t    balances[from] = balances[from].sub(value);\n    \t    balances[to] = balances[to].add(value);\n    \t    Transfer(from, to, value);\n        }\n\t}\n\t\n\tfunction mintNewDNC(address user, uint256 quantity) onlyadmin {\n\t    uint256 correctedQuantity = quantity * (10**(decimals-1));\n        if(mintable[user] == true) {\n            totalSupply = totalSupply.add(correctedQuantity);\n            balances[user] = balances[user].add(correctedQuantity);\n            Transfer(0, user, correctedQuantity);\n            Minted(user, correctedQuantity);\n        }   \n\t}\n\t\n\tfunction burnDNC(address user, uint256 quantity) onlyadmin {\n\t    uint256 correctedQuantity = quantity * (10**(decimals-1));\n\t    if(mintable[user] == true) {\n            balances[user] = balances[user].sub(correctedQuantity);\n            totalSupply = totalSupply.sub(correctedQuantity);\n            Transfer(user, 0, correctedQuantity);\n            Burned(user, correctedQuantity);\n\t    }\n\t}\n}",
  "bytecode": "6060604052600080556040805190810160405280600981526020017f44696e6172436f696e00000000000000000000000000000000000000000000008152506003908051906020019062000055929190620000fe565b506040805190810160405280600381526020017f444e43000000000000000000000000000000000000000000000000000000000081525060049080519060200190620000a3929190620000fe565b5060126005553415620000b557600080fd5b5b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b620001ad565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200014157805160ff191683800117855562000172565b8280016001018555821562000172579182015b828111156200017157825182559160200191906001019062000154565b5b50905062000181919062000185565b5090565b620001aa91905b80821115620001a65760008160009055506001016200018c565b5090565b90565b61128980620001bd6000396000f300606060405236156100c3576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100c857806318160ddd14610157578063313ce5671461018057806359441eae146101a957806370a08231146101fa57806371ced69d146102475780638f2839701461028957806395d89b41146102c25780639670078c14610351578063a9059cbb14610393578063affcba25146103ed578063da72c1e814610426578063feb7267b14610487575b600080fd5b34156100d357600080fd5b6100db6104c0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561011c5780820151818401525b602081019050610100565b50505050905090810190601f1680156101495780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016257600080fd5b61016a61055e565b6040518082815260200191505060405180910390f35b341561018b57600080fd5b610193610564565b6040518082815260200191505060405180910390f35b34156101b457600080fd5b6101e0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061056a565b604051808215151515815260200191505060405180910390f35b341561020557600080fd5b610231600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061058a565b6040518082815260200191505060405180910390f35b341561025257600080fd5b610287600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506105d4565b005b341561029457600080fd5b6102c0600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506107e9565b005b34156102cd57600080fd5b6102d5610886565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103165780820151818401525b6020810190506102fa565b50505050905090810190601f1680156103435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561035c57600080fd5b610391600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610924565b005b341561039e57600080fd5b6103d3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b39565b604051808215151515815260200191505060405180910390f35b34156103f857600080fd5b610424600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e18565b005b341561043157600080fd5b610485600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f15565b005b341561049257600080fd5b6104be600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061115c565b005b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105565780601f1061052b57610100808354040283529160200191610556565b820191906000526020600020905b81548152906001019060200180831161053957829003601f168201915b505050505081565b60005481565b60055481565b60066020528060005260406000206000915054906101000a900460ff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156107e357600160055403600a0a8202905060011515600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514156107e1576106a78160005461121090919063ffffffff16565b6000819055506106ff81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461121090919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a38273ffffffffffffffffffffffffffffffffffffffff167f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe826040518082815260200191505060405180910390a25b5b5b5b505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156108825780600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b60048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561091c5780601f106108f15761010080835404028352916020019161091c565b820191906000526020600020905b8154815290600101906020018083116108ff57829003601f168201915b505050505081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610b3357600160055403600a0a8202905060011515600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415610b3157610a3481600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461122f90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a8c8160005461122f90919063ffffffff16565b60008190555060008373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a38273ffffffffffffffffffffffffffffffffffffffff167f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df7826040518082815260200191505060405180910390a25b5b5b5b505050565b600080610b44611249565b6000853b9250610b9c85600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461122f90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c3185600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461121090919063ffffffff16565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000831115610da5578590508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3387856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610d435780820151818401525b602081019050610d27565b50505050905090810190601f168015610d705780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1515610d9057600080fd5b6102c65a03f11515610da157600080fd5b5050505b8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a3600193505b50505092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610f11576000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415610f0f576001600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5b5b5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156111565760011515600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514156111545761101681600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461122f90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110ab81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461121090919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5b5b5b505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561120c576000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5b5b50565b600080828401905083811015151561122457fe5b8091505b5092915050565b600082821115151561123d57fe5b81830390505b92915050565b6020604051908101604052806000815250905600a165627a7a72305820ae080dcb60c00d4ab90a98a9b7816035da0b622091cee5ad2698a01f8b27d9af0029"
}