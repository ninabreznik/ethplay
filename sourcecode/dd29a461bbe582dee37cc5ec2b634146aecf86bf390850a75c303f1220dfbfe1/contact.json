{
  "address": "0x26c69e1b26553030a455e6bfd717bda20167a056",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "INF",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-04\n*/\n\npragma solidity ^0.4.18;\n\n// ----------------------------------------------------------------------------\n\n// (c) by IBM 2018. The MIT Licence.\n// ----------------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\ncontract SafeMath {\n    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function safeSub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function safeMul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n//\n\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\n// token transfers\n// ----------------------------------------------------------------------------\ncontract INF is ERC20Interface, Owned, SafeMath {\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint public _totalSupply;\n    uint public startDate;\n    uint public bonusEnds;\n    uint public endDate;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n\n\n    // ------------------------------------------------------------------------\n    // Constructor 000000000000000000\n    // ------------------------------------------------------------------------\n    function INF() public {\n        symbol = \"INF\";\n        name = \"INF token\";\n        decimals = 18;\n\t\t_totalSupply = 17000000000000000000000000;\n        balances[msg.sender] = _totalSupply; // Send all tokens to owner\n        bonusEnds = now + 0.1 weeks;\n        endDate = now + 500 weeks;\n\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public constant returns (uint) {\n        return _totalSupply  - balances[address(0)];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to `to` account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens) public returns (bool success) {\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n        balances[to] = safeAdd(balances[to], tokens);\n        Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    //\n    // We\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces\n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer `tokens` from the `from` account to the `to` account\n    //\n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the `from` account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        balances[from] = safeSub(balances[from], tokens);\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n        balances[to] = safeAdd(balances[to], tokens);\n        Transfer(from, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account. The `spender` contract function\n    // `receiveApproval(...)` is then executed\n    // ------------------------------------------------------------------------\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // 10,000 INF Tokens per 1 ETH\n    // ------------------------------------------------------------------------\n    function () public payable {\n        require(now >= startDate && now <= endDate);\n        uint tokens;\n        if (now <= bonusEnds) {\n            tokens = msg.value * 12000;\n        } else {\n            tokens = msg.value * 10000;\n        }\n        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n        _totalSupply = safeAdd(_totalSupply, tokens);\n        Transfer(address(0), msg.sender, tokens);\n        owner.transfer(msg.value);\n    }\n\n\n\n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b60008054600160a060020a03191633600160a060020a031617905560408051908101604052600381527f494e46000000000000000000000000000000000000000000000000000000000060208201526002908051610071929160200190610109565b5060408051908101604052600981527f494e4620746f6b656e0000000000000000000000000000000000000000000000602082015260039080516100b9929160200190610109565b506004805460ff191660121790556a0e0fe3d8bb9bc7b10000006005819055600160a060020a03331660009081526009602052604090205561ec40429081016007556312064200016008556101a4565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061014a57805160ff1916838001178555610177565b82800160010185558215610177579182015b8281111561017757825182559160200191906001019061015c565b50610183929150610187565b5090565b6101a191905b80821115610183576000815560010161018d565b90565b610bfc806101b36000396000f3006060604052600436106100ed5763ffffffff60e060020a60003504166306fdde0381146101eb578063095ea7b3146102755780630b97bc86146102ab57806318160ddd146102d057806323b872dd146102e3578063313ce5671461030b5780633eaaf86b1461033457806340c650031461034757806370a082311461035a57806379ba5097146103795780638da5cb5b1461038e57806395d89b41146103bd578063a9059cbb146103d0578063c24a0f8b146103f2578063cae9ca5114610405578063d4ee1d901461046a578063dc39d06d1461047d578063dd62ed3e1461049f578063f2fde38b146104c4575b6000600654421015801561010357506008544211155b151561010e57600080fd5b60075442116101225750612ee03402610129565b5061271034025b600160a060020a03331660009081526009602052604090205461014c90826104e3565b600160a060020a03331660009081526009602052604090205560055461017290826104e3565b600555600160a060020a03331660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a3600054600160a060020a03163480156108fc0290604051600060405180830381858888f1935050505015156101e857600080fd5b50005b34156101f657600080fd5b6101fe6104f9565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561023a578082015183820152602001610222565b50505050905090810190601f1680156102675780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561028057600080fd5b610297600160a060020a0360043516602435610597565b604051901515815260200160405180910390f35b34156102b657600080fd5b6102be610603565b60405190815260200160405180910390f35b34156102db57600080fd5b6102be610609565b34156102ee57600080fd5b610297600160a060020a036004358116906024351660443561063b565b341561031657600080fd5b61031e61073c565b60405160ff909116815260200160405180910390f35b341561033f57600080fd5b6102be610745565b341561035257600080fd5b6102be61074b565b341561036557600080fd5b6102be600160a060020a0360043516610751565b341561038457600080fd5b61038c61076c565b005b341561039957600080fd5b6103a16107fa565b604051600160a060020a03909116815260200160405180910390f35b34156103c857600080fd5b6101fe610809565b34156103db57600080fd5b610297600160a060020a0360043516602435610874565b34156103fd57600080fd5b6102be610927565b341561041057600080fd5b61029760048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061092d95505050505050565b341561047557600080fd5b6103a1610a94565b341561048857600080fd5b610297600160a060020a0360043516602435610aa3565b34156104aa57600080fd5b6102be600160a060020a0360043581169060243516610b46565b34156104cf57600080fd5b61038c600160a060020a0360043516610b71565b818101828110156104f357600080fd5b92915050565b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561058f5780601f106105645761010080835404028352916020019161058f565b820191906000526020600020905b81548152906001019060200180831161057257829003601f168201915b505050505081565b600160a060020a033381166000818152600a6020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60065481565b6000805260096020527fec8156718a8372b1db44bb411437d0870f3e3790d4a08526d024ce1b0b668f6b546005540390565b600160a060020a03831660009081526009602052604081205461065e9083610bbb565b600160a060020a03808616600090815260096020908152604080832094909455600a815283822033909316825291909152205461069b9083610bbb565b600160a060020a038086166000908152600a6020908152604080832033851684528252808320949094559186168152600990915220546106db90836104e3565b600160a060020a03808516600081815260096020526040908190209390935591908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60045460ff1681565b60055481565b60075481565b600160a060020a031660009081526009602052604090205490565b60015433600160a060020a0390811691161461078757600080fd5b600154600054600160a060020a0391821691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031681565b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561058f5780601f106105645761010080835404028352916020019161058f565b600160a060020a0333166000908152600960205260408120546108979083610bbb565b600160a060020a0333811660009081526009602052604080822093909355908516815220546108c690836104e3565b600160a060020a0380851660008181526009602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60085481565b600160a060020a033381166000818152600a6020908152604080832094881680845294909152808220869055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a383600160a060020a0316638f4ffcb1338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a28578082015183820152602001610a10565b50505050905090810190601f168015610a555780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610a7657600080fd5b6102c65a03f11515610a8757600080fd5b5060019695505050505050565b600154600160a060020a031681565b6000805433600160a060020a03908116911614610abf57600080fd5b60008054600160a060020a038086169263a9059cbb929091169085906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610b2557600080fd5b6102c65a03f11515610b3657600080fd5b5050506040518051949350505050565b600160a060020a039182166000908152600a6020908152604080832093909416825291909152205490565b60005433600160a060020a03908116911614610b8c57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610bca57600080fd5b509003905600a165627a7a72305820e39c01df7b9265f17ee15572e8af5133999e101e184cfaeab1fd4144e0f0409e0029"
}