{
  "address": "0xb90e93e40fd2c75f03f9f5a4f2464a2b45b36aa6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MYC",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-20\n*/\n\npragma solidity ^ 0.4 .11;\n\ncontract ContractReceiver {\n    function tokenFallback(address _from, uint _value, bytes _data) {\n        _from;\n        _value;\n        _data;\n    }\n}\n\ncontract MYC {\n    /* Contract Constants */\n    string public constant _name = \"MYC\";\n    string public constant _symbol = \"MYC\";\n    uint8 public constant _decimals = 8;\n\n    uint256 public constant _initialSupply = 36500000000000000;\n\n    /* Contract Variables */\n    address public owner;\n    uint256 public _currentSupply;\n    mapping(address => uint256) public balances;\n    mapping(address => mapping(address => uint256)) public allowed;\n\n    function MYC() {\n        owner = msg.sender;\n        _currentSupply = _initialSupply;\n        balances[owner] = _initialSupply;\n    }\n\n    /* ERC20 Events */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed from, address indexed to, uint256 value);\n\n    /* ERC223 Events */\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n\n    /* Non-ERC Events */\n    event Burn(address indexed from, uint256 amount, uint256 currentSupply, bytes data);\n\n    function totalSupply() constant returns(uint256 totalSupply) {\n        return _initialSupply;\n    }\n\n    /* Returns the balance of a particular account */\n    function balanceOf(address _address) constant returns(uint256 balance) {\n        return balances[_address];\n    }\n\n    /* Transfer the balance from the sender's address to the address _to */\n    function transfer(address _to, uint _value) returns(bool success) {\n        if (balances[msg.sender] >= _value &&\n            _value > 0 &&\n            balances[_to] + _value > balances[_to]) {\n            bytes memory empty;\n            if (isContract(_to)) {\n                return transferToContract(_to, _value, empty);\n            } else {\n                return transferToAddress(_to, _value, empty);\n            }\n        } else {\n            return false;\n        }\n    }\n\n    /* Withdraws to address _to form the address _from up to the amount _value */\n    function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\n        if (balances[_from] >= _value &&\n            allowed[_from][msg.sender] >= _value &&\n            _value > 0 &&\n            balances[_to] + _value > balances[_to]) {\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /* Allows _spender to withdraw the _allowance amount form sender */\n    function approve(address _spender, uint256 _allowance) returns(bool success) {\n        if (_allowance <= _currentSupply) {\n            allowed[msg.sender][_spender] = _allowance;\n            Approval(msg.sender, _spender, _allowance);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /* Checks how much _spender can withdraw from _owner */\n    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /* ERC223 Functions */\n    /* Get the contract constant _name */\n    function name() constant returns(string name) {\n        return _name;\n    }\n\n    /* Get the contract constant _symbol */\n    function symbol() constant returns(string symbol) {\n        return _symbol;\n    }\n\n    /* Get the contract constant _decimals */\n    function decimals() constant returns(uint8 decimals) {\n        return _decimals;\n    }\n\n    /* Transfer the balance from the sender's address to the address _to with data _data */\n    function transfer(address _to, uint _value, bytes _data) returns(bool success) {\n        if (balances[msg.sender] >= _value &&\n            _value > 0 &&\n            balances[_to] + _value > balances[_to]) {\n            if (isContract(_to)) {\n                return transferToContract(_to, _value, _data);\n            } else {\n                return transferToAddress(_to, _value, _data);\n            }\n        } else {\n            return false;\n        }\n    }\n\n    /* Transfer function when _to represents a regular address */\n    function transferToAddress(address _to, uint _value, bytes _data) internal returns(bool success) {\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n\n    /* Transfer function when _to represents a contract address, with the caveat\n    that the contract needs to implement the tokenFallback function in order to receive tokens */\n    function transferToContract(address _to, uint _value, bytes _data) internal returns(bool success) {\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        ContractReceiver receiver = ContractReceiver(_to);\n        receiver.tokenFallback(msg.sender, _value, _data);\n        Transfer(msg.sender, _to, _value);\n        Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n\n    /* Infers if whether _address is a contract based on the presence of bytecode */\n    function isContract(address _address) internal returns(bool is_contract) {\n        uint length;\n        if (_address == 0) return false;\n        assembly {\n            length: = extcodesize(_address)\n        }\n        if (length > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /* Non-ERC Functions */\n    /* Remove the specified amount of the tokens from the supply permanently */\n    function burn(uint256 _value, bytes _data) returns(bool success) {\n        if (balances[msg.sender] >= _value &&\n            _value > 0) {\n            balances[msg.sender] -= _value;\n            _currentSupply -= _value;\n            Burn(msg.sender, _value, _currentSupply, _data);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /* Returns the total amount of tokens in supply */\n    function currentSupply() constant returns(uint256 currentSupply) {\n        return _currentSupply;\n    }\n\n    /* Returns the total amount of tokens ever burned */\n    function amountBurned() constant returns(uint256 amountBurned) {\n        return _initialSupply - _currentSupply;\n    }\n\n    /* Stops any attempt to send Ether to this contract */\n    function() {\n        throw;\n    }\n}",
  "bytecode": "6060604052341561000c57fe5b5b60008054600160a060020a03191633600160a060020a03908116919091178083556681ac8e7e4d400060018190559116825260026020526040909120555b5b61101f8061005b6000396000f3006060604052361561011a5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610130578063095ea7b3146101c057806318160ddd146101f357806323b872dd1461021557806327e235e31461024e578063313ce5671461027c57806332424aa3146102a25780635290d773146102c85780635c658165146102ea57806370a082311461031e578063771282f61461034c5780638da5cb5b1461036e57806395d89b4114610130578063a4fefad61461042a578063a9059cbb1461044c578063b09f12661461047f578063be45fd621461050f578063c3b2d33714610586578063d28d88521461047f578063dd62ed3e14610638578063fe9d93031461066c575b341561012257fe5b61012e5b60006000fd5b565b005b341561013857fe5b6101406106d7565b604080516020808252835181830152835191928392908301918501908083838215610186575b80518252602083111561018657601f199092019160209182019101610166565b505050905090810190601f1680156101b25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101c857fe5b6101df600160a060020a0360043516602435610701565b604080519115158252519081900360200190f35b34156101fb57fe5b61020361077d565b60408051918252519081900360200190f35b341561021d57fe5b6101df600160a060020a0360043581169060243516604435610789565b604080519115158252519081900360200190f35b341561025657fe5b610203600160a060020a03600435166108a3565b60408051918252519081900360200190f35b341561028457fe5b61028c6108b5565b6040805160ff9092168252519081900360200190f35b34156102aa57fe5b61028c6108bb565b6040805160ff9092168252519081900360200190f35b34156102d057fe5b6102036108c0565b60408051918252519081900360200190f35b34156102f257fe5b610203600160a060020a03600435811690602435166108d0565b60408051918252519081900360200190f35b341561032657fe5b610203600160a060020a03600435166108ed565b60408051918252519081900360200190f35b341561035457fe5b61020361090c565b60408051918252519081900360200190f35b341561037657fe5b61037e610913565b60408051600160a060020a039092168252519081900360200190f35b341561013857fe5b6101406106d7565b604080516020808252835181830152835191928392908301918501908083838215610186575b80518252602083111561018657601f199092019160209182019101610166565b505050905090810190601f1680156101b25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561043257fe5b61020361094c565b60408051918252519081900360200190f35b341561045457fe5b6101df600160a060020a0360043516602435610952565b604080519115158252519081900360200190f35b341561048757fe5b6101406109f3565b604080516020808252835181830152835191928392908301918501908083838215610186575b80518252602083111561018657601f199092019160209182019101610166565b505050905090810190601f1680156101b25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561051757fe5b604080516020600460443581810135601f81018490048402850184019095528484526101df948235600160a060020a0316946024803595606494929391909201918190840183828082843750949650610a1395505050505050565b604080519115158252519081900360200190f35b341561058e57fe5b610203610aad565b60408051918252519081900360200190f35b341561048757fe5b6101406109f3565b604080516020808252835181830152835191928392908301918501908083838215610186575b80518252602083111561018657601f199092019160209182019101610166565b505050905090810190601f1680156101b25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561064057fe5b610203600160a060020a0360043581169060243516610ad8565b60408051918252519081900360200190f35b341561067457fe5b60408051602060046024803582810135601f81018590048502860185019096528585526101df9583359593946044949392909201918190840183828082843750949650610b0595505050505050565b604080519115158252519081900360200190f35b6106df610fcf565b50604080518082019091526003815260e860020a624d59430260208201525b90565b600154600090821161077257600160a060020a03338116600081815260036020908152604080832094881680845294825291829020869055815186815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3506001610776565b5060005b5b92915050565b6681ac8e7e4d40005b90565b600160a060020a0383166000908152600260205260408120548290108015906107d95750600160a060020a0380851660009081526003602090815260408083203390941683529290522054829010155b80156107e55750600082115b801561080a5750600160a060020a038316600090815260026020526040902054828101115b1561089757600160a060020a03808516600081815260026020818152604080842080548990039055600382528084203387168552825280842080548990039055948816808452918152918490208054870190558351868152935190937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92908290030190a350600161089b565b5060005b5b9392505050565b60026020526000908152604090205481565b60085b90565b600881565b6001546681ac8e7e4d4000035b90565b600360209081526000928352604080842090915290825290205481565b600160a060020a0381166000908152600260205260409020545b919050565b6001545b90565b600054600160a060020a031681565b6106df610fcf565b50604080518082019091526003815260e860020a624d59430260208201525b90565b60015481565b600061095c610fcf565b600160a060020a0333166000908152600260205260409020548390108015906109855750600083115b80156109aa5750600160a060020a038416600090815260026020526040902054838101115b156109e6576109b884610c2a565b156109cf576109c8848483610c67565b91506109eb565b6109c8848483610e99565b91506109eb565b6109eb565b600091505b5b5092915050565b604080518082019091526003815260e860020a624d594302602082015281565b600160a060020a033316600090815260026020526040812054839010801590610a3c5750600083115b8015610a615750600160a060020a038416600090815260026020526040902054838101115b1561089757610a6f84610c2a565b15610a8657610a7f848484610c67565b905061089b565b610a7f848484610e99565b905061089b565b61089b565b50600061089b565b5b9392505050565b6681ac8e7e4d400081565b604080518082019091526003815260e860020a624d594302602082015281565b600160a060020a038083166000908152600360209081526040808320938516835292905220545b92915050565b600160a060020a033316600090815260026020526040812054839010801590610b2e5750600083115b1561077257600160a060020a0333166000818152600260209081526040918290208054879003905560018054879003908190558251878152808301829052606093810184815287519482019490945286517f8da2fc26da2245514483a393963ce93cac8be27cf30bbbc78569ff2ffe3eda1694899489939260808401918501908083838215610bd8575b805182526020831115610bd857601f199092019160209182019101610bb8565b505050905090810190601f168015610c045780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a2506001610776565b506000610776565b5b92915050565b600080600160a060020a0383161515610c465760009150610c60565b50813b6000811115610c5b5760019150610c60565b600091505b5b50919050565b33600160a060020a0381811660008181526002602090815260408083208054899003905593881680835284832080548901905593517fc0ee0b8a000000000000000000000000000000000000000000000000000000008152600481019384526024810188905260606044820190815287516064830152875193968a969563c0ee0b8a9591948b948b9492936084909101918501908083838215610d25575b805182526020831115610d2557601f199092019160209182019101610d05565b505050905090810190601f168015610d515780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1515610d6e57fe5b6102c65a03f11515610d7c57fe5b50505084600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a384600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1686866040518083815260200180602001828103825283818151815260200191508051906020019080838360008314610e52575b805182526020831115610e5257601f199092019160209182019101610e32565b505050905090810190601f168015610e7e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3600191505b509392505050565b600160a060020a033381166000818152600260209081526040808320805488900390559387168083528483208054880190558451878152945192949093927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a383600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1685856040518083815260200180602001828103825283818151815260200191508051906020019080838360008314610f8a575b805182526020831115610f8a57601f199092019160209182019101610f6a565b505050905090810190601f168015610fb65780820380516001836020036101000a031916815260200191505b50935050505060405180910390a35060015b9392505050565b60408051602081019091526000815290565b604080516020810190915260008152905600a165627a7a723058202848a1642e6e3a4a8123bc3ae8a7db698ee465fc613cbd000c61f1e7dce915da0029"
}