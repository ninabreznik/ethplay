{
  "address": "0xf778ba251bffbcc6d5131eec068fda4435941f92",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AirDrop",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-28\n*/\n\npragma solidity ^0.4.23;\n\ncontract ERC223Interface {\n    uint public totalSupply;\n    uint8 public decimals;\n    function balanceOf(address who) constant returns (uint);\n    function transfer(address to, uint value);\n    function transfer(address to, uint value, bytes data);\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n}\n\ncontract ERC223ReceivingContract {\n\n    /**\n     * @dev Standard ERC223 function that will handle incoming token transfers.\n     *\n     * @param _from  Token sender address.\n     * @param _value Amount of tokens.\n     * @param _data  Transaction metadata.\n     */\n    function tokenFallback(address _from, uint _value, bytes _data);\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title AirDropContract\n * Simply do the airdrop.\n */\ncontract AirDrop is Ownable {\n    using SafeMath for uint256;\n\n    // the amount that owner wants to send each time\n    uint public airDropAmount;\n\n    // the mapping to judge whether each address has already received airDropped\n    mapping ( address => bool ) public invalidAirDrop;\n\n    // the array of addresses which received airDrop\n    address[] public arrayAirDropReceivers;\n\n    // flag to stop airdrop\n    bool public stop = false;\n\n    ERC223Interface public erc20;\n\n    uint256 public startTime;\n    uint256 public endTime;\n\n    // event\n    event LogAirDrop(address indexed receiver, uint amount);\n    event LogStop();\n    event LogStart();\n    event LogWithdrawal(address indexed receiver, uint amount);\n\n    /**\n    * @dev Constructor to set _airDropAmount and _tokenAddresss.\n    * @param _airDropAmount The amount of token that is sent for doing airDrop.\n    * @param _tokenAddress The address of token.\n    */\n    constructor(uint256 _startTime, uint256 _endTime, uint _airDropAmount, address _tokenAddress) public {\n        require(_startTime >= now &&\n            _endTime >= _startTime &&\n            _airDropAmount > 0 &&\n            _tokenAddress != address(0)\n        );\n        startTime = _startTime;\n        endTime = _endTime;\n        erc20 = ERC223Interface(_tokenAddress);\n        uint tokenDecimals = erc20.decimals();\n        airDropAmount = _airDropAmount.mul(10 ** tokenDecimals);\n    }\n\n    /**\n     * @dev Standard ERC223 function that will handle incoming token transfers.\n     *\n     * @param _from  Token sender address.\n     * @param _value Amount of tokens.\n     * @param _data  Transaction metadata.\n     */\n    function tokenFallback(address _from, uint _value, bytes _data) {}\n\n    /**\n    * @dev Confirm that airDrop is available.\n    * @return A bool to confirm that airDrop is available.\n    */\n    function isValidAirDropForAll() public view returns (bool) {\n        bool validNotStop = !stop;\n        bool validAmount = getRemainingToken() >= airDropAmount;\n        bool validPeriod = now >= startTime && now <= endTime;\n        return validNotStop && validAmount && validPeriod;\n    }\n\n    /**\n    * @dev Confirm that airDrop is available for msg.sender.\n    * @return A bool to confirm that airDrop is available for msg.sender.\n    */\n    function isValidAirDropForIndividual() public view returns (bool) {\n        bool validNotStop = !stop;\n        bool validAmount = getRemainingToken() >= airDropAmount;\n        bool validPeriod = now >= startTime && now <= endTime;\n        bool validReceiveAirDropForIndividual = !invalidAirDrop[msg.sender];\n        return validNotStop && validAmount && validPeriod && validReceiveAirDropForIndividual;\n    }\n\n    /**\n    * @dev Do the airDrop to msg.sender\n    */\n    function receiveAirDrop() public {\n        require(isValidAirDropForIndividual());\n\n        // set invalidAirDrop of msg.sender to true\n        invalidAirDrop[msg.sender] = true;\n\n        // set msg.sender to the array of the airDropReceiver\n        arrayAirDropReceivers.push(msg.sender);\n\n        // execute transferFrom\n        erc20.transfer(msg.sender, airDropAmount);\n\n        emit LogAirDrop(msg.sender, airDropAmount);\n    }\n\n    /**\n    * @dev Change the state of stop flag\n    */\n    function toggle() public onlyOwner {\n        stop = !stop;\n\n        if (stop) {\n            emit LogStop();\n        } else {\n            emit LogStart();\n        }\n    }\n\n    /**\n    * @dev Withdraw the amount of token that is remaining in this contract.\n    * @param _address The address of EOA that can receive token from this contract.\n    */\n    function withdraw(address _address) public onlyOwner {\n        require(stop || now > endTime);\n        require(_address != address(0));\n        uint tokenBalanceOfContract = getRemainingToken();\n        erc20.transfer(_address, tokenBalanceOfContract);\n        emit LogWithdrawal(_address, tokenBalanceOfContract);\n    }\n\n    /**\n    * @dev Get the total number of addresses which received airDrop.\n    * @return Uint256 the total number of addresses which received airDrop.\n    */\n    function getTotalNumberOfAddressesReceivedAirDrop() public view returns (uint256) {\n        return arrayAirDropReceivers.length;\n    }\n\n    /**\n    * @dev Get the remaining amount of token user can receive.\n    * @return Uint256 the amount of token that user can reveive.\n    */\n    function getRemainingToken() public view returns (uint256) {\n        return erc20.balanceOf(this);\n    }\n\n    /**\n    * @dev Return the total amount of token user received.\n    * @return Uint256 total amount of token user received.\n    */\n    function getTotalAirDroppedAmount() public view returns (uint256) {\n        return airDropAmount.mul(arrayAirDropReceivers.length);\n    }\n}",
  "bytecode": "60806040526000600460006101000a81548160ff02191690831515021790555034801561002b57600080fd5b50604051608080620011a8833981018060405281019080805190602001909291908051906020019092919080519060200190929190805190602001909291905050506000336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504285101580156100bf5750848410155b80156100cb5750600083115b80156101045750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b151561010f57600080fd5b846005819055508360068190555081600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156101e457600080fd5b505af11580156101f8573d6000803e3d6000fd5b505050506040513d602081101561020e57600080fd5b810190808051906020019092919050505060ff16905061024781600a0a8461025764010000000002610ea5179091906401000000009004565b600181905550505050505061028f565b60008083141561026a5760009050610289565b818302905081838281151561027b57fe5b0414151561028557fe5b8090505b92915050565b610f09806200029f6000396000f3006080604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806307da68f51461010157806308e9988b146101305780633197cbb61461015b5780633efe6441146101865780633f4039ba146101b157806340992e9d1461021e57806340a3d2461461024957806351cff8d9146102605780636a3350c8146102a357806370cf7508146102fe578063785e9e861461032d57806378e97925146103845780638b08292d146103af5780638da5cb5b146103de578063c0ee0b8a14610435578063c1fae25b146104c8578063c7b160db146104df578063f2fde38b1461050a575b600080fd5b34801561010d57600080fd5b5061011661054d565b604051808215151515815260200191505060405180910390f35b34801561013c57600080fd5b50610145610560565b6040518082815260200191505060405180910390f35b34801561016757600080fd5b50610170610566565b6040518082815260200191505060405180910390f35b34801561019257600080fd5b5061019b61056c565b6040518082815260200191505060405180910390f35b3480156101bd57600080fd5b506101dc6004803603810190808035906020019092919050505061066b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561022a57600080fd5b506102336106a9565b6040518082815260200191505060405180910390f35b34801561025557600080fd5b5061025e6106ca565b005b34801561026c57600080fd5b506102a1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107c4565b005b3480156102af57600080fd5b506102e4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109bd565b604051808215151515815260200191505060405180910390f35b34801561030a57600080fd5b506103136109dd565b604051808215151515815260200191505060405180910390f35b34801561033957600080fd5b50610342610a92565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561039057600080fd5b50610399610ab8565b6040518082815260200191505060405180910390f35b3480156103bb57600080fd5b506103c4610abe565b604051808215151515815260200191505060405180910390f35b3480156103ea57600080fd5b506103f3610b17565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561044157600080fd5b506104c6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610b3c565b005b3480156104d457600080fd5b506104dd610b41565b005b3480156104eb57600080fd5b506104f4610d43565b6040518082815260200191505060405180910390f35b34801561051657600080fd5b5061054b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d50565b005b600460009054906101000a900460ff1681565b60015481565b60065481565b6000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561062b57600080fd5b505af115801561063f573d6000803e3d6000fd5b505050506040513d602081101561065557600080fd5b8101908080519060200190929190505050905090565b60038181548110151561067a57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006106c5600380549050600154610ea590919063ffffffff16565b905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561072557600080fd5b600460009054906101000a900460ff1615600460006101000a81548160ff021916908315150217905550600460009054906101000a900460ff1615610795577f407235ba9d50c9ec9294457c137c94dd310f8658f7c03e9061c50ac66751af1260405160405180910390a16107c2565b7fddd1002e99df5d98b17a9b830ba8e5a4f8d618d5df9ccc99c5faea5b4abdbad860405160405180910390a15b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561082157600080fd5b600460009054906101000a900460ff168061083d575060065442115b151561084857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561088457600080fd5b61088c61056c565b9050600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561095357600080fd5b505af1158015610967573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff167fb4214c8c54fc7442f36d3682f59aebaf09358a4431835b30efb29d52cf9e1e91826040518082815260200191505060405180910390a25050565b60026020528060005260406000206000915054906101000a900460ff1681565b6000806000806000600460009054906101000a900460ff16159350600154610a0361056c565b101592506005544210158015610a1b57506006544211155b9150600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16159050838015610a775750825b8015610a805750815b8015610a895750805b94505050505090565b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600080600080600460009054906101000a900460ff16159250600154610ae261056c565b101591506005544210158015610afa57506006544211155b9050828015610b065750815b8015610b0f5750805b935050505090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b505050565b610b496109dd565b1515610b5457600080fd5b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060033390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336001546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015610cd957600080fd5b505af1158015610ced573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f41097886570f9a869fa2411d79ffeeeaf139da10f9050e7797b948f14ff425696001546040518082815260200191505060405180910390a2565b6000600380549050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610dab57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610de757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080831415610eb85760009050610ed7565b8183029050818382811515610ec957fe5b04141515610ed357fe5b8090505b929150505600a165627a7a723058208768347e34f9c77a5a88ee472707a1362760098e8343f2c90d5dee786b5767b10029000000000000000000000000000000000000000000000000000000005c071500000000000000000000000000000000000000000000000000000000005c7dbc000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000ec7ba74789694d0d03d458965370dc7cf2fe75ba",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000005c071500000000000000000000000000000000000000000000000000000000005c7dbc000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000ec7ba74789694d0d03d458965370dc7cf2fe75ba"
}