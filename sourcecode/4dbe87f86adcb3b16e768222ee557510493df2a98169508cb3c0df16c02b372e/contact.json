{
  "address": "0x62c191dac8873de9c81ea4e3afa1ddfc0075a82f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenTraderFactory",
  "compilerVersion": "v0.4.26+commit.4563c3fc",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-02\n*/\n\npragma solidity ^0.4.25;\n\n// ------------------------------------------------------------------------\n// TokenTraderFactory\n//\n// Decentralised trustless ERC20-compliant token to ETH exchange contract\n// on the Ethereum blockchain.\n//\n// Note that this TokenTrader cannot be used with the Golem Network Token\n// directly as the token does not implement the ERC20\n// transferFrom(...), approve(...) and allowance(...) methods\n//\n// History:\n//   Jan 25 2017 - BPB Added makerTransferAsset(...) and\n//                     makerTransferEther(...)\n//   Feb 05 2017 - BPB Bug fix in the change calculation for the Unicorn\n//                     token with natural number 1\n//   Feb 08 2017 - BPB/JL Renamed etherValueOfTokensToSell to\n//                     amountOfTokensToSell in takerSellAsset(...) to\n//                     better describe the parameter\n//                     Added check in createTradeContract(...) to prevent\n//                     GNTs from being used with this contract. The asset\n//                     token will need to have an allowance(...) function.\n//\n// Enjoy. (c) JonnyLatte & BokkyPooBah 2017. The MIT licence.\n// ------------------------------------------------------------------------\n\n// https://github.com/ethereum/EIPs/issues/20\ncontract ERC20 {\n    function totalSupply() public constant returns (uint supply);\n    function balanceOf(address _owner) public constant returns (uint balance);\n    function transfer(address _to, uint _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n    function approve(address _spender, uint _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public constant returns (uint remaining);\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ncontract Owned {\n    address public owner;\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        if (msg.sender != owner) revert();\n        _;\n    }\n\n    modifier onlyOwnerOrTokenTraderWithSameOwner {\n        if (msg.sender != owner && TokenTrader(msg.sender).owner() != owner) revert();\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n// contract can buy or sell tokens for ETH\n// prices are in amount of wei per batch of token units\n\ncontract TokenTrader is Owned {\n\n    address public asset;       // address of token\n    uint256 public buyPrice;    // contract buys lots of token at this price\n    uint256 public sellPrice;   // contract sells lots at this price\n    uint256 public units;       // lot size (token-wei)\n\n    bool public buysTokens;     // is contract buying\n    bool public sellsTokens;    // is contract selling\n\n    event ActivatedEvent(bool buys, bool sells);\n    event MakerDepositedEther(uint256 amount);\n    event MakerWithdrewAsset(uint256 tokens);\n    event MakerTransferredAsset(address toTokenTrader, uint256 tokens);\n    event MakerWithdrewERC20Token(address tokenAddress, uint256 tokens);\n    event MakerWithdrewEther(uint256 ethers);\n    event MakerTransferredEther(address toTokenTrader, uint256 ethers);\n    event TakerBoughtAsset(address indexed buyer, uint256 ethersSent,\n        uint256 ethersReturned, uint256 tokensBought);\n    event TakerSoldAsset(address indexed seller, uint256 amountOfTokensToSell,\n        uint256 tokensSold, uint256 etherValueOfTokensSold);\n\n    // Constructor - only to be called by the TokenTraderFactory contract\n    constructor (\n        address _asset,\n        uint256 _buyPrice,\n        uint256 _sellPrice,\n        uint256 _units,\n        bool    _buysTokens,\n        bool    _sellsTokens\n    ) public {\n        asset       = _asset;\n        buyPrice    = _buyPrice;\n        sellPrice   = _sellPrice;\n        units       = _units;\n        buysTokens  = _buysTokens;\n        sellsTokens = _sellsTokens;\n        emit ActivatedEvent(buysTokens, sellsTokens);\n    }\n\n    // Maker can activate or deactivate this contract's buying and\n    // selling status\n    //\n    // The ActivatedEvent() event is logged with the following\n    // parameter:\n    //   buysTokens   this contract can buy asset tokens\n    //   sellsTokens  this contract can sell asset tokens\n    //\n    function activate (\n        bool _buysTokens,\n        bool _sellsTokens\n    ) public onlyOwner {\n        buysTokens  = _buysTokens;\n        sellsTokens = _sellsTokens;\n        emit ActivatedEvent(buysTokens, sellsTokens);\n    }\n\n    // Maker can deposit ethers to this contract so this contract\n    // can buy asset tokens.\n    //\n    // Maker deposits asset tokens to this contract by calling the\n    // asset's transfer() method with the following parameters\n    //   _to     is the address of THIS contract\n    //   _value  is the number of asset tokens to be transferred\n    //\n    // Taker MUST NOT send tokens directly to this contract. Takers\n    // MUST use the takerSellAsset() method to sell asset tokens\n    // to this contract\n    //\n    // Maker can also transfer ethers from one TokenTrader contract\n    // to another TokenTrader contract, both owned by the Maker\n    //\n    // The MakerDepositedEther() event is logged with the following\n    // parameter:\n    //   ethers  is the number of ethers deposited by the maker\n    //\n    // This method was called deposit() in the old version\n    //\n    function makerDepositEther() public payable onlyOwnerOrTokenTraderWithSameOwner {\n        emit MakerDepositedEther(msg.value);\n    }\n\n    // Maker can withdraw asset tokens from this contract, with the\n    // following parameter:\n    //   tokens  is the number of asset tokens to be withdrawn\n    //\n    // The MakerWithdrewAsset() event is logged with the following\n    // parameter:\n    //   tokens  is the number of tokens withdrawn by the maker\n    //\n    // This method was called withdrawAsset() in the old version\n    //\n    function makerWithdrawAsset(uint256 tokens) public onlyOwner returns (bool) {\n        emit MakerWithdrewAsset(tokens);\n        return ERC20(asset).transfer(owner, tokens);\n    }\n\n    // Maker can transfer asset tokens from this contract to another\n    // TokenTrader contract, with the following parameter:\n    //   toTokenTrader  Another TokenTrader contract owned by the\n    //                  same owner and with the same asset\n    //   tokens         is the number of asset tokens to be moved\n    //\n    // The MakerTransferredAsset() event is logged with the following\n    // parameters:\n    //   toTokenTrader  The other TokenTrader contract owned by\n    //                  the same owner and with the same asset\n    //   tokens         is the number of tokens transferred\n    //\n    // The asset Transfer() event is also logged from this contract\n    // to the other contract\n    //\n    function makerTransferAsset(\n        TokenTrader toTokenTrader,\n        uint256 tokens\n    ) public onlyOwner returns (bool) {\n        if (owner != toTokenTrader.owner() || asset != toTokenTrader.asset()) {\n            revert();\n        }\n        emit MakerTransferredAsset(toTokenTrader, tokens);\n        return ERC20(asset).transfer(toTokenTrader, tokens);\n    }\n\n    // Maker can withdraw any ERC20 asset tokens from this contract\n    //\n    // This method is included in the case where this contract receives\n    // the wrong tokens\n    //\n    // The MakerWithdrewERC20Token() event is logged with the following\n    // parameter:\n    //   tokenAddress  is the address of the tokens withdrawn by the maker\n    //   tokens        is the number of tokens withdrawn by the maker\n    //\n    // This method was called withdrawToken() in the old version\n    //\n    function makerWithdrawERC20Token(\n        address tokenAddress,\n        uint256 tokens\n    ) public onlyOwner returns (bool) {\n        emit MakerWithdrewERC20Token(tokenAddress, tokens);\n        return ERC20(tokenAddress).transfer(owner, tokens);\n    }\n\n    // Maker can withdraw ethers from this contract\n    //\n    // The MakerWithdrewEther() event is logged with the following parameter\n    //   ethers  is the number of ethers withdrawn by the maker\n    //\n    // This method was called withdraw() in the old version\n    //\n    function makerWithdrawEther(uint256 ethers) public onlyOwner returns (bool) {\n        address addr = this;\n        if (addr.balance >= ethers) {\n            emit MakerWithdrewEther(ethers);\n            return owner.send(ethers);\n        }\n    }\n\n    // Maker can transfer ethers from this contract to another TokenTrader\n    // contract, with the following parameters:\n    //   toTokenTrader  Another TokenTrader contract owned by the\n    //                  same owner and with the same asset\n    //   ethers         is the number of ethers to be moved\n    //\n    // The MakerTransferredEther() event is logged with the following parameter\n    //   toTokenTrader  The other TokenTrader contract owned by the\n    //                  same owner and with the same asset\n    //   ethers         is the number of ethers transferred\n    //\n    // The MakerDepositedEther() event is logged on the other\n    // contract with the following parameter:\n    //   ethers  is the number of ethers deposited by the maker\n    //\n    function makerTransferEther(\n        TokenTrader toTokenTrader,\n        uint256 ethers\n    ) public onlyOwner returns (bool) {\n        if (owner != toTokenTrader.owner() || asset != toTokenTrader.asset()) {\n            revert();\n        }\n        address addr = this;\n        if (addr.balance >= ethers) {\n            emit MakerTransferredEther(toTokenTrader, ethers);\n            toTokenTrader.makerDepositEther.value(ethers)();\n        }\n    }\n\n    // Taker buys asset tokens by sending ethers\n    //\n    // The TakerBoughtAsset() event is logged with the following parameters\n    //   buyer           is the buyer's address\n    //   ethersSent      is the number of ethers sent by the buyer\n    //   ethersReturned  is the number of ethers sent back to the buyer as\n    //                   change\n    //   tokensBought    is the number of asset tokens sent to the buyer\n    //\n    // This method was called buy() in the old version\n    //\n    function takerBuyAsset() public payable {\n        if (sellsTokens || msg.sender == owner) {\n            // Note that sellPrice has already been validated as > 0\n            uint order    = msg.value / sellPrice;\n            // Note that units has already been validated as > 0\n            uint can_sell = ERC20(asset).balanceOf(address(this)) / units;\n            uint256 change = 0;\n            if (msg.value > (can_sell * sellPrice)) {\n                change  = msg.value - (can_sell * sellPrice);\n                order = can_sell;\n            }\n            if (change > 0) {\n                if (!msg.sender.send(change)) revert();\n            }\n            if (order > 0) {\n                if (!ERC20(asset).transfer(msg.sender, order * units)) revert();\n            }\n            emit TakerBoughtAsset(msg.sender, msg.value, change, order * units);\n        }\n        // Return user funds if the contract is not selling\n        else if (!msg.sender.send(msg.value)) revert();\n    }\n\n    // Taker sells asset tokens for ethers by:\n    // 1. Calling the asset's approve() method with the following parameters\n    //    _spender            is the address of this contract\n    //    _value              is the number of tokens to be sold\n    // 2. Calling this takerSellAsset() method with the following parameter\n    //    etherValueOfTokens  is the ether value of the asset tokens to be sold\n    //                        by the taker\n    //\n    // The TakerSoldAsset() event is logged with the following parameters\n    //   seller                  is the seller's address\n    //   amountOfTokensToSell    is the amount of the asset tokens being\n    //                           sold by the taker\n    //   tokensSold              is the number of the asset tokens sold\n    //   etherValueOfTokensSold  is the ether value of the asset tokens sold\n    //\n    // This method was called sell() in the old version\n    //\n    function takerSellAsset(uint256 amountOfTokensToSell) public {\n        if (buysTokens || msg.sender == owner) {\n            // Maximum number of token the contract can buy\n            // Note that buyPrice has already been validated as > 0\n            address addr = this;\n            uint256 can_buy = addr.balance / buyPrice;\n            // Token lots available\n            // Note that units has already been validated as > 0\n            uint256 order = amountOfTokensToSell / units;\n            // Adjust order for funds available\n            if (order > can_buy) order = can_buy;\n            if (order > 0) {\n                // Extract user tokens\n                if (!ERC20(asset).transferFrom(msg.sender, address(this), order * units)) revert();\n                // Pay user\n                if (!msg.sender.send(order * buyPrice)) revert();\n            }\n            emit TakerSoldAsset(msg.sender, amountOfTokensToSell, order * units, order * buyPrice);\n        }\n    }\n\n    // Taker buys tokens by sending ethers\n    function () public payable {\n        takerBuyAsset();\n    }\n}\n\n// This contract deploys TokenTrader contracts and logs the event\ncontract TokenTraderFactory is Owned {\n\n    event TradeListing(address indexed ownerAddress, address indexed tokenTraderAddress,\n        address indexed asset, uint256 buyPrice, uint256 sellPrice, uint256 units,\n        bool buysTokens, bool sellsTokens);\n    event OwnerWithdrewERC20Token(address indexed tokenAddress, uint256 tokens);\n\n    mapping(address => bool) _verify;\n\n    uint256 internal accountCount = 0;\n    mapping(address => address) internal addressLinkedList;\n\n    /**\n     * @notice Return a list of addresses and their tokens\n     * @return Two arrays, the first a list of addresses, the second a list of\n     *   token amounts. Each index matches the other.\n     */\n    function list() public view returns (address[]) {\n        address[] memory addrs = new address[](accountCount);\n\n        uint256 i = 0;\n        address current = addressLinkedList[0];\n        while (current != 0) {\n            addrs[i] = current;\n            current = addressLinkedList[current];\n            i++;\n        }\n\n        return addrs;\n    }\n\n    // Anyone can call this method to verify the settings of a\n    // TokenTrader contract. The parameters are:\n    //   tradeContract  is the address of a TokenTrader contract\n    //\n    // Return values:\n    //   valid        did this TokenTraderFactory create the TokenTrader contract?\n    //   owner        is the owner of the TokenTrader contract\n    //   asset        is the ERC20 asset address\n    //   buyPrice     is the buy price in ethers per `units` of asset tokens\n    //   sellPrice    is the sell price in ethers per `units` of asset tokens\n    //   units        is the number of units of asset tokens\n    //   buysTokens   is the TokenTrader contract buying tokens?\n    //   sellsTokens  is the TokenTrader contract selling tokens?\n    //\n    function verify(address tradeContract) public constant returns (\n        bool    valid,\n        address owner,\n        address asset,\n        uint256 buyPrice,\n        uint256 sellPrice,\n        uint256 units,\n        bool    buysTokens,\n        bool    sellsTokens\n    ) {\n        valid = _verify[tradeContract];\n        if (valid) {\n            TokenTrader t = TokenTrader(tradeContract);\n            owner         = t.owner();\n            asset         = t.asset();\n            buyPrice      = t.buyPrice();\n            sellPrice     = t.sellPrice();\n            units         = t.units();\n            buysTokens    = t.buysTokens();\n            sellsTokens   = t.sellsTokens();\n        }\n    }\n\n    // Maker can call this method to create a new TokenTrader contract\n    // with the maker being the owner of this new contract\n    //\n    // Parameters:\n    //   asset        is the ERC20 asset address\n    //   buyPrice     is the buy price in ethers per `units` of asset tokens\n    //   sellPrice    is the sell price in ethers per `units` of asset tokens\n    //   units        is the number of units of asset tokens\n    //   buysTokens   is the TokenTrader contract buying tokens?\n    //   sellsTokens  is the TokenTrader contract selling tokens?\n    //\n    // For example, listing a TokenTrader contract on the REP Augur token where\n    // the contract will buy REP tokens at a rate of 39000/100000 = 0.39 ETH\n    // per REP token and sell REP tokens at a rate of 41000/100000 = 0.41 ETH\n    // per REP token:\n    //   asset        0x48c80f1f4d53d5951e5d5438b54cba84f29f32a5\n    //   buyPrice     39000\n    //   sellPrice    41000\n    //   units        100000\n    //   buysTokens   true\n    //   sellsTokens  true\n    //\n    // The TradeListing() event is logged with the following parameters\n    //   ownerAddress        is the Maker's address\n    //   tokenTraderAddress  is the address of the newly created TokenTrader contract\n    //   asset               is the ERC20 asset address\n    //   buyPrice            is the buy price in ethers per `units` of asset tokens\n    //   sellPrice           is the sell price in ethers per `units` of asset tokens\n    //   unit                is the number of units of asset tokens\n    //   buysTokens          is the TokenTrader contract buying tokens?\n    //   sellsTokens         is the TokenTrader contract selling tokens?\n    //\n    function createTradeContract(\n        address asset,\n        uint256 buyPrice,\n        uint256 sellPrice,\n        uint256 units,\n        bool    buysTokens,\n        bool    sellsTokens\n    ) public returns (address trader) {\n        // Cannot have invalid asset\n        if (asset == 0x0) revert();\n        // Check for ERC20 allowance function\n        // This will revert() an error if the allowance function\n        // is undefined to prevent GNTs from being used\n        // with this factory\n        ERC20(asset).allowance(msg.sender, this);\n        // Cannot set zero or negative price\n        if (buyPrice <= 0 || sellPrice <= 0) revert();\n        // Must make profit on spread\n        if (buyPrice >= sellPrice) revert();\n        // Cannot buy or sell zero or negative units\n        if (units <= 0) revert();\n\n        trader = new TokenTrader(\n            asset,\n            buyPrice,\n            sellPrice,\n            units,\n            buysTokens,\n            sellsTokens);\n        // Record that this factory created the trader\n        _verify[trader] = true;\n        addToList(trader);\n        // Set the owner to whoever called the function\n        TokenTrader(trader).transferOwnership(msg.sender);\n        emit TradeListing(msg.sender, trader, asset, buyPrice, sellPrice, units, buysTokens, sellsTokens);\n    }\n\n    // Factory owner can withdraw any ERC20 asset tokens from this contract\n    //\n    // This method is included in the case where this contract receives\n    // the wrong tokens\n    //\n    // The OwnerWithdrewERC20Token() event is logged with the following\n    // parameter:\n    //   tokenAddress  is the address of the tokens withdrawn by the maker\n    //   tokens        is the number of tokens withdrawn by the maker\n    //\n    function ownerWithdrawERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool) {\n        emit OwnerWithdrewERC20Token(tokenAddress, tokens);\n        return ERC20(tokenAddress).transfer(owner, tokens);\n    }\n\n    // Prevents accidental sending of ether to the factory\n    function () public {\n        revert();\n    }\n\n    /**\n     * @notice Add an account to a linked list\n     * @param addr address of the account to add to the linked list\n     * @dev This is necessary to iterate over for listing purposes\n     */\n    function addToList(address addr) internal {\n        addressLinkedList[addr] = addressLinkedList[0x0];\n        addressLinkedList[0x0] = addr;\n        accountCount++;\n    }\n\n    /**\n     * @notice Remove an account from a linked list\n     * @param addr address of the account to remove from the linked list\n     * @dev This is necessary to iterate over for listing purposes\n     */\n    function removeFromList(address addr) internal {\n        uint16 i = 0;\n        bool found = false;\n        address parent;\n        address current = addressLinkedList[0];\n        while (true) {\n            if (addressLinkedList[current] == addr) {\n                parent = current;\n                found = true;\n                break;\n            }\n            current = addressLinkedList[current];\n\n            if (i++ > accountCount) break;\n        }\n\n        require(found, \"Account was not found to remove.\");\n\n        addressLinkedList[parent] = addressLinkedList[addressLinkedList[parent]];\n        delete addressLinkedList[addr];\n\n        accountCount--;\n    }\n\n    /**\n     * @notice Make sure that this address exists in our linked list\n     * @param addr address of the account to test\n     * @dev This is necessary to iterate over for listing purposes\n     */\n    function ensureInList(address addr) internal {\n        bool found = false;\n        address current = addressLinkedList[0];\n        while (current != 0) {\n            if (current == addr) {\n                found = true;\n                break;\n            }\n            current = addressLinkedList[current];\n        }\n        if (!found) {\n            addToList(addr);\n        }\n    }\n}",
  "bytecode": "60806040526000600255336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612f2f806100586000396000f300608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630f560cd71461008a5780633d6a32bd146100f65780635de01497146101af57806363a9c3d7146102145780638da5cb5b14610300578063f2fde38b14610357575b34801561008457600080fd5b50600080fd5b34801561009657600080fd5b5061009f61039a565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156100e25780820151818401526020810190506100c7565b505050509050019250505060405180910390f35b34801561010257600080fd5b5061016d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803515159060200190929190803515159060200190929190505050610508565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101bb57600080fd5b506101fa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108bf565b604051808215151515815260200191505060405180910390f35b34801561022057600080fd5b50610255600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a71565b60405180891515151581526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200184815260200183151515158152602001821515151581526020019850505050505050505060405180910390f35b34801561030c57600080fd5b50610315610f4b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561036357600080fd5b50610398600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f70565b005b6060806000806002546040519080825280602002602001820160405280156103d15781602001602082028038833980820191505090505b50925060009150600360008073ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b60008173ffffffffffffffffffffffffffffffffffffffff161415156104ff5780838381518110151561045457fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508180600101925050610425565b82935050505090565b6000808773ffffffffffffffffffffffffffffffffffffffff16141561052d57600080fd5b8673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1580156105fc57600080fd5b505af1158015610610573d6000803e3d6000fd5b505050506040513d602081101561062657600080fd5b810190808051906020019092919050505050600086111580610649575060008511155b1561065357600080fd5b848610151561066157600080fd5b60008411151561067057600080fd5b86868686868661067e6111cd565b808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200184815260200183151515158152602001821515151581526020019650505050505050604051809103906000f0801580156106fb573d6000803e3d6000fd5b50905060018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061075e81611089565b8073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156107f957600080fd5b505af115801561080d573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f65ff0f5aef2091ad3616436792adf51be3068c631b081ac0f30f77e3a0e6502d89898989896040518086815260200185815260200184815260200183151515158152602001821515151581526020019550505050505060405180910390a49695505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561091c57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff167f168656e1968a1165ef7fd3f1006847fcfba4cac97672bc70ccbcffb66bc080ba836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610a2e57600080fd5b505af1158015610a42573d6000803e3d6000fd5b505050506040513d6020811015610a5857600080fd5b8101908080519060200190929190505050905092915050565b6000806000806000806000806000600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1698508815610f3f578990508073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610b3b57600080fd5b505af1158015610b4f573d6000803e3d6000fd5b505050506040513d6020811015610b6557600080fd5b810190808051906020019092919050505097508073ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610bdc57600080fd5b505af1158015610bf0573d6000803e3d6000fd5b505050506040513d6020811015610c0657600080fd5b810190808051906020019092919050505096508073ffffffffffffffffffffffffffffffffffffffff16638620410b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610c7d57600080fd5b505af1158015610c91573d6000803e3d6000fd5b505050506040513d6020811015610ca757600080fd5b810190808051906020019092919050505095508073ffffffffffffffffffffffffffffffffffffffff16634b7503346040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610d1e57600080fd5b505af1158015610d32573d6000803e3d6000fd5b505050506040513d6020811015610d4857600080fd5b810190808051906020019092919050505094508073ffffffffffffffffffffffffffffffffffffffff1663976a84356040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610dbf57600080fd5b505af1158015610dd3573d6000803e3d6000fd5b505050506040513d6020811015610de957600080fd5b810190808051906020019092919050505093508073ffffffffffffffffffffffffffffffffffffffff1663b10993476040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610e6057600080fd5b505af1158015610e74573d6000803e3d6000fd5b505050506040513d6020811015610e8a57600080fd5b810190808051906020019092919050505092508073ffffffffffffffffffffffffffffffffffffffff16634ca50f596040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610f0157600080fd5b505af1158015610f15573d6000803e3d6000fd5b505050506040513d6020811015610f2b57600080fd5b810190808051906020019092919050505091505b50919395975091939597565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fcb57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360008073ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360008073ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060026000815480929190600101919050555050565b604051611d26806111de833901905600608060405234801561001057600080fd5b5060405160c080611d26833981018060405281019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600281905550836003819055508260048190555081600560006101000a81548160ff02191690831515021790555080600560016101000a81548160ff0219169083151502179055507ffa4f96c42c616d6fbda491095977a6af7c76ebd387177b72299180502cbeaa99600560009054906101000a900460ff16600560019054906101000a900460ff166040518083151515158152602001821515151581526020019250505060405180910390a1505050505050611b7d806101a96000396000f3006080604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632170ebf7146100fb57806338d52e0f146101405780634b750334146101975780634ca50f59146101c257806352954e5a146101f15780638620410b146102565780638da5cb5b14610281578063919f8cfc146102d8578063976a8435146102e2578063a7abc1241461030d578063b109934714610348578063be86d5a714610377578063c34764cf146103dc578063c60ccb0e14610441578063cd53a3b71461044b578063eff883bd14610490578063f2fde38b146104bd575b6100f9610500565b005b34801561010757600080fd5b50610126600480360381019080803590602001909291905050506108b5565b604051808215151515815260200191505060405180910390f35b34801561014c57600080fd5b506101556109d1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101a357600080fd5b506101ac6109f7565b6040518082815260200191505060405180910390f35b3480156101ce57600080fd5b506101d76109fd565b604051808215151515815260200191505060405180910390f35b3480156101fd57600080fd5b5061023c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a10565b604051808215151515815260200191505060405180910390f35b34801561026257600080fd5b5061026b610dd0565b6040518082815260200191505060405180910390f35b34801561028d57600080fd5b50610296610dd6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102e0610dfb565b005b3480156102ee57600080fd5b506102f7610f86565b6040518082815260200191505060405180910390f35b34801561031957600080fd5b50610346600480360381019080803515159060200190929190803515159060200190929190505050610f8c565b005b34801561035457600080fd5b5061035d611084565b604051808215151515815260200191505060405180910390f35b34801561038357600080fd5b506103c2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611097565b604051808215151515815260200191505060405180910390f35b3480156103e857600080fd5b50610427600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113f8565b604051808215151515815260200191505060405180910390f35b610449610500565b005b34801561045757600080fd5b50610476600480360381019080803590602001909291905050506115c7565b604051808215151515815260200191505060405180910390f35b34801561049c57600080fd5b506104bb60048036038101908080359060200190929190505050611783565b005b3480156104c957600080fd5b506104fe600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a38565b005b6000806000600560019054906101000a900460ff168061056c57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1561086f576003543481151561057e57fe5b049250600454600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561064157600080fd5b505af1158015610655573d6000803e3d6000fd5b505050506040513d602081101561066b57600080fd5b810190808051906020019092919050505081151561068557fe5b0491506000905060035482023411156106a5576003548202340390508192505b60008111156106ef573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015156106ee57600080fd5b5b600083111561080857600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3360045486026040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156107c157600080fd5b505af11580156107d5573d6000803e3d6000fd5b505050506040513d60208110156107eb57600080fd5b8101908080519060200190929190505050151561080757600080fd5b5b3373ffffffffffffffffffffffffffffffffffffffff167f37e948531341be0a8ce95c3833827c6f3559825cb6421e6ff1fe21c3a8b712173483600454870260405180848152602001838152602001828152602001935050505060405180910390a26108b0565b3373ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015156108af57600080fd5b5b505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561091357600080fd5b309050828173ffffffffffffffffffffffffffffffffffffffff16311015156109ca577f8a93d70d792b644d97d7da8a5798e03bbee85be4537a860a331dbe3ee50eb982836040518082815260200191505060405180910390a16000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f1935050505091506109cb565b5b50919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b600560019054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a6d57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ad157600080fd5b505af1158015610ae5573d6000803e3d6000fd5b505050506040513d6020811015610afb57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580610c5357508273ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610bc657600080fd5b505af1158015610bda573d6000803e3d6000fd5b505050506040513d6020811015610bf057600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15610c5d57600080fd5b7f127afec6b0ab48f803536010148b79615f4a518f9b574de5b45bc74991c46d518383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610d8d57600080fd5b505af1158015610da1573d6000803e3d6000fd5b505050506040513d6020811015610db757600080fd5b8101908080519060200190929190505050905092915050565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610f4357506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610eef57600080fd5b505af1158015610f03573d6000803e3d6000fd5b505050506040513d6020811015610f1957600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614155b15610f4d57600080fd5b7fc745dab9c51cefa79677191ed7af7b0ccbb8360b8b39ed79f257f6895882980f346040518082815260200191505060405180910390a1565b60045481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fe757600080fd5b81600560006101000a81548160ff02191690831515021790555080600560016101000a81548160ff0219169083151502179055507ffa4f96c42c616d6fbda491095977a6af7c76ebd387177b72299180502cbeaa99600560009054906101000a900460ff16600560019054906101000a900460ff166040518083151515158152602001821515151581526020019250505060405180910390a15050565b600560009054906101000a900460ff1681565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110f557600080fd5b8373ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561115957600080fd5b505af115801561116d573d6000803e3d6000fd5b505050506040513d602081101561118357600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415806112db57508373ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561124e57600080fd5b505af1158015611262573d6000803e3d6000fd5b505050506040513d602081101561127857600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156112e557600080fd5b309050828173ffffffffffffffffffffffffffffffffffffffff16311015156113f1577f714b446590efbc5b722abe34b4c0cacf4b1f5607fbf924f957646590ce66c4ad8484604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a18373ffffffffffffffffffffffffffffffffffffffff1663919f8cfc846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b1580156113d757600080fd5b505af11580156113eb573d6000803e3d6000fd5b50505050505b5092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561145557600080fd5b7ffea8ae97829f3801e6ca15928428931c2a4f3cee1fa7c9b83d959efd246664228383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a18273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561158457600080fd5b505af1158015611598573d6000803e3d6000fd5b505050506040513d60208110156115ae57600080fd5b8101908080519060200190929190505050905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561162457600080fd5b7f1ebbc515a759c3fe8e048867aac7fe458e3a37ac3dd44ffc73a6238cf3003981826040518082815260200191505060405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561174157600080fd5b505af1158015611755573d6000803e3d6000fd5b505050506040513d602081101561176b57600080fd5b81019080805190602001909291905050509050919050565b6000806000600560009054906101000a900460ff16806117ef57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15611a32573092506002548373ffffffffffffffffffffffffffffffffffffffff163181151561181b57fe5b0491506004548481151561182b57fe5b0490508181111561183a578190505b60008111156119cb57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333060045485026040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561194057600080fd5b505af1158015611954573d6000803e3d6000fd5b505050506040513d602081101561196a57600080fd5b8101908080519060200190929190505050151561198657600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc60025483029081150290604051600060405180830381858888f1935050505015156119ca57600080fd5b5b3373ffffffffffffffffffffffffffffffffffffffff167f0ba0a3a12a9b73413f41468a265bf897ff66171a971e352360753a27d5db7683856004548402600254850260405180848152602001838152602001828152602001935050505060405180910390a25b50505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a9357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820a011417abf26a7f8724e095c14ebef8248be714831e3b9be9a950110979a71130029a165627a7a723058203c523c682c30874f243a7884760c7edabfa3e3653df8a5729873efa63a7896b60029"
}