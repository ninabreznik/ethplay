{
  "address": "0x0c24e3aa0fc411debf74f138674cf2066c2e0ace",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FalconFarmer",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-22\n*/\n\npragma solidity ^0.4.20; // solhint-disable-line\n\n// similar as falconfarmer, with three changes:\n// A. one third of your falcons die when you sell eggs\n// B. you can transfer ownership of the devfee through sacrificing falcons\n// C. the \"free\" 300 falcons cost 0.001 eth (in line with the mining fee)\n\n// bots should have a harder time, and whales can compete for the devfee\n\ncontract FalconFarmer{\n    //uint256 EGGS_PER_FALCON_PER_SECOND=1;\n    uint256 public EGGS_TO_HATCH_1FALCON=86400;//for final version should be seconds in a day\n    uint256 public STARTING_FALCON=300;\n    uint256 PSN=10000;\n    uint256 PSNH=5000;\n    bool public initialized=false;\n    address public ceoAddress;\n    mapping (address => uint256) public hatcheryFalcon;\n    mapping (address => uint256) public claimedEggs;\n    mapping (address => uint256) public lastHatch;\n    mapping (address => address) public referrals;\n    uint256 public marketEggs;\n    uint256 public falconmasterReq=100000;\n    function FalconFarmer() public{\n        ceoAddress=msg.sender;\n    }\n    function becomeFalconmaster() public{\n        require(initialized);\n        require(hatcheryFalcon[msg.sender]>=falconmasterReq);\n        hatcheryFalcon[msg.sender]=SafeMath.sub(hatcheryFalcon[msg.sender],falconmasterReq);\n        falconmasterReq=SafeMath.add(falconmasterReq,100000);//+100k falcons each time\n        ceoAddress=msg.sender;\n    }\n    function hatchEggs(address ref) public{\n        require(initialized);\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\n            referrals[msg.sender]=ref;\n        }\n        uint256 eggsUsed=getMyEggs();\n        uint256 newFalcon=SafeMath.div(eggsUsed,EGGS_TO_HATCH_1FALCON);\n        hatcheryFalcon[msg.sender]=SafeMath.add(hatcheryFalcon[msg.sender],newFalcon);\n        claimedEggs[msg.sender]=0;\n        lastHatch[msg.sender]=now;\n        \n        //send referral eggs\n        claimedEggs[referrals[msg.sender]]=SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,5));\n        \n        //boost market to nerf falcon hoarding\n        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,10));\n    }\n    function sellEggs() public{\n        require(initialized);\n        uint256 hasEggs=getMyEggs();\n        uint256 eggValue=calculateEggSell(hasEggs);\n        uint256 fee=devFee(eggValue);\n        // kill one third of the owner's falcons on egg sale\n        hatcheryFalcon[msg.sender]=SafeMath.mul(SafeMath.div(hatcheryFalcon[msg.sender],3),2);\n        claimedEggs[msg.sender]=0;\n        lastHatch[msg.sender]=now;\n        marketEggs=SafeMath.add(marketEggs,hasEggs);\n        ceoAddress.transfer(fee);\n        msg.sender.transfer(SafeMath.sub(eggValue,fee));\n    }\n    function buyEggs() public payable{\n        require(initialized);\n        uint256 eggsBought=calculateEggBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\n        ceoAddress.transfer(devFee(msg.value));\n        claimedEggs[msg.sender]=SafeMath.add(claimedEggs[msg.sender],eggsBought);\n    }\n    //magic trade balancing algorithm\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n    }\n    function calculateEggSell(uint256 eggs) public view returns(uint256){\n        return calculateTrade(eggs,marketEggs,this.balance);\n    }\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n        return calculateTrade(eth,contractBalance,marketEggs);\n    }\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\n        return calculateEggBuy(eth,this.balance);\n    }\n    function devFee(uint256 amount) public view returns(uint256){\n        return SafeMath.div(SafeMath.mul(amount,4),100);\n    }\n    function seedMarket(uint256 eggs) public payable{\n        require(marketEggs==0);\n        initialized=true;\n        marketEggs=eggs;\n    }\n    function getFreeFalcon() public payable{\n        require(initialized);\n        require(msg.value==0.001 ether); //similar to mining fee, prevents bots\n        ceoAddress.transfer(msg.value); //falconmaster gets this entrance fee\n        require(hatcheryFalcon[msg.sender]==0);\n        lastHatch[msg.sender]=now;\n        hatcheryFalcon[msg.sender]=STARTING_FALCON;\n    }\n    function getBalance() public view returns(uint256){\n        return this.balance;\n    }\n    function getMyFalcon() public view returns(uint256){\n        return hatcheryFalcon[msg.sender];\n    }\n    function getFalconmasterReq() public view returns(uint256){\n        return falconmasterReq;\n    }\n    function getMyEggs() public view returns(uint256){\n        return SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender));\n    }\n    function getEggsSinceLastHatch(address adr) public view returns(uint256){\n        uint256 secondsPassed=min(EGGS_TO_HATCH_1FALCON,SafeMath.sub(now,lastHatch[adr]));\n        return SafeMath.mul(secondsPassed,hatcheryFalcon[adr]);\n    }\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": "60806040526201518060005561012c6001556127106002556113886003556000600460006101000a81548160ff021916908315150217905550620186a0600a5534801561004b57600080fd5b5033600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506115e88061009c6000396000f300608060405260043610610154576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a0f81681461015957806312065fe0146101b0578063158ef93e146101db578063229824c41461020a57806326fd84221461025f5780632e9392bb146102aa5780633955f0fe146102d55780633b653755146102ec5780633bc0461a1461030c5780633ec862a81461034d57806343ce742214610390578063467ece79146103bb5780634f74acfe1461041257806363eac2d41461041c5780636f5736c614610447578063726703611461045157806378b90f9f146104a85780637bd7c891146104ff5780637e56fde5146105165780638e316327146105575780639ca423b314610598578063cef0e9e21461061b578063d7c8843b14610646578063e5de0b891461069d578063ef9c3512146106c8578063fbb58c5c146106f3575b600080fd5b34801561016557600080fd5b5061016e61071e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101bc57600080fd5b506101c5610744565b6040518082815260200191505060405180910390f35b3480156101e757600080fd5b506101f0610763565b604051808215151515815260200191505060405180910390f35b34801561021657600080fd5b50610249600480360381019080803590602001909291908035906020019092919080359060200190929190505050610776565b6040518082815260200191505060405180910390f35b34801561026b57600080fd5b5061029460048036038101908080359060200190929190803590602001909291905050506107c9565b6040518082815260200191505060405180910390f35b3480156102b657600080fd5b506102bf6107e0565b6040518082815260200191505060405180910390f35b3480156102e157600080fd5b506102ea6107e6565b005b61030a60048036038101908080359060200190929190505050610a16565b005b34801561031857600080fd5b5061033760048036038101908080359060200190929190505050610a4c565b6040518082815260200191505060405180910390f35b34801561035957600080fd5b5061038e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a6a565b005b34801561039c57600080fd5b506103a5610ebe565b6040518082815260200191505060405180910390f35b3480156103c757600080fd5b506103fc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f16565b6040518082815260200191505060405180910390f35b61041a610f2e565b005b34801561042857600080fd5b5061043161108b565b6040518082815260200191505060405180910390f35b61044f6110d2565b005b34801561045d57600080fd5b50610492600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611245565b6040518082815260200191505060405180910390f35b3480156104b457600080fd5b506104e9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061125d565b6040518082815260200191505060405180910390f35b34801561050b57600080fd5b50610514611275565b005b34801561052257600080fd5b50610541600480360381019080803590602001909291905050506113c6565b6040518082815260200191505060405180910390f35b34801561056357600080fd5b50610582600480360381019080803590602001909291905050506113f0565b6040518082815260200191505060405180910390f35b3480156105a457600080fd5b506105d9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061141d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561062757600080fd5b50610630611450565b6040518082815260200191505060405180910390f35b34801561065257600080fd5b50610687600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061145a565b6040518082815260200191505060405180910390f35b3480156106a957600080fd5b506106b2611504565b6040518082815260200191505060405180910390f35b3480156106d457600080fd5b506106dd61150a565b6040518082815260200191505060405180910390f35b3480156106ff57600080fd5b50610708611510565b6040518082815260200191505060405180910390f35b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b600460009054906101000a900460ff1681565b60006107c061078760025484611516565b6107bb6003546107b66107b061079f6002548a611516565b6107ab6003548c611516565b611551565b8961156f565b611551565b61156f565b90509392505050565b60006107d88383600954610776565b905092915050565b60095481565b6000806000600460009054906101000a900460ff16151561080657600080fd5b61080e610ebe565b9250610819836113f0565b915061082482610a4c565b905061087a610873600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600361156f565b6002611516565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061095260095484611551565b600981905550600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156109c0573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff166108fc6109e5848461158a565b9081150290604051600060405180830381858888f19350505050158015610a10573d6000803e3d6000fd5b50505050565b6000600954141515610a2757600080fd5b6001600460006101000a81548160ff0219169083151502179055508060098190555050565b6000610a63610a5c836004611516565b606461156f565b9050919050565b600080600460009054906101000a900460ff161515610a8857600080fd5b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015610b9857503373ffffffffffffffffffffffffffffffffffffffff16600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15610c1c5782600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b610c24610ebe565b9150610c328260005461156f565b9050610c7d600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611551565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dfb60066000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610df684600561156f565b611551565b60066000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610eb3600954610eae84600a61156f565b611551565b600981905550505050565b6000610f11600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f0c3361145a565b611551565b905090565b60076020528060005260406000206000915090505481565b6000600460009054906101000a900460ff161515610f4b57600080fd5b610f7534610f703073ffffffffffffffffffffffffffffffffffffffff16313461158a565b6107c9565b9050610f8981610f8483610a4c565b61158a565b9050600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc610fd034610a4c565b9081150290604051600060405180830381858888f19350505050158015610ffb573d6000803e3d6000fd5b50611045600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611551565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b600460009054906101000a900460ff1615156110ed57600080fd5b66038d7ea4c680003414151561110257600080fd5b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015801561116a573d6000803e3d6000fd5b506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415156111b957600080fd5b42600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600154600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60066020528060005260406000206000915090505481565b60056020528060005260406000206000915090505481565b600460009054906101000a900460ff16151561129057600080fd5b600a54600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156112e057600080fd5b61132b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600a5461158a565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061137d600a54620186a0611551565b600a8190555033600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60006113e9823073ffffffffffffffffffffffffffffffffffffffff16316107c9565b9050919050565b6000611416826009543073ffffffffffffffffffffffffffffffffffffffff1631610776565b9050919050565b60086020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600a54905090565b6000806114b16000546114ac42600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461158a565b6115a3565b90506114fc81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611516565b915050919050565b60005481565b600a5481565b60015481565b600080600084141561152b576000915061154a565b828402905082848281151561153c57fe5b0414151561154657fe5b8091505b5092915050565b600080828401905083811015151561156557fe5b8091505092915050565b600080828481151561157d57fe5b0490508091505092915050565b600082821115151561159857fe5b818303905092915050565b60008183106115b257816115b4565b825b9050929150505600a165627a7a72305820830552b9bce578d84c13588934d780a22f7f9b406018d354afbb02058f3a01530029"
}