{
  "address": "0x75d745eaea0ab0a8c9542959311c1c3166f6567d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PackSale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-04\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/openzeppelin-solidity/introspection/ERC165.sol\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface ERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n// File: contracts/openzeppelin-solidity/token/ERC721/ERC721Basic.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic is ERC165 {\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId)\n    public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator)\n    public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n    public;\n\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public;\n}\n\n// File: contracts/openzeppelin-solidity/token/ERC721/ERC721.sol\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC721Basic {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256 _tokenId);\n\n  function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n  function name() external view returns (string _name);\n  function symbol() external view returns (string _symbol);\n  function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\n// File: contracts/openzeppelin-solidity/token/ERC721/ERC721Receiver.sol\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safetransfer`. This function MAY throw to revert and reject the\n   * transfer. Return of other than the magic value MUST result in the \n   * transaction being reverted.\n   * Note: the contract address is always the message sender.\n   * @param _operator The address which called `safeTransferFrom` function\n   * @param _from The address which previously owned the token\n   * @param _tokenId The NFT identifier which is being transfered\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _operator,\n    address _from,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    returns(bytes4);\n}\n\n// File: contracts/openzeppelin-solidity/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/openzeppelin-solidity/AddressUtils.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(addr) }\n    return size > 0;\n  }\n\n}\n\n// File: contracts/openzeppelin-solidity/introspection/SupportsInterfaceWithLookup.sol\n\n/**\n * @title SupportsInterfaceWithLookup\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract SupportsInterfaceWithLookup is ERC165 {\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) internal supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    public\n  {\n    _registerInterface(InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return supportedInterfaces[_interfaceId];\n  }\n\n  /**\n   * @dev private method for registering an interface\n   */\n  function _registerInterface(bytes4 _interfaceId)\n    internal\n  {\n    require(_interfaceId != 0xffffffff);\n    supportedInterfaces[_interfaceId] = true;\n  }\n}\n\n// File: contracts/openzeppelin-solidity/token/ERC721/ERC721BasicToken.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n\n  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\n  /*\n   * 0x4f558e79 ===\n   *   bytes4(keccak256('exists(uint256)'))\n   */\n\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) internal tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) internal ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  /**\n   * @dev Guarantees msg.sender is owner of the given token\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n   */\n  modifier onlyOwnerOf(uint256 _tokenId) {\n    require(ownerOf(_tokenId) == msg.sender);\n    _;\n  }\n\n  /**\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n   * @param _tokenId uint256 ID of the token to validate\n   */\n  modifier canTransfer(uint256 _tokenId) {\n    require(isApprovedOrOwner(msg.sender, _tokenId));\n    _;\n  }\n\n  constructor()\n    public\n  {\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721);\n    _registerInterface(InterfaceId_ERC721Exists);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(_owner != address(0));\n    return ownedTokensCount[_owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param _tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function exists(uint256 _tokenId) public view returns (bool) {\n    address owner = tokenOwner[_tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId) public {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    tokenApprovals[_tokenId] = _to;\n    emit Approval(owner, _to, _tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param _to operator address to set the approval\n   * @param _approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address _to, bool _approved) public {\n    require(_to != msg.sender);\n    operatorApprovals[msg.sender][_to] = _approved;\n    emit ApprovalForAll(msg.sender, _to, _approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return operatorApprovals[_owner][_operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    require(_from != address(0));\n    require(_to != address(0));\n\n    clearApproval(_from, _tokenId);\n    removeTokenFrom(_from, _tokenId);\n    addTokenTo(_to, _tokenId);\n\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    transferFrom(_from, _to, _tokenId);\n    // solium-disable-next-line arg-overflow\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function isApprovedOrOwner(\n    address _spender,\n    uint256 _tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(_tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      _spender == owner ||\n      getApproved(_tokenId) == _spender ||\n      isApprovedForAll(owner, _spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to The address that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addTokenTo(_to, _tokenId);\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    clearApproval(_owner, _tokenId);\n    removeTokenFrom(_owner, _tokenId);\n    emit Transfer(_owner, address(0), _tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param _owner owner of the token\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function clearApproval(address _owner, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _owner);\n    if (tokenApprovals[_tokenId] != address(0)) {\n      tokenApprovals[_tokenId] = address(0);\n    }\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _from);\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n    tokenOwner[_tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param _from address representing the previous owner of the given token ID\n   * @param _to target address that will receive the tokens\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallSafeTransfer(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_to.isContract()) {\n      return true;\n    }\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\n      msg.sender, _from, _tokenId, _data);\n    return (retval == ERC721_RECEIVED);\n  }\n}\n\n// File: contracts/openzeppelin-solidity/token/ERC721/ERC721Token.sol\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\n\n  bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  // Token name\n  string internal name_;\n\n  // Token symbol\n  string internal symbol_;\n\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) internal ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) internal ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] internal allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) internal allTokensIndex;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) internal tokenURIs;\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string _name, string _symbol) public {\n    name_ = _name;\n    symbol_ = _symbol;\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721Enumerable);\n    _registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string) {\n    return name_;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string) {\n    return symbol_;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string) {\n    require(exists(_tokenId));\n    return tokenURIs[_tokenId];\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param _owner address owning the tokens list to be accessed\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(_index < balanceOf(_owner));\n    return ownedTokens[_owner][_index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param _index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\n    require(_index < totalSupply());\n    return allTokens[_index];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param _tokenId uint256 ID of the token to set its URI\n   * @param _uri string URI to assign\n   */\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n    require(exists(_tokenId));\n    tokenURIs[_tokenId] = _uri;\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    super.addTokenTo(_to, _tokenId);\n    uint256 length = ownedTokens[_to].length;\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    super.removeTokenFrom(_from, _tokenId);\n\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n    ownedTokens[_from][lastTokenIndex] = 0;\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokens[_from].length--;\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    super._mint(_to, _tokenId);\n\n    allTokensIndex[_tokenId] = allTokens.length;\n    allTokens.push(_tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _owner owner of the token to burn\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    super._burn(_owner, _tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\n      delete tokenURIs[_tokenId];\n    }\n\n    // Reorg all tokens array\n    uint256 tokenIndex = allTokensIndex[_tokenId];\n    uint256 lastTokenIndex = allTokens.length.sub(1);\n    uint256 lastToken = allTokens[lastTokenIndex];\n\n    allTokens[tokenIndex] = lastToken;\n    allTokens[lastTokenIndex] = 0;\n\n    allTokens.length--;\n    allTokensIndex[_tokenId] = 0;\n    allTokensIndex[lastToken] = tokenIndex;\n  }\n\n}\n\n// File: contracts/openzeppelin-solidity/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts/ERC721TokenWithData.sol\n\n// import \"./ERC721SlimTokenArray.sol\";\n\n\n\n// an ERC721 token with additional data storage,\ncontract ERC721TokenWithData is ERC721Token(\"CryptoAssaultUnit\", \"CAU\"), Ownable {\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n\tfunction isApprovedOrOwner(\n\t\taddress _spender,\n\t\tuint256 _tokenId\n\t)\n\t\tinternal\n\t\tview\n\t\treturns (bool)\n\t{\n\t\taddress owner = ownerOf(_tokenId);\n\t\t// Disable solium check because of\n\t\t// https://github.com/duaraghav8/Solium/issues/175\n\t\t// solium-disable-next-line operator-whitespace\n\t\treturn (\n\t\t\t_spender == owner ||\n\t\t\tapprovedContractAddresses[_spender] ||\n\t\t\tgetApproved(_tokenId) == _spender ||\n\t\t\tisApprovedForAll(owner, _spender)\n\t\t);\n\t}\n\n\tmapping (address => bool) internal approvedContractAddresses;\n\tbool approvedContractsFinalized = false;\n\n\t/**\n\t* @notice Approve a contract address for minting tokens and transferring tokens, when approved by the owner\n\t* @param contractAddress The address that will be approved\n\t*/\n\tfunction addApprovedContractAddress(address contractAddress) public onlyOwner\n\t{\n\t\trequire(!approvedContractsFinalized);\n\t\tapprovedContractAddresses[contractAddress] = true;\n\t}\n\n\t/**\n\t* @notice Unapprove a contract address for minting tokens and transferring tokens\n\t* @param contractAddress The address that will be unapproved\n\t*/\n\tfunction removeApprovedContractAddress(address contractAddress) public onlyOwner\n\t{\n\t\trequire(!approvedContractsFinalized);\n\t\tapprovedContractAddresses[contractAddress] = false;\n\t}\n\n\t/**\n\t* @notice Finalize the contract so it will be forever impossible to change the approved contracts list\n\t*/\n\tfunction finalizeApprovedContracts() public onlyOwner {\n\t\tapprovedContractsFinalized = true;\n\t}\n\n\tmapping(uint256 => mapping(uint256 => uint256)) data;\n\n\tfunction getData(uint256 _tokenId, uint256 _index) public view returns (uint256) {\n\t\treturn data[_index][_tokenId];\n\t}\n\n\tfunction getData3(uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3, uint256 _index) public view returns (uint256, uint256, uint256) {\n\t\treturn (\n\t\t\tdata[_index][_tokenId1],\n\t\t\tdata[_index][_tokenId2],\n\t\t\tdata[_index][_tokenId3]\n\t\t);\n\t}\n\t\n\tfunction getDataAndOwner3(uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3, uint256 _index) public view returns (uint256, uint256, uint256, address, address, address) {\n\t\treturn (\n\t\t\tdata[_index][_tokenId1],\n\t\t\tdata[_index][_tokenId2],\n\t\t\tdata[_index][_tokenId3],\n\t\t\townerOf(_tokenId1),\n\t\t\townerOf(_tokenId2),\n\t\t\townerOf(_tokenId3)\n\t\t);\n\t}\n\t\n\tfunction _setData(uint256 _tokenId, uint256 _index, uint256 _data) internal {\n\t\t\n\t\tdata[_index][_tokenId] = _data;\n\t}\n\n\tfunction setData(uint256 _tokenId, uint256 _index, uint256 _data) public {\n\t\t\n\t\trequire(approvedContractAddresses[msg.sender], \"not an approved sender\");\n\t\tdata[_index][_tokenId] = _data;\n\t}\n\n\t/**\n\t* @notice Gets the list of tokens owned by a given address\n\t* @param _owner address to query the tokens of\n\t* @return uint256[] representing the list of tokens owned by the passed address\n\t*/\n\tfunction tokensOfWithData(address _owner, uint256 _index) public view returns (uint256[], uint256[]) {\n\t\tuint256[] memory tokensList = ownedTokens[_owner];\n\t\tuint256[] memory dataList = new uint256[](tokensList.length);\n\t\tfor (uint i=0; i<tokensList.length; i++) {\n\t\t\tdataList[i] = data[_index][tokensList[i]];\n\t\t}\n\t\treturn (tokensList, dataList);\n\t}\n\n\t// The tokenId of the next minted token. It auto-increments.\n\tuint256 nextTokenId = 1;\n\n\tfunction getNextTokenId() public view returns (uint256) {\n\t\treturn nextTokenId;\n\t}\n\n\t/**\n\t* @notice Mint token function\n\t* @param _to The address that will own the minted token\n\t*/\n\tfunction mintAndSetData(address _to, uint256 _data) public returns (uint256) {\n\n\t\trequire(approvedContractAddresses[msg.sender], \"not an approved sender\");\n\n\t\tuint256 tokenId = nextTokenId;\n\t\tnextTokenId++;\n\t\t_mint(_to, tokenId);\n\t\t_setData(tokenId, 0, _data);\n\n\t\treturn tokenId;\n\t}\n\n\tfunction burn(uint256 _tokenId) public {\n\t\trequire(\n\t\t\tapprovedContractAddresses[msg.sender] ||\n\t\t\tmsg.sender == owner, \"burner not approved\"\n\t\t);\n\n\t\t_burn(ownerOf(_tokenId), _tokenId);\n\t}\n\t\n\tfunction burn3(uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3) public {\n\t\trequire(\n\t\t\tapprovedContractAddresses[msg.sender] ||\n\t\t\tmsg.sender == owner, \"burner not approved\"\n\t\t);\n\n\t\t_burn(ownerOf(_tokenId1), _tokenId1);\n\t\t_burn(ownerOf(_tokenId2), _tokenId2);\n\t\t_burn(ownerOf(_tokenId3), _tokenId3);\n\t}\n}\n\n// File: contracts/strings/Strings.sol\n\nlibrary Strings {\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n  function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n      bytes memory _ba = bytes(_a);\n      bytes memory _bb = bytes(_b);\n      bytes memory _bc = bytes(_c);\n      bytes memory _bd = bytes(_d);\n      bytes memory _be = bytes(_e);\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n      bytes memory babcde = bytes(abcde);\n      uint k = 0;\n      for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n      for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n      for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n      for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n      for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n      return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string _a, string _b) internal pure returns (string) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    function uint2str(uint i) internal pure returns (string) {\n        if (i == 0) return \"0\";\n        uint j = i;\n        uint len;\n        while (j != 0){\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (i != 0){\n            bstr[k--] = byte(48 + i % 10);\n            i /= 10;\n        }\n        return string(bstr);\n    }\n}\n\n// File: contracts/Token.sol\n\ncontract Token is ERC721TokenWithData {\n\n\tstring metadataUrlPrefix = \"https://metadata.cryptoassault.io/unit/\";\n\n\t/**\n\t* @dev Returns an URI for a given token ID\n\t* Throws if the token ID does not exist. May return an empty string.\n\t* @param _tokenId uint256 ID of the token to query\n\t*/\n\tfunction tokenURI(uint256 _tokenId) public view returns (string) {\n\t\trequire(exists(_tokenId));\n\t\treturn Strings.strConcat(metadataUrlPrefix, Strings.uint2str(_tokenId));\n\t}\n\n\tfunction setMetadataUrlPrefix(string _metadataUrlPrefix) public onlyOwner\n\t{\n\t\tmetadataUrlPrefix = _metadataUrlPrefix;\n\t}\n}\n\n// File: contracts/openzeppelin-solidity/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: contracts/PackSale.sol\n\ncontract PackSale is Pausable {\n\n\tevent Sold(address buyer, uint256 sku, uint256 totalPrice);\n\tevent Hatched(address buyer, uint256 amount);\n\n\tuint256 constant PRESALE_START_TIME = 1544126400;\n\tuint256 constant NUM_UNIT_TYPES = 30;\n\n\tToken token;\n\n\tfunction setTokenContractAddress(address newAddress) onlyOwner public {\n\t\ttoken = Token(newAddress);\n\t}\n\t\n\tstruct WaitingToHatch {\n\t\taddress owner;\n\t\tuint16 amount;\n\t\tuint16 rarity;\n\t\tuint16 sku;\n\t\tuint48 purchasedOnBlockNumber;\n\t}\n\tmapping (uint256 => WaitingToHatch) waitingToHatch; // This is a FIFO queue.\n\n\tuint64 waitingToHatchNum = 0;\n\tuint64 waitingToHatchFirstIndex = 0;\n\tuint64 hatchNonce = 1;\n\n\t// maps amount to a price.\n\tmapping(uint256 => uint256) prices;\n\n\tconstructor() public {\n\t\tprices[1] = 0.017 ether;\n\t\tprices[2] = 0.085 ether;\n\t\tprices[3] = 0.33 ether;\n\t\tprices[4] = 0.587 ether;\n\t\tprices[5] = 1.2 ether;\n\t\tprices[6] = 2.99 ether;\n\t}\n\t\n\tfunction withdrawBalance() onlyOwner public {\n\t\towner.transfer(address(this).balance);\n\t}\n\n\tfunction setPrice(uint32 sku, uint64 price) public onlyOwner {\n\t\tprices[sku] = price;\n\t}\n\n\tfunction getPrice(uint32 sku) public view returns (uint256)\n\t{\n\t\trequire(now >= PRESALE_START_TIME, \"The sale hasn't started yet\");\n\n\t\tuint256 price = prices[sku];\n\t\trequire (price > 0);\n\n\t\t// Apply the pre-sale discount\n\t\tuint256 intervalsSinceSaleStarted = (now - PRESALE_START_TIME) / (2 days);\n\t\t// The discount starts at 30% and goes down 1% every 2 days.\n\t\tuint256 pricePercentage = 70 + intervalsSinceSaleStarted;\n\t\tif (pricePercentage < 100) {\n\t\t\tprice = (price * pricePercentage) / 100;\n\t\t}\n\n\t\treturn price;\n\t}\n\n\tfunction pushHatch(address to, uint16 amount, uint16 rarity, uint16 sku) private {\n\n\t\twaitingToHatch[waitingToHatchFirstIndex + waitingToHatchNum] = WaitingToHatch(to, amount, rarity, sku, uint32(block.number));\n\t\twaitingToHatchNum = waitingToHatchNum + 1;\n\t}\n\n\tfunction popHatch() private {\n\n\t\trequire(waitingToHatchNum > 0, \"trying to popHatch() an empty stack\");\n\t\twaitingToHatchNum = waitingToHatchNum - 1;\n\t\twaitingToHatchFirstIndex = waitingToHatchFirstIndex + 1;\n\t}\n\n\tfunction peekHatch() private view returns (WaitingToHatch) {\n\n\t\treturn waitingToHatch[waitingToHatchFirstIndex];\n\t}\n\n\tfunction buy(uint16 sku, address referral) external payable whenNotPaused {\n\n\t\tuint256 price = getPrice(sku);\n\t\trequire(msg.value >= price, \"Amount paid is too low\");\n\n\t\t// push the purchase onto a FIFO, to be minted in a later transaction.\n\n\t\tif (sku == 1) {\n\t\t\tpushHatch(msg.sender, 1, 0, sku); // 1 common or better\n\t\t} else if (sku == 2) {\n\t\t\tpushHatch(msg.sender, 5, 0, sku); // 5 common or better\n\t\t} else if (sku == 3) {\n\t\t\t// 20 common or better\n\t\t\tpushHatch(msg.sender, 10, 0, sku); \n\t\t\tpushHatch(msg.sender, 10, 0, sku); \n\t\t} else if (sku == 4) {\n\t\t\tpushHatch(msg.sender, 10, 1, sku);  // 10 rare or better\n\t\t} else if (sku == 5) {\n\t\t\tpushHatch(msg.sender, 10, 1, sku);  // 10 rare or better\n\t\t\t// 40 common or better\n\t\t\tpushHatch(msg.sender, 10, 0, sku);\n\t\t\tpushHatch(msg.sender, 10, 0, sku);\n\t\t\tpushHatch(msg.sender, 10, 0, sku);\n\t\t\tpushHatch(msg.sender, 10, 0, sku);\n\t\t} else if (sku == 6) {\n\t\t\t// 3 epic or better\n\t\t\tpushHatch(msg.sender, 3, 2, sku);\n\t\t\t// 47 rare or better\n\t\t\tpushHatch(msg.sender, 10, 1, sku);\n\t\t\tpushHatch(msg.sender, 10, 1, sku);\n\t\t\tpushHatch(msg.sender, 10, 1, sku);\n\t\t\tpushHatch(msg.sender, 10, 1, sku);\n\t\t\tpushHatch(msg.sender, 7, 1, sku);\n\t\t} else {\n\t\t\trequire(false, \"Invalid sku\");\n\t\t}\n\n\t\t// Pay the referral 5%\n\t\tif (referral != address(0) && referral != msg.sender) {\n\t\t\treferral.transfer(price / 20);\n\t\t}\n\n\t\temit Sold(msg.sender, sku, price);\n\t}\n\n\tfunction giveFreeUnit(address to, uint16 minRarity) onlyOwner public\n\t{\n\t\tpushHatch(to, 1, minRarity, 0);\n\t}\n\n\tfunction getNumMyHatchingUnits() public view returns (uint256) {\n\t\tuint256 num = 0;\n\t\tfor (uint256 i=0; i<waitingToHatchNum; i++) {\n\t\t\tif (waitingToHatch[waitingToHatchFirstIndex + i].owner == msg.sender) {\n\t\t\t\tnum += waitingToHatch[waitingToHatchFirstIndex + i].amount;\n\t\t\t}\n\t\t}\n\t\treturn num;\n\t}\n\n\tfunction hatchingsNeeded() external view returns (uint256) {\n\n\t\treturn waitingToHatchNum;\n\t}\n\t\n\tfunction getProjectedBlockHash(uint256 blockNumber) internal view returns (uint256) {\n\n\t\tuint256 blockToHash = blockNumber;\n\t\tuint256 blocksAgo = block.number - blockToHash;\n\t\tblockToHash += ((blocksAgo-1) / 256) * 256;\n\t\treturn uint256(blockhash(blockToHash));\n\t}\n\n\tfunction getRandomType(uint16 rand) internal pure returns (uint8)\n\t{\n\t\treturn uint8(rand % NUM_UNIT_TYPES);\n\t}\n \n\tfunction getRandomRarity(uint32 rand, uint256 minimumRarity) internal pure returns (uint256)\n\t{\n\n\t\tuint256 rarityRand;\n\t\tif (minimumRarity == 0) {\n\t\t\trarityRand = rand % 100;\n\t\t} else if (minimumRarity == 1) {\n\t\t\trarityRand = rand % 20 + 80;\n\t\t} else if (minimumRarity == 2) {\n\t\t\trarityRand = rand % 5 + 95;\n\t\t} else if (minimumRarity == 3) {\n\t\t\trarityRand = 99;\n\t\t} else {\n\t\t\trequire(false, \"Invalid minimumRarity\");\n\t\t}\n\n\t\tif (rarityRand < 80) return 0;\n\t\tif (rarityRand < 95) return 1;\n\t\tif (rarityRand < 99) return 2;\n\t\treturn 3;\n\t}\n\n\tfunction hatch() external whenNotPaused {\n\n\t\trequire(waitingToHatchNum > 0, \"nothing to hatch\");\n\n\t\tWaitingToHatch memory w = peekHatch();\n\t\t\n\t\t// can't hatch on the same block. its block hash would be unknown.\n\t\trequire (w.purchasedOnBlockNumber < block.number, \"Can't hatch on the same block.\");\n\n\t\tuint256 rand = getProjectedBlockHash(w.purchasedOnBlockNumber) + hatchNonce;\n\n\t\tfor (uint256 i=0; i<w.amount; i++) {\n\t\t\trand = uint256(keccak256(abi.encodePacked(rand)));\n\t\t\tuint256 thisRand = rand;\n\t\t\tuint8 unitType = getRandomType(uint16(thisRand));\n\t\t\tthisRand >>= 16;\n\n\t\t\tuint256 rarity = getRandomRarity(uint32(thisRand), w.rarity);\n\t\t\tthisRand >>= 32;\n\n\t\t\t// TPRDATEDARSKRANDOM__RANDOM__RANDOM__RANDOM__RAND0000000000000000\n\n\t\t\tuint256 data = unitType; // 8 bits\n\n\t\t\tdata <<= 4;\n\t\t\t// data |= 0; // tier 0\n\n\t\t\t// birth timestamp\n\t\t\tdata <<= 24;\n\t\t\tdata |= now / (1 days);\n\n\t\t\tdata <<= 4;\n\t\t\tdata |= rarity;\n\t\t\tdata <<= 8;\n\t\t\tdata |= w.sku;\n\t\t\tdata <<= 208;\n\t\t\tdata |= thisRand & 0xffffffffffffffffffffffffffffffffffff0000000000000000;\n\n\t\t\ttoken.mintAndSetData(w.owner, data);\n\t\t}\n\n\t\tpopHatch();\n\n\t\thatchNonce++;\n\n\t\temit Hatched(w.owner, w.amount);\n\t}\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"hatchingsNeeded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumMyHatchingUnits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"minRarity\",\"type\":\"uint16\"}],\"name\":\"giveFreeUnit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sku\",\"type\":\"uint32\"},{\"name\":\"price\",\"type\":\"uint64\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setTokenContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"hatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sku\",\"type\":\"uint32\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sku\",\"type\":\"uint16\"},{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sku\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalPrice\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Hatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": ""
}