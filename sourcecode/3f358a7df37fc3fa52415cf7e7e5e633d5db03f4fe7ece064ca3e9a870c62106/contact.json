{
  "address": "0x52a7cb918c11a16958be40cba7e31e32a499a465",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "fidentiaX Token",
  "contractName": "FidentiaXToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-26\n*/\n\npragma solidity ^0.4.16;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n\n  modifier onlyOwner(){\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n      */\n  function transfer(address _to, uint256 _value) public returns (bool){\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  /**\n  * @dev Transfer tokens from one address to another\n  * @param _from address The address which you want to send tokens from\n  * @param _to address The address which you want to transfer to\n  * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n  * @param _spender The address which will spend the funds.\n  * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n  * @dev Function to check the amount of tokens that an owner allowed to a spender.\n  * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n  * @dev Function to mint tokens\n  * @param _to The address that will recieve the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Transfer(0X0, _to, _amount);\n    return true;\n  }\n\n  /**\n  * @dev Function to stop minting new tokens.\n  * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\ncontract FidentiaXToken is MintableToken {\n  // Coin Properties\n  string public name = \"fidentiaX\";\n  string public symbol = \"fdX\";\n  uint256 public decimals = 18;\n\n  // Special propeties\n  bool public tradingStarted = false;\n\n  /**\n  * @dev modifier that throws if trading has not started yet\n   */\n  modifier hasStartedTrading() {\n    require(tradingStarted);\n    _;\n  }\n\n  /**\n  * @dev Allows the owner to enable the trading. This can not be undone\n  */\n  function startTrading() public onlyOwner {\n    tradingStarted = true;\n  }\n\n  /**\n  * @dev Allows anyone to transfer the Change tokens once trading has started\n  * @param _to the recipient address of the tokens.\n  * @param _value number of tokens to be transfered.\n   */\n  function transfer(address _to, uint _value) hasStartedTrading public returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  /**\n  * @dev Allows anyone to transfer the Change tokens once trading has started\n  * @param _from address The address which you want to send tokens from\n  * @param _to address The address which you want to transfer to\n  * @param _value uint the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint _value) hasStartedTrading public returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function emergencyERC20Drain( ERC20 oddToken, uint amount ) public {\n    oddToken.transfer(owner, amount);\n  }\n}\n\ncontract Sender {\n    \n    address firstContractor = 0x155020972767efc46DDA0Ec63A95627550F8C64F;\n    address secondContractor = 0xDcDa40786C0E63B7932B7F844846eDce994a0851;\n    \n    function SendThreeWays( address multisig, uint256 value ) internal {\n        uint256 cshare = value / 400;\n        uint256 mainshare = value - 2 * cshare;\n        firstContractor.transfer(cshare);\n        secondContractor.transfer(cshare);\n        multisig.transfer(mainshare);\n    }\n    \n}\n\ncontract FidentiaXTokenSale is Ownable,Sender {\n\n  using SafeMath for uint256;\n\n  // The token being sold\n  FidentiaXToken public token;\n\n  uint256 public decimals;  \n\n  uint256 public oneCoin;\n\n  // start and end block where investments are allowed (both inclusive)\n  uint256 public startTimestamp;\n  uint256 public endTimestamp;\n\n  // timestamps for tiers\n  uint256 public tier1Timestamp;\n  uint256 public tier2Timestamp;\n\n  // address where funds are collected\n\n  address public multiSig;\n\n  function setWallet(address _newWallet) public onlyOwner {\n    multiSig = _newWallet;\n  }\n\n  // These will be set by setTier()\n\n  uint256 public rate; // how many token units a buyer gets per wei\n\n  uint256 public minContribution = 0.0001 ether;  // minimum contributio to participate in tokensale\n\n  uint256 public maxContribution = 200000 ether;  // default limit to tokens that the users can buy\n\n  // ***************************\n  // amount of raised money in wei\n\n  uint256 public weiRaised;\n\n  // amount of raised tokens \n\n  uint256 public tokenRaised;\n\n  // maximum amount of tokens being created\n\n  uint256 public maxTokens;\n\n  // maximum amount of tokens for sale\n\n  uint256 public tokensForSale;  // 24 Million Tokens for SALE\n\n  // number of participants in presale\n\n  uint256 public numberOfPurchasers = 0;\n\n  //  for whitelist\n  address public cs;\n  //  for whitelist AND placement\n  address public fx;\n\n  // switch on/off the authorisation , default: true - on\n\n  bool    public freeForAll = false;\n\n  mapping (address => bool) public authorised; // just to annoy the heck out of americans\n\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n  event SaleClosed();\n\n  function FidentiaXTokenSale() public {\n    startTimestamp = 1509930000; //  Monday November 06, 2017 09:00:00 (am) in time zone Asia/Singapore (SGT)\n    //1508684400;\n    endTimestamp = 1512489599;   //  December 05, 2017 23:59:59 (pm) in time zone Asia/Singapore (SGT) ( GMT +08:00 )\n    tier1Timestamp = 1510102799; //   November 08, 2017 08:59:59 (am) in time zone Asia/Singapore (SGT)\n    tier2Timestamp = 1510361999; //   November 11, 2017 08:59:59 (am) in time zone Asia/Singapore (SGT)\n    multiSig = 0x90420B8aef42F856a0AFB4FFBfaA57405FB190f3;\n    token = new FidentiaXToken();\n    decimals = token.decimals();\n    oneCoin = 10 ** decimals;\n    maxTokens = 130 * (10**6) * oneCoin;\n    tokensForSale = 130 * (10**6) * oneCoin;\n  }\n\n  /**\n  * @dev Calculates the amount of bonus coins the buyer gets\n   */\n  function getRateAt(uint256 at) internal constant returns (uint256) {\n    if (at < (tier1Timestamp))\n      return 575;\n    if (at < (tier2Timestamp))\n      return 550;\n    return 500;\n  }\n\n  // @return true if crowdsale event has ended\n  function hasEnded() public constant returns (bool) {\n    if (now > endTimestamp)\n      return true;\n    if (tokenRaised >= tokensForSale)\n      return true; // if we reach the tokensForSale\n    return false;\n }\n  /**\n  * @dev throws if person sending is not contract owner or cs role\n   */\n  modifier onlyCSorFx() {\n    require((msg.sender == fx) || (msg.sender==cs));\n    _;\n  }\n\n  modifier onlyFx() {\n    require(msg.sender == fx);\n    _;\n  }\n\n  /**\n  * @dev throws if person sending is not authorised or sends nothing\n  */\n  modifier onlyAuthorised() {\n    require (authorised[msg.sender] || freeForAll);\n    require (now >= startTimestamp);\n    require (!(hasEnded()));\n    require (multiSig != 0x0);\n    require (msg.value > 1 finney);\n    require(tokensForSale > tokenRaised); // check we are not over the number of tokensForSale\n    _;\n  }\n\n  /**\n  * @dev authorise an account to participate\n  */\n  function authoriseAccount(address whom) onlyCSorFx public {\n    authorised[whom] = true;\n  }\n\n  /**\n  * @dev authorise a lot of accounts in one go\n  */\n  function authoriseManyAccounts(address[] many) onlyCSorFx public {\n    for (uint256 i = 0; i < many.length; i++) {\n      authorised[many[i]] = true;\n    }\n  }\n\n  /**\n  * @dev ban an account from participation (default)\n  */\n  function blockAccount(address whom) onlyCSorFx public {\n    authorised[whom] = false;\n  }\n\n  /**\n  * @dev set a new CS representative\n  */\n  function setCS(address newCS) onlyOwner public {\n    cs = newCS;\n  }\n\n  /**\n  * @dev set a new Fx representative\n  */\n  function setFx(address newFx) onlyOwner public {\n    fx = newFx;\n  }\n\n  function placeTokens(address beneficiary, uint256 _tokens) onlyFx public {\n    //check minimum and maximum amount\n    require(_tokens != 0);\n    require(!hasEnded());\n    uint256 amount = 0;\n    if (token.balanceOf(beneficiary) == 0) {\n      numberOfPurchasers++;\n    }\n    tokenRaised = tokenRaised.add(_tokens); // so we can go slightly over\n    token.mint(beneficiary, _tokens);\n    TokenPurchase(beneficiary, beneficiary, amount, _tokens);\n  }\n\n  // low level token purchase function\n  function buyTokens(address beneficiary, uint256 amount) onlyAuthorised internal {\n    //check minimum and maximum amount\n    require(amount >= minContribution);\n    require(amount <= maxContribution);\n\n    // Calculate token amount to be purchased\n    uint256 actualRate = getRateAt(now);\n    uint256 tokens = amount.mul(actualRate);\n\n    // update state\n    weiRaised = weiRaised.add(amount);\n    if (token.balanceOf(beneficiary) == 0) {\n      numberOfPurchasers++;\n    }\n    tokenRaised = tokenRaised.add(tokens); // so we can go slightly over\n    token.mint(beneficiary, tokens);\n    TokenPurchase(beneficiary, beneficiary, amount, tokens);\n    SendThreeWays(multiSig,this.balance); // better in case any other ether ends up here\n  }\n\n  // transfer ownership of the token to the owner of the presale contract\n  function finishSale() public onlyOwner {\n    require(hasEnded());\n    // assign the rest of the 100M tokens to the reserve\n    uint unassigned;\n    if(maxTokens > tokenRaised) {\n      unassigned  = maxTokens.sub(tokenRaised);\n      token.mint(multiSig,unassigned);\n    }\n    token.finishMinting();\n    token.transferOwnership(owner);\n    SaleClosed();\n  }\n\n  // fallback function can be used to buy tokens\n  function () public payable {\n    buyTokens(msg.sender, msg.value);\n  }\n\n  function emergencyERC20Drain( ERC20 oddToken, uint amount ) public {\n    oddToken.transfer(owner, amount);\n  }\n}",
  "bytecode": "606060409081526003805460a060020a60ff02191690558051908101604052600981527f666964656e7469615800000000000000000000000000000000000000000000006020820152600490805161005b9291602001906100d3565b5060408051908101604052600381527f6664580000000000000000000000000000000000000000000000000000000000602082015260059080516100a39291602001906100d3565b5060126006556007805460ff1916905560038054600160a060020a03191633600160a060020a031617905561016e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011457805160ff1916838001178555610141565b82800160010185558215610141579182015b82811115610141578251825591602001919060010190610126565b5061014d929150610151565b5090565b61016b91905b8082111561014d5760008155600101610157565b90565b610aa48061017d6000396000f3006060604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146100f557806306fdde031461011c578063095ea7b3146101a657806318160ddd146101c857806323b872dd146101ed578063293230b814610215578063313ce5671461022a57806340c10f191461023d5780635b4f472a1461025f57806370a08231146102725780637d64bcb4146102915780638da5cb5b146102a457806395d89b41146102d3578063a9059cbb146102e6578063db0e16f114610308578063dd62ed3e1461032a578063f2fde38b1461034f575b600080fd5b341561010057600080fd5b61010861036e565b604051901515815260200160405180910390f35b341561012757600080fd5b61012f61038f565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561016b578082015183820152602001610153565b50505050905090810190601f1680156101985780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101b157600080fd5b610108600160a060020a036004351660243561042d565b34156101d357600080fd5b6101db6104d3565b60405190815260200160405180910390f35b34156101f857600080fd5b610108600160a060020a03600435811690602435166044356104d9565b341561022057600080fd5b610228610500565b005b341561023557600080fd5b6101db61052a565b341561024857600080fd5b610108600160a060020a0360043516602435610530565b341561026a57600080fd5b61010861060f565b341561027d57600080fd5b6101db600160a060020a0360043516610618565b341561029c57600080fd5b610108610633565b34156102af57600080fd5b6102b76106b8565b604051600160a060020a03909116815260200160405180910390f35b34156102de57600080fd5b61012f6106c7565b34156102f157600080fd5b610108600160a060020a0360043516602435610732565b341561031357600080fd5b610228600160a060020a0360043516602435610757565b341561033557600080fd5b6101db600160a060020a03600435811690602435166107f2565b341561035a57600080fd5b610228600160a060020a036004351661081d565b60035474010000000000000000000000000000000000000000900460ff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104255780601f106103fa57610100808354040283529160200191610425565b820191906000526020600020905b81548152906001019060200180831161040857829003601f168201915b505050505081565b600081158061045f5750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561046a57600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b60075460009060ff1615156104ed57600080fd5b6104f8848484610873565b949350505050565b60035433600160a060020a0390811691161461051b57600080fd5b6007805460ff19166001179055565b60065481565b60035460009033600160a060020a0390811691161461054e57600080fd5b60035474010000000000000000000000000000000000000000900460ff161561057657600080fd5b600054610589908363ffffffff61099816565b6000908155600160a060020a0384168152600160205260409020546105b4908363ffffffff61099816565b600160a060020a0384166000818152600160205260408082209390935590917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60075460ff1681565b600160a060020a031660009081526001602052604090205490565b60035460009033600160a060020a0390811691161461065157600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600354600160a060020a031681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104255780601f106103fa57610100808354040283529160200191610425565b60075460009060ff16151561074657600080fd5b61075083836109a7565b9392505050565b600354600160a060020a038084169163a9059cbb9116836000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156107d357600080fd5b6102c65a03f115156107e457600080fd5b505050604051805150505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a0390811691161461083857600080fd5b600160a060020a03811615610870576003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b6000600160a060020a038316151561088a57600080fd5b600160a060020a0383166000908152600160205260409020546108b3908363ffffffff61099816565b600160a060020a0380851660009081526001602052604080822093909355908616815220546108e8908363ffffffff610a6616565b600160a060020a038086166000908152600160209081526040808320949094556002815283822033909316825291909152205461092b908363ffffffff610a6616565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60008282018381101561075057fe5b600160a060020a0333166000908152600160205260408120546109d0908363ffffffff610a6616565b600160a060020a033381166000908152600160205260408082209390935590851681522054610a05908363ffffffff61099816565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600082821115610a7257fe5b509003905600a165627a7a72305820dd2194d1cd7d58e3d9d04f34944454287dd7f24ee4790e63bdd27f7d1ef685e60029"
}