{
  "address": "0x3656bd0f3f07623bb7f429b390d208f894e44ece",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "INFLIV",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-04\n*/\n\npragma solidity 0.4.25;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n        return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract INFLIVERC20 {\n    function totalSupply() public view returns (uint total_Supply);\n    function balanceOf (address who) public view returns (uint256);\n    function allowance (address IFVOwner, address spender) public view returns (uint);\n    function transferFrom (address from, address to, uint value) public returns (bool ok);\n    function approve (address spender, uint value) public returns (bool ok);\n    function transfer (address to, uint value) public returns (bool ok);\n    event    Transfer (address indexed from, address indexed to, uint value);\n    event    Approval (address indexed IFVOwner, address indexed spender, uint value);\n}\n\n\ncontract INFLIV is INFLIVERC20 { \n    \n    using SafeMath for uint256;\n    \n    string  public constant name        = \"INFLIV\";                             // Name of the token\n    string  public constant symbol      = \"IFV\";                                // Symbol of token\n    uint8   public constant decimals    = 18;\n    \n    uint    public _totalsupply         = 70000000 * 10 ** 18;                  // 70 million Total Supply\n    uint256 maxPublicSale               = 22000000 * 10 ** 18;                  // 22 million Public Sale\n                                   \n    uint256 public PricePre             = 6000;                                 // 1 Ether = 6000 tokens in Pre-ICO\n    uint256 public PriceICO1            = 3800;                                 // 1 Ether = 3800 tokens in ICO Phase 1\n    uint256 public PriceICO2            = 2600;                                 // 1 Ether = 2600 tokens in ICO Phase 2\n    uint256 public PublicPrice          = 1800;                                 // 1 Ether = 1800 tokens in Public Sale\n    uint256 public PreStartTimeStamp;\n    uint256 public PreEndTimeStamp;\n    uint256 input_token;\n    uint256 bonus_token;\n    uint256 total_token;\n    uint256 ICO1;\n    uint256 ICO2;\n    uint256 public ETHReceived;                                                 // Total ETH received in the contract\n    mapping (address => uint) balances;\n    mapping (address => mapping(address => uint)) allowed;\n    \n    address public IFVOwner;                                                    // Owner of this contract\n    bool stopped = false;\n\n    enum CurrentStages {\n        NOTSTARTED,\n        PRE,\n        ICO,\n        PAUSED,\n        ENDED\n    }\n    \n    CurrentStages public stage;\n    \n    modifier atStage(CurrentStages _stage) {\n        if (stage != _stage)\n            // Contract not in expected state\n            revert();\n        _;\n    }\n    \n    modifier onlyOwner() {\n        if (msg.sender != IFVOwner) {\n            revert();\n        }\n        _;\n    }\n\n    function INFLIV() public {\n        IFVOwner            = msg.sender;\n        balances[IFVOwner]  = 48000000 * 10 ** 18;                              // 28 million to owner & 20 million to referral bonus\n        balances[address(this)] = maxPublicSale;\n        stage               = CurrentStages.NOTSTARTED;\n        Transfer (0, IFVOwner, balances[IFVOwner]);\n        Transfer (0, address(this), balances[address(this)]);\n    }\n  \n    function () public payable {\n        require(stage != CurrentStages.ENDED);\n        require(!stopped && msg.sender != IFVOwner);\n            if(stage == CurrentStages.PRE && now <= PreEndTimeStamp) { \n                    require (ETHReceived <= 1500 ether);                        // Hardcap\n                    ETHReceived     = (ETHReceived).add(msg.value);\n                    input_token     = ((msg.value).mul(PricePre)); \n                    bonus_token     = ((input_token).mul(50)).div(100);         // 50% bonus in Pre-ICO\n                    total_token     = input_token + bonus_token;\n                    transferTokens (msg.sender, total_token);\n            }\n            else if (now <= ICO2) {\n                    \n                if(now < ICO1)\n                {\n                    input_token     = (msg.value).mul(PriceICO1);\n                    bonus_token     = ((input_token).mul(25)).div(100);         // 25% bonus in ICO Phase 1\n                    total_token     = input_token + bonus_token;\n                    transferTokens (msg.sender, total_token);\n                }   \n                else if(now >= ICO1 && now < ICO2)\n                {\n                    input_token     = (msg.value).mul(PriceICO2);\n                    bonus_token     = ((input_token).mul(10)).div(100);         // 10% bonus in ICO Phase 2\n                    total_token     = input_token + bonus_token;\n                    transferTokens (msg.sender, total_token);\n                }\n            }\n            else\n            {\n                    input_token     = (msg.value).mul(PublicPrice);\n                    transferTokens (msg.sender, input_token);\n            }\n    }\n     \n    function start_ICO() public onlyOwner atStage(CurrentStages.NOTSTARTED)\n    {\n        stage                   = CurrentStages.PRE;\n        stopped                 = false;\n        PreStartTimeStamp       = now;\n        PreEndTimeStamp         = now + 20 days;\n        ICO1                    = PreEndTimeStamp + 20 days;\n        ICO2                    = ICO1 + 20 days;\n    }\n    \n    function PauseICO() external onlyOwner\n    {\n        stopped = true;\n    }\n\n    function ResumeICO() external onlyOwner\n    {\n        stopped = false;\n    }\n   \n    function end_ICO() external onlyOwner atStage(CurrentStages.PRE)\n    {\n        require (now > ICO2);\n        stage                       = CurrentStages.ENDED;\n        _totalsupply                = (_totalsupply).sub(balances[address(this)]);\n        balances[address(this)]     = 0;\n        Transfer (address(this), 0 , balances[address(this)]);\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n        require (_to != 0x0);\n        require (balances[_from]    >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\n        balances[_from]             = (balances[_from]).sub(_amount);\n        allowed[_from][msg.sender]  = (allowed[_from][msg.sender]).sub(_amount);\n        balances[_to]               = (balances[_to]).add(_amount);\n        Transfer (_from, _to, _amount);\n        return true;\n    }\n\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\n        require (_to != 0x0);\n        require (balances[msg.sender]       >= _amount && _amount >= 0);\n        balances[msg.sender]                = (balances[msg.sender]).sub(_amount);\n        balances[_to]                       = (balances[_to]).add(_amount);\n        Transfer (msg.sender, _to, _amount);\n        return true;\n    }\n    \n    function transferTokens(address _to, uint256 _amount) private returns (bool success) {\n        require (_to != 0x0);       \n        require (balances[address(this)]    >= _amount && _amount > 0);\n        balances[address(this)]             = (balances[address(this)]).sub(_amount);\n        balances[_to]                       = (balances[_to]).add(_amount);\n        Transfer (address(this), _to, _amount);\n        return true;\n    }\n \n    function withdrawETH() external onlyOwner {\n        IFVOwner.transfer(this.balance);\n    }\n    \n    function approve(address _spender, uint256 _amount) public returns (bool success) {\n        require (_spender != 0x0);\n        allowed[msg.sender][_spender] = _amount;\n        Approval (msg.sender, _spender, _amount);\n        return true;\n    }\n  \n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        require (_owner != 0x0 && _spender !=0x0);\n        return allowed[_owner][_spender];\n    }\n\n    function totalSupply() public view returns (uint256 total_Supply) {\n        total_Supply                = _totalsupply;\n    }\n    \n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"end_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PreStartTimeStamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PreEndTimeStamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PublicPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PriceICO1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IFVOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PricePre\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ResumeICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PauseICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PriceICO2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"IFVOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040526a39e7139a8c08fa060000006000556a1232ae63c59c6bd6000000600155611770600255610ed8600355610a286004556107086005556000601060146101000a81548160ff02191690831515021790555034801561006157600080fd5b5033601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506a27b46536c66c8e30000000600e6000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600154600e60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000601060156101000a81548160ff0219169083600481111561017957fe5b0217905550601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600e6000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a33073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600e60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3611a64806102ef6000396000f30060806040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302c3d7f6146103ef57806306fdde0314610406578063095ea7b31461049657806318160ddd146104fb5780631d3b57cf1461052657806323b872dd14610551578063313ce567146105d657806358275869146106075780635857943f146106325780635c0656001461065d5780636a6ea92e1461068857806370a08231146106b3578063761f78a81461070a5780637aad67ef14610761578063807d2da31461078c57806395d89b41146107a3578063a393dc4414610833578063a9059cbb1461085e578063c040e6b8146108c3578063cd7a2c3b146108fc578063cf5ae51614610913578063dd62ed3e1461092a578063e086e5ec146109a1578063f5d8f0c0146109b8575b60048081111561014a57fe5b601060159054906101000a900460ff16600481111561016557fe5b1415151561017257600080fd5b601060149054906101000a900460ff161580156101dd5750601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15156101e857600080fd5b600160048111156101f557fe5b601060159054906101000a900460ff16600481111561021057fe5b14801561021f57506007544211155b156102c257685150ae84a8cdf00000600d541115151561023e57600080fd5b61025334600d546109e390919063ffffffff16565b600d8190555061026e60025434610a0190919063ffffffff16565b60088190555061029d606461028f6032600854610a0190919063ffffffff16565b610a3c90919063ffffffff16565b60098190555060095460085401600a819055506102bc33600a54610a57565b506103ed565b600c54421115156103c357600b54421015610340576102ec60035434610a0190919063ffffffff16565b60088190555061031b606461030d6019600854610a0190919063ffffffff16565b610a3c90919063ffffffff16565b60098190555060095460085401600a8190555061033a33600a54610a57565b506103be565b600b5442101580156103535750600c5442105b156103bd5761036d60045434610a0190919063ffffffff16565b60088190555061039c606461038e600a600854610a0190919063ffffffff16565b610a3c90919063ffffffff16565b60098190555060095460085401600a819055506103bb33600a54610a57565b505b5b6103ec565b6103d860055434610a0190919063ffffffff16565b6008819055506103ea33600854610a57565b505b5b005b3480156103fb57600080fd5b50610404610c71565b005b34801561041257600080fd5b5061041b610e67565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561045b578082015181840152602081019050610440565b50505050905090810190601f1680156104885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104a257600080fd5b506104e1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ea0565b604051808215151515815260200191505060405180910390f35b34801561050757600080fd5b50610510610fb7565b6040518082815260200191505060405180910390f35b34801561053257600080fd5b5061053b610fc0565b6040518082815260200191505060405180910390f35b34801561055d57600080fd5b506105bc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fc6565b604051808215151515815260200191505060405180910390f35b3480156105e257600080fd5b506105eb611379565b604051808260ff1660ff16815260200191505060405180910390f35b34801561061357600080fd5b5061061c61137e565b6040518082815260200191505060405180910390f35b34801561063e57600080fd5b50610647611384565b6040518082815260200191505060405180910390f35b34801561066957600080fd5b5061067261138a565b6040518082815260200191505060405180910390f35b34801561069457600080fd5b5061069d611390565b6040518082815260200191505060405180910390f35b3480156106bf57600080fd5b506106f4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611396565b6040518082815260200191505060405180910390f35b34801561071657600080fd5b5061071f6113df565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561076d57600080fd5b50610776611405565b6040518082815260200191505060405180910390f35b34801561079857600080fd5b506107a161140b565b005b3480156107af57600080fd5b506107b861150d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107f85780820151818401526020810190506107dd565b50505050905090810190601f1680156108255780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561083f57600080fd5b50610848611546565b6040518082815260200191505060405180910390f35b34801561086a57600080fd5b506108a9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061154c565b604051808215151515815260200191505060405180910390f35b3480156108cf57600080fd5b506108d8611767565b604051808260048111156108e857fe5b60ff16815260200191505060405180910390f35b34801561090857600080fd5b5061091161177a565b005b34801561091f57600080fd5b506109286117f3565b005b34801561093657600080fd5b5061098b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061186c565b6040518082815260200191505060405180910390f35b3480156109ad57600080fd5b506109b661193b565b005b3480156109c457600080fd5b506109cd611a19565b6040518082815260200191505060405180910390f35b60008082840190508381101515156109f757fe5b8091505092915050565b6000806000841415610a165760009150610a35565b8284029050828482811515610a2757fe5b04141515610a3157fe5b8091505b5092915050565b6000808284811515610a4a57fe5b0490508091505092915050565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515610a7e57600080fd5b81600e60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610acd5750600082115b1515610ad857600080fd5b610b2a82600e60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a1f90919063ffffffff16565b600e60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bbf82600e60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109e390919063ffffffff16565b600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ccd57600080fd5b6001806004811115610cdb57fe5b601060159054906101000a900460ff166004811115610cf657fe5b141515610d0257600080fd5b600c5442111515610d1257600080fd5b6004601060156101000a81548160ff02191690836004811115610d3157fe5b0217905550610d8a600e60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600054611a1f90919063ffffffff16565b6000819055506000600e60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600e60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a350565b6040805190810160405280600681526020017f494e464c4956000000000000000000000000000000000000000000000000000081525081565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515610ec757600080fd5b81600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008054905090565b60065481565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515610fed57600080fd5b81600e60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156110b8575081600f60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156110c5575060008210155b15156110d057600080fd5b61112282600e60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a1f90919063ffffffff16565b600e60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111f482600f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a1f90919063ffffffff16565b600f60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112c682600e60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109e390919063ffffffff16565b600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b600d5481565b60075481565b60055481565b60035481565b6000600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561146757600080fd5b600080600481111561147557fe5b601060159054906101000a900460ff16600481111561149057fe5b14151561149c57600080fd5b6001601060156101000a81548160ff021916908360048111156114bb57fe5b02179055506000601060146101000a81548160ff02191690831515021790555042600681905550621a5e004201600781905550621a5e0060075401600b81905550621a5e00600b5401600c8190555050565b6040805190810160405280600381526020017f494656000000000000000000000000000000000000000000000000000000000081525081565b60005481565b6000808373ffffffffffffffffffffffffffffffffffffffff161415151561157357600080fd5b81600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156115c3575060008210155b15156115ce57600080fd5b61162082600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a1f90919063ffffffff16565b600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116b582600e60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109e390919063ffffffff16565b600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b601060159054906101000a900460ff1681565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117d657600080fd5b6000601060146101000a81548160ff021916908315150217905550565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561184f57600080fd5b6001601060146101000a81548160ff021916908315150217905550565b6000808373ffffffffffffffffffffffffffffffffffffffff16141580156118ab575060008273ffffffffffffffffffffffffffffffffffffffff1614155b15156118b657600080fd5b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561199757600080fd5b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015611a16573d6000803e3d6000fd5b50565b60045481565b6000828211151515611a2d57fe5b8183039050929150505600a165627a7a72305820f49f1b584914ca5295566ce1f5f7c45c2cfa32cb8d871d0004b9f87beb1c53f70029"
}