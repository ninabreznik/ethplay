{
  "address": "0xac2bd14654bbf22f9d8f20c7b3a70e376d3436b4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KittenCoin",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-01\n*/\n\npragma solidity ^0.4.13;\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SaferMath {\n  function mulX(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function divX(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract BasicToken is ERC20Basic {\n  using SaferMath for uint256;\n  mapping(address => uint256) balances;\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    uint256 _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue) returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract KittenCoin is StandardToken, Ownable {\n\n  string public constant name = \"Kitten Coin\";\n  string public constant symbol = \"KITTEN\";\n  uint8 public constant decimals = 8;\n  \n  uint256 public kittensIssued;\n  string public kittenTalk;\n\n  /* Kitten word for the world */\n  event KittenTalked(string newWord);\n  function talkToWorld(string talk_) public onlyOwner {\n      kittenTalk = talk_;\n      KittenTalked(kittenTalk);\n  }\n  \n  /* Issue gorgeous kittens to the world */\n  event KittensDroped(uint256 count, uint256 kit);\n  function dropCoins(address[] dests, uint256 kittens) public onlyOwner {\n        uint256 amount = kittens * (10 ** uint256(decimals));\n        require((kittensIssued + (dests.length * amount)) <= totalSupply);\n        uint256 i = 0;\n        uint256 dropAmount = 0;\n        while (i < dests.length) {\n           /* Don't mess with kittens, receiver address has to own more than 0.05 ETH */\n           if(dests[i].balance > 50 finney) {\n               balances[dests[i]] += amount;\n               dropAmount += amount;\n               Transfer(this, dests[i], amount);\n           }\n           i += 1;\n        }\n        kittensIssued += dropAmount;\n        KittensDroped(i, dropAmount);\n    }\n\n  /* Constructor function - initialize Kitten Coins */\n  function KittenCoin() {\n    totalSupply = 400000000 * (10 ** uint256(decimals)); // So many kittens on earth\n    balances[msg.sender] = totalSupply / 10; // To help kittens grow safely\n    kittensIssued = totalSupply / 10;\n    kittenTalk = \"Meow\";\n  }\n}",
  "bytecode": "6060604052341561000f57600080fd5b5b5b60038054600160a060020a03191633600160a060020a03161790555b668e1bc9bf0400006000819055600a905b600160a060020a03331660009081526001602052604081209290910490915554600a905b0460045560408051908101604052600481527f4d656f7700000000000000000000000000000000000000000000000000000000602082015260059080516100ad9291602001906100b4565b505b610154565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100f557805160ff1916838001178555610122565b82800160010185558215610122579182015b82811115610122578251825591602001919060010190610107565b5b5061012f929150610133565b5090565b61015191905b8082111561012f5760008155600101610139565b5090565b90565b610ee6806101636000396000f300606060405236156100ee5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f35780630801baca1461017e578063095ea7b3146101d1578063169ea2f81461020757806318160ddd1461025a5780631b9dbcaf1461027f57806323b872dd146102a4578063313ce567146102e05780633f3c212d14610309578063661884631461039457806370a08231146103ca5780638da5cb5b146103fb57806395d89b411461042a578063a9059cbb146104b5578063d73dd623146104eb578063dd62ed3e14610521578063f2fde38b14610558575b600080fd5b34156100fe57600080fd5b610106610579565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101435780820151818401525b60200161012a565b50505050905090810190601f1680156101705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018957600080fd5b6101cf60046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506105b095505050505050565b005b34156101dc57600080fd5b6101f3600160a060020a036004351660243561068e565b604051901515815260200160405180910390f35b341561021257600080fd5b6101cf600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965050933593506106fb92505050565b005b341561026557600080fd5b61026d61086b565b60405190815260200160405180910390f35b341561028a57600080fd5b61026d610871565b60405190815260200160405180910390f35b34156102af57600080fd5b6101f3600160a060020a0360043581169060243516604435610877565b604051901515815260200160405180910390f35b34156102eb57600080fd5b6102f36109a3565b60405160ff909116815260200160405180910390f35b341561031457600080fd5b6101066109a8565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101435780820151818401525b60200161012a565b50505050905090810190601f1680156101705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561039f57600080fd5b6101f3600160a060020a0360043516602435610a46565b604051901515815260200160405180910390f35b34156103d557600080fd5b61026d600160a060020a0360043516610b42565b60405190815260200160405180910390f35b341561040657600080fd5b61040e610b61565b604051600160a060020a03909116815260200160405180910390f35b341561043557600080fd5b610106610b70565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101435780820151818401525b60200161012a565b50505050905090810190601f1680156101705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104c057600080fd5b6101f3600160a060020a0360043516602435610ba7565b604051901515815260200160405180910390f35b34156104f657600080fd5b6101f3600160a060020a0360043516602435610c7e565b604051901515815260200160405180910390f35b341561052c57600080fd5b61026d600160a060020a0360043581169060243516610d23565b60405190815260200160405180910390f35b341561056357600080fd5b6101cf600160a060020a0360043516610d50565b005b60408051908101604052600b81527f4b697474656e20436f696e000000000000000000000000000000000000000000602082015281565b60035433600160a060020a039081169116146105cb57600080fd5b60058180516105de929160200190610e1a565b507f0a3dfd107b62835ae40d4701bd11b71666de13c76af152c7f70741f5d52bec9b60056040516020808252825460026000196101006001841615020190911604908201819052819060408201908490801561067b5780601f106106505761010080835404028352916020019161067b565b820191906000526020600020905b81548152906001019060200180831161065e57829003601f168201915b50509250505060405180910390a15b5b50565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b6003546000908190819033600160a060020a0390811691161461071d57600080fd5b6000546305f5e10085029350838651600454910201111561073d57600080fd5b5060009050805b84518210156108205766b1a2bc2ec5000085838151811061076157fe5b90602001906020020151600160a060020a031631111561081557826001600087858151811061078c57fe5b90602001906020020151600160a060020a0316815260208101919091526040016000208054909101905582018482815181106107c457fe5b90602001906020020151600160a060020a031630600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405190815260200160405180910390a35b600182019150610744565b60048054820190557f4aada45fab97daffdbc5fc2a345ba2f57705b6a2cddafe9bd200f8d53abe4e05828260405191825260208201526040908101905180910390a15b5b5050505050565b60005481565b60045481565b600080600160a060020a038416151561088f57600080fd5b50600160a060020a038085166000818152600260209081526040808320339095168352938152838220549282526001905291909120546108d5908463ffffffff610de916565b600160a060020a03808716600090815260016020526040808220939093559086168152205461090a908463ffffffff610e0016565b600160a060020a038516600090815260016020526040902055610933818463ffffffff610de916565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b600881565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a3e5780601f10610a1357610100808354040283529160200191610a3e565b820191906000526020600020905b815481529060010190602001808311610a2157829003601f168201915b505050505081565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115610aa357600160a060020a033381166000908152600260209081526040808320938816835292905290812055610ada565b610ab3818463ffffffff610de916565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b600160a060020a0381166000908152600160205260409020545b919050565b600354600160a060020a031681565b60408051908101604052600681527f4b495454454e0000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a0383161515610bbe57600080fd5b600160a060020a033316600090815260016020526040902054610be7908363ffffffff610de916565b600160a060020a033381166000908152600160205260408082209390935590851681522054610c1c908363ffffffff610e0016565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610cb6908363ffffffff610e0016565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a35060015b92915050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a03908116911614610d6b57600080fd5b600160a060020a0381161515610d8057600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600082821115610df557fe5b508082035b92915050565b600082820183811015610e0f57fe5b8091505b5092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610e5b57805160ff1916838001178555610e88565b82800160010185558215610e88579182015b82811115610e88578251825591602001919060010190610e6d565b5b50610e95929150610e99565b5090565b610eb791905b80821115610e955760008155600101610e9f565b5090565b905600a165627a7a72305820243eab4f4c231315bc64b3ed2742c03d33fe655cacbeeaaa837a7f9db9e035e10029"
}