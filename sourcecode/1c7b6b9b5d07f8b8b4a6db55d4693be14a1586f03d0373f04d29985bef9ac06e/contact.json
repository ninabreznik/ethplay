{
  "address": "0x35027a992a3c232dd7a350bb75004ad8567561b2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EasyInvestForever",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-04\n*/\n\npragma solidity ^0.4.25;\n\n/**\n *\n * Easy Invest FOREVER Contract\n *  - GAIN VARIABLE INTEREST AT A RATE OF AT LEAST 1% PER 5900 blocks (approx. 24 hours) UP TO 10% PER DAY (dependent on incoming ETH and contract balance in past 24 hour period)\n *  - ZERO SUM GAME - NO COMMISSION on your investment (every ether stays on contract's balance)\n *  - NO FEES are collected by the owner, in fact, there is no owner at all (just look at the code)\n *  - ADDED GAME ELEMENT OF CHOOSING THE BEST TIME TO WITHDRAW TO MAXIMIZE INTEREST (less frequent withdrawals at higher interest rates will return faster)\n *  - ONLY 100ETH balance increase per day needed for 10% interest so whales will boost the contract to newer heights to receive higher interest.\n *  \n *  - For Fairness on high interest days, a maximum of only 10% of total investment can be returned per withdrawal so you should make withdrawals regularly or lose the extra interest.\n * \n * How to use:\n *  1. Send any amount of ether to make an investment\n *  2a. Claim your profit by sending 0 ether transaction (every day, every week, i don't care unless you're spending too much on GAS)\n *  OR\n *  2b. Send more ether to reinvest AND get your profit at the same time\n *\n * RECOMMENDED GAS LIMIT: 70000\n * RECOMMENDED GAS PRICE: https://ethgasstation.info/\n *\n * Contract reviewed and approved by pros!\n *\n */\ncontract EasyInvestForever {\n    mapping (address => uint256) public invested;   // records amounts invested\n    mapping (address => uint256) public atBlock;    // records blocks at which investments were made\n\tuint256 public previousBalance = 0;             // stores the previous contract balance in steps of 5900 blocks (for current interest calculation)\n\tuint256 public interestRate = 1;                // stores current interest rate - initially 1%\n\tuint256 public nextBlock = block.number + 5900; // next block number to adjust interestRate\n\t\n    // this function called every time anyone sends a transaction to this contract\n    function () external payable {\n        \n        if (block.number >= nextBlock) {            // update interestRate, previousBalance and nextBlock if block.number has increased enough (every 5900 blocks)\n\t\t    uint256 currentBalance= address(this).balance;\n\t\t    if (currentBalance < previousBalance) currentBalance = previousBalance; // prevents overflow in next line from negative difference and ensures falling contract remains at 1%\n\t\t\tinterestRate = (currentBalance - previousBalance) / 10e18 + 1;            // 1% interest base percentage increments for every 10ETH balance increase each period\n\t\t\tinterestRate = (interestRate > 10) ? 10 : ((interestRate < 1) ? 1 : interestRate);  // clamp interest between 1% to 10% inclusive\n\t\t\tpreviousBalance = currentBalance ;      // if contract has fallen, currentBalance remains at the previous high and balance has to catch up for higher interest\n\t\t\tnextBlock += 5900 * ((block.number - nextBlock) / 5900 + 1);            // covers rare cases where there have been no transactions for over a day (unlikely)\n\t\t}\n\t\t\n\t\tif (invested[msg.sender] != 0) {            // if sender (aka YOU) is invested more than 0 ether\n            uint256 amount = invested[msg.sender] * interestRate / 100 * (block.number - atBlock[msg.sender]) / 5900;   // interest amount = (amount invested) * interestRate% * (blocks since last transaction) / 5900\n            amount = (amount > invested[msg.sender] / 10) ? invested[msg.sender] / 10 : amount;  // limit interest to no more than 10% of invested amount per withdrawal\n            msg.sender.transfer(amount);            // send calculated amount of ether directly to sender (aka YOU)\n        }\n\n        atBlock[msg.sender] = block.number;         // record block number of this transaction\n\t\tinvested[msg.sender] += msg.value;          // update invested amount (msg.value) of this transaction\n\t\t\n\t\t\n\t}\n}",
  "bytecode": "6080604052600060025560016003554361170c0160045534801561002257600080fd5b506102d4806100326000396000f30060806040526004361061006c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166366b3f6bf81146101c55780637c3a00fd1461020557806383788fce1461021a5780638aac13621461022f578063b113e7ce1461025d575b600080600454431015156100ec576002543031925082101561008e5760025491505b600254678ac7230489e8000090830304600101600381905550600a600354116100cb576001600354106100c3576003546100c6565b60015b6100ce565b600a5b60035560028290556004805461170c43829003819004600101020190555b33600090815260208190526040902054156101a057336000908152600160209081526040808320546003549284905292205461170c9243039160649102040281151561013457fe5b336000908152602081905260409020549190049150600a90048111610159578061016e565b33600090815260208190526040902054600a90045b604051909150339082156108fc029083906000818181858888f1935050505015801561019e573d6000803e3d6000fd5b505b5050336000908152600160209081526040808320439055908290529020805434019055005b3480156101d157600080fd5b506101f373ffffffffffffffffffffffffffffffffffffffff60043516610272565b60408051918252519081900360200190f35b34801561021157600080fd5b506101f3610284565b34801561022657600080fd5b506101f361028a565b34801561023b57600080fd5b506101f373ffffffffffffffffffffffffffffffffffffffff60043516610290565b34801561026957600080fd5b506101f36102a2565b60006020819052908152604090205481565b60035481565b60045481565b60016020526000908152604090205481565b600254815600a165627a7a72305820f5572799a034a9c9d248a409cff84fc658d25363788853a68961450ab11d671e0029"
}