{
  "address": "0x72955ecff76e48f2c8abcce11d54e5734d6f3657",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TrustVerseToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-17\n*/\n\npragma solidity 0.4.24;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  //event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  //function renounceOwnership() public onlyOwner {\n  //  emit OwnershipRenounced(owner);\n  //  owner = address(0);\n  //}\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic, Ownable {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n  mapping(address => uint256) bonusTokens;\n  mapping(address => uint256) bonusReleaseTime;\n  \n  mapping(address => bool) internal blacklist;\n  address[] internal blacklistHistory;\n  \n  bool public isTokenReleased = false;\n  \n  address addressSaleContract;\n  event BlacklistUpdated(address badUserAddress, bool registerStatus);\n  event TokenReleased(address tokenOwnerAddress, bool tokenStatus);\n\n  uint256 totalSupply_;\n\n  modifier onlyBonusSetter() {\n      require(msg.sender == owner || msg.sender == addressSaleContract);\n      _;\n  }\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n    require(isTokenReleased);\n    require(!blacklist[_to]);\n    require(!blacklist[msg.sender]);\n    \n    if (bonusReleaseTime[msg.sender] > block.timestamp) {\n        require(_value <= balances[msg.sender].sub(bonusTokens[msg.sender]));\n    }\n    \n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(msg.sender == owner || !blacklist[_owner]);\n    require(!blacklist[msg.sender]);\n    return balances[_owner];\n  }\n\n  /**\n  * @dev Set the specified address to blacklist.\n  * @param _badUserAddress The address of bad user.\n  */\n  function registerToBlacklist(address _badUserAddress) onlyOwner public {\n      if (blacklist[_badUserAddress] != true) {\n\t  \t  blacklist[_badUserAddress] = true;\n          blacklistHistory.push(_badUserAddress);\n\t  }\n      emit BlacklistUpdated(_badUserAddress, blacklist[_badUserAddress]);   \n  }\n  \n  /**\n  * @dev Remove the specified address from blacklist.\n  * @param _badUserAddress The address of bad user.\n  */\n  function unregisterFromBlacklist(address _badUserAddress) onlyOwner public {\n      if (blacklist[_badUserAddress] == true) {\n\t  \t  blacklist[_badUserAddress] = false;\n\t  }\n      emit BlacklistUpdated(_badUserAddress, blacklist[_badUserAddress]);\n  }\n\n  /**\n  * @dev Check the address registered in blacklist.\n  * @param _address The address to check.\n  * @return a bool representing registration of the passed address.\n  */\n  function checkBlacklist (address _address) onlyOwner public view returns (bool) {\n      return blacklist[_address];\n  }\n\n  function getblacklistHistory() onlyOwner public view returns (address[]) {\n      return blacklistHistory;\n  }\n  \n  /**\n  * @dev Release the token (enable all token functions).\n  */\n  function releaseToken() onlyOwner public {\n      if (isTokenReleased == false) {\n\t\tisTokenReleased = true;\n\t  }\n      emit TokenReleased(msg.sender, isTokenReleased);\n  }\n  \n  /**\n  * @dev Withhold the token (disable all token functions).\n  */\n  function withholdToken() onlyOwner public {\n      if (isTokenReleased == true) {\n\t\tisTokenReleased = false;\n      }\n\t  emit TokenReleased(msg.sender, isTokenReleased);\n  }\n  \n  /**\n  * @dev Set bonus token amount and bonus token release time for the specified address.\n  * @param _tokenHolder The address of bonus token holder\n  *        _bonusTokens The bonus token amount\n  *        _holdingPeriodInDays Bonus token holding period (in days) \n  */  \n  function setBonusTokenInDays(address _tokenHolder, uint256 _bonusTokens, uint256 _holdingPeriodInDays) onlyBonusSetter public {\n      bonusTokens[_tokenHolder] = _bonusTokens;\n      bonusReleaseTime[_tokenHolder] = SafeMath.add(block.timestamp, _holdingPeriodInDays * 1 days);\n  }\n\n  /**\n  * @dev Set bonus token amount and bonus token release time for the specified address.\n  * @param _tokenHolder The address of bonus token holder\n  *        _bonusTokens The bonus token amount\n  *        _bonusReleaseTime Bonus token release time\n  */  \n  function setBonusToken(address _tokenHolder, uint256 _bonusTokens, uint256 _bonusReleaseTime) onlyBonusSetter public {\n      bonusTokens[_tokenHolder] = _bonusTokens;\n      bonusReleaseTime[_tokenHolder] = _bonusReleaseTime;\n  }\n  \n  /**\n  * @dev Set bonus token amount and bonus token release time for the specified address.\n  * @param _tokenHolders The address of bonus token holder [\"0x...\", \"0x...\", ...] \n  *        _bonusTokens The bonus token amount [0,0, ...] \n  *        _bonusReleaseTime Bonus token release time\n  */  \n  function setBonusTokens(address[] _tokenHolders, uint256[] _bonusTokens, uint256 _bonusReleaseTime) onlyBonusSetter public {\n      for (uint i = 0; i < _tokenHolders.length; i++) {\n        bonusTokens[_tokenHolders[i]] = _bonusTokens[i];\n        bonusReleaseTime[_tokenHolders[i]] = _bonusReleaseTime;\n      }\n  }\n\n  function setBonusTokensInDays(address[] _tokenHolders, uint256[] _bonusTokens, uint256 _holdingPeriodInDays) onlyBonusSetter public {\n      for (uint i = 0; i < _tokenHolders.length; i++) {\n        bonusTokens[_tokenHolders[i]] = _bonusTokens[i];\n        bonusReleaseTime[_tokenHolders[i]] = SafeMath.add(block.timestamp, _holdingPeriodInDays * 1 days);\n      }\n  }\n\n  /**\n  * @dev Set the address of the crowd sale contract which can call setBonusToken method.\n  * @param _addressSaleContract The address of the crowd sale contract.\n  */\n  function setBonusSetter(address _addressSaleContract) onlyOwner public {\n      addressSaleContract = _addressSaleContract;\n  }\n  \n  function getBonusSetter() public view returns (address) {\n      require(msg.sender == addressSaleContract || msg.sender == owner);\n      return addressSaleContract;\n  }\n  \n  /**\n  * @dev Display token holder's bonus token amount.\n  * @param _bonusHolderAddress The address of bonus token holder.\n  */\n  function checkBonusTokenAmount (address _bonusHolderAddress) public view returns (uint256) {\n      return bonusTokens[_bonusHolderAddress];\n  }\n  \n  /**\n  * @dev Display token holder's remaining bonus token holding period.\n  * @param _bonusHolderAddress The address of bonus token holder.\n  */\n  function checkBonusTokenHoldingPeriodRemained (address _bonusHolderAddress) public view returns (uint256) {\n      uint256 returnValue = 0;\n      if (bonusReleaseTime[_bonusHolderAddress] > now) {\n          returnValue = bonusReleaseTime[_bonusHolderAddress].sub(now);\n      }\n      return returnValue;\n  }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) onlyOwner public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) onlyOwner internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n  mapping (address => mapping (address => uint256)) internal allowed;\n  \n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(!blacklist[_from]);\n    require(!blacklist[_to]);\n\trequire(!blacklist[msg.sender]);\n    require(isTokenReleased);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    require(isTokenReleased);\n    require(!blacklist[_spender]);\n\trequire(!blacklist[msg.sender]);\n\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    require(!blacklist[_owner]);\n    require(!blacklist[_spender]);\n\trequire(!blacklist[msg.sender]);\n\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    require(!blacklist[_spender]);\n\trequire(!blacklist[msg.sender]);\n\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    require(!blacklist[_spender]);    \n\trequire(!blacklist[msg.sender]);\n\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n}\n\n/**\n * @title TrustVerse Token\n * @dev Burnable ERC20 standard Token\n */\ncontract TrustVerseToken is BurnableToken, StandardToken {\n  string public constant name = \"TrustVerse\"; // solium-disable-line uppercase\n  string public constant symbol = \"TRV\"; // solium-disable-line uppercase\n  uint8 public constant decimals = 18; // solium-disable-line uppercase\n  uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\n  mapping (address => mapping (address => uint256)) internal EffectiveDateOfAllowance; // Effective date of Lost-proof, Inheritance\n\n  /**\n   * @dev Constructor that gives msg.sender all of existing tokens.\n   */\n  constructor() public {\n    totalSupply_ = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n    emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n  }\n\n  /**\n   * @dev Transfer tokens to multiple addresses\n   * @param _to array of address The address which you want to transfer to\n   * @param _value array of uint256 the amount of tokens to be transferred\n   */\n  function transferToMultiAddress(address[] _to, uint256[] _value) public {\n    require(_to.length == _value.length);\n\n    uint256 transferTokenAmount = 0;\n    uint256 i = 0;\n    for (i = 0; i < _to.length; i++) {\n        transferTokenAmount = transferTokenAmount.add(_value[i]);\n    }\n    require(transferTokenAmount <= balances[msg.sender]);\n\n    for (i = 0; i < _to.length; i++) {\n        transfer(_to[i], _value[i]);\n    }\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(EffectiveDateOfAllowance[_from][msg.sender] <= block.timestamp); \n    return super.transferFrom(_from, _to, _value);\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   * @param _effectiveDate Effective date of Lost-proof, Inheritance\n   */\n  function approveWithEffectiveDate(address _spender, uint256 _value, uint256 _effectiveDate) public returns (bool) {\n    require(isTokenReleased);\n    require(!blacklist[_spender]);\n\trequire(!blacklist[msg.sender]);\n    \n    EffectiveDateOfAllowance[msg.sender][_spender] = _effectiveDate;\n    return approve(_spender, _value);\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   * @param _effectiveDateInDays Effective date of Lost-proof, Inheritance\n   */\n  function approveWithEffectiveDateInDays(address _spender, uint256 _value, uint256 _effectiveDateInDays) public returns (bool) {\n    require(isTokenReleased);\n    require(!blacklist[_spender]);\n\trequire(!blacklist[msg.sender]);\n    \n    EffectiveDateOfAllowance[msg.sender][_spender] = SafeMath.add(block.timestamp, _effectiveDateInDays * 1 days);\n    return approve(_spender, _value);\n  }  \n\n  /**\n   * @dev Function to check the Effective date of Lost-proof, Inheritance of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowanceEffectiveDate(address _owner, address _spender) public view returns (uint256) {\n    require(!blacklist[_owner]);\n    require(!blacklist[_spender]);\n\trequire(!blacklist[msg.sender]);\n\n    return EffectiveDateOfAllowance[_owner][_spender];\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"name\":\"_bonusTokens\",\"type\":\"uint256\"},{\"name\":\"_bonusReleaseTime\",\"type\":\"uint256\"}],\"name\":\"setBonusToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_effectiveDate\",\"type\":\"uint256\"}],\"name\":\"approveWithEffectiveDate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"transferToMultiAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBonusSetter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowanceEffectiveDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withholdToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTokenReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"name\":\"_bonusTokens\",\"type\":\"uint256\"},{\"name\":\"_holdingPeriodInDays\",\"type\":\"uint256\"}],\"name\":\"setBonusTokenInDays\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bonusHolderAddress\",\"type\":\"address\"}],\"name\":\"checkBonusTokenHoldingPeriodRemained\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolders\",\"type\":\"address[]\"},{\"name\":\"_bonusTokens\",\"type\":\"uint256[]\"},{\"name\":\"_bonusReleaseTime\",\"type\":\"uint256\"}],\"name\":\"setBonusTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bonusHolderAddress\",\"type\":\"address\"}],\"name\":\"checkBonusTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_badUserAddress\",\"type\":\"address\"}],\"name\":\"unregisterFromBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_effectiveDateInDays\",\"type\":\"uint256\"}],\"name\":\"approveWithEffectiveDateInDays\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getblacklistHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkBlacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressSaleContract\",\"type\":\"address\"}],\"name\":\"setBonusSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolders\",\"type\":\"address[]\"},{\"name\":\"_bonusTokens\",\"type\":\"uint256[]\"},{\"name\":\"_holdingPeriodInDays\",\"type\":\"uint256\"}],\"name\":\"setBonusTokensInDays\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_badUserAddress\",\"type\":\"address\"}],\"name\":\"registerToBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"badUserAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"registerStatus\",\"type\":\"bool\"}],\"name\":\"BlacklistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenOwnerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenStatus\",\"type\":\"bool\"}],\"name\":\"TokenReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526006805460ff1916905534801561001a57600080fd5b5060008054600160a060020a0319163390811782556b033b2e3c9fd0803ce800000060078190558183526001602090815260408085208390558051928352519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3611bbe806100956000396000f3006080604052600436106101ab5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101b0578063095ea7b31461023a5780631812d2aa1461027257806318160ddd1461029b57806323b872dd146102c25780632ff2e9dc146102ec578063313ce5671461030157806342966c681461032c57806343f0901c14610344578063498514301461036b5780635b0ad787146103f9578063661884631461042a5780636ad89c051461044e5780636af41534146104755780636b8ea4511461048a57806370a082311461049f57806375012c35146104c05780637cddc1de146104e75780638d5f690a146105085780638da5cb5b1461059857806395d89b41146105ad578063979b49de146105c2578063a9059cbb146105e3578063c17e92b614610607578063c7ed046114610628578063d73dd6231461064f578063da18767414610673578063dd62ed3e146106d8578063e6807ca9146106ff578063ec715a3114610720578063edb0ea7114610735578063f2fde38b14610756578063fb7f93f614610777578063feaf1fe114610807575b600080fd5b3480156101bc57600080fd5b506101c5610828565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ff5781810151838201526020016101e7565b50505050905090810190601f16801561022c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024657600080fd5b5061025e600160a060020a036004351660243561085f565b604080519115158252519081900360200190f35b34801561027e57600080fd5b50610299600160a060020a036004351660243560443561091d565b005b3480156102a757600080fd5b506102b0610978565b60408051918252519081900360200190f35b3480156102ce57600080fd5b5061025e600160a060020a036004358116906024351660443561097e565b3480156102f857600080fd5b506102b06109c1565b34801561030d57600080fd5b506103166109d1565b6040805160ff9092168252519081900360200190f35b34801561033857600080fd5b506102996004356109d6565b34801561035057600080fd5b5061025e600160a060020a03600435166024356044356109fa565b34801561037757600080fd5b506040805160206004803580820135838102808601850190965280855261029995369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610a819650505050505050565b34801561040557600080fd5b5061040e610b46565b60408051600160a060020a039092168252519081900360200190f35b34801561043657600080fd5b5061025e600160a060020a0360043516602435610b91565b34801561045a57600080fd5b506102b0600160a060020a0360043581169060243516610cc7565b34801561048157600080fd5b50610299610d5c565b34801561049657600080fd5b5061025e610dd2565b3480156104ab57600080fd5b506102b0600160a060020a0360043516610ddb565b3480156104cc57600080fd5b50610299600160a060020a0360043516602435604435610e52565b3480156104f357600080fd5b506102b0600160a060020a0360043516610ed0565b34801561051457600080fd5b506040805160206004803580820135838102808601850190965280855261029995369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497505093359450610f249350505050565b3480156105a457600080fd5b5061040e610ffb565b3480156105b957600080fd5b506101c561100a565b3480156105ce57600080fd5b506102b0600160a060020a0360043516611041565b3480156105ef57600080fd5b5061025e600160a060020a036004351660243561105c565b34801561061357600080fd5b50610299600160a060020a03600435166111e1565b34801561063457600080fd5b5061025e600160a060020a0360043516602435604435611299565b34801561065b57600080fd5b5061025e600160a060020a036004351660243561132d565b34801561067f57600080fd5b50610688611409565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156106c45781810151838201526020016106ac565b505050509050019250505060405180910390f35b3480156106e457600080fd5b506102b0600160a060020a0360043581169060243516611483565b34801561070b57600080fd5b5061025e600160a060020a0360043516611518565b34801561072c57600080fd5b5061029961154f565b34801561074157600080fd5b50610299600160a060020a03600435166115c3565b34801561076257600080fd5b50610299600160a060020a036004351661160f565b34801561078357600080fd5b506040805160206004803580820135838102808601850190965280855261029995369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975050933594506116a39350505050565b34801561081357600080fd5b50610299600160a060020a036004351661177d565b60408051808201909152600a81527f5472757374566572736500000000000000000000000000000000000000000000602082015281565b60065460009060ff16151561087357600080fd5b600160a060020a03831660009081526004602052604090205460ff161561089957600080fd5b3360009081526004602052604090205460ff16156108b657600080fd5b336000818152600860209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600054600160a060020a031633148061094557506006546101009004600160a060020a031633145b151561095057600080fd5b600160a060020a03909216600090815260026020908152604080832093909355600390522055565b60075490565b600160a060020a03831660009081526009602090815260408083203384529091528120544210156109ae57600080fd5b6109b9848484611868565b949350505050565b6b033b2e3c9fd0803ce800000081565b601281565b600054600160a060020a031633146109ed57600080fd5b6109f73382611a5b565b50565b60065460009060ff161515610a0e57600080fd5b600160a060020a03841660009081526004602052604090205460ff1615610a3457600080fd5b3360009081526004602052604090205460ff1615610a5157600080fd5b336000908152600960209081526040808320600160a060020a038816845290915290208290556109b9848461085f565b60008082518451141515610a9457600080fd5b5060009050805b8351811015610ad657610acc8382815181101515610ab557fe5b60209081029091010151839063ffffffff611b7316565b9150600101610a9b565b33600090815260016020526040902054821115610af257600080fd5b5060005b8351811015610b4057610b378482815181101515610b1057fe5b906020019060200201518483815181101515610b2857fe5b9060200190602002015161105c565b50600101610af6565b50505050565b6006546000906101009004600160a060020a0316331480610b715750600054600160a060020a031633145b1515610b7c57600080fd5b506006546101009004600160a060020a031690565b600160a060020a038216600090815260046020526040812054819060ff1615610bb957600080fd5b3360009081526004602052604090205460ff1615610bd657600080fd5b50336000908152600860209081526040808320600160a060020a038716845290915290205480831115610c2c57336000908152600860209081526040808320600160a060020a0388168452909152812055610c61565b610c3c818463ffffffff611b8016565b336000908152600860209081526040808320600160a060020a03891684529091529020555b336000818152600860209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a03821660009081526004602052604081205460ff1615610ced57600080fd5b600160a060020a03821660009081526004602052604090205460ff1615610d1357600080fd5b3360009081526004602052604090205460ff1615610d3057600080fd5b50600160a060020a03918216600090815260096020908152604080832093909416825291909152205490565b600054600160a060020a03163314610d7357600080fd5b60065460ff16151560011415610d8e576006805460ff191690555b6006546040805133815260ff9092161515602083015280517f91887092b4e0e6ab9ce22782889c95cc48517f9549147519fe734b0ae070a4e39281900390910190a1565b60065460ff1681565b60008054600160a060020a0316331480610e0e5750600160a060020a03821660009081526004602052604090205460ff16155b1515610e1957600080fd5b3360009081526004602052604090205460ff1615610e3657600080fd5b50600160a060020a031660009081526001602052604090205490565b600054600160a060020a0316331480610e7a57506006546101009004600160a060020a031633145b1515610e8557600080fd5b600160a060020a0383166000908152600260205260409020829055610eaf42620151808302611b73565b600160a060020a039093166000908152600360205260409020929092555050565b600160a060020a0381166000908152600360205260408120548190421015610f1e57600160a060020a038316600090815260036020526040902054610f1b904263ffffffff611b8016565b90505b92915050565b60008054600160a060020a0316331480610f4d57506006546101009004600160a060020a031633145b1515610f5857600080fd5b5060005b8351811015610b40578281815181101515610f7357fe5b90602001906020020151600260008684815181101515610f8f57fe5b90602001906020020151600160a060020a0316600160a060020a031681526020019081526020016000208190555081600360008684815181101515610fd057fe5b6020908102909101810151600160a060020a0316825281019190915260400160002055600101610f5c565b600054600160a060020a031681565b60408051808201909152600381527f5452560000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a031660009081526002602052604090205490565b6000600160a060020a038316151561107357600080fd5b3360009081526001602052604090205482111561108f57600080fd5b60065460ff1615156110a057600080fd5b600160a060020a03831660009081526004602052604090205460ff16156110c657600080fd5b3360009081526004602052604090205460ff16156110e357600080fd5b3360009081526003602052604090205442101561113157336000908152600260209081526040808320546001909252909120546111259163ffffffff611b8016565b82111561113157600080fd5b33600090815260016020526040902054611151908363ffffffff611b8016565b3360009081526001602052604080822092909255600160a060020a03851681522054611183908363ffffffff611b7316565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600054600160a060020a031633146111f857600080fd5b600160a060020a03811660009081526004602052604090205460ff1615156001141561123f57600160a060020a0381166000908152600460205260409020805460ff191690555b600160a060020a03811660008181526004602090815260409182902054825193845260ff1615159083015280517f6a12b3df6cba4203bd7fd06b816789f87de8c594299aed5717ae070fac781bac9281900390910190a150565b60065460009060ff1615156112ad57600080fd5b600160a060020a03841660009081526004602052604090205460ff16156112d357600080fd5b3360009081526004602052604090205460ff16156112f057600080fd5b6112ff42836201518002611b73565b336000908152600960209081526040808320600160a060020a03891684529091529020556109b9848461085f565b600160a060020a03821660009081526004602052604081205460ff161561135357600080fd5b3360009081526004602052604090205460ff161561137057600080fd5b336000908152600860209081526040808320600160a060020a03871684529091529020546113a4908363ffffffff611b7316565b336000818152600860209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600054606090600160a060020a0316331461142357600080fd5b600580548060200260200160405190810160405280929190818152602001828054801561147957602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161145b575b5050505050905090565b600160a060020a03821660009081526004602052604081205460ff16156114a957600080fd5b600160a060020a03821660009081526004602052604090205460ff16156114cf57600080fd5b3360009081526004602052604090205460ff16156114ec57600080fd5b50600160a060020a03918216600090815260086020908152604080832093909416825291909152205490565b60008054600160a060020a0316331461153057600080fd5b50600160a060020a031660009081526004602052604090205460ff1690565b600054600160a060020a0316331461156657600080fd5b60065460ff161515610d8e576006805460ff191660011790556006546040805133815260ff9092161515602083015280517f91887092b4e0e6ab9ce22782889c95cc48517f9549147519fe734b0ae070a4e39281900390910190a1565b600054600160a060020a031633146115da57600080fd5b60068054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b600054600160a060020a0316331461162657600080fd5b600160a060020a038116151561163b57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008054600160a060020a03163314806116cc57506006546101009004600160a060020a031633145b15156116d757600080fd5b5060005b8351811015610b405782818151811015156116f257fe5b9060200190602002015160026000868481518110151561170e57fe5b6020908102909101810151600160a060020a031682528101919091526040016000205561174042620151808402611b73565b60036000868481518110151561175257fe5b6020908102909101810151600160a060020a03168252810191909152604001600020556001016116db565b600054600160a060020a0316331461179457600080fd5b600160a060020a03811660009081526004602052604090205460ff16151560011461123f57600160a060020a038116600081815260046020908152604091829020805460ff1916600190811782556005805491820190557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805473ffffffffffffffffffffffffffffffffffffffff19168517905554825193845260ff1615159083015280517f6a12b3df6cba4203bd7fd06b816789f87de8c594299aed5717ae070fac781bac9281900390910190a150565b6000600160a060020a038316151561187f57600080fd5b600160a060020a0384166000908152600160205260409020548211156118a457600080fd5b600160a060020a03841660009081526008602090815260408083203384529091529020548211156118d457600080fd5b600160a060020a03841660009081526004602052604090205460ff16156118fa57600080fd5b600160a060020a03831660009081526004602052604090205460ff161561192057600080fd5b3360009081526004602052604090205460ff161561193d57600080fd5b60065460ff16151561194e57600080fd5b600160a060020a038416600090815260016020526040902054611977908363ffffffff611b8016565b600160a060020a0380861660009081526001602052604080822093909355908516815220546119ac908363ffffffff611b7316565b600160a060020a0380851660009081526001602090815260408083209490945591871681526008825282812033825290915220546119f0908363ffffffff611b8016565b600160a060020a03808616600081815260086020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600054600160a060020a03163314611a7257600080fd5b600160a060020a038216600090815260016020526040902054811115611a9757600080fd5b600160a060020a038216600090815260016020526040902054611ac0908263ffffffff611b8016565b600160a060020a038316600090815260016020526040902055600754611aec908263ffffffff611b8016565b600755604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b81810182811015610f1e57fe5b600082821115611b8c57fe5b509003905600a165627a7a72305820339ca17a3b70dc6d61e816610fe0a8fd075bb0f43452afba2eb632ca492d37510029"
}