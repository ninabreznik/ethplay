{
  "address": "0x0000000000b3f879cb30fe243b4dfee438691c04",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GasToken2",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-08\n*/\n\npragma solidity ^0.4.10;\n\ncontract GasToken2 {\n    //////////////////////////////////////////////////////////////////////////\n    // RLP.sol\n    // Due to some unexplained bug, we get a slightly different bytecode if \n    // we use an import, and are then unable to verify the code in Etherscan\n    //////////////////////////////////////////////////////////////////////////\n    \n    uint256 constant ADDRESS_BYTES = 20;\n    uint256 constant MAX_SINGLE_BYTE = 128;\n    uint256 constant MAX_NONCE = 256**9 - 1;\n\n    // count number of bytes required to represent an unsigned integer\n    function count_bytes(uint256 n) constant internal returns (uint256 c) {\n        uint i = 0;\n        uint mask = 1;\n        while (n >= mask) {\n            i += 1;\n            mask *= 256;\n        }\n\n        return i;\n    }\n\n    function mk_contract_address(address a, uint256 n) constant internal returns (address rlp) {\n        /*\n         * make sure the RLP encoding fits in one word:\n         * total_length      1 byte\n         * address_length    1 byte\n         * address          20 bytes\n         * nonce_length      1 byte (or 0)\n         * nonce           1-9 bytes\n         *                ==========\n         *                24-32 bytes\n         */\n        require(n <= MAX_NONCE);\n\n        // number of bytes required to write down the nonce\n        uint256 nonce_bytes;\n        // length in bytes of the RLP encoding of the nonce\n        uint256 nonce_rlp_len;\n\n        if (0 < n && n < MAX_SINGLE_BYTE) {\n            // nonce fits in a single byte\n            // RLP(nonce) = nonce\n            nonce_bytes = 1;\n            nonce_rlp_len = 1;\n        } else {\n            // RLP(nonce) = [num_bytes_in_nonce nonce]\n            nonce_bytes = count_bytes(n);\n            nonce_rlp_len = nonce_bytes + 1;\n        }\n\n        // [address_length(1) address(20) nonce_length(0 or 1) nonce(1-9)]\n        uint256 tot_bytes = 1 + ADDRESS_BYTES + nonce_rlp_len;\n\n        // concatenate all parts of the RLP encoding in the leading bytes of\n        // one 32-byte word\n        uint256 word = ((192 + tot_bytes) * 256**31) +\n                       ((128 + ADDRESS_BYTES) * 256**30) +\n                       (uint256(a) * 256**10);\n\n        if (0 < n && n < MAX_SINGLE_BYTE) {\n            word += n * 256**9;\n        } else {\n            word += (128 + nonce_bytes) * 256**9;\n            word += n * 256**(9 - nonce_bytes);\n        }\n\n        uint256 hash;\n\n        assembly {\n            let mem_start := mload(0x40)        // get a pointer to free memory\n            mstore(0x40, add(mem_start, 0x20))  // update the pointer\n\n            mstore(mem_start, word)             // store the rlp encoding\n            hash := sha3(mem_start,\n                         add(tot_bytes, 1))     // hash the rlp encoding\n        }\n\n        // interpret hash as address (20 least significant bytes)\n        return address(hash);\n    }\n    \n    //////////////////////////////////////////////////////////////////////////\n    // Generic ERC20\n    //////////////////////////////////////////////////////////////////////////\n\n    // owner -> amount\n    mapping(address => uint256) s_balances;\n    // owner -> spender -> max amount\n    mapping(address => mapping(address => uint256)) s_allowances;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    // Spec: Get the account balance of another account with address `owner`\n    function balanceOf(address owner) public constant returns (uint256 balance) {\n        return s_balances[owner];\n    }\n\n    function internalTransfer(address from, address to, uint256 value) internal returns (bool success) {\n        if (value <= s_balances[from]) {\n            s_balances[from] -= value;\n            s_balances[to] += value;\n            Transfer(from, to, value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // Spec: Send `value` amount of tokens to address `to`\n    function transfer(address to, uint256 value) public returns (bool success) {\n        address from = msg.sender;\n        return internalTransfer(from, to, value);\n    }\n\n    // Spec: Send `value` amount of tokens from address `from` to address `to`\n    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\n        address spender = msg.sender;\n        if(value <= s_allowances[from][spender] && internalTransfer(from, to, value)) {\n            s_allowances[from][spender] -= value;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // Spec: Allow `spender` to withdraw from your account, multiple times, up\n    // to the `value` amount. If this function is called again it overwrites the\n    // current allowance with `value`.\n    function approve(address spender, uint256 value) public returns (bool success) {\n        address owner = msg.sender;\n        if (value != 0 && s_allowances[owner][spender] != 0) {\n            return false;\n        }\n        s_allowances[owner][spender] = value;\n        Approval(owner, spender, value);\n        return true;\n    }\n\n    // Spec: Returns the `amount` which `spender` is still allowed to withdraw\n    // from `owner`.\n    // What if the allowance is higher than the balance of the `owner`?\n    // Callers should be careful to use min(allowance, balanceOf) to make sure\n    // that the allowance is actually present in the account!\n    function allowance(address owner, address spender) public constant returns (uint256 remaining) {\n        return s_allowances[owner][spender];\n    }\n\n    //////////////////////////////////////////////////////////////////////////\n    // GasToken specifics\n    //////////////////////////////////////////////////////////////////////////\n\n    uint8 constant public decimals = 2;\n    string constant public name = \"Gastoken.io\";\n    string constant public symbol = \"GST2\";\n\n    // We build a queue of nonces at which child contracts are stored. s_head is\n    // the nonce at the head of the queue, s_tail is the nonce behind the tail\n    // of the queue. The queue grows at the head and shrinks from the tail.\n    // Note that when and only when a contract CREATEs another contract, the\n    // creating contract's nonce is incremented.\n    // The first child contract is created with nonce == 1, the second child\n    // contract is created with nonce == 2, and so on...\n    // For example, if there are child contracts at nonces [2,3,4],\n    // then s_head == 4 and s_tail == 1. If there are no child contracts,\n    // s_head == s_tail.\n    uint256 s_head;\n    uint256 s_tail;\n\n    // totalSupply gives  the number of tokens currently in existence\n    // Each token corresponds to one child contract that can be SELFDESTRUCTed\n    // for a gas refund.\n    function totalSupply() public constant returns (uint256 supply) {\n        return s_head - s_tail;\n    }\n\n    // Creates a child contract that can only be destroyed by this contract.\n    function makeChild() internal returns (address addr) {\n        assembly {\n            // EVM assembler of runtime portion of child contract:\n            //     ;; Pseudocode: if (msg.sender != 0x0000000000b3f879cb30fe243b4dfee438691c04) { throw; }\n            //     ;;             suicide(msg.sender)\n            //     PUSH15 0xb3f879cb30fe243b4dfee438691c04 ;; hardcoded address of this contract\n            //     CALLER\n            //     XOR\n            //     PC\n            //     JUMPI\n            //     CALLER\n            //     SELFDESTRUCT\n            // Or in binary: 6eb3f879cb30fe243b4dfee438691c043318585733ff\n            // Since the binary is so short (22 bytes), we can get away\n            // with a very simple initcode:\n            //     PUSH22 0x6eb3f879cb30fe243b4dfee438691c043318585733ff\n            //     PUSH1 0\n            //     MSTORE ;; at this point, memory locations mem[10] through\n            //            ;; mem[31] contain the runtime portion of the child\n            //            ;; contract. all that's left to do is to RETURN this\n            //            ;; chunk of memory.\n            //     PUSH1 22 ;; length\n            //     PUSH1 10 ;; offset\n            //     RETURN\n            // Or in binary: 756eb3f879cb30fe243b4dfee438691c043318585733ff6000526016600af3\n            // Almost done! All we have to do is put this short (31 bytes) blob into\n            // memory and call CREATE with the appropriate offsets.\n            let solidity_free_mem_ptr := mload(0x40)\n            mstore(solidity_free_mem_ptr, 0x00756eb3f879cb30fe243b4dfee438691c043318585733ff6000526016600af3)\n            addr := create(0, add(solidity_free_mem_ptr, 1), 31)\n        }\n    }\n\n    // Mints `value` new sub-tokens (e.g. cents, pennies, ...) by creating `value`\n    // new child contracts. The minted tokens are owned by the caller of this\n    // function.\n    function mint(uint256 value) public {\n        for (uint256 i = 0; i < value; i++) {\n            makeChild();\n        }\n        s_head += value;\n        s_balances[msg.sender] += value;\n    }\n\n    // Destroys `value` child contracts and updates s_tail.\n    //\n    // This function is affected by an issue in solc: https://github.com/ethereum/solidity/issues/2999\n    // The `mk_contract_address(this, i).call();` doesn't forward all available gas, but only GAS - 25710.\n    // As a result, when this line is executed with e.g. 30000 gas, the callee will have less than 5000 gas\n    // available and its SELFDESTRUCT operation will fail leading to no gas refund occurring.\n    // The remaining ~29000 gas left after the call is enough to update s_tail and the caller's balance.\n    // Hence tokens will have been destroyed without a commensurate gas refund.\n    // Fortunately, there is a simple workaround:\n    // Whenever you call free, freeUpTo, freeFrom, or freeUpToFrom, ensure that you pass at least\n    // 25710 + `value` * (1148 + 5722 + 150) gas. (It won't all be used)\n    function destroyChildren(uint256 value) internal {\n        uint256 tail = s_tail;\n        // tail points to slot behind the last contract in the queue\n        for (uint256 i = tail + 1; i <= tail + value; i++) {\n            mk_contract_address(this, i).call();\n        }\n\n        s_tail = tail + value;\n    }\n\n    // Frees `value` sub-tokens (e.g. cents, pennies, ...) belonging to the\n    // caller of this function by destroying `value` child contracts, which\n    // will trigger a partial gas refund.\n    // You should ensure that you pass at least 25710 + `value` * (1148 + 5722 + 150) gas\n    // when calling this function. For details, see the comment above `destroyChilden`.\n    function free(uint256 value) public returns (bool success) {\n        uint256 from_balance = s_balances[msg.sender];\n        if (value > from_balance) {\n            return false;\n        }\n\n        destroyChildren(value);\n\n        s_balances[msg.sender] = from_balance - value;\n\n        return true;\n    }\n\n    // Frees up to `value` sub-tokens. Returns how many tokens were freed.\n    // Otherwise, identical to free.\n    // You should ensure that you pass at least 25710 + `value` * (1148 + 5722 + 150) gas\n    // when calling this function. For details, see the comment above `destroyChilden`.\n    function freeUpTo(uint256 value) public returns (uint256 freed) {\n        uint256 from_balance = s_balances[msg.sender];\n        if (value > from_balance) {\n            value = from_balance;\n        }\n\n        destroyChildren(value);\n\n        s_balances[msg.sender] = from_balance - value;\n\n        return value;\n    }\n\n    // Frees `value` sub-tokens owned by address `from`. Requires that `msg.sender`\n    // has been approved by `from`.\n    // You should ensure that you pass at least 25710 + `value` * (1148 + 5722 + 150) gas\n    // when calling this function. For details, see the comment above `destroyChilden`.\n    function freeFrom(address from, uint256 value) public returns (bool success) {\n        address spender = msg.sender;\n        uint256 from_balance = s_balances[from];\n        if (value > from_balance) {\n            return false;\n        }\n\n        mapping(address => uint256) from_allowances = s_allowances[from];\n        uint256 spender_allowance = from_allowances[spender];\n        if (value > spender_allowance) {\n            return false;\n        }\n\n        destroyChildren(value);\n\n        s_balances[from] = from_balance - value;\n        from_allowances[spender] = spender_allowance - value;\n\n        return true;\n    }\n\n    // Frees up to `value` sub-tokens owned by address `from`. Returns how many tokens were freed.\n    // Otherwise, identical to `freeFrom`.\n    // You should ensure that you pass at least 25710 + `value` * (1148 + 5722 + 150) gas\n    // when calling this function. For details, see the comment above `destroyChilden`.\n    function freeFromUpTo(address from, uint256 value) public returns (uint256 freed) {\n        address spender = msg.sender;\n        uint256 from_balance = s_balances[from];\n        if (value > from_balance) {\n            value = from_balance;\n        }\n\n        mapping(address => uint256) from_allowances = s_allowances[from];\n        uint256 spender_allowance = from_allowances[spender];\n        if (value > spender_allowance) {\n            value = spender_allowance;\n        }\n\n        destroyChildren(value);\n\n        s_balances[from] = from_balance - value;\n        from_allowances[spender] = spender_allowance - value;\n\n        return value;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"freeFromUpTo\",\"outputs\":[{\"name\":\"freed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"freeFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"freeUpTo\",\"outputs\":[{\"name\":\"freed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"free\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b5b61125d8061001f6000396000f300606060405236156100ce576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d3578063079d229f14610162578063095ea7b3146101b857806318160ddd1461021257806323b872dd1461023b578063313ce567146102b45780635f2e2b45146102e35780636366b9361461033d57806370a082311461037457806395d89b41146103c1578063a0712d6814610450578063a9059cbb14610473578063d8ccd0f3146104cd578063dd62ed3e14610508575b600080fd5b34156100de57600080fd5b6100e6610574565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101275780820151818401525b60208101905061010b565b50505050905090810190601f1680156101545780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016d57600080fd5b6101a2600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506105ad565b6040518082815260200191505060405180910390f35b34156101c357600080fd5b6101f8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610734565b604051808215151515815260200191505060405180910390f35b341561021d57600080fd5b6102256108c8565b6040518082815260200191505060405180910390f35b341561024657600080fd5b61029a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108d7565b604051808215151515815260200191505060405180910390f35b34156102bf57600080fd5b6102c7610a1a565b604051808260ff1660ff16815260200191505060405180910390f35b34156102ee57600080fd5b610323600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a1f565b604051808215151515815260200191505060405180910390f35b341561034857600080fd5b61035e6004808035906020019091905050610bb1565b6040518082815260200191505060405180910390f35b341561037f57600080fd5b6103ab600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c59565b6040518082815260200191505060405180910390f35b34156103cc57600080fd5b6103d4610ca2565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104155780820151818401525b6020810190506103f9565b50505050905090810190601f1680156104425780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561045b57600080fd5b6104716004808035906020019091905050610cdb565b005b341561047e57600080fd5b6104b3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d61565b604051808215151515815260200191505060405180910390f35b34156104d857600080fd5b6104ee6004808035906020019091905050610d7c565b604051808215151515815260200191505060405180910390f35b341561051357600080fd5b61055e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e2a565b6040518082815260200191505060405180910390f35b6040805190810160405280600b81526020017f476173746f6b656e2e696f00000000000000000000000000000000000000000081525081565b60008060008060003393506000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054925082861115610605578295505b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115610693578095505b61069c86610eb2565b8583036000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581038260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508594505b5050505092915050565b600080339050600083141580156107c857506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156107d657600091506108c1565b82600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505b5092915050565b60006003546002540390505b90565b600080339050600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311158015610970575061096f858585610f22565b5b15610a085782600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555060019150610a12565b60009150610a12565b5b509392505050565b600281565b60008060008060003393506000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054925082861115610a7c5760009450610ba7565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115610b0f5760009450610ba7565b610b1886610eb2565b8583036000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581038260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600194505b5050505092915050565b6000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610c01578092505b610c0a83610eb2565b8281036000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508291505b50919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6040805190810160405280600481526020017f475354320000000000000000000000000000000000000000000000000000000081525081565b60008090505b81811015610d0057610cf1611082565b505b8080600101915050610ce1565b81600260008282540192505081905550816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b5050565b600080339050610d72818585610f22565b91505b5092915050565b6000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610dd15760009150610e24565b610dda83610eb2565b8281036000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600191505b50919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b60008060035491506001820190505b82820181111515610f1357610ed630826110b9565b73ffffffffffffffffffffffffffffffffffffffff1660405160006040518083038160008661646e5a03f1915050505b8080600101915050610ec1565b8282016003819055505b505050565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151561107157816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905061107b565b6000905061107b565b5b9392505050565b60006040517e756eb3f879cb30fe243b4dfee438691c043318585733ff6000526016600af38152601f600182016000f09150505b90565b60008060008060008068ffffffffffffffffff87111515156110da57600080fd5b8660001080156110ea5750608087105b156110fc57600194506001935061110e565b611105876111fe565b94506001850193505b8360146001010192506a01000000000000000000008873ffffffffffffffffffffffffffffffffffffffff16027e010000000000000000000000000000000000000000000000000000000000006014608001027f01000000000000000000000000000000000000000000000000000000000000008560c001020101915086600010801561119b5750608087105b156111b65769010000000000000000008702820191506111d9565b6901000000000000000000856080010282019150846009036101000a8702820191505b604051602081016040528281526001840181209150508095505b505050505092915050565b6000806000809150600190505b8084101515611226576001820191506101008102905061120b565b8192505b50509190505600a165627a7a72305820b86bb85a6e7dcfc4473f394716365fd772c0511b80fdd7833b2966335f3a07b20029"
}