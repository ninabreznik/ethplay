{
  "address": "0xc2b90b794acee2da11f17d7995a017e230be204a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SunRich",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-26\n*/\n\npragma solidity ^0.5.1;\n\ncontract Ownable {\n    address payable public owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    address payable public newOwner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address payable otherOwner) onlyOwner public {\n        require(otherOwner != address(0));\n        newOwner = otherOwner;\n    }\n\n    function approveOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n}\n\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address payable to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address payable from, address payable to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract SunRichConfig is Ownable {\n    mapping(string => uint256) private data;\n\n    function set(string memory _key, uint256 _value) onlyOwner public {\n        data[_key] = _value;\n    }\n\n    function get(string memory _key) public view returns (uint256 _value){\n        return data[_key];\n    }\n\n    constructor() public {\n        // Fees (in percent x100)\n        set('fee.a2a_sender',   200); // 2.00\n        set('fee.a2a_receiver', 0);\n        set('fee.a2b_sender',   0);\n        set('fee.a2b_receiver', 200); // 2.00\n        set('fee.b2a_sender',   200); // 2.00\n        set('fee.b2a_receiver', 0);\n        set('fee.b2b_sender',   200); // 2.00\n        set('fee.b2b_receiver', 200); // 2.00\n\n        // Address for fee collection\n        set('fee.collector', uint256(msg.sender));\n\n        // Address for token issuer\n        set('eth.issuer', uint256(msg.sender));\n\n        // ETH topup enabled\n        set('eth.topup', 1);\n        // Minimum balance in finney for auto topup\n        set('eth.minBalance', 5);\n    }\n}\n\ncontract SunRichAccounts is Ownable {\n    using SafeMath for uint256;\n\n    uint256 totalSupply;\n\n    mapping(address => uint256) balances;\n    mapping(address => bool) systemAccounts;\n    mapping(address => bool) businessAccounts;\n    mapping(address => uint256) premiumAccounts;\n    mapping (address => mapping (address => uint256)) internal allowed;\n    mapping(address => bool) frozen;\n\n    SunRichController ctrl;\n\n    modifier onlyController {\n        require(msg.sender == address(ctrl));\n        _;\n    }\n \n    function setController(address payable _ctrl) public onlyOwner {\n        ctrl = SunRichController(_ctrl);\n    }\n\n    function getBalance(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    function addTo(address _to, uint256 _value) public onlyController returns (uint256) {\n        require(_to != address(0));\n        balances[_to] = balances[_to].add(_value);\n        return balances[_to];\n    }\n\n    function subFrom(address _from, uint256 _value) public onlyController returns (uint256) {\n        require(_value <= balances[_from]);\n        balances[_from] = balances[_from].sub(_value);\n        return balances[_from];\n    }\n\n    function getAllowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function addAllowance(address _owner, address _spender, uint256 _value) public onlyController returns (uint256) {\n        allowed[_owner][_spender] = allowed[_owner][_spender].add(_value);\n        return allowed[_owner][_spender];\n    }\n\n    function subAllowance(address _owner, address _spender, uint256 _value) public onlyController returns (uint256) {\n        require(_value <= allowed[_owner][_spender]);\n        allowed[_owner][_spender] = allowed[_owner][_spender].sub(_value);\n        return allowed[_owner][_spender];\n    }\n\n    function getTotalSupply() public view returns (uint256) {\n        return totalSupply;\n    }\n\n    function addTotalSupply(uint256 _value) public onlyController returns (uint256) {\n        totalSupply = totalSupply.add(_value);\n        return totalSupply;\n    }\n\n    function subTotalSupply(uint256 _value) public onlyController returns (uint256) {\n        totalSupply = totalSupply.sub(_value);\n        return totalSupply;\n    }\n\n    function setBusiness(address _owner, bool _value) public onlyController {\n        businessAccounts[_owner] = _value;\n    }\n\n    function isBusiness(address _owner) public view returns (bool) {\n        return businessAccounts[_owner];\n    }\n\n    function setSystem(address _owner, bool _value) public onlyController {\n        systemAccounts[_owner] = _value;\n    }\n\n    function isSystem(address _owner) public view returns (bool) {\n        return systemAccounts[_owner];\n    }\n\n    function setPremium(address _owner, uint256 _value) public onlyController {\n        premiumAccounts[_owner] = _value;\n    }\n\n    function isPremium(address _owner) public view returns (bool) {\n        return (premiumAccounts[_owner] >= now);\n    }\n}\n\ncontract SunRichController is Pausable {\n    using SafeMath for uint256;\n\n    SunRich master;\n    SunRichConfig config;\n    SunRichAccounts accounts;\n\n    // Can receive ether\n    function() external payable {\n    }\n\n    modifier onlyMaster {\n        require(msg.sender == address(master));\n        _;\n    }\n\n    function setMaster(address _master) public onlyOwner {\n        if(_master == address(0x0)){\n            owner.transfer(address(this).balance);\n        }\n        master = SunRich(_master);\n    }\n\n    function setConfig(address _config) public onlyOwner {\n        config = SunRichConfig(_config);\n    }\n\n    function setAccounts(address _accounts) public onlyOwner {\n        accounts = SunRichAccounts(_accounts);\n    }\n\n    function totalSupply() public view onlyMaster returns (uint256) {\n        return accounts.getTotalSupply();\n    }\n\n    function balanceOf(address _owner) public view onlyMaster returns (uint256 balance) {\n        return accounts.getBalance(_owner);\n    }\n\n    function allowance(address _owner, address _spender) public view onlyMaster returns (uint256 remaining) {\n        return accounts.getAllowance(_owner, _spender);\n    }\n\n    function approve(address _owner, address _spender, uint256 _value) public onlyMaster whenNotPaused returns (bool) {\n        accounts.addAllowance(_owner, _spender, _value);\n        master.emitApproval(_owner, _spender, _value);\n        return true;\n    }\n\n    function transferWithSender(address payable _from, address payable _to, uint256 _value) public onlyMaster whenNotPaused returns (bool) {\n        if(_from == address(config.get('eth.issuer'))){\n            _issue(_to, _value);\n        } else {\n            if((_from != owner) && (_to != owner)){\n                _value = _transferFee(_from, _to, _value);\n            }\n\n            _transfer(_from, _to, _value);\n            master.emitTransfer(_from, _to, _value);\n\n            _topup(_from);\n            _topup(_to);\n        }\n\n        return true;\n    }\n\n    function transferFrom(address payable _from, address payable _to, uint256 _value) public onlyMaster whenNotPaused returns (bool) {\n        if((_from != owner) && (_to != owner)){\n            _value = _transferFee(_from, _to, _value);\n        }\n\n        _transfer(_from, _to, _value);\n        master.emitTransfer(_from, _to, _value);\n\n        accounts.subAllowance(_from, _to, _value);\n\n        _topup(_from);\n        _topup(_to);\n\n        return true;\n    }\n\n    function setBusinessAccount(address _sender, address _owner, bool _value) public onlyMaster whenNotPaused {\n        require(accounts.isSystem(_sender));\n        accounts.setBusiness(_owner, _value);\n    }\n\n    function setSystemAccount(address _owner, bool _value) public onlyOwner {\n        accounts.setSystem(_owner, _value);\n    }\n\n    function setPremiumAccount(address _owner, uint256 _value) public onlyOwner {\n        accounts.setPremium(_owner, _value);\n    }\n\n    function _transfer(address _from, address _to, uint256 _value) internal {\n        accounts.subFrom(_from, _value);\n        accounts.addTo(_to, _value);\n    }\n\n    /**\n     * Fee collection logic goes here\n     */\n    function _transferFee(address _from, address _to, uint256 _value) internal returns (uint256){\n        uint256 feeSender = 0;\n        uint256 feeReceiver = 0;\n\n        if (!accounts.isBusiness(_from) && !accounts.isBusiness(_to)) {\n            feeSender = config.get('fee.a2a_sender');\n            feeReceiver = config.get('fee.a2a_receiver');\n        }\n        if (!accounts.isBusiness(_from) && accounts.isBusiness(_to)) {\n            feeSender = config.get('fee.a2b_sender');\n            feeReceiver = config.get('fee.a2b_receiver');\n        }\n        if (accounts.isBusiness(_from) && !accounts.isBusiness(_to)) {\n            feeSender = config.get('fee.b2a_sender');\n            feeReceiver = config.get('fee.b2a_receiver');\n        }\n        if (accounts.isBusiness(_from) && accounts.isBusiness(_to)) {\n            feeSender = config.get('fee.b2b_sender');\n            feeReceiver = config.get('fee.b2b_receiver');\n        }\n        if(accounts.isPremium(_from)){\n            feeSender = 0;\n        }\n        if(accounts.isPremium(_to)){\n            feeReceiver = 0;\n        }\n        if(accounts.isSystem(_from) || accounts.isSystem(_to)){\n            feeSender = 0;\n            feeReceiver = 0;\n        }\n\n        address feeCollector = address(config.get('fee.collector'));\n        address feeSpender = _from;\n        uint256 feeValue = 0;\n        if(feeSender > 0){\n            feeValue = _value.mul(feeSender).div(10000);\n            if(feeValue > 0) {\n                _transfer(feeSpender, feeCollector, feeValue);\n                master.emitTransfer(feeSpender, feeCollector, feeValue);\n            }\n        }\n        if(feeReceiver > 0){\n            feeValue = _value.mul(feeReceiver).div(10000);\n            if(feeValue > 0) {\n                _value = _value.sub(feeValue);\n                feeSpender = _to;\n                _transfer(feeSpender, feeCollector, feeValue);\n                master.emitTransfer(feeSpender, feeCollector, feeValue);\n            }\n        }\n        return _value;\n    }\n\n    function _topup(address payable _address) internal {\n        uint256 topupEnabled = config.get('eth.topup');\n        if(topupEnabled > 0){\n            uint256 minBalance = config.get('eth.minBalance') * 1 finney;\n            if(address(this).balance > minBalance){\n                if(_address.balance < minBalance){\n                    _address.transfer(minBalance.sub(_address.balance));\n                }\n            }\n        }\n    }\n\n    function _issue(address payable _to, uint256 _value) internal returns (bool) {\n        accounts.addTo(_to, _value);\n        accounts.addTotalSupply(_value);\n        master.emitTransfer(address(0x0), _to, _value);\n        _topup(_to);\n        return true;\n    }\n\n    /**\n     * OWNER METHODS\n     */\n    function issue(address payable _to, uint256 _value) public onlyOwner returns (bool) {\n        return _issue(_to, _value);\n    }\n\n    function burn(address _from, uint256 _value) public onlyOwner returns (bool) {\n        accounts.subFrom(_from, _value);\n        accounts.subTotalSupply(_value);\n        // todo: emitBurn\n        return true;\n    }\n\n    function ownerTransferFrom(address _from, address _to, uint256 _value) public onlyOwner returns (bool) {\n        accounts.addTo(_to, _value);\n        accounts.subFrom(_from, _value);\n        master.emitTransfer(_from, _to, _value);\n        return true;\n    }\n}\n\ncontract SunRich is ERC20, Ownable {\n    string public constant version = \"0.4\";\n    string public name = \"Sunrich (RUB)\";\n    string public symbol = \"SRT(R)\";\n    uint256 public constant decimals = 2;\n\n    SunRichController public ctrl;\n\n    modifier onlyController {\n        require(msg.sender == address(ctrl));\n        _;\n    }\n\n    constructor() public {\n    }\n\n    function updateName(string memory _name) public onlyOwner {\n        name = _name;\n    }\n    \n    function updateSymbol(string memory _symbol) public onlyOwner {\n        symbol = _symbol;\n    }\n\n    function setController(address payable _ctrl) public onlyOwner {\n        ctrl = SunRichController(_ctrl);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return ctrl.totalSupply();\n    }\n\n    function balanceOf(address _who) public view returns (uint256) {\n        return ctrl.balanceOf(_who);\n    }\n\n    function transfer(address payable _to, uint256 _value) public returns (bool) {\n        return ctrl.transferWithSender(msg.sender, _to, _value);\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return ctrl.allowance(_owner, _spender);\n    }\n\n    function transferFrom(address payable _from, address payable _to, uint256 _value) public returns (bool) {\n        return ctrl.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        return ctrl.approve(msg.sender, _spender, _value);\n    }\n\n    function emitTransfer(address _from, address _to, uint256 _value) public onlyController {\n        emit Transfer(_from, _to, _value);\n    }\n\n    function emitApproval(address _owner, address _spender, uint256 _value) public onlyController {\n        emit Approval(_owner, _spender, _value);\n    }\n\n    function setBusinessAccount(address _owner, bool _value) public {\n        ctrl.setBusinessAccount(msg.sender, _owner, _value);\n    }\n}",
  "bytecode": "60806040526040805190810160405280600d81526020017f53756e72696368202852554229000000000000000000000000000000000000008152506002908051906020019062000051929190620000f4565b506040805190810160405280600681526020017f5352542852290000000000000000000000000000000000000000000000000000815250600390805190602001906200009f929190620000f4565b50348015620000ad57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001a3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200013757805160ff191683800117855562000168565b8280016001018555821562000168579182015b82811115620001675782518255916020019190600101906200014a565b5b5090506200017791906200017b565b5090565b620001a091905b808211156200019c57600081600090555060010162000182565b5090565b90565b611a3e80620001b36000396000f3fe608060405260043610610117576000357c01000000000000000000000000000000000000000000000000000000009004806306fdde031461011c578063095ea7b3146101ac57806318160ddd1461021f57806323b872dd1461024a57806323de6651146102dd578063313ce5671461035857806342f37c7514610383578063537f5312146103da57806354fd4d50146104a25780635687f2b81461053257806370a08231146105ad578063742c81e41461061257806374c045c11461062957806384da92a7146106865780638da5cb5b1461074e57806392eefe9b146107a557806395d89b41146107f6578063a9059cbb14610886578063d4ee1d90146108f9578063dd62ed3e14610950578063f2fde38b146109d5575b600080fd5b34801561012857600080fd5b50610131610a26565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610171578082015181840152602081019050610156565b50505050905090810190601f16801561019e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b857600080fd5b50610205600480360360408110156101cf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ac4565b604051808215151515815260200191505060405180910390f35b34801561022b57600080fd5b50610234610c02565b6040518082815260200191505060405180910390f35b34801561025657600080fd5b506102c36004803603606081101561026d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cc8565b604051808215151515815260200191505060405180910390f35b3480156102e957600080fd5b506103566004803603606081101561030057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e07565b005b34801561036457600080fd5b5061036d610ecd565b6040518082815260200191505060405180910390f35b34801561038f57600080fd5b50610398610ed2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103e657600080fd5b506104a0600480360360208110156103fd57600080fd5b810190808035906020019064010000000081111561041a57600080fd5b82018360208201111561042c57600080fd5b8035906020019184600183028401116401000000008311171561044e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610ef8565b005b3480156104ae57600080fd5b506104b7610f6d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104f75780820151818401526020810190506104dc565b50505050905090810190601f1680156105245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561053e57600080fd5b506105ab6004803603606081101561055557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fa6565b005b3480156105b957600080fd5b506105fc600480360360208110156105d057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061106c565b6040518082815260200191505060405180910390f35b34801561061e57600080fd5b5061062761116b565b005b34801561063557600080fd5b506106846004803603604081101561064c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919050505061130a565b005b34801561069257600080fd5b5061074c600480360360208110156106a957600080fd5b81019080803590602001906401000000008111156106c657600080fd5b8201836020820111156106d857600080fd5b803590602001918460018302840111640100000000831117156106fa57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611423565b005b34801561075a57600080fd5b50610763611498565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107b157600080fd5b506107f4600480360360208110156107c857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114bd565b005b34801561080257600080fd5b5061080b61155c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561084b578082015181840152602081019050610830565b50505050905090810190601f1680156108785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561089257600080fd5b506108df600480360360408110156108a957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115fa565b604051808215151515815260200191505060405180910390f35b34801561090557600080fd5b5061090e611738565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561095c57600080fd5b506109bf6004803603604081101561097357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061175e565b6040518082815260200191505060405180910390f35b3480156109e157600080fd5b50610a24600480360360208110156109f857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611892565b005b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610abc5780601f10610a9157610100808354040283529160200191610abc565b820191906000526020600020905b815481529060010190602001808311610a9f57829003601f168201915b505050505081565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e1f21c673385856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610bbf57600080fd5b505af1158015610bd3573d6000803e3d6000fd5b505050506040513d6020811015610be957600080fd5b8101908080519060200190929190505050905092915050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610c8857600080fd5b505afa158015610c9c573d6000803e3d6000fd5b505050506040513d6020811015610cb257600080fd5b8101908080519060200190929190505050905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610dc357600080fd5b505af1158015610dd7573d6000803e3d6000fd5b505050506040513d6020811015610ded57600080fd5b810190808051906020019092919050505090509392505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e6357600080fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600281565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f5357600080fd5b8060039080519060200190610f6992919061196d565b5050565b6040805190810160405280600381526020017f302e34000000000000000000000000000000000000000000000000000000000081525081565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561100257600080fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561112957600080fd5b505afa15801561113d573d6000803e3d6000fd5b505050506040513d602081101561115357600080fd5b81019080805190602001909291905050509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111c757600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f93799e3384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019350505050600060405180830381600087803b15801561140757600080fd5b505af115801561141b573d6000803e3d6000fd5b505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561147e57600080fd5b806002908051906020019061149492919061196d565b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561151857600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115f25780601f106115c7576101008083540402835291602001916115f2565b820191906000526020600020905b8154815290600101906020018083116115d557829003601f168201915b505050505081565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dfe0f0ca3385856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156116f557600080fd5b505af1158015611709573d6000803e3d6000fd5b505050506040513d602081101561171f57600080fd5b8101908080519060200190929190505050905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561184f57600080fd5b505afa158015611863573d6000803e3d6000fd5b505050506040513d602081101561187957600080fd5b8101908080519060200190929190505050905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118ed57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561192957600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106119ae57805160ff19168380011785556119dc565b828001600101855582156119dc579182015b828111156119db5782518255916020019190600101906119c0565b5b5090506119e991906119ed565b5090565b611a0f91905b80821115611a0b5760008160009055506001016119f3565b5090565b9056fea165627a7a72305820abf9fd0ba9a3dea69c0704b09020b4050143ebd58417113bb7d2670d38346e3c0029"
}