{
  "address": "0x747c6443268e117ac642effe1def8dd0e466be97",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DSG_CoinFlipper",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-05\n*/\n\npragma solidity ^0.4.25;\n\ninterface DSG {\n    function gamingDividendsReception() payable external;\n}\n\ncontract DSG_CoinFlipper{\n    using SafeMath for uint256;\n    \n    address constant public DSG_ADDRESS = 0x696826C18A6Bc9Be4BBfe3c3A6BB9f5a69388687;\n    uint256 public totalDividends;\n    uint256 public totalWinnings;\n    uint256 public totalTurnover;\n    uint256 public totalPlayed;\n    uint256 public maxBet;\n    uint256 public minBet;\n    uint256 public minContractBalance;\n    uint256 public minBetForJackpot;\n    uint256 public jackpotBalance;\n    uint256 public nextPayout;\n    uint256 public ownerDeposit;\n    address[2] public owners;\n    address[2] public candidates;\n    bool public paused;\n    \n    mapping (address => Bet) private usersBets;\n    \n    struct Bet {\n        uint256 blockNumber;\n        uint8 coin;\n        uint256 bet;\n    }\n    \n    modifier onlyOwners() {\n        require(msg.sender == owners[0] || msg.sender == owners[1]);\n        _;\n    }\n    modifier onlyUsers(){\n        require(tx.origin == msg.sender);\n        _;\n    }\n    modifier checkBlockNumber(){\n        uint256 blockNumber = usersBets[msg.sender].blockNumber;\n        if(block.number.sub(blockNumber) >= 250 && blockNumber > 0){\n            emit Result(msg.sender, 0, 1200, 0, jackpotBalance, 0, usersBets[msg.sender].bet);\n            delete usersBets[msg.sender];\n        }\n        else{\n            _;\n        }\n    }\n    constructor(address secondOwner) public payable{\n        owners[0]   = msg.sender;\n        owners[1]   = secondOwner;\n        ownerDeposit   = msg.value;\n        jackpotBalance = jackpotBalance.add(ownerDeposit.div(1000));\n    }\n    function play(uint8 coin) public payable checkBlockNumber{\n        uint256 bet = msg.value;\n        require(getContractBalance() > bet.add(bet).add(jackpotBalance), \"Not enough ETH in contract\");\n        require(bet >= minBet && bet <= maxBet, \"Amount should be within range\");\n        require(usersBets[msg.sender].bet == 0, \"You have already bet\");\n        require(coin == 0 || coin == 1, \"Coin side is incorrect\");\n        require(paused == false, \"Game was stopped\");\n        usersBets[msg.sender].bet = bet;\n        usersBets[msg.sender].blockNumber = block.number;\n        usersBets[msg.sender].coin = coin;\n        totalTurnover = totalTurnover.add(bet);\n        totalPlayed = totalPlayed.add(1);\n        emit PlaceBet(msg.sender, bet, coin, now);\n    }\n    function result() public checkBlockNumber{\n        require(blockhash(usersBets[msg.sender].blockNumber) != 0, \"Your time to determine the result has come out or not yet come\");\n        uint256 bet = usersBets[msg.sender].bet;\n        uint8   coin = usersBets[msg.sender].coin;\n        uint256 totalWinAmount;\n        uint256 winRate    = getWinningRate(bet);\n        uint256 r = _random(1200);\n        if(((r > 0 && r < 200) || (r > 400 && r < 600) || (r > 800 && r < 1000)) && coin == 1){\n            totalWinAmount = totalWinAmount.add(bet.mul(winRate).div(100));\n            jackpotBalance = jackpotBalance.add(bet.div(1000));\n        }\n        if(((r > 200 && r < 400) || (r > 600 && r < 800) || (r > 1000 && r < 1200)) && coin == 0){\n            totalWinAmount = totalWinAmount.add(bet.mul(winRate).div(100));\n            jackpotBalance = jackpotBalance.add(bet.div(1000));\n        }\n        if(bet >= minBetForJackpot && r == 0 && jackpotBalance > 0){\n            totalWinAmount = totalWinAmount.add(jackpotBalance).add(bet);\n            delete jackpotBalance;\n        }\n        if(totalWinAmount > 0){\n            msg.sender.transfer(totalWinAmount);\n            totalWinnings = totalWinnings.add(totalWinAmount);\n        }\n        delete usersBets[msg.sender];\n        emit Result(msg.sender, coin, r, totalWinAmount, jackpotBalance, winRate, bet);\n    }\n    function sendDividends() public {\n        require(getContractBalance() > minContractBalance && now > nextPayout, \"You cannot send dividends\");\n        DSG DSG0 = DSG(DSG_ADDRESS);\n        uint256 balance = getContractBalance();\n        uint256 dividends = balance.sub(minContractBalance);\n        nextPayout = now.add(7 days);\n        totalDividends = totalDividends.add(dividends);\n        DSG0.gamingDividendsReception.value(dividends)();\n        emit Dividends(balance, dividends, now);\n    }\n    function getWinningRate(uint256 eth) public view returns(uint8){\n        uint256 x = maxBet.sub(minBet).div(4);\n        if(eth >= minBet && eth <= minBet.add(x)){\n            return 194;\n        }\n        else if(eth >= minBet.add(x.mul(1)) && eth <= minBet.add(x.mul(2))){\n            return 195;\n        }\n        else if(eth >= minBet.add(x.mul(2)) && eth <= minBet.add(x.mul(3))){\n            return 196;\n        }\n        else if(eth >= minBet.add(x.mul(3)) && eth <= minBet.add(x.mul(4))){\n            return 197;\n        }\n        else{\n            return 194;\n        }\n    }\n    function getContractBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n    function _random(uint256 max) private view returns(uint256){\n        bytes32 hash = blockhash(usersBets[msg.sender].blockNumber);\n        return uint256(keccak256(abi.encode(hash, msg.sender))) % max;\n    }\n    function deposit() public payable onlyOwners{\n        ownerDeposit = ownerDeposit.add(msg.value);\n        jackpotBalance = jackpotBalance.add(msg.value.div(100));\n    }\n    function sendOwnerDeposit(address recipient) public onlyOwners{\n        require(paused == true, 'Game was not stopped');\n        uint256 contractBalance = getContractBalance();\n        if(contractBalance >= ownerDeposit){\n            recipient.transfer(ownerDeposit);\n        }\n        else{\n            recipient.transfer(contractBalance);\n        }\n        delete jackpotBalance;\n        delete ownerDeposit;\n    }\n    function pauseGame(bool option) public onlyOwners{\n        paused = option;\n    }\n    function setMinBet(uint256 eth) public onlyOwners{\n        minBet = eth;\n    }\n    function setMaxBet(uint256 eth) public onlyOwners{\n        maxBet = eth;\n    }\n    function setMinBetForJackpot(uint256 eth) public onlyOwners{\n        minBetForJackpot = eth;\n    }\n    function setMinContractBalance(uint256 eth) public onlyOwners{\n        minContractBalance = eth;\n    }\n    function transferOwnership(address newOwnerAddress, uint8 k) public onlyOwners {\n        candidates[k] = newOwnerAddress;\n    }\n    function confirmOwner(uint8 k) public {\n        require(msg.sender == candidates[k]);\n        owners[k] = candidates[k];\n    }\n    event Dividends(\n        uint256 balance,\n        uint256 dividends,\n        uint256 timestamp\n    );\n    event Jackpot(\n        address indexed player,\n        uint256 jackpot,\n        uint256 timestamp\n    );\n    event PlaceBet(\n        address indexed player,\n        uint256 bet,\n        uint256 coin,\n        uint256 timestamp\n    );\n    event Result(\n        address indexed player,\n        uint256 indexed coin,\n        uint256 indexed random,\n        uint256 totalWinAmount,\n        uint256 jackpotBalance,\n        uint256 winRate,\n        uint256 bet\n    );\n}\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {  return 0; }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"setMinContractBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"setMinBetForJackpot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"getWinningRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBetForJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidates\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"option\",\"type\":\"bool\"}],\"name\":\"pauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coin\",\"type\":\"uint8\"}],\"name\":\"play\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTurnover\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"result\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwnerAddress\",\"type\":\"address\"},{\"name\":\"k\",\"type\":\"uint8\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sendOwnerDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"setMaxBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"setMinBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPlayed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWinnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DSG_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"k\",\"type\":\"uint8\"}],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"secondOwner\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dividends\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Dividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"jackpot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Jackpot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"coin\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PlaceBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"coin\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"random\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalWinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackpotBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"}],\"name\":\"Result\",\"type\":\"event\"}]",
  "bytecode": "60806040526040516020806114e08339810160405251600b805433600160a060020a031991821617909155600c8054909116600160a060020a03831617905534600a81905561007790610061906103e864010000000061008081026112d81704565b600854906401000000006112fb6100a382021704565b600855506100bc565b60008080831161008f57600080fd5b828481151561009a57fe5b04949350505050565b6000828201838110156100b557600080fd5b9392505050565b611415806100cb6000396000f3006080604052600436106101745763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663025e7c278114610179578063040da8f4146101ad5780630d9332e2146101d45780631ec8d4ef146101ee5780632228c895146102065780632e5b21681461023457806330b1b62c146102495780633477ee2e1461025e5780634f53126a1461027657806353a04b05146102905780635c975abb1461029e578063618e9f7c146102c757806365372147146102dc57806369d54554146102f15780636c9740c1146103065780636f9fb98a1461032d5780637b1aa45f146103425780637f55d0d2146103575780638608e58b1461036c578063881eff1e1461038d57806388ea41b9146103a55780639619367d146103bd578063997664d7146103d2578063a06594d3146103e7578063a8fc32de146103fc578063b72481f814610411578063c1e1e5a914610426578063d0e30db01461043b578063fb48625014610443575b600080fd5b34801561018557600080fd5b5061019160043561045e565b60408051600160a060020a039092168252519081900360200190f35b3480156101b957600080fd5b506101c261047b565b60408051918252519081900360200190f35b3480156101e057600080fd5b506101ec600435610481565b005b3480156101fa57600080fd5b506101ec6004356104ba565b34801561021257600080fd5b5061021e6004356104f3565b6040805160ff9092168252519081900360200190f35b34801561024057600080fd5b506101c2610638565b34801561025557600080fd5b506101c261063e565b34801561026a57600080fd5b50610191600435610644565b34801561028257600080fd5b506101ec6004351515610651565b6101ec60ff60043516610698565b3480156102aa57600080fd5b506102b3610a0f565b604080519115158252519081900360200190f35b3480156102d357600080fd5b506101c2610a18565b3480156102e857600080fd5b506101ec610a1e565b3480156102fd57600080fd5b506101c2610ded565b34801561031257600080fd5b506101ec600160a060020a036004351660ff60243516610df3565b34801561033957600080fd5b506101c2610e68565b34801561034e57600080fd5b506101c2610e6d565b34801561036357600080fd5b506101c2610e73565b34801561037857600080fd5b506101ec600160a060020a0360043516610e79565b34801561039957600080fd5b506101ec600435610fa4565b3480156103b157600080fd5b506101ec600435610fdd565b3480156103c957600080fd5b506101c2611016565b3480156103de57600080fd5b506101c261101c565b3480156103f357600080fd5b506101c2611022565b34801561040857600080fd5b506101ec611028565b34801561041d57600080fd5b506101c26111b9565b34801561043257600080fd5b506101916111bf565b6101ec6111d7565b34801561044f57600080fd5b506101ec60ff6004351661123a565b600b816002811061046b57fe5b0154600160a060020a0316905081565b60085481565b600b60000154600160a060020a03163314806104aa5750600b60010154600160a060020a031633145b15156104b557600080fd5b600655565b600b60000154600160a060020a03163314806104e35750600b60010154600160a060020a031633145b15156104ee57600080fd5b600755565b60008061051e60046105126005546004546112ba90919063ffffffff16565b9063ffffffff6112d816565b905060055483101580156105445750600554610540908263ffffffff6112fb16565b8311155b156105525760c29150610632565b61057561056682600163ffffffff61131416565b6005549063ffffffff6112fb16565b8310158015610597575061059361056682600263ffffffff61131416565b8311155b156105a55760c39150610632565b6105b961056682600263ffffffff61131416565b83101580156105db57506105d761056682600363ffffffff61131416565b8311155b156105e95760c49150610632565b6105fd61056682600363ffffffff61131416565b831015801561061f575061061b61056682600463ffffffff61131416565b8311155b1561062d5760c59150610632565b60c291505b50919050565b60045481565b60075481565b600d816002811061046b57fe5b600b60000154600160a060020a031633148061067a5750600b60010154600160a060020a031633145b151561068557600080fd5b600f805460ff1916911515919091179055565b3360009081526010602052604081205460fa6106ba438363ffffffff6112ba16565b101580156106c85750600081115b1561075b5760085433600081815260106020908152604080832060020154815184815292830195909552818101839052606082019490945292516104b0939192917f292f7e37dc50d63166ad77ad33d7408c336206f414c55a45602ddd1c2c234a51919081900360800190a433600090815260106020526040812081815560018101805460ff1916905560020155610a0a565b60085434925061078190610775848063ffffffff6112fb16565b9063ffffffff6112fb16565b610789610e68565b116107de576040805160e560020a62461bcd02815260206004820152601a60248201527f4e6f7420656e6f7567682045544820696e20636f6e7472616374000000000000604482015290519081900360640190fd5b60055482101580156107f257506004548211155b1515610848576040805160e560020a62461bcd02815260206004820152601d60248201527f416d6f756e742073686f756c642062652077697468696e2072616e6765000000604482015290519081900360640190fd5b33600090815260106020526040902060020154156108b0576040805160e560020a62461bcd02815260206004820152601460248201527f596f75206861766520616c726561647920626574000000000000000000000000604482015290519081900360640190fd5b60ff831615806108c357508260ff166001145b1515610919576040805160e560020a62461bcd02815260206004820152601660248201527f436f696e207369646520697320696e636f727265637400000000000000000000604482015290519081900360640190fd5b600f5460ff1615610974576040805160e560020a62461bcd02815260206004820152601060248201527f47616d65207761732073746f7070656400000000000000000000000000000000604482015290519081900360640190fd5b33600090815260106020526040902060028082018490554382556001909101805460ff191660ff8616179055546109ab90836112fb565b6002556003546109c290600163ffffffff6112fb16565b6003556040805183815260ff851660208201524281830152905133917f62e36d9623f0e28977755e3a539c09d94432b633419cd6b0ea789b4fbc23eade919081900360600190a25b505050565b600f5460ff1681565b60025481565b33600090815260106020526040812054819081908190819060fa610a48438363ffffffff6112ba16565b10158015610a565750600081115b15610ae95760085433600081815260106020908152604080832060020154815184815292830195909552818101839052606082019490945292516104b0939192917f292f7e37dc50d63166ad77ad33d7408c336206f414c55a45602ddd1c2c234a51919081900360800190a433600090815260106020526040812081815560018101805460ff1916905560020155610de5565b33600090815260106020526040902054401515610b76576040805160e560020a62461bcd02815260206004820152603e60248201527f596f75722074696d6520746f2064657465726d696e652074686520726573756c60448201527f742068617320636f6d65206f7574206f72206e6f742079657420636f6d650000606482015290519081900360840190fd5b336000908152601060205260409020600281015460019091015490965060ff169450610ba1866104f3565b60ff169250610bb16104b0611342565b9150600082118015610bc3575060c882105b80610bdb575061019082118015610bdb575061025882105b80610bf3575061032082118015610bf357506103e882105b8015610c0257508460ff166001145b15610c5657610c2c610c1f6064610512898763ffffffff61131416565b859063ffffffff6112fb16565b9350610c52610c43876103e863ffffffff6112d816565b6008549063ffffffff6112fb16565b6008555b60c882118015610c67575061019082105b80610c7f575061025882118015610c7f575061032082105b80610c9757506103e882118015610c9757506104b082105b8015610ca4575060ff8516155b15610cdc57610cc1610c1f6064610512898763ffffffff61131416565b9350610cd8610c43876103e863ffffffff6112d816565b6008555b6007548610158015610cec575081155b8015610cfa57506000600854115b15610d2057610d1886610775600854876112fb90919063ffffffff16565b600060085593505b6000841115610d6e57604051339085156108fc029086906000818181858888f19350505050158015610d56573d6000803e3d6000fd5b50600154610d6a908563ffffffff6112fb16565b6001555b33600081815260106020908152604080832083815560018101805460ff1916905560020192909255600854825188815291820152808201869052606081018990529051849260ff89169290917f292f7e37dc50d63166ad77ad33d7408c336206f414c55a45602ddd1c2c234a519181900360800190a45b505050505050565b60065481565b600b60000154600160a060020a0316331480610e1c5750600b60010154600160a060020a031633145b1515610e2757600080fd5b81600d60ff831660028110610e3857fe5b01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555050565b303190565b600a5481565b60095481565b6000600b810154600160a060020a0316331480610ea35750600b60010154600160a060020a031633145b1515610eae57600080fd5b600f5460ff161515600114610f0d576040805160e560020a62461bcd02815260206004820152601460248201527f47616d6520776173206e6f742073746f70706564000000000000000000000000604482015290519081900360640190fd5b610f15610e68565b600a549091508110610f5e57600a54604051600160a060020a0384169180156108fc02916000818181858888f19350505050158015610f58573d6000803e3d6000fd5b50610f96565b604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610f94573d6000803e3d6000fd5b505b505060006008819055600a55565b600b60000154600160a060020a0316331480610fcd5750600b60010154600160a060020a031633145b1515610fd857600080fd5b600455565b600b60000154600160a060020a03163314806110065750600b60010154600160a060020a031633145b151561101157600080fd5b600555565b60055481565b60005481565b60035481565b6000806000600654611038610e68565b118015611046575060095442115b151561109c576040805160e560020a62461bcd02815260206004820152601960248201527f596f752063616e6e6f742073656e64206469766964656e647300000000000000604482015290519081900360640190fd5b73696826c18a6bc9be4bbfe3c3a6bb9f5a6938868792506110bb610e68565b91506110d2600654836112ba90919063ffffffff16565b90506110e74262093a8063ffffffff6112fb16565b6009556000546110fd908263ffffffff6112fb16565b60008190555082600160a060020a0316639e0bb35e826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561115a57600080fd5b505af115801561116e573d6000803e3d6000fd5b50506040805186815260208101869052428183015290517ffac2f03c5230c97844f840b003856f39a2fc5a931281a1a4344bfc99986055e094509081900360600192509050a1505050565b60015481565b73696826c18a6bc9be4bbfe3c3a6bb9f5a6938868781565b600b60000154600160a060020a03163314806112005750600b60010154600160a060020a031633145b151561120b57600080fd5b600a5461121e903463ffffffff6112fb16565b600a55611235610c4334606463ffffffff6112d816565b600855565b600d60ff82166002811061124a57fe5b0154600160a060020a0316331461126057600080fd5b600d60ff82166002811061127057fe5b0154600160a060020a0316600b60ff83166002811061128b57fe5b01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905550565b600080838311156112ca57600080fd5b5050808203805b5092915050565b6000808083116112e757600080fd5b82848115156112f257fe5b04949350505050565b60008282018381101561130d57600080fd5b9392505050565b60008083151561132757600091506112d1565b5082820282848281151561133757fe5b041461130d57600080fd5b336000818152601060209081526040808320548151904081840181905281830195909552815180820383018152606090910191829052805193949386939192918291908401908083835b602083106113ab5780518252601f19909201916020918201910161138c565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120925050508115156113e157fe5b0693925050505600a165627a7a7230582011f001285c656cfa1cf4dbcac2ae6b9e65067cd15d477c02c19c9148786cbe680029000000000000000000000000cf768464a08cd22b698758b5fe0de6b6216a886b",
  "constructorArguments": "000000000000000000000000Cf768464A08cd22b698758B5Fe0DE6b6216a886B"
}