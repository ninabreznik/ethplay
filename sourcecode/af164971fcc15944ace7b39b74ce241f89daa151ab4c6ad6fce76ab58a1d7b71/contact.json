{
  "address": "0xed04f07af76779372061ff2be3bbfb81a338fdce",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ZeroCache",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-19\n*/\n\npragma solidity ^0.4.25;\n\n/*******************************************************************************\n *\n * Copyright (c) 2019 Decentralization Authority MDAO.\n * Released under the MIT License.\n *\n * ZeroCache - AmTrust (First Edition)\n * \n *             -----------------------------------------------------------------\n * \n *             !!! WARNING WARNING WARNING !!!\n *             !!! THIS IS HIGHLY EXPERIMENTAL SOFTWARE !!!\n *             !!! USE AT YOUR OWN RISK !!!\n *             \n *             -----------------------------------------------------------------\n *             \n *             Our team at D14na has been hard at work over the Crypto Winter;\n *             and we are very proud to announce the premier release of a still\n *             experimental, but really fun and social new way to \"Do Crypto!\"\n * \n *             TL;DR\n *             -----\n * \n *             A meta-currency / smart wallet built for the purpose of promoting \n *             and supporting the core economic needs of the Zeronet community:\n *                 1. Electronic Commerce\n *                 2. Zite Monetization\n *                 3. Wealth Management\n * \n *             ALL transactions are guaranteed by Solidty contracts managed by a \n *             growing community of federated nodes.\n * \n *             For more information, please visit: \n *             https://zerocache.info\n *\n * Version 19.4.19\n *\n * https://d14na.org\n * [emailÂ protected]\n */\n\n\n/*******************************************************************************\n *\n * SafeMath\n */\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n\n/*******************************************************************************\n *\n * ECRecovery\n *\n * Contract function to validate signature of pre-approved token transfers.\n * (borrowed from LavaWallet)\n */\ncontract ECRecovery {\n    function recover(bytes32 hash, bytes sig) public pure returns (address);\n}\n\n\n/*******************************************************************************\n *\n * ERC Token Standard #20 Interface\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n */\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n/*******************************************************************************\n *\n * ApproveAndCallFallBack\n *\n * Contract function to receive approval and execute function in one call\n * (borrowed from MiniMeToken)\n */\ncontract ApproveAndCallFallBack {\n    function approveAndCall(address spender, uint tokens, bytes data) public;\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\n\n/*******************************************************************************\n *\n * Owned contract\n */\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n\n        emit OwnershipTransferred(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0);\n    }\n}\n\n\n/*******************************************************************************\n * \n * Zer0netDb Interface\n */\ncontract Zer0netDbInterface {\n    /* Interface getters. */\n    function getAddress(bytes32 _key) external view returns (address);\n    function getBool(bytes32 _key)    external view returns (bool);\n    function getBytes(bytes32 _key)   external view returns (bytes);\n    function getInt(bytes32 _key)     external view returns (int);\n    function getString(bytes32 _key)  external view returns (string);\n    function getUint(bytes32 _key)    external view returns (uint);\n\n    /* Interface setters. */\n    function setAddress(bytes32 _key, address _value) external;\n    function setBool(bytes32 _key, bool _value) external;\n    function setBytes(bytes32 _key, bytes _value) external;\n    function setInt(bytes32 _key, int _value) external;\n    function setString(bytes32 _key, string _value) external;\n    function setUint(bytes32 _key, uint _value) external;\n\n    /* Interface deletes. */\n    function deleteAddress(bytes32 _key) external;\n    function deleteBool(bytes32 _key) external;\n    function deleteBytes(bytes32 _key) external;\n    function deleteInt(bytes32 _key) external;\n    function deleteString(bytes32 _key) external;\n    function deleteUint(bytes32 _key) external;\n}\n\n\n/*******************************************************************************\n *\n * Wrapped ETH (WETH) Interface\n */\ncontract WETHInterface {\n    function() public payable;\n    function deposit() public payable ;\n    function withdraw(uint wad) public;\n    function totalSupply() public view returns (uint);\n    function approve(address guy, uint wad) public returns (bool);\n    function transfer(address dst, uint wad) public returns (bool);\n    function transferFrom(address src, address dst, uint wad) public returns (bool);\n\n    event Approval(address indexed src, address indexed guy, uint wad);\n    event Transfer(address indexed src, address indexed dst, uint wad);\n    event Deposit(address indexed dst, uint wad);\n    event Withdrawal(address indexed src, uint wad);\n}\n\n\n/*******************************************************************************\n *\n * ERC-165 Interface\n */\ncontract ERC165 {\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n\n\n/*******************************************************************************\n *\n * ERC-1155 Interface\n */\n// TODO Add interface functions\n//      (see https://github.com/enjin/erc-1155/blob/master/contracts/IERC1155.sol)\n//      (and https://blog.enjincoin.io/erc-1155-the-crypto-item-standard-ac9cf1c5a226)\n\n\n/*******************************************************************************\n *\n * @notice ZeroCache DOES NOT HOLD ANY \"OFFICIAL\" AFFILIATION with ZeroNet Core,\n *         ZeroNet.io nor any of its brands and affiliates.\n *\n *         ZeroCache IS THE \"OFFICIAL\" META-CURRENCY OF THE GROWING COMMUNITY\n *         OF ZER0NET-SPONSORED PRODUCTS AND SERVICES.\n *\n * @dev In conjunction with the ZeroCache Daemon, this contract manages the\n *      ability to dynamically allocate the assets of a \"smart\" crypto wallet,\n *      in real-time, based on a user's pre-selected financial profile.\n *\n *      Initial support for the following cryptos:\n *          - Ethereum (WETH)   : HODL as a long-term growth investment.\n *          - MakerDAO (DAI)    : SPEDN on digital goods and services.\n *          - ZeroGold (0GOLD)  : STAEK to access premium features and services.\n */\ncontract ZeroCache is Owned {\n    using SafeMath for uint;\n\n    /* Initialize predecessor contract. */\n    address private _predecessor;\n\n    /* Initialize successor contract. */\n    address private _successor;\n    \n    /* Initialize revision number. */\n    uint private _revision;\n\n    /* Initialize Zer0net Db contract. */\n    Zer0netDbInterface private _zer0netDb;\n\n    /**\n     * Set Namespace\n     * \n     * Provides a \"unique\" name for generating \"unique\" data identifiers,\n     * most commonly used as database \"key-value\" keys.\n     * \n     * NOTE: Use of `namespace` is REQUIRED when generating ANY & ALL\n     *       Zer0netDb keys; in order to prevent ANY accidental or\n     *       malicious SQL-injection vulnerabilities / attacks.\n     */\n    string private _namespace = 'zerocache';\n\n    /* Initialize account balances. */\n    mapping(address => mapping (address => uint)) private _balances;\n\n    /* Initialize expired signature flags. */\n    mapping(bytes32 => bool) private _expiredSignatures;\n    \n    /* Initialize revision depth. */\n    // NOTE: Allows for balance and transaction aggregation\n    //       from legacy ZeroCache contract instance(s).\n    // FIXME Determine the MAXIMUM depth and set here.\n    //       Estimated to be between 100-200\n    uint private _MAX_REVISION_DEPTH = 0;\n    \n    event Deposit(\n        address indexed token, \n        address owner, \n        uint tokens,\n        bytes data\n    );\n\n    event Migrate(\n        address indexed token, \n        address owner, \n        uint tokens\n    );\n\n    event Skipped(\n        address token,\n        address sender, \n        address receiver, \n        uint tokens\n    );\n\n    event Staek(\n        address sender, \n        address staekholder, \n        uint tokens\n    );\n\n    event Transfer(\n        address indexed token, \n        address sender, \n        address receiver, \n        uint tokens\n    );\n\n    event Withdraw(\n        address indexed token, \n        address owner, \n        uint tokens\n    );\n    \n    /***************************************************************************\n     *\n     * Constructor\n     */\n    constructor() public {\n        /* Initialize Zer0netDb (eternal) storage database contract. */\n        // NOTE We hard-code the address here, since it should never change.\n        _zer0netDb = Zer0netDbInterface(0xE865Fe1A1A3b342bF0E2fcB11fF4E3BCe58263af);\n\n        /* Initialize (aname) hash. */\n        bytes32 hash = keccak256(abi.encodePacked('aname.', _namespace));\n\n        /* Set predecessor address. */\n        _predecessor = _zer0netDb.getAddress(hash);\n\n        /* Verify predecessor address. */\n        if (_predecessor != 0x0) {\n            /* Retrieve the last revision number (if available). */\n            uint lastRevision = ZeroCache(_predecessor).getRevision();\n            \n            /* Set (current) revision number. */\n            _revision = lastRevision + 1;\n        }\n    }\n\n    /**\n     * @dev Only allow access to an authorized Zer0net administrator.\n     */\n    modifier onlyAuthBy0Admin() {\n        /* Verify write access is only permitted to authorized accounts. */\n        require(_zer0netDb.getBool(keccak256(\n            abi.encodePacked(msg.sender, '.has.auth.for.', _namespace))) == true);\n\n        _;      // function code is inserted here\n    }\n\n    /**\n     * Fallback (default)\n     * \n     * Accepts direct ETH transfers to be wrapped for owner into one of the\n     * canonical Wrapped ETH (WETH) contracts:\n     *     - Mainnet : 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n     *     - Ropsten : 0xc778417E063141139Fce010982780140Aa0cD5Ab\n     *     - Kovan   : 0xd0A1E359811322d97991E03f863a0C30C2cF029C\n     *     - Rinkeby : 0xc778417E063141139Fce010982780140Aa0cD5Ab\n     * (source https://blog.0xproject.com/canonical-weth-a9aa7d0279dd)\n     * \n     * NOTE: We are forced to hard-code all possible network contract\n     *       (addresses) into this fallback since the WETH contract \n     *       DOES NOT provide enough gas for us to lookup the \n     *       specific address for our network.\n     * \n     * NOTE: This contract requires ~50k gas to wrap ETH using the \n     *       fallback/wrap functions. However, it will require ~80k \n     *       to initialize on first-use.\n     */\n    function () public payable {\n        /* Initialize WETH contract flag. */\n        bool isWethContract = false;\n        \n        /* Initialize WETH contracts array. */\n        address[4] memory contracts;\n        \n        /* Set Mainnet. */\n        contracts[0] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n        /* Set Ropsten. */\n        contracts[1] = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n\n        /* Set Kovan. */\n        contracts[2] = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n\n        /* Set Rinkeby. */\n        contracts[3] = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n        \n        /* Loop through all network contracts. */\n        for (uint i = 0; i < contracts.length; i++) {\n            /* Validate sender. */\n            if (msg.sender == contracts[i]) {\n                /* Set flag. */\n                isWethContract = true;\n            }\n        }\n\n        /* DO NOT (re-)wrap incoming ETH from Wrapped ETH contract. */\n        if (!isWethContract) {\n            _wrap(msg.sender);\n        }\n    }\n\n\n    /***************************************************************************\n     * \n     * ACTIONS\n     * \n     */\n\n    /**\n     * Wrap\n     */\n    function wrap() external payable returns (bool success) {\n        /* Return wrap success. */\n        return _wrap(msg.sender);\n    }\n    \n    /**\n     * Wrap\n     * \n     * NOTE: This function is primarily used to support instance \n     *       migration(s) of WETH.\n     */\n    function wrap(\n        address _owner\n    ) external payable returns (bool success) {\n        return _wrap(_owner);\n    }\n\n    /**\n     * Wrap\n     * \n     * Send Ether into this method. It gets wrapped and then deposited \n     * in this contract as a token balance assigned to the sender.\n     */\n    function _wrap(\n        address _owner\n    ) private returns (bool success) {\n        /* Set WETH address. */\n        address wethAddress = _weth();\n\n        /* Forward this payable ether into the wrapping contract. */\n        // NOTE: Transfer ETH before balance credit to prevent re-entry attack.\n        success = wethAddress.call\n            .gas(200000)\n            .value(msg.value)\n            (abi.encodeWithSignature(\"deposit()\"));\n            \n        /* Validate transfer. */\n        if (success) {\n            /* Increase WETH balance by sent value. */\n            _balances[wethAddress][_owner] = \n                _balances[wethAddress][_owner].add(msg.value);\n            \n            /* Initialize empty data (for event log). */\n            bytes memory data;\n    \n            /* Broadcast event. */\n            emit Deposit(\n                wethAddress, \n                _owner, \n                msg.value, \n                data\n            );\n        } else {\n            /* Report error. */\n            revert('An error occurred while wrapping your ETH.');\n        }\n    }\n\n    /**\n     * Unwrap\n     */\n    function unwrap(\n        uint _tokens\n    ) public returns (bool success) {\n        return _unwrap(msg.sender, _tokens);\n    }\n\n    /**\n     * Unwrap\n     * \n     * We allow administrative unwrapping of WETH held\n     * in the ZeroCache, FOR COMPLIANCE PURPOSES ONLY.\n     * \n     * NOTE: This function is reserved for exclusive use by\n     *       Zer0net Administration ONLY.\n     * \n     *       Tokens unwrapped by an administrator can\n     *       ONLY be transferred to the ORIGINAL owner.\n     */\n    function unwrap(\n        address _owner, \n        uint _tokens\n    ) onlyAuthBy0Admin external returns (bool success) {\n        return _unwrap(_owner, _tokens);\n    }\n\n    /**\n     * Unwrap\n     * \n     * Allows an owner to unwrap their Ether from the \n     * canonical WETH contract.\n     */\n    function _unwrap(\n        address _owner, \n        uint _tokens\n    ) private returns (bool success) {\n        /* Set WETH address. */\n        address wethAddress = _weth();\n\n        /* Validate balance. */\n        if (_balances[wethAddress][_owner] < _tokens) {\n            revert('Oops! You DO NOT have enough WETH.');\n        }\n\n        /* Decrease WETH balance by sent value. */\n        // NOTE: Decrease balance before transfer to prevent re-entry attack.\n        _balances[wethAddress][_owner] = \n            _balances[wethAddress][_owner].sub(_tokens);\n\n        /* Withdraw ETH from Wrapper contract. */\n        success = wethAddress.call\n            .gas(200000)\n            (abi.encodeWithSignature(\"withdraw(uint256)\", _tokens));\n\n        /* Validate withdrawal. */\n        if (success) {\n            /* Transfer \"unwrapped\" Ether (ETH) back to owner. */\n            _owner.transfer(_tokens);\n    \n            /* Broadcast event. */\n            emit Withdraw(\n                wethAddress,\n                _owner,\n                _tokens\n            );\n        } else {\n            /* Report error. */\n            revert('An error occurred while unwrapping your ETH.');\n        }\n    }\n    \n    /**\n     * Deposit\n     * \n     * Provides support for \"pre-approved\" token deposits.\n     * \n     * NOTE: Required pre-allowance/approval is required in order\n     *       to successfully complete the transfer.\n     */\n    function deposit(\n        address _token, \n        address _from, \n        uint _tokens, \n        bytes _data\n    ) external returns (bool success) {\n        /* Make deposit. */\n        return _deposit(_token, _from, _tokens, _data);\n    }\n\n    /**\n     * Receive Approval\n     * \n     * Will typically be called from `approveAndCall`.\n     * \n     * NOTE: Owner can assign ANY address to receive the deposit \n     *       (including their own). By default, owner will be used.\n     */\n    function receiveApproval(\n        address _from, \n        uint _tokens, \n        address _token, \n        bytes _data\n    ) public returns (bool success) {\n        /* Make deposit. */\n        return _deposit(_token, _from, _tokens, _data);\n    }\n\n    /**\n     * Deposit\n     * \n     * Deposits ANY ERC20-compatible token into this contract;\n     * to be managed as ZeroCache. \n     * \n     * NOTE: Owners maintain 100% control* of their token(s) \n     *       at all times.\n     * \n     *       * Administrators have the ability to return tokens\n     *         back to their ORIGINAL owners AT ANY TIME.\n     *         FOR COMPLIANCE PURPOSES ONLY\n     */\n    function _deposit(\n        address _token,\n        address _from, \n        uint _tokens,\n        bytes _data\n    ) private returns (bool success) {\n        /* Transfer the ERC-20 tokens into Cache. */\n        // NOTE: Transfer tokens before credit to prevent re-entry attack.\n        ERC20Interface(_token).transferFrom(\n            _from, address(this), _tokens);\n        \n        /* Initialize receiver (address). */\n        address receiver = 0x0;\n        \n        /**\n         * If `_data` is an `address`, then set the value to `receiver`.\n         * e.g. when `approveAndCall` is made from a contract \n         * (representing the owner).\n         */\n        if (_data.length == 20) {\n            /* Retrieve the receiver's address from `data` payload. */\n            receiver = _bytesToAddress(_data);\n        } else {\n            /* Set receiver to `from` (also the token owner). */\n            receiver = _from;\n        }\n\n        /* Increase receiver balance. */\n        _balances[_token][receiver] = \n            _balances[_token][receiver].add(_tokens);\n\n        /* Broadcast event. */\n        emit Deposit(_token, receiver, _tokens, _data);\n\n        /* Return success. */\n        return true;\n    }\n\n    /**\n     * Withdraw\n     */\n    function withdraw(\n        address _token, \n        uint _tokens\n    ) public returns (bool success) {\n        return _withdraw(msg.sender, _token, _tokens);\n    }\n    \n    /**\n     * Withdraw\n     * \n     * We allow administrative withdrawls of tokens held\n     * in the ZeroCache, FOR COMPLIANCE PURPOSES ONLY.\n     * \n     * NOTE: This function is reserved for exclusive use by\n     *       Zer0net Administration ONLY.\n     * \n     *       Tokens withdrawn by an administrator can\n     *       ONLY be transferred to the ORIGINAL owner.\n     */\n    function withdraw(\n        address _owner, \n        address _token, \n        uint _tokens\n    ) onlyAuthBy0Admin external returns (bool success) {\n        return _withdraw(_owner, _token, _tokens);\n    }\n\n    /**\n     * Withdraw\n     * \n     * Allows the withdrawl of tokens held in the ZeroCache\n     * back to the ORIGINAL owner.\n     */\n    function _withdraw(\n        address _owner, \n        address _token, \n        uint _tokens\n    ) private returns (bool success) {\n        /* Validate balance. */\n        if (_balances[_token][_owner] < _tokens) {\n            revert('Oops! You DO NOT have enough tokens.');\n        }\n\n        /* Decrease owner balance by token amount. */\n        // NOTE: Decrease balance before transfer to prevent re-entry attack.\n        _balances[_token][_owner] = \n            _balances[_token][_owner].sub(_tokens);\n\n        /* Transfer requested tokens to owner. */\n        ERC20Interface(_token).transfer(_owner, _tokens);\n\n        /* Broadcast event. */\n        emit Withdraw(_token, _owner, _tokens);\n    \n        /* Return success. */\n        return true;\n    }\n\n    /**\n     * Transfer\n     *\n     * Transfers the \"specified\" ERC-20 tokens held by the sender\n     * to the receiver's account.\n     */\n    function transfer(\n        address _token,\n        address _to,\n        uint _tokens\n    ) external returns (bool success) {\n        return _transfer(\n            _token, msg.sender, _to, _tokens);\n    }\n\n    /**\n     * (Relayed) Transfer\n     * \n     * This transfer requires an off-chain (EC) signature, from the \n     * account holder, detailing the transaction.\n     * \n     * Staekholder\n     * -----------\n     * \n     * Users may choose to boost the speed of execution for their \n     * transfer request, decreasing the delivery time to near instant \n     * (highest priority for miners to process) confirmation. \n     * \n     * A staek of ZeroGold is required to be added to the request, \n     * in an amount specified by your preferred staekholder.\n     * \n     * This staek is 100% optional, as Standard Delivery will be \n     * FREE FOREVER!\n     * \n     * TODO: Let's implement GasToken to provide staekholders an opportunity\n     *       to hedge against the volatility of future gas prices.\n     *       (source: https://gastoken.io/)\n     */\n    function transfer(\n        address _token,       // contract address\n        address _from,        // sender's address\n        address _to,          // receiver's address\n        uint _tokens,         // quantity of tokens\n        address _staekholder, // staekholder\n        uint _staek,          // staek amount\n        uint _expires,        // expiration time\n        uint _nonce,          // unique integer\n        bytes _signature      // signed message\n    ) external returns (bool success) {\n        /* Calculate transfer hash. */\n        bytes32 transferHash = keccak256(abi.encodePacked(\n            address(this), \n            _token, \n            _from,\n            _to,\n            _tokens,\n            _staekholder,\n            _staek,\n            _expires,\n            _nonce\n        ));\n\n        /* Validate request has authorized signature. */\n        bool requestHasAuthSig = _requestHasAuthSig(\n            _from,\n            transferHash,\n            _expires,\n            _signature\n        );\n        \n        /* Validate authorization. */\n        if (!requestHasAuthSig) {\n            revert('Oops! This relay request is NOT valid.');\n        }\n        \n        /* Validate boost fee and pay (if necessary). */\n        if (_staekholder != 0x0 && _staek > 0) {\n            _addStaek(_from, _staekholder, _staek);\n        }\n\n        /* Request token transfer. */\n        return _transfer(\n            _token, _from, _to, _tokens);\n    }\n\n    /**\n     * Transfer\n     *\n     * Transfers the \"specified\" ERC-20 token(s) held by the sender\n     * to the receiver's account.\n     */\n    function _transfer(\n        address _token,\n        address _from,\n        address _to,\n        uint _tokens\n    ) private returns (bool success) {\n        /* Validate balance. */\n        if (_balances[_token][_from] < _tokens) {\n            revert('Oops! You DO NOT have enough tokens.');\n        }\n\n        /* Remove the transfer value from sender's balance. */\n        // NOTE: We decrease balance before adding to prevent re-entry attack.\n        _balances[_token][_from] = _balances[_token][_from].sub(_tokens);\n\n        /* Add the transfer value to the receiver's balance. */\n        _balances[_token][_to] = _balances[_token][_to].add(_tokens);\n\n        /* Broadcast event. */\n        emit Transfer(\n            _token, \n            _from, \n            _to, \n            _tokens\n        );\n\n        /* Return success. */\n        return true;\n    }\n    \n    /**\n     * Multi Transfer\n     *\n     * Transfers multiple ERC-20 tokens held by the sender\n     * to multiple receiver accounts.\n     */\n    function multiTransfer(\n        address[] _token,\n        address[] _to,\n        uint[] _tokens\n    ) external returns (bool success) {\n        return _multiTransfer(_token, msg.sender, _to, _tokens);\n    }\n    \n    //----------------------------------------------------------------\n    //----------------------------------------------------------------\n    // NOTE: We DO NOT yet offer support for RELAYED Multi Transfers.\n    //----------------------------------------------------------------\n    //----------------------------------------------------------------\n\n    /**\n     * Transfer Multiple Tokens (w/ Single Transaction)\n     * \n     * WARNING: Sending to multiple receipients is very risky,\n     *          as there is NO way to control the gas costs per\n     *          transaction (ie. contract addresses are limitless).\n     * \n     *          For this reason, we SKIP ALL transfers to contract\n     *          addresses. You can monitor the `Skipped` event.\n     */\n    function _multiTransfer(\n        address[] _token,\n        address _from,\n        address[] _to,\n        uint[] _tokens\n    ) private returns (bool success) {\n        /* Loop through all receivers. */\n        for (uint i = 0; i < _to.length; i++) {\n            /* Set token. */\n            address token = _token[i];\n           \n            /* Set receiver. */\n            address to = _to[i];\n            \n            /* Set token value. */\n            uint tokens = _tokens[i];\n           \n            /* Validate receiver address. */\n            if (_ownerIsContract(to)) {\n                /* Broadcast event. */\n                emit Skipped(token, _from, to, tokens);\n            } else {\n                /* Transfer tokens. */\n                _transfer(\n                    token, _from, to, tokens);\n            }\n        }\n        \n        /* Return success. */\n        return true;\n    }\n\n    /**\n     * Add Staek (to Relay Transfer)\n     *\n     * This is an (optional) staek provided by the sender, which \n     * transfers ZeroGold from the sender's account to the specified \n     * staekholder account.\n     * \n     * NOTE: Staek is only a temporary hold, until fees are collected\n     *       by the sender's preferred staekholder.\n     */\n    function _addStaek(\n        address _owner,\n        address _staekholder,\n        uint _tokens\n    ) private returns (bool success) {\n        /* Set ZeroGold address. */\n        address zgAddress = _zeroGold();\n\n        /* Validate available balance. */\n        if (_balances[zgAddress][_owner] < _tokens) {\n            revert('Oops! You DO NOT have enough ZeroGold to staek.');\n        }\n\n        /* Decrease owner balance by token amount. */\n        // NOTE: Decrease balance before transfer to prevent re-entry attack.\n        _balances[zgAddress][_owner] = \n            _balances[zgAddress][_owner].sub(_tokens);\n\n        /* Transfer specified tokens to staekholder account. */\n        _zeroGold().transfer(_staekholder, _tokens);\n\n        /* Broadcast event. */\n        emit Staek(\n            _owner, \n            _staekholder, \n            _tokens\n        );\n\n        /* Return success. */\n        return true;\n    }\n\n    /**\n     * Cancel\n     *\n     * Cancels a previously authorized/signed transfer request, \n     * by invalidating the signature on-chain.\n     */\n    function cancel(\n        address _token,       // contract address\n        address _from,        // sender's address\n        address _to,          // receiver's address\n        uint _tokens,         // quantity of tokens\n        address _staekholder, // staekholder\n        uint _staek,          // staek amount\n        uint _expires,        // expiration time\n        uint _nonce,          // unique integer\n        bytes _signature      // signed message\n    ) external returns (bool success) {\n        /* Calculate cancel hash. */\n        bytes32 cancelHash = keccak256(abi.encodePacked(\n            address(this), \n            _token, \n            _from,\n            _to,\n            _tokens,\n            _staekholder,\n            _staek,\n            _expires,\n            _nonce\n        ));\n\n        /* Validate request has authorized signature. */\n        bool requestHasAuthSig = _requestHasAuthSig(\n            _from,\n            cancelHash,\n            _expires,\n            _signature\n        );\n        \n        /* Validate authorization. */\n        if (!requestHasAuthSig) {\n            revert('Oops! This cancel request is NOT valid.');\n        }\n        \n        /* Return success. */\n        return true;\n    }\n\n    /**\n     * Migrate\n     */\n    function migrate(\n        address[] _tokens\n    ) external returns (bool success) {\n        return _migrate(msg.sender, _tokens);\n    }\n    \n    /**\n     * Migrate\n     * \n     * THIS FUNCTION IS UN-IMPLMENTED\n     * \n     * NOTE: There is no ADMIN migration function available\n     *       as a protection against UNAUTHORIZED transfer(s) to \n     *       possible rogue instance(s) of ZeroCache.\n     */\n\n    /**\n     * Migrate\n     * \n     * Allows for the full balance transfer of a multiple token(s)\n     * from legacy instance(s) to the LATEST instance of ZeroCache.\n     */\n    function _migrate(\n        address _owner, \n        address[] _tokens\n    ) private returns (bool success) {\n        /* Set hash. */\n        bytes32 hash = keccak256('aname.zerocache');\n\n        /* Retrieve value from Zer0net Db. */\n        address latestCache = _zer0netDb.getAddress(hash);\n\n        /* Loop through all tokens. */\n        for (uint i = 0; i < _tokens.length; i++) {\n            /* Set token. */\n            address token = _tokens[i];\n            \n            /* Retrieve balance. */\n            // NOTE: Explicitly set depth to `0`, to retrieve the\n            //       balance for ONLY this instance.\n            uint balance = balanceOf(token, _owner, 0);\n            \n            /* Decrease owner balance to ZERO. */\n            // NOTE: Balance is ZEROED here to prevent re-entry attack.\n            _balances[token][_owner] = 0;\n\n            /* Validate WETH contract (requires `unwrap`). */\n            if (token == address(_weth())) {\n                /* Set WETH address. */\n                address wethAddress = _weth();\n        \n                /* Withdraw ETH from Wrapper contract. */\n                success = wethAddress.call\n                    .gas(100000)\n                    (abi.encodeWithSignature(\"withdraw(uint256)\", balance));\n        \n                /* (Re-)Wrap ETH into LATEST instance. */\n                // NOTE: ETH will be wrapped on `_owner` behalf.\n                success = latestCache.call\n                    .gas(100000)\n                    .value(balance)\n                    (abi.encodeWithSignature(\"wrap(address)\", _owner));\n            } else {\n                /* Set data to owner (address). */\n                // NOTE: Required to assign tokens after being received\n                //       by the new contract instance.\n                bytes memory data = abi.encodePacked(_owner);\n\n                /* (Re-)Deposit tokens into LATEST instance. */\n                // NOTE: Tokens will be credited to `_owner` (aka `data`).\n                ApproveAndCallFallBack(token)\n                    .approveAndCall(latestCache, balance, data);\n\n                /* Set success. */\n                success = true;\n            }\n\n            /* Broadcast event. */\n            emit Migrate(token, _owner, balance);\n        }\n    }\n    \n\n    /***************************************************************************\n     * \n     * GETTERS\n     * \n     */\n\n    /**\n     * Get the token balance for account `tokenOwner`\n     */\n    function balanceOf(\n        address _token,\n        address _owner\n    ) external constant returns (uint balance) {\n        /* Return balance. */\n        return balanceOf(\n            _token, _owner, _MAX_REVISION_DEPTH);\n    }\n\n    /**\n     * Get the token balance for account `tokenOwner`\n     * \n     * NOTE: Supports a virtually unlimited depth, \n     *       limited ONLY by the supplied gas amount.\n     */\n    function balanceOf(\n        address _token,\n        address _owner,\n        uint _depth\n    ) public constant returns (uint balance) {\n        /* Retrieve (current) balance. */\n        balance = _balances[_token][_owner];\n        \n        /* Initialize legacy instance (to current predecessor). */\n        address legacyInstance = getPredecessor();\n        \n        /* Validate legacy instance. */\n        if (legacyInstance != 0x0) {\n            /* Initialize total legacy balance. */\n            uint totalLegacyBalance = 0;\n            \n            /* Loop through legacy instances for balance. */\n            for (uint i = 0; i < _depth; i++) {\n                /* Retrieve balance. */\n                uint legacyBalance = ZeroCache(legacyInstance)\n                    .balanceOf(_token, _owner);\n                    \n                /* Add to legacy balance total. */\n                totalLegacyBalance = totalLegacyBalance.add(legacyBalance);\n    \n                /* Set the next legacy instance / predecessor (if available). */\n                legacyInstance = ZeroCache(legacyInstance).getPredecessor();\n                \n                /* Validate legacy instance. */\n                if (legacyInstance == 0x0) {\n                    /* Break the loop. */\n                    break;\n                }\n            }\n            \n            /* Add total legacy balance. */\n            balance = balance.add(totalLegacyBalance);\n        }\n    }\n\n    /**\n     * Get Revision (Number)\n     */\n    function getRevision() public view returns (uint) {\n        return _revision;\n    }\n    \n    /**\n     * Get Predecessor (Address)\n     */\n    function getPredecessor() public view returns (address) {\n        return _predecessor;\n    }\n    \n    /**\n     * Get Successor (Address)\n     */\n    function getSuccessor() public view returns (address) {\n        return _successor;\n    }\n    \n    \n    /***************************************************************************\n     * \n     * SETTERS\n     * \n     */\n\n    /**\n     * Set Successor\n     * \n     * This is the contract address that replaced this current instnace.\n     */\n    function setSuccessor(\n        address _newSuccessor\n    ) onlyAuthBy0Admin external returns (bool success) {\n        /* Set successor contract. */\n        _successor = _newSuccessor;\n        \n        /* Return success. */\n        return true;\n    }\n\n\n    /***************************************************************************\n     * \n     * INTERFACES\n     * \n     */\n\n    /**\n     * Supports Interface (EIP-165)\n     * \n     * (see: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md)\n     * \n     * NOTE: Must support the following conditions:\n     *       1. (true) when interfaceID is 0x01ffc9a7 (EIP165 interface)\n     *       2. (false) when interfaceID is 0xffffffff\n     *       3. (true) for any other interfaceID this contract implements\n     *       4. (false) for any other interfaceID\n     */\n    function supportsInterface(\n        bytes4 _interfaceID\n    ) external pure returns (bool) {\n        /* Initialize constants. */\n        bytes4 InvalidId = 0xffffffff;\n        bytes4 ERC165Id = 0x01ffc9a7;\n\n        /* Validate condition #2. */\n        if (_interfaceID == InvalidId) {\n            return false;\n        }\n\n        /* Validate condition #1. */\n        if (_interfaceID == ERC165Id) {\n            return true;\n        }\n        \n        // TODO Add additional interfaces here.\n        \n        /* Return false (for condition #4). */\n        return false;\n    }\n\n    /**\n     * ECRecovery Interface\n     */\n    function _ecRecovery() private view returns (\n        ECRecovery ecrecovery\n    ) {\n        /* Initailze hash. */\n        bytes32 hash = keccak256('aname.ecrecovery');\n        \n        /* Retrieve value from Zer0net Db. */\n        address aname = _zer0netDb.getAddress(hash);\n        \n        /* Initialize interface. */\n        ecrecovery = ECRecovery(aname);\n    }\n\n    /**\n     * Wrapped Ether (WETH) Interface\n     * \n     * Retrieves the current WETH interface,\n     * using the aname record from Zer0netDb.\n     */\n    function _weth() private view returns (\n        WETHInterface weth\n    ) {\n        /* Initailze hash. */\n        // NOTE: ERC tokens are case-sensitive.\n        bytes32 hash = keccak256('aname.WETH');\n        \n        /* Retrieve value from Zer0net Db. */\n        address aname = _zer0netDb.getAddress(hash);\n        \n        /* Initialize interface. */\n        weth = WETHInterface(aname);\n    }\n\n    /**\n     * MakerDAO DAI Interface\n     * \n     * Retrieves the current DAI interface,\n     * using the aname record from Zer0netDb.\n     */\n    function _dai() private view returns (\n        ERC20Interface dai\n    ) {\n        /* Initailze hash. */\n        // NOTE: ERC tokens are case-sensitive.\n        bytes32 hash = keccak256('aname.DAI');\n        \n        /* Retrieve value from Zer0net Db. */\n        address aname = _zer0netDb.getAddress(hash);\n        \n        /* Initialize interface. */\n        dai = ERC20Interface(aname);\n    }\n\n    /**\n     * ZeroGold Interface\n     * \n     * Retrieves the current ZeroGold interface,\n     * using the aname record from Zer0netDb.\n     */\n    function _zeroGold() private view returns (\n        ERC20Interface zeroGold\n    ) {\n        /* Initailze hash. */\n        // NOTE: ERC tokens are case-sensitive.\n        bytes32 hash = keccak256('aname.0GOLD');\n        \n        /* Retrieve value from Zer0net Db. */\n        address aname = _zer0netDb.getAddress(hash);\n        \n        /* Initialize interface. */\n        zeroGold = ERC20Interface(aname);\n    }\n\n\n    /***************************************************************************\n     * \n     * UTILITIES\n     * \n     */\n\n    /**\n     * Request Hash Authorized Signature\n     * \n     * Validates ALL signature requests by:\n     *     1. Uses ECRecovery to validate the signature.\n     *     2. Verify expiration against the current block number.\n     *     3. Sets a flag to block re-use of signature.\n     */\n    function _requestHasAuthSig(\n        address _from,\n        bytes32 _authHash,\n        uint _expires,\n        bytes _signature\n    ) private returns (bool success) {\n        /* Calculate signature hash. */\n        bytes32 sigHash = keccak256(abi.encodePacked(\n            '\\x19Ethereum Signed Message:\\n32', _authHash));\n\n        /* Validate signature expiration. */\n        if (_expiredSignatures[sigHash]) {\n            return false;\n        }\n\n        /* Set expiration flag. */\n        // NOTE: Set a flag here to prevent double-spending.\n        _expiredSignatures[sigHash] = true;\n        \n        /* Validate the expiration time. */\n        if (block.number > _expires) {\n            return false;\n        }\n        \n        /* Retrieve the authorized account (address). */\n        address authorizedAccount = \n            _ecRecovery().recover(sigHash, _signature);\n\n        /* Validate the signer matches owner of the tokens. */\n        if (_from != authorizedAccount) {\n            return false;\n        }\n\n        /* Return success. */    \n        return true;\n    }\n\n    /**\n     * Is (Owner) Contract\n     * \n     * Tests if a specified account / address is a contract.\n     */\n    function _ownerIsContract(\n        address _owner\n    ) private view returns (bool isContract) {\n        /* Initialize code length. */\n        uint codeLength;\n\n        /* Run assembly. */\n        assembly {\n            /* Retrieve the size of the code on target address. */\n            codeLength := extcodesize(_owner)\n        }\n        \n        /* Set test result. */\n        isContract = (codeLength > 0);\n    }\n\n    /**\n     * Bytes-to-Address\n     * \n     * Converts bytes into type address.\n     */\n    function _bytesToAddress(\n        bytes _address\n    ) private pure returns (address) {\n        uint160 m = 0;\n        uint160 b = 0;\n\n        for (uint8 i = 0; i < 20; i++) {\n            m *= 256;\n            b = uint160(_address[i]);\n            m += (b);\n        }\n\n        return address(m);\n    }\n}",
  "bytecode": ""
}