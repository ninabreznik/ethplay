{
  "address": "0x86367c0e517622dacdab379f2de389c3c9524345",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "UniversalUSDollar",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-26\n*/\n\npragma solidity ^0.5.0;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\ncontract ProxyTokenBurnerRole {\n  using Roles for Roles.Role;\n\n  event BurnerAdded(address indexed account);\n  event BurnerRemoved(address indexed account);\n\n  Roles.Role private burners;\n\n  constructor() internal {\n    _addBurner(msg.sender);\n  }\n\n  modifier onlyBurner() {\n    require(isBurner(msg.sender), \"Sender does not have a burner role\");\n\n    _;\n  }\n\n  function isBurner(address account) public view returns (bool) {\n    return burners.has(account);\n  }\n\n  function addBurner(address account) public onlyBurner {\n    _addBurner(account);\n  }\n\n  function renounceBurner() public {\n    _removeBurner(msg.sender);\n  }\n\n  function _addBurner(address account) internal {\n    burners.add(account);\n    emit BurnerAdded(account);\n  }\n\n  function _removeBurner(address account) internal {\n    burners.remove(account);\n    emit BurnerRemoved(account);\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ProxyTokenBurnable is ERC20, ProxyTokenBurnerRole {\n  mapping (address => mapping (address => uint256)) private _burnAllowed;\n\n  event BurnApproval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Modifier to check if a burner can burn a specific amount of owner's tokens.\n   * @param burner address The address which will burn the funds.\n   * @param owner address The address which owns the funds.\n   * @param amount uint256 The amount of tokens to burn.\n   */\n\n  modifier onlyWithBurnAllowance(address burner, address owner, uint256 amount) {\n    if (burner != owner) {\n      require(burnAllowance(owner, burner) >= amount, \"Not enough burn allowance\");\n    }\n    _;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to burn.\n   * @param owner address The address which owns the funds.\n   * @param burner address The address which will burn the funds.\n   * @return A uint256 specifying the amount of tokens still available to burn.\n   */\n  function burnAllowance(address owner, address burner) public view returns (uint256) {\n    return _burnAllowed[owner][burner];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a burner to burn.\n   * @param burner The address which will burn the funds.\n   * @param addedValue The increased amount of tokens to be burnt.\n   */\n  function increaseBurnAllowance(address burner, uint256 addedValue) public returns (bool) {\n    require(burner != address(0), \"Invalid burner address\");\n\n    _burnAllowed[msg.sender][burner] = _burnAllowed[msg.sender][burner].add(addedValue);\n\n    emit BurnApproval(msg.sender, burner, _burnAllowed[msg.sender][burner]);\n\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a burner to burn.\n   * @param burner The address which will burn the funds.\n   * @param subtractedValue The subtractedValue amount of tokens to be burnt.\n   */\n  function decreaseBurnAllowance(address burner, uint256 subtractedValue) public returns (bool) {\n    require(burner != address(0), \"Invalid burner address\");\n\n    _burnAllowed[msg.sender][burner] = _burnAllowed[msg.sender][burner].sub(subtractedValue);\n\n    emit BurnApproval(msg.sender, burner, _burnAllowed[msg.sender][burner]);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to burn tokens\n   * @param amount The amount of tokens to burn.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function burn(uint256 amount)\n    public\n    onlyBurner\n  returns (bool) {\n    _burn(msg.sender, amount);\n\n    return true;\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param account address The address which you want to send tokens from\n   * @param amount uint256 The amount of token to be burned\n   */\n  function burnFrom(address account, uint256 amount)\n    public\n    onlyBurner\n    onlyWithBurnAllowance(msg.sender, account, amount)\n  returns (bool) {\n    _burnAllowed[account][msg.sender] = _burnAllowed[account][msg.sender].sub(amount);\n\n    _burn(account, amount);\n\n    emit BurnApproval(account, msg.sender, _burnAllowed[account][msg.sender]);\n\n    return true;\n  }\n}\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}\n\n/**\n * @title ProxyToken\n */\ncontract ProxyToken is ERC20, ERC20Detailed, ERC20Mintable, ProxyTokenBurnable {\n  /**\n  * @notice Constructor for the ProxyToken\n  * @param owner owner of the initial proxy tokens\n  * @param name name of the proxy token\n  * @param symbol symbol of the proxy token\n  * @param decimals divisibility of proxy token\n  * @param initialProxySupply initial amount of proxy tokens\n  */\n  constructor(\n    address owner,\n    string memory name,\n    string memory symbol,\n    uint8 decimals,\n    uint256 initialProxySupply)\n  public ERC20Detailed(name, symbol, decimals) {\n    mint(owner, initialProxySupply * (10 ** uint256(decimals)));\n\n    if (owner == msg.sender) {\n      return;\n    }\n\n    addBurner(owner);\n    addMinter(owner);\n    renounceBurner();\n    renounceMinter();\n  }\n}\n\n/**\n * @title UniversalUSDollar\n */\ncontract UniversalUSDollar is ProxyToken {\n  /**\n  * @notice Constructor for the UniversalUSDollar\n  * @param owner owner of the initial proxy tokens\n  */\n  constructor(address owner) public ProxyToken(owner, \"Universal US Dollar\", \"UPUSD\", 2, 0) {} // solium-disable-line no-empty-blocks\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405160208062001a49833981018060405260208110156200003357600080fd5b5051604080518082018252601381527f556e6976657273616c20555320446f6c6c61720000000000000000000000000060208281019182528351808501909452600584527f5550555344000000000000000000000000000000000000000000000000000000908401528151849391600291600091859185918591620000bb916003916200064b565b508151620000d19060049060208501906200064b565b506005805460ff191660ff9290921691909117905550620000fd905033640100000000620001a1810204565b6200011133640100000000620001f3810204565b6200012e8560ff8416600a0a830264010000000062000245810204565b50600160a060020a038516331415620001475762000195565b6200015b8564010000000062000285810204565b6200016f8564010000000062000344810204565b6200018264010000000062000378810204565b620001956401000000006200038e810204565b505050505050620006f0565b620001bc60068264010000000062001283620003a282021704565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b6200020e60078264010000000062001283620003a282021704565b604051600160a060020a038216907f86e57fd2b90329052917118de7c3f521f400d439b9650deaa906a25b08b9456090600090a250565b60006200025b33640100000000620003fd810204565b15156200026757600080fd5b6200027c838364010000000062000420810204565b50600192915050565b6200029933640100000000620004df810204565b15156200032d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f53656e64657220646f6573206e6f7420686176652061206275726e657220726f60448201527f6c65000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6200034181640100000000620001f3810204565b50565b6200035833640100000000620003fd810204565b15156200036457600080fd5b6200034181640100000000620001a1810204565b6200038c33640100000000620004fc810204565b565b6200038c336401000000006200054e810204565b600160a060020a0381161515620003b857600080fd5b620003cd8282640100000000620005a0810204565b15620003d857600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b60006200041a6006836401000000006200112c620005a082021704565b92915050565b600160a060020a03821615156200043657600080fd5b60025462000453908264010000000062000ede620005d882021704565b600255600160a060020a03821660009081526020819052604090205462000489908264010000000062000ede620005d882021704565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60006200041a6007836401000000006200112c620005a082021704565b62000517600782640100000000620012d1620005f282021704565b604051600160a060020a038216907f90eabbc0c667db2a5029ed6bc0f5fe9f356d11684a4ca9fcfaec0e53f12b9c8e90600090a250565b62000569600682640100000000620012d1620005f282021704565b604051600160a060020a038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b6000600160a060020a0382161515620005b857600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b600082820183811015620005eb57600080fd5b9392505050565b600160a060020a03811615156200060857600080fd5b6200061d8282640100000000620005a0810204565b15156200062957600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200068e57805160ff1916838001178555620006be565b82800160010185558215620006be579182015b82811115620006be578251825591602001919060010190620006a1565b50620006cc929150620006d0565b5090565b620006ed91905b80821115620006cc5760008155600101620006d7565b90565b61134980620007006000396000f3fe6080604052600436106101325763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610137578063095ea7b3146101c15780631525ee4e1461020e57806318160ddd1461025b5780631e50cfbd1461027057806323b872dd146102a9578063313ce567146102ec5780633336dbf314610317578063395093511461035057806340c10f191461038957806342966c68146103c25780634334614a146103ec57806370a082311461041f57806379cc67901461045257806395d89b411461048b578063983b2d56146104a057806398650275146104d5578063a457c2d7146104ea578063a9059cbb14610523578063aa271e1a1461055c578063dd62ed3e1461058f578063e9ec9e8b146105ca578063f44637ba146105df575b600080fd5b34801561014357600080fd5b5061014c610612565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018657818101518382015260200161016e565b50505050905090810190601f1680156101b35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101cd57600080fd5b506101fa600480360360408110156101e457600080fd5b50600160a060020a0381351690602001356106a8565b604080519115158252519081900360200190f35b34801561021a57600080fd5b506102496004803603604081101561023157600080fd5b50600160a060020a0381358116916020013516610726565b60408051918252519081900360200190f35b34801561026757600080fd5b50610249610751565b34801561027c57600080fd5b506101fa6004803603604081101561029357600080fd5b50600160a060020a038135169060200135610757565b3480156102b557600080fd5b506101fa600480360360608110156102cc57600080fd5b50600160a060020a03813581169160208101359091169060400135610852565b3480156102f857600080fd5b5061030161091b565b6040805160ff9092168252519081900360200190f35b34801561032357600080fd5b506101fa6004803603604081101561033a57600080fd5b50600160a060020a038135169060200135610924565b34801561035c57600080fd5b506101fa6004803603604081101561037357600080fd5b50600160a060020a0381351690602001356109ba565b34801561039557600080fd5b506101fa600480360360408110156103ac57600080fd5b50600160a060020a038135169060200135610a6a565b3480156103ce57600080fd5b506101fa600480360360208110156103e557600080fd5b5035610a93565b3480156103f857600080fd5b506101fa6004803603602081101561040f57600080fd5b5035600160a060020a0316610b2c565b34801561042b57600080fd5b506102496004803603602081101561044257600080fd5b5035600160a060020a0316610b45565b34801561045e57600080fd5b506101fa6004803603604081101561047557600080fd5b50600160a060020a038135169060200135610b60565b34801561049757600080fd5b5061014c610d25565b3480156104ac57600080fd5b506104d3600480360360208110156104c357600080fd5b5035600160a060020a0316610d86565b005b3480156104e157600080fd5b506104d3610da6565b3480156104f657600080fd5b506101fa6004803603604081101561050d57600080fd5b50600160a060020a038135169060200135610db1565b34801561052f57600080fd5b506101fa6004803603604081101561054657600080fd5b50600160a060020a038135169060200135610dfc565b34801561056857600080fd5b506101fa6004803603602081101561057f57600080fd5b5035600160a060020a0316610e09565b34801561059b57600080fd5b50610249600480360360408110156105b257600080fd5b50600160a060020a0381358116916020013516610e1c565b3480156105d657600080fd5b506104d3610e47565b3480156105eb57600080fd5b506104d36004803603602081101561060257600080fd5b5035600160a060020a0316610e50565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561069e5780601f106106735761010080835404028352916020019161069e565b820191906000526020600020905b81548152906001019060200180831161068157829003601f168201915b5050505050905090565b6000600160a060020a03831615156106bf57600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600160a060020a03918216600090815260086020908152604080832093909416825291909152205490565b60025490565b6000600160a060020a03831615156107b9576040805160e560020a62461bcd02815260206004820152601660248201527f496e76616c6964206275726e6572206164647265737300000000000000000000604482015290519081900360640190fd5b336000908152600860209081526040808320600160a060020a03871684529091529020546107ed908363ffffffff610ede16565b336000818152600860209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f7cf97656de28b2f9c34f8f8f50ddae38f357b7ed1962a845f2246640f1a9d811929081900390910190a350600192915050565b600160a060020a0383166000908152600160209081526040808320338452909152812054610886908363ffffffff610ef716565b600160a060020a03851660009081526001602090815260408083203384529091529020556108b5848484610f0c565b600160a060020a0384166000818152600160209081526040808320338085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60055460ff1690565b6000600160a060020a0383161515610986576040805160e560020a62461bcd02815260206004820152601660248201527f496e76616c6964206275726e6572206164647265737300000000000000000000604482015290519081900360640190fd5b336000908152600860209081526040808320600160a060020a03871684529091529020546107ed908363ffffffff610ef716565b6000600160a060020a03831615156109d157600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610a05908363ffffffff610ede16565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6000610a7533610e09565b1515610a8057600080fd5b610a8a8383610fd9565b50600192915050565b6000610a9e33610b2c565b1515610b1a576040805160e560020a62461bcd02815260206004820152602260248201527f53656e64657220646f6573206e6f7420686176652061206275726e657220726f60448201527f6c65000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b610b243383611083565b506001919050565b6000610b3f60078363ffffffff61112c16565b92915050565b600160a060020a031660009081526020819052604090205490565b6000610b6b33610b2c565b1515610be7576040805160e560020a62461bcd02815260206004820152602260248201527f53656e64657220646f6573206e6f7420686176652061206275726e657220726f60448201527f6c65000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b338383600160a060020a0382168314610c5b5780610c058385610726565b1015610c5b576040805160e560020a62461bcd02815260206004820152601960248201527f4e6f7420656e6f756768206275726e20616c6c6f77616e636500000000000000604482015290519081900360640190fd5b600160a060020a0386166000908152600860209081526040808320338452909152902054610c8f908663ffffffff610ef716565b600160a060020a0387166000908152600860209081526040808320338452909152902055610cbd8686611083565b600160a060020a0386166000818152600860209081526040808320338085529083529281902054815190815290519293927f7cf97656de28b2f9c34f8f8f50ddae38f357b7ed1962a845f2246640f1a9d811929181900390910190a350600195945050505050565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561069e5780601f106106735761010080835404028352916020019161069e565b610d8f33610e09565b1515610d9a57600080fd5b610da381611163565b50565b610daf336111ab565b565b6000600160a060020a0383161515610dc857600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610a05908363ffffffff610ef716565b6000610a8a338484610f0c565b6000610b3f60068363ffffffff61112c16565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b610daf336111f3565b610e5933610b2c565b1515610ed5576040805160e560020a62461bcd02815260206004820152602260248201527f53656e64657220646f6573206e6f7420686176652061206275726e657220726f60448201527f6c65000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b610da38161123b565b600082820183811015610ef057600080fd5b9392505050565b600082821115610f0657600080fd5b50900390565b600160a060020a0382161515610f2157600080fd5b600160a060020a038316600090815260208190526040902054610f4a908263ffffffff610ef716565b600160a060020a038085166000908152602081905260408082209390935590841681522054610f7f908263ffffffff610ede16565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600160a060020a0382161515610fee57600080fd5b600254611001908263ffffffff610ede16565b600255600160a060020a03821660009081526020819052604090205461102d908263ffffffff610ede16565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a038216151561109857600080fd5b6002546110ab908263ffffffff610ef716565b600255600160a060020a0382166000908152602081905260409020546110d7908263ffffffff610ef716565b600160a060020a038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b6000600160a060020a038216151561114357600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b61117460068263ffffffff61128316565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b6111bc60068263ffffffff6112d116565b604051600160a060020a038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b61120460078263ffffffff6112d116565b604051600160a060020a038216907f90eabbc0c667db2a5029ed6bc0f5fe9f356d11684a4ca9fcfaec0e53f12b9c8e90600090a250565b61124c60078263ffffffff61128316565b604051600160a060020a038216907f86e57fd2b90329052917118de7c3f521f400d439b9650deaa906a25b08b9456090600090a250565b600160a060020a038116151561129857600080fd5b6112a2828261112c565b156112ac57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a03811615156112e657600080fd5b6112f0828261112c565b15156112fb57600080fd5b600160a060020a0316600090815260209190915260409020805460ff1916905556fea165627a7a7230582068e293b59a1387bf2167e72a0cb13ba052badeae1c01532e0a706449757bc38f0029000000000000000000000000d0f5032ae237b4a4e8de7c25437bc893c1012a55",
  "constructorArguments": "000000000000000000000000d0f5032ae237b4a4e8de7c25437bc893c1012a55"
}