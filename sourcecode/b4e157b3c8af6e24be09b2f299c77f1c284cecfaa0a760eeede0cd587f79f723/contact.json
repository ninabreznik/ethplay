{
  "address": "0x20149e6633706ff7aa8dd65a49a991fbdfc48460",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OrderGateway",
  "compilerVersion": "v0.5.6+commit.b259423e",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-03\n*/\n\npragma solidity 0.5.6;\n\n/**\n * @dev Standard interface for a dex proxy contract.\n */\ninterface Proxy {\n\n  /**\n   * @dev Executes an action.\n   * @param _target Target of execution.\n   * @param _a Address usually representing from.\n   * @param _b Address usually representing to.\n   * @param _c Integer usually repersenting amount/value/id.\n   */\n  function execute(\n    address _target,\n    address _a,\n    address _b,\n    uint256 _c\n  )\n    external;\n    \n}\n\n/**\n * @dev Xcert interface.\n */\ninterface Xcert // is ERC721 metadata enumerable\n{\n\n  /**\n   * @dev Creates a new Xcert.\n   * @param _to The address that will own the created Xcert.\n   * @param _id The Xcert to be created by the msg.sender.\n   * @param _imprint Cryptographic asset imprint.\n   */\n  function create(\n    address _to,\n    uint256 _id,\n    bytes32 _imprint\n  )\n    external;\n\n  /**\n   * @dev Change URI base.\n   * @param _uriBase New uriBase.\n   */\n  function setUriBase(\n    string calldata _uriBase\n  )\n    external;\n\n  /**\n   * @dev Returns a bytes4 of keccak256 of json schema representing 0xcert Protocol convention.\n   * @return Schema id.\n   */\n  function schemaId()\n    external\n    view\n    returns (bytes32 _schemaId);\n\n  /**\n   * @dev Returns imprint for Xcert.\n   * @param _tokenId Id of the Xcert.\n   * @return Token imprint.\n   */\n  function tokenImprint(\n    uint256 _tokenId\n  )\n    external\n    view\n    returns(bytes32 imprint);\n\n}\n\n/**\n * @dev Math operations with safety checks that throw on error. This contract is based on the \n * source code at: \n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol.\n */\nlibrary SafeMath\n{\n\n  /**\n   * @dev Error constants.\n   */\n  string constant OVERFLOW = \"008001\";\n  string constant SUBTRAHEND_GREATER_THEN_MINUEND = \"008002\";\n  string constant DIVISION_BY_ZERO = \"008003\";\n\n  /**\n   * @dev Multiplies two numbers, reverts on overflow.\n   * @param _factor1 Factor number.\n   * @param _factor2 Factor number.\n   * @return The product of the two factors.\n   */\n  function mul(\n    uint256 _factor1,\n    uint256 _factor2\n  )\n    internal\n    pure\n    returns (uint256 product)\n  {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_factor1 == 0)\n    {\n      return 0;\n    }\n\n    product = _factor1 * _factor2;\n    require(product / _factor1 == _factor2, OVERFLOW);\n  }\n\n  /**\n   * @dev Integer division of two numbers, truncating the quotient, reverts on division by zero.\n   * @param _dividend Dividend number.\n   * @param _divisor Divisor number.\n   * @return The quotient.\n   */\n  function div(\n    uint256 _dividend,\n    uint256 _divisor\n  )\n    internal\n    pure\n    returns (uint256 quotient)\n  {\n    // Solidity automatically asserts when dividing by 0, using all gas.\n    require(_divisor > 0, DIVISION_BY_ZERO);\n    quotient = _dividend / _divisor;\n    // assert(_dividend == _divisor * quotient + _dividend % _divisor); // There is no case in which this doesn't hold.\n  }\n\n  /**\n   * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n   * @param _minuend Minuend number.\n   * @param _subtrahend Subtrahend number.\n   * @return Difference.\n   */\n  function sub(\n    uint256 _minuend,\n    uint256 _subtrahend\n  )\n    internal\n    pure\n    returns (uint256 difference)\n  {\n    require(_subtrahend <= _minuend, SUBTRAHEND_GREATER_THEN_MINUEND);\n    difference = _minuend - _subtrahend;\n  }\n\n  /**\n   * @dev Adds two numbers, reverts on overflow.\n   * @param _addend1 Number.\n   * @param _addend2 Number.\n   * @return Sum.\n   */\n  function add(\n    uint256 _addend1,\n    uint256 _addend2\n  )\n    internal\n    pure\n    returns (uint256 sum)\n  {\n    sum = _addend1 + _addend2;\n    require(sum >= _addend1, OVERFLOW);\n  }\n\n  /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo), reverts when\n    * dividing by zero.\n    * @param _dividend Number.\n    * @param _divisor Number.\n    * @return Remainder.\n    */\n  function mod(\n    uint256 _dividend,\n    uint256 _divisor\n  )\n    internal\n    pure\n    returns (uint256 remainder) \n  {\n    require(_divisor != 0, DIVISION_BY_ZERO);\n    remainder = _dividend % _divisor;\n  }\n\n}\n\n/**\n * @title Contract for setting abilities.\n * @dev For optimization purposes the abilities are represented as a bitfield. Maximum number of\n * abilities is therefore 256. This is an example(for simplicity is made for max 8 abilities) of how\n * this works. \n * 00000001 Ability A - number representation 1\n * 00000010 Ability B - number representation 2\n * 00000100 Ability C - number representation 4\n * 00001000 Ability D - number representation 8\n * 00010000 Ability E - number representation 16\n * etc ... \n * To grant abilities B and C, we would need a bitfield of 00000110 which is represented by number\n * 6, in other words, the sum of abilities B and C. The same concept works for revoking abilities\n * and checking if someone has multiple abilities.\n */\ncontract Abilitable\n{\n  using SafeMath for uint;\n\n  /**\n   * @dev Error constants.\n   */\n  string constant NOT_AUTHORIZED = \"017001\";\n  string constant CANNOT_REVOKE_OWN_SUPER_ABILITY = \"017002\";\n  string constant INVALID_INPUT = \"017003\";\n\n  /**\n   * @dev Ability 1 (00000001) is a reserved ability called super ability. It is an\n   * ability to grant or revoke abilities of other accounts. Other abilities are determined by the\n   * implementing contract.\n   */\n  uint8 constant SUPER_ABILITY = 1;\n\n  /**\n   * @dev Maps address to ability ids.\n   */\n  mapping(address => uint256) public addressToAbility;\n\n  /**\n   * @dev Emits when an address is granted an ability.\n   * @param _target Address to which we are granting abilities.\n   * @param _abilities Number representing bitfield of abilities we are granting.\n   */\n  event GrantAbilities(\n    address indexed _target,\n    uint256 indexed _abilities\n  );\n\n  /**\n   * @dev Emits when an address gets an ability revoked.\n   * @param _target Address of which we are revoking an ability.\n   * @param _abilities Number representing bitfield of abilities we are revoking.\n   */\n  event RevokeAbilities(\n    address indexed _target,\n    uint256 indexed _abilities\n  );\n\n  /**\n   * @dev Guarantees that msg.sender has certain abilities.\n   */\n  modifier hasAbilities(\n    uint256 _abilities\n  ) \n  {\n    require(_abilities > 0, INVALID_INPUT);\n    require(\n      addressToAbility[msg.sender] & _abilities == _abilities,\n      NOT_AUTHORIZED\n    );\n    _;\n  }\n\n  /**\n   * @dev Contract constructor.\n   * Sets SUPER_ABILITY ability to the sender account.\n   */\n  constructor()\n    public\n  {\n    addressToAbility[msg.sender] = SUPER_ABILITY;\n    emit GrantAbilities(msg.sender, SUPER_ABILITY);\n  }\n\n  /**\n   * @dev Grants specific abilities to specified address.\n   * @param _target Address to grant abilities to.\n   * @param _abilities Number representing bitfield of abilities we are granting.\n   */\n  function grantAbilities(\n    address _target,\n    uint256 _abilities\n  )\n    external\n    hasAbilities(SUPER_ABILITY)\n  {\n    addressToAbility[_target] |= _abilities;\n    emit GrantAbilities(_target, _abilities);\n  }\n\n  /**\n   * @dev Unassigns specific abilities from specified address.\n   * @param _target Address of which we revoke abilites.\n   * @param _abilities Number representing bitfield of abilities we are revoking.\n   * @param _allowSuperRevoke Additional check that prevents you from removing your own super\n   * ability by mistake.\n   */\n  function revokeAbilities(\n    address _target,\n    uint256 _abilities,\n    bool _allowSuperRevoke\n  )\n    external\n    hasAbilities(SUPER_ABILITY)\n  {\n    if (!_allowSuperRevoke && msg.sender == _target)\n    {\n      require((_abilities & 1) == 0, CANNOT_REVOKE_OWN_SUPER_ABILITY);\n    }\n    addressToAbility[_target] &= ~_abilities;\n    emit RevokeAbilities(_target, _abilities);\n  }\n\n  /**\n   * @dev Check if an address has a specific ability. Throws if checking for 0.\n   * @param _target Address for which we want to check if it has a specific abilities.\n   * @param _abilities Number representing bitfield of abilities we are checking.\n   */\n  function isAble(\n    address _target,\n    uint256 _abilities\n  )\n    external\n    view\n    returns (bool)\n  {\n    require(_abilities > 0, INVALID_INPUT);\n    return (addressToAbility[_target] & _abilities) == _abilities;\n  }\n  \n}\n\n/**\n * @title XcertCreateProxy - creates a token on behalf of contracts that have been approved via\n * decentralized governance.\n */\ncontract XcertCreateProxy is \n  Abilitable \n{\n\n  /**\n   * @dev List of abilities:\n   * 2 - Ability to execute create. \n   */\n  uint8 constant ABILITY_TO_EXECUTE = 2;\n\n  /**\n   * @dev Creates a new Xcert.\n   * @param _xcert Address of the Xcert contract on which the creation will be perfomed.\n   * @param _to The address that will own the created Xcert.\n   * @param _id The Xcert to be created by the msg.sender.\n   * @param _imprint Cryptographic asset imprint.\n   */\n  function create(\n    address _xcert,\n    address _to,\n    uint256 _id,\n    bytes32 _imprint\n  )\n    external\n    hasAbilities(ABILITY_TO_EXECUTE)\n  {\n    Xcert(_xcert).create(_to, _id, _imprint);\n  }\n\n}\n\n/**\n * @dev Xcert nutable interface.\n */\ninterface XcertMutable // is Xcert\n{\n  \n  /**\n   * @dev Updates Xcert imprint.\n   * @param _tokenId Id of the Xcert.\n   * @param _imprint New imprint.\n   */\n  function updateTokenImprint(\n    uint256 _tokenId,\n    bytes32 _imprint\n  )\n    external;\n\n}\n\n/**\n * @title XcertUpdateProxy - updates a token on behalf of contracts that have been approved via\n * decentralized governance.\n * @notice There is a possibility of unintentional behavior when token imprint can be overwritten\n * if more than one claim is active. Be aware of this when implementing.\n */\ncontract XcertUpdateProxy is\n  Abilitable\n{\n\n  /**\n   * @dev List of abilities:\n   * 2 - Ability to execute create.\n   */\n  uint8 constant ABILITY_TO_EXECUTE = 2;\n\n  /**\n   * @dev Updates imprint of an existing Xcert.\n   * @param _xcert Address of the Xcert contract on which the update will be perfomed.\n   * @param _id The Xcert we will update.\n   * @param _imprint Cryptographic asset imprint.\n   */\n  function update(\n    address _xcert,\n    uint256 _id,\n    bytes32 _imprint\n  )\n    external\n    hasAbilities(ABILITY_TO_EXECUTE)\n  {\n    XcertMutable(_xcert).updateTokenImprint(_id, _imprint);\n  }\n\n}\n\npragma experimental ABIEncoderV2;\n\n\n\n\n\n/**\n * @dev Decentralize exchange, creating, updating and other actions for fundgible and non-fundgible\n * tokens powered by atomic swaps.\n */\ncontract OrderGateway is\n  Abilitable\n{\n\n  /**\n   * @dev List of abilities:\n   * 2 - Ability to set proxies.\n   */\n  uint8 constant ABILITY_TO_SET_PROXIES = 2;\n\n  /**\n   * @dev Xcert abilities.\n   */\n  uint8 constant ABILITY_ALLOW_CREATE_ASSET = 32;\n  uint16 constant ABILITY_ALLOW_UPDATE_ASSET = 128;\n\n  /**\n   * @dev Error constants.\n   */\n  string constant INVALID_SIGNATURE_KIND = \"015001\";\n  string constant INVALID_PROXY = \"015002\";\n  string constant TAKER_NOT_EQUAL_TO_SENDER = \"015003\";\n  string constant SENDER_NOT_TAKER_OR_MAKER = \"015004\";\n  string constant CLAIM_EXPIRED = \"015005\";\n  string constant INVALID_SIGNATURE = \"015006\";\n  string constant ORDER_CANCELED = \"015007\";\n  string constant ORDER_ALREADY_PERFORMED = \"015008\";\n  string constant MAKER_NOT_EQUAL_TO_SENDER = \"015009\";\n  string constant SIGNER_NOT_AUTHORIZED = \"015010\";\n\n  /**\n   * @dev Enum of available signature kinds.\n   * @param eth_sign Signature using eth sign.\n   * @param trezor Signature from Trezor hardware wallet.\n   * It differs from web3.eth_sign in the encoding of message length\n   * (Bitcoin varint encoding vs ascii-decimal, the latter is not\n   * self-terminating which leads to ambiguities).\n   * See also:\n   * https://en.bitcoin.it/wiki/Protocol_documentation#Variable_length_integer\n   * https://github.com/trezor/trezor-mcu/blob/master/firmware/ethereum.c#L602\n   * https://github.com/trezor/trezor-mcu/blob/master/firmware/crypto.c#L36a\n   * @param eip721 Signature using eip721.\n   */\n  enum SignatureKind\n  {\n    eth_sign,\n    trezor,\n    eip712\n  }\n\n  /**\n   * Enum of available action kinds.\n   */\n  enum ActionKind\n  {\n    create,\n    transfer,\n    update\n  }\n\n  /**\n   * @dev Structure representing what to send and where.\n   * @notice For update action kind to parameter is unnecessary. For this reason we recommend you\n   * set it to zero address (0x000...0) since it costs less.\n   * @param kind Enum representing action kind.\n   * @param proxy Id representing approved proxy address.\n   * @param token Address of the token we are sending.\n   * @param param1 Address of the sender or imprint.\n   * @param to Address of the receiver.\n   * @param value Amount of ERC20 or ID of ERC721.\n   */\n  struct ActionData\n  {\n    ActionKind kind;\n    uint32 proxy;\n    address token;\n    bytes32 param1;\n    address to;\n    uint256 value;\n  }\n\n  /**\n   * @dev Structure representing the signature parts.\n   * @param r ECDSA signature parameter r.\n   * @param s ECDSA signature parameter s.\n   * @param v ECDSA signature parameter v.\n   * @param kind Type of signature.\n   */\n  struct SignatureData\n  {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n    SignatureKind kind;\n  }\n\n  /**\n   * @dev Structure representing the data needed to do the order.\n   * @param maker Address of the one that made the claim.\n   * @param taker Address of the one that is executing the claim.\n   * @param actions Data of all the actions that should accure it this order.\n   * @param signature Data from the signed claim.\n   * @param seed Arbitrary number to facilitate uniqueness of the order's hash. Usually timestamp.\n   * @param expiration Timestamp of when the claim expires. 0 if indefinet.\n   */\n  struct OrderData\n  {\n    address maker;\n    address taker;\n    ActionData[] actions;\n    uint256 seed;\n    uint256 expiration;\n  }\n\n  /**\n   * @dev Valid proxy contract addresses.\n   */\n  address[] public proxies;\n\n  /**\n   * @dev Mapping of all cancelled orders.\n   */\n  mapping(bytes32 => bool) public orderCancelled;\n\n  /**\n   * @dev Mapping of all performed orders.\n   */\n  mapping(bytes32 => bool) public orderPerformed;\n\n  /**\n   * @dev This event emmits when tokens change ownership.\n   */\n  event Perform(\n    address indexed _maker,\n    address indexed _taker,\n    bytes32 _claim\n  );\n\n  /**\n   * @dev This event emmits when transfer order is cancelled.\n   */\n  event Cancel(\n    address indexed _maker,\n    address indexed _taker,\n    bytes32 _claim\n  );\n\n  /**\n   * @dev This event emmits when proxy address is changed..\n   */\n  event ProxyChange(\n    uint256 indexed _index,\n    address _proxy\n  );\n\n  /**\n   * @dev Adds a verified proxy address.\n   * @notice Can be done through a multisig wallet in the future.\n   * @param _proxy Proxy address.\n   */\n  function addProxy(\n    address _proxy\n  )\n    external\n    hasAbilities(ABILITY_TO_SET_PROXIES)\n  {\n    uint256 length = proxies.push(_proxy);\n    emit ProxyChange(length - 1, _proxy);\n  }\n\n  /**\n   * @dev Removes a proxy address.\n   * @notice Can be done through a multisig wallet in the future.\n   * @param _index Index of proxy we are removing.\n   */\n  function removeProxy(\n    uint256 _index\n  )\n    external\n    hasAbilities(ABILITY_TO_SET_PROXIES)\n  {\n    proxies[_index] = address(0);\n    emit ProxyChange(_index, address(0));\n  }\n\n  /**\n   * @dev Performs the atomic swap that can exchange, create, update and do other actions for\n   * fungible and non-fungible tokens.\n   * @param _data Data required to make the order.\n   * @param _signature Data from the signature.\n   */\n  function perform(\n    OrderData memory _data,\n    SignatureData memory _signature\n  )\n    public\n  {\n    require(_data.taker == msg.sender, TAKER_NOT_EQUAL_TO_SENDER);\n    require(_data.expiration >= now, CLAIM_EXPIRED);\n\n    bytes32 claim = getOrderDataClaim(_data);\n    require(\n      isValidSignature(\n        _data.maker,\n        claim,\n        _signature\n      ),\n      INVALID_SIGNATURE\n    );\n\n    require(!orderCancelled[claim], ORDER_CANCELED);\n    require(!orderPerformed[claim], ORDER_ALREADY_PERFORMED);\n\n    orderPerformed[claim] = true;\n\n    _doActions(_data);\n\n    emit Perform(\n      _data.maker,\n      _data.taker,\n      claim\n    );\n  }\n\n  /**\n   * @dev Performs the atomic swap that can exchange, create, update and do other actions for\n   * fungible and non-fungible tokens where performing address does not need to be known before\n   * hand.\n   * @notice When using this function, be aware that the zero address is reserved for replacement\n   * with msg.sender, meaning you cannot send anything to the zero address.\n   * @param _data Data required to make the order.\n   * @param _signature Data from the signature.\n   */\n  function performAnyTaker(\n    OrderData memory _data,\n    SignatureData memory _signature\n  )\n    public\n  {\n    require(_data.expiration >= now, CLAIM_EXPIRED);\n\n    bytes32 claim = getOrderDataClaim(_data);\n    require(\n      isValidSignature(\n        _data.maker,\n        claim,\n        _signature\n      ),\n      INVALID_SIGNATURE\n    );\n\n    require(!orderCancelled[claim], ORDER_CANCELED);\n    require(!orderPerformed[claim], ORDER_ALREADY_PERFORMED);\n\n    orderPerformed[claim] = true;\n\n    _data.taker = msg.sender;\n    _doActionsReplaceZeroAddress(_data);\n\n    emit Perform(\n      _data.maker,\n      _data.taker,\n      claim\n    );\n  }\n\n  /**\n   * @dev Cancels order.\n   * @notice You can cancel the same order multiple times. There is no check for whether the order\n   * was already canceled due to gas optimization. You should either check orderCancelled variable\n   * or listen to Cancel event if you want to check if an order is already canceled.\n   * @param _data Data of order to cancel.\n   */\n  function cancel(\n    OrderData memory _data\n  )\n    public\n  {\n    require(_data.maker == msg.sender, MAKER_NOT_EQUAL_TO_SENDER);\n\n    bytes32 claim = getOrderDataClaim(_data);\n    require(!orderPerformed[claim], ORDER_ALREADY_PERFORMED);\n\n    orderCancelled[claim] = true;\n    emit Cancel(\n      _data.maker,\n      _data.taker,\n      claim\n    );\n  }\n\n  /**\n   * @dev Calculates keccak-256 hash of OrderData from parameters.\n   * @param _orderData Data needed for atomic swap.\n   * @return keccak-hash of order data.\n   */\n  function getOrderDataClaim(\n    OrderData memory _orderData\n  )\n    public\n    view\n    returns (bytes32)\n  {\n    bytes32 temp = 0x0;\n\n    for(uint256 i = 0; i < _orderData.actions.length; i++)\n    {\n      temp = keccak256(\n        abi.encodePacked(\n          temp,\n          _orderData.actions[i].kind,\n          _orderData.actions[i].proxy,\n          _orderData.actions[i].token,\n          _orderData.actions[i].param1,\n          _orderData.actions[i].to,\n          _orderData.actions[i].value\n        )\n      );\n    }\n\n    return keccak256(\n      abi.encodePacked(\n        address(this),\n        _orderData.maker,\n        _orderData.taker,\n        temp,\n        _orderData.seed,\n        _orderData.expiration\n      )\n    );\n  }\n\n  /**\n   * @dev Verifies if claim signature is valid.\n   * @param _signer address of signer.\n   * @param _claim Signed Keccak-256 hash.\n   * @param _signature Signature data.\n   */\n  function isValidSignature(\n    address _signer,\n    bytes32 _claim,\n    SignatureData memory _signature\n  )\n    public\n    pure\n    returns (bool)\n  {\n    if (_signature.kind == SignatureKind.eth_sign)\n    {\n      return _signer == ecrecover(\n        keccak256(\n          abi.encodePacked(\n            \"\\x19Ethereum Signed Message:\\n32\",\n            _claim\n          )\n        ),\n        _signature.v,\n        _signature.r,\n        _signature.s\n      );\n    } else if (_signature.kind == SignatureKind.trezor)\n    {\n      return _signer == ecrecover(\n        keccak256(\n          abi.encodePacked(\n            \"\\x19Ethereum Signed Message:\\n\\x20\",\n            _claim\n          )\n        ),\n        _signature.v,\n        _signature.r,\n        _signature.s\n      );\n    } else if (_signature.kind == SignatureKind.eip712)\n    {\n      return _signer == ecrecover(\n        _claim,\n        _signature.v,\n        _signature.r,\n        _signature.s\n      );\n    }\n\n    revert(INVALID_SIGNATURE_KIND);\n  }\n\n  /**\n   * @dev Helper function that makes order actions and replaces zero addresses with msg.sender.\n   * @param _order Data needed for order.\n   */\n  function _doActionsReplaceZeroAddress(\n    OrderData memory _order\n  )\n    private\n  {\n    for(uint256 i = 0; i < _order.actions.length; i++)\n    {\n      require(\n        proxies[_order.actions[i].proxy] != address(0),\n        INVALID_PROXY\n      );\n\n      if (_order.actions[i].kind == ActionKind.create)\n      {\n        require(\n          Abilitable(_order.actions[i].token).isAble(_order.maker, ABILITY_ALLOW_CREATE_ASSET),\n          SIGNER_NOT_AUTHORIZED\n        );\n\n        if (_order.actions[i].to == address(0))\n        {\n          _order.actions[i].to = _order.taker;\n        }\n\n        XcertCreateProxy(proxies[_order.actions[i].proxy]).create(\n          _order.actions[i].token,\n          _order.actions[i].to,\n          _order.actions[i].value,\n          _order.actions[i].param1\n        );\n      }\n      else if (_order.actions[i].kind == ActionKind.transfer)\n      {\n        address from = address(uint160(bytes20(_order.actions[i].param1)));\n\n        if (_order.actions[i].to == address(0))\n        {\n          _order.actions[i].to = _order.taker;\n        }\n\n        if (from == address(0))\n        {\n          from = _order.taker;\n        }\n\n        require(\n          from == _order.maker\n          || from == _order.taker,\n          SENDER_NOT_TAKER_OR_MAKER\n        );\n\n        Proxy(proxies[_order.actions[i].proxy]).execute(\n          _order.actions[i].token,\n          from,\n          _order.actions[i].to,\n          _order.actions[i].value\n        );\n      }\n      else if (_order.actions[i].kind == ActionKind.update)\n      {\n        require(\n          Abilitable(_order.actions[i].token).isAble(_order.maker, ABILITY_ALLOW_UPDATE_ASSET),\n          SIGNER_NOT_AUTHORIZED\n        );\n\n        XcertUpdateProxy(proxies[_order.actions[i].proxy]).update(\n          _order.actions[i].token,\n          _order.actions[i].value,\n          _order.actions[i].param1\n        );\n      }\n    }\n  }\n\n  /**\n   * @dev Helper function that makes order actions.\n   * @param _order Data needed for order.\n   */\n  function _doActions(\n    OrderData memory _order\n  )\n    private\n  {\n    for(uint256 i = 0; i < _order.actions.length; i++)\n    {\n      require(\n        proxies[_order.actions[i].proxy] != address(0),\n        INVALID_PROXY\n      );\n\n      if (_order.actions[i].kind == ActionKind.create)\n      {\n        require(\n          Abilitable(_order.actions[i].token).isAble(_order.maker, ABILITY_ALLOW_CREATE_ASSET),\n          SIGNER_NOT_AUTHORIZED\n        );\n\n        XcertCreateProxy(proxies[_order.actions[i].proxy]).create(\n          _order.actions[i].token,\n          _order.actions[i].to,\n          _order.actions[i].value,\n          _order.actions[i].param1\n        );\n      }\n      else if (_order.actions[i].kind == ActionKind.transfer)\n      {\n        address from = address(uint160(bytes20(_order.actions[i].param1)));\n        require(\n          from == _order.maker\n          || from == _order.taker,\n          SENDER_NOT_TAKER_OR_MAKER\n        );\n\n        Proxy(proxies[_order.actions[i].proxy]).execute(\n          _order.actions[i].token,\n          from,\n          _order.actions[i].to,\n          _order.actions[i].value\n        );\n      }\n      else if (_order.actions[i].kind == ActionKind.update)\n      {\n        require(\n          Abilitable(_order.actions[i].token).isAble(_order.maker, ABILITY_ALLOW_UPDATE_ASSET),\n          SIGNER_NOT_AUTHORIZED\n        );\n\n        XcertUpdateProxy(proxies[_order.actions[i].proxy]).update(\n          _order.actions[i].token,\n          _order.actions[i].value,\n          _order.actions[i].param1\n        );\n      }\n    }\n  }\n\n}",
  "bytecode": "6080604081815233600081815260208190529182206001908190559290917fc4adfc5f00262a1ab9b2241c7e98408a91e58dc5777d786164bba34a7652f62f91a36125c68061004f6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638b1d83351161008c578063aca910e711610066578063aca910e7146101df578063ba00a330146101f2578063d1c87f3014610205578063d981e73614610218576100ea565b80638b1d8335146101995780638fa76d8d146101ac578063abd90f85146101bf576100ea565b806336d63aca116100c857806336d63aca1461012a5780633ab7d8411461013d57806345a32c86146101505780635889bf5e14610179576100ea565b806304aa2cb7146100ef5780630ab319e81461010457806323b11d8d14610117575b600080fd5b6101026100fd366004612082565b61022b565b005b610102610112366004611f94565b610412565b610102610125366004611f21565b6104d3565b61010261013836600461204d565b6105d2565b61010261014b36600461202f565b6106f5565b61016361015e366004611f21565b6107e5565b60405161017091906123fa565b60405180910390f35b61018c61018736600461202f565b6107f7565b60405161017091906123ec565b6101026101a7366004612082565b61080c565b61018c6101ba366004611f47565b6109e7565b6101d26101cd36600461202f565b610b4f565b604051610170919061230c565b6101026101ed366004611fce565b610b76565b61018c610200366004611f94565b610c9b565b61016361021336600461204d565b610d09565b61018c61022636600461202f565b610e46565b4282608001511015604051806040016040528060068152602001600160d01b65303135303035028152509061027f57604051600160e51b62461bcd0281526004016102769190612423565b60405180910390fd5b50600061028b83610d09565b905061029c836000015182846109e7565b604051806040016040528060068152602001600160d11b6518189a98181b02815250906102df57604051600160e51b62461bcd0281526004016102769190612423565b5060008181526002602090815260409182902054825180840190935260068352600160d01b65303135303037029183019190915260ff161561033757604051600160e51b62461bcd0281526004016102769190612423565b5060008181526003602090815260409182902054825180840190935260068352600160d31b65060626a60607029183019190915260ff161561038f57604051600160e51b62461bcd0281526004016102769190612423565b506000818152600360209081526040909120805460ff1916600117905533908401526103ba83610e5b565b82602001516001600160a01b031683600001516001600160a01b03167fdd97b854c02f699ea0d8984479d0012fbbbd0f4f80fc2e099315f6c47a3da1788360405161040591906123fa565b60405180910390a3505050565b6040805180820182526006808252600160d01b6530313730303302602092830152336000908152808352839020548351808501909452908352600160d01b653031373030310291830191909152600191908216821461048757604051600160e51b62461bcd0281526004016102769190612423565b506001600160a01b038316600081815260208190526040808220805486179055518492917fc4adfc5f00262a1ab9b2241c7e98408a91e58dc5777d786164bba34a7652f62f91a3505050565b6040805180820182526006808252600160d01b6530313730303302602092830152336000908152808352839020548351808501909452908352600160d01b653031373030310291830191909152600291908216821461054857604051600160e51b62461bcd0281526004016102769190612423565b50600180548082018083556000929092527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6810180546001600160a01b0319166001600160a01b0386161790556040517f8edda873a8ad561ecebeb71ceb3ae6bcb70c2b76a3fcb869859895c4d4fc7416906105c590869061230c565b60405180910390a2505050565b80516040805180820190915260068152600160d01b65303135303039026020820152906001600160a01b0316331461062057604051600160e51b62461bcd0281526004016102769190612423565b50600061062c82610d09565b60008181526003602090815260409182902054825180840190935260068352600160d31b65060626a6060702918301919091529192509060ff161561068757604051600160e51b62461bcd0281526004016102769190612423565b50600081815260026020908152604091829020805460ff19166001179055830151835191516001600160a01b0391821692909116907f421b43caf093b5e58d1ea89ca0d80151eda923342cf3cfddf5eb6b30d4947ba0906106e99085906123fa565b60405180910390a35050565b6040805180820182526006808252600160d01b6530313730303302602092830152336000908152808352839020548351808501909452908352600160d01b653031373030310291830191909152600291908216821461076a57604051600160e51b62461bcd0281526004016102769190612423565b5060006001838154811061077a57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550817f8edda873a8ad561ecebeb71ceb3ae6bcb70c2b76a3fcb869859895c4d4fc741660006040516107d9919061231a565b60405180910390a25050565b60006020819052908152604090205481565b60026020526000908152604090205460ff1681565b336001600160a01b031682602001516001600160a01b031614604051806040016040528060068152602001600160d01b65303135303033028152509061086857604051600160e51b62461bcd0281526004016102769190612423565b504282608001511015604051806040016040528060068152602001600160d01b6530313530303502815250906108b457604051600160e51b62461bcd0281526004016102769190612423565b5060006108c083610d09565b90506108d1836000015182846109e7565b604051806040016040528060068152602001600160d11b6518189a98181b028152509061091457604051600160e51b62461bcd0281526004016102769190612423565b5060008181526002602090815260409182902054825180840190935260068352600160d01b65303135303037029183019190915260ff161561096c57604051600160e51b62461bcd0281526004016102769190612423565b5060008181526003602090815260409182902054825180840190935260068352600160d31b65060626a60607029183019190915260ff16156109c457604051600160e51b62461bcd0281526004016102769190612423565b506000818152600360205260409020805460ff191660011790556103ba836115fb565b600080826060015160028111156109fa57fe5b1415610a9c57600183604051602001610a1391906122e1565b6040516020818303038152906040528051906020012083604001518460000151856020015160405160008152602001604052604051610a559493929190612408565b6020604051602081039080840390855afa158015610a77573d6000803e3d6000fd5b505050602060405103516001600160a01b0316846001600160a01b0316149050610b48565b600182606001516002811115610aae57fe5b1415610ac757600183604051602001610a139190612301565b600282606001516002811115610ad957fe5b1415610b0e5760018383604001518460000151856020015160405160008152602001604052604051610a559493929190612408565b60408051808201825260068152600160d01b653031353030310260208201529051600160e51b62461bcd0281526102769190600401612423565b9392505050565b60018181548110610b5c57fe5b6000918252602090912001546001600160a01b0316905081565b6040805180820182526006808252600160d01b6530313730303302602092830152336000908152808352839020548351808501909452908352600160d01b6530313730303102918301919091526001919082168214610beb57604051600160e51b62461bcd0281526004016102769190612423565b5081158015610c025750336001600160a01b038516145b15610c4e576040805180820190915260068152600160d11b6518189b9818190260208201526001841615610c4c57604051600160e51b62461bcd0281526004016102769190612423565b505b6001600160a01b03841660008181526020819052604080822080548719169055518592917fbb71944f65b9a48cc7d835179fb5e874f29b60aa0195785fb54968d8dddef08a91a350505050565b6000808211604051806040016040528060068152602001600160d01b653031373030330281525090610ce357604051600160e51b62461bcd0281526004016102769190612423565b50506001600160a01b038216600090815260208190526040902054811681145b92915050565b600080805b836040015151811015610dfc578184604001518281518110610d2c57fe5b60200260200101516000015185604001518381518110610d4857fe5b60200260200101516020015186604001518481518110610d6457fe5b60200260200101516040015187604001518581518110610d8057fe5b60200260200101516060015188604001518681518110610d9c57fe5b60200260200101516080015189604001518781518110610db857fe5b602002602001015160a00151604051602001610dda9796959493929190612266565b60408051601f1981840301815291905280516020909101209150600101610d0e565b5030836000015184602001518386606001518760800151604051602001610e28969594939291906121fc565b60405160208183030381529060405280519060200120915050919050565b60036020526000908152604090205460ff1681565b60005b8160400151518110156115f75760006001600160a01b0316600183604001518381518110610e8857fe5b60200260200101516020015163ffffffff1681548110610ea457fe5b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03161415604051806040016040528060068152602001600160d11b6518189a9818190281525090610f1057604051600160e51b62461bcd0281526004016102769190612423565b50600082604001518281518110610f2357fe5b6020026020010151600001516002811115610f3a57fe5b14156111a65781604001518181518110610f5057fe5b6020026020010151604001516001600160a01b031663ba00a330836000015160206040518363ffffffff1660e01b8152600401610f8e9291906123d1565b60206040518083038186803b158015610fa657600080fd5b505afa158015610fba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fde9190810190612011565b604051806040016040528060068152602001600160d41b65030313530313028152509061102157604051600160e51b62461bcd0281526004016102769190612423565b5060006001600160a01b03168260400151828151811061103d57fe5b6020026020010151608001516001600160a01b031614156110925781602001518260400151828151811061106d57fe5b6020026020010151608001906001600160a01b031690816001600160a01b0316815250505b6001826040015182815181106110a457fe5b60200260200101516020015163ffffffff16815481106110c057fe5b600091825260209091200154604083015180516001600160a01b03909216916346009b0e9190849081106110f057fe5b6020026020010151604001518460400151848151811061110c57fe5b6020026020010151608001518560400151858151811061112857fe5b602002602001015160a001518660400151868151811061114457fe5b6020026020010151606001516040518563ffffffff1660e01b815260040161116f9493929190612366565b600060405180830381600087803b15801561118957600080fd5b505af115801561119d573d6000803e3d6000fd5b505050506115ef565b6001826040015182815181106111b857fe5b60200260200101516000015160028111156111cf57fe5b14156113eb576000826040015182815181106111e757fe5b60200260200101516060015160601c905060006001600160a01b03168360400151838151811061121357fe5b6020026020010151608001516001600160a01b031614156112685782602001518360400151838151811061124357fe5b6020026020010151608001906001600160a01b031690816001600160a01b0316815250505b6001600160a01b03811661127d575060208201515b82516001600160a01b03828116911614806112ad575082602001516001600160a01b0316816001600160a01b0316145b604051806040016040528060068152602001600160d21b650c0c4d4c0c0d02815250906112f057604051600160e51b62461bcd0281526004016102769190612423565b5060018360400151838151811061130357fe5b60200260200101516020015163ffffffff168154811061131f57fe5b600091825260209091200154604084015180516001600160a01b039092169163239aee0691908590811061134f57fe5b602002602001015160400151838660400151868151811061136c57fe5b6020026020010151608001518760400151878151811061138857fe5b602002602001015160a001516040518563ffffffff1660e01b81526004016113b39493929190612328565b600060405180830381600087803b1580156113cd57600080fd5b505af11580156113e1573d6000803e3d6000fd5b50505050506115ef565b6002826040015182815181106113fd57fe5b602002602001015160000151600281111561141457fe5b14156115ef578160400151818151811061142a57fe5b6020026020010151604001516001600160a01b031663ba00a330836000015160806040518363ffffffff1660e01b815260040161146892919061238e565b60206040518083038186803b15801561148057600080fd5b505afa158015611494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114b89190810190612011565b604051806040016040528060068152602001600160d41b6503031353031302815250906114fb57604051600160e51b62461bcd0281526004016102769190612423565b5060018260400151828151811061150e57fe5b60200260200101516020015163ffffffff168154811061152a57fe5b600091825260209091200154604083015180516001600160a01b039092169163760f9d8691908490811061155a57fe5b6020026020010151604001518460400151848151811061157657fe5b602002602001015160a001518560400151858151811061159257fe5b6020026020010151606001516040518463ffffffff1660e01b81526004016115bc939291906123a9565b600060405180830381600087803b1580156115d657600080fd5b505af11580156115ea573d6000803e3d6000fd5b505050505b600101610e5e565b5050565b60005b8160400151518110156115f75760006001600160a01b031660018360400151838151811061162857fe5b60200260200101516020015163ffffffff168154811061164457fe5b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03161415604051806040016040528060068152602001600160d11b6518189a98181902815250906116b057604051600160e51b62461bcd0281526004016102769190612423565b506000826040015182815181106116c357fe5b60200260200101516000015160028111156116da57fe5b14156118d657816040015181815181106116f057fe5b6020026020010151604001516001600160a01b031663ba00a330836000015160206040518363ffffffff1660e01b815260040161172e9291906123d1565b60206040518083038186803b15801561174657600080fd5b505afa15801561175a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061177e9190810190612011565b604051806040016040528060068152602001600160d41b6503031353031302815250906117c157604051600160e51b62461bcd0281526004016102769190612423565b506001826040015182815181106117d457fe5b60200260200101516020015163ffffffff16815481106117f057fe5b600091825260209091200154604083015180516001600160a01b03909216916346009b0e91908490811061182057fe5b6020026020010151604001518460400151848151811061183c57fe5b6020026020010151608001518560400151858151811061185857fe5b602002602001015160a001518660400151868151811061187457fe5b6020026020010151606001516040518563ffffffff1660e01b815260040161189f9493929190612366565b600060405180830381600087803b1580156118b957600080fd5b505af11580156118cd573d6000803e3d6000fd5b50505050611ca3565b6001826040015182815181106118e857fe5b60200260200101516000015160028111156118ff57fe5b1415611a9f5760008260400151828151811061191757fe5b60200260200101516060015160601c905082600001516001600160a01b0316816001600160a01b03161480611961575082602001516001600160a01b0316816001600160a01b0316145b604051806040016040528060068152602001600160d21b650c0c4d4c0c0d02815250906119a457604051600160e51b62461bcd0281526004016102769190612423565b506001836040015183815181106119b757fe5b60200260200101516020015163ffffffff16815481106119d357fe5b600091825260209091200154604084015180516001600160a01b039092169163239aee06919085908110611a0357fe5b6020026020010151604001518386604001518681518110611a2057fe5b60200260200101516080015187604001518781518110611a3c57fe5b602002602001015160a001516040518563ffffffff1660e01b8152600401611a679493929190612328565b600060405180830381600087803b158015611a8157600080fd5b505af1158015611a95573d6000803e3d6000fd5b5050505050611ca3565b600282604001518281518110611ab157fe5b6020026020010151600001516002811115611ac857fe5b1415611ca35781604001518181518110611ade57fe5b6020026020010151604001516001600160a01b031663ba00a330836000015160806040518363ffffffff1660e01b8152600401611b1c92919061238e565b60206040518083038186803b158015611b3457600080fd5b505afa158015611b48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b6c9190810190612011565b604051806040016040528060068152602001600160d41b650303135303130281525090611baf57604051600160e51b62461bcd0281526004016102769190612423565b50600182604001518281518110611bc257fe5b60200260200101516020015163ffffffff1681548110611bde57fe5b600091825260209091200154604083015180516001600160a01b039092169163760f9d86919084908110611c0e57fe5b60200260200101516040015184604001518481518110611c2a57fe5b602002602001015160a0015185604001518581518110611c4657fe5b6020026020010151606001516040518463ffffffff1660e01b8152600401611c70939291906123a9565b600060405180830381600087803b158015611c8a57600080fd5b505af1158015611c9e573d6000803e3d6000fd5b505050505b6001016115fe565b6000610b48823561248e565b600082601f830112611cc857600080fd5b8135611cdb611cd68261245b565b612434565b915081818352602084019350602081019050838560c0840282011115611d0057600080fd5b60005b83811015611d2e5781611d168882611d68565b84525060209092019160c09190910190600101611d03565b5050505092915050565b6000610b488235612499565b6000610b488251612499565b6000610b48823561249e565b6000610b4882356124d3565b600060c08284031215611d7a57600080fd5b611d8460c0612434565b90506000611d928484611d5c565b8252506020611da384848301611f09565b6020830152506040611db784828501611cab565b6040830152506060611dcb84828501611d50565b6060830152506080611ddf84828501611cab565b60808301525060a0611df384828501611d50565b60a08301525092915050565b600060a08284031215611e1157600080fd5b611e1b60a0612434565b90506000611e298484611cab565b8252506020611e3a84848301611cab565b602083015250604082013567ffffffffffffffff811115611e5a57600080fd5b611e6684828501611cb7565b6040830152506060611e7a84828501611d50565b6060830152506080611e8e84828501611d50565b60808301525092915050565b600060808284031215611eac57600080fd5b611eb66080612434565b90506000611ec48484611d50565b8252506020611ed584848301611d50565b6020830152506040611ee984828501611f15565b6040830152506060611efd84828501611d5c565b60608301525092915050565b6000610b4882356124c4565b6000610b4882356124cd565b600060208284031215611f3357600080fd5b6000611f3f8484611cab565b949350505050565b600080600060c08486031215611f5c57600080fd5b6000611f688686611cab565b9350506020611f7986828701611d50565b9250506040611f8a86828701611e9a565b9150509250925092565b60008060408385031215611fa757600080fd5b6000611fb38585611cab565b9250506020611fc485828601611d50565b9150509250929050565b600080600060608486031215611fe357600080fd5b6000611fef8686611cab565b935050602061200086828701611d50565b9250506040611f8a86828701611d38565b60006020828403121561202357600080fd5b6000611f3f8484611d44565b60006020828403121561204157600080fd5b6000611f3f8484611d50565b60006020828403121561205f57600080fd5b813567ffffffffffffffff81111561207657600080fd5b611f3f84828501611dff565b60008060a0838503121561209557600080fd5b823567ffffffffffffffff8111156120ac57600080fd5b6120b885828601611dff565b9250506020611fc485828601611e9a565b6120d2816124e2565b82525050565b6120d28161248e565b6120d26120ed8261248e565b612549565b6120d281612499565b6120d28161249e565b6120d26121108261249e565b61249e565b6120d2612121826124ed565b612565565b60006121318261247c565b61213b8185612480565b935061214b818560208601612519565b61215481612570565b9093019392505050565b600061216b601c83612489565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c0192915050565b60006121a4601b83612489565b7f19457468657265756d205369676e6564204d6573736167653a0a2000000000008152601b0192915050565b6120d281612503565b6120d26121e5826124c4565b61255a565b6120d28161250e565b6120d2816124cd565b600061220882896120e1565b60148201915061221882886120e1565b60148201915061222882876120e1565b6014820191506122388286612104565b6020820191506122488285612104565b6020820191506122588284612104565b506020019695505050505050565b6000612272828a612104565b6020820191506122828289612115565b60018201915061229282886121d9565b6004820191506122a282876120e1565b6014820191506122b28286612104565b6020820191506122c282856120e1565b6014820191506122d28284612104565b50602001979650505050505050565b60006122ec8261215e565b91506122f88284612104565b50602001919050565b60006122ec82612197565b60208101610d0382846120d8565b60208101610d0382846120c9565b6080810161233682876120d8565b61234360208301866120d8565b61235060408301856120d8565b61235d60608301846120fb565b95945050505050565b6080810161237482876120d8565b61238160208301866120d8565b61235060408301856120fb565b6040810161239c82856120d8565b610b4860208301846121d0565b606081016123b782866120d8565b6123c460208301856120fb565b611f3f60408301846120fb565b604081016123df82856120d8565b610b4860208301846121ea565b60208101610d0382846120f2565b60208101610d0382846120fb565b6080810161241682876120fb565b61238160208301866121f3565b60208082528101610b488184612126565b60405181810167ffffffffffffffff8111828210171561245357600080fd5b604052919050565b600067ffffffffffffffff82111561247257600080fd5b5060209081020190565b5190565b90815260200190565b919050565b6000610d03826124b8565b151590565b90565b6000600382106124ad57fe5b5090565b61ffff1690565b6001600160a01b031690565b63ffffffff1690565b60ff1690565b6000600382106124ad57600080fd5b6000610d03826124f8565b6000610d03826124a1565b6000610d038261248e565b6000610d03826124b1565b6000610d03826124cd565b60005b8381101561253457818101518382015260200161251c565b83811115612543576000848401525b50505050565b6000610d03826000610d0382612586565b6000610d038261257a565b6000610d0382612580565b601f01601f191690565b60e01b90565b60f81b90565b60601b9056fea265627a7a72305820d4a7c50780436d23740125d763cba081e3c9eef54c1a6cdb8065de461616bd6c6c6578706572696d656e74616cf50037",
  "constructorArguments": "1908216821461076a57604051600160e51b62461bcd0281526004016102769190612423565b5060006001838154811061077a57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550817f8edda873a8ad561ecebeb71ceb3ae6bcb70c2b76a3fcb869859895c4d4fc741660006040516107d9919061231a565b60405180910390a25050565b60006020819052908152604090205481565b60026020526000908152604090205460ff1681565b336001600160a01b031682602001516001600160a01b031614604051806040016040528060068152602001600160d01b65303135303033028152509061086857604051600160e51b62461bcd0281526004016102769190612423565b504282608001511015604051806040016040528060068152602001600160d01b6530313530303502815250906108b457604051600160e51b62461bcd0281526004016102769190612423565b5060006108c083610d09565b90506108d1836000015182846109e7565b604051806040016040528060068152602001600160d11b6518189a98181b028152509061091457604051600160e51b62461bcd0281526004016102769190612423565b5060008181526002602090815260409182902054825180840190935260068352600160d01b65303135303037029183019190915260ff161561096c57604051600160e51b62461bcd0281526004016102769190612423565b5060008181526003602090815260409182902054825180840190935260068352600160d31b65060626a60607029183019190915260ff16156109c457604051600160e51b62461bcd0281526004016102769190612423565b506000818152600360205260409020805460ff191660011790556103ba836115fb565b600080826060015160028111156109fa57fe5b1415610a9c57600183604051602001610a1391906122e1565b6040516020818303038152906040528051906020012083604001518460000151856020015160405160008152602001604052604051610a559493929190612408565b6020604051602081039080840390855afa158015610a77573d6000803e3d6000fd5b505050602060405103516001600160a01b0316846001600160a01b0316149050610b48565b600182606001516002811115610aae57fe5b1415610ac757600183604051602001610a139190612301565b600282606001516002811115610ad957fe5b1415610b0e5760018383604001518460000151856020015160405160008152602001604052604051610a559493929190612408565b60408051808201825260068152600160d01b653031353030310260208201529051600160e51b62461bcd0281526102769190600401612423565b9392505050565b60018181548110610b5c57fe5b6000918252602090912001546001600160a01b0316905081565b6040805180820182526006808252600160d01b6530313730303302602092830152336000908152808352839020548351808501909452908352600160d01b6530313730303102918301919091526001919082168214610beb57604051600160e51b62461bcd0281526004016102769190612423565b5081158015610c025750336001600160a01b038516145b15610c4e576040805180820190915260068152600160d11b6518189b9818190260208201526001841615610c4c57604051600160e51b62461bcd0281526004016102769190612423565b505b6001600160a01b03841660008181526020819052604080822080548719169055518592917fbb71944f65b9a48cc7d835179fb5e874f29b60aa0195785fb54968d8dddef08a91a350505050565b6000808211604051806040016040528060068152602001600160d01b653031373030330281525090610ce357604051600160e51b62461bcd0281526004016102769190612423565b50506001600160a01b038216600090815260208190526040902054811681145b92915050565b600080805b836040015151811015610dfc578184604001518281518110610d2c57fe5b60200260200101516000015185604001518381518110610d4857fe5b60200260200101516020015186604001518481518110610d6457fe5b60200260200101516040015187604001518581518110610d8057fe5b60200260200101516060015188604001518681518110610d9c57fe5b60200260200101516080015189604001518781518110610db857fe5b602002602001015160a00151604051602001610dda9796959493929190612266565b60408051601f1981840301815291905280516020909101209150600101610d0e565b5030836000015184602001518386606001518760800151604051602001610e28969594939291906121fc565b60405160208183030381529060405280519060200120915050919050565b60036020526000908152604090205460ff1681565b60005b8160400151518110156115f75760006001600160a01b0316600183604001518381518110610e8857fe5b60200260200101516020015163ffffffff1681548110610ea457fe5b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03161415604051806040016040528060068152602001600160d11b6518189a9818190281525090610f1057604051600160e51b62461bcd0281526004016102769190612423565b50600082604001518281518110610f2357fe5b6020026020010151600001516002811115610f3a57fe5b14156111a65781604001518181518110610f5057fe5b6020026020010151604001516001600160a01b031663ba00a330836000015160206040518363ffffffff1660e01b8152600401610f8e9291906123d1565b60206040518083038186803b158015610fa657600080fd5b505afa158015610fba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fde9190810190612011565b604051806040016040528060068152602001600160d41b65030313530313028152509061102157604051600160e51b62461bcd0281526004016102769190612423565b5060006001600160a01b03168260400151828151811061103d57fe5b6020026020010151608001516001600160a01b031614156110925781602001518260400151828151811061106d57fe5b6020026020010151608001906001600160a01b031690816001600160a01b0316815250505b6001826040015182815181106110a457fe5b60200260200101516020015163ffffffff16815481106110c057fe5b600091825260209091200154604083015180516001600160a01b03909216916346009b0e9190849081106110f057fe5b6020026020010151604001518460400151848151811061110c57fe5b6020026020010151608001518560400151858151811061112857fe5b602002602001015160a001518660400151868151811061114457fe5b6020026020010151606001516040518563ffffffff1660e01b815260040161116f9493929190612366565b600060405180830381600087803b15801561118957600080fd5b505af115801561119d573d6000803e3d6000fd5b505050506115ef565b6001826040015182815181106111b857fe5b60200260200101516000015160028111156111cf57fe5b14156113eb576000826040015182815181106111e757fe5b60200260200101516060015160601c905060006001600160a01b03168360400151838151811061121357fe5b6020026020010151608001516001600160a01b031614156112685782602001518360400151838151811061124357fe5b6020026020010151608001906001600160a01b031690816001600160a01b0316815250505b6001600160a01b03811661127d575060208201515b82516001600160a01b03828116911614806112ad575082602001516001600160a01b0316816001600160a01b0316145b604051806040016040528060068152602001600160d21b650c0c4d4c0c0d02815250906112f057604051600160e51b62461bcd0281526004016102769190612423565b5060018360400151838151811061130357fe5b60200260200101516020015163ffffffff168154811061131f57fe5b600091825260209091200154604084015180516001600160a01b039092169163239aee0691908590811061134f57fe5b602002602001015160400151838660400151868151811061136c57fe5b6020026020010151608001518760400151878151811061138857fe5b602002602001015160a001516040518563ffffffff1660e01b81526004016113b39493929190612328565b600060405180830381600087803b1580156113cd57600080fd5b505af11580156113e1573d6000803e3d6000fd5b50505050506115ef565b6002826040015182815181106113fd57fe5b602002602001015160000151600281111561141457fe5b14156115ef578160400151818151811061142a57fe5b6020026020010151604001516001600160a01b031663ba00a330836000015160806040518363ffffffff1660e01b815260040161146892919061238e565b60206040518083038186803b15801561148057600080fd5b505afa158015611494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114b89190810190612011565b604051806040016040528060068152602001600160d41b6503031353031302815250906114fb57604051600160e51b62461bcd0281526004016102769190612423565b5060018260400151828151811061150e57fe5b60200260200101516020015163ffffffff168154811061152a57fe5b600091825260209091200154604083015180516001600160a01b039092169163760f9d8691908490811061155a57fe5b6020026020010151604001518460400151848151811061157657fe5b602002602001015160a001518560400151858151811061159257fe5b6020026020010151606001516040518463ffffffff1660e01b81526004016115bc939291906123a9565b600060405180830381600087803b1580156115d657600080fd5b505af11580156115ea573d6000803e3d6000fd5b505050505b600101610e5e565b5050565b60005b8160400151518110156115f75760006001600160a01b031660018360400151838151811061162857fe5b60200260200101516020015163ffffffff168154811061164457fe5b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03161415604051806040016040528060068152602001600160d11b6518189a98181902815250906116b057604051600160e51b62461bcd0281526004016102769190612423565b506000826040015182815181106116c357fe5b60200260200101516000015160028111156116da57fe5b14156118d657816040015181815181106116f057fe5b6020026020010151604001516001600160a01b031663ba00a330836000015160206040518363ffffffff1660e01b815260040161172e9291906123d1565b60206040518083038186803b15801561174657600080fd5b505afa15801561175a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061177e9190810190612011565b604051806040016040528060068152602001600160d41b6503031353031302815250906117c157604051600160e51b62461bcd0281526004016102769190612423565b506001826040015182815181106117d457fe5b60200260200101516020015163ffffffff16815481106117f057fe5b600091825260209091200154604083015180516001600160a01b03909216916346009b0e91908490811061182057fe5b6020026020010151604001518460400151848151811061183c57fe5b6020026020010151608001518560400151858151811061185857fe5b602002602001015160a001518660400151868151811061187457fe5b6020026020010151606001516040518563ffffffff1660e01b815260040161189f9493929190612366565b600060405180830381600087803b1580156118b957600080fd5b505af11580156118cd573d6000803e3d6000fd5b50505050611ca3565b6001826040015182815181106118e857fe5b60200260200101516000015160028111156118ff57fe5b1415611a9f5760008260400151828151811061191757fe5b60200260200101516060015160601c905082600001516001600160a01b0316816001600160a01b03161480611961575082602001516001600160a01b0316816001600160a01b0316145b604051806040016040528060068152602001600160d21b650c0c4d4c0c0d02815250906119a457604051600160e51b62461bcd0281526004016102769190612423565b506001836040015183815181106119b757fe5b60200260200101516020015163ffffffff16815481106119d357fe5b600091825260209091200154604084015180516001600160a01b039092169163239aee06919085908110611a0357fe5b6020026020010151604001518386604001518681518110611a2057fe5b60200260200101516080015187604001518781518110611a3c57fe5b602002602001015160a001516040518563ffffffff1660e01b8152600401611a679493929190612328565b600060405180830381600087803b158015611a8157600080fd5b505af1158015611a95573d6000803e3d6000fd5b5050505050611ca3565b600282604001518281518110611ab157fe5b6020026020010151600001516002811115611ac857fe5b1415611ca35781604001518181518110611ade57fe5b6020026020010151604001516001600160a01b031663ba00a330836000015160806040518363ffffffff1660e01b8152600401611b1c92919061238e565b60206040518083038186803b158015611b3457600080fd5b505afa158015611b48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b6c9190810190612011565b604051806040016040528060068152602001600160d41b650303135303130281525090611baf57604051600160e51b62461bcd0281526004016102769190612423565b50600182604001518281518110611bc257fe5b60200260200101516020015163ffffffff1681548110611bde57fe5b600091825260209091200154604083015180516001600160a01b039092169163760f9d86919084908110611c0e57fe5b60200260200101516040015184604001518481518110611c2a57fe5b602002602001015160a0015185604001518581518110611c4657fe5b6020026020010151606001516040518463ffffffff1660e01b8152600401611c70939291906123a9565b600060405180830381600087803b158015611c8a57600080fd5b505af1158015611c9e573d6000803e3d6000fd5b505050505b6001016115fe565b6000610b48823561248e565b600082601f830112611cc857600080fd5b8135611cdb611cd68261245b565b612434565b915081818352602084019350602081019050838560c0840282011115611d0057600080fd5b60005b83811015611d2e5781611d168882611d68565b84525060209092019160c09190910190600101611d03565b5050505092915050565b6000610b488235612499565b6000610b488251612499565b6000610b48823561249e565b6000610b4882356124d3565b600060c08284031215611d7a57600080fd5b611d8460c0612434565b90506000611d928484611d5c565b8252506020611da384848301611f09565b6020830152506040611db784828501611cab565b6040830152506060611dcb84828501611d50565b6060830152506080611ddf84828501611cab565b60808301525060a0611df384828501611d50565b60a08301525092915050565b600060a08284031215611e1157600080fd5b611e1b60a0612434565b90506000611e298484611cab565b8252506020611e3a84848301611cab565b602083015250604082013567ffffffffffffffff811115611e5a57600080fd5b611e6684828501611cb7565b6040830152506060611e7a84828501611d50565b6060830152506080611e8e84828501611d50565b60808301525092915050565b600060808284031215611eac57600080fd5b611eb66080612434565b90506000611ec48484611d50565b8252506020611ed584848301611d50565b6020830152506040611ee984828501611f15565b6040830152506060611efd84828501611d5c565b60608301525092915050565b6000610b4882356124c4565b6000610b4882356124cd565b600060208284031215611f3357600080fd5b6000611f3f8484611cab565b949350505050565b600080600060c08486031215611f5c57600080fd5b6000611f688686611cab565b9350506020611f7986828701611d50565b9250506040611f8a86828701611e9a565b9150509250925092565b60008060408385031215611fa757600080fd5b6000611fb38585611cab565b9250506020611fc485828601611d50565b9150509250929050565b600080600060608486031215611fe357600080fd5b6000611fef8686611cab565b935050602061200086828701611d50565b9250506040611f8a86828701611d38565b60006020828403121561202357600080fd5b6000611f3f8484611d44565b60006020828403121561204157600080fd5b6000611f3f8484611d50565b60006020828403121561205f57600080fd5b813567ffffffffffffffff81111561207657600080fd5b611f3f84828501611dff565b60008060a0838503121561209557600080fd5b823567ffffffffffffffff8111156120ac57600080fd5b6120b885828601611dff565b9250506020611fc485828601611e9a565b6120d2816124e2565b82525050565b6120d28161248e565b6120d26120ed8261248e565b612549565b6120d281612499565b6120d28161249e565b6120d26121108261249e565b61249e565b6120d2612121826124ed565b612565565b60006121318261247c565b61213b8185612480565b935061214b818560208601612519565b61215481612570565b9093019392505050565b600061216b601c83612489565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c0192915050565b60006121a4601b83612489565b7f19457468657265756d205369676e6564204d6573736167653a0a2000000000008152601b0192915050565b6120d281612503565b6120d26121e5826124c4565b61255a565b6120d28161250e565b6120d2816124cd565b600061220882896120e1565b60148201915061221882886120e1565b60148201915061222882876120e1565b6014820191506122388286612104565b6020820191506122488285612104565b6020820191506122588284612104565b506020019695505050505050565b6000612272828a612104565b6020820191506122828289612115565b60018201915061229282886121d9565b6004820191506122a282876120e1565b6014820191506122b28286612104565b6020820191506122c282856120e1565b6014820191506122d28284612104565b50602001979650505050505050565b60006122ec8261215e565b91506122f88284612104565b50602001919050565b60006122ec82612197565b60208101610d0382846120d8565b60208101610d0382846120c9565b6080810161233682876120d8565b61234360208301866120d8565b61235060408301856120d8565b61235d60608301846120fb565b95945050505050565b6080810161237482876120d8565b61238160208301866120d8565b61235060408301856120fb565b6040810161239c82856120d8565b610b4860208301846121d0565b606081016123b782866120d8565b6123c460208301856120fb565b611f3f60408301846120fb565b604081016123df82856120d8565b610b4860208301846121ea565b60208101610d0382846120f2565b60208101610d0382846120fb565b6080810161241682876120fb565b61238160208301866121f3565b60208082528101610b488184612126565b60405181810167ffffffffffffffff8111828210171561245357600080fd5b604052919050565b600067ffffffffffffffff82111561247257600080fd5b5060209081020190565b5190565b90815260200190565b919050565b6000610d03826124b8565b151590565b90565b6000600382106124ad57fe5b5090565b61ffff1690565b6001600160a01b031690565b63ffffffff1690565b60ff1690565b6000600382106124ad57600080fd5b6000610d03826124f8565b6000610d03826124a1565b6000610d038261248e565b6000610d03826124b1565b6000610d03826124cd565b60005b8381101561253457818101518382015260200161251c565b83811115612543576000848401525b50505050565b6000610d03826000610d0382612586565b6000610d038261257a565b6000610d0382612580565b601f01601f191690565b60e01b90565b60f81b90565b60601b9056fea265627a7a72305820d4a7c50780436d23740125d763cba081e3c9eef54c1a6cdb8065de461616bd6c6c6578706572696d656e74616cf50037"
}