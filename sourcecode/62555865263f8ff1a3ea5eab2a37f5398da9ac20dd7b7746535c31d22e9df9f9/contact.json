{
  "address": "0xd8ba7164446ef71e89fdc0d94fa492732d371238",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HRAToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-19\n*/\n\npragma solidity ^0.4.15;\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20 {\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n    \n}\n\n\ncontract BasicToken is ERC20 {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n\n    function transfer(address _to, uint256 _value) returns (bool) {\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n            balances[msg.sender] = balances[msg.sender].sub(_value);\n            balances[_to] = balances[_to].add(_value);\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }else {\n            return false;\n        }\n    }\n    \n\n    /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n        uint256 _allowance = allowed[_from][msg.sender];\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n      } else {\n        return false;\n      }\n}\n\n\n    /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n\n}\n\ncontract HRAToken is BasicToken {\n\n    using SafeMath for uint256;\n\n    string public name = \"HERA\";                                //name of the token\n    string public symbol = \"HRA\";                               //symbol of the token\n    uint8 public decimals = 10;                                 //decimals\n    uint256 public initialSupply = 30000000 * 10**10;           //total supply of Tokens\n\n    //variables\n    uint256 public totalAllocatedTokens;                         //variable to keep track of funds allocated\n    uint256 public tokensAllocatedToCrowdFund;                   //funds allocated to crowdfund\n\n    //addresses\n    address public founderMultiSigAddress;                      //Multi sign address of founder\n    address public crowdFundAddress;                            //Address of crowdfund contract\n\n    //events\n    event ChangeFoundersWalletAddress(uint256 _blockTimeStamp, address indexed _foundersWalletAddress);\n    \n    //modifierss\n\n    modifier nonZeroAddress(address _to){\n        require(_to != 0x0);\n        _;\n    }\n\n    modifier onlyFounders(){\n        require(msg.sender == founderMultiSigAddress);\n        _;\n    }\n\n    modifier onlyCrowdfund(){\n        require(msg.sender == crowdFundAddress);\n        _;\n    }\n\n    //creation of token contract\n    function HRAToken(address _crowdFundAddress, address _founderMultiSigAddress) {\n        crowdFundAddress = _crowdFundAddress;\n        founderMultiSigAddress = _founderMultiSigAddress;\n\n        // Assigned balances to crowdfund\n        balances[crowdFundAddress] = initialSupply;\n    }\n\n    //function to keep track of the total token allocation\n    function changeTotalSupply(uint256 _amount) onlyCrowdfund {\n        totalAllocatedTokens += _amount;\n    }\n\n    //function to change founder Multisig wallet address\n    function changeFounderMultiSigAddress(address _newFounderMultiSigAddress) onlyFounders nonZeroAddress(_newFounderMultiSigAddress) {\n        founderMultiSigAddress = _newFounderMultiSigAddress;\n        ChangeFoundersWalletAddress(now, founderMultiSigAddress);\n    }\n\n}",
  "bytecode": "60606040526040805190810160405280600481526020017f48455241000000000000000000000000000000000000000000000000000000008152506002908051906020019062000051929190620001ed565b506040805190810160405280600381526020017f4852410000000000000000000000000000000000000000000000000000000000815250600390805190602001906200009f929190620001ed565b50600a600460006101000a81548160ff021916908360ff160217905550670429d069189e00006005553415620000d457600080fd5b604051604080620014de833981016040528080519060200190919080519060200190919050505b81600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600554600080600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b50506200029c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200023057805160ff191683800117855562000261565b8280016001018555821562000261579182015b828111156200026057825182559160200191906001019062000243565b5b50905062000270919062000274565b5090565b6200029991905b80821115620002955760008160009055506001016200027b565b5090565b90565b61123280620002ac6000396000f300606060405236156100d9576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100de578063095ea7b31461016d5780630c195d99146101c757806323b872dd146101f05780632edefc2614610269578063313ce567146102be578063378dc3dc146102ed5780635154865a1461031657806352e973261461036b57806362c5c2541461038e57806370a08231146103c757806372eda05f1461041457806395d89b411461043d578063a9059cbb146104cc578063dd62ed3e14610526575b600080fd5b34156100e957600080fd5b6100f1610592565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101325780820151818401525b602081019050610116565b50505050905090810190601f16801561015f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017857600080fd5b6101ad600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610630565b604051808215151515815260200191505060405180910390f35b34156101d257600080fd5b6101da6107b8565b6040518082815260200191505060405180910390f35b34156101fb57600080fd5b61024f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506107be565b604051808215151515815260200191505060405180910390f35b341561027457600080fd5b61027c610bd1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102c957600080fd5b6102d1610bf7565b604051808260ff1660ff16815260200191505060405180910390f35b34156102f857600080fd5b610300610c0a565b6040518082815260200191505060405180910390f35b341561032157600080fd5b610329610c10565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561037657600080fd5b61038c6004808035906020019091905050610c36565b005b341561039957600080fd5b6103c5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ca7565b005b34156103d257600080fd5b6103fe600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610de2565b6040518082815260200191505060405180910390f35b341561041f57600080fd5b610427610e2b565b6040518082815260200191505060405180910390f35b341561044857600080fd5b610450610e31565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104915780820151818401525b602081019050610475565b50505050905090810190601f1680156104be5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104d757600080fd5b61050c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ecf565b604051808215151515815260200191505060405180910390f35b341561053157600080fd5b61057c600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611145565b6040518082815260200191505060405180910390f35b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106285780601f106105fd57610100808354040283529160200191610628565b820191906000526020600020905b81548152906001019060200180831161060b57829003601f168201915b505050505081565b6000808214806106bc57506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156106c757600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b60065481565b600080826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561088b575082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b801561091457506000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15610bbf57600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506109ab83826111cd90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a7c836000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111e790919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b0f836000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111cd90919063ffffffff16565b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150610bc9565b60009150610bc9565b5b509392505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900460ff1681565b60055481565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c9257600080fd5b806006600082825401925050819055505b5b50565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d0357600080fd5b8060008173ffffffffffffffffffffffffffffffffffffffff1614151515610d2a57600080fd5b81600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fbff2c41344315dcbe5a27ad589343e3446f755cda0e577f9415fd535a10796e7426040518082815260200191505060405180910390a25b5b505b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60075481565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ec75780601f10610e9c57610100808354040283529160200191610ec7565b820191906000526020600020905b815481529060010190602001808311610eaa57829003601f168201915b505050505081565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610f9c57506000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b1561113557610ff2826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111cd90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611085826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111e790919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905061113f565b6000905061113f565b5b92915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b60008282111515156111db57fe5b81830390505b92915050565b60008082840190508381101515156111fb57fe5b8091505b50929150505600a165627a7a72305820eedbcda8bc1a75a203389bb32b874d7fdb61c39690c7f4604654883b740e920200290000000000000000000000005fc677acf6f93a6ff9bae139ba85aea0a246d24d000000000000000000000000b3de746d56c652ea0390233a135a4011cacd9be5",
  "constructorArguments": "0000000000000000000000005fc677acf6f93a6ff9bae139ba85aea0a246d24d000000000000000000000000b3de746d56c652ea0390233a135a4011cacd9be5"
}