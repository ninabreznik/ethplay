{
  "address": "0x822ac26c84eb99f5238746fd3adf8f7697c01341",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DUSDStorage",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-05\n*/\n\npragma solidity 0.5.8;\n\n/**\n * @title SafeMath \n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, revert on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, revert on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtract two unsigned integers, revert on underflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Add two unsigned integers, revert on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n}\n\ncontract Ownable {\n    address internal _owner;\n    address private _pendingOwner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @return The address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Revert if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"The caller must be owner\");\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Cannot transfer control of the contract to the zero address\");\n        _pendingOwner = newOwner;\n    }\n\n    function receiveOwnership() public {\n        require(msg.sender == _pendingOwner);\n        emit OwnershipTransferred(_owner, _pendingOwner);\n        _owner = _pendingOwner;\n        _pendingOwner = address(0);  \n    }\n}\n\ncontract Operable is Ownable {\n\n    address private _operator; \n\n    event OperatorChanged(address indexed oldOperator, address indexed newOperator);\n\n    /**\n     * @dev Tells the address of the operator.\n     * @return The address of the operator.\n     */\n    function operator() external view returns (address) {\n        return _operator;\n    }\n    \n    /**\n     * @dev Only the operator can operate store.\n     */\n    modifier onlyOperator() {\n        require(msg.sender == _operator, \"msg.sender should be operator\");\n        _;\n    }\n\n    function isContract(address addr) internal view returns (bool) {\n        uint size;\n        assembly { size := extcodesize(addr) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Update the storgeOperator.\n     * @param _newOperator The newOperator to update.\n     */\n    function updateOperator(address _newOperator) public onlyOwner {\n        require(_newOperator != address(0), \"Cannot change the newOperator to the zero address\");\n        require(isContract(_newOperator), \"New operator must be contract address\");\n        emit OperatorChanged(_operator, _newOperator);\n        _operator = _newOperator;\n    }\n\n}\n\ncontract DUSDStorage is Operable {\n\n    using SafeMath for uint256;\n    bool private paused = false;\n    mapping (address => uint256) private balances;\n    mapping (address => mapping (address => uint256)) private allowances;\n    mapping (address=>bool) private blackList;\n    string private constant name = \"Digital USD\";\n    string private constant symbol = \"DUSD\";\n    uint8 private constant decimals = 18;\n    uint256 private totalSupply;\n\n    constructor() public {\n        _owner = 0xfe30e619cc2915C905Ca45C1BA8311109A3cBdB1;\n    }\n    \n    function getTokenName() public view onlyOperator returns (string memory) {\n        return name;\n    }\n    \n    function getSymbol() public view onlyOperator returns (string memory) {\n        return symbol;\n    }\n    \n    function getDecimals() public view onlyOperator returns (uint8) {\n        return decimals;\n    }\n    \n    function getTotalSupply() public view onlyOperator returns (uint256) {\n        return totalSupply;\n    }\n\n    function getBalance(address _holder) public view onlyOperator returns (uint256) {\n        return balances[_holder];\n    }\n\n    function addBalance(address _holder, uint256 _value) public onlyOperator {\n        balances[_holder] = balances[_holder].add(_value);\n    }\n\n    function subBalance(address _holder, uint256 _value) public onlyOperator {\n        balances[_holder] = balances[_holder].sub(_value);\n    }\n\n    function setBalance(address _holder, uint256 _value) public onlyOperator {\n        balances[_holder] = _value;\n    }\n    \n    function getAllowance(address _holder, address _spender) public view onlyOperator returns (uint256) {\n        return allowances[_holder][_spender];\n    }\n\n    function addAllowance(address _holder, address _spender, uint256 _value) public onlyOperator {\n        allowances[_holder][_spender] = allowances[_holder][_spender].add(_value);\n    }\n\n    function subAllowance(address _holder, address _spender, uint256 _value) public onlyOperator {\n        allowances[_holder][_spender] = allowances[_holder][_spender].sub(_value);\n    }\n\n    function setAllowance(address _holder, address _spender, uint256 _value) public onlyOperator {\n        allowances[_holder][_spender] = _value;\n    }\n\n    function addTotalSupply(uint256 _value) public onlyOperator {\n        totalSupply = totalSupply.add(_value);\n    }\n\n    function subTotalSupply(uint256 _value) public onlyOperator {\n        totalSupply = totalSupply.sub(_value);\n    }\n\n    function setTotalSupply(uint256 _value) public onlyOperator {\n        totalSupply = _value;\n    }\n\n    function addBlackList(address user) public onlyOperator {\n        blackList[user] = true;\n    }\n\n    function removeBlackList (address user) public onlyOperator {\n        blackList[user] = false;\n    }\n    \n    function isBlackList(address user) public view onlyOperator returns (bool) {\n        return blackList[user];\n    }\n\n    function getPaused() public view onlyOperator returns (bool) {\n        return paused;\n    }\n    \n    function pause() public onlyOperator {\n        paused = true;\n    }\n    \n    function unpause() public onlyOperator {\n        paused = false;\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"getAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receiveOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"subTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"subAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"updateOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isBlackList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"subBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldOperator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405260028054600160a01b60ff021916905534801561002057600080fd5b50600080546001600160a01b03191673fe30e619cc2915c905ca45c1ba8311109a3cbdb1179055611159806100566000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80638f32d59b116100de578063da46098c11610097578063e4997dc511610071578063e4997dc51461049c578063f0141d84146104c2578063f7ea7a3d146104e0578063f8b2cb4f146104fd5761018e565b8063da46098c1461041d578063e30443bc14610453578063e468688e1461047f5761018e565b80638f32d59b1461035f57806397d88cd214610367578063ac7475ed1461039d578063b36d6919146103c3578063c4e41b22146103e9578063cf8eeb7e146103f15761018e565b8063570ca7351161014b57806382838c761161012557806382838c761461032a5780638456cb5914610347578063862b092b1461034f5780638da5cb5b146103575761018e565b8063570ca735146102b45780635fd72d16146102d85780636805b84b1461030e5761018e565b80630af4187d146101935780630ecb93c0146101d357806315070401146101fb5780631c74a3011461027857806321e5383a146102805780633f4ba83a146102ac575b600080fd5b6101c1600480360360408110156101a957600080fd5b506001600160a01b0381358116916020013516610523565b60408051918252519081900360200190f35b6101f9600480360360208110156101e957600080fd5b50356001600160a01b03166105a2565b005b610203610616565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561023d578181015183820152602001610225565b50505050905090810190601f16801561026a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101f961068b565b6101f96004803603604081101561029657600080fd5b506001600160a01b038135169060200135610706565b6101f961079f565b6102bc610801565b604080516001600160a01b039092168252519081900360200190f35b6101f9600480360360608110156102ee57600080fd5b506001600160a01b03813581169160208101359091169060400135610810565b6103166108c7565b604080519115158252519081900360200190f35b6101f96004803603602081101561034057600080fd5b503561092b565b6101f9610994565b6102036109fc565b6102bc610a78565b610316610a87565b6101f96004803603606081101561037d57600080fd5b506001600160a01b03813581169160208101359091169060400135610a98565b6101f9600480360360208110156103b357600080fd5b50356001600160a01b0316610b1e565b610316600480360360208110156103d957600080fd5b50356001600160a01b0316610c65565b6101c1610cd7565b6101f96004803603604081101561040757600080fd5b506001600160a01b038135169060200135610d31565b6101f96004803603606081101561043357600080fd5b506001600160a01b03813581169160208101359091169060400135610daa565b6101f96004803603604081101561046957600080fd5b506001600160a01b038135169060200135610e26565b6101f96004803603602081101561049557600080fd5b5035610e92565b6101f9600480360360208110156104b257600080fd5b50356001600160a01b0316610ef5565b6104ca610f66565b6040805160ff9092168252519081900360200190f35b6101f9600480360360208110156104f657600080fd5b5035610fbf565b6101c16004803603602081101561051357600080fd5b50356001600160a01b0316611014565b6002546000906001600160a01b031633146105765760408051600160e51b62461bcd02815260206004820152601d60248201526000805160206110b8833981519152604482015290519081900360640190fd5b506001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b6002546001600160a01b031633146105f25760408051600160e51b62461bcd02815260206004820152601d60248201526000805160206110b8833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600560205260409020805460ff19166001179055565b6002546060906001600160a01b031633146106695760408051600160e51b62461bcd02815260206004820152601d60248201526000805160206110b8833981519152604482015290519081900360640190fd5b506040805180820190915260048152600160e21b63111554d102602082015290565b6001546001600160a01b031633146106a257600080fd5b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b6002546001600160a01b031633146107565760408051600160e51b62461bcd02815260206004820152601d60248201526000805160206110b8833981519152604482015290519081900360640190fd5b6001600160a01b03821660009081526003602052604090205461077f908263ffffffff61108316565b6001600160a01b0390921660009081526003602052604090209190915550565b6002546001600160a01b031633146107ef5760408051600160e51b62461bcd02815260206004820152601d60248201526000805160206110b8833981519152604482015290519081900360640190fd5b60028054600160a01b60ff0219169055565b6002546001600160a01b031690565b6002546001600160a01b031633146108605760408051600160e51b62461bcd02815260206004820152601d60248201526000805160206110b8833981519152604482015290519081900360640190fd5b6001600160a01b03808416600090815260046020908152604080832093861683529290522054610896908263ffffffff61108316565b6001600160a01b03938416600090815260046020908152604080832095909616825293909352929091209190915550565b6002546000906001600160a01b0316331461091a5760408051600160e51b62461bcd02815260206004820152601d60248201526000805160206110b8833981519152604482015290519081900360640190fd5b50600254600160a01b900460ff1690565b6002546001600160a01b0316331461097b5760408051600160e51b62461bcd02815260206004820152601d60248201526000805160206110b8833981519152604482015290519081900360640190fd5b60065461098e908263ffffffff61109c16565b60065550565b6002546001600160a01b031633146109e45760408051600160e51b62461bcd02815260206004820152601d60248201526000805160206110b8833981519152604482015290519081900360640190fd5b60028054600160a01b60ff021916600160a01b179055565b6002546060906001600160a01b03163314610a4f5760408051600160e51b62461bcd02815260206004820152601d60248201526000805160206110b8833981519152604482015290519081900360640190fd5b5060408051808201909152600b8152600160aa1b6a111a59da5d185b081554d102602082015290565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b6002546001600160a01b03163314610ae85760408051600160e51b62461bcd02815260206004820152601d60248201526000805160206110b8833981519152604482015290519081900360640190fd5b6001600160a01b03808416600090815260046020908152604080832093861683529290522054610896908263ffffffff61109c16565b610b26610a87565b610b7a5760408051600160e51b62461bcd02815260206004820152601860248201527f5468652063616c6c6572206d757374206265206f776e65720000000000000000604482015290519081900360640190fd5b6001600160a01b038116610bc257604051600160e51b62461bcd0281526004018080602001828103825260318152602001806110fd6031913960400191505060405180910390fd5b610bcb816110b1565b610c0957604051600160e51b62461bcd0281526004018080602001828103825260258152602001806110d86025913960400191505060405180910390fd5b6002546040516001600160a01b038084169216907fd58299b712891143e76310d5e664c4203c940a67db37cf856bdaa3c5c76a802c90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b6002546000906001600160a01b03163314610cb85760408051600160e51b62461bcd02815260206004820152601d60248201526000805160206110b8833981519152604482015290519081900360640190fd5b506001600160a01b031660009081526005602052604090205460ff1690565b6002546000906001600160a01b03163314610d2a5760408051600160e51b62461bcd02815260206004820152601d60248201526000805160206110b8833981519152604482015290519081900360640190fd5b5060065490565b6002546001600160a01b03163314610d815760408051600160e51b62461bcd02815260206004820152601d60248201526000805160206110b8833981519152604482015290519081900360640190fd5b6001600160a01b03821660009081526003602052604090205461077f908263ffffffff61109c16565b6002546001600160a01b03163314610dfa5760408051600160e51b62461bcd02815260206004820152601d60248201526000805160206110b8833981519152604482015290519081900360640190fd5b6001600160a01b0392831660009081526004602090815260408083209490951682529290925291902055565b6002546001600160a01b03163314610e765760408051600160e51b62461bcd02815260206004820152601d60248201526000805160206110b8833981519152604482015290519081900360640190fd5b6001600160a01b03909116600090815260036020526040902055565b6002546001600160a01b03163314610ee25760408051600160e51b62461bcd02815260206004820152601d60248201526000805160206110b8833981519152604482015290519081900360640190fd5b60065461098e908263ffffffff61108316565b6002546001600160a01b03163314610f455760408051600160e51b62461bcd02815260206004820152601d60248201526000805160206110b8833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600560205260409020805460ff19169055565b6002546000906001600160a01b03163314610fb95760408051600160e51b62461bcd02815260206004820152601d60248201526000805160206110b8833981519152604482015290519081900360640190fd5b50601290565b6002546001600160a01b0316331461100f5760408051600160e51b62461bcd02815260206004820152601d60248201526000805160206110b8833981519152604482015290519081900360640190fd5b600655565b6002546000906001600160a01b031633146110675760408051600160e51b62461bcd02815260206004820152601d60248201526000805160206110b8833981519152604482015290519081900360640190fd5b506001600160a01b031660009081526003602052604090205490565b60008282018381101561109557600080fd5b9392505050565b6000828211156110ab57600080fd5b50900390565b3b15159056fe6d73672e73656e6465722073686f756c64206265206f70657261746f720000004e6577206f70657261746f72206d75737420626520636f6e7472616374206164647265737343616e6e6f74206368616e676520746865206e65774f70657261746f7220746f20746865207a65726f2061646472657373a165627a7a7230582034ccd018d62ec823c7b98fdc6bb064e334e6ba69b202a22cac4f292b7d3ca8360029"
}