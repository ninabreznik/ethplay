{
  "address": "0xc37e8a31ba2d110c12f09f0239954a68b00bc599",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EubChainIco",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-01\n*/\n\npragma solidity ^0.4.23;\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    ERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\n// File: contracts/EubChainIco.sol\n\ncontract EubChainIco is PausableToken {\n\n  using SafeMath for uint;\n  using SafeMath for uint256;\n  using SafeERC20 for StandardToken;\n\n  string public name = 'EUB Chain';\n  string public symbol = 'EUBC';\n  uint8 public decimals = 8;\n\n  uint256 public totalSupply = 1000000000 * (uint256(10) ** decimals);  // 1 billion tokens\n\n  uint public startTime;  // contract deployed timestamp\n\n  uint256 public tokenSold = 0; // total token sold\n\n  uint8 private teamShare = 10; // 10 percent\n  uint8 private teamExtraShare = 2; // 2 percent\n  uint8 private communityShare = 10; // 10 percent\n  uint8 private foundationShare = 10; // 10 percent\n  uint8 private operationShare = 40; // 40 percent\n\n  uint8 private icoShare = 30; // 30 percent\n  uint256 private icoCap = totalSupply.mul(icoShare).div(100);\n\n  uint256 private teamLockPeriod = 365 days;\n  uint256 private minVestLockMonths = 3;\n\n  address private fundsWallet;\n  address private teamWallet; // for team, lock for 1 year (can not transfer)\n  address private communityWallet; // for community group\n  address private foundationWallet; // for the foundation group\n\n  struct Locking {\n    uint256 amount;\n    uint endTime;\n  }\n  struct Vesting {\n    uint256 amount;\n    uint startTime;\n    uint lockMonths;\n    uint256 released;\n  }\n\n  mapping (address => Locking) private lockingMap;\n  mapping (address => Vesting) private vestingMap;\n\n  event VestTransfer(\n    address indexed from,\n    address indexed to,\n    uint256 amount, \n    uint startTime, \n    uint lockMonths\n  );\n  event Release(address indexed to, uint256 amount);\n\n  /*\n    Contract constructor\n\n    @param _fundsWallet - funding wallet address\n    @param _teamWallet - team wallet address\n\n    @return address of created contract\n  */\n  constructor () public {\n\n    startTime = now;\n    uint teamLockEndTime = startTime.add(teamLockPeriod);\n\n    // save wallet addresses\n    fundsWallet = 0x1D64D9957e54711bf681985dB11Ac4De6508d2d8;\n    teamWallet = 0xe0f58e3b40d5B97aa1C72DD4853cb462E8628386;\n    communityWallet = 0x12bEfdd7D64312353eA0Cb0803b14097ee4cE28F;\n    foundationWallet = 0x8e037d80dD9FF654a17A4a009B49BfB71a992Cab;\n\n    // calculate token/allocation for each wallet type\n    uint256 teamTokens = totalSupply.mul(teamShare).div(100);\n    uint256 teamExtraTokens = totalSupply.mul(teamExtraShare).div(100);\n    uint256 communityTokens = totalSupply.mul(communityShare).div(100);\n    uint256 foundationTokens = totalSupply.mul(foundationShare).div(100);\n    uint256 operationTokens = totalSupply.mul(operationShare).div(100);\n\n    // team wallet enter vesting period after lock period\n    Vesting storage teamVesting = vestingMap[teamWallet];\n    teamVesting.amount = teamTokens;\n    teamVesting.startTime = teamLockEndTime;\n    teamVesting.lockMonths = 6;\n    emit VestTransfer(0x0, teamWallet, teamTokens, teamLockEndTime, teamVesting.lockMonths);\n\n    // transfer tokens to wallets\n    balances[communityWallet] = communityTokens;\n    emit Transfer(0x0, communityWallet, communityTokens);\n    balances[foundationWallet] = foundationTokens;\n    emit Transfer(0x0, foundationWallet, foundationTokens);\n\n    // transfer extra tokens from community wallet to team wallet\n    balances[communityWallet] = balances[communityWallet].sub(teamExtraTokens);\n    balances[teamWallet] = balances[teamWallet].add(teamExtraTokens);\n    emit Transfer(communityWallet, teamWallet, teamExtraTokens);\n  \n    // assign the rest to the funds wallet\n    uint256 restOfTokens = (\n      totalSupply\n        .sub(teamTokens)\n        .sub(communityTokens)\n        .sub(foundationTokens)\n        .sub(operationTokens)\n    );\n    balances[fundsWallet] = restOfTokens;\n    emit Transfer(0x0, fundsWallet, restOfTokens);\n    \n  }\n\n  /*\n    transfer vested tokens to receiver with lock period in months\n\n    @param _to - address of token receiver \n    @param _amount - amount of token allocate \n    @param _lockMonths - number of months to vest\n\n    @return true if the transfer is done\n  */\n  function vestedTransfer(address _to, uint256 _amount, uint _lockMonths) public whenNotPaused onlyPayloadSize(3 * 32) returns (bool) {\n    require(\n      msg.sender == fundsWallet ||\n      msg.sender == teamWallet\n    );\n  \n    // minimum vesting 3 months\n    require(_lockMonths >= minVestLockMonths);\n\n    // make sure it is a brand new vesting on the address\n    Vesting storage vesting = vestingMap[_to];\n    require(vesting.amount == 0);\n\n    if (msg.sender == fundsWallet) {\n      // check if token amount exceeds ico token cap\n      require(allowPurchase(_amount));\n      require(isPurchaseWithinCap(tokenSold, _amount));\n    \n      // check if msg.sender allow to send the amount\n      require(allowTransfer(msg.sender, _amount));\n\n      uint256 transferAmount = _amount.mul(15).div(100);\n      uint256 vestingAmount = _amount.sub(transferAmount);\n\n      vesting.amount = vestingAmount;\n      vesting.startTime = now;\n      vesting.lockMonths = _lockMonths;\n\n      emit VestTransfer(msg.sender, _to, vesting.amount, vesting.startTime, _lockMonths);\n\n      balances[msg.sender] = balances[msg.sender].sub(_amount);\n      tokenSold = tokenSold.add(_amount);\n\n      balances[_to] = balances[_to].add(transferAmount);\n      emit Transfer(msg.sender, _to, transferAmount);\n    } else if (msg.sender == teamWallet) {\n      Vesting storage teamVesting = vestingMap[teamWallet];\n\n      require(now < teamVesting.startTime);\n      require(\n        teamVesting.amount.sub(teamVesting.released) > _amount\n      );\n\n      teamVesting.amount = teamVesting.amount.sub(_amount);\n\n      vesting.amount = _amount;\n      vesting.startTime = teamVesting.startTime;\n      vesting.lockMonths = _lockMonths;\n\n      emit VestTransfer(msg.sender, _to, vesting.amount, vesting.startTime, _lockMonths);\n    }\n\n    return true;\n  }\n\n  // @return true if ico is open\n  function isIcoOpen() public view returns (bool) {\n    bool capReached = tokenSold >= icoCap;\n    return !capReached;\n  }\n\n  /*\n    check if purchase amount exists ico cap\n\n    @param _tokenSold - amount of token sold \n    @param _purchaseAmount - amount of token want to purchase\n\n    @return true if _purchaseAmount is allowed\n  */\n  function isPurchaseWithinCap(uint256 _tokenSold, uint256 _purchaseAmount) internal view returns(bool) {\n    bool isLessThanCap = _tokenSold.add(_purchaseAmount) <= icoCap;\n    return isLessThanCap;\n  }\n\n  /*\n    @param _amount - amount of token\n    @return true if the purchase is valid\n  */\n  function allowPurchase(uint256 _amount) internal view returns (bool) {\n    bool nonZeroPurchase = _amount != 0;\n    return nonZeroPurchase && isIcoOpen();\n  }\n\n  /*\n    @param _wallet - wallet address of the token sender\n    @param _amount - amount of token\n    @return true if the transfer is valid\n  */\n  function allowTransfer(address _wallet, uint256 _amount) internal view returns (bool) {\n    Locking memory locking = lockingMap[_wallet];\n    if (locking.endTime > now) {\n      return balances[_wallet].sub(_amount) >= locking.amount;\n    } else {\n      return balances[_wallet] >= _amount;\n    }\n  }\n\n  /*\n    transfer token from caller to receiver\n\n    @param _to - wallet address of the token receiver\n    @param _value - amount of token to be transferred\n\n    @return true if the transfer is done\n  */\n  function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool) {\n    require(allowTransfer(msg.sender, _value));\n    return super.transfer(_to, _value);\n  }\n\n  /*\n    transfer token from sender to receiver \n\n    @param _from - wallet address of the token sender\n    @param _to - wallet address of the token receiver\n    @param _value - amount of token to be transferred\n\n    @return true if the transfer is done\n  */\n  function transferFrom(address _from, address _to, uint256 _value)  onlyPayloadSize(3 * 32) public returns (bool) {\n    require(allowTransfer(_from, _value));\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  /*\n    @param _wallet - wallet address wanted to check\n    @return amount of token allocated\n  */\n  function allocationOf(address _wallet) public view returns (uint256) {\n    Vesting memory vesting = vestingMap[_wallet];\n    return vesting.amount;\n  }\n\n  /*\n    get the releasable tokens\n    @return amount of released tokens\n  */\n  function release() public onlyPayloadSize(0 * 32) returns (uint256) {\n    uint256 unreleased = releasableAmount(msg.sender);\n    Vesting storage vesting = vestingMap[msg.sender];\n\n    if (unreleased > 0) {\n      vesting.released = vesting.released.add(unreleased);\n      emit Release(msg.sender, unreleased);\n\n      balances[msg.sender] = balances[msg.sender].add(unreleased);\n      emit Transfer(0x0, msg.sender, unreleased);\n    }\n\n    return unreleased;\n  }\n\n  /*\n    @param _wallet - wallet address wanted to check\n    @return amount of releasable token\n  */\n  function releasableAmount(address _wallet) public view returns (uint256) {\n    Vesting memory vesting = vestingMap[_wallet];\n    return vestedAmount(_wallet).sub(vesting.released);\n  }\n\n  /*\n    @param _wallet - wallet address wanted to check\n    @return amount of vested token\n  */\n  function vestedAmount(address _wallet) public view returns (uint256) {\n    uint amonth = 30 days;\n    Vesting memory vesting = vestingMap[_wallet];\n    uint lockPeriod = vesting.lockMonths.mul(amonth);\n    uint lockEndTime = vesting.startTime.add(lockPeriod);\n\n    if (now >= lockEndTime) {\n      return vesting.amount;\n    } else if (now > vesting.startTime) {\n      // vest a portion of token each month\n      \n      uint roundedPeriod = now\n        .sub(vesting.startTime)\n        .div(amonth)\n        .mul(amonth);\n\n      return vesting.amount\n        .mul(roundedPeriod)\n        .div(lockPeriod);\n    } else {\n      return 0;\n    }\n  }\n\n  /*\n    modifiers to avoid short address attack\n  */\n  modifier onlyPayloadSize(uint size) {\n    assert(msg.data.length == size + 4);\n    _;\n  } \n  \n}",
  "bytecode": "60806040526000600360146101000a81548160ff0219169083151502179055506040805190810160405280600981526020017f45554220436861696e0000000000000000000000000000000000000000000000815250600490805190602001906200006c92919062000cdb565b506040805190810160405280600481526020017f455542430000000000000000000000000000000000000000000000000000000081525060059080519060200190620000ba92919062000cdb565b506008600660006101000a81548160ff021916908360ff160217905550600660009054906101000a900460ff1660ff16600a0a633b9aca00026007556000600955600a8060006101000a81548160ff021916908360ff1602179055506002600a60016101000a81548160ff021916908360ff160217905550600a8060026101000a81548160ff021916908360ff160217905550600a8060036101000a81548160ff021916908360ff1602179055506028600a60046101000a81548160ff021916908360ff160217905550601e600a60056101000a81548160ff021916908360ff160217905550620001fa6064620001dd600a60059054906101000a900460ff1660ff1660075462000c516401000000000262001bff179091906401000000009004565b62000c8d6401000000000262001c53179091906401000000009004565b600b556301e13380600c556003600d553480156200021757600080fd5b5060008060008060008060008033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260088190555062000293600c5460085462000ca46401000000000262001c37179091906401000000009004565b9750731d64d9957e54711bf681985db11ac4de6508d2d8600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073e0f58e3b40d5b97aa1c72dd4853cb462e8628386600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507312befdd7d64312353ea0cb0803b14097ee4ce28f601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550738e037d80dd9ff654a17a4a009b49bfb71a992cab601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000443606462000426600a60009054906101000a900460ff1660ff1660075462000c516401000000000262001bff179091906401000000009004565b62000c8d6401000000000262001c53179091906401000000009004565b96506200049f606462000482600a60019054906101000a900460ff1660ff1660075462000c516401000000000262001bff179091906401000000009004565b62000c8d6401000000000262001c53179091906401000000009004565b9550620004fb6064620004de600a60029054906101000a900460ff1660ff1660075462000c516401000000000262001bff179091906401000000009004565b62000c8d6401000000000262001c53179091906401000000009004565b94506200055760646200053a600a60039054906101000a900460ff1660ff1660075462000c516401000000000262001bff179091906401000000009004565b62000c8d6401000000000262001c53179091906401000000009004565b9350620005b3606462000596600a60049054906101000a900460ff1660ff1660075462000c516401000000000262001bff179091906401000000009004565b62000c8d6401000000000262001c53179091906401000000009004565b925060136000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020915086826000018190555087826001018190555060068260020181905550600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007f062953a20affd3765f8c9b9912f55a6eff33254685afa183adbfa5d96b965ecb898b866002015460405180848152602001838152602001828152602001935050505060405180910390a384600080601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a383600080601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3620008eb86600080601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462000cc16401000000000262001a93179091906401000000009004565b600080601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620009d286600080600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462000ca46401000000000262001c37179091906401000000009004565b600080600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef886040518082815260200191505060405180910390a362000b6a8362000b4d8662000b308962000b138d60075462000cc16401000000000262001a93179091906401000000009004565b62000cc16401000000000262001a93179091906401000000009004565b62000cc16401000000000262001a93179091906401000000009004565b62000cc16401000000000262001a93179091906401000000009004565b905080600080600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050505050505062000d8a565b60008083141562000c66576000905062000c87565b818302905081838281151562000c7857fe5b0414151562000c8357fe5b8090505b92915050565b6000818381151562000c9b57fe5b04905092915050565b6000818301905082811015151562000cb857fe5b80905092915050565b600082821115151562000cd057fe5b818303905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000d1e57805160ff191683800117855562000d4f565b8280016001018555821562000d4f579182015b8281111562000d4e57825182559160200191906001019062000d31565b5b50905062000d5e919062000d62565b5090565b62000d8791905b8082111562000d8357600081600090555060010162000d69565b5090565b90565b6127b88062000d9a6000396000f30060806040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610143578063095ea7b3146101d35780631726cbc81461023857806318160ddd1461028f57806323b872dd146102ba578063313ce5671461033f5780633586282414610370578063384711cc1461039f5780633f4ba83a146103f6578063519ee19e1461040d5780635c975abb146104385780635f6ecea01461046757806366188463146104d657806370a082311461053b57806378e97925146105925780638456cb59146105bd57806386d1a69f146105d45780638da5cb5b146105ff57806395d89b4114610656578063a4f82f27146106e6578063a9059cbb1461073d578063d73dd623146107a2578063dd62ed3e14610807578063f2fde38b1461087e575b600080fd5b34801561014f57600080fd5b506101586108c1565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561019857808201518184015260208101905061017d565b50505050905090810190601f1680156101c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101df57600080fd5b5061021e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061095f565b604051808215151515815260200191505060405180910390f35b34801561024457600080fd5b50610279600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061098f565b6040518082815260200191505060405180910390f35b34801561029b57600080fd5b506102a4610a35565b6040518082815260200191505060405180910390f35b3480156102c657600080fd5b50610325600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a3b565b604051808215151515815260200191505060405180910390f35b34801561034b57600080fd5b50610354610a7b565b604051808260ff1660ff16815260200191505060405180910390f35b34801561037c57600080fd5b50610385610a8e565b604051808215151515815260200191505060405180910390f35b3480156103ab57600080fd5b506103e0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610aa3565b6040518082815260200191505060405180910390f35b34801561040257600080fd5b5061040b610bfd565b005b34801561041957600080fd5b50610422610cbd565b6040518082815260200191505060405180910390f35b34801561044457600080fd5b5061044d610cc3565b604051808215151515815260200191505060405180910390f35b34801561047357600080fd5b506104bc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050610cd6565b604051808215151515815260200191505060405180910390f35b3480156104e257600080fd5b50610521600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112fe565b604051808215151515815260200191505060405180910390f35b34801561054757600080fd5b5061057c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061132e565b6040518082815260200191505060405180910390f35b34801561059e57600080fd5b506105a7611376565b6040518082815260200191505060405180910390f35b3480156105c957600080fd5b506105d261137c565b005b3480156105e057600080fd5b506105e961143d565b6040518082815260200191505060405180910390f35b34801561060b57600080fd5b50610614611604565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561066257600080fd5b5061066b61162a565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106ab578082015181840152602081019050610690565b50505050905090810190601f1680156106d85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106f257600080fd5b50610727600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116c8565b6040518082815260200191505060405180910390f35b34801561074957600080fd5b50610788600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611754565b604051808215151515815260200191505060405180910390f35b3480156107ae57600080fd5b506107ed600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611792565b604051808215151515815260200191505060405180910390f35b34801561081357600080fd5b50610868600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117c2565b6040518082815260200191505060405180910390f35b34801561088a57600080fd5b506108bf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611849565b005b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109575780601f1061092c57610100808354040283529160200191610957565b820191906000526020600020905b81548152906001019060200180831161093a57829003601f168201915b505050505081565b6000600360149054906101000a900460ff1615151561097d57600080fd5b61098783836119a1565b905092915050565b6000610999612749565b601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020608060405190810160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050610a2d8160600151610a1f85610aa3565b611a9390919063ffffffff16565b915050919050565b60075481565b60006060600481016000369050141515610a5157fe5b610a5b8584611aac565b1515610a6657600080fd5b610a71858585611bcd565b9150509392505050565b600660009054906101000a900460ff1681565b600080600b5460095410159050801591505090565b600080610aae612749565b600080600062278d009450601360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020608060405190810160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509350610b45858560400151611bff90919063ffffffff16565b9250610b5e838560200151611c3790919063ffffffff16565b91508142101515610b755783600001519550610bf3565b8360200151421115610bee57610bbc85610bae87610ba0886020015142611a9390919063ffffffff16565b611c5390919063ffffffff16565b611bff90919063ffffffff16565b9050610be783610bd9838760000151611bff90919063ffffffff16565b611c5390919063ffffffff16565b9550610bf3565b600095505b5050505050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c5957600080fd5b600360149054906101000a900460ff161515610c7457600080fd5b6000600360146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60095481565b600360149054906101000a900460ff1681565b6000806000806000600360149054906101000a900460ff16151515610cfa57600080fd5b6060600481016000369050141515610d0e57fe5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610db75750600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610dc257600080fd5b600d548710151515610dd357600080fd5b601360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020945060008560000154141515610e2757600080fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561113e57610e8688611c69565b1515610e9157600080fd5b610e9d60095489611c8c565b1515610ea857600080fd5b610eb23389611aac565b1515610ebd57600080fd5b610ee46064610ed6600f8b611bff90919063ffffffff16565b611c5390919063ffffffff16565b9350610ef98489611a9390919063ffffffff16565b92508285600001819055504285600101819055508685600201819055508873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f062953a20affd3765f8c9b9912f55a6eff33254685afa183adbfa5d96b965ecb876000015488600101548b60405180848152602001838152602001828152602001935050505060405180910390a3610fe4886000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a9390919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061103b88600954611c3790919063ffffffff16565b600981905550611092846000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c3790919063ffffffff16565b6000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a36112ee565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156112ed5760136000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020915081600101544210151561120957600080fd5b8761122583600301548460000154611a9390919063ffffffff16565b11151561123157600080fd5b611248888360000154611a9390919063ffffffff16565b8260000181905550878560000181905550816001015485600101819055508685600201819055508873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f062953a20affd3765f8c9b9912f55a6eff33254685afa183adbfa5d96b965ecb876000015488600101548b60405180848152602001838152602001828152602001935050505060405180910390a35b5b6001955050505050509392505050565b6000600360149054906101000a900460ff1615151561131c57600080fd5b6113268383611cb3565b905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60085481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113d857600080fd5b600360149054906101000a900460ff161515156113f457600080fd5b6001600360146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b60008060008060048101600036905014151561145557fe5b61145e3361098f565b9250601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020915060008311156115fb576114c1838360030154611c3790919063ffffffff16565b82600301819055503373ffffffffffffffffffffffffffffffffffffffff167ff6334794522b9db534a812aaae1af828a2e96aac68473b58e36d7d0bfd67477b846040518082815260200191505060405180910390a2611568836000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c3790919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b82935050505090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116c05780601f10611695576101008083540402835291602001916116c0565b820191906000526020600020905b8154815290600101906020018083116116a357829003601f168201915b505050505081565b60006116d2612749565b601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206080604051908101604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090508060000151915050919050565b6000604060048101600036905014151561176a57fe5b6117743384611aac565b151561177f57600080fd5b6117898484611f44565b91505092915050565b6000600360149054906101000a900460ff161515156117b057600080fd5b6117ba8383611f74565b905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118a557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156118e157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000828211151515611aa157fe5b818303905092915050565b6000611ab6612772565b601260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040805190810160405290816000820154815260200160018201548152505090504281602001511115611b81578060000151611b78846000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a9390919063ffffffff16565b10159150611bc6565b826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101591505b5092915050565b6000600360149054906101000a900460ff16151515611beb57600080fd5b611bf6848484612170565b90509392505050565b600080831415611c125760009050611c31565b8183029050818382811515611c2357fe5b04141515611c2d57fe5b8090505b92915050565b60008183019050828110151515611c4a57fe5b80905092915050565b60008183811515611c6057fe5b04905092915050565b60008060008314159050808015611c845750611c83610a8e565b5b915050919050565b600080600b54611ca58486611c3790919063ffffffff16565b111590508091505092915050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115611dc4576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e58565b611dd78382611a9390919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600360149054906101000a900460ff16151515611f6257600080fd5b611f6c838361252a565b905092915050565b600061200582600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c3790919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156121ad57600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156121fa57600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561228557600080fd5b6122d6826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a9390919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612369826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c3790919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061243a82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a9390919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561256757600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156125b457600080fd5b612605826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a9390919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612698826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c3790919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b608060405190810160405280600081526020016000815260200160008152602001600081525090565b6040805190810160405280600081526020016000815250905600a165627a7a72305820d2c7af40170f7efe2fb2530d037718d38fbe6c154d39a3b993c550311464c5830029"
}