{
  "address": "0x4597cbccecb17aadfb3344a5dccf6a5db8768cff",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PonyToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-30\n*/\n\npragma solidity ^0.4.18;\n\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n//\n// Borrowed from MiniMeToken\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Owned {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n}\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and an\n// initial fixed supply\n// ----------------------------------------------------------------------------\ncontract PonyToken is ERC20Interface, Pausable {\n    using SafeMath for uint;\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint public _totalSupply;\n    uint public _currentSupply;\n    mapping(address => bool) _protect;\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n    event Burn(address indexed burner, uint256 value);\n    \n    \n    /** ------------------------------------------------------------------------\n     * Constructor\n     * ------------------------------------------------------------------------\n    */ \n    function PonyToken() public {\n        symbol = \"Pony\";\n        name = \"Platform of Open Nodes Integrated\";\n        decimals = 18;\n        _totalSupply = 1000000000 * 10**uint256(decimals);\n        emit Transfer(address(0), owner, _totalSupply);\n    }\n\n    // check user in protect\n    modifier whenNotInProtect(){\n        require(_protect[msg.sender] == false);\n        _;\n    }\n\n    // protect account\n    function accountProtect(address _account) public onlyOwner{\n        require(_account != 0);\n        _protect[_account] = true;\n    }\n\n    // unprotect account\n    function accountUnProtect(address _account) public onlyOwner{\n        require(_account != 0);\n        _protect[_account] = false;\n    }\n\n    /**\n    * @dev Burns a specific amount of tokens.\n    * @param _value The amount of token to be burned.\n    */\n    function burn(uint256 _value) public whenNotInProtect{\n        _burn(msg.sender, _value);\n    }\n\n    /**\n    * @dev Internal function that burns an amount of the token of a given\n    * account.\n    * @param _account The account whose tokens will be burnt.\n    * @param _amount The amount that will be burnt.\n    */\n    function _burn(address _account, uint256 _amount) internal {\n        require(_account != 0);\n        require(_amount <= balances[_account]);\n        require(_totalSupply > _amount);\n        _totalSupply = _totalSupply.sub(_amount);\n        balances[_account] = balances[_account].sub(_amount);\n        emit Transfer(_account, address(0), _amount);\n        emit Burn(_account, _amount);\n    }\n\n    /**\n    * @dev Burns a specific amount of tokens from the target address and decrements allowance\n    * @param _from address The address which you want to send tokens from\n    * @param _value uint256 The amount of token to be burned\n    */\n    function burnFrom(address _from, uint256 _value) public {\n        _burnFrom(_from, _value);\n    }\n\n\n    /**\n    * @dev Internal function that burns an amount of the token of a given\n    * account, deducting from the sender's allowance for said account. Uses the\n    * internal _burn function.\n    * @param _account The account whose tokens will be burnt.\n    * @param _amount The amount that will be burnt.\n    */\n    function _burnFrom(address _account, uint256 _amount) internal {\n        require(_amount <= allowed[_account][msg.sender]);\n\n        allowed[_account][msg.sender] = allowed[_account][msg.sender].sub(_amount);\n        _burn(_account, _amount);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public constant returns (uint) {\n        return _totalSupply;\n    }\n\n    // ------------------------------------------------------------------------\n    // Current supply\n    // ------------------------------------------------------------------------\n    function currentSupply() public constant returns (uint) {\n        return _currentSupply;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to `to` account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens) public whenNotPaused whenNotInProtect returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    //\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces \n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public whenNotPaused whenNotInProtect returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer `tokens` from the `from` account to the `to` account\n    // \n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the `from` account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens) public whenNotPaused returns (bool success) {\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account. The `spender` contract function\n    // `receiveApproval(...)` is then executed\n    // ------------------------------------------------------------------------\n    function approveAndCall(address spender, uint tokens, bytes data) public whenNotPaused returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Don't accept ETH\n    // ------------------------------------------------------------------------\n    function () public payable {\n        revert();\n    }\n\n\n    // @dev increase GDB's current supply\n    function increaseSupply (uint256 _value, address _to) onlyOwner whenNotPaused external {\n        require(_value + _currentSupply < _totalSupply);\n        _currentSupply = _currentSupply.add(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(address(0x0), _to, _value);\n    }\n\n    /**\n     * Transfer `tokens` from the `msg.sender` account to the `_receivers` accounts\n     */\n    function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused whenNotInProtect returns (uint256) {\n        uint cnt = _receivers.length;\n        uint256 amount = uint256(cnt) .mul(_value);\n        \n        require(cnt > 0 && cnt <= 20);\n        require(_value > 0 && balances[msg.sender] >= amount);\n        require(amount >= _value);\n\n        balances[msg.sender] = balances[msg.sender].sub(amount);\n\n        for (uint i = 0; i < cnt; i++) {\n            balances[_receivers[i]] = balances[_receivers[i]].add(_value);\n        }\n        emit Transfer(msg.sender, address(0), amount);    \n        return amount;\n    }\n    \n}\n\n\ncontract TokenTimelock {\n    ERC20Interface public token;\n    // beneficiary of tokens after they are released\n    address public beneficiary;\n\n    // timestamp when token release is enabled\n    uint256 public releaseTime;\n\n    constructor(ERC20Interface _token, address _beneficiary, uint256 _releaseTime) public\n    {\n        // solium-disable-next-line security/no-block-members\n        require(_releaseTime > block.timestamp);\n        token = _token;\n        beneficiary = _beneficiary;\n        releaseTime = _releaseTime;\n    }\n\n    /**\n    * @notice Transfers tokens held by timelock to beneficiary.\n    */\n    function release() public {\n        // solium-disable-next-line security/no-block-members\n        require(block.timestamp >= releaseTime);\n\n        uint256 amount = token.balanceOf(address(this));\n        require(amount > 0);\n\n        token.transfer(beneficiary, amount);\n    }\n}",
  "bytecode": ""
}