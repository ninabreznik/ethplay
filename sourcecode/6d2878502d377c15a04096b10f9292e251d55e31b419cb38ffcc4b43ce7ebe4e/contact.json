{
  "address": "0x925b840bf28f3f115c0da5941fd924ecfffdb123",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MUB",
  "compilerVersion": "v0.5.9+commit.e560f70d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-05\n*/\n\n/**\n *Submitted for verification at Etherscan.io on 2019-02-28\n*/\n\npragma solidity >=0.5.0 <0.6.0;\n\n/**\n * @title SafeMath for uint256\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMathUint256 {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"SafeMath: Multiplier exception\");\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b; // Solidity automatically throws when dividing by 0\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: Subtraction exception\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        require(c >= a, \"SafeMath: Addition exception\");\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: Modulo exception\");\n        return a % b;\n    }\n\n}\n\n/**\n * @title SafeMath for uint8\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMathUint8 {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint8 a, uint8 b) internal pure returns (uint8 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"SafeMath: Multiplier exception\");\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint8 a, uint8 b) internal pure returns (uint8) {\n        return a / b; // Solidity automatically throws when dividing by 0\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint8 a, uint8 b) internal pure returns (uint8) {\n        require(b <= a, \"SafeMath: Subtraction exception\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint8 a, uint8 b) internal pure returns (uint8 c) {\n        c = a + b;\n        require(c >= a, \"SafeMath: Addition exception\");\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint8 a, uint8 b) internal pure returns (uint8) {\n        require(b != 0, \"SafeMath: Modulo exception\");\n        return a % b;\n    }\n\n}\n\n\ncontract Ownership {\n    address payable public owner;\n    address payable public pendingOwner;\n\n    event OwnershipTransferred (address indexed from, address indexed to);\n\n    constructor () public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require (msg.sender == owner, \"Ownership: Access denied\");\n        _;\n    }\n\n    function transferOwnership (address payable _pendingOwner) public\n        onlyOwner\n    {\n        pendingOwner = _pendingOwner;\n    }\n\n    function acceptOwnership () public\n    {\n        require (msg.sender == pendingOwner, \"Ownership: Only new owner is allowed\");\n\n        emit OwnershipTransferred (owner, pendingOwner);\n\n        owner = pendingOwner;\n        pendingOwner = address(0);\n    }\n\n}\n\n\n/**\n * @title Controllable contract\n * @dev Implementation of the controllable operations\n */\ncontract Controllable is Ownership {\n\n    bool public stopped;\n    mapping (address => bool) public freezeAddresses;\n\n    event Paused();\n    event Resumed();\n\n    event FreezeAddress(address indexed addressOf);\n    event UnfreezeAddress(address indexed addressOf);\n\n    modifier onlyActive(address _sender) {\n        require(!freezeAddresses[_sender], \"Controllable: Not active\");\n        _;\n    }\n\n    modifier isUsable {\n        require(!stopped, \"Controllable: Paused\");\n        _;\n    }\n\n    function pause () public\n        onlyOwner\n    {\n        stopped = true;\n        emit Paused ();\n    }\n    \n    function resume () public\n        onlyOwner\n    {\n        stopped = false;\n        emit Resumed ();\n    }\n\n    function freezeAddress(address _addressOf) public\n        onlyOwner\n        returns (bool)\n    {\n        if (!freezeAddresses[_addressOf]) {\n            freezeAddresses[_addressOf] = true;\n            emit FreezeAddress(_addressOf);\n        }\n\n        return true;\n    }\n\t\n    function unfreezeAddress(address _addressOf) public\n        onlyOwner\n        returns (bool)\n    {\n        if (freezeAddresses[_addressOf]) {\n            delete freezeAddresses[_addressOf];\n            emit UnfreezeAddress(_addressOf);\n        }\n\n        return true;\n    }\n\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic, Controllable {\n    using SafeMathUint256 for uint256;\n\n    mapping(address => uint256) balances;\n\n    uint256 public totalSupply;\n\n    constructor(uint256 _initialSupply) public\n    {\n        totalSupply = _initialSupply;\n\n        if (0 < _initialSupply) {\n            balances[msg.sender] = _initialSupply;\n            emit Transfer(address(0), msg.sender, _initialSupply);\n        }\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public\n        isUsable\n        onlyActive(msg.sender)\n        onlyActive(_to)\n        returns (bool)\n    {\n        require(0 < _value, \"BasicToken.transfer: Zero value\");\n        require(_value <= balances[msg.sender], \"BasicToken.transfer: Insufficient fund\");\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view\n        returns (uint256 balance)\n    {\n        return balances[_owner];\n    }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public\n        isUsable\n        onlyActive(msg.sender)\n        onlyActive(_from)\n        onlyActive(_to)\n        returns (bool)\n    {\n        require(0 < _value, \"StandardToken.transferFrom: Zero value\");\n        require(_value <= balances[_from], \"StandardToken.transferFrom: Insufficient fund\");\n        require(_value <= allowed[_from][msg.sender], \"StandardToken.transferFrom: Insufficient allowance\");\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    *\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public\n        isUsable\n        onlyActive(msg.sender)\n        onlyActive(_spender)\n        returns (bool)\n    {\n        require(0 < _value, \"StandardToken.approve: Zero value\");\n\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(address _owner, address _spender) public view\n        returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    *\n    * approve should be called when allowed[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _addedValue The amount of tokens to increase the allowance by.\n    */\n    function increaseApproval(address _spender, uint256 _addedValue) public\n        isUsable\n        onlyActive(msg.sender)\n        onlyActive(_spender)\n        returns (bool)\n    {\n        require(0 < _addedValue, \"StandardToken.increaseApproval: Zero value\");\n\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    *\n    * approve should be called when allowed[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n    */\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public\n        isUsable\n        onlyActive(msg.sender)\n        onlyActive(_spender)\n        returns (bool)\n    {\n        require(0 < _subtractedValue, \"StandardToken.decreaseApproval: Zero value\");\n\n        uint256 oldValue = allowed[msg.sender][_spender];\n\n        if (_subtractedValue > oldValue)\n            allowed[msg.sender][_spender] = 0;\n        else\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\n\ncontract ApprovalReceiver {\n    function receiveApproval(address _from, uint256 _value, address _tokenContract, bytes memory _extraData) public;\n}\n\ncontract MUB is StandardToken {\n    using SafeMathUint256 for uint256;\n\n    event Freeze(address indexed from, uint256 value);\n    event Unfreeze(address indexed from, uint256 value);\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    mapping (address => uint256) public freezeOf;\n\n    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _initialSupply) public\n        BasicToken(_initialSupply)\n    {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    /**\n    * @dev Freeze holder balance\n    *\n    * @param _from The address which will be freeze\n    * @param _value The amount of tokens to be freeze\n    */\n    function freeze(address _from, uint256 _value) external\n        onlyOwner\n        returns (bool)\n    {\n        require(_value <= balances[_from], \"RLACoin.freeze: Insufficient fund\");\n\n        balances[_from] = balances[_from].sub(_value);\n        freezeOf[_from] = freezeOf[_from].add(_value);\n        emit Freeze(_from, _value);\n        return true;\n    }\n\t\n    /**\n    * @dev Unfreeze holder balance\n    *\n    * @param _from The address which will be unfreeze\n    * @param _value The amount of tokens to be unfreeze\n    */\n    function unfreeze(address _from, uint256 _value) external\n        onlyOwner\n        returns (bool)\n    {\n        require(_value <= freezeOf[_from], \"RLACoin.unfreeze: Insufficient fund\");\n\n        freezeOf[_from] = freezeOf[_from].sub(_value);\n        balances[_from] = balances[_from].add(_value);\n        emit Unfreeze(_from, _value);\n        return true;\n    }\n\n    /**\n     * @dev Allocate allowance and perform contract call\n     *\n     * @param _spender The spender address\n     * @param _value The allowance value\n     * @param _extraData The function call data\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes calldata _extraData) external\n        isUsable\n        returns (bool)\n    {\n        // Give allowance to spender (previous approved allowances will be clear)\n        approve(_spender, _value);\n\n        ApprovalReceiver(_spender).receiveApproval(msg.sender, _value, address(this), _extraData);\n        return true;\n    }\n\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405162003a9d38038062003a9d833981810160405260808110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b828101905060208101848111156200006757600080fd5b81518560018202830111640100000000821117156200008557600080fd5b50509291906020018051640100000000811115620000a257600080fd5b82810190506020810184811115620000b957600080fd5b8151856001820283011164010000000082111715620000d757600080fd5b5050929190602001805190602001909291908051906020019092919050505080336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806004819055508060001015620001f35780600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5083600690805190602001906200020c9291906200024b565b508260079080519060200190620002259291906200024b565b5081600860006101000a81548160ff021916908360ff16021790555050505050620002fa565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028e57805160ff1916838001178555620002bf565b82800160010185558215620002bf579182015b82811115620002be578251825591602001919060010190620002a1565b5b509050620002ce9190620002d2565b5090565b620002f791905b80821115620002f3576000816000905550600101620002d9565b5090565b90565b613793806200030a6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80637b46b80b116100de578063cae9ca5111610097578063dd62ed3e11610071578063dd62ed3e14610857578063e30c3978146108cf578063ede55f5914610919578063f2fde38b1461097557610173565b8063cae9ca51146106de578063cd4217c114610799578063d73dd623146107f157610173565b80637b46b80b146104df5780638456cb59146105455780638da5cb5b1461054f57806395d89b4114610599578063a9059cbb1461061c578063bfb805471461068257610173565b8063313ce56711610130578063313ce5671461037557806351e946d51461039957806366188463146103f557806370a082311461045b57806375f12b21146104b357806379ba5097146104d557610173565b8063046f7da21461017857806306fdde0314610182578063095ea7b31461020557806318160ddd1461026b57806323b872dd1461028957806324bce60c1461030f575b600080fd5b6101806109b9565b005b61018a610ac4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ca5780820151818401526020810190506101af565b50505050905090810190601f1680156101f75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102516004803603604081101561021b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b62565b604051808215151515815260200191505060405180910390f35b610273610eb4565b6040518082815260200191505060405180910390f35b6102f56004803603606081101561029f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610eba565b604051808215151515815260200191505060405180910390f35b61035b6004803603604081101561032557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115f4565b604051808215151515815260200191505060405180910390f35b61037d6118d2565b604051808260ff1660ff16815260200191505060405180910390f35b6103db600480360360208110156103af57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118e5565b604051808215151515815260200191505060405180910390f35b6104416004803603604081101561040b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a9f565b604051808215151515815260200191505060405180910390f35b61049d6004803603602081101561047157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f91565b6040518082815260200191505060405180910390f35b6104bb611fda565b604051808215151515815260200191505060405180910390f35b6104dd611fed565b005b61052b600480360360408110156104f557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506121d6565b604051808215151515815260200191505060405180910390f35b61054d6124b4565b005b6105576125be565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105a16125e3565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105e15780820151818401526020810190506105c6565b50505050905090810190601f16801561060e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6106686004803603604081101561063257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612681565b604051808215151515815260200191505060405180910390f35b6106c46004803603602081101561069857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b31565b604051808215151515815260200191505060405180910390f35b61077f600480360360608110156106f457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561073b57600080fd5b82018360208201111561074d57600080fd5b8035906020019184600183028401116401000000008311171561076f57600080fd5b9091929391929390505050612ce3565b604051808215151515815260200191505060405180910390f35b6107db600480360360208110156107af57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612e86565b6040518082815260200191505060405180910390f35b61083d6004803603604081101561080757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612e9e565b604051808215151515815260200191505060405180910390f35b6108b96004803603604081101561086d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506132fa565b6040518082815260200191505060405180910390f35b6108d7613381565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61095b6004803603602081101561092f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506133a7565b604051808215151515815260200191505060405180910390f35b6109b76004803603602081101561098b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506133c7565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a7b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4f776e6572736869703a204163636573732064656e696564000000000000000081525060200191505060405180910390fd5b6000600160146101000a81548160ff0219169083151502179055507f62451d457bc659158be6e6247f56ec1df424a5c7597f71c20c2bc44e0965c8f960405160405180910390a1565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b5a5780601f10610b2f57610100808354040283529160200191610b5a565b820191906000526020600020905b815481529060010190602001808311610b3d57829003601f168201915b505050505081565b6000600160149054906101000a900460ff1615610be7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f436f6e74726f6c6c61626c653a2050617573656400000000000000000000000081525060200191505060405180910390fd5b33600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610ca8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e74726f6c6c61626c653a204e6f7420616374697665000000000000000081525060200191505060405180910390fd5b83600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610d69576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e74726f6c6c61626c653a204e6f7420616374697665000000000000000081525060200191505060405180910390fd5b83600010610dc2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806136ca6021913960400191505060405180910390fd5b83600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925866040518082815260200191505060405180910390a360019250505092915050565b60045481565b6000600160149054906101000a900460ff1615610f3f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f436f6e74726f6c6c61626c653a2050617573656400000000000000000000000081525060200191505060405180910390fd5b33600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611000576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e74726f6c6c61626c653a204e6f7420616374697665000000000000000081525060200191505060405180910390fd5b84600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156110c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e74726f6c6c61626c653a204e6f7420616374697665000000000000000081525060200191505060405180910390fd5b84600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611182576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e74726f6c6c61626c653a204e6f7420616374697665000000000000000081525060200191505060405180910390fd5b846000106111db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806135d76026913960400191505060405180910390fd5b600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054851115611273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d81526020018061362f602d913960400191505060405180910390fd5b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054851115611348576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001806135fd6032913960400191505060405180910390fd5b61139a85600360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546134cd90919063ffffffff16565b600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061142f85600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461355090919063ffffffff16565b600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061150185600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546134cd90919063ffffffff16565b600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a3600193505050509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146116b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4f776e6572736869703a204163636573732064656e696564000000000000000081525060200191505060405180910390fd5b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115611750576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806136a96021913960400191505060405180910390fd5b6117a282600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546134cd90919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061183782600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461355090919063ffffffff16565b600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167ff97a274face0b5517365ad396b1fdba6f68bd3135ef603e44272adba3af5a1e0836040518082815260200191505060405180910390a26001905092915050565b600860009054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4f776e6572736869703a204163636573732064656e696564000000000000000081525060200191505060405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611a96576001600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f1aa660498c83ea285bc55e4cfc00afcaa7120798db87b74f3c0d7c6e001bc39260405160405180910390a25b60019050919050565b6000600160149054906101000a900460ff1615611b24576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f436f6e74726f6c6c61626c653a2050617573656400000000000000000000000081525060200191505060405180910390fd5b33600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611be5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e74726f6c6c61626c653a204e6f7420616374697665000000000000000081525060200191505060405180910390fd5b83600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611ca6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e74726f6c6c61626c653a204e6f7420616374697665000000000000000081525060200191505060405180910390fd5b83600010611cff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061367f602a913960400191505060405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080851115611e0f576000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ea3565b611e2285826134cd90919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001935050505092915050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160149054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612093576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806136eb6024913960400191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461229a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4f776e6572736869703a204163636573732064656e696564000000000000000081525060200191505060405180910390fd5b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115612332576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061365c6023913960400191505060405180910390fd5b61238482600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546134cd90919063ffffffff16565b600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061241982600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461355090919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f2cfce4af01bcb9d6cf6c84ee1b7c491100b8695368264146a94d71e10a63083f836040518082815260200191505060405180910390a26001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612576576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4f776e6572736869703a204163636573732064656e696564000000000000000081525060200191505060405180910390fd5b60018060146101000a81548160ff0219169083151502179055507f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75260405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156126795780601f1061264e57610100808354040283529160200191612679565b820191906000526020600020905b81548152906001019060200180831161265c57829003601f168201915b505050505081565b6000600160149054906101000a900460ff1615612706576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f436f6e74726f6c6c61626c653a2050617573656400000000000000000000000081525060200191505060405180910390fd5b33600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156127c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e74726f6c6c61626c653a204e6f7420616374697665000000000000000081525060200191505060405180910390fd5b83600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612888576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e74726f6c6c61626c653a204e6f7420616374697665000000000000000081525060200191505060405180910390fd5b836000106128fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4261736963546f6b656e2e7472616e736665723a205a65726f2076616c75650081525060200191505060405180910390fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054841115612996576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806137396026913960400191505060405180910390fd5b6129e884600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546134cd90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612a7d84600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461355090919063ffffffff16565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612bf5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4f776e6572736869703a204163636573732064656e696564000000000000000081525060200191505060405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612cda57600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690558173ffffffffffffffffffffffffffffffffffffffff167f150465b020dfc06a59269da94ed66db9b65a516cf4fdd5f583b0f12752339bbe60405160405180910390a25b60019050919050565b6000600160149054906101000a900460ff1615612d68576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f436f6e74726f6c6c61626c653a2050617573656400000000000000000000000081525060200191505060405180910390fd5b612d728585610b62565b508473ffffffffffffffffffffffffffffffffffffffff16638f4ffcb133863087876040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015612e6257600080fd5b505af1158015612e76573d6000803e3d6000fd5b5050505060019050949350505050565b60096020528060005260406000206000915090505481565b6000600160149054906101000a900460ff1615612f23576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f436f6e74726f6c6c61626c653a2050617573656400000000000000000000000081525060200191505060405180910390fd5b33600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612fe4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e74726f6c6c61626c653a204e6f7420616374697665000000000000000081525060200191505060405180910390fd5b83600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156130a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e74726f6c6c61626c653a204e6f7420616374697665000000000000000081525060200191505060405180910390fd5b836000106130fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061370f602a913960400191505060405180910390fd5b61318d84600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461355090919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a360019250505092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613489576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4f776e6572736869703a204163636573732064656e696564000000000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600082821115613545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f536166654d6174683a205375627472616374696f6e20657863657074696f6e0081525060200191505060405180910390fd5b818303905092915050565b60008183019050828110156135cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f536166654d6174683a204164646974696f6e20657863657074696f6e0000000081525060200191505060405180910390fd5b8090509291505056fe5374616e64617264546f6b656e2e7472616e7366657246726f6d3a205a65726f2076616c75655374616e64617264546f6b656e2e7472616e7366657246726f6d3a20496e73756666696369656e7420616c6c6f77616e63655374616e64617264546f6b656e2e7472616e7366657246726f6d3a20496e73756666696369656e742066756e64524c41436f696e2e756e667265657a653a20496e73756666696369656e742066756e645374616e64617264546f6b656e2e6465637265617365417070726f76616c3a205a65726f2076616c7565524c41436f696e2e667265657a653a20496e73756666696369656e742066756e645374616e64617264546f6b656e2e617070726f76653a205a65726f2076616c75654f776e6572736869703a204f6e6c79206e6577206f776e657220697320616c6c6f7765645374616e64617264546f6b656e2e696e637265617365417070726f76616c3a205a65726f2076616c75654261736963546f6b656e2e7472616e736665723a20496e73756666696369656e742066756e64a265627a7a72305820e3b745ab8d7a4ae1c24fc7218c61f49019484764f2f7d37bfefb75f458fe9e9064736f6c63430005090032000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000004d8c55aefb8c05b5c00000000000000000000000000000000000000000000000000000000000000000000134d616b657320596f752042656175746966756c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d55420000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000004d8c55aefb8c05b5c00000000000000000000000000000000000000000000000000000000000000000000134d616b657320596f752042656175746966756c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d55420000000000000000000000000000000000000000000000000000000000"
}