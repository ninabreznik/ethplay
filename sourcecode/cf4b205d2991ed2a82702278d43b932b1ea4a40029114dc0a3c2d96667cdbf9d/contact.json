{
  "address": "0x921a5dce3dfed5cccfbb2e593f2978533bc66110",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Worldopo Token",
  "contractName": "Token",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-23\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract AddressesFilterFeature is Ownable {\n\n  mapping(address => bool) public allowedAddresses;\n\n  function addAllowedAddress(address allowedAddress) public onlyOwner {\n    allowedAddresses[allowedAddress] = true;\n  }\n\n  function removeAllowedAddress(address allowedAddress) public onlyOwner {\n    allowedAddresses[allowedAddress] = false;\n  }\n\n}\n\ncontract ValueBonusFeature is Ownable {\n\n  using SafeMath for uint;\n\n  uint percentRate = 1000;\n\n  struct ValueBonus {\n    uint from;\n    uint bonus;\n  }\n\n  ValueBonus[] public valueBonuses;\n\n  function addValueBonus(uint from, uint bonus) public onlyOwner {\n    valueBonuses.push(ValueBonus(from, bonus));\n  }\n\n  function getValueBonusTokens(uint tokens, uint invested) public view returns(uint) {\n    uint valueBonus = getValueBonus(invested);\n    if(valueBonus == 0) {\n      return 0;\n    }\n    return tokens.mul(valueBonus).div(percentRate);\n  }\n\n  function getValueBonus(uint value) public view returns(uint) {\n    uint bonus = 0;\n    for(uint i = 0; i < valueBonuses.length; i++) {\n      if(value >= valueBonuses[i].from) {\n        bonus = valueBonuses[i].bonus;\n      } else {\n        return bonus;\n      }\n    }\n    return bonus;\n  }\n\n}\n\ncontract WalletProvider is Ownable {\n\n  address public wallet;\n\n  function setWallet(address newWallet) public onlyOwner {\n    wallet = newWallet;\n  }\n\n}\n\ncontract WalletsPercents is Ownable {\n\n  address[] public wallets;\n\n  mapping (address => uint) percents;\n\n  function addWallet(address wallet, uint percent) public onlyOwner {\n    wallets.push(wallet);\n    percents[wallet] = percent;\n  }\n \n  function cleanWallets() public onlyOwner {\n    wallets.length = 0;\n  }\n\n\n}\n\ncontract PercentRateProvider {\n\n  uint public percentRate = 100;\n\n}\n\n\n\n\ncontract PercentRateFeature is Ownable, PercentRateProvider {\n\n  function setPercentRate(uint newPercentRate) public onlyOwner {\n    percentRate = newPercentRate;\n  }\n\n}\n\n\ncontract InvestedProvider is Ownable {\n\n  uint public invested;\n\n}\n\ncontract ReceivingContractCallback {\n\n  function tokenFallback(address _from, uint _value) public;\n\n}\n\ncontract RetrieveTokensFeature is Ownable {\n\n  function retrieveTokens(address to, address anotherToken) public onlyOwner {\n    ERC20 alienToken = ERC20(anotherToken);\n    alienToken.transfer(to, alienToken.balanceOf(this));\n  }\n\n}\n\ncontract StagedCrowdsale is Ownable {\n\n  using SafeMath for uint;\n\n  struct Milestone {\n    uint period;\n    uint bonus;\n  }\n\n  uint public totalPeriod;\n\n  Milestone[] public milestones;\n\n  function milestonesCount() public view returns(uint) {\n    return milestones.length;\n  }\n\n  function addMilestone(uint period, uint bonus) public onlyOwner {\n    require(period > 0);\n    milestones.push(Milestone(period, bonus));\n    totalPeriod = totalPeriod.add(period);\n  }\n\n  function removeMilestone(uint8 number) public onlyOwner {\n    require(number < milestones.length);\n    Milestone storage milestone = milestones[number];\n    totalPeriod = totalPeriod.sub(milestone.period);\n\n    delete milestones[number];\n\n    for (uint i = number; i < milestones.length - 1; i++) {\n      milestones[i] = milestones[i+1];\n    }\n\n    milestones.length--;\n  }\n\n  function changeMilestone(uint8 number, uint period, uint bonus) public onlyOwner {\n    require(number < milestones.length);\n    Milestone storage milestone = milestones[number];\n\n    totalPeriod = totalPeriod.sub(milestone.period);\n\n    milestone.period = period;\n    milestone.bonus = bonus;\n\n    totalPeriod = totalPeriod.add(period);\n  }\n\n  function insertMilestone(uint8 numberAfter, uint period, uint bonus) public onlyOwner {\n    require(numberAfter < milestones.length);\n\n    totalPeriod = totalPeriod.add(period);\n\n    milestones.length++;\n\n    for (uint i = milestones.length - 2; i > numberAfter; i--) {\n      milestones[i + 1] = milestones[i];\n    }\n\n    milestones[numberAfter + 1] = Milestone(period, bonus);\n  }\n\n  function clearMilestones() public onlyOwner {\n    require(milestones.length > 0);\n    for (uint i = 0; i < milestones.length; i++) {\n      delete milestones[i];\n    }\n    milestones.length -= milestones.length;\n    totalPeriod = 0;\n  }\n\n  function lastSaleDate(uint start) public view returns(uint) {\n    return start + totalPeriod * 1 days;\n  }\n\n  function currentMilestone(uint start) public view returns(uint) {\n    uint previousDate = start;\n    for(uint i=0; i < milestones.length; i++) {\n      if(now >= previousDate && now < previousDate + milestones[i].period * 1 days) {\n        return i;\n      }\n      previousDate = previousDate.add(milestones[i].period * 1 days);\n    }\n    revert();\n  }\n\n}\n\n\ncontract TokenProvider is Ownable {\n\n  MintableToken public token;\n\n  function setToken(address newToken) public onlyOwner {\n    token = MintableToken(newToken);\n  }\n\n}\n\ncontract MintableToken is AddressesFilterFeature, StandardToken {\n\n  event Mint(address indexed to, uint256 amount);\n\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n  address public saleAgent;\n\n  mapping (address => uint) public initialBalances;\n\n  uint public vestingPercent;\n\n  uint public constant percentRate = 100;\n\n  modifier notLocked(address _from, uint _value) {\n    if(!(_from == owner || _from == saleAgent || allowedAddresses[_from])) {\n      require(mintingFinished);\n      if((vestingPercent <= percentRate) && (vestingPercent != 0)) {\n        uint minLockedBalance = initialBalances[_from].mul(vestingPercent).div(percentRate);\n        require(minLockedBalance <= balances[_from].sub(_value));\n      }\n    }\n    _;\n  }\n\n  function setVestingPercent(uint newVestingPercent) public {\n    require(msg.sender == saleAgent || msg.sender == owner);\n    vestingPercent = newVestingPercent;\n  }\n\n  function setSaleAgent(address newSaleAgnet) public {\n    require(msg.sender == saleAgent || msg.sender == owner);\n    saleAgent = newSaleAgnet;\n  }\n\n  function mint(address _to, uint256 _amount) public returns (bool) {\n    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\n    \n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n\n    initialBalances[_to] = balances[_to];\n\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public returns (bool) {\n    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n\n  function transfer(address _to, uint256 _value) public notLocked(msg.sender, _value)  returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address from, address to, uint256 value) public notLocked(from, value) returns (bool) {\n    return super.transferFrom(from, to, value);\n  }\n\n}\n\ncontract Token is MintableToken {\n\n  string public constant name = \"Worldopoly\";\n\n  string public constant symbol = \"WPT\";\n\n  uint32 public constant decimals = 18;\n\n  mapping(address => bool)  public registeredCallbacks;\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    return processCallback(super.transfer(_to, _value), msg.sender, _to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    return processCallback(super.transferFrom(_from, _to, _value), _from, _to, _value);\n  }\n\n  function registerCallback(address callback) public onlyOwner {\n    registeredCallbacks[callback] = true;\n  }\n\n  function deregisterCallback(address callback) public onlyOwner {\n    registeredCallbacks[callback] = false;\n  }\n\n  function processCallback(bool result, address from, address to, uint value) internal returns(bool) {\n    if (result && registeredCallbacks[to]) {\n      ReceivingContractCallback targetCallback = ReceivingContractCallback(to);\n      targetCallback.tokenFallback(from, value);\n    }\n    return result;\n  }\n\n}\n\ncontract MintTokensInterface is TokenProvider {\n\n  function mintTokens(address to, uint tokens) internal;\n\n}\n\ncontract MintTokensFeature is MintTokensInterface {\n\n  function mintTokens(address to, uint tokens) internal {\n    token.mint(to, tokens);\n  }\n\n}\n\ncontract CommonSale is PercentRateFeature, InvestedProvider, WalletProvider, RetrieveTokensFeature, MintTokensFeature {\n\n  using SafeMath for uint;\n\n  address public directMintAgent;\n\n  uint public price;\n\n  uint public start;\n\n  uint public minInvestedLimit;\n\n  uint public hardcap;\n\n  modifier isUnderHardcap() {\n    require(invested <= hardcap);\n    _;\n  }\n\n  function setHardcap(uint newHardcap) public onlyOwner {\n    hardcap = newHardcap;\n  }\n\n  modifier onlyDirectMintAgentOrOwner() {\n    require(directMintAgent == msg.sender || owner == msg.sender);\n    _;\n  }\n\n  modifier minInvestLimited(uint value) {\n    require(value >= minInvestedLimit);\n    _;\n  }\n\n  function setStart(uint newStart) public onlyOwner {\n    start = newStart;\n  }\n\n  function setMinInvestedLimit(uint newMinInvestedLimit) public onlyOwner {\n    minInvestedLimit = newMinInvestedLimit;\n  }\n\n  function setDirectMintAgent(address newDirectMintAgent) public onlyOwner {\n    directMintAgent = newDirectMintAgent;\n  }\n\n  function setPrice(uint newPrice) public onlyDirectMintAgentOrOwner {\n    price = newPrice;\n  }\n\n  function calculateTokens(uint _invested) internal returns(uint);\n\n  function mintTokensExternal(address to, uint tokens) public onlyDirectMintAgentOrOwner {\n    mintTokens(to, tokens);\n  }\n\n  function endSaleDate() public view returns(uint);\n\n  function mintTokensByETHExternal(address to, uint _invested) public onlyDirectMintAgentOrOwner returns(uint) {\n    updateInvested(_invested);\n    return mintTokensByETH(to, _invested);\n  }\n\n  function mintTokensByETH(address to, uint _invested) internal isUnderHardcap returns(uint) {\n    uint tokens = calculateTokens(_invested);\n    mintTokens(to, tokens);\n    return tokens;\n  }\n\n  function transferToWallet(uint value) internal {\n    wallet.transfer(value);\n  }\n\n  function updateInvested(uint value) internal {\n    invested = invested.add(value);\n  }\n\n  function fallback() internal minInvestLimited(msg.value) returns(uint) {\n    require(now >= start && now < endSaleDate());\n    transferToWallet(msg.value);\n    updateInvested(msg.value);\n    return mintTokensByETH(msg.sender, msg.value);\n  }\n\n  function () public payable {\n    fallback();\n  }\n\n}\n\ncontract AssembledCommonSale is ValueBonusFeature, CommonSale {\n\n}\n\n\n\ncontract DevFeeFeature is CommonSale {\n\n  using SafeMath for uint;\n\n  uint public constant devLimit = 19500000000000000000;\n\n  uint public devBalance;\n\n  address public constant devWallet = 0xEA15Adb66DC92a4BbCcC8Bf32fd25E2e86a2A770;\n\n  function transferToWallet(uint value) internal {\n    uint toDev = devLimit - devBalance;\n    if(toDev > 0) {\n      if(toDev > value) {\n        toDev = value;\n      } else { \n        wallet.transfer(value.sub(toDev));\n      }\n      devWallet.transfer(toDev);\n      devBalance = devBalance.add(toDev);\n    } else {\n      wallet.transfer(value);\n    }\n  }\n\n}\n\ncontract ERC20Cutted {\n    \n  function balanceOf(address who) public constant returns (uint256);\n  \n  function transfer(address to, uint256 value) public returns (bool);\n  \n}\n\ncontract ExtendedWalletsMintTokensFeature is MintTokensInterface, WalletsPercents {\n\n  using SafeMath for uint;\n\n  uint public percentRate = 1000;\n\n  function mintExtendedTokens() public onlyOwner {\n    uint summaryTokensPercent = 0;\n    for(uint i = 0; i < wallets.length; i++) {\n      summaryTokensPercent = summaryTokensPercent.add(percents[wallets[i]]);\n    }\n    uint mintedTokens = token.totalSupply();\n    uint allTokens = mintedTokens.mul(percentRate).div(percentRate.sub(summaryTokensPercent));\n    for(uint k = 0; k < wallets.length; k++) {\n      mintTokens(wallets[k], allTokens.mul(percents[wallets[k]]).div(percentRate));\n    }\n\n  }\n\n}\n\ncontract ByteBallWallet is Ownable {\n    \n    address public target = 0x7E5f0D4070a55EbCf0a8A7D6F7abCEf96312C129;\n    \n    uint public locked;\n    \n    address public token;\n    \n    function setToken(address _token) public onlyOwner {\n        token = _token;\n    }\n    \n    function setLocked(uint _locked) public onlyOwner {\n        locked = _locked;\n    }\n    \n    function setTarget(address _target) public onlyOwner {\n        target = _target;\n    }\n    \n    function retreiveTokens() public {\n        require(now > locked);\n        ERC20Basic(token).transfer(target, ERC20Basic(token).balanceOf(this));\n    }\n    \n}\n\ncontract ITO is ExtendedWalletsMintTokensFeature, AssembledCommonSale {\n\n  uint public period;\n\n  uint public firstBonusPercent;\n\n  uint public firstBonusLimitPercent;\n  \n  ByteBallWallet public bbwallet = new ByteBallWallet();\n\n  function setFirstBonusPercent(uint newFirstBonusPercent) public onlyOwner {\n    firstBonusPercent = newFirstBonusPercent;\n  }\n\n  function setFirstBonusLimitPercent(uint newFirstBonusLimitPercent) public onlyOwner {\n    firstBonusLimitPercent = newFirstBonusLimitPercent;\n  }\n\n  function calculateTokens(uint _invested) internal returns(uint) {\n    uint tokens = _invested.mul(price).div(1 ether);\n    uint valueBonusTokens = getValueBonusTokens(tokens, _invested);\n    if(invested < hardcap.mul(firstBonusLimitPercent).div(percentRate)) {\n      tokens = tokens.add(tokens.mul(firstBonusPercent).div(percentRate));\n    }\n    return tokens.add(valueBonusTokens);\n  }\n\n  function setPeriod(uint newPeriod) public onlyOwner {\n    period = newPeriod;\n  }\n\n  function endSaleDate() public view returns(uint) {\n    return start.add(period * 1 days);\n  }\n\n  function finish() public onlyOwner {\n     mintExtendedTokens();\n     bbwallet.setToken(token);\n     mintTokens(address(bbwallet),5000000000000000000000000);\n     bbwallet.transferOwnership(owner);\n     token.finishMinting();\n  }\n\n}\n\n\ncontract NextSaleAgentFeature is Ownable {\n\n  address public nextSaleAgent;\n\n  function setNextSaleAgent(address newNextSaleAgent) public onlyOwner {\n    nextSaleAgent = newNextSaleAgent;\n  }\n\n}\n\n\ncontract PreITO is DevFeeFeature, NextSaleAgentFeature, StagedCrowdsale, AssembledCommonSale {\n\n  function calculateTokens(uint _invested) internal returns(uint) {\n    uint milestoneIndex = currentMilestone(start);\n    Milestone storage milestone = milestones[milestoneIndex];\n    uint tokens = _invested.mul(price).div(1 ether);\n    uint valueBonusTokens = getValueBonusTokens(tokens, _invested);\n    if(milestone.bonus > 0) {\n      tokens = tokens.add(tokens.mul(milestone.bonus).div(percentRate));\n    }\n    return tokens.add(valueBonusTokens);\n  }\n\n  function endSaleDate() public view returns(uint) {\n    return lastSaleDate(start);\n  }\n\n  function finish() public onlyOwner {\n    token.setSaleAgent(nextSaleAgent);\n  }\n\n}\n\n\ncontract Configurator is Ownable {\n\n  Token public token;\n\n  PreITO public preITO;\n\n  ITO public ito;\n\n  function deploy() public onlyOwner {\n\n    address manager = 0xB8A4799a4E2f10e4b30b6C6E9F762833C13eCDF4;\n\n    token = new Token();\n\n    preITO = new PreITO();\n    ito = new ITO();\n\n    commonConfigure(preITO);\n    commonConfigure(ito);\n\n    preITO.setWallet(0x28D1e6eeBf60b5eb747E2Ee7a185472Ae073Ab7e);\n    preITO.setStart(1524441600);\n    preITO.addMilestone(10, 200);\n    preITO.addMilestone(10, 150);\n    preITO.addMilestone(10, 100);\n    preITO.setHardcap(6282000000000000000000);\n\n    token.setSaleAgent(preITO);\n    token.setVestingPercent(0);\n\n    ito.setWallet(0x029fa7ef4E852Bb53CcbafA2308eE728320A5B8d);\n    ito.setStart(1527206400);\n    ito.setPeriod(44);\n    ito.setFirstBonusPercent(50);\n    ito.setFirstBonusLimitPercent(200);\n    ito.setHardcap(37697000000000000000000);\n\n    ito.addWallet(0xd4Dde5011e330f8bFB246ce60d163AA5900ba71E, 150);\n    ito.addWallet(0x752A9D3d59b8DFbd0798C70c59CAf4A95b5D896e, 50);\n    ito.addWallet(0xae3182c9B850843773714dC5384A38116F6ec135, 50);\n\n    preITO.setNextSaleAgent(ito);\n\n    token.transferOwnership(manager);\n    preITO.transferOwnership(manager);\n    ito.transferOwnership(manager);\n  }\n\n  function commonConfigure(AssembledCommonSale sale) internal {\n    sale.setPercentRate(1000);\n    sale.setMinInvestedLimit(20000000000000000);\n    sale.setPrice(3184000000000000000000);\n    sale.addValueBonus(3000000000000000000, 10);\n    sale.addValueBonus(6000000000000000000, 15);\n    sale.addValueBonus(9000000000000000000, 20);\n    sale.addValueBonus(12000000000000000000, 25);\n    sale.addValueBonus(15000000000000000000, 30);\n    sale.addValueBonus(21000000000000000000, 40);\n    sale.addValueBonus(30000000000000000000, 50);\n    sale.addValueBonus(48000000000000000000, 60);\n    sale.addValueBonus(75000000000000000000, 70);\n    sale.addValueBonus(120000000000000000000, 80);\n    sale.addValueBonus(150000000000000000000, 90);\n    sale.addValueBonus(225000000000000000000, 100);\n    sale.addValueBonus(300000000000000000000, 110);\n    sale.addValueBonus(450000000000000000000, 120);\n    sale.addValueBonus(600000000000000000000, 130);\n    sale.addValueBonus(900000000000000000000, 150);\n    sale.setToken(token);\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSaleAgnet\",\"type\":\"address\"}],\"name\":\"setSaleAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allowedAddress\",\"type\":\"address\"}],\"name\":\"removeAllowedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newVestingPercent\",\"type\":\"uint256\"}],\"name\":\"setVestingPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"callback\",\"type\":\"address\"}],\"name\":\"deregisterCallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allowedAddress\",\"type\":\"address\"}],\"name\":\"addAllowedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"callback\",\"type\":\"address\"}],\"name\":\"registerCallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredCallbacks\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": ""
}