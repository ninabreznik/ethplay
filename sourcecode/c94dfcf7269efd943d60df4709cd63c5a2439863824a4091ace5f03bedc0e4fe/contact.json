{
  "address": "0xa552ca29bd5b26adf6f6f3aa52497dde3262a4ba",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TeambrellaWallet",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-22\n*/\n\npragma solidity ^0.4.24;\n\ninterface IRescue {\n    function canRescue(address _addr) external returns (bool);\n}\n\ncontract TeambrellaWallet {\n    \n    uint public m_opNum;\n    uint public m_teamId;\n    address public m_owner;\n    address[] public m_cosigners;\n    address[] public m_cosignersApprovedDisband;    \n\n    address m_rescuer;\n    \n    modifier orderedOps(uint opNum) {\n        require(opNum >= m_opNum);\n        _; \n    }\n\n    modifier onlyOwner {\n        require(msg.sender == m_owner);\n        _; \n    }\n    \n    function() public payable { }\n\n\n    // Duplicate Solidity's ecrecover, but catching the CALL return value\n    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\n        // We do our own memory management here. Solidity uses memory offset\n        // 0x40 to store the current end of memory. We write past it (as\n        // writes are memory extensions), but don't update the offset so\n        // Solidity will reuse it. The memory used here is only needed for\n        // this context.\n\n        bool ret;\n        address addr;\n\n        assembly {\n            let size := mload(0x40)\n            mstore(size, hash)\n            mstore(add(size, 32), v)\n            mstore(add(size, 64), r)\n            mstore(add(size, 96), s)\n\n            // NOTE: we can reuse the request memory because we deal with\n            //       the return code\n            ret := call(3000, 1, 0, size, 128, size, 32)\n            addr := mload(size)\n        }\n\n        return (ret, addr);\n    }\n\n    function ecrecovery(bytes32 hash, bytes sig) private returns (bool, address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // The signature format is a compact form of:\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n        // Compact means, uint8 is not padded to 32 bytes.\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n\n            // Here we are loading the last 32 bytes. We exploit the fact that\n            // 'mload' will pad with zeroes if we overread.\n            // There is no 'mload8' to do this, but that would be nicer.\n            v := byte(0, mload(add(sig, 96)))\n\n            // Alternative solution:\n            // 'byte' is not working due to the Solidity parser, so lets\n            // use the second best option, 'and'\n            // v := and(mload(add(sig, 65)), 255)\n        }\n\n        return safer_ecrecover(hash, v, r, s);\n    }\n\n    function ecverify(bytes32 hash, bytes sig, address signer) private returns (bool) {\n        bool ret;\n        address addr;\n\n        (ret, addr) = ecrecovery(hash, sig);\n\n        return ret == true && addr == signer;\n    }\n\n    function checkSignatures(\n        bytes32 hash,\n        uint[3] cosignersPos,\n        bytes sigCosigner0,\n        bytes sigCosigner1,\n        bytes sigCosigner2\n        ) private returns(bool) {\n\n        uint cosignersNum = m_cosigners.length;\n        bool signed = ecverify(hash, sigCosigner0, m_cosigners[cosignersPos[0]]);\n        if (cosignersNum > 3) {\n            signed = signed && ecverify(hash, sigCosigner1, m_cosigners[cosignersPos[1]]);\n        }\n        if (cosignersNum > 6) {\n            signed = signed && ecverify(hash, sigCosigner2, m_cosigners[cosignersPos[2]]);\n        }\n\n        return signed;\n    }\n    \n    function checkSignatures2(\n        bytes32 hash,\n        bytes sigCosigner0,\n        bytes sigCosigner1,\n        bytes sigCosigner2\n        ) private returns(bool) {\n\n        uint cosignersNum = m_cosigners.length;\n        uint pos = uint(sigCosigner0[65]);\n        bool signed = ecverify(hash, sigCosigner0, m_cosigners[pos]);\n        if (cosignersNum > 3) {\n            pos = uint(sigCosigner1[65]);\n            signed = signed && ecverify(hash, sigCosigner1, m_cosigners[pos]);\n        }\n        if (cosignersNum > 6) {\n            pos = uint(sigCosigner2[65]);\n            signed = signed && ecverify(hash, sigCosigner2, m_cosigners[pos]);\n        }\n        return signed;\n    }\n\n    function toBytes(uint256[] x) private pure returns (bytes b) {\n        b = new bytes(32 * x.length);\n        for (uint j = 0; j < x.length; j++) {\n            for (uint i = 0; i < 32; i++) {\n                b[j*32 + i] = byte(uint8(x[j] / (2**(8*(31 - i))))); \n            }\n        }\n    }\n\n    function toBytes(address[] x) private pure returns (bytes b) {\n\n        b = new bytes(20 * x.length);\n        for (uint j = 0; j < x.length; j++) {\n            for (uint i = 0; i < 20; i++) {\n                b[j*20 + i] = byte(uint8(uint160(x[j]) / (2**(8*(19 - i))))); \n            }\n        }\n    }\n\n    constructor() public payable {\n        m_opNum = 1;\n\t\tm_owner = msg.sender;\n\t\tm_rescuer = 0x127c4605cFe96C4649A58ff6db7B216440C9EFa2; // mainnet\n    }\n    \n     function assignOwner(address[] cosigners, uint teamId, address newOwner) onlyOwner external {\n\t\tif (m_cosigners.length == 0)\n\t\t{\n\t\t\tm_cosigners = cosigners;\n\t\t\tm_teamId = teamId;\n\t\t\tm_owner = newOwner;\n\t\t}\n    }\n       \n    function changeAllCosigners(\n        uint opNum,\n        address[] newCosigners,\n        uint[3] cosignersPos,\n        bytes sigCosigner0, \n        bytes sigCosigner1,\n        bytes sigCosigner2 \n        ) onlyOwner orderedOps(opNum) external {\n\n        bytes32 hash = keccak256(\"NS\", m_teamId, opNum, toBytes(newCosigners));\n        require(checkSignatures(hash, cosignersPos, sigCosigner0, sigCosigner1, sigCosigner2));\n        m_opNum = opNum + 1;\n        m_cosignersApprovedDisband.length = 0;\n        m_cosigners = newCosigners;\n    }\n\n    function changeAllCosigners2(\n        uint opNum,\n        address[] newCosigners,\n        bytes sigCosigner0, \n        bytes sigCosigner1,\n        bytes sigCosigner2,\n        bytes sigOwner \n        ) orderedOps(opNum) external {\n\n        bytes32 hash = keccak256(\"NS\", m_teamId, opNum, toBytes(newCosigners));\n        require(checkSignatures2(hash, sigCosigner0, sigCosigner1, sigCosigner2));\n        require(ecverify(hash, sigOwner, m_owner));\n        m_opNum = opNum + 1;\n        m_cosignersApprovedDisband.length = 0;\n        m_cosigners = newCosigners;\n    }\n        \n    function getsum(uint[] values) private pure returns (uint s) {\n        s = 0;\n\n        for (uint j = 0; j < values.length; j++) {\n            s += values[j];\n        }\n\n        return s;    \n    }\n        \n    function transfer(\n        uint opNum,\n        address[] tos, \n        uint[] values,\n        uint[3] cosignersPos,\n        bytes sigCosigner0, \n        bytes sigCosigner1, \n        bytes sigCosigner2\n        ) onlyOwner orderedOps(opNum) external {\n\n        require (getsum(values) <= address(this).balance);\n        bytes32 hash = keccak256(\"TR\", m_teamId, opNum, toBytes(tos), toBytes(values));\n        require (checkSignatures(hash, cosignersPos, sigCosigner0, sigCosigner1, sigCosigner2));\n        m_opNum = opNum + 1;\n        realtransfer(tos, values);\n    }\n\n    function transfer2(\n        uint opNum,\n        address[] tos, \n        uint[] values,\n        bytes sigCosigner0,\n        bytes sigCosigner1,\n        bytes sigCosigner2,\n        bytes sigOwner\n        ) external {\n        require(opNum >= m_opNum);\n        require (getsum(values) <= address(this).balance);\n        bytes32 hash = keccak256(\"TR\", m_teamId, opNum, toBytes(tos), toBytes(values));\n        require(checkSignatures2(hash, sigCosigner0, sigCosigner1, sigCosigner2));\n        require(ecverify(hash, sigOwner, m_owner));\n        m_opNum = opNum + 1;\n        realtransfer(tos, values);\n    }    \n\n    function realtransfer(address[] tos, uint[] values) private {\n\n        for (uint i = 0; i < values.length; i++) {\n            tos[i].transfer(values[i]);\n        }\n    }\n\n    function approveDisband() external {\n\n        for (uint pos=0; pos<m_cosignersApprovedDisband.length; pos++) {\n            if (m_cosignersApprovedDisband[pos] == msg.sender) {\n                return;\n            }\n        }\n        for (pos=0; pos<m_cosigners.length; pos++) {\n            if (m_cosigners[pos] == msg.sender) {\n                m_cosignersApprovedDisband.push(msg.sender);\n            }\n        }\n    }\n\n    function disbandTo(address to) onlyOwner external {\n\n        uint cosignersNum = m_cosigners.length;\n        uint approved = m_cosignersApprovedDisband.length;\n        if (cosignersNum > 6) {\n            require(approved > 2);\n        }\n        if (cosignersNum > 3) {\n            require(approved > 1);\n        }\n        require(approved > 0);\n\n        to.transfer(address(this).balance);\n    }\n    \n    function rescue(\n        address _to \n        ) onlyOwner external {\n\n        IRescue rescuer = IRescue(m_rescuer);\n        require(rescuer.canRescue(msg.sender));\n        \n        _to.transfer(address(this).balance);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"m_cosignersApprovedDisband\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"opNum\",\"type\":\"uint256\"},{\"name\":\"newCosigners\",\"type\":\"address[]\"},{\"name\":\"sigCosigner0\",\"type\":\"bytes\"},{\"name\":\"sigCosigner1\",\"type\":\"bytes\"},{\"name\":\"sigCosigner2\",\"type\":\"bytes\"},{\"name\":\"sigOwner\",\"type\":\"bytes\"}],\"name\":\"changeAllCosigners2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"m_cosigners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveDisband\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"rescue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_teamId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"opNum\",\"type\":\"uint256\"},{\"name\":\"tos\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"sigCosigner0\",\"type\":\"bytes\"},{\"name\":\"sigCosigner1\",\"type\":\"bytes\"},{\"name\":\"sigCosigner2\",\"type\":\"bytes\"},{\"name\":\"sigOwner\",\"type\":\"bytes\"}],\"name\":\"transfer2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"opNum\",\"type\":\"uint256\"},{\"name\":\"tos\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"cosignersPos\",\"type\":\"uint256[3]\"},{\"name\":\"sigCosigner0\",\"type\":\"bytes\"},{\"name\":\"sigCosigner1\",\"type\":\"bytes\"},{\"name\":\"sigCosigner2\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"opNum\",\"type\":\"uint256\"},{\"name\":\"newCosigners\",\"type\":\"address[]\"},{\"name\":\"cosignersPos\",\"type\":\"uint256[3]\"},{\"name\":\"sigCosigner0\",\"type\":\"bytes\"},{\"name\":\"sigCosigner1\",\"type\":\"bytes\"},{\"name\":\"sigCosigner2\",\"type\":\"bytes\"}],\"name\":\"changeAllCosigners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"disbandTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cosigners\",\"type\":\"address[]\"},{\"name\":\"teamId\",\"type\":\"uint256\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"assignOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_opNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
  "bytecode": ""
}