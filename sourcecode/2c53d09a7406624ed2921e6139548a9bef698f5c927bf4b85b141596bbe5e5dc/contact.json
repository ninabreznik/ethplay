{
  "address": "0xdeb2aa0478b2758e81d75a896e1257d3984d30d5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Exchange",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-15\n*/\n\npragma solidity ^0.4.25;\n\ncontract AcceptsExchange {\n    Exchange public tokenContract;\n\n    constructor(address _tokenContract) public {\n        tokenContract = Exchange(_tokenContract);\n    }\n\n    modifier onlyTokenContract {\n        require(msg.sender == address(tokenContract));\n        _;\n    }\n\n    /**\n    * @dev Standard ERC677 function that will handle incoming token transfers.\n    *\n    * @param _from  Token sender address.\n    * @param _value Amount of tokens.\n    * @param _data  Transaction metadata.\n    */\n    function tokenFallback(address _from, uint256 _value, bytes _data) external returns (bool);\n}\n\n\ncontract Exchange {\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n    // only people with tokens\n    modifier onlyBagholders() {\n        require(myTokens() > 0);\n        _;\n    }\n\n    // only people with profits\n    modifier onlyStronghands() {\n        require(myDividends(true) > 0);\n        _;\n    }\n\n    modifier notContract() {\n      require (msg.sender == tx.origin);\n      _;\n    }\n\n    // administrators can:\n    // -> change the name of the contract\n    // -> change the name of the token\n    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\n    // they CANNOT:\n    // -> take funds\n    // -> disable withdrawals\n    // -> kill the contract\n    // -> change the price of tokens\n    modifier onlyAdministrator(){\n        address _customerAddress = msg.sender;\n        require(administrators[_customerAddress]);\n        _;\n    }\n\n    uint ACTIVATION_TIME = 1547996400;\n\n    // ensures that the first tokens in the contract will be equally distributed\n    // meaning, no divine dump will be ever possible\n    // result: healthy longevity.\n    modifier antiEarlyWhale(uint256 _amountOfEthereum){\n\n        if (now >= ACTIVATION_TIME) {\n            onlyAmbassadors = false;\n        }\n\n        // are we still in the vulnerable phase?\n        // if so, enact anti early whale protocol\n        if( onlyAmbassadors && ((totalEthereumBalance() - _amountOfEthereum) <= ambassadorQuota_ )){\n            require(\n                // is the customer in the ambassador list?\n                ambassadors_[msg.sender] == true &&\n\n                // does the customer purchase exceed the max ambassador quota?\n                (ambassadorAccumulatedQuota_[msg.sender] + _amountOfEthereum) <= ambassadorMaxPurchase_\n\n            );\n\n            // updated the accumulated quota\n            ambassadorAccumulatedQuota_[msg.sender] = SafeMath.add(ambassadorAccumulatedQuota_[msg.sender], _amountOfEthereum);\n\n            // execute\n            _;\n        } else {\n            // in case the ether count drops low, the ambassador phase won't reinitiate\n            onlyAmbassadors = false;\n            _;\n        }\n\n    }\n\n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy,\n        bool isReinvest,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn,\n        uint256 estimateTokens,\n        bool isTransfer\n    );\n\n    // ERC20\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n\n\n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n    string public name = \"EXCHANGE\";\n    string public symbol = \"DICE\";\n    uint8 constant public decimals = 18;\n\n    uint8 constant internal dividendFee_ = 20; // 20% dividend fee on each buy and sell\n    uint8 constant internal fundFee_ = 5; // 5% to dice game\n\n    uint256 constant internal tokenPriceInitial_ = 0.00000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.000000001 ether;\n    uint256 constant internal magnitude = 2**64;\n\n    // Address to send the 5% Fee\n    address public giveEthFundAddress = 0x0;\n    bool public finalizedEthFundAddress = false;\n    uint256 public totalEthFundReceived; // total ETH charity received from this contract\n    uint256 public totalEthFundCollected; // total ETH charity collected in this contract\n\n    // proof of stake (defaults at 250 tokens)\n    uint256 public stakingRequirement = 25e18;\n\n    // ambassador program\n    mapping(address => bool) internal ambassadors_;\n    uint256 constant internal ambassadorMaxPurchase_ = 4 ether;\n    uint256 constant internal ambassadorQuota_ = 4 ether;\n\n   /*================================\n    =            DATASETS            =\n    ================================*/\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n    uint256 internal tokenSupply_ = 0;\n    uint256 internal profitPerShare_;\n\n    // administrator list (see above on what they can do)\n    mapping(address => bool) public administrators;\n\n    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n    bool public onlyAmbassadors = true;\n\n    // To whitelist game contracts on the platform\n    mapping(address => bool) public canAcceptTokens_; // contracts, which can accept the exchanges tokens\n\n    /*=======================================\n    =            PUBLIC FUNCTIONS            =\n    =======================================*/\n    /*\n    * -- APPLICATION ENTRY POINTS --\n    */\n    constructor()\n        public\n    {\n        // add administrators here\n        administrators[0xB477ACeb6262b12a3c7b2445027a072f95C75Bd3] = true;\n\n        // add the ambassadors here\n        ambassadors_[0xB477ACeb6262b12a3c7b2445027a072f95C75Bd3] = true;\n    }\n\n\n    /**\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n     */\n    function buy(address _referredBy)\n        public\n        payable\n        returns(uint256)\n    {\n\n        require(tx.gasprice <= 0.05 szabo);\n        purchaseTokens(msg.value, _referredBy, false);\n    }\n\n    /**\n     * Fallback function to handle ethereum that was send straight to the contract\n     * Unfortunately we cannot use a referral address this way.\n     */\n    function()\n        payable\n        public\n    {\n\n        require(tx.gasprice <= 0.05 szabo);\n        purchaseTokens(msg.value, 0x0, false);\n    }\n\n    function updateFundAddress(address _newAddress)\n        onlyAdministrator()\n        public\n    {\n        require(finalizedEthFundAddress == false);\n        giveEthFundAddress = _newAddress;\n    }\n\n    function finalizeFundAddress(address _finalAddress)\n        onlyAdministrator()\n        public\n    {\n        require(finalizedEthFundAddress == false);\n        giveEthFundAddress = _finalAddress;\n        finalizedEthFundAddress = true;\n    }\n\n    /**\n     * Sends fund to dice smart contract\n     * No Reentrancy attack as address is finalized to dice smart contract\n     */\n    function payFund() payable public {\n        uint256 ethToPay = SafeMath.sub(totalEthFundCollected, totalEthFundReceived);\n        require(ethToPay > 0);\n        totalEthFundReceived = SafeMath.add(totalEthFundReceived, ethToPay);\n        if(!giveEthFundAddress.call.value(ethToPay)()) {\n            revert();\n        }\n    }\n\n    /**\n     * Converts all of caller's dividends to tokens.\n     */\n    function reinvest()\n        onlyStronghands()\n        public\n    {\n        // fetch dividends\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n\n        // pay out the dividends virtually\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n\n        // retrieve ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\n        uint256 _tokens = purchaseTokens(_dividends, 0x0, true);\n\n        // fire event\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n\n    /**\n     * Alias of sell() and withdraw().\n     */\n    function exit()\n        public\n    {\n        // get token count for caller & sell them all\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if(_tokens > 0) sell(_tokens);\n\n        // lambo delivery service\n        withdraw(false);\n    }\n\n    /**\n     * Withdraws all of the callers earnings.\n     */\n    function withdraw(bool _isTransfer)\n        onlyStronghands()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n\n        uint256 _estimateTokens = calculateTokensReceived(_dividends);\n\n        // update dividend tracker\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n\n        // add ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // lambo delivery service\n        _customerAddress.transfer(_dividends);\n\n        // fire event\n        emit onWithdraw(_customerAddress, _dividends, _estimateTokens, _isTransfer);\n    }\n\n    /**\n     * Liquifies tokens to ethereum.\n     */\n    function sell(uint256 _amountOfTokens)\n        onlyBagholders()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        // russian hackers BTFO\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_), 100);\n\n        // Take out dividends and then _fundPayout\n        uint256 _taxedEthereum =  SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\n\n        // Add ethereum to send to fund\n        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\n\n        // burn the sold tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n\n        // update dividends tracker\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\n\n        // dividing by zero is a bad idea\n        if (tokenSupply_ > 0) {\n            // update the amount of dividends per token\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n\n        // fire event\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());\n    }\n\n\n    /**\n     * Transfer tokens from the caller to a new holder.\n     * REMEMBER THIS IS 0% TRANSFER FEE\n     */\n    function transfer(address _toAddress, uint256 _amountOfTokens)\n        onlyBagholders()\n        public\n        returns(bool)\n    {\n        // setup\n        address _customerAddress = msg.sender;\n\n        // make sure we have the requested tokens\n        // also disables transfers until ambassador phase is over\n        // ( we dont want whale premines )\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n\n        // withdraw all outstanding dividends first\n        if(myDividends(true) > 0) withdraw(true);\n\n        // exchange tokens\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\n\n        // update dividend trackers\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\n\n\n        // fire event\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\n\n        // ERC20\n        return true;\n    }\n\n    /**\n    * Transfer token to a specified address and forward the data to recipient\n    * ERC-677 standard\n    * https://github.com/ethereum/EIPs/issues/677\n    * @param _to    Receiver address.\n    * @param _value Amount of tokens that will be transferred.\n    * @param _data  Transaction metadata.\n    */\n    function transferAndCall(address _to, uint256 _value, bytes _data) external returns (bool) {\n      require(_to != address(0));\n      require(canAcceptTokens_[_to] == true); // security check that contract approved by the exchange\n      require(transfer(_to, _value)); // do a normal token transfer to the contract\n\n      if (isContract(_to)) {\n        AcceptsExchange receiver = AcceptsExchange(_to);\n        require(receiver.tokenFallback(msg.sender, _value, _data));\n      }\n\n      return true;\n    }\n\n    /**\n     * Additional check that the game address we are sending tokens to is a contract\n     * assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n     */\n     function isContract(address _addr) private constant returns (bool is_contract) {\n       // retrieve the size of the code on target address, this needs assembly\n       uint length;\n       assembly { length := extcodesize(_addr) }\n       return length > 0;\n     }\n\n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n    /**\n\n    /**\n     * In case one of us dies, we need to replace ourselves.\n     */\n    function setAdministrator(address _identifier, bool _status)\n        onlyAdministrator()\n        public\n    {\n        administrators[_identifier] = _status;\n    }\n\n    /**\n     * Precautionary measures in case we need to adjust the masternode rate.\n     */\n    function setStakingRequirement(uint256 _amountOfTokens)\n        onlyAdministrator()\n        public\n    {\n        stakingRequirement = _amountOfTokens;\n    }\n\n    /**\n     * Add or remove game contract, which can accept tokens\n     */\n    function setCanAcceptTokens(address _address, bool _value)\n      onlyAdministrator()\n      public\n    {\n      canAcceptTokens_[_address] = _value;\n    }\n\n    /**\n     * If we want to rebrand, we can.\n     */\n    function setName(string _name)\n        onlyAdministrator()\n        public\n    {\n        name = _name;\n    }\n\n    /**\n     * If we want to rebrand, we can.\n     */\n    function setSymbol(string _symbol)\n        onlyAdministrator()\n        public\n    {\n        symbol = _symbol;\n    }\n\n\n    /*----------  HELPERS AND CALCULATORS  ----------*/\n    /**\n     * Method to view the current Ethereum stored in the contract\n     * Example: totalEthereumBalance()\n     */\n    function totalEthereumBalance()\n        public\n        view\n        returns(uint)\n    {\n        return address(this).balance;\n    }\n\n    /**\n     * Retrieve the total token supply.\n     */\n    function totalSupply()\n        public\n        view\n        returns(uint256)\n    {\n        return tokenSupply_;\n    }\n\n    /**\n     * Retrieve the tokens owned by the caller.\n     */\n    function myTokens()\n        public\n        view\n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n\n    /**\n     * Retrieve the dividends owned by the caller.\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     * But in the internal calculations, we want them separate.\n     */\n    function myDividends(bool _includeReferralBonus)\n        public\n        view\n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n\n    /**\n     * Retrieve the token balance of any single address.\n     */\n    function balanceOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n\n    /**\n     * Retrieve the dividend balance of any single address.\n     */\n    function dividendsOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n\n    /**\n     * Return the buy price of 1 individual token.\n     */\n    function sellPrice()\n        public\n        view\n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n            uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_), 100);\n            uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\n            return _taxedEthereum;\n        }\n    }\n\n    /**\n     * Return the sell price of 1 individual token.\n     */\n    function buyPrice()\n        public\n        view\n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n            uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_), 100);\n            uint256 _taxedEthereum =  SafeMath.add(SafeMath.add(_ethereum, _dividends), _fundPayout);\n            return _taxedEthereum;\n        }\n    }\n\n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n     */\n    function calculateTokensReceived(uint256 _ethereumToSpend)\n        public\n        view\n        returns(uint256)\n    {\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, dividendFee_), 100);\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereumToSpend, fundFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereumToSpend, _dividends), _fundPayout);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        return _amountOfTokens;\n    }\n\n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n     */\n    function calculateEthereumReceived(uint256 _tokensToSell)\n        public\n        view\n        returns(uint256)\n    {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\n        return _taxedEthereum;\n    }\n\n    /**\n     * Function for the frontend to show ether waiting to be send to fund in contract\n     */\n    function etherToSendFund()\n        public\n        view\n        returns(uint256) {\n        return SafeMath.sub(totalEthFundCollected, totalEthFundReceived);\n    }\n\n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy, bool _isReinvest)\n        antiEarlyWhale(_incomingEthereum)\n        internal\n        returns(uint256)\n    {\n        // data setup\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_), 100);\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_incomingEthereum, fundFee_), 100);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_incomingEthereum, _undividedDividends), _fundPayout);\n        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\n\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n\n        // no point in continuing execution if OP is a poor russian hacker\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n        // (or hackers)\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equation.\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n\n        // is the user referred by a masternode?\n        if(\n            // is this a referred purchase?\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n            // no cheating!\n            _referredBy != msg.sender &&\n\n            // does the referrer have at least X whole tokens?\n            // i.e is the referrer a godly chad masternode\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ){\n            // wealth redistribution\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } else {\n            // no ref purchase\n            // add the referral bonus back to the global dividends cake\n            _dividends = SafeMath.add(_dividends, _referralBonus);\n            _fee = _dividends * magnitude;\n        }\n\n        // we can't give people infinite ethereum\n        if(tokenSupply_ > 0){\n\n            // add tokens to the pool\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n\n            // calculate the amount of tokens the customer receives over his purchase\n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n\n        } else {\n            // add tokens to the pool\n            tokenSupply_ = _amountOfTokens;\n        }\n\n        // update circulating supply & the ledger address for the customer\n        tokenBalanceLedger_[msg.sender] = SafeMath.add(tokenBalanceLedger_[msg.sender], _amountOfTokens);\n\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n        //really i know you think you do but you don't\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n        payoutsTo_[msg.sender] += _updatedPayouts;\n\n        // fire event\n        emit onTokenPurchase(msg.sender, _incomingEthereum, _amountOfTokens, _referredBy, _isReinvest, now, buyPrice());\n\n        return _amountOfTokens;\n    }\n\n    /**\n     * Calculate Token price based on an amount of incoming ethereum\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function ethereumToTokens_(uint256 _ethereum)\n        internal\n        view\n        returns(uint256)\n    {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived =\n         (\n            (\n                // underflow attempts BTFO\n                SafeMath.sub(\n                    (sqrt\n                        (\n                            (_tokenPriceInitial**2)\n                            +\n                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n                            +\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n                            +\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n                        )\n                    ), _tokenPriceInitial\n                )\n            )/(tokenPriceIncremental_)\n        )-(tokenSupply_)\n        ;\n\n        return _tokensReceived;\n    }\n\n    /**\n     * Calculate token sell value.\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n     function tokensToEthereum_(uint256 _tokens)\n        internal\n        view\n        returns(uint256)\n    {\n\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n        (\n            // underflow attempts BTFO\n            SafeMath.sub(\n                (\n                    (\n                        (\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n                        )-tokenPriceIncremental_\n                    )*(tokens_ - 1e18)\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n            )\n        /1e18);\n        return _etherReceived;\n    }\n\n\n    //This is where all your gas goes, sorry\n    //Not sorry, you probably only paid 1 gwei\n    function sqrt(uint x) internal pure returns (uint y) {\n        uint z = (x + 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "bytecode": "635c448cf060005560c0604052600860808190527f45584348414e474500000000000000000000000000000000000000000000000060a09081526200004891600191906200014b565b506040805180820190915260048082527f444943450000000000000000000000000000000000000000000000000000000060209092019182526200008f916002916200014b565b5060038054600160a860020a031916905568015af1d78b58c400006006556000600c55600f805460ff19166001179055348015620000cc57600080fd5b5073b477aceb6262b12a3c7b2445027a072f95c75bd36000527fb29a96ecf52c220a958810f3743638ea9311166716d579451f87d7a7d414654f8054600160ff19918216811790925560076020527f5a20f35fec3988b94e89db0bb9740ff6a478b8001efedbe679ee5cebe435225280549091169091179055620001f0565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200018e57805160ff1916838001178555620001be565b82800160010185558215620001be579182015b82811115620001be578251825591602001919060010190620001a1565b50620001cc929150620001d0565b5090565b620001ed91905b80821115620001cc5760008155600101620001d7565b90565b611b1780620002006000396000f3006080604052600436106101cb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b81146101ec57806306fdde031461021f5780630f34dc16146102a957806310d0ffdd146102de57806318160ddd146102f65780631d5459f71461030b578063226093731461032e5780632505c4451461034657806327defa1f1461035b578063294205b414610370578063313ce567146103965780634000aea0146103c15780634b750334146103f257806356d399e8146104075780635e079aa51461041c57806366042e7a1461044d57806367d326ef14610462578063688abbf7146104835780636b2f46321461049d57806370a08231146104b257806376be1585146104d35780637ff276bd146104f45780638328b610146105095780638620410b1461052157806387c95058146105365780638974372d1461055c578063949e8acd1461056457806395d89b4114610579578063a810a54c1461058e578063a9059cbb146105a8578063b84c8246146105cc578063c47f002714610625578063d3f566ff1461067e578063e4849b3214610693578063e9fad8ee146106ab578063f088d547146106c0578063fdb5a03e146106d4575b640ba43b74003a11156101dd57600080fd5b6101e9346000806106e9565b50005b3480156101f857600080fd5b5061020d600160a060020a0360043516610c84565b60408051918252519081900360200190f35b34801561022b57600080fd5b50610234610cbf565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561026e578181015183820152602001610256565b50505050905090810190601f16801561029b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102b557600080fd5b506102ca600160a060020a0360043516610d4c565b604080519115158252519081900360200190f35b3480156102ea57600080fd5b5061020d600435610d61565b34801561030257600080fd5b5061020d610daf565b34801561031757600080fd5b5061032c600160a060020a0360043516610db6565b005b34801561033a57600080fd5b5061020d600435610e2c565b34801561035257600080fd5b506102ca610e83565b34801561036757600080fd5b506102ca610ea4565b34801561037c57600080fd5b5061032c600160a060020a03600435166024351515610ead565b3480156103a257600080fd5b506103ab610ef7565b6040805160ff9092168252519081900360200190f35b3480156103cd57600080fd5b506102ca60048035600160a060020a0316906024803591604435918201910135610efc565b3480156103fe57600080fd5b5061020d611036565b34801561041357600080fd5b5061020d6110a3565b34801561042857600080fd5b506104316110a9565b60408051600160a060020a039092168252519081900360200190f35b34801561045957600080fd5b5061020d6110b8565b34801561046e57600080fd5b5061032c600160a060020a03600435166110cd565b34801561048f57600080fd5b5061020d6004351515611173565b3480156104a957600080fd5b5061020d6111b6565b3480156104be57600080fd5b5061020d600160a060020a03600435166111bb565b3480156104df57600080fd5b506102ca600160a060020a03600435166111d6565b34801561050057600080fd5b5061020d6111eb565b34801561051557600080fd5b5061032c6004356111f1565b34801561052d57600080fd5b5061020d611215565b34801561054257600080fd5b5061032c600160a060020a0360043516602435151561127b565b61032c6112c5565b34801561057057600080fd5b5061020d611322565b34801561058557600080fd5b50610234611335565b34801561059a57600080fd5b5061032c600435151561138d565b3480156105b457600080fd5b506102ca600160a060020a036004351660243561147e565b3480156105d857600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261032c9436949293602493928401919081908401838280828437509497506115af9650505050505050565b34801561063157600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261032c9436949293602493928401919081908401838280828437509497506115e59650505050505050565b34801561068a57600080fd5b5061020d611616565b34801561069f57600080fd5b5061032c60043561161c565b3480156106b757600080fd5b5061032c6117b3565b61020d600160a060020a03600435166117e2565b3480156106e057600080fd5b5061032c611802565b60008060008060008060008060008b6000544210151561070e57600f805460ff191690555b600f5460ff1680156107315750673782dace9d9000008161072d6111b6565b0311155b15610a12573360009081526007602052604090205460ff16151560011480156107745750336000908152600b6020526040902054673782dace9d90000090820111155b151561077f57600080fd5b336000908152600b602052604090205461079990826118ba565b336000908152600b60205260409020556107be6107b78e60146118d0565b60646118fb565b98506107cb8960036118fb565b97506107db6107b78e60056118d0565b96506107e78989611912565b95506107fc6107f68e8b611912565b88611912565b945061080a600554886118ba565b60055561081685611924565b935068010000000000000000860292506000841180156108405750600c5461083e85826118ba565b115b151561084b57600080fd5b600160a060020a038c161580159061086c5750600160a060020a038c163314155b80156108925750600654600160a060020a038d1660009081526008602052604090205410155b156108d857600160a060020a038c166000908152600960205260409020546108ba90896118ba565b600160a060020a038d166000908152600960205260409020556108f3565b6108e286896118ba565b955068010000000000000000860292505b6000600c5411156109575761090a600c54856118ba565b600c81905568010000000000000000870281151561092457fe5b600d8054929091049091019055600c5468010000000000000000870281151561094957fe5b04840283038303925061095d565b600c8490555b3360009081526008602052604090205461097790856118ba565b33600081815260086020908152604080832094909455600d54600a90915292902080549287028690039283019055909250600160a060020a038d16907fc83715e038ec5bec49b994d2aad02d046a8bed3d70fd8213bb849e43e971fe728f878f426109e0611215565b6040805195865260208601949094529115158484015260608401526080830152519081900360a00190a3839950610c74565b600f805460ff19169055610a2a6107b78e60146118d0565b9850610a378960036118fb565b9750610a476107b78e60056118d0565b9650610a538989611912565b9550610a626107f68e8b611912565b9450610a70600554886118ba565b600555610a7c85611924565b93506801000000000000000086029250600084118015610aa65750600c54610aa485826118ba565b115b1515610ab157600080fd5b600160a060020a038c1615801590610ad25750600160a060020a038c163314155b8015610af85750600654600160a060020a038d1660009081526008602052604090205410155b15610b3e57600160a060020a038c16600090815260096020526040902054610b2090896118ba565b600160a060020a038d16600090815260096020526040902055610b59565b610b4886896118ba565b955068010000000000000000860292505b6000600c541115610bbd57610b70600c54856118ba565b600c819055680100000000000000008702811515610b8a57fe5b600d8054929091049091019055600c54680100000000000000008702811515610baf57fe5b048402830383039250610bc3565b600c8490555b33600090815260086020526040902054610bdd90856118ba565b33600081815260086020908152604080832094909455600d54600a90915292902080549287028690039283019055909250600160a060020a038d16907fc83715e038ec5bec49b994d2aad02d046a8bed3d70fd8213bb849e43e971fe728f878f42610c46611215565b6040805195865260208601949094529115158484015260608401526080830152519081900360a00190a38399505b5050505050505050509392505050565b600160a060020a03166000908152600a6020908152604080832054600890925290912054600d54680100000000000000009102919091030490565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610d445780601f10610d1957610100808354040283529160200191610d44565b820191906000526020600020905b815481529060010190602001808311610d2757829003601f168201915b505050505081565b60106020526000908152604090205460ff1681565b600080808080610d756107b78760146118d0565b9350610d856107b78760056118d0565b9250610d9a610d948786611912565b84611912565b9150610da582611924565b9695505050505050565b600c545b90565b336000818152600e602052604090205460ff161515610dd457600080fd5b60035474010000000000000000000000000000000000000000900460ff1615610dfc57600080fd5b506003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000806000806000600c548611151515610e4557600080fd5b610e4e866119b6565b9350610e5e6107b78560146118d0565b9250610e6e6107b78560056118d0565b9150610da5610e7d8585611912565b83611912565b60035474010000000000000000000000000000000000000000900460ff1681565b600f5460ff1681565b336000818152600e602052604090205460ff161515610ecb57600080fd5b50600160a060020a03919091166000908152601060205260409020805460ff1916911515919091179055565b601281565b600080600160a060020a0386161515610f1457600080fd5b600160a060020a03861660009081526010602052604090205460ff161515600114610f3e57600080fd5b610f48868661147e565b1515610f5357600080fd5b610f5c86611a20565b1561102a57506040517fc0ee0b8a000000000000000000000000000000000000000000000000000000008152336004820181815260248301879052606060448401908152606484018690528893600160a060020a0385169363c0ee0b8a9390928a928a928a929091608401848480828437820191505095505050505050602060405180830381600087803b158015610ff357600080fd5b505af1158015611007573d6000803e3d6000fd5b505050506040513d602081101561101d57600080fd5b5051151561102a57600080fd5b50600195945050505050565b6000806000806000600c546000141561105657640218711a00945061109c565b611067670de0b6b3a76400006119b6565b93506110776107b78560146118d0565b92506110876107b78560056118d0565b9150611096610e7d8585611912565b90508094505b5050505090565b60065481565b600354600160a060020a031681565b60006110c8600554600454611912565b905090565b336000818152600e602052604090205460ff1615156110eb57600080fd5b60035474010000000000000000000000000000000000000000900460ff161561111357600080fd5b506003805474ff000000000000000000000000000000000000000019600160a060020a0390931673ffffffffffffffffffffffffffffffffffffffff19909116179190911674010000000000000000000000000000000000000000179055565b600033826111895761118481610c84565b6111ad565b600160a060020a0381166000908152600960205260409020546111ab82610c84565b015b91505b50919050565b303190565b600160a060020a031660009081526008602052604090205490565b600e6020526000908152604090205460ff1681565b60055481565b336000818152600e602052604090205460ff16151561120f57600080fd5b50600655565b6000806000806000600c54600014156112355764028fa6ae00945061109c565b611246670de0b6b3a76400006119b6565b93506112566107b78560146118d0565b92506112666107b78560056118d0565b915061109661127585856118ba565b836118ba565b336000818152600e602052604090205460ff16151561129957600080fd5b50600160a060020a03919091166000908152600e60205260409020805460ff1916911515919091179055565b60006112d5600554600454611912565b9050600081116112e457600080fd5b6112f0600454826118ba565b600455600354604051600160a060020a03909116908290600081818185875af192505050151561131f57600080fd5b50565b60003361132e816111bb565b91505b5090565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015610d445780601f10610d1957610100808354040283529160200191610d44565b60008060008061139d6001611173565b116113a757600080fd5b3392506113b46000611173565b91506113bf82610d61565b600160a060020a0384166000818152600a60209081526040808320805468010000000000000000890201905560099091528082208054908390559051950194929350909184156108fc0291859190818181858888f1935050505015801561142a573d6000803e3d6000fd5b506040805183815260208101839052851515818301529051600160a060020a038516917f2c0790d4cb2a4cd6281eeb9a251fcfb577eacacbf422f94ff8a2888b924b167b919081900360600190a250505050565b600080600061148b611322565b1161149557600080fd5b50336000818152600860205260409020548311156114b257600080fd5b60006114be6001611173565b11156114ce576114ce600161138d565b600160a060020a0381166000908152600860205260409020546114f19084611912565b600160a060020a03808316600090815260086020526040808220939093559086168152205461152090846118ba565b600160a060020a03858116600081815260086020908152604080832095909555600d8054948716808452600a83528684208054968b02909603909555548383529185902080549289029092019091558351878152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3600191505b5092915050565b336000818152600e602052604090205460ff1615156115cd57600080fd5b81516115e0906002906020850190611a5d565b505050565b336000818152600e602052604090205460ff16151561160357600080fd5b81516115e0906001906020850190611a5d565b60045481565b600080600080600080600080611630611322565b1161163a57600080fd5b3360008181526008602052604090205490975088111561165957600080fd5b879550611665866119b6565b94506116756107b78660146118d0565b93506116856107b78660056118d0565b9250611694610d948686611912565b91506116a2600554846118ba565b600555600c546116b29087611912565b600c55600160a060020a0387166000908152600860205260409020546116d89087611912565b600160a060020a038816600090815260086020908152604080832093909355600d54600a909152918120805492890268010000000000000000860201928390039055600c54919250101561174e5761174a600d54600c5468010000000000000000870281151561174457fe5b046118ba565b600d555b86600160a060020a03167f8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e878442611784611215565b604080519485526020850193909352838301919091526060830152519081900360800190a25050505050505050565b33600081815260086020526040812054908111156117d4576117d48161161c565b6117de600061138d565b5050565b6000640ba43b74003a11156117f657600080fd5b6111b0348360006106e9565b6000806000806118126001611173565b1161181c57600080fd5b6118266000611173565b336000818152600a602090815260408083208054680100000000000000008702019055600990915281208054908290559092019450925061186a90849060016106e9565b905081600160a060020a03167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588483604051808381526020018281526020019250505060405180910390a2505050565b6000828201838110156118c957fe5b9392505050565b6000808315156118e357600091506115a8565b508282028284828115156118f357fe5b04146118c957fe5b600080828481151561190957fe5b04949350505050565b60008282111561191e57fe5b50900390565b600c546000906b204fce5e3e25026110000000908290633b9aca006119a361199d7259aedfc10d7279c5eed140164540000000000088026002850a670de0b6b3a764000002016f0f0bdc21abb48db201e86d40000000008502017704140c78940f6a24fdffc78873d4490d210000000000000001611a28565b85611912565b8115156119ac57fe5b0403949350505050565b600c54600090670de0b6b3a7640000838101918101908390611a0d640218711a00828504633b9aca0002018702600283670de0b6b3a763ffff1982890a8b90030104633b9aca0002811515611a0757fe5b04611912565b811515611a1657fe5b0495945050505050565b6000903b1190565b80600260018201045b818110156111b0578091506002818285811515611a4a57fe5b0401811515611a5557fe5b049050611a31565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611a9e57805160ff1916838001178555611acb565b82800160010185558215611acb579182015b82811115611acb578251825591602001919060010190611ab0565b5061133192610db39250905b808211156113315760008155600101611ad75600a165627a7a723058208591148034573ce128e79a417bcc226df89cd7d9004abdc754e4d4e7e1cf1aeb0029"
}