{
  "address": "0x47a8a30a59eea5c2b06dfa84e91be53444b9a419",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AccountRegistry",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-04\n*/\n\npragma solidity ^0.4.13;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\ncontract AccountRegistry is Ownable {\n  mapping(address => bool) public accounts;\n\n  // Inviter + recipient pair\n  struct Invite {\n    address creator;\n    address recipient;\n  }\n\n  // Mapping of public keys as Ethereum addresses to invite information\n  // NOTE: the address keys here are NOT Ethereum addresses, we just happen\n  // to work with the public keys in terms of Ethereum address strings because\n  // this is what `ecrecover` produces when working with signed text.\n  mapping(address => Invite) public invites;\n\n  InviteCollateralizer public inviteCollateralizer;\n  ERC20 public blt;\n  address private inviteAdmin;\n\n  event InviteCreated(address indexed inviter);\n  event InviteAccepted(address indexed inviter, address indexed recipient);\n  event AccountCreated(address indexed newUser);\n\n  function AccountRegistry(ERC20 _blt, InviteCollateralizer _inviteCollateralizer) public {\n    blt = _blt;\n    accounts[owner] = true;\n    inviteAdmin = owner;\n    inviteCollateralizer = _inviteCollateralizer;\n  }\n\n  function setInviteCollateralizer(InviteCollateralizer _newInviteCollateralizer) public nonZero(_newInviteCollateralizer) onlyOwner {\n    inviteCollateralizer = _newInviteCollateralizer;\n  }\n\n  function setInviteAdmin(address _newInviteAdmin) public onlyOwner nonZero(_newInviteAdmin) {\n    inviteAdmin = _newInviteAdmin;\n  }\n\n  /**\n   * @dev Create an account instantly. Reserved for the \"invite admin\" which is managed by the Bloom team\n   * @param _newUser Address of the user receiving an account\n   */\n  function createAccount(address _newUser) public onlyInviteAdmin {\n    require(!accounts[_newUser]);\n    createAccountFor(_newUser);\n  }\n\n  /**\n   * @dev Create an invite using the signing model described in the contract description\n   * @param _sig Signature for `msg.sender`\n   */\n  function createInvite(bytes _sig) public onlyUser {\n    require(inviteCollateralizer.takeCollateral(msg.sender));\n\n    address signer = recoverSigner(_sig);\n    require(inviteDoesNotExist(signer));\n\n    invites[signer] = Invite(msg.sender, address(0));\n    InviteCreated(msg.sender);\n  }\n\n  /**\n   * @dev Accept an invite using the signing model described in the contract description\n   * @param _sig Signature for `msg.sender` via the same key that issued the initial invite\n   */\n  function acceptInvite(bytes _sig) public onlyNonUser {\n    address signer = recoverSigner(_sig);\n    require(inviteExists(signer) && inviteHasNotBeenAccepted(signer));\n\n    invites[signer].recipient = msg.sender;\n    createAccountFor(msg.sender);\n    InviteAccepted(invites[signer].creator, msg.sender);\n  }\n\n  /**\n   * @dev Check if an invite has not been set on the struct meaning it hasn't been accepted\n   */\n  function inviteHasNotBeenAccepted(address _signer) internal view returns (bool) {\n    return invites[_signer].recipient == address(0);\n  }\n\n  /**\n   * @dev Check that an invite hasn't already been created with this signer\n   */\n  function inviteDoesNotExist(address _signer) internal view returns (bool) {\n    return !inviteExists(_signer);\n  }\n\n  /**\n   * @dev Check that an invite has already been created with this signer\n   */\n  function inviteExists(address _signer) internal view returns (bool) {\n    return invites[_signer].creator != address(0);\n  }\n\n  /**\n   * @dev Recover the address associated with the public key that signed the provided signature\n   * @param _sig Signature of `msg.sender`\n   */\n  function recoverSigner(bytes _sig) private view returns (address) {\n    address signer = ECRecovery.recover(keccak256(msg.sender), _sig);\n    require(signer != address(0));\n\n    return signer;\n  }\n\n  /**\n   * @dev Create an account and emit an event\n   * @param _newUser Address of the new user\n   */\n  function createAccountFor(address _newUser) private {\n    accounts[_newUser] = true;\n    AccountCreated(_newUser);\n  }\n\n  /**\n   * @dev Addresses with Bloom accounts already are not allowed\n   */\n  modifier onlyNonUser {\n    require(!accounts[msg.sender]);\n    _;\n  }\n\n  /**\n   * @dev Addresses without Bloom accounts already are not allowed\n   */\n  modifier onlyUser {\n    require(accounts[msg.sender]);\n    _;\n  }\n\n  modifier nonZero(address _address) {\n    require(_address != 0);\n    _;\n  }\n\n  modifier onlyInviteAdmin {\n    require(msg.sender == inviteAdmin);\n    _;\n  }\n}\n\nlibrary ECRecovery {\n\n  /**\n   * @dev Recover signer address from a message by using his signature\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n   */\n  function recover(bytes32 hash, bytes sig) public pure returns (address) {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n\n    //Check the signature length\n    if (sig.length != 65) {\n      return (address(0));\n    }\n\n    // Extracting these values isn't possible without assembly\n    // solhint-disable no-inline-assembly\n    // Divide the signature in r, s and v variables\n    assembly {\n      r := mload(add(sig, 32))\n      s := mload(add(sig, 64))\n      v := byte(0, mload(add(sig, 96)))\n    }\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n    if (v < 27) {\n      v += 27;\n    }\n\n    // If the version is correct return the signer address\n    if (v != 27 && v != 28) {\n      return (address(0));\n    } else {\n      return ecrecover(hash, v, r, s);\n    }\n  }\n\n}\n\ncontract InviteCollateralizer is Ownable {\n  // We need to rely on time for lockup periods. The amount that miners can manipulate\n  // a timestamp is not a concern for this behavior since token lockups are for several months\n  // solhint-disable not-rely-on-time\n\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20;\n\n  ERC20 public blt;\n  address public seizedTokensWallet;\n  mapping (address => Collateralization[]) public collateralizations;\n  uint256 public collateralAmount = 1e17;\n  uint64 public lockupDuration = 1 years;\n\n  address private collateralTaker;\n  address private collateralSeizer;\n\n  struct Collateralization {\n    uint256 value; // Amount of BLT\n    uint64 releaseDate; // Date BLT can be withdrawn\n    bool claimed; // Has the original owner or the network claimed the collateral\n  }\n\n  event CollateralPosted(address indexed owner, uint64 releaseDate, uint256 amount);\n  event CollateralSeized(address indexed owner, uint256 collateralId);\n\n  function InviteCollateralizer(ERC20 _blt, address _seizedTokensWallet) public {\n    blt = _blt;\n    seizedTokensWallet = _seizedTokensWallet;\n    collateralTaker = owner;\n    collateralSeizer = owner;\n  }\n\n  function takeCollateral(address _owner) public onlyCollateralTaker returns (bool) {\n    require(blt.transferFrom(_owner, address(this), collateralAmount));\n\n    uint64 releaseDate = uint64(now) + lockupDuration;\n    CollateralPosted(_owner, releaseDate, collateralAmount);\n    collateralizations[_owner].push(Collateralization(collateralAmount, releaseDate, false));\n\n    return true;\n  }\n\n  function reclaim() public returns (bool) {\n    require(collateralizations[msg.sender].length > 0);\n\n    uint256 reclaimableAmount = 0;\n\n    for (uint256 i = 0; i < collateralizations[msg.sender].length; i++) {\n      if (collateralizations[msg.sender][i].claimed) {\n        continue;\n      } else if (collateralizations[msg.sender][i].releaseDate > now) {\n        break;\n      }\n\n      reclaimableAmount = reclaimableAmount.add(collateralizations[msg.sender][i].value);\n      collateralizations[msg.sender][i].claimed = true;\n    }\n\n    require(reclaimableAmount > 0);\n\n    return blt.transfer(msg.sender, reclaimableAmount);\n  }\n\n  function seize(address _subject, uint256 _collateralId) public onlyCollateralSeizer {\n    require(collateralizations[_subject].length >= _collateralId + 1);\n    require(!collateralizations[_subject][_collateralId].claimed);\n\n    collateralizations[_subject][_collateralId].claimed = true;\n    blt.transfer(seizedTokensWallet, collateralizations[_subject][_collateralId].value);\n    CollateralSeized(_subject, _collateralId);\n  }\n\n  function changeCollateralTaker(address _newCollateralTaker) public nonZero(_newCollateralTaker) onlyOwner {\n    collateralTaker = _newCollateralTaker;\n  }\n\n  function changeCollateralSeizer(address _newCollateralSeizer) public nonZero(_newCollateralSeizer) onlyOwner {\n    collateralSeizer = _newCollateralSeizer;\n  }\n\n  function changeCollateralAmount(uint256 _newAmount) public onlyOwner {\n    require(_newAmount > 0);\n    collateralAmount = _newAmount;\n  }\n\n  function changeSeizedTokensWallet(address _newSeizedTokensWallet) public nonZero(_newSeizedTokensWallet) onlyOwner {\n    seizedTokensWallet = _newSeizedTokensWallet; \n  }\n\n  function changeLockupDuration(uint64 _newLockupDuration) public onlyOwner {\n    lockupDuration = _newLockupDuration;\n  }\n\n  modifier nonZero(address _address) {\n    require(_address != 0);\n    _;\n  }\n\n  modifier onlyCollateralTaker {\n    require(msg.sender == collateralTaker);\n    _;\n  }\n\n  modifier onlyCollateralSeizer {\n    require(msg.sender == collateralSeizer);\n    _;\n  }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000107c4504cd79c5d2696ea0030a8dd4e92601b82e0000000000000000000000003400696045f706f3309927cb8fdf63f07b616c6f",
  "libraries": [
    {
      "name": "ECRecovery",
      "address": "0x46d9ca26d2c904000b3072c594cf701858d04844"
    }
  ]
}