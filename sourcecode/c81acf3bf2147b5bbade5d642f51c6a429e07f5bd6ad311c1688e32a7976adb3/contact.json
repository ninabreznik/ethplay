{
  "address": "0xf1252560e9bf579550622f25c533fea1279e10a1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NlinkToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-26\n*/\n\npragma solidity ^0.4.8;\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b > 0);\n    uint256 c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      revert();\n    }\n  }\n}\n\ncontract NlinkToken is SafeMath {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOf;\n    mapping (address => uint256) public freezeOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* This notifies clients about the amount burnt */\n    event Burn(address indexed from, uint256 value);\n\n    /* This notifies clients about the amount frozen */\n    event Freeze(address indexed from, uint256 value);\n\n    /* This notifies clients about the amount unfrozen */\n    event Unfreeze(address indexed from, uint256 value);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function NlinkToken() {\n        balanceOf[msg.sender] = 100000000000000000;       // Give the creator all initial tokens\n        totalSupply = 100000000000000000;                 // Update total supply\n        name = 'New Link coin';                          // Set the name for display purposes\n        symbol = 'Nlink';                          // Set the symbol for display purposes\n        decimals = 8;                            // Amount of decimals for display purposes\n    }\n\n    /* Send tokens */\n    function transfer(address _to, uint256 _value) {\n        if (_to == 0x0) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\n        if (_value <= 0) revert();\n        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);              // Subtract from the sender\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\n        Transfer(msg.sender, _to, _value);                      // Notify anyone listening that this transfer took place\n    }\n\n    /* Allow another contract to spend some tokens in your behalf */\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        require((_value == 0) || (allowance[msg.sender][_spender] == 0));\n        if (_value <= 0) revert();\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /* Transfer tokens */\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (_to == 0x0) revert();                                // Prevent transfer to 0x0 address. Use burn() instead\n        if (_value <= 0) revert();\n        if (balanceOf[_from] < _value) revert();                 // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  // Check for overflows\n        if (_value > allowance[_from][msg.sender]) revert();     // Check allowance\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                         // Subtract from the sender\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /* Destruction of the token */\n    function burn(uint256 _value) returns (bool success) {\n        if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\n        if (_value <= 0) revert();\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);           // Subtract from the sender\n        totalSupply = SafeMath.safeSub(totalSupply,_value);                                // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    function freeze(uint256 _value) returns (bool success) {\n        if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\n        if (_value <= 0) revert();\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);             // Subtract from the sender\n        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);               // Updates frozen tokens\n        Freeze(msg.sender, _value);\n        return true;\n    }\n\n    function unfreeze(uint256 _value) returns (bool success) {\n        if (freezeOf[msg.sender] < _value) revert();            // Check if the sender has enough\n        if (_value <= 0) revert();\n        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);              // Updates frozen tokens\n        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);            // Add to the sender\n        Unfreeze(msg.sender, _value);\n        return true;\n    }\n\n    /* Prevents accidental sending of Ether */\n    function () {\n        revert();\n    }\n    /* token code by [emailÂ protected]mail.com */\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b5b600160a060020a0333166000908152600460205260409081902067016345785d8a0000908190556003558051908101604052600d81527f4e6577204c696e6b20636f696e000000000000000000000000000000000000006020820152600090805161007f9291602001906100db565b5060408051908101604052600581527f4e6c696e6b000000000000000000000000000000000000000000000000000000602082015260019080516100c79291602001906100db565b506002805460ff191660081790555b61017b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011c57805160ff1916838001178555610149565b82800160010185558215610149579182015b8281111561014957825182559160200191906001019061012e565b5b5061015692915061015a565b5090565b61017891905b808211156101565760008155600101610160565b5090565b90565b610bb48061018a6000396000f300606060405236156100c25763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d5578063095ea7b31461016057806318160ddd1461019657806323b872dd146101bb578063313ce567146101f757806342966c68146102205780636623fc461461024a57806370a082311461027457806395d89b41146102a5578063a9059cbb14610330578063cd4217c114610354578063d7a78db814610385578063dd62ed3e146103af575b34156100cd57600080fd5b5b600080fd5b005b34156100e057600080fd5b6100e86103e6565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101255780820151818401525b60200161010c565b50505050905090810190601f1680156101525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016b57600080fd5b610182600160a060020a0360043516602435610484565b604051901515815260200160405180910390f35b34156101a157600080fd5b6101a9610500565b60405190815260200160405180910390f35b34156101c657600080fd5b610182600160a060020a0360043581169060243516604435610506565b604051901515815260200160405180910390f35b341561020257600080fd5b61020a6106ac565b60405160ff909116815260200160405180910390f35b341561022b57600080fd5b6101826004356106b5565b604051901515815260200160405180910390f35b341561025557600080fd5b61018260043561077a565b604051901515815260200160405180910390f35b341561027f57600080fd5b6101a9600160a060020a036004351661085a565b60405190815260200160405180910390f35b34156102b057600080fd5b6100e861086c565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101255780820151818401525b60200161010c565b50505050905090810190601f1680156101525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561033b57600080fd5b6100d3600160a060020a036004351660243561090a565b005b341561035f57600080fd5b6101a9600160a060020a0360043516610a28565b60405190815260200160405180910390f35b341561039057600080fd5b610182600435610a3a565b604051901515815260200160405180910390f35b34156103ba57600080fd5b6101a9600160a060020a0360043581169060243516610b1a565b60405190815260200160405180910390f35b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561047c5780601f106104515761010080835404028352916020019161047c565b820191906000526020600020905b81548152906001019060200180831161045f57829003601f168201915b505050505081565b60008115806104b65750600160a060020a03338116600090815260066020908152604080832093871683529290522054155b15156104c157600080fd5b600082116104ce57600080fd5b50600160a060020a03338116600090815260066020908152604080832093861683529290522081905560015b92915050565b60035481565b6000600160a060020a038316151561051d57600080fd5b6000821161052a57600080fd5b600160a060020a0384166000908152600460205260409020548290101561055057600080fd5b600160a060020a038316600090815260046020526040902054828101101561057757600080fd5b600160a060020a03808516600090815260066020908152604080832033909416835292905220548211156105aa57600080fd5b600160a060020a0384166000908152600460205260409020546105cd9083610b37565b600160a060020a0380861660009081526004602052604080822093909355908516815220546105fc9083610b50565b600160a060020a0380851660009081526004602090815260408083209490945587831682526006815283822033909316825291909152205461063e9083610b37565b600160a060020a03808616600081815260066020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b9392505050565b60025460ff1681565b600160a060020a033316600090815260046020526040812054829010156106db57600080fd5b600082116106e857600080fd5b600160a060020a03331660009081526004602052604090205461070b9083610b37565b600160a060020a0333166000908152600460205260409020556003546107319083610b37565b600355600160a060020a0333167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25060015b919050565b600160a060020a033316600090815260056020526040812054829010156107a057600080fd5b600082116107ad57600080fd5b600160a060020a0333166000908152600560205260409020546107d09083610b37565b600160a060020a0333166000908152600560209081526040808320939093556004905220546107ff9083610b50565b600160a060020a0333166000818152600460205260409081902092909255907f2cfce4af01bcb9d6cf6c84ee1b7c491100b8695368264146a94d71e10a63083f9084905190815260200160405180910390a25060015b919050565b60046020526000908152604090205481565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561047c5780601f106104515761010080835404028352916020019161047c565b820191906000526020600020905b81548152906001019060200180831161045f57829003601f168201915b505050505081565b600160a060020a038216151561091f57600080fd5b6000811161092c57600080fd5b600160a060020a0333166000908152600460205260409020548190101561095257600080fd5b600160a060020a038216600090815260046020526040902054818101101561097957600080fd5b600160a060020a03331660009081526004602052604090205461099c9082610b37565b600160a060020a0333811660009081526004602052604080822093909355908416815220546109cb9082610b50565b600160a060020a0380841660008181526004602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35b5050565b60056020526000908152604090205481565b600160a060020a03331660009081526004602052604081205482901015610a6057600080fd5b60008211610a6d57600080fd5b600160a060020a033316600090815260046020526040902054610a909083610b37565b600160a060020a033316600090815260046020908152604080832093909355600590522054610abf9083610b50565b600160a060020a0333166000818152600560205260409081902092909255907ff97a274face0b5517365ad396b1fdba6f68bd3135ef603e44272adba3af5a1e09084905190815260200160405180910390a25060015b919050565b600660209081526000928352604080842090915290825290205481565b6000610b4583831115610b78565b508082035b92915050565b6000828201610b6d848210801590610b685750838210155b610b78565b8091505b5092915050565b801515610b8457600080fd5b5b505600a165627a7a723058205d5f0a69d75da1d777e7933299927ffb612cf7fab22869691de5629c7d97508e0029"
}