{
  "address": "0xf7bc2f1e9c4c5a59d1ccfa52d54a1b7ff1e75c50",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SundayLottery",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-10\n*/\n\npragma solidity >0.4.99 <0.6.0;\n\ncontract Parameters {\n\n    uint public constant PRICE_OF_TOKEN = 0.01 ether;\n    uint public constant MAX_TOKENS_BUY = 80;\n    uint public constant MIN_TICKETS_BUY_FOR_ROUND = 80;\n\n    uint public maxNumberStepCircle = 40;\n\n    uint public currentRound;\n    uint public totalEthRaised;\n    uint public totalTicketBuyed;\n\n    uint public uniquePlayer;\n\n    uint public numberCurrentTwist;\n\n    bool public isTwist;\n\n    bool public isDemo;\n    uint public simulateDate;\n\n}\n\nlibrary Zero {\n    function requireNotZero(address addr) internal pure {\n        require(addr != address(0), \"require not zero address\");\n    }\n\n    function requireNotZero(uint val) internal pure {\n        require(val != 0, \"require not zero value\");\n    }\n\n    function notZero(address addr) internal pure returns(bool) {\n        return !(addr == address(0));\n    }\n\n    function isZero(address addr) internal pure returns(bool) {\n        return addr == address(0);\n    }\n\n    function isZero(uint a) internal pure returns(bool) {\n        return a == 0;\n    }\n\n    function notZero(uint a) internal pure returns(bool) {\n        return a != 0;\n    }\n}\n\nlibrary Address {\n    function toAddress(bytes memory source) internal pure returns(address addr) {\n        assembly { addr := mload(add(source,0x14)) }\n        return addr;\n    }\n\n    function isNotContract(address addr) internal view returns(bool) {\n        uint length;\n        assembly { length := extcodesize(addr) }\n        return length == 0;\n    }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a);\n        uint256 c = _a - _b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        require(c >= _a);\n\n        return c;\n    }\n\n}\n\nlibrary Percent {\n    struct percent {\n        uint num;\n        uint den;\n    }\n\n    function mul(percent storage p, uint a) internal view returns (uint) {\n        if (a == 0) {\n            return 0;\n        }\n        return a*p.num/p.den;\n    }\n\n    function div(percent storage p, uint a) internal view returns (uint) {\n        return a/p.num*p.den;\n    }\n\n    function sub(percent storage p, uint a) internal view returns (uint) {\n        uint b = mul(p, a);\n        if (b >= a) {\n            return 0;\n        }\n        return a - b;\n    }\n\n    function add(percent storage p, uint a) internal view returns (uint) {\n        return a + mul(p, a);\n    }\n\n    function toMemory(percent storage p) internal view returns (Percent.percent memory) {\n        return Percent.percent(p.num, p.den);\n    }\n\n    function mmul(percent memory p, uint a) internal pure returns (uint) {\n        if (a == 0) {\n            return 0;\n        }\n        return a*p.num/p.den;\n    }\n\n    function mdiv(percent memory p, uint a) internal pure returns (uint) {\n        return a/p.num*p.den;\n    }\n\n    function msub(percent memory p, uint a) internal pure returns (uint) {\n        uint b = mmul(p, a);\n        if (b >= a) {\n            return 0;\n        }\n        return a - b;\n    }\n\n    function madd(percent memory p, uint a) internal pure returns (uint) {\n        return a + mmul(p, a);\n    }\n}\n\n\ncontract Accessibility {\n    address private owner;\n    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"access denied\");\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function changeOwner(address _newOwner) onlyOwner public {\n        require(_newOwner != address(0));\n        emit OwnerChanged(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\n\ncontract TicketsStorage is Accessibility, Parameters  {\n    using SafeMath for uint;\n    using Percent for Percent.percent;\n\n    struct Ticket {\n        address payable wallet;\n        uint winnerRound;\n    }\n\n    struct CountWinner {\n        uint countWinnerRound_1;\n        uint countWinnerRound_2;\n        uint countWinnerRound_3;\n        uint countWinnerRound_4;\n        uint countWinnerRound_5;\n    }\n\n    struct PayEachWinner {\n        uint payEachWinner_1;\n        uint payEachWinner_2;\n        uint payEachWinner_3;\n        uint payEachWinner_4;\n        uint payEachWinner_5;\n    }\n\n    uint private stepEntropy = 1;\n    uint private precisionPay = 4;\n\n    uint private remainStepTS;\n    uint private countStepTS;\n\n    mapping (uint => CountWinner) countWinner;\n    // currentRound -> CountWinner\n\n    mapping (uint => PayEachWinner) payEachWinner;\n    // currentRound -> PayEachWinner\n\n    mapping (uint => uint) private countTickets;\n    // currentRound -> number ticket\n\n    mapping (uint => mapping (uint => Ticket)) private tickets;\n    // currentRound -> number ticket -> Ticket\n\n    mapping (uint => mapping (address => uint)) private balancePlayer;\n    // currentRound -> wallet -> balance player\n\n    mapping (uint => mapping (address => uint)) private balanceWinner;\n    // currentRound -> wallet -> balance winner\n\n    mapping (uint => uint[]) private happyTickets;\n    // currentRound -> array happy tickets\n\n    Percent.percent private percentTicketPrize_2 = Percent.percent(1,100);            // 1.0 %\n    Percent.percent private percentTicketPrize_3 = Percent.percent(4,100);            // 4.0 %\n    Percent.percent private percentTicketPrize_4 = Percent.percent(10,100);            // 10.0 %\n    Percent.percent private percentTicketPrize_5 = Percent.percent(35,100);            // 35.0 %\n\n    Percent.percent private percentAmountPrize_1 = Percent.percent(1797,10000);            // 17.97%\n    Percent.percent private percentAmountPrize_2 = Percent.percent(1000,10000);            // 10.00%\n    Percent.percent private percentAmountPrize_3 = Percent.percent(1201,10000);            // 12.01%\n    Percent.percent private percentAmountPrize_4 = Percent.percent(2000,10000);            // 20.00%\n    Percent.percent private percentAmountPrize_5 = Percent.percent(3502,10000);            // 35.02%\n\n\n    event LogMakeDistribution(uint roundLottery, uint roundDistibution, uint countWinnerRound, uint payEachWinner);\n    event LogHappyTicket(uint roundLottery, uint roundDistibution, uint happyTicket);\n\n    function isWinner(uint round, uint numberTicket) public view returns (bool) {\n        return tickets[round][numberTicket].winnerRound > 0;\n    }\n\n    function getBalancePlayer(uint round, address wallet) public view returns (uint) {\n        return balancePlayer[round][wallet];\n    }\n\n    function getBalanceWinner(uint round, address wallet) public view returns (uint) {\n        return balanceWinner[round][wallet];\n    }\n\n    function ticketInfo(uint round, uint numberTicket) public view returns(address payable wallet, uint winnerRound) {\n        Ticket memory ticket = tickets[round][numberTicket];\n        wallet = ticket.wallet;\n        winnerRound = ticket.winnerRound;\n    }\n\n    function newTicket(uint round, address payable wallet, uint priceOfToken) public onlyOwner {\n        countTickets[round]++;\n        Ticket storage ticket = tickets[round][countTickets[round]];\n        ticket.wallet = wallet;\n        balancePlayer[round][wallet] = balancePlayer[round][wallet].add(priceOfToken);\n    }\n\n    function clearRound(uint round) public {\n        countTickets[round] = 0;\n        countWinner[round] = CountWinner(0,0,0,0,0);\n        payEachWinner[round] = PayEachWinner(0,0,0,0,0);\n        stepEntropy = 1;\n        remainStepTS = 0;\n        countStepTS = 0;\n    }\n\n    function makeDistribution(uint round, uint priceOfToken) public onlyOwner {\n        uint count = countTickets[round];\n        uint amountEthCurrentRound = count.mul(priceOfToken);\n\n        makeCountWinnerRound(round, count);\n        makePayEachWinner(round, amountEthCurrentRound);\n\n        CountWinner memory cw = countWinner[round];\n        PayEachWinner memory pw = payEachWinner[round];\n\n        emit LogMakeDistribution(round, 1, cw.countWinnerRound_1, pw.payEachWinner_1);\n        emit LogMakeDistribution(round, 2, cw.countWinnerRound_2, pw.payEachWinner_2);\n        emit LogMakeDistribution(round, 3, cw.countWinnerRound_3, pw.payEachWinner_3);\n        emit LogMakeDistribution(round, 4, cw.countWinnerRound_4, pw.payEachWinner_4);\n        emit LogMakeDistribution(round, 5, cw.countWinnerRound_5, pw.payEachWinner_5);\n\n        if (happyTickets[round].length > 0) {\n            delete happyTickets[round];\n        }\n    }\n\n    function makeCountWinnerRound(uint round, uint cntTickets) internal {\n        uint cw_1 = 1;\n        uint cw_2 = percentTicketPrize_2.mmul(cntTickets);\n        uint cw_3 = percentTicketPrize_3.mmul(cntTickets);\n        uint cw_4 = percentTicketPrize_4.mmul(cntTickets);\n        uint cw_5 = percentTicketPrize_5.mmul(cntTickets);\n\n        countWinner[round] = CountWinner(cw_1, cw_2, cw_3, cw_4, cw_5);\n    }\n\n    function makePayEachWinner(uint round, uint amountEth) internal {\n        CountWinner memory cw = countWinner[round];\n\n        uint pw_1 = roundEth(percentAmountPrize_1.mmul(amountEth).div(cw.countWinnerRound_1), precisionPay);\n        uint pw_2 = roundEth(percentAmountPrize_2.mmul(amountEth).div(cw.countWinnerRound_2), precisionPay);\n        uint pw_3 = roundEth(percentAmountPrize_3.mmul(amountEth).div(cw.countWinnerRound_3), precisionPay);\n        uint pw_4 = roundEth(percentAmountPrize_4.mmul(amountEth).div(cw.countWinnerRound_4), precisionPay);\n        uint pw_5 = roundEth(percentAmountPrize_5.mmul(amountEth).div(cw.countWinnerRound_5), precisionPay);\n\n        payEachWinner[round] = PayEachWinner(pw_1, pw_2, pw_3, pw_4, pw_5);\n\n    }\n\n    function getCountTickets(uint round) public view returns (uint) {\n        return countTickets[round];\n    }\n\n    function getCountTwist(uint countsTickets, uint maxCountTicketByStep) public returns(uint countTwist) {\n        countTwist = countsTickets.div(2).div(maxCountTicketByStep);\n        if (countsTickets > countTwist.mul(2).mul(maxCountTicketByStep)) {\n            remainStepTS = countsTickets.sub(countTwist.mul(2).mul(maxCountTicketByStep));\n            countTwist++;\n        }\n        countStepTS = countTwist;\n\n    }\n\n    function getMemberArrayHappyTickets(uint round, uint index) public view returns (uint value) {\n        value =  happyTickets[round][index];\n    }\n\n    function getLengthArrayHappyTickets(uint round) public view returns (uint length) {\n        length = happyTickets[round].length;\n    }\n\n    function getStepTransfer() public view returns (uint stepTransfer, uint remainTicket) {\n        stepTransfer = countStepTS;\n        remainTicket = remainStepTS;\n    }\n\n    function getCountWinnersDistrib(uint round) public view returns (uint countWinnerRound_1, uint countWinnerRound_2, uint countWinnerRound_3, uint countWinnerRound_4, uint countWinnerRound_5) {\n        CountWinner memory cw = countWinner[round];\n\n        countWinnerRound_1 = cw.countWinnerRound_1;\n        countWinnerRound_2 = cw.countWinnerRound_2;\n        countWinnerRound_3 = cw.countWinnerRound_3;\n        countWinnerRound_4 = cw.countWinnerRound_4;\n        countWinnerRound_5 = cw.countWinnerRound_5;\n    }\n\n    function getPayEachWinnersDistrib(uint round) public view returns (uint payEachWinner_1, uint payEachWinner_2, uint payEachWinner_3, uint payEachWinner_4, uint payEachWinner_5) {\n        PayEachWinner memory pw = payEachWinner[round];\n\n        payEachWinner_1 = pw.payEachWinner_1;\n        payEachWinner_2 = pw.payEachWinner_2;\n        payEachWinner_3 = pw.payEachWinner_3;\n        payEachWinner_4 = pw.payEachWinner_4;\n        payEachWinner_5 = pw.payEachWinner_5;\n    }\n\n    function addBalanceWinner(uint round, uint amountPrize, uint happyNumber) public onlyOwner {\n        balanceWinner[round][tickets[round][happyNumber].wallet] = balanceWinner[round][tickets[round][happyNumber].wallet].add(amountPrize);\n    }\n\n    function setWinnerRountForTicket(uint round, uint winnerRound, uint happyNumber) public onlyOwner {\n        tickets[round][happyNumber].winnerRound = winnerRound;\n    }\n\n    //            tickets[round][happyNumber].winnerRound = winnerRound;\n\n    function addHappyNumber(uint round, uint numCurTwist, uint happyNumber) public onlyOwner {\n        happyTickets[round].push(happyNumber);\n        emit LogHappyTicket(round, numCurTwist, happyNumber);\n    }\n\n    function findHappyNumber(uint round) public onlyOwner returns(uint) {\n        stepEntropy++;\n        uint happyNumber = getRandomNumberTicket(stepEntropy, round);\n        while (tickets[round][happyNumber].winnerRound > 0) {\n            stepEntropy++;\n            happyNumber++;\n            if (happyNumber > countTickets[round]) {\n                happyNumber = 1;\n            }\n        }\n        return happyNumber;\n    }\n\n    function getRandomNumberTicket(uint entropy, uint round) public view returns(uint) {\n        require(countTickets[round] > 0, \"number of tickets must be greater than 0\");\n        uint randomFirst = maxRandom(block.number, msg.sender).div(now);\n        uint randomNumber = randomFirst.mul(entropy) % (countTickets[round]);\n        if (randomNumber == 0) { randomNumber = 1;}\n        return randomNumber;\n    }\n\n    function random(uint upper, uint blockn, address entropy) internal view returns (uint randomNumber) {\n        return maxRandom(blockn, entropy) % upper;\n    }\n\n    function maxRandom(uint blockn, address entropy) internal view returns (uint randomNumber) {\n        return uint(keccak256(\n                abi.encodePacked(\n                    blockhash(blockn),\n                    entropy)\n            ));\n    }\n\n    function roundEth(uint numerator, uint precision) internal pure returns(uint round) {\n        if (precision > 0 && precision < 18) {\n            uint256 _numerator = numerator / 10 ** (18 - precision - 1);\n            //            _numerator = (_numerator + 5) / 10;\n            _numerator = (_numerator) / 10;\n            round = (_numerator) * 10 ** (18 - precision);\n        }\n    }\n\n\n}\n\ncontract SundayLottery is Accessibility, Parameters {\n    using SafeMath for uint;\n\n    using Address for *;\n    using Zero for *;\n\n    TicketsStorage private m_tickets;\n    mapping (address => bool) private notUnigue;\n\n\n    address payable public administrationWallet;\n\n    uint private countWinnerRound_1;\n    uint private countWinnerRound_2;\n    uint private countWinnerRound_3;\n    uint private countWinnerRound_4;\n    uint private countWinnerRound_5;\n\n    uint private payEachWinner_1;\n    uint private payEachWinner_2;\n    uint private payEachWinner_3;\n    uint private payEachWinner_4;\n    uint private payEachWinner_5;\n\n    uint private remainStep;\n    uint private countStep;\n\n    // more events for easy read from blockchain\n    event LogNewTicket(address indexed addr, uint when, uint round);\n    event LogBalanceChanged(uint when, uint balance);\n    event LogChangeTime(uint newDate, uint oldDate);\n    event LogRefundEth(address indexed player, uint value);\n    event LogWinnerDefine(uint roundLottery, uint typeWinner, uint step);\n    event ChangeAddressWallet(address indexed owner, address indexed newAddress, address indexed oldAddress);\n    event SendToAdministrationWallet(uint balanceContract);\n    event Play(uint currentRound, uint numberCurrentTwist);\n\n    modifier balanceChanged {\n        _;\n        emit LogBalanceChanged(getCurrentDate(), address(this).balance);\n    }\n\n    modifier notFromContract() {\n        require(msg.sender.isNotContract(), \"only externally accounts\");\n        _;\n    }\n\n    constructor(address payable _administrationWallet) public {\n        require(_administrationWallet != address(0));\n        administrationWallet = _administrationWallet;\n        m_tickets = new TicketsStorage();\n        currentRound = 1;\n        m_tickets.clearRound(currentRound);\n    }\n\n    function() external payable {\n        if (msg.value >= PRICE_OF_TOKEN) {\n            buyTicket(msg.sender);\n        } else if (msg.value.isZero()) {\n            makeTwists();\n        } else {\n            refundEth(msg.sender, msg.value);\n        }\n    }\n\n    function getMemberArrayHappyTickets(uint round, uint index) public view returns (uint value) {\n        value =  m_tickets.getMemberArrayHappyTickets(round, index);\n    }\n\n    function getLengthArrayHappyTickets(uint round) public view returns (uint length) {\n        length =  m_tickets.getLengthArrayHappyTickets(round);\n    }\n\n    function getTicketInfo(uint round, uint index) public view returns (address payable wallet, uint winnerRound) {\n        (wallet, winnerRound) =  m_tickets.ticketInfo(round, index);\n    }\n\n    function getCountWinnersDistrib() public view returns (uint countWinRound_1, uint countWinRound_2,\n        uint countWinRound_3, uint countWinRound_4, uint countWinRound_5) {\n        (countWinRound_1, countWinRound_2, countWinRound_3,\n        countWinRound_4, countWinRound_5) = m_tickets.getCountWinnersDistrib(currentRound);\n    }\n\n    function getPayEachWinnersDistrib() public view returns (uint payEachWin_1, uint payEachWin_2,\n        uint payEachWin_3, uint payEachWin_4, uint payEachWin_5) {\n        (payEachWin_1, payEachWin_2, payEachWin_3,\n        payEachWin_4, payEachWin_5) = m_tickets.getPayEachWinnersDistrib(currentRound);\n    }\n\n    function getStepTransfer() public view returns (uint stepTransferVal, uint remainTicketVal) {\n        (stepTransferVal, remainTicketVal) = m_tickets.getStepTransfer();\n    }\n\n    function loadWinnersPerRound() internal {\n        (countWinnerRound_1, countWinnerRound_2, countWinnerRound_3,\n        countWinnerRound_4, countWinnerRound_5) = getCountWinnersDistrib();\n    }\n\n    function loadPayEachWinners() internal {\n        (payEachWinner_1, payEachWinner_2, payEachWinner_3,\n        payEachWinner_4, payEachWinner_5) = getPayEachWinnersDistrib();\n    }\n\n    function loadCountStep() internal {\n        (countStep, remainStep) = m_tickets.getStepTransfer();\n    }\n\n    function balanceETH() external view returns(uint) {\n        return address(this).balance;\n    }\n\n    function refundEth(address payable _player, uint _value) internal returns (bool) {\n        require(_player.notZero());\n        _player.transfer(_value);\n        emit LogRefundEth(_player, _value);\n    }\n\n    function buyTicket(address payable _addressPlayer) public payable notFromContract balanceChanged {\n        uint investment = msg.value;\n        require(investment >= PRICE_OF_TOKEN, \"investment must be >= PRICE_OF_TOKEN\");\n        require(!isTwist, \"ticket purchase is prohibited during the twist\");\n\n        uint tickets = investment.div(PRICE_OF_TOKEN);\n        if (tickets > MAX_TOKENS_BUY) {\n            tickets = MAX_TOKENS_BUY;\n        }\n        uint requireEth = tickets.mul(PRICE_OF_TOKEN);\n        if (investment > requireEth) {\n            refundEth(msg.sender, investment.sub(requireEth));\n        }\n\n        if (tickets > 0) {\n            uint currentDate = now;\n            while (tickets != 0) {\n                m_tickets.newTicket(currentRound, _addressPlayer, PRICE_OF_TOKEN);\n                emit LogNewTicket(_addressPlayer, currentDate, currentRound);\n                currentDate++;\n                totalTicketBuyed++;\n                tickets--;\n            }\n        }\n\n        if (!notUnigue[_addressPlayer]) {\n            notUnigue[_addressPlayer] = true;\n            uniquePlayer++;\n        }\n        totalEthRaised = totalEthRaised.add(requireEth);\n    }\n\n    function makeTwists() public notFromContract {\n        uint countTickets = m_tickets.getCountTickets(currentRound);\n        require(countTickets > MIN_TICKETS_BUY_FOR_ROUND, \"the number of tickets purchased must be >= MIN_TICKETS_BUY_FOR_ROUND\");\n        require(isSunday(getCurrentDate()), \"you can only play on Sunday\");\n        if (!isTwist) {\n            numberCurrentTwist = m_tickets.getCountTwist(countTickets, maxNumberStepCircle);\n            m_tickets.makeDistribution(currentRound, PRICE_OF_TOKEN);\n            isTwist = true;\n            loadWinnersPerRound();\n            loadPayEachWinners();\n            loadCountStep();\n        } else {\n            if (numberCurrentTwist > 0) {\n                play(currentRound, maxNumberStepCircle);\n                emit Play(currentRound, numberCurrentTwist);\n                numberCurrentTwist--;\n                if (numberCurrentTwist == 0) {\n                    isTwist = false;\n                    currentRound++;\n                    m_tickets.clearRound(currentRound);\n                    sendToAdministration();\n                }\n            }\n        }\n    }\n\n    function play(uint round, uint maxCountTicketByStep) internal {\n        uint countTransfer = 0;\n        uint numberTransfer = 0;\n        if (remainStep > 0) {\n            if (countStep > 1) {\n                countTransfer = maxCountTicketByStep;\n            } else {\n                countTransfer = remainStep;\n            }\n        } else {\n            countTransfer = maxCountTicketByStep;\n        }\n\n        if (countStep > 0) {\n            if (countWinnerRound_1 > 0 && numberTransfer < countTransfer) {\n                if (transferPrize(payEachWinner_1, round, 1)) {\n                    countWinnerRound_1--;\n                    emit LogWinnerDefine(round, 1, numberTransfer);\n                }\n                numberTransfer++;\n            }\n            if (countWinnerRound_2 > 0 && numberTransfer < countTransfer) {\n                while (numberTransfer < countTransfer && countWinnerRound_2 > 0) {\n                    if (transferPrize(payEachWinner_2, round, 2)) {\n                        countWinnerRound_2--;\n                        emit LogWinnerDefine(round, 2, numberTransfer);\n                    }\n                    numberTransfer++;\n                }\n            }\n            if (countWinnerRound_3 > 0 && numberTransfer < countTransfer) {\n                while (numberTransfer < countTransfer && countWinnerRound_3 > 0) {\n                    if (transferPrize(payEachWinner_3, round, 3)) {\n                        countWinnerRound_3--;\n                        emit LogWinnerDefine(round, 3, numberTransfer);\n                    }\n                    numberTransfer++;\n                }\n            }\n            if (countWinnerRound_4 > 0 && numberTransfer < countTransfer) {\n                while (numberTransfer < countTransfer && countWinnerRound_4 > 0) {\n                    if (transferPrize(payEachWinner_4, round, 4)) {\n                        countWinnerRound_4--;\n                        emit LogWinnerDefine(round, 4, numberTransfer);\n                    }\n                    numberTransfer++;\n                }\n            }\n            if (countWinnerRound_5 > 0 && numberTransfer < countTransfer) {\n                while (numberTransfer < countTransfer && countWinnerRound_5 > 0) {\n                    if (transferPrize(payEachWinner_5, round, 5)) {\n                        countWinnerRound_5--;\n                        emit LogWinnerDefine(round, 5, numberTransfer);\n                    }\n                    numberTransfer++;\n                }\n            }\n\n            countStep--;\n        }\n    }\n\n    function transferPrize(uint amountPrize, uint round, uint winnerRound) internal returns(bool) {\n        if (address(this).balance > amountPrize) {\n            uint happyNumber = m_tickets.findHappyNumber(round);\n            m_tickets.addHappyNumber(currentRound, numberCurrentTwist, happyNumber);\n            m_tickets.addBalanceWinner(currentRound, amountPrize, happyNumber);\n            m_tickets.setWinnerRountForTicket(currentRound, winnerRound, happyNumber);\n            (address payable wallet, ) =  m_tickets.ticketInfo(round, happyNumber);\n            wallet.transfer(amountPrize);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function setMaxNumberStepCircle(uint256 _number) external onlyOwner {\n        require(_number > 0);\n        maxNumberStepCircle = _number;\n    }\n\n    function getBalancePlayer(uint round, address wallet) external view returns (uint) {\n        return m_tickets.getBalancePlayer(round, wallet);\n    }\n\n    function getBalanceWinner(uint round, address wallet) external view returns (uint) {\n        return m_tickets.getBalanceWinner(round, wallet);\n    }\n\n    function getCurrentDate() public view returns (uint) {\n        if (isDemo) {\n            return simulateDate;\n        }\n        return now;\n    }\n\n    function setSimulateDate(uint _newDate) external onlyOwner {\n        if (isDemo) {\n            require(_newDate > simulateDate);\n            emit LogChangeTime(_newDate, simulateDate);\n            simulateDate = _newDate;\n        }\n    }\n\n    function setDemo() external onlyOwner {\n        if (uniquePlayer == 0) {\n            isDemo = true;\n        }\n    }\n\n    function isSunday(uint timestamp) public pure returns (bool) {\n        uint numberDay = (timestamp / (1 days) + 4) % 7;\n        if (numberDay == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function getCountTickets(uint round) public view returns (uint countTickets) {\n        countTickets = m_tickets.getCountTickets(round);\n    }\n\n    function setAdministrationWallet(address payable _newWallet) external onlyOwner {\n        require(_newWallet != address(0));\n        address payable _oldWallet = administrationWallet;\n        administrationWallet = _newWallet;\n        emit ChangeAddressWallet(msg.sender, _newWallet, _oldWallet);\n    }\n\n    function sendToAdministration() internal {\n        require(administrationWallet != address(0), \"wallet address is not 0\");\n        uint amount = address(this).balance;\n\n        if (amount > 0) {\n            if (administrationWallet.send(amount)) {\n                emit SendToAdministrationWallet(amount);\n            }\n        }\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"simulateDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_OF_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getCountTickets\",\"outputs\":[{\"name\":\"countTickets\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberCurrentTwist\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isSunday\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getMemberArrayHappyTickets\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCountWinnersDistrib\",\"outputs\":[{\"name\":\"countWinRound_1\",\"type\":\"uint256\"},{\"name\":\"countWinRound_2\",\"type\":\"uint256\"},{\"name\":\"countWinRound_3\",\"type\":\"uint256\"},{\"name\":\"countWinRound_4\",\"type\":\"uint256\"},{\"name\":\"countWinRound_5\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPayEachWinnersDistrib\",\"outputs\":[{\"name\":\"payEachWin_1\",\"type\":\"uint256\"},{\"name\":\"payEachWin_2\",\"type\":\"uint256\"},{\"name\":\"payEachWin_3\",\"type\":\"uint256\"},{\"name\":\"payEachWin_4\",\"type\":\"uint256\"},{\"name\":\"payEachWin_5\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStepTransfer\",\"outputs\":[{\"name\":\"stepTransferVal\",\"type\":\"uint256\"},{\"name\":\"remainTicketVal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTicketInfo\",\"outputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"winnerRound\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getBalanceWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setDemo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"makeTwists\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniquePlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDate\",\"type\":\"uint256\"}],\"name\":\"setSimulateDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTicketBuyed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressPlayer\",\"type\":\"address\"}],\"name\":\"buyTicket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setAdministrationWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrationWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTwist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDemo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getLengthArrayHappyTickets\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TOKENS_BUY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_TICKETS_BUY_FOR_ROUND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"setMaxNumberStepCircle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getBalancePlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxNumberStepCircle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_administrationWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"LogNewTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldDate\",\"type\":\"uint256\"}],\"name\":\"LogChangeTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogRefundEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"roundLottery\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"typeWinner\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"step\",\"type\":\"uint256\"}],\"name\":\"LogWinnerDefine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"ChangeAddressWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"balanceContract\",\"type\":\"uint256\"}],\"name\":\"SendToAdministrationWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currentRound\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"numberCurrentTwist\",\"type\":\"uint256\"}],\"name\":\"Play\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000009c9ab524379b0e426ac71a060a04b4fc52a58a5"
}