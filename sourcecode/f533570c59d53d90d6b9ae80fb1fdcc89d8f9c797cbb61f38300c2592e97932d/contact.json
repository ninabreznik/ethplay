{
  "address": "0xeaaf270436a0ed397ed23bbf64df7b1dcaff142f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BattleDromeICO",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-06-28\n*/\n\npragma solidity ^0.4.11;\n\n//------------------------------------------------------------------------------------------------\n// LICENSE\n//\n// This file is part of BattleDrome.\n// \n// BattleDrome is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// \n// BattleDrome is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n// \n// You should have received a copy of the GNU General Public License\n// along with BattleDrome.  If not, see <http://www.gnu.org/licenses/>.\n//------------------------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------------------------\n// ERC20 Standard Token Implementation, based on ERC Standard:\n// https://github.com/ethereum/EIPs/issues/20\n// With some inspiration from ConsenSys HumanStandardToken as well\n// Copyright 2017 BattleDrome\n//------------------------------------------------------------------------------------------------\n\ncontract ERC20Standard {\n\tuint public totalSupply;\n\t\n\tstring public name;\n\tuint8 public decimals;\n\tstring public symbol;\n\tstring public version;\n\t\n\tmapping (address => uint256) balances;\n\tmapping (address => mapping (address => uint)) allowed;\n\n\t//Fix for short address attack against ERC20\n\tmodifier onlyPayloadSize(uint size) {\n\t\tassert(msg.data.length == size + 4);\n\t\t_;\n\t} \n\n\tfunction balanceOf(address _owner) constant returns (uint balance) {\n\t\treturn balances[_owner];\n\t}\n\n\tfunction transfer(address _recipient, uint _value) onlyPayloadSize(2*32) {\n\t\trequire(balances[msg.sender] >= _value && _value > 0);\n\t    balances[msg.sender] -= _value;\n\t    balances[_recipient] += _value;\n\t    Transfer(msg.sender, _recipient, _value);        \n    }\n\n\tfunction transferFrom(address _from, address _to, uint _value) {\n\t\trequire(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n    }\n\n\tfunction approve(address _spender, uint _value) {\n\t\tallowed[msg.sender][_spender] = _value;\n\t\tApproval(msg.sender, _spender, _value);\n\t}\n\n\tfunction allowance(address _spender, address _owner) constant returns (uint balance) {\n\t\treturn allowed[_owner][_spender];\n\t}\n\n\t//Event which is triggered to log all transfers to this contract's event log\n\tevent Transfer(\n\t\taddress indexed _from,\n\t\taddress indexed _to,\n\t\tuint _value\n\t\t);\n\t\t\n\t//Event which is triggered whenever an owner approves a new allowance for a spender.\n\tevent Approval(\n\t\taddress indexed _owner,\n\t\taddress indexed _spender,\n\t\tuint _value\n\t\t);\n\n}\n\n//------------------------------------------------------------------------------------------------\n// FAME ERC20 Token, based on ERC20Standard interface\n// Copyright 2017 BattleDrome\n//------------------------------------------------------------------------------------------------\n\ncontract FAMEToken is ERC20Standard {\n\n\tfunction FAMEToken() {\n\t\ttotalSupply = 2100000 szabo;\t\t\t//Total Supply (including all decimal places!)\n\t\tname = \"Fame\";\t\t\t\t\t\t\t//Pretty Name\n\t\tdecimals = 12;\t\t\t\t\t\t\t//Decimal places (with 12 decimal places 1 szabo = 1 token in uint256)\n\t\tsymbol = \"FAM\";\t\t\t\t\t\t\t//Ticker Symbol (3 characters, upper case)\n\t\tversion = \"FAME1.0\";\t\t\t\t\t//Version Code\n\t\tbalances[msg.sender] = totalSupply;\t\t//Assign all balance to creator initially for distribution from there.\n\t}\n\n\t//Burn _value of tokens from your balance.\n\t//Will destroy the tokens, removing them from your balance, and reduce totalSupply accordingly.\n\tfunction burn(uint _value) {\n\t\trequire(balances[msg.sender] >= _value && _value > 0);\n        balances[msg.sender] -= _value;\n        totalSupply -= _value;\n        Burn(msg.sender, _value);\n\t}\n\n\t//Event to log any time someone burns tokens to the contract's event log:\n\tevent Burn(\n\t\taddress indexed _owner,\n\t\tuint _value\n\t\t);\n\n}\n\n//------------------------------------------------------------------------------------------------\n// ICO Crowd Sale Contract\n// Works like a kickstarter. Minimum goal required, or everyone gets their money back\n// Contract holds all tokens, upon success (passing goal on time) sends out all bought tokens\n// It then burns the rest.\n// In the event of failure, it sends tokens back to creator, and all payments back to senders.\n// Each time tokens are bought, a percentage is also issued to the \"Developer\" account.\n// Pay-out of collected Ether to creators is managed through an Escrow address.\n// Copyright 2017 BattleDrome\n//------------------------------------------------------------------------------------------------\n\ncontract BattleDromeICO {\n\tuint public constant ratio = 100 szabo;\t\t\t\t//Ratio of how many tokens (in absolute uint256 form) are issued per ETH\n\tuint public constant minimumPurchase = 1 finney;\t//Minimum purchase size (of incoming ETH)\n\tuint public constant startBlock = 3960000;\t\t\t//Starting Block Number of Crowsd Sale\n\tuint public constant duration = 190000;\t\t\t\t//16s block times 190k is about 35 days, from July 1st, to approx first Friday of August.\n\tuint public constant fundingGoal = 500 ether;\t\t//Minimum Goal in Ether Raised\n\tuint public constant fundingMax = 20000 ether;\t\t//Maximum Funds in Ether that we will accept before stopping the crowdsale\n\tuint public constant devRatio = 20;\t\t\t\t\t//Ratio of Sold Tokens to Dev Tokens (ie 20 = 20:1 or 5%)\n\taddress public constant tokenAddress \t= 0x190e569bE071F40c704e15825F285481CB74B6cC;\t//Address of ERC20 Token Contract\n\taddress public constant escrow \t\t\t= 0x50115D25322B638A5B8896178F7C107CFfc08144;\t//Address of Escrow Provider Wallet\n\n\tFAMEToken public Token;\n\taddress public creator;\n\tuint public savedBalance;\n\tbool public creatorPaid = false;\t\t\t//Has the creator been paid? \n\n\tmapping(address => uint) balances;\t\t\t//Balances in incoming Ether\n\tmapping(address => uint) savedBalances;\t\t//Saved Balances in incoming Ether (for after withdrawl validation)\n\n\t//Constructor, initiate the crowd sale\n\tfunction BattleDromeICO() {\n\t\tToken = FAMEToken(tokenAddress);\t\t\t\t//Establish the Token Contract to handle token transfers\t\t\t\t\t\n\t\tcreator = msg.sender;\t\t\t\t\t\t\t//Establish the Creator address for receiving payout if/when appropriate.\n\t}\n\n\t//Default Function, delegates to contribute function (for ease of use)\n\t//WARNING: Not compatible with smart contract invocation, will exceed gas stipend!\n\t//Only use from full wallets.\n\tfunction () payable {\n\t\tcontribute();\n\t}\n\n\t//Contribute Function, accepts incoming payments and tracks balances\n\tfunction contribute() payable {\n\t\trequire(isStarted());\t\t\t\t\t\t\t\t//Has the crowdsale even started yet?\n\t\trequire(this.balance<=fundingMax); \t\t\t\t\t//Does this payment send us over the max?\n\t\trequire(msg.value >= minimumPurchase);              //Require that the incoming amount is at least the minimum purchase size.\n\t\trequire(!isComplete()); \t\t\t\t\t\t\t//Has the crowdsale completed? We only want to accept payments if we're still active.\n\t\tbalances[msg.sender] += msg.value;\t\t\t\t\t//If all checks good, then accept contribution and record new balance.\n\t\tsavedBalances[msg.sender] += msg.value;\t\t    \t//Save contributors balance for later\t\n\t\tsavedBalance += msg.value;\t\t\t\t\t\t\t//Save the balance for later when we're doing pay-outs so we know what it was.\n\t\tContribution(msg.sender,msg.value,now);             //Woohoo! Log the new contribution!\n\t}\n\n\t//Function to view current token balance of the crowdsale contract\n\tfunction tokenBalance() constant returns(uint balance) {\n\t\treturn Token.balanceOf(address(this));\n\t}\n\n\t//Function to check if crowdsale has started yet, have we passed the start block?\n\tfunction isStarted() constant returns(bool) {\n\t\treturn block.number >= startBlock;\n\t}\n\n\t//Function to check if crowdsale is complete (have we eigher hit our max, or passed the crowdsale completion block?)\n\tfunction isComplete() constant returns(bool) {\n\t\treturn (savedBalance >= fundingMax) || (block.number > (startBlock + duration));\n\t}\n\n\t//Function to check if crowdsale has been successful (has incoming contribution balance met, or exceeded the minimum goal?)\n\tfunction isSuccessful() constant returns(bool) {\n\t\treturn (savedBalance >= fundingGoal);\n\t}\n\n\t//Function to check the Ether balance of a contributor\n\tfunction checkEthBalance(address _contributor) constant returns(uint balance) {\n\t\treturn balances[_contributor];\n\t}\n\n\t//Function to check the Saved Ether balance of a contributor\n\tfunction checkSavedEthBalance(address _contributor) constant returns(uint balance) {\n\t\treturn savedBalances[_contributor];\n\t}\n\n\t//Function to check the Token balance of a contributor\n\tfunction checkTokBalance(address _contributor) constant returns(uint balance) {\n\t\treturn (balances[_contributor] * ratio) / 1 ether;\n\t}\n\n\t//Function to check the current Tokens Sold in the ICO\n\tfunction checkTokSold() constant returns(uint total) {\n\t\treturn (savedBalance * ratio) / 1 ether;\n\t}\n\n\t//Function to get Dev Tokens issued during ICO\n\tfunction checkTokDev() constant returns(uint total) {\n\t\treturn checkTokSold() / devRatio;\n\t}\n\n\t//Function to get Total Tokens Issued during ICO (Dev + Sold)\n\tfunction checkTokTotal() constant returns(uint total) {\n\t\treturn checkTokSold() + checkTokDev();\n\t}\n\n\t//function to check percentage of goal achieved\n\tfunction percentOfGoal() constant returns(uint16 goalPercent) {\n\t\treturn uint16((savedBalance*100)/fundingGoal);\n\t}\n\n\t//function to initiate payout of either Tokens or Ether payback.\n\tfunction payMe() {\n\t\trequire(isComplete()); //No matter what must be complete\n\t\tif(isSuccessful()) {\n\t\t\tpayTokens();\n\t\t}else{\n\t\t\tpayBack();\n\t\t}\n\t}\n\n\t//Function to pay back Ether\n\tfunction payBack() internal {\n\t\trequire(balances[msg.sender]>0);\t\t\t\t\t\t//Does the requester have a balance?\n\t\tbalances[msg.sender] = 0;\t\t\t\t\t\t\t\t//Ok, zero balance first to avoid re-entrance\n\t\tmsg.sender.transfer(savedBalances[msg.sender]);\t\t\t//Send them their saved balance\n\t\tPayEther(msg.sender,savedBalances[msg.sender],now); \t//Log payback of ether\n\t}\n\n\t//Function to pay out Tokens\n\tfunction payTokens() internal {\n\t\trequire(balances[msg.sender]>0);\t\t\t\t\t//Does the requester have a balance?\n\t\tuint tokenAmount = checkTokBalance(msg.sender);\t\t//If so, then let's calculate how many Tokens we owe them\n\t\tbalances[msg.sender] = 0;\t\t\t\t\t\t\t//Zero their balance ahead of transfer to avoid re-entrance (even though re-entrance here should be zero risk)\n\t\tToken.transfer(msg.sender,tokenAmount);\t\t\t\t//And transfer the tokens to them\n\t\tPayTokens(msg.sender,tokenAmount,now);          \t//Log payout of tokens to contributor\n\t}\n\n\t//Function to pay the creator upon success\n\tfunction payCreator() {\n\t\trequire(isComplete());\t\t\t\t\t\t\t\t\t\t//Creator can only request payout once ICO is complete\n\t\trequire(!creatorPaid);\t\t\t\t\t\t\t\t\t\t//Require that the creator hasn't already been paid\n\t\tcreatorPaid = true;\t\t\t\t\t\t\t\t\t\t\t//Set flag to show creator has been paid.\n\t\tif(isSuccessful()){\n\t\t\tuint tokensToBurn = tokenBalance() - checkTokTotal();\t//How many left-over tokens after sold, and dev tokens are accounted for? (calculated before we muck with balance)\n\t\t\tPayEther(escrow,this.balance,now);      \t\t\t\t//Log the payout to escrow\n\t\t\tescrow.transfer(this.balance);\t\t\t\t\t\t\t//We were successful, so transfer the balance to the escrow address\n\t\t\tPayTokens(creator,checkTokDev(),now);       \t\t\t//Log payout of tokens to creator\n\t\t\tToken.transfer(creator,checkTokDev());\t\t\t\t\t//And since successful, send DevRatio tokens to devs directly\t\t\t\n\t\t\tToken.burn(tokensToBurn);\t\t\t\t\t\t\t\t//Burn any excess tokens;\n\t\t\tBurnTokens(tokensToBurn,now);        \t\t\t\t\t//Log the burning of the tokens.\n\t\t}else{\n\t\t\tPayTokens(creator,tokenBalance(),now);       \t\t\t//Log payout of tokens to creator\n\t\t\tToken.transfer(creator,tokenBalance());\t\t\t\t\t//We were not successful, so send ALL tokens back to creator.\n\t\t}\n\t}\n\t\n\t//Event to record new contributions\n\tevent Contribution(\n\t    address indexed _contributor,\n\t    uint indexed _value,\n\t    uint indexed _timestamp\n\t    );\n\t    \n\t//Event to record each time tokens are paid out\n\tevent PayTokens(\n\t    address indexed _receiver,\n\t    uint indexed _value,\n\t    uint indexed _timestamp\n\t    );\n\n\t//Event to record each time Ether is paid out\n\tevent PayEther(\n\t    address indexed _receiver,\n\t    uint indexed _value,\n\t    uint indexed _timestamp\n\t    );\n\t    \n\t//Event to record when tokens are burned.\n\tevent BurnTokens(\n\t    uint indexed _value,\n\t    uint indexed _timestamp\n\t    );\n\n}",
  "bytecode": "60606040526003805460ff19169055341561001657fe5b5b6000805473190e569be071f40c704e15825f285481cb74b6cc600160a060020a03199182161790915560018054909116600160a060020a0333161790555b5b610d3d806100656000396000f300606060405236156101435763ffffffff60e060020a60003504166302d05d3f81146101545780630fb5a6b41461018057806311102d4d146101a257806311566dd7146101c457806330a9ef5b146101e657806348cd4cb11461021457806349ba5a4814610236578063544736e614610264578063639ec4d21461028857806371ca337d146102aa578063785105f6146102cc5780637a3a0e84146102ee5780638d111ac61461031057806395139780146103325780639a9a5cdb146103545780639d76ea58146103825780639e1a4d19146103ae578063a210c6a9146103d0578063aa2de6c3146103f4578063b2fa1c9e14610416578063c24126761461043a578063d7bb99ba14610466578063d997ccb314610470578063e00824bb14610482578063e2fdcc1714610494578063ea7f537a146104c0578063ec4cd0cf146104e7575b6101525b61014f61050b565b5b565b005b341561015c57fe5b6101646105ce565b60408051600160a060020a039092168252519081900360200190f35b341561018857fe5b6101906105dd565b60408051918252519081900360200190f35b34156101aa57fe5b6101906105e4565b60408051918252519081900360200190f35b34156101cc57fe5b6101906105e9565b60408051918252519081900360200190f35b34156101ee57fe5b610190600160a060020a03600435166105f7565b60408051918252519081900360200190f35b341561021c57fe5b61019061062c565b60408051918252519081900360200190f35b341561023e57fe5b610190600160a060020a0360043516610633565b60408051918252519081900360200190f35b341561026c57fe5b610274610652565b604080519115158252519081900360200190f35b341561029057fe5b61019061065d565b60408051918252519081900360200190f35b34156102b257fe5b610190610679565b60408051918252519081900360200190f35b34156102d457fe5b610190610683565b60408051918252519081900360200190f35b34156102f657fe5b610190610689565b60408051918252519081900360200190f35b341561031857fe5b610190610696565b60408051918252519081900360200190f35b341561033a57fe5b6101906106ba565b60408051918252519081900360200190f35b341561035c57fe5b610190600160a060020a03600435166106d3565b60408051918252519081900360200190f35b341561038a57fe5b6101646106f2565b60408051600160a060020a039092168252519081900360200190f35b34156103b657fe5b61019061070a565b60408051918252519081900360200190f35b34156103d857fe5b61027461078f565b604080519115158252519081900360200190f35b34156103fc57fe5b610190610798565b60408051918252519081900360200190f35b341561041e57fe5b6102746107a3565b604080519115158252519081900360200190f35b341561044257fe5b6101646107c8565b60408051600160a060020a039092168252519081900360200190f35b61015261050b565b005b341561047857fe5b6101526107d7565b005b341561048a57fe5b610152610811565b005b341561049c57fe5b610164610b1e565b60408051600160a060020a039092168252519081900360200190f35b34156104c857fe5b6104d0610b36565b6040805161ffff9092168252519081900360200190f35b34156104ef57fe5b610274610b56565b604080519115158252519081900360200190f35b610513610652565b151561051f5760006000fd5b69043c33c1937564800000600160a060020a0330163111156105415760006000fd5b66038d7ea4c680003410156105565760006000fd5b61055e6107a3565b156105695760006000fd5b600160a060020a03331660008181526004602090815260408083208054349081019091556005909252808320805483019055600280548301905551429391927f5f7675b09617d2c9fa4fd13058ee5877a9538f626b0308816736e83748a4504091a45b565b600154600160a060020a031681565b6202e63081565b601481565b69043c33c193756480000081565b600160a060020a038116600090815260046020526040812054670de0b6b3a764000090655af3107a4000025b0490505b919050565b623c6cc081565b600160a060020a0381166000908152600560205260409020545b919050565b623c6cc04310155b90565b60006014610669610696565b81151561067257fe5b0490505b90565b655af3107a400081565b60025481565b681b1ae4d6e2ef50000081565b600254600090670de0b6b3a764000090655af3107a400002610672565b0490505b90565b60006106c461065d565b6106cc610696565b0190505b90565b600160a060020a0381166000908152600460205260409020545b919050565b73190e569be071f40c704e15825f285481cb74b6cc81565b6000805460408051602090810184905281517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a033081166004830152925192909316926370a08231926024808301939282900301818787803b151561077457fe5b6102c65a03f1151561078257fe5b5050604051519150505b90565b60035460ff1681565b66038d7ea4c6800081565b600069043c33c19375648000006002541015806107c25750623f52f043115b90505b90565b600054600160a060020a031681565b6107df6107a3565b15156107eb5760006000fd5b6107f3610b56565b1561080557610800610b6a565b61014f565b61014f610c63565b5b5b565b600061081b6107a3565b15156108275760006000fd5b60035460ff16156108385760006000fd5b6003805460ff1916600117905561084d610b56565b15610a585761085a6106ba565b61086261070a565b60405191900391504290600160a060020a03301631907350115d25322b638a5b8896178f7c107cffc08144907f67848d9c2d923afb2c78cd66af34d1ba6abb924a3f9c44e6a03dfae94b2b814a90600090a46040517350115d25322b638a5b8896178f7c107cffc081449030600160a060020a03163180156108fc02916000818181858888f1935050505015156108f557fe5b426108fe61065d565b600154604051600160a060020a03909116907f3400d00d671ea3974d18ff2b63baf6b05812567e3af24056ed7d33b30e39685990600090a4600054600154600160a060020a039182169163a9059cbb911661095761065d565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b15156109a557fe5b6102c65a03f115156109b357fe5b505060008054604080517f42966c68000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a0390921693506342966c6892602480830193919282900301818387803b1515610a1557fe5b6102c65a03f11515610a2357fe5b505060405142915082907ff1337af994b33c56a7ce51266931ae8dedce9d6eb9b3eb127fcf7f006374f74e90600090a3610b1a565b42610a6161070a565b600154604051600160a060020a03909116907f3400d00d671ea3974d18ff2b63baf6b05812567e3af24056ed7d33b30e39685990600090a4600054600154600160a060020a039182169163a9059cbb9116610aba61070a565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b1515610b0857fe5b6102c65a03f11515610b1657fe5b5050505b5b50565b7350115d25322b638a5b8896178f7c107cffc0814481565b600254600090681b1ae4d6e2ef50000090606402610672565b0490505b90565b600254681b1ae4d6e2ef5000009010155b90565b600160a060020a033316600090815260046020526040812054819011610b905760006000fd5b610b99336105f7565b600160a060020a033381166000818152600460208190526040808320839055825481517fa9059cbb000000000000000000000000000000000000000000000000000000008152928301949094526024820186905251949550919092169263a9059cbb9260448084019391929182900301818387803b1515610c1657fe5b6102c65a03f11515610c2457fe5b50506040514291508290600160a060020a033316907f3400d00d671ea3974d18ff2b63baf6b05812567e3af24056ed7d33b30e39685990600090a45b50565b600160a060020a03331660009081526004602052604081205411610c875760006000fd5b600160a060020a0333166000818152600460209081526040808320839055600590915280822054905181156108fc0292818181858888f193505050501515610ccb57fe5b600160a060020a033316600081815260056020526040808220549051429391927f67848d9c2d923afb2c78cd66af34d1ba6abb924a3f9c44e6a03dfae94b2b814a91a45b5600a165627a7a723058207abb7abce37314fbd3bac3f6038033fc494c350dac34687f4dd8129bff6163ca0029"
}