{
  "address": "0x10a5f6dbd1f9e56fe09df25b1163cd299d5d2413",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthernautsExplore",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-24\n*/\n\npragma solidity ^0.4.19;\n\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n/// @author Ethernauts\ncontract ERC721 {\n    // Required methods\n    function totalSupply() public view returns (uint256 total);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\n    function approve(address _to, uint256 _tokenId) external;\n    function transfer(address _to, uint256 _tokenId) external;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n    function takeOwnership(uint256 _tokenId) public;\n    function implementsERC721() public pure returns (bool);\n\n    // Events\n    event Transfer(address from, address to, uint256 tokenId);\n    event Approval(address owner, address approved, uint256 tokenId);\n\n    // Optional\n    // function name() public view returns (string name);\n    // function symbol() public view returns (string symbol);\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\n\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n}\n\n\n\n\n// Extend this library for child contracts\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    /**\n    * @dev Compara two numbers, and return the bigger one.\n    */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        if (a > b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n\n    /**\n    * @dev Compara two numbers, and return the bigger one.\n    */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        if (a < b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n\n\n}\n\n\n\n\n/// @dev Base contract for all Ethernauts contracts holding global constants and functions.\ncontract EthernautsBase {\n\n    /*** CONSTANTS USED ACROSS CONTRACTS ***/\n\n    /// @dev Used by all contracts that interfaces with Ethernauts\n    ///      The ERC-165 interface signature for ERC-721.\n    ///  Ref: https://github.com/ethereum/EIPs/issues/165\n    ///  Ref: https://github.com/ethereum/EIPs/issues/721\n    bytes4 constant InterfaceSignature_ERC721 =\n    bytes4(keccak256('name()')) ^\n    bytes4(keccak256('symbol()')) ^\n    bytes4(keccak256('totalSupply()')) ^\n    bytes4(keccak256('balanceOf(address)')) ^\n    bytes4(keccak256('ownerOf(uint256)')) ^\n    bytes4(keccak256('approve(address,uint256)')) ^\n    bytes4(keccak256('transfer(address,uint256)')) ^\n    bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n    bytes4(keccak256('takeOwnership(uint256)')) ^\n    bytes4(keccak256('tokensOfOwner(address)')) ^\n    bytes4(keccak256('tokenMetadata(uint256,string)'));\n\n    /// @dev due solidity limitation we cannot return dynamic array from methods\n    /// so it creates incompability between functions across different contracts\n    uint8 public constant STATS_SIZE = 10;\n    uint8 public constant SHIP_SLOTS = 5;\n\n    // Possible state of any asset\n    enum AssetState { Available, UpForLease, Used }\n\n    // Possible state of any asset\n    // NotValid is to avoid 0 in places where category must be bigger than zero\n    enum AssetCategory { NotValid, Sector, Manufacturer, Ship, Object, Factory, CrewMember }\n\n    /// @dev Sector stats\n    enum ShipStats {Level, Attack, Defense, Speed, Range, Luck}\n    /// @notice Possible attributes for each asset\n    /// 00000001 - Seeded - Offered to the economy by us, the developers. Potentially at regular intervals.\n    /// 00000010 - Producible - Product of a factory and/or factory contract.\n    /// 00000100 - Explorable- Product of exploration.\n    /// 00001000 - Leasable - Can be rented to other users and will return to the original owner once the action is complete.\n    /// 00010000 - Permanent - Cannot be removed, always owned by a user.\n    /// 00100000 - Consumable - Destroyed after N exploration expeditions.\n    /// 01000000 - Tradable - Buyable and sellable on the market.\n    /// 10000000 - Hot Potato - Automatically gets put up for sale after acquiring.\n    bytes2 public ATTR_SEEDED     = bytes2(2**0);\n    bytes2 public ATTR_PRODUCIBLE = bytes2(2**1);\n    bytes2 public ATTR_EXPLORABLE = bytes2(2**2);\n    bytes2 public ATTR_LEASABLE   = bytes2(2**3);\n    bytes2 public ATTR_PERMANENT  = bytes2(2**4);\n    bytes2 public ATTR_CONSUMABLE = bytes2(2**5);\n    bytes2 public ATTR_TRADABLE   = bytes2(2**6);\n    bytes2 public ATTR_GOLDENGOOSE = bytes2(2**7);\n}\n\n/// @notice This contract manages the various addresses and constraints for operations\n//          that can be executed only by specific roles. Namely CEO and CTO. it also includes pausable pattern.\ncontract EthernautsAccessControl is EthernautsBase {\n\n    // This facet controls access control for Ethernauts.\n    // All roles have same responsibilities and rights, but there is slight differences between them:\n    //\n    //     - The CEO: The CEO can reassign other roles and only role that can unpause the smart contract.\n    //       It is initially set to the address that created the smart contract.\n    //\n    //     - The CTO: The CTO can change contract address, oracle address and plan for upgrades.\n    //\n    //     - The COO: The COO can change contract address and add create assets.\n    //\n    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\n    /// @param newContract address pointing to new contract\n    event ContractUpgrade(address newContract);\n\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\n    address public ceoAddress;\n    address public ctoAddress;\n    address public cooAddress;\n    address public oracleAddress;\n\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n    bool public paused = false;\n\n    /// @dev Access modifier for CEO-only functionality\n    modifier onlyCEO() {\n        require(msg.sender == ceoAddress);\n        _;\n    }\n\n    /// @dev Access modifier for CTO-only functionality\n    modifier onlyCTO() {\n        require(msg.sender == ctoAddress);\n        _;\n    }\n\n    /// @dev Access modifier for CTO-only functionality\n    modifier onlyOracle() {\n        require(msg.sender == oracleAddress);\n        _;\n    }\n\n    modifier onlyCLevel() {\n        require(\n            msg.sender == ceoAddress ||\n            msg.sender == ctoAddress ||\n            msg.sender == cooAddress\n        );\n        _;\n    }\n\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n    /// @param _newCEO The address of the new CEO\n    function setCEO(address _newCEO) external onlyCEO {\n        require(_newCEO != address(0));\n\n        ceoAddress = _newCEO;\n    }\n\n    /// @dev Assigns a new address to act as the CTO. Only available to the current CTO or CEO.\n    /// @param _newCTO The address of the new CTO\n    function setCTO(address _newCTO) external {\n        require(\n            msg.sender == ceoAddress ||\n            msg.sender == ctoAddress\n        );\n        require(_newCTO != address(0));\n\n        ctoAddress = _newCTO;\n    }\n\n    /// @dev Assigns a new address to act as the COO. Only available to the current COO or CEO.\n    /// @param _newCOO The address of the new COO\n    function setCOO(address _newCOO) external {\n        require(\n            msg.sender == ceoAddress ||\n            msg.sender == cooAddress\n        );\n        require(_newCOO != address(0));\n\n        cooAddress = _newCOO;\n    }\n\n    /// @dev Assigns a new address to act as oracle.\n    /// @param _newOracle The address of oracle\n    function setOracle(address _newOracle) external {\n        require(msg.sender == ctoAddress);\n        require(_newOracle != address(0));\n\n        oracleAddress = _newOracle;\n    }\n\n    /*** Pausable functionality adapted from OpenZeppelin ***/\n\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /// @dev Modifier to allow actions only when the contract IS paused\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\n    ///  a bug or exploit is detected and we need to limit damage.\n    function pause() external onlyCLevel whenNotPaused {\n        paused = true;\n    }\n\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\n    ///  one reason we may pause the contract is when CTO account is compromised.\n    /// @notice This is public rather than external so it can be called by\n    ///  derived contracts.\n    function unpause() public onlyCEO whenPaused {\n        // can't unpause if contract was upgraded\n        paused = false;\n    }\n\n}\n\n\n\n\n\n\n\n\n\n/// @title Storage contract for Ethernauts Data. Common structs and constants.\n/// @notice This is our main data storage, constants and data types, plus\n//          internal functions for managing the assets. It is isolated and only interface with\n//          a list of granted contracts defined by CTO\n/// @author Ethernauts - Fernando Pauer\ncontract EthernautsStorage is EthernautsAccessControl {\n\n    function EthernautsStorage() public {\n        // the creator of the contract is the initial CEO\n        ceoAddress = msg.sender;\n\n        // the creator of the contract is the initial CTO as well\n        ctoAddress = msg.sender;\n\n        // the creator of the contract is the initial CTO as well\n        cooAddress = msg.sender;\n\n        // the creator of the contract is the initial Oracle as well\n        oracleAddress = msg.sender;\n    }\n\n    /// @notice No tipping!\n    /// @dev Reject all Ether from being sent here. Hopefully, we can prevent user accidents.\n    function() external payable {\n        require(msg.sender == address(this));\n    }\n\n    /*** Mapping for Contracts with granted permission ***/\n    mapping (address => bool) public contractsGrantedAccess;\n\n    /// @dev grant access for a contract to interact with this contract.\n    /// @param _v2Address The contract address to grant access\n    function grantAccess(address _v2Address) public onlyCTO {\n        // See README.md for updgrade plan\n        contractsGrantedAccess[_v2Address] = true;\n    }\n\n    /// @dev remove access from a contract to interact with this contract.\n    /// @param _v2Address The contract address to be removed\n    function removeAccess(address _v2Address) public onlyCTO {\n        // See README.md for updgrade plan\n        delete contractsGrantedAccess[_v2Address];\n    }\n\n    /// @dev Only allow permitted contracts to interact with this contract\n    modifier onlyGrantedContracts() {\n        require(contractsGrantedAccess[msg.sender] == true);\n        _;\n    }\n\n    modifier validAsset(uint256 _tokenId) {\n        require(assets[_tokenId].ID > 0);\n        _;\n    }\n    /*** DATA TYPES ***/\n\n    /// @dev The main Ethernauts asset struct. Every asset in Ethernauts is represented by a copy\n    ///  of this structure. Note that the order of the members in this structure\n    ///  is important because of the byte-packing rules used by Ethereum.\n    ///  Ref: http://solidity.readthedocs.io/en/develop/miscellaneous.html\n    struct Asset {\n\n        // Asset ID is a identifier for look and feel in frontend\n        uint16 ID;\n\n        // Category = Sectors, Manufacturers, Ships, Objects (Upgrades/Misc), Factories and CrewMembers\n        uint8 category;\n\n        // The State of an asset: Available, On sale, Up for lease, Cooldown, Exploring\n        uint8 state;\n\n        // Attributes\n        // byte pos - Definition\n        // 00000001 - Seeded - Offered to the economy by us, the developers. Potentially at regular intervals.\n        // 00000010 - Producible - Product of a factory and/or factory contract.\n        // 00000100 - Explorable- Product of exploration.\n        // 00001000 - Leasable - Can be rented to other users and will return to the original owner once the action is complete.\n        // 00010000 - Permanent - Cannot be removed, always owned by a user.\n        // 00100000 - Consumable - Destroyed after N exploration expeditions.\n        // 01000000 - Tradable - Buyable and sellable on the market.\n        // 10000000 - Hot Potato - Automatically gets put up for sale after acquiring.\n        bytes2 attributes;\n\n        // The timestamp from the block when this asset was created.\n        uint64 createdAt;\n\n        // The minimum timestamp after which this asset can engage in exploring activities again.\n        uint64 cooldownEndBlock;\n\n        // The Asset's stats can be upgraded or changed based on exploration conditions.\n        // It will be defined per child contract, but all stats have a range from 0 to 255\n        // Examples\n        // 0 = Ship Level\n        // 1 = Ship Attack\n        uint8[STATS_SIZE] stats;\n\n        // Set to the cooldown time that represents exploration duration for this asset.\n        // Defined by a successful exploration action, regardless of whether this asset is acting as ship or a part.\n        uint256 cooldown;\n\n        // a reference to a super asset that manufactured the asset\n        uint256 builtBy;\n    }\n\n    /*** CONSTANTS ***/\n\n    // @dev Sanity check that allows us to ensure that we are pointing to the\n    //  right storage contract in our EthernautsLogic(address _CStorageAddress) call.\n    bool public isEthernautsStorage = true;\n\n    /*** STORAGE ***/\n\n    /// @dev An array containing the Asset struct for all assets in existence. The Asset UniqueId\n    ///  of each asset is actually an index into this array.\n    Asset[] public assets;\n\n    /// @dev A mapping from Asset UniqueIDs to the price of the token.\n    /// stored outside Asset Struct to save gas, because price can change frequently\n    mapping (uint256 => uint256) internal assetIndexToPrice;\n\n    /// @dev A mapping from asset UniqueIDs to the address that owns them. All assets have some valid owner address.\n    mapping (uint256 => address) internal assetIndexToOwner;\n\n    // @dev A mapping from owner address to count of tokens that address owns.\n    //  Used internally inside balanceOf() to resolve ownership count.\n    mapping (address => uint256) internal ownershipTokenCount;\n\n    /// @dev A mapping from AssetUniqueIDs to an address that has been approved to call\n    ///  transferFrom(). Each Asset can only have one approved address for transfer\n    ///  at any time. A zero value means no approval is outstanding.\n    mapping (uint256 => address) internal assetIndexToApproved;\n\n\n    /*** SETTERS ***/\n\n    /// @dev set new asset price\n    /// @param _tokenId  asset UniqueId\n    /// @param _price    asset price\n    function setPrice(uint256 _tokenId, uint256 _price) public onlyGrantedContracts {\n        assetIndexToPrice[_tokenId] = _price;\n    }\n\n    /// @dev Mark transfer as approved\n    /// @param _tokenId  asset UniqueId\n    /// @param _approved address approved\n    function approve(uint256 _tokenId, address _approved) public onlyGrantedContracts {\n        assetIndexToApproved[_tokenId] = _approved;\n    }\n\n    /// @dev Assigns ownership of a specific Asset to an address.\n    /// @param _from    current owner address\n    /// @param _to      new owner address\n    /// @param _tokenId asset UniqueId\n    function transfer(address _from, address _to, uint256 _tokenId) public onlyGrantedContracts {\n        // Since the number of assets is capped to 2^32 we can't overflow this\n        ownershipTokenCount[_to]++;\n        // transfer ownership\n        assetIndexToOwner[_tokenId] = _to;\n        // When creating new assets _from is 0x0, but we can't account that address.\n        if (_from != address(0)) {\n            ownershipTokenCount[_from]--;\n            // clear any previously approved ownership exchange\n            delete assetIndexToApproved[_tokenId];\n        }\n    }\n\n    /// @dev A public method that creates a new asset and stores it. This\n    ///  method does basic checking and should only be called from other contract when the\n    ///  input data is known to be valid. Will NOT generate any event it is delegate to business logic contracts.\n    /// @param _creatorTokenID The asset who is father of this asset\n    /// @param _owner First owner of this asset\n    /// @param _price asset price\n    /// @param _ID asset ID\n    /// @param _category see Asset Struct description\n    /// @param _state see Asset Struct description\n    /// @param _attributes see Asset Struct description\n    /// @param _stats see Asset Struct description\n    function createAsset(\n        uint256 _creatorTokenID,\n        address _owner,\n        uint256 _price,\n        uint16 _ID,\n        uint8 _category,\n        uint8 _state,\n        uint8 _attributes,\n        uint8[STATS_SIZE] _stats,\n        uint256 _cooldown,\n        uint64 _cooldownEndBlock\n    )\n    public onlyGrantedContracts\n    returns (uint256)\n    {\n        // Ensure our data structures are always valid.\n        require(_ID > 0);\n        require(_category > 0);\n        require(_attributes != 0x0);\n        require(_stats.length > 0);\n\n        Asset memory asset = Asset({\n            ID: _ID,\n            category: _category,\n            builtBy: _creatorTokenID,\n            attributes: bytes2(_attributes),\n            stats: _stats,\n            state: _state,\n            createdAt: uint64(now),\n            cooldownEndBlock: _cooldownEndBlock,\n            cooldown: _cooldown\n            });\n\n        uint256 newAssetUniqueId = assets.push(asset) - 1;\n\n        // Check it reached 4 billion assets but let's just be 100% sure.\n        require(newAssetUniqueId == uint256(uint32(newAssetUniqueId)));\n\n        // store price\n        assetIndexToPrice[newAssetUniqueId] = _price;\n\n        // This will assign ownership\n        transfer(address(0), _owner, newAssetUniqueId);\n\n        return newAssetUniqueId;\n    }\n\n    /// @dev A public method that edit asset in case of any mistake is done during process of creation by the developer. This\n    /// This method doesn't do any checking and should only be called when the\n    ///  input data is known to be valid.\n    /// @param _tokenId The token ID\n    /// @param _creatorTokenID The asset that create that token\n    /// @param _price asset price\n    /// @param _ID asset ID\n    /// @param _category see Asset Struct description\n    /// @param _state see Asset Struct description\n    /// @param _attributes see Asset Struct description\n    /// @param _stats see Asset Struct description\n    /// @param _cooldown asset cooldown index\n    function editAsset(\n        uint256 _tokenId,\n        uint256 _creatorTokenID,\n        uint256 _price,\n        uint16 _ID,\n        uint8 _category,\n        uint8 _state,\n        uint8 _attributes,\n        uint8[STATS_SIZE] _stats,\n        uint16 _cooldown\n    )\n    external validAsset(_tokenId) onlyCLevel\n    returns (uint256)\n    {\n        // Ensure our data structures are always valid.\n        require(_ID > 0);\n        require(_category > 0);\n        require(_attributes != 0x0);\n        require(_stats.length > 0);\n\n        // store price\n        assetIndexToPrice[_tokenId] = _price;\n\n        Asset storage asset = assets[_tokenId];\n        asset.ID = _ID;\n        asset.category = _category;\n        asset.builtBy = _creatorTokenID;\n        asset.attributes = bytes2(_attributes);\n        asset.stats = _stats;\n        asset.state = _state;\n        asset.cooldown = _cooldown;\n    }\n\n    /// @dev Update only stats\n    /// @param _tokenId asset UniqueId\n    /// @param _stats asset state, see Asset Struct description\n    function updateStats(uint256 _tokenId, uint8[STATS_SIZE] _stats) public validAsset(_tokenId) onlyGrantedContracts {\n        assets[_tokenId].stats = _stats;\n    }\n\n    /// @dev Update only asset state\n    /// @param _tokenId asset UniqueId\n    /// @param _state asset state, see Asset Struct description\n    function updateState(uint256 _tokenId, uint8 _state) public validAsset(_tokenId) onlyGrantedContracts {\n        assets[_tokenId].state = _state;\n    }\n\n    /// @dev Update Cooldown for a single asset\n    /// @param _tokenId asset UniqueId\n    /// @param _cooldown asset state, see Asset Struct description\n    function setAssetCooldown(uint256 _tokenId, uint256 _cooldown, uint64 _cooldownEndBlock)\n    public validAsset(_tokenId) onlyGrantedContracts {\n        assets[_tokenId].cooldown = _cooldown;\n        assets[_tokenId].cooldownEndBlock = _cooldownEndBlock;\n    }\n\n    /*** GETTERS ***/\n\n    /// @notice Returns only stats data about a specific asset.\n    /// @dev it is necessary due solidity compiler limitations\n    ///      when we have large qty of parameters it throws StackTooDeepException\n    /// @param _tokenId The UniqueId of the asset of interest.\n    function getStats(uint256 _tokenId) public view returns (uint8[STATS_SIZE]) {\n        return assets[_tokenId].stats;\n    }\n\n    /// @dev return current price of an asset\n    /// @param _tokenId asset UniqueId\n    function priceOf(uint256 _tokenId) public view returns (uint256 price) {\n        return assetIndexToPrice[_tokenId];\n    }\n\n    /// @notice Check if asset has all attributes passed by parameter\n    /// @param _tokenId The UniqueId of the asset of interest.\n    /// @param _attributes see Asset Struct description\n    function hasAllAttrs(uint256 _tokenId, bytes2 _attributes) public view returns (bool) {\n        return assets[_tokenId].attributes & _attributes == _attributes;\n    }\n\n    /// @notice Check if asset has any attribute passed by parameter\n    /// @param _tokenId The UniqueId of the asset of interest.\n    /// @param _attributes see Asset Struct description\n    function hasAnyAttrs(uint256 _tokenId, bytes2 _attributes) public view returns (bool) {\n        return assets[_tokenId].attributes & _attributes != 0x0;\n    }\n\n    /// @notice Check if asset is in the state passed by parameter\n    /// @param _tokenId The UniqueId of the asset of interest.\n    /// @param _category see AssetCategory in EthernautsBase for possible states\n    function isCategory(uint256 _tokenId, uint8 _category) public view returns (bool) {\n        return assets[_tokenId].category == _category;\n    }\n\n    /// @notice Check if asset is in the state passed by parameter\n    /// @param _tokenId The UniqueId of the asset of interest.\n    /// @param _state see enum AssetState in EthernautsBase for possible states\n    function isState(uint256 _tokenId, uint8 _state) public view returns (bool) {\n        return assets[_tokenId].state == _state;\n    }\n\n    /// @notice Returns owner of a given Asset(Token).\n    /// @dev Required for ERC-721 compliance.\n    /// @param _tokenId asset UniqueId\n    function ownerOf(uint256 _tokenId) public view returns (address owner)\n    {\n        return assetIndexToOwner[_tokenId];\n    }\n\n    /// @dev Required for ERC-721 compliance\n    /// @notice Returns the number of Assets owned by a specific address.\n    /// @param _owner The owner address to check.\n    function balanceOf(address _owner) public view returns (uint256 count) {\n        return ownershipTokenCount[_owner];\n    }\n\n    /// @dev Checks if a given address currently has transferApproval for a particular Asset.\n    /// @param _tokenId asset UniqueId\n    function approvedFor(uint256 _tokenId) public view onlyGrantedContracts returns (address) {\n        return assetIndexToApproved[_tokenId];\n    }\n\n    /// @notice Returns the total number of Assets currently in existence.\n    /// @dev Required for ERC-721 compliance.\n    function totalSupply() public view returns (uint256) {\n        return assets.length;\n    }\n\n    /// @notice List all existing tokens. It can be filtered by attributes or assets with owner\n    /// @param _owner filter all assets by owner\n    function getTokenList(address _owner, uint8 _withAttributes, uint256 start, uint256 count) external view returns(\n        uint256[6][]\n    ) {\n        uint256 totalAssets = assets.length;\n\n        if (totalAssets == 0) {\n            // Return an empty array\n            return new uint256[6][](0);\n        } else {\n            uint256[6][] memory result = new uint256[6][](totalAssets > count ? count : totalAssets);\n            uint256 resultIndex = 0;\n            bytes2 hasAttributes  = bytes2(_withAttributes);\n            Asset memory asset;\n\n            for (uint256 tokenId = start; tokenId < totalAssets && resultIndex < count; tokenId++) {\n                asset = assets[tokenId];\n                if (\n                    (asset.state != uint8(AssetState.Used)) &&\n                    (assetIndexToOwner[tokenId] == _owner || _owner == address(0)) &&\n                    (asset.attributes & hasAttributes == hasAttributes)\n                ) {\n                    result[resultIndex][0] = tokenId;\n                    result[resultIndex][1] = asset.ID;\n                    result[resultIndex][2] = asset.category;\n                    result[resultIndex][3] = uint256(asset.attributes);\n                    result[resultIndex][4] = asset.cooldown;\n                    result[resultIndex][5] = assetIndexToPrice[tokenId];\n                    resultIndex++;\n                }\n            }\n\n            return result;\n        }\n    }\n}\n\n/// @title The facet of the Ethernauts contract that manages ownership, ERC-721 compliant.\n/// @notice This provides the methods required for basic non-fungible token\n//          transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).\n//          It interfaces with EthernautsStorage provinding basic functions as create and list, also holds\n//          reference to logic contracts as Auction, Explore and so on\n/// @author Ethernatus - Fernando Pauer\n/// @dev Ref: https://github.com/ethereum/EIPs/issues/721\ncontract EthernautsOwnership is EthernautsAccessControl, ERC721 {\n\n    /// @dev Contract holding only data.\n    EthernautsStorage public ethernautsStorage;\n\n    /*** CONSTANTS ***/\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n    string public constant name = \"Ethernauts\";\n    string public constant symbol = \"ETNT\";\n\n    /********* ERC 721 - COMPLIANCE CONSTANTS AND FUNCTIONS ***************/\n    /**********************************************************************/\n\n    bytes4 constant InterfaceSignature_ERC165 = bytes4(keccak256('supportsInterface(bytes4)'));\n\n    /*** EVENTS ***/\n\n    // Events as per ERC-721\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\n    event Approval(address indexed owner, address indexed approved, uint256 tokens);\n\n    /// @dev When a new asset is create it emits build event\n    /// @param owner The address of asset owner\n    /// @param tokenId Asset UniqueID\n    /// @param assetId ID that defines asset look and feel\n    /// @param price asset price\n    event Build(address owner, uint256 tokenId, uint16 assetId, uint256 price);\n\n    function implementsERC721() public pure returns (bool) {\n        return true;\n    }\n\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n    ///  Returns true for any standardized interfaces implemented by this contract. ERC-165 and ERC-721.\n    /// @param _interfaceID interface signature ID\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\n    {\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n    }\n\n    /// @dev Checks if a given address is the current owner of a particular Asset.\n    /// @param _claimant the address we are validating against.\n    /// @param _tokenId asset UniqueId, only valid when > 0\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return ethernautsStorage.ownerOf(_tokenId) == _claimant;\n    }\n\n    /// @dev Checks if a given address currently has transferApproval for a particular Asset.\n    /// @param _claimant the address we are confirming asset is approved for.\n    /// @param _tokenId asset UniqueId, only valid when > 0\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return ethernautsStorage.approvedFor(_tokenId) == _claimant;\n    }\n\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\n    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\n    ///  _approve() and transferFrom() are used together for putting Assets on auction, and\n    ///  there is no value in spamming the log with Approval events in that case.\n    function _approve(uint256 _tokenId, address _approved) internal {\n        ethernautsStorage.approve(_tokenId, _approved);\n    }\n\n    /// @notice Returns the number of Assets owned by a specific address.\n    /// @param _owner The owner address to check.\n    /// @dev Required for ERC-721 compliance\n    function balanceOf(address _owner) public view returns (uint256 count) {\n        return ethernautsStorage.balanceOf(_owner);\n    }\n\n    /// @dev Required for ERC-721 compliance.\n    /// @notice Transfers a Asset to another address. If transferring to a smart\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\n    ///  Ethernauts specifically) or your Asset may be lost forever. Seriously.\n    /// @param _to The address of the recipient, can be a user or contract.\n    /// @param _tokenId The ID of the Asset to transfer.\n    function transfer(\n        address _to,\n        uint256 _tokenId\n    )\n    external\n    whenNotPaused\n    {\n        // Safety check to prevent against an unexpected 0x0 default.\n        require(_to != address(0));\n        // Disallow transfers to this contract to prevent accidental misuse.\n        // The contract should never own any assets\n        // (except very briefly after it is created and before it goes on auction).\n        require(_to != address(this));\n        // Disallow transfers to the storage contract to prevent accidental\n        // misuse. Auction or Upgrade contracts should only take ownership of assets\n        // through the allow + transferFrom flow.\n        require(_to != address(ethernautsStorage));\n\n        // You can only send your own asset.\n        require(_owns(msg.sender, _tokenId));\n\n        // Reassign ownership, clear pending approvals, emit Transfer event.\n        ethernautsStorage.transfer(msg.sender, _to, _tokenId);\n    }\n\n    /// @dev Required for ERC-721 compliance.\n    /// @notice Grant another address the right to transfer a specific Asset via\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\n    ///  clear all approvals.\n    /// @param _tokenId The ID of the Asset that can be transferred if this call succeeds.\n    function approve(\n        address _to,\n        uint256 _tokenId\n    )\n    external\n    whenNotPaused\n    {\n        // Only an owner can grant transfer approval.\n        require(_owns(msg.sender, _tokenId));\n\n        // Register the approval (replacing any previous approval).\n        _approve(_tokenId, _to);\n\n        // Emit approval event.\n        Approval(msg.sender, _to, _tokenId);\n    }\n\n\n    /// @notice Transfer a Asset owned by another address, for which the calling address\n    ///  has previously been granted transfer approval by the owner.\n    /// @param _from The address that owns the Asset to be transferred.\n    /// @param _to The address that should take ownership of the Asset. Can be any address,\n    ///  including the caller.\n    /// @param _tokenId The ID of the Asset to be transferred.\n    function _transferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    )\n    internal\n    {\n        // Safety check to prevent against an unexpected 0x0 default.\n        require(_to != address(0));\n        // Disallow transfers to this contract to prevent accidental misuse.\n        // The contract should never own any assets (except for used assets).\n        require(_owns(_from, _tokenId));\n        // Check for approval and valid ownership\n        require(_approvedFor(_to, _tokenId));\n\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\n        ethernautsStorage.transfer(_from, _to, _tokenId);\n    }\n\n    /// @dev Required for ERC-721 compliance.\n    /// @notice Transfer a Asset owned by another address, for which the calling address\n    ///  has previously been granted transfer approval by the owner.\n    /// @param _from The address that owns the Asset to be transfered.\n    /// @param _to The address that should take ownership of the Asset. Can be any address,\n    ///  including the caller.\n    /// @param _tokenId The ID of the Asset to be transferred.\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    )\n    external\n    whenNotPaused\n    {\n        _transferFrom(_from, _to, _tokenId);\n    }\n\n    /// @dev Required for ERC-721 compliance.\n    /// @notice Allow pre-approved user to take ownership of a token\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n    function takeOwnership(uint256 _tokenId) public {\n        address _from = ethernautsStorage.ownerOf(_tokenId);\n\n        // Safety check to prevent against an unexpected 0x0 default.\n        require(_from != address(0));\n        _transferFrom(_from, msg.sender, _tokenId);\n    }\n\n    /// @notice Returns the total number of Assets currently in existence.\n    /// @dev Required for ERC-721 compliance.\n    function totalSupply() public view returns (uint256) {\n        return ethernautsStorage.totalSupply();\n    }\n\n    /// @notice Returns owner of a given Asset(Token).\n    /// @param _tokenId Token ID to get owner.\n    /// @dev Required for ERC-721 compliance.\n    function ownerOf(uint256 _tokenId)\n    external\n    view\n    returns (address owner)\n    {\n        owner = ethernautsStorage.ownerOf(_tokenId);\n\n        require(owner != address(0));\n    }\n\n    /// @dev Creates a new Asset with the given fields. ONly available for C Levels\n    /// @param _creatorTokenID The asset who is father of this asset\n    /// @param _price asset price\n    /// @param _assetID asset ID\n    /// @param _category see Asset Struct description\n    /// @param _attributes see Asset Struct description\n    /// @param _stats see Asset Struct description\n    function createNewAsset(\n        uint256 _creatorTokenID,\n        address _owner,\n        uint256 _price,\n        uint16 _assetID,\n        uint8 _category,\n        uint8 _attributes,\n        uint8[STATS_SIZE] _stats\n    )\n    external onlyCLevel\n    returns (uint256)\n    {\n        // owner must be sender\n        require(_owner != address(0));\n\n        uint256 tokenID = ethernautsStorage.createAsset(\n            _creatorTokenID,\n            _owner,\n            _price,\n            _assetID,\n            _category,\n            uint8(AssetState.Available),\n            _attributes,\n            _stats,\n            0,\n            0\n        );\n\n        // emit the build event\n        Build(\n            _owner,\n            tokenID,\n            _assetID,\n            _price\n        );\n\n        return tokenID;\n    }\n\n    /// @notice verify if token is in exploration time\n    /// @param _tokenId The Token ID that can be upgraded\n    function isExploring(uint256 _tokenId) public view returns (bool) {\n        uint256 cooldown;\n        uint64 cooldownEndBlock;\n        (,,,,,cooldownEndBlock, cooldown,) = ethernautsStorage.assets(_tokenId);\n        return (cooldown > now) || (cooldownEndBlock > uint64(block.number));\n    }\n}\n\n\n/// @title The facet of the Ethernauts Logic contract handle all common code for logic/business contracts\n/// @author Ethernatus - Fernando Pauer\ncontract EthernautsLogic is EthernautsOwnership {\n\n    // Set in case the logic contract is broken and an upgrade is required\n    address public newContractAddress;\n\n    /// @dev Constructor\n    function EthernautsLogic() public {\n        // the creator of the contract is the initial CEO, COO, CTO\n        ceoAddress = msg.sender;\n        ctoAddress = msg.sender;\n        cooAddress = msg.sender;\n        oracleAddress = msg.sender;\n\n        // Starts paused.\n        paused = true;\n    }\n\n    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\n    ///  breaking bug. This method does nothing but keep track of the new contract and\n    ///  emit a message indicating that the new address is set. It's up to clients of this\n    ///  contract to update to the new contract address in that case. (This contract will\n    ///  be paused indefinitely if such an upgrade takes place.)\n    /// @param _v2Address new address\n    function setNewAddress(address _v2Address) external onlyCTO whenPaused {\n        // See README.md for updgrade plan\n        newContractAddress = _v2Address;\n        ContractUpgrade(_v2Address);\n    }\n\n    /// @dev set a new reference to the NFT ownership contract\n    /// @param _CStorageAddress - address of a deployed contract implementing EthernautsStorage.\n    function setEthernautsStorageContract(address _CStorageAddress) public onlyCLevel whenPaused {\n        EthernautsStorage candidateContract = EthernautsStorage(_CStorageAddress);\n        require(candidateContract.isEthernautsStorage());\n        ethernautsStorage = candidateContract;\n    }\n\n    /// @dev Override unpause so it requires all external contract addresses\n    ///  to be set before contract can be unpaused. Also, we can't have\n    ///  newContractAddress set either, because then the contract was upgraded.\n    /// @notice This is public rather than external so we can call super.unpause\n    ///  without using an expensive CALL.\n    function unpause() public onlyCEO whenPaused {\n        require(ethernautsStorage != address(0));\n        require(newContractAddress == address(0));\n        // require this contract to have access to storage contract\n        require(ethernautsStorage.contractsGrantedAccess(address(this)) == true);\n\n        // Actually unpause the contract.\n        super.unpause();\n    }\n\n    // @dev Allows the COO to capture the balance available to the contract.\n    function withdrawBalances(address _to) public onlyCLevel {\n        _to.transfer(this.balance);\n    }\n\n    /// return current contract balance\n    function getBalance() public view onlyCLevel returns (uint256) {\n        return this.balance;\n    }\n}\n\n/// @title The facet of the Ethernauts Explore contract that send a ship to explore the deep space.\n/// @notice An owned ship can be send on an expedition. Exploration takes time\n//          and will always result in “success”. This means the ship can never be destroyed\n//          and always returns with a collection of loot. The degree of success is dependent\n//          on different factors as sector stats, gamma ray burst number and ship stats.\n//          While the ship is exploring it cannot be acted on in any way until the expedition completes.\n//          After the ship returns from an expedition the user is then rewarded with a number of objects (assets).\n/// @author Ethernatus - Fernando Pauer\ncontract EthernautsExplore is EthernautsLogic {\n\n    /// @dev Delegate constructor to Nonfungible contract.\n    function EthernautsExplore() public\n    EthernautsLogic() {}\n\n    /*** EVENTS ***/\n    /// emit signal to anyone listening in the universe\n    event Explore(uint256 shipId, uint256 sectorID, uint256 crewId, uint256 time);\n\n    event Result(uint256 shipId, uint256 sectorID);\n\n    /*** CONSTANTS ***/\n    uint8 constant STATS_CAPOUT = 2**8 - 1; // all stats have a range from 0 to 255\n\n    // @dev Sanity check that allows us to ensure that we are pointing to the\n    //  right explore contract in our EthernautsCrewMember(address _CExploreAddress) call.\n    bool public isEthernautsExplore = true;\n\n    // An approximation of currently how many seconds are in between blocks.\n    uint256 public secondsPerBlock = 15;\n\n    uint256 public TICK_TIME = 15; // time is always in minutes\n\n    // exploration fee\n    uint256 public percentageCut  = 90;\n\n    int256 public SPEED_STAT_MAX = 30;\n    int256 public RANGE_STAT_MAX = 20;\n    int256 public MIN_TIME_EXPLORE = 60;\n    int256 public MAX_TIME_EXPLORE = 2160;\n    int256 public RANGE_SCALE = 2;\n\n    /// @dev Sector stats\n    enum SectorStats {Size, Threat, Difficulty, Slots}\n\n    /// @dev hold all ships in exploration\n    uint256[] explorers;\n\n    /// @dev A mapping from Ship token to the exploration index.\n    mapping (uint256 => uint256) public tokenIndexToExplore;\n\n    /// @dev A mapping from Asset UniqueIDs to the sector token id.\n    mapping (uint256 => uint256) public tokenIndexToSector;\n\n    /// @dev A mapping from exploration index to the crew token id.\n    mapping (uint256 => uint256) public exploreIndexToCrew;\n\n    /// @dev A mission counter for crew.\n    mapping (uint256 => uint16) public missions;\n\n    /// @dev A mapping from Owner Cut (wei) to the sector token id.\n    mapping (uint256 => uint256) public sectorToOwnerCut;\n    mapping (uint256 => uint256) public sectorToOracleFee;\n\n    /// @dev Get a list of ship exploring our universe\n    function getExplorerList() public view returns(\n        uint256[3][]\n    ) {\n        uint256[3][] memory tokens = new uint256[3][](50);\n        uint256 index = 0;\n\n        for(uint256 i = 0; i < explorers.length && index < 50; i++) {\n            if (explorers[i] > 0) {\n                tokens[index][0] = explorers[i];\n                tokens[index][1] = tokenIndexToSector[explorers[i]];\n                tokens[index][2] = exploreIndexToCrew[i];\n                index++;\n            }\n        }\n\n        if (index == 0) {\n            // Return an empty array\n            return new uint256[3][](0);\n        } else {\n            return tokens;\n        }\n    }\n\n    /// @dev Get a list of ship exploring our universe\n    /// @param _shipTokenId The Token ID that represents a ship\n    function getIndexByShip(uint256 _shipTokenId) public view returns( uint256 ) {\n        for(uint256 i = 0; i < explorers.length; i++) {\n            if (explorers[i] == _shipTokenId) {\n                return i;\n            }\n        }\n        return 0;\n    }\n\n    function setOwnerCut(uint256 _sectorId, uint256 _ownerCut) external onlyCLevel {\n        sectorToOwnerCut[_sectorId] = _ownerCut;\n    }\n\n    function setOracleFee(uint256 _sectorId, uint256 _oracleFee) external onlyCLevel {\n        sectorToOracleFee[_sectorId] = _oracleFee;\n    }\n\n    function setTickTime(uint256 _tickTime) external onlyCLevel {\n        TICK_TIME = _tickTime;\n    }\n\n    function setPercentageCut(uint256 _percentageCut) external onlyCLevel {\n        percentageCut = _percentageCut;\n    }\n\n    function setMissions(uint256 _tokenId, uint16 _total) public onlyCLevel {\n        missions[_tokenId] = _total;\n    }\n\n    /// @notice Explore a sector with a defined ship. Sectors contain a list of Objects that can be given to the players\n    /// when exploring. Each entry has a Drop Rate and are sorted by Sector ID and Drop rate.\n    /// The drop rate is a whole number between 0 and 1,000,000. 0 is 0% and 1,000,000 is 100%.\n    /// Every time a Sector is explored a random number between 0 and 1,000,000 is calculated for each available Object.\n    /// If the final result is lower than the Drop Rate of the Object, that Object will be rewarded to the player once\n    /// Exploration is complete. Only 1 to 5 Objects maximum can be dropped during one exploration.\n    /// (FUTURE VERSIONS) The final number will be affected by the user’s Ship Stats.\n    /// @param _shipTokenId The Token ID that represents a ship\n    /// @param _sectorTokenId The Token ID that represents a sector\n    /// @param _crewTokenId The Token ID that represents a crew\n    function explore(uint256 _shipTokenId, uint256 _sectorTokenId, uint256 _crewTokenId) payable external whenNotPaused {\n        // charge a fee for each exploration when the results are ready\n        require(msg.value >= sectorToOwnerCut[_sectorTokenId]);\n\n        // check if Asset is a ship or not\n        require(ethernautsStorage.isCategory(_shipTokenId, uint8(AssetCategory.Ship)));\n\n        // check if _sectorTokenId is a sector or not\n        require(ethernautsStorage.isCategory(_sectorTokenId, uint8(AssetCategory.Sector)));\n\n        // Ensure the Ship is in available state, otherwise it cannot explore\n        require(ethernautsStorage.isState(_shipTokenId, uint8(AssetState.Available)));\n\n        // ship could not be in exploration\n        require(tokenIndexToExplore[_shipTokenId] == 0);\n        require(!isExploring(_shipTokenId));\n\n        // check if explorer is ship owner\n        require(msg.sender == ethernautsStorage.ownerOf(_shipTokenId));\n\n        // check if owner sector is not empty\n        address sectorOwner = ethernautsStorage.ownerOf(_sectorTokenId);\n\n        // check if there is a crew and validating crew member\n        if (_crewTokenId > 0) {\n            // crew member should not be in exploration\n            require(!isExploring(_crewTokenId));\n\n            // check if Asset is a crew or not\n            require(ethernautsStorage.isCategory(_crewTokenId, uint8(AssetCategory.CrewMember)));\n\n            // check if crew member is same owner\n            require(msg.sender == ethernautsStorage.ownerOf(_crewTokenId));\n        }\n\n        /// store exploration data\n        tokenIndexToExplore[_shipTokenId] = explorers.push(_shipTokenId) - 1;\n        tokenIndexToSector[_shipTokenId] = _sectorTokenId;\n\n        uint8[STATS_SIZE] memory _shipStats = ethernautsStorage.getStats(_shipTokenId);\n        uint8[STATS_SIZE] memory _sectorStats = ethernautsStorage.getStats(_sectorTokenId);\n\n        // check if there is a crew and store data and change ship stats\n        if (_crewTokenId > 0) {\n            /// store crew exploration data\n            exploreIndexToCrew[tokenIndexToExplore[_shipTokenId]] = _crewTokenId;\n            missions[_crewTokenId]++;\n\n            //// grab crew stats and merge with ship\n            uint8[STATS_SIZE] memory _crewStats = ethernautsStorage.getStats(_crewTokenId);\n            _shipStats[uint256(ShipStats.Range)] += _crewStats[uint256(ShipStats.Range)];\n            _shipStats[uint256(ShipStats.Speed)] += _crewStats[uint256(ShipStats.Speed)];\n\n            if (_shipStats[uint256(ShipStats.Range)] > STATS_CAPOUT) {\n                _shipStats[uint256(ShipStats.Range)] = STATS_CAPOUT;\n            }\n            if (_shipStats[uint256(ShipStats.Speed)] > STATS_CAPOUT) {\n                _shipStats[uint256(ShipStats.Speed)] = STATS_CAPOUT;\n            }\n        }\n\n        /// set exploration time\n        uint256 time = uint256(_explorationTime(\n                _shipStats[uint256(ShipStats.Range)],\n                _shipStats[uint256(ShipStats.Speed)],\n                _sectorStats[uint256(SectorStats.Size)]\n            ));\n        // exploration time in minutes converted to seconds\n        time *= 60;\n\n        uint64 _cooldownEndBlock = uint64((time/secondsPerBlock) + block.number);\n        ethernautsStorage.setAssetCooldown(_shipTokenId, now + time, _cooldownEndBlock);\n\n        // check if there is a crew store data and set crew exploration time\n        if (_crewTokenId > 0) {\n            /// store crew exploration time\n            ethernautsStorage.setAssetCooldown(_crewTokenId, now + time, _cooldownEndBlock);\n        }\n\n        // to avoid mistakes and charge unnecessary extra fees\n        uint256 feeExcess = SafeMath.sub(msg.value, sectorToOwnerCut[_sectorTokenId]);\n        uint256 payment = uint256(SafeMath.div(SafeMath.mul(msg.value, percentageCut), 100)) - sectorToOracleFee[_sectorTokenId];\n\n        /// emit signal to anyone listening in the universe\n        Explore(_shipTokenId, _sectorTokenId, _crewTokenId, now + time);\n\n        // keeping oracle accounts with balance\n        oracleAddress.transfer(sectorToOracleFee[_sectorTokenId]);\n\n        // paying sector owner\n        sectorOwner.transfer(payment);\n\n        // send excess back to explorer\n        msg.sender.transfer(feeExcess);\n    }\n\n    /// @notice Exploration is complete and at most 10 Objects will return during one exploration.\n    /// @param _shipTokenId The Token ID that represents a ship and can explore\n    /// @param _sectorTokenId The Token ID that represents a sector and can be explored\n    /// @param _IDs that represents a object returned from exploration\n    /// @param _attributes that represents attributes for each object returned from exploration\n    /// @param _stats that represents all stats for each object returned from exploration\n    function explorationResults(\n        uint256 _shipTokenId,\n        uint256 _sectorTokenId,\n        uint16[10] _IDs,\n        uint8[10] _attributes,\n        uint8[STATS_SIZE][10] _stats\n    )\n    external onlyOracle\n    {\n        uint256 cooldown;\n        uint64 cooldownEndBlock;\n        uint256 builtBy;\n        (,,,,,cooldownEndBlock, cooldown, builtBy) = ethernautsStorage.assets(_shipTokenId);\n\n        address owner = ethernautsStorage.ownerOf(_shipTokenId);\n        require(owner != address(0));\n\n        /// create objects returned from exploration\n        uint256 i = 0;\n        for (i = 0; i < 10 && _IDs[i] > 0; i++) {\n            _buildAsset(\n                _sectorTokenId,\n                owner,\n                0,\n                _IDs[i],\n                uint8(AssetCategory.Object),\n                uint8(_attributes[i]),\n                _stats[i],\n                cooldown,\n                cooldownEndBlock\n            );\n        }\n\n        // to guarantee at least 1 result per exploration\n        require(i > 0);\n\n        /// remove from explore list\n        explorers[tokenIndexToExplore[_shipTokenId]] = 0;\n        delete tokenIndexToExplore[_shipTokenId];\n        delete tokenIndexToSector[_shipTokenId];\n\n        /// emit signal to anyone listening in the universe\n        Result(_shipTokenId, _sectorTokenId);\n    }\n\n    /// @notice Cancel ship exploration in case it get stuck\n    /// @param _shipTokenId The Token ID that represents a ship and can explore\n    function cancelExplorationByShip(\n        uint256 _shipTokenId\n    )\n    external onlyCLevel\n    {\n        uint256 index = tokenIndexToExplore[_shipTokenId];\n\n        if (index > 0) {\n            /// remove from explore list\n            explorers[index] = 0;\n\n            if (exploreIndexToCrew[index] > 0) {\n                delete exploreIndexToCrew[index];\n            }\n        }\n\n        delete tokenIndexToExplore[_shipTokenId];\n        delete tokenIndexToSector[_shipTokenId];\n    }\n\n    /// @notice Cancel exploration in case it get stuck\n    /// @param _index The exploration position that represents a exploring ship\n    function cancelExplorationByIndex(\n        uint256 _index\n    )\n    external onlyCLevel\n    {\n        uint256 shipId = explorers[_index];\n\n        /// remove from exploration list\n        explorers[_index] = 0;\n\n        if (shipId > 0) {\n            delete tokenIndexToExplore[shipId];\n            delete tokenIndexToSector[shipId];\n        }\n\n        if (exploreIndexToCrew[_index] > 0) {\n            delete exploreIndexToCrew[_index];\n        }\n    }\n\n    /// @notice Add exploration in case contract needs to be add trxs from previous contract\n    /// @param _shipTokenId The Token ID that represents a ship\n    /// @param _sectorTokenId The Token ID that represents a sector\n    /// @param _crewTokenId The Token ID that represents a crew\n    function addExplorationByShip(\n        uint256 _shipTokenId, uint256 _sectorTokenId, uint256 _crewTokenId\n    )\n    external onlyCLevel whenPaused\n    {\n        uint256 index = explorers.push(_shipTokenId) - 1;\n        /// store exploration data\n        tokenIndexToExplore[_shipTokenId] = index;\n        tokenIndexToSector[_shipTokenId] = _sectorTokenId;\n\n        // check if there is a crew and store data and change ship stats\n        if (_crewTokenId > 0) {\n            /// store crew exploration data\n            exploreIndexToCrew[index] = _crewTokenId;\n            missions[_crewTokenId]++;\n        }\n\n        ethernautsStorage.setAssetCooldown(_shipTokenId, now, uint64(block.number));\n    }\n\n    /// @dev Creates a new Asset with the given fields. ONly available for C Levels\n    /// @param _creatorTokenID The asset who is father of this asset\n    /// @param _price asset price\n    /// @param _assetID asset ID\n    /// @param _category see Asset Struct description\n    /// @param _attributes see Asset Struct description\n    /// @param _stats see Asset Struct description\n    /// @param _cooldown see Asset Struct description\n    /// @param _cooldownEndBlock see Asset Struct description\n    function _buildAsset(\n        uint256 _creatorTokenID,\n        address _owner,\n        uint256 _price,\n        uint16 _assetID,\n        uint8 _category,\n        uint8 _attributes,\n        uint8[STATS_SIZE] _stats,\n        uint256 _cooldown,\n        uint64 _cooldownEndBlock\n    )\n    private returns (uint256)\n    {\n        uint256 tokenID = ethernautsStorage.createAsset(\n            _creatorTokenID,\n            _owner,\n            _price,\n            _assetID,\n            _category,\n            uint8(AssetState.Available),\n            _attributes,\n            _stats,\n            _cooldown,\n            _cooldownEndBlock\n        );\n\n        // emit the build event\n        Build(\n            _owner,\n            tokenID,\n            _assetID,\n            _price\n        );\n\n        return tokenID;\n    }\n\n    /// @notice Exploration Time: The time it takes to explore a Sector is dependent on the Sector Size\n    ///         along with the Ship’s Range and Speed.\n    /// @param _shipRange ship range\n    /// @param _shipSpeed ship speed\n    /// @param _sectorSize sector size\n    function _explorationTime(\n        uint8 _shipRange,\n        uint8 _shipSpeed,\n        uint8 _sectorSize\n    ) private view returns (int256) {\n        int256 minToExplore = 0;\n\n        minToExplore = SafeMath.min(_shipSpeed, SPEED_STAT_MAX) - 1;\n        minToExplore = -72 * minToExplore;\n        minToExplore += MAX_TIME_EXPLORE;\n\n        uint256 minRange = uint256(SafeMath.min(_shipRange, RANGE_STAT_MAX));\n        uint256 scaledRange = uint256(RANGE_STAT_MAX * RANGE_SCALE);\n        int256 minExplore = (minToExplore - MIN_TIME_EXPLORE);\n\n        minToExplore -= fraction(minExplore, int256(minRange), int256(scaledRange));\n        minToExplore += fraction(minToExplore, int256(_sectorSize) - int256(10), 10);\n        minToExplore = SafeMath.max(minToExplore, MIN_TIME_EXPLORE);\n\n        return minToExplore;\n    }\n\n    /// @notice calcs a perc without float or double :(\n    function fraction(int256 _subject, int256 _numerator, int256 _denominator)\n    private pure returns (int256) {\n        int256 division = _subject * _numerator - _subject * _denominator;\n        int256 total = _subject * _denominator + division;\n        return total / _denominator;\n    }\n\n    /// @notice Any C-level can fix how many seconds per blocks are currently observed.\n    /// @param _secs The seconds per block\n    function setSecondsPerBlock(uint256 _secs) external onlyCLevel {\n        require(_secs > 0);\n        secondsPerBlock = _secs;\n    }\n}",
  "bytecode": ""
}