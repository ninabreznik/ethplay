{
  "address": "0x27b10f324d318d55ce995f6d0ec9ad06f3db12ca",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ExoTokensMarketSimple",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-19\n*/\n\npragma solidity ^0.4.25;\n// Interface to ERC20 functions used in this contract\ninterface ERC20token {\n    function balanceOf(address who) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\ncontract ExoTokensMarketSimple {\n    ERC20token ExoToken;\n    address owner;\n    uint256 tokensPerEth;\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    constructor() public {\n        owner = msg.sender;\n        tokensPerEth = 1000;\n    }\n\n    function setTokensPerEth(uint256 _tokensPerEth) public onlyOwner {\n        tokensPerEth = _tokensPerEth;\n    }\n    function getTokensPerEth() public view returns(uint256) {\n        return tokensPerEth;\n    }\n    function setERC20Token(address tokenAddr) public onlyOwner  {\n        ExoToken = ERC20token(tokenAddr);\n    }\n    function getERC20Token() public view returns(address) {\n        return ExoToken;\n    }\n    function getERC20Balance() public view returns(uint256) {\n        return ExoToken.balanceOf(this);\n    }\n    function depositERC20Token(uint256 _exo_amount) public  {\n        require(ExoToken.allowance(msg.sender, this) >= _exo_amount);\n        require(ExoToken.transferFrom(msg.sender, this, _exo_amount));\n    }\n\n    // EXO buying function\n    // All of the ETH included in the TX is converted to EXO\n    function BuyTokens() public payable{\n        require(msg.value > 0, \"eth value must be non zero\");\n        uint256 exo_balance = ExoToken.balanceOf(this);\n        uint256 tokensToXfer = msg.value * tokensPerEth;\n        require(exo_balance >= tokensToXfer, \"Not enough tokens in contract\");\n        require(ExoToken.transfer(msg.sender, tokensToXfer), \"Couldn't send funds\");\n    }\n\n    // Withdraw erc20 tokens\n    function withdrawERC20Tokens(uint _val) public onlyOwner {\n        require(ExoToken.transfer(msg.sender, _val), \"Couldn't send funds\"); // send EXO tokens\n    }\n\n    // Withdraw Ether\n    function withdrawEther() public onlyOwner {\n        msg.sender.transfer(address(this).balance);\n\n    }\n \n    // change the owner\n    function setOwner(address _owner) public onlyOwner {\n        owner = _owner;    \n    }\n    // fallback\n    function() external payable { }   \n}",
  "bytecode": "608060405234801561001057600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506103e8600281905550610df58061006a6000396000f3006080604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313af4035146100a657806356238b02146100e95780636893f63f146101165780637362377b1461014157806390f10acf1461015857806394bf1cbb146101855780639a19276e146101dc578063c3736fe614610209578063d81111ab14610234578063de5624871461023e575b005b3480156100b257600080fd5b506100e7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610281565b005b3480156100f557600080fd5b5061011460048036038101908080359060200190929190505050610321565b005b34801561012257600080fd5b5061012b610387565b6040518082815260200191505060405180910390f35b34801561014d57600080fd5b50610156610391565b005b34801561016457600080fd5b506101836004803603810190808035906020019092919050505061044d565b005b34801561019157600080fd5b5061019a6106c7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101e857600080fd5b50610207600480360381019080803590602001909291905050506106f0565b005b34801561021557600080fd5b5061021e6108c2565b6040518082815260200191505060405180910390f35b61023c6109c0565b005b34801561024a57600080fd5b5061027f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d2a565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156102dd57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561037d57600080fd5b8060028190555050565b6000600254905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156103ed57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015801561044a573d6000803e3d6000fd5b50565b806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561053e57600080fd5b505af1158015610552573d6000803e3d6000fd5b505050506040513d602081101561056857600080fd5b81019080805190602001909291905050501015151561058657600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561067e57600080fd5b505af1158015610692573d6000803e3d6000fd5b505050506040513d60208110156106a857600080fd5b810190808051906020019092919050505015156106c457600080fd5b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561074c57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561081057600080fd5b505af1158015610824573d6000803e3d6000fd5b505050506040513d602081101561083a57600080fd5b810190808051906020019092919050505015156108bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f436f756c646e27742073656e642066756e64730000000000000000000000000081525060200191505060405180910390fd5b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561098057600080fd5b505af1158015610994573d6000803e3d6000fd5b505050506040513d60208110156109aa57600080fd5b8101908080519060200190929190505050905090565b600080600034111515610a3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f6574682076616c7565206d757374206265206e6f6e207a65726f00000000000081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610af757600080fd5b505af1158015610b0b573d6000803e3d6000fd5b505050506040513d6020811015610b2157600080fd5b8101908080519060200190929190505050915060025434029050808210151515610bb3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4e6f7420656e6f75676820746f6b656e7320696e20636f6e747261637400000081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610c7757600080fd5b505af1158015610c8b573d6000803e3d6000fd5b505050506040513d6020811015610ca157600080fd5b81019080805190602001909291905050501515610d26576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f436f756c646e27742073656e642066756e64730000000000000000000000000081525060200191505060405180910390fd5b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d8657600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820c92a0f60b7adc26c4d25b73bc55f2c555c2e4365ab99524317a5d1e5fff947640029"
}