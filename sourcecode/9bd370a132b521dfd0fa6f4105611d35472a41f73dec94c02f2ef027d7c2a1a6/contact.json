{
  "address": "0x15ebe584d7a0c28a3a4e73e5430b08324f3296f9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "IOE",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-16\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n\n  constructor(string name, string symbol, uint8 decimals) public {\n    _name = name;\n    _symbol = symbol;\n    _decimals = decimals;\n  }\n\n  /**\n   * @return the name of the token.\n   */\n  function name() public view returns(string) {\n    return _name;\n  }\n\n  /**\n   * @return the symbol of the token.\n   */\n  function symbol() public view returns(string) {\n    return _symbol;\n  }\n\n  /**\n   * @return the number of decimals of the token.\n   */\n  function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n}\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\nlibrary CommUtils{\n\n \n    uint256 constant MAX_MUL_BASE = 340282366920939000000000000000000000000;\n\n\n    function abs(uint256 a,uint256 b) internal pure returns(uint256){\n        return a>b ? a-b : b-a;\n    }\n\n   \n    function mult(uint256 a, uint256 b) \n        internal \n        pure \n        returns (uint256 c) \n    {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"SafeMath mul failed\");\n        return c;\n    }    \n\n    function pwr(uint256 x, uint256 y)\n        internal \n        pure \n        returns (uint256)\n    {\n        if (x==0)\n            return (0);\n        else if (y==0)\n            return (1);\n        else \n        {\n            uint256 z = x;\n            for (uint256 i=1; i < y; i++)\n                z = mult(z,x);\n            return (z);\n        }\n    }\n\n\n    function mulRate(uint256 tar,uint256 rate) public pure returns (uint256){\n        return tar *rate / 100;\n    }  \n    \n    function mulRate1000(uint256 tar,uint256 rate) public pure returns (uint256){\n        return tar *rate / 1000;\n    }  \n    \n    \n    /**\n     * @dev filters name strings\n     * -converts uppercase to lower case.  \n     * -makes sure it does not start/end with a space\n     * -makes sure it does not contain multiple spaces in a row\n     * -cannot be only numbers\n     * -cannot start with 0x \n     * -restricts characters to A-Z, a-z, 0-9, and space.\n     * @return reprocessed string in bytes32 format\n     */\n    function nameFilter(string _input)\n        internal\n        pure\n        returns(bytes32)\n    {\n        bytes memory _temp = bytes(_input);\n        uint256 _length = _temp.length;\n        \n        //sorry limited to 32 characters\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\n        // make sure it doesnt start with or end with space\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\n        // make sure first two characters are not 0x\n        if (_temp[0] == 0x30)\n        {\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\n        }\n        \n        // create a bool to track if we have a non number character\n        bool _hasNonNumber;\n        \n        // convert & check\n        for (uint256 i = 0; i < _length; i++)\n        {\n            // if its uppercase A-Z\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\n            {\n                // convert to lower case a-z\n                _temp[i] = byte(uint(_temp[i]) + 32);\n                \n                // we have a non number\n                if (_hasNonNumber == false)\n                    _hasNonNumber = true;\n            } else {\n                require\n                (\n                    // require character is a space\n                    _temp[i] == 0x20 || \n                    // OR lowercase a-z\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\n                    // or 0-9\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\n                    \"string contains invalid characters\"\n                );\n                // make sure theres not 2x spaces in a row\n                if (_temp[i] == 0x20)\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\n                \n                // see if we have a character other than a number\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\n                    _hasNonNumber = true;    \n            }\n        }\n        \n        require(_hasNonNumber == true, \"string cannot be only numbers\");\n        \n        bytes32 _ret;\n        assembly {\n            _ret := mload(add(_temp, 32))\n        }\n        return (_ret);\n    }   \n    \n    function isStringEmpty(string str) internal pure returns(bool){\n        bytes memory tempEmptyStringTest = bytes(str); \n        return tempEmptyStringTest.length == 0;\n    }\n     \n    \n    \n    \n    \n    struct Float{\n        uint256 number;\n        uint256 digits;\n    }\n    \n    function initFloat(uint256 v,uint256 denominator) internal pure returns(Float){\n        return Float(v*denominator,denominator);\n    }\n    \n    \n    function pow(Float f ,uint256 count) internal pure returns(Float ans){\n\n        if (count==0){\n            return Float(10,1);\n        }\n        ans.number = f.number;\n        ans.digits = f.digits;\n        for(uint256 i=1;i<count;i++){\n            ans = multiply(ans,f);\n        }\n    }\n    \n    function decrease(Float f,Float o) internal pure returns(bool ok,Float ans){\n        sameDigits(f,o);\n        require(f.digits == o.digits,\"it`s must same sameDigits\");\n        if(f.number >= o.number ){\n            ok = true;            \n            ans.number = f.number - o.number;\n            ans.digits = f.digits;\n        }\n    }\n    \n    function increase(Float f,Float o) internal pure returns(Float ans){\n        sameDigits(f,o);\n        require(f.digits == o.digits,\"it`s must same sameDigits\");\n        ans.number = f.number+o.number;\n        ans.digits = f.digits;\n    }\n    \n    function sameDigits(Float f,Float o) private pure {\n        return f.digits > o.digits ? _sameDigits(f,o) : _sameDigits(o,f) ;\n    }\n    \n    function _sameDigits(Float big,Float small ) private pure {\n        uint256 dd = big.digits - small.digits;\n        small.number = small.number * pwr(10,dd);\n        small.digits = big.digits;\n    }\n    \n    function multiSafe(uint256 a,uint256 b) internal pure returns (uint256 ans,uint256 ap,uint256 bp){\n        (uint256 newA, uint256 apow)  = powDown(a);\n        (uint256 newB, uint256 bpow)  = powDown(b);\n        ans = mult(newA , newB);\n        ap = apow;\n        bp = bpow;\n    }\n    \n    function powDown(uint256 a) internal pure returns(uint256 newA,uint256 pow10){\n        newA = a;\n        while(newA>=MAX_MUL_BASE){\n            pow10++;\n            newA /= 10;\n        }\n    }\n    \n    function multiply(Float  f,Float o) internal pure returns(Float ans){\n        (uint256 v,uint256 ap,uint256 bp ) = multiSafe(f.number,o.number);\n        ans.number = v;  \n        ans.digits = f.digits+o.digits-(ap+bp);\n    }\n    \n    function multiply(Float  f,uint256 tar) internal pure returns(Float ans){\n        (uint256 v,uint256 ap,uint256 bp ) = multiSafe(f.number,tar);\n        ans.number = v;\n        ans.digits = f.digits-(ap+bp);\n    }    \n    \n    function divide(Float f,Float o) internal pure returns(Float ans){\n       if(f.digits >= o.digits){\n           ans.digits = f.digits - o.digits;\n       }else{\n           uint256 dp = o.digits - f.digits;\n           ans.digits = 0;\n           ans.number = mult( f.number , pwr(10,dp));\n       }\n        ans.number = ans.number / o.number;\n    }\n    \n    function toUint256(Float f) internal pure returns(uint256 ans){\n        ans = f.number;\n        for(uint256 i=0;i<f.digits;i++){\n            ans /= 10;\n        }\n    }\n    \n    function getIntegral(Float exCoefficient,uint256 xb,uint256 tokenDigits,uint256 X_POW) internal pure returns(uint256 ){\n        CommUtils.Float memory x = CommUtils.Float(xb,tokenDigits);\n        Float memory xPow = pow(x,X_POW+1);\n        Float memory ec = pow(exCoefficient,X_POW);\n        Float memory tempAns = multiply(xPow,ec);\n        return toUint256(tempAns)/(X_POW+1); \n    }   \n    \n    \n    \n    struct Countdown{\n        uint128 max;\n        uint128 current;\n        uint256 timestamp;\n        uint256 period;\n        bool passing;\n    }\n    \n    function freshAndCheck(Countdown  d,uint256 curP,uint256 max,uint256 period) view internal returns(Countdown){\n        if(d.timestamp == 0) {\n            d=Countdown( uint128( max),0,  now,period , true);\n        }  \n        if(now - d.timestamp > period){\n          d= Countdown( uint128( max),0,now,period,true);  \n        } \n        d.current += uint128(curP);\n        d.passing = d.current <= d.max;\n        return d;\n    }    \n    \n    \n}\n\n\n\nlibrary Player{\n\n    using CommUtils for string;\n    using CommUtils for CommUtils.Countdown;\n    uint256 public constant BONUS_INTERVAL = 60*60*24*7;\n    \n    \n    struct Map{\n        mapping(address=>uint256) bonusAt;\n        mapping(address=>uint256) ethMap;\n        mapping(address=>address) referrerMap;\n        mapping(address=>bytes32) addrNameMap;\n        mapping(bytes32=>address) nameAddrMap;\n        mapping(address=>CommUtils.Countdown) sellLimeMap;\n    }\n    \n    function remove(Map storage ps,address adr) internal{\n        //transferAuthor(ps.ethMap[adr]);\n        delete ps.ethMap[adr];\n        bytes32 b = ps.addrNameMap[adr];\n        delete ps.nameAddrMap[b];\n        delete ps.addrNameMap[adr];\n    }\n    \n    function deposit(Map storage  ps,address adr,uint256 v) internal returns(uint256) {\n       ps.ethMap[adr]+=v;\n        return v;\n    }\n    \n    \n\n\n\n    function refleshBonusAt(Map storage  ps,address addr,uint256 allCount,uint256 plusCount) internal{\n        if(ps.bonusAt[addr] == 0)        {\n            ps.bonusAt[addr] = now;\n            return;\n        }\n        uint256 plsuAt = BONUS_INTERVAL * plusCount / allCount;\n        ps.bonusAt[addr] += plsuAt;\n        ps.bonusAt[addr] = ps.bonusAt[addr] > now ? now : ps.bonusAt[addr];\n    }\n    \n    \n    \n    function isOverBonusAt(Map storage ps,address addr) internal returns(bool ){\n        if( (ps.bonusAt[addr] - now)> BONUS_INTERVAL){\n            ps.bonusAt[addr] = now;\n            return true;\n        }\n        return false;\n    }\n    \n    function transferSafe(address addr,uint256 v) internal {\n        if(address(this).balance>=v){\n            addr.transfer(v);\n        }else{\n            addr.transfer( address(this).balance);\n        }\n    }\n    \n\n    function minus(Map storage  ps,address adr,uint256 num) internal  {\n        uint256 sum = ps.ethMap[adr];\n        if(sum==num){\n             withdrawalAll(ps,adr);\n        }else{\n            require(sum > num);\n            ps.ethMap[adr] = sum-num;\n        }\n    }\n    \n    function minusAndTransfer(Map storage  ps,address adr,uint256 num) internal  {\n        minus(ps,adr,num);\n        transferSafe(adr,num);\n    }    \n    \n    function withdrawalAll(Map storage  ps,address adr) public returns(uint256) {\n        uint256 sum = ps.ethMap[adr];\n        delete ps.ethMap[adr];\n        return sum;\n    }\n    \n    function getAmmount(Map storage ps,address adr) public view returns(uint256) {\n        return ps.ethMap[adr];\n    }\n    \n    function registerName(Map storage ps,bytes32 _name)internal  {\n        require(ps.nameAddrMap[_name] == address(0) );\n        ps.nameAddrMap[_name] = msg.sender;\n        ps.addrNameMap[msg.sender] = _name;\n    }\n    \n    function isEmptyName(Map storage ps,bytes32 _name) public view returns(bool) {\n        return ps.nameAddrMap[_name] == address(0);\n    }\n    \n    function getByName(Map storage ps,bytes32 _name)public view returns(address) {\n        return ps.nameAddrMap[_name] ;\n    }\n    \n    function getName(Map storage ps) public view returns(bytes32){\n        return ps.addrNameMap[msg.sender];\n    }\n    \n    function getName(Map storage ps,address adr) public view returns(bytes32){\n        return ps.addrNameMap[adr];\n    }    \n    \n    function getNameByAddr(Map storage ps,address adr) public view returns(bytes32){\n        return ps.addrNameMap[adr];\n    }    \n    \n    function getReferrer(Map storage ps,address adr)public view returns(address){\n        address refA = ps.referrerMap[adr];\n        bytes32 b= ps.addrNameMap[refA];\n        return b.length == 0 ? getReferrer(ps,refA) : refA;\n    }\n    \n    function getReferrerName(Map storage ps,address adr)public view returns(bytes32){\n        return getNameByAddr(ps,getReferrer(ps,adr));\n    }\n    \n    function setReferrer(Map storage ps,address self,address referrer)internal {\n         ps.referrerMap[self] = referrer;\n    }\n    \n    function applyReferrer(Map storage ps,string referrer)internal {\n        bytes32 rbs = referrer.nameFilter();\n        address referrerAdr = getByName(ps,rbs);\n        require(referrerAdr != address(0),\"referrerAdr is null\");\n        require(getReferrer(ps,msg.sender) == address(0) ,\"must reffer is null\");\n        require(referrerAdr != msg.sender ,\"referrerAdr is self \");\n        require(getName(ps).length==0 || getName(ps) == bytes32(0),\"must not reqester\");\n        setReferrer(ps,msg.sender,referrerAdr);\n    }    \n    \n    \n    function checkSellLimt(Map storage ps,uint256 curP,uint256 max,uint256 period)  internal returns(CommUtils.Countdown) {\n        CommUtils.Countdown storage cd =  ps.sellLimeMap[msg.sender];\n        ps.sellLimeMap[msg.sender] = cd.freshAndCheck(curP,max,period);\n        return ps.sellLimeMap[msg.sender];\n    }   \n    \n    function getSellLimt(Map storage ps) internal view returns (CommUtils.Countdown ) {\n        return ps.sellLimeMap[msg.sender];\n    }\n    \n    \n    \n}\n\n\ncontract IOE is  ERC20, ERC20Detailed {\n    \n    using CommUtils for CommUtils.Countdown;\n    using CommUtils for CommUtils.Float;\n    using CommUtils for string;\n    using Player for Player.Map;\n    \n    \n\n    uint256 private constant MAX_BUY_BY_USER_RATE = 3;\n    uint256 private constant MAX_SELL_BY_USER_RATE = 10;\n    uint256 private constant MAX_SELL_PER_USER_RATE = 25;\n    uint256 private constant SELL_BUY_PERIOD= 60*60*24;\n    uint256 private constant tokenDigits = 9;\n    uint256 private constant tokenM = 1000000000;\n    uint256 private constant INITIAL_SUPPLY = 100000000 * tokenM;\n    uint256 private constant X_POW = 2; // y= (exCoefficient * x)^X_POW\n    uint256 private constant BUY_BONUS_IN_1000 = 80;\n    uint256 private constant SELL_BONUS_IN_1000 = 100;\n    uint256 private constant REGESTER_FEE = 0.02 ether;\n    uint256 private constant VIP_DISCOUNT_WEIGHT = 3;\n    uint256 private constant VIP_INTTO_POOL_WEIGHT = 3;\n    uint256 private constant VIP_TOUP_WEIGHT = 3;\n    uint256 private constant VIP_RETOUP_RATE_1000 = 110;\n    uint256 private constant HELP_MINING_BUY_1000 = 30;\n    uint256 private constant HELP_MINING_SELL_1000 = 50;\n    uint256 private constant VIP_ALL_WEIGHT = VIP_DISCOUNT_WEIGHT+VIP_INTTO_POOL_WEIGHT+VIP_TOUP_WEIGHT;\n\n    address private OFFICIAL_ADDR ;\n    uint256 private constant MIN_TX_ETHER = 0.001 ether;\n    uint256 private providedCount =0;\n    uint256 private vipPool = 0;\n    Player.Map private players;\n    CommUtils.Float exCoefficient;\n    CommUtils.Countdown private buyByUserCD ;\n    CommUtils.Countdown private sellByUserCD ;\n    \n\n    /**\n     * @dev Constructor that gives msg.sender all of existing tokens.\n     */\n    constructor (address oa) public   ERC20Detailed(\"INTELLIGENT OPERATING SYSTEM EXCHANGE\", \"IOE\",9) {\n        _mint(this, INITIAL_SUPPLY);\n        require(CommUtils.pwr(10,tokenDigits) == tokenM,\"it`s not same tokenM\");\n        exCoefficient = CommUtils.Float(1224744871,8);\n        OFFICIAL_ADDR = oa;\n    } \n    \n    \n    function getInfo() public view returns(\n            uint256, //constractBlance\n            uint256, //current providedCount count\n            uint256,   // selfTokenBlance\n            uint256,  //bounus pool\n            uint256,   // contract now\n            uint256,    // bonusAt\n            bytes32, // registeredName\n            bytes32, // refname\n            uint256,   //VIP Reward\n            address   //offAdd\n        ){\n        return (\n            address(this).balance,\n            providedCount, \n            balanceOf(msg.sender),\n            getBonusPool(),\n            now,\n            players.bonusAt[msg.sender],\n            players.getName(),\n            players.getReferrerName(msg.sender),\n            players.getAmmount(msg.sender),\n            OFFICIAL_ADDR\n        );\n    }\n    \n    function getLimtInfo() public view returns(\n        uint256 buyMax,uint256 buyCur,uint256 buyStartAt,\n        uint256 sellMax , uint256 sellCur , uint256 sellStartAt,\n        uint256 sellPerMax, uint256 sellCurPer , uint256 sellPerStartAt\n    ){\n        CommUtils.Countdown memory bCD = buyByUserCD.freshAndCheck(0,CommUtils.mulRate(INITIAL_SUPPLY-providedCount,MAX_BUY_BY_USER_RATE),SELL_BUY_PERIOD);\n        buyMax = bCD.max;\n        buyCur = bCD.current;\n        buyStartAt = bCD.timestamp;\n        CommUtils.Countdown memory sCD  = sellByUserCD.freshAndCheck(0,CommUtils.mulRate(providedCount,MAX_SELL_BY_USER_RATE),SELL_BUY_PERIOD);\n        sellMax = sCD.max;\n        sellCur = sCD.current;\n        sellStartAt = sCD.timestamp;\n        CommUtils.Countdown memory perCD = players.getSellLimt().freshAndCheck(0,CommUtils.mulRate(balanceOf(msg.sender),MAX_SELL_PER_USER_RATE),SELL_BUY_PERIOD);\n        sellPerMax = perCD.max;\n        sellCurPer = perCD.current;\n        sellPerStartAt = perCD.timestamp;\n    }\n    \n    \n    \n    function applyReferrer(string referrer) private {\n        if(referrer.isStringEmpty()) return;\n        players.applyReferrer(referrer);\n    }\n    \n    function getBuyMinPow(uint256 eth) view public  returns(uint256 pow, uint256 current,uint256 valuePowNum,uint256 valuePowDig){\n        pow = X_POW+1;\n        current = providedCount;\n        CommUtils.Float memory x2Pow = CommUtils.Float(providedCount,tokenDigits).pow(X_POW+1);\n        CommUtils.Float memory rr = exCoefficient.pow(X_POW);\n        CommUtils.Float memory V3 = CommUtils.Float((X_POW+1) * eth,0);\n        CommUtils.Float memory LEFT = V3.divide(rr);\n        CommUtils.Float memory value = LEFT.increase( x2Pow);\n        valuePowNum = value.number;\n        valuePowDig = value.digits;\n    }\n    \n    function getSellMinPow(uint256 eth) view public  returns(uint256 pow, uint256 current,uint256 valuePowNum,uint256 valuePowDig){\n        pow = X_POW+1;\n        current = providedCount;\n        CommUtils.Float memory x2Pow = CommUtils.Float(providedCount,tokenDigits).pow(X_POW+1);\n        CommUtils.Float memory rr = exCoefficient.pow(X_POW);\n        CommUtils.Float memory V3 = CommUtils.Float((X_POW+1) * eth,0);\n        CommUtils.Float memory LEFT = V3.divide(rr);\n        (bool ok,CommUtils.Float memory _value) = x2Pow.decrease(LEFT);\n        CommUtils.Float memory value = ok ? _value : CommUtils.Float(current,tokenDigits).pow(pow);\n        valuePowNum = value.number;\n        valuePowDig = value.digits;\n    }    \n    \n    \n    function getIntegralAtBound(uint256 start,uint256 end) view public  returns(uint256){\n        require(end>start,\"must end > start\");\n        uint256 endI = exCoefficient.getIntegral(end,tokenDigits,X_POW);\n        uint256 startI = exCoefficient.getIntegral(start,tokenDigits,X_POW);\n        require(endI > startI ,\"it`s endI  Integral > startI\");\n        return endI - startI;\n    }\n    \n    function buyByUser(uint256 count,string referrer)   public payable {\n        buyByUserCD = buyByUserCD.freshAndCheck(count,CommUtils.mulRate(INITIAL_SUPPLY-providedCount,MAX_BUY_BY_USER_RATE),SELL_BUY_PERIOD);\n        require(buyByUserCD.passing ,\"it`s over buy max count\");\n        applyReferrer(referrer);\n        uint256 all = providedCount+count;\n        require(all<= INITIAL_SUPPLY,\"count over INITIAL_SUPPLY\");\n        uint256 costEth = getIntegralAtBound(providedCount,providedCount+count);\n        uint256 reqEth = costEth * (1000+BUY_BONUS_IN_1000) / 1000;\n        require(msg.value >= reqEth,\"not enough eth\");\n        bonusFee(costEth,reqEth);\n        providedCount = all;\n        uint256 helpM = CommUtils.mulRate1000(count,HELP_MINING_BUY_1000);\n        _transfer(this,msg.sender,count-helpM);\n         _transfer(this,OFFICIAL_ADDR,helpM);\n        players.refleshBonusAt(msg.sender,balanceOf(msg.sender),count);\n        emit OnDealed (msg.sender,true,count,providedCount); \n    }\n    \n    function sellByUser(uint256 count,string referrer)   public  {\n        require(providedCount >= count ,\"count over providedCount \");\n        sellByUserCD = sellByUserCD.freshAndCheck(count,CommUtils.mulRate(providedCount,MAX_SELL_BY_USER_RATE),SELL_BUY_PERIOD);\n        require(sellByUserCD.passing ,\"it`s over sell max count\");\n        require(players.checkSellLimt(count,CommUtils.mulRate(balanceOf(msg.sender),MAX_SELL_PER_USER_RATE),SELL_BUY_PERIOD).passing,\"SELL over per user count\");\n        applyReferrer(referrer);\n        uint256 helpM = CommUtils.mulRate1000(count,HELP_MINING_SELL_1000);\n        uint256 realCount = (count-helpM);\n        uint256 start = providedCount-realCount;\n        uint256 end = providedCount;\n        uint256 reqEth = getIntegralAtBound(start,end);\n        uint256 costEth = reqEth * (1000- SELL_BONUS_IN_1000) / 1000;\n        providedCount -= realCount;\n        bonusFee(costEth,reqEth);\n        transfer(this,count);\n         _transfer(this,OFFICIAL_ADDR,helpM);\n        emit OnDealed (msg.sender,false,count,providedCount); \n        Player.transferSafe(msg.sender,costEth);\n    }\n    \n    function bonusFee(uint256 costEth,uint256 reqEth) private {\n        address referrer = players.getReferrer(msg.sender);\n        bool unreged = players.getName().length==0 || players.getName() == bytes32(0);\n        if(unreged && referrer==address(0)) return;\n        if(reqEth < costEth ) return ;\n        uint256 orgFee = reqEth - costEth;\n        uint256 repay = orgFee * VIP_DISCOUNT_WEIGHT / VIP_ALL_WEIGHT;\n        uint256 toUp = orgFee * VIP_TOUP_WEIGHT / VIP_ALL_WEIGHT;\n       // uint256 inPool = orgFee -(repay+toUp);\n        players.deposit(msg.sender,repay);\n        vipPool += repay;\n        if(referrer != address(0)){\n            players.deposit(referrer,toUp);\n            vipPool += toUp;\n        }\n    }    \n    \n    /*  @override  */  \n    function transferFrom(address from,address to,uint256 value)public returns (bool){\n        players.refleshBonusAt(to,balanceOf(to),value);\n        return super.transferFrom(from,to,value);\n    }    \n    \n    /*  @override  */\n    function transfer(address to, uint256 value) public returns (bool) {\n        players.refleshBonusAt(to,balanceOf(to),value);\n        return super.transfer(to,value);\n    }    \n    \n    function getStockBlance() view private returns(uint256){\n        return exCoefficient.getIntegral(providedCount,tokenDigits,X_POW);\n    }\n    \n    function getBonusPool() view private returns(uint256){\n        return address(this).balance - (getStockBlance()+ vipPool);\n    }    \n\n    function withdrawalBunos(address[] adrs) public  {\n        if(adrs.length == 0){\n            withdrawalBunos(msg.sender);\n        }else{\n            for(uint256 i=0;i<adrs.length;i++){\n                withdrawalBunos(adrs[i]);\n            }\n        }\n    }\n    \n    \n    function withdrawalBunos(address adr) private {\n        bool b = players.isOverBonusAt(adr) ;\n        if(!b) return;\n        uint256 bonus = getBonusPool() * balanceOf(adr) / providedCount;\n        Player.transferSafe(adr,bonus);\n    }    \n    \n    function withdrawalVipReward() public  {\n        uint256 reward = players.withdrawalAll(msg.sender);\n        uint256 toUp = CommUtils.mulRate1000(reward,VIP_RETOUP_RATE_1000);\n        uint256 realReward =reward- toUp;\n        vipPool -= realReward;\n        Player.transferSafe(msg.sender,realReward);\n        address referrer = players.getReferrer(msg.sender);\n        if(referrer != address(0)){\n            players.deposit(referrer,toUp);\n        }else{\n            vipPool -= toUp;\n        }\n    }    \n    \n    \n    function isEmptyName(string _n) public view returns(bool){\n        return players.isEmptyName(_n.nameFilter());\n    }     \n    \n    function registerName(string name)  public  payable {\n        require(msg.value >= REGESTER_FEE,\"fee not enough\");\n        players.registerName(name.nameFilter());\n    }     \n\n    // function testWithdrawalAll()  public {\n    //     msg.sender.transfer(address( this).balance);\n    // }\n    \n\n    event OnDealed(\n        address who,\n        bool buyed,\n        uint256 ammount,\n        uint256 newProvidedCount\n    );\n\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"registerName\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getIntegralAtBound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_n\",\"type\":\"string\"}],\"name\":\"isEmptyName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"getSellMinPow\",\"outputs\":[{\"name\":\"pow\",\"type\":\"uint256\"},{\"name\":\"current\",\"type\":\"uint256\"},{\"name\":\"valuePowNum\",\"type\":\"uint256\"},{\"name\":\"valuePowDig\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"string\"}],\"name\":\"buyByUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"getBuyMinPow\",\"outputs\":[{\"name\":\"pow\",\"type\":\"uint256\"},{\"name\":\"current\",\"type\":\"uint256\"},{\"name\":\"valuePowNum\",\"type\":\"uint256\"},{\"name\":\"valuePowDig\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adrs\",\"type\":\"address[]\"}],\"name\":\"withdrawalBunos\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"string\"}],\"name\":\"sellByUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawalVipReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLimtInfo\",\"outputs\":[{\"name\":\"buyMax\",\"type\":\"uint256\"},{\"name\":\"buyCur\",\"type\":\"uint256\"},{\"name\":\"buyStartAt\",\"type\":\"uint256\"},{\"name\":\"sellMax\",\"type\":\"uint256\"},{\"name\":\"sellCur\",\"type\":\"uint256\"},{\"name\":\"sellStartAt\",\"type\":\"uint256\"},{\"name\":\"sellPerMax\",\"type\":\"uint256\"},{\"name\":\"sellCurPer\",\"type\":\"uint256\"},{\"name\":\"sellPerStartAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"oa\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyed\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"ammount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newProvidedCount\",\"type\":\"uint256\"}],\"name\":\"OnDealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6080604052600060065560006007553480156200001b57600080fd5b50604051602080620039fd8339810160408181529151606082018352602582527f494e54454c4c4947454e54204f5045524154494e472053595354454d2045584360208084019182527f48414e474500000000000000000000000000000000000000000000000000000085850152845180860190955260038086527f494f450000000000000000000000000000000000000000000000000000000000918601919091528351929492600992620000d29291620003ce565b508151620000e8906004906020850190620003ce565b506005805460ff191660ff92909216919091179055506200011d90503067016345785d8a0000640100000000620001f9810204565b633b9aca006200013e600a60096401000000006200309e620002b882021704565b14620001ab57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f69746073206e6f742073616d6520746f6b656e4d000000000000000000000000604482015290519081900360640190fd5b604080518082019091526349001fa780825260086020909201829052600e55600f5560058054600160a060020a039092166101000261010060a860020a031990921691909117905562000473565b600160a060020a03821615156200020f57600080fd5b6002546200022c90826401000000006200287f6200031c82021704565b600255600160a060020a0382166000908152602081905260409020546200026290826401000000006200287f6200031c82021704565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008080841515620002ce576000925062000314565b831515620002e0576001925062000314565b5083905060015b83811015620003105762000305828664010000000062000336810204565b9150600101620002e7565b8192505b505092915050565b6000828201838110156200032f57600080fd5b9392505050565b60008215156200034957506000620003c8565b508181028183828115156200035a57fe5b0414620003c857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f536166654d617468206d756c206661696c656400000000000000000000000000604482015290519081900360640190fd5b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200041157805160ff191683800117855562000441565b8280016001018555821562000441579182015b828111156200044157825182559160200191906001019062000424565b506200044f92915062000453565b5090565b6200047091905b808211156200044f57600081556001016200045a565b90565b61357a80620004836000396000f30060806040526004361061010e5763ffffffff60e060020a60003504166306fdde0381146101135780630830602b1461019d578063095ea7b3146101eb5780630baa86f51461022357806318160ddd1461025057806318b0efb61461026557806322565c6e146102be57806323b872dd146102fc578063313ce56714610326578063395093511461035157806343c6ce3e14610375578063475b8b4c146103c65780635a9b0b89146103de57806363857b5e1461044c57806370a08231146104a15780638f15dc96146104c257806395d89b4114610520578063a457c2d714610535578063a9059cbb14610559578063d82947dd1461057d578063dbd862c014610592578063dd62ed3e146105ee575b600080fd5b34801561011f57600080fd5b50610128610615565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016257818101518382015260200161014a565b50505050905090810190601f16801561018f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6040805160206004803580820135601f81018490048402850184019095528484526101e99436949293602493928401919081908401838280828437509497506106ab9650505050505050565b005b3480156101f757600080fd5b5061020f600160a060020a0360043516602435610727565b604080519115158252519081900360200190f35b34801561022f57600080fd5b5061023e6004356024356107a6565b60408051918252519081900360200190f35b34801561025c57600080fd5b5061023e6108c1565b34801561027157600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261020f9436949293602493928401919081908401838280828437509497506108c79650505050505050565b3480156102ca57600080fd5b506102d6600435610966565b604080519485526020850193909352838301919091526060830152519081900360800190f35b34801561030857600080fd5b5061020f600160a060020a0360043581169060243516604435610a84565b34801561033257600080fd5b5061033b610ab6565b6040805160ff9092168252519081900360200190f35b34801561035d57600080fd5b5061020f600160a060020a0360043516602435610abf565b60408051602060046024803582810135601f81018590048502860185019096528585526101e9958335953695604494919390910191908190840183828082843750949750610b6f9650505050505050565b3480156103d257600080fd5b506102d6600435610f54565b3480156103ea57600080fd5b506103f3611032565b604080519a8b5260208b0199909952898901979097526060890195909552608088019390935260a087019190915260c086015260e0850152610100840152600160a060020a031661012083015251908190036101400190f35b34801561045857600080fd5b50604080516020600480358082013583810280860185019096528085526101e9953695939460249493850192918291850190849080828437509497506112879650505050505050565b3480156104ad57600080fd5b5061023e600160a060020a03600435166112da565b3480156104ce57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101e99583359536956044949193909101919081908401838280828437509497506112f59650505050505050565b34801561052c57600080fd5b50610128611751565b34801561054157600080fd5b5061020f600160a060020a03600435166024356117b2565b34801561056557600080fd5b5061020f600160a060020a03600435166024356117fd565b34801561058957600080fd5b506101e961181d565b34801561059e57600080fd5b506105a7611a58565b60408051998a5260208a0198909852888801969096526060880194909452608087019290925260a086015260c085015260e084015261010083015251908190036101200190f35b3480156105fa57600080fd5b5061023e600160a060020a0360043581169060243516611c87565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106a15780601f10610676576101008083540402835291602001916106a1565b820191906000526020600020905b81548152906001019060200180831161068457829003601f168201915b5050505050905090565b66470de4df82000034101561070a576040805160e560020a62461bcd02815260206004820152600e60248201527f666565206e6f7420656e6f756768000000000000000000000000000000000000604482015290519081900360640190fd5b61072461071682611cb2565b60089063ffffffff6124c516565b50565b6000600160a060020a038316151561073e57600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60008080848411610801576040805160e560020a62461bcd02815260206004820152601060248201527f6d75737420656e64203e20737461727400000000000000000000000000000000604482015290519081900360640190fd5b60408051808201909152600e548152600f54602082015261082c90856009600263ffffffff61252c16565b60408051808201909152600e548152600f54602082015290925061085a90866009600263ffffffff61252c16565b90508082116108b3576040805160e560020a62461bcd02815260206004820152601c60248201527f6974607320656e64492020496e74656772616c203e2073746172744900000000604482015290519081900360640190fd5b80820392505b505092915050565b60025490565b600073ef99396e68fdf7f45040a64f9f2915565c8356df63630640d260086108ee85611cb2565b6040518363ffffffff1660e060020a0281526004018083815260200182600019166000191681526020019250505060206040518083038186803b15801561093457600080fd5b505af4158015610948573d6000803e3d6000fd5b505050506040513d602081101561095e57600080fd5b505192915050565b600080600080610974613509565b61097c613509565b610984613509565b61098c613509565b6000610996613509565b61099e613509565b600654604080518082019091528181526009602082015260039c50909a506109cc908c63ffffffff6125b016565b60408051808201909152600e548152600f5460208201529097506109f790600263ffffffff6125b016565b6040805180820190915260038e028152600060208201529096509450610a23858763ffffffff61261216565b9350610a35878563ffffffff61268b16565b9250925082610a6757604080518082019091528a815260096020820152610a62908c63ffffffff6125b016565b610a69565b815b80516020909101519b9d9a9c509a9998505050505050505050565b6000610aa383610a93856112da565b600891908563ffffffff61272416565b610aae8484846127e2565b949350505050565b60055460ff1690565b6000600160a060020a0383161515610ad657600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610b0a908363ffffffff61287f16565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600080600080610c668673f0139fac9684ad7372c190a4defcac2b488a79d363ee7fc5a3600654633b9aca006305f5e100020360036040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b158015610be257600080fd5b505af4158015610bf6573d6000803e3d6000fd5b505050506040513d6020811015610c0c57600080fd5b50516040805160a0810182526010546001608060020a038082168352608060020a90910416602082015260115491810191909152601254606082015260135460ff161515608082015291906201518063ffffffff61289116565b80516010805460208401516001608060020a03908116608060020a029381166fffffffffffffffffffffffffffffffff19909216919091171691909117905560408101516011556060810151601255608001516013805491151560ff19909216919091179081905560ff161515610d27576040805160e560020a62461bcd02815260206004820152601760248201527f69746073206f76657220627579206d617820636f756e74000000000000000000604482015290519081900360640190fd5b610d3085612946565b6006548601935067016345785d8a0000841115610d97576040805160e560020a62461bcd02815260206004820152601960248201527f636f756e74206f76657220494e495449414c5f535550504c5900000000000000604482015290519081900360640190fd5b610da760065487600654016107a6565b92506103e8610438840204915034821115610e0c576040805160e560020a62461bcd02815260206004820152600e60248201527f6e6f7420656e6f75676820657468000000000000000000000000000000000000604482015290519081900360640190fd5b610e16838361296a565b6006849055604080517f3a4b53fe00000000000000000000000000000000000000000000000000000000815260048101889052601e6024820152905173f0139fac9684ad7372c190a4defcac2b488a79d391633a4b53fe916044808301926020929190829003018186803b158015610e8d57600080fd5b505af4158015610ea1573d6000803e3d6000fd5b505050506040513d6020811015610eb757600080fd5b50519050610ec83033838903612bce565b600554610ee59030906101009004600160a060020a031683612bce565b610f0233610ef2336112da565b600891908963ffffffff61272416565b60065460408051338152600160208201528082018990526060810192909252517fad0c4829f35c314c6ecc0cb7e87b6b58a2c90210033e95aba296593e147dc6679181900360800190a1505050505050565b600080600080610f62613509565b610f6a613509565b610f72613509565b610f7a613509565b610f82613509565b600654604080518082019091528181526009602082015260039a50909850610fb0908a63ffffffff6125b016565b60408051808201909152600e548152600f546020820152909550610fdb90600263ffffffff6125b016565b6040805180820190915260038c028152600060208201529094509250611007838563ffffffff61261216565b9150611019828663ffffffff612cc016565b8051602090910151999b989a5098979650505050505050565b60008060008060008060008060008030600160a060020a031631600654611058336112da565b611060612d48565b336000908152600860208181526040928390205483517f4ac823f40000000000000000000000000000000000000000000000000000000081526004810193909352925142939273ef99396e68fdf7f45040a64f9f2915565c8356df92634ac823f492602480840193829003018186803b1580156110dc57600080fd5b505af41580156110f0573d6000803e3d6000fd5b505050506040513d602081101561110657600080fd5b5051604080517fbc0e322600000000000000000000000000000000000000000000000000000000815260086004820152336024820152905173ef99396e68fdf7f45040a64f9f2915565c8356df9163bc0e3226916044808301926020929190829003018186803b15801561117957600080fd5b505af415801561118d573d6000803e3d6000fd5b505050506040513d60208110156111a357600080fd5b5051604080517f8d46cde200000000000000000000000000000000000000000000000000000000815260086004820152336024820152905173ef99396e68fdf7f45040a64f9f2915565c8356df91638d46cde2916044808301926020929190829003018186803b15801561121657600080fd5b505af415801561122a573d6000803e3d6000fd5b505050506040513d602081101561124057600080fd5b8101908080519060200190929190505050600560019054906101000a9004600160a060020a0316995099509950995099509950995099509950995090919293949596979899565b60008151600014156112a15761129c33612d5e565b6112d6565b5060005b81518110156112d6576112ce82828151811015156112bf57fe5b90602001906020020151612d5e565b6001016112a5565b5050565b600160a060020a031660009081526020819052604090205490565b600080600080600080876006541015151561135a576040805160e560020a62461bcd02815260206004820152601960248201527f636f756e74206f7665722070726f7669646564436f756e742000000000000000604482015290519081900360640190fd5b61143f8873f0139fac9684ad7372c190a4defcac2b488a79d363ee7fc5a3600654600a6040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b1580156113bb57600080fd5b505af41580156113cf573d6000803e3d6000fd5b505050506040513d60208110156113e557600080fd5b50516040805160a0810182526014546001608060020a038082168352608060020a90910416602082015260155491810191909152601654606082015260175460ff161515608082015291906201518063ffffffff61289116565b80516014805460208401516001608060020a03908116608060020a029381166fffffffffffffffffffffffffffffffff19909216919091171691909117905560408101516015556060810151601655608001516017805491151560ff19909216919091179081905560ff161515611500576040805160e560020a62461bcd02815260206004820152601860248201527f69746073206f7665722073656c6c206d617820636f756e740000000000000000604482015290519081900360640190fd5b6115a68873f0139fac9684ad7372c190a4defcac2b488a79d363ee7fc5a3611527336112da565b60196040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b15801561156757600080fd5b505af415801561157b573d6000803e3d6000fd5b505050506040513d602081101561159157600080fd5b5051600891906201518063ffffffff612db016565b608001511515611600576040805160e560020a62461bcd02815260206004820152601860248201527f53454c4c206f76657220706572207573657220636f756e740000000000000000604482015290519081900360640190fd5b61160987612946565b73f0139fac9684ad7372c190a4defcac2b488a79d3633a4b53fe8960326040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b15801561166457600080fd5b505af4158015611678573d6000803e3d6000fd5b505050506040513d602081101561168e57600080fd5b50516006549096508689039550858103945092506116ac84846107a6565b6006805487900390559150506103e86103848202046116cb818361296a565b6116d530896117fd565b506005546116f39030906101009004600160a060020a031688612bce565b60065460408051338152600060208201528082018b90526060810192909252517fad0c4829f35c314c6ecc0cb7e87b6b58a2c90210033e95aba296593e147dc6679181900360800190a16117473382612ef8565b5050505050505050565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106a15780601f10610676576101008083540402835291602001916106a1565b6000600160a060020a03831615156117c957600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610b0a908363ffffffff612f7216565b600061180c83610a93856112da565b6118168383612f89565b9392505050565b604080517f5636c58200000000000000000000000000000000000000000000000000000000815260086004820152336024820152905160009182918291829173ef99396e68fdf7f45040a64f9f2915565c8356df91635636c582916044808301926020929190829003018186803b15801561189757600080fd5b505af41580156118ab573d6000803e3d6000fd5b505050506040513d60208110156118c157600080fd5b5051604080517f3a4b53fe00000000000000000000000000000000000000000000000000000000815260048101839052606e6024820152905191955073f0139fac9684ad7372c190a4defcac2b488a79d391633a4b53fe91604480820192602092909190829003018186803b15801561193957600080fd5b505af415801561194d573d6000803e3d6000fd5b505050506040513d602081101561196357600080fd5b5051600780548287039081900390915590935091506119823383612ef8565b604080517f138091e200000000000000000000000000000000000000000000000000000000815260086004820152336024820152905173ef99396e68fdf7f45040a64f9f2915565c8356df9163138091e2916044808301926020929190829003018186803b1580156119f357600080fd5b505af4158015611a07573d6000803e3d6000fd5b505050506040513d6020811015611a1d57600080fd5b50519050600160a060020a03811615611a4857611a426008828563ffffffff612f9f16565b50611a52565b6007805484900390555b50505050565b6000806000806000806000806000611a6e613520565b611a76613520565b611a7e613520565b611aec600073f0139fac9684ad7372c190a4defcac2b488a79d363ee7fc5a3600654633b9aca006305f5e100020360036040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b158015610be257600080fd5b925082600001516001608060020a03169b5082602001516001608060020a03169a5082604001519950611b77600073f0139fac9684ad7372c190a4defcac2b488a79d363ee7fc5a3600654600a6040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b1580156113bb57600080fd5b915081600001516001608060020a0316985081602001516001608060020a0316975081604001519650611c50600073f0139fac9684ad7372c190a4defcac2b488a79d363ee7fc5a3611bc8336112da565b60196040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b158015611c0857600080fd5b505af4158015611c1c573d6000803e3d6000fd5b505050506040513d6020811015611c3257600080fd5b505162015180611c426008612fc7565b92919063ffffffff61289116565b905080600001516001608060020a0316955080602001516001608060020a0316945080604001519350505050909192939495969798565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b8051600090829082808060208411801590611ccd5750600084115b1515611d49576040805160e560020a62461bcd02815260206004820152602a60248201527f737472696e67206d757374206265206265747765656e203120616e642033322060448201527f6368617261637465727300000000000000000000000000000000000000000000606482015290519081900360840190fd5b846000815181101515611d5857fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a0214158015611dbf57508460018503815181101515611d9757fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a0214155b1515611e3b576040805160e560020a62461bcd02815260206004820152602560248201527f737472696e672063616e6e6f74207374617274206f7220656e6420776974682060448201527f7370616365000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b846000815181101515611e4a57fe5b90602001015160f860020a900460f860020a02600160f860020a031916603060f860020a021415611f8d57846001815181101515611e8457fe5b90602001015160f860020a900460f860020a02600160f860020a031916607860f860020a0214151515611f01576040805160e560020a62461bcd02815260206004820152601b60248201527f737472696e672063616e6e6f7420737461727420776974682030780000000000604482015290519081900360640190fd5b846001815181101515611f1057fe5b90602001015160f860020a900460f860020a02600160f860020a031916605860f860020a0214151515611f8d576040805160e560020a62461bcd02815260206004820152601b60248201527f737472696e672063616e6e6f7420737461727420776974682030580000000000604482015290519081900360640190fd5b600091505b8382101561245d5784517f400000000000000000000000000000000000000000000000000000000000000090869084908110611fca57fe5b90602001015160f860020a900460f860020a02600160f860020a03191611801561203e575084517f5b000000000000000000000000000000000000000000000000000000000000009086908490811061201f57fe5b90602001015160f860020a900460f860020a02600160f860020a031916105b156120ab57848281518110151561205157fe5b90602001015160f860020a900460f860020a0260f860020a900460200160f860020a02858381518110151561208257fe5b906020010190600160f860020a031916908160001a9053508215156120a657600192505b612452565b84828151811015156120b957fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a021480612189575084517f60000000000000000000000000000000000000000000000000000000000000009086908490811061211557fe5b90602001015160f860020a900460f860020a02600160f860020a031916118015612189575084517f7b000000000000000000000000000000000000000000000000000000000000009086908490811061216a57fe5b90602001015160f860020a900460f860020a02600160f860020a031916105b80612233575084517f2f00000000000000000000000000000000000000000000000000000000000000908690849081106121bf57fe5b90602001015160f860020a900460f860020a02600160f860020a031916118015612233575084517f3a000000000000000000000000000000000000000000000000000000000000009086908490811061221457fe5b90602001015160f860020a900460f860020a02600160f860020a031916105b15156122af576040805160e560020a62461bcd02815260206004820152602260248201527f737472696e6720636f6e7461696e7320696e76616c696420636861726163746560448201527f7273000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b84828151811015156122bd57fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a02141561239c5784826001018151811015156122f957fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a021415151561239c576040805160e560020a62461bcd02815260206004820152602860248201527f737472696e672063616e6e6f7420636f6e7461696e20636f6e7365637574697660448201527f6520737061636573000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b82158015612448575084517f3000000000000000000000000000000000000000000000000000000000000000908690849081106123d557fe5b90602001015160f860020a900460f860020a02600160f860020a0319161080612448575084517f39000000000000000000000000000000000000000000000000000000000000009086908490811061242957fe5b90602001015160f860020a900460f860020a02600160f860020a031916115b1561245257600192505b600190910190611f92565b6001831515146124b7576040805160e560020a62461bcd02815260206004820152601d60248201527f737472696e672063616e6e6f74206265206f6e6c79206e756d62657273000000604482015290519081900360640190fd5b505050506020015192915050565b6000818152600483016020526040902054600160a060020a0316156124e957600080fd5b60008181526004830160209081526040808320805473ffffffffffffffffffffffffffffffffffffffff1916339081179091558352600390940190529190912055565b6000612536613509565b61253e613509565b612546613509565b61254e613509565b604080519081016040528089815260200188815250935061257284876001016125b0565b925061257e89876125b0565b915061258a8383613037565b90508560010161259982613079565b8115156125a257fe5b049998505050505050505050565b6125b8613509565b60008215156125dd5760408051808201909152600a815260016020820152915061260b565b50825181526020808401519082015260015b8281101561260b576126018285613037565b91506001016125ef565b5092915050565b61261a613509565b60008260200151846020015110151561264157602080840151858201510390830152612674565b836020015183602001510390506000826020018181525050612671846000015161266c600a8461309e565b6130ed565b82525b8251825181151561268157fe5b0482525092915050565b6000612695613509565b61269f8484613164565b60208084015190850151146126fe576040805160e560020a62461bcd02815260206004820152601960248201527f69746073206d7573742073616d652073616d6544696769747300000000000000604482015290519081900360640190fd5b825184511061271d578251845103815260208085015190820152600191505b9250929050565b600160a060020a038316600090815260208590526040812054151561276357600160a060020a03841660009081526020869052604090204290556127db565b828262093a800281151561277357fe5b600160a060020a03861660009081526020889052604090208054929091049182019081905590915042106127bf57600160a060020a0384166000908152602086905260409020546127c1565b425b600160a060020a0385166000908152602087905260409020555b5050505050565b600160a060020a038316600090815260016020908152604080832033845290915281205482111561281257600080fd5b600160a060020a0384166000908152600160209081526040808320338452909152902054612846908363ffffffff612f7216565b600160a060020a0385166000908152600160209081526040808320338452909152902055612875848484612bce565b5060019392505050565b60008282018381101561181657600080fd5b612899613520565b604085015115156128da576040805160a0810182526001608060020a0385168152600060208201524291810191909152606081018390526001608082015294505b8185604001514203111561291e576040805160a0810182526001608060020a0385168152600060208201524291810191909152606081018390526001608082015294505b5050506020820180516001608060020a03920182169081905282519091161015608082015290565b61294f81613187565b1561295957610724565b61072460088263ffffffff61318c16565b604080517f138091e2000000000000000000000000000000000000000000000000000000008152600860048201523360248201529051600091829182918291829173ef99396e68fdf7f45040a64f9f2915565c8356df9163138091e291604480820192602092909190829003018186803b1580156129e757600080fd5b505af41580156129fb573d6000803e3d6000fd5b505050506040513d6020811015612a1157600080fd5b5051604080517f4ac823f400000000000000000000000000000000000000000000000000000000815260086004820152905191965073ef99396e68fdf7f45040a64f9f2915565c8356df91634ac823f491602480820192602092909190829003018186803b158015612a8257600080fd5b505af4158015612a96573d6000803e3d6000fd5b505050506040513d6020811015612aac57600080fd5b5050604080517f4ac823f400000000000000000000000000000000000000000000000000000000815260086004820152905160009173ef99396e68fdf7f45040a64f9f2915565c8356df91634ac823f491602480820192602092909190829003018186803b158015612b1d57600080fd5b505af4158015612b31573d6000803e3d6000fd5b505050506040513d6020811015612b4757600080fd5b5051149350838015612b605750600160a060020a038516155b15612b6a57612bc5565b86861015612b7757612bc5565b5050508383036009600382020480612b9160083383612f9f565b506007805483019055600160a060020a03851615612bc557612bbb6008868363ffffffff612f9f16565b5060078054820190555b50505050505050565b600160a060020a038316600090815260208190526040902054811115612bf357600080fd5b600160a060020a0382161515612c0857600080fd5b600160a060020a038316600090815260208190526040902054612c31908263ffffffff612f7216565b600160a060020a038085166000908152602081905260408082209390935590841681522054612c66908263ffffffff61287f16565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b612cc8613509565b612cd28383613164565b6020808301519084015114612d31576040805160e560020a62461bcd02815260206004820152601960248201527f69746073206d7573742073616d652073616d6544696769747300000000000000604482015290519081900360640190fd5b905182510181526020918201519181019190915290565b6000600754612d55613346565b01303103905090565b600080612d7260088463ffffffff61337c16565b9150811515612d8057612dab565b600654612d8c846112da565b612d94612d48565b02811515612d9e57fe5b049050612dab8382612ef8565b505050565b612db8613520565b336000908152600586016020908152604091829020825160a08101845281546001608060020a038082168352608060020a909104169281019290925260018101549282019290925260028201546060820152600382015460ff1615156080820152612e2b9086868663ffffffff61289116565b33600090815260058801602090815260409182902083518154858401516001608060020a03908116608060020a9081029382166fffffffffffffffffffffffffffffffff19909316929092178116929092178084558686015160018501819055606080890151600287018190556080998a01516003909701805497151560ff199098169790971796879055885160a081018a52848716815294909304909416958301959095529481019390935282019290925260ff91909116151591810191909152915050949350505050565b30318111612f3c57604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015612f36573d6000803e3d6000fd5b506112d6565b604051600160a060020a03831690303180156108fc02916000818181858888f19350505050158015612dab573d6000803e3d6000fd5b60008083831115612f8257600080fd5b5050900390565b6000612f96338484612bce565b50600192915050565b600160a060020a03821660009081526001840160205260409020805482019055809392505050565b612fcf613520565b50336000908152600582016020908152604091829020825160a08101845281546001608060020a038082168352608060020a90910416928101929092526001810154928201929092526002820154606082015260039091015460ff1615156080820152919050565b61303f613509565b6000806000613056866000015186600001516133cf565b918652602096870151978701519101960195909503938301939093525092915050565b805160005b826020015181101561309857600a8204915060010161307e565b50919050565b600080808415156130b257600092506108b9565b8315156130c257600192506108b9565b5083905060015b838110156130e5576130db82866130ed565b91506001016130c9565b8192506108b9565b60008215156130fe575060006107a0565b5081810281838281151561310e57fe5b04146107a0576040805160e560020a62461bcd02815260206004820152601360248201527f536166654d617468206d756c206661696c656400000000000000000000000000604482015290519081900360640190fd5b806020015182602001511161317d5761129c818361340d565b6112d6828261340d565b511590565b60008061319883611cb2565b91506131a48483613434565b9050600160a060020a0381161515613206576040805160e560020a62461bcd02815260206004820152601360248201527f7265666572726572416472206973206e756c6c00000000000000000000000000604482015290519081900360640190fd5b60006132128533613453565b600160a060020a031614613270576040805160e560020a62461bcd02815260206004820152601360248201527f6d75737420726566666572206973206e756c6c00000000000000000000000000604482015290519081900360640190fd5b600160a060020a0381163314156132d1576040805160e560020a62461bcd02815260206004820152601460248201527f72656665727265724164722069732073656c6620000000000000000000000000604482015290519081900360640190fd5b6132da84613482565b5060006132e685613482565b1461333b576040805160e560020a62461bcd02815260206004820152601160248201527f6d757374206e6f74207265716573746572000000000000000000000000000000604482015290519081900360640190fd5b611a52843383613499565b60065460408051808201909152600e548152600f54602082015260009161337791906009600263ffffffff61252c16565b905090565b600160a060020a03811660009081526020839052604081205462093a804290910311156133c65750600160a060020a038116600090815260208390526040902042905560016107a0565b50600092915050565b60008060008060008060006133e3896134da565b935093506133f0886134da565b915091506133fe84836130ed565b99929850965090945050505050565b6020808201519083015103613423600a8261309e565b825102825250602091820151910152565b60009081526004919091016020526040902054600160a060020a031690565b600160a060020a0390811660009081526002830160209081526040822054909216908190526003909201905290565b336000908152600382016020526040902054919050565b600160a060020a0391821660009081526002909301602052604090922080549190921673ffffffffffffffffffffffffffffffffffffffff19909116179055565b8060005b7001000000000000719db57035aacb000000821061350457600101600a820491506134de565b915091565b604080518082019091526000808252602082015290565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152905600a165627a7a7230582022a6e187a4f4a8c4af3c9bfd008d2239131a9c3d2ca6beceaddea9d3f0560760002900000000000000000000000081d7b5c7365cb1c72165e79565acb0eb11c4a746",
  "constructorArguments": "00000000000000000000000081d7b5c7365cb1c72165e79565acb0eb11c4a746",
  "libraries": [
    {
      "name": "Player",
      "address": "0xeF99396e68Fdf7F45040a64f9f2915565c8356dF"
    },
    {
      "name": "CommUtils",
      "address": "0xf0139FAC9684AD7372c190A4deFCAC2b488A79d3"
    }
  ]
}