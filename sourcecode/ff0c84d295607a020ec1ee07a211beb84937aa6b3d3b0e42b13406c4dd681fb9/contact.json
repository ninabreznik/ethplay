{
  "address": "0x4a103b21ef422a23718cb09460d4ab340696944d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "InstaSave",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-03\n*/\n\npragma solidity ^0.5.0;\n\ninterface TubInterface {\n    function open() external returns (bytes32);\n    function join(uint) external;\n    function exit(uint) external;\n    function lock(bytes32, uint) external;\n    function free(bytes32, uint) external;\n    function draw(bytes32, uint) external;\n    function wipe(bytes32, uint) external;\n    function give(bytes32, address) external;\n    function shut(bytes32) external;\n    function cups(bytes32) external view returns (address, uint, uint, uint);\n    function gem() external view returns (TokenInterface);\n    function gov() external view returns (TokenInterface);\n    function skr() external view returns (TokenInterface);\n    function sai() external view returns (TokenInterface);\n    function ink(bytes32) external view returns (uint);\n    function tab(bytes32) external returns (uint);\n    function rap(bytes32) external returns (uint);\n    function per() external view returns (uint);\n    function pep() external view returns (PepInterface);\n}\n\ninterface PepInterface {\n    function peek() external returns (bytes32, bool);\n}\n\n\ninterface oracleInterface {\n    function read() external view returns (bytes32);\n}\n\ninterface UniswapExchange {\n    function getEthToTokenOutputPrice(uint256 tokensBought) external view returns (uint256 ethSold);\n    function getTokenToEthOutputPrice(uint256 ethBought) external view returns (uint256 tokensSold);\n    function tokenToTokenSwapOutput(\n        uint256 tokensBought,\n        uint256 maxTokensSold,\n        uint256 maxEthSold,\n        uint256 deadline,\n        address tokenAddr\n        ) external returns (uint256  tokensSold);\n}\n\n\ninterface TokenInterface {\n    function allowance(address, address) external view returns (uint);\n    function balanceOf(address) external view returns (uint);\n    function approve(address, uint) external;\n    function transfer(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n    function deposit() external payable;\n    function withdraw(uint) external;\n}\n\ninterface KyberInterface {\n    function trade(\n        address src,\n        uint srcAmount,\n        address dest,\n        address destAddress,\n        uint maxDestAmount,\n        uint minConversionRate,\n        address walletId\n        ) external payable returns (uint);\n\n    function getExpectedRate(\n        address src,\n        address dest,\n        uint srcQty\n        ) external view returns (uint, uint);\n}\n\n\ncontract DSMath {\n\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"math-not-safe\");\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n}\n\n\ncontract Helpers is DSMath {\n\n    /**\n     * @dev get MakerDAO CDP engine\n     */\n    function getSaiTubAddress() public pure returns (address sai) {\n        sai = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\n    }\n\n    /**\n     * @dev get MakerDAO Oracle for ETH price\n     */\n    function getOracleAddress() public pure returns (address oracle) {\n        oracle = 0x729D19f657BD0614b4985Cf1D82531c67569197B;\n    }\n\n    /**\n     * @dev get uniswap MKR exchange\n     */\n    function getUniswapMKRExchange() public pure returns (address ume) {\n        ume = 0x2C4Bd064b998838076fa341A83d007FC2FA50957;\n    }\n\n    /**\n     * @dev get uniswap DAI exchange\n     */\n    function getUniswapDAIExchange() public pure returns (address ude) {\n        ude = 0x09cabEC1eAd1c0Ba254B09efb3EE13841712bE14;\n    }\n\n    /**\n     * @dev get ethereum address for trade\n     */\n    function getAddressETH() public pure returns (address eth) {\n        eth = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    }\n\n    /**\n     * @dev get ethereum address for trade\n     */\n    function getAddressDAI() public pure returns (address dai) {\n        dai = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n    }\n\n    /**\n     * @dev get kyber proxy address\n     */\n    function getAddressKyber() public pure returns (address kyber) {\n        kyber = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\n    }\n\n    /**\n     * @dev get admin address\n     */\n    function getAddressAdmin() public pure returns (address payable admin) {\n        admin = 0x7284a8451d9a0e7Dc62B3a71C0593eA2eC5c5638;\n    }\n\n    function getCDPStats(bytes32 cup) internal view returns (uint ethCol, uint daiDebt, uint usdPerEth) {\n        TubInterface tub = TubInterface(getSaiTubAddress());\n        usdPerEth = uint(oracleInterface(getOracleAddress()).read());\n        (, uint pethCol, uint debt,) = tub.cups(cup);\n        ethCol = rmul(pethCol, tub.per()); // get ETH col from PETH col\n        daiDebt = debt;\n    }\n\n}\n\n\ncontract MakerHelpers is Helpers {\n\n    event LogLock(uint cdpNum, uint amtETH, uint amtPETH, address owner);\n    event LogFree(uint cdpNum, uint amtETH, uint amtPETH, address owner);\n    event LogDraw(uint cdpNum, uint amtDAI, address owner);\n    event LogWipe(uint cdpNum, uint daiAmt, uint mkrFee, uint daiFee, address owner);\n\n    function setAllowance(TokenInterface _token, address _spender) internal {\n        if (_token.allowance(address(this), _spender) != uint(-1)) {\n            _token.approve(_spender, uint(-1));\n        }\n    }\n\n    function lock(uint cdpNum, uint ethAmt) internal {\n        if (ethAmt > 0) {\n            bytes32 cup = bytes32(cdpNum);\n            address tubAddr = getSaiTubAddress();\n\n            TubInterface tub = TubInterface(tubAddr);\n            TokenInterface weth = tub.gem();\n            TokenInterface peth = tub.skr();\n\n            (address lad,,,) = tub.cups(cup);\n            require(lad == address(this), \"cup-not-owned\");\n\n            weth.deposit.value(ethAmt)();\n\n            uint ink = rdiv(ethAmt, tub.per());\n            ink = rmul(ink, tub.per()) <= ethAmt ? ink : ink - 1;\n\n            setAllowance(weth, tubAddr);\n            tub.join(ink);\n\n            setAllowance(peth, tubAddr);\n            tub.lock(cup, ink);\n\n            emit LogLock(\n                cdpNum,\n                ethAmt,\n                ink,\n                address(this)\n            );\n        }\n    }\n\n    function free(uint cdpNum, uint jam) internal {\n        if (jam > 0) {\n            bytes32 cup = bytes32(cdpNum);\n            address tubAddr = getSaiTubAddress();\n\n            TubInterface tub = TubInterface(tubAddr);\n            TokenInterface peth = tub.skr();\n            TokenInterface weth = tub.gem();\n\n            uint ink = rdiv(jam, tub.per());\n            ink = rmul(ink, tub.per()) <= jam ? ink : ink - 1;\n            tub.free(cup, ink);\n\n            setAllowance(peth, tubAddr);\n\n            tub.exit(ink);\n            uint freeJam = weth.balanceOf(address(this)); // withdraw possible previous stuck WETH as well\n            weth.withdraw(freeJam);\n\n            emit LogFree(\n                cdpNum,\n                freeJam,\n                ink,\n                address(this)\n            );\n        }\n    }\n\n    function draw(uint cdpNum, uint _wad) internal {\n        bytes32 cup = bytes32(cdpNum);\n        if (_wad > 0) {\n            TubInterface tub = TubInterface(getSaiTubAddress());\n\n            tub.draw(cup, _wad);\n\n            emit LogDraw(cdpNum, _wad, address(this));\n        }\n    }\n\n    function wipe(uint cdpNum, uint _wad) internal {\n        if (_wad > 0) {\n            TubInterface tub = TubInterface(getSaiTubAddress());\n            UniswapExchange daiEx = UniswapExchange(getUniswapDAIExchange());\n            UniswapExchange mkrEx = UniswapExchange(getUniswapMKRExchange());\n            TokenInterface dai = tub.sai();\n            TokenInterface mkr = tub.gov();\n\n            bytes32 cup = bytes32(cdpNum);\n\n            (address lad,,,) = tub.cups(cup);\n            require(lad == address(this), \"cup-not-owned\");\n\n            setAllowance(dai, getSaiTubAddress());\n            setAllowance(mkr, getSaiTubAddress());\n            setAllowance(dai, getUniswapDAIExchange());\n\n            (bytes32 val, bool ok) = tub.pep().peek();\n\n            // tub.rap(cup) = stability fee in $, tub.tab(cup) = total DAI debt\n            uint mkrFee = wdiv(rmul(_wad, rdiv(tub.rap(cup), tub.tab(cup))), uint(val));\n            // uint mkrFee = wdiv(rmul(_wad, rdiv(tub.rap(cup), add(tub.rap(cup), tub.tab(cup)))), uint(val));\n\n            uint daiFeeAmt = daiEx.getTokenToEthOutputPrice(mkrEx.getEthToTokenOutputPrice(mkrFee));\n            uint daiAmt = sub(_wad, daiFeeAmt);\n\n            if (ok && val != 0) {\n                daiEx.tokenToTokenSwapOutput(\n                    mkrFee,\n                    daiFeeAmt,\n                    uint(999000000000000000000),\n                    uint(1899063809), // 6th March 2030 GMT // no logic\n                    address(mkr)\n                );\n            }\n\n            tub.wipe(cup, daiAmt);\n\n            emit LogWipe(\n                cdpNum,\n                _wad,\n                mkrFee,\n                daiFeeAmt,\n                address(this)\n            );\n\n        }\n    }\n\n}\n\n\ncontract GetDetails is MakerHelpers {\n\n    function getMax(uint cdpID) public view returns (uint maxColToFree, uint maxDaiToDraw, uint ethInUSD) {\n        bytes32 cup = bytes32(cdpID);\n        (uint ethCol, uint daiDebt, uint usdPerEth) = getCDPStats(cup);\n        uint colToUSD = wmul(ethCol, usdPerEth) - 10;\n        uint minColNeeded = wmul(daiDebt, 1500000000000000000) + 10;\n        maxColToFree = wdiv(sub(colToUSD, minColNeeded), usdPerEth);\n        uint maxDebtLimit = wdiv(colToUSD, 1500000000000000000) - 10;\n        maxDaiToDraw = sub(maxDebtLimit, daiDebt);\n        ethInUSD = usdPerEth;\n    }\n\n    function getSave(uint cdpID, uint ethToSwap) public view returns (uint finalEthCol, uint finalDaiDebt, uint finalColToUSD, bool canSave) {\n        bytes32 cup = bytes32(cdpID);\n        (uint ethCol, uint daiDebt, uint usdPerEth) = getCDPStats(cup);\n        (finalEthCol, finalDaiDebt, finalColToUSD, canSave) = checkSave(\n            ethCol,\n            daiDebt,\n            usdPerEth,\n            ethToSwap\n        );\n    }\n\n    function getLeverage(\n        uint cdpID,\n        uint daiToSwap\n    ) public view returns (\n        uint finalEthCol,\n        uint finalDaiDebt,\n        uint finalColToUSD,\n        bool canLeverage\n    )\n    {\n        bytes32 cup = bytes32(cdpID);\n        (uint ethCol, uint daiDebt, uint usdPerEth) = getCDPStats(cup);\n        (finalEthCol, finalDaiDebt, finalColToUSD, canLeverage) = checkLeverage(\n            ethCol,\n            daiDebt,\n            usdPerEth,\n            daiToSwap\n        );\n    }\n\n    function checkSave(\n        uint ethCol,\n        uint daiDebt,\n        uint usdPerEth,\n        uint ethToSwap\n    ) internal view returns\n    (\n        uint finalEthCol,\n        uint finalDaiDebt,\n        uint finalColToUSD,\n        bool canSave\n    )\n    {\n        uint colToUSD = wmul(ethCol, usdPerEth) - 10;\n        uint minColNeeded = wmul(daiDebt, 1500000000000000000) + 10;\n        uint colToFree = wdiv(sub(colToUSD, minColNeeded), usdPerEth);\n        if (ethToSwap < colToFree) {\n            colToFree = ethToSwap;\n        }\n        (uint expectedRate,) = KyberInterface(getAddressKyber()).getExpectedRate(getAddressETH(), getAddressDAI(), colToFree);\n        expectedRate = wdiv(wmul(expectedRate, 99750000000000000000), 100000000000000000000);\n        uint expectedDAI = wmul(colToFree, expectedRate);\n        if (expectedDAI < daiDebt) {\n            finalEthCol = sub(ethCol, colToFree);\n            finalDaiDebt = sub(daiDebt, expectedDAI);\n            finalColToUSD = wmul(finalEthCol, usdPerEth);\n            canSave = true;\n        } else {\n            finalEthCol = 0;\n            finalDaiDebt = 0;\n            finalColToUSD = 0;\n            canSave = false;\n        }\n    }\n\n    function checkLeverage(\n        uint ethCol,\n        uint daiDebt,\n        uint usdPerEth,\n        uint daiToSwap\n    ) internal view returns\n    (\n        uint finalEthCol,\n        uint finalDaiDebt,\n        uint finalColToUSD,\n        bool canLeverage\n    )\n    {\n        uint colToUSD = wmul(ethCol, usdPerEth) - 10;\n        uint maxDebtLimit = wdiv(colToUSD, 1500000000000000000) - 10;\n        uint debtToBorrow = sub(maxDebtLimit, daiDebt);\n        if (daiToSwap < debtToBorrow) {\n            debtToBorrow = daiToSwap;\n        }\n        (uint expectedRate,) = KyberInterface(getAddressKyber()).getExpectedRate(getAddressDAI(), getAddressETH(), debtToBorrow);\n        expectedRate = wdiv(wmul(expectedRate, 99750000000000000000), 100000000000000000000);\n        uint expectedETH = wmul(debtToBorrow, expectedRate);\n        if (ethCol != 0) {\n            finalEthCol = add(ethCol, expectedETH);\n            finalDaiDebt = add(daiDebt, debtToBorrow);\n            finalColToUSD = wmul(finalEthCol, usdPerEth);\n            canLeverage = true;\n        } else {\n            finalEthCol = 0;\n            finalDaiDebt = 0;\n            finalColToUSD = 0;\n            canLeverage = false;\n        }\n    }\n\n}\n\n\ncontract Save is GetDetails {\n\n    /**\n     * @param what 2 for SAVE & 3 for LEVERAGE\n     */\n    event LogTrade(\n        uint what, // 0 for BUY & 1 for SELL\n        address src,\n        uint srcAmt,\n        address dest,\n        uint destAmt,\n        address beneficiary,\n        uint minConversionRate,\n        address affiliate\n    );\n\n    event LogSaveCDP(\n        uint cdpID,\n        uint srcETH,\n        uint destDAI\n    );\n\n    event LogLeverageCDP(\n        uint cdpID,\n        uint srcDAI,\n        uint destETH\n    );\n\n\n    function save(uint cdpID, uint colToSwap) public {\n        bytes32 cup = bytes32(cdpID);\n        (uint ethCol, uint daiDebt, uint usdPerEth) = getCDPStats(cup);\n        uint colToFree = getColToFree(ethCol, daiDebt, usdPerEth);\n        require(colToFree != 0, \"no-collatral-to-free\");\n        if (colToSwap < colToFree) {\n            colToFree = colToSwap;\n        }\n        uint thisBalance = address(this).balance;\n        free(cdpID, colToFree);\n        uint ethToSwap = wdiv(wmul(colToFree, 99750000000000000000), 100000000000000000000);\n        getAddressAdmin().transfer(sub(colToFree, ethToSwap));\n        uint destAmt = KyberInterface(getAddressKyber()).trade.value(ethToSwap)(\n            getAddressETH(),\n            ethToSwap,\n            getAddressDAI(),\n            address(this),\n            daiDebt,\n            0,\n            getAddressAdmin()\n        );\n        wipe(cdpID, destAmt);\n\n        if (thisBalance < address(this).balance) {\n            uint balToLock = address(this).balance - thisBalance;\n            lock(cdpID, balToLock);\n        }\n\n        emit LogSaveCDP(cdpID, ethToSwap, destAmt);\n\n        emit LogTrade(\n            0,\n            getAddressETH(),\n            colToFree,\n            getAddressDAI(),\n            destAmt,\n            address(this),\n            0,\n            getAddressAdmin()\n        );\n    }\n\n    function leverage(uint cdpID, uint daiToSwap) public {\n        bytes32 cup = bytes32(cdpID);\n        (uint ethCol, uint daiDebt, uint usdPerEth) = getCDPStats(cup);\n        uint debtToBorrow = getDebtToBorrow(ethCol, daiDebt, usdPerEth);\n        require(debtToBorrow != 0, \"No-debt-to-borrow\");\n        if (daiToSwap < debtToBorrow) {\n            debtToBorrow = daiToSwap;\n        }\n        draw(cdpID, debtToBorrow);\n        setAllowance(TokenInterface(getAddressDAI()), getAddressKyber());\n        uint destAmt = KyberInterface(getAddressKyber()).trade.value(0)(\n            getAddressDAI(),\n            debtToBorrow,\n            getAddressETH(),\n            address(this),\n            2**255,\n            0,\n            getAddressAdmin()\n        );\n        uint ethToDeposit = wdiv(wmul(destAmt, 99750000000000000000), 100000000000000000000);\n        getAddressAdmin().transfer(sub(destAmt, ethToDeposit));\n        lock(cdpID, ethToDeposit);\n\n        emit LogLeverageCDP(cdpID, debtToBorrow, destAmt);\n\n        emit LogTrade(\n            1,\n            getAddressDAI(),\n            debtToBorrow,\n            getAddressETH(),\n            destAmt,\n            address(this),\n            0,\n            getAddressAdmin()\n        );\n    }\n\n    function getColToFree(uint ethCol, uint daiDebt, uint usdPerEth) internal pure returns (uint colToFree) {\n        uint colToUSD = sub(wmul(ethCol, usdPerEth), 10);\n        uint minColNeeded = add(wmul(daiDebt, 1500000000000000000), 10);\n        colToFree = sub(wdiv(sub(colToUSD, minColNeeded), usdPerEth), 10);\n    }\n\n    function getDebtToBorrow(uint ethCol, uint daiDebt, uint usdPerEth) internal pure returns (uint debtToBorrow) {\n        uint colToUSD = sub(wmul(ethCol, usdPerEth), 10);\n        uint maxDebtLimit = sub(wdiv(colToUSD, 1500000000000000000), 10);\n        debtToBorrow = sub(maxDebtLimit, daiDebt);\n    }\n\n}\n\n\ncontract InstaSave is Save {\n\n    uint public version;\n\n    /**\n     * @dev setting up variables on deployment\n     * 1...2...3 versioning in each subsequent deployments\n     */\n    constructor(uint _version) public {\n        version = _version;\n    }\n\n    function() external payable {}\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405160208061343f8339810180604052602081101561003057600080fd5b810190808051906020019092919050505080600081905550506133e7806100586000396000f3fe6080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806354fd4d50146100d257806357fc0363146100fd5780635e96263c146101425780636c47c7ed1461018757806391b0b618146101f957806394c4a12414610250578063ab1be686146102a7578063adbd80b0146102fe578063b18b78dd14610355578063c865463c146103ac578063db5a5d9914610403578063e254ae5a1461045a578063e688f89d146104cc578063f1d9a15014610529575b005b3480156100de57600080fd5b506100e7610580565b6040518082815260200191505060405180910390f35b34801561010957600080fd5b506101406004803603604081101561012057600080fd5b810190808035906020019092919080359060200190929190505050610586565b005b34801561014e57600080fd5b506101856004803603604081101561016557600080fd5b810190808035906020019092919080359060200190929190505050610a64565b005b34801561019357600080fd5b506101ca600480360360408110156101aa57600080fd5b810190808035906020019092919080359060200190929190505050610f15565b604051808581526020018481526020018381526020018215151515815260200194505050505060405180910390f35b34801561020557600080fd5b5061020e610f60565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561025c57600080fd5b50610265610f7c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102b357600080fd5b506102bc610f98565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561030a57600080fd5b50610313610fb4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561036157600080fd5b5061036a610fd0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103b857600080fd5b506103c1610fec565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561040f57600080fd5b50610418611008565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561046657600080fd5b5061049d6004803603604081101561047d57600080fd5b810190808035906020019092919080359060200190929190505050611024565b604051808581526020018481526020018381526020018215151515815260200194505050505060405180910390f35b3480156104d857600080fd5b50610505600480360360208110156104ef57600080fd5b810190808035906020019092919050505061106f565b60405180848152602001838152602001828152602001935050505060405180910390f35b34801561053557600080fd5b5061053e611104565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60005481565b6000826001029050600080600061059c84611120565b92509250925060006105af84848461135e565b90506000811415151561062a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6e6f2d636f6c6c617472616c2d746f2d6672656500000000000000000000000081525060200191505060405180910390fd5b80861015610636578590505b60003073ffffffffffffffffffffffffffffffffffffffff1631905061065c88836113bf565b6000610683610674846805684f30807937000061198d565b68056bc75e2d631000006119d1565b905061068d610fb4565b73ffffffffffffffffffffffffffffffffffffffff166108fc6106b08584611a0d565b9081150290604051600060405180830381858888f193505050501580156106db573d6000803e3d6000fd5b5060006106e6610f60565b73ffffffffffffffffffffffffffffffffffffffff1663cb3c28c78361070a610f98565b85610713610fec565b308c600061071f610fb4565b6040518963ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019750505050505050506020604051808303818588803b15801561084a57600080fd5b505af115801561085e573d6000803e3d6000fd5b50505050506040513d602081101561087557600080fd5b810190808051906020019092919050505090506108928a82611a92565b3073ffffffffffffffffffffffffffffffffffffffff16318310156108db576000833073ffffffffffffffffffffffffffffffffffffffff16310390506108d98b8261240c565b505b7f6810ff3b6051a65df9db2074fbbc6c6ca9460b80e03a0b96f559bb2d2629a8698a838360405180848152602001838152602001828152602001935050505060405180910390a17f11e25872c1ff01460756fe30988d586790d81915aa1ed26f716b966a0fcc196c600061094d610f98565b86610956610fec565b85306000610962610fb4565b604051808981526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019850505050505050505060405180910390a150505050505050505050565b60008260010290506000806000610a7a84611120565b9250925092506000610a8d848484612a72565b905060008114151515610b08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4e6f2d646562742d746f2d626f72726f7700000000000000000000000000000081525060200191505060405180910390fd5b80861015610b14578590505b610b1e8782612ac0565b610b36610b29610fec565b610b31610f60565b612be6565b6000610b40610f60565b73ffffffffffffffffffffffffffffffffffffffff1663cb3c28c76000610b65610fec565b85610b6e610f98565b307f80000000000000000000000000000000000000000000000000000000000000006000610b9a610fb4565b6040518963ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019750505050505050506020604051808303818588803b158015610cc557600080fd5b505af1158015610cd9573d6000803e3d6000fd5b50505050506040513d6020811015610cf057600080fd5b810190808051906020019092919050505090506000610d2a610d1b836805684f30807937000061198d565b68056bc75e2d631000006119d1565b9050610d34610fb4565b73ffffffffffffffffffffffffffffffffffffffff166108fc610d578484611a0d565b9081150290604051600060405180830381858888f19350505050158015610d82573d6000803e3d6000fd5b50610d8d898261240c565b7f2acb6b38e174890a255486d3417fcd6719c4a0f790cd59fbe74d130fb5a608c489848460405180848152602001838152602001828152602001935050505060405180910390a17f11e25872c1ff01460756fe30988d586790d81915aa1ed26f716b966a0fcc196c6001610dff610fec565b85610e08610f98565b86306000610e14610fb4565b604051808981526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019850505050505050505060405180910390a1505050505050505050565b60008060008060008660010290506000806000610f3184611120565b925092509250610f438383838c612df6565b809850819950829a50839b50505050505050505092959194509250565b600073818e6fecd516ecc3849daf6845e3ec868087b755905090565b6000732c4bd064b998838076fa341a83d007fc2fa50957905090565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee905090565b6000737284a8451d9a0e7dc62b3a71c0593ea2ec5c5638905090565b600073729d19f657bd0614b4985cf1d82531c67569197b905090565b60007389d24a6b4ccb1b6faa2625fe562bdd9a23260359905090565b60007309cabec1ead1c0ba254b09efb3ee13841712be14905090565b6000806000806000866001029050600080600061104084611120565b9250925092506110528383838c613007565b809850819950829a50839b50505050505050505092959194509250565b600080600080846001029050600080600061108984611120565b9250925092506000600a61109d858461198d565b0390506000600a6110b6856714d1120d7b16000061198d565b0190506110cc6110c68383611a0d565b846119d1565b98506000600a6110e4846714d1120d7b1600006119d1565b0390506110f18186611a0d565b9850839750505050505050509193909250565b600073448a5065aebb8e423f0896e6c5d525c040f59af3905090565b60008060008061112e611104565b9050611138610fd0565b73ffffffffffffffffffffffffffffffffffffffff166357de26a46040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561119957600080fd5b505afa1580156111ad573d6000803e3d6000fd5b505050506040513d60208110156111c357600080fd5b81019080805190602001909291905050506001900491506000808273ffffffffffffffffffffffffffffffffffffffff1663fdac0025886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060806040518083038186803b15801561124a57600080fd5b505afa15801561125e573d6000803e3d6000fd5b505050506040513d608081101561127457600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919050505050925092505061134f828473ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561130f57600080fd5b505afa158015611323573d6000803e3d6000fd5b505050506040513d602081101561133957600080fd5b8101908080519060200190929190505050613211565b95508094505050509193909250565b60008061137561136e868561198d565b600a611a0d565b9050600061139561138e866714d1120d7b16000061198d565b600a61325d565b90506113b46113ad6113a78484611a0d565b866119d1565b600a611a0d565b925050509392505050565b600081111561198957600082600102905060006113da611104565b9050600081905060008173ffffffffffffffffffffffffffffffffffffffff16630f8a771e6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561144557600080fd5b505afa158015611459573d6000803e3d6000fd5b505050506040513d602081101561146f57600080fd5b8101908080519060200190929190505050905060008273ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156114e657600080fd5b505afa1580156114fa573d6000803e3d6000fd5b505050506040513d602081101561151057600080fd5b8101908080519060200190929190505050905060006115cb878573ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561158b57600080fd5b505afa15801561159f573d6000803e3d6000fd5b505050506040513d60208110156115b557600080fd5b81019080805190602001909291905050506132e2565b905086611674828673ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561163457600080fd5b505afa158015611648573d6000803e3d6000fd5b505050506040513d602081101561165e57600080fd5b8101908080519060200190929190505050613211565b11156116835760018103611685565b805b90508373ffffffffffffffffffffffffffffffffffffffff1663a5cd184e87836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156116fe57600080fd5b505af1158015611712573d6000803e3d6000fd5b505050506117208386612be6565b8373ffffffffffffffffffffffffffffffffffffffff16637f8661a1826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561178f57600080fd5b505af11580156117a3573d6000803e3d6000fd5b5050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561184257600080fd5b505afa158015611856573d6000803e3d6000fd5b505050506040513d602081101561186c57600080fd5b810190808051906020019092919050505090508273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1580156118ee57600080fd5b505af1158015611902573d6000803e3d6000fd5b505050507fbc364e2c948b1a58aa818f1d663cbf625acb9d3e827d8ba7661ee805ae63506089828430604051808581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390a1505050505050505b5050565b6000670de0b6b3a76400006119bf6119a58585613322565b6002670de0b6b3a76400008115156119b957fe5b0461325d565b8115156119c857fe5b04905092915050565b6000816119fb6119e985670de0b6b3a7640000613322565b6002858115156119f557fe5b0461325d565b811515611a0457fe5b04905092915050565b60008282840391508111151515611a8c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f64732d6d6174682d7375622d756e646572666c6f77000000000000000000000081525060200191505060405180910390fd5b92915050565b6000811115612408576000611aa5611104565b90506000611ab1611008565b90506000611abd610f7c565b905060008373ffffffffffffffffffffffffffffffffffffffff16639166cba46040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611b2357600080fd5b505afa158015611b37573d6000803e3d6000fd5b505050506040513d6020811015611b4d57600080fd5b8101908080519060200190929190505050905060008473ffffffffffffffffffffffffffffffffffffffff166312d43a516040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611bc457600080fd5b505afa158015611bd8573d6000803e3d6000fd5b505050506040513d6020811015611bee57600080fd5b81019080805190602001909291905050509050600087600102905060008673ffffffffffffffffffffffffffffffffffffffff1663fdac0025836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060806040518083038186803b158015611c7857600080fd5b505afa158015611c8c573d6000803e3d6000fd5b505050506040513d6080811015611ca257600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919050505050505090503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515611d79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6375702d6e6f742d6f776e65640000000000000000000000000000000000000081525060200191505060405180910390fd5b611d8a84611d85611104565b612be6565b611d9b83611d96611104565b612be6565b611dac84611da7611008565b612be6565b6000808873ffffffffffffffffffffffffffffffffffffffff1663ace237f56040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611e1157600080fd5b505afa158015611e25573d6000803e3d6000fd5b505050506040513d6020811015611e3b57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff166359e02dd76040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016040805180830381600087803b158015611eae57600080fd5b505af1158015611ec2573d6000803e3d6000fd5b505050506040513d6040811015611ed857600080fd5b81019080805190602001909291908051906020019092919050505091509150600061206b6120618c61205c8d73ffffffffffffffffffffffffffffffffffffffff16636f78ee0d8a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015611f7257600080fd5b505af1158015611f86573d6000803e3d6000fd5b505050506040513d6020811015611f9c57600080fd5b81019080805190602001909291905050508e73ffffffffffffffffffffffffffffffffffffffff1663f7c8d6348b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561201c57600080fd5b505af1158015612030573d6000803e3d6000fd5b505050506040513d602081101561204657600080fd5b81019080805190602001909291905050506132e2565b613211565b84600190046119d1565b905060008973ffffffffffffffffffffffffffffffffffffffff16632640f62c8a73ffffffffffffffffffffffffffffffffffffffff166359e94862856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156120f857600080fd5b505afa15801561210c573d6000803e3d6000fd5b505050506040513d602081101561212257600080fd5b81019080805190602001909291905050506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561218357600080fd5b505afa158015612197573d6000803e3d6000fd5b505050506040513d60208110156121ad57600080fd5b8101908080519060200190929190505050905060006121cc8d83611a0d565b90508380156121df575060006001028514155b156122e9578a73ffffffffffffffffffffffffffffffffffffffff1663b040d5458484683627e8f712373c00006371316a018d6040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200195505050505050602060405180830381600087803b1580156122ac57600080fd5b505af11580156122c0573d6000803e3d6000fd5b505050506040513d60208110156122d657600080fd5b8101908080519060200190929190505050505b8b73ffffffffffffffffffffffffffffffffffffffff166373b3810188836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561236057600080fd5b505af1158015612374573d6000803e3d6000fd5b505050507fc61fae64789cde417503f7bd67082d71c8379712017e446877dd1c26b1bf4c9c8e8e858530604051808681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060405180910390a15050505050505050505050505b5050565b6000811115612a6e5760008260010290506000612427611104565b9050600081905060008173ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561249257600080fd5b505afa1580156124a6573d6000803e3d6000fd5b505050506040513d60208110156124bc57600080fd5b8101908080519060200190929190505050905060008273ffffffffffffffffffffffffffffffffffffffff16630f8a771e6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561253357600080fd5b505afa158015612547573d6000803e3d6000fd5b505050506040513d602081101561255d57600080fd5b8101908080519060200190929190505050905060008373ffffffffffffffffffffffffffffffffffffffff1663fdac0025876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060806040518083038186803b1580156125df57600080fd5b505afa1580156125f3573d6000803e3d6000fd5b505050506040513d608081101561260957600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919050505050505090503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156126e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6375702d6e6f742d6f776e65640000000000000000000000000000000000000081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663d0e30db0886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561274457600080fd5b505af1158015612758573d6000803e3d6000fd5b50505050506000612805888673ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156127c557600080fd5b505afa1580156127d9573d6000803e3d6000fd5b505050506040513d60208110156127ef57600080fd5b81019080805190602001909291905050506132e2565b9050876128ae828773ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561286e57600080fd5b505afa158015612882573d6000803e3d6000fd5b505050506040513d602081101561289857600080fd5b8101908080519060200190929190505050613211565b11156128bd57600181036128bf565b805b90506128cb8487612be6565b8473ffffffffffffffffffffffffffffffffffffffff1663049878f3826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561293a57600080fd5b505af115801561294e573d6000803e3d6000fd5b5050505061295c8387612be6565b8473ffffffffffffffffffffffffffffffffffffffff1663b3b77a5188836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156129d357600080fd5b505af11580156129e7573d6000803e3d6000fd5b505050507fa66947e0e444664290dad9ea8bdc946a0662a93c04cc0db7dc993a19319d39ed89898330604051808581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390a1505050505050505b5050565b600080612a89612a82868561198d565b600a611a0d565b90506000612aa9612aa2836714d1120d7b1600006119d1565b600a611a0d565b9050612ab58186611a0d565b925050509392505050565b60008260010290506000821115612be1576000612adb611104565b90508073ffffffffffffffffffffffffffffffffffffffff1663440f19ba83856040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015612b5457600080fd5b505af1158015612b68573d6000803e3d6000fd5b505050507f2552409de7c93ad237013bdc31f6351559f2d50c8b43d20b83fc75639a55e431848430604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1505b505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8273ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015612cd457600080fd5b505afa158015612ce8573d6000803e3d6000fd5b505050506040513d6020811015612cfe57600080fd5b8101908080519060200190929190505050141515612df2578173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015612dd957600080fd5b505af1158015612ded573d6000803e3d6000fd5b505050505b5050565b6000806000806000600a612e0a8a8961198d565b0390506000600a612e238a6714d1120d7b16000061198d565b0190506000612e3b612e358484611a0d565b8a6119d1565b905080881015612e49578790505b6000612e53610f60565b73ffffffffffffffffffffffffffffffffffffffff1663809a9e55612e76610f98565b612e7e610fec565b856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604080518083038186803b158015612f3457600080fd5b505afa158015612f48573d6000803e3d6000fd5b505050506040513d6040811015612f5e57600080fd5b810190808051906020019092919080519060200190929190505050509050612fa1612f92826805684f30807937000061198d565b68056bc75e2d631000006119d1565b90506000612faf838361198d565b90508b811015612fe657612fc38d84611a0d565b9850612fcf8c82611a0d565b9750612fdb898c61198d565b965060019550612ff7565b600098506000975060009650600095505b5050505050945094509450949050565b6000806000806000600a61301b8a8961198d565b0390506000600a613034836714d1120d7b1600006119d1565b0390506000613043828b611a0d565b905080881015613051578790505b600061305b610f60565b73ffffffffffffffffffffffffffffffffffffffff1663809a9e5561307e610fec565b613086610f98565b856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604080518083038186803b15801561313c57600080fd5b505afa158015613150573d6000803e3d6000fd5b505050506040513d604081101561316657600080fd5b8101908080519060200190929190805190602001909291905050505090506131a961319a826805684f30807937000061198d565b68056bc75e2d631000006119d1565b905060006131b7838361198d565b905060008d1415156131f0576131cd8d8261325d565b98506131d98c8461325d565b97506131e5898c61198d565b965060019550613201565b600098506000975060009650600095505b5050505050945094509450949050565b60006b033b2e3c9fd0803ce800000061324b61322d8585613322565b60026b033b2e3c9fd0803ce800000081151561324557fe5b0461325d565b81151561325457fe5b04905092915050565b600082828401915081101515156132dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6d6174682d6e6f742d736166650000000000000000000000000000000000000081525060200191505060405180910390fd5b92915050565b6000816133106132fe856b033b2e3c9fd0803ce8000000613322565b60028581151561330a57fe5b0461325d565b81151561331957fe5b04905092915050565b6000808214806133415750828283850292508281151561333e57fe5b04145b15156133b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6d6174682d6e6f742d736166650000000000000000000000000000000000000081525060200191505060405180910390fd5b9291505056fea165627a7a7230582036e749aad0127e6438638941f3330a9013e4bb6b2b2e414ad75d560f14e17faf00290000000000000000000000000000000000000000000000000000000000000001",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000001"
}