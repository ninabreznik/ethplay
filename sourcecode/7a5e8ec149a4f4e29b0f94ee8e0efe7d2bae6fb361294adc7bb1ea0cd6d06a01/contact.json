{
  "address": "0xf09f3788743c18ecdc2cf238163bd0bbbc8a4fd8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenVesting",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-26\n*/\n\npragma solidity ^0.4.13;\n\nlibrary Math {\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\ncontract ReturnVestingRegistry is Ownable {\n\n  mapping (address => address) public returnAddress;\n\n  function record(address from, address to) onlyOwner public {\n    require(from != 0);\n\n    returnAddress[from] = to;\n  }\n}\n\ncontract TerraformReserve is Ownable {\n\n  /* Storing a balance for each user */\n  mapping (address => uint256) public lockedBalance;\n\n  /* Store the total sum locked */\n  uint public totalLocked;\n\n  /* Reference to the token */\n  ERC20 public manaToken;\n\n  /* Contract that will assign the LAND and burn/return tokens */\n  address public landClaim;\n\n  /* Prevent the token from accepting deposits */\n  bool public acceptingDeposits;\n\n  event LockedBalance(address user, uint mana);\n  event LandClaimContractSet(address target);\n  event LandClaimExecuted(address user, uint value, bytes data);\n  event AcceptingDepositsChanged(bool _acceptingDeposits);\n\n  function TerraformReserve(address _token) {\n    require(_token != 0);\n    manaToken = ERC20(_token);\n    acceptingDeposits = true;\n  }\n\n  /**\n   * Lock MANA into the contract.\n   * This contract does not have another way to take the tokens out other than\n   * through the target contract.\n   */\n  function lockMana(address _from, uint256 mana) public {\n    require(acceptingDeposits);\n    require(mana >= 1000 * 1e18);\n    require(manaToken.transferFrom(_from, this, mana));\n\n    lockedBalance[_from] += mana;\n    totalLocked += mana;\n    LockedBalance(_from, mana);\n  }\n\n  /**\n   * Allows the owner of the contract to pause acceptingDeposits\n   */\n  function changeContractState(bool _acceptingDeposits) public onlyOwner {\n    acceptingDeposits = _acceptingDeposits;\n    AcceptingDepositsChanged(acceptingDeposits);\n  }\n\n  /**\n   * Set the contract that can move the staked MANA.\n   * Calls the `approve` function of the ERC20 token with the total amount.\n   */\n  function setTargetContract(address target) public onlyOwner {\n    landClaim = target;\n    manaToken.approve(landClaim, totalLocked);\n    LandClaimContractSet(target);\n  }\n\n  /**\n   * Prevent payments to the contract\n   */\n  function () public payable {\n    revert();\n  }\n}\n\ncontract TokenVesting is Ownable {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20;\n\n  event Released(uint256 amount);\n  event Revoked();\n\n  // beneficiary of tokens after they are released\n  address public beneficiary;\n\n  uint256 public cliff;\n  uint256 public start;\n  uint256 public duration;\n\n  bool public revocable;\n  bool public revoked;\n\n  uint256 public released;\n\n  ERC20 public token;\n\n  /**\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n   * of the balance will have vested.\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n   * @param _duration duration in seconds of the period in which the tokens will vest\n   * @param _revocable whether the vesting is revocable or not\n   * @param _token address of the ERC20 token contract\n   */\n  function TokenVesting(\n    address _beneficiary,\n    uint256 _start,\n    uint256 _cliff,\n    uint256 _duration,\n    bool    _revocable,\n    address _token\n  ) {\n    require(_beneficiary != 0x0);\n    require(_cliff <= _duration);\n\n    beneficiary = _beneficiary;\n    start       = _start;\n    cliff       = _start.add(_cliff);\n    duration    = _duration;\n    revocable   = _revocable;\n    token       = ERC20(_token);\n  }\n\n  /**\n   * @notice Only allow calls from the beneficiary of the vesting contract\n   */\n  modifier onlyBeneficiary() {\n    require(msg.sender == beneficiary);\n    _;\n  }\n\n  /**\n   * @notice Allow the beneficiary to change its address\n   * @param target the address to transfer the right to\n   */\n  function changeBeneficiary(address target) onlyBeneficiary public {\n    require(target != 0);\n    beneficiary = target;\n  }\n\n  /**\n   * @notice Transfers vested tokens to beneficiary.\n   */\n  function release() public {\n    require(now >= cliff);\n    _releaseTo(beneficiary);\n  }\n\n  /**\n   * @notice Transfers vested tokens to a target address.\n   * @param target the address to send the tokens to\n   */\n  function releaseTo(address target) onlyBeneficiary public {\n    require(now >= cliff);\n    _releaseTo(target);\n  }\n\n  /**\n   * @notice Transfers vested tokens to beneficiary.\n   */\n  function _releaseTo(address target) internal {\n    uint256 unreleased = releasableAmount();\n\n    released = released.add(unreleased);\n\n    token.safeTransfer(target, unreleased);\n\n    Released(released);\n  }\n\n  /**\n   * @notice Allows the owner to revoke the vesting. Tokens already vested are sent to the beneficiary.\n   */\n  function revoke() onlyOwner public {\n    require(revocable);\n    require(!revoked);\n\n    // Release all vested tokens\n    _releaseTo(beneficiary);\n\n    // Send the remainder to the owner\n    token.safeTransfer(owner, token.balanceOf(this));\n\n    revoked = true;\n\n    Revoked();\n  }\n\n\n  /**\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\n   */\n  function releasableAmount() public constant returns (uint256) {\n    return vestedAmount().sub(released);\n  }\n\n  /**\n   * @dev Calculates the amount that has already vested.\n   */\n  function vestedAmount() public constant returns (uint256) {\n    uint256 currentBalance = token.balanceOf(this);\n    uint256 totalBalance = currentBalance.add(released);\n\n    if (now < cliff) {\n      return 0;\n    } else if (now >= start.add(duration) || revoked) {\n      return totalBalance;\n    } else {\n      return totalBalance.mul(now.sub(start)).div(duration);\n    }\n  }\n\n  /**\n   * @notice Allow withdrawing any token other than the relevant one\n   */\n  function releaseForeignToken(ERC20 _token, uint256 amount) onlyOwner {\n    require(_token != token);\n    _token.transfer(owner, amount);\n  }\n}",
  "bytecode": "6060604052341561000f57600080fd5b60405160c0806111ae833981016040528080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919050505b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b60008673ffffffffffffffffffffffffffffffffffffffff16141515156100c157600080fd5b8284111515156100d057600080fd5b85600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460038190555061013884866101ac64010000000002610d99179091906401000000009004565b6002819055508260048190555081600560006101000a81548160ff02191690831515021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050505050506101cb565b60008082840190508381101515156101c057fe5b8091505b5092915050565b610fd4806101da6000396000f300606060405236156100ef576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630fb5a6b4146100f457806313d033c01461011d57806338af3eed1461014657806344b1231f1461019b5780635b940081146101c457806363d256ce146101ed57806386d1a69f1461021a578063872a78101461022f5780638da5cb5b1461025c57806396132521146102b1578063980c2f21146102da578063b6549f751461031c578063be9a655514610331578063d1fb56461461035a578063dc07065714610393578063f2fde38b146103cc578063fc0c546a14610405575b600080fd5b34156100ff57600080fd5b61010761045a565b6040518082815260200191505060405180910390f35b341561012857600080fd5b610130610460565b6040518082815260200191505060405180910390f35b341561015157600080fd5b610159610466565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101a657600080fd5b6101ae61048c565b6040518082815260200191505060405180910390f35b34156101cf57600080fd5b6101d7610624565b6040518082815260200191505060405180910390f35b34156101f857600080fd5b610200610648565b604051808215151515815260200191505060405180910390f35b341561022557600080fd5b61022d61065b565b005b341561023a57600080fd5b61024261069a565b604051808215151515815260200191505060405180910390f35b341561026757600080fd5b61026f6106ad565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102bc57600080fd5b6102c46106d2565b6040518082815260200191505060405180910390f35b34156102e557600080fd5b61031a600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106d8565b005b341561032757600080fd5b61032f61087e565b005b341561033c57600080fd5b610344610ad3565b6040518082815260200191505060405180910390f35b341561036557600080fd5b610391600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ad9565b005b341561039e57600080fd5b6103ca600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b54565b005b34156103d757600080fd5b610403600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c1c565b005b341561041057600080fd5b610418610d73565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60045481565b60025481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561055657600080fd5b6102c65a03f1151561056757600080fd5b50505060405180519050915061058860065483610d9990919063ffffffff16565b905060025442101561059d576000925061061f565b6105b4600454600354610d9990919063ffffffff16565b421015806105ce5750600560019054906101000a900460ff165b156105db5780925061061f565b6106166004546106086105f960035442610db890919063ffffffff16565b84610dd290919063ffffffff16565b610e0690919063ffffffff16565b925061061f565b5b5b505090565b600061064260065461063461048c565b610db890919063ffffffff16565b90505b90565b600560019054906101000a900460ff1681565b600254421015151561066c57600080fd5b610697600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610e22565b5b565b600560009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561073357600080fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561079057600080fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561085c57600080fd5b6102c65a03f1151561086d57600080fd5b50505060405180519050505b5b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108d957600080fd5b600560009054906101000a900460ff1615156108f457600080fd5b600560019054906101000a900460ff1615151561091057600080fd5b61093b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610e22565b610a886000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610a2557600080fd5b6102c65a03f11515610a3657600080fd5b50505060405180519050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610ed49092919063ffffffff16565b6001600560016101000a81548160ff0219169083151502179055507f44825a4b2df8acb19ce4e1afba9aa850c8b65cdb7942e2078f27d0b0960efee660405160405180910390a15b5b565b60035481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b3557600080fd5b6002544210151515610b4657600080fd5b610b4f81610e22565b5b5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bb057600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff1614151515610bd657600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c7757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610cb357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808284019050838110151515610dad57fe5b8091505b5092915050565b6000828211151515610dc657fe5b81830390505b92915050565b60008082840290506000841480610df35750828482811515610df057fe5b04145b1515610dfb57fe5b8091505b5092915050565b6000808284811515610e1457fe5b0490508091505b5092915050565b6000610e2c610624565b9050610e4381600654610d9990919063ffffffff16565b600681905550610e968282600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610ed49092919063ffffffff16565b7ffb81f9b30d73d830c3544b34d827c08142579ee75710b490bab0b3995468c5656006546040518082815260200191505060405180910390a15b5050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610f7f57600080fd5b6102c65a03f11515610f9057600080fd5b505050604051805190501515610fa257fe5b5b5050505600a165627a7a72305820df0b56fe19f134f932ec473cd4c04694e892ddb5a895e65e55fc4778dd4a0ba200290000000000000000000000009789b30ff03065a84ee893dbc056c0937fee065d000000000000000000000000000000000000000000000000000000005a934e000000000000000000000000000000000000000000000000000000000001e13380000000000000000000000000000000000000000000000000000000000784ce0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000f5d2fb29fb7d3cfee444a200298f468908cc942",
  "constructorArguments": "0000000000000000000000009789b30ff03065a84ee893dbc056c0937fee065d000000000000000000000000000000000000000000000000000000005a934e000000000000000000000000000000000000000000000000000000000001e13380000000000000000000000000000000000000000000000000000000000784ce0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000f5d2fb29fb7d3cfee444a200298f468908cc942"
}