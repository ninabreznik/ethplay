{
  "address": "0xfedae5642668f8636a11987ff386bfd215f942ee",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "PolicyPal Network Token",
  "contractName": "PolicyPalNetworkToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-01\n*/\n\npragma solidity ^0.4.18;\n\n// File: contracts/zeppelin/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/CrowdsaleAuthorizer.sol\n\n/**\n * @title CrowdsaleAuthorizer\n * @dev Crowd Sale Authorizer\n */\ncontract CrowdsaleAuthorizer {\n    mapping(address => uint256)    public participated;\n    mapping(address => bool)       public whitelistAddresses;\n\n    address                        public admin;\n    uint256                        public saleStartTime;\n    uint256                        public saleEndTime;\n    uint256                        public increaseMaxContribTime;\n    uint256                        public minContribution;\n    uint256                        public maxContribution;\n\n    using SafeMath for uint256;\n\n    /**\n    * @dev Modifier for only admin\n    */\n    modifier onlyAdmin() {\n      require(msg.sender == admin);\n      _;\n    }\n\n    /**\n    * @dev Modifier for valid address\n    */\n    modifier validAddress(address _addr) {\n      require(_addr != address(0x0));\n      require(_addr != address(this));\n      _;\n    }\n\n    /**\n     * @dev Contract Constructor\n     * @param _saleStartTime - The Start Time of the Token Sale\n     * @param _saleEndTime - The End Time of the Token Sale\n     * @param _increaseMaxContribTime - Time to increase Max Contribution of the Token Sale\n     * @param _minContribution - Minimum ETH contribution per contributor\n     * @param _maxContribution - Maximum ETH contribution per contributor\n     */\n    function CrowdsaleAuthorizer(\n        address _admin,\n        uint256 _saleStartTime,\n        uint256 _saleEndTime,\n        uint256 _increaseMaxContribTime,\n        uint256 _minContribution,\n        uint256 _maxContribution\n    )\n        validAddress(_admin)\n        public\n    {\n        require(_saleStartTime > now);\n        require(_saleEndTime > now);\n        require(_increaseMaxContribTime > now);\n        require(_saleStartTime < _saleEndTime);\n        require(_increaseMaxContribTime > _saleStartTime);\n        require(_maxContribution > 0);\n        require(_minContribution < _maxContribution);\n\n        admin = _admin;\n        saleStartTime = _saleStartTime;\n        saleEndTime = _saleEndTime;\n        increaseMaxContribTime = _increaseMaxContribTime;\n\n        minContribution = _minContribution;\n        maxContribution = _maxContribution;\n    }\n\n    event UpdateWhitelist(address _user, bool _allow, uint _time);\n\n    /**\n     * @dev Update Whitelist Address\n     * @param _user - Whitelist address\n     * @param _allow - eligibility\n     */\n    function updateWhitelist(address _user, bool _allow)\n        public\n        onlyAdmin\n    {\n        whitelistAddresses[_user] = _allow;\n        UpdateWhitelist(_user, _allow, now);\n    }\n\n    /**\n     * @dev Batch Update Whitelist Address\n     * @param _users - Array of Whitelist addresses\n     * @param _allows - Array of eligibilities\n     */\n    function updateWhitelists(address[] _users, bool[] _allows)\n        external\n        onlyAdmin\n    {\n        require(_users.length == _allows.length);\n        for (uint i = 0 ; i < _users.length ; i++) {\n            address _user = _users[i];\n            bool _allow = _allows[i];\n            whitelistAddresses[_user] = _allow;\n            UpdateWhitelist(_user, _allow, now);\n        }\n    }\n\n    /**\n     * @dev Get Eligible Amount\n     * @param _contributor - Contributor address\n     * @param _amount - Intended contribution amount\n     */\n    function eligibleAmount(address _contributor, uint256 _amount)\n        public\n        view\n        returns(uint256)\n    {\n        // If sales has not started or sale ended, there's no allocation\n        if (!saleStarted() || saleEnded()) {\n            return 0;\n        }\n\n        // Amount lesser than minimum contribution will be rejected\n        if (_amount < minContribution) {\n            return 0;\n        }\n\n        uint256 userMaxContribution = maxContribution;\n        // If sale has past 24hrs, increase max cap\n        if (now >= increaseMaxContribTime) {\n            userMaxContribution = maxContribution.mul(10);\n        }\n\n        // Calculate remaining contribution for the contributor\n        uint256 remainingCap = userMaxContribution.sub(participated[_contributor]);\n\n        // Return either the amount contributed or cap whichever is lower\n        return (remainingCap > _amount) ? _amount : remainingCap;\n    }\n\n    /**\n     * @dev Get if sale has started\n     */\n    function saleStarted() public view returns(bool) {\n        return now >= saleStartTime;\n    }\n\n    /**\n     * @dev Get if sale has ended\n     */\n    function saleEnded() public view returns(bool) {\n        return now > saleEndTime;\n    }\n\n    /**\n     * @dev Check for eligible amount and modify participation map\n     * @param _contributor - Contributor address\n     * @param _amount - Intended contribution amount\n     */\n    function eligibleAmountCheck(address _contributor, uint256 _amount)\n        internal\n        returns(uint256)\n    {\n        // Check if contributor is whitelisted\n        if (!whitelistAddresses[_contributor]) {\n            return 0;\n        }\n\n        uint256 result = eligibleAmount(_contributor, _amount);\n        participated[_contributor] = participated[_contributor].add(result);\n\n        return result;\n    }\n}\n\n// File: contracts/zeppelin/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: contracts/zeppelin/token/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts/zeppelin/token/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n// File: contracts/zeppelin/token/BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    require(_value <= balances[msg.sender]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    Burn(burner, _value);\n  }\n}\n\n// File: contracts/zeppelin/token/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/zeppelin/token/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/PolicyPalNetworkToken.sol\n\n/**\n * @title PolicyPalNetwork Token\n * @dev A standard ownable token\n */\ncontract PolicyPalNetworkToken is StandardToken, BurnableToken, Ownable {\n    /**\n    * @dev Token Contract Constants\n    */\n    string    public constant name     = \"PolicyPal Network Token\";\n    string    public constant symbol   = \"PAL\";\n    uint8     public constant decimals = 18;\n\n    /**\n    * @dev Token Contract Public Variables\n    */\n    address public  tokenSaleContract;\n    bool    public  isTokenTransferable = false;\n\n\n    /**\n    * @dev   Token Contract Modifier\n    *\n    * Check if a transfer is allowed\n    * Transfers are restricted to token creator & owner(admin) during token sale duration\n    * Transfers after token sale is limited by `isTokenTransferable` toggle\n    *\n    */\n    modifier onlyWhenTransferAllowed() {\n        require(isTokenTransferable || msg.sender == owner || msg.sender == tokenSaleContract);\n        _;\n    }\n\n    /**\n     * @dev Token Contract Modifier\n     * @param _to - Address to check if valid\n     *\n     *  Check if an address is valid\n     *  A valid address is as follows,\n     *    1. Not zero address\n     *    2. Not token address\n     *\n     */\n    modifier isValidDestination(address _to) {\n        require(_to != address(0x0));\n        require(_to != address(this));\n        _;\n    }\n\n    /**\n     * @dev Enable Transfers (Only Owner)\n     */\n    function toggleTransferable(bool _toggle) external\n        onlyOwner\n    {\n        isTokenTransferable = _toggle;\n    }\n    \n\n    /**\n    * @dev Token Contract Constructor\n    * @param _adminAddr - Address of the Admin\n    */\n    function PolicyPalNetworkToken(\n        uint _tokenTotalAmount,\n        address _adminAddr\n    ) \n        public\n        isValidDestination(_adminAddr)\n    {\n        require(_tokenTotalAmount > 0);\n\n        totalSupply_ = _tokenTotalAmount;\n\n        // Mint all token\n        balances[msg.sender] = _tokenTotalAmount;\n        Transfer(address(0x0), msg.sender, _tokenTotalAmount);\n\n        // Assign token sale contract to creator\n        tokenSaleContract = msg.sender;\n\n        // Transfer contract ownership to admin\n        transferOwnership(_adminAddr);\n    }\n\n    /**\n    * @dev Token Contract transfer\n    * @param _to - Address to transfer to\n    * @param _value - Value to transfer\n    * @return bool - Result of transfer\n    * \"Overloaded\" Function of ERC20Basic's transfer\n    *\n    */\n    function transfer(address _to, uint256 _value) public\n        onlyWhenTransferAllowed\n        isValidDestination(_to)\n        returns (bool)\n    {\n        return super.transfer(_to, _value);\n    }\n\n    /**\n    * @dev Token Contract transferFrom\n    * @param _from - Address to transfer from\n    * @param _to - Address to transfer to\n    * @param _value - Value to transfer\n    * @return bool - Result of transferFrom\n    *\n    * \"Overloaded\" Function of ERC20's transferFrom\n    * Added with modifiers,\n    *    1. onlyWhenTransferAllowed\n    *    2. isValidDestination\n    *\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public\n        onlyWhenTransferAllowed\n        isValidDestination(_to)\n        returns (bool)\n    {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n    * @dev Token Contract burn\n    * @param _value - Value to burn\n    * \"Overloaded\" Function of BurnableToken's burn\n    */\n    function burn(uint256 _value)\n        public\n    {\n        super.burn(_value);\n        Transfer(msg.sender, address(0x0), _value);\n    }\n\n    /**\n    * @dev Token Contract Emergency Drain\n    * @param _token - Token to drain\n    * @param _amount - Amount to drain\n    */\n    function emergencyERC20Drain(ERC20 _token, uint256 _amount) public\n        onlyOwner\n    {\n        _token.transfer(owner, _amount);\n    }\n}\n\n// File: contracts/PolicyPalNetworkCrowdsale.sol\n\n/**\n * @title PPN Crowdsale\n * @dev Crowd Sale Contract\n */\ncontract PolicyPalNetworkCrowdsale is CrowdsaleAuthorizer {\n    /**\n    * @dev Token Crowd Sale Contract Public Variables\n    */\n    address                 public multiSigWallet;\n    PolicyPalNetworkToken   public token;\n    uint256                 public raisedWei;\n    bool                    public haltSale;\n    uint                    public rate;\n\n    /**\n    * @dev Modifier for valid sale\n    */\n    modifier validSale() {\n      require(!haltSale);\n      require(saleStarted());\n      require(!saleEnded());\n      _;\n    }\n\n    /**\n     * @dev Buy Event\n     */\n    event Buy(address _buyer, uint256 _tokens, uint256 _payedWei);\n\n    /**\n     * @dev Token Crowd Sale Contract Constructor\n     * @param _admin - Address of the Admin\n     * @param _multiSigWallet - Address of Multisig wallet\n     * @param _totalTokenSupply - Total Token Supply\n     * @param _premintedTokenSupply - Total preminted token supply\n     * @param _saleStartTime - The Start Time of the Token Sale\n     * @param _saleEndTime - The End Time of the Token Sale\n     * @param _increaseMaxContribTime - Time to increase max contribution\n     * @param _rate - Rate of ETH to PAL\n     * @param _minContribution - Minimum ETH contribution per contributor\n     * @param _maxContribution - Maximum ETH contribution per contributor\n     */\n    function PolicyPalNetworkCrowdsale(\n        address _admin,\n        address _multiSigWallet,\n        uint256 _totalTokenSupply,\n        uint256 _premintedTokenSupply,\n        uint256 _presaleTokenSupply,\n        uint256 _saleStartTime,\n        uint256 _saleEndTime,\n        uint256 _increaseMaxContribTime,\n        uint    _rate,\n        uint256 _minContribution,\n        uint256 _maxContribution\n    )\n    CrowdsaleAuthorizer(\n        _admin,\n        _saleStartTime,\n        _saleEndTime,\n        _increaseMaxContribTime,\n        _minContribution,\n        _maxContribution\n    )\n        validAddress(_multiSigWallet)\n        public\n    {\n        require(_totalTokenSupply > 0);\n        require(_premintedTokenSupply > 0);\n        require(_presaleTokenSupply > 0);\n        require(_rate > 0);\n        \n        require(_premintedTokenSupply < _totalTokenSupply);\n        require(_presaleTokenSupply < _totalTokenSupply);\n\n        multiSigWallet = _multiSigWallet;\n        rate = _rate;\n\n        token = new PolicyPalNetworkToken(\n            _totalTokenSupply,\n            _admin\n        );\n\n        // transfer preminted tokens to company wallet\n        token.transfer(multiSigWallet, _premintedTokenSupply);\n        // transfer presale tokens to admin\n        token.transfer(_admin, _presaleTokenSupply);\n    }\n\n    /**\n     * @dev Token Crowd Sale Contract Halter\n     * @param _halt - Flag to halt sale\n     */\n    function setHaltSale(bool _halt)\n        onlyAdmin\n        public\n    {\n        haltSale = _halt;\n    }\n\n    /**\n     * @dev Token Crowd Sale payable\n     */\n    function() public payable {\n        buy(msg.sender);\n    }\n\n    /**\n     * @dev Token Crowd Sale Buy\n     * @param _recipient - Address of the recipient\n     */\n    function buy(address _recipient) public payable\n        validSale\n        validAddress(_recipient)\n        returns(uint256)\n    {\n        // Get the contributor's eligible amount\n        uint256 weiContributionAllowed = eligibleAmountCheck(_recipient, msg.value);\n        require(weiContributionAllowed > 0);\n\n        // Get tokens remaining for sale\n        uint256 tokensRemaining = token.balanceOf(address(this));\n        require(tokensRemaining > 0);\n\n        // Get tokens that the contributor will receive\n        uint256 receivedTokens = weiContributionAllowed.mul(rate);\n\n        // Check remaining tokens\n        // If lesser, update tokens to be transfer and contribution allowed\n        if (receivedTokens > tokensRemaining) {\n            receivedTokens = tokensRemaining;\n            weiContributionAllowed = tokensRemaining.div(rate);\n        }\n\n        // Transfer tokens to contributor\n        assert(token.transfer(_recipient, receivedTokens));\n\n        // Send ETH payment to MultiSig Wallet\n        sendETHToMultiSig(weiContributionAllowed);\n        raisedWei = raisedWei.add(weiContributionAllowed);\n\n        // Check weiContributionAllowed is larger than value sent\n        // If larger, transfer the excess back to the contributor\n        if (msg.value > weiContributionAllowed) {\n            msg.sender.transfer(msg.value.sub(weiContributionAllowed));\n        }\n\n        // Broadcast event\n        Buy(_recipient, receivedTokens, weiContributionAllowed);\n\n        return weiContributionAllowed;\n    }\n\n    /**\n     * @dev Token Crowd Sale Emergency Drain\n     *      In case something went wrong and ETH is stuck in contract\n     * @param _anyToken - Token to drain\n     */\n    function emergencyDrain(ERC20 _anyToken) public\n        onlyAdmin\n        returns(bool)\n    {\n        if (this.balance > 0) {\n            sendETHToMultiSig(this.balance);\n        }\n        if (_anyToken != address(0x0)) {\n            assert(_anyToken.transfer(multiSigWallet, _anyToken.balanceOf(this)));\n        }\n        return true;\n    }\n\n    /**\n     * @dev Token Crowd Sale\n     *      Transfer ETH to MultiSig Wallet\n     * @param _value - Value of ETH to send\n     */\n    function sendETHToMultiSig(uint256 _value) internal {\n        multiSigWallet.transfer(_value);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTokenTransferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toggle\",\"type\":\"bool\"}],\"name\":\"toggleTransferable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenTotalAmount\",\"type\":\"uint256\"},{\"name\":\"_adminAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526004805460a060020a60ff0219169055341561001f57600080fd5b604051604080610f29833981016040528080519190602001805160038054600160a060020a03191633600160a060020a03908116919091179091559092508291508116151561006d57600080fd5b30600160a060020a031681600160a060020a03161415151561008e57600080fd5b6000831161009b57600080fd5b6001839055600160a060020a0333166000818152602081905260408082208690557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a360048054600160a060020a03191633600160a060020a03161790556101208264010000000061012881026109291704565b5050506101b6565b60035433600160a060020a0390811691161461014357600080fd5b600160a060020a038116151561015857600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360038054600160a060020a031916600160a060020a0392909216919091179055565b610d64806101c56000396000f3006060604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610100578063095ea7b31461018a57806318160ddd146101c057806323b872dd146101e5578063313ce5671461020d57806342966c68146102365780635d5aa2771461024e578063661884631461027d57806370a082311461029f5780638da5cb5b146102be578063958222aa146102d157806395d89b41146102e4578063a9059cbb146102f7578063d73dd62314610319578063d9194d2c1461033b578063db0e16f114610353578063dd62ed3e14610375578063f2fde38b1461039a575b600080fd5b341561010b57600080fd5b6101136103b9565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561014f578082015183820152602001610137565b50505050905090810190601f16801561017c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019557600080fd5b6101ac600160a060020a03600435166024356103f0565b604051901515815260200160405180910390f35b34156101cb57600080fd5b6101d361045c565b60405190815260200160405180910390f35b34156101f057600080fd5b6101ac600160a060020a0360043581169060243516604435610462565b341561021857600080fd5b6102206104fa565b60405160ff909116815260200160405180910390f35b341561024157600080fd5b61024c6004356104ff565b005b341561025957600080fd5b61026161054a565b604051600160a060020a03909116815260200160405180910390f35b341561028857600080fd5b6101ac600160a060020a0360043516602435610559565b34156102aa57600080fd5b6101d3600160a060020a0360043516610653565b34156102c957600080fd5b61026161066e565b34156102dc57600080fd5b6101ac61067d565b34156102ef57600080fd5b61011361068d565b341561030257600080fd5b6101ac600160a060020a03600435166024356106c4565b341561032457600080fd5b6101ac600160a060020a036004351660243561075a565b341561034657600080fd5b61024c60043515156107fe565b341561035e57600080fd5b61024c600160a060020a0360043516602435610848565b341561038057600080fd5b6101d3600160a060020a03600435811690602435166108fe565b34156103a557600080fd5b61024c600160a060020a0360043516610929565b60408051908101604052601781527f506f6c69637950616c204e6574776f726b20546f6b656e000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60015490565b60045460009060a060020a900460ff168061048b575060035433600160a060020a039081169116145b806104a4575060045433600160a060020a039081169116145b15156104af57600080fd5b82600160a060020a03811615156104c557600080fd5b30600160a060020a031681600160a060020a0316141515156104e657600080fd5b6104f18585856109c4565b95945050505050565b601281565b61050881610b44565b600033600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a350565b600454600160a060020a031681565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156105b657600160a060020a0333811660009081526002602090815260408083209388168352929052908120556105ed565b6105c6818463ffffffff610bfe16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a031681565b60045460a060020a900460ff1681565b60408051908101604052600381527f50414c0000000000000000000000000000000000000000000000000000000000602082015281565b60045460009060a060020a900460ff16806106ed575060035433600160a060020a039081169116145b80610706575060045433600160a060020a039081169116145b151561071157600080fd5b82600160a060020a038116151561072757600080fd5b30600160a060020a031681600160a060020a03161415151561074857600080fd5b6107528484610c10565b949350505050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610792908363ffffffff610d2216565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b60035433600160a060020a0390811691161461081957600080fd5b6004805491151560a060020a0274ff000000000000000000000000000000000000000019909216919091179055565b60035433600160a060020a0390811691161461086357600080fd5b600354600160a060020a038084169163a9059cbb9116836000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156108df57600080fd5b6102c65a03f115156108f057600080fd5b505050604051805150505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a0390811691161461094457600080fd5b600160a060020a038116151561095957600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a03831615156109db57600080fd5b600160a060020a038416600090815260208190526040902054821115610a0057600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115610a3357600080fd5b600160a060020a038416600090815260208190526040902054610a5c908363ffffffff610bfe16565b600160a060020a038086166000908152602081905260408082209390935590851681522054610a91908363ffffffff610d2216565b600160a060020a0380851660009081526020818152604080832094909455878316825260028152838220339093168252919091522054610ad7908363ffffffff610bfe16565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b600160a060020a033316600090815260208190526040812054821115610b6957600080fd5b5033600160a060020a038116600090815260208190526040902054610b8e9083610bfe565b600160a060020a038216600090815260208190526040902055600154610bba908363ffffffff610bfe16565b600155600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b600082821115610c0a57fe5b50900390565b6000600160a060020a0383161515610c2757600080fd5b600160a060020a033316600090815260208190526040902054821115610c4c57600080fd5b600160a060020a033316600090815260208190526040902054610c75908363ffffffff610bfe16565b600160a060020a033381166000908152602081905260408082209390935590851681522054610caa908363ffffffff610d2216565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b600082820183811015610d3157fe5b93925050505600a165627a7a72305820daab06a27c07f3b95c6372d46ccef2a67d1e9d5b870c188a6d226db9cb5d1b6800290000000000000000000000000000000000000000033b2e3c9fd0803ce800000000000000000000000000000095343e65c188952ad41a56869b7cb6d89df8dd25",
  "constructorArguments": "0000000000000000000000000000000000000000033b2e3c9fd0803ce800000000000000000000000000000095343e65c188952ad41a56869b7cb6d89df8dd25"
}