{
  "address": "0x4b521ead25dc82b6d7efaf9904b455b29a5e1b2b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "IDGO: KINWA Token",
  "contractName": "kinwa",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-23\n*/\n\npragma solidity ^0.4.19;\n\ncontract Ownable {\n  address public owner;\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));      \n    owner = newOwner;\n  }\n\n}\n\nlibrary AddressUtils {\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    assembly { size := extcodesize(addr) }\n    return size > 0;\n  }\n}\n\ninterface ERC165ReceiverInterface {\n  function tokensReceived(address _from, address _to, uint _amount, bytes _data) external returns (bool);\n}\n\ncontract supportERC165Basic {\n\tbytes4 constant InvalidID = 0xffffffff;\n  bytes4 constant ERC165ID = 0x01ffc9a7;\n\t\n\tfunction transfer_erc165(address to, uint256 value, bytes _data) public returns (bool);\n\n  function doesContractImplementInterface(address _contract, bytes4 _interfaceId) internal view returns (bool) {\n      uint256 success;\n      uint256 result;\n\n      (success, result) = noThrowCall(_contract, ERC165ID);\n      if ((success==0)||(result==0)) {\n          return false;\n      }\n  \n      (success, result) = noThrowCall(_contract, InvalidID);\n      if ((success==0)||(result!=0)) {\n          return false;\n      }\n\n      (success, result) = noThrowCall(_contract, _interfaceId);\n      if ((success==1)&&(result==1)) {\n          return true;\n      }\n      return false;\n  }\n\n  function noThrowCall(address _contract, bytes4 _interfaceId) constant internal returns (uint256 success, uint256 result) {\n      bytes4 erc165ID = ERC165ID;\n\n      assembly {\n              let x := mload(0x40)               // Find empty storage location using \"free memory pointer\"\n              mstore(x, erc165ID)                // Place signature at begining of empty storage\n              mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\n\n              success := staticcall(\n                                  30000,         // 30k gas\n                                  _contract,     // To addr\n                                  x,             // Inputs are stored at location x\n                                  0x20,          // Inputs are 32 bytes long\n                                  x,             // Store output over input (saves space)\n                                  0x20)          // Outputs are 32 bytes long\n\n              result := mload(x)                 // Load the result\n      }\n  }\t\n}\n\n\ncontract ERC20Basic is supportERC165Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n\t\n    /** Support ERC165 */\n    if (_to.isContract()) {\n      ERC165ReceiverInterface i;\n      if(doesContractImplementInterface(_to, i.tokensReceived.selector)) {\n        ERC165ReceiverInterface app= ERC165ReceiverInterface(_to);\n        app.tokensReceived(msg.sender, _to, _value, \"\");\n      }\n\t  }\n    return true;\n  }\n  \n  /**\n  * transfer with ERC165 interface\n  **/\n  function transfer_erc165(address _to, uint256 _value, bytes _data) public returns (bool) {\n    //transfer(_to, _value);\n\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n      \n    // Support ERC165\n    //don't need to check??\n    if (!_to.isContract()) revert();\n    \n    ERC165ReceiverInterface i;\n    if(!doesContractImplementInterface(_to, i.tokensReceived.selector)) revert(); \n    ERC165ReceiverInterface app= ERC165ReceiverInterface(_to);\n    app.tokensReceived(msg.sender, _to, _value, _data);\n    \n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract kinwa is StandardToken, Ownable {\n  string public name = \"KINWA Token\";\n  string public symbol = \"KINWA\";\n  uint public decimals = 8;\n    \n  function kinwa() public {\n    owner = msg.sender;\n\t\n    totalSupply_= 100 * 10 ** (8+9);  //100 Billion\n\t  balances[owner] = totalSupply_;\n\t\n\t  Transfer(address(0), owner, totalSupply_);\n  }\n\n}",
  "bytecode": ""
}