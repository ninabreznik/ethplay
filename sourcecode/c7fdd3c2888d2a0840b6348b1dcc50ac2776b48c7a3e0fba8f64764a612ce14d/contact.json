{
  "address": "0xc7029ed9eba97a096e72607f4340c34049c7af48",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Fomo3D: Contract 3",
  "contractName": "Divies",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "50",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-06\n*/\n\npragma solidity ^0.4.24;\n/** title -Divies- v0.7.1\n * ┌┬┐┌─┐┌─┐┌┬┐   ╦╦ ╦╔═╗╔╦╗  ┌─┐┬─┐┌─┐┌─┐┌─┐┌┐┌┌┬┐┌─┐\n *  │ ├┤ ├─┤│││   ║║ ║╚═╗ ║   ├─┘├┬┘├┤ └─┐├┤ │││ │ └─┐\n *  ┴ └─┘┴ ┴┴ ┴  ╚╝╚═╝╚═╝ ╩   ┴  ┴└─└─┘└─┘└─┘┘└┘ ┴ └─┘\n *                                  _____                      _____\n *                                 (, /     /)       /) /)    (, /      /)          /)\n *          ┌─┐                      /   _ (/_      // //       /  _   // _   __  _(/\n *          ├─┤                  ___/___(/_/(__(_/_(/_(/_   ___/__/_)_(/_(_(_/ (_(_(_\n *          ┴ ┴                /   /          .-/ _____   (__ /                               \n *                            (__ /          (_/ (, /                                      /)™ \n *                                                 /  __  __ __ __  _   __ __  _  _/_ _  _(/\n * ┌─┐┬─┐┌─┐┌┬┐┬ ┬┌─┐┌┬┐                          /__/ (_(__(_)/ (_/_)_(_)/ (_(_(_(__(/_(_(_\n * ├─┘├┬┘│ │ │││ ││   │                      (__ /              .-/  © Jekyll Island Inc. 2018\n * ┴  ┴└─└─┘─┴┘└─┘└─┘ ┴                                        (_/\n *          ______      .-./`)  ,---.  ,---. .-./`)      .-''-.      .-'''-.   .---.  \n *=========|    _ `''.  \\ .-.') |   /  |   | \\ .-.')   .'_ _   \\    / _     \\  \\   /=========*\n *         | _ | ) _  \\ / `-' \\ |  |   |  .' / `-' \\  / ( ` )   '  (`' )/`--'  |   |  \n *         |( ''_'  ) |  `-'`\"` |  | _ |  |   `-'`\"` . (_ o _)  | (_ o _).      \\ /   \n *         | . (_) `. |  .---.  |  _( )_  |   .---.  |  (_,_)___|  (_,_). '.     v    \n *         |(_    ._) '  |   |  \\ (_ o._) /   |   |  '  \\   .---. .---.  \\  :   _ _   \n *         |  (_.\\.' /   |   |   \\ (_,_) /    |   |   \\  `-'    / \\    `-'  |  (_I_)  \n *=========|       .'    |   |    \\     /     |   |    \\       /   \\       /  (_(=)_)========* \n *         '-----'`      '---'     `---`      '---'     `'-..-'     `-...-'    (_I_)  \n * ╔═╗┌─┐┌┐┌┌┬┐┬─┐┌─┐┌─┐┌┬┐  ╔═╗┌─┐┌┬┐┌─┐ ┌──────────┐\n * ║  │ ││││ │ ├┬┘├─┤│   │   ║  │ │ ││├┤  │ Inventor │\n * ╚═╝└─┘┘└┘ ┴ ┴└─┴ ┴└─┘ ┴   ╚═╝└─┘─┴┘└─┘ └──────────┘\n *         ┌──────────────────────────────────────────────────────────────────────┐\n *         │ Divies!, is a contract that adds an external dividend system to P3D. │\n *         │ All eth sent to this contract, can be distributed to P3D holders.    │\n *         │ Uses msg.sender as masternode for initial buy order.                 │\n *         └──────────────────────────────────────────────────────────────────────┘\n *                                ┌────────────────────┐\n *                                │ Setup Instructions │\n *                                └────────────────────┘\n * (Step 1) import this contracts interface into your contract\n * \n *    import \"./DiviesInterface.sol\";\n * \n * (Step 2) set up the interface and point it to this contract\n * \n *    DiviesInterface private Divies = DiviesInterface(0xc7029Ed9EBa97A096e72607f4340c34049C7AF48);\n *                                ┌────────────────────┐\n *                                │ Usage Instructions │\n *                                └────────────────────┘\n * call as follows anywhere in your code:\n *   \n *    Divies.deposit.value(amount)();\n *          ex:  Divies.deposit.value(232000000000000000000)();\n */\n\ninterface HourglassInterface {\n    function() payable external;\n    function buy(address _playerAddress) payable external returns(uint256);\n    function sell(uint256 _amountOfTokens) external;\n    function reinvest() external;\n    function withdraw() external;\n    function exit() external;\n    function dividendsOf(address _playerAddress) external view returns(uint256);\n    function balanceOf(address _playerAddress) external view returns(uint256);\n    function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);\n    function stakingRequirement() external view returns(uint256);\n}\n\ncontract Divies {\n    using SafeMath for uint256;\n    using UintCompressor for uint256;\n\n    HourglassInterface constant P3Dcontract_ = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\n    \n    uint256 public pusherTracker_ = 100;\n    mapping (address => Pusher) public pushers_;\n    struct Pusher\n    {\n        uint256 tracker;\n        uint256 time;\n    }\n    uint256 public rateLimiter_;\n    \n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    // MODIFIERS\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n        \n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        _;\n    }\n    \n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    // BALANCE\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    function balances()\n        public\n        view\n        returns(uint256)\n    {\n        return (address(this).balance);\n    }\n    \n    \n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    // DEPOSIT\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    function deposit()\n        external\n        payable\n    {\n        \n    }\n    \n    // used so the distribute function can call hourglass's withdraw\n    function() external payable {}\n    \n    \n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    // EVENTS\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    event onDistribute(\n        address pusher,\n        uint256 startingBalance,\n        uint256 masternodePayout,\n        uint256 finalBalance,\n        uint256 compressedData\n    );\n    /* compression key\n    [0-14] - timestamp\n    [15-29] - caller pusher tracker \n    [30-44] - global pusher tracker \n    [45-46] - percent\n    [47] - greedy\n    */  \n    \n    \n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    // DISTRIBUTE\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    function distribute(uint256 _percent)\n        public\n        isHuman()\n    {\n        // make sure _percent is within boundaries\n        require(_percent > 0 && _percent < 100, \"please pick a percent between 1 and 99\");\n        \n        // data setup\n        address _pusher = msg.sender;\n        uint256 _bal = address(this).balance;\n        uint256 _mnPayout;\n        uint256 _compressedData;\n        \n        // limit pushers greed (use \"if\" instead of require for level 42 top kek)\n        if (\n            pushers_[_pusher].tracker <= pusherTracker_.sub(100) && // pusher is greedy: wait your turn\n            pushers_[_pusher].time.add(1 hours) < now               // pusher is greedy: its not even been 1 hour\n        )\n        {\n            // update pushers wait que \n            pushers_[_pusher].tracker = pusherTracker_;\n            pusherTracker_++;\n            \n            // setup mn payout for event\n            if (P3Dcontract_.balanceOf(_pusher) >= P3Dcontract_.stakingRequirement())\n                _mnPayout = (_bal / 10) / 3;\n            \n            // setup _stop.  this will be used to tell the loop to stop\n            uint256 _stop = (_bal.mul(100 - _percent)) / 100;\n            \n            // buy & sell    \n            P3Dcontract_.buy.value(_bal)(_pusher);\n            P3Dcontract_.sell(P3Dcontract_.balanceOf(address(this)));\n            \n            // setup tracker.  this will be used to tell the loop to stop\n            uint256 _tracker = P3Dcontract_.dividendsOf(address(this));\n    \n            // reinvest/sell loop\n            while (_tracker >= _stop) \n            {\n                // lets burn some tokens to distribute dividends to p3d holders\n                P3Dcontract_.reinvest();\n                P3Dcontract_.sell(P3Dcontract_.balanceOf(address(this)));\n                \n                // update our tracker with estimates (yea. not perfect, but cheaper on gas)\n                _tracker = (_tracker.mul(81)) / 100;\n            }\n            \n            // withdraw\n            P3Dcontract_.withdraw();\n        } else {\n            _compressedData = _compressedData.insert(1, 47, 47);\n        }\n        \n        // update pushers timestamp  (do outside of \"if\" for super saiyan level top kek)\n        pushers_[_pusher].time = now;\n    \n        // prep event compression data \n        _compressedData = _compressedData.insert(now, 0, 14);\n        _compressedData = _compressedData.insert(pushers_[_pusher].tracker, 15, 29);\n        _compressedData = _compressedData.insert(pusherTracker_, 30, 44);\n        _compressedData = _compressedData.insert(_percent, 45, 46);\n            \n        // fire event\n        emit onDistribute(_pusher, _bal, _mnPayout, address(this).balance, _compressedData);\n    }\n}\n\n/**\n* @title -UintCompressor- v0.1.9\n* ┌┬┐┌─┐┌─┐┌┬┐   ╦╦ ╦╔═╗╔╦╗  ┌─┐┬─┐┌─┐┌─┐┌─┐┌┐┌┌┬┐┌─┐\n*  │ ├┤ ├─┤│││   ║║ ║╚═╗ ║   ├─┘├┬┘├┤ └─┐├┤ │││ │ └─┐\n*  ┴ └─┘┴ ┴┴ ┴  ╚╝╚═╝╚═╝ ╩   ┴  ┴└─└─┘└─┘└─┘┘└┘ ┴ └─┘\n*                                  _____                      _____\n*                                 (, /     /)       /) /)    (, /      /)          /)\n*          ┌─┐                      /   _ (/_      // //       /  _   // _   __  _(/\n*          ├─┤                  ___/___(/_/(__(_/_(/_(/_   ___/__/_)_(/_(_(_/ (_(_(_\n*          ┴ ┴                /   /          .-/ _____   (__ /                               \n*                            (__ /          (_/ (, /                                      /)™ \n*                                                 /  __  __ __ __  _   __ __  _  _/_ _  _(/\n* ┌─┐┬─┐┌─┐┌┬┐┬ ┬┌─┐┌┬┐                          /__/ (_(__(_)/ (_/_)_(_)/ (_(_(_(__(/_(_(_\n* ├─┘├┬┘│ │ │││ ││   │                      (__ /              .-/  © Jekyll Island Inc. 2018\n* ┴  ┴└─└─┘─┴┘└─┘└─┘ ┴                                        (_/\n*    _  _   __   __ _  ____     ___   __   _  _  ____  ____  ____  ____  ____   __   ____ \n*===/ )( \\ (  ) (  ( \\(_  _)===/ __) /  \\ ( \\/ )(  _ \\(  _ \\(  __)/ ___)/ ___) /  \\ (  _ \\===*\n*   ) \\/ (  )(  /    /  )(    ( (__ (  O )/ \\/ \\ ) __/ )   / ) _) \\___ \\\\___ \\(  O ) )   /\n*===\\____/ (__) \\_)__) (__)====\\___) \\__/ \\_)(_/(__)  (__\\_)(____)(____/(____/ \\__/ (__\\_)===*\n*\n* ╔═╗┌─┐┌┐┌┌┬┐┬─┐┌─┐┌─┐┌┬┐  ╔═╗┌─┐┌┬┐┌─┐ ┌──────────┐\n* ║  │ ││││ │ ├┬┘├─┤│   │   ║  │ │ ││├┤  │ Inventor │\n* ╚═╝└─┘┘└┘ ┴ ┴└─┴ ┴└─┘ ┴   ╚═╝└─┘─┴┘└─┘ └──────────┘\n*/\n\nlibrary UintCompressor {\n    using SafeMath for *;\n    \n    function insert(uint256 _var, uint256 _include, uint256 _start, uint256 _end)\n        internal\n        pure\n        returns(uint256)\n    {\n        // check conditions \n        require(_end < 77 && _start < 77, \"start/end must be less than 77\");\n        require(_end >= _start, \"end must be >= start\");\n        \n        // format our start/end points\n        _end = exponent(_end).mul(10);\n        _start = exponent(_start);\n        \n        // check that the include data fits into its segment \n        require(_include < (_end / _start));\n        \n        // build middle\n        if (_include > 0)\n            _include = _include.mul(_start);\n        \n        return((_var.sub((_var / _start).mul(_start))).add(_include).add((_var / _end).mul(_end)));\n    }\n    \n    function extract(uint256 _input, uint256 _start, uint256 _end)\n\t    internal\n\t    pure\n\t    returns(uint256)\n    {\n        // check conditions\n        require(_end < 77 && _start < 77, \"start/end must be less than 77\");\n        require(_end >= _start, \"end must be >= start\");\n        \n        // format our start/end points\n        _end = exponent(_end).mul(10);\n        _start = exponent(_start);\n        \n        // return requested section\n        return((((_input / _start).mul(_start)).sub((_input / _end).mul(_end))) / _start);\n    }\n    \n    function exponent(uint256 _position)\n        private\n        pure\n        returns(uint256)\n    {\n        return((10).pwr(_position));\n    }\n}\n\n/**\n * @title SafeMath v0.1.9\n * @dev Math operations with safety checks that throw on error\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\n * - added sqrt\n * - added sq\n * - added pwr \n * - changed asserts to requires with error log outputs\n * - removed div, its useless\n */\nlibrary SafeMath {\n    \n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) \n        internal \n        pure \n        returns (uint256 c) \n    {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"SafeMath mul failed\");\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256) \n    {\n        require(b <= a, \"SafeMath sub failed\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c) \n    {\n        c = a + b;\n        require(c >= a, \"SafeMath add failed\");\n        return c;\n    }\n    \n    /**\n     * @dev gives square root of given x.\n     */\n    function sqrt(uint256 x)\n        internal\n        pure\n        returns (uint256 y) \n    {\n        uint256 z = ((add(x,1)) / 2);\n        y = x;\n        while (z < y) \n        {\n            y = z;\n            z = ((add((x / z),z)) / 2);\n        }\n    }\n    \n    /**\n     * @dev gives square. multiplies x by x\n     */\n    function sq(uint256 x)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (mul(x,x));\n    }\n    \n    /**\n     * @dev x to the power of y \n     */\n    function pwr(uint256 x, uint256 y)\n        internal \n        pure \n        returns (uint256)\n    {\n        if (x==0)\n            return (0);\n        else if (y==0)\n            return (1);\n        else \n        {\n            uint256 z = x;\n            for (uint256 i=1; i < y; i++)\n                z = mul(z,x);\n            return (z);\n        }\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pushers_\",\"outputs\":[{\"name\":\"tracker\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pusherTracker_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateLimiter_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pusher\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"startingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"masternodePayout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"finalBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"compressedData\",\"type\":\"uint256\"}],\"name\":\"onDistribute\",\"type\":\"event\"}]",
  "bytecode": "6080604052606460005534801561001557600080fd5b50610c0f806100256000396000f30060806040526004361061005e5763ffffffff60e060020a6000350416631f75c3908114610060578063521ceba71461009a5780637bb98a68146100c157806391c05b0b146100d6578063b519cf31146100ee578063d0e30db014610103575b005b34801561006c57600080fd5b50610081600160a060020a036004351661010b565b6040805192835260208301919091528051918290030190f35b3480156100a657600080fd5b506100af610124565b60408051918252519081900360200190f35b3480156100cd57600080fd5b506100af61012a565b3480156100e257600080fd5b5061005e60043561012f565b3480156100fa57600080fd5b506100af6108ad565b61005e6108b3565b6001602081905260009182526040909120805491015482565b60005481565b303190565b6000808080808033803b801561018f576040805160e560020a62461bcd02815260206004820152601160248201527f736f7272792068756d616e73206f6e6c79000000000000000000000000000000604482015290519081900360640190fd5b60008911801561019f5750606489105b151561021b576040805160e560020a62461bcd02815260206004820152602660248201527f706c65617365207069636b20612070657263656e74206265747765656e20312060448201527f616e642039390000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000543398503031975061023690606463ffffffff6108b516565b600160a060020a0389166000908152600160205260409020541180159061028b5750600160a060020a03881660009081526001602081905260409091200154429061028990610e1063ffffffff61091a16565b105b1561079a5760008054600160a060020a038a168252600160208181526040808520849055919092018355805160e360020a630ada733d0281529051600080516020610bc4833981519152936356d399e893600480850194919392918390030190829087803b1580156102fc57600080fd5b505af1158015610310573d6000803e3d6000fd5b505050506040513d602081101561032657600080fd5b50516040805160e060020a6370a08231028152600160a060020a038b1660048201529051600080516020610bc4833981519152916370a082319160248083019260209291908290030181600087803b15801561038157600080fd5b505af1158015610395573d6000803e3d6000fd5b505050506040513d60208110156103ab57600080fd5b5051106103bc576003600a88040495505b60646103d0888b830363ffffffff61097516565b8115156103d957fe5b049350600080516020610bc4833981519152600160a060020a031663f088d547888a6040518363ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a031681526020019150506020604051808303818588803b15801561044557600080fd5b505af1158015610459573d6000803e3d6000fd5b50505050506040513d602081101561047057600080fd5b50506040805160e060020a6370a082310281523060048201529051600080516020610bc48339815191529163e4849b329183916370a082319160248083019260209291908290030181600087803b1580156104ca57600080fd5b505af11580156104de573d6000803e3d6000fd5b505050506040513d60208110156104f457600080fd5b50516040805160e060020a63ffffffff8516028152600481019290925251602480830192600092919082900301818387803b15801561053257600080fd5b505af1158015610546573d6000803e3d6000fd5b50506040805160e060020a6265318b0281523060048201529051600080516020610bc483398151915293506265318b925060248083019260209291908290030181600087803b15801561059857600080fd5b505af11580156105ac573d6000803e3d6000fd5b505050506040513d60208110156105c257600080fd5b505192505b83831061073157600080516020610bc4833981519152600160a060020a031663fdb5a03e6040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561061a57600080fd5b505af115801561062e573d6000803e3d6000fd5b50506040805160e060020a6370a082310281523060048201529051600080516020610bc4833981519152935063e4849b32925083916370a082319160248083019260209291908290030181600087803b15801561068a57600080fd5b505af115801561069e573d6000803e3d6000fd5b505050506040513d60208110156106b457600080fd5b50516040805160e060020a63ffffffff8516028152600481019290925251602480830192600092919082900301818387803b1580156106f257600080fd5b505af1158015610706573d6000803e3d6000fd5b50505050606461072060518561097590919063ffffffff16565b81151561072957fe5b0492506105c7565b600080516020610bc4833981519152600160a060020a0316633ccfd60b6040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561077d57600080fd5b505af1158015610791573d6000803e3d6000fd5b505050506107b1565b6107ae856001602f8063ffffffff6109ec16565b94505b600160a060020a038816600090815260016020819052604082204291018190556107e591879190600e63ffffffff6109ec16565b600160a060020a038916600090815260016020526040902054909550610816908690600f601d63ffffffff6109ec16565b600054909550610831908690601e602c63ffffffff6109ec16565b9450610847858a602d602e63ffffffff6109ec16565b60408051600160a060020a038b168152602081018a9052808201899052303160608201526080810183905290519196507fa0e5739b8aab1e9b0469db4a982bc2211bdf4b0ed8b8aebe2e0d89d10057657d919081900360a00190a1505050505050505050565b60025481565b565b60008282111561090f576040805160e560020a62461bcd02815260206004820152601360248201527f536166654d61746820737562206661696c656400000000000000000000000000604482015290519081900360640190fd5b508082035b92915050565b81810182811015610914576040805160e560020a62461bcd02815260206004820152601360248201527f536166654d61746820616464206661696c656400000000000000000000000000604482015290519081900360640190fd5b600082151561098657506000610914565b5081810281838281151561099657fe5b0414610914576040805160e560020a62461bcd02815260206004820152601360248201527f536166654d617468206d756c206661696c656400000000000000000000000000604482015290519081900360640190fd5b6000604d821080156109fe5750604d83105b1515610a54576040805160e560020a62461bcd02815260206004820152601e60248201527f73746172742f656e64206d757374206265206c657373207468616e2037370000604482015290519081900360640190fd5b82821015610aac576040805160e560020a62461bcd02815260206004820152601460248201527f656e64206d757374206265203e3d207374617274000000000000000000000000604482015290519081900360640190fd5b610ac6600a610aba84610b5d565b9063ffffffff61097516565b9150610ad183610b5d565b92508282811515610ade57fe5b048410610aea57600080fd5b6000841115610b0657610b03848463ffffffff61097516565b93505b610b54610b25838488811515610b1857fe5b049063ffffffff61097516565b610b4886610b48610b3b88898c811515610b1857fe5b8a9063ffffffff6108b516565b9063ffffffff61091a16565b95945050505050565b6000610914600a8363ffffffff610b7016565b60008080841515610b845760009250610bbb565b831515610b945760019250610bbb565b5083905060015b83811015610bb757610bad8286610975565b9150600101610b9b565b8192505b5050929150505600000000000000000000000000b3775fb83f7d12a36e0475abdd1fca35c091efbea165627a7a72305820f4cd5b28e6e11c5e067d514b6263cff344aa1d96ddc0b7d95052bd9b569ed1790029"
}