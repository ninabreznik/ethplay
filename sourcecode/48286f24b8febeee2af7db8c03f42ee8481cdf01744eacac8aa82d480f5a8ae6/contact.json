{
  "address": "0x4903DC97816f99410E8dfFF51149fA4C3CdaD1b8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SlowWallet",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "1000000",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-20\n*/\n\npragma solidity ^0.5.8;\n\n/**\n * @title The standard ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address, uint256) external returns (bool);\n    function approve(address, uint256) external returns (bool);\n    function transferFrom(address, address, uint256) external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address) external view returns (uint256);\n    function allowance(address, address) external view returns (uint256);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed holder, address indexed spender, uint256 value);\n}\n\n/// @title Time-delayed ERC-20 wallet contract.\n/// Can only transfer tokens after publicly recording the intention to do so\n/// at least two weeks in advance.\ncontract SlowWallet {\n\n    // TYPES\n\n    struct TransferProposal {\n        address destination;\n        uint256 value;\n        uint256 time;\n        string notes;\n        bool closed;\n    }\n\n    // DATA\n\n    IERC20 public token;\n    uint256 public constant delay = 4 weeks;\n    address public owner;\n\n    // PROPOSALS\n\n    mapping (uint256 => TransferProposal) public proposals;\n    uint256 public proposalsLength;\n\n    // EVENTS\n\n    event TransferProposed(\n        uint256 index,\n        address indexed destination,\n        uint256 value,\n        uint256 delayUntil,\n        string notes\n    );\n    event TransferConfirmed(uint256 index, address indexed destination, uint256 value, string notes);\n    event TransferCancelled(uint256 index, address indexed destination, uint256 value, string notes);\n    event AllTransfersCancelled();\n\n    // FUNCTIONALITY\n\n    constructor(address tokenAddress) public {\n        token = IERC20(tokenAddress);\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"must be owner\");\n        _;\n    }\n\n    /// Propose a new transfer, which can be confirmed after two weeks.\n    function propose(address destination, uint256 value, string calldata notes) external onlyOwner {\n        // Delay by at least two weeks.\n        // We are relying on block.timestamp for this, and aware of the possibility of its\n        // manipulation by miners. But we are working at a timescale that is already much\n        // longer than the variance in timestamps we have observed and expect in the future,\n        // so we are satisfied with this choice.\n        // solium-disable-next-line security/no-block-members\n        uint256 delayUntil = now + delay;\n        require(delayUntil >= now, \"delay overflowed\");\n\n        proposals[proposalsLength] = TransferProposal({\n            destination: destination,\n            value: value,\n            time: delayUntil,\n            notes: notes,\n            closed: false\n        });\n        proposalsLength++;\n\n        emit TransferProposed(proposalsLength-1, destination, value, delayUntil, notes);\n    }\n\n    /// Cancel a proposed transfer.\n    function cancel(uint256 index, address addr, uint256 value) external onlyOwner {\n        // Check authorization.\n        requireMatchingOpenProposal(index, addr, value);\n\n        // Cancel transfer.\n        proposals[index].closed = true;\n        emit TransferCancelled(index, addr, value, proposals[index].notes);\n    }\n\n    /// Mark all proposals \"void\", in O(1).\n    function voidAll() external onlyOwner {\n        proposalsLength = 0;\n        emit AllTransfersCancelled();\n    }\n\n    /// Confirm and execute a proposed transfer, if enough time has passed since it was proposed.\n    function confirm(uint256 index, address destination, uint256 value) external onlyOwner {\n        // Check authorization.\n        requireMatchingOpenProposal(index, destination, value);\n\n        // See commentary above about using `now`.\n        // solium-disable-next-line security/no-block-members\n        require(proposals[index].time < now, \"too early\");\n\n        // Record execution of transfer.\n        proposals[index].closed = true;\n        emit TransferConfirmed(index, destination, value, proposals[index].notes);\n\n        // Proceed with execution of transfer.\n        require(token.transfer(destination, value));\n    }\n\n    /// Throw unless the given transfer proposal exists and matches `destination` and `value`.\n    function requireMatchingOpenProposal(uint256 index, address destination, uint256 value) private view {\n        require(index < proposalsLength, \"index too high, or transfer voided\");\n        require(!proposals[index].closed, \"transfer already closed\");\n\n        // Slither reports \"dangerous strict equality\" for each of these, but it's OK.\n        // These equalities are to confirm that the transfer entered is equal to the\n        // matching previous transfer. We're vetting data entry; strict equality is appropriate.\n        require(proposals[index].destination == destination, \"destination mismatched\");\n        require(proposals[index].value == value, \"value mismatched\");\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610fec8339810180604052602081101561003057600080fd5b5051600080546001600160a01b039092166001600160a01b03199283161790556001805490911633179055610f828061006a6000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80637b166f6011610076578063bf60f8ef1161005b578063bf60f8ef146102af578063d0a08d6e146102b7578063fc0c546a146102f6576100a3565b80637b166f60146101ec5780638da5cb5b1461027e576100a3565b8063013cf08b146100a8578063315a69fa1461018957806344c7c867146101ca5780636a42b8f8146101e4575b600080fd5b6100c5600480360360208110156100be57600080fd5b50356102fe565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018060200183151515158152602001828103825284818151815260200191508051906020019080838360005b8381101561014a578181015183820152602001610132565b50505050905090810190601f1680156101775780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b6101c86004803603606081101561019f57600080fd5b5080359073ffffffffffffffffffffffffffffffffffffffff60208201351690604001356103ed565b005b6101d26105c0565b60408051918252519081900360200190f35b6101d26105c6565b6101c86004803603606081101561020257600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169160208101359181019060608101604082013564010000000081111561023f57600080fd5b82018360208201111561025157600080fd5b8035906020019184600183028401116401000000008311171561027357600080fd5b5090925090506105cd565b6102866108b5565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101c86108d1565b6101c8600480360360608110156102cd57600080fd5b5080359073ffffffffffffffffffffffffffffffffffffffff6020820135169060400135610987565b610286610c8e565b600260208181526000928352604092839020805460018083015483860154600385018054895161010095821615959095027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff011697909704601f810187900487028401870190985287835273ffffffffffffffffffffffffffffffffffffffff90931696909592949192918301828280156103da5780601f106103af576101008083540402835291602001916103da565b820191906000526020600020905b8154815290600101906020018083116103bd57829003601f168201915b5050506004909301549192505060ff1685565b60015473ffffffffffffffffffffffffffffffffffffffff16331461047357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6d757374206265206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b61047e838383610caa565b6000838152600260208181526040928390206004810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915584518881529283018690526060948301858152600390920180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9281161561010002929092019091169390930493820184905273ffffffffffffffffffffffffffffffffffffffff8616937fa99797fde63ee29177c0bcd12725053c1fcecc39957a12d910dad426ddefafcf938893879391929091906080830190849080156105ab5780601f10610580576101008083540402835291602001916105ab565b820191906000526020600020905b81548152906001019060200180831161058e57829003601f168201915b505094505050505060405180910390a2505050565b60035481565b6224ea0081565b60015473ffffffffffffffffffffffffffffffffffffffff16331461065357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6d757374206265206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b426224ea008101908110156106c957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f64656c6179206f766572666c6f77656400000000000000000000000000000000604482015290519081900360640190fd5b6040518060a001604052808673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200182815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093855250505060209182018190526003805482526002808452604092839020855181547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911617815585850151600182015592850151908301556060840151805192936107b89392850192910190610e99565b5060809182015160049190910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055600380546001810190915560408051828152602081018890529081018490526060810183815292810185905273ffffffffffffffffffffffffffffffffffffffff8816927fc21d9f71ad43be26dd663dc2ae89d8a5f2e2e627520624eeff74bf1004d80b3d929188918691899189919060a08201848480828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169092018290039850909650505050505050a25050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff16331461095757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6d757374206265206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b600060038190556040517ff4a9bad09d9916720a4c78733bb1b637bccdc7b56ae0f78e6bb63c99934b49b99190a1565b60015473ffffffffffffffffffffffffffffffffffffffff163314610a0d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6d757374206265206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b610a18838383610caa565b600083815260026020819052604090912001544211610a9857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f746f6f206561726c790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000838152600260208181526040928390206004810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915584518881529283018690526060948301858152600390920180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9281161561010002929092019091169390930493820184905273ffffffffffffffffffffffffffffffffffffffff8616937f0725491da501611b9ba3843fe633719becb32a870a63c7008fab061512c8341793889387939192909190608083019084908015610bc55780601f10610b9a57610100808354040283529160200191610bc5565b820191906000526020600020905b815481529060010190602001808311610ba857829003601f168201915b505094505050505060405180910390a260008054604080517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690529151919092169263a9059cbb92604480820193602093909283900390910190829087803b158015610c5457600080fd5b505af1158015610c68573d6000803e3d6000fd5b505050506040513d6020811015610c7e57600080fd5b5051610c8957600080fd5b505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6003548310610d04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610f356022913960400191505060405180910390fd5b60008381526002602052604090206004015460ff1615610d8557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7472616e7366657220616c726561647920636c6f736564000000000000000000604482015290519081900360640190fd5b60008381526002602052604090205473ffffffffffffffffffffffffffffffffffffffff838116911614610e1a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f64657374696e6174696f6e206d69736d61746368656400000000000000000000604482015290519081900360640190fd5b6000838152600260205260409020600101548114610c8957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f76616c7565206d69736d61746368656400000000000000000000000000000000604482015290519081900360640190fd5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610eda57805160ff1916838001178555610f07565b82800160010185558215610f07579182015b82811115610f07578251825591602001919060010190610eec565b50610f13929150610f17565b5090565b610f3191905b80821115610f135760008155600101610f1d565b9056fe696e64657820746f6f20686967682c206f72207472616e7366657220766f69646564a165627a7a72305820239554896be14c0da4b3f70a031c5711107a1a48560a17af39ac77b864f5290600290000000000000000000000008762db106b2c2a0bccb3a80d1ed41273552616e8",
  "constructorArguments": "0000000000000000000000008762db106b2c2a0bccb3a80d1ed41273552616e8"
}