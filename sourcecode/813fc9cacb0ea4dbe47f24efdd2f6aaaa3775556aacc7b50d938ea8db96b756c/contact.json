{
  "address": "0x9465a32618a9172b3c14d82cecdca788de1ef878",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "P4RTYDaoVault",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-30\n*/\n\npragma solidity ^0.4.21;\n\n// File: contracts/ReinvestProxy.sol\n\n/*\n * Visit: https://p4rty.io\n * Discord: https://discord.gg/7y3DHYF\n * Copyright Mako Labs LLC 2018 All Rights Reseerved\n*/\ninterface ReinvestProxy {\n\n    /// @dev Converts all incoming ethereum to tokens for the caller,\n    function reinvestFor(address customer) external payable;\n\n}\n\n// File: openzeppelin-solidity/contracts/math/Math.sol\n\n/**\n * @title Math\n * @dev Assorted math operations\n */\nlibrary Math {\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Whitelist.sol\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n * @dev This simplifies the implementation of \"user permissions\".\n */\ncontract Whitelist is Ownable {\n  mapping(address => bool) public whitelist;\n\n  event WhitelistedAddressAdded(address addr);\n  event WhitelistedAddressRemoved(address addr);\n\n  /**\n   * @dev Throws if called by any account that's not whitelisted.\n   */\n  modifier onlyWhitelisted() {\n    require(whitelist[msg.sender]);\n    _;\n  }\n\n  /**\n   * @dev add an address to the whitelist\n   * @param addr address\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address addr) onlyOwner public returns(bool success) {\n    if (!whitelist[addr]) {\n      whitelist[addr] = true;\n      emit WhitelistedAddressAdded(addr);\n      success = true;\n    }\n  }\n\n  /**\n   * @dev add addresses to the whitelist\n   * @param addrs addresses\n   * @return true if at least one address was added to the whitelist,\n   * false if all addresses were already in the whitelist\n   */\n  function addAddressesToWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n    for (uint256 i = 0; i < addrs.length; i++) {\n      if (addAddressToWhitelist(addrs[i])) {\n        success = true;\n      }\n    }\n  }\n\n  /**\n   * @dev remove an address from the whitelist\n   * @param addr address\n   * @return true if the address was removed from the whitelist,\n   * false if the address wasn't in the whitelist in the first place\n   */\n  function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) {\n    if (whitelist[addr]) {\n      whitelist[addr] = false;\n      emit WhitelistedAddressRemoved(addr);\n      success = true;\n    }\n  }\n\n  /**\n   * @dev remove addresses from the whitelist\n   * @param addrs addresses\n   * @return true if at least one address was removed from the whitelist,\n   * false if all addresses weren't in the whitelist in the first place\n   */\n  function removeAddressesFromWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n    for (uint256 i = 0; i < addrs.length; i++) {\n      if (removeAddressFromWhitelist(addrs[i])) {\n        success = true;\n      }\n    }\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/P4RTYDaoVault.sol\n\n/*\n * Visit: https://p4rty.io\n * Discord: https://discord.gg/7y3DHYF\n*/\n\ncontract P4RTYDaoVault is Whitelist {\n\n\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n\n    /// @dev Only people with profits\n    modifier onlyDivis {\n        require(myDividends() > 0);\n        _;\n    }\n\n\n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n\n    event onStake(\n        address indexed customerAddress,\n        uint256 stakedTokens,\n        uint256 timestamp\n    );\n\n    event onDeposit(\n        address indexed fundingSource,\n        uint256 ethDeposited,\n        uint    timestamp\n    );\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn,\n        uint timestamp\n    );\n\n    event onReinvestmentProxy(\n        address indexed customerAddress,\n        address indexed destinationAddress,\n        uint256 ethereumReinvested\n    );\n\n\n\n\n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n\n\n    uint256 constant internal magnitude = 2 ** 64;\n\n\n    /*=================================\n     =            DATASETS            =\n     ================================*/\n\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => int256) internal payoutsTo_;\n\n    //Initial deposits backed by one virtual share that cannot be unstaked\n    uint256 internal tokenSupply_ = 1;\n    uint256 internal profitPerShare_;\n\n    ERC20 public p4rty;\n\n\n    /*=======================================\n    =            PUBLIC FUNCTIONS           =\n    =======================================*/\n\n    constructor(address _p4rtyAddress) Ownable() public {\n\n        p4rty = ERC20(_p4rtyAddress);\n\n    }\n\n    /**\n     * @dev Fallback function to handle ethereum that was send straight to the contract\n     */\n    function() payable public {\n        deposit();\n    }\n\n    /// @dev Internal function to actually purchase the tokens.\n    function deposit() payable public  {\n\n        uint256 _incomingEthereum = msg.value;\n        address _fundingSource = msg.sender;\n\n        // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n        profitPerShare_ += (_incomingEthereum * magnitude / tokenSupply_);\n\n\n        // fire event\n        emit onDeposit(_fundingSource, _incomingEthereum, now);\n\n    }\n\n    function stake(uint _amountOfTokens) public {\n\n\n        //Approval has to happen separately directly with p4rty\n        //p4rty.approve(<DAO>, _amountOfTokens);\n\n        address _customerAddress = msg.sender;\n\n        //Customer needs to have P4RTY\n        require(p4rty.balanceOf(_customerAddress) > 0);\n\n\n\n        uint256 _balance = p4rty.balanceOf(_customerAddress);\n        uint256 _stakeAmount = Math.min256(_balance,_amountOfTokens);\n\n        require(_stakeAmount > 0);\n        p4rty.transferFrom(_customerAddress, address(this), _stakeAmount);\n\n        //Add to the tokenSupply_\n        tokenSupply_ = SafeMath.add(tokenSupply_, _stakeAmount);\n\n        // update circulating supply & the ledger address for the customer\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _stakeAmount);\n\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n        // really i know you think you do but you don't\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _stakeAmount);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n\n        emit onStake(_customerAddress, _amountOfTokens, now);\n    }\n\n    /// @dev Withdraws all of the callers earnings.\n    function withdraw() onlyDivis public {\n\n        address _customerAddress = msg.sender;\n        // setup data\n        uint256 _dividends = dividendsOf(_customerAddress);\n\n        // update dividend tracker\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n\n\n        // lambo delivery service\n        _customerAddress.transfer(_dividends);\n\n        // fire event\n        emit onWithdraw(_customerAddress, _dividends, now);\n    }\n\n    function reinvestByProxy(address _customerAddress) onlyWhitelisted public {\n        // setup data\n        uint256 _dividends = dividendsOf(_customerAddress);\n\n        // update dividend tracker\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n\n\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\n        ReinvestProxy reinvestProxy =  ReinvestProxy(msg.sender);\n        reinvestProxy.reinvestFor.value(_dividends)(_customerAddress);\n\n        emit onReinvestmentProxy(_customerAddress,msg.sender,_dividends);\n\n    }\n\n\n    /*=====================================\n    =      HELPERS AND CALCULATORS        =\n    =====================================*/\n\n    /**\n     * @dev Method to view the current Ethereum stored in the contract\n     *  Example: totalEthereumBalance()\n     */\n    function totalEthereumBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @dev Retrieve the total token supply.\n    function totalSupply() public view returns (uint256) {\n        return tokenSupply_;\n    }\n\n    /// @dev Retrieve the tokens owned by the caller.\n    function myTokens() public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n\n    /// @dev The percentage of the\n    function votingPower(address _customerAddress) public view returns (uint256) {\n        return SafeMath.div(balanceOf(_customerAddress), totalSupply());\n    }\n\n    /**\n     * @dev Retrieve the dividends owned by the caller.\n     *  If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n     *  The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     *  But in the internal calculations, we want them separate.\n     */\n    function myDividends() public view returns (uint256) {\n        return dividendsOf(msg.sender);\n\n    }\n\n    /// @dev Retrieve the token balance of any single address.\n    function balanceOf(address _customerAddress) public view returns (uint256) {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n\n    /// @dev Retrieve the dividend balance of any single address.\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\n        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n\n}",
  "bytecode": "6080604052600160045534801561001557600080fd5b50604051602080610cad833981016040525160008054600160a060020a0319908116331790915560068054600160a060020a0390931692909116919091179055610c49806100646000396000f3006080604052600436106101055763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b811461010f57806318160ddd1461014257806324953eaa14610157578063286dd3f5146101c05780633151ecfc146101e15780633ccfd60b146101f65780636b2f46321461020b57806370a08231146102205780637b9417c8146102415780638da5cb5b14610262578063949e8acd146102935780639b19251a146102a8578063a3b49204146102c9578063a694fc3a146102de578063c07473f6146102f6578063d0e30db014610105578063e2ec6ec314610317578063f2fde38b1461036c578063f9b04f721461038d575b61010d6103ae565b005b34801561011b57600080fd5b50610130600160a060020a036004351661041d565b60408051918252519081900360200190f35b34801561014e57600080fd5b5061013061045b565b34801561016357600080fd5b50604080516020600480358082013583810280860185019096528085526101ac953695939460249493850192918291850190849080828437509497506104619650505050505050565b604080519115158252519081900360200190f35b3480156101cc57600080fd5b506101ac600160a060020a03600435166104c0565b3480156101ed57600080fd5b50610130610556565b34801561020257600080fd5b5061010d610566565b34801561021757600080fd5b50610130610627565b34801561022c57600080fd5b50610130600160a060020a036004351661062c565b34801561024d57600080fd5b506101ac600160a060020a0360043516610647565b34801561026e57600080fd5b506102776106e2565b60408051600160a060020a039092168252519081900360200190f35b34801561029f57600080fd5b506101306106f1565b3480156102b457600080fd5b506101ac600160a060020a0360043516610703565b3480156102d557600080fd5b50610277610718565b3480156102ea57600080fd5b5061010d600435610727565b34801561030257600080fd5b50610130600160a060020a03600435166109c8565b34801561032357600080fd5b50604080516020600480358082013583810280860185019096528085526101ac953695939460249493850192918291850190849080828437509497506109e99650505050505050565b34801561037857600080fd5b5061010d600160a060020a0360043516610a42565b34801561039957600080fd5b5061010d600160a060020a0360043516610ad6565b600454349033906801000000000000000083028115156103ca57fe5b60058054929091049091019055604080518381524260208201528151600160a060020a038416927fd6bbc989766039cda6ca06b473aabd4d296527497aadc6808e640e053427d2b3928290030190a25050565b600160a060020a038116600090815260036020908152604080832054600290925282205460055468010000000000000000929102030490505b919050565b60045490565b600080548190600160a060020a0316331461047b57600080fd5b5060005b82518110156104ba576104a8838281518110151561049957fe5b906020019060200201516104c0565b156104b257600191505b60010161047f565b50919050565b60008054600160a060020a031633146104d857600080fd5b600160a060020a03821660009081526001602052604090205460ff161561045657600160a060020a038216600081815260016020908152604091829020805460ff19169055815192835290517ff1abf01a1043b7c244d128e8595cf0c1d10743b022b03a02dffd8ca3bf729f5a9281900390910190a1506001919050565b60006105613361041d565b905090565b6000806000610573610556565b1161057d57600080fd5b3391506105898261041d565b600160a060020a038316600081815260036020526040808220805468010000000000000000860201905551929350909183156108fc0291849190818181858888f193505050501580156105e0573d6000803e3d6000fd5b50604080518281524260208201528151600160a060020a038516927f1b091269e929df55d64d6ea7e9cadbe4fb38dce5ccdc995767bc515030dbfbbf928290030190a25050565b303190565b600160a060020a031660009081526002602052604090205490565b60008054600160a060020a0316331461065f57600080fd5b600160a060020a03821660009081526001602052604090205460ff16151561045657600160a060020a038216600081815260016020818152604092839020805460ff1916909217909155815192835290517fd1bba68c128cc3f427e5831b3c6f99f480b6efa6b9e80c757768f6124158cc3f9281900390910190a1506001919050565b600054600160a060020a031681565b6000336106fd8161062c565b91505090565b60016020526000908152604090205460ff1681565b600654600160a060020a031681565b600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152336004820181905291519192600092839283928392600160a060020a03909116916370a0823191602480830192602092919082900301818787803b15801561079857600080fd5b505af11580156107ac573d6000803e3d6000fd5b505050506040513d60208110156107c257600080fd5b5051116107ce57600080fd5b600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152915191909216916370a082319160248083019260209291908290030181600087803b15801561083657600080fd5b505af115801561084a573d6000803e3d6000fd5b505050506040513d602081101561086057600080fd5b5051925061086e8386610be3565b91506000821161087d57600080fd5b600654604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a03878116600483015230602483015260448201869052915191909216916323b872dd9160648083019260209291908290030181600087803b1580156108f257600080fd5b505af1158015610906573d6000803e3d6000fd5b505050506040513d602081101561091c57600080fd5b505060045461092b9083610bfb565b600455600160a060020a0384166000908152600260205260409020546109519083610bfb565b600160a060020a03851660008181526002602090815260408083209490945560055460038252918490208054928702928301905583518981524291810191909152835191945091927f67eb285178ed97c7defb3f6b5d97ea47f24ca9a429e1d6e8f31db80a7c1d9300928290030190a25050505050565b60006109e36109d68361062c565b6109de61045b565b610c08565b92915050565b600080548190600160a060020a03163314610a0357600080fd5b5060005b82518110156104ba57610a308382815181101515610a2157fe5b90602001906020020151610647565b15610a3a57600191505b600101610a07565b600054600160a060020a03163314610a5957600080fd5b600160a060020a0381161515610a6e57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b33600090815260016020526040812054819060ff161515610af657600080fd5b610aff8361041d565b600160a060020a038416600081815260036020526040808220805468010000000000000000860201905580517f6c6170480000000000000000000000000000000000000000000000000000000081526004810193909352519294503393508392636c617048928692602480830193919282900301818588803b158015610b8457600080fd5b505af1158015610b98573d6000803e3d6000fd5b5050604080518681529051339450600160a060020a03881693507fb0c3654a9b0006eaf87cd1a772dc962fbcf10c9d3a29c48ec3a056b2a95155d692509081900360200190a3505050565b6000818310610bf25781610bf4565b825b9392505050565b818101828110156109e357fe5b60008183811515610c1557fe5b0493925050505600a165627a7a723058205adf8293597a7e2879da82bf6451bc882c771bb4a67b5bf293d7672c8cb62e87002900000000000000000000000034837d9dd34008c0dd8edac6a9a4dcd42fbccc3e",
  "constructorArguments": "00000000000000000000000034837d9dd34008c0dd8edac6a9a4dcd42fbccc3e"
}