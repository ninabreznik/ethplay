{
  "address": "0x4fac33dabfd83d160717dfee4175d9caaa249ca5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Sacrifice3D",
  "contractName": "Sacrific3d",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-04\n*/\n\npragma solidity ^0.4.24;\n\ncontract Sacrific3d {\n    \n    struct Stage {\n        uint8 numberOfPlayers;\n        uint256 blocknumber;\n        bool finalized;\n        mapping (uint8 => address) slotXplayer;\n        mapping (address => bool) players;\n    }\n    \n    HourglassInterface constant p3dContract = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\n   \n    //a small part of every winners share of the sacrificed players offer is used to purchase p3d instead\n    uint256 constant private P3D_SHARE = 0.005 ether;\n    \n    uint8 constant public MAX_PLAYERS_PER_STAGE = 5;\n    uint256 constant public OFFER_SIZE = 0.1 ether;\n    \n    uint256 private p3dPerStage = P3D_SHARE * (MAX_PLAYERS_PER_STAGE - 1);\n    //not sacrificed players receive their offer back and also a share of the sacrificed players offer \n    uint256 public winningsPerRound = OFFER_SIZE + OFFER_SIZE / (MAX_PLAYERS_PER_STAGE - 1) - P3D_SHARE;\n    \n    mapping(address => uint256) private playerVault;\n    mapping(uint256 => Stage) private stages;\n    uint256 private numberOfFinalizedStages;\n    \n    uint256 public numberOfStages;\n    \n    event SacrificeOffered(address indexed player);\n    event SacrificeChosen(address indexed sarifice);\n    event EarningsWithdrawn(address indexed player, uint256 indexed amount);\n    event StageInvalidated(uint256 indexed stage);\n    \n    modifier isValidOffer()\n    {\n        require(msg.value == OFFER_SIZE);\n        _;\n    }\n    \n    modifier canPayFromVault()\n    {\n        require(playerVault[msg.sender] >= OFFER_SIZE);\n        _;\n    }\n    \n    modifier hasEarnings()\n    {\n        require(playerVault[msg.sender] > 0);\n        _;\n    }\n    \n    modifier prepareStage()\n    {\n        //create a new stage if current has reached max amount of players\n        if(stages[numberOfStages - 1].numberOfPlayers == MAX_PLAYERS_PER_STAGE) {\n           stages[numberOfStages] = Stage(0, 0, false);\n           numberOfStages++;\n        }\n        _;\n    }\n    \n    modifier isNewToStage()\n    {\n        require(stages[numberOfStages - 1].players[msg.sender] == false);\n        _;\n    }\n    \n    constructor()\n        public\n    {\n        stages[numberOfStages] = Stage(0, 0, false);\n        numberOfStages++;\n    }\n    \n    function() external payable {}\n    \n    function offerAsSacrifice()\n        external\n        payable\n        isValidOffer\n        prepareStage\n        isNewToStage\n    {\n        acceptOffer();\n        \n        //try to choose a sacrifice in an already full stage (finalize a stage)\n        tryFinalizeStage();\n    }\n    \n    function offerAsSacrificeFromVault()\n        external\n        canPayFromVault\n        prepareStage\n        isNewToStage\n    {\n        playerVault[msg.sender] -= OFFER_SIZE;\n        \n        acceptOffer();\n        \n        tryFinalizeStage();\n    }\n    \n    function withdraw()\n        external\n        hasEarnings\n    {\n        tryFinalizeStage();\n        \n        uint256 amount = playerVault[msg.sender];\n        playerVault[msg.sender] = 0;\n        \n        emit EarningsWithdrawn(msg.sender, amount); \n        \n        msg.sender.transfer(amount);\n    }\n    \n    function myEarnings()\n        external\n        view\n        hasEarnings\n        returns(uint256)\n    {\n        return playerVault[msg.sender];\n    }\n    \n    function currentPlayers()\n        external\n        view\n        returns(uint256)\n    {\n        return stages[numberOfStages - 1].numberOfPlayers;\n    }\n    \n    function acceptOffer()\n        private\n    {\n        Stage storage currentStage = stages[numberOfStages - 1];\n        \n        assert(currentStage.numberOfPlayers < MAX_PLAYERS_PER_STAGE);\n        \n        address player = msg.sender;\n        \n        //add player to current stage\n        currentStage.slotXplayer[currentStage.numberOfPlayers] = player;\n        currentStage.numberOfPlayers++;\n        currentStage.players[player] = true;\n        \n        emit SacrificeOffered(player);\n        \n        //add blocknumber to current stage when the last player is added\n        if(currentStage.numberOfPlayers == MAX_PLAYERS_PER_STAGE) {\n            currentStage.blocknumber = block.number;\n        }\n    }\n    \n    function tryFinalizeStage()\n        private\n    {\n        assert(numberOfStages >= numberOfFinalizedStages);\n        \n        //there are no stages to finalize\n        if(numberOfStages == numberOfFinalizedStages) {return;}\n        \n        Stage storage stageToFinalize = stages[numberOfFinalizedStages];\n        \n        assert(!stageToFinalize.finalized);\n        \n        //stage is not ready to be finalized\n        if(stageToFinalize.numberOfPlayers < MAX_PLAYERS_PER_STAGE) {return;}\n        \n        assert(stageToFinalize.blocknumber != 0);\n        \n        //check if blockhash can be determined\n        if(block.number - 256 <= stageToFinalize.blocknumber) {\n            //blocknumber of stage can not be equal to current block number -> blockhash() won't work\n            if(block.number == stageToFinalize.blocknumber) {return;}\n                \n            //determine sacrifice\n            uint8 sacrificeSlot = uint8(blockhash(stageToFinalize.blocknumber)) % MAX_PLAYERS_PER_STAGE;\n            address sacrifice = stageToFinalize.slotXplayer[sacrificeSlot];\n            \n            emit SacrificeChosen(sacrifice);\n            \n            //allocate winnings to survivors\n            allocateSurvivorWinnings(sacrifice);\n            \n            //allocate p3d dividends to sacrifice if existing\n            uint256 dividends = p3dContract.myDividends(true);\n            if(dividends > 0) {\n                p3dContract.withdraw();\n                playerVault[sacrifice]+= dividends;\n            }\n            \n            //purchase p3d (using ref)\n            p3dContract.buy.value(p3dPerStage)(address(0x1EB2acB92624DA2e601EEb77e2508b32E49012ef));\n        } else {\n            invalidateStage(numberOfFinalizedStages);\n            \n            emit StageInvalidated(numberOfFinalizedStages);\n        }\n        //finalize stage\n        stageToFinalize.finalized = true;\n        numberOfFinalizedStages++;\n    }\n    \n    function allocateSurvivorWinnings(address sacrifice)\n        private\n    {\n        for (uint8 i = 0; i < MAX_PLAYERS_PER_STAGE; i++) {\n            address survivor = stages[numberOfFinalizedStages].slotXplayer[i];\n            if(survivor != sacrifice) {\n                playerVault[survivor] += winningsPerRound;\n            }\n        }\n    }\n    \n    function invalidateStage(uint256 stageIndex)\n        private\n    {\n        Stage storage stageToInvalidate = stages[stageIndex];\n        \n        for (uint8 i = 0; i < MAX_PLAYERS_PER_STAGE; i++) {\n            address player = stageToInvalidate.slotXplayer[i];\n            playerVault[player] += OFFER_SIZE;\n        }\n    }\n}\n\ninterface HourglassInterface {\n    function buy(address _playerAddress) payable external returns(uint256);\n    function withdraw() external;\n    function myDividends(bool _includeReferralBonus) external view returns(uint256);\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"offerAsSacrificeFromVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OFFER_SIZE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"offerAsSacrifice\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winningsPerRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_PLAYERS_PER_STAGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myEarnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"}],\"name\":\"SacrificeOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sarifice\",\"type\":\"address\"}],\"name\":\"SacrificeChosen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EarningsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"StageInvalidated\",\"type\":\"event\"}]",
  "bytecode": "608060405266470de4df8200006000556701aa535d3d0c000060015534801561002757600080fd5b5060408051606081018252600080825260208083018281528385018381526005805485526003909352949092209251835460ff9190911660ff19918216178455915160018481019190915593516002909301805493151593909216929092179055805490910190556109ba8061009e6000396000f3006080604052600436106100985763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663213a2622811461009a5780633ccfd60b146100af5780634eff13dc146100c45780635d69f16f146100eb57806395dd489b146100f35780639cf8ccfd14610108578063d13a73c41461011d578063efe6c77214610132578063ffe6bbd81461015d575b005b3480156100a657600080fd5b50610098610172565b3480156100bb57600080fd5b5061009861027f565b3480156100d057600080fd5b506100d9610316565b60408051918252519081900360200190f35b610098610322565b3480156100ff57600080fd5b506100d96103f7565b34801561011457600080fd5b506100d96103fd565b34801561012957600080fd5b506100d9610419565b34801561013e57600080fd5b5061014761041f565b6040805160ff9092168252519081900360200190f35b34801561016957600080fd5b506100d9610424565b3360009081526002602052604090205467016345785d8a0000111561019657600080fd5b600580546000190160009081526003602052604090205460ff16141561021e5760408051606081018252600080825260208083018281528385018381526005805485526003909352949092209251835460ff9190911660ff19918216178455915160018481019190915593516002909301805493151593909216929092179055805490910190555b60055460001901600090815260036020908152604080832033845260040190915290205460ff161561024f57600080fd5b336000908152600260205260409020805467016345785d89ffff19019055610275610453565b61027d61051f565b565b33600090815260026020526040812054811061029a57600080fd5b6102a261051f565b503360008181526002602052604080822080549083905590519092839290917f48dc35af7b45e2a81fffad55f6e2fafacdb1d3d0d50d24ebdc16324f5ba757f19190a3604051339082156108fc029083906000818181858888f19350505050158015610312573d6000803e3d6000fd5b5050565b67016345785d8a000081565b3467016345785d8a00001461033657600080fd5b600580546000190160009081526003602052604090205460ff1614156103be5760408051606081018252600080825260208083018281528385018381526005805485526003909352949092209251835460ff9190911660ff19918216178455915160018481019190915593516002909301805493151593909216929092179055805490910190555b60055460001901600090815260036020908152604080832033845260040190915290205460ff16156103ef57600080fd5b610275610453565b60015481565b6005546000190160009081526003602052604090205460ff1690565b60055481565b600581565b33600090815260026020526040812054811061043f57600080fd5b503360009081526002602052604090205490565b600580546000190160009081526003602052604081208054909260ff9091161061047957fe5b50805460ff90811660009081526003830160209081526040808320805473ffffffffffffffffffffffffffffffffffffffff1916339081179091558554808616600190810190961660ff199182161787558185526004870190935281842080549093169094179091555182917f53572b7c2bc733aef4eee14d2f251f8d38bd1b54d23167fcc83e5298d427db9f91a2815460ff1660051415610312574360018301555050565b6000806000806004546005541015151561053557fe5b600454600554141561054657610884565b6004546000908152600360205260409020600281015490945060ff161561056957fe5b8354600560ff909116101561057d57610884565b6001840154151561058a57fe5b600184015460ff194301116108305783600101544314156105aa57610884565b60018401546005904060ff160660ff8116600090815260038601602052604080822054905192955073ffffffffffffffffffffffffffffffffffffffff16935083917f7a1bc82d0aa0c6ec064f947f3007b8c603bde2db8b2ed004c07bc105dc5e25a49190a26106198261088a565b604080517f688abbf700000000000000000000000000000000000000000000000000000000815260016004820152905173b3775fb83f7d12a36e0475abdd1fca35c091efbe9163688abbf79160248083019260209291908290030181600087803b15801561068657600080fd5b505af115801561069a573d6000803e3d6000fd5b505050506040513d60208110156106b057600080fd5b5051905060008111156107795773b3775fb83f7d12a36e0475abdd1fca35c091efbe73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561073557600080fd5b505af1158015610749573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff83166000908152600260205260409020805483019055505b600054604080517ff088d547000000000000000000000000000000000000000000000000000000008152731eb2acb92624da2e601eeb77e2508b32e49012ef6004820152905173b3775fb83f7d12a36e0475abdd1fca35c091efbe9263f088d547929091602480830192602092919082900301818588803b1580156107fd57600080fd5b505af1158015610811573d6000803e3d6000fd5b50505050506040513d602081101561082857600080fd5b506108689050565b61083b60045461091e565b6004546040517f734a18a68f572b3535e4ddb7d4bc879c3ef7083d347b4a0c247a6eda7a7001e190600090a25b60028401805460ff191660019081179091556004805490910190555b50505050565b6000805b600560ff831610156109195750600454600090815260036020818152604080842060ff86168552909201905290205473ffffffffffffffffffffffffffffffffffffffff908116908316811461090e5760015473ffffffffffffffffffffffffffffffffffffffff82166000908152600260205260409020805490910190555b60019091019061088e565b505050565b600081815260036020526040812090805b600560ff83161015610884575060ff8116600090815260038301602090815260408083205473ffffffffffffffffffffffffffffffffffffffff168084526002909252909120805467016345785d8a000001905560019091019061092f5600a165627a7a72305820ba89abba385b355304fc134f3159b8092e07893a1cfe59e94398cd61323275c50029"
}