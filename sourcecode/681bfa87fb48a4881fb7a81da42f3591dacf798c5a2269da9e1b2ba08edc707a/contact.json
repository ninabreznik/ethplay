{
  "address": "0x029af1f2c753c458c1e7fa04428e78cbe2eb09a7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoBeginnerQuest",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-15\n*/\n\npragma solidity ^0.4.25;\n\n/*\n* CryptoMiningWar - Blockchain-based strategy game\n* Author: InspiGames\n* Website: https://cryptominingwar.github.io/\n*/\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\ncontract CryptoEngineerInterface {\n    uint256 public prizePool = 0;\n    address public gameSponsor;\n    struct BoostData {\n        address owner;\n        uint256 boostRate;\n        uint256 basePrice;\n    }\n    mapping(uint256 => BoostData) public boostData;\n    function getPlayerData(address /*_addr*/) \n    public \n    pure \n    returns(\n        uint256 /*_virusNumber*/, \n        uint256 /*_currentVirus*/, \n        uint256 /*_research*/, \n        uint256 /*_researchPerDay*/, \n        uint256 /*_lastUpdateTime*/, \n        uint256[8] /*_engineersCount*/\n    ) {}\n    function fallback() public payable {}\n    function addVirus(address /*_addr*/, uint256 /*_value*/) public pure {}\n    function claimPrizePool(address /*_addr*/, uint256 /*_value*/) public pure {} \n    function isContractMiniGame() public pure returns( bool /*_isContractMiniGame*/) {}\n    function isEngineerContract() external pure returns(bool) {}\n}\ncontract CryptoMiningWarInterface {\n    uint256 public deadline; \n    uint256 public roundNumber = 0;\n    mapping(address => Player) public players;\n    struct Player {\n        uint256 roundNumber;\n        mapping(uint256 => uint256) minerCount;\n        uint256 hashrate;\n        uint256 crystals;\n        uint256 lastUpdateTime;\n    }\n    function getPlayerData(address /*addr*/) public pure\n    returns (\n        uint256 /*crystals*/, \n        uint256 /*lastupdate*/, \n        uint256 /*hashratePerDay*/, \n        uint256[8] /*miners*/, \n        uint256 /*hasBoost*/, \n        uint256 /*playerBalance*/\n        ) {}\n    function getBoosterData(uint256 /*idx*/) public pure returns (address /*owner*/,uint256 /*boostRate*/, uint256 /*startingLevel*/, \n        uint256 /*startingTime*/, uint256 /*currentPrice*/, uint256 /*halfLife*/) {}\n    function addHashrate( address /*_addr*/, uint256 /*_value*/ ) public pure {}\n    function addCrystal( address /*_addr*/, uint256 /*_value*/ ) public pure {}\n    function subCrystal( address /*_addr*/, uint256 /*_value*/ ) public pure {}\n    function isMiningWarContract() external pure returns(bool) {}\n}\ncontract CryptoAirdropGameInterface {\n    mapping(address => Player) public players;\n   \n    struct Player {\n        uint256 miningWarRound;\n        uint256 noJoinAirdrop; \n        uint256 lastDayJoin;\n    }\n    function isContractMiniGame() public pure returns( bool /*_isContractMiniGame*/ ) {}\n    function isAirdropContract() external pure returns(bool) {}\n}\ncontract CryptoDepositInterface {\n    uint256 public round = 0;\n    mapping(address => Player) public players;\n    struct Player {\n        uint256 currentRound;\n        uint256 lastRound;\n        uint256 reward;\n        uint256 share; // your crystals share in current round \n    }\n    function isContractMiniGame() public pure returns( bool /*_isContractMiniGame*/ ) {}\n    function isDepositContract() external pure returns(bool) {}\n}\ncontract CryptoBossWannaCryInterface {\n    mapping(address => PlayerData) public players;\n    struct PlayerData {\n        uint256 currentBossRoundNumber;\n        uint256 lastBossRoundNumber;\n        uint256 win;\n        uint256 share;\n        uint256 dame; \n        uint256 nextTimeAtk;\n    }\n    function isContractMiniGame() public pure returns( bool /*_isContractMiniGame*/ ) {}\n    function isBossWannaCryContract() external pure returns(bool) {}\n}\ncontract CryptoArenaInterface {\n    function getData(address /*_addr*/) public view returns(uint256 /*_virusDef*/, uint256 /*_nextTimeAtk*/, uint256 /*_endTimeUnequalledDef*/, bool    /*_canAtk*/, uint256 /*_currentVirus*/, uint256 /*_currentCrystals*/) {}\n    function isContractMiniGame() public pure returns( bool /*_isContractMiniGame*/ ) {}\n    function isArenaContract() external pure returns(bool) {}\n}\ncontract CryptoBeginnerQuest {\n    using SafeMath for uint256;\n\n    address private administrator;\n    // mini game\n    CryptoEngineerInterface     public Engineer;\n    CryptoDepositInterface      public Deposit;\n    CryptoMiningWarInterface    public MiningWar;\n    CryptoAirdropGameInterface  public AirdropGame;\n    CryptoBossWannaCryInterface public BossWannaCry;\n    CryptoArenaInterface        public Arena;\n    \n    // mining war info\n    address public  miningWarAddress;\n    uint256 private miningWarDeadline;\n    uint256 private miningWarRound;\n\n    /** \n    * @dev player information\n    */\n    mapping(address => Player)           private players;\n    // quest information\n    mapping(address => MinerQuest)       private minerQuests;\n    mapping(address => EngineerQuest)    private engineerQuests;\n    mapping(address => DepositQuest)     private depositQuests;\n    mapping(address => JoinAirdropQuest) private joinAirdropQuests;\n    mapping(address => AtkBossQuest)     private atkBossQuests;\n    mapping(address => AtkPlayerQuest)   private atkPlayerQuests;\n    mapping(address => BoosterQuest)     private boosterQuests;\n    mapping(address => RedbullQuest)     private redbullQuests;\n   \n    struct Player {\n        uint256 miningWarRound;\n        uint256 currentQuest;\n    }\n    struct MinerQuest {\n        bool ended;\n    }\n    struct EngineerQuest {\n        bool ended;\n    }\n    struct DepositQuest {\n        uint256 currentDepositRound;\n        uint256 share; // current deposit of player\n        bool ended;\n    }\n    struct JoinAirdropQuest {\n        uint256 miningWarRound;    // current airdrop game id\n        uint256 noJoinAirdrop; // total join the airdrop game\n        bool ended;\n    }\n    struct AtkBossQuest {\n        uint256 dameBossWannaCry; // current dame boss\n        uint256 levelBossWannaCry; // current boss player atk\n        bool ended;\n    }\n    struct AtkPlayerQuest {\n        uint256 nextTimeAtkPlayer; // \n        bool ended;\n    }\n    struct BoosterQuest {\n        bool ended;\n    }\n    struct RedbullQuest {\n        bool ended;\n    }\n\n    event ConfirmQuest(address player, uint256 questType, uint256 reward, uint256 typeReward); // 1 : crystals, 2: hashrate, 3: virus\n    modifier isAdministrator()\n    {\n        require(msg.sender == administrator);\n        _;\n    }\n    \n    constructor() public {\n        administrator = msg.sender;\n        // init contract interface  \n        setMiningWarInterface(0x1b002cd1ba79dfad65e8abfbb3a97826e4960fe5);\n\n        setEngineerInterface(0xd7afbf5141a7f1d6b0473175f7a6b0a7954ed3d2);\n        \n        setAirdropGameInterface(0x465efa69a42273e3e368cfe3b6483ab97b3c33eb);\n        \n        setBossWannaCryInterface(0x7ea4af9805b8a0a58ce67c4b6b14cce0a1834491);\n        \n        setDepositInterface(0x134d3c5575eaaa1365d9268bb2a4b4d8fd1c5907);\n        \n        setArenaInterface(0x77c9acc811e4cf4b51dc3a3e05dc5d62fa887767);\n    }\n    function () public payable\n    {\n        \n    }\n    // ---------------------------------------------------------------------------------------\n    // SET INTERFACE CONTRACT\n    // ---------------------------------------------------------------------------------------\n    \n    function setMiningWarInterface(address _addr) public isAdministrator\n    {\n        CryptoMiningWarInterface miningWarInterface = CryptoMiningWarInterface(_addr);\n\n        require(miningWarInterface.isMiningWarContract() == true);\n        \n        miningWarAddress = _addr;\n        \n        MiningWar = miningWarInterface;\n    }\n    function setEngineerInterface(address _addr) public isAdministrator\n    {\n        CryptoEngineerInterface engineerInterface = CryptoEngineerInterface(_addr);\n        \n        require(engineerInterface.isEngineerContract() == true);\n\n        Engineer = engineerInterface;\n    }\n    function setAirdropGameInterface(address _addr) public isAdministrator\n    {\n        CryptoAirdropGameInterface airdropGameInterface = CryptoAirdropGameInterface(_addr);\n        \n        require(airdropGameInterface.isAirdropContract() == true);\n\n        AirdropGame = airdropGameInterface;\n    }\n    function setBossWannaCryInterface(address _addr) public isAdministrator\n    {\n        CryptoBossWannaCryInterface bossWannaCryInterface = CryptoBossWannaCryInterface(_addr);\n        \n        require(bossWannaCryInterface.isBossWannaCryContract() == true);\n\n        BossWannaCry = bossWannaCryInterface;\n    }\n    function setDepositInterface(address _addr) public isAdministrator\n    {\n        CryptoDepositInterface depositInterface = CryptoDepositInterface(_addr);\n        \n        require(depositInterface.isDepositContract() == true);\n\n        Deposit = depositInterface;\n    }\n    function setArenaInterface(address _addr) public isAdministrator\n    {\n        CryptoArenaInterface arenaInterface = CryptoArenaInterface(_addr);\n        \n        require(arenaInterface.isArenaContract() == true);\n\n        Arena = arenaInterface;\n    }\n    /** \n    * @dev MainContract used this function to verify game's contract\n    */\n    function isContractMiniGame() public pure returns( bool _isContractMiniGame )\n    {\n        _isContractMiniGame = true;\n    }\n    function isBeginnerQuestContract() public pure returns(bool)\n    {\n        return true;\n    }\n    function upgrade(address addr) public isAdministrator\n    {\n        selfdestruct(addr);\n    }\n    function addLevelQuest(address _addr, uint256 _level) public isAdministrator\n    {\n        require(_level >= 1 && _level <= 9);\n\n        Player storage p      = players[_addr];\n\n        p.currentQuest = _level - 1;\n\n        if (p.currentQuest == 1) addMinerQuest(_addr); \n        if (p.currentQuest == 2) addEngineerQuest(_addr); \n        if (p.currentQuest == 3) addDepositQuest(_addr); \n        if (p.currentQuest == 4) addJoinAirdropQuest(_addr); \n        if (p.currentQuest == 5) addAtkBossQuest(_addr); \n        if (p.currentQuest == 6) addAtkPlayerQuest(_addr); \n        if (p.currentQuest == 7) addBoosterQuest(_addr); \n        if (p.currentQuest == 8) addRedbullQuest(_addr); \n    }\n    /** \n    * @dev Main Contract call this function to setup mini game.\n    */\n    function setupMiniGame( uint256 _miningWarRoundNumber, uint256 _miningWarDeadline ) public\n    {\n        require(msg.sender == miningWarAddress);\n\n        miningWarDeadline = _miningWarDeadline;\n        miningWarRound    = _miningWarRoundNumber;\n    }\n    /**\n    * @dev start the mini game\n    */\n    function startGame() public \n    {\n        require(msg.sender == administrator);\n        miningWarDeadline = getMiningWarDealine();\n        miningWarRound    = getMiningWarRound();\n    }\n    function confirmQuest() public \n    {\n        if (miningWarRound != players[msg.sender].miningWarRound) {\n            players[msg.sender].currentQuest = 0;\n            players[msg.sender].miningWarRound = miningWarRound;\n        }    \n        bool _isFinish;\n        bool _ended;\n        (_isFinish, _ended) = checkQuest(msg.sender);\n        require(miningWarDeadline > now);\n        require(_isFinish == true);\n        require(_ended == false);\n\n        if (players[msg.sender].currentQuest == 0) confirmGetFreeQuest(msg.sender);\n        if (players[msg.sender].currentQuest == 1) confirmMinerQuest(msg.sender);\n        if (players[msg.sender].currentQuest == 2) confirmEngineerQuest(msg.sender);\n        if (players[msg.sender].currentQuest == 3) confirmDepositQuest(msg.sender);\n        if (players[msg.sender].currentQuest == 4) confirmJoinAirdropQuest(msg.sender);\n        if (players[msg.sender].currentQuest == 5) confirmAtkBossQuest(msg.sender);\n        if (players[msg.sender].currentQuest == 6) confirmAtkPlayerQuest(msg.sender);\n        if (players[msg.sender].currentQuest == 7) confirmBoosterQuest(msg.sender);\n        if (players[msg.sender].currentQuest == 8) confirmRedbullQuest(msg.sender);\n\n        if (players[msg.sender].currentQuest <= 7) addQuest(msg.sender);\n    }\n    function checkQuest(address _addr) public view returns(bool _isFinish, bool _ended) \n    {\n        if (players[_addr].currentQuest == 0) (_isFinish, _ended) = checkGetFreeQuest(_addr);\n        if (players[_addr].currentQuest == 1) (_isFinish, _ended) = checkMinerQuest(_addr);\n        if (players[_addr].currentQuest == 2) (_isFinish, _ended) = checkEngineerQuest(_addr);\n        if (players[_addr].currentQuest == 3) (_isFinish, _ended) = checkDepositQuest(_addr);\n        if (players[_addr].currentQuest == 4) (_isFinish, _ended) = checkJoinAirdropQuest(_addr);\n        if (players[_addr].currentQuest == 5) (_isFinish, _ended) = checkAtkBossQuest(_addr);\n        if (players[_addr].currentQuest == 6) (_isFinish, _ended) = checkAtkPlayerQuest(_addr);\n        if (players[_addr].currentQuest == 7) (_isFinish, _ended) = checkBoosterQuest(_addr);\n        if (players[_addr].currentQuest == 8) (_isFinish, _ended) = checkRedbullQuest(_addr);\n    }\n    \n    function getData(address _addr) \n    public\n    view\n    returns(\n        uint256 _miningWarRound,\n        uint256 _currentQuest,\n        bool _isFinish,\n        bool _endedQuest\n    ) {\n        Player memory p          = players[_addr];\n        _miningWarRound          = p.miningWarRound;\n        _currentQuest            = p.currentQuest;\n        if (_miningWarRound != miningWarRound) _currentQuest = 0;\n        (_isFinish, _endedQuest) = checkQuest(_addr);\n    }\n    // ---------------------------------------------------------------------------------------------------------------------------------\n    // INTERNAL \n    // ---------------------------------------------------------------------------------------------------------------------------------\n    function addQuest(address _addr) private\n    {\n        Player storage p      = players[_addr];\n        p.currentQuest += 1;\n\n        if (p.currentQuest == 1) addMinerQuest(_addr); \n        if (p.currentQuest == 2) addEngineerQuest(_addr); \n        if (p.currentQuest == 3) addDepositQuest(_addr); \n        if (p.currentQuest == 4) addJoinAirdropQuest(_addr); \n        if (p.currentQuest == 5) addAtkBossQuest(_addr); \n        if (p.currentQuest == 6) addAtkPlayerQuest(_addr); \n        if (p.currentQuest == 7) addBoosterQuest(_addr); \n        if (p.currentQuest == 8) addRedbullQuest(_addr); \n    }\n    // ---------------------------------------------------------------------------------------------------------------------------------\n    // CONFIRM QUEST INTERNAL \n    // ---------------------------------------------------------------------------------------------------------------------------------\n    function confirmGetFreeQuest(address _addr) private\n    {\n        MiningWar.addCrystal(_addr, 100);\n\n        emit ConfirmQuest(_addr, 1, 100, 1);\n    }\n    function confirmMinerQuest(address _addr) private\n    {\n        MinerQuest storage pQ = minerQuests[_addr];\n        pQ.ended = true;\n        MiningWar.addCrystal(_addr, 100);\n\n        emit ConfirmQuest(_addr, 2, 100, 1);\n    }\n    function confirmEngineerQuest(address _addr) private\n    {\n        EngineerQuest storage pQ = engineerQuests[_addr];\n        pQ.ended = true;\n        MiningWar.addCrystal(_addr, 400);\n\n        emit ConfirmQuest(_addr, 3, 400, 1);\n    }\n    function confirmDepositQuest(address _addr) private\n    {\n        DepositQuest storage pQ = depositQuests[_addr];\n        pQ.ended = true;\n        MiningWar.addHashrate(_addr, 200);\n\n        emit ConfirmQuest(_addr, 4, 200, 2);\n    }\n    function confirmJoinAirdropQuest(address _addr) private\n    {\n        JoinAirdropQuest storage pQ = joinAirdropQuests[_addr];\n        pQ.ended = true;\n        Engineer.addVirus(_addr, 10);\n\n        emit ConfirmQuest(_addr, 5, 10, 3);\n    }\n    function confirmAtkBossQuest(address _addr) private\n    {\n        AtkBossQuest storage pQ = atkBossQuests[_addr];\n        pQ.ended = true;\n        Engineer.addVirus(_addr, 10);\n\n        emit ConfirmQuest(_addr, 6, 10, 3);\n    }\n    function confirmAtkPlayerQuest(address _addr) private\n    {\n        AtkPlayerQuest storage pQ = atkPlayerQuests[_addr];\n        pQ.ended = true;\n        MiningWar.addCrystal(_addr, 10000);\n\n        emit ConfirmQuest(_addr, 7, 10000, 1);\n    }   \n    function confirmBoosterQuest(address _addr) private\n    {\n        BoosterQuest storage pQ = boosterQuests[_addr];\n        pQ.ended = true;\n        Engineer.addVirus(_addr, 100);\n\n        emit ConfirmQuest(_addr, 8, 100, 3);\n    }\n    function confirmRedbullQuest(address _addr) private\n    {\n        RedbullQuest storage pQ = redbullQuests[_addr];\n        pQ.ended = true;\n        Engineer.addVirus(_addr, 100);\n\n        emit ConfirmQuest(_addr, 9, 100, 3);\n    }\n    // --------------------------------------------------------------------------------------------------------------\n    // ADD QUEST INTERNAL\n    // --------------------------------------------------------------------------------------------------------------\n    function addMinerQuest(address _addr) private\n    {\n         MinerQuest storage pQ = minerQuests[_addr];\n         pQ.ended = false;\n    }\n    function addEngineerQuest(address _addr) private\n    {\n         EngineerQuest storage pQ = engineerQuests[_addr];\n         pQ.ended = false;\n    }\n    function addDepositQuest(address _addr) private\n    {\n        DepositQuest storage pQ = depositQuests[_addr];\n        uint256 currentDepositRound;\n        uint256 share;\n        (currentDepositRound, share) = getPlayerDepositData(_addr);\n        pQ.currentDepositRound       = currentDepositRound;\n        pQ.share                     = share;\n        pQ.ended = false;\n    }\n    function addJoinAirdropQuest(address _addr) private\n    {\n\n        uint256 miningWarRound;    // current airdrop game id\n        uint256 noJoinAirdrop;\n        (miningWarRound , noJoinAirdrop) = getPlayerAirdropGameData(_addr);\n        JoinAirdropQuest storage pQ = joinAirdropQuests[_addr];\n\n        pQ.miningWarRound= miningWarRound;\n        pQ.noJoinAirdrop = noJoinAirdrop;\n        pQ.ended = false;\n    }\n    function addAtkBossQuest(address _addr) private\n    {\n        uint256 dameBossWannaCry; // current dame boss\n        uint256 levelBossWannaCry;\n        (levelBossWannaCry, dameBossWannaCry) = getPlayerBossWannaCryData(_addr);\n\n        AtkBossQuest storage pQ = atkBossQuests[_addr];\n        pQ.levelBossWannaCry = levelBossWannaCry;\n        pQ.dameBossWannaCry  = dameBossWannaCry;\n        pQ.ended = false;\n    }\n    function addAtkPlayerQuest(address _addr) private\n    {\n        AtkPlayerQuest storage pQ = atkPlayerQuests[_addr];\n        pQ.nextTimeAtkPlayer = getNextTimeAtkPlayer(_addr);\n        pQ.ended = false;\n    }   \n    function addBoosterQuest(address _addr) private\n    {\n        BoosterQuest storage pQ = boosterQuests[_addr];\n        pQ.ended = false;\n    }\n    function addRedbullQuest(address _addr) private\n    {\n        RedbullQuest storage pQ = redbullQuests[_addr];\n        pQ.ended = false;\n    }\n    // --------------------------------------------------------------------------------------------------------------\n    // CHECK QUEST INTERNAL\n    // --------------------------------------------------------------------------------------------------------------\n    function checkGetFreeQuest(address _addr) private view returns(bool _isFinish, bool _ended)\n    {\n        if (players[_addr].currentQuest > 0) _ended = true;\n        if (miningWarRound == getMiningWarRoundOfPlayer(_addr)) _isFinish = true;\n    }\n    function checkMinerQuest(address _addr) private view returns(bool _isFinish, bool _ended)\n    {\n        MinerQuest memory pQ = minerQuests[_addr];\n        _ended = pQ.ended;\n        if (getMinerLv1(_addr) >= 10) _isFinish = true;\n    }\n    function checkEngineerQuest(address _addr) private view returns(bool _isFinish, bool _ended)\n    {\n        EngineerQuest memory pQ = engineerQuests[_addr];\n        _ended = pQ.ended;\n        if (getEngineerLv1(_addr) >= 10) _isFinish = true;\n    }\n    function checkDepositQuest(address _addr) private view returns(bool _isFinish, bool _ended)\n    {\n        DepositQuest memory pQ = depositQuests[_addr];\n        _ended = pQ.ended;\n        uint256 currentDepositRound;\n        uint256 share;\n        (currentDepositRound, share) = getPlayerDepositData(_addr);\n        if ((currentDepositRound != pQ.currentDepositRound) || (share > pQ.share)) _isFinish = true;\n    }\n    function checkJoinAirdropQuest(address _addr) private view returns(bool _isFinish, bool _ended)\n    {\n        JoinAirdropQuest memory pQ = joinAirdropQuests[_addr];\n        _ended = pQ.ended;\n        uint256 miningWarRound;    // current airdrop game id\n        uint256 noJoinAirdrop;\n        (miningWarRound , noJoinAirdrop) = getPlayerAirdropGameData(_addr);\n        if (\n            (pQ.miningWarRound != miningWarRound) ||\n            (pQ.miningWarRound == miningWarRound && noJoinAirdrop > pQ.noJoinAirdrop)\n            ) {\n            _isFinish = true;\n        }\n    }\n    function checkAtkBossQuest(address _addr) private view returns(bool _isFinish, bool _ended)\n    {\n        AtkBossQuest memory pQ = atkBossQuests[_addr];\n        _ended = pQ.ended;\n        uint256 dameBossWannaCry; // current dame boss\n        uint256 levelBossWannaCry;\n        (levelBossWannaCry, dameBossWannaCry) = getPlayerBossWannaCryData(_addr);\n        if (\n            (pQ.levelBossWannaCry != levelBossWannaCry) ||\n            (pQ.levelBossWannaCry == levelBossWannaCry && dameBossWannaCry > pQ.dameBossWannaCry)\n            ) {\n            _isFinish = true;\n        }\n    }\n    function checkAtkPlayerQuest(address _addr) private view returns(bool _isFinish, bool _ended)\n    {\n        AtkPlayerQuest memory pQ = atkPlayerQuests[_addr];\n        _ended = pQ.ended;\n        uint256 nextTimeAtkPlayer = getNextTimeAtkPlayer(_addr);\n        if (nextTimeAtkPlayer > pQ.nextTimeAtkPlayer) _isFinish = true;\n    }   \n    function checkBoosterQuest(address _addr) private view returns(bool _isFinish, bool _ended)\n    {\n        BoosterQuest memory pQ = boosterQuests[_addr];\n        _ended = pQ.ended;\n        address[5] memory boosters = getBoosters();\n        for(uint256 idx = 0; idx < 5; idx++) {\n            if (boosters[idx] == _addr) _isFinish = true;\n        }\n\n    }\n    function checkRedbullQuest(address _addr) private view returns(bool _isFinish, bool _ended)\n    {\n        RedbullQuest memory pQ = redbullQuests[_addr];\n        _ended = pQ.ended;\n        address[5] memory redbulls = getRedbulls();\n        for(uint256 idx = 0; idx < 5; idx++) {\n            if (redbulls[idx] == _addr) _isFinish = true;\n        }\n    }\n    // --------------------------------------------------------------------------------------------------------------\n    // INTERFACE FUNCTION INTERNAL\n    // --------------------------------------------------------------------------------------------------------------\n    // Mining War\n    function getMiningWarDealine () private view returns(uint256)\n    {\n        return MiningWar.deadline();\n    }\n    function getMiningWarRound() private view returns(uint256)\n    {\n        return MiningWar.roundNumber();\n    }\n    function getBoosters() public view returns(address[5] _boosters)\n    {\n        for (uint256 idx = 0; idx < 5; idx++) {\n            address owner;\n            (owner, , , , , ) = MiningWar.getBoosterData(idx);\n            _boosters[idx] = owner;\n        }\n    }\n    function getMinerLv1(address _addr) private view returns(uint256 _total)\n    {\n        uint256[8] memory _minersCount;\n        (, , , _minersCount, , ) = MiningWar.getPlayerData(_addr);\n        _total = _minersCount[0];\n    }\n    function getMiningWarRoundOfPlayer(address _addr) private view returns(uint256 _roundNumber) \n    {\n        (_roundNumber, , , ) = MiningWar.players(_addr);\n    }\n    // ENGINEER\n    function getRedbulls() public view returns(address[5] _redbulls)\n    {\n        for (uint256 idx = 0; idx < 5; idx++) {\n            address owner;\n            (owner, , ) = Engineer.boostData(idx);\n            _redbulls[idx] = owner;\n        }\n    }\n    function getNextTimeAtkPlayer(address _addr) private view returns(uint256 _nextTimeAtk)\n    {\n        (, _nextTimeAtk, , , , ) = Arena.getData(_addr);\n    }\n    function getEngineerLv1(address _addr) private view returns(uint256 _total)\n    {\n        uint256[8] memory _engineersCount;\n        (, , , , , _engineersCount) = Engineer.getPlayerData(_addr);\n        _total = _engineersCount[0];\n    }\n    // AIRDROP GAME\n    function getPlayerAirdropGameData(address _addr) private view returns(uint256 miningWarRound, uint256 noJoinAirdrop)\n    {\n        (miningWarRound, noJoinAirdrop, ) = AirdropGame.players(_addr);\n    }\n    // BOSS WANNACRY\n    function getPlayerBossWannaCryData(address _addr) private view returns(uint256 _currentBossRoundNumber, uint256 _dame)\n    {\n        (_currentBossRoundNumber, , , , _dame, ) = BossWannaCry.players(_addr);\n    }\n    // DEPOSIT\n    function getPlayerDepositData(address _addr) private view returns(uint256 _currentRound, uint256 _share)\n    {\n        (_currentRound, , , _share ) = Deposit.players(_addr);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAirdropGameInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"addLevelQuest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miningWarAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Arena\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isBeginnerQuestContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractMiniGame\",\"outputs\":[{\"name\":\"_isContractMiniGame\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getData\",\"outputs\":[{\"name\":\"_miningWarRound\",\"type\":\"uint256\"},{\"name\":\"_currentQuest\",\"type\":\"uint256\"},{\"name\":\"_isFinish\",\"type\":\"bool\"},{\"name\":\"_endedQuest\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRedbulls\",\"outputs\":[{\"name\":\"_redbulls\",\"type\":\"address[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMiningWarInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBoosters\",\"outputs\":[{\"name\":\"_boosters\",\"type\":\"address[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AirdropGame\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Engineer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmQuest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_miningWarRoundNumber\",\"type\":\"uint256\"},{\"name\":\"_miningWarDeadline\",\"type\":\"uint256\"}],\"name\":\"setupMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setArenaInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MiningWar\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkQuest\",\"outputs\":[{\"name\":\"_isFinish\",\"type\":\"bool\"},{\"name\":\"_ended\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BossWannaCry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBossWannaCryInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setDepositInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setEngineerInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"questType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"typeReward\",\"type\":\"uint256\"}],\"name\":\"ConfirmQuest\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000080731b002cd1ba79dfad65e8abfbb3a97826e4960fe56200016c640100000000026401000000009004565b620000ae73d7afbf5141a7f1d6b0473175f7a6b0a7954ed3d262000308640100000000026401000000009004565b620000dc73465efa69a42273e3e368cfe3b6483ab97b3c33eb62000463640100000000026401000000009004565b6200010a737ea4af9805b8a0a58ce67c4b6b14cce0a1834491620005be640100000000026401000000009004565b6200013873134d3c5575eaaa1365d9268bb2a4b4d8fd1c590762000719640100000000026401000000009004565b620001667377c9acc811e4cf4b51dc3a3e05dc5d62fa88776762000874640100000000026401000000009004565b620009cf565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515620001ca57600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff1663688b5c2b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200023657600080fd5b505af11580156200024b573d6000803e3d6000fd5b505050506040513d60208110156200026257600080fd5b810190808051906020019092919050505015151415156200028257600080fd5b81600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200036657600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff1663b9a59b836040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620003d257600080fd5b505af1158015620003e7573d6000803e3d6000fd5b505050506040513d6020811015620003fe57600080fd5b810190808051906020019092919050505015151415156200041e57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515620004c157600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff1663d302af4a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200052d57600080fd5b505af115801562000542573d6000803e3d6000fd5b505050506040513d60208110156200055957600080fd5b810190808051906020019092919050505015151415156200057957600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200061c57600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff1663c70273296040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200068857600080fd5b505af11580156200069d573d6000803e3d6000fd5b505050506040513d6020811015620006b457600080fd5b81019080805190602001909291905050501515141515620006d457600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200077757600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff1663ed71cfb36040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620007e357600080fd5b505af1158015620007f8573d6000803e3d6000fd5b505050506040513d60208110156200080f57600080fd5b810190808051906020019092919050505015151415156200082f57600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515620008d257600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff16638890e13d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200093e57600080fd5b505af115801562000953573d6000803e3d6000fd5b505050506040513d60208110156200096a57600080fd5b810190808051906020019092919050505015151415156200098a57600080fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b61464580620009df6000396000f30060806040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806304c313f4146101405780630900f01014610183578063126b85e7146101c657806314017c3f1461021357806315919eed1461026a5780632d937fe8146102c15780633281d576146102f057806338266b221461031f57806344554cef146103935780638a56b230146103e65780639e72942c14610429578063ab1482781461047c578063b4bd7d41146104d3578063bc4b346d1461052a578063be7ccd7e14610541578063c22d6c3c14610578578063c3f656f1146105bb578063ccf5401e14610612578063d23667b114610678578063d65ab5f2146106cf578063e200cee8146106e6578063e2b43e2314610729578063ed21248c1461076c578063ffa651b6146107c3575b005b34801561014c57600080fd5b50610181600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610806565b005b34801561018f57600080fd5b506101c4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061095c565b005b3480156101d257600080fd5b50610211600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109d0565b005b34801561021f57600080fd5b50610228610b54565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561027657600080fd5b5061027f610b7a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102cd57600080fd5b506102d6610ba0565b604051808215151515815260200191505060405180910390f35b3480156102fc57600080fd5b50610305610ba9565b604051808215151515815260200191505060405180910390f35b34801561032b57600080fd5b50610360600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bb2565b60405180858152602001848152602001831515151581526020018215151515815260200194505050505060405180910390f35b34801561039f57600080fd5b506103a8610c57565b6040518082600560200280838360005b838110156103d35780820151818401526020810190506103b8565b5050505090500191505060405180910390f35b3480156103f257600080fd5b50610427600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610daf565b005b34801561043557600080fd5b5061043e610f46565b6040518082600560200280838360005b8381101561046957808201518184015260208101905061044e565b5050505090500191505060405180910390f35b34801561048857600080fd5b506104916110c8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104df57600080fd5b506104e86110ee565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561053657600080fd5b5061053f611114565b005b34801561054d57600080fd5b506105766004803603810190808035906020019092919080359060200190929190505050611594565b005b34801561058457600080fd5b506105b9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611602565b005b3480156105c757600080fd5b506105d0611758565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561061e57600080fd5b50610653600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061177e565b6040518083151515158152602001821515151581526020019250505060405180910390f35b34801561068457600080fd5b5061068d611acb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106db57600080fd5b506106e4611af1565b005b3480156106f257600080fd5b50610727600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b6a565b005b34801561073557600080fd5b5061076a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cc0565b005b34801561077857600080fd5b50610781611e16565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107cf57600080fd5b50610804600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e3c565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561086357600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff1663d302af4a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156108ce57600080fd5b505af11580156108e2573d6000803e3d6000fd5b505050506040513d60208110156108f857600080fd5b8101908080519060200190929190505050151514151561091757600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109b757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16ff5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a2d57600080fd5b60018210158015610a3f575060098211155b1515610a4a57600080fd5b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600182038160010181905550600181600101541415610aae57610aad83611f92565b5b600281600101541415610ac557610ac483611ff6565b5b600381600101541415610adc57610adb8361205a565b5b600481600101541415610af357610af2836120e6565b5b600581600101541415610b0a57610b0983612172565b5b600681600101541415610b2157610b20836121fe565b5b600781600101541415610b3857610b3783612273565b5b600881600101541415610b4f57610b4e836122d7565b5b505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001905090565b60006001905090565b600080600080610bc06144d8565b600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604080519081016040529081600082015481526020016001820154815250509050806000015194508060200151935060095485141515610c3e57600093505b610c478661177e565b8093508194505050509193509193565b610c5f6144f2565b600080600091505b6005821015610daa57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac5b876c836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050606060405180830381600087803b158015610d0157600080fd5b505af1158015610d15573d6000803e3d6000fd5b505050506040513d6060811015610d2b57600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505090505080915050808383600581101515610d6657fe5b602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508180600101925050610c67565b505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e0c57600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff1663688b5c2b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610e7757600080fd5b505af1158015610e8b573d6000803e3d6000fd5b505050506040513d6020811015610ea157600080fd5b81019080805190602001909291905050501515141515610ec057600080fd5b81600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610f4e6144f2565b600080600091505b60058210156110c357600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339901be8836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060c060405180830381600087803b158015610ff057600080fd5b505af1158015611004573d6000803e3d6000fd5b505050506040513d60c081101561101a57600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050509091929350909192509091509050508091505080838360058110151561107f57fe5b602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508180600101925050610f56565b505090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546009541415156111f6576000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550600954600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055505b6111ff3361177e565b80925081935050504260085411151561121757600080fd5b6001151582151514151561122a57600080fd5b6000151581151514151561123d57600080fd5b6000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541415611292576112913361233b565b5b6001600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414156112e7576112e63361249a565b5b6002600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154141561133c5761133b3361265a565b5b6003600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541415611391576113903361281c565b5b6004600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414156113e6576113e5336129dc565b5b6005600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154141561143b5761143a33612b9c565b5b6006600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414156114905761148f33612d5c565b5b6007600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414156114e5576114e433612f1e565b5b6008600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154141561153a57611539336130de565b5b6007600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541115156115905761158f3361329e565b5b5050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115f057600080fd5b80600881905550816009819055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561165f57600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff16638890e13d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156116ca57600080fd5b505af11580156116de573d6000803e3d6000fd5b505050506040513d60208110156116f457600080fd5b8101908080519060200190929190505050151514151561171357600080fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414156117de576117d5836133b0565b80925081935050505b6001600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154141561183b576118328361341f565b80925081935050505b6002600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414156118985761188f836134b6565b80925081935050505b6003600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414156118f5576118ec8361354d565b80925081935050505b6004600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414156119525761194983613617565b80925081935050505b6005600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414156119af576119a6836136f0565b80925081935050505b6006600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541415611a0c57611a03836137c9565b80925081935050505b6007600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541415611a6957611a6083613871565b80925081935050505b6008600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541415611ac657611abd8361396d565b80925081935050505b915091565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b4c57600080fd5b611b54613a69565b600881905550611b62613b31565b600981905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bc757600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff1663c70273296040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611c3257600080fd5b505af1158015611c46573d6000803e3d6000fd5b505050506040513d6020811015611c5c57600080fd5b81019080805190602001909291905050501515141515611c7b57600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d1d57600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff1663ed71cfb36040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611d8857600080fd5b505af1158015611d9c573d6000803e3d6000fd5b505050506040513d6020811015611db257600080fd5b81019080805190602001909291905050501515141515611dd157600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e9957600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff1663b9a59b836040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611f0457600080fd5b505af1158015611f18573d6000803e3d6000fd5b505050506040513d6020811015611f2e57600080fd5b81019080805190602001909291905050501515141515611f4d57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000160006101000a81548160ff0219169083151502179055505050565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000160006101000a81548160ff0219169083151502179055505050565b6000806000600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002092506120a984613bf9565b809250819350505081836000018190555080836001018190555060008360020160006101000a81548160ff02191690831515021790555050505050565b60008060006120f484613d24565b8093508194505050600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905082816000018190555081816001018190555060008160020160006101000a81548160ff02191690831515021790555050505050565b600080600061218084613e41565b8094508193505050600f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905081816001018190555082816000018190555060008160020160006101000a81548160ff02191690831515021790555050505050565b6000601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061224a82613f88565b816000018190555060008160010160006101000a81548160ff0219169083151502179055505050565b6000601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000160006101000a81548160ff0219169083151502179055505050565b6000601260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000160006101000a81548160ff0219169083151502179055505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f6e212ea8260646040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561240157600080fd5b505af1158015612415573d6000803e3d6000fd5b505050507fc73fd463f4909f27a1d3fc4b26f8f968f023b7255959a3a84c1db3fda53c786381600160646001604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a150565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000160006101000a81548160ff021916908315150217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f6e212ea8360646040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156125c057600080fd5b505af11580156125d4573d6000803e3d6000fd5b505050507fc73fd463f4909f27a1d3fc4b26f8f968f023b7255959a3a84c1db3fda53c786382600260646001604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a15050565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000160006101000a81548160ff021916908315150217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f6e212ea836101906040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561278157600080fd5b505af1158015612795573d6000803e3d6000fd5b505050507fc73fd463f4909f27a1d3fc4b26f8f968f023b7255959a3a84c1db3fda53c78638260036101906001604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a15050565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160020160006101000a81548160ff021916908315150217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ef7f2e1c8360c86040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561294257600080fd5b505af1158015612956573d6000803e3d6000fd5b505050507fc73fd463f4909f27a1d3fc4b26f8f968f023b7255959a3a84c1db3fda53c786382600460c86002604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a15050565b6000600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160020160006101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ec6f772d83600a6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015612b0257600080fd5b505af1158015612b16573d6000803e3d6000fd5b505050507fc73fd463f4909f27a1d3fc4b26f8f968f023b7255959a3a84c1db3fda53c7863826005600a6003604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a15050565b6000600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160020160006101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ec6f772d83600a6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015612cc257600080fd5b505af1158015612cd6573d6000803e3d6000fd5b505050507fc73fd463f4909f27a1d3fc4b26f8f968f023b7255959a3a84c1db3fda53c7863826006600a6003604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a15050565b6000601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160010160006101000a81548160ff021916908315150217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f6e212ea836127106040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015612e8357600080fd5b505af1158015612e97573d6000803e3d6000fd5b505050507fc73fd463f4909f27a1d3fc4b26f8f968f023b7255959a3a84c1db3fda53c78638260076127106001604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a15050565b6000601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000160006101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ec6f772d8360646040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561304457600080fd5b505af1158015613058573d6000803e3d6000fd5b505050507fc73fd463f4909f27a1d3fc4b26f8f968f023b7255959a3a84c1db3fda53c786382600860646003604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a15050565b6000601260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000160006101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ec6f772d8360646040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561320457600080fd5b505af1158015613218573d6000803e3d6000fd5b505050507fc73fd463f4909f27a1d3fc4b26f8f968f023b7255959a3a84c1db3fda53c786382600960646003604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a15050565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506001816001016000828254019250508190555060018160010154141561330b5761330a82611f92565b5b6002816001015414156133225761332182611ff6565b5b600381600101541415613339576133388261205a565b5b6004816001015414156133505761334f826120e6565b5b6005816001015414156133675761336682612172565b5b60068160010154141561337e5761337d826121fe565b5b6007816001015414156133955761339482612273565b5b6008816001015414156133ac576133ab826122d7565b5b5050565b6000806000600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154111561340357600190505b61340c836140cd565b600954141561341a57600191505b915091565b60008061342a614515565b600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020602060405190810160405290816000820160009054906101000a900460ff161515151581525050905080600001519150600a6134a4856141f4565b1015156134b057600192505b50915091565b6000806134c161452b565b600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020602060405190810160405290816000820160009054906101000a900460ff161515151581525050905080600001519150600a61353b85614368565b10151561354757600192505b50915091565b600080613558614541565b600080600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206060604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1615151515815250509250826040015193506135e786613bf9565b80925081935050508260000151821415806136055750826020015181115b1561360f57600194505b505050915091565b600080613622614565565b600080600e60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206060604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1615151515815250509250826040015193506136b186613d24565b80925081935050508183600001511415806136de57508183600001511480156136dd5750826020015181115b5b156136e857600194505b505050915091565b6000806136fb614589565b600080600f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206060604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff16151515158152505092508260400151935061378a86613e41565b80935081925050508083602001511415806137b757508083602001511480156137b65750826000015182115b5b156137c157600194505b505050915091565b6000806137d46145ad565b6000601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604080519081016040529081600082015481526020016001820160009054906101000a900460ff16151515158152505091508160200151925061385785613f88565b9050816000015181111561386a57600193505b5050915091565b60008061387c6145c9565b6138846144f2565b6000601160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020602060405190810160405290816000820160009054906101000a900460ff1615151515815250509250826000015193506138fd610f46565b9150600090505b6005811015613965578573ffffffffffffffffffffffffffffffffffffffff16828260058110151561393257fe5b602002015173ffffffffffffffffffffffffffffffffffffffff16141561395857600194505b8080600101915050613904565b505050915091565b6000806139786145df565b6139806144f2565b6000601260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020602060405190810160405290816000820160009054906101000a900460ff1615151515815250509250826000015193506139f9610c57565b9150600090505b6005811015613a61578573ffffffffffffffffffffffffffffffffffffffff168282600581101515613a2e57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff161415613a5457600194505b8080600101915050613a00565b505050915091565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329dcb0cf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015613af157600080fd5b505af1158015613b05573d6000803e3d6000fd5b505050506040513d6020811015613b1b57600080fd5b8101908080519060200190929190505050905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634e2786fb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015613bb957600080fd5b505af1158015613bcd573d6000803e3d6000fd5b505050506040513d6020811015613be357600080fd5b8101908080519060200190929190505050905090565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2eb41ff846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050608060405180830381600087803b158015613cb957600080fd5b505af1158015613ccd573d6000803e3d6000fd5b505050506040513d6080811015613ce357600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919050505090915090508092508193505050915091565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2eb41ff846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050606060405180830381600087803b158015613de457600080fd5b505af1158015613df8573d6000803e3d6000fd5b505050506040513d6060811015613e0e57600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050508092508193505050915091565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2eb41ff846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060c060405180830381600087803b158015613f0157600080fd5b505af1158015613f15573d6000803e3d6000fd5b505050506040513d60c0811015613f2b57600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050909192935090919250909150508092508193505050915091565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338266b22836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060c060405180830381600087803b15801561404757600080fd5b505af115801561405b573d6000803e3d6000fd5b505050506040513d60c081101561407157600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050509091929394509091925090915090505080915050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2eb41ff836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050608060405180830381600087803b15801561418c57600080fd5b505af11580156141a0573d6000803e3d6000fd5b505050506040513d60808110156141b657600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919050505090915090505080915050919050565b60006141fe6145f5565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aa531d9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506101a060405180830381600087803b1580156142bc57600080fd5b505af11580156142d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101a08110156142f657600080fd5b810190808051906020019092919080519060200190929190805190602001909291909190826101000180519060200190929190805190602001909291905050509091929394509091929350909192509050508091505080600060088110151561435b57fe5b6020020151915050919050565b60006143726145f5565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aa531d9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506101a060405180830381600087803b15801561443057600080fd5b505af1158015614444573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101a081101561446a57600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190919050509091929394509091929350909192509091509050809150508060006008811015156144cb57fe5b6020020151915050919050565b604080519081016040528060008152602001600081525090565b60a060405190810160405280600590602082028038833980820191505090505090565b6020604051908101604052806000151581525090565b6020604051908101604052806000151581525090565b60606040519081016040528060008152602001600081526020016000151581525090565b60606040519081016040528060008152602001600081526020016000151581525090565b60606040519081016040528060008152602001600081526020016000151581525090565b6040805190810160405280600081526020016000151581525090565b6020604051908101604052806000151581525090565b6020604051908101604052806000151581525090565b610100604051908101604052806008906020820280388339808201915050905050905600a165627a7a72305820c0942759de2d1f548c090d84b69366fff829bab342be9efa778428ad8dc871860029"
}