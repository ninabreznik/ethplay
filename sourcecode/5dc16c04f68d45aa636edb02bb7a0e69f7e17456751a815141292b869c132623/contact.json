{
  "address": "0x45f2f43668fd1d77182233d7298337626f6993dc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NAWRAS",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-19\n*/\n\npragma solidity ^0.4.25;\n// ----------------------------------------------\nlibrary SafeMath {\n /**\n *  Multiplies two numbers, throws on overflow.\n */\n function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n if (a == 0) {\n return 0;\n }\n c = a * b;\n assert(c / a == b);\n return c;\n }\n /**\n *  Integer division of two numbers, truncating the quotient.\n */\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\n // assert(b > 0); // Solidity automatically throws when dividing by 0\n // uint256 c = a / b;\n // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n return a / b;\n }\n /**\n *  Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n */\n function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n assert(b <= a);\n return a - b;\n }\nfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n c = a + b;\n assert(c >= a);\n return c;\n }\n}\ncontract ForeignToken {\n function balanceOf(address _owner) constant public returns (uint256);\n function transfer(address _to, uint256 _value) public returns (bool);\n}\ncontract ERC20Basic {\n uint256 public totalSupply;\n function balanceOf(address who) public constant returns (uint256);\n function transfer(address to, uint256 value) public returns (bool);\n event Transfer(address indexed from, address indexed to, uint256 value);\n}\ncontract ERC20 is ERC20Basic {\n function allowance(address owner, address spender) public constant returns (uint256);\n function transferFrom(address from, address to, uint256 value) public returns (bool);\n function approve(address spender, uint256 value) public returns (bool);\n event Approval(address indexed owner, address indexed spender, uint256 value);\n}\ncontract NAWRAS is ERC20 {\n \n using SafeMath for uint256;\n address owner = msg.sender;\n mapping (address => uint256) balances;\n mapping (address => mapping (address => uint256)) allowed;\n mapping (address => bool) public Claimed; \n string public constant name = \"NAWRAS\";\n string public constant symbol = \"NAWRAS\";\n uint public constant decimals = 8;\n uint public deadline = now + 70 * 1 days;\n uint public round2 = now + 30 * 1 days;\n uint public round1 = now + 60 * 1 days;\n \n uint256 public totalSupply = 100000000000e8;\n uint256 public totalDistributed;\n uint256 public constant requestMinimum = 1 ether / 10; // 0.1 Ether\n uint256 public tokensPerEth = 5000000e8;\n\n uint public target0drop = 200000;\n uint public progress0drop = 0;\n \n //here u will write your ether address\n address multisig = 0x0Cd682aC964C39a4A188267FE87784F31132C443;\n event Transfer(address indexed _from, address indexed _to, uint256 _value);\n event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n \n event Distr(address indexed to, uint256 amount);\n event DistrFinished();\n \n event Airdrop(address indexed _owner, uint _amount, uint _balance);\n event TokensPerEthUpdated(uint _tokensPerEth);\n \n event Burn(address indexed burner, uint256 value);\n \n event Add(uint256 value);\n bool public distributionFinished = false;\n \n modifier canDistr() {\n require(!distributionFinished);\n _;\n }\n \n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n \n constructor() public {\n uint256 teamFund = 35000000000e8;\n owner = msg.sender;\n distr(owner, teamFund);\n }\n \n function transferOwnership(address newOwner) onlyOwner public {\n if (newOwner != address(0)) {\n owner = newOwner;\n }\n }\n function finishDistribution() onlyOwner canDistr public returns (bool) {\n distributionFinished = true;\n emit DistrFinished();\n\nreturn true;\n }\n \n function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n totalDistributed = totalDistributed.add(_amount); \n balances[_to] = balances[_to].add(_amount);\n emit Distr(_to, _amount);\n emit Transfer(address(0), _to, _amount);\n return true;\n }\n \n function Distribute(address _participant, uint _amount) onlyOwner internal {\n require( _amount > 0 ); \n require( totalDistributed < totalSupply );\n balances[_participant] = balances[_participant].add(_amount);\n totalDistributed = totalDistributed.add(_amount);\n if (totalDistributed >= totalSupply) {\n distributionFinished = true;\n }\n // log\n emit Airdrop(_participant, _amount, balances[_participant]);\n emit Transfer(address(0), _participant, _amount);\n }\n \n function DistributeAirdrop(address _participant, uint _amount) onlyOwner external { \n Distribute(_participant, _amount);\n }\n function DistributeAirdropMultiple(address[] _addresses, uint _amount) onlyOwner external { \n for (uint i = 0; i < _addresses.length; i++) Distribute(_addresses[i], _amount);\n }\n function updateTokensPerEth(uint _tokensPerEth) public onlyOwner { \n tokensPerEth = _tokensPerEth;\n emit TokensPerEthUpdated(_tokensPerEth);\n }\n \n function () external payable {\n getTokens();\n }\n function getTokens() payable canDistr public {\n uint256 tokens = 0;\n uint256 bonus = 0;\n\n uint256 countbonus = 0;\n uint256 bonusCond1 = 0.1 ether;\n uint256 bonusCond2 = 1 ether;\n uint256 bonusCond3 = 5 ether;\n uint256 bonusCond4 = 10 ether;\n uint256 bonusCond5 = 20 ether;\n uint256 bonusCond6 = 35 ether;\n uint256 bonusCond7 = 50 ether;\n tokens = tokensPerEth.mul(msg.value) / 1 ether; \n address investor = msg.sender;\n if (msg.value >= requestMinimum && now < deadline && now < round1 && now < round2) {\n if(msg.value >= bonusCond1 && msg.value < bonusCond2){\n countbonus = tokens * 2 / 100;\n }else if(msg.value >= bonusCond2 && msg.value < bonusCond3){\n countbonus = tokens * 5 / 100;\n }else if(msg.value >= bonusCond3 && msg.value < bonusCond4){\n countbonus = tokens * 10 / 100;\n }else if(msg.value >= bonusCond4 && msg.value < bonusCond5){\n countbonus = tokens * 15 / 100;\n }else if(msg.value >= bonusCond5 && msg.value < bonusCond6){\n countbonus = tokens * 20 / 100;\n }else if(msg.value >= bonusCond6 && msg.value < bonusCond7){\n countbonus = tokens * 25 / 100;\n }else if(msg.value >= bonusCond7){\n countbonus = tokens * 30 / 100;\n }\n }else if(msg.value >= requestMinimum && now < deadline && now > round1 && now < round2){\n if(msg.value >= bonusCond1 && msg.value < bonusCond2){\n countbonus = tokens * 2 / 100;\n }else if(msg.value >= bonusCond2 && msg.value < bonusCond3){\n countbonus = tokens * 5 / 100;\n }else if(msg.value >= bonusCond3 && msg.value < bonusCond4){\n countbonus = tokens * 10 / 100;\n }else if(msg.value >= bonusCond4 && msg.value < bonusCond5){\n countbonus = tokens * 15 / 100;\n }else if(msg.value >= bonusCond5 && msg.value < bonusCond6){\n countbonus = tokens * 20 / 100;\n }else if(msg.value >= bonusCond6 && msg.value < bonusCond7){\n countbonus = tokens * 25 / 100;\n }else if(msg.value >= bonusCond7){\n countbonus = tokens * 30 / 100;\n }\n }else{\n countbonus = 0;\n }\n\nbonus = tokens + countbonus;\n \n if (tokens == 0) {\n uint256 valdrop = 50000e8;\n if (Claimed[investor] == false && progress0drop <= target0drop ) {\n distr(investor, valdrop);\n Claimed[investor] = true;\n progress0drop++;\n }else{\n require( msg.value >= requestMinimum );\n }\n }else if(tokens > 0 && msg.value >= requestMinimum){\n if( now >= deadline && now >= round1 && now < round2){\n distr(investor, tokens);\n }else{\n if(msg.value >= bonusCond1){\n distr(investor, bonus);\n }else{\n distr(investor, tokens);\n } \n }\n }else{\n require( msg.value >= requestMinimum );\n }\n if (totalDistributed >= totalSupply) {\n distributionFinished = true;\n }\n \n //here we will send all wei to your address\n multisig.transfer(msg.value);\n }\n \n function balanceOf(address _owner) constant public returns (uint256) {\n return balances[_owner];\n }\n modifier onlyPayloadSize(uint size) {\n assert(msg.data.length >= size + 4);\n _;\n }\n \n function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) \n{\n require(_to != address(0));\n require(_amount <= balances[msg.sender]);\n\nbalances[msg.sender] = balances[msg.sender].sub(_amount);\n balances[_to] = balances[_to].add(_amount);\n emit Transfer(msg.sender, _to, _amount);\n return true;\n }\n \n function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public \nreturns (bool success) {\n require(_to != address(0));\n require(_amount <= balances[_from]);\n require(_amount <= allowed[_from][msg.sender]);\n \n balances[_from] = balances[_from].sub(_amount);\n allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n balances[_to] = balances[_to].add(_amount);\n emit Transfer(_from, _to, _amount);\n return true;\n }\n \n function approve(address _spender, uint256 _value) public returns (bool success) {\n if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n allowed[msg.sender][_spender] = _value;\n emit Approval(msg.sender, _spender, _value);\n return true;\n }\n \n function allowance(address _owner, address _spender) constant public returns (uint256) {\n return allowed[_owner][_spender];\n }\n \n function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\n ForeignToken t = ForeignToken(tokenAddress);\n uint bal = t.balanceOf(who);\n return bal;\n }\n \n function withdrawAll() onlyOwner public {\n address myAddress = this;\n uint256 etherBalance = myAddress.balance;\n owner.transfer(etherBalance);\n }\n function withdraw(uint256 _wdamount) onlyOwner public {\n uint256 wantAmount = _wdamount;\n owner.transfer(wantAmount);\n }\n\nfunction burn(uint256 _value) onlyOwner public {\n require(_value <= balances[msg.sender]);\n address burner = msg.sender;\n balances[burner] = balances[burner].sub(_value);\n totalSupply = totalSupply.sub(_value);\n totalDistributed = totalDistributed.sub(_value);\n emit Burn(burner, _value);\n }\n \n function add(uint256 _value) onlyOwner public {\n uint256 counter = totalSupply.add(_value);\n totalSupply = counter; \n emit Add(_value);\n }\n \n \n function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n ForeignToken token = ForeignToken(_tokenContract);\n uint256 amount = token.balanceOf(address(this));\n return token.transfer(owner, amount);\n }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wdamount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestMinimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DistributeAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"progress0drop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensPerEth\",\"type\":\"uint256\"}],\"name\":\"updateTokensPerEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target0drop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DistributeAirdropMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistrFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokensPerEth\",\"type\":\"uint256\"}],\"name\":\"TokensPerEthUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Add\",\"type\":\"event\"}]",
  "bytecode": "608060405233600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550625c4900420160055562278d004201600655624f1a004201600755678ac7230489e800006008556601c6bf52634000600a5562030d40600b556000600c55730cd682ac964c39a4a188267fe87784f31132c443600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600d60146101000a81548160ff0219169083151502179055503480156200010057600080fd5b5060006730927f74c9de0000905033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200018c600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168262000194640100000000026401000000009004565b50506200035e565b6000600d60149054906101000a900460ff16151515620001b357600080fd5b620001d882600954620003416401000000000262002560179091906401000000009004565b6009819055506200024082600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620003416401000000000262002560179091906401000000009004565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a77836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600081830190508281101515156200035557fe5b80905092915050565b612816806200036e6000396000f30060806040526004361061018b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610195578063095ea7b3146102255780631003e2d21461028a57806318160ddd146102b757806323b872dd146102e257806329dcb0cf146103675780632e1a7d4d14610392578063313ce567146103bf57806342966c68146103ea578063532b581c1461041757806370a082311461044257806374ff2324146104995780637809231c146104c4578063836e81801461051157806383afd6da1461053c578063853828b61461056757806395d89b411461057e5780639b1cbccc1461060e5780639ea407be1461063d578063a9059cbb1461066a578063aa6ca808146106cf578063b449c24d146106d9578063c108d54214610734578063c489744b14610763578063cbdd69b5146107da578063dd62ed3e14610805578063e58fc54c1461087c578063e6a092f5146108d7578063efca2eed14610902578063f2fde38b1461092d578063f3ccb40114610970575b6101936109b5565b005b3480156101a157600080fd5b506101aa610f82565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ea5780820151818401526020810190506101cf565b50505050905090810190601f1680156102175780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023157600080fd5b50610270600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fbb565b604051808215151515815260200191505060405180910390f35b34801561029657600080fd5b506102b560048036038101908080359060200190929190505050611149565b005b3480156102c357600080fd5b506102cc611200565b6040518082815260200191505060405180910390f35b3480156102ee57600080fd5b5061034d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611206565b604051808215151515815260200191505060405180910390f35b34801561037357600080fd5b5061037c6115dc565b6040518082815260200191505060405180910390f35b34801561039e57600080fd5b506103bd600480360381019080803590602001909291905050506115e2565b005b3480156103cb57600080fd5b506103d46116b0565b6040518082815260200191505060405180910390f35b3480156103f657600080fd5b50610415600480360381019080803590602001909291905050506116b5565b005b34801561042357600080fd5b5061042c611881565b6040518082815260200191505060405180910390f35b34801561044e57600080fd5b50610483600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611887565b6040518082815260200191505060405180910390f35b3480156104a557600080fd5b506104ae6118d0565b6040518082815260200191505060405180910390f35b3480156104d057600080fd5b5061050f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506118dc565b005b34801561051d57600080fd5b50610526611946565b6040518082815260200191505060405180910390f35b34801561054857600080fd5b5061055161194c565b6040518082815260200191505060405180910390f35b34801561057357600080fd5b5061057c611952565b005b34801561058a57600080fd5b50610593611a3b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105d35780820151818401526020810190506105b8565b50505050905090810190601f1680156106005780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561061a57600080fd5b50610623611a74565b604051808215151515815260200191505060405180910390f35b34801561064957600080fd5b5061066860048036038101908080359060200190929190505050611b3c565b005b34801561067657600080fd5b506106b5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611bd9565b604051808215151515815260200191505060405180910390f35b6106d76109b5565b005b3480156106e557600080fd5b5061071a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e14565b604051808215151515815260200191505060405180910390f35b34801561074057600080fd5b50610749611e34565b604051808215151515815260200191505060405180910390f35b34801561076f57600080fd5b506107c4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e47565b6040518082815260200191505060405180910390f35b3480156107e657600080fd5b506107ef611f32565b6040518082815260200191505060405180910390f35b34801561081157600080fd5b50610866600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f38565b6040518082815260200191505060405180910390f35b34801561088857600080fd5b506108bd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611fbf565b604051808215151515815260200191505060405180910390f35b3480156108e357600080fd5b506108ec612204565b6040518082815260200191505060405180910390f35b34801561090e57600080fd5b5061091761220a565b6040518082815260200191505060405180910390f35b34801561093957600080fd5b5061096e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612210565b005b34801561097c57600080fd5b506109b3600480360381019080803590602001908201803590602001919091929391929390803590602001909291905050506122e7565b005b600080600080600080600080600080600080600d60149054906101000a900460ff161515156109e357600080fd5b60009b5060009a506000995067016345785d8a00009850670de0b6b3a76400009750674563918244f400009650678ac7230489e8000095506801158e460913d0000094506801e5b8fa8fe2ac000093506802b5e3af16b18800009250670de0b6b3a7640000610a5d34600a5461239c90919063ffffffff16565b811515610a6657fe5b049b5033915067016345785d8a00003410158015610a85575060055442105b8015610a92575060075442105b8015610a9f575060065442105b15610bcd57883410158015610ab357508734105b15610acf57606460028d02811515610ac757fe5b049950610bc8565b873410158015610ade57508634105b15610afa57606460058d02811515610af257fe5b049950610bc7565b863410158015610b0957508534105b15610b25576064600a8d02811515610b1d57fe5b049950610bc6565b853410158015610b3457508434105b15610b50576064600f8d02811515610b4857fe5b049950610bc5565b843410158015610b5f57508334105b15610b7b57606460148d02811515610b7357fe5b049950610bc4565b833410158015610b8a57508234105b15610ba657606460198d02811515610b9e57fe5b049950610bc3565b8234101515610bc2576064601e8d02811515610bbe57fe5b0499505b5b5b5b5b5b5b610d34565b67016345785d8a00003410158015610be6575060055442105b8015610bf3575060075442115b8015610c00575060065442105b15610d2e57883410158015610c1457508734105b15610c3057606460028d02811515610c2857fe5b049950610d29565b873410158015610c3f57508634105b15610c5b57606460058d02811515610c5357fe5b049950610d28565b863410158015610c6a57508534105b15610c86576064600a8d02811515610c7e57fe5b049950610d27565b853410158015610c9557508434105b15610cb1576064600f8d02811515610ca957fe5b049950610d26565b843410158015610cc057508334105b15610cdc57606460148d02811515610cd457fe5b049950610d25565b833410158015610ceb57508234105b15610d0757606460198d02811515610cff57fe5b049950610d24565b8234101515610d23576064601e8d02811515610d1f57fe5b0499505b5b5b5b5b5b5b610d33565b600099505b5b898c019a5060008c1415610e4b5765048c27395000905060001515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515148015610daf5750600b54600c5411155b15610e2e57610dbe82826123d4565b506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600c60008154809291906001019190505550610e46565b67016345785d8a00003410151515610e4557600080fd5b5b610ee2565b60008c118015610e63575067016345785d8a00003410155b15610ec9576005544210158015610e7c57506007544210155b8015610e89575060065442105b15610e9e57610e98828d6123d4565b50610ec4565b8834101515610eb757610eb1828c6123d4565b50610ec3565b610ec1828d6123d4565b505b5b610ee1565b67016345785d8a00003410151515610ee057600080fd5b5b5b600854600954101515610f0b576001600d60146101000a81548160ff0219169083151502179055505b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610f73573d6000803e3d6000fd5b50505050505050505050505050565b6040805190810160405280600681526020017f4e4157524153000000000000000000000000000000000000000000000000000081525081565b600080821415801561104a57506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156110585760009050611143565b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111a757600080fd5b6111bc8260085461256090919063ffffffff16565b9050806008819055507f90f1f758f0e2b40929b1fd48df7ebe10afc272a362e1f0d63a90b8b4715d799f826040518082815260200191505060405180910390a15050565b60085481565b600060606004810160003690501015151561121d57fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561125957600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111515156112a757600080fd5b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561133257600080fd5b61138483600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461257c90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061145683600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461257c90919063ffffffff16565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061152883600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461256090919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60055481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561164057600080fd5b819050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156116ab573d6000803e3d6000fd5b505050565b600881565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561171357600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561176157600080fd5b3390506117b682600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461257c90919063ffffffff16565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061180e8260085461257c90919063ffffffff16565b6008819055506118298260095461257c90919063ffffffff16565b6009819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b60065481565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b67016345785d8a000081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561193857600080fd5b6119428282612595565b5050565b60075481565b600c5481565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119b157600080fd5b3091508173ffffffffffffffffffffffffffffffffffffffff16319050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611a36573d6000803e3d6000fd5b505050565b6040805190810160405280600681526020017f4e4157524153000000000000000000000000000000000000000000000000000081525081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ad257600080fd5b600d60149054906101000a900460ff16151515611aee57600080fd5b6001600d60146101000a81548160ff0219169083151502179055507f7f95d919e78bdebe8a285e6e33357c2fcb65ccf66e72d7573f9f8f6caad0c4cc60405160405180910390a16001905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b9857600080fd5b80600a819055507ff7729fa834bbef70b6d3257c2317a562aa88b56c81b544814f93dc5963a2c003816040518082815260200191505060405180910390a150565b6000604060048101600036905010151515611bf057fe5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515611c2c57600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515611c7a57600080fd5b611ccc83600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461257c90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d6183600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461256090919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b60046020528060005260406000206000915054906101000a900460ff1681565b600d60149054906101000a900460ff1681565b60008060008491508173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611eea57600080fd5b505af1158015611efe573d6000803e3d6000fd5b505050506040513d6020811015611f1457600080fd5b81019080805190602001909291905050509050809250505092915050565b600a5481565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561202057600080fd5b8391508173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156120be57600080fd5b505af11580156120d2573d6000803e3d6000fd5b505050506040513d60208110156120e857600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156121c057600080fd5b505af11580156121d4573d6000803e3d6000fd5b505050506040513d60208110156121ea57600080fd5b810190808051906020019092919050505092505050919050565b600b5481565b60095481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561226c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156122e45780600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561234557600080fd5b600090505b8383905081101561239657612389848483818110151561236657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1683612595565b808060010191505061234a565b50505050565b6000808314156123af57600090506123ce565b81830290508183828115156123c057fe5b041415156123ca57fe5b8090505b92915050565b6000600d60149054906101000a900460ff161515156123f257600080fd5b6124078260095461256090919063ffffffff16565b60098190555061245f82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461256090919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a77836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000818301905082811015151561257357fe5b80905092915050565b600082821115151561258a57fe5b818303905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156125f157600080fd5b60008111151561260057600080fd5b60085460095410151561261257600080fd5b61266481600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461256090919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506126bc8160095461256090919063ffffffff16565b6009819055506008546009541015156126eb576001600d60146101000a81548160ff0219169083151502179055505b8173ffffffffffffffffffffffffffffffffffffffff167fada993ad066837289fe186cd37227aa338d27519a8a1547472ecb9831486d27282600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808381526020018281526020019250505060405180910390a28173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350505600a165627a7a7230582089ef203bfeb509b3b347b6944ced49c17a1b10165da4d04cfe0db8be76d00f0a0029"
}