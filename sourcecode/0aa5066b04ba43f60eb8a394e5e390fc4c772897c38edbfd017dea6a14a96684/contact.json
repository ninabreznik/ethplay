{
  "address": "0x00000000037790973600b70888431f463bce360d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ExtendedJurisdiction",
  "compilerVersion": "v0.4.26+commit.4563c3fc",
  "optimization": true,
  "runs": "500",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-24\n*/\n\npragma solidity 0.4.26; // optimization enabled, runs: 500\n\n\n/************** TPL Extended Jurisdiction - YES token integration *************\n * This digital jurisdiction supports assigning YES token, or other contracts *\n * with a similar validation mechanism, as additional attribute validators.   *\n * https://github.com/TPL-protocol/tpl-contracts/tree/yes-token-integration   *\n * Implements an Attribute Registry https://github.com/0age/AttributeRegistry *\n *                                                                            *\n * Source layout:                                    Line #                   *\n *  - library ECDSA                                    41                     *\n *  - library SafeMath                                108                     *\n *  - library Roles                                   172                     *\n *  - contract PauserRole                             212                     *\n *    - using Roles for Roles.Role                                            *\n *  - contract Pausable                               257                     *\n *    - is PauserRole                                                         *\n *  - contract Ownable                                313                     *\n *  - interface AttributeRegistryInterface            386                     *\n *  - interface BasicJurisdictionInterface            440                     *\n *  - interface ExtendedJurisdictionInterface         658                     *\n *  - interface IERC20 (partial)                      926                     *\n *  - ExtendedJurisdiction                            934                     *\n *    - is Ownable                                                            *\n *    - is Pausable                                                           *\n *    - is AttributeRegistryInterface                                         *\n *    - is BasicJurisdictionInterface                                         *\n *    - is ExtendedJurisdictionInterface                                      *\n *    - using ECDSA for bytes32                                               *\n *    - using SafeMath for uint256                                            *\n *                                                                            *\n *  https://github.com/TPL-protocol/tpl-contracts/blob/master/LICENSE.md      *\n ******************************************************************************/\n\n\n/**\n * @title Elliptic curve signature operations\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\n * See https://github.com/ethereum/solidity/issues/864\n */\nlibrary ECDSA {\n  /**\n   * @dev Recover signer address from a message by using their signature\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n   * @param signature bytes signature, the signature is generated using web3.eth.sign()\n   */\n  function recover(bytes32 hash, bytes signature)\n    internal\n    pure\n    returns (address)\n  {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n\n    // Check the signature length\n    if (signature.length != 65) {\n      return (address(0));\n    }\n\n    // Divide the signature in r, s and v variables\n    // ecrecover takes the signature parameters, and the only way to get them\n    // currently is to use assembly.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n      r := mload(add(signature, 0x20))\n      s := mload(add(signature, 0x40))\n      v := byte(0, mload(add(signature, 0x60)))\n    }\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n    if (v < 27) {\n      v += 27;\n    }\n\n    // If the version is correct return the signer address\n    if (v != 27 && v != 28) {\n      return (address(0));\n    } else {\n      // solium-disable-next-line arg-overflow\n      return ecrecover(hash, v, r, s);\n    }\n  }\n\n  /**\n   * toEthSignedMessageHash\n   * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\n   * and hash the result\n   */\n  function toEthSignedMessageHash(bytes32 hash)\n    internal\n    pure\n    returns (bytes32)\n  {\n    // 32 is the length in bytes of hash,\n    // enforced by the type signature above\n    return keccak256(\n      abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)\n    );\n  }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\n\ncontract PauserRole {\n  using Roles for Roles.Role;\n\n  event PauserAdded(address indexed account);\n  event PauserRemoved(address indexed account);\n\n  Roles.Role private pausers;\n\n  constructor() internal {\n    _addPauser(msg.sender);\n  }\n\n  modifier onlyPauser() {\n    require(isPauser(msg.sender));\n    _;\n  }\n\n  function isPauser(address account) public view returns (bool) {\n    return pausers.has(account);\n  }\n\n  function addPauser(address account) public onlyPauser {\n    _addPauser(account);\n  }\n\n  function renouncePauser() public {\n    _removePauser(msg.sender);\n  }\n\n  function _addPauser(address account) internal {\n    pausers.add(account);\n    emit PauserAdded(account);\n  }\n\n  function _removePauser(address account) internal {\n    pausers.remove(account);\n    emit PauserRemoved(account);\n  }\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n  event Paused(address account);\n  event Unpaused(address account);\n\n  bool private _paused;\n\n  constructor() internal {\n    _paused = false;\n  }\n\n  /**\n   * @return true if the contract is paused, false otherwise.\n   */\n  function paused() public view returns(bool) {\n    return _paused;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!_paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(_paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyPauser whenNotPaused {\n    _paused = true;\n    emit Paused(msg.sender);\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyPauser whenPaused {\n    _paused = false;\n    emit Unpaused(msg.sender);\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n\n/**\n * @title Attribute Registry interface. EIP-165 ID: 0x5f46473f\n */\ninterface AttributeRegistryInterface {\n  /**\n   * @notice Check if an attribute of the type with ID `attributeTypeID` has\n   * been assigned to the account at `account` and is currently valid.\n   * @param account address The account to check for a valid attribute.\n   * @param attributeTypeID uint256 The ID of the attribute type to check for.\n   * @return True if the attribute is assigned and valid, false otherwise.\n   * @dev This function MUST return either true or false - i.e. calling this\n   * function MUST NOT cause the caller to revert.\n   */\n  function hasAttribute(\n    address account,\n    uint256 attributeTypeID\n  ) external view returns (bool);\n\n  /**\n   * @notice Retrieve the value of the attribute of the type with ID\n   * `attributeTypeID` on the account at `account`, assuming it is valid.\n   * @param account address The account to check for the given attribute value.\n   * @param attributeTypeID uint256 The ID of the attribute type to check for.\n   * @return The attribute value if the attribute is valid, reverts otherwise.\n   * @dev This function MUST revert if a directly preceding or subsequent\n   * function call to `hasAttribute` with identical `account` and\n   * `attributeTypeID` parameters would return false.\n   */\n  function getAttributeValue(\n    address account,\n    uint256 attributeTypeID\n  ) external view returns (uint256);\n\n  /**\n   * @notice Count the number of attribute types defined by the registry.\n   * @return The number of available attribute types.\n   * @dev This function MUST return a positive integer value  - i.e. calling\n   * this function MUST NOT cause the caller to revert.\n   */\n  function countAttributeTypes() external view returns (uint256);\n\n  /**\n   * @notice Get the ID of the attribute type at index `index`.\n   * @param index uint256 The index of the attribute type in question.\n   * @return The ID of the attribute type.\n   * @dev This function MUST revert if the provided `index` value falls outside\n   * of the range of the value returned from a directly preceding or subsequent\n   * function call to `countAttributeTypes`. It MUST NOT revert if the provided\n   * `index` value falls inside said range.\n   */\n  function getAttributeTypeID(uint256 index) external view returns (uint256);\n}\n\n\n/**\n * @title Basic TPL Jurisdiction Interface.\n */\ninterface BasicJurisdictionInterface {\n  // declare events\n  event AttributeTypeAdded(uint256 indexed attributeTypeID, string description);\n  \n  event AttributeTypeRemoved(uint256 indexed attributeTypeID);\n  \n  event ValidatorAdded(address indexed validator, string description);\n  \n  event ValidatorRemoved(address indexed validator);\n  \n  event ValidatorApprovalAdded(\n    address validator,\n    uint256 indexed attributeTypeID\n  );\n\n  event ValidatorApprovalRemoved(\n    address validator,\n    uint256 indexed attributeTypeID\n  );\n\n  event AttributeAdded(\n    address validator,\n    address indexed attributee,\n    uint256 attributeTypeID,\n    uint256 attributeValue\n  );\n\n  event AttributeRemoved(\n    address validator,\n    address indexed attributee,\n    uint256 attributeTypeID\n  );\n\n  /**\n  * @notice Add an attribute type with ID `ID` and description `description` to\n  * the jurisdiction.\n  * @param ID uint256 The ID of the attribute type to add.\n  * @param description string A description of the attribute type.\n  * @dev Once an attribute type is added with a given ID, the description of the\n  * attribute type cannot be changed, even if the attribute type is removed and\n  * added back later.\n  */\n  function addAttributeType(uint256 ID, string description) external;\n\n  /**\n  * @notice Remove the attribute type with ID `ID` from the jurisdiction.\n  * @param ID uint256 The ID of the attribute type to remove.\n  * @dev All issued attributes of the given type will become invalid upon\n  * removal, but will become valid again if the attribute is reinstated.\n  */\n  function removeAttributeType(uint256 ID) external;\n\n  /**\n  * @notice Add account `validator` as a validator with a description\n  * `description` who can be approved to set attributes of specific types.\n  * @param validator address The account to assign as the validator.\n  * @param description string A description of the validator.\n  * @dev Note that the jurisdiction can add iteslf as a validator if desired.\n  */\n  function addValidator(address validator, string description) external;\n\n  /**\n  * @notice Remove the validator at address `validator` from the jurisdiction.\n  * @param validator address The account of the validator to remove.\n  * @dev Any attributes issued by the validator will become invalid upon their\n  * removal. If the validator is reinstated, those attributes will become valid\n  * again. Any approvals to issue attributes of a given type will need to be\n  * set from scratch in the event a validator is reinstated.\n  */\n  function removeValidator(address validator) external;\n\n  /**\n  * @notice Approve the validator at address `validator` to issue attributes of\n  * the type with ID `attributeTypeID`.\n  * @param validator address The account of the validator to approve.\n  * @param attributeTypeID uint256 The ID of the approved attribute type.\n  */\n  function addValidatorApproval(\n    address validator,\n    uint256 attributeTypeID\n  ) external;\n\n  /**\n  * @notice Deny the validator at address `validator` the ability to continue to\n  * issue attributes of the type with ID `attributeTypeID`.\n  * @param validator address The account of the validator with removed approval.\n  * @param attributeTypeID uint256 The ID of the attribute type to unapprove.\n  * @dev Any attributes of the specified type issued by the validator in\n  * question will become invalid once the approval is removed. If the approval\n  * is reinstated, those attributes will become valid again. The approval will\n  * also be removed if the approved validator is removed.\n  */\n  function removeValidatorApproval(\n    address validator,\n    uint256 attributeTypeID\n  ) external;\n\n  /**\n  * @notice Issue an attribute of the type with ID `attributeTypeID` and a value\n  * of `value` to `account` if `message.caller.address()` is approved validator.\n  * @param account address The account to issue the attribute on.\n  * @param attributeTypeID uint256 The ID of the attribute type to issue.\n  * @param value uint256 An optional value for the issued attribute.\n  * @dev Existing attributes of the given type on the address must be removed\n  * in order to set a new attribute. Be aware that ownership of the account to\n  * which the attribute is assigned may still be transferable - restricting\n  * assignment to externally-owned accounts may partially alleviate this issue.\n  */\n  function issueAttribute(\n    address account,\n    uint256 attributeTypeID,\n    uint256 value\n  ) external payable;\n\n  /**\n  * @notice Revoke the attribute of the type with ID `attributeTypeID` from\n  * `account` if `message.caller.address()` is the issuing validator.\n  * @param account address The account to issue the attribute on.\n  * @param attributeTypeID uint256 The ID of the attribute type to issue.\n  * @dev Validators may still revoke issued attributes even after they have been\n  * removed or had their approval to issue the attribute type removed - this\n  * enables them to address any objectionable issuances before being reinstated.\n  */\n  function revokeAttribute(\n    address account,\n    uint256 attributeTypeID\n  ) external;\n\n  /**\n   * @notice Determine if a validator at account `validator` is able to issue\n   * attributes of the type with ID `attributeTypeID`.\n   * @param validator address The account of the validator.\n   * @param attributeTypeID uint256 The ID of the attribute type to check.\n   * @return True if the validator can issue attributes of the given type, false\n   * otherwise.\n   */\n  function canIssueAttributeType(\n    address validator,\n    uint256 attributeTypeID\n  ) external view returns (bool);\n\n  /**\n   * @notice Get a description of the attribute type with ID `attributeTypeID`.\n   * @param attributeTypeID uint256 The ID of the attribute type to check for.\n   * @return A description of the attribute type.\n   */\n  function getAttributeTypeDescription(\n    uint256 attributeTypeID\n  ) external view returns (string description);\n  \n  /**\n   * @notice Get a description of the validator at account `validator`.\n   * @param validator address The account of the validator in question.\n   * @return A description of the validator.\n   */\n  function getValidatorDescription(\n    address validator\n  ) external view returns (string description);\n\n  /**\n   * @notice Find the validator that issued the attribute of the type with ID\n   * `attributeTypeID` on the account at `account` and determine if the\n   * validator is still valid.\n   * @param account address The account that contains the attribute be checked.\n   * @param attributeTypeID uint256 The ID of the attribute type in question.\n   * @return The validator and the current status of the validator as it\n   * pertains to the attribute type in question.\n   * @dev if no attribute of the given attribute type exists on the account, the\n   * function will return (address(0), false).\n   */\n  function getAttributeValidator(\n    address account,\n    uint256 attributeTypeID\n  ) external view returns (address validator, bool isStillValid);\n\n  /**\n   * @notice Count the number of attribute types defined by the jurisdiction.\n   * @return The number of available attribute types.\n   */\n  function countAttributeTypes() external view returns (uint256);\n\n  /**\n   * @notice Get the ID of the attribute type at index `index`.\n   * @param index uint256 The index of the attribute type in question.\n   * @return The ID of the attribute type.\n   */\n  function getAttributeTypeID(uint256 index) external view returns (uint256);\n\n  /**\n   * @notice Get the IDs of all available attribute types on the jurisdiction.\n   * @return A dynamic array containing all available attribute type IDs.\n   */\n  function getAttributeTypeIDs() external view returns (uint256[]);\n\n  /**\n   * @notice Count the number of validators defined by the jurisdiction.\n   * @return The number of defined validators.\n   */\n  function countValidators() external view returns (uint256);\n\n  /**\n   * @notice Get the account of the validator at index `index`.\n   * @param index uint256 The index of the validator in question.\n   * @return The account of the validator.\n   */\n  function getValidator(uint256 index) external view returns (address);\n\n  /**\n   * @notice Get the accounts of all available validators on the jurisdiction.\n   * @return A dynamic array containing all available validator accounts.\n   */\n  function getValidators() external view returns (address[]);\n}\n\n/**\n * @title Extended TPL Jurisdiction Interface.\n * @dev this extends BasicJurisdictionInterface for additional functionality.\n */\ninterface ExtendedJurisdictionInterface {\n  // declare events (NOTE: consider which fields should be indexed)\n  event ValidatorSigningKeyModified(\n    address indexed validator,\n    address newSigningKey\n  );\n\n  event StakeAllocated(\n    address indexed staker,\n    uint256 indexed attribute,\n    uint256 amount\n  );\n\n  event StakeRefunded(\n    address indexed staker,\n    uint256 indexed attribute,\n    uint256 amount\n  );\n\n  event FeePaid(\n    address indexed recipient,\n    address indexed payee,\n    uint256 indexed attribute,\n    uint256 amount\n  );\n  \n  event TransactionRebatePaid(\n    address indexed submitter,\n    address indexed payee,\n    uint256 indexed attribute,\n    uint256 amount\n  );\n\n  /**\n  * @notice Add a restricted attribute type with ID `ID` and description\n  * `description` to the jurisdiction. Restricted attribute types can only be\n  * removed by the issuing validator or the jurisdiction.\n  * @param ID uint256 The ID of the restricted attribute type to add.\n  * @param description string A description of the restricted attribute type.\n  * @dev Once an attribute type is added with a given ID, the description or the\n  * restricted status of the attribute type cannot be changed, even if the\n  * attribute type is removed and added back later.\n  */\n  function addRestrictedAttributeType(uint256 ID, string description) external;\n\n  /**\n  * @notice Enable or disable a restriction for a given attribute type ID `ID`\n  * that prevents attributes of the given type from being set by operators based\n  * on the provided value for `onlyPersonal`.\n  * @param ID uint256 The attribute type ID in question.\n  * @param onlyPersonal bool Whether the address may only be set personally.\n  */\n  function setAttributeTypeOnlyPersonal(uint256 ID, bool onlyPersonal) external;\n\n  /**\n  * @notice Set a secondary source for a given attribute type ID `ID`, with an\n  * address `registry` of the secondary source in question and a given\n  * `sourceAttributeTypeID` for attribute type ID to check on the secondary\n  * source. The secondary source will only be checked for the given attribute in\n  * cases where no attribute of the given attribute type ID is assigned locally.\n  * @param ID uint256 The attribute type ID to set the secondary source for.\n  * @param attributeRegistry address The secondary attribute registry account.\n  * @param sourceAttributeTypeID uint256 The attribute type ID on the secondary\n  * source to check.\n  * @dev To remove a secondary source on an attribute type, the registry address\n  * should be set to the null address.\n  */\n  function setAttributeTypeSecondarySource(\n    uint256 ID,\n    address attributeRegistry,\n    uint256 sourceAttributeTypeID\n  ) external;\n\n  /**\n  * @notice Set a minimum required stake for a given attribute type ID `ID` and\n  * an amount of `stake`, to be locked in the jurisdiction upon assignment of\n  * attributes of the given type. The stake will be applied toward a transaction\n  * rebate in the event the attribute is revoked, with the remainder returned to\n  * the staker.\n  * @param ID uint256 The attribute type ID to set a minimum required stake for.\n  * @param minimumRequiredStake uint256 The minimum required funds to lock up.\n  * @dev To remove a stake requirement from an attribute type, the stake amount\n  * should be set to 0.\n  */\n  function setAttributeTypeMinimumRequiredStake(\n    uint256 ID,\n    uint256 minimumRequiredStake\n  ) external;\n\n  /**\n  * @notice Set a required fee for a given attribute type ID `ID` and an amount\n  * of `fee`, to be paid to the owner of the jurisdiction upon assignment of\n  * attributes of the given type.\n  * @param ID uint256 The attribute type ID to set the required fee for.\n  * @param fee uint256 The required fee amount to be paid upon assignment.\n  * @dev To remove a fee requirement from an attribute type, the fee amount\n  * should be set to 0.\n  */\n  function setAttributeTypeJurisdictionFee(uint256 ID, uint256 fee) external;\n\n  /**\n  * @notice Set the public address associated with a validator signing key, used\n  * to sign off-chain attribute approvals, as `newSigningKey`.\n  * @param newSigningKey address The address associated with signing key to set.\n  */\n  function setValidatorSigningKey(address newSigningKey) external;\n\n  /**\n  * @notice Add an attribute of the type with ID `attributeTypeID`, an attribute\n  * value of `value`, and an associated validator fee of `validatorFee` to\n  * account of `msg.sender` by passing in a signed attribute approval with\n  * signature `signature`.\n  * @param attributeTypeID uint256 The ID of the attribute type to add.\n  * @param value uint256 The value for the attribute to add.\n  * @param validatorFee uint256 The fee to be paid to the issuing validator.\n  * @param signature bytes The signature from the validator attribute approval.\n  */\n  function addAttribute(\n    uint256 attributeTypeID,\n    uint256 value,\n    uint256 validatorFee,\n    bytes signature\n  ) external payable;\n\n  /**\n  * @notice Remove an attribute of the type with ID `attributeTypeID` from\n  * account of `msg.sender`.\n  * @param attributeTypeID uint256 The ID of the attribute type to remove.\n  */\n  function removeAttribute(uint256 attributeTypeID) external;\n\n  /**\n  * @notice Add an attribute of the type with ID `attributeTypeID`, an attribute\n  * value of `value`, and an associated validator fee of `validatorFee` to\n  * account `account` by passing in a signed attribute approval with signature\n  * `signature`.\n  * @param account address The account to add the attribute to.\n  * @param attributeTypeID uint256 The ID of the attribute type to add.\n  * @param value uint256 The value for the attribute to add.\n  * @param validatorFee uint256 The fee to be paid to the issuing validator.\n  * @param signature bytes The signature from the validator attribute approval.\n  * @dev Restricted attribute types can only be removed by issuing validators or\n  * the jurisdiction itself.\n  */\n  function addAttributeFor(\n    address account,\n    uint256 attributeTypeID,\n    uint256 value,\n    uint256 validatorFee,\n    bytes signature\n  ) external payable;\n\n  /**\n  * @notice Remove an attribute of the type with ID `attributeTypeID` from\n  * account of `account`.\n  * @param account address The account to remove the attribute from.\n  * @param attributeTypeID uint256 The ID of the attribute type to remove.\n  * @dev Restricted attribute types can only be removed by issuing validators or\n  * the jurisdiction itself.\n  */\n  function removeAttributeFor(address account, uint256 attributeTypeID) external;\n\n  /**\n   * @notice Invalidate a signed attribute approval before it has been set by\n   * supplying the hash of the approval `hash` and the signature `signature`.\n   * @param hash bytes32 The hash of the attribute approval.\n   * @param signature bytes The hash's signature, resolving to the signing key.\n   * @dev Attribute approvals can only be removed by issuing validators or the\n   * jurisdiction itself.\n   */\n  function invalidateAttributeApproval(\n    bytes32 hash,\n    bytes signature\n  ) external;\n\n  /**\n   * @notice Get the hash of a given attribute approval.\n   * @param account address The account specified by the attribute approval.\n   * @param operator address An optional account permitted to submit approval.\n   * @param attributeTypeID uint256 The ID of the attribute type in question.\n   * @param value uint256 The value of the attribute in the approval.\n   * @param fundsRequired uint256 The amount to be included with the approval.\n   * @param validatorFee uint256 The required fee to be paid to the validator.\n   * @return The hash of the attribute approval.\n   */\n  function getAttributeApprovalHash(\n    address account,\n    address operator,\n    uint256 attributeTypeID,\n    uint256 value,\n    uint256 fundsRequired,\n    uint256 validatorFee\n  ) external view returns (bytes32 hash);\n\n  /**\n   * @notice Check if a given signed attribute approval is currently valid when\n   * submitted directly by `msg.sender`.\n   * @param attributeTypeID uint256 The ID of the attribute type in question.\n   * @param value uint256 The value of the attribute in the approval.\n   * @param fundsRequired uint256 The amount to be included with the approval.\n   * @param validatorFee uint256 The required fee to be paid to the validator.\n   * @param signature bytes The attribute approval signature, based on a hash of\n   * the other parameters and the submitting account.\n   * @return True if the approval is currently valid, false otherwise.\n   */\n  function canAddAttribute(\n    uint256 attributeTypeID,\n    uint256 value,\n    uint256 fundsRequired,\n    uint256 validatorFee,\n    bytes signature\n  ) external view returns (bool);\n\n  /**\n   * @notice Check if a given signed attribute approval is currently valid for a\n   * given account when submitted by the operator at `msg.sender`.\n   * @param account address The account specified by the attribute approval.\n   * @param attributeTypeID uint256 The ID of the attribute type in question.\n   * @param value uint256 The value of the attribute in the approval.\n   * @param fundsRequired uint256 The amount to be included with the approval.\n   * @param validatorFee uint256 The required fee to be paid to the validator.\n   * @param signature bytes The attribute approval signature, based on a hash of\n   * the other parameters and the submitting account.\n   * @return True if the approval is currently valid, false otherwise.\n   */\n  function canAddAttributeFor(\n    address account,\n    uint256 attributeTypeID,\n    uint256 value,\n    uint256 fundsRequired,\n    uint256 validatorFee,\n    bytes signature\n  ) external view returns (bool);\n\n  /**\n   * @notice Get comprehensive information on an attribute type with ID\n   * `attributeTypeID`.\n   * @param attributeTypeID uint256 The attribute type ID in question.\n   * @return Information on the attribute type in question.\n   */\n  function getAttributeTypeInformation(\n    uint256 attributeTypeID\n  ) external view returns (\n    string description,\n    bool isRestricted,\n    bool isOnlyPersonal,\n    address secondarySource,\n    uint256 secondaryId,\n    uint256 minimumRequiredStake,\n    uint256 jurisdictionFee\n  );\n  \n  /**\n   * @notice Get a validator's signing key.\n   * @param validator address The account of the validator.\n   * @return The account referencing the public component of the signing key.\n   */\n  function getValidatorSigningKey(\n    address validator\n  ) external view returns (\n    address signingKey\n  );\n}\n\n/**\n * @title Interface for checking attribute assignment on YES token and for token\n * recovery.\n */\ninterface IERC20 {\n  function balanceOf(address) external view returns (uint256);\n  function transfer(address, uint256) external returns (bool);\n}\n\n/**\n * @title An extended TPL jurisdiction for assigning attributes to addresses.\n */\ncontract ExtendedJurisdiction is Ownable, Pausable, AttributeRegistryInterface, BasicJurisdictionInterface, ExtendedJurisdictionInterface {\n  using ECDSA for bytes32;\n  using SafeMath for uint256;\n\n  // validators are entities who can add or authorize addition of new attributes\n  struct Validator {\n    bool exists;\n    uint256 index; // NOTE: consider use of uint88 to pack struct\n    address signingKey;\n    string description;\n  }\n\n  // attributes are properties that validators associate with specific addresses\n  struct IssuedAttribute {\n    bool exists;\n    bool setPersonally;\n    address operator;\n    address validator;\n    uint256 value;\n    uint256 stake;\n  }\n\n  // attributes also have associated type - metadata common to each attribute\n  struct AttributeType {\n    bool exists;\n    bool restricted;\n    bool onlyPersonal;\n    uint256 index; // NOTE: consider use of uint72 to pack struct\n    address secondarySource;\n    uint256 secondaryAttributeTypeID;\n    uint256 minimumStake;\n    uint256 jurisdictionFee;\n    string description;\n    mapping(address => bool) approvedValidators;\n  }\n\n  // top-level information about attribute types is held in a mapping of structs\n  mapping(uint256 => AttributeType) private _attributeTypes;\n\n  // the jurisdiction retains a mapping of addresses with assigned attributes\n  mapping(address => mapping(uint256 => IssuedAttribute)) private _issuedAttributes;\n\n  // there is also a mapping to identify all approved validators and their keys\n  mapping(address => Validator) private _validators;\n\n  // each registered signing key maps back to a specific validator\n  mapping(address => address) private _signingKeys;\n\n  // once attribute types are assigned to an ID, they cannot be modified\n  mapping(uint256 => bytes32) private _attributeTypeHashes;\n\n  // submitted attribute approvals are retained to prevent reuse after removal \n  mapping(bytes32 => bool) private _invalidAttributeApprovalHashes;\n\n  // attribute approvals by validator are held in a mapping\n  mapping(address => uint256[]) private _validatorApprovals;\n\n   // attribute approval index by validator is tracked as well\n  mapping(address => mapping(uint256 => uint256)) private _validatorApprovalsIndex;\n\n  // IDs for all supplied attributes are held in an array (enables enumeration)\n  uint256[] private _attributeIDs;\n\n  // addresses for all designated validators are also held in an array\n  address[] private _validatorAccounts;\n\n  // track any recoverable funds locked in the contract \n  uint256 private _recoverableFunds;\n\n  /**\n  * @notice Add an attribute type with ID `ID` and description `description` to\n  * the jurisdiction.\n  * @param ID uint256 The ID of the attribute type to add.\n  * @param description string A description of the attribute type.\n  * @dev Once an attribute type is added with a given ID, the description of the\n  * attribute type cannot be changed, even if the attribute type is removed and\n  * added back later.\n  */\n  function addAttributeType(\n    uint256 ID,\n    string description\n  ) external onlyOwner whenNotPaused {\n    // prevent existing attributes with the same id from being overwritten\n    require(\n      !isAttributeType(ID),\n      \"an attribute type with the provided ID already exists\"\n    );\n\n    // calculate a hash of the attribute type based on the type's properties\n    bytes32 hash = keccak256(\n      abi.encodePacked(\n        ID, false, description\n      )\n    );\n\n    // store hash if attribute type is the first one registered with provided ID\n    if (_attributeTypeHashes[ID] == bytes32(0)) {\n      _attributeTypeHashes[ID] = hash;\n    }\n\n    // prevent addition if different attribute type with the same ID has existed\n    require(\n      hash == _attributeTypeHashes[ID],\n      \"attribute type properties must match initial properties assigned to ID\"\n    );\n\n    // set the attribute mapping, assigning the index as the end of attributeID\n    _attributeTypes[ID] = AttributeType({\n      exists: true,\n      restricted: false, // when true: users can't remove attribute\n      onlyPersonal: false, // when true: operators can't add attribute\n      index: _attributeIDs.length,\n      secondarySource: address(0), // the address of a remote registry\n      secondaryAttributeTypeID: uint256(0), // the attribute type id to query\n      minimumStake: uint256(0), // when > 0: users must stake ether to set\n      jurisdictionFee: uint256(0),\n      description: description\n      // NOTE: no approvedValidators variable declaration - must be added later\n    });\n    \n    // add the attribute type id to the end of the attributeID array\n    _attributeIDs.push(ID);\n\n    // log the addition of the attribute type\n    emit AttributeTypeAdded(ID, description);\n  }\n\n  /**\n  * @notice Add a restricted attribute type with ID `ID` and description\n  * `description` to the jurisdiction. Restricted attribute types can only be\n  * removed by the issuing validator or the jurisdiction.\n  * @param ID uint256 The ID of the restricted attribute type to add.\n  * @param description string A description of the restricted attribute type.\n  * @dev Once an attribute type is added with a given ID, the description or the\n  * restricted status of the attribute type cannot be changed, even if the\n  * attribute type is removed and added back later.\n  */\n  function addRestrictedAttributeType(\n    uint256 ID,\n    string description\n  ) external onlyOwner whenNotPaused {\n    // prevent existing attributes with the same id from being overwritten\n    require(\n      !isAttributeType(ID),\n      \"an attribute type with the provided ID already exists\"\n    );\n\n    // calculate a hash of the attribute type based on the type's properties\n    bytes32 hash = keccak256(\n      abi.encodePacked(\n        ID, true, description\n      )\n    );\n\n    // store hash if attribute type is the first one registered with provided ID\n    if (_attributeTypeHashes[ID] == bytes32(0)) {\n      _attributeTypeHashes[ID] = hash;\n    }\n\n    // prevent addition if different attribute type with the same ID has existed\n    require(\n      hash == _attributeTypeHashes[ID],\n      \"attribute type properties must match initial properties assigned to ID\"\n    );\n\n    // set the attribute mapping, assigning the index as the end of attributeID\n    _attributeTypes[ID] = AttributeType({\n      exists: true,\n      restricted: true, // when true: users can't remove attribute\n      onlyPersonal: false, // when true: operators can't add attribute\n      index: _attributeIDs.length,\n      secondarySource: address(0), // the address of a remote registry\n      secondaryAttributeTypeID: uint256(0), // the attribute type id to query\n      minimumStake: uint256(0), // when > 0: users must stake ether to set\n      jurisdictionFee: uint256(0),\n      description: description\n      // NOTE: no approvedValidators variable declaration - must be added later\n    });\n    \n    // add the attribute type id to the end of the attributeID array\n    _attributeIDs.push(ID);\n\n    // log the addition of the attribute type\n    emit AttributeTypeAdded(ID, description);\n  }\n\n  /**\n  * @notice Enable or disable a restriction for a given attribute type ID `ID`\n  * that prevents attributes of the given type from being set by operators based\n  * on the provided value for `onlyPersonal`.\n  * @param ID uint256 The attribute type ID in question.\n  * @param onlyPersonal bool Whether the address may only be set personally.\n  */\n  function setAttributeTypeOnlyPersonal(uint256 ID, bool onlyPersonal) external {\n    // if the attribute type ID does not exist, there is nothing to remove\n    require(\n      isAttributeType(ID),\n      \"unable to set to only personal, no attribute type with the provided ID\"\n    );\n\n    // modify the attribute type in the mapping\n    _attributeTypes[ID].onlyPersonal = onlyPersonal;\n  }\n\n  /**\n  * @notice Set a secondary source for a given attribute type ID `ID`, with an\n  * address `registry` of the secondary source in question and a given\n  * `sourceAttributeTypeID` for attribute type ID to check on the secondary\n  * source. The secondary source will only be checked for the given attribute in\n  * cases where no attribute of the given attribute type ID is assigned locally.\n  * @param ID uint256 The attribute type ID to set the secondary source for.\n  * @param attributeRegistry address The secondary attribute registry account.\n  * @param sourceAttributeTypeID uint256 The attribute type ID on the secondary\n  * source to check.\n  * @dev To remove a secondary source on an attribute type, the registry address\n  * should be set to the null address.\n  */\n  function setAttributeTypeSecondarySource(\n    uint256 ID,\n    address attributeRegistry,\n    uint256 sourceAttributeTypeID\n  ) external {\n    // if the attribute type ID does not exist, there is nothing to remove\n    require(\n      isAttributeType(ID),\n      \"unable to set secondary source, no attribute type with the provided ID\"\n    );\n\n    // modify the attribute type in the mapping\n    _attributeTypes[ID].secondarySource = attributeRegistry;\n    _attributeTypes[ID].secondaryAttributeTypeID = sourceAttributeTypeID;\n  }\n\n  /**\n  * @notice Set a minimum required stake for a given attribute type ID `ID` and\n  * an amount of `stake`, to be locked in the jurisdiction upon assignment of\n  * attributes of the given type. The stake will be applied toward a transaction\n  * rebate in the event the attribute is revoked, with the remainder returned to\n  * the staker.\n  * @param ID uint256 The attribute type ID to set a minimum required stake for.\n  * @param minimumRequiredStake uint256 The minimum required funds to lock up.\n  * @dev To remove a stake requirement from an attribute type, the stake amount\n  * should be set to 0.\n  */\n  function setAttributeTypeMinimumRequiredStake(\n    uint256 ID,\n    uint256 minimumRequiredStake\n  ) external {\n    // if the attribute type ID does not exist, there is nothing to remove\n    require(\n      isAttributeType(ID),\n      \"unable to set minimum stake, no attribute type with the provided ID\"\n    );\n\n    // modify the attribute type in the mapping\n    _attributeTypes[ID].minimumStake = minimumRequiredStake;\n  }\n\n  /**\n  * @notice Set a required fee for a given attribute type ID `ID` and an amount\n  * of `fee`, to be paid to the owner of the jurisdiction upon assignment of\n  * attributes of the given type.\n  * @param ID uint256 The attribute type ID to set the required fee for.\n  * @param fee uint256 The required fee amount to be paid upon assignment.\n  * @dev To remove a fee requirement from an attribute type, the fee amount\n  * should be set to 0.\n  */\n  function setAttributeTypeJurisdictionFee(uint256 ID, uint256 fee) external {\n    // if the attribute type ID does not exist, there is nothing to remove\n    require(\n      isAttributeType(ID),\n      \"unable to set fee, no attribute type with the provided ID\"\n    );\n\n    // modify the attribute type in the mapping\n    _attributeTypes[ID].jurisdictionFee = fee;\n  }\n\n  /**\n  * @notice Remove the attribute type with ID `ID` from the jurisdiction.\n  * @param ID uint256 The ID of the attribute type to remove.\n  * @dev All issued attributes of the given type will become invalid upon\n  * removal, but will become valid again if the attribute is reinstated.\n  */\n  function removeAttributeType(uint256 ID) external onlyOwner whenNotPaused {\n    // if the attribute type ID does not exist, there is nothing to remove\n    require(\n      isAttributeType(ID),\n      \"unable to remove, no attribute type with the provided ID\"\n    );\n\n    // get the attribute ID at the last index of the array\n    uint256 lastAttributeID = _attributeIDs[_attributeIDs.length.sub(1)];\n\n    // set the attributeID at attribute-to-delete.index to the last attribute ID\n    _attributeIDs[_attributeTypes[ID].index] = lastAttributeID;\n\n    // update the index of the attribute type that was moved\n    _attributeTypes[lastAttributeID].index = _attributeTypes[ID].index;\n    \n    // remove the (now duplicate) attribute ID at the end by trimming the array\n    _attributeIDs.length--;\n\n    // delete the attribute type's record from the mapping\n    delete _attributeTypes[ID];\n\n    // log the removal of the attribute type\n    emit AttributeTypeRemoved(ID);\n  }\n\n  /**\n  * @notice Add account `validator` as a validator with a description\n  * `description` who can be approved to set attributes of specific types.\n  * @param validator address The account to assign as the validator.\n  * @param description string A description of the validator.\n  * @dev Note that the jurisdiction can add iteslf as a validator if desired.\n  */\n  function addValidator(\n    address validator,\n    string description\n  ) external onlyOwner whenNotPaused {\n    // check that an empty address was not provided by mistake\n    require(validator != address(0), \"must supply a valid address\");\n\n    // prevent existing validators from being overwritten\n    require(\n      !isValidator(validator),\n      \"a validator with the provided address already exists\"\n    );\n\n    // prevent duplicate signing keys from being created\n    require(\n      _signingKeys[validator] == address(0),\n      \"a signing key matching the provided address already exists\"\n    );\n    \n    // create a record for the validator\n    _validators[validator] = Validator({\n      exists: true,\n      index: _validatorAccounts.length,\n      signingKey: validator, // NOTE: this will be initially set to same address\n      description: description\n    });\n\n    // set the initial signing key (the validator's address) resolving to itself\n    _signingKeys[validator] = validator;\n\n    // add the validator to the end of the _validatorAccounts array\n    _validatorAccounts.push(validator);\n    \n    // log the addition of the new validator\n    emit ValidatorAdded(validator, description);\n  }\n\n  /**\n  * @notice Remove the validator at address `validator` from the jurisdiction.\n  * @param validator address The account of the validator to remove.\n  * @dev Any attributes issued by the validator will become invalid upon their\n  * removal. If the validator is reinstated, those attributes will become valid\n  * again. Any approvals to issue attributes of a given type will need to be\n  * set from scratch in the event a validator is reinstated.\n  */\n  function removeValidator(address validator) external onlyOwner whenNotPaused {\n    // check that a validator exists at the provided address\n    require(\n      isValidator(validator),\n      \"unable to remove, no validator located at the provided address\"\n    );\n\n    // first, start removing validator approvals until gas is exhausted\n    while (_validatorApprovals[validator].length > 0 && gasleft() > 25000) {\n      // locate the index of last attribute ID in the validator approval group\n      uint256 lastIndex = _validatorApprovals[validator].length.sub(1);\n\n      // locate the validator approval to be removed\n      uint256 targetApproval = _validatorApprovals[validator][lastIndex];\n\n      // remove the record of the approval from the associated attribute type\n      delete _attributeTypes[targetApproval].approvedValidators[validator];\n\n      // remove the record of the index of the approval\n      delete _validatorApprovalsIndex[validator][targetApproval];\n\n      // drop the last attribute ID from the validator approval group\n      _validatorApprovals[validator].length--;\n    }\n\n    // require that all approvals were successfully removed\n    require(\n      _validatorApprovals[validator].length == 0,\n      \"Cannot remove validator - first remove any existing validator approvals\"\n    );\n\n    // get the validator address at the last index of the array\n    address lastAccount = _validatorAccounts[_validatorAccounts.length.sub(1)];\n\n    // set the address at validator-to-delete.index to last validator address\n    _validatorAccounts[_validators[validator].index] = lastAccount;\n\n    // update the index of the attribute type that was moved\n    _validators[lastAccount].index = _validators[validator].index;\n    \n    // remove (duplicate) validator address at the end by trimming the array\n    _validatorAccounts.length--;\n\n    // remove the validator's signing key from its mapping\n    delete _signingKeys[_validators[validator].signingKey];\n\n    // remove the validator record\n    delete _validators[validator];\n\n    // log the removal of the validator\n    emit ValidatorRemoved(validator);\n  }\n\n  /**\n  * @notice Approve the validator at address `validator` to issue attributes of\n  * the type with ID `attributeTypeID`.\n  * @param validator address The account of the validator to approve.\n  * @param attributeTypeID uint256 The ID of the approved attribute type.\n  */\n  function addValidatorApproval(\n    address validator,\n    uint256 attributeTypeID\n  ) external onlyOwner whenNotPaused {\n    // check that the attribute is predefined and that the validator exists\n    require(\n      isValidator(validator) && isAttributeType(attributeTypeID),\n      \"must specify both a valid attribute and an available validator\"\n    );\n\n    // check that the validator is not already approved\n    require(\n      !_attributeTypes[attributeTypeID].approvedValidators[validator],\n      \"validator is already approved on the provided attribute\"\n    );\n\n    // set the validator approval status on the attribute\n    _attributeTypes[attributeTypeID].approvedValidators[validator] = true;\n\n    // add the record of the index of the validator approval to be added\n    uint256 index = _validatorApprovals[validator].length;\n    _validatorApprovalsIndex[validator][attributeTypeID] = index;\n\n    // include the attribute type in the validator approval mapping\n    _validatorApprovals[validator].push(attributeTypeID);\n\n    // log the addition of the validator's attribute type approval\n    emit ValidatorApprovalAdded(validator, attributeTypeID);\n  }\n\n  /**\n  * @notice Deny the validator at address `validator` the ability to continue to\n  * issue attributes of the type with ID `attributeTypeID`.\n  * @param validator address The account of the validator with removed approval.\n  * @param attributeTypeID uint256 The ID of the attribute type to unapprove.\n  * @dev Any attributes of the specified type issued by the validator in\n  * question will become invalid once the approval is removed. If the approval\n  * is reinstated, those attributes will become valid again. The approval will\n  * also be removed if the approved validator is removed.\n  */\n  function removeValidatorApproval(\n    address validator,\n    uint256 attributeTypeID\n  ) external onlyOwner whenNotPaused {\n    // check that the attribute is predefined and that the validator exists\n    require(\n      canValidate(validator, attributeTypeID),\n      \"unable to remove validator approval, attribute is already unapproved\"\n    );\n\n    // remove the validator approval status from the attribute\n    delete _attributeTypes[attributeTypeID].approvedValidators[validator];\n\n    // locate the index of the last validator approval\n    uint256 lastIndex = _validatorApprovals[validator].length.sub(1);\n\n    // locate the last attribute ID in the validator approval group\n    uint256 lastAttributeID = _validatorApprovals[validator][lastIndex];\n\n    // locate the index of the validator approval to be removed\n    uint256 index = _validatorApprovalsIndex[validator][attributeTypeID];\n\n    // replace the validator approval with the last approval in the array\n    _validatorApprovals[validator][index] = lastAttributeID;\n\n    // drop the last attribute ID from the validator approval group\n    _validatorApprovals[validator].length--;\n\n    // update the record of the index of the swapped-in approval\n    _validatorApprovalsIndex[validator][lastAttributeID] = index;\n\n    // remove the record of the index of the removed approval\n    delete _validatorApprovalsIndex[validator][attributeTypeID];\n    \n    // log the removal of the validator's attribute type approval\n    emit ValidatorApprovalRemoved(validator, attributeTypeID);\n  }\n\n  /**\n  * @notice Set the public address associated with a validator signing key, used\n  * to sign off-chain attribute approvals, as `newSigningKey`.\n  * @param newSigningKey address The address associated with signing key to set.\n  * @dev Consider having the validator submit a signed proof demonstrating that\n  * the provided signing key is indeed a signing key in their control - this\n  * helps mitigate the fringe attack vector where a validator could set the\n  * address of another validator candidate (especially in the case of a deployed\n  * smart contract) as their \"signing key\" in order to block them from being\n  * added to the jurisdiction (due to the required property of signing keys\n  * being unique, coupled with the fact that new validators are set up with\n  * their address as the default initial signing key).\n  */\n  function setValidatorSigningKey(address newSigningKey) external {\n    require(\n      isValidator(msg.sender),\n      \"only validators may modify validator signing keys\");\n \n    // prevent duplicate signing keys from being created\n    require(\n      _signingKeys[newSigningKey] == address(0),\n      \"a signing key matching the provided address already exists\"\n    );\n\n    // remove validator address as the resolved value for the old key\n    delete _signingKeys[_validators[msg.sender].signingKey];\n\n    // set the signing key to the new value\n    _validators[msg.sender].signingKey = newSigningKey;\n\n    // add validator address as the resolved value for the new key\n    _signingKeys[newSigningKey] = msg.sender;\n\n    // log the modification of the signing key\n    emit ValidatorSigningKeyModified(msg.sender, newSigningKey);\n  }\n\n  /**\n  * @notice Issue an attribute of the type with ID `attributeTypeID` and a value\n  * of `value` to `account` if `message.caller.address()` is approved validator.\n  * @param account address The account to issue the attribute on.\n  * @param attributeTypeID uint256 The ID of the attribute type to issue.\n  * @param value uint256 An optional value for the issued attribute.\n  * @dev Existing attributes of the given type on the address must be removed\n  * in order to set a new attribute. Be aware that ownership of the account to\n  * which the attribute is assigned may still be transferable - restricting\n  * assignment to externally-owned accounts may partially alleviate this issue.\n  */\n  function issueAttribute(\n    address account,\n    uint256 attributeTypeID,\n    uint256 value\n  ) external payable whenNotPaused {\n    require(\n      canValidate(msg.sender, attributeTypeID),\n      \"only approved validators may assign attributes of this type\"\n    );\n\n    require(\n      !_issuedAttributes[account][attributeTypeID].exists,\n      \"duplicate attributes are not supported, remove existing attribute first\"\n    );\n\n    // retrieve required minimum stake and jurisdiction fees on attribute type\n    uint256 minimumStake = _attributeTypes[attributeTypeID].minimumStake;\n    uint256 jurisdictionFee = _attributeTypes[attributeTypeID].jurisdictionFee;\n    uint256 stake = msg.value.sub(jurisdictionFee);\n\n    require(\n      stake >= minimumStake,\n      \"attribute requires a greater value than is currently provided\"\n    );\n\n    // store attribute value and amount of ether staked in correct scope\n    _issuedAttributes[account][attributeTypeID] = IssuedAttribute({\n      exists: true,\n      setPersonally: false,\n      operator: address(0),\n      validator: msg.sender,\n      value: value,\n      stake: stake\n    });\n\n    // log the addition of the attribute\n    emit AttributeAdded(msg.sender, account, attributeTypeID, value);\n\n    // log allocation of staked funds to the attribute if applicable\n    if (stake > 0) {\n      emit StakeAllocated(msg.sender, attributeTypeID, stake);\n    }\n\n    // pay jurisdiction fee to the owner of the jurisdiction if applicable\n    if (jurisdictionFee > 0) {\n      // NOTE: send is chosen over transfer to prevent cases where a improperly\n      // configured fallback function could block addition of an attribute\n      if (owner().send(jurisdictionFee)) {\n        emit FeePaid(owner(), msg.sender, attributeTypeID, jurisdictionFee);\n      } else {\n        _recoverableFunds = _recoverableFunds.add(jurisdictionFee);\n      }\n    }\n  }\n\n  /**\n  * @notice Revoke the attribute of the type with ID `attributeTypeID` from\n  * `account` if `message.caller.address()` is the issuing validator.\n  * @param account address The account to issue the attribute on.\n  * @param attributeTypeID uint256 The ID of the attribute type to issue.\n  * @dev Validators may still revoke issued attributes even after they have been\n  * removed or had their approval to issue the attribute type removed - this\n  * enables them to address any objectionable issuances before being reinstated.\n  */\n  function revokeAttribute(\n    address account,\n    uint256 attributeTypeID\n  ) external whenNotPaused {\n    // ensure that an attribute with the given account and attribute exists\n    require(\n      _issuedAttributes[account][attributeTypeID].exists,\n      \"only existing attributes may be removed\"\n    );\n\n    // determine the assigned validator on the user attribute\n    address validator = _issuedAttributes[account][attributeTypeID].validator;\n    \n    // caller must be either the jurisdiction owner or the assigning validator\n    require(\n      msg.sender == validator || msg.sender == owner(),\n      \"only jurisdiction or issuing validators may revoke arbitrary attributes\"\n    );\n\n    // determine if attribute has any stake in order to refund transaction fee\n    uint256 stake = _issuedAttributes[account][attributeTypeID].stake;\n\n    // determine the correct address to refund the staked amount to\n    address refundAddress;\n    if (_issuedAttributes[account][attributeTypeID].setPersonally) {\n      refundAddress = account;\n    } else {\n      address operator = _issuedAttributes[account][attributeTypeID].operator;\n      if (operator == address(0)) {\n        refundAddress = validator;\n      } else {\n        refundAddress = operator;\n      }\n    }\n\n    // remove the attribute from the designated user account\n    delete _issuedAttributes[account][attributeTypeID];\n\n    // log the removal of the attribute\n    emit AttributeRemoved(validator, account, attributeTypeID);\n\n    // pay out any refunds and return the excess stake to the user\n    if (stake > 0 && address(this).balance >= stake) {\n      // NOTE: send is chosen over transfer to prevent cases where a malicious\n      // fallback function could forcibly block an attribute's removal. Another\n      // option is to allow a user to pull the staked amount after the removal.\n      // NOTE: refine transaction rebate gas calculation! Setting this value too\n      // high gives validators the incentive to revoke valid attributes. Simply\n      // checking against gasLeft() & adding the final gas usage won't give the\n      // correct transaction cost, as freeing space refunds gas upon completion.\n      uint256 transactionGas = 37700; // <--- WARNING: THIS IS APPROXIMATE\n      uint256 transactionCost = transactionGas.mul(tx.gasprice);\n\n      // if stake exceeds allocated transaction cost, refund user the difference\n      if (stake > transactionCost) {\n        // refund the excess stake to the address that contributed the funds\n        if (refundAddress.send(stake.sub(transactionCost))) {\n          emit StakeRefunded(\n            refundAddress,\n            attributeTypeID,\n            stake.sub(transactionCost)\n          );\n        } else {\n          _recoverableFunds = _recoverableFunds.add(stake.sub(transactionCost));\n        }\n\n        // emit an event for the payment of the transaction rebate\n        emit TransactionRebatePaid(\n          tx.origin,\n          refundAddress,\n          attributeTypeID,\n          transactionCost\n        );\n\n        // refund the cost of the transaction to the trasaction submitter\n        tx.origin.transfer(transactionCost);\n\n      // otherwise, allocate entire stake to partially refunding the transaction\n      } else {\n        // emit an event for the payment of the partial transaction rebate\n        emit TransactionRebatePaid(\n          tx.origin,\n          refundAddress,\n          attributeTypeID,\n          stake\n        );\n\n        // refund the partial cost of the transaction to trasaction submitter\n        tx.origin.transfer(stake);\n      }\n    }\n  }\n\n  /**\n  * @notice Add an attribute of the type with ID `attributeTypeID`, an attribute\n  * value of `value`, and an associated validator fee of `validatorFee` to\n  * account of `msg.sender` by passing in a signed attribute approval with\n  * signature `signature`.\n  * @param attributeTypeID uint256 The ID of the attribute type to add.\n  * @param value uint256 The value for the attribute to add.\n  * @param validatorFee uint256 The fee to be paid to the issuing validator.\n  * @param signature bytes The signature from the validator attribute approval.\n  */\n  function addAttribute(\n    uint256 attributeTypeID,\n    uint256 value,\n    uint256 validatorFee,\n    bytes signature\n  ) external payable {\n    // NOTE: determine best course of action when the attribute already exists\n    // NOTE: consider utilizing bytes32 type for attributes and values\n    // NOTE: does not currently support an extraData parameter, consider adding\n    // NOTE: if msg.sender is a proxy contract, its ownership may be transferred\n    // at will, circumventing any token transfer restrictions. Restricting usage\n    // to only externally owned accounts may partially alleviate this concern.\n    // NOTE: cosider including a salt (or better, nonce) parameter so that when\n    // a user adds an attribute, then it gets revoked, the user can get a new\n    // signature from the validator and renew the attribute using that. The main\n    // downside is that everyone will have to keep track of the extra parameter.\n    // Another solution is to just modifiy the required stake or fee amount.\n\n    require(\n      !_issuedAttributes[msg.sender][attributeTypeID].exists,\n      \"duplicate attributes are not supported, remove existing attribute first\"\n    );\n\n    // retrieve required minimum stake and jurisdiction fees on attribute type\n    uint256 minimumStake = _attributeTypes[attributeTypeID].minimumStake;\n    uint256 jurisdictionFee = _attributeTypes[attributeTypeID].jurisdictionFee;\n    uint256 stake = msg.value.sub(validatorFee).sub(jurisdictionFee);\n\n    require(\n      stake >= minimumStake,\n      \"attribute requires a greater value than is currently provided\"\n    );\n\n    // signed data hash constructed according to EIP-191-0x45 to prevent replays\n    bytes32 hash = keccak256(\n      abi.encodePacked(\n        address(this),\n        msg.sender,\n        address(0),\n        msg.value,\n        validatorFee,\n        attributeTypeID,\n        value\n      )\n    );\n\n    require(\n      !_invalidAttributeApprovalHashes[hash],\n      \"signed attribute approvals from validators may not be reused\"\n    );\n\n    // extract the key used to sign the message hash\n    address signingKey = hash.toEthSignedMessageHash().recover(signature);\n\n    // retrieve the validator who controls the extracted key\n    address validator = _signingKeys[signingKey];\n\n    require(\n      canValidate(validator, attributeTypeID),\n      \"signature does not match an approved validator for given attribute type\"\n    );\n\n    // store attribute value and amount of ether staked in correct scope\n    _issuedAttributes[msg.sender][attributeTypeID] = IssuedAttribute({\n      exists: true,\n      setPersonally: true,\n      operator: address(0),\n      validator: validator,\n      value: value,\n      stake: stake\n      // NOTE: no extraData included\n    });\n\n    // flag the signed approval as invalid once it's been used to set attribute\n    _invalidAttributeApprovalHashes[hash] = true;\n\n    // log the addition of the attribute\n    emit AttributeAdded(validator, msg.sender, attributeTypeID, value);\n\n    // log allocation of staked funds to the attribute if applicable\n    if (stake > 0) {\n      emit StakeAllocated(msg.sender, attributeTypeID, stake);\n    }\n\n    // pay jurisdiction fee to the owner of the jurisdiction if applicable\n    if (jurisdictionFee > 0) {\n      // NOTE: send is chosen over transfer to prevent cases where a improperly\n      // configured fallback function could block addition of an attribute\n      if (owner().send(jurisdictionFee)) {\n        emit FeePaid(owner(), msg.sender, attributeTypeID, jurisdictionFee);\n      } else {\n        _recoverableFunds = _recoverableFunds.add(jurisdictionFee);\n      }\n    }\n\n    // pay validator fee to the issuing validator's address if applicable\n    if (validatorFee > 0) {\n      // NOTE: send is chosen over transfer to prevent cases where a improperly\n      // configured fallback function could block addition of an attribute\n      if (validator.send(validatorFee)) {\n        emit FeePaid(validator, msg.sender, attributeTypeID, validatorFee);\n      } else {\n        _recoverableFunds = _recoverableFunds.add(validatorFee);\n      }\n    }\n  }\n\n  /**\n  * @notice Remove an attribute of the type with ID `attributeTypeID` from\n  * account of `msg.sender`.\n  * @param attributeTypeID uint256 The ID of the attribute type to remove.\n  */\n  function removeAttribute(uint256 attributeTypeID) external {\n    // attributes may only be removed by the user if they are not restricted\n    require(\n      !_attributeTypes[attributeTypeID].restricted,\n      \"only jurisdiction or issuing validator may remove a restricted attribute\"\n    );\n\n    require(\n      _issuedAttributes[msg.sender][attributeTypeID].exists,\n      \"only existing attributes may be removed\"\n    );\n\n    // determine the assigned validator on the user attribute\n    address validator = _issuedAttributes[msg.sender][attributeTypeID].validator;\n\n    // determine if the attribute has a staked value\n    uint256 stake = _issuedAttributes[msg.sender][attributeTypeID].stake;\n\n    // determine the correct address to refund the staked amount to\n    address refundAddress;\n    if (_issuedAttributes[msg.sender][attributeTypeID].setPersonally) {\n      refundAddress = msg.sender;\n    } else {\n      address operator = _issuedAttributes[msg.sender][attributeTypeID].operator;\n      if (operator == address(0)) {\n        refundAddress = validator;\n      } else {\n        refundAddress = operator;\n      }\n    }    \n\n    // remove the attribute from the user address\n    delete _issuedAttributes[msg.sender][attributeTypeID];\n\n    // log the removal of the attribute\n    emit AttributeRemoved(validator, msg.sender, attributeTypeID);\n\n    // if the attribute has any staked balance, refund it to the user\n    if (stake > 0 && address(this).balance >= stake) {\n      // NOTE: send is chosen over transfer to prevent cases where a malicious\n      // fallback function could forcibly block an attribute's removal\n      if (refundAddress.send(stake)) {\n        emit StakeRefunded(refundAddress, attributeTypeID, stake);\n      } else {\n        _recoverableFunds = _recoverableFunds.add(stake);\n      }\n    }\n  }\n\n  /**\n  * @notice Add an attribute of the type with ID `attributeTypeID`, an attribute\n  * value of `value`, and an associated validator fee of `validatorFee` to\n  * account `account` by passing in a signed attribute approval with signature\n  * `signature`.\n  * @param account address The account to add the attribute to.\n  * @param attributeTypeID uint256 The ID of the attribute type to add.\n  * @param value uint256 The value for the attribute to add.\n  * @param validatorFee uint256 The fee to be paid to the issuing validator.\n  * @param signature bytes The signature from the validator attribute approval.\n  * @dev Restricted attribute types can only be removed by issuing validators or\n  * the jurisdiction itself.\n  */\n  function addAttributeFor(\n    address account,\n    uint256 attributeTypeID,\n    uint256 value,\n    uint256 validatorFee,\n    bytes signature\n  ) external payable {\n    // NOTE: determine best course of action when the attribute already exists\n    // NOTE: consider utilizing bytes32 type for attributes and values\n    // NOTE: does not currently support an extraData parameter, consider adding\n    // NOTE: if msg.sender is a proxy contract, its ownership may be transferred\n    // at will, circumventing any token transfer restrictions. Restricting usage\n    // to only externally owned accounts may partially alleviate this concern.\n    // NOTE: consider including a salt (or better, nonce) parameter so that when\n    // a user adds an attribute, then it gets revoked, the user can get a new\n    // signature from the validator and renew the attribute using that. The main\n    // downside is that everyone will have to keep track of the extra parameter.\n    // Another solution is to just modifiy the required stake or fee amount.\n\n    // attributes may only be added by a third party if onlyPersonal is false\n    require(\n      !_attributeTypes[attributeTypeID].onlyPersonal,\n      \"only operatable attributes may be added on behalf of another address\"\n    );\n\n    require(\n      !_issuedAttributes[account][attributeTypeID].exists,\n      \"duplicate attributes are not supported, remove existing attribute first\"\n    );\n\n    // retrieve required minimum stake and jurisdiction fees on attribute type\n    uint256 minimumStake = _attributeTypes[attributeTypeID].minimumStake;\n    uint256 jurisdictionFee = _attributeTypes[attributeTypeID].jurisdictionFee;\n    uint256 stake = msg.value.sub(validatorFee).sub(jurisdictionFee);\n\n    require(\n      stake >= minimumStake,\n      \"attribute requires a greater value than is currently provided\"\n    );\n\n    // signed data hash constructed according to EIP-191-0x45 to prevent replays\n    bytes32 hash = keccak256(\n      abi.encodePacked(\n        address(this),\n        account,\n        msg.sender,\n        msg.value,\n        validatorFee,\n        attributeTypeID,\n        value\n      )\n    );\n\n    require(\n      !_invalidAttributeApprovalHashes[hash],\n      \"signed attribute approvals from validators may not be reused\"\n    );\n\n    // extract the key used to sign the message hash\n    address signingKey = hash.toEthSignedMessageHash().recover(signature);\n\n    // retrieve the validator who controls the extracted key\n    address validator = _signingKeys[signingKey];\n\n    require(\n      canValidate(validator, attributeTypeID),\n      \"signature does not match an approved validator for provided attribute\"\n    );\n\n    // store attribute value and amount of ether staked in correct scope\n    _issuedAttributes[account][attributeTypeID] = IssuedAttribute({\n      exists: true,\n      setPersonally: false,\n      operator: msg.sender,\n      validator: validator,\n      value: value,\n      stake: stake\n      // NOTE: no extraData included\n    });\n\n    // flag the signed approval as invalid once it's been used to set attribute\n    _invalidAttributeApprovalHashes[hash] = true;\n\n    // log the addition of the attribute\n    emit AttributeAdded(validator, account, attributeTypeID, value);\n\n    // log allocation of staked funds to the attribute if applicable\n    // NOTE: the staker is the entity that pays the fee here!\n    if (stake > 0) {\n      emit StakeAllocated(msg.sender, attributeTypeID, stake);\n    }\n\n    // pay jurisdiction fee to the owner of the jurisdiction if applicable\n    if (jurisdictionFee > 0) {\n      // NOTE: send is chosen over transfer to prevent cases where a improperly\n      // configured fallback function could block addition of an attribute\n      if (owner().send(jurisdictionFee)) {\n        emit FeePaid(owner(), msg.sender, attributeTypeID, jurisdictionFee);\n      } else {\n        _recoverableFunds = _recoverableFunds.add(jurisdictionFee);\n      }\n    }\n\n    // pay validator fee to the issuing validator's address if applicable\n    if (validatorFee > 0) {\n      // NOTE: send is chosen over transfer to prevent cases where a improperly\n      // configured fallback function could block addition of an attribute\n      if (validator.send(validatorFee)) {\n        emit FeePaid(validator, msg.sender, attributeTypeID, validatorFee);\n      } else {\n        _recoverableFunds = _recoverableFunds.add(validatorFee);\n      }\n    }\n  }\n\n  /**\n  * @notice Remove an attribute of the type with ID `attributeTypeID` from\n  * account of `account`.\n  * @param account address The account to remove the attribute from.\n  * @param attributeTypeID uint256 The ID of the attribute type to remove.\n  * @dev Restricted attribute types can only be removed by issuing validators or\n  * the jurisdiction itself.\n  */\n  function removeAttributeFor(address account, uint256 attributeTypeID) external {\n    // attributes may only be removed by the user if they are not restricted\n    require(\n      !_attributeTypes[attributeTypeID].restricted,\n      \"only jurisdiction or issuing validator may remove a restricted attribute\"\n    );\n\n    require(\n      _issuedAttributes[account][attributeTypeID].exists,\n      \"only existing attributes may be removed\"\n    );\n\n    require(\n      _issuedAttributes[account][attributeTypeID].operator == msg.sender,\n      \"only an assigning operator may remove attribute on behalf of an address\"\n    );\n\n    // determine the assigned validator on the user attribute\n    address validator = _issuedAttributes[account][attributeTypeID].validator;\n\n    // determine if the attribute has a staked value\n    uint256 stake = _issuedAttributes[account][attributeTypeID].stake;\n\n    // remove the attribute from the user address\n    delete _issuedAttributes[account][attributeTypeID];\n\n    // log the removal of the attribute\n    emit AttributeRemoved(validator, account, attributeTypeID);\n\n    // if the attribute has any staked balance, refund it to the user\n    if (stake > 0 && address(this).balance >= stake) {\n      // NOTE: send is chosen over transfer to prevent cases where a malicious\n      // fallback function could forcibly block an attribute's removal\n      if (msg.sender.send(stake)) {\n        emit StakeRefunded(msg.sender, attributeTypeID, stake);\n      } else {\n        _recoverableFunds = _recoverableFunds.add(stake);\n      }\n    }\n  }\n\n  /**\n   * @notice Invalidate a signed attribute approval before it has been set by\n   * supplying the hash of the approval `hash` and the signature `signature`.\n   * @param hash bytes32 The hash of the attribute approval.\n   * @param signature bytes The hash's signature, resolving to the signing key.\n   * @dev Attribute approvals can only be removed by issuing validators or the\n   * jurisdiction itself.\n   */\n  function invalidateAttributeApproval(\n    bytes32 hash,\n    bytes signature\n  ) external {\n    // determine the assigned validator on the signed attribute approval\n    address validator = _signingKeys[\n      hash.toEthSignedMessageHash().recover(signature) // signingKey\n    ];\n    \n    // caller must be either the jurisdiction owner or the assigning validator\n    require(\n      msg.sender == validator || msg.sender == owner(),\n      \"only jurisdiction or issuing validator may invalidate attribute approval\"\n    );\n\n    // add the hash to the set of invalid attribute approval hashes\n    _invalidAttributeApprovalHashes[hash] = true;\n  }\n\n  /**\n   * @notice Check if an attribute of the type with ID `attributeTypeID` has\n   * been assigned to the account at `account` and is currently valid.\n   * @param account address The account to check for a valid attribute.\n   * @param attributeTypeID uint256 The ID of the attribute type to check for.\n   * @return True if the attribute is assigned and valid, false otherwise.\n   * @dev This function MUST return either true or false - i.e. calling this\n   * function MUST NOT cause the caller to revert.\n   */\n  function hasAttribute(\n    address account, \n    uint256 attributeTypeID\n  ) external view returns (bool) {\n    address validator = _issuedAttributes[account][attributeTypeID].validator;\n    return (\n      (\n        _validators[validator].exists &&   // isValidator(validator)\n        _attributeTypes[attributeTypeID].approvedValidators[validator] &&\n        _attributeTypes[attributeTypeID].exists //isAttributeType(attributeTypeID)\n      ) || (\n        _attributeTypes[attributeTypeID].secondarySource != address(0) &&\n        secondaryHasAttribute(\n          _attributeTypes[attributeTypeID].secondarySource,\n          account,\n          _attributeTypes[attributeTypeID].secondaryAttributeTypeID\n        )\n      )\n    );\n  }\n\n  /**\n   * @notice Retrieve the value of the attribute of the type with ID\n   * `attributeTypeID` on the account at `account`, assuming it is valid.\n   * @param account address The account to check for the given attribute value.\n   * @param attributeTypeID uint256 The ID of the attribute type to check for.\n   * @return The attribute value if the attribute is valid, reverts otherwise.\n   * @dev This function MUST revert if a directly preceding or subsequent\n   * function call to `hasAttribute` with identical `account` and\n   * `attributeTypeID` parameters would return false.\n   */\n  function getAttributeValue(\n    address account,\n    uint256 attributeTypeID\n  ) external view returns (uint256 value) {\n    // gas optimization: get validator & call canValidate function body directly\n    address validator = _issuedAttributes[account][attributeTypeID].validator;\n    if (\n      _validators[validator].exists &&   // isValidator(validator)\n      _attributeTypes[attributeTypeID].approvedValidators[validator] &&\n      _attributeTypes[attributeTypeID].exists //isAttributeType(attributeTypeID)\n    ) {\n      return _issuedAttributes[account][attributeTypeID].value;\n    } else if (\n      _attributeTypes[attributeTypeID].secondarySource != address(0)\n    ) {\n      // if attributeTypeID = uint256 of 'wyre-yes-token', use special handling\n      if (_attributeTypes[attributeTypeID].secondaryAttributeTypeID == 2423228754106148037712574142965102) {\n        require(\n          IERC20(\n            _attributeTypes[attributeTypeID].secondarySource\n          ).balanceOf(account) >= 1,\n          \"no Yes Token has been issued to the provided account\"\n        );\n        return 1; // this could also return a specific yes token's country code?\n      }\n\n      // first ensure hasAttribute on the secondary source returns true\n      require(\n        AttributeRegistryInterface(\n          _attributeTypes[attributeTypeID].secondarySource\n        ).hasAttribute(\n          account, _attributeTypes[attributeTypeID].secondaryAttributeTypeID\n        ),\n        \"attribute of the provided type is not assigned to the provided account\"\n      );\n\n      return (\n        AttributeRegistryInterface(\n          _attributeTypes[attributeTypeID].secondarySource\n        ).getAttributeValue(\n          account, _attributeTypes[attributeTypeID].secondaryAttributeTypeID\n        )\n      );\n    }\n\n    // NOTE: checking for values of invalid attributes will revert\n    revert(\"could not find an attribute value at the provided account and ID\");\n  }\n\n  /**\n   * @notice Determine if a validator at account `validator` is able to issue\n   * attributes of the type with ID `attributeTypeID`.\n   * @param validator address The account of the validator.\n   * @param attributeTypeID uint256 The ID of the attribute type to check.\n   * @return True if the validator can issue attributes of the given type, false\n   * otherwise.\n   */\n  function canIssueAttributeType(\n    address validator,\n    uint256 attributeTypeID\n  ) external view returns (bool) {\n    return canValidate(validator, attributeTypeID);\n  }\n\n  /**\n   * @notice Get a description of the attribute type with ID `attributeTypeID`.\n   * @param attributeTypeID uint256 The ID of the attribute type to check for.\n   * @return A description of the attribute type.\n   */\n  function getAttributeTypeDescription(\n    uint256 attributeTypeID\n  ) external view returns (\n    string description\n  ) {\n    return _attributeTypes[attributeTypeID].description;\n  }\n\n  /**\n   * @notice Get comprehensive information on an attribute type with ID\n   * `attributeTypeID`.\n   * @param attributeTypeID uint256 The attribute type ID in question.\n   * @return Information on the attribute type in question.\n   */\n  function getAttributeTypeInformation(\n    uint256 attributeTypeID\n  ) external view returns (\n    string description,\n    bool isRestricted,\n    bool isOnlyPersonal,\n    address secondarySource,\n    uint256 secondaryAttributeTypeID,\n    uint256 minimumRequiredStake,\n    uint256 jurisdictionFee\n  ) {\n    return (\n      _attributeTypes[attributeTypeID].description,\n      _attributeTypes[attributeTypeID].restricted,\n      _attributeTypes[attributeTypeID].onlyPersonal,\n      _attributeTypes[attributeTypeID].secondarySource,\n      _attributeTypes[attributeTypeID].secondaryAttributeTypeID,\n      _attributeTypes[attributeTypeID].minimumStake,\n      _attributeTypes[attributeTypeID].jurisdictionFee\n    );\n  }\n\n  /**\n   * @notice Get a description of the validator at account `validator`.\n   * @param validator address The account of the validator in question.\n   * @return A description of the validator.\n   */\n  function getValidatorDescription(\n    address validator\n  ) external view returns (\n    string description\n  ) {\n    return _validators[validator].description;\n  }\n\n  /**\n   * @notice Get the signing key of the validator at account `validator`.\n   * @param validator address The account of the validator in question.\n   * @return The signing key of the validator.\n   */\n  function getValidatorSigningKey(\n    address validator\n  ) external view returns (\n    address signingKey\n  ) {\n    return _validators[validator].signingKey;\n  }\n\n  /**\n   * @notice Find the validator that issued the attribute of the type with ID\n   * `attributeTypeID` on the account at `account` and determine if the\n   * validator is still valid.\n   * @param account address The account that contains the attribute be checked.\n   * @param attributeTypeID uint256 The ID of the attribute type in question.\n   * @return The validator and the current status of the validator as it\n   * pertains to the attribute type in question.\n   * @dev if no attribute of the given attribute type exists on the account, the\n   * function will return (address(0), false).\n   */\n  function getAttributeValidator(\n    address account,\n    uint256 attributeTypeID\n  ) external view returns (\n    address validator,\n    bool isStillValid\n  ) {\n    address issuer = _issuedAttributes[account][attributeTypeID].validator;\n    return (issuer, canValidate(issuer, attributeTypeID));\n  }\n\n  /**\n   * @notice Count the number of attribute types defined by the registry.\n   * @return The number of available attribute types.\n   * @dev This function MUST return a positive integer value  - i.e. calling\n   * this function MUST NOT cause the caller to revert.\n   */\n  function countAttributeTypes() external view returns (uint256) {\n    return _attributeIDs.length;\n  }\n\n  /**\n   * @notice Get the ID of the attribute type at index `index`.\n   * @param index uint256 The index of the attribute type in question.\n   * @return The ID of the attribute type.\n   * @dev This function MUST revert if the provided `index` value falls outside\n   * of the range of the value returned from a directly preceding or subsequent\n   * function call to `countAttributeTypes`. It MUST NOT revert if the provided\n   * `index` value falls inside said range.\n   */\n  function getAttributeTypeID(uint256 index) external view returns (uint256) {\n    require(\n      index < _attributeIDs.length,\n      \"provided index is outside of the range of defined attribute type IDs\"\n    );\n\n    return _attributeIDs[index];\n  }\n\n  /**\n   * @notice Get the IDs of all available attribute types on the jurisdiction.\n   * @return A dynamic array containing all available attribute type IDs.\n   */\n  function getAttributeTypeIDs() external view returns (uint256[]) {\n    return _attributeIDs;\n  }\n\n  /**\n   * @notice Count the number of validators defined by the jurisdiction.\n   * @return The number of defined validators.\n   */\n  function countValidators() external view returns (uint256) {\n    return _validatorAccounts.length;\n  }\n\n  /**\n   * @notice Get the account of the validator at index `index`.\n   * @param index uint256 The index of the validator in question.\n   * @return The account of the validator.\n   */\n  function getValidator(\n    uint256 index\n  ) external view returns (address) {\n    return _validatorAccounts[index];\n  }\n\n  /**\n   * @notice Get the accounts of all available validators on the jurisdiction.\n   * @return A dynamic array containing all available validator accounts.\n   */\n  function getValidators() external view returns (address[]) {\n    return _validatorAccounts;\n  }\n\n  /**\n   * @notice Determine if the interface ID `interfaceID` is supported (ERC-165)\n   * @param interfaceID bytes4 The interface ID in question.\n   * @return True if the interface is supported, false otherwise.\n   * @dev this function will produce a compiler warning recommending that the\n   * visibility be set to pure, but the interface expects a view function.\n   * Supported interfaces include ERC-165 (0x01ffc9a7) and the attribute\n   * registry interface (0x5f46473f).\n   */\n  function supportsInterface(bytes4 interfaceID) external view returns (bool) {\n    return (\n      interfaceID == this.supportsInterface.selector || // ERC165\n      interfaceID == (\n        this.hasAttribute.selector \n        ^ this.getAttributeValue.selector\n        ^ this.countAttributeTypes.selector\n        ^ this.getAttributeTypeID.selector\n      ) // AttributeRegistryInterface\n    ); // 0x01ffc9a7 || 0x5f46473f\n  }\n\n  /**\n   * @notice Get the hash of a given attribute approval.\n   * @param account address The account specified by the attribute approval.\n   * @param operator address An optional account permitted to submit approval.\n   * @param attributeTypeID uint256 The ID of the attribute type in question.\n   * @param value uint256 The value of the attribute in the approval.\n   * @param fundsRequired uint256 The amount to be included with the approval.\n   * @param validatorFee uint256 The required fee to be paid to the validator.\n   * @return The hash of the attribute approval.\n   */\n  function getAttributeApprovalHash(\n    address account,\n    address operator,\n    uint256 attributeTypeID,\n    uint256 value,\n    uint256 fundsRequired,\n    uint256 validatorFee\n  ) external view returns (\n    bytes32 hash\n  ) {\n    return calculateAttributeApprovalHash(\n      account,\n      operator,\n      attributeTypeID,\n      value,\n      fundsRequired,\n      validatorFee\n    );\n  }\n\n  /**\n   * @notice Check if a given signed attribute approval is currently valid when\n   * submitted directly by `msg.sender`.\n   * @param attributeTypeID uint256 The ID of the attribute type in question.\n   * @param value uint256 The value of the attribute in the approval.\n   * @param fundsRequired uint256 The amount to be included with the approval.\n   * @param validatorFee uint256 The required fee to be paid to the validator.\n   * @param signature bytes The attribute approval signature, based on a hash of\n   * the other parameters and the submitting account.\n   * @return True if the approval is currently valid, false otherwise.\n   */\n  function canAddAttribute(\n    uint256 attributeTypeID,\n    uint256 value,\n    uint256 fundsRequired,\n    uint256 validatorFee,\n    bytes signature\n  ) external view returns (bool) {\n    // signed data hash constructed according to EIP-191-0x45 to prevent replays\n    bytes32 hash = calculateAttributeApprovalHash(\n      msg.sender,\n      address(0),\n      attributeTypeID,\n      value,\n      fundsRequired,\n      validatorFee\n    );\n\n    // recover the address associated with the signature of the message hash\n    address signingKey = hash.toEthSignedMessageHash().recover(signature);\n    \n    // retrieve variables necessary to perform checks\n    address validator = _signingKeys[signingKey];\n    uint256 minimumStake = _attributeTypes[attributeTypeID].minimumStake;\n    uint256 jurisdictionFee = _attributeTypes[attributeTypeID].jurisdictionFee;\n\n    // determine if the attribute can currently be added.\n    // NOTE: consider returning an error code along with the boolean.\n    return (\n      fundsRequired >= minimumStake.add(jurisdictionFee).add(validatorFee) &&\n      !_invalidAttributeApprovalHashes[hash] &&\n      canValidate(validator, attributeTypeID) &&\n      !_issuedAttributes[msg.sender][attributeTypeID].exists\n    );\n  }\n\n  /**\n   * @notice Check if a given signed attribute approval is currently valid for a\n   * given account when submitted by the operator at `msg.sender`.\n   * @param account address The account specified by the attribute approval.\n   * @param attributeTypeID uint256 The ID of the attribute type in question.\n   * @param value uint256 The value of the attribute in the approval.\n   * @param fundsRequired uint256 The amount to be included with the approval.\n   * @param validatorFee uint256 The required fee to be paid to the validator.\n   * @param signature bytes The attribute approval signature, based on a hash of\n   * the other parameters and the submitting account.\n   * @return True if the approval is currently valid, false otherwise.\n   */\n  function canAddAttributeFor(\n    address account,\n    uint256 attributeTypeID,\n    uint256 value,\n    uint256 fundsRequired,\n    uint256 validatorFee,\n    bytes signature\n  ) external view returns (bool) {\n    // signed data hash constructed according to EIP-191-0x45 to prevent replays\n    bytes32 hash = calculateAttributeApprovalHash(\n      account,\n      msg.sender,\n      attributeTypeID,\n      value,\n      fundsRequired,\n      validatorFee\n    );\n\n    // recover the address associated with the signature of the message hash\n    address signingKey = hash.toEthSignedMessageHash().recover(signature);\n    \n    // retrieve variables necessary to perform checks\n    address validator = _signingKeys[signingKey];\n    uint256 minimumStake = _attributeTypes[attributeTypeID].minimumStake;\n    uint256 jurisdictionFee = _attributeTypes[attributeTypeID].jurisdictionFee;\n\n    // determine if the attribute can currently be added.\n    // NOTE: consider returning an error code along with the boolean.\n    return (\n      fundsRequired >= minimumStake.add(jurisdictionFee).add(validatorFee) &&\n      !_invalidAttributeApprovalHashes[hash] &&\n      canValidate(validator, attributeTypeID) &&\n      !_issuedAttributes[account][attributeTypeID].exists\n    );\n  }\n\n  /**\n   * @notice Determine if an attribute type with ID `attributeTypeID` is\n   * currently defined on the jurisdiction.\n   * @param attributeTypeID uint256 The attribute type ID in question.\n   * @return True if the attribute type is defined, false otherwise.\n   */\n  function isAttributeType(uint256 attributeTypeID) public view returns (bool) {\n    return _attributeTypes[attributeTypeID].exists;\n  }\n\n  /**\n   * @notice Determine if the account `account` is currently assigned as a\n   * validator on the jurisdiction.\n   * @param account address The account to check for validator status.\n   * @return True if the account is assigned as a validator, false otherwise.\n   */\n  function isValidator(address account) public view returns (bool) {\n    return _validators[account].exists;\n  }\n\n  /**\n   * @notice Check for recoverable funds that have become locked in the\n   * jurisdiction as a result of improperly configured receivers for payments of\n   * fees or remaining stake. Note that funds sent into the jurisdiction as a \n   * result of coinbase assignment or as the recipient of a selfdestruct will\n   * not be recoverable.\n   * @return The total tracked recoverable funds.\n   */\n  function recoverableFunds() public view returns (uint256) {\n    // return the total tracked recoverable funds.\n    return _recoverableFunds;\n  }\n\n  /**\n   * @notice Check for recoverable tokens that are owned by the jurisdiction at\n   * the token contract address of `token`.\n   * @param token address The account where token contract is located.\n   * @return The total recoverable tokens.\n   */\n  function recoverableTokens(address token) public view returns (uint256) {\n    // return the total tracked recoverable tokens.\n    return IERC20(token).balanceOf(address(this));\n  }\n\n  /**\n   * @notice Recover funds that have become locked in the jurisdiction as a\n   * result of improperly configured receivers for payments of fees or remaining\n   * stake by transferring an amount of `value` to the address at `account`.\n   * Note that funds sent into the jurisdiction as a result of coinbase\n   * assignment or as the recipient of a selfdestruct will not be recoverable.\n   * @param account address The account to send recovered tokens.\n   * @param value uint256 The amount of tokens to be sent.\n   */\n  function recoverFunds(address account, uint256 value) public onlyOwner {    \n    // safely deduct the value from the total tracked recoverable funds.\n    _recoverableFunds = _recoverableFunds.sub(value);\n    \n    // transfer the value to the specified account & revert if any error occurs.\n    account.transfer(value);\n  }\n\n  /**\n   * @notice Recover tokens that are owned by the jurisdiction at the token\n   * contract address of `token`, transferring an amount of `value` to the\n   * address at `account`.\n   * @param token address The account where token contract is located.\n   * @param account address The account to send recovered funds.\n   * @param value uint256 The amount of ether to be sent.\n   */\n  function recoverTokens(\n    address token,\n    address account,\n    uint256 value\n  ) public onlyOwner {\n    // transfer the value to the specified account & revert if any error occurs.\n    require(IERC20(token).transfer(account, value));\n  }\n\n  /**\n   * @notice Internal function to determine if a validator at account\n   * `validator` can issue attributes of the type with ID `attributeTypeID`.\n   * @param validator address The account of the validator.\n   * @param attributeTypeID uint256 The ID of the attribute type to check.\n   * @return True if the validator can issue attributes of the given type, false\n   * otherwise.\n   */\n  function canValidate(\n    address validator,\n    uint256 attributeTypeID\n  ) internal view returns (bool) {\n    return (\n      _validators[validator].exists &&   // isValidator(validator)\n      _attributeTypes[attributeTypeID].approvedValidators[validator] &&\n      _attributeTypes[attributeTypeID].exists // isAttributeType(attributeTypeID)\n    );\n  }\n\n  // internal helper function for getting the hash of an attribute approval\n  function calculateAttributeApprovalHash(\n    address account,\n    address operator,\n    uint256 attributeTypeID,\n    uint256 value,\n    uint256 fundsRequired,\n    uint256 validatorFee\n  ) internal view returns (bytes32 hash) {\n    return keccak256(\n      abi.encodePacked(\n        address(this),\n        account,\n        operator,\n        fundsRequired,\n        validatorFee,\n        attributeTypeID,\n        value\n      )\n    );\n  }\n\n  // helper function, won't revert calling hasAttribute on secondary registries\n  function secondaryHasAttribute(\n    address source,\n    address account,\n    uint256 attributeTypeID\n  ) internal view returns (bool result) {\n    // if attributeTypeID = uint256 of 'wyre-yes-token', use special handling\n    if (attributeTypeID == 2423228754106148037712574142965102) {\n      return (IERC20(source).balanceOf(account) >= 1);\n    }\n\n    uint256 maxGas = gasleft() > 20000 ? 20000 : gasleft();\n    bytes memory encodedParams = abi.encodeWithSelector(\n      this.hasAttribute.selector,\n      account,\n      attributeTypeID\n    );\n\n    assembly {\n      let encodedParams_data := add(0x20, encodedParams)\n      let encodedParams_size := mload(encodedParams)\n      \n      let output := mload(0x40) // get storage start from free memory pointer\n      mstore(output, 0x0)       // set up the location for output of staticcall\n\n      let success := staticcall(\n        maxGas,                 // maximum of 20k gas can be forwarded\n        source,                 // address of attribute registry to call\n        encodedParams_data,     // inputs are stored at pointer location\n        encodedParams_size,     // inputs are 68 bytes (4 + 32 * 2)\n        output,                 // return to designated free space\n        0x20                    // output is one word, or 32 bytes\n      )\n\n      switch success            // instrumentation bug: use switch instead of if\n      case 1 {                  // only recognize successful staticcall output \n        result := mload(output) // set the output to the return value\n      }\n    }\n  }\n}",
  "bytecode": "6080604081905260008054600160a060020a0319163317808255600160a060020a0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36200005c336401000000006200006c810204565b6002805460ff1916905562000151565b6200008760018264010000000062005bdb620000be82021704565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600160a060020a0381161515620000d457600080fd5b620000e9828264010000000062000119810204565b15620000f457600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a03821615156200013157600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b615d5580620001616000396000f30060806040526004361061027c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146102815780630e62fde6146102cc5780630e9065df146102f657806313cbb9701461031c57806317cf31d81461033957806318bbfb9c146103805780632724a47714610398578063352f3627146103b95780633f4ba83a146103ce5780633f8ab725146103e357806340a141ff146103fb57806346fbf68e1461041c5780634b5f297a1461043d57806350135c3a14610461578063586097541461047b5780635c975abb1461049f5780635f3e849f146104b457806362e9674f146104de57806363e2a232146104fd5780636b6004621461052a5780636ef8d66d146105fe578063715018a614610613578063727ba802146106285780637756588c146106495780637aedf3e01461066d57806381050c651461068557806382dc1ec4146106b15780638456cb59146106d25780638da5cb5b146106e75780638f32d59b146107185780639302091f1461072d578063952600ac1461074e5780639679c72a1461077e57806397f3c806146107e3578063a43569b3146107f8578063acb291721461088e578063aee338ee146108b2578063b09b37d8146108cd578063b340ec811461090a578063b5d896271461092e578063b7ab4db514610946578063cd6c83431461095b578063d71710e01461097f578063d99f2c9714610994578063e4bbca9f146109c7578063e5541be7146109e2578063eb3b274c14610a09578063f287f8fb14610a2d578063f2fde38b14610a51578063f9292ffb14610a72578063facd743b14610a96578063fdf9101c14610ab7578063feec036f14610adb575b600080fd5b34801561028d57600080fd5b506102b87bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960043516610af3565b604080519115158252519081900360200190f35b3480156102d857600080fd5b506102e4600435610b86565b60408051918252519081900360200190f35b34801561030257600080fd5b5061031a600480359060248035908101910135610c4f565b005b34801561032857600080fd5b5061031a6004356024351515610da5565b34801561034557600080fd5b5061035d600160a060020a0360043516602435610e79565b60408051600160a060020a03909316835290151560208301528051918290030190f35b34801561038c57600080fd5b5061031a600435610ebd565b3480156103a457600080fd5b5061031a600160a060020a03600435166111e6565b3480156103c557600080fd5b506102e461139a565b3480156103da57600080fd5b5061031a6113a1565b3480156103ef57600080fd5b506102b8600435611405565b34801561040757600080fd5b5061031a600160a060020a036004351661141a565b34801561042857600080fd5b506102b8600160a060020a03600435166117e2565b34801561044957600080fd5b506102b8600160a060020a03600435166024356117f5565b61031a600160a060020a03600435166024356044356118df565b34801561048757600080fd5b5061031a600160a060020a0360043516602435611d6f565b3480156104ab57600080fd5b506102b8611dd3565b3480156104c057600080fd5b5061031a600160a060020a0360043581169060243516604435611ddc565b61031a6004803590602480359160443591606435908101910135611ea2565b34801561050957600080fd5b5061031a60048035600160a060020a031690602480359081019101356125c3565b34801561053657600080fd5b50610542600435612904565b6040518080602001881515151581526020018715151515815260200186600160a060020a0316600160a060020a03168152602001858152602001848152602001838152602001828103825289818151815260200191508051906020019080838360005b838110156105bd5781810151838201526020016105a5565b50505050905090810190601f1680156105ea5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b34801561060a57600080fd5b5061031a612a05565b34801561061f57600080fd5b5061031a612a10565b34801561063457600080fd5b506102e4600160a060020a0360043516612a7a565b34801561065557600080fd5b5061031a600160a060020a0360043516602435612b10565b34801561067957600080fd5b5061031a600435612d0b565b61031a60048035600160a060020a03169060248035916044359160643591608435918201910135612edd565b3480156106bd57600080fd5b5061031a600160a060020a036004351661370c565b3480156106de57600080fd5b5061031a61372c565b3480156106f357600080fd5b506106fc613792565b60408051600160a060020a039092168252519081900360200190f35b34801561072457600080fd5b506102b86137a1565b34801561073957600080fd5b506106fc600160a060020a03600435166137b2565b34801561075a57600080fd5b506102b86004803590602480359160443591606435916084359182019101356137d3565b34801561078a57600080fd5b50610793613924565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156107cf5781810151838201526020016107b7565b505050509050019250505060405180910390f35b3480156107ef57600080fd5b506102e461397c565b34801561080457600080fd5b50610819600160a060020a0360043516613982565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561085357818101518382015260200161083b565b50505050905090810190601f1680156108805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561089a57600080fd5b5061031a600480359060248035908101910135613a30565b3480156108be57600080fd5b5061031a600435602435613e3a565b3480156108d957600080fd5b506102b860048035600160a060020a031690602480359160443591606435916084359160a435908101910135613ed4565b34801561091657600080fd5b5061031a600160a060020a0360043516602435614022565b34801561093a57600080fd5b506106fc600435614253565b34801561095257600080fd5b5061079361427f565b34801561096757600080fd5b506102e4600160a060020a03600435166024356142e0565b34801561098b57600080fd5b506102e4614785565b3480156109a057600080fd5b506102e4600160a060020a036004358116906024351660443560643560843560a43561478b565b3480156109d357600080fd5b5061031a6004356024356147a6565b3480156109ee57600080fd5b5061031a600435600160a060020a0360243516604435614866565b348015610a1557600080fd5b5061031a600480359060248035908101910135614957565b348015610a3957600080fd5b506102b8600160a060020a0360043516602435614cd0565b348015610a5d57600080fd5b5061031a600160a060020a0360043516614ce3565b348015610a7e57600080fd5b5061031a600160a060020a0360043516602435614cff565b348015610aa257600080fd5b506102b8600160a060020a03600435166151b6565b348015610ac357600080fd5b5061031a600160a060020a03600435166024356151d4565b348015610ae757600080fd5b50610819600435615545565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1982167f01ffc9a7000000000000000000000000000000000000000000000000000000001480610b8057507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1982167f5f46473f00000000000000000000000000000000000000000000000000000000145b92915050565b600b546000908210610c2f576040805160e560020a62461bcd028152602060048201526044602482018190527f70726f766964656420696e646578206973206f757473696465206f6620746865908201527f2072616e6765206f6620646566696e656420617474726962757465207479706560648201527f2049447300000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600b805483908110610c3d57fe5b90600052602060002001549050919050565b600060066000610ca085858080601f01602080910402602001604051908101604052809392919081815260200183838082843750610c9494508c93506155b292505050565b9063ffffffff61565c16565b600160a060020a03908116825260208201929092526040016000205416905033811480610ce55750610cd0613792565b600160a060020a031633600160a060020a0316145b1515610d87576040805160e560020a62461bcd02815260206004820152604860248201527f6f6e6c79206a7572697364696374696f6e206f722069737375696e672076616c60448201527f696461746f72206d617920696e76616c6964617465206174747269627574652060648201527f617070726f76616c000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b5050506000908152600860205260409020805460ff19166001179055565b610dae82611405565b1515610e50576040805160e560020a62461bcd02815260206004820152604660248201527f756e61626c6520746f2073657420746f206f6e6c7920706572736f6e616c2c2060448201527f6e6f2061747472696275746520747970652077697468207468652070726f766960648201527f6465642049440000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b6000918252600360205260409091208054911515620100000262ff000019909216919091179055565b600160a060020a038083166000908152600460209081526040808320858452909152812060010154909182911680610eb18186615731565b92509250509250929050565b600081815260036020526040812054819081908190610100900460ff1615610f7b576040805160e560020a62461bcd02815260206004820152604860248201527f6f6e6c79206a7572697364696374696f6e206f722069737375696e672076616c60448201527f696461746f72206d61792072656d6f766520612072657374726963746564206160648201527f7474726962757465000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b33600090815260046020908152604080832088845290915290205460ff161515611015576040805160e560020a62461bcd02815260206004820152602760248201527f6f6e6c79206578697374696e672061747472696275746573206d61792062652060448201527f72656d6f76656400000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b3360009081526004602090815260408083208884529091529020600181015460038201549154600160a060020a039091169550909350610100900460ff16156110605733915061109e565b50336000908152600460209081526040808320878452909152902054620100009004600160a060020a031680151561109a5783915061109e565b8091505b3360008181526004602090815260408083208984528252808320805475ffffffffffffffffffffffffffffffffffffffffffff1916815560018101805473ffffffffffffffffffffffffffffffffffffffff1916905560028101849055600301929092558151600160a060020a038816815290810188905281517faa5b822df0611950f79edb91a7f829d92df3d2ae66b54ee3b5b15ead069e1a67929181900390910190a2600083118015611154575030318311155b156111df57604051600160a060020a0383169084156108fc029085906000818181858888f19350505050156111c8576040805184815290518691600160a060020a038516917fcb777cb6ab680dc1db2889b92613a0640bc47be07dc40a8f640dfd7e7882790d9181900360200190a36111df565b600d546111db908463ffffffff61579d16565b600d555b5050505050565b6111ef336151b6565b151561126b576040805160e560020a62461bcd02815260206004820152603160248201527f6f6e6c792076616c696461746f7273206d6179206d6f646966792076616c696460448201527f61746f72207369676e696e67206b657973000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a038181166000908152600660205260409020541615611301576040805160e560020a62461bcd02815260206004820152603a60248201527f61207369676e696e67206b6579206d61746368696e67207468652070726f766960448201527f646564206164647265737320616c726561647920657869737473000000000000606482015290519081900360840190fd5b3360008181526005602090815260408083206002018054600160a060020a03908116855260068452828520805473ffffffffffffffffffffffffffffffffffffffff1990811690915582548116918816918217909255808552938290208054909116851790558051928352517fa0d7a9c0cfc746249b49860852dbe114b817a004ed34bcb8bfadbda860ebfc159281900390910190a250565b600d545b90565b6113aa336117e2565b15156113b557600080fd5b60025460ff1615156113c657600080fd5b6002805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b60009081526003602052604090205460ff1690565b60008060006114276137a1565b151561143257600080fd5b60025460ff161561144257600080fd5b61144b846151b6565b15156114c7576040805160e560020a62461bcd02815260206004820152603e60248201527f756e61626c6520746f2072656d6f76652c206e6f2076616c696461746f72206c60448201527f6f6361746564206174207468652070726f766964656420616464726573730000606482015290519081900360840190fd5b600160a060020a0384166000908152600960205260408120541180156114ee57506161a85a115b156115b257600160a060020a03841660009081526009602052604090205461151d90600163ffffffff6157af16565b600160a060020a03851660009081526009602052604090208054919450908490811061154557fe5b6000918252602080832090910154808352600382526040808420600160a060020a03891680865260079091018452818520805460ff19169055600a8452818520838652845281852085905584526009909252912080549193506115ac906000198301615c29565b506114c7565b600160a060020a0384166000908152600960205260409020541561166c576040805160e560020a62461bcd02815260206004820152604760248201527f43616e6e6f742072656d6f76652076616c696461746f72202d2066697273742060448201527f72656d6f766520616e79206578697374696e672076616c696461746f7220617060648201527f70726f76616c7300000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600c805461168190600163ffffffff6157af16565b8154811061168b57fe5b6000918252602080832090910154600160a060020a0387811684526005909252604090922060010154600c805492909316935083929181106116c957fe5b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039485161790558683168252600590526040808220600190810154938516835291200155600c80549061172e906000198301615c29565b50600160a060020a038085166000818152600560208181526040808420600281018054909716855260068352908420805473ffffffffffffffffffffffffffffffffffffffff19908116909155948452919052805460ff19168155600181018290558354909216909255906117a66003830182615c4d565b5050604051600160a060020a038516907fe1434e25d6611e0db941968fdc97811c982ac1602e951637d206f5fdda9dd8f190600090a250505050565b6000610b8060018363ffffffff6157c616565b600160a060020a03808316600090815260046020908152604080832085845282528083206001015490931680835260059091529181205490919060ff16801561186357506000838152600360209081526040808320600160a060020a038516845260070190915290205460ff165b801561187d575060008381526003602052604090205460ff165b806118d55750600083815260036020526040902060020154600160a060020a0316158015906118d55750600083815260036020819052604090912060028101549101546118d591600160a060020a03169086906157fd565b91505b5092915050565b6002546000908190819060ff16156118f657600080fd5b6119003386615731565b151561197c576040805160e560020a62461bcd02815260206004820152603b60248201527f6f6e6c7920617070726f7665642076616c696461746f7273206d61792061737360448201527f69676e2061747472696275746573206f66207468697320747970650000000000606482015290519081900360840190fd5b600160a060020a038616600090815260046020908152604080832088845290915290205460ff1615611a44576040805160e560020a62461bcd02815260206004820152604760248201527f6475706c6963617465206174747269627574657320617265206e6f742073757060448201527f706f727465642c2072656d6f7665206578697374696e6720617474726962757460648201527f6520666972737400000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600085815260036020526040902060048101546005909101549093509150611a72348363ffffffff6157af16565b905082811015611af2576040805160e560020a62461bcd02815260206004820152603d60248201527f617474726962757465207265717569726573206120677265617465722076616c60448201527f7565207468616e2069732063757272656e746c792070726f7669646564000000606482015290519081900360840190fd5b60c0604051908101604052806001151581526020016000151581526020016000600160a060020a0316815260200133600160a060020a03168152602001858152602001828152506004600088600160a060020a0316600160a060020a03168152602001908152602001600020600087815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160000160026101000a815481600160a060020a030219169083600160a060020a0316021790555060608201518160010160006101000a815481600160a060020a030219169083600160a060020a031602179055506080820151816002015560a0820151816003015590505085600160a060020a03167ffc11e611c2bf07aa7dd09a4fb47124294eca7a7993ccc89e3b041fc41f3215773387876040518084600160a060020a0316600160a060020a03168152602001838152602001828152602001935050505060405180910390a26000811115611cc457604080518281529051869133917f299c1112ccd1f86d83236b94ae590655a270301868085c8ac82b0d7df093a2fb9181900360200190a35b6000821115611d6757611cd5613792565b600160a060020a03166108fc839081150290604051600060405180830381858888f1935050505015611d50578433611d0b613792565b600160a060020a03167f6096acf19cd2d3142f2b1ec1b1cede21aa8b5d1698264582b552923bc5fbf464856040518082815260200191505060405180910390a4611d67565b600d54611d63908363ffffffff61579d16565b600d555b505050505050565b611d776137a1565b1515611d8257600080fd5b600d54611d95908263ffffffff6157af16565b600d55604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015611dce573d6000803e3d6000fd5b505050565b60025460ff1690565b611de46137a1565b1515611def57600080fd5b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015611e6b57600080fd5b505af1158015611e7f573d6000803e3d6000fd5b505050506040513d6020811015611e9557600080fd5b50511515611dce57600080fd5b3360009081526004602090815260408083208884529091528120548190819081908190819060ff1615611f6b576040805160e560020a62461bcd02815260206004820152604760248201527f6475706c6963617465206174747269627574657320617265206e6f742073757060448201527f706f727465642c2072656d6f7665206578697374696e6720617474726962757460648201527f6520666972737400000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b60008b815260036020526040902060048101546005909101549096509450611fa985611f9d348c63ffffffff6157af16565b9063ffffffff6157af16565b935085841015612029576040805160e560020a62461bcd02815260206004820152603d60248201527f617474726962757465207265717569726573206120677265617465722076616c60448201527f7565207468616e2069732063757272656e746c792070726f7669646564000000606482015290519081900360840190fd5b604080516c01000000000000000000000000308102602080840191909152339190910260348301526000604883015234605c830152607c82018c9052609c82018e905260bc8083018e90528351808403909101815260dc90920192839052815191929182918401908083835b602083106120b45780518252601f199092019160209182019101612095565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912060008181526008909252929020549196505060ff161591506121709050576040805160e560020a62461bcd02815260206004820152603c60248201527f7369676e65642061747472696275746520617070726f76616c732066726f6d2060448201527f76616c696461746f7273206d6179206e6f742062652072657573656400000000606482015290519081900360840190fd5b6121af88888080601f01602080910402602001604051908101604052809392919081815260200183838082843750610c9494508993506155b292505050565b600160a060020a038082166000908152600660205260409020549193501690506121d9818c615731565b151561227b576040805160e560020a62461bcd02815260206004820152604760248201527f7369676e617475726520646f6573206e6f74206d6174636820616e206170707260448201527f6f7665642076616c696461746f7220666f7220676976656e206174747269627560648201527f7465207479706500000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b60c0604051908101604052806001151581526020016001151581526020016000600160a060020a0316815260200182600160a060020a031681526020018b8152602001858152506004600033600160a060020a0316600160a060020a0316815260200190815260200160002060008d815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160000160026101000a815481600160a060020a030219169083600160a060020a0316021790555060608201518160010160006101000a815481600160a060020a030219169083600160a060020a031602179055506080820151816002015560a08201518160030155905050600160086000856000191660001916815260200190815260200160002060006101000a81548160ff02191690831515021790555033600160a060020a03167ffc11e611c2bf07aa7dd09a4fb47124294eca7a7993ccc89e3b041fc41f321577828d8d6040518084600160a060020a0316600160a060020a03168152602001838152602001828152602001935050505060405180910390a26000841115612481576040805185815290518c9133917f299c1112ccd1f86d83236b94ae590655a270301868085c8ac82b0d7df093a2fb9181900360200190a35b600085111561252457612492613792565b600160a060020a03166108fc869081150290604051600060405180830381858888f193505050501561250d578a336124c8613792565b600160a060020a03167f6096acf19cd2d3142f2b1ec1b1cede21aa8b5d1698264582b552923bc5fbf464886040518082815260200191505060405180910390a4612524565b600d54612520908663ffffffff61579d16565b600d555b60008911156125b657604051600160a060020a038216908a156108fc02908b906000818181858888f193505050501561259f57604080518a815290518c913391600160a060020a038516917f6096acf19cd2d3142f2b1ec1b1cede21aa8b5d1698264582b552923bc5fbf464919081900360200190a46125b6565b600d546125b2908a63ffffffff61579d16565b600d555b5050505050505050505050565b6125cb6137a1565b15156125d657600080fd5b60025460ff16156125e657600080fd5b600160a060020a0383161515612646576040805160e560020a62461bcd02815260206004820152601b60248201527f6d75737420737570706c7920612076616c696420616464726573730000000000604482015290519081900360640190fd5b61264f836151b6565b156126ca576040805160e560020a62461bcd02815260206004820152603460248201527f612076616c696461746f722077697468207468652070726f766964656420616460448201527f647265737320616c726561647920657869737473000000000000000000000000606482015290519081900360840190fd5b600160a060020a038381166000908152600660205260409020541615612760576040805160e560020a62461bcd02815260206004820152603a60248201527f61207369676e696e67206b6579206d61746368696e67207468652070726f766960448201527f646564206164647265737320616c726561647920657869737473000000000000606482015290519081900360840190fd5b608060405190810160405280600115158152602001600c80549050815260200184600160a060020a0316815260200183838080601f01602080910402602001604051908101604052809392919081815260200183838082843750505092909352505050600160a060020a038481166000908152600560209081526040918290208451815460ff19169015151781558482015160018201559184015160028301805473ffffffffffffffffffffffffffffffffffffffff1916919094161790925560608301518051919261283b92600385019290910190615c91565b505050600160a060020a0383166000818152600660209081526040808320805473ffffffffffffffffffffffffffffffffffffffff199081168617909155600c805460018101825594527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c79093018054909316841790925581518181529081018490527f1b7d03cceb084ba7be615fd8e4ed4d42b157b5accf0863d634316e93b2207b4491859185918190810184848082843760405192018290039550909350505050a2505050565b600081815260036020818152604080842080546002808301549583015460048401546005850154600690950180548751610100600183161581026000190190921695909504601f81018a90048a0286018a0190985287855260609a998a998a998a998a998a99969895810460ff90811698620100009092041696600160a060020a0390951695949093919290918991908301828280156129e55780601f106129ba576101008083540402835291602001916129e5565b820191906000526020600020905b8154815290600101906020018083116129c857829003601f168201915b505050505096509650965096509650965096509650919395979092949650565b612a0e33615984565b565b612a186137a1565b1515612a2357600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600091600160a060020a038416916370a082319160248082019260209290919082900301818787803b158015612ade57600080fd5b505af1158015612af2573d6000803e3d6000fd5b505050506040513d6020811015612b0857600080fd5b505192915050565b6000612b1a6137a1565b1515612b2557600080fd5b60025460ff1615612b3557600080fd5b612b3e836151b6565b8015612b4e5750612b4e82611405565b1515612bca576040805160e560020a62461bcd02815260206004820152603e60248201527f6d757374207370656369667920626f746820612076616c69642061747472696260448201527f75746520616e6420616e20617661696c61626c652076616c696461746f720000606482015290519081900360840190fd5b6000828152600360209081526040808320600160a060020a038716845260070190915290205460ff1615612c6e576040805160e560020a62461bcd02815260206004820152603760248201527f76616c696461746f7220697320616c726561647920617070726f766564206f6e60448201527f207468652070726f766964656420617474726962757465000000000000000000606482015290519081900360840190fd5b506000818152600360209081526040808320600160a060020a03861680855260079091018352818420805460ff1916600190811790915560098085528386208054600a8752858820898952875285882081905591865291810182559085529383902084018590558151908152905184927fb85fe33f50f5937cbd24633a194ac0b16ca5db589959efada76f734bec961354928290030190a2505050565b6000612d156137a1565b1515612d2057600080fd5b60025460ff1615612d3057600080fd5b612d3982611405565b1515612db5576040805160e560020a62461bcd02815260206004820152603860248201527f756e61626c6520746f2072656d6f76652c206e6f20617474726962757465207460448201527f7970652077697468207468652070726f76696465642049440000000000000000606482015290519081900360840190fd5b600b8054612dca90600163ffffffff6157af16565b81548110612dd457fe5b9060005260206000200154905080600b6003600085815260200190815260200160002060010154815481101515612e0757fe5b6000918252602080832090910192909255838152600390915260408082206001908101548484529190922090910155600b805490612e49906000198301615c29565b5060008281526003602081905260408220805462ffffff191681556001810183905560028101805473ffffffffffffffffffffffffffffffffffffffff19169055908101829055600481018290556005810182905590612eac6006830182615c4d565b505060405182907f3302c92bb3443045711224b35c624d0a8c297a7b853f0084f2442de76f36e1a190600090a25050565b6000858152600360205260408120548190819081908190819062010000900460ff1615612fa1576040805160e560020a62461bcd028152602060048201526044602482018190527f6f6e6c79206f706572617461626c652061747472696275746573206d61792062908201527f65206164646564206f6e20626568616c66206f6620616e6f746865722061646460648201527f7265737300000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600160a060020a038c1660009081526004602090815260408083208e845290915290205460ff1615613069576040805160e560020a62461bcd02815260206004820152604760248201527f6475706c6963617465206174747269627574657320617265206e6f742073757060448201527f706f727465642c2072656d6f7665206578697374696e6720617474726962757460648201527f6520666972737400000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b60008b81526003602052604090206004810154600590910154909650945061309b85611f9d348c63ffffffff6157af16565b93508584101561311b576040805160e560020a62461bcd02815260206004820152603d60248201527f617474726962757465207265717569726573206120677265617465722076616c60448201527f7565207468616e2069732063757272656e746c792070726f7669646564000000606482015290519081900360840190fd5b308c33348c8f8f6040516020018088600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140187600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140186600160a060020a0316600160a060020a03166c010000000000000000000000000281526014018581526020018481526020018381526020018281526020019750505050505050506040516020818303038152906040526040518082805190602001908083835b602083106131fd5780518252601f1990920191602091820191016131de565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912060008181526008909252929020549196505060ff161591506132b99050576040805160e560020a62461bcd02815260206004820152603c60248201527f7369676e65642061747472696275746520617070726f76616c732066726f6d2060448201527f76616c696461746f7273206d6179206e6f742062652072657573656400000000606482015290519081900360840190fd5b6132f888888080601f01602080910402602001604051908101604052809392919081815260200183838082843750610c9494508993506155b292505050565b600160a060020a03808216600090815260066020526040902054919350169050613322818c615731565b15156133c4576040805160e560020a62461bcd02815260206004820152604560248201527f7369676e617475726520646f6573206e6f74206d6174636820616e206170707260448201527f6f7665642076616c696461746f7220666f722070726f7669646564206174747260648201527f6962757465000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b60c06040519081016040528060011515815260200160001515815260200133600160a060020a0316815260200182600160a060020a031681526020018b815260200185815250600460008e600160a060020a0316600160a060020a0316815260200190815260200160002060008d815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160000160026101000a815481600160a060020a030219169083600160a060020a0316021790555060608201518160010160006101000a815481600160a060020a030219169083600160a060020a031602179055506080820151816002015560a08201518160030155905050600160086000856000191660001916815260200190815260200160002060006101000a81548160ff0219169083151502179055508b600160a060020a03167ffc11e611c2bf07aa7dd09a4fb47124294eca7a7993ccc89e3b041fc41f321577828d8d6040518084600160a060020a0316600160a060020a03168152602001838152602001828152602001935050505060405180910390a260008411156135c9576040805185815290518c9133917f299c1112ccd1f86d83236b94ae590655a270301868085c8ac82b0d7df093a2fb9181900360200190a35b600085111561366c576135da613792565b600160a060020a03166108fc869081150290604051600060405180830381858888f1935050505015613655578a33613610613792565b600160a060020a03167f6096acf19cd2d3142f2b1ec1b1cede21aa8b5d1698264582b552923bc5fbf464886040518082815260200191505060405180910390a461366c565b600d54613668908663ffffffff61579d16565b600d555b60008911156136fe57604051600160a060020a038216908a156108fc02908b906000818181858888f19350505050156136e757604080518a815290518c913391600160a060020a038516917f6096acf19cd2d3142f2b1ec1b1cede21aa8b5d1698264582b552923bc5fbf464919081900360200190a46136fe565b600d546136fa908a63ffffffff61579d16565b600d555b505050505050505050505050565b613715336117e2565b151561372057600080fd5b613729816159cc565b50565b613735336117e2565b151561374057600080fd5b60025460ff161561375057600080fd5b6002805460ff191660011790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b600054600160a060020a031690565b600054600160a060020a0316331490565b600160a060020a039081166000908152600560205260409020600201541690565b6000806000806000806137eb3360008e8e8e8e615a14565b945061382c88888080601f01602080910402602001604051908101604052809392919081815260200183838082843750610c9494508b93506155b292505050565b93506006600085600160a060020a0316600160a060020a0316815260200190815260200160002060009054906101000a9004600160a060020a03169250600360008d8152602001908152602001600020600401549150600360008d81526020019081526020016000206005015490506138be896138b2838561579d90919063ffffffff16565b9063ffffffff61579d16565b8a101580156138dc575060008581526008602052604090205460ff16155b80156138ed57506138ed838d615731565b801561391457503360009081526004602090815260408083208f845290915290205460ff16155b9c9b505050505050505050505050565b6060600b80548060200260200160405190810160405280929190818152602001828054801561397257602002820191906000526020600020905b81548152602001906001019080831161395e575b5050505050905090565b600c5490565b600160a060020a03811660009081526005602090815260409182902060030180548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015613a245780601f106139f957610100808354040283529160200191613a24565b820191906000526020600020905b815481529060010190602001808311613a0757829003601f168201915b50505050509050919050565b6000613a3a6137a1565b1515613a4557600080fd5b60025460ff1615613a5557600080fd5b613a5e84611405565b15613ad9576040805160e560020a62461bcd02815260206004820152603560248201527f616e2061747472696275746520747970652077697468207468652070726f766960448201527f64656420494420616c7265616479206578697374730000000000000000000000606482015290519081900360840190fd5b83600084846040516020018085815260200184151515157f010000000000000000000000000000000000000000000000000000000000000002815260010183838082843782019150509450505050506040516020818303038152906040526040518082805190602001908083835b60208310613b665780518252601f199092019160209182019101613b47565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912060008a81526007909252929020549194505015159150613bbc90505760008481526007602052604090208190555b6000848152600760205260409020548114613c6d576040805160e560020a62461bcd02815260206004820152604660248201527f61747472696275746520747970652070726f70657274696573206d757374206d60448201527f6174636820696e697469616c2070726f706572746965732061737369676e656460648201527f20746f2049440000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b60408051610120810182526001815260006020808301829052828401829052600b5460608401526080830182905260a0830182905260c0830182905260e08301919091528251601f8601829004820281018201909352848352909161010083019186908690819084018382808284375050509290935250505060008581526003602081815260409283902084518154868401519587015160ff199091169115159190911761ff00191661010095151586021762ff00001916620100009115159190910217815560608501516001820155608085015160028201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390921691909117905560a08501519281019290925560c0840151600483015560e084015160058301559183015180519192613daa92600685019290910190615c91565b5050600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90185905550604080516020808252810184905285917fe35410b0f290a348deb893293b1f80701853a037d58ed492bd031637bac2393e9186918691908190810184848082843760405192018290039550909350505050a250505050565b613e4382611405565b1515613ebf576040805160e560020a62461bcd02815260206004820152603960248201527f756e61626c6520746f20736574206665652c206e6f206174747269627574652060448201527f747970652077697468207468652070726f766964656420494400000000000000606482015290519081900360840190fd5b60009182526003602052604090912060050155565b600080600080600080613eeb8d338e8e8e8e615a14565b9450613f2c88888080601f01602080910402602001604051908101604052809392919081815260200183838082843750610c9494508b93506155b292505050565b93506006600085600160a060020a0316600160a060020a0316815260200190815260200160002060009054906101000a9004600160a060020a03169250600360008d8152602001908152602001600020600401549150600360008d8152602001908152602001600020600501549050613fb2896138b2838561579d90919063ffffffff16565b8a10158015613fd0575060008581526008602052604090205460ff16155b8015613fe15750613fe1838d615731565b80156140115750600160a060020a038d1660009081526004602090815260408083208f845290915290205460ff16155b9d9c50505050505050505050505050565b600080600061402f6137a1565b151561403a57600080fd5b60025460ff161561404a57600080fd5b6140548585615731565b15156140f7576040805160e560020a62461bcd028152602060048201526044602482018190527f756e61626c6520746f2072656d6f76652076616c696461746f7220617070726f908201527f76616c2c2061747472696275746520697320616c726561647920756e6170707260648201527f6f76656400000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b6000848152600360209081526040808320600160a060020a03891684526007018252808320805460ff19169055600990915290205461413d90600163ffffffff6157af16565b600160a060020a03861660009081526009602052604090208054919450908490811061416557fe5b6000918252602080832090910154600160a060020a038816808452600a8352604080852089865284528085205491855260099093529190922080549294509092508391839081106141b257fe5b6000918252602080832090910192909255600160a060020a03871681526009909152604090208054906141e9906000198301615c29565b50600160a060020a0385166000818152600a602090815260408083208684528252808320859055878352808320929092558151928352905186927f615568160a38f8c266cda2edc0fe6ba12327fb9b9ccf68d71a045b6186047c8e92908290030190a25050505050565b6000600c8281548110151561426457fe5b600091825260209091200154600160a060020a031692915050565b6060600c80548060200260200160405190810160405280929190818152602001828054801561397257602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116142b9575050505050905090565b600160a060020a03808316600090815260046020908152604080832085845282528083206001015490931680835260059091529181205490919060ff16801561434e57506000838152600360209081526040808320600160a060020a038516845260070190915290205460ff165b8015614368575060008381526003602052604090205460ff165b1561439b57600160a060020a038416600090815260046020908152604080832086845290915290206002015491506118d8565b600083815260036020526040902060020154600160a060020a03161561470f57600083815260036020819052604090912001546d777972652d7965732d746f6b656e141561450c5760008381526003602090815260408083206002015481517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a038981166004830152925160019593909216936370a082319360248084019492938390030190829087803b15801561445b57600080fd5b505af115801561446f573d6000803e3d6000fd5b505050506040513d602081101561448557600080fd5b50511015614503576040805160e560020a62461bcd02815260206004820152603460248201527f6e6f2059657320546f6b656e20686173206265656e2069737375656420746f2060448201527f7468652070726f7669646564206163636f756e74000000000000000000000000606482015290519081900360840190fd5b600191506118d8565b6000838152600360208181526040808420600281015493015481517f4b5f297a000000000000000000000000000000000000000000000000000000008152600160a060020a038a8116600483015260248201929092529151931693634b5f297a93604480840194939192918390030190829087803b15801561458d57600080fd5b505af11580156145a1573d6000803e3d6000fd5b505050506040513d60208110156145b757600080fd5b5051151561465b576040805160e560020a62461bcd02815260206004820152604660248201527f617474726962757465206f66207468652070726f76696465642074797065206960448201527f73206e6f742061737369676e656420746f207468652070726f7669646564206160648201527f63636f756e740000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b6000838152600360208181526040808420600281015493015481517fcd6c8343000000000000000000000000000000000000000000000000000000008152600160a060020a038a811660048301526024820192909252915193169363cd6c834393604480840194939192918390030190829087803b1580156146dc57600080fd5b505af11580156146f0573d6000803e3d6000fd5b505050506040513d602081101561470657600080fd5b505191506118d8565b6040805160e560020a62461bcd02815260206004820152602481018290527f636f756c64206e6f742066696e6420616e206174747269627574652076616c7560448201527f65206174207468652070726f7669646564206163636f756e7420616e64204944606482015290519081900360840190fd5b600b5490565b600061479b878787878787615a14565b979650505050505050565b6147af82611405565b1515614851576040805160e560020a62461bcd02815260206004820152604360248201527f756e61626c6520746f20736574206d696e696d756d207374616b652c206e6f2060448201527f61747472696275746520747970652077697468207468652070726f766964656460648201527f2049440000000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b60009182526003602052604090912060040155565b61486f83611405565b1515614911576040805160e560020a62461bcd02815260206004820152604660248201527f756e61626c6520746f20736574207365636f6e6461727920736f757263652c2060448201527f6e6f2061747472696275746520747970652077697468207468652070726f766960648201527f6465642049440000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600092835260036020819052604090932060028101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039490941693909317909255910155565b60006149616137a1565b151561496c57600080fd5b60025460ff161561497c57600080fd5b61498584611405565b15614a00576040805160e560020a62461bcd02815260206004820152603560248201527f616e2061747472696275746520747970652077697468207468652070726f766960448201527f64656420494420616c7265616479206578697374730000000000000000000000606482015290519081900360840190fd5b83600184846040516020018085815260200184151515157f010000000000000000000000000000000000000000000000000000000000000002815260010183838082843782019150509450505050506040516020818303038152906040526040518082805190602001908083835b60208310614a8d5780518252601f199092019160209182019101614a6e565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912060008a81526007909252929020549194505015159150614ae390505760008481526007602052604090208190555b6000848152600760205260409020548114614b94576040805160e560020a62461bcd02815260206004820152604660248201527f61747472696275746520747970652070726f70657274696573206d757374206d60448201527f6174636820696e697469616c2070726f706572746965732061737369676e656460648201527f20746f2049440000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b604080516101208101825260018082526020808301919091526000828401819052600b5460608401526080830181905260a0830181905260c0830181905260e08301528251601f8601829004820281018201909352848352909161010083019186908690819084018382808284375050509290935250505060008581526003602081815260409283902084518154868401519587015160ff199091169115159190911761ff00191661010095151586021762ff00001916620100009115159190910217815560608501516001820155608085015160028201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390921691909117905560a08501519281019290925560c0840151600483015560e084015160058301559183015180519192613daa92600685019290910190615c91565b6000614cdc8383615731565b9392505050565b614ceb6137a1565b1515614cf657600080fd5b61372981615ae4565b6002546000908190819081908190819060ff1615614d1c57600080fd5b600160a060020a03881660009081526004602090815260408083208a845290915290205460ff161515614dbf576040805160e560020a62461bcd02815260206004820152602760248201527f6f6e6c79206578697374696e672061747472696275746573206d61792062652060448201527f72656d6f76656400000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0380891660009081526004602090815260408083208b845290915290206001015416955033861480614e105750614dfb613792565b600160a060020a031633600160a060020a0316145b1515614eb2576040805160e560020a62461bcd02815260206004820152604760248201527f6f6e6c79206a7572697364696374696f6e206f722069737375696e672076616c60448201527f696461746f7273206d6179207265766f6b65206172626974726172792061747460648201527f7269627574657300000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600160a060020a03881660009081526004602090815260408083208a8452909152902060038101549054909550610100900460ff1615614ef457879350614f35565b600160a060020a0380891660009081526004602090815260408083208b8452909152902054620100009004169250821515614f3157859350614f35565b8293505b600160a060020a0380891660008181526004602090815260408083208c84528252808320805475ffffffffffffffffffffffffffffffffffffffffffff1916815560018101805473ffffffffffffffffffffffffffffffffffffffff1916905560028101849055600301929092558151938a16845283018a9052805191927faa5b822df0611950f79edb91a7f829d92df3d2ae66b54ee3b5b15ead069e1a67929081900390910190a2600085118015614fef575030318511155b156151ac576193449150615009823a63ffffffff615b6116565b90508085111561513a57600160a060020a0384166108fc615030878463ffffffff6157af16565b6040518115909202916000818181858888f193505050501561509e5786600160a060020a0385167fcb777cb6ab680dc1db2889b92613a0640bc47be07dc40a8f640dfd7e7882790d615088888563ffffffff6157af16565b60408051918252519081900360200190a36150c4565b6150c06150b1868363ffffffff6157af16565b600d549063ffffffff61579d16565b600d555b6040805182815290518891600160a060020a0387169132917f016befcde2d759172ba1344b7a10f58a14adfcea6cd7cb248f891a1480a3cf4d919081900360200190a4604051329082156108fc029083906000818181858888f19350505050158015615134573d6000803e3d6000fd5b506151ac565b6040805186815290518891600160a060020a0387169132917f016befcde2d759172ba1344b7a10f58a14adfcea6cd7cb248f891a1480a3cf4d919081900360200190a4604051329086156108fc029087906000818181858888f193505050501580156151aa573d6000803e3d6000fd5b505b5050505050505050565b600160a060020a031660009081526005602052604090205460ff1690565b6000818152600360205260408120548190610100900460ff161561528e576040805160e560020a62461bcd02815260206004820152604860248201527f6f6e6c79206a7572697364696374696f6e206f722069737375696e672076616c60448201527f696461746f72206d61792072656d6f766520612072657374726963746564206160648201527f7474726962757465000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600160a060020a038416600090815260046020908152604080832086845290915290205460ff161515615331576040805160e560020a62461bcd02815260206004820152602760248201527f6f6e6c79206578697374696e672061747472696275746573206d61792062652060448201527f72656d6f76656400000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0384811660009081526004602090815260408083208784529091529020546201000090041633146153ff576040805160e560020a62461bcd02815260206004820152604760248201527f6f6e6c7920616e2061737369676e696e67206f70657261746f72206d6179207260448201527f656d6f766520617474726962757465206f6e20626568616c66206f6620616e2060648201527f6164647265737300000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b5050600160a060020a0382811660008181526004602090815260408083208684528252808320600181018054600383018054845475ffffffffffffffffffffffffffffffffffffffffffff1916855573ffffffffffffffffffffffffffffffffffffffff1983169093556002909301869055949091558151939095168084529183018690528051919493927faa5b822df0611950f79edb91a7f829d92df3d2ae66b54ee3b5b15ead069e1a67929081900390910190a26000811180156154c6575030318111155b1561553f57604051339082156108fc029083906000818181858888f193505050501561552857604080518281529051849133917fcb777cb6ab680dc1db2889b92613a0640bc47be07dc40a8f640dfd7e7882790d9181900360200190a361553f565b600d5461553b908263ffffffff61579d16565b600d555b50505050565b60008181526003602090815260409182902060060180548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015613a245780601f106139f957610100808354040283529160200191613a24565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c80830185905283518084039091018152605c909201928390528151600093918291908401908083835b6020831061562a5780518252601f19909201916020918201910161560b565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b600080600080845160411415156156765760009350615728565b50505060208201516040830151606084015160001a601b60ff8216101561569b57601b015b8060ff16601b141580156156b357508060ff16601c14155b156156c15760009350615728565b60408051600080825260208083018085528a905260ff8516838501526060830187905260808301869052925160019360a0808501949193601f19840193928390039091019190865af115801561571b573d6000803e3d6000fd5b5050506020604051035193505b50505092915050565b600160a060020a03821660009081526005602052604081205460ff16801561577e57506000828152600360209081526040808320600160a060020a038716845260070190915290205460ff165b8015614cdc57505060009081526003602052604090205460ff16919050565b600082820183811015614cdc57600080fd5b600080838311156157bf57600080fd5b5050900390565b6000600160a060020a03821615156157dd57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b6000806060836d777972652d7965732d746f6b656e14156158c357600186600160a060020a03166370a08231876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561588e57600080fd5b505af11580156158a2573d6000803e3d6000fd5b505050506040513d60208110156158b857600080fd5b50511015925061597b565b614e205a116158d2575a6158d6565b614e205b60408051600160a060020a038816602482015260448082018890528251808303909101815260649091018252602081810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f4b5f297a0000000000000000000000000000000000000000000000000000000017815282519351600081529496509194509092908183858c89fa806001811461597057615975565b825197505b50505050505b50509392505050565b61599560018263ffffffff615b8f16565b604051600160a060020a038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b6159dd60018263ffffffff615bdb16565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b604080516c01000000000000000000000000308102602080840191909152600160a060020a03808b168302603485015289169091026048830152605c8201859052607c8201849052609c820187905260bc8083018790528351808403909101815260dc909201928390528151600093918291908401908083835b60208310615aad5780518252601f199092019160209182019101615a8e565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209a9950505050505050505050565b600160a060020a0381161515615af957600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080831515615b7457600091506118d8565b50828202828482811515615b8457fe5b0414614cdc57600080fd5b600160a060020a0381161515615ba457600080fd5b615bae82826157c6565b1515615bb957600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0381161515615bf057600080fd5b615bfa82826157c6565b15615c0457600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b815481835581811115611dce57600083815260209020611dce918101908301615d0f565b50805460018160011615610100020316600290046000825580601f10615c735750613729565b601f0160209004906000526020600020908101906137299190615d0f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615cd257805160ff1916838001178555615cff565b82800160010185558215615cff579182015b82811115615cff578251825591602001919060010190615ce4565b50615d0b929150615d0f565b5090565b61139e91905b80821115615d0b5760008155600101615d155600a165627a7a723058206c70c33d2c66e5b7ac30a8b856ddb8a4cb71d94ae50d28e2071e7ff6b58ee3fc0029"
}