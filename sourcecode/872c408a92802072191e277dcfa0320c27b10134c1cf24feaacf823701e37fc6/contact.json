{
  "address": "0x859a46bcab721b97af727cd4be4a7d84f6d8880b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Main",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-20\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\ncontract Main {\n\n    using SafeMath for uint;\n\n    // The nested mapping is used to implement the round-based logic\n    mapping(uint => mapping(address => uint)) public balance;\n    mapping(uint => mapping(address => uint)) public time;\n    mapping(uint => mapping(address => uint)) public percentWithdraw;\n    mapping(uint => mapping(address => uint)) public allPercentWithdraw;\n    mapping(uint => uint) public investorsByRound;\n\n    uint public stepTime = 24 hours;\n    uint public countOfInvestors = 0;\n    uint public totalRaised;\n    uint public rounds_counter;\n    uint public projectPercent = 10;\n    uint public totalWithdrawed = 0;\n    bool public started;\n\n    address public ownerAddress;\n\n    event Invest(uint indexed round, address indexed investor, uint256 amount);\n    event Withdraw(uint indexed round, address indexed investor, uint256 amount);\n\n    modifier userExist() {\n        require(balance[rounds_counter][msg.sender] > 0, \"Address not found\");\n        _;\n    }\n\n    modifier checkTime() {\n        require(now >= time[rounds_counter][msg.sender].add(stepTime), \"Too fast payout request\");\n        _;\n    }\n\n    modifier onlyStarted() {\n        require(started == true);\n        _;\n    }\n\n    // @dev This function is processing all the logic with withdraw\n    function collectPercent() userExist checkTime internal {\n\n        // Check that user already has received 200%\n        // In this case - remove him from the db\n        if ((balance[rounds_counter][msg.sender].mul(2)) <= allPercentWithdraw[rounds_counter][msg.sender]) {\n            balance[rounds_counter][msg.sender] = 0;\n            time[rounds_counter][msg.sender] = 0;\n            percentWithdraw[rounds_counter][msg.sender] = 0;\n        } else {\n            // User has not reached the limit yet\n            // Process the withdraw and update the stats\n\n            uint payout = payoutAmount();  // Get the amount of weis to send\n\n            percentWithdraw[rounds_counter][msg.sender] = percentWithdraw[rounds_counter][msg.sender].add(payout);\n            allPercentWithdraw[rounds_counter][msg.sender] = allPercentWithdraw[rounds_counter][msg.sender].add(payout);\n\n            // Send Ethers\n            msg.sender.transfer(payout);\n            totalWithdrawed = totalWithdrawed.add(payout);\n\n            emit Withdraw(rounds_counter, msg.sender, payout);\n        }\n\n    }\n\n    // @dev The withdraw percentage depends on two things:\n    // @dev first one is total amount of Ethers on the contract balance\n    // @dev and second one is the deposit size of current investor\n    function percentRate() public view returns(uint) {\n\n        uint contractBalance = address(this).balance;\n        uint user_balance = balance[rounds_counter][msg.sender];\n        uint contract_depending_percent = 0;\n\n        // Check the contract balance and add some additional percents\n        // Because of the Solidity troubles with floats\n        // 20 means 2%, 15 means 1.5%, 10 means 1%\n        if (contractBalance >= 10000 ether) {\n            contract_depending_percent = 20;\n        } else if (contractBalance >= 5000 ether) {\n            contract_depending_percent = 15;\n        } else if (contractBalance >= 1000 ether) {\n            contract_depending_percent = 10;\n        }\n\n        // Check the investor's balance\n        if (user_balance < 9999999999999999999) {          // < 9.999999 Ethers\n          return (30 + contract_depending_percent);\n        } else if (user_balance < 29999999999999999999) {  // < 29.999999 Ethers\n          return (35 + contract_depending_percent);\n        } else if (user_balance < 49999999999999999999) {  // < 49.999999 Ethers\n          return (40 + contract_depending_percent);\n        } else {                                        // <= 100 Ethers\n          return (45 + contract_depending_percent);\n        }\n\n    }\n\n\n    // @dev This function returns the amount in weis for withdraw\n    function payoutAmount() public view returns(uint256) {\n        // Minimum percent is 3%, maximum percent is 6.5% per 24 hours\n        uint256 percent = percentRate();\n\n        uint256 different = now.sub(time[rounds_counter][msg.sender]).div(stepTime);\n\n        // 1000 instead of 100, because in case of 3%\n        // 'percent' equals to 30 and so on\n        uint256 rate = balance[rounds_counter][msg.sender].mul(percent).div(1000);\n\n        uint256 withdrawalAmount = rate.mul(different).sub(percentWithdraw[rounds_counter][msg.sender]);\n\n        return withdrawalAmount;\n    }\n\n    // @dev This function is called each time when user sends Ethers\n    function deposit() private {\n        if (msg.value > 0) { // User wants to invest\n            require(balance[rounds_counter][msg.sender] == 0);  // User can invest only once\n\n            if (balance[rounds_counter][msg.sender] == 0) {  // New investor\n              countOfInvestors = countOfInvestors.add(1);\n              investorsByRound[rounds_counter] = investorsByRound[rounds_counter].add(1);\n            }\n\n            // If already has some investments and the time gap is correct\n            // make a withdraw\n            if (\n              balance[rounds_counter][msg.sender] > 0 &&\n              now > time[rounds_counter][msg.sender].add(stepTime)\n            ) {\n                collectPercent();\n                percentWithdraw[rounds_counter][msg.sender] = 0;\n            }\n\n            balance[rounds_counter][msg.sender] = balance[rounds_counter][msg.sender].add(msg.value);\n            time[rounds_counter][msg.sender] = now;\n\n            // Send fee to the owner\n            ownerAddress.transfer(msg.value.mul(projectPercent).div(100));\n            totalRaised = totalRaised.add(msg.value);\n\n            emit Invest(rounds_counter, msg.sender, msg.value);\n        } else {  // User wants to withdraw his profit\n            collectPercent();\n        }\n    }\n\n    // @dev This function is called when user sends Ethers\n    function() external payable onlyStarted {\n        // Maximum deposit per address - 100 Ethers\n        require(balance[rounds_counter][msg.sender].add(msg.value) <= 100 ether, \"More than 100 ethers\");\n\n        // Check that contract has less than 10%\n        // of total collected investments\n        if (address(this).balance < totalRaised.div(100).mul(10)) {\n            startNewRound();\n        }\n\n        deposit();\n    }\n\n    // @dev In the case of new round - reset all the stats\n    // @dev and start new round with the rest of the balance on the contract\n    function startNewRound() internal {\n        rounds_counter = rounds_counter.add(1);\n        totalRaised = address(this).balance;\n    }\n\n    // @dev Enable the game\n    function start() public {\n        require(ownerAddress == msg.sender);\n        started = true;\n    }\n\n    constructor() public {\n        ownerAddress = msg.sender;\n        started = false;\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"percentWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorsByRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWithdrawed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rounds_counter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allPercentWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]",
  "bytecode": "6080604052620151806005556000600655600a6009556000600a5534801561002657600080fd5b50600b805461010060a860020a03191633610100021760ff19169055610c18806100516000396000f3006080604052600436106100e55763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630613993481146101dd5780631f2698ab1461021357806332f435761461023c57806335d4451c1461026057806360ab24a3146102755780636b46c8c3146102995780637c731c0e146102ae5780638090114f146102c65780638f84aa09146102db578063b74126cc1461030c578063be9a655514610321578063c5c4744c14610336578063c7e8d36e1461034b578063dfc02ef514610360578063f3f7d63314610384578063f488fdd014610399575b600b5460ff1615156001146100f957600080fd5b60085460009081526020818152604080832033845290915290205468056bc75e2d631000009061012f903463ffffffff6103ae16565b111561019c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4d6f7265207468616e2031303020657468657273000000000000000000000000604482015290519081900360640190fd5b6101c3600a6101b760646007546103cb90919063ffffffff16565b9063ffffffff6103ee16565b303110156101d3576101d361041c565b6101db61043a565b005b3480156101e957600080fd5b50610201600435600160a060020a036024351661067f565b60408051918252519081900360200190f35b34801561021f57600080fd5b50610228610699565b604080519115158252519081900360200190f35b34801561024857600080fd5b50610201600435600160a060020a03602435166106a2565b34801561026c57600080fd5b506102016106bf565b34801561028157600080fd5b50610201600435600160a060020a03602435166106c5565b3480156102a557600080fd5b506102016106e2565b3480156102ba57600080fd5b506102016004356107a9565b3480156102d257600080fd5b506102016107bb565b3480156102e757600080fd5b506102f0610880565b60408051600160a060020a039092168252519081900360200190f35b34801561031857600080fd5b50610201610894565b34801561032d57600080fd5b506101db61089a565b34801561034257600080fd5b506102016108c5565b34801561035757600080fd5b506102016108cb565b34801561036c57600080fd5b50610201600435600160a060020a03602435166108d1565b34801561039057600080fd5b506102016108ee565b3480156103a557600080fd5b506102016108f4565b6000828201838110156103c057600080fd5b8091505b5092915050565b6000808083116103da57600080fd5b82848115156103e557fe5b04949350505050565b60008083151561040157600091506103c4565b5082820282848281151561041157fe5b04146103c057600080fd5b60085461043090600163ffffffff6103ae16565b6008553031600755565b6000341115610675576008546000908152602081815260408083203384529091529020541561046857600080fd5b60085460009081526020818152604080832033845290915290205415156104d65760065461049d90600163ffffffff6103ae16565b6006556008546000908152600460205260409020546104c390600163ffffffff6103ae16565b6008546000908152600460205260409020555b60085460009081526020818152604080832033845290915281205411801561052b575060055460085460009081526001602090815260408083203384529091529020546105289163ffffffff6103ae16565b42115b15610556576105386108fa565b60085460009081526002602090815260408083203384529091528120555b600854600090815260208181526040808320338452909152902054610581903463ffffffff6103ae16565b6008805460009081526020818152604080832033808552908352818420959095559254825260018152828220938252929092529020429055600b54600954610100909104600160a060020a0316906108fc906105f7906064906105eb90349063ffffffff6103ee16565b9063ffffffff6103cb16565b6040518115909202916000818181858888f1935050505015801561061f573d6000803e3d6000fd5b50600754610633903463ffffffff6103ae16565b6007556008546040805134815290513392917f22362fd53da7e9833dab2bb7adb521163c164fb314a070b76b7fafb0ca4fd8c4919081900360200190a361067d565b61067d6108fa565b565b600060208181529281526040808220909352908152205481565b600b5460ff1681565b600260209081526000928352604080842090915290825290205481565b60095481565b600160209081526000928352604080842090915290825290205481565b60008060008060006106f26107bb565b600554600854600090815260016020908152604080832033845290915290205491955061072a916105eb90429063ffffffff610bd516565b600854600090815260208181526040808320338452909152902054909350610760906103e8906105eb908763ffffffff6103ee16565b60085460009081526002602090815260408083203384529091529020549092506107a090610794848663ffffffff6103ee16565b9063ffffffff610bd516565b95945050505050565b60046020526000908152604090205481565b6008546000908152602081815260408083203384529091528120543031908269021e19e0c9bab240000083106107f357506014610820565b69010f0cf064dd59200000831061080c5750600f610820565b683635c9adc5dea0000083106108205750600a5b678ac7230489e7ffff82101561083b5780601e01935061087a565b6801a055690d9db7ffff8210156108575780602301935061087a565b6802b5e3af16b187ffff8210156108735780602801935061087a565b80602d0193505b50505090565b600b546101009004600160a060020a031681565b600a5481565b600b546101009004600160a060020a031633146108b657600080fd5b600b805460ff19166001179055565b60075481565b60085481565b600360209081526000928352604080842090915290825290205481565b60065481565b60055481565b600854600090815260208181526040808320338452909152812054811061098257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f41646472657373206e6f7420666f756e64000000000000000000000000000000604482015290519081900360640190fd5b60055460085460009081526001602090815260408083203384529091529020546109b19163ffffffff6103ae16565b421015610a1f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f546f6f2066617374207061796f75742072657175657374000000000000000000604482015290519081900360640190fd5b60085460008181526003602090815260408083203380855290835281842054948452838352818420908452909152902054610a6190600263ffffffff6103ee16565b11610ab657600880546000908152602081815260408083203380855290835281842084905584548452600183528184208185528352818420849055935483526002825280832093835292905290812055610bd2565b610abe6106e2565b6008546000908152600260209081526040808320338452909152902054909150610aee908263ffffffff6103ae16565b6008805460009081526002602090815260408083203380855290835281842095909555925482526003815282822093825292909252902054610b36908263ffffffff6103ae16565b600854600090815260036020908152604080832033808552925280832093909355915183156108fc0291849190818181858888f19350505050158015610b80573d6000803e3d6000fd5b50600a54610b94908263ffffffff6103ae16565b600a556008546040805183815290513392917f9da6493a92039daf47d1f2d7a782299c5994c6323eb1e972f69c432089ec52bf919081900360200190a35b50565b60008083831115610be557600080fd5b50509003905600a165627a7a7230582097da9ba47836922c5c6dd3a0c8cbd578746ea2b929b66c30a710964e76a2c1840029"
}