{
  "address": "0xb2e260f12406c401874ecc960893c0f74cd6afcd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "BitUP Token",
  "contractName": "BitUPToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-07\n*/\n\npragma solidity ^0.4.18;\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\ncontract BitUPToken is ERC20, Ownable {\n\n    using SafeMath for uint;\n\n/*----------------- Token Information -----------------*/\n\n    string public constant name = \"BitUP Token\";\n    string public constant symbol = \"BUT\";\n\n    uint8 public decimals = 18;                            // (ERC20 API) Decimal precision, factor is 1e18\n    \n    mapping (address => uint256) balances;                 // User's balances table\n    mapping (address => mapping (address => uint256)) allowed; // User's allowances table\n\n/*----------------- Alloc Information -----------------*/\n\n    uint256 public totalSupply;\n    \n    uint256 public presaleSupply;                          // Pre-sale supply\n    uint256 public angelSupply;                          // Angel supply\n    uint256 public marketingSupply;                           // marketing supply\n    uint256 public foundationSupply;                       // /Foundation supply\n    uint256 public teamSupply;                          //  Team supply\n    uint256 public communitySupply;                 //  Community supply\n    \n    uint256 public teamSupply6Months;                          //Amount of Team supply could be released after 6 months\n    uint256 public teamSupply12Months;                          //Amount of Team supply could be released after 12 months\n    uint256 public teamSupply18Months;                          //Amount of Team supply could be released after 18 months\n    uint256 public teamSupply24Months;                          //Amount of Team supply could be released after 24 months\n\n    uint256 public TeamLockingPeriod6Months;                  // Locking period for team's supply, release 1/4 per 6 months\n    uint256 public TeamLockingPeriod12Months;                  // Locking period for team's supply, release 1/4 per 6 months\n    uint256 public TeamLockingPeriod18Months;                  // Locking period for team's supply, release 1/4 per 6 months\n    uint256 public TeamLockingPeriod24Months;                  // Locking period for team's supply, release 1/4 per 6 months\n    \n    address public presaleAddress;                       // Presale address\n    address public angelAddress;                        // Angel address\n    address public marketingAddress;                       // marketing address\n    address public foundationAddress;                      // Foundation address\n    address public teamAddress;                         // Team address\n    address public communityAddress;                         // Community address    \n\n    function () {\n         //if ether is sent to this address, send it back.\n         //throw;\n         require(false);\n    }\n\n/*----------------- Modifiers -----------------*/\n\n    modifier nonZeroAddress(address _to) {                 // Ensures an address is provided\n        require(_to != 0x0);\n        _;\n    }\n\n    modifier nonZeroAmount(uint _amount) {                 // Ensures a non-zero amount\n        require(_amount > 0);\n        _;\n    }\n\n    modifier nonZeroValue() {                              // Ensures a non-zero value is passed\n        require(msg.value > 0);\n        _;\n    }\n\n    modifier checkTeamLockingPeriod6Months() {                 // Ensures locking period is over\n        assert(now >= TeamLockingPeriod6Months);\n        _;\n    }\n    \n    modifier checkTeamLockingPeriod12Months() {                 // Ensures locking period is over\n        assert(now >= TeamLockingPeriod12Months);\n        _;\n    }\n    \n    modifier checkTeamLockingPeriod18Months() {                 // Ensures locking period is over\n        assert(now >= TeamLockingPeriod18Months);\n        _;\n    }\n    \n    modifier checkTeamLockingPeriod24Months() {                 // Ensures locking period is over\n        assert(now >= TeamLockingPeriod24Months);\n        _;\n    }\n    \n    modifier onlyTeam() {                             // Ensures only team can call the function\n        require(msg.sender == teamAddress);\n        _;\n    }\n    \n/*----------------- Burn -----------------*/\n    \n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        // balances[burner] = balances[burner].sub(_value);\n        decrementBalance(burner, _value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n\n/*----------------- Token API -----------------*/\n\n    // -------------------------------------------------\n    // Total supply\n    // -------------------------------------------------\n    function totalSupply() constant returns (uint256){\n        return totalSupply;\n    }\n\n    // -------------------------------------------------\n    // Transfers amount to address\n    // -------------------------------------------------\n    function transfer(address _to, uint256 _amount) returns (bool success) {\n        require(balanceOf(msg.sender) >= _amount);\n        uint previousBalances = balances[msg.sender] + balances[_to];\n        addToBalance(_to, _amount);\n        decrementBalance(msg.sender, _amount);\n        Transfer(msg.sender, _to, _amount);\n        assert(balances[msg.sender] + balances[_to] == previousBalances);\n        return true;\n    }\n\n    // -------------------------------------------------\n    // Transfers from one address to another (need allowance to be called first)\n    // -------------------------------------------------\n    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) {\n        require(balanceOf(_from) >= _amount);\n        require(allowance(_from, msg.sender) >= _amount);\n        uint previousBalances = balances[_from] + balances[_to];\n        decrementBalance(_from, _amount);\n        addToBalance(_to, _amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        Transfer(_from, _to, _amount);\n        assert(balances[_from] + balances[_to] == previousBalances);\n        return true;\n    }\n\n    // -------------------------------------------------\n    // Approves another address a certain amount of FUEL\n    // -------------------------------------------------\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        require((_value == 0) || (allowance(msg.sender, _spender) == 0));\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    // -------------------------------------------------\n    // Gets an address's FUEL allowance\n    // -------------------------------------------------\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    // -------------------------------------------------\n    // Gets the FUEL balance of any address\n    // -------------------------------------------------\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    // -------------------------------------------------\n    // Contract's constructor\n    // -------------------------------------------------\n    function BitUPToken() {\n        totalSupply  =    1000000000 * 1e18;               // 100% - 1 billion total BUT with 18 decimals\n\n        presaleSupply =    400000000 * 1e18;               //  40% -  400 million BUT pre-crowdsale\n        angelSupply =       50000000 * 1e18;               //  5% - 50 million BUT for the angel crowdsale\n        teamSupply =       200000000 * 1e18;               //  20% -  200 million BUT for team. 1/4 part released per 6 months\n        foundationSupply = 150000000 * 1e18;               //  15% -  300 million BUT for foundation/incentivising efforts\n        marketingSupply =  100000000 * 1e18;       //  10% -  100 million BUT for \n        communitySupply =  100000000 * 1e18;       //  10% -  100 million BUT for      \n        \n        teamSupply6Months = 50000000 * 1e18;               // team supply release 1/4 per 6 months\n        teamSupply12Months = 50000000 * 1e18;               // team supply release 1/4 per 6 months\n        teamSupply18Months = 50000000 * 1e18;               // team supply release 1/4 per 6 months\n        teamSupply24Months = 50000000 * 1e18;               // team supply release 1/4 per 6 months\n        \n        angelAddress    = 0xeF01453A730486d262D0b490eF1aDBBF62C2Fe00;                         // Angel address\n        presaleAddress = 0x2822332F63a6b80E21cEA5C8c43Cb6f393eb5703;                         // Presale address\n        teamAddress = 0x8E199e0c1DD38d455815E11dc2c9A64D6aD893B7;                         // Team address\n        foundationAddress = 0xcA972ac76F4Db643C30b86E4A9B54EaBB88Ce5aD;                         // Foundation address\n        marketingAddress = 0xd2631280F7f0472271Ae298aF034eBa549d792EA;                         // marketing address\n        communityAddress = 0xF691e8b2B2293D3d3b06ecdF217973B40258208C;                         //Community address\n        \n        \n        TeamLockingPeriod6Months = now.add(180 * 1 days); // 180 days locking period\n        TeamLockingPeriod12Months = now.add(360 * 1 days); // 360 days locking period\n        TeamLockingPeriod18Months = now.add(450 * 1 days); // 450 days locking period\n        TeamLockingPeriod24Months = now.add(730 * 1 days); // 730 days locking period\n        \n        addToBalance(foundationAddress, foundationSupply);\n        foundationSupply = 0;\n        addToBalance(marketingAddress, marketingSupply);\n        marketingSupply = 0;\n        addToBalance(communityAddress, communitySupply);\n        communitySupply = 0;\n        addToBalance(presaleAddress, presaleSupply);\n        presaleSupply = 0;\n        addToBalance(angelAddress, angelSupply);\n        angelSupply = 0;\n    }\n\n    // -------------------------------------------------\n    // Releases 1/4 of team supply after 6 months\n    // -------------------------------------------------\n    function releaseTeamTokensAfter6Months() checkTeamLockingPeriod6Months onlyTeam returns(bool success) {\n        require(teamSupply6Months > 0);\n        addToBalance(teamAddress, teamSupply6Months);\n        Transfer(0x0, teamAddress, teamSupply6Months);\n        teamSupply6Months = 0;\n        teamSupply.sub(teamSupply6Months);\n        return true;\n    }\n    \n    // -------------------------------------------------\n    // Releases 1/4 of team supply after 12 months\n    // -------------------------------------------------\n    function releaseTeamTokensAfter12Months() checkTeamLockingPeriod12Months onlyTeam returns(bool success) {\n        require(teamSupply12Months > 0);\n        addToBalance(teamAddress, teamSupply12Months);\n        Transfer(0x0, teamAddress, teamSupply12Months);\n        teamSupply12Months = 0;\n        teamSupply.sub(teamSupply12Months);\n        return true;\n    }\n    \n    // -------------------------------------------------\n    // Releases 1/4 of team supply after 18 months\n    // -------------------------------------------------\n    function releaseTeamTokensAfter18Months() checkTeamLockingPeriod18Months onlyTeam returns(bool success) {\n        require(teamSupply18Months > 0);\n        addToBalance(teamAddress, teamSupply18Months);\n        Transfer(0x0, teamAddress, teamSupply18Months);\n        teamSupply18Months = 0;\n        teamSupply.sub(teamSupply18Months);\n        return true;\n    }\n    \n    // -------------------------------------------------\n    // Releases 1/4 of team supply after 24 months\n    // -------------------------------------------------\n    function releaseTeamTokensAfter24Months() checkTeamLockingPeriod24Months onlyTeam returns(bool success) {\n        require(teamSupply24Months > 0);\n        addToBalance(teamAddress, teamSupply24Months);\n        Transfer(0x0, teamAddress, teamSupply24Months);\n        teamSupply24Months = 0;\n        teamSupply.sub(teamSupply24Months);\n        return true;\n    }\n\n    // -------------------------------------------------\n    // Adds to balance\n    // -------------------------------------------------\n    function addToBalance(address _address, uint _amount) internal {\n        balances[_address] = SafeMath.add(balances[_address], _amount);\n    }\n\n    // -------------------------------------------------\n    // Removes from balance\n    // -------------------------------------------------\n    function decrementBalance(address _address, uint _amount) internal {\n        balances[_address] = SafeMath.sub(balances[_address], _amount);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TeamLockingPeriod6Months\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"angelAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTeamTokensAfter6Months\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply12Months\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTeamTokensAfter24Months\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TeamLockingPeriod24Months\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTeamTokensAfter12Months\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply18Months\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTeamTokensAfter18Months\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TeamLockingPeriod18Months\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply24Months\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply6Months\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TeamLockingPeriod12Months\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"angelSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communitySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526012600060146101000a81548160ff021916908360ff16021790555034156200002c57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506b033b2e3c9fd0803ce80000006003819055506b014adf4b7320334b900000006004819055506a295be96e640669720000006005819055506aa56fa5b99019a5c80000006008819055506a7c13bc4b2c133c560000006007819055506a52b7d2dcc80cd2e40000006006819055506a52b7d2dcc80cd2e40000006009819055506a295be96e64066972000000600a819055506a295be96e64066972000000600b819055506a295be96e64066972000000600c819055506a295be96e64066972000000600d8190555073ef01453a730486d262d0b490ef1adbbf62c2fe00601360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550732822332f63a6b80e21cea5c8c43cb6f393eb5703601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550738e199e0c1dd38d455815e11dc2c9a64d6ad893b7601660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073ca972ac76f4db643c30b86e4a9b54eabb88ce5ad601560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073d2631280f7f0472271ae298af034eba549d792ea601460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073f691e8b2b2293d3d3b06ecdf217973b40258208c601760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200035862ed4e0042620005676401000000000262001b97179091906401000000009004565b600e81905550620003856301da9c0042620005676401000000000262001b97179091906401000000009004565b600f81905550620003b2630251430042620005676401000000000262001b97179091906401000000009004565b601081905550620003df6303c2670042620005676401000000000262001b97179091906401000000009004565b60118190555062000429601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600754620005866401000000000262001aee176401000000009004565b600060078190555062000475601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600654620005866401000000000262001aee176401000000009004565b6000600681905550620004c1601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600954620005866401000000000262001aee176401000000009004565b60006009819055506200050d601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600454620005866401000000000262001aee176401000000009004565b600060048190555062000559601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600554620005866401000000000262001aee176401000000009004565b60006005819055506200062c565b60008082840190508381101515156200057c57fe5b8091505092915050565b620005e5600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482620005676401000000000262001b97176401000000009004565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b611be1806200063c6000396000f3006060604052600436106101c2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101dc578063095ea7b31461026a578063122fe685146102c457806318160ddd146103195780631c75f0851461034257806323924cff1461039757806323b872dd146103c0578063259fefcb146104395780632cfac6ec1461048e5780632e4040b0146104b7578063313ce567146104e457806334032f4f14610513578063408a80941461053c57806342966c681461056957806357cd23a61461058c578063624bb58f146105b5578063625bc37b146105de57806365670adc1461060b5780636698f1411461063457806370a082311461066157806382e6d3d6146106ae578063840880f2146106d757806386e476dd146107005780638b360f4d146107555780638da5cb5b1461077e57806395d89b41146107d3578063a5ece94114610861578063a9059cbb146108b6578063ac5277a414610910578063b3a196e914610939578063b64d44f114610962578063d7fb5ef51461098b578063dd62ed3e146109b4578063f2fde38b14610a20578063fcceea2614610a59578063fcf07c6b14610a82575b34156101cd57600080fd5b600015156101da57600080fd5b005b34156101e757600080fd5b6101ef610ad7565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561022f578082015181840152602081019050610214565b50505050905090810190601f16801561025c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561027557600080fd5b6102aa600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b10565b604051808215151515815260200191505060405180910390f35b34156102cf57600080fd5b6102d7610c24565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561032457600080fd5b61032c610c4a565b6040518082815260200191505060405180910390f35b341561034d57600080fd5b610355610c54565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103a257600080fd5b6103aa610c7a565b6040518082815260200191505060405180910390f35b34156103cb57600080fd5b61041f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c80565b604051808215151515815260200191505060405180910390f35b341561044457600080fd5b61044c610f54565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561049957600080fd5b6104a1610f7a565b6040518082815260200191505060405180910390f35b34156104c257600080fd5b6104ca610f80565b604051808215151515815260200191505060405180910390f35b34156104ef57600080fd5b6104f76110c6565b604051808260ff1660ff16815260200191505060405180910390f35b341561051e57600080fd5b6105266110d9565b6040518082815260200191505060405180910390f35b341561054757600080fd5b61054f6110df565b604051808215151515815260200191505060405180910390f35b341561057457600080fd5b61058a6004808035906020019091905050611225565b005b341561059757600080fd5b61059f6112ef565b6040518082815260200191505060405180910390f35b34156105c057600080fd5b6105c86112f5565b6040518082815260200191505060405180910390f35b34156105e957600080fd5b6105f16112fb565b604051808215151515815260200191505060405180910390f35b341561061657600080fd5b61061e611441565b6040518082815260200191505060405180910390f35b341561063f57600080fd5b610647611447565b604051808215151515815260200191505060405180910390f35b341561066c57600080fd5b610698600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061158d565b6040518082815260200191505060405180910390f35b34156106b957600080fd5b6106c16115d6565b6040518082815260200191505060405180910390f35b34156106e257600080fd5b6106ea6115dc565b6040518082815260200191505060405180910390f35b341561070b57600080fd5b6107136115e2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561076057600080fd5b610768611608565b6040518082815260200191505060405180910390f35b341561078957600080fd5b61079161160e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107de57600080fd5b6107e6611633565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561082657808201518184015260208101905061080b565b50505050905090810190601f1680156108535780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561086c57600080fd5b61087461166c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156108c157600080fd5b6108f6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611692565b604051808215151515815260200191505060405180910390f35b341561091b57600080fd5b61092361183e565b6040518082815260200191505060405180910390f35b341561094457600080fd5b61094c611844565b6040518082815260200191505060405180910390f35b341561096d57600080fd5b61097561184a565b6040518082815260200191505060405180910390f35b341561099657600080fd5b61099e611850565b6040518082815260200191505060405180910390f35b34156109bf57600080fd5b610a0a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611856565b6040518082815260200191505060405180910390f35b3415610a2b57600080fd5b610a57600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506118dd565b005b3415610a6457600080fd5b610a6c611a32565b6040518082815260200191505060405180910390f35b3415610a8d57600080fd5b610a95611a38565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6040805190810160405280600b81526020017f426974555020546f6b656e00000000000000000000000000000000000000000081525081565b600080821480610b2957506000610b273385611856565b145b1515610b3457600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600354905090565b601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e5481565b60008082610c8d8661158d565b10151515610c9a57600080fd5b82610ca58633611856565b10151515610cb257600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054019050610d3f8584611a5e565b610d498484611aee565b610dd883600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b7e90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a380600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401141515610f4857fe5b60019150509392505050565b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b6000600e544210151515610f9057fe5b601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fec57600080fd5b6000600a54111515610ffd57600080fd5b61102b601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a54611aee565b601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600a546040518082815260200191505060405180910390a36000600a819055506110be600a54600854611b7e90919063ffffffff16565b506001905090565b600060149054906101000a900460ff1681565b600b5481565b600060115442101515156110ef57fe5b601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561114b57600080fd5b6000600d5411151561115c57600080fd5b61118a601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d54611aee565b601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600d546040518082815260200191505060405180910390a36000600d8190555061121d600d54600854611b7e90919063ffffffff16565b506001905090565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561127557600080fd5b3390506112828183611a5e565b61129782600354611b7e90919063ffffffff16565b6003819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b60115481565b60065481565b6000600f54421015151561130b57fe5b601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561136757600080fd5b6000600b5411151561137857600080fd5b6113a6601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600b54611aee565b601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600b546040518082815260200191505060405180910390a36000600b81905550611439600b54600854611b7e90919063ffffffff16565b506001905090565b600c5481565b6000601054421015151561145757fe5b601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114b357600080fd5b6000600c541115156114c457600080fd5b6114f2601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600c54611aee565b601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600c546040518082815260200191505060405180910390a36000600c81905550611585600c54600854611b7e90919063ffffffff16565b506001905090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60075481565b60105481565b601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f425554000000000000000000000000000000000000000000000000000000000081525081565b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808261169f3361158d565b101515156116ac57600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540190506117398484611aee565b6117433384611a5e565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a380600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540114151561183357fe5b600191505092915050565b600a5481565b60045481565b600f5481565b60055481565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561193857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561197457600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60095481565b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611aa7600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611b7e565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b611b37600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611b97565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000828211151515611b8c57fe5b818303905092915050565b6000808284019050838110151515611bab57fe5b80915050929150505600a165627a7a723058206b57c158928b5e848ba3caaccbd84a0a8faa36e09d8600f14c1451d98bc0720a0029"
}