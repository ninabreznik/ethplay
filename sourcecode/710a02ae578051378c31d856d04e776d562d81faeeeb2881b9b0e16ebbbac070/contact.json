{
  "address": "0xb022cb227ee29c8a5af8565dfb07ae6ccd01556b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ERC20",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-30\n*/\n\npragma solidity ^0.5.7;\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20 is IERC20, SafeMath ,Ownable {\n    \n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint public startTime;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n    \n    event UserAdedd(uint vestedAmount,uint vestingDuration,uint vestingPercentage,uint releasedAmount,string vesterType,uint tokenUsed,uint startTime,uint month);\n    \n    constructor() public {\n         \n         name = \"Hartanah Dcom Token\";\n         symbol = \"HADT\";\n         decimals = 10;\n         startTime = now;\n         _totalSupply = 10000000000000000000;\n         _balances[msg.sender] = _totalSupply;\n         \n     }\n    \n    struct User {\n        uint vestedAmount;\n        uint vestingDuration;\n        uint vestingPercentage;\n        uint releasedAmount;\n        string vesterType;\n        uint tokenUsed;\n        uint startTime;\n        uint vestingMonth;\n    }\n    \n    mapping(address => User) vestInfo;\n    mapping(string => address) addressMap;\n    \n    modifier checkReleasable(uint value) {\n        address sender = msg.sender;\n        \n        if(vestInfo[sender].vestedAmount == 0 || sender == owner()) {\n            _;\n        }\n        else{\n            if(keccak256(abi.encodePacked(vestInfo[sender].vesterType)) == keccak256(abi.encodePacked(\"Public Sales\"))) {\n                uint current = ((now - vestInfo[sender].startTime)/31536000)+1;\n                if(vestInfo[sender].vestingMonth < current && current <= vestInfo[sender].vestingDuration) {\n                        vestInfo[sender].releasedAmount = (vestInfo[sender].vestedAmount);\n                        vestInfo[sender].vestingMonth++;\n                }\n            }\n            else{\n                uint current = ((now - vestInfo[sender].startTime)/2592000)+1;\n                    if(vestInfo[sender].vestingMonth < current && current <= vestInfo[sender].vestingDuration) {\n                        vestInfo[sender].releasedAmount = (vestInfo[sender].vestedAmount/vestInfo[sender].vestingDuration) * current;\n                        vestInfo[sender].vestingMonth++;\n                    }\n            }\n            require((vestInfo[sender].releasedAmount - vestInfo[sender].tokenUsed) >= value);\n            _;\n        }\n        \n    } \n    \n    function addUser(address _account,uint _vestingDuration,uint _vestingPercentage,string memory _vesterType) public onlyOwner {\n      uint vestedAmount;\n      uint releasedAmount;\n      if(keccak256(abi.encodePacked(_vesterType)) == keccak256(abi.encodePacked(\"Public Sales\"))) {\n         vestedAmount = (_totalSupply * _vestingPercentage)/100;\n         releasedAmount = vestedAmount/3;\n      }else{\n         vestedAmount = (_totalSupply * _vestingPercentage)/100;\n         releasedAmount = vestedAmount/_vestingDuration;\n      }\n      addressMap[_vesterType] = _account;\n      vestInfo[_account] = User(vestedAmount,_vestingDuration,_vestingPercentage,releasedAmount,_vesterType,0,now,1);\n      _transfer(owner(),_account,vestedAmount);\n      emit UserAdedd(vestedAmount,_vestingDuration,_vestingPercentage,releasedAmount,_vesterType,0,now,1);\n    }\n  \n    function getReleasedAmount(address _account) public view returns(uint){\n        \n      uint release = vestInfo[_account].releasedAmount;\n      if(keccak256(abi.encodePacked(vestInfo[_account].vesterType)) == keccak256(abi.encodePacked(\"Public Sales\"))) {\n          uint current = ((now - vestInfo[_account].startTime)/31536000)+1;\n                if(vestInfo[_account].vestingMonth < current && current <= vestInfo[_account].vestingDuration) {\n                        release = (vestInfo[_account].vestedAmount);\n                }\n      }else {\n          uint time = ((now - vestInfo[_account].startTime)/2592000)+1;\n                if((vestInfo[_account].vestingMonth < time) && (time <= vestInfo[_account].vestingDuration)) {\n                       release = (vestInfo[_account].vestedAmount/vestInfo[_account].vestingDuration) * time;\n                }\n       }\n        return(release);\n    }\n  \n    function FoundersVestedAmount() public view returns(uint){\n      address account = addressMap[\"Founders\"];\n      return vestInfo[account].vestedAmount;\n    } \n    \n    function ManagementVestedAmount() public view returns(uint){\n      address account = addressMap[\"Management\"];\n      return vestInfo[account].vestedAmount;\n    }\n    \n    function TechnologistVestedAmount() public view returns(uint){\n      address account = addressMap[\"Technologist\"];\n      return vestInfo[account].vestedAmount;\n    }\n    \n    function LegalAndFinanceVestedAmount() public view returns(uint){\n      address account = addressMap[\"Legal & Finance\"];\n      return vestInfo[account].vestedAmount;\n    }\n    \n    function MarketingVestedAmount() public view returns(uint){\n      address account = addressMap[\"Marketing\"];\n      return vestInfo[account].vestedAmount;\n    }\n    \n    function PublicSalesVestedAmount() public view returns(uint){\n      address account = addressMap[\"Public Sales\"];\n      return vestInfo[account].vestedAmount;\n    }\n    \n    function AirdropVestedAmount() public view returns(uint){\n      address account = addressMap[\"Airdrop\"];\n      return vestInfo[account].vestedAmount;\n    }\n    \n    function PromotionVestedAmount() public view returns(uint){\n      address account = addressMap[\"Promotion\"];\n      return vestInfo[account].vestedAmount;\n    }\n    \n    function RewardsVestedAmount() public view returns(uint){\n      address account = addressMap[\"Rewards\"];\n      return vestInfo[account].vestedAmount;\n    }\n\n    function FoundersReleasedAmount() public view returns(uint){\n      address account = addressMap[\"Founders\"];\n      return getReleasedAmount(account);\n    } \n    \n    function ManagementReleasedAmount() public view returns(uint){\n      address account = addressMap[\"Management\"];\n      return getReleasedAmount(account);\n    }\n    \n    function TechnologistReleasedAmount() public view returns(uint){\n      address account = addressMap[\"Technologist\"];\n      return getReleasedAmount(account);\n    }\n    \n    function LegalAndFinanceReleasedAmount() public view returns(uint){\n      address account = addressMap[\"Legal & Finance\"];\n      return getReleasedAmount(account);\n    }\n    \n    function MarketingReleasedAmount() public view returns(uint){\n      address account = addressMap[\"Marketing\"];\n      return getReleasedAmount(account);\n    }\n    \n    function PublicSalesReleasedAmount() public view returns(uint){\n      address account = addressMap[\"Public Sales\"];\n      return getReleasedAmount(account);\n    }\n    \n    function AirdropReleasedAmount() public view returns(uint){\n      address account = addressMap[\"Airdrop\"];\n      return getReleasedAmount(account);\n    }\n    \n    function PromotionReleasedAmount() public view returns(uint){\n      address account = addressMap[\"Promotion\"];\n      return getReleasedAmount(account);\n    }\n    \n    function RewardsReleasedAmount() public view returns(uint){\n      address account = addressMap[\"Rewards\"];\n      return getReleasedAmount(account);\n    }\n    \n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    function transfer(address to, uint256 value) public checkReleasable(value) returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, sub(_allowed[from][msg.sender],value));\n        return true;\n    }\n     \n    function _transfer(address from, address to, uint256 value) internal  {\n        require(to != address(0));\n\n        _balances[from] = sub(_balances[from],value);\n        _balances[to] = add(_balances[to],value);\n        vestInfo[from].tokenUsed = vestInfo[from].tokenUsed + value;\n        emit Transfer(from, to, value);\n    }\n\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n}",
  "bytecode": "60806040523480156200001157600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36040518060400160405280601381526020017f48617274616e61682044636f6d20546f6b656e00000000000000000000000000815250600190805190602001906200011b929190620001e8565b506040518060400160405280600481526020017f48414454000000000000000000000000000000000000000000000000000000008152506002908051906020019062000169929190620001e8565b50600a600360006101000a81548160ff021916908360ff16021790555042600481905550678ac7230489e80000600781905550600754600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062000297565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200022b57805160ff19168380011785556200025c565b828001600101855582156200025c579182015b828111156200025b5782518255916020019190600101906200023e565b5b5090506200026b91906200026f565b5090565b6200029491905b808211156200029057600081600090555060010162000276565b5090565b90565b612bc680620002a76000396000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c806370a082311161011a5780638f32d59b116100ad578063dd62ed3e1161007c578063dd62ed3e1461089a578063e5af777914610912578063e6eb846814610930578063f2fde38b1461094e578063f9845c371461099257610206565b80638f32d59b1461077157806395d89b4114610793578063a9059cbb14610816578063bc580bbe1461087c57610206565b806386197781116100e957806386197781146106935780638827a351146106eb5780638b69059c146107095780638da5cb5b1461072757610206565b806370a08231146105f5578063715018a61461064d57806372f5f9ae1461065757806378e979251461067557610206565b80632404180d1161019d5780633977589b1161016c5780633977589b1461048e5780633ed50ba5146104ac57806341f6c022146104ca5780634f88172f146105b957806367f02129146105d757610206565b80632404180d14610410578063242746c41461042e578063313ce5671461044c57806334086dde1461047057610206565b806317417db0116101d957806317417db01461033057806318160ddd1461034e5780631c86910f1461036c57806323b872dd1461038a57610206565b806306fdde031461020b578063095ea7b31461028e5780630a85ffbf146102f45780630f4d9dfa14610312575b600080fd5b6102136109b0565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610253578082015181840152602081019050610238565b50505050905090810190601f1680156102805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102da600480360360408110156102a457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a4e565b604051808215151515815260200191505060405180910390f35b6102fc610a65565b6040518082815260200191505060405180910390f35b61031a610b12565b6040518082815260200191505060405180910390f35b610338610bbf565b6040518082815260200191505060405180910390f35b610356610c32565b6040518082815260200191505060405180910390f35b610374610c3c565b6040518082815260200191505060405180910390f35b6103f6600480360360608110156103a057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610caf565b604051808215151515815260200191505060405180910390f35b610418610d57565b6040518082815260200191505060405180910390f35b610436610dca565b6040518082815260200191505060405180910390f35b610454610e3d565b604051808260ff1660ff16815260200191505060405180910390f35b610478610e50565b6040518082815260200191505060405180910390f35b610496610efd565b6040518082815260200191505060405180910390f35b6104b4610f70565b6040518082815260200191505060405180910390f35b6105b7600480360360808110156104e057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561053157600080fd5b82018360208201111561054357600080fd5b8035906020019184600183028401116401000000008311171561056557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061101d565b005b6105c16113aa565b6040518082815260200191505060405180910390f35b6105df611457565b6040518082815260200191505060405180910390f35b6106376004803603602081101561060b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114ca565b6040518082815260200191505060405180910390f35b610655611513565b005b61065f6115e3565b6040518082815260200191505060405180910390f35b61067d611690565b6040518082815260200191505060405180910390f35b6106d5600480360360208110156106a957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611696565b6040518082815260200191505060405180910390f35b6106f3611ab1565b6040518082815260200191505060405180910390f35b610711611b24565b6040518082815260200191505060405180910390f35b61072f611bd1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610779611bfa565b604051808215151515815260200191505060405180910390f35b61079b611c51565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107db5780820151818401526020810190506107c0565b50505050905090810190601f1680156108085780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6108626004803603604081101561082c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611cef565b604051808215151515815260200191505060405180910390f35b610884612334565b6040518082815260200191505060405180910390f35b6108fc600480360360408110156108b057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123a7565b6040518082815260200191505060405180910390f35b61091a61242e565b6040518082815260200191505060405180910390f35b6109386124db565b6040518082815260200191505060405180910390f35b6109906004803603602081101561096457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061254e565b005b61099a61256b565b6040518082815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a465780601f10610a1b57610100808354040283529160200191610a46565b820191906000526020600020905b815481529060010190602001808311610a2957829003601f168201915b505050505081565b6000610a5b338484612618565b6001905092915050565b600080600960405180807f5075626c69632053616c65730000000000000000000000000000000000000000815250600c019050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015491505090565b600080600960405180807f41697264726f70000000000000000000000000000000000000000000000000008152506007019050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015491505090565b600080600960405180807f4c6567616c20262046696e616e63650000000000000000000000000000000000815250600f019050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610c2c81611696565b91505090565b6000600754905090565b600080600960405180807f5075626c69632053616c65730000000000000000000000000000000000000000815250600c019050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610ca981611696565b91505090565b6000610cbc848484612777565b610d4c8433610d47600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054866129be565b612618565b600190509392505050565b600080600960405180807f546563686e6f6c6f676973740000000000000000000000000000000000000000815250600c019050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610dc481611696565b91505090565b600080600960405180807f466f756e646572730000000000000000000000000000000000000000000000008152506008019050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610e3781611696565b91505090565b600360009054906101000a900460ff1681565b600080600960405180807f546563686e6f6c6f676973740000000000000000000000000000000000000000815250600c019050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015491505090565b600080600960405180807f4d61726b6574696e6700000000000000000000000000000000000000000000008152506009019050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610f6a81611696565b91505090565b600080600960405180807f4d61726b6574696e6700000000000000000000000000000000000000000000008152506009019050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015491505090565b611025611bfa565b61102e57600080fd5b60008060405160200180807f5075626c69632053616c65730000000000000000000000000000000000000000815250600c01905060405160208183030381529060405280519060200120836040516020018082805190602001908083835b602083106110af578051825260208201915060208101905060208303925061108c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012014156111135760648460075402816110fe57fe5b0491506003828161110b57fe5b049050611131565b606484600754028161112157fe5b04915084828161112d57fe5b0490505b856009846040518082805190602001908083835b602083106111685780518252602082019150602081019050602083039250611145565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604051806101000160405280838152602001868152602001858152602001828152602001848152602001600081526020014281526020016001815250600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004019080519060200190611298929190612af5565b5060a0820151816005015560c0820151816006015560e082015181600701559050506112cc6112c5611bd1565b8784612777565b7f52abb053a2b7eb1cf1023b44fde1c3430a934c6b1f75c279b7cc96c1eb367bfb828686848760004260016040518089815260200188815260200187815260200186815260200180602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b83811015611361578082015181840152602081019050611346565b50505050905090810190601f16801561138e5780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390a1505050505050565b600080600960405180807f4d616e6167656d656e7400000000000000000000000000000000000000000000815250600a019050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015491505090565b600080600960405180807f4d616e6167656d656e7400000000000000000000000000000000000000000000815250600a019050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506114c481611696565b91505090565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61151b611bfa565b61152457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600080600960405180807f4c6567616c20262046696e616e63650000000000000000000000000000000000815250600f019050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015491505090565b60045481565b600080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154905060405160200180807f5075626c69632053616c65730000000000000000000000000000000000000000815250600c01905060405160208183030381529060405280519060200120600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160405160200180828054600181600116156101000203166002900480156117c55780601f106117a35761010080835404028352918201916117c5565b820191906000526020600020905b8154815290600101906020018083116117b1575b505091505060405160208183030381529060405280519060200120141561192357600060016301e13380600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006015442038161183b57fe5b0401905080600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600701541080156118d25750600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101548111155b1561191d57600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015491505b50611aa8565b6000600162278d00600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006015442038161197757fe5b0401905080600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070154108015611a0e5750600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101548111155b15611aa65780600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015481611aa157fe5b040291505b505b80915050919050565b600080600960405180807f50726f6d6f74696f6e00000000000000000000000000000000000000000000008152506009019050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050611b1e81611696565b91505090565b600080600960405180807f52657761726473000000000000000000000000000000000000000000000000008152506007019050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015491505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ce75780601f10611cbc57610100808354040283529160200191611ce7565b820191906000526020600020905b815481529060010190602001808311611cca57829003601f168201915b505050505081565b60008160003390506000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541480611d7a5750611d4b611bd1565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b15611d9357611d8a338686612777565b6001925061232c565b60405160200180807f5075626c69632053616c65730000000000000000000000000000000000000000815250600c01905060405160208183030381529060405280519060200120600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016040516020018082805460018160011615610100020316600290048015611e7a5780601f10611e58576101008083540402835291820191611e7a565b820191906000526020600020905b815481529060010190602001808311611e66575b505091505060405160208183030381529060405280519060200120141561206e57600060016301e13380600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060154420381611ef057fe5b0401905080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070154108015611f875750600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101548111155b1561206857600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030181905550600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600701600081548092919060010191905055505b50612289565b6000600162278d00600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601544203816120c257fe5b0401905080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600701541080156121595750600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101548111155b156122875780600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154816121ec57fe5b0402600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030181905550600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600701600081548092919060010191905055505b505b81600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015403101561231c57600080fd5b612327338686612777565b600192505b505092915050565b600080600960405180807f41697264726f70000000000000000000000000000000000000000000000000008152506007019050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506123a181611696565b91505090565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080600960405180807f466f756e646572730000000000000000000000000000000000000000000000008152506008019050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015491505090565b600080600960405180807f52657761726473000000000000000000000000000000000000000000000000008152506007019050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061254881611696565b91505090565b612556611bfa565b61255f57600080fd5b612568816129de565b50565b600080600960405180807f50726f6d6f74696f6e00000000000000000000000000000000000000000000008152506009019050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015491505090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561265257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561268c57600080fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156127b157600080fd5b6127fa600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826129be565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612886600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482612ad6565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005015401600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000828211156129cd57600080fd5b600082840390508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612a1857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080828401905083811015612aeb57600080fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612b3657805160ff1916838001178555612b64565b82800160010185558215612b64579182015b82811115612b63578251825591602001919060010190612b48565b5b509050612b719190612b75565b5090565b612b9791905b80821115612b93576000816000905550600101612b7b565b5090565b9056fea165627a7a7230582037303cca3d6f6962383ffaf19397fe723d236c17fc09d78bd6552c3e4e4423e80029"
}