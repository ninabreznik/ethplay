{
  "address": "0xa95592dcffa3c080b4b40e459c5f5692f67db7f8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ElyToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-10\n*/\n\npragma solidity 0.4.19;\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\ncontract ElyERC20 is StandardToken, Ownable {\n    /* Public variables of the token */\n    uint256 public creationBlock;\n\n    uint8 public decimals;\n\n    string public name;\n\n    string public symbol;\n\n    string public standard;\n\n    bool public locked;\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function ElyERC20(\n        uint256 _totalSupply,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transferAllSupplyToOwner,\n        bool _locked\n    ) public {\n        standard = 'ERC20 0.1';\n        locked = _locked;\n        totalSupply_ = _totalSupply;\n\n        if (_transferAllSupplyToOwner) {\n            balances[msg.sender] = totalSupply_;\n        } else {\n            balances[this] = totalSupply_;\n        }\n        name = _tokenName;\n        // Set the name for display purposes\n        symbol = _tokenSymbol;\n        // Set the symbol for display purposes\n        decimals = _decimalUnits;\n        // Amount of decimals for display purposes\n        creationBlock = block.number;\n    }\n\n    /* public methods */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(locked == false);\n        return super.transfer(_to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        if (locked) {\n            return false;\n        }\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n        if (locked) {\n            return false;\n        }\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n        if (locked) {\n            return false;\n        }\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        if (locked) {\n            return false;\n        }\n\n        return super.transferFrom(_from, _to, _value);\n    }\n\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/*\nThis contract manages the minters and the modifier to allow mint to happen only if called by minters\nThis contract contains basic minting functionality though\n*/\ncontract MintingERC20 is ElyERC20 {\n\n    using SafeMath for uint256;\n\n    //Variables\n    mapping (address => bool) public minters;\n\n    uint256 public maxSupply;\n\n    //Modifiers\n    modifier onlyMinters () {\n        require(true == minters[msg.sender]);\n        _;\n    }\n\n    function MintingERC20(\n        uint256 _initialSupply,\n        uint256 _maxSupply,\n        string _tokenName,\n        uint8 _decimals,\n        string _symbol,\n        bool _transferAllSupplyToOwner,\n        bool _locked\n    )\n        public ElyERC20(_initialSupply, _tokenName, _decimals, _symbol, _transferAllSupplyToOwner, _locked)\n    {\n        standard = 'MintingERC20 0.1';\n        minters[msg.sender] = true;\n        maxSupply = _maxSupply;\n    }\n\n    function addMinter(address _newMinter) public onlyOwner {\n        minters[_newMinter] = true;\n    }\n\n    function removeMinter(address _minter) public onlyOwner {\n        minters[_minter] = false;\n    }\n\n    function mint(address _addr, uint256 _amount) public onlyMinters returns (uint256) {\n        if (true == locked) {\n            return uint256(0);\n        }\n\n        if (_amount == uint256(0)) {\n            return uint256(0);\n        }\n\n        if (totalSupply_.add(_amount) > maxSupply) {\n            return uint256(0);\n        }\n\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_addr] = balances[_addr].add(_amount);\n        Transfer(address(0), _addr, _amount);\n\n        return _amount;\n    }\n\n}\n\ncontract ElyToken is MintingERC20 {\n\n    SellableToken public ico;\n    SellableToken public privateSale;\n    LockupContract public lockupContract;\n\n    address public bountyAddress;\n\n    bool public transferFrozen = true;\n\n    modifier onlySellable() {\n        require(msg.sender == address(ico) || msg.sender == address(privateSale));\n        _;\n    }\n\n    event Burn(address indexed burner, uint256 value);\n\n    function ElyToken(\n        address _bountyAddress,\n        bool _locked\n    )\n        public MintingERC20(0, maxSupply, 'Elycoin', 18, 'ELY', false, _locked)\n    {\n        require(_bountyAddress != address(0));\n        bountyAddress = _bountyAddress;\n        standard = 'ELY 0.1';\n        maxSupply = uint(1000000000).mul(uint(10) ** decimals);\n        uint256 bountyAmount = uint(10000000).mul(uint(10) ** decimals);\n        require(bountyAmount == super.mint(bountyAddress, bountyAmount));\n    }\n\n    function setICO(address _ico) public onlyOwner {\n        require(_ico != address(0));\n        ico = SellableToken(_ico);\n    }\n\n    function setPrivateSale(address _privateSale) public onlyOwner {\n        require(_privateSale != address(0));\n        privateSale = SellableToken(_privateSale);\n    }\n\n    function setLockupContract(address _lockupContract) public onlyOwner {\n        require(_lockupContract != address(0));\n        lockupContract = LockupContract(_lockupContract);\n    }\n\n    function setLocked(bool _locked) public onlyOwner {\n        locked = _locked;\n    }\n\n    function freezing(bool _transferFrozen) public onlyOwner {\n        if (address(ico) != address(0) && !ico.isActive() && block.timestamp >= ico.startTime()) {\n            transferFrozen = _transferFrozen;\n        }\n    }\n\n    function mint(address _addr, uint256 _amount) public onlyMinters returns (uint256) {\n        if (msg.sender == owner) {\n            require(address(ico) != address(0));\n            if (!ico.isActive()) {\n                return super.mint(_addr, _amount);\n            }\n            return uint256(0);\n        }\n        return super.mint(_addr, _amount);\n    }\n\n    function transferAllowed(address _address, uint256 _amount) public view returns (bool) {\n        return !transferFrozen && lockupContract.isTransferAllowed(_address, _amount);\n    }\n\n    function transfer(address _to, uint _value) public returns (bool) {\n        require(msg.sender == bountyAddress || transferAllowed(msg.sender, _value));\n        if (msg.sender == bountyAddress) {\n            lockupContract.log(_to, _value);\n        }\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n        require(_from == bountyAddress || transferAllowed(_from, _value));\n        if (_from == bountyAddress) {\n            lockupContract.log(_to, _value);\n        }\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function burnTokens(uint256 _amount) public onlySellable {\n        if (totalSupply_.add(_amount) > maxSupply) {\n            Burn(address(this), maxSupply.sub(totalSupply_));\n            totalSupply_ = maxSupply;\n        } else {\n            totalSupply_ = totalSupply_.add(_amount);\n            Burn(address(this), _amount);\n        }\n    }\n\n    function burnInvestorTokens(address _address, uint256 _amount) public constant onlySellable returns (uint256) {\n        require(balances[_address] >= _amount);\n        balances[_address] = balances[_address].sub(_amount);\n        Burn(_address, _amount);\n        Transfer(_address, address(0), _amount);\n\n        return _amount;\n    }\n\n}\n\ncontract Multivest is Ownable {\n\n    using SafeMath for uint256;\n\n    /* public variables */\n    mapping (address => bool) public allowedMultivests;\n\n    /* events */\n    event MultivestSet(address multivest);\n\n    event MultivestUnset(address multivest);\n\n    event Contribution(address holder, uint256 value, uint256 tokens);\n\n    modifier onlyAllowedMultivests(address _addresss) {\n        require(allowedMultivests[_addresss] == true);\n        _;\n    }\n\n    /* constructor */\n    function Multivest() public {}\n\n    function setAllowedMultivest(address _address) public onlyOwner {\n        allowedMultivests[_address] = true;\n        MultivestSet(_address);\n    }\n\n    function unsetAllowedMultivest(address _address) public onlyOwner {\n        allowedMultivests[_address] = false;\n        MultivestUnset(_address);\n    }\n\n    function multivestBuy(address _address, uint256 _value) public onlyAllowedMultivests(msg.sender) {\n        require(buy(_address, _value) == true);\n    }\n\n    function multivestBuy(\n        address _address,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) public payable onlyAllowedMultivests(verify(keccak256(msg.sender), _v, _r, _s)) {\n        require(_address == msg.sender && buy(msg.sender, msg.value) == true);\n    }\n\n    function verify(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal pure returns (address) {\n        bytes memory prefix = '\\x19Ethereum Signed Message:\\n32';\n\n        return ecrecover(keccak256(prefix, _hash), _v, _r, _s);\n    }\n\n    function buy(address _address, uint256 _value) internal returns (bool);\n\n}\n\ncontract SellableToken is Multivest {\n\n    ElyToken public token;\n\n    uint256 public constant DECIMALS = 18;\n\n    uint256 public minPurchase = 1000000;//10usd * 10 ^ 5\n\n    uint256 public softCap = 300000000000;//usd * 10 ^ 5\n    uint256 public hardCap = 1500000000000;//usd * 10 ^ 5\n\n    uint256 public compensationAmount = 5100000000;//usd * 10 ^ 5\n    uint256 public compensatedAmount;\n\n    uint256 public startTime;\n    uint256 public endTime;\n\n    uint256 public maxTokenSupply;\n\n    uint256 public soldTokens;\n\n    uint256 public collectedEthers;\n\n    uint256 public priceUpdateAt;\n\n    address public etherHolder;\n\n    address public compensationAddress;\n\n    uint256 public collectedUSD;\n\n    uint256 public etherPriceInUSD; //$753.25  75325000\n\n    mapping (address => uint256) public etherBalances;\n\n    mapping (address => bool) public whitelist;\n\n    Tier[] public tiers;\n\n    struct Tier {\n        uint256 maxAmount;\n        uint256 price;\n        uint256 startTime;\n        uint256 endTime;\n    }\n\n    event WhitelistSet(address indexed contributorAddress, bool isWhitelisted);\n\n    event Refund(address _holder, uint256 _ethers, uint256 _tokens);\n\n    function SellableToken(\n        address _token,\n        address _etherHolder,\n        address _compensationAddress,\n        uint256 _etherPriceInUSD,\n        uint256 _maxTokenSupply\n    )\n        public Multivest()\n    {\n        require(_token != address(0));\n        token = ElyToken(_token);\n\n        require(_etherHolder != address(0) && _compensationAddress != address(0));\n        etherHolder = _etherHolder;\n        compensationAddress = _compensationAddress;\n        require((_maxTokenSupply == uint256(0)) || (_maxTokenSupply <= token.maxSupply()));\n\n        etherPriceInUSD = _etherPriceInUSD;\n        maxTokenSupply = _maxTokenSupply;\n\n        priceUpdateAt = block.timestamp;\n    }\n\n    function() public payable {\n        require(true == whitelist[msg.sender] && buy(msg.sender, msg.value) == true);\n    }\n\n    function setTokenContract(address _token) public onlyOwner {\n        require(_token != address(0));\n        token = ElyToken(_token);\n    }\n\n    function isActive() public view returns (bool) {\n        if (maxTokenSupply > uint256(0) && soldTokens == maxTokenSupply) {\n            return false;\n        }\n\n        return withinPeriod();\n    }\n\n    function withinPeriod() public view returns (bool) {\n        return block.timestamp >= startTime && block.timestamp <= endTime;\n    }\n\n    function setEtherHolder(address _etherHolder) public onlyOwner {\n        if (_etherHolder != address(0)) {\n            etherHolder = _etherHolder;\n        }\n    }\n\n    function updateWhitelist(address _address, bool isWhitelisted) public onlyOwner {\n        whitelist[_address] = isWhitelisted;\n        WhitelistSet(_address, isWhitelisted);\n    }\n\n    function mint(address _address, uint256 _tokenAmount) public onlyOwner returns (uint256) {\n        return mintInternal(_address, _tokenAmount);\n    }\n\n    function setEtherPriceInUSD(string _price) public onlyOwner {\n        setEtherInUSDInternal(_price);\n    }\n\n    function setEtherInUSD(string _price) public onlyAllowedMultivests(msg.sender) {\n        setEtherInUSDInternal(_price);\n    }\n\n    // set ether price in USD with 5 digits after the decimal point\n    //ex. 308.75000\n    //for updating the price through  multivest\n    function setEtherInUSDInternal(string _price) internal {\n        bytes memory bytePrice = bytes(_price);\n        uint256 dot = bytePrice.length.sub(uint256(6));\n\n        // check if dot is in 6 position  from  the last\n        require(0x2e == uint(bytePrice[dot]));\n\n        uint256 newPrice = uint256(10 ** 23).div(parseInt(_price, 5));\n\n        require(newPrice > 0);\n\n        etherPriceInUSD = parseInt(_price, 5);\n\n        priceUpdateAt = block.timestamp;\n    }\n\n    function mintInternal(address _address, uint256 _tokenAmount) internal returns (uint256) {\n        uint256 mintedAmount = token.mint(_address, _tokenAmount);\n\n        require(mintedAmount == _tokenAmount);\n\n        mintedAmount = mintedAmount.add(token.mint(compensationAddress, _tokenAmount.mul(5).div(1000)));\n\n        soldTokens = soldTokens.add(_tokenAmount);\n        if (maxTokenSupply > 0) {\n            require(maxTokenSupply >= soldTokens);\n        }\n\n        return _tokenAmount;\n    }\n\n    function transferEthersInternal() internal {\n        if (collectedUSD >= softCap) {\n            if (compensatedAmount < compensationAmount) {\n                uint256 amount = uint256(1 ether).mul(compensationAmount.sub(compensatedAmount)).div(etherPriceInUSD);\n                compensatedAmount = compensationAmount;\n                compensationAddress.transfer(amount);\n            }\n\n            etherHolder.transfer(this.balance);\n        }\n    }\n\n    function parseInt(string _a, uint _b) internal pure returns (uint) {\n        bytes memory bresult = bytes(_a);\n        uint mintt = 0;\n        bool decimals = false;\n        for (uint i = 0; i < bresult.length; i++) {\n            if ((bresult[i] >= 48) && (bresult[i] <= 57)) {\n                if (decimals) {\n                    if (_b == 0) break;\n                    else _b--;\n                }\n                mintt *= 10;\n                mintt += uint(bresult[i]) - 48;\n            } else if (bresult[i] == 46) decimals = true;\n        }\n        if (_b > 0) mintt *= 10 ** _b;\n        return mintt;\n    }\n\n}\n\ncontract ICO is SellableToken {\n\n    SellableToken public privateSale;\n    LockupContract public lockupContract;\n\n    uint8 public constant PRE_ICO_TIER = 0;\n    uint8 public constant ICO_TIER_FIRST = 1;\n    uint8 public constant ICO_TIER_TWO = 2;\n    uint8 public constant ICO_TIER_LAST = 3;\n\n    Stats public preICOStats;\n\n    uint256 public lockupThreshold = 10000000000;\n\n    mapping(address => uint256) public icoBalances;\n    mapping(address => uint256) public icoLockedBalance;\n\n    struct Stats {\n        uint256 soldTokens;\n        uint256 collectedUSD;\n        uint256 collectedEthers;\n        bool burned;\n    }\n\n    function ICO(\n        address _token,\n        address _etherHolder,\n        address _compensationAddress,\n        uint256 _etherPriceInUSD, // if price 709.38000 the  value has to be 70938000\n        uint256 _maxTokenSupply\n    ) public SellableToken(\n        _token,\n        _etherHolder,\n        _compensationAddress,\n        _etherPriceInUSD,\n        _maxTokenSupply\n    ) {\n        tiers.push(\n            Tier(\n                uint256(40000000).mul(uint256(10) ** DECIMALS),\n                uint256(6000),\n                1526886000,\n                1528095599\n            )\n        );//@ 0,06 USD PreICO\n        tiers.push(\n            Tier(\n                uint256(150000000).mul(uint256(10) ** DECIMALS),\n                uint256(8000),\n                1528095600,\n                1528700399\n            )\n        );//@ 0,08 USD\n        tiers.push(\n            Tier(\n                uint256(150000000).mul(uint256(10) ** DECIMALS),\n                uint256(10000),\n                1528700400,\n                1529305199\n            )\n        );//@ 0,10 USD\n        tiers.push(\n            Tier(\n                uint256(150000000).mul(uint256(10) ** DECIMALS),\n                uint256(12000),\n                1529305200,\n                1529909999\n            )\n        );//@ 0,12 USD\n\n        startTime = 1528095600;\n        endTime = 1529909999;\n    }\n\n    function setPrivateSale(address _privateSale) public onlyOwner {\n        if (_privateSale != address(0)) {\n            privateSale = SellableToken(_privateSale);\n        }\n    }\n\n    function setLockupContract(address _lockupContract) public onlyOwner {\n        require(_lockupContract != address(0));\n        lockupContract = LockupContract(_lockupContract);\n    }\n\n    function changePreICODates(uint256 _start, uint256 _end) public onlyOwner {\n        if (_start != 0 && _start < _end) {\n            Tier storage preICOTier = tiers[PRE_ICO_TIER];\n            preICOTier.startTime = _start;\n            preICOTier.endTime = _end;\n        }\n    }\n\n    function changeICODates(uint8 _tierId, uint256 _start, uint256 _end) public onlyOwner {\n        if (_start != 0 && _start < _end && _tierId < tiers.length) {\n            Tier storage icoTier = tiers[_tierId];\n            icoTier.startTime = _start;\n            icoTier.endTime = _end;\n            if (_tierId == ICO_TIER_FIRST) {\n                startTime = _start;\n            } else if (_tierId == ICO_TIER_LAST) {\n                endTime = _end;\n            }\n        }\n    }\n\n    function burnUnsoldTokens() public onlyOwner {\n        if (block.timestamp >= tiers[PRE_ICO_TIER].endTime && preICOStats.burned == false) {\n            token.burnTokens(tiers[PRE_ICO_TIER].maxAmount.sub(preICOStats.soldTokens));\n            preICOStats.burned = true;\n        }\n        if (block.timestamp >= endTime && maxTokenSupply > soldTokens) {\n            token.burnTokens(maxTokenSupply.sub(soldTokens));\n            maxTokenSupply = soldTokens;\n        }\n    }\n\n    function transferEthers() public onlyOwner {\n        super.transferEthersInternal();\n    }\n\n    function transferCompensationEthers() public {\n        if (msg.sender == compensationAddress) {\n            super.transferEthersInternal();\n        }\n    }\n\n    function getActiveTier() public view returns (uint8) {\n        for (uint8 i = 0; i < tiers.length; i++) {\n            if (block.timestamp >= tiers[i].startTime && block.timestamp <= tiers[i].endTime) {\n                return i;\n            }\n        }\n\n        return uint8(tiers.length);\n    }\n\n    function calculateTokensAmount(uint256 _value, bool _isEther) public view returns (\n        uint256 tokenAmount,\n        uint256 currencyAmount\n    ) {\n        uint8 activeTier = getActiveTier();\n\n        if (activeTier == tiers.length) {\n            if (endTime < block.timestamp) {\n                return (0, 0);\n            }\n            if (startTime > block.timestamp) {\n                activeTier = PRE_ICO_TIER;\n            }\n        }\n\n        if (_isEther) {\n            currencyAmount = _value.mul(etherPriceInUSD);\n            tokenAmount = currencyAmount.div(tiers[activeTier].price);\n            if (currencyAmount < minPurchase.mul(1 ether)) {\n                return (0, 0);\n            }\n            currencyAmount = currencyAmount.div(1 ether);\n        } else {\n            if (_value < minPurchase) {\n                return (0, 0);\n            }\n            currencyAmount = uint256(1 ether).mul(_value).div(etherPriceInUSD);\n            tokenAmount = _value.mul(uint256(10) ** DECIMALS).div(tiers[activeTier].price);\n        }\n    }\n\n    function calculateEthersAmount(uint256 _amount) public view returns (uint256 ethersAmount) {\n        uint8 activeTier = getActiveTier();\n\n        if (activeTier == tiers.length) {\n            if (endTime < block.timestamp) {\n                return 0;\n            }\n            if (startTime > block.timestamp) {\n                activeTier = PRE_ICO_TIER;\n            }\n        }\n\n        if (_amount == 0 || _amount.mul(tiers[activeTier].price) < minPurchase) {\n            return 0;\n        }\n\n        ethersAmount = _amount.mul(tiers[activeTier].price).div(etherPriceInUSD);\n    }\n\n    function getMinEthersInvestment() public view returns (uint256) {\n        return uint256(1 ether).mul(minPurchase).div(etherPriceInUSD);\n    }\n\n    function getStats() public view returns (\n        uint256 start,\n        uint256 end,\n        uint256 sold,\n        uint256 totalSoldTokens,\n        uint256 maxSupply,\n        uint256 min,\n        uint256 soft,\n        uint256 hard,\n        uint256 tokensPerEth,\n        uint256[16] tiersData\n    ) {\n        start = startTime;\n        end = endTime;\n        sold = soldTokens;\n        totalSoldTokens = soldTokens.add(preICOStats.soldTokens);\n        if (address(privateSale) != address(0)) {\n            totalSoldTokens = totalSoldTokens.add(privateSale.soldTokens());\n        }\n        maxSupply = maxTokenSupply;\n        min = minPurchase;\n        soft = softCap;\n        hard = hardCap;\n        uint256 usd;\n        (tokensPerEth, usd) = calculateTokensAmount(1 ether, true);\n        uint256 j = 0;\n        for (uint256 i = 0; i < tiers.length; i++) {\n            tiersData[j++] = uint256(tiers[i].maxAmount);\n            tiersData[j++] = uint256(tiers[i].price);\n            tiersData[j++] = uint256(tiers[i].startTime);\n            tiersData[j++] = uint256(tiers[i].endTime);\n        }\n    }\n\n    function isRefundPossible() public view returns (bool) {\n        if (getActiveTier() != tiers.length || block.timestamp < startTime || collectedUSD >= softCap) {\n            return false;\n        }\n        return true;\n    }\n\n    function refund() public returns (bool) {\n        uint256 balance = etherBalances[msg.sender];\n        if (!isRefundPossible() || balance == 0) {\n            return false;\n        }\n\n        uint256 burnedAmount = token.burnInvestorTokens(msg.sender, icoBalances[msg.sender]);\n        if (burnedAmount == 0) {\n            return false;\n        }\n        if (icoLockedBalance[msg.sender] > 0) {\n            lockupContract.decreaseAfterBurn(msg.sender, icoLockedBalance[msg.sender]);\n        }\n        Refund(msg.sender, balance, burnedAmount);\n        etherBalances[msg.sender] = 0;\n        msg.sender.transfer(balance);\n\n        return true;\n    }\n\n    function mintPreICO(\n        address _address,\n        uint256 _tokenAmount,\n        uint256 _ethAmount,\n        uint256 _usdAmount\n    ) internal returns (uint256) {\n        uint256 mintedAmount = token.mint(_address, _tokenAmount);\n\n        require(mintedAmount == _tokenAmount);\n\n        preICOStats.soldTokens = preICOStats.soldTokens.add(_tokenAmount);\n        preICOStats.collectedEthers = preICOStats.collectedEthers.add(_ethAmount);\n        preICOStats.collectedUSD = preICOStats.collectedUSD.add(_usdAmount);\n\n        require(tiers[PRE_ICO_TIER].maxAmount >= preICOStats.soldTokens);\n\n        if (preICOStats.collectedUSD <= compensationAmount) {\n            compensatedAmount = compensatedAmount.add(_usdAmount);\n            compensationAddress.transfer(this.balance);\n        }\n\n        return _tokenAmount;\n    }\n\n    function buy(address _address, uint256 _value) internal returns (bool) {\n        if (_value == 0 || _address == address(0)) {\n            return false;\n        }\n        uint8 activeTier = getActiveTier();\n        if (activeTier == tiers.length) {\n            return false;\n        }\n\n        uint256 tokenAmount;\n        uint256 usdAmount;\n        uint256 mintedAmount;\n\n        (tokenAmount, usdAmount) = calculateTokensAmount(_value, true);\n        require(usdAmount > 0 && tokenAmount > 0);\n\n        if (usdAmount >= lockupThreshold) {\n            lockupContract.logLargeContribution(_address, tokenAmount);\n            icoLockedBalance[_address] = icoLockedBalance[_address].add(tokenAmount);\n        }\n\n        if (activeTier == PRE_ICO_TIER) {\n            mintedAmount = mintPreICO(_address, tokenAmount, _value, usdAmount);\n        } else {\n            mintedAmount = mintInternal(_address, tokenAmount);\n\n            collectedEthers = collectedEthers.add(_value);\n            collectedUSD = collectedUSD.add(usdAmount);\n\n            require(hardCap >= collectedUSD);\n\n            etherBalances[_address] = etherBalances[_address].add(_value);\n            icoBalances[_address] = icoBalances[_address].add(tokenAmount);\n        }\n\n        Contribution(_address, _value, tokenAmount);\n\n        return true;\n    }\n\n}\n\ncontract PrivateSale is SellableToken {\n\n    uint256 public price = 4000;//0.04 cents * 10 ^ 5\n\n    function PrivateSale(\n        address _token,\n        address _etherHolder,\n        address _compensationAddress,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _etherPriceInUSD, // if price 709.38000 the  value has to be 70938000\n        uint256 _maxTokenSupply\n    ) public SellableToken(\n        _token,\n        _etherHolder,\n        _compensationAddress,\n        _etherPriceInUSD,\n        _maxTokenSupply\n    ) {\n        require(_startTime > 0 && _endTime > _startTime);\n        startTime = _startTime;\n        endTime = _endTime;\n    }\n\n    function changeSalePeriod(uint256 _start, uint256 _end) public onlyOwner {\n        if (_start != 0 && _start < _end) {\n            startTime = _start;\n            endTime = _end;\n        }\n    }\n\n    function burnUnsoldTokens() public onlyOwner {\n        if (block.timestamp >= endTime && maxTokenSupply > soldTokens) {\n            token.burnTokens(maxTokenSupply.sub(soldTokens));\n            maxTokenSupply = soldTokens;\n        }\n    }\n\n    function calculateTokensAmount(uint256 _value) public view returns (uint256 tokenAmount, uint256 usdAmount) {\n        if (_value == 0) {\n            return (0, 0);\n        }\n\n        usdAmount = _value.mul(etherPriceInUSD);\n        if (usdAmount < minPurchase.mul(1 ether)) {\n            return (0, 0);\n        }\n        tokenAmount = usdAmount.div(price);\n\n        usdAmount = usdAmount.div(1 ether);\n    }\n\n    function calculateEthersAmount(uint256 _amount) public view returns (uint256 ethersAmount) {\n        if (_amount == 0 || _amount.mul(price) < minPurchase.mul(1 ether)) {\n            return 0;\n        }\n\n        ethersAmount = _amount.mul(price).div(etherPriceInUSD);\n    }\n\n    function getMinEthersInvestment() public view returns (uint256) {\n        return uint256(1 ether).mul(minPurchase).div(etherPriceInUSD);\n    }\n\n    function getStats() public view returns (\n        uint256 start,\n        uint256 end,\n        uint256 sold,\n        uint256 maxSupply,\n        uint256 min,\n        uint256 soft,\n        uint256 hard,\n        uint256 priceAmount,\n        uint256 tokensPerEth\n    ) {\n        start = startTime;\n        end = endTime;\n        sold = soldTokens;\n        maxSupply = maxTokenSupply;\n        min = minPurchase;\n        soft = softCap;\n        hard = hardCap;\n        priceAmount = price;\n        uint256 usd;\n        (tokensPerEth, usd) = calculateTokensAmount(1 ether);\n    }\n\n    function buy(address _address, uint256 _value) internal returns (bool) {\n        if (_value == 0) {\n            return false;\n        }\n        require(_address != address(0) && withinPeriod());\n\n        uint256 tokenAmount;\n        uint256 usdAmount;\n\n        (tokenAmount, usdAmount) = calculateTokensAmount(_value);\n\n        uint256 mintedAmount = token.mint(_address, tokenAmount);\n        soldTokens = soldTokens.add(tokenAmount);\n        require(mintedAmount == tokenAmount && maxTokenSupply >= soldTokens && usdAmount > 0 && mintedAmount > 0);\n\n        collectedEthers = collectedEthers.add(_value);\n        collectedUSD = collectedUSD.add(usdAmount);\n\n        Contribution(_address, _value, tokenAmount);\n\n        etherHolder.transfer(this.balance);\n        return true;\n    }\n\n}\n\ncontract Referral is Multivest {\n\n    ElyToken public token;\n    LockupContract public lockupContract;\n\n    uint256 public constant DECIMALS = 18;\n\n    uint256 public totalSupply = 10000000 * 10 ** DECIMALS;\n\n    address public tokenHolder;\n\n    mapping (address => bool) public claimed;\n\n    /* constructor */\n    function Referral(\n        address _token,\n        address _tokenHolder\n    ) public Multivest() {\n        require(_token != address(0) && _tokenHolder != address(0));\n        token = ElyToken(_token);\n        tokenHolder = _tokenHolder;\n    }\n\n    function setTokenContract(address _token) public onlyOwner {\n        if (_token != address(0)) {\n            token = ElyToken(_token);\n        }\n    }\n\n    function setLockupContract(address _lockupContract) public onlyOwner {\n        require(_lockupContract != address(0));\n        lockupContract = LockupContract(_lockupContract);\n    }\n\n    function setTokenHolder(address _tokenHolder) public onlyOwner {\n        if (_tokenHolder != address(0)) {\n            tokenHolder = _tokenHolder;\n        }\n    }\n\n    function multivestMint(\n        address _address,\n        uint256 _amount,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) public onlyAllowedMultivests(verify(keccak256(msg.sender, _amount), _v, _r, _s)) {\n        _amount = _amount.mul(10 ** DECIMALS);\n        require(\n            claimed[_address] == false &&\n            _address == msg.sender &&\n            _amount > 0 &&\n            _amount <= totalSupply &&\n            _amount == token.mint(_address, _amount)\n        );\n\n        totalSupply = totalSupply.sub(_amount);\n        claimed[_address] = true;\n        lockupContract.log(_address, _amount);\n    }\n\n    function claimUnsoldTokens() public {\n        if (msg.sender == tokenHolder && totalSupply > 0) {\n            require(totalSupply == token.mint(msg.sender, totalSupply));\n            totalSupply = 0;\n        }\n    }\n\n    function buy(address _address, uint256 value) internal returns (bool) {\n        _address = _address;\n        value = value;\n        return true;\n    }\n}\n\ncontract LockupContract is Ownable {\n\n    ElyToken public token;\n    SellableToken public ico;\n    Referral public referral;\n\n    using SafeMath for uint256;\n\n    uint256 public lockPeriod = 2 weeks;\n    uint256 public contributionLockPeriod = uint256(1 years).div(2);\n\n    mapping (address => uint256) public lockedAmount;\n    mapping (address => uint256) public lockedContributions;\n\n    function LockupContract(\n        address _token,\n        address _ico,\n        address _referral\n    ) public {\n        require(_token != address(0) && _ico != address(0) && _referral != address(0));\n        token = ElyToken(_token);\n        ico = SellableToken(_ico);\n        referral = Referral(_referral);\n    }\n\n    function setTokenContract(address _token) public onlyOwner {\n        require(_token != address(0));\n        token = ElyToken(_token);\n    }\n\n    function setICO(address _ico) public onlyOwner {\n        require(_ico != address(0));\n        ico = SellableToken(_ico);\n    }\n\n    function setRefferal(address _referral) public onlyOwner {\n        require(_referral != address(0));\n        referral = Referral(_referral);\n    }\n\n    function setLockPeriod(uint256 _period) public onlyOwner {\n        lockPeriod = _period;\n    }\n\n    function setContributionLockPeriod(uint256 _period) public onlyOwner {\n        contributionLockPeriod = _period;\n    }\n\n    function log(address _address, uint256 _amount) public {\n        if (msg.sender == address(referral) || msg.sender == address(token)) {\n            lockedAmount[_address] = lockedAmount[_address].add(_amount);\n        }\n    }\n\n    function decreaseAfterBurn(address _address, uint256 _amount) public {\n        if (msg.sender == address(ico)) {\n            lockedContributions[_address] = lockedContributions[_address].sub(_amount);\n        }\n    }\n\n    function logLargeContribution(address _address, uint256 _amount) public {\n        if (msg.sender == address(ico)) {\n            lockedContributions[_address] = lockedContributions[_address].add(_amount);\n        }\n    }\n\n    function isTransferAllowed(address _address, uint256 _value) public view returns (bool) {\n        if (ico.endTime().add(lockPeriod) < block.timestamp) {\n            return checkLargeContributionsLock(_address, _value);\n        }\n        if (token.balanceOf(_address).sub(lockedAmount[_address]) >= _value) {\n            return checkLargeContributionsLock(_address, _value);\n        }\n\n        return false;\n    }\n\n    function checkLargeContributionsLock(address _address, uint256 _value) public view returns (bool) {\n        if (ico.endTime().add(contributionLockPeriod) < block.timestamp) {\n            return true;\n        }\n        if (token.balanceOf(_address).sub(lockedContributions[_address]) >= _value) {\n            return true;\n        }\n\n        return false;\n    }\n\n}\n\n/**\n * @title TokenVesting\n * @dev A token holder contract that can release its token balance gradually like a\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n * owner.\n */\ncontract TokenVesting is Ownable {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20Basic;\n\n  event Released(uint256 amount);\n  event Revoked();\n\n  // beneficiary of tokens after they are released\n  address public beneficiary;\n\n  uint256 public cliff;\n  uint256 public start;\n  uint256 public duration;\n\n  bool public revocable;\n\n  mapping (address => uint256) public released;\n  mapping (address => bool) public revoked;\n\n  /**\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n   * of the balance will have vested.\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n   * @param _duration duration in seconds of the period in which the tokens will vest\n   * @param _revocable whether the vesting is revocable or not\n   */\n  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\n    require(_beneficiary != address(0));\n    require(_cliff <= _duration);\n\n    beneficiary = _beneficiary;\n    revocable = _revocable;\n    duration = _duration;\n    cliff = _start.add(_cliff);\n    start = _start;\n  }\n\n  /**\n   * @notice Transfers vested tokens to beneficiary.\n   * @param token ERC20 token which is being vested\n   */\n  function release(ERC20Basic token) public {\n    uint256 unreleased = releasableAmount(token);\n\n    require(unreleased > 0);\n\n    released[token] = released[token].add(unreleased);\n\n    token.safeTransfer(beneficiary, unreleased);\n\n    Released(unreleased);\n  }\n\n  /**\n   * @notice Allows the owner to revoke the vesting. Tokens already vested\n   * remain in the contract, the rest are returned to the owner.\n   * @param token ERC20 token which is being vested\n   */\n  function revoke(ERC20Basic token) public onlyOwner {\n    require(revocable);\n    require(!revoked[token]);\n\n    uint256 balance = token.balanceOf(this);\n\n    uint256 unreleased = releasableAmount(token);\n    uint256 refund = balance.sub(unreleased);\n\n    revoked[token] = true;\n\n    token.safeTransfer(owner, refund);\n\n    Revoked();\n  }\n\n  /**\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\n   * @param token ERC20 token which is being vested\n   */\n  function releasableAmount(ERC20Basic token) public view returns (uint256) {\n    return vestedAmount(token).sub(released[token]);\n  }\n\n  /**\n   * @dev Calculates the amount that has already vested.\n   * @param token ERC20 token which is being vested\n   */\n  function vestedAmount(ERC20Basic token) public view returns (uint256) {\n    uint256 currentBalance = token.balanceOf(this);\n    uint256 totalBalance = currentBalance.add(released[token]);\n\n    if (now < cliff) {\n      return 0;\n    } else if (now >= start.add(duration) || revoked[token]) {\n      return totalBalance;\n    } else {\n      return totalBalance.mul(now.sub(start)).div(duration);\n    }\n  }\n}\n\ncontract PeriodicTokenVesting is TokenVesting {\n    uint256 public periods;\n\n    function PeriodicTokenVesting(\n        address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, uint256 _periods, bool _revocable\n    )\n    public TokenVesting(_beneficiary, _start, _cliff, _duration, _revocable)\n    {\n        periods = _periods;\n    }\n\n    /**\n    * @dev Calculates the amount that has already vested.\n    * @param token ERC20 token which is being vested\n    */\n    function vestedAmount(ERC20Basic token) public view returns (uint256) {\n        uint256 currentBalance = token.balanceOf(this);\n        uint256 totalBalance = currentBalance.add(released[token]);\n\n        if (now < cliff) {\n            return 0;\n        } else if (now >= start.add(duration * periods) || revoked[token]) {\n            return totalBalance;\n        } else {\n\n            uint256 periodTokens = totalBalance.div(periods);\n\n            uint256 periodsOver = now.sub(start).div(duration) + 1;\n\n            if (periodsOver >= periods) {\n                return totalBalance;\n            }\n\n            return periodTokens.mul(periodsOver);\n        }\n    }\n}\n\ncontract ElyAllocation is Ownable {\n\n    using SafeERC20 for ERC20Basic;\n    using SafeMath for uint256;\n\n    uint256 public icoEndTime;\n\n    address[] public vestings;\n\n    event VestingCreated(\n        address _vesting,\n        address _beneficiary,\n        uint256 _start,\n        uint256 _cliff,\n        uint256 _duration,\n        uint256 _periods,\n        bool _revocable\n    );\n\n    event VestingRevoked(address _vesting);\n\n    function setICOEndTime(uint256 _icoEndTime) public onlyOwner {\n        icoEndTime = _icoEndTime;\n    }\n\n    function vestingMint(PeriodicTokenVesting _vesting, MintingERC20 _token, uint256 _amount) public onlyOwner {\n        require(_amount > 0 && _token.mint(address(_vesting), _amount) == _amount);\n    }\n\n    function createVesting(\n        address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, uint256 _periods, bool _revocable\n    ) public onlyOwner returns (PeriodicTokenVesting) {\n        PeriodicTokenVesting vesting = new PeriodicTokenVesting(\n            _beneficiary, _start, _cliff, _duration, _periods, _revocable\n        );\n\n        vestings.push(vesting);\n\n        VestingCreated(vesting, _beneficiary, _start, _cliff, _duration, _periods, _revocable);\n\n        return vesting;\n    }\n\n    function revokeVesting(PeriodicTokenVesting _vesting, MintingERC20 token) public onlyOwner() {\n        _vesting.revoke(token);\n\n        VestingRevoked(_vesting);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_privateSale\",\"type\":\"address\"}],\"name\":\"setPrivateSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockupContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnInvestorTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transferFrozen\",\"type\":\"bool\"}],\"name\":\"freezing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockupContract\",\"type\":\"address\"}],\"name\":\"setLockupContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ico\",\"type\":\"address\"}],\"name\":\"setICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bountyAddress\",\"type\":\"address\"},{\"name\":\"_locked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "6060604052600f805460a060020a60ff0219167401000000000000000000000000000000000000000017905534156200003757600080fd5b60405160408062001d588339810160405280805191906020018051600b549092506000915081906040805190810160405280600781526020017f456c79636f696e00000000000000000000000000000000000000000000000000815250601260408051908101604090815260038083527f454c59000000000000000000000000000000000000000000000000000000000060208401528054600160a060020a03191633600160a060020a031617905560009088908790869086908690869086908051908101604052600981527f455243323020302e310000000000000000000000000000000000000000000000602082015260089080516200013e929160200190620004df565b506009805460ff1916821515179055600186905581156200017b57600154600160a060020a03331660009081526020819052604090205562000198565b600154600160a060020a0330166000908152602081905260409020555b6006858051620001ad929160200190620004df565b506007838051620001c3929160200190620004df565b50506005805460ff191660ff949094169390931790925550504360045550604090508051908101604052601081527f4d696e74696e67455243323020302e3100000000000000000000000000000000602082015260089080516200022c929160200190620004df565b505050600160a060020a033381166000908152600a60205260409020805460ff19166001179055600b949094555050508416151590506200026c57600080fd5b600f8054600160a060020a031916600160a060020a03851617905560408051908101604052600781527f454c5920302e310000000000000000000000000000000000000000000000000060208201526008908051620002d0929160200190620004df565b50600554620002f990633b9aca009060ff16600a0a6401000000006200174d6200036182021704565b600b556005546200032390629896809060ff16600a0a6401000000006200174d6200036182021704565b600f549091506200034c90600160a060020a031682640100000000620012196200039b82021704565b81146200035857600080fd5b50505062000584565b60008083151562000376576000915062000394565b508282028284828115156200038757fe5b04146200039057fe5b8091505b5092915050565b600160a060020a0333166000908152600a602052604081205460ff161515600114620003c657600080fd5b60095460ff16151560011415620003e057506000620004c9565b811515620003f157506000620004c9565b600b546001546200041190846401000000006200140f620004cf82021704565b11156200042157506000620004c9565b6001546200043e90836401000000006200140f620004cf82021704565b600155600160a060020a0383166000908152602081905260409020546200047490836401000000006200140f620004cf82021704565b600160a060020a0384166000818152602081905260408082209390935590917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350805b92915050565b6000828201838110156200039057fe5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200052257805160ff191683800117855562000552565b8280016001018555821562000552579182015b828111156200055257825182559160200191906001019062000535565b506200056092915062000564565b5090565b6200058191905b808211156200056057600081556001016200056b565b90565b6117c480620005946000396000f3006060604052600436106101925763ffffffff60e060020a60003504166306fdde038114610197578063095ea7b31461022157806309f68e96146102575780630a6ee9471461027857806317634514146102a757806318160ddd146102cc5780631d1fe108146102df578063211e28b61461030157806323b872dd146103195780633092afd514610341578063313ce5671461036057806336a23dbf1461038957806340c10f19146103a157806352cf46d4146103c35780635a3b7e42146103e55780635d452201146103f8578063661884631461040b5780636d1b229d1461042d57806370a08231146104435780637c1595f2146104625780638da5cb5b1461048157806395d89b4114610494578063983b2d56146104a7578063a9059cbb146104c6578063ade4637a146104e8578063b6f50c29146104fb578063ba1f879f1461051a578063c516358f1461052d578063cf30901214610540578063d5abeb0114610553578063d73dd62314610566578063dd62ed3e14610588578063f2fde38b146105ad578063f46eccc4146105cc575b600080fd5b34156101a257600080fd5b6101aa6105eb565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101e65780820151838201526020016101ce565b50505050905090810190601f1680156102135780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561022c57600080fd5b610243600160a060020a0360043516602435610689565b604051901515815260200160405180910390f35b341561026257600080fd5b610276600160a060020a03600435166106b2565b005b341561028357600080fd5b61028b610711565b604051600160a060020a03909116815260200160405180910390f35b34156102b257600080fd5b6102ba610720565b60405190815260200160405180910390f35b34156102d757600080fd5b6102ba610726565b34156102ea57600080fd5b6102ba600160a060020a036004351660243561072c565b341561030c57600080fd5b6102766004351515610839565b341561032457600080fd5b610243600160a060020a0360043581169060243516604435610867565b341561034c57600080fd5b610276600160a060020a036004351661092c565b341561036b57600080fd5b610373610968565b60405160ff909116815260200160405180910390f35b341561039457600080fd5b6102766004351515610971565b34156103ac57600080fd5b6102ba600160a060020a0360043516602435610ab6565b34156103ce57600080fd5b610243600160a060020a0360043516602435610b9a565b34156103f057600080fd5b6101aa610c43565b341561040357600080fd5b61028b610cae565b341561041657600080fd5b610243600160a060020a0360043516602435610cbd565b341561043857600080fd5b610276600435610cdd565b341561044e57600080fd5b6102ba600160a060020a0360043516610de3565b341561046d57600080fd5b610276600160a060020a0360043516610dfe565b341561048c57600080fd5b61028b610e5d565b341561049f57600080fd5b6101aa610e6c565b34156104b257600080fd5b610276600160a060020a0360043516610ed7565b34156104d157600080fd5b610243600160a060020a0360043516602435610f16565b34156104f357600080fd5b610243610fd2565b341561050657600080fd5b610276600160a060020a0360043516610ff3565b341561052557600080fd5b61028b611052565b341561053857600080fd5b61028b611061565b341561054b57600080fd5b610243611070565b341561055e57600080fd5b6102ba611079565b341561057157600080fd5b610243600160a060020a036004351660243561107f565b341561059357600080fd5b6102ba600160a060020a036004358116906024351661109f565b34156105b857600080fd5b610276600160a060020a03600435166110ca565b34156105d757600080fd5b610243600160a060020a0360043516611165565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106815780601f1061065657610100808354040283529160200191610681565b820191906000526020600020905b81548152906001019060200180831161066457829003601f168201915b505050505081565b60095460009060ff161561069f575060006106ac565b6106a9838361117a565b90505b92915050565b60035433600160a060020a039081169116146106cd57600080fd5b600160a060020a03811615156106e257600080fd5b600d805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600e54600160a060020a031681565b60045481565b60015490565b600c5460009033600160a060020a039081169116148061075a5750600d5433600160a060020a039081169116145b151561076557600080fd5b600160a060020a0383166000908152602081905260409020548290101561078b57600080fd5b600160a060020a0383166000908152602081905260409020546107b4908363ffffffff6111e616565b600160a060020a0384166000818152602081905260409081902092909255907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a26000600160a060020a0384166000805160206117798339815191528460405190815260200160405180910390a350919050565b60035433600160a060020a0390811691161461085457600080fd5b6009805460ff1916911515919091179055565b600f54600090600160a060020a038581169116148061088b575061088b8483610b9a565b151561089657600080fd5b600f54600160a060020a038581169116141561091757600e54600160a060020a0316638309e8a8848460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b151561090257600080fd5b6102c65a03f1151561091357600080fd5b5050505b6109228484846111f8565b90505b9392505050565b60035433600160a060020a0390811691161461094757600080fd5b600160a060020a03166000908152600a60205260409020805460ff19169055565b60055460ff1681565b60035433600160a060020a0390811691161461098c57600080fd5b600c54600160a060020a031615801590610a065750600c54600160a060020a03166322f3e2d46000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156109e957600080fd5b6102c65a03f115156109fa57600080fd5b50505060405180519050155b8015610a745750600c54600160a060020a03166378e979256000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610a5557600080fd5b6102c65a03f11515610a6657600080fd5b505050604051805190504210155b15610ab357600f805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000831515021790555b50565b600160a060020a0333166000908152600a602052604081205460ff161515600114610ae057600080fd5b60035433600160a060020a0390811691161415610b9057600c54600160a060020a03161515610b0e57600080fd5b600c54600160a060020a03166322f3e2d46000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610b5657600080fd5b6102c65a03f11515610b6757600080fd5b505050604051805190501515610b8857610b818383611219565b90506106ac565b5060006106ac565b6106a98383611219565b600f5460009074010000000000000000000000000000000000000000900460ff161580156106a95750600e54600160a060020a0316635eae177c848460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610c2257600080fd5b6102c65a03f11515610c3357600080fd5b5050506040518051949350505050565b60088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106815780601f1061065657610100808354040283529160200191610681565b600c54600160a060020a031681565b60095460009060ff1615610cd3575060006106ac565b6106a98383611313565b600c5433600160a060020a0390811691161480610d085750600d5433600160a060020a039081169116145b1515610d1357600080fd5b600b54600154610d29908363ffffffff61140f16565b1115610d8d5730600160a060020a03167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5610d71600154600b546111e690919063ffffffff16565b60405190815260200160405180910390a2600b54600155610ab3565b600154610da0908263ffffffff61140f16565b600155600160a060020a0330167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58260405190815260200160405180910390a250565b600160a060020a031660009081526020819052604090205490565b60035433600160a060020a03908116911614610e1957600080fd5b600160a060020a0381161515610e2e57600080fd5b600e805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106815780601f1061065657610100808354040283529160200191610681565b60035433600160a060020a03908116911614610ef257600080fd5b600160a060020a03166000908152600a60205260409020805460ff19166001179055565b600f5460009033600160a060020a0390811691161480610f3b5750610f3b3383610b9a565b1515610f4657600080fd5b600f5433600160a060020a0390811691161415610fc857600e54600160a060020a0316638309e8a8848460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610fb357600080fd5b6102c65a03f11515610fc457600080fd5b5050505b6106a9838361141e565b600f5474010000000000000000000000000000000000000000900460ff1681565b60035433600160a060020a0390811691161461100e57600080fd5b600160a060020a038116151561102357600080fd5b600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600d54600160a060020a031681565b600f54600160a060020a031681565b60095460ff1681565b600b5481565b60095460009060ff1615611095575060006106ac565b6106a9838361143b565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a039081169116146110e557600080fd5b600160a060020a03811615156110fa57600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600a6020526000908152604090205460ff1681565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6000828211156111f257fe5b50900390565b60095460009060ff161561120e57506000610925565b6109228484846114df565b600160a060020a0333166000908152600a602052604081205460ff16151560011461124357600080fd5b60095460ff1615156001141561125b575060006106ac565b81151561126a575060006106ac565b600b54600154611280908463ffffffff61140f16565b111561128e575060006106ac565b6001546112a1908363ffffffff61140f16565b600155600160a060020a0383166000908152602081905260409020546112cd908363ffffffff61140f16565b600160a060020a0384166000818152602081905260408082209390935590916000805160206117798339815191529085905190815260200160405180910390a350919050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561137057600160a060020a0333811660009081526002602090815260408083209388168352929052908120556113a7565b611380818463ffffffff6111e616565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b60008282018381101561092557fe5b60095460009060ff161561143157600080fd5b6106a9838361164d565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054611473908363ffffffff61140f16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b6000600160a060020a03831615156114f657600080fd5b600160a060020a03841660009081526020819052604090205482111561151b57600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561154e57600080fd5b600160a060020a038416600090815260208190526040902054611577908363ffffffff6111e616565b600160a060020a0380861660009081526020819052604080822093909355908516815220546115ac908363ffffffff61140f16565b600160a060020a03808516600090815260208181526040808320949094558783168252600281528382203390931682529190915220546115f2908363ffffffff6111e616565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516916000805160206117798339815191529085905190815260200160405180910390a35060019392505050565b6000600160a060020a038316151561166457600080fd5b600160a060020a03331660009081526020819052604090205482111561168957600080fd5b600160a060020a0333166000908152602081905260409020546116b2908363ffffffff6111e616565b600160a060020a0333811660009081526020819052604080822093909355908516815220546116e7908363ffffffff61140f16565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a03166000805160206117798339815191528460405190815260200160405180910390a350600192915050565b6000808315156117605760009150611408565b5082820282848281151561177057fe5b041461092557fe00ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058204ec07e679d5ceb3c571c280a0aa3938a66a0093f904ddf9735e0311b37f880c300290000000000000000000000008148613d63a4f9620c2c659754ba2abf85d142420000000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000008148613d63a4f9620c2c659754ba2abf85d142420000000000000000000000000000000000000000000000000000000000000000"
}