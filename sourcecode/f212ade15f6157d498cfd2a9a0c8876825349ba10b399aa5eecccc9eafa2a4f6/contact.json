{
  "address": "0x985dd3d42de1e256d09e1c10f112bccb8015ad41",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Ocean Protocol Token",
  "contractName": "OceanToken",
  "compilerVersion": "v0.5.3+commit.10d17f24",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-10\n*/\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n\npragma solidity ^0.5.0;\n\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Capped.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title Capped token\n * @dev Mintable token with a token cap.\n */\ncontract ERC20Capped is ERC20Mintable {\n    uint256 private _cap;\n\n    constructor (uint256 cap) public {\n        require(cap > 0);\n        _cap = cap;\n    }\n\n    /**\n     * @return the cap for the token minting.\n     */\n    function cap() public view returns (uint256) {\n        return _cap;\n    }\n\n    function _mint(address account, uint256 value) internal {\n        require(totalSupply().add(value) <= _cap);\n        super._mint(account, value);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n\npragma solidity ^0.5.0;\n\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Pausable.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n **/\ncontract ERC20Pausable is ERC20, Pausable {\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/OceanToken.sol\n\npragma solidity 0.5.3;\n\n\n\n\n\n/**\n * @title Ocean Protocol ERC20 Token Contract\n * @author Ocean Protocol Team\n * @dev Implementation of the Ocean Token.\n */\ncontract OceanToken is Ownable, ERC20Pausable, ERC20Detailed, ERC20Capped {\n    \n    using SafeMath for uint256;\n    \n    uint8 constant DECIMALS = 18;\n    uint256 constant CAP = 690900000;\n    uint256 TOTALSUPPLY = CAP.mul(uint256(10) ** DECIMALS);\n    \n    // keep track token holders\n    address[] private accounts = new address[](0);\n    mapping(address => bool) private tokenHolders;\n    \n    /**\n     * @dev OceanToken constructor\n     * @param contractOwner refers to the owner of the contract\n     */\n    constructor(\n        address contractOwner\n    )\n    public\n    ERC20Detailed('OceanToken', 'OCEAN', DECIMALS)\n    ERC20Capped(TOTALSUPPLY)\n    Ownable()\n    {\n        addPauser(contractOwner);\n        renouncePauser();\n        addMinter(contractOwner);\n        renounceMinter();\n        transferOwnership(contractOwner);\n    }\n    \n    /**\n     * @dev transfer tokens when not paused (pausable transfer function)\n     * @param _to receiver address\n     * @param _value amount of tokens\n     * @return true if receiver is illegible to receive tokens\n     */\n    function transfer(\n        address _to,\n        uint256 _value\n    )\n    public\n    returns (bool)\n    {\n        bool success = super.transfer(_to, _value);\n        if (success) {\n            updateTokenHolders(msg.sender, _to);\n        }\n        return success;\n    }\n    \n    /**\n     * @dev transferFrom transfers tokens only when token is not paused\n     * @param _from sender address\n     * @param _to receiver address\n     * @param _value amount of tokens\n     * @return true if receiver is illegible to receive tokens\n     */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n    public\n    returns (bool)\n    {\n        bool success = super.transferFrom(_from, _to, _value);\n        if (success) {\n            updateTokenHolders(_from, _to);\n        }\n        return success;\n    }\n    \n    /**\n     * @dev retrieve the address & token balance of token holders (each time retrieve partial from the list)\n     * @param _start index\n     * @param _end index\n     * @return array of accounts and array of balances\n     */\n    function getAccounts(\n        uint256 _start,\n        uint256 _end\n    )\n    external\n    view\n    onlyOwner\n    returns (address[] memory, uint256[] memory)\n    {\n        require(\n            _start <= _end && _end < accounts.length,\n            'Array index out of bounds'\n        );\n        \n        uint256 length = _end.sub(_start).add(1);\n        \n        address[] memory _tokenHolders = new address[](length);\n        uint256[] memory _tokenBalances = new uint256[](length);\n        \n        for (uint256 i = _start; i <= _end; i++)\n        {\n            address account = accounts[i];\n            uint256 accountBalance = super.balanceOf(account);\n            if (accountBalance > 0)\n            {\n                _tokenBalances[i] = accountBalance;\n                _tokenHolders[i] = account;\n            }\n        }\n        \n        return (_tokenHolders, _tokenBalances);\n    }\n    \n    /**\n     * @dev get length of account list\n     */\n    function getAccountsLength()\n    external\n    view\n    onlyOwner\n    returns (uint256)\n    {\n        return accounts.length;\n    }\n    \n    /**\n     * @dev kill the contract and destroy all tokens\n     */\n    function kill()\n    external\n    onlyOwner\n    {\n        selfdestruct(address(uint160(owner())));\n    }\n    \n    /**\n     * @dev fallback function prevents ether transfer to this contract\n     */\n    function()\n    external\n    payable\n    {\n        revert('Invalid ether transfer');\n    }\n    \n    /*\n     * @dev tryToAddTokenHolder try to add the account to the token holders structure\n     * @param account address\n     */\n    function tryToAddTokenHolder(\n        address account\n    )\n    private\n    {\n        if (!tokenHolders[account] && super.balanceOf(account) > 0)\n        {\n            accounts.push(account);\n            tokenHolders[account] = true;\n        }\n    }\n    \n    /*\n     * @dev updateTokenHolders maintains the accounts array and set the address as a promising token holder\n     * @param sender address\n     * @param receiver address.\n     */\n    function updateTokenHolders(\n        address sender,\n        address receiver\n    )\n    private\n    {\n        tryToAddTokenHolder(sender);\n        tryToAddTokenHolder(receiver);\n    }\n}",
  "bytecode": "60806040526200002a63292e4c20670de0b6b3a7640000640100000000620015676200021582021704565b600b5560408051600081526020810191829052516200004c91600c91620005f5565b503480156200005a57600080fd5b5060405160208062001d12833981018060405260208110156200007c57600080fd5b5051600b54604080518082018252600a81527f4f6365616e546f6b656e0000000000000000000000000000000000000000000060208281019190915282518084018452600581527f4f4345414e0000000000000000000000000000000000000000000000000000009181019190915260008054600160a060020a0319163317808255935192939192601292600160a060020a0316919060008051602062001cf2833981519152908290a36200013a336401000000006200024d810204565b6005805460ff191690558251620001599060069060208601906200065f565b5081516200016f9060079060208501906200065f565b506008805460ff191660ff92909216919091179055506200019b9050336401000000006200029f810204565b60008111620001a957600080fd5b600a55620001c081640100000000620002f1810204565b620001d364010000000062000328810204565b620001e7816401000000006200033e810204565b620001fa64010000000062000372810204565b6200020e8164010000000062000386810204565b5062000724565b6000821515620002285750600062000247565b8282028284828115156200023857fe5b04146200024457600080fd5b90505b92915050565b6200026860048264010000000062001441620003b982021704565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b620002ba60098264010000000062001441620003b982021704565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b620003053364010000000062000414810204565b15156200031157600080fd5b62000325816401000000006200024d810204565b50565b6200033c3364010000000062000431810204565b565b620003523364010000000062000483810204565b15156200035e57600080fd5b62000325816401000000006200029f810204565b6200033c33640100000000620004a0810204565b62000399640100000000620004f2810204565b1515620003a557600080fd5b620003258164010000000062000504810204565b600160a060020a0381161515620003cf57600080fd5b620003e4828264010000000062000564810204565b15620003ef57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b60006200024760048364010000000062000f736200056482021704565b6200044c600482640100000000620013f56200059c82021704565b604051600160a060020a038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b60006200024760098364010000000062000f736200056482021704565b620004bb600982640100000000620013f56200059c82021704565b604051600160a060020a038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b600054600160a060020a031633145b90565b600160a060020a03811615156200051a57600080fd5b60008054604051600160a060020a038085169392169160008051602062001cf283398151915291a360008054600160a060020a031916600160a060020a0392909216919091179055565b6000600160a060020a03821615156200057c57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b600160a060020a0381161515620005b257600080fd5b620005c7828264010000000062000564810204565b1515620005d357600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b8280548282559060005260206000209081019282156200064d579160200282015b828111156200064d5782518254600160a060020a031916600160a060020a0390911617825560209092019160019091019062000616565b506200065b929150620006e0565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620006a257805160ff1916838001178555620006d2565b82800160010185558215620006d2579182015b82811115620006d2578251825591602001919060010190620006b5565b506200065b92915062000707565b6200050191905b808211156200065b578054600160a060020a0319168155600101620006e7565b6200050191905b808211156200065b57600081556001016200070e565b6115be80620007346000396000f3fe6080604052600436106101df576000357c01000000000000000000000000000000000000000000000000000000009004806370a0823111610114578063983b2d56116100b2578063aa271e1a11610081578063aa271e1a1461067c578063dd62ed3e146106af578063e68a7c3b146106ea578063f2fde38b146107b3576101df565b8063983b2d56146105c257806398650275146105f5578063a457c2d71461060a578063a9059cbb14610643576101df565b80638456cb59116100ee5780638456cb59146105525780638da5cb5b146105675780638f32d59b1461059857806395d89b41146105ad576101df565b806370a08231146104d7578063715018a61461050a57806382dc1ec41461051f576101df565b8063395093511161018157806341c0e1b51161015b57806341c0e1b51461046557806346fbf68e1461047a5780635c975abb146104ad5780636ef8d66d146104c2576101df565b806339509351146103dc5780633f4ba83a1461041557806340c10f191461042c576101df565b806318160ddd116101bd57806318160ddd1461034457806323b872dd14610359578063313ce5671461039c578063355274ea146103c7576101df565b806306fdde0314610246578063095ea7b3146102d057806314f326a11461031d575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e76616c6964206574686572207472616e7366657200000000000000000000604482015290519081900360640190fd5b34801561025257600080fd5b5061025b6107e6565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561029557818101518382015260200161027d565b50505050905090810190601f1680156102c25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102dc57600080fd5b50610309600480360360408110156102f357600080fd5b50600160a060020a03813516906020013561087c565b604080519115158252519081900360200190f35b34801561032957600080fd5b506103326108a2565b60408051918252519081900360200190f35b34801561035057600080fd5b506103326108be565b34801561036557600080fd5b506103096004803603606081101561037c57600080fd5b50600160a060020a038135811691602081013590911690604001356108c4565b3480156103a857600080fd5b506103b16108ec565b6040805160ff9092168252519081900360200190f35b3480156103d357600080fd5b506103326108f5565b3480156103e857600080fd5b50610309600480360360408110156103ff57600080fd5b50600160a060020a0381351690602001356108fb565b34801561042157600080fd5b5061042a610918565b005b34801561043857600080fd5b506103096004803603604081101561044f57600080fd5b50600160a060020a03813516906020013561097c565b34801561047157600080fd5b5061042a6109a5565b34801561048657600080fd5b506103096004803603602081101561049d57600080fd5b5035600160a060020a03166109cb565b3480156104b957600080fd5b506103096109de565b3480156104ce57600080fd5b5061042a6109e7565b3480156104e357600080fd5b50610332600480360360208110156104fa57600080fd5b5035600160a060020a03166109f2565b34801561051657600080fd5b5061042a610a0d565b34801561052b57600080fd5b5061042a6004803603602081101561054257600080fd5b5035600160a060020a0316610a77565b34801561055e57600080fd5b5061042a610a97565b34801561057357600080fd5b5061057c610afd565b60408051600160a060020a039092168252519081900360200190f35b3480156105a457600080fd5b50610309610b0c565b3480156105b957600080fd5b5061025b610b1d565b3480156105ce57600080fd5b5061042a600480360360208110156105e557600080fd5b5035600160a060020a0316610b7e565b34801561060157600080fd5b5061042a610b9b565b34801561061657600080fd5b506103096004803603604081101561062d57600080fd5b50600160a060020a038135169060200135610ba4565b34801561064f57600080fd5b506103096004803603604081101561066657600080fd5b50600160a060020a038135169060200135610bc1565b34801561068857600080fd5b506103096004803603602081101561069f57600080fd5b5035600160a060020a0316610be0565b3480156106bb57600080fd5b50610332600480360360408110156106d257600080fd5b50600160a060020a0381358116916020013516610bf3565b3480156106f657600080fd5b5061071a6004803603604081101561070d57600080fd5b5080359060200135610c1e565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561075e578181015183820152602001610746565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561079d578181015183820152602001610785565b5050505090500194505050505060405180910390f35b3480156107bf57600080fd5b5061042a600480360360208110156107d657600080fd5b5035600160a060020a0316610dd1565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108725780601f1061084757610100808354040283529160200191610872565b820191906000526020600020905b81548152906001019060200180831161085557829003601f168201915b5050505050905090565b60055460009060ff161561088f57600080fd5b6108998383610ded565b90505b92915050565b60006108ac610b0c565b15156108b757600080fd5b50600c5490565b60035490565b6000806108d2858585610e6b565b905080156108e4576108e48585610e89565b949350505050565b60085460ff1690565b600a5490565b60055460009060ff161561090e57600080fd5b6108998383610e9f565b610921336109cb565b151561092c57600080fd5b60055460ff16151561093d57600080fd5b6005805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b600061098733610be0565b151561099257600080fd5b61099c8383610f4f565b50600192915050565b6109ad610b0c565b15156109b857600080fd5b6109c0610afd565b600160a060020a0316ff5b600061089c60048363ffffffff610f7316565b60055460ff1690565b6109f033610faa565b565b600160a060020a031660009081526001602052604090205490565b610a15610b0c565b1515610a2057600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b610a80336109cb565b1515610a8b57600080fd5b610a9481610ff2565b50565b610aa0336109cb565b1515610aab57600080fd5b60055460ff1615610abb57600080fd5b6005805460ff191660011790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b600054600160a060020a031690565b600054600160a060020a0316331490565b60078054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108725780601f1061084757610100808354040283529160200191610872565b610b8733610be0565b1515610b9257600080fd5b610a948161103a565b6109f033611082565b60055460009060ff1615610bb757600080fd5b61089983836110ca565b600080610bce8484611115565b90508015610899576108993385610e89565b600061089c60098363ffffffff610f7316565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b606080610c29610b0c565b1515610c3457600080fd5b828411158015610c455750600c5483105b1515610cb257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f417272617920696e646578206f7574206f6620626f756e647300000000000000604482015290519081900360640190fd5b6000610cd56001610cc9868863ffffffff61113216565b9063ffffffff61114716565b9050606081604051908082528060200260200182016040528015610d03578160200160208202803883390190505b509050606082604051908082528060200260200182016040528015610d32578160200160208202803883390190505b509050865b868111610dc4576000600c82815481101515610d4f57fe5b6000918252602082200154600160a060020a03169150610d6e826109f2565b90506000811115610dba57808484815181101515610d8857fe5b6020908102909101015284518290869085908110610da257fe5b600160a060020a039092166020928302909101909101525b5050600101610d37565b5090969095509350505050565b610dd9610b0c565b1515610de457600080fd5b610a9481611159565b6000600160a060020a0383161515610e0457600080fd5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60055460009060ff1615610e7e57600080fd5b6108e48484846111d6565b610e928261129f565b610e9b8161129f565b5050565b6000600160a060020a0383161515610eb657600080fd5b336000908152600260209081526040808320600160a060020a0387168452909152902054610eea908363ffffffff61114716565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600a54610f5e82610cc96108be565b1115610f6957600080fd5b610e9b8282611349565b6000600160a060020a0382161515610f8a57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b610fbb60048263ffffffff6113f516565b604051600160a060020a038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b61100360048263ffffffff61144116565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b61104b60098263ffffffff61144116565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b61109360098263ffffffff6113f516565b604051600160a060020a038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b6000600160a060020a03831615156110e157600080fd5b336000908152600260209081526040808320600160a060020a0387168452909152902054610eea908363ffffffff61113216565b60055460009060ff161561112857600080fd5b610899838361148f565b60008282111561114157600080fd5b50900390565b60008282018381101561089957600080fd5b600160a060020a038116151561116e57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038316600090815260026020908152604080832033845290915281205461120a908363ffffffff61113216565b600160a060020a0385166000908152600260209081526040808320338452909152902055611239848484611498565b600160a060020a0384166000818152600260209081526040808320338085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a0381166000908152600d602052604090205460ff161580156112d0575060006112ce826109f2565b115b15610a9457600c805460018181019092557fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018054600160a060020a03841673ffffffffffffffffffffffffffffffffffffffff1990911681179091556000908152600d60205260409020805460ff1916909117905550565b600160a060020a038216151561135e57600080fd5b600354611371908263ffffffff61114716565b600355600160a060020a03821660009081526001602052604090205461139d908263ffffffff61114716565b600160a060020a03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a038116151561140a57600080fd5b6114148282610f73565b151561141f57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a038116151561145657600080fd5b6114608282610f73565b1561146a57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600061099c3384845b600160a060020a03821615156114ad57600080fd5b600160a060020a0383166000908152600160205260409020546114d6908263ffffffff61113216565b600160a060020a03808516600090815260016020526040808220939093559084168152205461150b908263ffffffff61114716565b600160a060020a0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008215156115785750600061089c565b82820282848281151561158757fe5b041461089957600080fdfea165627a7a72305820bc25a5af7df97a44a2b331fdf9f568e9de38d50b1b3a718ed5864b5dcb79ce1700298be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0000000000000000000000000bcf0eac47aa2e3f19b81926cd634301bfe18caaf",
  "constructorArguments": "000000000000000000000000bcf0eac47aa2e3f19b81926cd634301bfe18caaf"
}