{
  "address": "0x74292b83aacd7f57cee1d5f98270efa1e612b6e1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Salary",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-08\n*/\n\npragma solidity 0.4.25;\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\ncontract Salary {\n  using SafeMath for uint256;\n  address public admin;\n  mapping(address => bool) public helperAddressTable;\n  address[] public addressList;\n  uint256 public deliveredId;\n  // deliveredId is global index indicates the number of months that the company deliver tokens.\n  // StaffAddress => ( deliveredId => monthlySalaryAmount )\n\n  mapping(address => mapping(uint256 => uint256)) public staffSalaryData;\n  // status: 0 (null) status: 1 (normal) status: 2 (terminated)\n  mapping(address => uint256) public staffSalaryStatus;\n\n  ERC20 token;\n\n  event TerminatePackage(address indexed staff);\n  event ChangeTokenContractAddress(address indexed newAddress);\n  \n  modifier onlyAdmin() {\n    require(msg.sender == admin);\n    _;\n  }\n\n  modifier onlyHelper() {\n    require(msg.sender == admin || helperAddressTable[msg.sender] == true);\n    _;\n  }\n\n  function getFullAddressList() view public returns(address[]) {\n    return addressList;\n  }\n\n  /**\n  * @dev This would distribute all salary of the month.\n  */\n  function distribute() public onlyAdmin {\n    uint256 i;\n    address receiverAddress;\n    uint256 transferAmount;\n    for(i = 0; i < addressList.length; i++) {\n      receiverAddress = addressList[i];\n      if (staffSalaryStatus[receiverAddress] == 1) {\n        transferAmount = staffSalaryData[receiverAddress][deliveredId];\n        if (transferAmount > 0) {\n          require(token.transfer(receiverAddress, transferAmount));\n        }\n      }\n    }\n    deliveredId = deliveredId + 1;\n  }\n\n  /**\n  * @dev The function should only be called from Admin.  This would require users approve\n  * efficient amount of Token to the contract beforehead.\n  * @param _staffAddress address The staff's wallet address where they would receive their salary.\n  * @param _monthlySalary uint256[] every monthly salary start from next index\n  */\n\n  function newPackage(address _staffAddress, uint256[] _monthlySalary) external onlyHelper{\n    uint256 i;\n    uint256 packageTotalAmount = 0;\n    require(staffSalaryStatus[_staffAddress] == 0);\n    for (i = 0; i < _monthlySalary.length; i++) {\n      staffSalaryData[_staffAddress][deliveredId + i] = _monthlySalary[i];\n      packageTotalAmount = packageTotalAmount + _monthlySalary[i];\n    }\n    addressList.push(_staffAddress);\n    staffSalaryStatus[_staffAddress] = 1;\n    require(token.transferFrom(msg.sender, address(this), packageTotalAmount));\n  }\n\n  /**\n  * @dev When there's a staff resign and terminate the package, admin can withdraw tokens\n  * from the contract.  This would emit an event TerminatePackage which is the only event of this contract.\n  * all staff should watch this event on Ethereum in order to protect their rights.\n  * efficient amount of Token to the contract beforehead.\n  * @param _staffAddress address The staff's wallet address where they would receive their salary.\n  */\n  function terminatePackage(address _staffAddress) external onlyAdmin {\n    emit TerminatePackage(_staffAddress);\n    staffSalaryStatus[_staffAddress] = 2;\n  }\n\n  function withdrawToken(uint256 amount) public onlyAdmin {\n    require(token.transfer(admin, amount));\n  }\n\n  /**\n  * @dev To facilitate the process of constructing salary system, we need an address that could\n  * execute `newPacakge`.\n  * @param _helperAddress the address that is to be assigned as a helper\n  */\n  function setHelper(address _helperAddress) external onlyAdmin {\n    helperAddressTable[_helperAddress] = true;\n  }\n\n  /**\n  * @dev A address controled by hotwallet that is\n  * able to call newPackage is a risk to the system. We should remove helper after\n  * the packages are properly set.\n  * @param _helperAddress the address to be removed from helper.\n  */\n  function removeHelper(address _helperAddress) external onlyAdmin {\n    require(helperAddressTable[_helperAddress] = true);\n    helperAddressTable[_helperAddress] = false;\n  }\n\n  /**\n   * @dev Change token address from BCNP to BCNT\n   * @param _newAddress the new token contract address\n  */ \n  function changeTokenContractAddress(address _newAddress) external onlyAdmin {\n    require(_newAddress != address(0));\n    token = ERC20(_newAddress);\n    emit ChangeTokenContractAddress(_newAddress);\n  }\n\n  constructor (address _tokenAddress) public {\n    admin = msg.sender;\n    token = ERC20(_tokenAddress);\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516020806109d9833981016040525160008054600160a060020a0319908116331790915560068054600160a060020a039093169290911691909117905561097a8061005f6000396000f3006080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166308e88aa181146100d45780630dfd45f9146101035780632d762b0d14610124578063434c09221461014557806350baa622146101785780637d25154e1461019057806392fb4acd146101a5578063986ccc7f146101c6578063b810fb43146101e7578063d2f4f0f01461021b578063d59f9cc71461023f578063dfb80a08146102a4578063e4fc6b6d146102d9578063f851a440146102ee575b600080fd5b3480156100e057600080fd5b5061010160048035600160a060020a03169060248035908101910135610303565b005b34801561010f57600080fd5b50610101600160a060020a03600435166104e1565b34801561013057600080fd5b50610101600160a060020a0360043516610524565b34801561015157600080fd5b50610166600160a060020a03600435166105a7565b60408051918252519081900360200190f35b34801561018457600080fd5b506101016004356105b9565b34801561019c57600080fd5b50610166610680565b3480156101b157600080fd5b50610101600160a060020a0360043516610686565b3480156101d257600080fd5b50610101600160a060020a03600435166106ee565b3480156101f357600080fd5b506101ff60043561072c565b60408051600160a060020a039092168252519081900360200190f35b34801561022757600080fd5b50610166600160a060020a0360043516602435610754565b34801561024b57600080fd5b50610254610771565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610290578181015183820152602001610278565b505050509050019250505060405180910390f35b3480156102b057600080fd5b506102c5600160a060020a03600435166107d3565b604080519115158252519081900360200190f35b3480156102e557600080fd5b506101016107e8565b3480156102fa57600080fd5b506101ff61093f565b600080548190600160a060020a031633148061033457503360009081526001602081905260409091205460ff161515145b151561033f57600080fd5b50600160a060020a0384166000908152600560205260408120541561036357600080fd5b600091505b828210156103d25783838381811061037c57fe5b600160a060020a038816600090815260046020908152604080832060035489018452825290912091029290920135909155508383838181106103ba57fe5b90506020020135810190508180600101925050610368565b6002805460018082019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0388811691821790925560009081526005602090815260408083209490945560065484517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810187905294519316936323b872dd9360648083019491928390030190829087803b1580156104a357600080fd5b505af11580156104b7573d6000803e3d6000fd5b505050506040513d60208110156104cd57600080fd5b505115156104da57600080fd5b5050505050565b600054600160a060020a031633146104f857600080fd5b600160a060020a03166000908152600160208190526040909120805460ff199081169092179091169055565b600054600160a060020a0316331461053b57600080fd5b600160a060020a038116151561055057600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383169081179091556040517ffd653c27adb8a6ebd4e743bf07150fa9d69fe69b527423bbb5a17f8be5e300ec90600090a250565b60056020526000908152604090205481565b600054600160a060020a031633146105d057600080fd5b60065460008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152602481018690529051919093169263a9059cbb9260448083019360209390929083900390910190829087803b15801561064657600080fd5b505af115801561065a573d6000803e3d6000fd5b505050506040513d602081101561067057600080fd5b5051151561067d57600080fd5b50565b60035481565b600054600160a060020a0316331461069d57600080fd5b604051600160a060020a038216907f5c8e7e69f847105a89c85841feb3cff21f16ccb6dbe4d3601b60303c9f9f28ab90600090a2600160a060020a0316600090815260056020526040902060029055565b600054600160a060020a0316331461070557600080fd5b600160a060020a03166000908152600160208190526040909120805460ff19169091179055565b600280548290811061073a57fe5b600091825260209091200154600160a060020a0316905081565b600460209081526000928352604080842090915290825290205481565b606060028054806020026020016040519081016040528092919081815260200182805480156107c957602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116107ab575b5050505050905090565b60016020526000908152604090205460ff1681565b6000805481908190600160a060020a0316331461080457600080fd5b600092505b60025483101561093157600280548490811061082157fe5b6000918252602080832090910154600160a060020a03168083526005909152604090912054909250600114156109265750600160a060020a038116600090815260046020908152604080832060035484529091528120549081111561092657600654604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156108ef57600080fd5b505af1158015610903573d6000803e3d6000fd5b505050506040513d602081101561091957600080fd5b5051151561092657600080fd5b600190920191610809565b505060038054600101905550565b600054600160a060020a0316815600a165627a7a72305820da5be47f4595f63555e5f53500fe62d40bfe724e784475508e61bb83509ae6f80029000000000000000000000000082b013c5963b9a3f40b7ec86bf17aa65aa94637",
  "constructorArguments": "000000000000000000000000082b013c5963b9a3f40b7ec86bf17aa65aa94637"
}