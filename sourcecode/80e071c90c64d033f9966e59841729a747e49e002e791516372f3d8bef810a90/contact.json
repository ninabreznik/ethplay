{
  "address": "0xa7a5c03399f4739f4afa934bb9053c992b53d7a2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AICToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-01\n*/\n\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function divRemain(uint256 numerator, uint256 denominator) internal pure returns (uint256 quotient, uint256 remainder) {\n    quotient  = div(numerator, denominator);\n    remainder = sub(numerator, mul(denominator, quotient));\n  }\n}\n\n\n/**\n * @title Roles\n * @author Francisco Giordano (@frangio)\n * @dev Library for managing addresses assigned to a Role.\n * See RBAC.sol for example usage.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = true;\n  }\n\n  /**\n   * @dev remove an address' access to this role\n   */\n  function remove(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage role, address addr)\n    view\n    internal\n  {\n    require(has(role, addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage role, address addr)\n    view\n    internal\n    returns (bool)\n  {\n    return role.bearer[addr];\n  }\n}\n\n\n/**\n * @title RBAC (Role-Based Access Control)\n * @author Matt Condon (@Shrugs)\n * @dev Stores and provides setters and getters for roles and addresses.\n * Supports unlimited numbers of roles and addresses.\n * See //contracts/mocks/RBACMock.sol for an example of usage.\n * This RBAC method uses strings to key roles. It may be beneficial\n * for you to write your own implementation of this interface using Enums or similar.\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\n * to avoid typos.\n */\ncontract RBAC {\n  using Roles for Roles.Role;\n\n  mapping (string => Roles.Role) private roles;\n\n  event RoleAdded(address indexed operator, string role);\n  event RoleRemoved(address indexed operator, string role);\n  event RoleRemovedAll(string role);\n\n  /**\n   * @dev reverts if addr does not have role\n   * @param _operator address\n   * @param _role the name of the role\n   * // reverts\n   */\n  function checkRole(address _operator, string _role)\n    view\n    public\n  {\n    roles[_role].check(_operator);\n  }\n\n  /**\n   * @dev determine if addr has role\n   * @param _operator address\n   * @param _role the name of the role\n   * @return bool\n   */\n  function hasRole(address _operator, string _role)\n    view\n    public\n    returns (bool)\n  {\n    return roles[_role].has(_operator);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_operator, _role);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function removeRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].remove(_operator);\n    emit RoleRemoved(_operator, _role);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param _role the name of the role\n   */\n  function removeRoleAll(string _role)\n    internal\n  {\n    delete roles[_role];\n    emit RoleRemovedAll(_role);\n  }\n\n  /**\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n   * @param _role the name of the role\n   * // reverts\n   */\n  modifier onlyRole(string _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n\n  /**\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n   * @param _roles the names of the roles to scope access to\n   * // reverts\n   *\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n   *  see: https://github.com/ethereum/solidity/issues/2467\n   */\n  // modifier onlyRoles(string[] _roles) {\n  //     bool hasAnyRole = false;\n  //     for (uint8 i = 0; i < _roles.length; i++) {\n  //         if (hasRole(msg.sender, _roles[i])) {\n  //             hasAnyRole = true;\n  //             break;\n  //         }\n  //     }\n\n  //     require(hasAnyRole);\n\n  //     _;\n  // }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\n/**\n * @title Administrable\n * @dev The Admin contract defines a single Admin who can transfer the ownership \n * of a contract to a new address, even if he is not the owner. \n * A Admin can transfer his role to a new address. \n */\ncontract Administrable is Ownable, RBAC {\n  string public constant ROLE_LOCKUP = \"lockup\";\n  string public constant ROLE_MINT = \"mint\";\n\n  constructor () public {\n    addRole(msg.sender, ROLE_LOCKUP);\n    addRole(msg.sender, ROLE_MINT);\n  }\n\n  /**\n   * @dev Throws if called by any account that's not a Admin.\n   */\n  modifier onlyAdmin(string _role) {\n    checkRole(msg.sender, _role);\n    _;\n  }\n\n  modifier onlyOwnerOrAdmin(string _role) {\n    require(msg.sender == owner || isAdmin(msg.sender, _role));\n    _;\n  }\n\n  /**\n   * @dev getter to determine if address has Admin role\n   */\n  function isAdmin(address _addr, string _role)\n    public\n    view\n    returns (bool)\n  {\n    return hasRole(_addr, _role);\n  }\n\n  /**\n   * @dev add a admin role to an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function addAdmin(address _operator, string _role)\n    public\n    onlyOwner\n  {\n    addRole(_operator, _role);\n  }\n\n  /**\n   * @dev remove a admin role from an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function removeAdmin(address _operator, string _role)\n    public\n    onlyOwner\n  {\n    removeRole(_operator, _role);\n  }\n\n  /**\n   * @dev claim a admin role from an address\n   * @param _role the name of the role\n   */\n  function claimAdmin(string _role)\n    public\n    onlyOwner\n  {\n    removeRoleAll(_role);\n\n    addRole(msg.sender, _role);\n  }\n}\n\n\n/**\n * @title Lockable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Lockable is Administrable {\n\n  using SafeMath for uint256;\n\n  event Locked(address _granted, uint256 _amount, uint256 _expiresAt);\n  event UnlockedAll(address _granted);\n\n  /**\n  * @dev Lock defines a lock of token\n  */\n  struct Lock {\n    uint256 amount;\n    uint256 expiresAt;\n  }\n\n  // granted to locks;\n  mapping (address => Lock[]) public grantedLocks;\n  \n\n  /**\n   * @dev called by the owner to lock, triggers stopped state\n   */\n  function lock\n  (\n    address _granted, \n    uint256 _amount, \n    uint256 _expiresAt\n  ) \n    onlyOwnerOrAdmin(ROLE_LOCKUP) \n    public \n  {\n    require(_amount > 0);\n    require(_expiresAt > now);\n\n    grantedLocks[_granted].push(Lock(_amount, _expiresAt));\n\n    emit Locked(_granted, _amount, _expiresAt);\n  }\n\n  /**\n   * @dev called by the owner to unlock, returns to normal state\n   */\n  function unlock\n  (\n    address _granted\n  ) \n    onlyOwnerOrAdmin(ROLE_LOCKUP) \n    public \n  {\n    require(grantedLocks[_granted].length > 0);\n    \n    delete grantedLocks[_granted];\n    emit UnlockedAll(_granted);\n  }\n\n  function lockedAmountOf\n  (\n    address _granted\n  ) \n    public\n    view\n    returns(uint256)\n  {\n    require(_granted != address(0));\n    \n    uint256 lockedAmount = 0;\n    uint256 lockedCount = grantedLocks[_granted].length;\n    if (lockedCount > 0) {\n      Lock[] storage locks = grantedLocks[_granted];\n      for (uint i = 0; i < locks.length; i++) {\n        if (now < locks[i].expiresAt) {\n          lockedAmount = lockedAmount.add(locks[i].amount);\n        } \n      }\n    }\n\n    return lockedAmount;\n  }\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable  {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    uint256 totalSupply_;\n\n    /**\n    * @dev total number of tokens in exsitence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    function msgSender() \n        public\n        view\n        returns (address)\n    {\n        return msg.sender;\n    }\n\n    function transfer(\n        address _to, \n        uint256 _value\n    ) \n        public \n        returns (bool) \n    {\n        require(_to != address(0));\n        require(_to != msg.sender);\n        require(_value <= balances[msg.sender]);\n        \n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n}\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\ncontract BurnableToken is StandardToken {\n    \n    event Burn(address indexed burner, uint256 value);\n\n    /**\n    * @dev Burns a specific amount of tokens.\n    * @param _value The amount of token to be burned.\n    */\n    function burn(uint256 _value) \n        public \n    {\n        _burn(msg.sender, _value);\n    }\n\n    function _burn(address _who, uint256 _value) \n        internal \n    {\n        require(_value <= balances[_who]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n        \n        balances[_who] = balances[_who].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(_who, _value);\n        emit Transfer(_who, address(0), _value);\n    }\n}\n\n\n\ncontract MintableToken is StandardToken, Administrable {\n    event Mint(address indexed to, uint256 amount);\n    event MintStarted();\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    modifier cantMint() {\n        require(mintingFinished);\n        _;\n    }\n   \n    /**\n    * @dev Function to mint tokens\n    * @param _to The address that will receive the minted tokens.\n    * @param _amount The amount of tokens to mint\n    * @return A boolean that indicated if the operation was successful.\n    */\n    function mint(address _to, uint256 _amount) onlyOwnerOrAdmin(ROLE_MINT) canMint public returns (bool) {\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    /**\n     * @dev Function to start minting new tokens.\n     * @return True if the operation was successful. \n     */\n    function startMinting() onlyOwner cantMint public returns (bool) {\n        mintingFinished = false;\n        emit MintStarted();\n        return true;\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     * @return True if the operation was successful. \n     */\n    function finishMinting() onlyOwner canMint public returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n}\n\n\n\n\n/**\n * @title Lockable token\n * @dev ReliableTokenToken modified with lockable transfers.\n **/\ncontract ReliableToken is MintableToken, BurnableToken, Pausable, Lockable {\n\n  using SafeMath for uint256;\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotExceedLock(address _granted, uint256 _value) {\n    uint256 lockedAmount = lockedAmountOf(_granted);\n    uint256 balance = balanceOf(_granted);\n\n    require(balance > lockedAmount && balance.sub(lockedAmount) >= _value);\n    _;\n  }\n\n  function transfer\n  (\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    whenNotExceedLock(msg.sender, _value)\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferLocked\n  (\n    address _to, \n    uint256 _value,\n    uint256 _lockAmount,\n    uint256[] _expiresAtList\n  ) \n    public \n    whenNotPaused\n    whenNotExceedLock(msg.sender, _value)\n    onlyOwnerOrAdmin(ROLE_LOCKUP)\n    returns (bool) \n  {\n    require(_value >= _lockAmount);\n\n    uint256 lockCount = _expiresAtList.length;\n    if (lockCount > 0) {\n      (uint256 lockAmountEach, uint256 remainder) = _lockAmount.divRemain(lockCount);\n      if (lockAmountEach > 0) {\n        for (uint i = 0; i < lockCount; i++) {\n          if (i == (lockCount - 1) && remainder > 0)\n            lockAmountEach = lockAmountEach.add(remainder);\n\n          lock(_to, lockAmountEach, _expiresAtList[i]);  \n        }\n      }\n    }\n    \n    return transfer(_to, _value);\n  }\n\n  function transferFrom\n  (\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    whenNotExceedLock(_from, _value)\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function transferLockedFrom\n  (\n    address _from,\n    address _to, \n    uint256 _value,\n    uint256 _lockAmount,\n    uint256[] _expiresAtList\n  ) \n    public \n    whenNotPaused\n    whenNotExceedLock(_from, _value)\n    onlyOwnerOrAdmin(ROLE_LOCKUP)\n    returns (bool) \n  {\n    require(_value >= _lockAmount);\n\n    uint256 lockCount = _expiresAtList.length;\n    if (lockCount > 0) {\n      (uint256 lockAmountEach, uint256 remainder) = _lockAmount.divRemain(lockCount);\n      if (lockAmountEach > 0) {\n        for (uint i = 0; i < lockCount; i++) {\n          if (i == (lockCount - 1) && remainder > 0)\n            lockAmountEach = lockAmountEach.add(remainder);\n\n          lock(_to, lockAmountEach, _expiresAtList[i]);  \n        }\n      }\n    }\n\n    return transferFrom(_from, _to, _value);\n  }\n\n  function approve\n  (\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval\n  (\n    address _spender,\n    uint _addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval\n  (\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n\n  function () external payable \n  {\n    revert();\n  }\n}\n\n\ncontract BundableToken is ReliableToken {\n\n    /**\n    * @dev Transfers tokens to recipients multiply.\n    * @param _recipients address list of the recipients to whom received tokens \n    * @param _values the amount list of tokens to be transferred\n    */\n    function transferMultiply\n    (\n        address[] _recipients,\n        uint256[] _values\n    )\n        public\n        returns (bool)\n    {\n        uint length = _recipients.length;\n        require(length > 0);\n        require(length == _values.length);\n\n        for (uint i = 0; i < length; i++) {\n            require(transfer(\n                _recipients[i], \n                _values[i]\n            ));\n        }\n\n        return true;\n    }\n\n    /**\n    * @dev Transfers tokens held by timelock to recipients multiply.\n    * @param _recipients address list of the recipients to whom received tokens \n    * @param _values the amount list of tokens to be transferred\n    * #param _defaultExpiresAtList default release times\n    */\n    function transferLockedMultiply\n    (\n        address[] _recipients,\n        uint256[] _values,\n        uint256[] _lockAmounts,\n        uint256[] _defaultExpiresAtList\n    )\n        public\n        onlyOwnerOrAdmin(ROLE_LOCKUP)\n        returns (bool)\n    {\n        uint length = _recipients.length;\n        require(length > 0);\n        require(length == _values.length && length == _lockAmounts.length);\n        require(_defaultExpiresAtList.length > 0);\n\n        for (uint i = 0; i < length; i++) {\n            require(transferLocked(\n                _recipients[i], \n                _values[i], \n                _lockAmounts[i], \n                _defaultExpiresAtList\n            ));\n        }\n\n        return true;\n    }\n}\n\n\ncontract AICToken is BundableToken {\n\n  string public constant name = \"AICRYPTO\";\n  string public constant symbol = \"AIC\";\n  uint32 public constant decimals = 18;\n\n  uint256 public constant INITIAL_SUPPLY = 10000000000 * (10 ** uint256(decimals));\n\n  /**\n  * @dev Constructor that gives msg.sender all of existing tokens.\n  */\n  constructor() public \n  {\n    totalSupply_ = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n    emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"grantedLocks\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_LOCKUP\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_lockAmount\",\"type\":\"uint256\"},{\"name\":\"_expiresAtList\",\"type\":\"uint256[]\"}],\"name\":\"transferLockedFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_granted\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"_lockAmounts\",\"type\":\"uint256[]\"},{\"name\":\"_defaultExpiresAtList\",\"type\":\"uint256[]\"}],\"name\":\"transferLockedMultiply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_granted\",\"type\":\"address\"}],\"name\":\"lockedAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_lockAmount\",\"type\":\"uint256\"},{\"name\":\"_expiresAtList\",\"type\":\"uint256[]\"}],\"name\":\"transferLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"claimAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_MINT\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"msgSender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_granted\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_expiresAt\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"transferMultiply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_granted\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_expiresAt\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_granted\",\"type\":\"address\"}],\"name\":\"UnlockedAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleRemovedAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600560006101000a81548160ff0219169083151502179055506000600560016101000a81548160ff0219169083151502179055503480156200004757600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000d9336040805190810160405280600681526020017f6c6f636b75700000000000000000000000000000000000000000000000000000815250620001fc640100000000026401000000009004565b62000129336040805190810160405280600481526020017f6d696e7400000000000000000000000000000000000000000000000000000000815250620001fc640100000000026401000000009004565b601263ffffffff16600a0a6402540be40002600181905550601263ffffffff16600a0a6402540be400026000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef601263ffffffff16600a0a6402540be400026040518082815260200191505060405180910390a3620003a3565b6200028b826004836040518082805190602001908083835b6020831015156200023b578051825260208201915060208101905060208303925062000214565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020620003456401000000000262003d09179091906401000000009004565b8173ffffffffffffffffffffffffffffffffffffffff167fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b700489826040518080602001828103825283818151815260200191508051906020019080838360005b8381101562000306578082015181840152602081019050620002e9565b50505050905090810190601f168015620003345780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b613de680620003b36000396000f3006080604052600436106101ee576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b146101f357806306fdde0314610222578063095ea7b3146102b25780630988ca8c146103175780630ab1b3c1146103a057806316b0fc55146104085780631728fb461461049157806318160ddd146105215780631bea69e31461054c578063217fe6c6146105ed57806323b872dd1461068e578063280f958e146107135780632f6c493c146107e55780632ff2e9dc14610828578063313ce567146108535780633f4ba83a1461088a57806340c10f19146108a157806342966c6814610906578063458d96bb146109335780635c975abb14610a7a5780636618846314610aa957806370a0823114610b0e578063715018a614610b655780637d64bcb414610b7c5780638456cb5914610bab5780638b9d689914610bc25780638da5cb5b14610c1957806394d5539d14610c7057806395d89b4114610d225780639a65ea2614610db2578063a9059cbb14610de1578063d16856ca14610e46578063d5cfa94e14610ecf578063d68d961a14610f38578063d737d0c714610fc8578063d73dd6231461101f578063dd62ed3e14611084578063e2ab691d146110fb578063f2fde38b14611152578063f493c84814611195575b600080fd5b3480156101ff57600080fd5b50610208611256565b604051808215151515815260200191505060405180910390f35b34801561022e57600080fd5b50610237611269565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561027757808201518184015260208101905061025c565b50505050905090810190601f1680156102a45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102be57600080fd5b506102fd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112a2565b604051808215151515815260200191505060405180910390f35b34801561032357600080fd5b5061039e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506112d2565b005b3480156103ac57600080fd5b506103eb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611353565b604051808381526020018281526020019250505060405180910390f35b34801561041457600080fd5b5061048f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611393565b005b34801561049d57600080fd5b506104a66113fd565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104e65780820151818401526020810190506104cb565b50505050905090810190601f1680156105135780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561052d57600080fd5b50610536611436565b6040518082815260200191505060405180910390f35b34801561055857600080fd5b506105d3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611440565b604051808215151515815260200191505060405180910390f35b3480156105f957600080fd5b50610674600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611454565b604051808215151515815260200191505060405180910390f35b34801561069a57600080fd5b506106f9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114db565b604051808215151515815260200191505060405180910390f35b34801561071f57600080fd5b506107cb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050611558565b604051808215151515815260200191505060405180910390f35b3480156107f157600080fd5b50610826600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061172c565b005b34801561083457600080fd5b5061083d6118d2565b6040518082815260200191505060405180910390f35b34801561085f57600080fd5b506108686118e7565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b34801561089657600080fd5b5061089f6118ec565b005b3480156108ad57600080fd5b506108ec600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506119ac565b604051808215151515815260200191505060405180910390f35b34801561091257600080fd5b5061093160048036038101908080359060200190929190505050611bda565b005b34801561093f57600080fd5b50610abe7565b604051808215151515815260200191505060405180910390f35b348015610a8657600080fd5b50610a8f611d52565b604051808215151515815260200191505060405180910390f35b348015610ab557600080fd5b50610af4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611d65565b604051808215151515815260200191505060405180910390f35b348015610b1a57600080fd5b50610b4f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d95565b6040518082815260200191505060405180910390f35b348015610b7157600080fd5b50610b7a611ddd565b005b348015610b8857600080fd5b50610b91611ee2565b604051808215151515815260200191505060405180910390f35b348015610bb757600080fd5b50610bc0611faa565b005b348015610bce57600080fd5b50610c03600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061206b565b6040518082815260200191505060405180910390f35b348015610c2557600080fd5b50610c2e6121c8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610c7c57600080fd5b50610d08600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506121ee565b604051808215151515815260200191505060405180910390f35b348015610d2e57600080fd5b50610d376123c0565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d77578082015181840152602081019050610d5c565b50505050905090810190601f168015610da45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610dbe57600080fd5b50610dc76123f9565b604051808215151515815260200191505060405180910390f35b348015610ded57600080fd5b50610e2c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506124c0565b604051808215151515815260200191505060405180910390f35b348015610e5257600080fd5b50610ecd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061253b565b005b348015610edb57600080fd5b50610f36600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506125a5565b005b348015610f4457600080fd5b50610f4d612617565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610f8d578082015181840152602081019050610f72565b50505050905090810190601f168015610fba5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610fd457600080fd5b50610fdd612650565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561102b57600080fd5b5061106a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612658565b604051808215151515815260200191505060405180910390f35b34801561109057600080fd5b506110e5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612688565b6040518082815260200191505060405180910390f35b34801561110757600080fd5b50611150600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505061270f565b005b34801561115e57600080fd5b50611193600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506128de565b005b3480156111a157600080fd5b5061123c6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050612946565b604051808215151515815260200191505060405180910390f35b600560009054906101000a900460ff1681565b6040805190810160405280600881526020017f414943525950544f00000000000000000000000000000000000000000000000081525081565b6000600560019054906101000a900460ff161515156112c057600080fd5b6112ca83836129d6565b905092915050565b61134f826004836040518082805190602001908083835b60208310151561130e57805182526020820191506020810190506020830392506112e9565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020612ac890919063ffffffff16565b5050565b60066020528160005260406000208181548110151561136e57fe5b9060005260206000209060020201600091509150508060000154908060010154905082565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113ef57600080fd5b6113f98282612ae1565b5050565b6040805190810160405280600681526020017f6c6f636b7570000000000000000000000000000000000000000000000000000081525081565b6000600154905090565b600061144c8383611454565b905092915050565b60006114d3836004846040518082805190602001908083835b602083101515611492578051825260208201915060208101905060208303925061146d565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020612c1590919063ffffffff16565b905092915050565b6000600560019054906101000a900460ff161515156114f957600080fd5b83826000806115078461206b565b915061151284611d95565b905081811180156115355750826115328383612c6e90919063ffffffff16565b10155b151561154057600080fd5b61154b888888612c87565b9450505050509392505050565b6000806000806000600560019054906101000a900460ff1615151561157c57600080fd5b898860008061158a8461206b565b915061159584611d95565b905081811180156115b85750826115b58383612c6e90919063ffffffff16565b10155b15156115c357600080fd5b6040805190810160405280600681526020017f6c6f636b75700000000000000000000000000000000000000000000000000000815250600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061165b575061165a3382611440565b5b151561166657600080fd5b8b8d1015151561167557600080fd5b8a519850600089111561170d57611695898d61304190919063ffffffff16565b97509750600088111561170c57600095505b8886101561170b5760018903861480156116c15750600087115b156116dc576116d9878961306c90919063ffffffff16565b97505b6116fe8e898d898151811015156116ef57fe5b9060200190602002015161270f565b85806001019650506116a7565b5b5b6117188f8f8f6114db565b995050505050505050505095945050505050565b6040805190810160405280600681526020017f6c6f636b75700000000000000000000000000000000000000000000000000000815250600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806117c457506117c33382611440565b5b15156117cf57600080fd5b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905011151561182057600080fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061186b9190613d67565b7f500b38ce040ec2c9a2f10695ec52a72efd3b83b3366d10c8a9fb082f528b32fc82604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b601263ffffffff16600a0a6402540be4000281565b601281565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561194857600080fd5b600560019054906101000a900460ff16151561196357600080fd5b6000600560016101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60006040805190810160405280600481526020017f6d696e7400000000000000000000000000000000000000000000000000000000815250600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611a465750611a453382611440565b5b1515611a5157600080fd5b600560009054906101000a900460ff16151515611a6d57600080fd5b611a828360015461306c90919063ffffffff16565b600181905550611ad9836000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461306c90919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885846040518082815260200191505060405180910390a28373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b611be43382613088565b50565b60008060006040805190810160405280600681526020017f6c6f636b75700000000000000000000000000000000000000000000000000000815250600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611c845750611c833382611440565b5b1515611c8f57600080fd5b87519250600083111515611ca257600080fd5b865183148015611cb25750855183145b1515611cbd57600080fd5b60008551111515611ccd57600080fd5b600091505b82821015611d4357611d2b8883815181101515611ceb57fe5b906020019060200201518884815181101515611d0357fe5b906020019060200201518885815181101515611d1b57fe5b90602001906020020151886121ee565b1515611d3657600080fd5b8180600101925050611cd2565b60019350505050949350505050565b600560019054906101000a900460ff1681565b6000600560019054906101000a900460ff16151515611d8357600080fd5b611d8d838361323b565b905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e3957600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a26000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f4057600080fd5b600560009054906101000a900460ff16151515611f5c57600080fd5b6001600560006101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561200657600080fd5b600560019054906101000a900460ff1615151561202257600080fd5b6001600560016101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b60008060008060008073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141515156120ae57600080fd5b60009350600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050925060008311156121bc57600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209150600090505b81805490508110156121bb57818181548110151561216057fe5b9060005260206000209060020201600101544210156121ae576121ab828281548110151561218a57fe5b9060005260206000209060020201600001548561306c90919063ffffffff16565b93505b8080600101915050612146565b5b83945050505050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000806000600560019054906101000a900460ff1615151561221257600080fd5b33886000806122208461206b565b915061222b84611d95565b9050818111801561224e57508261224b8383612c6e90919063ffffffff16565b10155b151561225957600080fd5b6040805190810160405280600681526020017f6c6f636b75700000000000000000000000000000000000000000000000000000815250600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806122f157506122f03382611440565b5b15156122fc57600080fd5b8b8d1015151561230b57600080fd5b8a51985060008911156123a35761232b898d61304190919063ffffffff16565b9750975060008811156123a257600095505b888610156123a15760018903861480156123575750600087115b156123725761236f878961306c90919063ffffffff16565b97505b6123948e898d8981518110151561238557fe5b9060200190602002015161270f565b858060010196505061233d565b5b5b6123ad8e8e6124c0565b9950505050505050505050949350505050565b6040805190810160405280600381526020017f414943000000000000000000000000000000000000000000000000000000000081525081565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561245757600080fd5b600560009054906101000a900460ff16151561247257600080fd5b6000600560006101000a81548160ff0219169083151502179055507f452a344f03203071e1daf66e007976c85cb2380deabf1c91f3c4fb1fca41204960405160405180910390a16001905090565b6000600560019054906101000a900460ff161515156124de57600080fd5b33826000806124ec8461206b565b91506124f784611d95565b9050818111801561251a5750826125178383612c6e90919063ffffffff16565b10155b151561252557600080fd5b61252f87876134cc565b94505050505092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561259757600080fd5b6125a18282613726565b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561260157600080fd5b61260a8161385a565b6126143382613726565b50565b6040805190810160405280600481526020017f6d696e740000000000000000000000000000000000000000000000000000000081525081565b600033905090565b6000600560019054906101000a900460ff1615151561267657600080fd5b6126808383613965565b905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6040805190810160405280600681526020017f6c6f636b75700000000000000000000000000000000000000000000000000000815250600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806127a757506127a63382611440565b5b15156127b257600080fd5b6000831115156127c157600080fd5b42821115156127cf57600080fd5b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040805190810160405280858152602001848152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000155602082015181600101555050507fd4665e3049283582ba6f9eba07a5b3e12dab49e02da99e8927a47af5d134bea5848484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a150505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561293a57600080fd5b61294381613b61565b50565b60008060008451915060008211151561295e57600080fd5b83518214151561296d57600080fd5b600090505b818110156129ca576129b2858281518110151561298b57fe5b9060200190602002015185838151811015156129a357fe5b906020019060200201516124c0565b15156129bd57600080fd5b8080600101915050612972565b60019250505092915050565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b612ad28282612c15565b1515612add57600080fd5b5050565b612b5e826004836040518082805190602001908083835b602083101515612b1d5780518252602082019150602081019050602083039250612af8565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020613c5d90919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167fd211483f91fc6eff862467f8de606587a30c8fc9981056f051b897a418df803a826040518080602001828103825283818151815260200191508051906020019080838360005b83811015612bd7578082015181840152602081019050612bbc565b50505050905090810190601f168015612c045780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000828211151515612c7c57fe5b818303905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515612cc457600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515612d1157600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515612d9c57600080fd5b612ded826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c6e90919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612e80826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461306c90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612f5182600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c6e90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60008061304e8484613cbb565b91506130638461305e8585613cd1565b612c6e565b90509250929050565b6000818301905082811015151561307f57fe5b80905092915050565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111515156130d557600080fd5b613126816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c6e90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061317d81600154612c6e90919063ffffffff16565b6001819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083111561334c576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506133e0565b61335f8382612c6e90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561350957600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561354457600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561359157600080fd5b6135e2826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c6e90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613675826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461306c90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6137a3826004836040518082805190602001908083835b602083101515613762578051825260208201915060208101905060208303925061373d565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020613d0990919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b700489826040518080602001828103825283818151815260200191508051906020019080838360005b8381101561381c578082015181840152602081019050613801565b50505050905090810190601f1680156138495780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b6004816040518082805190602001908083835b602083101515613892578051825260208201915060208101905060208303925061386d565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020507f5b347c19ed09a49457a8be75adf693f4316fb2065b4f584889cf1700ce557e1e816040518080602001828103825283818151815260200191508051906020019080838360005b8381101561392857808201518184015260208101905061390d565b50505050905090810190601f1680156139555780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b60006139f682600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461306c90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515613b9d57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008183811515613cc857fe5b04905092915050565b600080831415613ce45760009050613d03565b8183029050818382811515613cf557fe5b04141515613cff57fe5b8090505b92915050565b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b5080546000825560020290600052602060002090810190613d889190613d8b565b50565b613db791905b80821115613db357600080820160009055600182016000905550600201613d91565b5090565b905600a165627a7a7230582089858d8bc5e8e062e8f033acb62d4eee38b9a6268cc64608de0151140b418d9a0029"
}