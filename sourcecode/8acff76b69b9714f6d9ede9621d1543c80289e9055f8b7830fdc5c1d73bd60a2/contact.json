{
  "address": "0x3670a029a6ce9be3bd62c76853e747e65ddf6431",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NTA3D",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-10\n*/\n\npragma solidity ^0.4.25;\n\ncontract NTA3DEvents {\n\n    event onNewName (\n        uint256 indexed playerID,\n        address indexed playerAddress,\n        bytes32 indexed playerName,\n        uint256 timeStamp\n    );\n\n    event onWithdraw\n    (\n        uint256 indexed playerID,\n        address playerAddress,\n        bytes32 playerName,\n        uint256 ethOut,\n        uint256 timeStamp\n    );\n\n    event onBuyKey\n    (\n        uint256 indexed playerID,\n        address indexed playerAddress,\n        bytes32 indexed playerName,\n        uint256 roundID,\n        uint256 ethIn,\n        uint256 keys,\n        uint256 timeStamp\n    );\n\n    event onBuyCard\n    (\n        uint256 indexed playerID,\n        address indexed playerAddress,\n        bytes32 indexed playerName,\n        uint256 cardID,\n        uint256 ethIn,\n        uint256 timeStamp\n    );\n\n    event onRoundEnd\n    (\n        address winnerAddr,\n        bytes32 winnerName,\n        uint256 roundID,\n        uint256 amountWon,\n        uint256 newPot,\n        uint256 timeStamp\n    );\n\n    event onDrop\n    (\n        address dropwinner,\n        bytes32 winnerName,\n        uint256 roundID,\n        uint256 droptype, //0:smalldrop 1:bigdop\n        uint256 win,\n        uint256 timeStamp\n    );\n\n}\n\ncontract NTA3D is NTA3DEvents {\n    using SafeMath for *;\n    using NameFilter for string;\n    using NTA3DKeysCalc for uint256;\n\n    string constant public name = \"No Tricks Allow 3D\";\n    string constant public symbol = \"NTA3D\";\n    bool activated_;\n    address admin;\n    uint256 constant private rndStarts = 12 hours; // ??need to be continue\n    uint256 constant private rndPerKey = 15 seconds; // every key increase seconds\n    uint256 constant private rndMax = 12 hours;  //max count down time;\n    uint256 constant private cardValidity = 1 hours; //stock cards validity\n    uint256 constant private cardPrice = 0.05 ether; //stock cards validity\n    uint256 constant private DIVIDE = 1000; // common divide tool\n\n    uint256 constant private smallDropTrigger = 100 ether;\n    uint256 constant private bigDropTrigger = 300000 * 1e18;\n    uint256 constant private keyPriceTrigger = 50000 * 1e18;\n    uint256 constant private keyPriceFirst = 0.0005 ether;\n    uint256 constant private oneOffInvest1 = 0.1 ether;//VIP 1\n    uint256 constant private oneOffInvest2 = 1 ether;// VIP 2\n\n    //uint256 public airDropTracker_ = 0;\n    uint256 public rID;    // round id number / total rounds that have happened\n    uint256 public pID;    // total players\n\n    //player map data\n    mapping (address => uint256) public pIDxAddr; // get pid by address\n    mapping (bytes32 => uint256) public pIDxName; // get name by pid\n    mapping (uint256 => NTAdatasets.Player) public pIDPlayer; // get player struct by pid\\\n    mapping (uint256 => mapping (uint256 => NTAdatasets.PlayerRound)) public pIDPlayerRound; // pid => rid => playeround\n\n    //stock cards\n    mapping (uint256 => NTAdatasets.Card) cIDCard; //get card by cID\n    address cardSeller;\n\n    //team map data\n    //address gameFundsAddr = 0xFD7A82437F7134a34654D7Cb8F79985Df72D7076;\n    address[11] partner;\n    address to06;\n    address to04;\n    address to20A;\n    address to20B;\n    mapping (address => uint256) private gameFunds; // game develeopment get 5% funds\n    //uint256 private teamFee;    // team Fee 5%\n\n    //round data\n    mapping (uint256 => NTAdatasets.Round) public rIDRound;   // round data\n\n    // team dividens\n    mapping (uint256 => NTAdatasets.Deposit) public deposit;\n    mapping (uint256 => NTAdatasets.PotSplit) public potSplit;\n\n    constructor() public {\n\n        //constructor\n        activated_ = false;\n        admin = msg.sender;\n        // Team allocation structures\n        // 0 = BISHOP\n        // 1 = ROOK\n\n        // BISHOP team: ==> |46% to all, 17% to winnerPot, 5% to develop funds, 5% to teamfee, 10% to cards,\n        //                  |7% to fisrt degree invatation\n        //                  |3% to second degree invatation, 2% to big airdrop, 5% to small airdrop\n        deposit[0] = NTAdatasets.Deposit(460, 170, 50, 50, 100, 100, 20, 50);\n        // ROOK team:   ==> |20% to all, 43% to winnerPot, 5% to develop funds, 5% to teamfee, 10% to cards,\n        //                  |7% to fisrt degree invatation\n        //                  |3% to second degree invatation, 2% to big airdrop, 5% to small airdrop\n        deposit[1] = NTAdatasets.Deposit(200, 430, 50, 50, 100, 100, 20, 50);\n\n        // potSplit:    ==> |20% to all, 45% to lastwinner, 5% to inviter 1st, 3% to inviter 2nd, 2% to inviter 3rd,\n        //                  |8% to key buyer 1st, 5% to key buyer 2nd, 2% to key buyer 3rd, 10% to next round\n        potSplit[0] = NTAdatasets.PotSplit(200, 450, 50, 30, 20, 80, 50, 20, 100);\n        potSplit[1] = NTAdatasets.PotSplit(200, 450, 50, 30, 20, 80, 50, 20, 100);\n        //partner list \n        //iniailize in active function\n        //develeopment\n        to06 = 0x9B53CC857cD9DD5EbE6bc07Bde67D8CE4076345f;\n        to04 = 0x5835a72118c0C784203B8d39936A0875497B6eCa;\n        to20A = 0xEc2441D3113fC2376cd127344331c0F1b959Ce1C;\n        to20B = 0xd1Dac908c97c0a885e9B413a84ACcC0010C002d2;\n        \n        //card\n        cardSeller = 0xeE4f032bdB0f9B51D6c7035d3DEFfc217D91225C;\n    }\n\n//==============================================================================\n//\n//    safety checks\n//==============================================================================\n    //tested\n    modifier isActivated() {\n        require(activated_ == true, \"its not ready yet\");\n        _;\n    }\n\n    /**\n     * @dev prevents contracts from interacting with fomo3d\n     */\n    //tested\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        _;\n    }\n    //tested\n    modifier isAdmin() {require(msg.sender == admin, \"its can only be call by admin\");_;}\n\n    /**\n     * @dev sets boundaries for incoming tx\n     */\n    //tested\n    modifier isWithinLimits(uint256 _eth) {\n        require(_eth >= 1000000000, \"pocket lint: not a valid currency\");\n        require(_eth <= 100000000000000000000000, \"no vitalik, no\");\n        _;\n    }\n\n//==============================================================================\n//\n//    admin functions\n//==============================================================================\n    //tested\n    function active() isAdmin() public {\n        activated_ = true;\n        partner[0] = 0xE27Aa5E7D8906779586CfB9DbA2935BDdd7c8210;\n        partner[1] = 0xD4638827Dc486cb59B5E5e47955059A160BaAE13;\n        partner[2] = 0xa088c667591e04cC78D6dfA3A392A132dc5A7f9d;\n        partner[3] = 0xed38deE26c751ff575d68D9Bf93C312e763f8F87;\n        partner[4] = 0x42A7B62f71b7778279DA2639ceb5DD6ee884f905;\n        partner[5] = 0xd471409F3eFE9Ca24b63855005B08D4548742a5b;\n        partner[6] = 0x41c9F005eD19C2B620152f5562D26029b32078B6;\n        partner[7] = 0x11b85bc860A6C38fa7fe6f54f18d350eF5f2787b;\n        partner[8] = 0x11a7c5E7887F2C34356925275882D4321a6B69A8;\n        partner[9] = 0xB5754c7bD005b6F25e1FDAA5f94b2b71e6eA260f;\n        partner[10] = 0x6fbC15cF6d0B05280E99f753E45B631815715E99;\n    }\n    //tested\n    function startFirstRound() isAdmin() isActivated() public {\n        //must not open before\n        require(rID == 0);\n        newRound(0);\n    }\n\n    function teamWithdraw() public\n    isHuman()\n    isActivated()\n    {\n        uint256 _temp;\n        address to = msg.sender;\n        require(gameFunds[to] != 0, \"you dont have funds\");\n        _temp = gameFunds[to];\n        gameFunds[to] = 0;\n        to.transfer(_temp);\n    }\n\n    function getTeamFee(address _addr)\n    public\n    view\n    returns(uint256) {\n        return gameFunds[_addr];\n    }\n\n    function getScore(address _addr)\n    public\n    view\n    isAdmin()\n    returns(uint256) {\n        uint256 _pID = pIDxAddr[_addr];\n        if(_pID == 0 ) return 0;\n        else return pIDPlayerRound[_pID][rID].score;\n    }\n\n//==============================================================================\n//\n//    player functions\n//==============================================================================\n\n    //emergency buy uses BISHOP team to buy keys\n    function()\n    isActivated()\n    isHuman()\n    isWithinLimits(msg.value)\n    public\n    payable\n    {\n        //fetch player\n        require(rID != 0, \"No round existed yet\");\n        uint256 _pID = managePID(0);\n        //buy key\n        buyCore(_pID, 0);\n    }\n\n    // buy with ID: inviter use pID to invate player to buy like \"www.NTA3D.io/?id=101\"\n    function buyXid(uint256 _team,uint256 _inviter)\n    isActivated()\n    isHuman()\n    isWithinLimits(msg.value)\n    public\n    payable\n    {\n        require(rID != 0, \"No round existed yet\");\n        uint256 _pID = managePID(_inviter);\n        if (_team < 0 || _team > 1 ) {\n            _team = 0;\n        }\n        buyCore(_pID, _team);\n    }\n\n    // buy with ID: inviter use pID to invate player to buy like \"www.NTA3D.io/?n=obama\"\n    function buyXname(uint256 _team,string _invName)\n    isActivated()\n    isHuman()\n    isWithinLimits(msg.value)\n    public\n    payable\n    {\n        require(rID != 0, \"No round existed yet\");\n        bytes32 _name = _invName.nameFilter();\n        uint256 _invPID = pIDxName[_name];\n        uint256 _pID = managePID(_invPID);\n        if (_team < 0 || _team > 1 ) {\n            _team = 0;\n        }\n        buyCore(_pID, _team);\n    }\n\n    function buyCardXname(uint256 _cID, string _invName)\n    isActivated()\n    isHuman()\n    isWithinLimits(msg.value)\n    public\n    payable {\n        uint256 _value = msg.value;\n        uint256 _now = now;\n        require(_cID < 20, \"only has 20 cards\");\n        require(_value == cardPrice, \"the card cost 0.05 ether\");\n        require(cIDCard[_cID].owner == 0 || (cIDCard[_cID].buyTime + cardValidity) < _now, \"card is in used\");\n        bytes32 _name = _invName.nameFilter();\n        uint256 _invPID = pIDxName[_name];\n        uint256 _pID = managePID(_invPID);\n        for (uint i = 0; i < 20; i++) {\n            require(_pID != cIDCard[i].owner, \"you already registed a card\");\n        }\n        gameFunds[cardSeller] = gameFunds[cardSeller].add(_value);\n        cIDCard[_cID].addr = msg.sender;\n        cIDCard[_cID].owner = _pID;\n        cIDCard[_cID].buyTime = _now;\n        cIDCard[_cID].earnings = 0;\n        emit onBuyCard(_pID, pIDPlayer[_pID].addr, pIDPlayer[_pID].name, _cID, _value, now);\n    }\n\n    function buyCardXid(uint256 _cID, uint256 _inviter)\n    isActivated()\n    isHuman()\n    isWithinLimits(msg.value)\n    public\n    payable {\n        uint256 _value = msg.value;\n        uint256 _now = now;\n        require(_cID < 20, \"only has 20 cards\");\n        require(_value == cardPrice, \"the card cost 0.05 ether\");\n        require(cIDCard[_cID].owner == 0 || (cIDCard[_cID].buyTime + cardValidity) < _now, \"card is in used\");\n        uint256 _pID = managePID(_inviter);\n        for (uint i = 0; i < 20; i++) {\n            require(_pID != cIDCard[i].owner, \"you already registed a card\");\n        }\n        gameFunds[cardSeller] = gameFunds[cardSeller].add(_value);\n        cIDCard[_cID].addr = msg.sender;\n        cIDCard[_cID].owner = _pID;\n        cIDCard[_cID].buyTime = _now;\n        cIDCard[_cID].earnings = 0;\n        emit onBuyCard(_pID, pIDPlayer[_pID].addr, pIDPlayer[_pID].name, _cID, _value, now);\n    }\n\n\n    // regist a name\n    function registNameXid(string _nameString, uint256 _inviter)\n    isActivated()\n    isHuman()\n    public {\n        bytes32 _name = _nameString.nameFilter();\n        uint256 temp = pIDxName[_name];\n        require(temp == 0, \"name already regist\");\n        uint256 _pID = managePID(_inviter);\n        pIDxName[_name] = _pID;\n        pIDPlayer[_pID].name = _name;\n        //emit\n        emit onNewName(_pID, pIDPlayer[_pID].addr, pIDPlayer[_pID].name, now);\n    }\n\n    function registNameXname(string _nameString, string _inviterName)\n    isActivated()\n    isHuman()\n    public {\n        bytes32 _name = _nameString.nameFilter();\n        uint256 temp = pIDxName[_name];\n        require(temp == 0, \"name already regist\");\n        bytes32 _invName = _inviterName.nameFilter();\n        uint256 _invPID = pIDxName[_invName];\n        uint256 _pID = managePID(_invPID);\n        pIDxName[_name] = _pID;\n        pIDPlayer[_pID].name = _name;\n        //emit\n        emit onNewName(_pID, pIDPlayer[_pID].addr, pIDPlayer[_pID].name, now);\n    }\n\n    function withdraw()\n    isActivated()\n    isHuman()\n    public {\n        // setup local rID\n        uint256 _rID = rID;\n        // grab time\n        uint256 _now = now;\n        uint256 _pID = pIDxAddr[msg.sender];\n        require(_pID != 0, \"cant find user\");\n        uint256 _eth = 0;\n        if (rIDRound[_rID].end < _now && rIDRound[_rID].ended == false) {\n            rIDRound[_rID].ended = true;\n            endRound();\n        }\n        // get their earnings\n        _eth = withdrawEarnings(_pID);\n        // gib moni\n        if (_eth > 0)\n            pIDPlayer[_pID].addr.transfer(_eth);\n        //emit\n        emit onWithdraw(_pID, pIDPlayer[_pID].addr, pIDPlayer[_pID].name, _eth, now);\n    }\n//==============================================================================\n//\n//    view functions\n//==============================================================================\n    /**\n     * return the price buyer will pay for next 1 individual key.\n     * @return price for next key bought (in wei format)\n     */\n     //tested\n    function getBuyPrice(uint256 _key)\n    public\n    view\n    returns(uint256) {\n        // setup local rID\n        uint256 _rID = rID;\n        // grab time\n        uint256 _now = now;\n        uint256 _keys = rIDRound[_rID].team1Keys + rIDRound[_rID].team2Keys;\n        // round is active\n        if (rIDRound[_rID].end >= _now || (rIDRound[_rID].end < _now && rIDRound[_rID].leadPID == 0))\n            return _keys.ethRec(_key * 1e18);\n        else\n            return keyPriceFirst;\n    }\n\n    /**\n     * @dev returns time left.  dont spam this, you'll ddos yourself from your node\n     * @return time left in seconds\n     */\n     //tested\n    function getTimeLeft()\n    public\n    view\n    returns(uint256) {\n        // setup local rID\n        uint256 _rID = rID;\n        // grab time\n        uint256 _now = now;\n\n        if (rIDRound[_rID].end >= _now)\n            return (rIDRound[_rID].end.sub(_now));\n        else\n            return 0;\n    }\n\n    //tested\n    function getPlayerVaults()\n    public\n    view\n    returns(uint256, uint256, uint256, uint256, uint256) {\n        // setup local rID\n        uint256 _rID = rID;\n        uint256 _now = now;\n        uint256 _pID = pIDxAddr[msg.sender];\n        if (_pID == 0)\n            return (0, 0, 0, 0, 0);\n        uint256 _last = pIDPlayer[_pID].lrnd;\n        uint256 _inv = pIDPlayerRound[_pID][_last].inv;\n        uint256 _invMask = pIDPlayerRound[_pID][_last].invMask;\n        // if round has ended.  but round end has not been run (so contract has not distributed winnings)\n        if (rIDRound[_rID].end < _now && rIDRound[_rID].ended == false && rIDRound[_rID].leadPID != 0) {\n            // if player is winner\n            if (rIDRound[_rID].leadPID == _pID)\n                return (\n                    (pIDPlayer[_pID].win).add((rIDRound[_rID].pot).mul(45) / 100),\n                    pIDPlayer[_pID].gen.add(calcUnMaskedEarnings(_pID, pIDPlayer[_pID].lrnd)),\n                    pIDPlayer[_pID].inv.add(_inv).sub0(_invMask),\n                    pIDPlayer[_pID].tim.add(calcTeamEarnings(_pID, pIDPlayer[_pID].lrnd)),\n                    pIDPlayer[_pID].crd\n                );\n            else\n                return (\n                    pIDPlayer[_pID].win,\n                    pIDPlayer[_pID].gen.add(calcUnMaskedEarnings(_pID, pIDPlayer[_pID].lrnd)),\n                    pIDPlayer[_pID].inv.add(_inv).sub0(_invMask),\n                    pIDPlayer[_pID].tim.add(calcTeamEarnings(_pID, pIDPlayer[_pID].lrnd)),\n                    pIDPlayer[_pID].crd\n                );\n        } else {\n             return (\n                    pIDPlayer[_pID].win,\n                    pIDPlayer[_pID].gen.add(calcUnMaskedEarnings(_pID, pIDPlayer[_pID].lrnd)),\n                    pIDPlayer[_pID].inv.add(_inv).sub0(_invMask),\n                    pIDPlayer[_pID].tim.add(calcTeamEarnings(_pID, pIDPlayer[_pID].lrnd)),\n                    pIDPlayer[_pID].crd\n                );\n        }\n    }\n\n    function getCurrentRoundInfo()\n    public\n    view\n    returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256, address, bytes32, uint256, uint256, uint256) {\n        // setup local rID\n        uint256 _rID = rID;\n        return(_rID,\n            rIDRound[_rID].team1Keys + rIDRound[_rID].team2Keys,    //total key\n            rIDRound[_rID].eth,      //total eth\n            rIDRound[_rID].strt,     //start time\n            rIDRound[_rID].end,      //end time\n            rIDRound[_rID].pot,      //last winer pot\n            rIDRound[_rID].leadPID,  //current last player\n            pIDPlayer[rIDRound[_rID].leadPID].addr, //cureest last player address\n            pIDPlayer[rIDRound[_rID].leadPID].name, //cureest last player name\n            rIDRound[_rID].smallDrop,\n            rIDRound[_rID].bigDrop,\n            rIDRound[_rID].teamPot   //teampot\n            );\n    }\n\n    function getRankList()\n    public\n    view\n            //invitetop3   amout      keyTop3      key\n    returns (address[3], uint256[3], bytes32[3], address[3], uint256[3], bytes32[3]) {\n        uint256 _rID = rID;\n        address[3] memory inv;\n        address[3] memory key;\n        bytes32[3] memory invname;\n        uint256[3] memory invRef;\n        uint256[3] memory keyamt;\n        bytes32[3] memory keyname;\n        inv[0] = pIDPlayer[rIDRound[_rID].invTop3[0]].addr;\n        inv[1] = pIDPlayer[rIDRound[_rID].invTop3[1]].addr;\n        inv[2] = pIDPlayer[rIDRound[_rID].invTop3[2]].addr;\n        invRef[0] = pIDPlayerRound[rIDRound[_rID].invTop3[0]][_rID].inv;\n        invRef[1] = pIDPlayerRound[rIDRound[_rID].invTop3[1]][_rID].inv;\n        invRef[2] = pIDPlayerRound[rIDRound[_rID].invTop3[2]][_rID].inv;\n        invname[0] = pIDPlayer[rIDRound[_rID].invTop3[0]].name;\n        invname[1] = pIDPlayer[rIDRound[_rID].invTop3[1]].name;\n        invname[2] = pIDPlayer[rIDRound[_rID].invTop3[2]].name;\n\n        key[0] = pIDPlayer[rIDRound[_rID].keyTop3[0]].addr;\n        key[1] = pIDPlayer[rIDRound[_rID].keyTop3[1]].addr;\n        key[2] = pIDPlayer[rIDRound[_rID].keyTop3[2]].addr;\n        keyamt[0] = pIDPlayerRound[rIDRound[_rID].keyTop3[0]][_rID].team1Keys + pIDPlayerRound[rIDRound[_rID].keyTop3[0]][_rID].team2Keys;\n        keyamt[1] = pIDPlayerRound[rIDRound[_rID].keyTop3[1]][_rID].team1Keys + pIDPlayerRound[rIDRound[_rID].keyTop3[1]][_rID].team2Keys;\n        keyamt[2] = pIDPlayerRound[rIDRound[_rID].keyTop3[2]][_rID].team1Keys + pIDPlayerRound[rIDRound[_rID].keyTop3[2]][_rID].team2Keys;\n        keyname[0] = pIDPlayer[rIDRound[_rID].keyTop3[0]].name;\n        keyname[1] = pIDPlayer[rIDRound[_rID].keyTop3[1]].name;\n        keyname[2] = pIDPlayer[rIDRound[_rID].keyTop3[2]].name;\n\n        return (inv, invRef, invname, key, keyamt, keyname);\n    }\n\n    /**\n     * @dev returns player info based on address.  if no address is given, it will\n     * use msg.sender\n     * -functionhash- 0xee0b5d8b\n     * @param _addr address of the player you want to lookup\n     * @return player ID\n     * @return player name\n     * @return keys owned (current round)\n     * @return winnings vault\n     * @return general vault\n     * @return affiliate vault\n\t * @return player round eth\n     */\n    //tested\n    function getPlayerInfoByAddress(address _addr)\n        public\n        view\n        returns(uint256, bytes32, uint256, uint256, uint256)\n    {\n        // setup local rID\n        uint256 _rID = rID;\n\n        if (_addr == address(0))\n        {\n            _addr == msg.sender;\n        }\n        uint256 _pID = pIDxAddr[_addr];\n        if (_pID == 0)\n            return (0, 0x0, 0, 0, 0);\n        else\n            return\n            (\n            _pID,                               //0\n            pIDPlayer[_pID].name,                   //1\n            pIDPlayerRound[_pID][_rID].team1Keys + pIDPlayerRound[_pID][_rID].team2Keys,\n            pIDPlayerRound[_pID][_rID].eth,           //6\n            pIDPlayer[_pID].vip\n            );\n    }\n\n    function getCards(uint256 _id)\n    public\n    view\n    returns(uint256, address, bytes32, uint256, uint256) {\n        bytes32 _name = pIDPlayer[cIDCard[_id].owner].name;\n        return (\n            cIDCard[_id].owner,\n            cIDCard[_id].addr,\n            _name,\n            cIDCard[_id].buyTime,\n            cIDCard[_id].earnings\n        );\n    }\n//==============================================================================\n//\n//    private functions\n//==============================================================================\n\n    //tested\n    function managePID(uint256 _inviter) private returns(uint256) {\n        uint256 _pID = pIDxAddr[msg.sender];\n        if (_pID == 0) {\n            pID++;\n            pIDxAddr[msg.sender] = pID;\n            pIDPlayer[pID].addr = msg.sender;\n            pIDPlayer[pID].name = 0x0;\n            _pID = pID;\n        }\n            // handle direct and second hand inviter\n        if (pIDPlayer[_pID].inviter1 == 0 && pIDPlayer[_inviter].addr != address(0) && _pID != _inviter) {\n            pIDPlayer[_pID].inviter1 = _inviter;\n            uint256 _in = pIDPlayer[_inviter].inviter1;\n            if (_in != 0) {\n                    pIDPlayer[_pID].inviter2 = _in;\n                }\n            }\n        // oneoff invite get invitation link\n        if (msg.value >= oneOffInvest2) {\n            pIDPlayer[_pID].vip = 2;\n        } else if (msg.value >= oneOffInvest1) {\n            if (pIDPlayer[_pID].vip != 2)\n                pIDPlayer[_pID].vip = 1;\n        }\n        return _pID;\n    }\n\n    function buyCore(uint256 _pID, uint256 _team) private {\n        // setup local rID\n        uint256 _rID = rID;\n        // grab time\n        uint256 _now = now;\n\n        //update last round;\n        if (pIDPlayer[_pID].lrnd != _rID)\n            updateVault(_pID);\n        pIDPlayer[_pID].lrnd = _rID;\n        uint256 _inv1 = pIDPlayer[_pID].inviter1;\n        uint256 _inv2 = pIDPlayer[_pID].inviter2;\n\n        // round is active\n        if (rIDRound[_rID].end >= _now || (rIDRound[_rID].end < _now && rIDRound[_rID].leadPID == 0)) {\n            core(_rID, _pID, msg.value, _team);\n            if (_inv1 != 0)\n                doRankInv(_rID, _inv1, rIDRound[_rID].invTop3, pIDPlayerRound[_inv1][_rID].inv);\n            if (_inv2 != 0)\n                doRankInv(_rID, _inv2, rIDRound[_rID].invTop3, pIDPlayerRound[_inv2][_rID].inv);\n            doRankKey(_rID, _pID, rIDRound[_rID].keyTop3, pIDPlayerRound[_pID][_rID].team1Keys + pIDPlayerRound[_pID][_rID].team2Keys);\n            emit onBuyKey(\n                _pID,\n                pIDPlayer[_pID].addr,\n                pIDPlayer[_pID].name, _rID,\n                msg.value,\n                pIDPlayerRound[_pID][_rID].team1Keys + pIDPlayerRound[_pID][_rID].team2Keys,\n                now);\n        } else {\n            if (rIDRound[_rID].end < _now && rIDRound[_rID].ended == false) {\n                rIDRound[_rID].ended = true;\n                endRound();\n                //if you trigger the endround. whatever how much you pay ,you will fail to buykey\n                //and the eth will return to your gen.\n                pIDPlayer[_pID].gen = pIDPlayer[_pID].gen.add(msg.value);\n            }\n        }\n    }\n\n    function core(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _team) private {\n\n        NTAdatasets.Round storage _roundID = rIDRound[_rID];\n        NTAdatasets.Deposit storage _deposit = deposit[_team];\n        //NTAdatasets.PlayerRound storage _playerRound = pIDPlayerRound[_pID][_rID];\n        // calculate how many keys they can get\n        uint256 _keysAll = _roundID.team1Keys + _roundID.team2Keys;//(rIDRound[_rID].eth).keysRec(_eth);\n        uint256 _keys = _keysAll.keysRec(rIDRound[_rID].eth + _eth);\n        if (_keys >= 1000000000000000000) {\n            updateTimer(_keys, _rID);\n        }\n\n        uint256 _left = _eth;\n        //2% to bigDrop\n        uint256 _temp = _eth.mul(_deposit.bigDrop) / DIVIDE;\n        doBigDrop(_rID, _pID, _keys, _temp);\n        _left = _left.sub0(_temp);\n\n        //5% to smallDrop\n        _temp = _eth.mul(_deposit.smallDrop) / DIVIDE;\n        doSmallDrop(_rID, _pID, _eth, _temp);\n        _left = _left.sub0(_temp);\n\n        _roundID.eth = _roundID.eth.add(_eth);\n        pIDPlayerRound[_pID][_rID].eth = pIDPlayerRound[_pID][_rID].eth.add(_eth);\n        if (_team == 0) {\n            _roundID.team1Keys = _roundID.team1Keys.add(_keys);\n            pIDPlayerRound[_pID][_rID].team1Keys = pIDPlayerRound[_pID][_rID].team1Keys.add(_keys);\n        } else {\n            _roundID.team2Keys = _roundID.team2Keys.add(_keys);\n            pIDPlayerRound[_pID][_rID].team2Keys = pIDPlayerRound[_pID][_rID].team2Keys.add(_keys);\n        }\n\n\n        //X% to all\n        uint256 _all = _eth.mul(_deposit.allPlayer) / DIVIDE;\n        _roundID.playerPot = _roundID.playerPot.add(_all);\n        uint256 _dust = updateMasks(_rID, _pID, _all, _keys);\n        _roundID.pot = _roundID.pot.add(_dust);\n        _left = _left.sub0(_all);\n\n        //X% to winnerPot\n        _temp = _eth.mul(_deposit.pot) / DIVIDE;\n        _roundID.pot = _roundID.pot.add(_temp);\n        _left = _left.sub0(_temp);\n\n        //5% to develop funds\n        _temp = _eth.mul(_deposit.devfunds) / DIVIDE;\n        doDevelopFunds(_temp);\n        //gameFunds[gameFundsAddr] = gameFunds[gameFundsAddr].add(_temp);\n        _left = _left.sub0(_temp);\n\n        //5% to team fee\n        _temp = _eth.mul(_deposit.teamFee) / DIVIDE;\n        //gameFunds[partner1] = gameFunds[partner1].add(_temp.mul(50) / DIVIDE);\n        _dust = doPartnerShares(_temp);\n        _left = _left.sub0(_temp).add(_dust);\n\n        //10% to cards\n        _temp = _eth.mul(_deposit.cards) / DIVIDE;\n        _left = _left.sub0(_temp).add(distributeCards(_temp));\n        // if no cards ,the money will add into left\n\n        // 10% to invatation\n        _temp = _eth.mul(_deposit.inviter) / DIVIDE;\n        _dust = doInvite(_rID, _pID, _temp);\n        _left = _left.sub0(_temp).add(_dust);\n\n        //update round;\n        if (_keys >= 1000000000000000000) {\n            _roundID.leadPID = _pID;\n            _roundID.team = _team;\n        }\n\n\n        _roundID.smallDrop = _roundID.smallDrop.add(_left);\n    }\n\n    //tested\n    function doInvite(uint256 _rID, uint256 _pID, uint256 _value) private returns(uint256){\n        uint256 _score = msg.value;\n        uint256 _left = _value;\n        uint256 _inviter1 = pIDPlayer[_pID].inviter1;\n        uint256 _fee;\n        uint256 _inviter2 = pIDPlayer[_pID].inviter2;\n        if (_inviter1 != 0) \n            pIDPlayerRound[_inviter1][_rID].score = pIDPlayerRound[_inviter1][_rID].score.add(_score);\n        if (_inviter2 != 0) \n            pIDPlayerRound[_inviter2][_rID].score = pIDPlayerRound[_inviter2][_rID].score.add(_score);\n        //invitor\n        if (_inviter1 == 0 || pIDPlayer[_inviter1].vip == 0)\n            return _left;\n        if (pIDPlayer[_inviter1].vip == 1) {\n            _fee = _value.mul(70) / 100;\n            _inviter2 = pIDPlayer[_pID].inviter2;\n            _left = _left.sub0(_fee);\n            pIDPlayerRound[_inviter1][_rID].inv = pIDPlayerRound[_inviter1][_rID].inv.add(_fee);\n            if (_inviter2 == 0 || pIDPlayer[_inviter2].vip != 2)\n                return _left;\n            else {\n                _fee = _value.mul(30) / 100;\n                _left = _left.sub0(_fee);\n                pIDPlayerRound[_inviter2][_rID].inv = pIDPlayerRound[_inviter2][_rID].inv.add(_fee);\n                return _left;\n            }\n        } else if (pIDPlayer[_inviter1].vip == 2) {\n            _left = _left.sub0(_value);\n            pIDPlayerRound[_inviter1][_rID].inv = pIDPlayerRound[_inviter1][_rID].inv.add(_value);\n            return _left;\n        } else {\n            return _left;\n        }\n    }\n\n    function doRankInv(uint256 _rID, uint256 _pID, uint256[3] storage rank, uint256 _value) private {\n\n        if (_value >= pIDPlayerRound[rank[0]][_rID].inv && _value != 0) {\n            if (_pID != rank[0]) {\n            uint256 temp = rank[0];\n            rank[0] = _pID;\n            if (rank[1] == _pID) {\n                rank[1] = temp;\n            } else {\n                rank[2] = rank[1];\n                rank[1] = temp;\n            }\n            }\n        } else if (_value >= pIDPlayerRound[rank[1]][_rID].inv && _value != 0) {\n            if (_pID != rank[1]) {\n            rank[2] = rank[1];\n            rank[1] = _pID;\n            }\n        } else if (_value >= pIDPlayerRound[rank[2]][_rID].inv && _value != 0) {\n            rank[2] = _pID;\n        }\n    }\n\n    function doRankKey(uint256 _rID, uint256 _pID, uint256[3] storage rank, uint256 _value) private {\n\n        if (_value >= (pIDPlayerRound[rank[0]][_rID].team1Keys + pIDPlayerRound[rank[0]][_rID].team2Keys)) {\n            if (_pID != rank[0]) {\n            uint256 temp = rank[0];\n            rank[0] = _pID;\n            if (rank[1] == _pID) {\n                rank[1] = temp;\n            } else {\n                rank[2] = rank[1];\n                rank[1] = temp;\n            }\n            }\n        } else if (_value >= (pIDPlayerRound[rank[1]][_rID].team1Keys + pIDPlayerRound[rank[1]][_rID].team2Keys)) {\n            if (_pID != rank[1]){\n            rank[2] = rank[1];\n            rank[1] = _pID;\n            }\n        } else if (_value >= (pIDPlayerRound[rank[2]][_rID].team1Keys + pIDPlayerRound[rank[2]][_rID].team2Keys)) {\n            rank[2] = _pID;\n        }\n    }\n\n    //tested\n    function doSmallDrop(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _small) private {\n        // modulo current round eth, and add player eth to see if it can trigger the trigger;\n        uint256 _remain = rIDRound[_rID].eth % smallDropTrigger;\n        if ((_remain + _eth) >= smallDropTrigger) {\n            uint256 _reward = rIDRound[_rID].smallDrop;\n            rIDRound[_rID].smallDrop = 0;\n            pIDPlayer[_pID].win = pIDPlayer[_pID].win.add(_reward);\n            rIDRound[_rID].smallDrop = rIDRound[_rID].smallDrop.add(_small);\n            emit NTA3DEvents.onDrop(pIDPlayer[_pID].addr, pIDPlayer[_pID].name, _rID, 0, _reward, now);\n            //emit\n        } else {\n            rIDRound[_rID].smallDrop = rIDRound[_rID].smallDrop.add(_small);\n        }\n    }\n\n    //tested\n    function doBigDrop(uint256 _rID, uint256 _pID, uint256 _key, uint256 _big) private {\n        uint256 _keys = rIDRound[_rID].team1Keys + rIDRound[_rID].team2Keys;\n        uint256 _remain = _keys % bigDropTrigger;\n        if ((_remain + _key) >= bigDropTrigger) {\n            uint256 _reward = rIDRound[_rID].bigDrop;\n            rIDRound[_rID].bigDrop = 0;\n            pIDPlayer[_pID].win = pIDPlayer[_pID].win.add(_reward);\n            rIDRound[_rID].bigDrop = rIDRound[_rID].bigDrop.add(_big);\n            emit NTA3DEvents.onDrop(pIDPlayer[_pID].addr, pIDPlayer[_pID].name, _rID, 1, _reward, now);\n            //emit\n        } else {\n            rIDRound[_rID].bigDrop = rIDRound[_rID].bigDrop.add(_big);\n        }\n    }\n\n    function distributeCards(uint256 _eth) private returns(uint256){\n        uint256 _each = _eth / 20;\n        uint256 _remain = _eth;\n        for (uint i = 0; i < 20; i++) {\n            uint256 _pID = cIDCard[i].owner;\n            if (_pID != 0) {\n                pIDPlayer[_pID].crd = pIDPlayer[_pID].crd.add(_each);\n                cIDCard[i].earnings = cIDCard[i].earnings.add(_each);\n                _remain = _remain.sub0(_each);\n            }\n        }\n        return _remain;\n    }\n    \n    function doPartnerShares(uint256 _eth) private returns(uint256) {\n        uint i;\n        uint256 _temp;\n        uint256 _left = _eth;\n        //first 10%\n        _temp = _eth.mul(10) / 100;\n        gameFunds[partner[0]] = gameFunds[partner[0]].add(_temp);\n        for(i = 1; i < 11; i++) {\n            _temp = _eth.mul(9) / 100;\n            gameFunds[partner[i]] = gameFunds[partner[i]].add(_temp);\n            _left = _left.sub0(_temp);\n        }\n        return _left;\n    }\n    \n    function doDevelopFunds(uint256 _eth) private{\n        uint256 _temp;\n        _temp = _eth.mul(12) / 100;\n        gameFunds[to06] = gameFunds[to06].add(_temp);\n        _temp = _eth.mul(8) / 100;    \n        gameFunds[to04] = gameFunds[to04].add(_temp);\n        _temp = _eth.mul(40) / 100;\n        gameFunds[to20A] = gameFunds[to20A].add(_temp);\n        _temp = _eth.mul(40) / 100;\n        gameFunds[to20B] = gameFunds[to20B].add(_temp);\n    }\n\n    function endRound() private {\n        NTAdatasets.Round storage _roundID = rIDRound[rID];\n        NTAdatasets.PotSplit storage _potSplit = potSplit[0];\n        uint256 _winPID = _roundID.leadPID;\n        uint256 _pot = _roundID.pot;\n        uint256 _left = _pot;\n\n        //the pot is too small endround will ignore the dividens\n        //new round will start at 0 eth\n        if(_pot < 10000000000000) {\n            emit onRoundEnd(pIDPlayer[_winPID].addr, pIDPlayer[_winPID].name, rID, _roundID.pot,0, now);\n            newRound(0);\n            return;\n        }\n\n        // potSplit:    ==> |20% to all, 45% to lastwinner, 5% to inviter 1st, 3% to inviter 2nd, 2% to inviter 3rd,\n        //                  |8% to key buyer 1st, 5% to key buyer 2nd, 2% to key buyer 3rd, 10% to next round\n\n        //20% to all\n        uint256 _all = _pot.mul(_potSplit.allPlayer) / DIVIDE;\n        _roundID.teamPot = _roundID.teamPot.add(_all);\n        _left = _left.sub0(_all);\n\n        //45% to lastwinner\n        uint256 _temp = _pot.mul(_potSplit.lastWinner) / DIVIDE;\n        pIDPlayer[_winPID].win = pIDPlayer[_winPID].win.add(_temp);\n        _left = _left.sub0(_temp);\n\n        //5% to inviter 1st, 3% to inviter 2nd, 2% to inviter 3rd\n        uint256 _inv1st = _pot.mul(_potSplit.inviter1st) / DIVIDE;\n        if (_roundID.invTop3[0] != 0) {\n            pIDPlayer[_roundID.invTop3[0]].win = pIDPlayer[_roundID.invTop3[0]].win.add(_inv1st);\n            _left = _left.sub0(_inv1st);\n        }\n\n        _inv1st = _pot.mul(_potSplit.inviter2nd) / DIVIDE;\n        if (_roundID.invTop3[1] != 0) {\n            pIDPlayer[_roundID.invTop3[1]].win = pIDPlayer[_roundID.invTop3[1]].win.add(_inv1st);\n            _left = _left.sub0(_inv1st);\n        }\n\n        _inv1st = _pot.mul(_potSplit.inviter3rd) / DIVIDE;\n        if (_roundID.invTop3[2] != 0) {\n            pIDPlayer[_roundID.invTop3[2]].win = pIDPlayer[_roundID.invTop3[2]].win.add(_inv1st);\n            _left = _left.sub0(_inv1st);\n        }\n\n         //8% to key buyer 1st, 5% to key buyer 2nd, 2% to key buyer 3rd\n        _inv1st = _pot.mul(_potSplit.key1st) / DIVIDE;\n        if (_roundID.keyTop3[0] != 0) {\n            pIDPlayer[_roundID.keyTop3[0]].win = pIDPlayer[_roundID.keyTop3[0]].win.add(_inv1st);\n            _left = _left.sub0(_inv1st);\n        }\n\n        _inv1st = _pot.mul(_potSplit.key2nd) / DIVIDE;\n        if (_roundID.keyTop3[1] != 0) {\n            pIDPlayer[_roundID.keyTop3[1]].win = pIDPlayer[_roundID.keyTop3[1]].win.add(_inv1st);\n            _left = _left.sub0(_inv1st);\n        }\n\n        _inv1st = _pot.mul(_potSplit.key3rd) / DIVIDE;\n        if (_roundID.keyTop3[2] != 0) {\n            pIDPlayer[_roundID.keyTop3[2]].win = pIDPlayer[_roundID.keyTop3[2]].win.add(_inv1st);\n            _left = _left.sub0(_inv1st);\n        }\n\n        //10% to next round\n        uint256 _newPot = _pot.mul(potSplit[0].next) / DIVIDE;\n        _left = _left.sub0(_newPot);\n        emit onRoundEnd(pIDPlayer[_winPID].addr, pIDPlayer[_winPID].name, rID, _roundID.pot, _newPot + _left, now);\n        //start new round\n        newRound(_newPot + _left);\n    }\n\n    //tested\n    function newRound(uint256 _eth) private {\n        if (rIDRound[rID].ended == true || rID == 0) {\n            rID++;\n            rIDRound[rID].strt = now;\n            rIDRound[rID].end = now.add(rndMax);\n            rIDRound[rID].pot = rIDRound[rID].pot.add(_eth);\n        }\n    }\n\n    function updateMasks(uint256 _rID, uint256 _pID, uint256 _all, uint256 _keys) private\n    returns(uint256) {\n        //calculate average share of each new eth in\n        uint256 _allKeys = rIDRound[_rID].team1Keys + rIDRound[_rID].team2Keys;\n        uint256 _unit = _all.mul(1000000000000000000) / _allKeys;\n        rIDRound[_rID].mask = rIDRound[_rID].mask.add(_unit);\n        //calculate this round player can get\n        uint256 _share = (_unit.mul(_keys)) / (1000000000000000000);\n        pIDPlayerRound[_pID][_rID].mask = pIDPlayerRound[_pID][_rID].mask.add((rIDRound[_rID].mask.mul(_keys) / (1000000000000000000)).sub(_share));\n        return(_all.sub(_unit.mul(_allKeys) / (1000000000000000000)));\n    }\n\n    function withdrawEarnings(uint256 _pID) private returns(uint256) {\n        updateVault(_pID);\n        uint256 earnings = (pIDPlayer[_pID].win).add(pIDPlayer[_pID].gen).add(pIDPlayer[_pID].inv).add(pIDPlayer[_pID].tim).add(pIDPlayer[_pID].crd);\n        if (earnings > 0) {\n            pIDPlayer[_pID].win = 0;\n            pIDPlayer[_pID].gen = 0;\n            pIDPlayer[_pID].inv = 0;\n            pIDPlayer[_pID].tim = 0;\n            pIDPlayer[_pID].crd = 0;\n        }\n        return earnings;\n    }\n\n    function updateVault(uint256 _pID) private {\n        uint256 _rID = pIDPlayer[_pID].lrnd;\n        updateGenVault(_pID, _rID);\n        updateInvVault(_pID, _rID);\n        uint256 _team = calcTeamEarnings(_pID, _rID);\n        //already calculate team reward,ended round key and mask dont needed\n        if(rIDRound[_rID].ended == true) {\n            pIDPlayerRound[_pID][_rID].team1Keys = 0;\n            pIDPlayerRound[_pID][_rID].team2Keys = 0;\n            pIDPlayerRound[_pID][_rID].mask = 0;\n        }\n        pIDPlayer[_pID].tim = pIDPlayer[_pID].tim.add(_team);\n    }\n\n    function updateGenVault(uint256 _pID, uint256 _rID) private {\n        uint256 _earnings = calcUnMaskedEarnings(_pID, _rID);\n        //put invitation reward to gen\n        if (_earnings > 0) {\n            // put in gen vault\n            pIDPlayer[_pID].gen = _earnings.add(pIDPlayer[_pID].gen);\n            // zero out their earnings by updating mask\n            pIDPlayerRound[_pID][_rID].mask = _earnings.add(pIDPlayerRound[_pID][_rID].mask);\n        }\n\n    }\n\n    function updateInvVault(uint256 _pID, uint256 _rID) private {\n        uint256 _inv = pIDPlayerRound[_pID][_rID].inv;\n        uint256 _invMask = pIDPlayerRound[_pID][_rID].invMask;\n        if (_inv > 0) {\n            pIDPlayer[_pID].inv = pIDPlayer[_pID].inv.add(_inv).sub0(_invMask);\n            pIDPlayerRound[_pID][_rID].invMask = pIDPlayerRound[_pID][_rID].invMask.add(_inv).sub0(_invMask);\n        }\n    }\n\n    //calculate valut not update\n    function calcUnMaskedEarnings(uint256 _pID, uint256 _rID) private view\n    returns (uint256)\n    {\n        uint256 _all = pIDPlayerRound[_pID][_rID].team1Keys + pIDPlayerRound[_pID][_rID].team2Keys;\n        return ((rIDRound[_rID].mask.mul(_all)) / (1000000000000000000)).sub(pIDPlayerRound[_pID][_rID].mask);\n    }\n\n    function calcTeamEarnings(uint256 _pID, uint256 _rID) private view\n    returns (uint256)\n    {\n        uint256 _key1 = pIDPlayerRound[_pID][_rID].team1Keys;\n        uint256 _key2 = pIDPlayerRound[_pID][_rID].team2Keys;\n        if (rIDRound[_rID].ended == false)\n            return 0;\n        else {\n            if (rIDRound[_rID].team == 0)\n                return rIDRound[_rID].teamPot.mul(_key1 / rIDRound[_rID].team1Keys);\n            else\n                return rIDRound[_rID].teamPot.mul(_key2 / rIDRound[_rID].team2Keys);\n        }\n    }\n    //tested\n    function updateTimer(uint256 _keys, uint256 _rID) private {\n        // grab time\n        uint256 _now = now;\n        // calculate new time\n        uint256 _newTime;\n        if (_now > rIDRound[_rID].end && rIDRound[_rID].leadPID == 0)\n            _newTime = (((_keys) / (1000000000000000000)).mul(rndPerKey)).add(_now);\n        else\n            _newTime = (((_keys) / (1000000000000000000)).mul(rndPerKey)).add(rIDRound[_rID].end);\n\n        // compare to max and set new end time\n        if (_newTime < (rndMax).add(_now))\n            rIDRound[_rID].end = _newTime;\n        else\n            rIDRound[_rID].end = rndMax.add(_now);\n    }\n\n\n}\n\nlibrary NTA3DKeysCalc {\n    using SafeMath for *;\n    uint256 constant private keyPriceTrigger = 50000 * 1e18;\n    uint256 constant private keyPriceFirst = 0.0005 ether;\n    uint256 constant private keyPriceAdd = 0.0001 ether;\n    /**\n     * @dev calculates number of keys received given X eth\n     * _curEth current amount of eth in contract\n     * _newEth eth being spent\n     * @return amount of ticket purchased\n     */\n    function keysRec(uint256 _curKeys, uint256 _allEth)\n        internal\n        pure\n        returns (uint256)\n    {\n        return(keys(_curKeys, _allEth));\n    }\n\n    /**\n     * @dev calculates amount of eth received if you sold X keys\n     * @param _curKeys current amount of keys that exist\n     * @param _sellKeys amount of keys you wish to sell\n     * @return amount of eth received\n     */\n    function ethRec(uint256 _curKeys, uint256 _sellKeys)\n        internal\n        pure\n        returns (uint256)\n    {\n        return(eth(_sellKeys.add(_curKeys)).sub(eth(_curKeys)));\n    }\n\n    /**\n     * @dev calculates how many keys would exist with given an amount of eth\n     * @param _eth eth \"in contract\"\n     * @return number of keys that would exist\n     */\n    function keys(uint256 _keys, uint256 _eth)\n        internal\n        pure\n        returns(uint256)\n    {\n        uint256 _times = _keys / keyPriceTrigger;\n        uint i = 0;\n        uint256 eth1;\n        uint256 eth2;\n        uint256 price;\n        uint256 key2;\n        for(i = _times;i < i + 200; i++) {\n            if(eth(keyPriceTrigger * (i + 1)) >=  _eth) {\n                if(i == 0) eth1 = 0;\n                else eth1 = eth(keyPriceTrigger * i);\n                eth2 = _eth.sub(eth1);\n                price = i.mul(keyPriceAdd).add(keyPriceFirst);\n                key2 = (eth2 / price).mul(1e18);\n                return ((keyPriceTrigger * i + key2).sub0(_keys));\n                break;\n            }\n        }\n        //too large \n        require(false, \"too large eth in\");\n\n    }\n\n    /**\n     * @dev calculates how much eth would be in contract given a number of keys\n     * @param _keys number of keys \"in contract\"\n     * @return eth that would exists\n     */\n     //tested\n    function eth(uint256 _keys)\n        internal\n        pure\n        returns(uint256)\n    {\n        uint256 _times = _keys / keyPriceTrigger;//keyPriceTrigger;\n        uint256 _remain = _keys % keyPriceTrigger;//keyPriceTrigger;\n        uint256 _price = _times.mul(keyPriceAdd).add(keyPriceFirst);\n        if (_times == 0) {\n            return (keyPriceFirst.mul(_keys / 1e18));\n        } else {\n            uint256 _up = (_price.sub(keyPriceFirst)).mul(_remain / 1e18);\n            uint256 _down = (_keys / 1e18).mul(keyPriceFirst);\n            uint256 _add = (_times.mul(_times).sub(_times) / 2).mul(keyPriceAdd).mul(keyPriceTrigger / 1e18);\n            return (_up + _down + _add);\n        }\n    }\n}\n\nlibrary NTAdatasets {\n\n    struct Player {\n        address addr;   // player address\n        bytes32 name;   // player name\n        uint256 win;    // winnings vault\n        uint256 gen;    // general vault\n        uint256 inv;    // inviter vault\n        uint256 tim;     //team pot\n        uint256 crd;     //crd pot\n        uint256 lrnd;   // last round played\n        uint256 inviter1; // direct inviter\n        uint256 inviter2; // second hand inviter\n        uint256 vip; //0 no vip; 1 and 2\n    }\n\n    struct PlayerRound {\n        uint256 eth;    // eth player has added to round (used for eth limiter)\n        uint256 team1Keys;\n        uint256 team2Keys;\n        uint256 inv;\n        uint256 mask;\n        uint256 invMask;\n        uint256 score;\n    }\n\n    struct Round {\n        uint256 leadPID;   // pID of player in lead\n        uint256 end;    // time ends/ended\n        bool ended;     // has round end function been ran\n        uint256 strt;   // time round started\n        uint256 team1Keys;   // keys\n        uint256 team2Keys;   // keys\n        uint256 eth;    // total eth in\n        uint256 pot;    // eth win pot\n        uint256 team;\n        uint256 teamPot;\n        uint256 smallDrop;//50Eth airdrop\n        uint256 bigDrop; //300000 eth airdrop\n        uint256 playerPot;\n        uint256 mask;\n        uint256[3] invTop3;\n        uint256[3] keyTop3;\n    }\n\n    struct Card {\n        uint256 owner;  //pID of card owner\n        address addr;\n        uint256 buyTime; //validity time check\n        uint256 earnings;\n    }\n\n    struct Deposit {\n        uint256 allPlayer;  // all player this rounds by key\n        uint256 pot;        // last winner pot\n        uint256 devfunds;   // game development Pot\n        uint256 teamFee;    // team fee\n        uint256 cards;      // stock right cards\n        uint256 inviter;\n        uint256 bigDrop;\n        uint256 smallDrop;\n    }\n\n    struct PotSplit {\n        uint256 allPlayer;  // all player this rounds by key\n        uint256 lastWinner; // final player\n        uint256 inviter1st; // player who get 1st of invatation\n        uint256 inviter2nd;\n        uint256 inviter3rd;\n        uint256 key1st;     // player who get 1st key amount\n        uint256 key2nd;\n        uint256 key3rd;\n        uint256 next;        // next round\n    }\n}\n\nlibrary NameFilter {\n    /**\n     * @dev filters name strings\n     * -converts uppercase to lower case.\n     * -makes sure it does not start/end with a space\n     * -makes sure it does not contain multiple spaces in a row\n     * -cannot be only numbers\n     * -cannot start with 0x\n     * -restricts characters to A-Z, a-z, 0-9, and space.\n     * @return reprocessed string in bytes32 format\n     */\n    function nameFilter(string _input)\n        internal\n        pure\n        returns(bytes32)\n    {\n        bytes memory _temp = bytes(_input);\n        uint256 _length = _temp.length;\n\n        //sorry limited to 32 characters\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\n        // make sure it doesnt start with or end with space\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\n        // make sure first two characters are not 0x\n        if (_temp[0] == 0x30)\n        {\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\n        }\n\n        // create a bool to track if we have a non number character\n        bool _hasNonNumber;\n\n        // convert & check\n        for (uint256 i = 0; i < _length; i++)\n        {\n            // if its uppercase A-Z\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\n            {\n                // convert to lower case a-z\n                _temp[i] = byte(uint(_temp[i]) + 32);\n\n                // we have a non number\n                if (_hasNonNumber == false)\n                    _hasNonNumber = true;\n            } else {\n                require\n                (\n                    // require character is a space\n                    _temp[i] == 0x20 ||\n                    // OR lowercase a-z\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\n                    // or 0-9\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\n                    \"string contains invalid characters\"\n                );\n                // make sure theres not 2x spaces in a row\n                if (_temp[i] == 0x20)\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\n\n                // see if we have a character other than a number\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\n                    _hasNonNumber = true;\n            }\n        }\n\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\n\n        bytes32 _ret;\n        assembly {\n            _ret := mload(add(_temp, 32))\n        }\n        return (_ret);\n    }\n}\n\n/**\n * @title SafeMath v0.1.9\n * @dev Math operations with safety checks that throw on error\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\n * - added sqrt\n * - added sq\n * - added pwr\n * - changed asserts to requires with error log outputs\n * - removed div, its useless\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"SafeMath mul failed\");\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(b <= a, \"SafeMath sub failed\");\n        return a - b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, no throw\n    */\n    function sub0(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a < b) {\n            return 0;\n        } else {\n            return a - b;\n        }\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c)\n    {\n        c = a + b;\n        require(c >= a, \"SafeMath add failed\");\n        return c;\n    }\n\n    /**\n     * @dev gives square root of given x.\n     */\n    function sqrt(uint256 x)\n        internal\n        pure\n        returns (uint256 y)\n    {\n        uint256 z = ((add(x,1)) / 2);\n        y = x;\n        while (z < y)\n        {\n            y = z;\n            z = ((add((x / z),z)) / 2);\n        }\n    }\n\n    /**\n     * @dev gives square. multiplies x by x\n     */\n    function sq(uint256 x)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (mul(x,x));\n    }\n\n    /**\n     * @dev x to the power of y\n     */\n    function pwr(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (x==0)\n            return (0);\n        else if (y==0)\n            return (1);\n        else\n        {\n            uint256 z = x;\n            for (uint256 i=1; i < y; i++)\n                z = mul(z,x);\n            return (z);\n        }\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008060006101000a81548160ff02191690831515021790555033600060016101000a815481600160a060020a030219169083600160a060020a03160217905550610100604051908101604052806101cc815260200160aa815260200160328152602001603281526020016064815260200160648152602001601481526020016032815250601a6000808152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701559050506101006040519081016040528060c881526020016101ae815260200160328152602001603281526020016064815260200160648152602001601481526020016032815250601a600060018152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701559050506101206040519081016040528060c881526020016101c2815260200160328152602001601e8152602001601481526020016050815260200160328152602001601481526020016064815250601b6000808152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801559050506101206040519081016040528060c881526020016101c2815260200160328152602001601e8152602001601481526020016050815260200160328152602001601481526020016064815250601b600060018152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155905050739b53cc857cd9dd5ebe6bc07bde67d8ce4076345f601460006101000a815481600160a060020a030219169083600160a060020a03160217905550735835a72118c0c784203b8d39936a0875497b6eca601560006101000a815481600160a060020a030219169083600160a060020a0316021790555073ec2441d3113fc2376cd127344331c0f1b959ce1c601660006101000a815481600160a060020a030219169083600160a060020a0316021790555073d1dac908c97c0a885e9b413a84accc0010c002d2601760006101000a815481600160a060020a030219169083600160a060020a0316021790555073ee4f032bdb0f9b51d6c7035d3deffc217d91225c600860006101000a815481600160a060020a030219169083600160a060020a0316021790555061587180620004576000396000f30060806040526004361061017f5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302fb0c5e8114610332578063045dd93b1461034957806304ed02f61461037c57806306fdde03146103c757806308d4db14146104515780630c23cf4b146104695780630d3682d91461047757806324294b1f146104d6578063277b2db6146104eb5780633ccfd60b1461052b5780636b335b8c1461054057806370a5612714610591578063717ab11214610617578063747dff421461062c57806375d9085a146106a95780638f38f309146106fa5780639374327e1461070857806395d89b411461072057806398ade1d6146107355780639b6ed777146107ad578063a1a200c5146107c2578063b43f8a5c146108eb578063b6b55f2514610982578063bba5ad87146109db578063c503a86814610a36578063c653411d14610a57578063c7e284b814610aaa578063cfbb7d3614610abf578063d47875d014610ad4578063ee0b5d8b14610af5575b6000805460ff1615156001146101cd576040805160e560020a62461bcd02815260206004820152601160248201526000805160206157c6833981519152604482015290519081900360640190fd5b33803b8015610214576040805160e560020a62461bcd0281526020600482015260116024820152600080516020615826833981519152604482015290519081900360640190fd5b34633b9aca0081101561026c576040805160e560020a62461bcd02815260206004820152602160248201526000805160206157e6833981519152604482015260f860020a607902606482015290519081900360840190fd5b69152d02c7e14af68000008111156102bc576040805160e560020a62461bcd02815260206004820152600e6024820152600080516020615806833981519152604482015290519081900360640190fd5b6001541515610315576040805160e560020a62461bcd02815260206004820152601460248201527f4e6f20726f756e64206578697374656420796574000000000000000000000000604482015290519081900360640190fd5b61031f6000610b16565b935061032c846000610c77565b50505050005b34801561033e57600080fd5b50610347610ef9565b005b34801561035557600080fd5b5061036a600160a060020a03600435166110d4565b60408051918252519081900360200190f35b34801561038857600080fd5b506103946004356110e6565b60408051958652600160a060020a0390941660208601528484019290925260608401526080830152519081900360a00190f35b3480156103d357600080fd5b506103dc611132565b6040805160208082528351818301528351919283929083019185019080838360005b838110156104165781810151838201526020016103fe565b50505050905090810190601f1680156104435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561045d57600080fd5b5061036a600435611169565b6103476004356024356111ff565b34801561048357600080fd5b5061048f6004356115f9565b60408051998a5260208a0198909852888801969096526060880194909452608087019290925260a086015260c085015260e084015261010083015251908190036101200190f35b3480156104e257600080fd5b50610347611647565b3480156104f757600080fd5b50610500611714565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561053757600080fd5b50610347611942565b60408051602060046024803582810135601f8101859004850286018501909652858552610347958335953695604494919390910191908190840183828082843750949750611b7a9650505050505050565b34801561059d57600080fd5b506105a9600435611d69565b604080519e8f5260208f019d909d529a15158d8d015260608d019990995260808c019790975260a08b019590955260c08a019390935260e08901919091526101008801526101208701526101408601526101608501526101808401526101a083015251908190036101c00190f35b34801561062357600080fd5b5061036a611dda565b34801561063857600080fd5b50610641611de0565b604080519c8d5260208d019b909b528b8b019990995260608b019790975260808a019590955260a089019390935260c0880191909152600160a060020a031660e087015261010086015261012085015261014084015261016083015251908190036101800190f35b60408051602060046024803582810135601f8101859004850286018501909652858552610347958335953695604494919390910191908190840183828082843750949750611e5c9650505050505050565b610347600435602435612324565b34801561071457600080fd5b5061036a6004356124e8565b34801561072c57600080fd5b506103dc6124fa565b34801561074157600080fd5b5061074d600435612531565b60408051600160a060020a03909c168c5260208c019a909a528a8a019890985260608a0196909652608089019490945260a088019290925260c087015260e086015261010085015261012084015261014083015251908190036101600190f35b3480156107b957600080fd5b5061036a612595565b3480156107ce57600080fd5b506107d761259b565b6040518087606080838360005b838110156107fc5781810151838201526020016107e4565b5050505090500186600360200280838360005b8381101561082757818101518382015260200161080f565b5050505090500185600360200280838360005b8381101561085257818101518382015260200161083a565b5050505090500184600360200280838360005b8381101561087d578181015183820152602001610865565b5050505090500183600360200280838360005b838110156108a8578181015183820152602001610890565b5050505090500182600360200280838360005b838110156108d35781810151838201526020016108bb565b50505050905001965050505050505060405180910390f35b3480156108f757600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261034794369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506129d29650505050505050565b34801561098e57600080fd5b5061099a600435612b7d565b604080519889526020890197909752878701959095526060870193909352608086019190915260a085015260c084015260e083015251908190036101000190f35b3480156109e757600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103479436949293602493928401919081908401838280828437509497505093359450612bc09350505050565b348015610a4257600080fd5b5061036a600160a060020a0360043516612d48565b348015610a6357600080fd5b50610a72600435602435612d63565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b348015610ab657600080fd5b5061036a612da9565b348015610acb57600080fd5b50610347612dfa565b348015610ae057600080fd5b5061036a600160a060020a0360043516612f4c565b348015610b0157600080fd5b50610500600160a060020a0360043516613007565b3360009081526003602052604081205481811515610b875760028054600190810180835533600081815260036020908152604080832085905593825260059052828120805473ffffffffffffffffffffffffffffffffffffffff191690921790915583548152908120909101555491505b600082815260056020526040902060080154158015610bbc5750600084815260056020526040902054600160a060020a031615155b8015610bc85750838214155b15610c0757506000818152600560205260408082206008908101869055858352912001548015610c075760008281526005602052604090206009018190555b670de0b6b3a76400003410610c315760008281526005602052604090206002600a90910155610c70565b67016345785d8a00003410610c70576000828152600560205260409020600a0154600214610c705760008281526005602052604090206001600a909101555b5092915050565b60015460008381526005602052604081206007015442919081908414610ca057610ca0866130a3565b50506000848152600560209081526040808320600781018690556008810154600990910154868552601990935292206001015483111580610d08575060008481526019602052604090206001015483118015610d085750600084815260196020526040902054155b15610e6157610d1984873488613161565b8115610d585760008481526019602090815260408083208584526006835281842088855290925290912060030154610d589186918591600e01906135f4565b8015610d975760008481526019602090815260408083208484526006835281842088855290925290912060030154610d979186918491600e01906135f4565b6000848152601960209081526040808320898452600683528184208885529092529091206002810154600190910154610dda9287928a92601190920191016136fd565b60008681526005602090815260408083206001808201549154600685528386208a8752855294839020600281015491015483518a81523495810195909552018383015242606084015290519092600160a060020a03169189917eaf92312107f6175aa18020d4c26cc83792028aa65c484d8c2833fe42584b599181900360800190a4610ef1565b60008481526019602052604090206001015483118015610e93575060008481526019602052604090206002015460ff16155b15610ef1576000848152601960205260409020600201805460ff19166001179055610ebc6137a1565b600086815260056020526040902060030154610ede903463ffffffff613cd616565b6000878152600560205260409020600301555b505050505050565b6000546101009004600160a060020a03163314610f60576040805160e560020a62461bcd02815260206004820152601d60248201527f6974732063616e206f6e6c792062652063616c6c2062792061646d696e000000604482015290519081900360640190fd5b60008054600160ff199091161790556009805473ffffffffffffffffffffffffffffffffffffffff1990811673e27aa5e7d8906779586cfb9dba2935bddd7c821017909155600a8054821673d4638827dc486cb59b5e5e47955059a160baae13179055600b8054821673a088c667591e04cc78d6dfa3a392a132dc5a7f9d179055600c8054821673ed38dee26c751ff575d68d9bf93c312e763f8f87179055600d805482167342a7b62f71b7778279da2639ceb5dd6ee884f905179055600e8054821673d471409f3efe9ca24b63855005b08d4548742a5b179055600f805482167341c9f005ed19c2b620152f5562d26029b32078b61790556010805482167311b85bc860a6c38fa7fe6f54f18d350ef5f2787b1790556011805482167311a7c5e7887f2c34356925275882d4321a6b69a817905560128054821673b5754c7bd005b6f25e1fdaa5f94b2b71e6ea260f17905560138054909116736fbc15cf6d0b05280e99f753e45b631815715e99179055565b60036020526000908152604090205481565b600081815260076020818152604080842080548086526005845291852060019081015496909552929091529181015460028201546003909201549294600160a060020a03909116939290565b60408051808201909152601281527f4e6f20547269636b7320416c6c6f772033440000000000000000000000000000602082015281565b60018054600081815260196020526040812060058101546004820154919094015491934292910190821115806111c65750600083815260196020526040902060010154821180156111c65750600083815260196020526040902054155b156111ec576111e581670de0b6b3a7640000870263ffffffff613d3716565b93506111f7565b6601c6bf5263400093505b505050919050565b6000805481908190819060ff161515600114611253576040805160e560020a62461bcd02815260206004820152601160248201526000805160206157c6833981519152604482015290519081900360640190fd5b33803b801561129a576040805160e560020a62461bcd0281526020600482015260116024820152600080516020615826833981519152604482015290519081900360640190fd5b34633b9aca008110156112f2576040805160e560020a62461bcd02815260206004820152602160248201526000805160206157e6833981519152604482015260f860020a607902606482015290519081900360840190fd5b69152d02c7e14af6800000811115611342576040805160e560020a62461bcd02815260206004820152600e6024820152600080516020615806833981519152604482015290519081900360640190fd5b349650429550601489106113a0576040805160e560020a62461bcd02815260206004820152601160248201527f6f6e6c7920686173203230206361726473000000000000000000000000000000604482015290519081900360640190fd5b66b1a2bc2ec5000087146113fe576040805160e560020a62461bcd02815260206004820152601860248201527f746865206361726420636f737420302e30352065746865720000000000000000604482015290519081900360640190fd5b600089815260076020526040902054158061142d5750600089815260076020526040902060020154610e100186115b1515611483576040805160e560020a62461bcd02815260206004820152600f60248201527f6361726420697320696e20757365640000000000000000000000000000000000604482015290519081900360640190fd5b61148c88610b16565b9450600093505b601484101561150d57600084815260076020526040902054851415611502576040805160e560020a62461bcd02815260206004820152601b60248201527f796f7520616c7265616479207265676973746564206120636172640000000000604482015290519081900360640190fd5b600190930192611493565b600854600160a060020a0316600090815260186020526040902054611538908863ffffffff613cd616565b600854600160a060020a039081166000908152601860209081526040808320949094558c8252600781528382206001818101805473ffffffffffffffffffffffffffffffffffffffff1916331790558a8255600282018c90556003909101839055898352600582529184902091820154915484518e81529182018c90524282860152935191939092169188917f38eaa4d2ed3700699db84b623b4803500182d44c3a4d20bf89c71b1c38e08f6b9181900360600190a4505050505050505050565b601b6020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060154908060070154908060080154905089565b6000546101009004600160a060020a031633146116ae576040805160e560020a62461bcd02815260206004820152601d60248201527f6974732063616e206f6e6c792062652063616c6c2062792061646d696e000000604482015290519081900360640190fd5b60005460ff1615156001146116fb576040805160e560020a62461bcd02815260206004820152601160248201526000805160206157c6833981519152604482015290519081900360640190fd5b6001541561170857600080fd5b6117126000613d70565b565b60015433600090815260036020526040812054909182918291829182919042908380808315156117535760009a508a9950899850889750879650611935565b50505060008181526005602081815260408084206007015460068352818520818652835281852060038101549401548886526019909352932060010154851180156117b0575060008681526019602052604090206002015460ff16155b80156117c9575060008681526019602052604090205415155b1561190d5760008681526019602052604090205484141561190d576000868152601960205260409020600701546118379060649061180e90602d63ffffffff613e1a16565b81151561181757fe5b60008781526005602052604090206002015491900463ffffffff613cd616565b60008581526005602052604090206007015461187690611858908790613e91565b6000878152600560205260409020600301549063ffffffff613cd616565b6000868152600560205260409020600401546118aa90849061189e908763ffffffff613cd616565b9063ffffffff613eff16565b6000878152600560205260409020600701546118ea906118cb908990613f1a565b600089815260056020819052604090912001549063ffffffff613cd616565b600088815260056020526040902060060154939e50919c509a5098509650611935565b6000848152600560205260409020600281015460079091015461187690611858908790613e91565b5050505050509091929394565b6000805481908190819060ff161515600114611996576040805160e560020a62461bcd02815260206004820152601160248201526000805160206157c6833981519152604482015290519081900360640190fd5b33803b80156119dd576040805160e560020a62461bcd0281526020600482015260116024820152600080516020615826833981519152604482015290519081900360640190fd5b600154336000908152600360205260409020549096504295509350831515611a4f576040805160e560020a62461bcd02815260206004820152600e60248201527f63616e742066696e642075736572000000000000000000000000000000000000604482015290519081900360640190fd5b60008681526019602052604081206001015490935085118015611a84575060008681526019602052604090206002015460ff16155b15611aad576000868152601960205260409020600201805460ff19166001179055611aad6137a1565b611ab684613fe4565b92506000831115611b0757600084815260056020526040808220549051600160a060020a039091169185156108fc02918691818181858888f19350505050158015611b05573d6000803e3d6000fd5b505b60008481526005602090815260409182902080546001909101548351600160a060020a03909216825291810191909152808201859052426060820152905185917f8f36579a548bc439baa172a6521207464154da77f411e2da3db2f53affe6cc3a919081900360800190a2505050505050565b600080548190819060ff161515600114611bcc576040805160e560020a62461bcd02815260206004820152601160248201526000805160206157c6833981519152604482015290519081900360640190fd5b33803b8015611c13576040805160e560020a62461bcd0281526020600482015260116024820152600080516020615826833981519152604482015290519081900360640190fd5b34633b9aca00811015611c6b576040805160e560020a62461bcd02815260206004820152602160248201526000805160206157e6833981519152604482015260f860020a607902606482015290519081900360840190fd5b69152d02c7e14af6800000811115611cbb576040805160e560020a62461bcd02815260206004820152600e6024820152600080516020615806833981519152604482015290519081900360640190fd5b6001541515611d14576040805160e560020a62461bcd02815260206004820152601460248201527f4e6f20726f756e64206578697374656420796574000000000000000000000000604482015290519081900360640190fd5b611d1d87614076565b6000818152600460205260409020549096509450611d3a85610b16565b93506000881080611d4b5750600188115b15611d5557600097505b611d5f8489610c77565b5050505050505050565b601960205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a8b0154600b8c0154600c8d0154600d909d01549b9c9a9b60ff909a169a9899979896979596949593949293919290918e565b60025481565b600180546000818152601960208181526040808420600580820154600483015460068401546003850154858c015460078701548754808d52968a52978b2080549d01549a8c905298909752600a850154600b8601546009909601549a9c929093019a9099969895969395600160a060020a039091169490939091565b600080548190819081908190819060ff161515600114611eb4576040805160e560020a62461bcd02815260206004820152601160248201526000805160206157c6833981519152604482015290519081900360640190fd5b33803b8015611efb576040805160e560020a62461bcd0281526020600482015260116024820152600080516020615826833981519152604482015290519081900360640190fd5b34633b9aca00811015611f53576040805160e560020a62461bcd02815260206004820152602160248201526000805160206157e6833981519152604482015260f860020a607902606482015290519081900360840190fd5b69152d02c7e14af6800000811115611fa3576040805160e560020a62461bcd02815260206004820152600e6024820152600080516020615806833981519152604482015290519081900360640190fd5b34985042975060148b10612001576040805160e560020a62461bcd02815260206004820152601160248201527f6f6e6c7920686173203230206361726473000000000000000000000000000000604482015290519081900360640190fd5b66b1a2bc2ec50000891461205f576040805160e560020a62461bcd02815260206004820152601860248201527f746865206361726420636f737420302e30352065746865720000000000000000604482015290519081900360640190fd5b60008b815260076020526040902054158061208e575060008b815260076020526040902060020154610e100188115b15156120e4576040805160e560020a62461bcd02815260206004820152600f60248201527f6361726420697320696e20757365640000000000000000000000000000000000604482015290519081900360640190fd5b6120ed8a614076565b600081815260046020526040902054909750955061210a86610b16565b9450600093505b601484101561218b57600084815260076020526040902054851415612180576040805160e560020a62461bcd02815260206004820152601b60248201527f796f7520616c7265616479207265676973746564206120636172640000000000604482015290519081900360640190fd5b600190930192612111565b600854600160a060020a03166000908152601860205260409020546121b6908a63ffffffff613cd616565b60186000600860009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a031681526020019081526020016000208190555033600760008d815260200190815260200160002060010160006101000a815481600160a060020a030219169083600160a060020a0316021790555084600760008d81526020019081526020016000206000018190555087600760008d8152602001908152602001600020600201819055506000600760008d8152602001908152602001600020600301819055506005600086815260200190815260200160002060010154600019166005600087815260200190815260200160002060000160009054906101000a9004600160a060020a0316600160a060020a0316867f38eaa4d2ed3700699db84b623b4803500182d44c3a4d20bf89c71b1c38e08f6b8e8d4260405180848152602001838152602001828152602001935050505060405180910390a45050505050505050505050565b6000805460ff161515600114612372576040805160e560020a62461bcd02815260206004820152601160248201526000805160206157c6833981519152604482015290519081900360640190fd5b33803b80156123b9576040805160e560020a62461bcd0281526020600482015260116024820152600080516020615826833981519152604482015290519081900360640190fd5b34633b9aca00811015612411576040805160e560020a62461bcd02815260206004820152602160248201526000805160206157e6833981519152604482015260f860020a607902606482015290519081900360840190fd5b69152d02c7e14af6800000811115612461576040805160e560020a62461bcd02815260206004820152600e6024820152600080516020615806833981519152604482015290519081900360640190fd5b60015415156124ba576040805160e560020a62461bcd02815260206004820152601460248201527f4e6f20726f756e64206578697374656420796574000000000000000000000000604482015290519081900360640190fd5b6124c385610b16565b935060008610806124d45750600186115b156124de57600095505b610ef18487610c77565b60046020526000908152604090205481565b60408051808201909152600581527f4e54413344000000000000000000000000000000000000000000000000000000602082015281565b600560208190526000918252604090912080546001820154600283015460038401546004850154958501546006860154600787015460088801546009890154600a90990154600160a060020a0390981699969895979496959394929391929091908b565b60015481565b6125a36157a6565b6125ab6157a6565b6125b36157a6565b6125bb6157a6565b6125c36157a6565b6125cb6157a6565b60006125d56157a6565b6125dd6157a6565b6125e56157a6565b6125ed6157a6565b6125f56157a6565b6125fd6157a6565b6001546000818152601960205260408120919850600591600e0181015481526020810191909152604001600090812054600160a060020a0316908790600160a060020a0390921660209283029190910152600088815260199091526040812060059190600e01600101548152602081019190915260400160002054600160a060020a0316866001600160a060020a0390921660209283029190910152600088815260199091526040812060059190600e01600201548152602081019190915260400160002054600160a060020a0316866002600160a060020a0390921660209283029190910152600088815260199091526040812060069190600e018101548152602080820192909252604090810160009081208a825290925281206003015490849060209081029190910191909152600088815260199091526040812060069190600e01600101548152602080820192909252604090810160009081208a825290925290206003015483600160209081029190910191909152600088815260199091526040812060069190600e01600201548152602080820192909252604090810160009081208a825290925290206003015483600260209081029190910191909152600088815260199091526040812060059190600e018101548152602001908152602001600020600101548460006003811015156127fa57fe5b602090810291909101919091526000888152601982526040808220600f015482526005909252206001908101549085906020908102919091019190915260008881526019825260408082206010810154835260058085528284206001908101548a850152601183015480865282875284862054600160a060020a039081168d52601285015487528388528587205481168d8901526013909401548652918652838520549092168a8401528352600684528183208b845290935281206002810154920154909101908390602090810291909101919091526000888152601982526040808220601201548252600683528082208a83529092522060028101546001918201540190839060209081029190910191909152600088815260198252604080822060138101548352600684528183208b8452845281832060028101546001918201540187840152601190910154835260059093528120909101549082906020908102919091019190915260008881526019825260408082206012015482526005909252206001908101549082906020908102919091019190915260009788526019815260408089206013015489526005909152968790206001015496810196909652939b909a509098509096509094509092509050565b60008054819081908190819060ff161515600114612a28576040805160e560020a62461bcd02815260206004820152601160248201526000805160206157c6833981519152604482015290519081900360640190fd5b33803b8015612a6f576040805160e560020a62461bcd0281526020600482015260116024820152600080516020615826833981519152604482015290519081900360640190fd5b612a7889614076565b60008181526004602052604090205490975095508515612ae2576040805160e560020a62461bcd02815260206004820152601360248201527f6e616d6520616c72656164792072656769737400000000000000000000000000604482015290519081900360640190fd5b612aeb88614076565b6000818152600460205260409020549095509350612b0884610b16565b60008881526004602090815260408083208490558383526005825291829020600181018b905554825142815292519396508a93600160a060020a039091169287927fc859fe94fcdf6b68b700e02b6de47c4fd67a0d9ea0c1be7849d4b825c914434b92918290030190a4505050505050505050565b601a602052600090815260409020805460018201546002830154600384015460048501546005860154600687015460079097015495969495939492939192909188565b600080548190819060ff161515600114612c12576040805160e560020a62461bcd02815260206004820152601160248201526000805160206157c6833981519152604482015290519081900360640190fd5b33803b8015612c59576040805160e560020a62461bcd0281526020600482015260116024820152600080516020615826833981519152604482015290519081900360640190fd5b612c6287614076565b60008181526004602052604090205490955093508315612ccc576040805160e560020a62461bcd02815260206004820152601360248201527f6e616d6520616c72656164792072656769737400000000000000000000000000604482015290519081900360640190fd5b612cd586610b16565b600086815260046020908152604080832084905583835260058252918290206001810189905554825142815292519396508893600160a060020a039091169287927fc859fe94fcdf6b68b700e02b6de47c4fd67a0d9ea0c1be7849d4b825c914434b92918290030190a450505050505050565b600160a060020a031660009081526018602052604090205490565b6006602081815260009384526040808520909152918352912080546001820154600283015460038401546004850154600586015495909601549395929491939092919087565b6001805460008181526019602052604081209092015442908111612df057600082815260196020526040902060010154612de9908263ffffffff61488916565b9250612df5565b600092505b505090565b60008033803b8015612e44576040805160e560020a62461bcd0281526020600482015260116024820152600080516020615826833981519152604482015290519081900360640190fd5b60005460ff161515600114612e91576040805160e560020a62461bcd02815260206004820152601160248201526000805160206157c6833981519152604482015290519081900360640190fd5b336000818152601860205260409020549093501515612efa576040805160e560020a62461bcd02815260206004820152601360248201527f796f7520646f6e7420686176652066756e647300000000000000000000000000604482015290519081900360640190fd5b600160a060020a038316600081815260186020526040808220805490839055905190965086156108fc0291879190818181858888f19350505050158015612f45573d6000803e3d6000fd5b5050505050565b6000805481906101009004600160a060020a03163314612fb6576040805160e560020a62461bcd02815260206004820152601d60248201527f6974732063616e206f6e6c792062652063616c6c2062792061646d696e000000604482015290519081900360640190fd5b50600160a060020a038216600090815260036020526040902054801515612fe05760009150613001565b60008181526006602081815260408084206001548552909152909120015491505b50919050565b6000806000806000806000600154915050600160a060020a03871660009081526003602052604090205480151561304d5760009650869550859450849350839250613098565b600081815260056020818152604080842060018082015460068552838720898852855292862060028101549181015490549688905294909352600a0154949a50985001955093509150855b505091939590929450565b600081815260056020526040812060070154906130c083836148e9565b6130ca8383614980565b6130d48383613f1a565b60008381526019602052604090206002015490915060ff1615156001141561312257600083815260066020908152604080832085845290915281206001810182905560028101829055600401555b60008381526005602081905260409091200154613145908263ffffffff613cd616565b6000938452600560208190526040909420909301929092555050565b6000848152601960208181526040808420858552601a8352908420600582015460048301548a875294909352600682015491949093909201919081908190819081906131b69087908c0163ffffffff614a3816565b9450670de0b6b3a764000085106131d1576131d1858d614a44565b8993506103e86131ee88600601548c613e1a90919063ffffffff16565b8115156131f757fe5b0492506132068c8c8786614b29565b613216848463ffffffff613eff16565b93506103e861323288600701548c613e1a90919063ffffffff16565b81151561323b57fe5b04925061324a8c8c8c86614c92565b61325a848463ffffffff613eff16565b6006890154909450613272908b63ffffffff613cd616565b6006808a019190915560008c8152602091825260408082208f835290925220546132a2908b63ffffffff613cd616565b600660008d815260200190815260200160002060008e815260200190815260200160002060000181905550886000141561334d5760048801546132eb908663ffffffff613cd616565b600489015560008b81526006602090815260408083208f845290915290206001015461331d908663ffffffff613cd616565b600660008d815260200190815260200160002060008e8152602001908152602001600020600101819055506133c0565b6005880154613362908663ffffffff613cd616565b600589015560008b81526006602090815260408083208f8452909152902060020154613394908663ffffffff613cd616565b600660008d815260200190815260200160002060008e8152602001908152602001600020600201819055505b86546103e8906133d7908c9063ffffffff613e1a16565b8115156133e057fe5b0491506133fa8289600c0154613cd690919063ffffffff16565b600c89015561340b8c8c8488614df2565b6007890154909150613423908263ffffffff613cd616565b6007890155613438848363ffffffff613eff16565b93506103e861345488600101548c613e1a90919063ffffffff16565b81151561345d57fe5b049250613477838960070154613cd690919063ffffffff16565b600789015561348c848463ffffffff613eff16565b93506103e86134a888600201548c613e1a90919063ffffffff16565b8115156134b157fe5b0492506134bd83614f4d565b6134cd848463ffffffff613eff16565b93506103e86134e988600301548c613e1a90919063ffffffff16565b8115156134f257fe5b0492506134fe836150ef565b905061352081613514868663ffffffff613eff16565b9063ffffffff613cd616565b93506103e861353c88600401548c613e1a90919063ffffffff16565b81151561354557fe5b049250613564613554846151ee565b613514868663ffffffff613eff16565b93506103e861358088600501548c613e1a90919063ffffffff16565b81151561358957fe5b0492506135978c8c856152a7565b90506135ad81613514868663ffffffff613eff16565b9350670de0b6b3a764000085106135c9578a8855600888018990555b600a8801546135de908563ffffffff613cd616565b88600a0181905550505050505050505050505050565b81546000908152600660209081526040808320878452909152812060030154821080159061362157508115155b15613666578260005b0154841461366157508154838355600183015484141561364f57808360010155613661565b82600101548360020155808360015b01555b612f45565b60018301546000908152600660209081526040808320888452909152902060030154821080159061369657508115155b156136ba578260015b0154841461366157826001015483600201558383600161365e565b6002830154600090815260066020908152604080832088845290915290206003015482108015906136ea57508115155b15612f4557838360025b01555050505050565b81546000908152600660209081526040808320878452909152812060028101546001909101540182106137325782600061362a565b6001838101546000908152600660209081526040808320898452909152902060028101549101540182106137685782600161369f565b6002838101546000908152600660209081526040808320898452909152902090810154600190910154018210612f4557838360026136f4565b60015460009081526019602090815260408220828052601b9091528054600782015491927f584f46c60af19681376031579adb04a2416e54ee5505351c2a8435e3766026ea929081908080806509184e72a0008510156138895760008781526005602090815260408083208054600191820154915460078f01548451600160a060020a0390931683529482019290925280830191909152606081019290925260808201929092524260a082015290517ff6cd2ad4d8c4552391c717ce089afb3f5f8e81b9f4284296b88cc96790d6ac1e9181900360c00190a16138846000613d70565b613ccb565b87546103e8906138a090889063ffffffff613e1a16565b8115156138a957fe5b0493506138c3848a60090154613cd690919063ffffffff16565b60098a01556138d8858563ffffffff613eff16565b94506103e86138f4896001015488613e1a90919063ffffffff16565b8115156138fd57fe5b6000898152600560205260409020600201549190049350613924908463ffffffff613cd616565b600088815260056020526040902060020155613946858463ffffffff613eff16565b94506103e8613962896002015488613e1a90919063ffffffff16565b81151561396b57fe5b049150600e890160000154156139cf576139ab8260056000600e8d01815b0154815260200190815260200160002060020154613cd690919063ffffffff16565b600e8a01546000908152600560205260409020600201556139cc8583613eff565b94505b6103e86139e9896003015488613e1a90919063ffffffff16565b8115156139f257fe5b049150600e89016001015415613a3957613a158260056000600e8d016001613989565b600f8a0154600090815260056020526040902060020155613a368583613eff565b94505b6103e8613a53896004015488613e1a90919063ffffffff16565b811515613a5c57fe5b049150600e89016002015415613aa357613a7f8260056000600e8d016002613989565b60108a0154600090815260056020526040902060020155613aa08583613eff565b94505b6103e8613abd896005015488613e1a90919063ffffffff16565b811515613ac657fe5b049150601189016000015415613b0c57613ae8826005600060118d0181613989565b60118a0154600090815260056020526040902060020155613b098583613eff565b94505b6103e8613b26896006015488613e1a90919063ffffffff16565b811515613b2f57fe5b049150601189016001015415613b7657613b52826005600060118d016001613989565b60128a0154600090815260056020526040902060020155613b738583613eff565b94505b6103e8613b90896007015488613e1a90919063ffffffff16565b811515613b9957fe5b049150601189016002015415613be057613bbc826005600060118d016002613989565b60138a0154600090815260056020526040902060020155613bdd8583613eff565b94505b60008052601b6020527f584f46c60af19681376031579adb04a2416e54ee5505351c2a8435e3766026f2546103e890613c2090889063ffffffff613e1a16565b811515613c2957fe5b049050613c3c858263ffffffff613eff16565b6000888152600560209081526040918290208054600191820154915460078f01548551600160a060020a0390931683529382019290925280840191909152606081019190915283830160808201524260a082015290519196507ff6cd2ad4d8c4552391c717ce089afb3f5f8e81b9f4284296b88cc96790d6ac1e919081900360c00190a1613ccb858201613d70565b505050505050505050565b81810182811015613d31576040805160e560020a62461bcd02815260206004820152601360248201527f536166654d61746820616464206661696c656400000000000000000000000000604482015290519081900360640190fd5b92915050565b6000613d69613d458461557c565b613d5d613d58858763ffffffff613cd616565b61557c565b9063ffffffff61488916565b9392505050565b6001805460009081526019602052604090206002015460ff1615151480613d975750600154155b15613e1757600180548101908190556000908152601960205260409020426003909101819055613dcf9061a8c063ffffffff613cd616565b60018054600090815260196020526040808220830193909355905481522060070154613e01908263ffffffff613cd616565b6001546000908152601960205260409020600701555b50565b6000821515613e2b57506000613d31565b50818102818382811515613e3b57fe5b0414613d31576040805160e560020a62461bcd02815260206004820152601360248201527f536166654d617468206d756c206661696c656400000000000000000000000000604482015290519081900360640190fd5b60008281526006602090815260408083208484528252808320600281015460018201546004909201546019909452918420600d0154910191613ef791670de0b6b3a764000090613ee19085613e1a565b811515613eea57fe5b049063ffffffff61488916565b949350505050565b600081831015613f1157506000613d31565b50808203613d31565b6000828152600660209081526040808320848452825280832060018101546002918201546019909452918420015490919060ff161515613f5d5760009250613fdc565b6000848152601960205260409020600801541515613fbc57600084815260196020526040902060040154613fb59083811515613f9557fe5b60008781526019602052604090206009015491900463ffffffff613e1a16565b9250613fdc565b600084815260196020526040902060050154613fb59082811515613f9557fe5b505092915050565b600080613ff0836130a3565b600083815260056020819052604090912060068101549181015460048201546003830154600290930154614036949361351493928492909183919063ffffffff613cd616565b90506000811115613d3157600083815260056020819052604082206002810183905560038101839055600481018390559081018290556006015592915050565b80516000908290828080602084118015906140915750600084115b151561410d576040805160e560020a62461bcd02815260206004820152602a60248201527f737472696e67206d757374206265206265747765656e203120616e642033322060448201527f6368617261637465727300000000000000000000000000000000000000000000606482015290519081900360840190fd5b84600081518110151561411c57fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a02141580156141835750846001850381518110151561415b57fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a0214155b15156141ff576040805160e560020a62461bcd02815260206004820152602560248201527f737472696e672063616e6e6f74207374617274206f7220656e6420776974682060448201527f7370616365000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b84600081518110151561420e57fe5b90602001015160f860020a900460f860020a02600160f860020a031916603060f860020a0214156143515784600181518110151561424857fe5b90602001015160f860020a900460f860020a02600160f860020a031916607860f860020a02141515156142c5576040805160e560020a62461bcd02815260206004820152601b60248201527f737472696e672063616e6e6f7420737461727420776974682030780000000000604482015290519081900360640190fd5b8460018151811015156142d457fe5b90602001015160f860020a900460f860020a02600160f860020a031916605860f860020a0214151515614351576040805160e560020a62461bcd02815260206004820152601b60248201527f737472696e672063616e6e6f7420737461727420776974682030580000000000604482015290519081900360640190fd5b600091505b838210156148215784517f40000000000000000000000000000000000000000000000000000000000000009086908490811061438e57fe5b90602001015160f860020a900460f860020a02600160f860020a031916118015614402575084517f5b00000000000000000000000000000000000000000000000000000000000000908690849081106143e357fe5b90602001015160f860020a900460f860020a02600160f860020a031916105b1561446f57848281518110151561441557fe5b90602001015160f860020a900460f860020a0260f860020a900460200160f860020a02858381518110151561444657fe5b906020010190600160f860020a031916908160001a90535082151561446a57600192505b614816565b848281518110151561447d57fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a02148061454d575084517f6000000000000000000000000000000000000000000000000000000000000000908690849081106144d957fe5b90602001015160f860020a900460f860020a02600160f860020a03191611801561454d575084517f7b000000000000000000000000000000000000000000000000000000000000009086908490811061452e57fe5b90602001015160f860020a900460f860020a02600160f860020a031916105b806145f7575084517f2f000000000000000000000000000000000000000000000000000000000000009086908490811061458357fe5b90602001015160f860020a900460f860020a02600160f860020a0319161180156145f7575084517f3a00000000000000000000000000000000000000000000000000000000000000908690849081106145d857fe5b90602001015160f860020a900460f860020a02600160f860020a031916105b1515614673576040805160e560020a62461bcd02815260206004820152602260248201527f737472696e6720636f6e7461696e7320696e76616c696420636861726163746560448201527f7273000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b848281518110151561468157fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a0214156147605784826001018151811015156146bd57fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a0214151515614760576040805160e560020a62461bcd02815260206004820152602860248201527f737472696e672063616e6e6f7420636f6e7461696e20636f6e7365637574697660448201527f6520737061636573000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8215801561480c575084517f30000000000000000000000000000000000000000000000000000000000000009086908490811061479957fe5b90602001015160f860020a900460f860020a02600160f860020a031916108061480c575084517f3900000000000000000000000000000000000000000000000000000000000000908690849081106147ed57fe5b90602001015160f860020a900460f860020a02600160f860020a031916115b1561481657600192505b600190910190614356565b60018315151461487b576040805160e560020a62461bcd02815260206004820152601d60248201527f737472696e672063616e6e6f74206265206f6e6c79206e756d62657273000000604482015290519081900360640190fd5b505050506020015192915050565b6000828211156148e3576040805160e560020a62461bcd02815260206004820152601360248201527f536166654d61746820737562206661696c656400000000000000000000000000604482015290519081900360640190fd5b50900390565b60006148f58383613e91565b9050600081111561497b5760008381526005602052604090206003015461492390829063ffffffff613cd616565b600084815260056020908152604080832060030193909355600681528282208583529052206004015461495d90829063ffffffff613cd616565b60008481526006602090815260408083208684529091529020600401555b505050565b6000828152600660209081526040808320848452909152812060038101546005909101549091821115614a32576000848152600560205260409020600401546149d590829061189e908563ffffffff613cd616565b6000858152600560208181526040808420600401949094556006815283832087845290529190200154614a1490829061189e908563ffffffff613cd616565b60008581526006602090815260408083208784529091529020600501555b50505050565b6000613d698383615666565b60008181526019602052604081206001015442919082118015614a735750600083815260196020526040902054155b15614aa057614a9982613514600f670de0b6b3a7640000885b049063ffffffff613e1a16565b9050614acd565b600083815260196020526040902060010154614aca90613514600f670de0b6b3a764000088614a8c565b90505b614adf61a8c08363ffffffff613cd616565b811015614aff576000838152601960205260409020600101819055614a32565b614b1161a8c08363ffffffff613cd616565b60008481526019602052604090206001015550505050565b600084815260196020526040812060058101546004909101540190693f870857a3e0e3800000808306919085830110614c5457506000868152601960209081526040808320600b01805490849055888452600590925290912060020154614b96908263ffffffff613cd616565b6000878152600560209081526040808320600201939093558982526019905220600b0154614bca908563ffffffff613cd616565b6000888152601960209081526040808320600b0193909355888252600581529082902080546001918201548451600160a060020a039092168252928101929092528183018a90526060820152608081018390524260a082015290517f714895308a465f8e2b47a676b0111d2699a483954ff0a223b021867cf45437e29181900360c00190a1614c89565b6000878152601960205260409020600b0154614c76908563ffffffff613cd616565b6000888152601960205260409020600b01555b50505050505050565b60008481526019602052604081206006015468056bc75e2d6310000090819006919084830110614db657506000858152601960209081526040808320600a01805490849055878452600590925290912060020154614cf6908263ffffffff613cd616565b6000868152600560209081526040808320600201939093558882526019905220600a0154614d2a908463ffffffff613cd616565b6000878152601960209081526040808320600a01939093558782526005815282822080546001909101548451600160a060020a039092168252918101919091528083018990526060810191909152608081018390524260a082015290517f714895308a465f8e2b47a676b0111d2699a483954ff0a223b021867cf45437e29181900360c00190a1610ef1565b6000868152601960205260409020600a0154614dd8908463ffffffff613cd616565b6000878152601960205260409020600a0155505050505050565b6000848152601960205260408120600581015460049091015401818082614e2787670de0b6b3a764000063ffffffff613e1a16565b811515614e3057fe5b60008a8152601960205260409020600d01549190049250614e57908363ffffffff613cd616565b6000898152601960205260409020600d0155670de0b6b3a7640000614e82838763ffffffff613e1a16565b811515614e8b57fe5b049050614ef0614ec782670de0b6b3a7640000613ee189601960008f8152602001908152602001600020600d0154613e1a90919063ffffffff16565b60008981526006602090815260408083208d84529091529020600401549063ffffffff613cd616565b60008881526006602090815260408083208c8452909152902060040155614f41670de0b6b3a7640000614f29848663ffffffff613e1a16565b811515614f3257fe5b8891900463ffffffff61488916565b98975050505050505050565b60006064614f6283600c63ffffffff613e1a16565b811515614f6b57fe5b601454600160a060020a03166000908152601860205260409020549190049150614f9b908263ffffffff613cd616565b601454600160a060020a03166000908152601860205260409020556064614fc983600863ffffffff613e1a16565b811515614fd257fe5b601554600160a060020a03166000908152601860205260409020549190049150615002908263ffffffff613cd616565b601554600160a060020a0316600090815260186020526040902055606461503083602863ffffffff613e1a16565b81151561503957fe5b601654600160a060020a03166000908152601860205260409020549190049150615069908263ffffffff613cd616565b601654600160a060020a0316600090815260186020526040902055606461509783602863ffffffff613e1a16565b8115156150a057fe5b601754600160a060020a031660009081526018602052604090205491900491506150d0908263ffffffff613cd616565b601754600160a060020a03166000908152601860205260409020555050565b6000808083606461510782600a63ffffffff613e1a16565b81151561511057fe5b04915061514782601860006009815b0154600160a060020a031681526020810191909152604001600020549063ffffffff613cd616565b600954600160a060020a0316600090815260186020526040902055600192505b600b831015613ef757606461518386600963ffffffff613e1a16565b81151561518c57fe5b0491506151a48260186000600987600b811061511f57fe5b60186000600986600b81106151b557fe5b0154600160a060020a031681526020810191909152604001600020556151e1818363ffffffff613eff16565b6001909301929050615167565b6000601482048282805b601482101561529d5750600081815260076020526040902054801561529257600081815260056020526040902060060154615239908563ffffffff613cd616565b60008281526005602090815260408083206006019390935584825260079052206003015461526d908563ffffffff613cd616565b60008381526007602052604090206003015561528f838563ffffffff613eff16565b92505b6001909101906151f8565b5090949350505050565b6000828152600560205260408120600881015460099091015434918491849082156153155760008381526006602081815260408084208d855290915290912001546152f8908663ffffffff613cd616565b60008481526006602081815260408084208e855290915290912001555b80156153645760008181526006602081815260408084208d85529091529091200154615347908663ffffffff613cd616565b60008281526006602081815260408084208e855290915290912001555b82158061538057506000838152600560205260409020600a0154155b1561538d57839550615570565b6000838152600560205260409020600a0154600114156154eb5760646153ba88604663ffffffff613e1a16565b8115156153c357fe5b60008a815260056020526040902060090154919004925090506153ec848363ffffffff613eff16565b60008481526006602090815260408083208d845290915290206003015490945061541c908363ffffffff613cd616565b60008481526006602090815260408083208d845290915290206003015580158061545857506000818152600560205260409020600a0154600214155b1561546557839550615570565b606461547888601e63ffffffff613e1a16565b81151561548157fe5b049150615494848363ffffffff613eff16565b60008281526006602090815260408083208d84529091529020600301549094506154c4908363ffffffff613cd616565b60008281526006602090815260408083208d84529091529020600301559294508492615570565b6000838152600560205260409020600a01546002141561556c57615515848863ffffffff613eff16565b60008481526006602090815260408083208d8452909152902060030154909450615545908863ffffffff613cd616565b60008481526006602090815260408083208d84529091529020600301559294508492615570565b8395505b50505050509392505050565b6000690a968163f0a57b400000808304908306828080806155ae6601c6bf5263400061351488655af3107a4000613e1a565b93508515156155d9576155d26601c6bf52634000670de0b6b3a76400008a04613e1a565b965061565b565b61560a670de0b6b3a764000086046155fe866601c6bf5263400063ffffffff61488916565b9063ffffffff613e1a16565b92506156266601c6bf52634000670de0b6b3a76400008a614a8c565b915061565161c3506155fe655af3107a400060026156488b613d5d8180613e1a565b811515614a8c57fe5b9050808284010196505b505050505050919050565b6000690a968163f0a57b400000830480828080805b8460c80185101561574a578761569f86600101690a968163f0a57b4000000261557c565b1061573f578415156156b457600093506156cc565b6156c985690a968163f0a57b4000000261557c565b93505b6156dc888563ffffffff61488916565b92506156ff6601c6bf5263400061351487655af3107a400063ffffffff613e1a16565b9150615718670de0b6b3a76400008385811515614a8c57fe5b9050615738690a968163f0a57b400000860282018a63ffffffff613eff16565b965061579a565b60019094019361567b565b6040805160e560020a62461bcd02815260206004820152601060248201527f746f6f206c617267652065746820696e00000000000000000000000000000000604482015290519081900360640190fd5b50505050505092915050565b60606040519081016040528060039060208202803883395091929150505600697473206e6f7420726561647920796574000000000000000000000000000000706f636b6574206c696e743a206e6f7420612076616c69642063757272656e636e6f20766974616c696b2c206e6f000000000000000000000000000000000000736f7272792068756d616e73206f6e6c79000000000000000000000000000000a165627a7a723058200dabeafccfe0dc6948bb3ca1534d4ab705378e9328fd0b97f1fbc1d00f9be24c0029"
}