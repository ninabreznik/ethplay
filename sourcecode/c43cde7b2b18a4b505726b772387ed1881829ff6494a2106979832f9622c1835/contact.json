{
  "address": "0x4c2524807188073516056eadd24753fb3cebf8ba",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ICHXAirdrop",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "500",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-28\n*/\n\npragma solidity 0.4.25;\n\n// File: contracts/commons/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: contracts/flavours/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\". It has two-stage ownership transfer.\n */\ncontract Ownable {\n\n    address public owner;\n    address public pendingOwner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyPendingOwner() {\n        require(msg.sender == pendingOwner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to prepare transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        pendingOwner = newOwner;\n    }\n\n    /**\n     * @dev Allows the pendingOwner address to finalize the transfer.\n     */\n    function claimOwnership() public onlyPendingOwner {\n        emit OwnershipTransferred(owner, pendingOwner);\n        owner = pendingOwner;\n        pendingOwner = address(0);\n    }\n}\n\n// File: contracts/flavours/Lockable.sol\n\n/**\n * @title Lockable\n * @dev Base contract which allows children to\n *      implement main operations locking mechanism.\n */\ncontract Lockable is Ownable {\n    event Lock();\n    event Unlock();\n\n    bool public locked = false;\n\n    /**\n     * @dev Modifier to make a function callable\n    *       only when the contract is not locked.\n     */\n    modifier whenNotLocked() {\n        require(!locked);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable\n     *      only when the contract is locked.\n     */\n    modifier whenLocked() {\n        require(locked);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to locke, triggers locked state\n     */\n    function lock() public onlyOwner whenNotLocked {\n        locked = true;\n        emit Lock();\n    }\n\n    /**\n     * @dev called by the owner\n     *      to unlock, returns to unlocked state\n     */\n    function unlock() public onlyOwner whenLocked {\n        locked = false;\n        emit Unlock();\n    }\n}\n\n// File: contracts/interface/ERC20Token.sol\n\ninterface ERC20Token {\n    function transferFrom(address from_, address to_, uint value_) external returns (bool);\n    function transfer(address to_, uint value_) external returns (bool);\n    function balanceOf(address owner_) external returns (uint);\n}\n\n// File: contracts/base/BaseAirdrop.sol\n\ncontract BaseAirdrop is Lockable {\n    using SafeMath for uint;\n\n    ERC20Token public token;\n\n    address public tokenHolder;\n\n    mapping(address => bool) public users;\n\n    event AirdropToken(address indexed to, uint amount);\n\n    constructor(address _token, address _tokenHolder) public {\n        require(_token != address(0) && _tokenHolder != address(0));\n        token = ERC20Token(_token);\n        tokenHolder = _tokenHolder;\n    }\n\n    function airdrop(uint8 v, bytes32 r, bytes32 s, uint amount) public whenNotLocked {\n        if (users[msg.sender] || ecrecover(prefixedHash(amount), v, r, s) != owner) {\n            revert();\n        }\n        users[msg.sender] = true;\n        token.transferFrom(tokenHolder, msg.sender, amount);\n        emit AirdropToken(msg.sender, amount);\n    }\n\n    function getAirdropStatus(address user) public constant returns (bool success) {\n        return users[user];\n    }\n\n    function originalHash(uint amount) internal view returns (bytes32) {\n        return keccak256(abi.encodePacked(\n                \"Signed for Airdrop\",\n                address(this),\n                address(token),\n                msg.sender,\n                amount\n            ));\n    }\n\n    function prefixedHash(uint amount) internal view returns (bytes32) {\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n        return keccak256(abi.encodePacked(prefix, originalHash(amount)));\n    }\n}\n\n// File: contracts/flavours/Withdrawal.sol\n\n/**\n * @title Withdrawal\n * @dev The Withdrawal contract has an owner address, and provides method for withdraw funds and tokens, if any\n */\ncontract Withdrawal is Ownable {\n\n    // withdraw funds, if any, only for owner\n    function withdraw() public onlyOwner {\n        owner.transfer(address(this).balance);\n    }\n\n    // withdraw stuck tokens, if any, only for owner\n    function withdrawTokens(address _someToken) public onlyOwner {\n        ERC20Token someToken = ERC20Token(_someToken);\n        uint balance = someToken.balanceOf(address(this));\n        someToken.transfer(owner, balance);\n    }\n}\n\n// File: contracts/flavours/SelfDestructible.sol\n\n/**\n * @title SelfDestructible\n * @dev The SelfDestructible contract has an owner address, and provides selfDestruct method\n * in case of deployment error.\n */\ncontract SelfDestructible is Ownable {\n\n    function selfDestruct(uint8 v, bytes32 r, bytes32 s) public onlyOwner {\n        if (ecrecover(prefixedHash(), v, r, s) != owner) {\n            revert();\n        }\n        selfdestruct(owner);\n    }\n\n    function originalHash() internal view returns (bytes32) {\n        return keccak256(abi.encodePacked(\n                \"Signed for Selfdestruct\",\n                address(this),\n                msg.sender\n            ));\n    }\n\n    function prefixedHash() internal view returns (bytes32) {\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n        return keccak256(abi.encodePacked(prefix, originalHash()));\n    }\n}\n\n// File: contracts/ICHXAirdrop.sol\n\n/**\n * @title ICHX token airdrop contract.\n */\ncontract ICHXAirdrop is BaseAirdrop, Withdrawal, SelfDestructible {\n\n    constructor(address _token, address _tokenHolder) public BaseAirdrop(_token, _tokenHolder) {\n        locked = true;\n    }\n\n    // Disable direct payments\n    function() external payable {\n        revert();\n    }\n}",
  "bytecode": "60806040526001805460a060020a60ff021916905534801561002057600080fd5b50604051604080610dff83398101604052805160209091015160008054600160a060020a031916331790558181600160a060020a0382161580159061006d5750600160a060020a03811615155b151561007857600080fd5b60028054600160a060020a03938416600160a060020a0319918216179091556003805492909316911617905550506001805460a060020a60ff02191674010000000000000000000000000000000000000000179055610d23806100dc6000396000f3006080604052600436106100da5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633ccfd60b81146100df578063420a83e7146100f657806349df728c146101275780634e71e0c8146101485780638da5cb5b1461015d578063a69df4b514610172578063a87430ba14610187578063caf91b30146101bc578063cf309012146101e0578063e30c3978146101f5578063eed7eaea1461020a578063f2fde38b1461022b578063f75e5d851461024c578063f83d08ba1461026d578063fc0c546a14610282575b600080fd5b3480156100eb57600080fd5b506100f4610297565b005b34801561010257600080fd5b5061010b6102ec565b60408051600160a060020a039092168252519081900360200190f35b34801561013357600080fd5b506100f4600160a060020a03600435166102fb565b34801561015457600080fd5b506100f461044a565b34801561016957600080fd5b5061010b6104d2565b34801561017e57600080fd5b506100f46104e1565b34801561019357600080fd5b506101a8600160a060020a036004351661056a565b604080519115158252519081900360200190f35b3480156101c857600080fd5b506100f460ff6004351660243560443560643561057f565b3480156101ec57600080fd5b506101a8610745565b34801561020157600080fd5b5061010b610766565b34801561021657600080fd5b506101a8600160a060020a0360043516610775565b34801561023757600080fd5b506100f4600160a060020a0360043516610793565b34801561025857600080fd5b506100f460ff600435166024356044356107ee565b34801561027957600080fd5b506100f461089e565b34801561028e57600080fd5b5061010b61093d565b600054600160a060020a031633146102ae57600080fd5b60008054604051600160a060020a0390911691303180156108fc02929091818181858888f193505050501580156102e9573d6000803e3d6000fd5b50565b600354600160a060020a031681565b600080548190600160a060020a0316331461031557600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051849350600160a060020a038416916370a082319160248083019260209291908290030181600087803b15801561037957600080fd5b505af115801561038d573d6000803e3d6000fd5b505050506040513d60208110156103a357600080fd5b505160008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810185905290519394509085169263a9059cbb92604480840193602093929083900390910190829087803b15801561041957600080fd5b505af115801561042d573d6000803e3d6000fd5b505050506040513d602081101561044357600080fd5b5050505050565b600154600160a060020a0316331461046157600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031681565b600054600160a060020a031633146104f857600080fd5b60015474010000000000000000000000000000000000000000900460ff16151561052157600080fd5b6001805474ff0000000000000000000000000000000000000000191690556040517f70e3fffea7bbb557facdee48ed7f7af5179030adef9ad0c876df039a718f359e90600090a1565b60046020526000908152604090205460ff1681565b60015474010000000000000000000000000000000000000000900460ff16156105a757600080fd5b3360009081526004602052604090205460ff16806106435750600054600160a060020a031660016105d78361094c565b60408051600080825260208083018085529490945260ff8a16828401526060820189905260808201889052915160a08083019493601f198301938390039091019190865af115801561062d573d6000803e3d6000fd5b50505060206040510351600160a060020a031614155b1561064d57600080fd5b336000818152600460208181526040808420805460ff1916600117905560025460035482517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a039182169581019590955260248501969096526044840187905290519416936323b872dd936064808501948390030190829087803b1580156106dd57600080fd5b505af11580156106f1573d6000803e3d6000fd5b505050506040513d602081101561070757600080fd5b505060408051828152905133917fb6b09d42fae5c5eedc2e2b4c72342ea7f76d69f00732b2183cf65d40b5afaeb3919081900360200190a250505050565b60015474010000000000000000000000000000000000000000900460ff1681565b600154600160a060020a031681565b600160a060020a031660009081526004602052604090205460ff1690565b600054600160a060020a031633146107aa57600080fd5b600160a060020a03811615156107bf57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a0316331461080557600080fd5b600054600160a060020a0316600161081b610a52565b60408051600080825260208083018085529490945260ff8916828401526060820188905260808201879052915160a08083019493601f198301938390039091019190865af1158015610871573d6000803e3d6000fd5b50505060206040510351600160a060020a031614151561089057600080fd5b600054600160a060020a0316ff5b600054600160a060020a031633146108b557600080fd5b60015474010000000000000000000000000000000000000000900460ff16156108dd57600080fd5b6001805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517f46620e39f4e119bf05f13544f8ef38338fc06c17f6b731c7f95bee356572db9690600090a1565b600254600160a060020a031681565b60408051808201909152601c81527f19457468657265756d205369676e6564204d6573736167653a0a33320000000060208201526000908061098d84610b57565b6040516020018083805190602001908083835b602083106109bf5780518252601f1990920191602091820191016109a0565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b60208310610a1f5780518252601f199092019160209182019101610a00565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209695505050505050565b60408051808201909152601c81527f19457468657265756d205369676e6564204d6573736167653a0a333200000000602082015260009080610a92610c38565b6040516020018083805190602001908083835b60208310610ac45780518252601f199092019160209182019101610aa5565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b60208310610b245780518252601f199092019160209182019101610b05565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902091505090565b600254604080517f5369676e656420666f722041697264726f7000000000000000000000000000006020808301919091526c010000000000000000000000003081026032840152600160a060020a03909416840260468301523393909302605a820152606e80820185905282518083039091018152608e9091019182905280516000939192918291908401908083835b60208310610c065780518252601f199092019160209182019101610be7565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b604080517f5369676e656420666f722053656c6664657374727563740000000000000000006020808301919091526c0100000000000000000000000030810260378401523302604b8301528251603f818403018152605f909201928390528151600093918291908401908083835b60208310610cc55780518252601f199092019160209182019101610ca6565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050905600a165627a7a72305820f52e07e516aa1367fdc8d57accd44c672e53356dffe0f5ee44c55f17275195dc0029000000000000000000000000a573661b5fb2063d7ab12336ee24589f7a79fdab000000000000000000000000521aff68ac6f05f36ae75fc786eec3b310baf68b",
  "constructorArguments": "000000000000000000000000a573661b5fb2063d7ab12336ee24589f7a79fdab000000000000000000000000521aff68ac6f05f36ae75fc786eec3b310baf68b"
}