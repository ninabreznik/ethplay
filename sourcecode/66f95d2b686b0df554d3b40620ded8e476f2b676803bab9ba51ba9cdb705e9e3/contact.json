{
  "address": "0x1acf991d7ced97b558c7a87f4bd7afd75e15fcb7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TIX",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-01\n*/\n\npragma solidity ^0.4.18;\n\n/*\nTTTTTTTTTTTTTTTTTTTTTTT  iiii                                                                                              \nT:::::::::::::::::::::T i::::i                                                                                             \nT:::::::::::::::::::::T  iiii                                                                                              \nT:::::TT:::::::TT:::::T                                                                                                    \nTTTTTT  T:::::T  TTTTTTiiiiiii xxxxxxx      xxxxxxxggggggggg   ggggguuuuuu    uuuuuu rrrrr   rrrrrrrrr   uuuuuu    uuuuuu  \n        T:::::T        i:::::i  x:::::x    x:::::xg:::::::::ggg::::gu::::u    u::::u r::::rrr:::::::::r  u::::u    u::::u  \n        T:::::T         i::::i   x:::::x  x:::::xg:::::::::::::::::gu::::u    u::::u r:::::::::::::::::r u::::u    u::::u  \n        T:::::T         i::::i    x:::::xx:::::xg::::::ggggg::::::ggu::::u    u::::u rr::::::rrrrr::::::ru::::u    u::::u  \n        T:::::T         i::::i     x::::::::::x g:::::g     g:::::g u::::u    u::::u  r:::::r     r:::::ru::::u    u::::u  \n        T:::::T         i::::i      x::::::::x  g:::::g     g:::::g u::::u    u::::u  r:::::r     rrrrrrru::::u    u::::u  \n        T:::::T         i::::i      x::::::::x  g:::::g     g:::::g u::::u    u::::u  r:::::r            u::::u    u::::u  \n        T:::::T         i::::i     x::::::::::x g::::::g    g:::::g u:::::uuuu:::::u  r:::::r            u:::::uuuu:::::u  \n      TT:::::::TT      i::::::i   x:::::xx:::::xg:::::::ggggg:::::g u:::::::::::::::uur:::::r            u:::::::::::::::uu\n      T:::::::::T      i::::::i  x:::::x  x:::::xg::::::::::::::::g  u:::::::::::::::ur:::::r             u:::::::::::::::u\n      T:::::::::T      i::::::i x:::::x    x:::::xgg::::::::::::::g   uu::::::::uu:::ur:::::r              uu::::::::uu:::u\n      TTTTTTTTTTT      iiiiiiiixxxxxxx      xxxxxxx gggggggg::::::g     uuuuuuuu  uuuurrrrrrr                uuuuuuuu  uuuu\n                                                            g:::::g                                                        \n                                                gggggg      g:::::g                                                        \n                                                g:::::gg   gg:::::g                                                        \n                                                 g::::::ggg:::::::g                                                        \n                                                  gg:::::::::::::g                                                         \n                                                    ggg::::::ggg                                                           \n                                                       gggggg                                                              \n*/\n\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  function getOwner() public view returns (address) {\n    return owner;\n  }\n\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n}\n\ncontract TIX is StandardToken, Ownable {\n\n  using SafeMath for uint256;\n\n  string public constant name = \"Tixguru Token\";\n  string public constant symbol = \"TIX\";\n  uint256 public constant decimals = 3;\n  uint256 internal constant wei_to_token = 10 ** 15;\n\n  uint256 public rate = 10000;\n  uint256 public minimum = 1 * 10 ** 11;\n  uint256 public wei_raised = 0;\n  uint256 public token_issued = 0;\n  uint256 public start_time = 0;\n  uint256 public end_time = 0;\n  uint256 public period = 0;\n  uint256[] public discount_period;\n  uint256[] public discount;\n  bool public tradeable = false;\n  bool public issuable = false;\n\n  address internal vault;\n\n\n  event LogTokenBought(address indexed sender, address indexed buyer, uint256 value, uint256 tokens, uint256 timestamp);\n  event LogVaultChanged(address indexed new_vault, uint256 timestamp);\n  event LogStarted(uint256 timestamp);\n  event LogTradingEnabled(uint256 timestamp);\n  event LogTradingDisabled(uint256 timestamp);\n  event LogTokenBurned(address indexed burner, uint256 indexed tokens, uint256 timestamp);\n  event LogPreSaled(address indexed buyer, uint256 tokens, uint256 timestamp);\n  event LogDiscountSet(uint256[] indexed period, uint256[] indexed discount, uint256 timestamp);\n\n\n  modifier validAddress(address addr) {\n    require(addr != address(0));\n    _;\n  }\n\n  function disableTrading() external onlyOwner returns (bool) {\n    tradeable = false;\n    LogTradingDisabled(now);\n    return true;\n  }\n\n\n  function TIX(uint256 cap, address _vault, uint256[] _period, uint256[] _discount)\n  public\n  validAddress(_vault)\n  validArray(_period)\n  validArray(_discount) {\n\n    uint256 decimal_unit = 10 ** 3;\n    totalSupply_ = cap.mul(decimal_unit);\n    vault = _vault;\n    discount_period = _period;\n    discount = _discount;\n\n    balances[0x8b26E715fF12B0Bf37D504f7Bf0ee918Cd83C67B] = totalSupply_.mul(3).div(10);\n    balances[owner] = totalSupply_.mul(7).div(10);\n\n    for (uint256 i = 0; i < discount_period.length; i++) {\n      period = period.add(discount_period[i]);\n    }\n  }\n\n  function deposit() internal {\n    vault.transfer(msg.value);\n  }\n\n  modifier validArray(uint[] array) {\n    require(array.length > 0);\n    _;\n  }\n\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  function buyTokens(address buyer) public validAddress(buyer) payable {\n    require(issuable);\n\n    uint256 tokens = getTokenAmount(msg.value);\n\n    require(canIssue(tokens));\n\n    wei_raised = wei_raised.add(msg.value);\n    token_issued = token_issued.add(tokens);\n    balances[owner] = balances[owner].sub(tokens);\n    balances[buyer] = balances[buyer].add(tokens);\n\n    LogTokenBought(msg.sender, buyer, msg.value, tokens, now);\n\n    deposit();\n  }\n\n  function setDiscount(uint256[] _period, uint256[] _discount)\n  external\n  onlyVault\n  validArray(_period)\n  validArray(_discount)\n  returns (bool) {\n\n    discount_period = _period;\n    discount = _discount;\n\n    period = 0;\n    for (uint256 i = 0; i < discount_period.length; i++) {\n      period = period.add(discount_period[i]);\n    }\n\n    if (start_time != 0) {\n      uint256 time_point = now;\n      start_time = time_point;\n      end_time = time_point + period;\n\n      uint256 tmp_time = time_point;\n      for (i = 0; i < discount_period.length; i++) {\n        tmp_time = tmp_time.add(discount_period[i]);\n        discount_period[i] = tmp_time;\n      }\n    }\n\n    LogDiscountSet( _period, _discount, time_point);\n    return true;\n  }\n\n  function getTokenAmount(uint256 _value) public view returns (uint256) {\n    require(_value >= minimum);\n\n    uint256 buy_time = now;\n    uint256 numerator = 0;\n\n    for (uint256 i = 0; i < discount_period.length; i++) {\n      if (buy_time <= discount_period[i]) {\n        numerator = discount[i];\n        break;\n      }\n    }\n\n    if (numerator == 0) {\n      numerator = 100;\n    }\n\n    return _value.mul(rate).mul(numerator).div(100).div(wei_to_token);\n  }\n\n  function enableTrading() external onlyOwner returns (bool) {\n    tradeable = true;\n    LogTradingEnabled(now);\n    return true;\n  }\n\n  function transferOwnership(address newOwner) public onlyOwner {\n\n    balances[newOwner] = balances[owner];\n    delete balances[owner];\n    super.transferOwnership(newOwner);\n  }\n\n  function start() external onlyOwner returns (bool) {\n    require(start_time == 0);\n\n    uint256 time_point = now;\n\n    start_time = time_point;\n    end_time = time_point + period;\n\n    for (uint256 i = 0; i < discount_period.length; i++) {\n      time_point = time_point.add(discount_period[i]);\n      discount_period[i] = time_point;\n    }\n\n    issuable = true;\n\n    LogStarted(start_time);\n\n    return true;\n  }\n\n\n  function changeVault(address _vault) external onlyVault returns (bool) {\n    vault = _vault;\n    LogVaultChanged(_vault, now);\n    return true;\n  }\n\n  function burnTokens(uint256 tokens) external onlyVault returns (bool) {\n    balances[owner] = balances[owner].sub(tokens);\n    totalSupply_ = totalSupply_.sub(tokens);\n    LogTokenBurned(owner, tokens, now);\n    return true;\n  }\n  function transferFrom(address _from, address _to, uint256 tokens) public returns (bool) {\n    require(tradeable == true);\n    return super.transferFrom(_from, _to, tokens);\n  }\n\n\n  function transfer(address _to, uint256 tokens) public returns (bool) {\n    require(tradeable == true);\n    return super.transfer(_to, tokens);\n  }\n\n\n  function canIssue(uint256 tokens) internal returns (bool){\n    if (start_time == 0 || end_time <= now) {\n      issuable = false;\n      return false;\n    }\n    if (token_issued.add(tokens) > balances[owner]) {\n      issuable = false;\n      return false;\n    }\n\n    return true;\n  }\n  modifier onlyVault() {\n    require(msg.sender == vault);\n    _;\n  }\n}",
  "bytecode": "608060405261271060045564174876e80060055560006006819055600781905560088190556009819055600a55600d805461ffff191690553480156200004457600080fd5b50604051620018f7380380620018f78339810160409081528151602083015191830151606084015160038054600160a060020a03191633600160a060020a03908116919091179091559294918201929101906000908190859081161515620000ab57600080fd5b8460008151111515620000bd57600080fd5b8460008151111515620000cf57600080fd5b6103e89450620000ee8986640100000000620014486200026182021704565b600155600d80546201000060b060020a03191662010000600160a060020a038b160217905586516200012890600b9060208a0190620002c3565b5085516200013e90600c906020890190620002c3565b506001546200017a90600a9062000165906003640100000000620014486200026182021704565b90640100000000620014736200029b82021704565b738b26e715ff12b0bf37d504f7bf0ee918cd83c67b60009081526020527f6b1df3d0db66c8971b13eb4ebdb60ed23e65e3a37af5afcdbd3bdd6e8c58069b55600154620001df90600a9062000165906007640100000000620014486200026182021704565b600354600160a060020a031660009081526020819052604081209190915593505b600b54841015620002525762000243600b858154811015156200021f57fe5b600091825260209091200154600a54906401000000006200116d620002b382021704565b600a5560019093019262000200565b50505050505050505062000333565b60008083151562000276576000915062000294565b508282028284828115156200028757fe5b04146200029057fe5b8091505b5092915050565b6000808284811515620002aa57fe5b04949350505050565b6000828201838110156200029057fe5b82805482825590600052602060002090810192821562000301579160200282015b8281111562000301578251825591602001919060010190620002e4565b506200030f92915062000313565b5090565b6200033091905b808211156200030f57600081556001016200031a565b90565b6115b480620003436000396000f3006080604052600436106101a05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101ab578063095ea7b3146102355780630b1d07de1461026d578063162433561461029757806317700f01146102ac57806318160ddd146102c157806323b872dd146102d65780632c4e722e14610300578063313ce56714610315578063366659f91461032a5780633aedf90a1461034257806352d6804d1461035757806360e232a91461036c578063661884631461038d5780636d1b229d146103b157806370a08231146103c9578063834ee417146103ea578063893d20e8146103ff5780638a8c523c146104305780638da5cb5b1461044557806395d89b411461045a578063a9059cbb1461046f578063baf3005114610493578063be9a6555146104a8578063c2507ac1146104bd578063d73dd623146104d5578063dd62ed3e146104f9578063eba0184f14610520578063ec8ac4d814610535578063ef78d4fd14610549578063f2fde38b1461055e578063f3737ffd1461057f578063f5ac9db6146105ab575b6101a9336105c0565b005b3480156101b757600080fd5b506101c061070b565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101fa5781810151838201526020016101e2565b50505050905090810190601f1680156102275780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024157600080fd5b50610259600160a060020a0360043516602435610742565b604080519115158252519081900360200190f35b34801561027957600080fd5b506102856004356107ac565b60408051918252519081900360200190f35b3480156102a357600080fd5b506102856107cb565b3480156102b857600080fd5b506102596107d1565b3480156102cd57600080fd5b50610285610833565b3480156102e257600080fd5b50610259600160a060020a0360043581169060243516604435610839565b34801561030c57600080fd5b50610285610863565b34801561032157600080fd5b50610285610869565b34801561033657600080fd5b5061028560043561086e565b34801561034e57600080fd5b5061028561087c565b34801561036357600080fd5b50610285610882565b34801561037857600080fd5b50610259600160a060020a0360043516610888565b34801561039957600080fd5b50610259600160a060020a036004351660243561091e565b3480156103bd57600080fd5b50610259600435610a19565b3480156103d557600080fd5b50610285600160a060020a0360043516610ae4565b3480156103f657600080fd5b50610285610aff565b34801561040b57600080fd5b50610414610b05565b60408051600160a060020a039092168252519081900360200190f35b34801561043c57600080fd5b50610259610b14565b34801561045157600080fd5b50610414610b78565b34801561046657600080fd5b506101c0610b87565b34801561047b57600080fd5b50610259600160a060020a0360043516602435610bbe565b34801561049f57600080fd5b50610285610be6565b3480156104b457600080fd5b50610259610bec565b3480156104c957600080fd5b50610285600435610cd7565b3480156104e157600080fd5b50610259600160a060020a0360043516602435610da1565b34801561050557600080fd5b50610285600160a060020a0360043581169060243516610e43565b34801561052c57600080fd5b50610259610e6e565b6101a9600160a060020a03600435166105c0565b34801561055557600080fd5b50610285610e7c565b34801561056a57600080fd5b506101a9600160a060020a0360043516610e82565b34801561058b57600080fd5b506102596024600480358281019290820135918135918201910135610edc565b3480156105b757600080fd5b506102596110e8565b600081600160a060020a03811615156105d857600080fd5b600d54610100900460ff1615156105ee57600080fd5b6105f734610cd7565b9150610602826110f1565b151561060d57600080fd5b600654610620903463ffffffff61116d16565b600655600754610636908363ffffffff61116d16565b600755600354600160a060020a0316600090815260208190526040902054610664908363ffffffff61117c16565b600354600160a060020a03908116600090815260208190526040808220939093559085168152205461069c908363ffffffff61116d16565b600160a060020a0380851660008181526020818152604091829020949094558051348152938401869052428482015251909233909216917f2a70e44510f66528a48e2272f397cf65ce712dc5c0bc597619fea7d02f8480d8919081900360600190a361070661118e565b505050565b60408051808201909152600d81527f5469786775727520546f6b656e00000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600c8054829081106107ba57fe5b600091825260209091200154905081565b60095481565b60035460009033600160a060020a039081169116146107ef57600080fd5b600d805460ff191690556040805142815290517faa18c4d6c900b8d2e122fdc85df488f2060bfb261aaf95f9d7e7a826bca657de9181900360200190a15060015b90565b60015490565b600d5460009060ff16151560011461085057600080fd5b61085b8484846111cf565b949350505050565b60045481565b600381565b600b8054829081106107ba57fe5b60065481565b60055481565b600d5460009033600160a060020a039081166201000090920416146108ac57600080fd5b600d8054600160a060020a03841662010000810275ffffffffffffffffffffffffffffffffffffffff000019909216919091179091556040805142815290517fcb81cf569e8f1d9f5f8d7a4fdc594cd5b8af8c168dc74993a8f80559147fcb4f9181900360200190a25060015b919050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561097b57600160a060020a0333811660009081526002602090815260408083209388168352929052908120556109b2565b61098b818463ffffffff61117c16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902054825190815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3600191505b5092915050565b600d5460009033600160a060020a03908116620100009092041614610a3d57600080fd5b600354600160a060020a0316600090815260208190526040902054610a68908363ffffffff61117c16565b600354600160a060020a0316600090815260208190526040902055600154610a96908363ffffffff61117c16565b6001556003546040805142815290518492600160a060020a0316917f566456d1eef1b9414f2950eef564728947333704a3c681519aefe223eb47dcfc919081900360200190a3506001919050565b600160a060020a031660009081526020819052604090205490565b60085481565b600354600160a060020a031690565b60035460009033600160a060020a03908116911614610b3257600080fd5b600d805460ff191660011790556040805142815290517f5a5a3cb8f702ff49d9c7487e10733dc67c3df882c6b71801979280ec1b12f8ab9181900360200190a150600190565b600354600160a060020a031681565b60408051808201909152600381527f5449580000000000000000000000000000000000000000000000000000000000602082015281565b600d5460009060ff161515600114610bd557600080fd5b610bdf838361134f565b9392505050565b60075481565b6003546000908190819033600160a060020a03908116911614610c0e57600080fd5b60085415610c1b57600080fd5b5050426008819055600a54810160095560005b600b54811015610c8a57610c64600b82815481101515610c4a57fe5b90600052602060002001548361116d90919063ffffffff16565b915081600b82815481101515610c7657fe5b600091825260209091200155600101610c2e565b600d805461ff00191661010017905560085460408051918252517fbb6ef7768abaad71c51a323ba0780298544abc578092a6d23f9d4060684bc7b59181900360200190a160019250505090565b6000806000806005548510151515610cee57600080fd5b5042915060009050805b600b54811015610d4b57600b805482908110610d1057fe5b906000526020600020015483111515610d4357600c805482908110610d3157fe5b90600052602060002001549150610d4b565b600101610cf8565b811515610d5757606491505b610d9866038d7ea4c68000610d8c6064610d8c86610d806004548c61144890919063ffffffff16565b9063ffffffff61144816565b9063ffffffff61147316565b95945050505050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610dd9908363ffffffff61116d16565b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600d54610100900460ff1681565b600a5481565b60035433600160a060020a03908116911614610e9d57600080fd5b60038054600160a060020a03908116600090815260208190526040808220548584168352818320559254909116815290812055610ed98161148a565b50565b600d5460009081908190819033600160a060020a03908116620100009092041614610f0657600080fd5b878780806020026020016040519081016040528093929190818152602001838360200280828437505084516000109350610f439250505057600080fd5b868680806020026020016040519081016040528093929190818152602001838360200280828437505084516000109350610f809250505057600080fd5b610f8c600b8b8b611523565b50610f99600c8989611523565b506000600a81905594505b600b54851015610fea57610fdc600b86815481101515610fc057fe5b9060005260206000200154600a5461116d90919063ffffffff16565b600a55600190940193610fa4565b6008541561106957426008819055600a5481016009556000955093508392505b600b5485101561106957611040600b8681548110151561102657fe5b90600052602060002001548461116d90919063ffffffff16565b925082600b8681548110151561105257fe5b60009182526020909120015560019094019361100a565b8787604051808383602002808284376040519201829003822094508e93508d9250819050836020840280828437604080519190930181900381208b825292519295507f17eae2585208ccc8d45bacfcdc23ff71e4b15eb307c4c9e3836853976ac6d3ec9450829003602001925050a35060019998505050505050505050565b600d5460ff1681565b60006008546000148061110657504260095411155b1561111e5750600d805461ff00191690556000610919565b600354600160a060020a031660009081526020819052604090205460075461114c908463ffffffff61116d16565b11156111655750600d805461ff00191690556000610919565b506001919050565b600082820183811015610bdf57fe5b60008282111561118857fe5b50900390565b600d54604051600160a060020a036201000090920491909116903480156108fc02916000818181858888f19350505050158015610ed9573d6000803e3d6000fd5b6000600160a060020a03831615156111e657600080fd5b600160a060020a03841660009081526020819052604090205482111561120b57600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561123e57600080fd5b600160a060020a038416600090815260208190526040902054611267908363ffffffff61117c16565b600160a060020a03808616600090815260208190526040808220939093559085168152205461129c908363ffffffff61116d16565b600160a060020a03808516600090815260208181526040808320949094558783168252600281528382203390931682529190915220546112e2908363ffffffff61117c16565b600160a060020a038086166000818152600260209081526040808320338616845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b6000600160a060020a038316151561136657600080fd5b600160a060020a03331660009081526020819052604090205482111561138b57600080fd5b600160a060020a0333166000908152602081905260409020546113b4908363ffffffff61117c16565b600160a060020a0333811660009081526020819052604080822093909355908516815220546113e9908363ffffffff61116d16565b600160a060020a03808516600081815260208181526040918290209490945580518681529051919333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350600192915050565b60008083151561145b5760009150610a12565b5082820282848281151561146b57fe5b0414610bdf57fe5b600080828481151561148157fe5b04949350505050565b60035433600160a060020a039081169116146114a557600080fd5b600160a060020a03811615156114ba57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b82805482825590600052602060002090810192821561155e579160200282015b8281111561155e578235825591602001919060010190611543565b5061156a92915061156e565b5090565b61083091905b8082111561156a57600081556001016115745600a165627a7a7230582043bca7049be4e3bb18cbae7334e9a6a2c38fd48d58402e48d0eb5cc96c14e5940029000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000f2d396cd1f96199bd422c3cc50e3513ca33bd48c00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000d2f0000000000000000000000000000000000000000000000000000000000000d2f0000000000000000000000000000000000000000000000000000000000000d2f0000000000000000000000000000000000000000000000000000000000000d2f000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008e000000000000000000000000000000000000000000000000000000000000007d000000000000000000000000000000000000000000000000000000000000006f0000000000000000000000000000000000000000000000000000000000000064",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000f2d396cd1f96199bd422c3cc50e3513ca33bd48c00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000d2f0000000000000000000000000000000000000000000000000000000000000d2f0000000000000000000000000000000000000000000000000000000000000d2f0000000000000000000000000000000000000000000000000000000000000d2f000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008e000000000000000000000000000000000000000000000000000000000000007d000000000000000000000000000000000000000000000000000000000000006f0000000000000000000000000000000000000000000000000000000000000064"
}