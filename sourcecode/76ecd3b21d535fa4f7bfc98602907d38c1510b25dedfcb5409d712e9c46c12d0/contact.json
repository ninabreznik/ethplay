{
  "address": "0x9fadea1aff842d407893e21dbd0e2017b4c287b6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PGF500Token",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-23\n*/\n\npragma solidity ^0.4.21;\n\n// File: contracts\\zeppelin-solidity\\contracts\\ownership\\Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: contracts\\zeppelin-solidity\\contracts\\ownership\\Whitelist.sol\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n * @dev This simplifies the implementation of \"user permissions\".\n */\ncontract Whitelist is Ownable {\n  mapping(address => bool) public whitelist;\n  \n  event WhitelistedAddressAdded(address addr);\n  event WhitelistedAddressRemoved(address addr);\n\n  /**\n   * @dev Throws if called by any account that's not whitelisted.\n   */\n  modifier onlyWhitelisted() {\n    require(whitelist[msg.sender]);\n    _;\n  }\n\n  /**\n   * @dev add an address to the whitelist\n   * @param addr address\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist \n   */\n  function addAddressToWhitelist(address addr) onlyOwner public returns(bool success) {\n    if (!whitelist[addr]) {\n      whitelist[addr] = true;\n      emit WhitelistedAddressAdded(addr);\n      success = true; \n    }\n  }\n\n  /**\n   * @dev add addresses to the whitelist\n   * @param addrs addresses\n   * @return true if at least one address was added to the whitelist, \n   * false if all addresses were already in the whitelist  \n   */\n  function addAddressesToWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n    for (uint256 i = 0; i < addrs.length; i++) {\n      if (addAddressToWhitelist(addrs[i])) {\n        success = true;\n      }\n    }\n  }\n\n  /**\n   * @dev remove an address from the whitelist\n   * @param addr address\n   * @return true if the address was removed from the whitelist, \n   * false if the address wasn't in the whitelist in the first place \n   */\n  function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) {\n    if (whitelist[addr]) {\n      whitelist[addr] = false;\n      emit WhitelistedAddressRemoved(addr);\n      success = true;\n    }\n  }\n\n  /**\n   * @dev remove addresses from the whitelist\n   * @param addrs addresses\n   * @return true if at least one address was removed from the whitelist, \n   * false if all addresses weren't in the whitelist in the first place\n   */\n  function removeAddressesFromWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n    for (uint256 i = 0; i < addrs.length; i++) {\n      if (removeAddressFromWhitelist(addrs[i])) {\n        success = true;\n      }\n    }\n  }\n\n}\n\n// File: contracts\\LockableWhitelisted.sol\n\n/**\n * @dev A Whitelist contract that can be locked and unlocked. Provides a modifier\n * to check for locked state plus functions and events. The contract is never locked for\n * whitelisted addresses. The contracts starts off unlocked and can be locked and\n * then unlocked a single time. Once unlocked, the contract can never be locked back.\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract LockableWhitelisted is Whitelist {\n  event Locked();\n  event Unlocked();\n\n  bool public locked = false;\n  bool private unlockedOnce = false;\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not locked\n   * or the caller is whitelisted.\n   */\n  modifier whenNotLocked(address _address) {\n    require(!locked || whitelist[_address]);\n    _;\n  }\n\n  /**\n   * @dev Returns true if the specified address is whitelisted.\n   * @param _address The address to check for whitelisting status.\n   */\n  function isWhitelisted(address _address) public view returns (bool) {\n    return whitelist[_address];\n  }\n\n  /**\n   * @dev Called by the owner to lock.\n   */\n  function lock() onlyOwner public {\n    require(!unlockedOnce);\n    if (!locked) {\n      locked = true;\n      emit Locked();\n    }\n  }\n\n  /**\n   * @dev Called by the owner to unlock.\n   */\n  function unlock() onlyOwner public {\n    if (locked) {\n      locked = false;\n      unlockedOnce = true;\n      emit Unlocked();\n    }\n  }\n}\n\n// File: contracts\\zeppelin-solidity\\contracts\\math\\SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    require(_value <= balances[msg.sender]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(burner, _value);\n    emit Transfer(burner, address(0), _value);\n  }\n}\n\n// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\DetailedERC20.sol\n\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: contracts\\PGF500Token.sol\n\ncontract PGF500Token is BurnableToken, MintableToken, DetailedERC20, LockableWhitelisted {\n\n  uint256 constant internal DECIMALS = 18;\n\n  function PGF500Token (uint256 _initialSupply) public\n    BurnableToken()\n    MintableToken()\n    DetailedERC20('PGF500 Token', 'PGF7T', uint8(DECIMALS))\n    LockableWhitelisted()\n   {\n    require(_initialSupply > 0);\n    mint(owner, _initialSupply);\n    finishMinting();\n    addAddressToWhitelist(owner);\n    lock();\n  }\n\n  function transfer(address _to, uint256 _value) public whenNotLocked(msg.sender) returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotLocked(_from) returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotLocked(msg.sender) returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotLocked(msg.sender) returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotLocked(msg.sender) returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n\n  function transferOwnership(address _newOwner) public onlyOwner {\n    if (owner != _newOwner) {\n      addAddressToWhitelist(_newOwner);\n      removeAddressFromWhitelist(owner);\n    }\n    super.transferOwnership(_newOwner);\n  }\n\n  /**\n  * @dev Transfers the same amount of tokens to up to 200 specified addresses.\n  * If the sender runs out of balance then the entire transaction fails.\n  * @param _to The addresses to transfer to.\n  * @param _value The amount to be transferred to each address.\n  */\n  function airdrop(address[] _to, uint256 _value) public whenNotLocked(msg.sender)\n  {\n    require(_to.length <= 200);\n    require(balanceOf(msg.sender) >= _value.mul(_to.length));\n\n    for (uint i = 0; i < _to.length; i++)\n    {\n      transfer(_to[i], _value);\n    }\n  }\n\n  /**\n  * @dev Transfers a variable amount of tokens to up to 200 specified addresses.\n  * If the sender runs out of balance then the entire transaction fails.\n  * For each address a value must be specified.\n  * @param _to The addresses to transfer to.\n  * @param _values The amounts to be transferred to the addresses.\n  */\n  function multiTransfer(address[] _to, uint256[] _values) public whenNotLocked(msg.sender)\n  {\n    require(_to.length <= 200);\n    require(_to.length == _values.length);\n\n    for (uint i = 0; i < _to.length; i++)\n    {\n      transfer(_to[i], _values[i]);\n    }\n  }\n// Proprietary a6f18ae3a419c6634596bee10ba51328\n}",
  "bytecode": "60806040526003805460a060020a60ff02191690556008805461ffff191690553480156200002c57600080fd5b5060405160208062001b8f83398101604081815291518282018352600c82527f50474635303020546f6b656e000000000000000000000000000000000000000060208084019182528451808601909552600585527f50474637540000000000000000000000000000000000000000000000000000009085015260038054600160a060020a03191633600160a060020a03161790558251919391601291620000d7916004919062000489565b508151620000ed90600590602085019062000489565b506006805460ff191660ff929092169190911790555050600081116200011257600080fd5b6003546200013390600160a060020a03168264010000000062000183810204565b5062000147640100000000620002b8810204565b506003546200016890600160a060020a031664010000000062000357810204565b506200017c640100000000620003fa810204565b506200052b565b60035460009033600160a060020a03908116911614620001a257600080fd5b60035474010000000000000000000000000000000000000000900460ff1615620001cb57600080fd5b600154620001e890836401000000006200129a6200047282021704565b600155600160a060020a0383166000908152602081905260409020546200021e90836401000000006200129a6200047282021704565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b60035460009033600160a060020a03908116911614620002d757600080fd5b60035474010000000000000000000000000000000000000000900460ff16156200030057600080fd5b6003805460a060020a60ff021916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a15060015b90565b60035460009033600160a060020a039081169116146200037657600080fd5b600160a060020a03821660009081526007602052604090205460ff161515620003f557600160a060020a038216600081815260076020908152604091829020805460ff19166001179055815192835290517fd1bba68c128cc3f427e5831b3c6f99f480b6efa6b9e80c757768f6124158cc3f9281900390910190a15060015b919050565b60035433600160a060020a039081169116146200041657600080fd5b600854610100900460ff16156200042c57600080fd5b60085460ff16151562000470576008805460ff191660011790556040517f0f2e5b6c72c6a4491efd919a9f9a409f324ef0708c11ee57d410c2cb06c0992b90600090a15b565b6000828201838110156200048257fe5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620004cc57805160ff1916838001178555620004fc565b82800160010185558215620004fc579182015b82811115620004fc578251825591602001919060010190620004df565b506200050a9291506200050e565b5090565b6200035491905b808211156200050a576000815560010162000515565b611654806200053b6000396000f3006080604052600436106101695763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461016e57806306fdde0314610197578063095ea7b31461022157806318160ddd146102455780631e89d5451461026c57806323b872dd146102fc57806324953eaa14610326578063286dd3f51461037b578063313ce5671461039c5780633af32abf146103c757806340c10f19146103e857806342966c681461040c578063661884631461042457806370a08231146104485780637b9417c8146104695780637d64bcb41461048a5780638da5cb5b1461049f57806395d89b41146104d05780639b19251a146104e5578063a69df4b514610506578063a9059cbb1461051b578063c204642c1461053f578063cf30901214610596578063d73dd623146105ab578063dd62ed3e146105cf578063e2ec6ec3146105f6578063f2fde38b1461064b578063f83d08ba1461066c575b600080fd5b34801561017a57600080fd5b50610183610681565b604080519115158252519081900360200190f35b3480156101a357600080fd5b506101ac6106a2565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101e65781810151838201526020016101ce565b50505050905090810190601f1680156102135780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022d57600080fd5b50610183600160a060020a0360043516602435610730565b34801561025157600080fd5b5061025a61077e565b60408051918252519081900360200190f35b34801561027857600080fd5b50604080516020600480358082013583810280860185019096528085526102fa95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506107849650505050505050565b005b34801561030857600080fd5b50610183600160a060020a0360043581169060243516604435610833565b34801561033257600080fd5b5060408051602060048035808201358381028086018501909652808552610183953695939460249493850192918291850190849080828437509497506108819650505050505050565b34801561038757600080fd5b50610183600160a060020a03600435166108e6565b3480156103a857600080fd5b506103b1610983565b6040805160ff9092168252519081900360200190f35b3480156103d357600080fd5b50610183600160a060020a036004351661098c565b3480156103f457600080fd5b50610183600160a060020a03600435166024356109aa565b34801561041857600080fd5b506102fa600435610ab7565b34801561043057600080fd5b50610183600160a060020a0360043516602435610ba2565b34801561045457600080fd5b5061025a600160a060020a0360043516610be6565b34801561047557600080fd5b50610183600160a060020a0360043516610c01565b34801561049657600080fd5b50610183610ca1565b3480156104ab57600080fd5b506104b4610d4b565b60408051600160a060020a039092168252519081900360200190f35b3480156104dc57600080fd5b506101ac610d5a565b3480156104f157600080fd5b50610183600160a060020a0360043516610db5565b34801561051257600080fd5b506102fa610dca565b34801561052757600080fd5b50610183600160a060020a0360043516602435610e2b565b34801561054b57600080fd5b50604080516020600480358082013583810280860185019096528085526102fa953695939460249493850192918291850190849080828437509497505093359450610e6f9350505050565b3480156105a257600080fd5b50610183610f1a565b3480156105b757600080fd5b50610183600160a060020a0360043516602435610f23565b3480156105db57600080fd5b5061025a600160a060020a0360043581169060243516610f67565b34801561060257600080fd5b506040805160206004803580820135838102808601850190965280855261018395369593946024949385019291829185019084908082843750949750610f929650505050505050565b34801561065757600080fd5b506102fa600160a060020a0360043516610ff1565b34801561067857600080fd5b506102fa61104e565b60035474010000000000000000000000000000000000000000900460ff1681565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107285780601f106106fd57610100808354040283529160200191610728565b820191906000526020600020905b81548152906001019060200180831161070b57829003601f168201915b505050505081565b600854600090339060ff16158061075f5750600160a060020a03811660009081526007602052604090205460ff165b151561076a57600080fd5b61077484846110c2565b91505b5092915050565b60015490565b600854600090339060ff1615806107b35750600160a060020a03811660009081526007602052604090205460ff165b15156107be57600080fd5b835160c810156107cd57600080fd5b82518451146107db57600080fd5b600091505b835182101561082d5761082184838151811015156107fa57fe5b90602001906020020151848481518110151561081257fe5b90602001906020020151610e2b565b506001909101906107e0565b50505050565b600854600090849060ff1615806108625750600160a060020a03811660009081526007602052604090205460ff165b151561086d57600080fd5b61087885858561112c565b95945050505050565b600354600090819033600160a060020a039081169116146108a157600080fd5b5060005b82518110156108e0576108ce83828151811015156108bf57fe5b906020019060200201516108e6565b156108d857600191505b6001016108a5565b50919050565b60035460009033600160a060020a0390811691161461090457600080fd5b600160a060020a03821660009081526007602052604090205460ff161561097e57600160a060020a038216600081815260076020908152604091829020805460ff19169055815192835290517ff1abf01a1043b7c244d128e8595cf0c1d10743b022b03a02dffd8ca3bf729f5a9281900390910190a15060015b919050565b60065460ff1681565b600160a060020a031660009081526007602052604090205460ff1690565b60035460009033600160a060020a039081169116146109c857600080fd5b60035474010000000000000000000000000000000000000000900460ff16156109f057600080fd5b600154610a03908363ffffffff61129a16565b600155600160a060020a038316600090815260208190526040902054610a2f908363ffffffff61129a16565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000916000805160206116098339815191529181900360200190a350600192915050565b600160a060020a033316600090815260208190526040812054821115610adc57600080fd5b5033600160a060020a038116600090815260208190526040902054610b0190836112b0565b600160a060020a038216600090815260208190526040902055600154610b2d908363ffffffff6112b016565b600155604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518381529051600091600160a060020a038416916000805160206116098339815191529181900360200190a35050565b600854600090339060ff161580610bd15750600160a060020a03811660009081526007602052604090205460ff165b1515610bdc57600080fd5b61077484846112c2565b600160a060020a031660009081526020819052604090205490565b60035460009033600160a060020a03908116911614610c1f57600080fd5b600160a060020a03821660009081526007602052604090205460ff16151561097e57600160a060020a038216600081815260076020908152604091829020805460ff19166001179055815192835290517fd1bba68c128cc3f427e5831b3c6f99f480b6efa6b9e80c757768f6124158cc3f9281900390910190a1506001919050565b60035460009033600160a060020a03908116911614610cbf57600080fd5b60035474010000000000000000000000000000000000000000900460ff1615610ce757600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107285780601f106106fd57610100808354040283529160200191610728565b60076020526000908152604090205460ff1681565b60035433600160a060020a03908116911614610de557600080fd5b60085460ff1615610e29576008805461ffff19166101001790556040517f19aad37188a1d3921e29eb3c66acf43d81975e107cb650d58cca878627955fd690600090a15b565b600854600090339060ff161580610e5a5750600160a060020a03811660009081526007602052604090205460ff165b1515610e6557600080fd5b61077484846113bb565b600854600090339060ff161580610e9e5750600160a060020a03811660009081526007602052604090205460ff165b1515610ea957600080fd5b835160c81015610eb857600080fd5b8351610ecb90849063ffffffff6114a216565b610ed433610be6565b1015610edf57600080fd5b600091505b835182101561082d57610f0e8483815181101515610efe57fe5b9060200190602002015184610e2b565b50600190910190610ee4565b60085460ff1681565b600854600090339060ff161580610f525750600160a060020a03811660009081526007602052604090205460ff165b1515610f5d57600080fd5b61077484846114cd565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600090819033600160a060020a03908116911614610fb257600080fd5b5060005b82518110156108e057610fdf8382815181101515610fd057fe5b90602001906020020151610c01565b15610fe957600191505b600101610fb6565b60035433600160a060020a0390811691161461100c57600080fd5b600354600160a060020a038281169116146110425761102a81610c01565b5060035461104090600160a060020a03166108e6565b505b61104b8161156f565b50565b60035433600160a060020a0390811691161461106957600080fd5b600854610100900460ff161561107e57600080fd5b60085460ff161515610e29576008805460ff191660011790556040517f0f2e5b6c72c6a4491efd919a9f9a409f324ef0708c11ee57d410c2cb06c0992b90600090a1565b600160a060020a03338116600081815260026020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b6000600160a060020a038316151561114357600080fd5b600160a060020a03841660009081526020819052604090205482111561116857600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561119b57600080fd5b600160a060020a0384166000908152602081905260409020546111c4908363ffffffff6112b016565b600160a060020a0380861660009081526020819052604080822093909355908516815220546111f9908363ffffffff61129a16565b600160a060020a038085166000908152602081815260408083209490945587831682526002815283822033909316825291909152205461123f908363ffffffff6112b016565b600160a060020a03808616600081815260026020908152604080832033861684528252918290209490945580518681529051928716939192600080516020611609833981519152929181900390910190a35060019392505050565b6000828201838110156112a957fe5b9392505050565b6000828211156112bc57fe5b50900390565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561131f57600160a060020a033381166000908152600260209081526040808320938816835292905290812055611356565b61132f818463ffffffff6112b016565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902054825190815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060019392505050565b6000600160a060020a03831615156113d257600080fd5b600160a060020a0333166000908152602081905260409020548211156113f757600080fd5b600160a060020a033316600090815260208190526040902054611420908363ffffffff6112b016565b600160a060020a033381166000908152602081905260408082209390935590851681522054611455908363ffffffff61129a16565b600160a060020a038085166000818152602081815260409182902094909455805186815290519193339093169260008051602061160983398151915292918290030190a350600192915050565b6000808315156114b55760009150610777565b508282028284828115156114c557fe5b04146112a957fe5b600160a060020a033381166000908152600260209081526040808320938616835292905290812054611505908363ffffffff61129a16565b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350600192915050565b60035433600160a060020a0390811691161461158a57600080fd5b600160a060020a038116151561159f57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820553aebb9c14a85f357bdf0a4be2b2bf7a89e623eace87407d87a8c200cc9dde60029000000000000000000000000000000000000000000eaeb56d96b579e9c000000",
  "constructorArguments": "000000000000000000000000000000000000000000eaeb56d96b579e9c000000"
}