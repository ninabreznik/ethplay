{
  "address": "0x578fa4ab3b27a94fe97bd52167f1b02da20d31e8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Ico",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-20\n*/\n\npragma solidity 0.4.24;\ncontract Owned {\n    /* Variables */\n    address public owner = msg.sender;\n    /* Constructor */\n    constructor(address _owner) public {\n        if ( _owner == 0x00 ) {\n            _owner = msg.sender;\n        }\n        owner = _owner;\n    }\n    /* Externals */\n    function replaceOwner(address _owner) external returns(bool) {\n        require( isOwner() );\n        owner = _owner;\n        return true;\n    }\n    /* Internals */\n    function isOwner() internal view returns(bool) {\n        return owner == msg.sender;\n    }\n    /* Modifiers */\n    modifier forOwner {\n        require( isOwner() );\n        _;\n    }\n}\nlibrary SafeMath {\n    /* Internals */\n    function add(uint256 a, uint256 b) internal pure returns(uint256 c) {\n        c = a + b;\n        assert( c >= a );\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns(uint256 c) {\n        c = a - b;\n        assert( c <= a );\n        return c;\n    }\n    function mul(uint256 a, uint256 b) internal pure returns(uint256 c) {\n        c = a * b;\n        assert( c == 0 || c / a == b );\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n        return a / b;\n    }\n    function pow(uint256 a, uint256 b) internal pure returns(uint256 c) {\n        c = a ** b;\n        assert( c % a == 0 );\n        return a ** b;\n    }\n}\ncontract TokenDB is Owned {\n    /* Externals */\n    function transfer(address _from, address _to, uint256 _amount) external returns(bool _success) {}\n    function bulkTransfer(address _from, address[] _to, uint256[] _amount) external returns(bool _success) {}\n    function setAllowance(address _owner, address _spender, uint256 _amount) external returns(bool _success) {}\n    /* Constants */\n    function getAllowance(address _owner, address _spender) public view returns(bool _success, uint256 _remaining) {}\n    function balanceOf(address _owner) public view returns(bool _success, uint256 _balance) {}\n}\ncontract Token is Owned {\n    /* Declarations */\n    using SafeMath for uint256;\n    /* Variables */\n    string  public name = \"Inlock token\";\n    string  public symbol = \"ILK\";\n    uint8   public decimals = 8;\n    uint256 public totalSupply = 44e16;\n    address public libAddress;\n    TokenDB public db;\n    Ico public ico;\n    /* Fallback */\n    function () public { revert(); }\n    /* Externals */\n    function changeLibAddress(address _libAddress) external forOwner {}\n    function changeDBAddress(address _dbAddress) external forOwner {}\n    function changeIcoAddress(address _icoAddress) external forOwner {}\n    function approve(address _spender, uint256 _value) external returns (bool _success) {}\n    function transfer(address _to, uint256 _amount) external returns (bool _success) {}\n    function bulkTransfer(address[] _to, uint256[] _amount) external returns (bool _success) {}\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool _success) {}\n    /* Constants */\n    function allowance(address _owner, address _spender) public view returns (uint256 _remaining) {}\n    function balanceOf(address _owner) public view returns (uint256 _balance) {}\n    /* Events */\n    event AllowanceUsed(address indexed _spender, address indexed _owner, uint256 indexed _value);\n    event Mint(address indexed _addr, uint256 indexed _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n}\ncontract Ico is Owned {\n    /* Declarations */\n    using SafeMath for uint256;\n    /* Enumerations */\n    enum phaseType {\n        pause,\n        privateSale1,\n        privateSale2,\n        sales1,\n        sales2,\n        sales3,\n        sales4,\n        preFinish,\n        finish\n    }\n    struct vesting_s {\n        uint256 amount;\n        uint256 startBlock;\n        uint256 endBlock;\n        uint256 claimedAmount;\n    }\n    /* Variables */\n    mapping(address => bool) public KYC;\n    mapping(address => bool) public transferRight;\n    mapping(address => vesting_s) public vesting;\n    phaseType public currentPhase;\n    uint256   public currentRate;\n    uint256   public currentRateM = 1e3;\n    uint256   public privateSale1Hardcap = 4e16;\n    uint256   public privateSale2Hardcap = 64e15;\n    uint256   public thisBalance = 44e16;\n    address   public offchainUploaderAddress;\n    address   public setKYCAddress;\n    address   public setRateAddress;\n    address   public libAddress;\n    Token     public token;\n    /* Constructor */\n    constructor(address _owner, address _libAddress, address _tokenAddress, address _offchainUploaderAddress,\n        address _setKYCAddress, address _setRateAddress) Owned(_owner) public {\n        currentPhase = phaseType.pause;\n        libAddress = _libAddress;\n        token = Token(_tokenAddress);\n        offchainUploaderAddress = _offchainUploaderAddress;\n        setKYCAddress = _setKYCAddress;\n        setRateAddress = _setRateAddress;\n    }\n    /* Fallback */\n    function () public payable {\n        buy();\n    }\n    /* Externals */\n    function changeLibAddress(address _libAddress) external forOwner {\n        libAddress = _libAddress;\n    }\n    function changeOffchainUploaderAddress(address _offchainUploaderAddress) external forOwner {\n        offchainUploaderAddress = _offchainUploaderAddress;\n    }\n    function changeKYCAddress(address _setKYCAddress) external forOwner {\n        setKYCAddress = _setKYCAddress;\n    }\n    function changeSetRateAddress(address _setRateAddress) external forOwner {\n        setRateAddress = _setRateAddress;\n    }\n    function setVesting(address _beneficiary, uint256 _amount, uint256 _startBlock, uint256 _endBlock) external {\n        address _trg = libAddress;\n        assembly {\n            let m := mload(0x40)\n            calldatacopy(m, 0, calldatasize)\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\n            switch success case 0 {\n                revert(0, 0)\n            } default {\n                return(m, 0)\n            }\n        }\n    }\n    function claimVesting() external {\n        address _trg = libAddress;\n        assembly {\n            let m := mload(0x40)\n            calldatacopy(m, 0, calldatasize)\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\n            switch success case 0 {\n                revert(0, 0)\n            } default {\n                return(m, 0)\n            }\n        }\n    }\n    function setKYC(address[] _on, address[] _off) external {\n        address _trg = libAddress;\n        assembly {\n            let m := mload(0x40)\n            calldatacopy(m, 0, calldatasize)\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\n            switch success case 0 {\n                revert(0, 0)\n            } default {\n                return(m, 0)\n            }\n        }\n    }\n    function setTransferRight(address[] _allow, address[] _disallow) external {\n        address _trg = libAddress;\n        assembly {\n            let m := mload(0x40)\n            calldatacopy(m, 0, calldatasize)\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\n            switch success case 0 {\n                revert(0, 0)\n            } default {\n                return(m, 0)\n            }\n        }\n    }\n    function setCurrentRate(uint256 _currentRate) external {\n        address _trg = libAddress;\n        assembly {\n            let m := mload(0x40)\n            calldatacopy(m, 0, calldatasize)\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\n            switch success case 0 {\n                revert(0, 0)\n            } default {\n                return(m, 0)\n            }\n        }\n    }\n    function setCurrentPhase(phaseType _phase) external {\n        address _trg = libAddress;\n        assembly {\n            let m := mload(0x40)\n            calldatacopy(m, 0, calldatasize)\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\n            switch success case 0 {\n                revert(0, 0)\n            } default {\n                return(m, 0)\n            }\n        }\n    }\n    function offchainUpload(address[] _beneficiaries, uint256[] _rewards) external {\n        address _trg = libAddress;\n        assembly {\n            let m := mload(0x40)\n            calldatacopy(m, 0, calldatasize)\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\n            switch success case 0 {\n                revert(0, 0)\n            } default {\n                return(m, 0)\n            }\n        }\n    }\n    function buy() public payable {\n        address _trg = libAddress;\n        assembly {\n            let m := mload(0x40)\n            calldatacopy(m, 0, calldatasize)\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\n            switch success case 0 {\n                revert(0, 0)\n            } default {\n                return(m, 0)\n            }\n        }\n    }\n    /* Constants */\n    function allowTransfer(address _owner) public view returns (bool _success, bool _allow) {\n        address _trg = libAddress;\n        assembly {\n            let m := mload(0x40)\n            calldatacopy(m, 0, calldatasize)\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x40)\n            switch success case 0 {\n                revert(0, 0)\n            } default {\n                return(m, 0x40)\n            }\n        }\n    }\n    function calculateReward(uint256 _input) public view returns (bool _success, uint256 _reward) {\n        address _trg = libAddress;\n        assembly {\n            let m := mload(0x40)\n            calldatacopy(m, 0, calldatasize)\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x40)\n            switch success case 0 {\n                revert(0, 0)\n            } default {\n                return(m, 0x40)\n            }\n        }\n    }\n    function calcVesting(address _owner) public view returns(bool _success, uint256 _reward) {\n        address _trg = libAddress;\n        assembly {\n            let m := mload(0x40)\n            calldatacopy(m, 0, calldatasize)\n            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x40)\n            switch success case 0 {\n                revert(0, 0)\n            } default {\n                return(m, 0x40)\n            }\n        }\n    }\n    /* Events */\n    event Brought(address _owner, address _beneficiary, uint256 _input, uint256 _output);\n    event VestingDefined(address _beneficiary, uint256 _amount, uint256 _startBlock, uint256 _endBlock);\n    event VestingClaimed(address _beneficiary, uint256 _amount);\n}",
  "bytecode": "608060405260008054600160a060020a031916331790556103e8600655668e1bc9bf04000060075566e35fa931a0000060085567061b31ab352c000060095534801561004a57600080fd5b5060405160c08061093a83398101604090815281516020830151918301516060840151608085015160a0909501519294919290919085600160a060020a03811615156100935750335b60008054600160a060020a031916600160a060020a03929092169190911781556004805460ff19166001830217905550600d8054600160a060020a0319908116600160a060020a0397881617909155600e8054821695871695909517909455600a8054851693861693909317909255600b80548416918516919091179055600c805490921692169190911790555061080a806101306000396000f30060806040526004361061018a5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663055ad42e81146101945780630b5f2efd146101cd5780631e1d696a146101e557806327f3a72a1461020657806329fd50eb1461022d57806338241c161461025e5780634774027c1461028a5780636b84dfcd1461025e5780637642dc0f146102ab57806377b74692146102e7578063798b18fd146102fc5780638da5cb5b146103115780639d3cc18714610326578063a39a45b714610347578063a6f2ae3a1461018a578063ad5c16871461025e578063b19f30e21461037c578063b3490bfc1461039d578063b4d14728146103d9578063b8be73ed146103ee578063bd3b104614610403578063c0ab570414610424578063cd3f29101461044e578063d2d7231f14610469578063e16ba8c614610481578063e388c42314610496578063e696d303146104dd578063f0cecafc146104fe578063f9f8bdb714610513578063fc0c546a14610528578063fedda89c1461053d575b61019261054e565b005b3480156101a057600080fd5b506101a961057b565b604051808260088111156101b957fe5b60ff16815260200191505060405180910390f35b3480156101d957600080fd5b5061019260043561054e565b3480156101f157600080fd5b50610192600160a060020a0360043516610584565b34801561021257600080fd5b5061021b6105c6565b60408051918252519081900360200190f35b34801561023957600080fd5b506102426105cc565b60408051600160a060020a039092168252519081900360200190f35b34801561026a57600080fd5b50610192602460048035828101929082013591813591820191013561054e565b34801561029657600080fd5b50610192600160a060020a03600435166105db565b3480156102b757600080fd5b506102cc600160a060020a036004351661061d565b60408051921515835260208301919091528051918290030190f35b3480156102f357600080fd5b5061024261064c565b34801561030857600080fd5b5061021b61065b565b34801561031d57600080fd5b50610242610661565b34801561033257600080fd5b50610192600160a060020a0360043516610670565b34801561035357600080fd5b50610368600160a060020a03600435166106b2565b604080519115158252519081900360200190f35b34801561038857600080fd5b50610192600160a060020a03600435166106f9565b3480156103a957600080fd5b506103be600160a060020a036004351661061d565b60408051921515835290151560208301528051918290030190f35b3480156103e557600080fd5b5061024261073b565b3480156103fa57600080fd5b5061024261074a565b34801561040f57600080fd5b50610368600160a060020a0360043516610759565b34801561043057600080fd5b50610192600160a060020a036004351660243560443560643561054e565b34801561045a57600080fd5b5061019260ff6004351661054e565b34801561047557600080fd5b506102cc60043561061d565b34801561048d57600080fd5b5061021b61076e565b3480156104a257600080fd5b506104b7600160a060020a0360043516610774565b604080519485526020850193909352838301919091526060830152519081900360800190f35b3480156104e957600080fd5b50610368600160a060020a036004351661079d565b34801561050a57600080fd5b5061021b6107b2565b34801561051f57600080fd5b5061021b6107b8565b34801561053457600080fd5b506102426107be565b34801561054957600080fd5b506101925b600d54604051600160a060020a039091169036600082376000813683855af480801561057657005b600080fd5b60045460ff1681565b61058c6107cd565b151561059757600080fd5b600d805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60095481565b600d54600160a060020a031681565b6105e36107cd565b15156105ee57600080fd5b600a805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600d546040516000918291600160a060020a0390911690368382376040813683855af480801561057657604083f35b600b54600160a060020a031681565b60065481565b600054600160a060020a031681565b6106786107cd565b151561068357600080fd5b600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60006106bc6107cd565b15156106c757600080fd5b5060008054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b6107016107cd565b151561070c57600080fd5b600b805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600c54600160a060020a031681565b600a54600160a060020a031681565b60016020526000908152604090205460ff1681565b60075481565b600360208190526000918252604090912080546001820154600283015492909301549092919084565b60026020526000908152604090205460ff1681565b60085481565b60055481565b600e54600160a060020a031681565b600054600160a060020a03163314905600a165627a7a7230582080954bae2c6aaeacdd7245e4d336c3732a8197862ea2f4167c878616ce8e5a460029000000000000000000000000da8c0c6311ab6e43aa1c14967ad7abc6035b9596000000000000000000000000d30afec62b16973a70b709344db441cf054665db000000000000000000000000f784682c82526e245f50975190ef0fff4e4fc0770000000000000000000000006466831dd7722481d4feaa099def914f91ae16630000000000000000000000000c7e5ad5b4831c9a9de0dc82a8b150119815d2c30000000000000000000000000519fbf2da33b163419b7b1ff8dd0a6e8027ba10",
  "constructorArguments": "000000000000000000000000da8c0c6311ab6e43aa1c14967ad7abc6035b9596000000000000000000000000d30afec62b16973a70b709344db441cf054665db000000000000000000000000f784682c82526e245f50975190ef0fff4e4fc0770000000000000000000000006466831dd7722481d4feaa099def914f91ae16630000000000000000000000000c7e5ad5b4831c9a9de0dc82a8b150119815d2c30000000000000000000000000519fbf2da33b163419b7b1ff8dd0a6e8027ba10"
}