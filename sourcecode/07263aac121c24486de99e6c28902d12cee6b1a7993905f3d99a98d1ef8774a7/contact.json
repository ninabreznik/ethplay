{
  "address": "0x85899fa0c08f1e13477caadab07c732dc433d5f7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Fortune",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-08\n*/\n\npragma solidity 0.4.25;\n\n\n/**\n*\n* ETH CRYPTOCURRENCY DISTRIBUTION PROJECT v 1.0\n* Web              - https://fortune333.online\n* GitHub           - https://github.com/fortune333/Fortune333\n* Email:             mailto:support(at sign)fortune333token\n* \n* \n*  - GAIN 3,33% - 1% PER 24 HOURS (interest is charges in equal parts every 10 min)\n*  - Life-long payments\n*  - Unprecedentedly reliable\n*  - Bringer Fortune\n*  - Minimal contribution 0.01 eth\n*  - Currency and payment - ETH\n*  - Contribution allocation schemes:\n*    -- 87,5% payments\n*    --  7,5% marketing\n*    --  5,0% technical support\n*\n*   ---About the Project\n*  Blockchain-enabled smart contracts have opened a new era of trustless relationships without \n*  intermediaries. This technology opens incredible financial possibilities. Our automated investment \n*  distribution model is written into a smart contract, uploaded to the Ethereum blockchain and can be \n*  freely accessed online. In order to insure our investors' complete security, full control over the \n*  project has been transferred from the organizers to the smart contract: nobody can influence the \n*  system's permanent autonomous functioning.\n* \n* ---How to use:\n*  1. Send from ETH wallet to the smart contract address \n*     any amount from 0.01 ETH.\n*  2. Verify your transaction in the history of your application or etherscan.io, specifying the address \n*     of your wallet.\n*  3a. Claim your profit by sending 0 ether transaction (every 10 min, every day, every week, i don't care unless you're \n*      spending too much on GAS)\n*  OR\n*  3b. For reinvest, you need to deposit the amount that you want to reinvest and the \n*      accrued interest automatically summed to your new contribution.\n*  \n* RECOMMENDED GAS LIMIT: 200000\n* RECOMMENDED GAS PRICE: https://ethgasstation.info/\n* You can check the payments on the etherscan.io site, in the \"Internal Txns\" tab of your wallet.\n*\n* ---Refferral system:\n*     from 0 to 10.000 ethers in the fund - remuneration to each contributor is 3.33%, \n*     from 10.000 to 100.000 ethers in the fund - remuneration will be 2%, \n*     from 100.000 ethers in the fund - each contributor will get 1%.\n*\n* ---It is not allowed to transfer from exchanges, ONLY from your personal ETH wallet, for which you \n* have private keys.\n* \n* Contracts reviewed and approved by pros!\n* \n* Main contract - Fortune. Scroll down to find it.\n*/ \n\n\nlibrary Math {\n  function min(uint a, uint b) internal pure returns(uint) {\n    if (a > b) {\n      return b;\n    }\n    return a;\n  }\n}\n\n\nlibrary Zero {\n  function requireNotZero(address addr) internal pure {\n    require(addr != address(0), \"require not zero address\");\n  }\n\n  function requireNotZero(uint val) internal pure {\n    require(val != 0, \"require not zero value\");\n  }\n\n  function notZero(address addr) internal pure returns(bool) {\n    return !(addr == address(0));\n  }\n\n  function isZero(address addr) internal pure returns(bool) {\n    return addr == address(0);\n  }\n\n  function isZero(uint a) internal pure returns(bool) {\n    return a == 0;\n  }\n\n  function notZero(uint a) internal pure returns(bool) {\n    return a != 0;\n  }\n}\n\n\nlibrary Percent {\n  // Solidity automatically throws when dividing by 0\n  struct percent {\n    uint num;\n    uint den;\n  }\n  \n  // storage\n  function mul(percent storage p, uint a) internal view returns (uint) {\n    if (a == 0) {\n      return 0;\n    }\n    return a*p.num/p.den;\n  }\n\n  function div(percent storage p, uint a) internal view returns (uint) {\n    return a/p.num*p.den;\n  }\n\n  function sub(percent storage p, uint a) internal view returns (uint) {\n    uint b = mul(p, a);\n    if (b >= a) {\n      return 0;\n    }\n    return a - b;\n  }\n\n  function add(percent storage p, uint a) internal view returns (uint) {\n    return a + mul(p, a);\n  }\n\n  function toMemory(percent storage p) internal view returns (Percent.percent memory) {\n    return Percent.percent(p.num, p.den);\n  }\n\n  // memory \n  function mmul(percent memory p, uint a) internal pure returns (uint) {\n    if (a == 0) {\n      return 0;\n    }\n    return a*p.num/p.den;\n  }\n\n  function mdiv(percent memory p, uint a) internal pure returns (uint) {\n    return a/p.num*p.den;\n  }\n\n  function msub(percent memory p, uint a) internal pure returns (uint) {\n    uint b = mmul(p, a);\n    if (b >= a) {\n      return 0;\n    }\n    return a - b;\n  }\n\n  function madd(percent memory p, uint a) internal pure returns (uint) {\n    return a + mmul(p, a);\n  }\n}\n\n\nlibrary Address {\n  function toAddress(bytes source) internal pure returns(address addr) {\n    assembly { addr := mload(add(source,0x14)) }\n    return addr;\n  }\n\n  function isNotContract(address addr) internal view returns(bool) {\n    uint length;\n    assembly { length := extcodesize(addr) }\n    return length == 0;\n  }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    uint256 c = _a * _b;\n    require(c / _a == _b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b <= _a);\n    uint256 c = _a - _b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    uint256 c = _a + _b;\n    require(c >= _a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\ncontract Accessibility {\n  address private owner;\n  modifier onlyOwner() {\n    require(msg.sender == owner, \"access denied\");\n    _;\n  }\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  function disown() internal {\n    delete owner;\n  }\n}\n\n\ncontract Rev1Storage {\n  function investorShortInfo(address addr) public view returns(uint value, uint refBonus); \n}\n\n\ncontract Rev2Storage {\n  function investorInfo(address addr) public view returns(uint investment, uint paymentTime); \n}\n\n\nlibrary PrivateEntrance {\n  using PrivateEntrance for privateEntrance;\n  using Math for uint;\n  struct privateEntrance {\n    Rev1Storage rev1Storage;\n    Rev2Storage rev2Storage;\n    uint investorMaxInvestment;\n    uint endTimestamp;\n    mapping(address=>bool) hasAccess;\n  }\n\n  function isActive(privateEntrance storage pe) internal view returns(bool) {\n    return pe.endTimestamp > now;\n  }\n\n  function maxInvestmentFor(privateEntrance storage pe, address investorAddr) internal view returns(uint) {\n    // check if investorAddr has access\n    if (!pe.hasAccess[investorAddr]) {\n      return 0;\n    }\n\n    // get investor max investment = investment from revolution 1\n    (uint maxInvestment, ) = pe.rev1Storage.investorShortInfo(investorAddr);\n    if (maxInvestment == 0) {\n      return 0;\n    }\n    maxInvestment = Math.min(maxInvestment, pe.investorMaxInvestment);\n\n    // get current investment from revolution 2\n    (uint currInvestment, ) = pe.rev2Storage.investorInfo(investorAddr);\n    \n    if (currInvestment >= maxInvestment) {\n      return 0;\n    }\n\n    return maxInvestment-currInvestment;\n  }\n\n  function provideAccessFor(privateEntrance storage pe, address[] addrs) internal {\n    for (uint16 i; i < addrs.length; i++) {\n      pe.hasAccess[addrs[i]] = true;\n    }\n  }\n}\n\n\ncontract InvestorsStorage is Accessibility {\n  struct Investor {\n    uint investment;\n    uint paymentTime;\n  }\n  uint public size;\n\n  mapping (address => Investor) private investors;\n\n  function isInvestor(address addr) public view returns (bool) {\n    return investors[addr].investment > 0;\n  }\n\n  function investorInfo(address addr) public view returns(uint investment, uint paymentTime) {\n    investment = investors[addr].investment;\n    paymentTime = investors[addr].paymentTime;\n  }\n\n  function newInvestor(address addr, uint investment, uint paymentTime) public onlyOwner returns (bool) {\n    Investor storage inv = investors[addr];\n    if (inv.investment != 0 || investment == 0) {\n      return false;\n    }\n    inv.investment = investment;\n    inv.paymentTime = paymentTime;\n    size++;\n    return true;\n  }\n\n  function addInvestment(address addr, uint investment) public onlyOwner returns (bool) {\n    if (investors[addr].investment == 0) {\n      return false;\n    }\n    investors[addr].investment += investment;\n    return true;\n  }\n\n  function setPaymentTime(address addr, uint paymentTime) public onlyOwner returns (bool) {\n    if (investors[addr].investment == 0) {\n      return false;\n    }\n    investors[addr].paymentTime = paymentTime;\n    return true;\n  }\n}\n\n\nlibrary RapidGrowthProtection {\n  using RapidGrowthProtection for rapidGrowthProtection;\n  \n  struct rapidGrowthProtection {\n    uint startTimestamp;\n    uint maxDailyTotalInvestment;\n    uint8 activityDays;\n    mapping(uint8 => uint) dailyTotalInvestment;\n  }\n\n  function maxInvestmentAtNow(rapidGrowthProtection storage rgp) internal view returns(uint) {\n    uint day = rgp.currDay();\n    if (day == 0 || day > rgp.activityDays) {\n      return 0;\n    }\n    if (rgp.dailyTotalInvestment[uint8(day)] >= rgp.maxDailyTotalInvestment) {\n      return 0;\n    }\n    return rgp.maxDailyTotalInvestment - rgp.dailyTotalInvestment[uint8(day)];\n  }\n\n  function isActive(rapidGrowthProtection storage rgp) internal view returns(bool) {\n    uint day = rgp.currDay();\n    return day != 0 && day <= rgp.activityDays;\n  }\n\n  function saveInvestment(rapidGrowthProtection storage rgp, uint investment) internal returns(bool) {\n    uint day = rgp.currDay();\n    if (day == 0 || day > rgp.activityDays) {\n      return false;\n    }\n    if (rgp.dailyTotalInvestment[uint8(day)] + investment > rgp.maxDailyTotalInvestment) {\n      return false;\n    }\n    rgp.dailyTotalInvestment[uint8(day)] += investment;\n    return true;\n  }\n\n  function startAt(rapidGrowthProtection storage rgp, uint timestamp) internal { \n    rgp.startTimestamp = timestamp;\n\n    // restart\n    for (uint8 i = 1; i <= rgp.activityDays; i++) {\n      if (rgp.dailyTotalInvestment[i] != 0) {\n        delete rgp.dailyTotalInvestment[i];\n      }\n    }\n  }\n\n  function currDay(rapidGrowthProtection storage rgp) internal view returns(uint day) {\n    if (rgp.startTimestamp > now) {\n      return 0;\n    }\n    day = (now - rgp.startTimestamp) / 24 hours + 1; // +1 for skip zero day\n  }\n}\n\n\n\n\n\n\n\n\ncontract Fortune is Accessibility {\n  using RapidGrowthProtection for RapidGrowthProtection.rapidGrowthProtection;\n  using PrivateEntrance for PrivateEntrance.privateEntrance;\n  using Percent for Percent.percent;\n  using SafeMath for uint;\n  using Math for uint;\n\n  // easy read for investors\n  using Address for *;\n  using Zero for *; \n  \n  RapidGrowthProtection.rapidGrowthProtection private m_rgp;\n  PrivateEntrance.privateEntrance private m_privEnter;\n  mapping(address => bool) private m_referrals;\n  InvestorsStorage private m_investors;\n\n  // automatically generates getters\n  uint public constant minInvesment = 10 finney; //       0.01 eth\n  uint public constant maxBalance = 333e5 ether; // 33 300 000 eth\n  address public advertisingAddress;\n  address public adminsAddress;\n  uint public investmentsNumber;\n  uint public waveStartup;\n\n  // percents \n  Percent.percent private m_1_percent = Percent.percent(1, 100);           //   1/100  *100% = 1%\n  Percent.percent private m_2_percent = Percent.percent(2, 100);           //   2/100  *100% = 2%\n  Percent.percent private m_3_33_percent = Percent.percent(333, 10000);    // 333/10000*100% = 3.33%\n  Percent.percent private m_adminsPercent = Percent.percent(5, 100);       //   5/100  *100% = 5%\n  Percent.percent private m_advertisingPercent = Percent.percent(75, 1000);// 75/1000  *100% = 7.5%\n\n  // more events for easy read from blockchain\n  event LogPEInit(uint when, address rev1Storage, address rev2Storage, uint investorMaxInvestment, uint endTimestamp);\n  event LogSendExcessOfEther(address indexed addr, uint when, uint value, uint investment, uint excess);\n  event LogNewReferral(address indexed addr, address indexed referrerAddr, uint when, uint refBonus);\n  event LogRGPInit(uint when, uint startTimestamp, uint maxDailyTotalInvestment, uint activityDays);\n  event LogRGPInvestment(address indexed addr, uint when, uint investment, uint indexed day);\n  event LogNewInvesment(address indexed addr, uint when, uint investment, uint value);\n  event LogAutomaticReinvest(address indexed addr, uint when, uint investment);\n  event LogPayDividends(address indexed addr, uint when, uint dividends);\n  event LogNewInvestor(address indexed addr, uint when);\n  event LogBalanceChanged(uint when, uint balance);\n  event LogNextWave(uint when);\n  event LogDisown(uint when);\n\n\n  modifier balanceChanged {\n    _;\n    emit LogBalanceChanged(now, address(this).balance);\n  }\n\n  modifier notFromContract() {\n    require(msg.sender.isNotContract(), \"only externally accounts\");\n    _;\n  }\n\n  constructor() public {\n    adminsAddress = msg.sender;\n    advertisingAddress = msg.sender;\n    nextWave();\n  }\n\n  function() public payable {\n    // investor get him dividends\n    if (msg.value.isZero()) {\n      getMyDividends();\n      return;\n    }\n\n    // sender do invest\n    doInvest(msg.data.toAddress());\n  }\n\n  function doDisown() public onlyOwner {\n    disown();\n    emit LogDisown(now);\n  }\n\n  function init(address rev1StorageAddr, uint timestamp) public onlyOwner {\n    // init Rapid Growth Protection\n    m_rgp.startTimestamp = timestamp + 1;\n    m_rgp.maxDailyTotalInvestment = 500 ether;\n    m_rgp.activityDays = 21;\n    emit LogRGPInit(\n      now, \n      m_rgp.startTimestamp,\n      m_rgp.maxDailyTotalInvestment,\n      m_rgp.activityDays\n    );\n\n\n    // init Private Entrance\n    m_privEnter.rev1Storage = Rev1Storage(rev1StorageAddr);\n    m_privEnter.rev2Storage = Rev2Storage(address(m_investors));\n    m_privEnter.investorMaxInvestment = 50 ether;\n    m_privEnter.endTimestamp = timestamp;\n    emit LogPEInit(\n      now, \n      address(m_privEnter.rev1Storage), \n      address(m_privEnter.rev2Storage), \n      m_privEnter.investorMaxInvestment, \n      m_privEnter.endTimestamp\n    );\n  }\n\n  function setAdvertisingAddress(address addr) public onlyOwner {\n    addr.requireNotZero();\n    advertisingAddress = addr;\n  }\n\n  function setAdminsAddress(address addr) public onlyOwner {\n    addr.requireNotZero();\n    adminsAddress = addr;\n  }\n\n  function privateEntranceProvideAccessFor(address[] addrs) public onlyOwner {\n    m_privEnter.provideAccessFor(addrs);\n  }\n\n  function rapidGrowthProtectionmMaxInvestmentAtNow() public view returns(uint investment) {\n    investment = m_rgp.maxInvestmentAtNow();\n  }\n\n  function investorsNumber() public view returns(uint) {\n    return m_investors.size();\n  }\n\n  function balanceETH() public view returns(uint) {\n    return address(this).balance;\n  }\n\n  function percent1() public view returns(uint numerator, uint denominator) {\n    (numerator, denominator) = (m_1_percent.num, m_1_percent.den);\n  }\n\n  function percent2() public view returns(uint numerator, uint denominator) {\n    (numerator, denominator) = (m_2_percent.num, m_2_percent.den);\n  }\n\n  function percent3_33() public view returns(uint numerator, uint denominator) {\n    (numerator, denominator) = (m_3_33_percent.num, m_3_33_percent.den);\n  }\n\n  function advertisingPercent() public view returns(uint numerator, uint denominator) {\n    (numerator, denominator) = (m_advertisingPercent.num, m_advertisingPercent.den);\n  }\n\n  function adminsPercent() public view returns(uint numerator, uint denominator) {\n    (numerator, denominator) = (m_adminsPercent.num, m_adminsPercent.den);\n  }\n\n  function investorInfo(address investorAddr) public view returns(uint investment, uint paymentTime, bool isReferral) {\n    (investment, paymentTime) = m_investors.investorInfo(investorAddr);\n    isReferral = m_referrals[investorAddr];\n  }\n\n  function investorDividendsAtNow(address investorAddr) public view returns(uint dividends) {\n    dividends = calcDividends(investorAddr);\n  }\n\n  function dailyPercentAtNow() public view returns(uint numerator, uint denominator) {\n    Percent.percent memory p = dailyPercent();\n    (numerator, denominator) = (p.num, p.den);\n  }\n\n  function refBonusPercentAtNow() public view returns(uint numerator, uint denominator) {\n    Percent.percent memory p = refBonusPercent();\n    (numerator, denominator) = (p.num, p.den);\n  }\n\n  function getMyDividends() public notFromContract balanceChanged {\n    // calculate dividends\n    uint dividends = calcDividends(msg.sender);\n    require (dividends.notZero(), \"cannot to pay zero dividends\");\n\n    // update investor payment timestamp\n    assert(m_investors.setPaymentTime(msg.sender, now));\n\n    // check enough eth - goto next wave if needed\n    if (address(this).balance <= dividends) {\n      nextWave();\n      dividends = address(this).balance;\n    } \n\n    // transfer dividends to investor\n    msg.sender.transfer(dividends);\n    emit LogPayDividends(msg.sender, now, dividends);\n  }\n\n  function doInvest(address referrerAddr) public payable notFromContract balanceChanged {\n    uint investment = msg.value;\n    uint receivedEther = msg.value;\n    require(investment >= minInvesment, \"investment must be >= minInvesment\");\n    require(address(this).balance <= maxBalance, \"the contract eth balance limit\");\n\n    if (m_rgp.isActive()) { \n      // use Rapid Growth Protection if needed\n      uint rpgMaxInvest = m_rgp.maxInvestmentAtNow();\n      rpgMaxInvest.requireNotZero();\n      investment = Math.min(investment, rpgMaxInvest);\n      assert(m_rgp.saveInvestment(investment));\n      emit LogRGPInvestment(msg.sender, now, investment, m_rgp.currDay());\n      \n    } else if (m_privEnter.isActive()) {\n      // use Private Entrance if needed\n      uint peMaxInvest = m_privEnter.maxInvestmentFor(msg.sender);\n      peMaxInvest.requireNotZero();\n      investment = Math.min(investment, peMaxInvest);\n    }\n\n    // send excess of ether if needed\n    if (receivedEther > investment) {\n      uint excess = receivedEther - investment;\n      msg.sender.transfer(excess);\n      receivedEther = investment;\n      emit LogSendExcessOfEther(msg.sender, now, msg.value, investment, excess);\n    }\n\n    // commission\n    advertisingAddress.transfer(m_advertisingPercent.mul(receivedEther));\n    adminsAddress.transfer(m_adminsPercent.mul(receivedEther));\n\n    bool senderIsInvestor = m_investors.isInvestor(msg.sender);\n\n    // ref system works only once and only on first invest\n    if (referrerAddr.notZero() && !senderIsInvestor && !m_referrals[msg.sender] &&\n      referrerAddr != msg.sender && m_investors.isInvestor(referrerAddr)) {\n      \n      m_referrals[msg.sender] = true;\n      // add referral bonus to investor`s and referral`s investments\n      uint refBonus = refBonusPercent().mmul(investment);\n      assert(m_investors.addInvestment(referrerAddr, refBonus)); // add referrer bonus\n      investment += refBonus;                                    // add referral bonus\n      emit LogNewReferral(msg.sender, referrerAddr, now, refBonus);\n    }\n\n    // automatic reinvest - prevent burning dividends\n    uint dividends = calcDividends(msg.sender);\n    if (senderIsInvestor && dividends.notZero()) {\n      investment += dividends;\n      emit LogAutomaticReinvest(msg.sender, now, dividends);\n    }\n\n    if (senderIsInvestor) {\n      // update existing investor\n      assert(m_investors.addInvestment(msg.sender, investment));\n      assert(m_investors.setPaymentTime(msg.sender, now));\n    } else {\n      // create new investor\n      assert(m_investors.newInvestor(msg.sender, investment, now));\n      emit LogNewInvestor(msg.sender, now);\n    }\n\n    investmentsNumber++;\n    emit LogNewInvesment(msg.sender, now, investment, receivedEther);\n  }\n\n  function getMemInvestor(address investorAddr) internal view returns(InvestorsStorage.Investor memory) {\n    (uint investment, uint paymentTime) = m_investors.investorInfo(investorAddr);\n    return InvestorsStorage.Investor(investment, paymentTime);\n  }\n\n  function calcDividends(address investorAddr) internal view returns(uint dividends) {\n    InvestorsStorage.Investor memory investor = getMemInvestor(investorAddr);\n\n    // safe gas if dividends will be 0\n    if (investor.investment.isZero() || now.sub(investor.paymentTime) < 10 minutes) {\n      return 0;\n    }\n    \n    // for prevent burning daily dividends if 24h did not pass - calculate it per 10 min interval\n    // if daily percent is X, then 10min percent = X / (24h / 10 min) = X / 144\n\n    // and we must to get numbers of 10 min interval after investor got payment:\n    // (now - investor.paymentTime) / 10min \n\n    // finaly calculate dividends = ((now - investor.paymentTime) / 10min) * (X * investor.investment)  / 144) \n\n    Percent.percent memory p = dailyPercent();\n    dividends = (now.sub(investor.paymentTime) / 10 minutes) * p.mmul(investor.investment) / 144;\n  }\n\n  function dailyPercent() internal view returns(Percent.percent memory p) {\n    uint balance = address(this).balance;\n\n    // (3) 3.33% if balance < 1 000 ETH\n    // (2) 2% if 1 000 ETH <= balance <= 33 333 ETH\n    // (1) 1% if 33 333 ETH < balance\n\n    if (balance < 1000 ether) { \n      p = m_3_33_percent.toMemory(); // (3)\n    } else if ( 1000 ether <= balance && balance <= 33333 ether) {\n      p = m_2_percent.toMemory();    // (2)\n    } else {\n      p = m_1_percent.toMemory();    // (1)\n    }\n  }\n\n  function refBonusPercent() internal view returns(Percent.percent memory p) {\n    uint balance = address(this).balance;\n\n    // (1) 1% if 100 000 ETH < balance\n    // (2) 2% if 10 000 ETH <= balance <= 100 000 ETH\n    // (3) 3.33% if balance < 10 000 ETH   \n    \n    if (balance < 10000 ether) { \n      p = m_3_33_percent.toMemory(); // (3)\n    } else if ( 10000 ether <= balance && balance <= 100000 ether) {\n      p = m_2_percent.toMemory();    // (2)\n    } else {\n      p = m_1_percent.toMemory();    // (1)\n    }          \n  }\n\n  function nextWave() private {\n    m_investors = new InvestorsStorage();\n    investmentsNumber = 0;\n    waveStartup = now;\n    m_rgp.startAt(now);\n    emit LogRGPInit(now , m_rgp.startTimestamp, m_rgp.maxDailyTotalInvestment, m_rgp.activityDays);\n    emit LogNextWave(now);\n  }\n}",
  "bytecode": "60016080819052606460a08190526010919091556011819055600260c081905260e0829052601255601381905561014d61010081905261271061012081905260149190915560155560056101408190526101608290526016556017556101c0604052604b6101808190526103e86101a08190526018919091556019553480156200008857600080fd5b506000805433600160a060020a03199182168117909255600d8054821683179055600c80549091169091179055620000c8640100000000620000ce810204565b6200022d565b620000d86200021c565b604051809103906000f080158015620000f5573d6000803e3d6000fd5b50600b8054600160a060020a031916600160a060020a03929092169190911790556000600e5542600f8190556200013d90600190640100000000620001c4810262001d5c1704565b6001546002546003546040805142815260208101949094528381019290925260ff166060830152517f16171a4e996b33ebb6320397242a4168f60c16e87fbd8b58f1744d68c4179caf9181900360800190a16040805142815290517fc66870ef5f6257a76295d443e9221488043ec691f830f6c6128755c3518e3c759181900360200190a1565b80825560015b600283015460ff90811690821611620002175760ff81166000908152600384016020526040902054156200020e5760ff811660009081526003840160205260408120555b600101620001ca565b505050565b60405161047480620024f583390190565b6122b8806200023d6000396000f3006080604052600436106101485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306127a1181146101a7578063074a1600146101fc5780631686531a1461022a578063341bae0e1461025b578063399ae724146102705780633d7ac9f81461029457806362d2c555146102bb578063653c3174146102d057806368f6e75f146102e557806373ad468a146102fa578063900334b11461030f57806390b0636f146103305780639396df321461034557806395a23c3a1461035a578063984d4a931461036f5780639ec6e05414610390578063b7c1a119146103a5578063b8fde2a4146103ba578063cb192f2c146103cf578063d50030ad146103f0578063d82fa3f114610405578063dbcbaca414610419578063eafecc7a1461045a578063ecbdbb321461046f578063fc7c41af14610484575b61015134610499565b156101635761015e6104a1565b6101a5565b6101a56101a06000368080601f016020809104026020016040519081016040528093929190818152602001838380828437506106c6945050505050565b6106cd565b005b3480156101b357600080fd5b50604080516020600480358082013583810280860185019096528085526101a595369593946024949385019291829185019084908082843750949750610fca9650505050505050565b34801561020857600080fd5b5061021161102e565b6040805192835260208301919091528051918290030190f35b34801561023657600080fd5b5061023f611038565b60408051600160a060020a039092168252519081900360200190f35b34801561026757600080fd5b50610211611047565b34801561027c57600080fd5b506101a5600160a060020a036004351660243561106c565b3480156102a057600080fd5b506102a96111d1565b60408051918252519081900360200190f35b3480156102c757600080fd5b5061023f6111dc565b3480156102dc57600080fd5b506102a96111eb565b3480156102f157600080fd5b5061021161127b565b34801561030657600080fd5b506102a9611285565b34801561031b57600080fd5b506102a9600160a060020a0360043516611294565b34801561033c57600080fd5b506102a96112a5565b34801561035157600080fd5b506102116112b6565b34801561036657600080fd5b506102116112c0565b34801561037b57600080fd5b506101a5600160a060020a03600435166112ca565b34801561039c57600080fd5b506102a961135b565b3480156103b157600080fd5b50610211611361565b3480156103c657600080fd5b5061021161136b565b3480156103db57600080fd5b506101a5600160a060020a036004351661137e565b3480156103fc57600080fd5b506101a56104a1565b6101a5600160a060020a03600435166106cd565b34801561042557600080fd5b5061043a600160a060020a036004351661140f565b604080519384526020840192909252151582820152519081900360600190f35b34801561046657600080fd5b506102a96114d5565b34801561047b57600080fd5b506102a96114db565b34801561049057600080fd5b506101a56114e0565b80155b919050565b60006104ac3361156d565b1515610502576040805160e560020a62461bcd02815260206004820152601860248201527f6f6e6c792065787465726e616c6c79206163636f756e74730000000000000000604482015290519081900360640190fd5b61050b33611579565b90506105168161162d565b151561056c576040805160e560020a62461bcd02815260206004820152601c60248201527f63616e6e6f7420746f20706179207a65726f206469766964656e647300000000604482015290519081900360640190fd5b600b54604080517f440135850000000000000000000000000000000000000000000000000000000081523360048201524260248201529051600160a060020a03909216916344013585916044808201926020929091908290030181600087803b1580156105d857600080fd5b505af11580156105ec573d6000803e3d6000fd5b505050506040513d602081101561060257600080fd5b5051151561060c57fe5b303181106106205761061c611632565b5030315b604051339082156108fc029083906000818181858888f1935050505015801561064d573d6000803e3d6000fd5b506040805142815260208101839052815133927f6710e0cad56444677ac916513b384a4acc6501cfb5219f59657ad4ddffef9d60928290030190a2604080514281523031602082015281517f32367fddaa1baa1c6a0fc5c3e8284df724bacc7b50e847c32c9f9765f9f96137929181900390910190a150565b6014015190565b6000808080808080806106df3361156d565b1515610735576040805160e560020a62461bcd02815260206004820152601860248201527f6f6e6c792065787465726e616c6c79206163636f756e74730000000000000000604482015290519081900360640190fd5b349750879650662386f26fc100008710156107c0576040805160e560020a62461bcd02815260206004820152602260248201527f696e766573746d656e74206d757374206265203e3d206d696e496e7665736d6560448201527f6e74000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6a1b8b8c9e000e82a480000030311115610824576040805160e560020a62461bcd02815260206004820152601e60248201527f74686520636f6e7472616374206574682062616c616e6365206c696d69740000604482015290519081900360640190fd5b61082e6001611722565b156108b65761083d600161174d565b9550610848866117c7565b610852888761181e565b975061086560018963ffffffff61183616565b151561086d57fe5b61087760016118b6565b60408051428152602081018b9052815133927f21cd51cc98547f9914bc0b314a40e645408acad21d1289eecb4dfb534fda7cfc928290030190a36108ee565b6108c060056118e0565b156108ee576108d660053363ffffffff6118e916565b94506108e1856117c7565b6108eb888661181e565b97505b87871115610976576040518888039450339085156108fc029086906000818181858888f19350505050158015610928573d6000803e3d6000fd5b50604080514281523460208201528082018a905260608101869052905189985033917faac472d912a7451062b64c942775db41d65cce271603099e1c4760e072050951919081900360800190a25b600c54600160a060020a03166108fc61099660188a63ffffffff611a7e16565b6040518115909202916000818181858888f193505050501580156109be573d6000803e3d6000fd5b50600d54600160a060020a03166108fc6109df60168a63ffffffff611a7e16565b6040518115909202916000818181858888f19350505050158015610a07573d6000803e3d6000fd5b50600b54604080517fcee2a9cf0000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a039092169163cee2a9cf916024808201926020929091908290030181600087803b158015610a6e57600080fd5b505af1158015610a82573d6000803e3d6000fd5b505050506040513d6020811015610a9857600080fd5b50519250610aae600160a060020a038a16611aa9565b8015610ab8575082155b8015610ad45750336000908152600a602052604090205460ff16155b8015610ae95750600160a060020a0389163314155b8015610b855750600b54604080517fcee2a9cf000000000000000000000000000000000000000000000000000000008152600160a060020a038c811660048301529151919092169163cee2a9cf9160248083019260209291908290030181600087803b158015610b5857600080fd5b505af1158015610b6c573d6000803e3d6000fd5b505050506040513d6020811015610b8257600080fd5b50515b15610cae57336000908152600a60205260409020805460ff19166001179055610bbc88610bb0611ab7565b9063ffffffff611b2816565b600b54604080517f20987e64000000000000000000000000000000000000000000000000000000008152600160a060020a038d811660048301526024820185905291519395509116916320987e64916044808201926020929091908290030181600087803b158015610c2d57600080fd5b505af1158015610c41573d6000803e3d6000fd5b505050506040513d6020811015610c5757600080fd5b50511515610c6157fe5b6040805142815260208101849052815199840199600160a060020a038c169233927fc04fb14bddd876003a335c37b1fe6524ac1dbf74eb64dd08cd085fba4b97d592929081900390910190a35b610cb733611579565b9050828015610cca5750610cca8161162d565b15610d0e57604080514281526020810183905281519983019933927f149822e3a65d38c9b6f40e835864c61ef5ca0866219afc2db638e3f85ae78866928290030190a25b8215610e5a57600b54604080517f20987e64000000000000000000000000000000000000000000000000000000008152336004820152602481018b90529051600160a060020a03909216916320987e64916044808201926020929091908290030181600087803b158015610d8157600080fd5b505af1158015610d95573d6000803e3d6000fd5b505050506040513d6020811015610dab57600080fd5b50511515610db557fe5b600b54604080517f440135850000000000000000000000000000000000000000000000000000000081523360048201524260248201529051600160a060020a03909216916344013585916044808201926020929091908290030181600087803b158015610e2157600080fd5b505af1158015610e35573d6000803e3d6000fd5b505050506040513d6020811015610e4b57600080fd5b50511515610e5557fe5b610f38565b600b54604080517f41b2121c000000000000000000000000000000000000000000000000000000008152336004820152602481018b90524260448201529051600160a060020a03909216916341b2121c916064808201926020929091908290030181600087803b158015610ecd57600080fd5b505af1158015610ee1573d6000803e3d6000fd5b505050506040513d6020811015610ef757600080fd5b50511515610f0157fe5b60408051428152905133917fc8616cf56c542aa2540734215ee474180fc3b9cc7c2fad288000504632cacf18919081900360200190a25b600e8054600101905560408051428152602081018a9052808201899052905133917fd5a986028ae9e04f72859f7d3c1d8ae8b649c26be5b99d4c2d98ca4a19a0502e919081900360600190a2604080514281523031602082015281517f32367fddaa1baa1c6a0fc5c3e8284df724bacc7b50e847c32c9f9765f9f96137929181900390910190a1505050505050505050565b600054600160a060020a0316331461101a576040805160e560020a62461bcd02815260206004820152600d602482015260008051602061226d833981519152604482015290519081900360640190fd5b61102b60058263ffffffff611b4b16565b50565b6012546013549091565b600c54600160a060020a031681565b600080611052611dd1565b61105a611ab7565b80516020909101519094909350915050565b600054600160a060020a031633146110bc576040805160e560020a62461bcd02815260206004820152600d602482015260008051602061226d833981519152604482015290519081900360640190fd5b600180820190819055681b1ae4d6e2ef50000060028190556003805460ff1916601517908190556040805142815260208101949094528381019290925260ff166060830152517f16171a4e996b33ebb6320397242a4168f60c16e87fbd8b58f1744d68c4179caf9181900360800190a160058054600160a060020a0380851673ffffffffffffffffffffffffffffffffffffffff199283161792839055600b546006805490931690821617918290556802b5e3af16b1880000600781905560088590556040805142815294831660208601529290911683830152606083015260808201839052517f7e13d111fea1199cb6fb21cb38766240cfad970317820e8e5713da7a708285309181900360a00190a15050565b662386f26fc1000081565b600d54600160a060020a031681565b600b54604080517f949d225d0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163949d225d91600480830192602092919082900301818787803b15801561124a57600080fd5b505af115801561125e573d6000803e3d6000fd5b505050506040513d602081101561127457600080fd5b5051905090565b6010546011549091565b6a1b8b8c9e000e82a480000081565b600061129f82611579565b92915050565b60006112b1600161174d565b905090565b6018546019549091565b6016546017549091565b600054600160a060020a0316331461131a576040805160e560020a62461bcd02815260206004820152600d602482015260008051602061226d833981519152604482015290519081900360640190fd5b61132c81600160a060020a0316611bb4565b600d805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600e5481565b6014546015549091565b600080611376611dd1565b61105a611c14565b600054600160a060020a031633146113ce576040805160e560020a62461bcd02815260206004820152600d602482015260008051602061226d833981519152604482015290519081900360640190fd5b6113e081600160a060020a0316611bb4565b600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600b54604080517fdbcbaca4000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152825160009485948594939091169263dbcbaca4926024808301939282900301818787803b15801561147957600080fd5b505af115801561148d573d6000803e3d6000fd5b505050506040513d60408110156114a357600080fd5b508051602091820151600160a060020a039096166000908152600a909252604090912054909560ff9091169350915050565b600f5481565b303190565b600054600160a060020a03163314611530576040805160e560020a62461bcd02815260206004820152600d602482015260008051602061226d833981519152604482015290519081900360640190fd5b611538611c68565b6040805142815290517f5189687a7ec9d4aebe2f548f952ffbbad19e4cd545c4a05b5e2369cd272dd5519181900360200190a1565b803b8015905b50919050565b6000611583611dd1565b61158b611dd1565b61159484611c87565b91506115a38260000151610499565b806115c557506102586115c3836020015142611d4590919063ffffffff16565b105b156115d35760009250611626565b6115db611c14565b82519091506090906115f490839063ffffffff611b2816565b61025861160e856020015142611d4590919063ffffffff16565b81151561161757fe5b040281151561162257fe5b0492505b5050919050565b151590565b61163a611de8565b604051809103906000f080158015611656573d6000803e3d6000fd5b50600b805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556000600e5542600f81905561169b90600190611d5c565b6001546002546003546040805142815260208101949094528381019290925260ff166060830152517f16171a4e996b33ebb6320397242a4168f60c16e87fbd8b58f1744d68c4179caf9181900360800190a16040805142815290517fc66870ef5f6257a76295d443e9221488043ec691f830f6c6128755c3518e3c759181900360200190a1565b60008061172e836118b6565b905080158015906117465750600283015460ff168111155b9392505050565b600080611759836118b6565b905080158061176e5750600283015460ff1681115b1561177c5760009150611573565b600183015460ff82166000908152600385016020526040902054106117a45760009150611573565b60ff81166000908152600384016020526040902054600184015403915050919050565b80151561102b576040805160e560020a62461bcd02815260206004820152601660248201527f72657175697265206e6f74207a65726f2076616c756500000000000000000000604482015290519081900360640190fd5b60008183111561182f57508061129f565b5090919050565b600080611842846118b6565b90508015806118575750600284015460ff1681115b1561186557600091506118af565b600184015460ff821660009081526003860160205260409020548401111561189057600091506118af565b60ff811660009081526003850160205260409020805484019055600191505b5092915050565b600042826000015411156118cc5750600061049c565b815462015180904203046001019050919050565b60030154421090565b600160a060020a03811660009081526004830160205260408120548190819060ff16151561191a5760009250611a76565b8454604080517f993d3489000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152825193169263993d3489926024808401939192918290030181600087803b15801561197d57600080fd5b505af1158015611991573d6000803e3d6000fd5b505050506040513d60408110156119a757600080fd5b505191508115156119bb5760009250611a76565b6119c982866002015461181e565b6001860154604080517fdbcbaca4000000000000000000000000000000000000000000000000000000008152600160a060020a03888116600483015282519496509092169263dbcbaca49260248082019392918290030181600087803b158015611a3257600080fd5b505af1158015611a46573d6000803e3d6000fd5b505050506040513d6040811015611a5c57600080fd5b50519050818110611a705760009250611a76565b80820392505b505092915050565b6000811515611a8f5750600061129f565b600183015483548302811515611aa157fe5b049392505050565b600160a060020a0316151590565b611abf611dd1565b303169021e19e0c9bab2400000811015611ae457611add6014611dac565b9150611b24565b8069021e19e0c9bab240000011158015611b08575069152d02c7e14af68000008111155b15611b1757611add6012611dac565b611b216010611dac565b91505b5090565b6000811515611b395750600061129f565b602083015183518302811515611aa157fe5b60005b81518161ffff161015611baf576001836004016000848461ffff16815181101515611b7557fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff1916911515919091179055600101611b4e565b505050565b600160a060020a038116151561102b576040805160e560020a62461bcd02815260206004820152601860248201527f72657175697265206e6f74207a65726f20616464726573730000000000000000604482015290519081900360640190fd5b611c1c611dd1565b3031683635c9adc5dea00000811015611c3957611add6014611dac565b80683635c9adc5dea0000011158015611b08575069070efc4d0e326fb400008111611b1757611add6012611dac565b6000805473ffffffffffffffffffffffffffffffffffffffff19169055565b611c8f611dd1565b600b54604080517fdbcbaca4000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301528251600094859492169263dbcbaca492602480830193919282900301818787803b158015611cf657600080fd5b505af1158015611d0a573d6000803e3d6000fd5b505050506040513d6040811015611d2057600080fd5b5080516020918201516040805180820190915291825291810191909152949350505050565b60008083831115611d5557600080fd5b5050900390565b80825560015b600283015460ff90811690821611611baf5760ff8116600090815260038401602052604090205415611da45760ff811660009081526003840160205260408120555b600101611d62565b611db4611dd1565b506040805180820190915281548152600190910154602082015290565b604080518082019091526000808252602082015290565b60405161047480611df9833901905600608060405260008054600160a060020a0319163317905561044f806100256000396000f3006080604052600436106100775763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166320987e64811461007c57806341b2121c146100b457806344013585146100db578063949d225d146100ff578063cee2a9cf14610126578063dbcbaca414610147575b600080fd5b34801561008857600080fd5b506100a0600160a060020a0360043516602435610181565b604080519115158252519081900360200190f35b3480156100c057600080fd5b506100a0600160a060020a036004351660243560443561024a565b3480156100e757600080fd5b506100a0600160a060020a0360043516602435610316565b34801561010b57600080fd5b506101146103de565b60408051918252519081900360200190f35b34801561013257600080fd5b506100a0600160a060020a03600435166103e4565b34801561015357600080fd5b50610168600160a060020a0360043516610400565b6040805192835260208301919091528051918290030190f35b60008054600160a060020a031633146101fb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6163636573732064656e69656400000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a038316600090815260026020526040902054151561022257506000610244565b50600160a060020a038216600090815260026020526040902080548201905560015b92915050565b600080548190600160a060020a031633146102c657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6163636573732064656e69656400000000000000000000000000000000000000604482015290519081900360640190fd5b50600160a060020a038416600090815260026020526040902080541515806102ec575083155b156102fa576000915061030e565b838155600180820184905580548101815591505b509392505050565b60008054600160a060020a0316331461039057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6163636573732064656e69656400000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a03831660009081526002602052604090205415156103b757506000610244565b50600160a060020a0382166000908152600260205260409020600190810182905592915050565b60015481565b600160a060020a03166000908152600260205260408120541190565b600160a060020a03166000908152600260205260409020805460019091015490915600a165627a7a72305820233221f3ef5e6019774acf7e816ddc22fa8dbe0898388f0c3de7c7e9693adb7b00296163636573732064656e69656400000000000000000000000000000000000000a165627a7a72305820a99a410438dfb957460d8507b8449e419fdd01f926ef722909a90c1e53cabd960029608060405260008054600160a060020a0319163317905561044f806100256000396000f3006080604052600436106100775763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166320987e64811461007c57806341b2121c146100b457806344013585146100db578063949d225d146100ff578063cee2a9cf14610126578063dbcbaca414610147575b600080fd5b34801561008857600080fd5b506100a0600160a060020a0360043516602435610181565b604080519115158252519081900360200190f35b3480156100c057600080fd5b506100a0600160a060020a036004351660243560443561024a565b3480156100e757600080fd5b506100a0600160a060020a0360043516602435610316565b34801561010b57600080fd5b506101146103de565b60408051918252519081900360200190f35b34801561013257600080fd5b506100a0600160a060020a03600435166103e4565b34801561015357600080fd5b50610168600160a060020a0360043516610400565b6040805192835260208301919091528051918290030190f35b60008054600160a060020a031633146101fb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6163636573732064656e69656400000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a038316600090815260026020526040902054151561022257506000610244565b50600160a060020a038216600090815260026020526040902080548201905560015b92915050565b600080548190600160a060020a031633146102c657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6163636573732064656e69656400000000000000000000000000000000000000604482015290519081900360640190fd5b50600160a060020a038416600090815260026020526040902080541515806102ec575083155b156102fa576000915061030e565b838155600180820184905580548101815591505b509392505050565b60008054600160a060020a0316331461039057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6163636573732064656e69656400000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a03831660009081526002602052604090205415156103b757506000610244565b50600160a060020a0382166000908152600260205260409020600190810182905592915050565b60015481565b600160a060020a03166000908152600260205260408120541190565b600160a060020a03166000908152600260205260409020805460019091015490915600a165627a7a72305820233221f3ef5e6019774acf7e816ddc22fa8dbe0898388f0c3de7c7e9693adb7b0029"
}