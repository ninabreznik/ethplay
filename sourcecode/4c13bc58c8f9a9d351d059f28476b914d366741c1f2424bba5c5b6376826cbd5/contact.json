{
  "address": "0xbc5716fb981c03dd0b50909f7581c53f6461d72c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LongHuContract",
  "compilerVersion": "v0.5.5+commit.47a71e8f",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-01\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n//import \"github.com/oraclize/ethereum-api/oraclizeAPI.sol\";\n\ncontract LongHuContract {\n  uint  maxProfit;//最高奖池\n  uint  maxmoneypercent;\n  uint public contractBalance;\n  //uint  oraclizeFee;\n  //uint  oraclizeGasLimit;\n  uint minBet;\n  uint onoff;//游戏启用或关闭\n  address private owner;\n  uint private orderId;\n  uint private randonce;\n\n  event LogNewOraclizeQuery(string description,bytes32 queryId);\n  event LogNewRandomNumber(string result,bytes32 queryId);\n  event LogSendBonus(uint id,bytes32 lableId,uint playId,uint content,uint singleMoney,uint mutilple,address user,uint betTime,uint status,uint winMoney);\n  event LogBet(bytes32 queryId);\n\n  mapping (address => bytes32[]) playerLableList;////玩家下注批次\n  mapping (bytes32 => mapping (uint => uint[7])) betList;//批次，注单映射\n  mapping (bytes32 => uint) lableCount;//批次，注单数\n  mapping (bytes32 => uint) lableTime;//批次，投注时间\n  mapping (bytes32 => uint) lableStatus;//批次，状态 0 未结算，1 已撤单，2 已结算 3 已派奖\n  mapping (bytes32 => uint[4]) openNumberList;//批次开奖号码映射\n  mapping (bytes32 => string) openNumberStr;//批次开奖号码映射\n  mapping (bytes32 => address payable) lableUser;\n\n  bytes tempNum ; //temporarily hold the string part until a space is recieved\n  uint[] numbers;\n\n  constructor() public {\n    owner = msg.sender;\n    orderId = 0;\n    onoff=1;\n    //minBet=1500000000000000;//最小金额要比手续费大\n    //oraclizeFee=1200000000000000;\n    maxmoneypercent=80;\n    //oraclizeGasLimit=200000;\n    contractBalance = address(this).balance;\n    maxProfit=(address(this).balance * maxmoneypercent)/100;\n    //oraclize_setCustomGasPrice(3000000000);\n    randonce = 0;\n  }\n\n  modifier onlyAdmin() {\n      require(msg.sender == owner);\n      _;\n  }\n  //modifier onlyOraclize {\n  //    require (msg.sender == oraclize_cbAddress());\n  //    _;\n // }\n\n  function setGameOnoff(uint _on0ff) public onlyAdmin{\n    onoff=_on0ff;\n  }\n\n  function getPlayRate(uint playId,uint level) internal pure returns (uint){\n      uint result = 0;\n      if(playId == 1 || playId == 3){\n        result = 19;//10bei\n      }else if(playId == 2){\n        result = 9;\n      }\n      return result;\n    }\n\n    function doBet(uint[] memory playid,uint[] memory betMoney,uint[] memory betContent,uint mutiply) public payable returns (bytes32 queryId) {\n      require(onoff==1);\n      require(playid.length > 0);\n      require(mutiply > 0);\n      require(msg.value >= minBet);\n\n      checkBet(playid,betMoney,betContent,mutiply,msg.value);\n\n      /* uint total = 0; */\n      bytes32 queryId;\n      queryId = keccak256(abi.encodePacked(blockhash(block.number-1),now,randonce));\n      //  uint oraGasLimit = oraclizeGasLimit;\n      //  if(playid.length > 1 && playid.length <= 3){\n      //      oraGasLimit = 600000;\n      //  }else{\n      //      oraGasLimit = 1000000;\n      //  }\n        emit LogNewOraclizeQuery(\"Oraclize query was sent, standing by for the answer..\",queryId);\n      //  queryId = oraclize_query(\"URL\", \"json(https://api.random.org/json-rpc/1/invoke).result.random.data\", '\\n{\"jsonrpc\":\"2.0\",\"method\":\"generateIntegers\",\"params\":{\"apiKey\":\"8817de90-6e86-4d0d-87ec-3fd9b437f711\",\"n\":4,\"min\":1,\"max\":52,\"replacement\":false,\"base\":10},\"id\":1}',oraGasLimit);\n      /* } */\n\n       uint[7] memory tmp ;\n       uint totalspand = 0;\n      for(uint i=0;i<playid.length;i++){\n        orderId++;\n        tmp[0] =orderId;\n        tmp[1] =playid[i];\n        tmp[2] =betContent[i];\n        tmp[3] =betMoney[i]*mutiply;\n        totalspand +=betMoney[i]*mutiply;\n        tmp[4] =now;\n        tmp[5] =0;\n        tmp[6] =0;\n        betList[queryId][i] =tmp;\n      }\n      require(msg.value >= totalspand);\n\n      lableTime[queryId] = now;\n      lableCount[queryId] = playid.length;\n      lableUser[queryId] = msg.sender;\n      uint[4] memory codes = [uint(0),0,0,0];\n      openNumberList[queryId] = codes;\n      openNumberStr[queryId] =\"0,0,0,0\";\n      lableStatus[queryId] = 0;\n\n      uint index=playerLableList[msg.sender].length++;\n      playerLableList[msg.sender][index]=queryId;//index:id\n      emit LogBet(queryId);\n      opencode(queryId);\n      return queryId;\n    }\n\n    function opencode(bytes32 queryId) private {\n      if (lableCount[queryId] < 1) revert();\n      uint[4] memory codes = [uint(0),0,0,0];//开奖号码\n\n      bytes32 code0hash = keccak256(abi.encodePacked(blockhash(block.number-1), now,msg.sender,randonce));\n      randonce  = randonce + uint(code0hash)%1000;\n      //uint code0int = uint(code0hash) % 52 + 1;\n      codes[0] = uint(code0hash) % 52 + 1;\n      string memory code0 =uint2str(uint(code0hash) % 52 + 1);\n\n      bytes32 code1hash = keccak256(abi.encodePacked(blockhash(block.number-1), now,msg.sender,randonce));\n      randonce  = randonce + uint(code1hash)%1000;\n      //uint code1int = uint(code1hash) % 52 + 1;\n      codes[1] = uint(code1hash) % 52 + 1;\n      string memory code1=uint2str(uint(code1hash) % 52 + 1);\n\n      bytes32 code2hash = keccak256(abi.encodePacked(blockhash(block.number-1), now,msg.sender,randonce));\n      randonce  = randonce + uint(code2hash)%1000;\n      //uint code2int = uint(code2hash) % 52 + 1;\n      codes[2] = uint(code2hash) % 52 + 1;\n      string memory code2=uint2str(uint(code2hash) % 52 + 1);\n\n      bytes32 code3hash = keccak256(abi.encodePacked(blockhash(block.number-1), now,msg.sender,randonce));\n      randonce  = randonce + uint(code3hash)%1000;\n      //uint code3int = uint(code3hash) % 52 + 1;\n      codes[3] = uint(code3hash) % 52 + 1;\n      string memory code3=uint2str(uint(code3hash) % 52 + 1);\n\n      //string memory code0 =uint2str(code0int);\n      //string memory code1=uint2str(code1int);\n      //string memory code2=uint2str(code2int);\n      //string memory code3=uint2str(code3int);\n      //codes[0] = code0int;\n      //codes[1] = code1int;\n      //codes[2] = code2int;\n      //codes[3] = code3int;\n      openNumberList[queryId] = codes;\n      string memory codenum = \"\";\n      codenum = strConcat(code0,\",\",code1,\",\",code2);\n      openNumberStr[queryId] = strConcat(codenum,\",\",code3);\n      //结算，派奖\n      doCheckBounds(queryId);\n    }\n\n    function checkBet(uint[] memory playid,uint[] memory betMoney,uint[] memory betContent,uint mutiply,uint betTotal) internal{\n        uint totalMoney = 0;\n      uint totalWin1 = 0;\n      uint totalWin2 = 0;\n      uint rate;\n      uint i;\n      for(i=0;i<playid.length;i++){\n        if(playid[i] >=1 && playid[i]<= 3){\n          totalMoney += betMoney[i] * mutiply;\n        }else{\n          revert();\n        }\n        if(playid[i] ==1 || playid[i] ==3){//龙虎\n          rate = getPlayRate(playid[i],0);\n          totalWin1+=betMoney[i] * mutiply *rate/10;\n          totalWin2+=betMoney[i] * mutiply *rate/10;\n        }else if(playid[i] ==2){//和\n          rate = getPlayRate(playid[i],0);\n          totalWin2+=betMoney[i] * mutiply *rate;\n        }\n      }\n      uint maxWin=totalWin1;\n      if(totalWin2 > maxWin){\n        maxWin=totalWin2;\n      }\n      require(betTotal >= totalMoney);\n\n      require(maxWin < maxProfit);\n    }\n    /*\n    function __callback(bytes32 queryId, string memory result) public onlyOraclize {\n        if (lableCount[queryId] < 1) revert();\n      if (msg.sender != oraclize_cbAddress()) revert();\n        emit LogNewRandomNumber(result,queryId);\n        bytes memory tmp = bytes(result);\n        uint[4] memory codes = [uint(0),0,0,0];\n        uint [] memory codess ;\n        codess = splitStr(result,\",\");\n        uint k = 0;\n        for(uint i = 0;i<codess.length;i++){\n            if(k < codes.length){\n                     codes[k] = codess[i];\n                     k++;\n            }\n        }\n\n        string memory code0=uint2str(codes[0]);\n        string memory code1=uint2str(codes[1]);\n        string memory code2=uint2str(codes[2]);\n        string memory code3=uint2str(codes[3]);\n        openNumberList[queryId] = codes;\n        string memory codenum = \"\";\n        codenum = strConcat(code0,\",\",code1,\",\",code2);\n        openNumberStr[queryId] = strConcat(codenum,\",\",code3);\n        doCheckBounds(queryId);\n    }\n    */\n    function doCancel(bytes32 queryId) internal {\n      uint sta = lableStatus[queryId];\n      require(sta == 0);\n      uint[4] memory codes = openNumberList[queryId];\n      require(codes[0] == 0 || codes[1] == 0 ||codes[2] == 0 ||codes[3] == 0);\n\n      uint totalBet = 0;\n      uint len = lableCount[queryId];\n\n      address payable to = lableUser[queryId];\n      for(uint aa = 0 ; aa<len; aa++){\n        //未结算\n        if(betList[queryId][aa][5] == 0){\n          totalBet+=betList[queryId][aa][3];\n        }\n      }\n\n      if(totalBet > 0){\n        to.transfer(totalBet);\n      }\n      contractBalance=address(this).balance;\n      maxProfit=(address(this).balance * maxmoneypercent)/100;\n      lableStatus[queryId] = 1;\n    }\n\n    function doSendBounds(bytes32 queryId) public payable {\n      uint sta = lableStatus[queryId];\n      require(sta == 2);\n\n      uint totalWin = 0;\n      uint len = lableCount[queryId];\n\n      address payable to = lableUser[queryId];\n      for(uint aa = 0 ; aa<len; aa++){\n        //中奖\n        if(betList[queryId][aa][5] == 2){\n          totalWin+=betList[queryId][aa][6];\n        }\n      }\n\n      if(totalWin > 0){\n          to.transfer(totalWin);//转账\n      }\n      lableStatus[queryId] = 3;\n      contractBalance=address(this).balance;\n      maxProfit=(address(this).balance * maxmoneypercent)/100;\n    }\n\n    //中奖判断\n    function checkWinMoney(uint[7] storage betinfo,uint[4] memory codes) internal {\n      uint rates;\n      uint code0 = codes[0]%13==0?13:codes[0]%13;\n      uint code1 = codes[1]%13==0?13:codes[1]%13;\n      uint code2 = codes[2]%13==0?13:codes[2]%13;\n      uint code3 = codes[3]%13==0?13:codes[3]%13;\n      uint  onecount = code0 + code2;\n      uint  twocount = code1 + code3;\n      onecount = onecount%10;\n      twocount = twocount%10;\n      if(betinfo[1] ==1){//long\n          if(onecount > twocount){\n              betinfo[5]=2;\n              rates = getPlayRate(betinfo[1],0);\n              betinfo[6]=betinfo[3]*rates/10;\n          }else{\n             // if(onecount == twocount){//和\n             //     betinfo[5]=2;\n             //     rates = 1;\n             //     betinfo[6]=betinfo[3]*rates;\n             // }else{\n                  betinfo[5]=1;\n             // }\n          }\n      }else if(betinfo[1] == 2){//和\n          if(onecount == twocount){\n            betinfo[5]=2;\n            rates = getPlayRate(betinfo[1],0);\n            betinfo[6]=betinfo[3]*rates;\n          }else{\n            betinfo[5]=1;\n          }\n\n        }else if(betinfo[1] == 3){//虎\n          betinfo[5]=1;\n          if(onecount < twocount ){\n            betinfo[5]=2;\n            rates = getPlayRate(betinfo[1],0);\n            betinfo[6]=betinfo[3]*rates/10;\n          }else{\n              //if(onecount == twocount){//和\n              //    betinfo[5]=2;\n              //    rates = 1;\n              //    betinfo[6]=betinfo[3]*rates;\n             // }else{\n                  betinfo[5]=1;\n             // }\n          }\n        }\n\n    }\n\n    function getLastBet() public view returns(string memory opennum,uint[7][] memory result){\n      uint len=playerLableList[msg.sender].length;\n      require(len>0);\n\n      uint i=len-1;\n      bytes32 lastLable = playerLableList[msg.sender][i];\n      uint max = lableCount[lastLable];\n      if(max > 50){\n          max = 50;\n      }\n      uint[7][] memory result = new uint[7][](max) ;\n      string memory opennum = \"\";\n      for(uint a=0;a<max;a++){\n         string memory ttmp =openNumberStr[lastLable];\n         if(a==0){\n           opennum =ttmp;\n         }else{\n           opennum = strConcat(opennum,\";\",ttmp);\n         }\n\n         result[a] = betList[lastLable][a];\n         if(lableStatus[lastLable] == 1){\n           result[a][5]=3;\n         }\n\n      }\n\n      return (opennum,result);\n    }\n\n    function getLableRecords(bytes32 lable) public view returns(string memory opennum,uint[7][] memory result){\n      uint max = lableCount[lable];\n      if(max > 50){\n          max = 50;\n      }\n      uint[7][] memory result = new uint[7][](max) ;\n      string memory opennum=\"\";\n\n      for(uint a=0;a<max;a++){\n         result[a] = betList[lable][a];\n         if(lableStatus[lable] == 1){\n           result[a][5]=3;\n         }\n         string memory ttmp =openNumberStr[lable];\n         if(a==0){\n           opennum =ttmp;\n         }else{\n           opennum = strConcat(opennum,\";\",ttmp);\n         }\n      }\n\n      return (opennum,result);\n    }\n\n    function getAllRecords() public view returns(string  memory opennum,uint[7][] memory result){\n        uint len=playerLableList[msg.sender].length;\n        require(len>0);\n\n        uint max;\n        bytes32 lastLable ;\n        uint ss;\n\n        for(uint i1=0;i1<len;i1++){\n            ss = len-i1-1;\n            lastLable = playerLableList[msg.sender][ss];\n            max += lableCount[lastLable];\n            if(100 < max){\n              max = 100;\n              break;\n            }\n        }\n\n        uint[7][] memory result = new uint[7][](max) ;\n        bytes32[] memory resultlable = new bytes32[](max) ;\n        string memory opennum=\"\";\n\n        bool flag=false;\n        uint betnums;\n        uint j=0;\n\n        for(uint ii=0;ii<len;ii++){\n            ss = len-ii-1;\n            lastLable = playerLableList[msg.sender][ss];\n            betnums = lableCount[lastLable];\n            for(uint k= 0; k<betnums; k++){\n              if(j<max){\n                  resultlable[j] = lastLable;\n              \t string memory ttmp =openNumberStr[lastLable];\n                 if(j==0){\n                   opennum =ttmp;\n                 }else{\n                   opennum = strConcat(opennum,\";\",ttmp);\n                 }\n                  result[j] = betList[lastLable][k];\n                  if(lableStatus[lastLable] == 1){\n                    result[j][5]=3;\n                  }else if(lableStatus[lastLable] == 2){\n                    if(result[j][5]==2){\n                      result[j][5]=4;\n                    }\n                  }else if(lableStatus[lastLable] == 3){\n                    if(result[j][5]==2){\n                      result[j][5]=5;\n                    }\n                  }\n                  j++;\n              }else{\n                flag = true;\n                break;\n              }\n            }\n            if(flag){\n                break;\n            }\n        }\n        return (opennum,result);\n    }\n\n  //function setoraclegasprice(uint newGas) public onlyAdmin(){\n  //  oraclize_setCustomGasPrice(newGas * 1 wei);\n  //}\n  //function setoraclelimitgas(uint _oraclizeGasLimit) public onlyAdmin(){\n  //  oraclizeGasLimit=(_oraclizeGasLimit);\n  //}\n\n  function senttest() public payable onlyAdmin{\n      contractBalance=address(this).balance;\n      maxProfit=(address(this).balance*maxmoneypercent)/100;\n  }\n\n  function withdraw(uint _amount , address payable desaccount) public onlyAdmin{\n      desaccount.transfer(_amount);\n      contractBalance=address(this).balance;\n      maxProfit=(address(this).balance * maxmoneypercent)/100;\n  }\n\n  function deposit() public payable onlyAdmin returns(uint8 ret){\n      contractBalance=address(this).balance;\n      maxProfit=(address(this).balance * maxmoneypercent)/100;\n      ret = 1;\n  }\n\n  function getDatas() public view returns(\n    uint _maxProfit,\n    uint _minBet,\n    uint _contractbalance,\n    uint _onoff,\n    address _owner,\n    uint _oraclizeFee\n    ){\n        _maxProfit=maxProfit;\n        _minBet=minBet;\n        _contractbalance=contractBalance;\n        _onoff=onoff;\n        _owner=owner;\n       // _oraclizeFee=oraclizeFee;\n    }\n\n    function getLableList() public view returns(string memory opennum,bytes32[] memory lablelist,uint[] memory labletime,uint[] memory lablestatus,uint){\n      uint len=playerLableList[msg.sender].length;\n      require(len>0);\n\n      uint max=50;\n      if(len < 50){\n          max = len;\n      }\n\n      bytes32[] memory lablelist = new bytes32[](max) ;\n      uint[] memory labletime = new uint[](max) ;\n      uint[] memory lablestatus = new uint[](max) ;\n      string memory opennum=\"\";\n\n      bytes32 lastLable ;\n      for(uint i=0;i<max;i++){\n          lastLable = playerLableList[msg.sender][max-i-1];\n          lablelist[i]=lastLable;\n          labletime[i]=lableTime[lastLable];\n          lablestatus[i]=lableStatus[lastLable];\n          string memory ttmp =openNumberStr[lastLable];\n         if(i==0){\n           opennum =ttmp;\n         }else{\n           opennum = strConcat(opennum,\";\",ttmp);\n         }\n      }\n\n      return (opennum,lablelist,labletime,lablestatus,now);\n    }\n\n    function doCheckBounds(bytes32 queryId) internal{\n        uint sta = lableStatus[queryId];\n        require(sta == 0 || sta == 2);\n        uint[4] memory codes = openNumberList[queryId];\n        require(codes[0] > 0);\n\n        uint len = lableCount[queryId];\n\n        uint totalWin;\n        address payable to = lableUser[queryId];\n        for(uint aa = 0 ; aa<len; aa++){\n          if(sta == 0){\n           if(betList[queryId][aa][5] == 0){\n             checkWinMoney(betList[queryId][aa],codes);\n             totalWin+=betList[queryId][aa][6];\n           }\n          }else if(sta == 2){\n              totalWin+=betList[queryId][aa][6];\n          }\n        }\n\n        lableStatus[queryId] = 2;\n\n        if(totalWin > 0){\n          if(totalWin < address(this).balance){\n            to.transfer(totalWin);\n            lableStatus[queryId] = 3;\n          }else{\n              emit LogNewOraclizeQuery(\"sent bouns fail.\",queryId);\n          }\n        }else{\n          lableStatus[queryId] = 3;\n        }\n        contractBalance=address(this).balance;\n        maxProfit=(address(this).balance * maxmoneypercent)/100;\n    }\n\n    function getOpenNum(bytes32 queryId) public view returns(string memory result){\n        result = openNumberStr[queryId];\n        //return openNumberStr[queryId];\n    }\n\n    function doCheckSendBounds() public payable{\n        uint len=playerLableList[msg.sender].length;\n\n      uint max=50;\n      if(len < 50){\n          max = len;\n      }\n\n      uint sta;\n      bytes32 lastLable ;\n      for(uint i=0;i<max;i++){\n          lastLable = playerLableList[msg.sender][max-i-1];\n          sta = lableStatus[lastLable];\n          if(sta == 0 || sta==2){\n            doCheckBounds(lastLable);\n          }\n      }\n    }\n\n    function doCancelAll() public payable{\n        uint len=playerLableList[msg.sender].length;\n\n      uint max=50;\n      if(len < 50){\n          max = len;\n      }\n\n      uint sta;\n      uint bettime;\n      bytes32 lastLable ;\n      for(uint i=0;i<max;i++){\n          lastLable = playerLableList[msg.sender][max-i-1];\n          sta = lableStatus[lastLable];\n          bettime = lableTime[lastLable];\n          if(sta == 0 && (now - bettime)>600){\n            doCancel(lastLable);\n          }\n      }\n    }\n\n    function splitStr(string memory str, string memory delimiter) internal returns (uint [] memory){ //delimiter can be any character that separates the integers\n     bytes memory b = bytes(str); //cast the string to bytes to iterate\n     bytes memory delm = bytes(delimiter);\n     delete(numbers);\n     delete(tempNum);\n     for(uint i; i<b.length ; i++){\n     if(b[i] != delm[0]) { //check if a not space\n       tempNum.push(b[i]);\n      }\n      else {\n       numbers.push(parseInt(string(tempNum))); //push the int value converted from string to numbers array\n       tempNum = \"\"; //reset the tempNum to catch the net number\n      }\n     }\n     if(b[b.length-1] != delm[0]) {\n      numbers.push(parseInt(string(tempNum)));\n     }\n     return numbers;\n    }\n\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint j = _i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (_i != 0) {\n            bstr[k--] = byte(uint8(48 + _i % 10));\n            _i /= 10;\n        }\n     return string(bstr);\n    }\n\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory _concatenatedString) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory _concatenatedString) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory _concatenatedString) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        uint i = 0;\n        for (i = 0; i < _ba.length; i++) {\n            babcde[k++] = _ba[i];\n        }\n        for (i = 0; i < _bb.length; i++) {\n            babcde[k++] = _bb[i];\n        }\n        for (i = 0; i < _bc.length; i++) {\n            babcde[k++] = _bc[i];\n        }\n        for (i = 0; i < _bd.length; i++) {\n            babcde[k++] = _bd[i];\n        }\n        for (i = 0; i < _be.length; i++) {\n            babcde[k++] = _be[i];\n        }\n        return string(babcde);\n    }\n\n    function safeParseInt(string memory _a) internal pure returns (uint _parsedInt) {\n        return safeParseInt(_a, 0);\n    }\n\n    function safeParseInt(string memory _a, uint _b) internal pure returns (uint _parsedInt) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i = 0; i < bresult.length; i++) {\n            if ((uint(uint8(bresult[i])) >= 48) && (uint(uint8(bresult[i])) <= 57)) {\n                if (decimals) {\n                   if (_b == 0) break;\n                    else _b--;\n                }\n                mint *= 10;\n                mint += uint(uint8(bresult[i])) - 48;\n            } else if (uint(uint8(bresult[i])) == 46) {\n                require(!decimals, 'More than one decimal encountered in string!');\n                decimals = true;\n            } else {\n                revert(\"Non-numeral character encountered in string!\");\n            }\n        }\n        if (_b > 0) {\n            mint *= 10 ** _b;\n        }\n        return mint;\n    }\n\n    function parseInt(string memory _a) internal pure returns (uint _parsedInt) {\n        return parseInt(_a, 0);\n    }\n\n    function parseInt(string memory _a, uint _b) internal pure returns (uint _parsedInt) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i = 0; i < bresult.length; i++) {\n            if ((uint(uint8(bresult[i])) >= 48) && (uint(uint8(bresult[i])) <= 57)) {\n                if (decimals) {\n                   if (_b == 0) {\n                       break;\n                   } else {\n                       _b--;\n                   }\n                }\n                mint *= 10;\n                mint += uint(uint8(bresult[i])) - 48;\n            } else if (uint(uint8(bresult[i])) == 46) {\n                decimals = true;\n            }\n        }\n        if (_b > 0) {\n            mint *= 10 ** _b;\n        }\n        return mint;\n    }\n\n\n    function setRandomSeed(uint _randomSeed) public payable onlyAdmin{\n      randonce = _randomSeed;\n    }\n\n    function getRandomSeed() public view onlyAdmin returns(uint _randonce) {\n      _randonce = randonce;\n    }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"desaccount\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"queryId\",\"type\":\"bytes32\"}],\"name\":\"getOpenNum\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lable\",\"type\":\"bytes32\"}],\"name\":\"getLableRecords\",\"outputs\":[{\"name\":\"opennum\",\"type\":\"string\"},{\"name\":\"result\",\"type\":\"uint256[7][]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLableList\",\"outputs\":[{\"name\":\"opennum\",\"type\":\"string\"},{\"name\":\"lablelist\",\"type\":\"bytes32[]\"},{\"name\":\"labletime\",\"type\":\"uint256[]\"},{\"name\":\"lablestatus\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_randomSeed\",\"type\":\"uint256\"}],\"name\":\"setRandomSeed\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doCancelAll\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDatas\",\"outputs\":[{\"name\":\"_maxProfit\",\"type\":\"uint256\"},{\"name\":\"_minBet\",\"type\":\"uint256\"},{\"name\":\"_contractbalance\",\"type\":\"uint256\"},{\"name\":\"_onoff\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_oraclizeFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_on0ff\",\"type\":\"uint256\"}],\"name\":\"setGameOnoff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRandomSeed\",\"outputs\":[{\"name\":\"_randonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doCheckSendBounds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllRecords\",\"outputs\":[{\"name\":\"opennum\",\"type\":\"string\"},{\"name\":\"result\",\"type\":\"uint256[7][]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"queryId\",\"type\":\"bytes32\"}],\"name\":\"doSendBounds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastBet\",\"outputs\":[{\"name\":\"opennum\",\"type\":\"string\"},{\"name\":\"result\",\"type\":\"uint256[7][]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"ret\",\"type\":\"uint8\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"playid\",\"type\":\"uint256[]\"},{\"name\":\"betMoney\",\"type\":\"uint256[]\"},{\"name\":\"betContent\",\"type\":\"uint256[]\"},{\"name\":\"mutiply\",\"type\":\"uint256\"}],\"name\":\"doBet\",\"outputs\":[{\"name\":\"queryId\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"senttest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"queryId\",\"type\":\"bytes32\"}],\"name\":\"LogNewOraclizeQuery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"queryId\",\"type\":\"bytes32\"}],\"name\":\"LogNewRandomNumber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lableId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"playId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"content\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"singleMoney\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"mutilple\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"betTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winMoney\",\"type\":\"uint256\"}],\"name\":\"LogSendBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"queryId\",\"type\":\"bytes32\"}],\"name\":\"LogBet\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600681905550600160048190555060506001819055503073ffffffffffffffffffffffffffffffffffffffff163160028190555060646001543073ffffffffffffffffffffffffffffffffffffffff1631028115156100af57fe5b046000819055506000600781905550613d5e806100cd6000396000f3fe6080604052600436106100fd5760003560e01c80638b7afe2e11610095578063ae817dd111610064578063ae817dd1146106e7578063bbce3fc214610715578063d0e30db014610810578063fc22341014610834578063fca2d9f514610a32576100fd565b80638b7afe2e1461058c57806393b3cc6b146105b75780639536c05f146105e2578063a7f9fe72146105ec576100fd565b806366fea1d4116100d157806366fea1d41461049f5780636c0a1117146104cd5780636d34a775146104d7578063749ca1f314610551576100fd565b8062f714ce14610102578063039c9d841461015d57806303dc0532146102115780635b945c0e14610330575b600080fd5b34801561010e57600080fd5b5061015b6004803603604081101561012557600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a3c565b005b34801561016957600080fd5b506101966004803603602081101561018057600080fd5b8101908080359060200190929190505050610b2f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101d65780820151818401526020810190506101bb565b50505050905090810190601f1680156102035780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021d57600080fd5b5061024a6004803603602081101561023457600080fd5b8101908080359060200190929190505050610be4565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561028e578082015181840152602081019050610273565b50505050905090810190601f1680156102bb5780820380516001836020036101000a031916815260200191505b508381038252848181518152602001915080516000925b8184101561031d57828490602001906020020151600760200280838360005b8381101561030c5780820151818401526020810190506102f1565b5050505090500192600101926102d2565b9250505094505050505060405180910390f35b34801561033c57600080fd5b50610345610e58565b604051808060200180602001806020018060200186815260200185810385528a818151815260200191508051906020019080838360005b8381101561039757808201518184015260208101905061037c565b50505050905090810190601f1680156103c45780820380516001836020036101000a031916815260200191505b50858103845289818151815260200191508051906020019060200280838360005b838110156104005780820151818401526020810190506103e5565b50505050905001858103835288818151815260200191508051906020019060200280838360005b83811015610442578082015181840152602081019050610427565b50505050905001858103825287818151815260200191508051906020019060200280838360005b83811015610484578082015181840152602081019050610469565b50505050905001995050505050505050505060405180910390f35b6104cb600480360360208110156104b557600080fd5b8101908080359060200190929190505050611193565b005b6104d56111f9565b005b3480156104e357600080fd5b506104ec611327565b604051808781526020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001965050505050505060405180910390f35b34801561055d57600080fd5b5061058a6004803603602081101561057457600080fd5b8101908080359060200190929190505050611371565b005b34801561059857600080fd5b506105a16113d7565b6040518082815260200191505060405180910390f35b3480156105c357600080fd5b506105cc6113dd565b6040518082815260200191505060405180910390f35b6105ea611443565b005b3480156105f857600080fd5b50610601611554565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561064557808201518184015260208101905061062a565b50505050905090810190601f1680156106725780820380516001836020036101000a031916815260200191505b508381038252848181518152602001915080516000925b818410156106d457828490602001906020020151600760200280838360005b838110156106c35780820151818401526020810190506106a8565b505050509050019260010192610689565b9250505094505050505060405180910390f35b610713600480360360208110156106fd57600080fd5b8101908080359060200190929190505050611ad1565b005b34801561072157600080fd5b5061072a611c9b565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561076e578082015181840152602081019050610753565b50505050905090810190601f16801561079b5780820380516001836020036101000a031916815260200191505b508381038252848181518152602001915080516000925b818410156107fd57828490602001906020020151600760200280838360005b838110156107ec5780820151818401526020810190506107d1565b5050505090500192600101926107b2565b9250505094505050505060405180910390f35b610818611fca565b604051808260ff1660ff16815260200191505060405180910390f35b610a1c6004803603608081101561084a57600080fd5b810190808035906020019064010000000081111561086757600080fd5b82018360208201111561087957600080fd5b8035906020019184602083028401116401000000008311171561089b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156108fb57600080fd5b82018360208201111561090d57600080fd5b8035906020019184602083028401116401000000008311171561092f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561098f57600080fd5b8201836020820111156109a157600080fd5b803590602001918460208302840111640100000000831117156109c357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919050505061207b565b6040518082815260200191505060405180910390f35b610a3a612541565b005b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a9857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610ade573d6000803e3d6000fd5b503073ffffffffffffffffffffffffffffffffffffffff163160028190555060646001543073ffffffffffffffffffffffffffffffffffffffff163102811515610b2457fe5b046000819055505050565b6060600e60008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bd85780601f10610bad57610100808354040283529160200191610bd8565b820191906000526020600020905b815481529060010190602001808311610bbb57829003601f168201915b50505050509050919050565b6060806000600a60008581526020019081526020016000205490506032811115610c0d57603290505b606081604051908082528060200260200182016040528015610c4957816020015b610c36613b21565b815260200190600190039081610c2e5790505b509050606060405180602001604052806000815250905060008090505b83811015610e4957600960008881526020019081526020016000206000828152602001908152602001600020600780602002604051908101604052809291908260078015610cc9576020028201915b815481526020019060010190808311610cb5575b50505050508382815181101515610cdc57fe5b906020019060200201819052506001600c6000898152602001908152602001600020541415610d375760038382815181101515610d1557fe5b906020019060200201516005600781101515610d2d57fe5b6020020181815250505b6060600e60008981526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610de05780601f10610db557610100808354040283529160200191610de0565b820191906000526020600020905b815481529060010190602001808311610dc357829003601f168201915b505050505090506000821415610df857809250610e3b565b610e38836040518060400160405280600181526020017f3b00000000000000000000000000000000000000000000000000000000000000815250836125eb565b92505b508080600101915050610c66565b50808294509450505050915091565b606080606080600080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600081111515610eb557600080fd5b6000603290506032821015610ec8578190505b606081604051908082528060200260200182016040528015610ef95781602001602082028038833980820191505090505b509050606082604051908082528060200260200182016040528015610f2d5781602001602082028038833980820191505090505b509050606083604051908082528060200260200182016040528015610f615781602001602082028038833980820191505090505b5090506060604051806020016040528060008152509050600080600090505b8681101561117557600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600182890303815481101515610fd957fe5b90600052602060002001549150818682815181101515610ff557fe5b9060200190602002018181525050600b600083815260200190815260200160002054858281518110151561102557fe5b9060200190602002018181525050600c600083815260200190815260200160002054848281518110151561105557fe5b90602001906020020181815250506060600e60008481526020019081526020016000208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561110c5780601f106110e15761010080835404028352916020019161110c565b820191906000526020600020905b8154815290600101906020018083116110ef57829003601f168201915b50505050509050600082141561112457809350611167565b611164846040518060400160405280600181526020017f3b00000000000000000000000000000000000000000000000000000000000000815250836125eb565b93505b508080600101915050610f80565b5081858585429b509b509b509b509b50505050505050509091929394565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111ef57600080fd5b8060078190555050565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905090506000603290506032821015611253578190505b600080600080600090505b8481101561131f57600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001828703038154811015156112b757fe5b90600052602060002001549150600c6000838152602001908152602001600020549350600b60008381526020019081526020016000205492506000841480156113035750610258834203115b156113125761131182612621565b5b808060010191505061125e565b505050505050565b6000806000806000806000549550600354945060025493506004549250600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150909192939495565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113cd57600080fd5b8060048190555050565b60025481565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561143b57600080fd5b600754905090565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600060329050603282101561149d578190505b60008060008090505b8381101561154d57600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001828603038154811015156114ff57fe5b90600052602060002001549150600c600083815260200190815260200160002054925060008314806115315750600283145b156115405761153f826128c1565b5b80806001019150506114a6565b5050505050565b6060806000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905090506000811115156115ad57600080fd5b600080600080600090505b84811015611658576001818603039150600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561161457fe5b90600052602060002001549250600a60008481526020019081526020016000205484019350836064101561164b5760649350611658565b80806001019150506115b8565b5060608360405190808252806020026020018201604052801561169557816020015b611682613b21565b81526020019060019003908161167a5790505b5090506060846040519080825280602002602001820160405280156116c95781602001602082028038833980820191505090505b509050606060405180602001604052806000815250905060008090506000806000905060008090505b8a811015611abc576001818c03039750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208881548110151561174e57fe5b90600052602060002001549850600a60008a815260200190815260200160002054925060008090505b83811015611aa3578a831015611a8d5789878481518110151561179657fe5b90602001906020020181815250506060600e60008c81526020019081526020016000208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561184d5780601f106118225761010080835404028352916020019161184d565b820191906000526020600020905b81548152906001019060200180831161183057829003601f168201915b505050505090506000841415611865578096506118a8565b6118a5876040518060400160405280600181526020017f3b00000000000000000000000000000000000000000000000000000000000000815250836125eb565b96505b600960008c81526020019081526020016000206000838152602001908152602001600020600780602002604051908101604052809291908260078015611903576020028201915b8154815260200190600101908083116118ef575b5050505050898581518110151561191657fe5b906020019060200201819052506001600c60008d8152602001908152602001600020541415611975576003898581518110151561194f57fe5b90602001906020020151600560078110151561196757fe5b602002018181525050611a7f565b6002600c60008d81526020019081526020016000205414156119fb57600289858151811015156119a157fe5b9060200190602002015160056007811015156119b957fe5b602002015114156119f657600489858151811015156119d457fe5b9060200190602002015160056007811015156119ec57fe5b6020020181815250505b611a7e565b6003600c60008d8152602001908152602001600020541415611a7d5760028985815181101515611a2757fe5b906020019060200201516005600781101515611a3f57fe5b60200201511415611a7c5760058985815181101515611a5a57fe5b906020019060200201516005600781101515611a7257fe5b6020020181815250505b5b5b5b838060010194505050611a96565b60019450611aa3565b8080600101915050611777565b508315611aaf57611abc565b80806001019150506116f2565b5083869b509b50505050505050505050509091565b6000600c6000838152602001908152602001600020549050600281141515611af857600080fd5b60008090506000600a60008581526020019081526020016000205490506000600f600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008090505b82811015611bdd5760026009600088815260200190815260200160002060008381526020019081526020016000206005600781101515611b8f57fe5b01541415611bd0576009600087815260200190815260200160002060008281526020019081526020016000206006600781101515611bc957fe5b0154840193505b8080600101915050611b53565b506000831115611c2f578073ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015611c2d573d6000803e3d6000fd5b505b6003600c6000878152602001908152602001600020819055503073ffffffffffffffffffffffffffffffffffffffff163160028190555060646001543073ffffffffffffffffffffffffffffffffffffffff163102811515611c8d57fe5b046000819055505050505050565b6060806000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600081111515611cf457600080fd5b60006001820390506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515611d4a57fe5b906000526020600020015490506000600a60008381526020019081526020016000205490506032811115611d7d57603290505b606081604051908082528060200260200182016040528015611db957816020015b611da6613b21565b815260200190600190039081611d9e5790505b509050606060405180602001604052806000815250905060008090505b83811015611fb9576060600e60008781526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e875780601f10611e5c57610100808354040283529160200191611e87565b820191906000526020600020905b815481529060010190602001808311611e6a57829003601f168201915b505050505090506000821415611e9f57809250611ee2565b611edf836040518060400160405280600181526020017f3b00000000000000000000000000000000000000000000000000000000000000815250836125eb565b92505b600960008781526020019081526020016000206000838152602001908152602001600020600780602002604051908101604052809291908260078015611f3d576020028201915b815481526020019060010190808311611f29575b50505050508483815181101515611f5057fe5b906020019060200201819052506001600c6000888152602001908152602001600020541415611fab5760038483815181101515611f8957fe5b906020019060200201516005600781101515611fa157fe5b6020020181815250505b508080600101915050611dd6565b508082975097505050505050509091565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561202857600080fd5b3073ffffffffffffffffffffffffffffffffffffffff163160028190555060646001543073ffffffffffffffffffffffffffffffffffffffff16310281151561206d57fe5b046000819055506001905090565b6000600160045414151561208e57600080fd5b6000855111151561209e57600080fd5b6000821115156120ad57600080fd5b60035434101515156120be57600080fd5b6120cb8585858534612c58565b60006001430340426007546040516020018084815260200183815260200182815260200193505050506040516020818303038152906040528051906020012090507fd236fd58fd44deb7eda9b265c67a35dbe57eb585b61cd9b657cda55ce2dd748481604051808060200183815260200182810382526035815260200180613cfe603591396040019250505060405180910390a1612167613b43565b600080905060008090505b88518110156122e65760066000815480929190600101919050555060065483600060078110151561219f57fe5b60200201818152505088818151811015156121b657fe5b906020019060200201518360016007811015156121cf57fe5b60200201818152505086818151811015156121e657fe5b906020019060200201518360026007811015156121ff57fe5b60200201818152505085888281518110151561221757fe5b906020019060200201510283600360078110151561223157fe5b60200201818152505085888281518110151561224957fe5b9060200190602002015102820191504283600460078110151561226857fe5b602002018181525050600083600560078110151561228257fe5b602002018181525050600083600660078110151561229c57fe5b602002018181525050826009600086815260200190815260200160002060008381526020019081526020016000209060076122d8929190613b65565b508080600101915050612172565b508034101515156122f657600080fd5b42600b6000858152602001908152602001600020819055508751600a60008581526020019081526020016000208190555033600f600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612381613ba5565b60405180608001604052806000815260200160008152602001600081526020016000815250905080600d60008681526020019081526020016000209060046123ca929190613bc7565b506040518060400160405280600781526020017f302c302c302c3000000000000000000000000000000000000000000000000000815250600e60008681526020019081526020016000209080519060200190612427929190613c07565b506000600c6000868152602001908152602001600020819055506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548091906001016124949190613c87565b905084600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811015156124e357fe5b90600052602060002001819055507fac038f3304801eaaf8be5e1857433a1cd22f8b6384720ccb25c1f291f7416784856040518082815260200191505060405180910390a161253185612e58565b8495505050505050949350505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561259d57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff163160028190555060646001543073ffffffffffffffffffffffffffffffffffffffff1631028115156125e257fe5b04600081905550565b60606126188484846040518060200160405280600081525060405180602001604052806000815250613349565b90509392505050565b6000600c600083815260200190815260200160002054905060008114151561264857600080fd5b612650613ba5565b600d600084815260200190815260200160002060048060200260405190810160405280929190826004801561269a576020028201915b815481526020019060010190808311612686575b5050505050905060008160006004811015156126b257fe5b602002015114806126d6575060008160016004811015156126cf57fe5b6020020151145b806126f4575060008160026004811015156126ed57fe5b6020020151145b806127125750600081600360048110151561270b57fe5b6020020151145b151561271d57600080fd5b60008090506000600a60008681526020019081526020016000205490506000600f600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008090505b8281101561280257600060096000898152602001908152602001600020600083815260200190815260200160002060056007811015156127b457fe5b015414156127f55760096000888152602001908152602001600020600082815260200190815260200160002060036007811015156127ee57fe5b0154840193505b8080600101915050612778565b506000831115612854578073ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015612852573d6000803e3d6000fd5b505b3073ffffffffffffffffffffffffffffffffffffffff163160028190555060646001543073ffffffffffffffffffffffffffffffffffffffff16310281151561289957fe5b046000819055506001600c600088815260200190815260200160002081905550505050505050565b6000600c600083815260200190815260200160002054905060008114806128e85750600281145b15156128f357600080fd5b6128fb613ba5565b600d6000848152602001908152602001600020600480602002604051908101604052809291908260048015612945576020028201915b815481526020019060010190808311612931575b50505050509050600081600060048110151561295d57fe5b602002015111151561296e57600080fd5b6000600a6000858152602001908152602001600020549050600080600f600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008090505b83811015612acd576000861415612a7d5760006009600089815260200190815260200160002060008381526020019081526020016000206005600781101515612a0a57fe5b01541415612a7857612a3f60096000898152602001908152602001600020600083815260200190815260200160002086613629565b6009600088815260200190815260200160002060008281526020019081526020016000206006600781101515612a7157fe5b0154830192505b612ac0565b6002861415612abf576009600088815260200190815260200160002060008281526020019081526020016000206006600781101515612ab857fe5b0154830192505b5b80806001019150506129c5565b506002600c6000888152602001908152602001600020819055506000821115612bea573073ffffffffffffffffffffffffffffffffffffffff1631821015612b74578073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015612b55573d6000803e3d6000fd5b506003600c600088815260200190815260200160002081905550612be5565b7fd236fd58fd44deb7eda9b265c67a35dbe57eb585b61cd9b657cda55ce2dd7484866040518080602001838152602001828103825260108152602001807f73656e7420626f756e73206661696c2e000000000000000000000000000000008152506020019250505060405180910390a15b612c04565b6003600c6000888152602001908152602001600020819055505b3073ffffffffffffffffffffffffffffffffffffffff163160028190555060646001543073ffffffffffffffffffffffffffffffffffffffff163102811515612c4957fe5b04600081905550505050505050565b600080905060008090506000809050600080600090505b8951811015612e1b5760018a82815181101515612c8857fe5b9060200190602002015110158015612cb8575060038a82815181101515612cab57fe5b9060200190602002015111155b15612ce057868982815181101515612ccc57fe5b906020019060200201510285019450612ce5565b600080fd5b60018a82815181101515612cf557fe5b906020019060200201511480612d22575060038a82815181101515612d1657fe5b90602001906020020151145b15612da857612d498a82815181101515612d3857fe5b9060200190602002015160006139aa565b9150600a82888b84815181101515612d5d57fe5b906020019060200201510202811515612d7257fe5b0484019350600a82888b84815181101515612d8957fe5b906020019060200201510202811515612d9e57fe5b0483019250612e0e565b60028a82815181101515612db857fe5b906020019060200201511415612e0d57612dea8a82815181101515612dd957fe5b9060200190602002015160006139aa565b915081878a83815181101515612dfc57fe5b906020019060200201510202830192505b5b8080600101915050612c6f565b600084905080841115612e2c578390505b858710151515612e3b57600080fd5b60005481101515612e4b57600080fd5b5050505050505050505050565b6001600a6000838152602001908152602001600020541015612e7957600080fd5b612e81613ba5565b604051806080016040528060008152602001600081526020016000815260200160008152509050600060014303404233600754604051602001808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018281526020019450505050506040516020818303038152906040528051906020012090506103e88160001c811515612f3057fe5b0660075401600781905550600160348260001c811515612f4c57fe5b0601826000600481101515612f5d57fe5b6020020181815250506060612f83600160348460001c811515612f7c57fe5b06016139e7565b9050600060014303404233600754604051602001808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018281526020019450505050506040516020818303038152906040528051906020012090506103e88160001c81151561300d57fe5b0660075401600781905550600160348260001c81151561302957fe5b060184600160048110151561303a57fe5b6020020181815250506060613060600160348460001c81151561305957fe5b06016139e7565b9050600060014303404233600754604051602001808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018281526020019450505050506040516020818303038152906040528051906020012090506103e88160001c8115156130ea57fe5b0660075401600781905550600160348260001c81151561310657fe5b060186600260048110151561311757fe5b602002018181525050606061313d600160348460001c81151561313657fe5b06016139e7565b9050600060014303404233600754604051602001808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018281526020019450505050506040516020818303038152906040528051906020012090506103e88160001c8115156131c757fe5b0660075401600781905550600160348260001c8115156131e357fe5b06018860036004811015156131f457fe5b602002018181525050606061321a600160348460001c81151561321357fe5b06016139e7565b905088600d60008c815260200190815260200160002090600461323e929190613bc7565b5060606040518060200160405280600081525090506132ca886040518060400160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250886040518060400160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525088613349565b905061330c816040518060400160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250846125eb565b600e60008d81526020019081526020016000209080519060200190613332929190613c07565b5061333c8b6128c1565b5050505050505050505050565b6060808690506060869050606086905060608690506060869050606081518351855187518951010101016040519080825280601f01601f1916602001820160405280156133a55781602001600182028038833980820191505090505b509050606081905060008090506000809050600090505b88518110156134305788818151811015156133d357fe5b90602001015160f81c60f81b83838060010194508151811015156133f357fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506133bc565b600090505b87518110156134a957878181518110151561344c57fe5b90602001015160f81c60f81b838380600101945081518110151561346c57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050613435565b600090505b86518110156135225786818151811015156134c557fe5b90602001015160f81c60f81b83838060010194508151811015156134e557fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506134ae565b600090505b855181101561359b57858181518110151561353e57fe5b90602001015160f81c60f81b838380600101945081518110151561355e57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050613527565b600090505b84518110156136145784818151811015156135b757fe5b90602001015160f81c60f81b83838060010194508151811015156135d757fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506135a0565b82995050505050505050505095945050505050565b6000806000600d84600060048110151561363f57fe5b602002015181151561364d57fe5b061461367857600d83600060048110151561366457fe5b602002015181151561367257fe5b0661367b565b600d5b9050600080600d85600160048110151561369157fe5b602002015181151561369f57fe5b06146136ca57600d8460016004811015156136b657fe5b60200201518115156136c457fe5b066136cd565b600d5b9050600080600d8660026004811015156136e357fe5b60200201518115156136f157fe5b061461371c57600d85600260048110151561370857fe5b602002015181151561371657fe5b0661371f565b600d5b9050600080600d87600360048110151561373557fe5b602002015181151561374357fe5b061461376e57600d86600360048110151561375a57fe5b602002015181151561376857fe5b06613771565b600d5b90506000828501905060008285019050600a8281151561378d57fe5b069150600a8181151561379c57fe5b06905060018960016007811015156137b057fe5b01541415613847578082111561382b5760028960056007811015156137d157fe5b01819055506137f18960016007811015156137e857fe5b015460006139aa565b9650600a878a600360078110151561380557fe5b01540281151561381157fe5b0489600660078110151561382157fe5b0181905550613842565b600189600560078110151561383c57fe5b01819055505b61399f565b600289600160078110151561385857fe5b015414156138e357808214156138c757600289600560078110151561387957fe5b018190555061389989600160078110151561389057fe5b015460006139aa565b9650868960036007811015156138ab57fe5b0154028960066007811015156138bd57fe5b01819055506138de565b60018960056007811015156138d857fe5b01819055505b61399e565b60038960016007811015156138f457fe5b0154141561399d57600189600560078110151561390d57fe5b01819055508082101561398557600289600560078110151561392b57fe5b018190555061394b89600160078110151561394257fe5b015460006139aa565b9650600a878a600360078110151561395f57fe5b01540281151561396b57fe5b0489600660078110151561397b57fe5b018190555061399c565b600189600560078110151561399657fe5b01819055505b5b5b5b505050505050505050565b6000806000905060018414806139c05750600384145b156139ce57601390506139dd565b60028414156139dc57600990505b5b8091505092915050565b60606000821415613a2f576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050613b1c565b600082905060005b600082141515613a5d578080600101915050600a82811515613a5557fe5b049150613a37565b6060816040519080825280601f01601f191660200182016040528015613a925781602001600182028038833980820191505090505b50905060006001830390505b600086141515613b1457600a86811515613ab457fe5b0660300160f81b828280600190039350815181101515613ad057fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a86811515613b0c57fe5b049550613a9e565b819450505050505b919050565b6040518060e00160405280600790602082028038833980820191505090505090565b6040518060e00160405280600790602082028038833980820191505090505090565b8260078101928215613b94579160200282015b82811115613b93578251825591602001919060010190613b78565b5b509050613ba19190613cb3565b5090565b6040518060800160405280600490602082028038833980820191505090505090565b8260048101928215613bf6579160200282015b82811115613bf5578251825591602001919060010190613bda565b5b509050613c039190613cb3565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613c4857805160ff1916838001178555613c76565b82800160010185558215613c76579182015b82811115613c75578251825591602001919060010190613c5a565b5b509050613c839190613cb3565b5090565b815481835581811115613cae57818360005260206000209182019101613cad9190613cd8565b5b505050565b613cd591905b80821115613cd1576000816000905550600101613cb9565b5090565b90565b613cfa91905b80821115613cf6576000816000905550600101613cde565b5090565b9056fe4f7261636c697a65207175657279207761732073656e742c207374616e64696e6720627920666f722074686520616e737765722e2ea165627a7a72305820067ab038fe3843ee0b9c616572448ed0079ac1ef19cc87a87935ada60d3588430029"
}