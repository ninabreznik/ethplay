{
  "address": "0x544789c586ddaed07ffb23f41ca1334232cb1804",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "A_TAXPHONE",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-11\n*/\n\npragma solidity ^0.4.25;\n/* TAXPHONE THE FIRST EDITION\nTHE NEW WORLD BLOCKCHAIN PROJECT\nCREATED 2018-10-11 BY DAO DRIVER ETHEREUM (c)*/\ncontract OWN\n{\n    address public owner;\n    address internal newOwner;\n    constructor() \n    public\n    payable\n    {\n    owner = msg.sender;\n    }\n    modifier onlyOwner \n    {\n    require(owner == msg.sender);\n    _;\n    }\n    \n    function changeOwner(address _owner)\n    onlyOwner \n    public\n    {\n    require(_owner != 0);\n    newOwner = _owner;\n    }\n    function confirmOwner()\n    public \n    { \n    require(newOwner == msg.sender);\n    owner = newOwner;\n    delete newOwner;\n    }\n}\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n    return 0;\n    }\n    uint256 c = a*b;\n    assert(c/a == b);\n    return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a/b;\n    return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n    }\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n    }\n}\ncontract ERC20\n{\n    string public constant name     = \"TAXPHONE\";\n    string public constant symbol   = \"TAXPHONE\";\n    uint8  public constant decimals =  6;\n    uint256 public totalSupply;\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    mapping (address => mapping(address => uint256)) public allowance;\n    mapping (address => uint256) public balanceOf;\n    \n    function balanceOf(address who)\n    public constant\n    returns (uint)\n    {\n    return balanceOf[who];\n    }\n    function approve(address _spender, uint _value)\n    public\n    {\n    allowance[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    }\n    function allowance(address _owner, address _spender) \n    public constant \n    returns (uint remaining) \n    {\n    return allowance[_owner][_spender];\n    }\n    modifier onlyPayloadSize(uint size) \n    {\n    require(msg.data.length >= size + 4);\n    _;\n    }\n}\n\ncontract A_TAXPHONE is OWN, ERC20\n{\n    using SafeMath for uint256;\n    uint256 internal Bank = 0;\n    uint256 public Price = 800000000;\n    uint256 internal constant Minn = 10000000000000000;\n    uint256 internal constant Maxx = 10000000000000000000;\n    address internal constant ethdriver = 0x0311dEdC05cfb1870f25de4CD80dCF9e6bF4F2e8;\n    address internal constant partone = 0xC92Af66B0d64B2E63796Fd325f2c7ff5c70aB8B7;\n    address internal constant parttwo = 0xbfd0Aea4b32030c985b467CF5bcc075364BD83e7;\n    \n    function() \n    payable \n    public\n        {\n        require(msg.value>0);\n        require(msg.value >= Minn);\n        require(msg.value <= Maxx);\n        mintTokens(msg.sender, msg.value);\n        }\n        \n    function mintTokens(address _who, uint256 _value) \n    internal \n        {\n        uint256 tokens = _value / (Price*100/80); //sale\n        require(tokens > 0); \n        require(balanceOf[_who] + tokens > balanceOf[_who]);\n        totalSupply += tokens; //mint\n        balanceOf[_who] += tokens; //sale\n        uint256 perc = _value.div(100);\n        Bank += perc.mul(85);  //reserve\n        Price = Bank.div(totalSupply); //pump\n        uint256 minus = _value % (Price*100/80); //change\n        emit Transfer(this, _who, tokens);\n        _value=0; tokens=0;\n        owner.transfer(perc.mul(5)); //owners\n        ethdriver.transfer(perc.mul(3)); //systems\n        partone.transfer(perc.mul(2));\n        parttwo.transfer(perc.mul(1));\n        if(minus > 0){\n        _who.transfer(minus); minus=0;}\n        }\n        \n    function transfer (address _to, uint _value) \n    public onlyPayloadSize(2 * 32) \n    returns (bool success)\n        {\n        require(balanceOf[msg.sender] >= _value);\n        if(_to != address(this)) //standart\n        {\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        }\n        else //tokens to contract\n        {\n        balanceOf[msg.sender] -= _value;\n        uint256 change = _value.mul(Price);\n        require(address(this).balance >= change);\n\t\t\n\t\tif(totalSupply > _value)\n\t\t{\n        uint256 plus = (address(this).balance - Bank).div(totalSupply);    \n        Bank -= change; totalSupply -= _value;\n        Bank += (plus.mul(_value));  //reserve\n        Price = Bank.div(totalSupply); //pump\n        emit Transfer(msg.sender, _to, _value);\n        }\n        if(totalSupply == _value)\n        {\n        Price = address(this).balance/totalSupply;\n        Price = (Price.mul(101)).div(100); //pump\n        totalSupply=0; Bank=0;\n        emit Transfer(msg.sender, _to, _value);\n        owner.transfer(address(this).balance - change);\n        }\n        msg.sender.transfer(change);\n        }\n        return true;\n        }\n    \n    function transferFrom(address _from, address _to, uint _value) \n    public onlyPayloadSize(3 * 32)\n    returns (bool success)\n        {\n        require(balanceOf[_from] >= _value);\n        require(allowance[_from][msg.sender] >= _value);\n        if(_to != address(this)) //standart\n        {\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        }\n        else //sale\n        {\n        balanceOf[_from] -= _value;\n        uint256 change = _value.mul(Price);\n        require(address(this).balance >= change);\n        if(totalSupply > _value)\n        {\n        uint256 plus = (address(this).balance - Bank).div(totalSupply);   \n        Bank -= change;\n        totalSupply -= _value;\n        Bank += (plus.mul(_value)); //reserve\n        Price = Bank.div(totalSupply); //pump\n        emit Transfer(_from, _to, _value);\n        allowance[_from][msg.sender] -= _value;\n        }\n        if(totalSupply == _value)\n        {\n        Price = address(this).balance/totalSupply;\n        Price = (Price.mul(101)).div(100); //pump\n        totalSupply=0; Bank=0; \n        emit Transfer(_from, _to, _value);\n        allowance[_from][msg.sender] -= _value;\n        owner.transfer(address(this).balance - change);\n        }\n        _from.transfer(change);\n        }\n        return true;\n        }\n}",
  "bytecode": "608060405260006005819055632faf08006006558054600160a060020a03191633179055610dde806100326000396000f3006080604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610106578063095ea7b31461019057806318160ddd146101b457806323b872dd146101db578063313ce5671461021957806370a08231146102445780638da5cb5b1461026557806395d89b41146101065780639dfde20114610296578063a6f9dae1146102ab578063a9059cbb146102cc578063bd9b6d86146102f0578063dd62ed3e14610305575b600034116100d157600080fd5b662386f26fc100003410156100e557600080fd5b678ac7230489e800003411156100fa57600080fd5b610104333461032c565b005b34801561011257600080fd5b5061011b6105cf565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015557818101518382015260200161013d565b50505050905090810190601f1680156101825780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019c57600080fd5b50610104600160a060020a0360043516602435610606565b3480156101c057600080fd5b506101c9610668565b60408051918252519081900360200190f35b3480156101e757600080fd5b50610205600160a060020a036004358116906024351660443561066e565b604080519115158252519081900360200190f35b34801561022557600080fd5b5061022e6109b8565b6040805160ff9092168252519081900360200190f35b34801561025057600080fd5b506101c9600160a060020a03600435166109bd565b34801561027157600080fd5b5061027a6109d8565b60408051600160a060020a039092168252519081900360200190f35b3480156102a257600080fd5b506101c96109e7565b3480156102b757600080fd5b50610104600160a060020a03600435166109ed565b3480156102d857600080fd5b50610205600160a060020a0360043516602435610a48565b3480156102fc57600080fd5b50610104610cce565b34801561031157600080fd5b506101c9600160a060020a0360043581169060243516610d19565b6000806000605060065460640281151561034257fe5b048481151561034d57fe5b0492506000831161035d57600080fd5b600160a060020a0385166000908152600460205260409020548381011161038357600080fd5b6002805484019055600160a060020a03851660009081526004602052604090208054840190556103ba84606463ffffffff610d4416565b91506103cd82605563ffffffff610d6016565b60058054909101908190556002546103eb919063ffffffff610d4416565b6006819055605090606402048481151561040157fe5b06905084600160a060020a031630600160a060020a0316600080516020610d93833981519152856040518082815260200191505060405180910390a360008054909450849350600160a060020a03166108fc61046484600563ffffffff610d6016565b6040518115909202916000818181858888f1935050505015801561048c573d6000803e3d6000fd5b50730311dedc05cfb1870f25de4cd80dcf9e6bf4f2e86108fc6104b684600363ffffffff610d6016565b6040518115909202916000818181858888f193505050501580156104de573d6000803e3d6000fd5b5073c92af66b0d64b2e63796fd325f2c7ff5c70ab8b76108fc61050884600263ffffffff610d6016565b6040518115909202916000818181858888f19350505050158015610530573d6000803e3d6000fd5b5073bfd0aea4b32030c985b467cf5bcc075364bd83e76108fc61055a84600163ffffffff610d6016565b6040518115909202916000818181858888f19350505050158015610582573d6000803e3d6000fd5b5060008111156105c857604051600160a060020a0386169082156108fc029083906000818181858888f193505050501580156105c2573d6000803e3d6000fd5b50600090505b5050505050565b60408051808201909152600881527f54415850484f4e45000000000000000000000000000000000000000000000000602082015281565b336000818152600360209081526040808320600160a060020a03871680855290835292819020859055805185815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35050565b60025481565b600080806060606436101561068257600080fd5b600160a060020a0387166000908152600460205260409020548511156106a757600080fd5b600160a060020a03871660009081526003602090815260408083203384529091529020548511156106d757600080fd5b600160a060020a038616301461078157600160a060020a038616600090815260046020526040902054858101101561070e57600080fd5b600160a060020a03808816600081815260046020908152604080832080548b90039055938a1680835284832080548b0190558383526003825284832033845282529184902080548a90039055835189815293519193600080516020610d93833981519152929081900390910190a36109ab565b600160a060020a0387166000908152600460205260409020805486900390556006546107b490869063ffffffff610d6016565b925030318311156107c457600080fd5b846002541115610892576107f160025460055430600160a060020a03163103610d4490919063ffffffff16565b6005805485900390556002805487900390559150610815828663ffffffff610d6016565b6005805490910190819055600254610833919063ffffffff610d4416565b600655604080518681529051600160a060020a0380891692908a1691600080516020610d938339815191529181900360200190a3600160a060020a03871660009081526003602090815260408083203384529091529020805486900390555b8460025414156109735760025430318115156108aa57fe5b0460068190556108d4906064906108c890606563ffffffff610d6016565b9063ffffffff610d4416565b60065560006002819055600555604080518681529051600160a060020a0380891692908a1691600080516020610d938339815191529181900360200190a3600160a060020a0380881660009081526003602090815260408083203384529091528082208054899003905581549051921691303186900380156108fc0292909190818181858888f19350505050158015610971573d6000803e3d6000fd5b505b604051600160a060020a0388169084156108fc029085906000818181858888f193505050501580156109a9573d6000803e3d6000fd5b505b5060019695505050505050565b600681565b600160a060020a031660009081526004602052604090205490565b600054600160a060020a031681565b60065481565b600054600160a060020a03163314610a0457600080fd5b600160a060020a0381161515610a1957600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000808060406044361015610a5c57600080fd5b33600090815260046020526040902054851115610a7857600080fd5b600160a060020a0386163014610b0757600160a060020a0386166000908152600460205260409020548581011015610aaf57600080fd5b33600081815260046020908152604080832080548a90039055600160a060020a038a168084529281902080548a01905580518981529051929392600080516020610d93833981519152929181900390910190a3610cc2565b33600090815260046020526040902080548690039055600654610b3190869063ffffffff610d6016565b92503031831115610b4157600080fd5b846002541115610be257610b6e60025460055430600160a060020a03163103610d4490919063ffffffff16565b6005805485900390556002805487900390559150610b92828663ffffffff610d6016565b6005805490910190819055600254610bb0919063ffffffff610d4416565b600655604080518681529051600160a060020a038816913391600080516020610d938339815191529181900360200190a35b846002541415610c93576002543031811515610bfa57fe5b046006819055610c18906064906108c890606563ffffffff610d6016565b60065560006002819055600555604080518681529051600160a060020a038816913391600080516020610d938339815191529181900360200190a360008054604051600160a060020a0390911691303186900380156108fc02929091818181858888f19350505050158015610c91573d6000803e3d6000fd5b505b604051339084156108fc029085906000818181858888f19350505050158015610cc0573d6000803e3d6000fd5b505b50600195945050505050565b600154600160a060020a03163314610ce557600080fd5b600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b6000808284811515610d5257fe5b0490508091505b5092915050565b600080831515610d735760009150610d59565b50828202828482811515610d8357fe5b0414610d8b57fe5b93925050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820228de25f4020ea5c87ab3d8ee41bfe98c24bcae4830ec7cf361a4d1a549fd04c0029"
}