{
  "address": "0xe4f15b5d06500d85dfde5bd3a0c76672f83eacd9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DirectToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-03\n*/\n\npragma solidity ^0.4.18;\n\n// File: contracts/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n// File: contracts/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: contracts/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n// File: contracts/SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\n// File: contracts/CanReclaimToken.sol\n\n/**\n * @title Contracts that should be able to recover tokens\n * @author SylTi\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n * This will prevent any accidental loss of tokens.\n */\ncontract CanReclaimToken is Ownable {\n  using SafeERC20 for ERC20Basic;\n\n  /**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param token ERC20Basic The address of the token contract\n   */\n  function reclaimToken(ERC20Basic token) external onlyOwner {\n    uint256 balance = token.balanceOf(this);\n    token.safeTransfer(owner, balance);\n  }\n\n}\n\n// File: contracts/HasNoTokens.sol\n\n/**\n * @title Contracts that should not own Tokens\n * @author Remco Bloemen <[email protected]π.com>\n * @dev This blocks incoming ERC223 tokens to prevent accidental loss of tokens.\n * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\n * owner to reclaim the tokens.\n */\ncontract HasNoTokens is CanReclaimToken {\n\n /**\n  * @dev Reject all ERC223 compatible tokens\n  * @param from_ address The address that is transferring the tokens\n  * @param value_ uint256 the amount of the specified token\n  * @param data_ Bytes The data passed from the caller.\n  */\n  function tokenFallback(address from_, uint256 value_, bytes data_) external pure {\n    from_;\n    value_;\n    data_;\n    revert();\n  }\n\n}\n\n// File: contracts/Vesting.sol\n\n/**\n * @title Standalone Vesting  logic to be added in token\n * @dev Beneficiary can have at most one VestingGrant only, we do not support adding two vesting grants of vesting grant to same address.\n *      Token transfer related logic is not handled in this class for simplicity and modularity purpose\n */\ncontract Vesting {\n  using SafeMath for uint256;\n\n  struct VestingGrant {\n    uint256 grantedAmount;       // 32 bytes\n    uint64 start;\n    uint64 cliff;\n    uint64 vesting;             // 3 * 8 = 24 bytes\n  } // total 56 bytes = 2 sstore per operation (32 per sstore)\n\n  mapping (address => VestingGrant) public grants;\n\n  event VestingGrantSet(address indexed to, uint256 grantedAmount, uint64 vesting);\n\n  function getVestingGrantAmount(address _to) public view returns (uint256) {\n    return grants[_to].grantedAmount;\n  }\n\n  /**\n   * @dev Set vesting grant to a specified address\n   * @param _to address The address which the vesting amount will be granted to.\n   * @param _grantedAmount uint256 The amount to be granted.\n   * @param _start uint64 Time of the beginning of the grant.\n   * @param _cliff uint64 Time of the cliff period.\n   * @param _vesting uint64 The vesting period.\n   * @param _override bool Must be true if you are overriding vesting grant that has been set before\n   *          this is to prevent accidental overwriting vesting grant\n   */\n  function setVestingGrant(address _to, uint256 _grantedAmount, uint64 _start, uint64 _cliff, uint64 _vesting, bool _override) public {\n\n    // Check for date inconsistencies that may cause unexpected behavior\n    require(_cliff >= _start && _vesting >= _cliff);\n    // only one vesting logic per address, and once set to update _override flag is required\n    require(grants[_to].grantedAmount == 0 || _override);\n    grants[_to] = VestingGrant(_grantedAmount, _start, _cliff, _vesting);\n\n    VestingGrantSet(_to, _grantedAmount, _vesting);\n  }\n\n  /**\n   * @dev Calculate amount of vested amounts at a specific time (monthly graded)\n   * @param grantedAmount uint256 The amount of amounts granted\n   * @param time uint64 The time to be checked\n   * @param start uint64 The time representing the beginning of the grant\n   * @param cliff uint64  The cliff period, the period before nothing can be paid out\n   * @param vesting uint64 The vesting period\n   * @return An uint256 representing the vested amounts\n   *   |                         _/--------   vestedTokens rect\n   *   |                       _/\n   *   |                     _/\n   *   |                   _/\n   *   |                 _/\n   *   |                /\n   *   |              .|\n   *   |            .  |\n   *   |          .    |\n   *   |        .      |\n   *   |      .        |\n   *   |    .          |\n   *   +===+===========+---------+----------> time\n   *      Start       Cliff    Vesting\n   */\n  function calculateVested (\n    uint256 grantedAmount,\n    uint256 time,\n    uint256 start,\n    uint256 cliff,\n    uint256 vesting) internal pure returns (uint256)\n    {\n      // Shortcuts for before cliff and after vesting cases.\n      if (time < cliff) return 0;\n      if (time >= vesting) return grantedAmount;\n\n      // Interpolate all vested amounts.\n      // As before cliff the shortcut returns 0, we can use just calculate a value\n      // in the vesting rect (as shown in above's figure)\n\n      // vestedAmounts = (grantedAmount * (time - start)) / (vesting - start)   <-- this is the original formula\n      // vestedAmounts = (grantedAmount * ( (time - start) / (30 days) ) / ( (vesting - start) / (30 days) )   <-- this is made\n\n      uint256 vestedAmounts = grantedAmount.mul(time.sub(start).div(30 days)).div(vesting.sub(start).div(30 days));\n\n      //if (vestedAmounts > grantedAmount) return amounts; // there is no possible case where this is true\n\n      return vestedAmounts;\n  }\n\n  function calculateLocked (\n    uint256 grantedAmount,\n    uint256 time,\n    uint256 start,\n    uint256 cliff,\n    uint256 vesting) internal pure returns (uint256)\n    {\n      return grantedAmount.sub(calculateVested(grantedAmount, time, start, cliff, vesting));\n    }\n\n  /**\n   * @dev Gets the locked amount of a given beneficiary, ie. non vested amount, at a specific time.\n   * @param _to The beneficiary to be checked.\n   * @param _time uint64 The time to be checked\n   * @return An uint256 representing the non vested amounts of a specific grant on the\n   * passed time frame.\n   */\n  function getLockedAmountOf(address _to, uint256 _time) public view returns (uint256) {\n    VestingGrant storage grant = grants[_to];\n    if (grant.grantedAmount == 0) return 0;\n    return calculateLocked(grant.grantedAmount, uint256(_time), uint256(grant.start),\n      uint256(grant.cliff), uint256(grant.vesting));\n  }\n\n\n}\n\n// File: contracts/DirectToken.sol\n\ncontract DirectToken is MintableToken, HasNoTokens, Vesting {\n\n  string public constant name = \"DIREC\";\n  string public constant symbol = \"DIR\";\n  uint8 public constant decimals = 18;\n\n  bool public tradingStarted = false;   // target is TRADING_START date = 1533081600; // 2018-08-01 00:00:00 UTC\n\n  /**\n   * @dev Allows the owner to enable the trading.\n   */\n  function setTradingStarted(bool _tradingStarted) public onlyOwner {\n    tradingStarted = _tradingStarted;\n  }\n\n  /**\n   * @dev Allows anyone to transfer the PAY tokens once trading has started\n   * @param _to the recipient address of the tokens.\n   * @param _value number of tokens to be transfered.\n   */\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n    checkTransferAllowed(msg.sender, _to, _value);\n    return super.transfer(_to, _value);\n  }\n\n   /**\n   * @dev Allows anyone to transfer the PAY tokens once trading has started\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n    checkTransferAllowed(msg.sender, _to, _value);\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  /**\n   * Throws if the transfer not allowed due to minting not finished, trading not started, or vesting\n   *   this should be called at the top of transfer functions and so as to refund unused gas\n   */\n  function checkTransferAllowed(address _sender, address _to, uint256 _value) private view {\n      if (mintingFinished && tradingStarted && isAllowableTransferAmount(_sender, _value)) {\n          // Everybody can transfer once the token is finalized and trading has started and is within allowable vested amount if applicable\n          return;\n      }\n\n      // Owner is allowed to transfer tokens before the sale is finalized.\n      // This allows the tokens to move from the TokenSale contract to a beneficiary.\n      // We also allow someone to send tokens back to the owner. This is useful among other\n      // cases, reclaimTokens etc.\n      require(_sender == owner || _to == owner);\n  }\n\n  function setVestingGrant(address _to, uint256 _grantedAmount, uint64 _start, uint64 _cliff, uint64 _vesting, bool _override) public onlyOwner {\n    return super.setVestingGrant(_to, _grantedAmount, _start, _cliff, _vesting, _override);\n  }\n\n  function isAllowableTransferAmount(address _sender, uint256 _value) private view returns (bool allowed) {\n     if (getVestingGrantAmount(_sender) == 0) {\n        return true;\n     }\n     // the address has vesting grant set, he can transfer up to the amount that vested\n     uint256 transferableAmount = balanceOf(_sender).sub(getLockedAmountOf(_sender, now));\n     return (_value <= transferableAmount);\n  }\n\n}",
  "bytecode": "60606040526000600360146101000a81548160ff0219169083151502179055506000600560006101000a81548160ff02191690831515021790555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061243d8061008a6000396000f30060606040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b1461014357806306fdde0314610170578063095ea7b3146101fe57806317ffc3201461025857806318160ddd1461029157806323b872dd146102ba578063313ce5671461033357806340c10f19146103625780635b4f472a146103bc57806366188463146103e95780636c1f644b1461044357806370a08231146104c95780637b62441a146105165780637d64bcb4146105635780638da5cb5b1461059057806395d89b41146105e5578063a9059cbb14610673578063b869cea3146106cd578063c0ee0b8a1461076b578063d278a991146107c1578063d73dd62314610817578063dd62ed3e14610871578063e9d8a32a146108dd578063f2fde38b14610902575b600080fd5b341561014e57600080fd5b61015661093b565b604051808215151515815260200191505060405180910390f35b341561017b57600080fd5b61018361094e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101c35780820151818401526020810190506101a8565b50505050905090810190601f1680156101f05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561020957600080fd5b61023e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610987565b604051808215151515815260200191505060405180910390f35b341561026357600080fd5b61028f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a79565b005b341561029c57600080fd5b6102a4610be8565b6040518082815260200191505060405180910390f35b34156102c557600080fd5b610319600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bf2565b604051808215151515815260200191505060405180910390f35b341561033e57600080fd5b610346610c13565b604051808260ff1660ff16815260200191505060405180910390f35b341561036d57600080fd5b6103a2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c18565b604051808215151515815260200191505060405180910390f35b34156103c757600080fd5b6103cf610dfe565b604051808215151515815260200191505060405180910390f35b34156103f457600080fd5b610429600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e11565b604051808215151515815260200191505060405180910390f35b341561044e57600080fd5b6104c7600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803567ffffffffffffffff1690602001909190803567ffffffffffffffff1690602001909190803567ffffffffffffffff1690602001909190803515159060200190919050506110a2565b005b34156104d457600080fd5b610500600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611114565b6040518082815260200191505060405180910390f35b341561052157600080fd5b61054d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061115c565b6040518082815260200191505060405180910390f35b341561056e57600080fd5b6105766111a8565b604051808215151515815260200191505060405180910390f35b341561059b57600080fd5b6105a3611270565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105f057600080fd5b6105f8611296565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561063857808201518184015260208101905061061d565b50505050905090810190601f1680156106655780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561067e57600080fd5b6106b3600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506112cf565b604051808215151515815260200191505060405180910390f35b34156106d857600080fd5b610704600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506112ee565b604051808581526020018467ffffffffffffffff1667ffffffffffffffff1681526020018367ffffffffffffffff1667ffffffffffffffff1681526020018267ffffffffffffffff1667ffffffffffffffff16815260200194505050505060405180910390f35b341561077657600080fd5b6107bf600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019082018035906020019190919290505061135a565b005b34156107cc57600080fd5b610801600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061135f565b6040518082815260200191505060405180910390f35b341561082257600080fd5b610857600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061143a565b604051808215151515815260200191505060405180910390f35b341561087c57600080fd5b6108c7600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611636565b6040518082815260200191505060405180910390f35b34156108e857600080fd5b610900600480803515159060200190919050506116bd565b005b341561090d57600080fd5b610939600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611736565b005b600360149054906101000a900460ff1681565b6040805190810160405280600581526020017f444952454300000000000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ad757600080fd5b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610b7a57600080fd5b6102c65a03f11515610b8b57600080fd5b505050604051805190509050610be4600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828473ffffffffffffffffffffffffffffffffffffffff1661188e9092919063ffffffff16565b5050565b6000600154905090565b6000610bff338484611961565b610c0a848484611a5f565b90509392505050565b601281565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c7657600080fd5b600360149054906101000a900460ff16151515610c9257600080fd5b610ca782600154611e1990919063ffffffff16565b600181905550610cfe826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e1990919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600560009054906101000a900460ff1681565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610f22576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fb6565b610f358382611e3790919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110fe57600080fd5b61110c868686868686611e50565b505050505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561120657600080fd5b600360149054906101000a900460ff1615151561122257600080fd5b6001600360146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f444952000000000000000000000000000000000000000000000000000000000081525081565b60006112dc338484611961565b6112e68383612077565b905092915050565b60046020528060005260406000206000915090508060000154908060010160009054906101000a900467ffffffffffffffff16908060010160089054906101000a900467ffffffffffffffff16908060010160109054906101000a900467ffffffffffffffff16905084565b600080fd5b600080600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015414156113b95760009150611433565b6114308160000154848360010160009054906101000a900467ffffffffffffffff1667ffffffffffffffff168460010160089054906101000a900467ffffffffffffffff1667ffffffffffffffff168560010160109054906101000a900467ffffffffffffffff1667ffffffffffffffff16612296565b91505b5092915050565b60006114cb82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e1990919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561171957600080fd5b80600560006101000a81548160ff02191690831515021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561179257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156117ce57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561193957600080fd5b6102c65a03f1151561194a57600080fd5b50505060405180519050151561195c57fe5b505050565b600360149054906101000a900460ff1680156119895750600560009054906101000a900460ff165b801561199b575061199a83826122c2565b5b156119a557611a5a565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480611a4e5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b1515611a5957600080fd5b5b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611a9c57600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611ae957600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611b7457600080fd5b611bc5826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e3790919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c58826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e1990919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d2982600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e3790919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000808284019050838110151515611e2d57fe5b8091505092915050565b6000828211151515611e4557fe5b818303905092915050565b8367ffffffffffffffff168367ffffffffffffffff1610158015611e8857508267ffffffffffffffff168267ffffffffffffffff1610155b1515611e9357600080fd5b6000600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541480611ee15750805b1515611eec57600080fd5b6080604051908101604052808681526020018567ffffffffffffffff1681526020018467ffffffffffffffff1681526020018367ffffffffffffffff16815250600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160010160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160010160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509050508573ffffffffffffffffffffffffffffffffffffffff167fedfe290f98c3da9417aaf8cdb064f7060bd844466cb09dfadcd638efab0aab878684604051808381526020018267ffffffffffffffff1667ffffffffffffffff1681526020019250505060405180910390a2505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156120b457600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561210157600080fd5b612152826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e3790919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506121e5826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e1990919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60006122b76122a88787878787612313565b87611e3790919063ffffffff16565b905095945050505050565b60008060006122d08561115c565b14156122df576001915061230c565b6123036122ec854261135f565b6122f586611114565b611e3790919063ffffffff16565b90508083111591505b5092915050565b6000808386101561232757600091506123b1565b8286101515612338578691506123b1565b6123ab61236362278d006123558887611e3790919063ffffffff16565b6123bb90919063ffffffff16565b61239d61238e62278d006123808a8c611e3790919063ffffffff16565b6123bb90919063ffffffff16565b8a6123d690919063ffffffff16565b6123bb90919063ffffffff16565b90508091505b5095945050505050565b60008082848115156123c957fe5b0490508091505092915050565b60008060008414156123eb576000915061240a565b82840290508284828115156123fc57fe5b0414151561240657fe5b8091505b50929150505600a165627a7a723058205ed0b71eb96e36b59ebca3765516a2793b83936d95bb37a5c10970089bc96d6c0029"
}