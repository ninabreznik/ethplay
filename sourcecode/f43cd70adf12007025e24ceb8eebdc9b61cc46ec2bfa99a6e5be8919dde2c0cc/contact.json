{
  "address": "0xa62ce5f4175ba550440171ef809197ee21002d64",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Scavo Token",
  "contractName": "SCAVOToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-05\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n  function totalSupply() public view returns (uint256);\n\n  function balanceOf(address _who) public view returns (uint256);\n\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transfer(address _to, uint256 _value) public returns (bool);\n\n  function approve(address _spender, uint256 _value)\n    public returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20 {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param _from address The address which you want to send tokens from\n   * @param _value uint256 The amount of token to be burned\n   */\n  function burnFrom(address _from, uint256 _value) public {\n    require(_value <= allowed[_from][msg.sender]);\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    _burn(_from, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public onlyOwner canMint returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n/**\n * @title ERC1132 interface\n * @dev see https://github.com/ethereum/EIPs/issues/1132\n */\n\ncontract ERC1132 {\n    /**\n     * @dev Reasons why a user's tokens have been locked\n     */\n    mapping(address => bytes32[]) public lockReason;\n\n    /**\n     * @dev locked token structure\n     */\n    struct lockToken {\n        uint256 amount;\n        uint256 validity;\n        bool claimed;\n    }\n\n    /**\n     * @dev Holds number & validity of tokens locked for a given reason for\n     *      a specified address\n     */\n    mapping(address => mapping(bytes32 => lockToken)) public locked;\n\n    /**\n     * @dev Records data of all the tokens Locked\n     */\n    event Lock(\n        address indexed _of,\n        bytes32 indexed _reason,\n        uint256 _amount,\n        uint256 _validity\n    );\n\n    /**\n     * @dev Records data of all the tokens unlocked\n     */\n    event Unlock(\n        address indexed _of,\n        bytes32 indexed _reason,\n        uint256 _amount\n    );\n    \n    /**\n     * @dev Locks a specified amount of tokens against an address,\n     *      for a specified reason and time\n     * @param _reason The reason to lock tokens\n     * @param _amount Number of tokens to be locked\n     * @param _time Lock time in seconds\n     */\n    function lock(bytes32 _reason, uint256 _amount, uint256 _time)\n        public returns (bool);\n  \n    /**\n     * @dev Returns tokens locked for a specified address for a\n     *      specified reason\n     *\n     * @param _of The address whose tokens are locked\n     * @param _reason The reason to query the lock tokens for\n     */\n    function tokensLocked(address _of, bytes32 _reason)\n        public view returns (uint256 amount);\n    \n    /**\n     * @dev Returns tokens locked for a specified address for a\n     *      specified reason at a specific time\n     *\n     * @param _of The address whose tokens are locked\n     * @param _reason The reason to query the lock tokens for\n     * @param _time The timestamp to query the lock tokens for\n     */\n    function tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time)\n        public view returns (uint256 amount);\n    \n    /**\n     * @dev Returns total tokens held by an address (locked + transferable)\n     * @param _of The address to query the total balance of\n     */\n    function totalBalanceOf(address _of)\n        public view returns (uint256 amount);\n    \n    /**\n     * @dev Extends lock for a specified reason and time\n     * @param _reason The reason to lock tokens\n     * @param _time Lock extension time in seconds\n     */\n    function extendLock(bytes32 _reason, uint256 _time)\n        public returns (bool);\n    \n    /**\n     * @dev Increase number of tokens locked for a specified reason\n     * @param _reason The reason to lock tokens\n     * @param _amount Number of tokens to be increased\n     */\n    function increaseLockAmount(bytes32 _reason, uint256 _amount)\n        public returns (bool);\n\n    /**\n     * @dev Returns unlockable tokens for a specified address for a specified reason\n     * @param _of The address to query the the unlockable token count of\n     * @param _reason The reason to query the unlockable tokens for\n     */\n    function tokensUnlockable(address _of, bytes32 _reason)\n        public view returns (uint256 amount);\n \n    /**\n     * @dev Unlocks the unlockable tokens of a specified address\n     * @param _of Address of user, claiming back unlockable tokens\n     */\n    function unlock(address _of)\n        public returns (uint256 unlockableTokens);\n\n    /**\n     * @dev Gets the unlockable tokens of a specified address\n     * @param _of The address to query the the unlockable token count of\n     */\n    function getUnlockableTokens(address _of)\n        public view returns (uint256 unlockableTokens);\n\n}\n\n\n/**\n * @title SCAVOToken\n * @dev ERC20 Token, where all tokens are pre-assigned to the creator.\n * Note they can later distribute these tokens as they wish using `transfer` and other\n * `StandardToken` functions.\n * Version: 1.3\n */\ncontract SCAVOToken is ERC1132, StandardToken, MintableToken, PausableToken, BurnableToken {\n\n\tstring public constant name = \"SCAVO Token\";\n\tstring public constant symbol = \"SCAVO\";\n\tstring public constant version = \"1.3\";\n\tuint8 public constant decimals = 18;\n\n\tuint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\n\n\t/**\n\t * @dev Error messages for require statements\n\t */\n\tstring constant alreadyLocked = 'Tokens already locked';\n\tstring constant notLocked = 'No tokens locked';\n\tstring constant amountZero = 'Amount can not be 0';\n\tstring constant transferFailed = 'Transfer Failed';\n  \n\t/**\n\t * @dev Constructor that gives msg.sender all of existing tokens.\n\t */\n\tconstructor() public {\n\t\ttotalSupply_ = INITIAL_SUPPLY;\n\t\tbalances[msg.sender] = INITIAL_SUPPLY;\n\t\temit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\n\t}\n  \n    /**\n     * @dev Locks a specified amount of tokens against an address,\n     *      for a specified reason and time\n     * @param _reason The reason to lock tokens\n     * @param _amount Number of tokens to be locked\n     * @param _time Lock time in seconds\n     */\n    function lock(bytes32 _reason, uint256 _amount, uint256 _time)\n        public\n        returns (bool)\n    {\n        uint256 validUntil = block.timestamp.add(_time);\n\n        // If tokens are already locked, then functions extendLock or\n        // increaseLockAmount should be used to make any changes\n        require(tokensLocked(msg.sender, _reason) == 0, alreadyLocked);\n        require(_amount != 0, amountZero);\n\n        if (locked[msg.sender][_reason].amount == 0)\n            lockReason[msg.sender].push(_reason);\n\n        transfer(address(this), _amount);\n\n        locked[msg.sender][_reason] = lockToken(_amount, validUntil, false);\n\n        emit Lock(msg.sender, _reason, _amount, validUntil);\n        return true;\n    }\n    \n    /**\n     * @dev Transfers and Locks a specified amount of tokens,\n     *      for a specified reason and time\n     * @param _to adress to which tokens are to be transfered\n     * @param _reason The reason to lock tokens\n     * @param _amount Number of tokens to be transfered and locked\n     * @param _time Lock time in seconds\n     */\n    function transferWithLock(address _to, bytes32 _reason, uint256 _amount, uint256 _time)\n        public\n        returns (bool)\n    {\n        uint256 validUntil = block.timestamp.add(_time);\n\n        require(tokensLocked(_to, _reason) == 0, alreadyLocked);\n        require(_amount != 0, amountZero);\n\n        if (locked[_to][_reason].amount == 0)\n            lockReason[_to].push(_reason);\n\n        transfer(address(this), _amount);\n\n        locked[_to][_reason] = lockToken(_amount, validUntil, false);\n        \n        emit Lock(_to, _reason, _amount, validUntil);\n        return true;\n    }\n\n    /**\n     * @dev Returns tokens locked for a specified address for a\n     *      specified reason\n     *\n     * @param _of The address whose tokens are locked\n     * @param _reason The reason to query the lock tokens for\n     */\n    function tokensLocked(address _of, bytes32 _reason)\n        public\n        view\n        returns (uint256 amount)\n    {\n        if (!locked[_of][_reason].claimed)\n            amount = locked[_of][_reason].amount;\n    }\n    \n    /**\n     * @dev Returns tokens locked for a specified address for a\n     *      specified reason at a specific time\n     *\n     * @param _of The address whose tokens are locked\n     * @param _reason The reason to query the lock tokens for\n     * @param _time The timestamp to query the lock tokens for\n     */\n    function tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time)\n        public\n        view\n        returns (uint256 amount)\n    {\n        if (locked[_of][_reason].validity > _time)\n            amount = locked[_of][_reason].amount;\n    }\n\n    /**\n     * @dev Returns total tokens held by an address (locked + transferable)\n     * @param _of The address to query the total balance of\n     */\n    function totalBalanceOf(address _of)\n        public\n        view\n        returns (uint256 amount)\n    {\n    \tamount = balanceOf(_of);\n\n        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n            amount = amount.add(tokensLocked(_of, lockReason[_of][i]));\n        }   \n    }    \n    \n    /**\n     * @dev Extends lock for a specified reason and time\n     * @param _reason The reason to lock tokens\n     * @param _time Lock extension time in seconds\n     */\n    function extendLock(bytes32 _reason, uint256 _time)\n        public\n        returns (bool)\n    {\n        require(tokensLocked(msg.sender, _reason) > 0, notLocked);\n\n        locked[msg.sender][_reason].validity = locked[msg.sender][_reason].validity.add(_time);\n\n        emit Lock(msg.sender, _reason, locked[msg.sender][_reason].amount, locked[msg.sender][_reason].validity);\n        return true;\n    }\n    \n    /**\n     * @dev Increase number of tokens locked for a specified reason\n     * @param _reason The reason to lock tokens\n     * @param _amount Number of tokens to be increased\n     */\n    function increaseLockAmount(bytes32 _reason, uint256 _amount)\n        public\n        returns (bool)\n    {\n        require(tokensLocked(msg.sender, _reason) > 0, notLocked);\n        transfer(address(this), _amount);\n\n        locked[msg.sender][_reason].amount = locked[msg.sender][_reason].amount.add(_amount);\n\n        emit Lock(msg.sender, _reason, locked[msg.sender][_reason].amount, locked[msg.sender][_reason].validity);\n        return true;\n    }\n\n    /**\n     * @dev Returns unlockable tokens for a specified address for a specified reason\n     * @param _of The address to query the the unlockable token count of\n     * @param _reason The reason to query the unlockable tokens for\n     */\n    function tokensUnlockable(address _of, bytes32 _reason)\n        public\n        view\n        returns (uint256 amount)\n    {\n        if (locked[_of][_reason].validity <= now && !locked[_of][_reason].claimed)\n            amount = locked[_of][_reason].amount;\n    }\n\n    /**\n     * @dev Unlocks the unlockable tokens of a specified address\n     * @param _of Address of user, claiming back unlockable tokens\n     */\n    function unlock(address _of)\n        public\n        returns (uint256 unlockableTokens)\n    {\n        uint256 lockedTokens;\n\n        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n            lockedTokens = tokensUnlockable(_of, lockReason[_of][i]);\n            if (lockedTokens > 0) {\n                unlockableTokens = unlockableTokens.add(lockedTokens);\n                locked[_of][lockReason[_of][i]].claimed = true;\n                emit Unlock(_of, lockReason[_of][i], lockedTokens);\n            }\n        }  \n\n        if(unlockableTokens > 0)\n        \tthis.transfer(_of, unlockableTokens);\n    }\n\n    /**\n     * @dev Gets the unlockable tokens of a specified address\n     * @param _of The address to query the the unlockable token count of\n     */\n    function getUnlockableTokens(address _of)\n        public\n        view\n        returns (uint256 unlockableTokens)\n    {\n        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n            unlockableTokens = unlockableTokens.add(tokensUnlockable(_of, lockReason[_of][i]));\n        }  \n    }  \n\n}",
  "bytecode": "60806040526005805460a060020a61ffff021916905534801561002157600080fd5b5060058054600160a060020a031916339081179091556b033b2e3c9fd0803ce80000006004819055600082815260026020908152604080832084905580519384525191927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3611ddf8061009f6000396000f3006080604052600436106101c15763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146101c657806306fdde03146101ef578063095ea7b314610279578063179e91f11461029d57806318160ddd146102d657806323b872dd146102eb5780632e82aaf2146103155780632f6c493c146103335780632ff2e9dc14610354578063313ce567146103695780633f4ba83a1461039457806340c10f19146103ab57806342966c68146103cf5780634b0ee02a146103e75780634cb5465f146104085780635294d0e81461043257806354fd4d50146104565780635c975abb1461046b5780635ca48d8c1461048057806366188463146104a457806370a08231146104c8578063715018a6146104e957806371d66f00146104fe57806379cc6790146105225780637d64bcb41461054657806381fc4d901461055b5780638456cb59146105765780638da5cb5b1461058b57806395d89b41146105bc578063a9059cbb146105d1578063a9dab167146105f5578063ab4a2eb314610610578063d71be8db14610631578063d73dd62314610675578063dd62ed3e14610699578063f2fde38b146106c0575b600080fd5b3480156101d257600080fd5b506101db6106e1565b604080519115158252519081900360200190f35b3480156101fb57600080fd5b50610204610702565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561023e578181015183820152602001610226565b50505050905090810190601f16801561026b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561028557600080fd5b506101db600160a060020a0360043516602435610739565b3480156102a957600080fd5b506102c4600160a060020a0360043516602435604435610766565b60408051918252519081900360200190f35b3480156102e257600080fd5b506102c46107bf565b3480156102f757600080fd5b506101db600160a060020a03600435811690602435166044356107c5565b34801561032157600080fd5b506101db6004356024356044356107f2565b34801561033f57600080fd5b506102c4600160a060020a0360043516610a2c565b34801561036057600080fd5b506102c4610c2a565b34801561037557600080fd5b5061037e610c3a565b6040805160ff9092168252519081900360200190f35b3480156103a057600080fd5b506103a9610c3f565b005b3480156103b757600080fd5b506101db600160a060020a0360043516602435610cb8565b3480156103db57600080fd5b506103a9600435610dc3565b3480156103f357600080fd5b506102c4600160a060020a0360043516610dd0565b34801561041457600080fd5b506101db600160a060020a0360043516602435604435606435610e5f565b34801561043e57600080fd5b506102c4600160a060020a0360043516602435611079565b34801561046257600080fd5b50610204611102565b34801561047757600080fd5b506101db611139565b34801561048c57600080fd5b506102c4600160a060020a0360043516602435611149565b3480156104b057600080fd5b506101db600160a060020a03600435166024356111a2565b3480156104d457600080fd5b506102c4600160a060020a03600435166111c6565b3480156104f557600080fd5b506103a96111e1565b34801561050a57600080fd5b506102c4600160a060020a036004351660243561124f565b34801561052e57600080fd5b506103a9600160a060020a036004351660243561127f565b34801561055257600080fd5b506101db611315565b34801561056757600080fd5b506101db6004356024356113bb565b34801561058257600080fd5b506103a96114d3565b34801561059757600080fd5b506105a0611551565b60408051600160a060020a039092168252519081900360200190f35b3480156105c857600080fd5b50610204611560565b3480156105dd57600080fd5b506101db600160a060020a0360043516602435611597565b34801561060157600080fd5b506101db6004356024356115bb565b34801561061c57600080fd5b506102c4600160a060020a03600435166116ce565b34801561063d57600080fd5b50610655600160a060020a036004351660243561172b565b604080519384526020840192909252151582820152519081900360600190f35b34801561068157600080fd5b506101db600160a060020a0360043516602435611756565b3480156106a557600080fd5b506102c4600160a060020a036004358116906024351661177a565b3480156106cc57600080fd5b506103a9600160a060020a03600435166117a5565b60055474010000000000000000000000000000000000000000900460ff1681565b60408051808201909152600b81527f534341564f20546f6b656e000000000000000000000000000000000000000000602082015281565b60055460009060a860020a900460ff161561075357600080fd5b61075d83836117c5565b90505b92915050565b600160a060020a0383166000908152600160208181526040808420868552909152822001548210156107b85750600160a060020a03831660009081526001602090815260408083208584529091529020545b9392505050565b60045490565b60055460009060a860020a900460ff16156107df57600080fd5b6107ea84848461182b565b949350505050565b600080610805428463ffffffff61199016565b90506108113386611149565b60408051808201909152601581527f546f6b656e7320616c7265616479206c6f636b65640000000000000000000000602082015290156108d25760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561089757818101518382015260200161087f565b50505050905090810190601f1680156108c45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060408051808201909152601381527f416d6f756e742063616e206e6f7420626520300000000000000000000000000060208201528415156109595760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561089757818101518382015260200161087f565b50336000908152600160209081526040808320888452909152902054151561099c5733600090815260208181526040822080546001810182559083529120018590555b6109a63085611597565b5060408051606081018252858152602080820184815260008385018181523380835260018086528784208d855286529287902095518655925191850191909155516002909301805460ff191693151593909317909255825187815290810184905282518893600080516020611d74833981519152928290030190a3506001949350505050565b600080805b600160a060020a038416600090815260208190526040902054811015610b8557600160a060020a03841660009081526020819052604090208054610a8b91869184908110610a7b57fe5b9060005260206000200154611079565b91506000821115610b7d57610aa6838363ffffffff61199016565b600160a060020a0385166000908152600160208181526040808420918490528320805494975091939092919085908110610adc57fe5b60009182526020808320919091015483528281019390935260409182018120600201805460ff191694151594909417909355600160a060020a0387168352908290529020805482908110610b2c57fe5b90600052602060002001546000191684600160a060020a03167f0c35a7765dc80648aa68cb8cf542e73a11500a6e58527cfe7aea2bf7e6b89c87846040518082815260200191505060405180910390a35b600101610a31565b6000831115610c2357604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0386166004820152602481018590529051309163a9059cbb9160448083019260209291908290030181600087803b158015610bf657600080fd5b505af1158015610c0a573d6000803e3d6000fd5b505050506040513d6020811015610c2057600080fd5b50505b5050919050565b6b033b2e3c9fd0803ce800000081565b601281565b600554600160a060020a03163314610c5657600080fd5b60055460a860020a900460ff161515610c6e57600080fd5b6005805475ff000000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600554600090600160a060020a03163314610cd257600080fd5b60055474010000000000000000000000000000000000000000900460ff1615610cfa57600080fd5b600454610d0d908363ffffffff61199016565b600455600160a060020a038316600090815260026020526040902054610d39908363ffffffff61199016565b600160a060020a038416600081815260026020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a03851691600091600080516020611d948339815191529181900360200190a350600192915050565b610dcd338261199d565b50565b600080610ddc836111c6565b9150600090505b600160a060020a038316600090815260208190526040902054811015610e5957600160a060020a03831660009081526020819052604090208054610e4f91610e429186919085908110610e3257fe5b9060005260206000200154611149565b839063ffffffff61199016565b9150600101610de3565b50919050565b600080610e72428463ffffffff61199016565b9050610e7e8686611149565b60408051808201909152601581527f546f6b656e7320616c7265616479206c6f636b6564000000000000000000000060208201529015610f035760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561089757818101518382015260200161087f565b5060408051808201909152601381527f416d6f756e742063616e206e6f742062652030000000000000000000000000006020820152841515610f8a5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561089757818101518382015260200161087f565b50600160a060020a03861660009081526001602090815260408083208884529091529020541515610fdf57600160a060020a038616600090815260208181526040822080546001810182559083529120018590555b610fe93085611597565b506040805160608101825285815260208082018481526000838501818152600160a060020a038c1680835260018086528784208d855286529287902095518655925191850191909155516002909301805460ff191693151593909317909255825187815290810184905282518893600080516020611d74833981519152928290030190a350600195945050505050565b600160a060020a03821660009081526001602081815260408084208585529091528220015442108015906110d45750600160a060020a038316600090815260016020908152604080832085845290915290206002015460ff16155b156107605750600160a060020a03919091166000908152600160209081526040808320938352929052205490565b60408051808201909152600381527f312e330000000000000000000000000000000000000000000000000000000000602082015281565b60055460a860020a900460ff1681565b600160a060020a038216600090815260016020908152604080832084845290915281206002015460ff1615156107605750600160a060020a03919091166000908152600160209081526040808320938352929052205490565b60055460009060a860020a900460ff16156111bc57600080fd5b61075d8383611a8c565b600160a060020a031660009081526002602052604090205490565b600554600160a060020a031633146111f857600080fd5b600554604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26005805473ffffffffffffffffffffffffffffffffffffffff19169055565b60006020528160005260406000208181548110151561126a57fe5b90600052602060002001600091509150505481565b600160a060020a03821660009081526003602090815260408083203384529091529020548111156112af57600080fd5b600160a060020a03821660009081526003602090815260408083203384529091529020546112e3908263ffffffff611b7b16565b600160a060020a0383166000908152600360209081526040808320338452909152902055611311828261199d565b5050565b600554600090600160a060020a0316331461132f57600080fd5b60055474010000000000000000000000000000000000000000900460ff161561135757600080fd5b6005805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b6000806113c83385611149565b60408051808201909152601081527f4e6f20746f6b656e73206c6f636b6564000000000000000000000000000000006020820152911061144d5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561089757818101518382015260200161087f565b506114583083611597565b50336000908152600160209081526040808320868452909152902054611484908363ffffffff61199016565b3360008181526001602081815260408084208985528252928390208581559091015482519485529084015280518693600080516020611d7483398151915292908290030190a350600192915050565b600554600160a060020a031633146114ea57600080fd5b60055460a860020a900460ff161561150157600080fd5b6005805475ff000000000000000000000000000000000000000000191660a860020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600554600160a060020a031681565b60408051808201909152600581527f534341564f000000000000000000000000000000000000000000000000000000602082015281565b60055460009060a860020a900460ff16156115b157600080fd5b61075d8383611b8d565b6000806115c83385611149565b60408051808201909152601081527f4e6f20746f6b656e73206c6f636b6564000000000000000000000000000000006020820152911061164d5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561089757818101518382015260200161087f565b50336000908152600160208181526040808420878552909152909120015461167b908363ffffffff61199016565b336000818152600160208181526040808420898552825292839020918201859055905482519081529081019390935280518693600080516020611d7483398151915292908290030190a350600192915050565b6000805b600160a060020a038316600090815260208190526040902054811015610e5957600160a060020a0383166000908152602081905260409020805461172191610e429186919085908110610a7b57fe5b91506001016116d2565b6001602081815260009384526040808520909152918352912080549181015460029091015460ff1683565b60055460009060a860020a900460ff161561177057600080fd5b61075d8383611c5c565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b600554600160a060020a031633146117bc57600080fd5b610dcd81611cf5565b336000818152600360209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600160a060020a03831660009081526002602052604081205482111561185057600080fd5b600160a060020a038416600090815260036020908152604080832033845290915290205482111561188057600080fd5b600160a060020a038316151561189557600080fd5b600160a060020a0384166000908152600260205260409020546118be908363ffffffff611b7b16565b600160a060020a0380861660009081526002602052604080822093909355908516815220546118f3908363ffffffff61199016565b600160a060020a038085166000908152600260209081526040808320949094559187168152600382528281203382529091522054611937908363ffffffff611b7b16565b600160a060020a0380861660008181526003602090815260408083203384528252918290209490945580518681529051928716939192600080516020611d94833981519152929181900390910190a35060019392505050565b8181018281101561076057fe5b600160a060020a0382166000908152600260205260409020548111156119c257600080fd5b600160a060020a0382166000908152600260205260409020546119eb908263ffffffff611b7b16565b600160a060020a038316600090815260026020526040902055600454611a17908263ffffffff611b7b16565b600455604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a03851691600080516020611d948339815191529181900360200190a35050565b336000908152600360209081526040808320600160a060020a0386168452909152812054808310611ae057336000908152600360209081526040808320600160a060020a0388168452909152812055611b15565b611af0818463ffffffff611b7b16565b336000908152600360209081526040808320600160a060020a03891684529091529020555b336000818152600360209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600082821115611b8757fe5b50900390565b33600090815260026020526040812054821115611ba957600080fd5b600160a060020a0383161515611bbe57600080fd5b33600090815260026020526040902054611bde908363ffffffff611b7b16565b3360009081526002602052604080822092909255600160a060020a03851681522054611c10908363ffffffff61199016565b600160a060020a038416600081815260026020908152604091829020939093558051858152905191923392600080516020611d948339815191529281900390910190a350600192915050565b336000908152600360209081526040808320600160a060020a0386168452909152812054611c90908363ffffffff61199016565b336000818152600360209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a0381161515611d0a57600080fd5b600554604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600d173f98f4a2080eab40a0bff4d9a575753270cb2401c74efdec1feb0ba31b426ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820e3a54ce6ab29daeea3286b605acd6ecf69a5f10420ddfe75fed8ab82c1ce14f40029"
}