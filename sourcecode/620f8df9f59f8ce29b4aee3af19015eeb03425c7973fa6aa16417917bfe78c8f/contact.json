{
  "address": "0x98363fc5cb6f2b7836ba671e1e47c77c8c0c739a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BigFoolCoin",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-22\n*/\n\npragma solidity ^0.4.8;\ncontract Token{\n    // token总量，默认会为public变量生成一个getter函数接口，名称为totalSupply().\n    uint256 public totalSupply;\n\n    /// 获取账户_owner拥有token的数量 \n    function balanceOf(address _owner) constant returns (uint256 balance);\n\n    //从消息发送者账户中往_to账户转数量为_value的token\n    function transfer(address _to, uint256 _value) returns (bool success);\n\n    //从账户_from中往账户_to转数量为_value的token，与approve方法配合使用\n    function transferFrom(address _from, address _to, uint256 _value) returns   \n    (bool success);\n\n    //消息发送账户设置账户_spender能从发送账户中转出数量为_value的token\n    function approve(address _spender, uint256 _value) returns (bool success);\n\n    //获取账户_spender可以从账户_owner中转出token的数量\n    function allowance(address _owner, address _spender) constant returns \n    (uint256 remaining);\n\n    //发生转账时必须要触发的事件 \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    //当函数approve(address _spender, uint256 _value)成功执行时必须触发的事件\n    event Approval(address indexed _owner, address indexed _spender, uint256 \n    _value);\n}\n\ncontract StandardToken is Token {\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        //默认totalSupply 不会超过最大值 (2^256 - 1).\n        //如果随着时间的推移将会有新的token生成，则可以用下面这句避免溢出的异常\n        //require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;//从消息发送者账户中减去token数量_value\n        balances[_to] += _value;//往接收账户增加token数量_value\n        Transfer(msg.sender, _to, _value);//触发转币交易事件\n        return true;\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) returns \n    (bool success) {\n        //require(balances[_from] >= _value && allowed[_from][msg.sender] >= \n        // _value && balances[_to] + _value > balances[_to]);\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n        balances[_to] += _value;//接收账户增加token数量_value\n        balances[_from] -= _value; //支出账户_from减去token数量_value\n        allowed[_from][msg.sender] -= _value;//消息发送者可以从账户_from中转出的数量减少_value\n        Transfer(_from, _to, _value);//触发转币交易事件\n        return true;\n    }\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n\n    function approve(address _spender, uint256 _value) returns (bool success)   \n    {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];//允许_spender从_owner中转出的token数\n    }\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n}\n\ncontract BigFoolCoin is StandardToken { \n\n    /* Public variables of the token */\n    string public name;                   //名称: eg Simon Bucks\n    uint8 public decimals;               //最多的小数位数，How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n    string public symbol;               //token简称: eg SBX\n    string public version = 'H0.1';    //版本\n\n    function BigFoolCoin(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) {\n        balances[msg.sender] = _initialAmount; // 初始token数量给予消息发送者\n        totalSupply = _initialAmount;         // 设置初始总量\n        name = _tokenName;                   // token名称\n        decimals = _decimalUnits;           // 小数位数\n        symbol = _tokenSymbol;             // token简称\n    }\n\n    /* Approves and then calls the receiving contract */\n    \n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n        require(_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData));\n        return true;\n    }\n\n}",
  "bytecode": "60606040526040805190810160405280600481526020017f48302e310000000000000000000000000000000000000000000000000000000081525060069080519060200190620000519291906200013b565b5034156200005e57600080fd5b6040516200118238038062001182833981016040528080519060200190919080518201919060200180519060200190919080518201919050505b83600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550836000819055508260039080519060200190620000fb9291906200013b565b5081600460006101000a81548160ff021916908360ff16021790555080600590805190602001906200012f9291906200013b565b505b50505050620001ea565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200017e57805160ff1916838001178555620001af565b82800160010185558215620001af579182015b82811115620001ae57825182559160200191906001019062000191565b5b509050620001be9190620001c2565b5090565b620001e791905b80821115620001e3576000816000905550600101620001c9565b5090565b90565b610f8880620001fa6000396000f300606060405236156100ad576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100b2578063095ea7b31461014157806318160ddd1461019b57806323b872dd146101c4578063313ce5671461023d57806354fd4d501461026c57806370a08231146102fb57806395d89b4114610348578063a9059cbb146103d7578063cae9ca5114610431578063dd62ed3e146104ce575b600080fd5b34156100bd57600080fd5b6100c561053a565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101065780820151818401525b6020810190506100ea565b50505050905090810190601f1680156101335780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014c57600080fd5b610181600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506105d8565b604051808215151515815260200191505060405180910390f35b34156101a657600080fd5b6101ae6106cb565b6040518082815260200191505060405180910390f35b34156101cf57600080fd5b610223600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106d1565b604051808215151515815260200191505060405180910390f35b341561024857600080fd5b61025061093e565b604051808260ff1660ff16815260200191505060405180910390f35b341561027757600080fd5b61027f610951565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102c05780820151818401525b6020810190506102a4565b50505050905090810190601f1680156102ed5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561030657600080fd5b610332600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506109ef565b6040518082815260200191505060405180910390f35b341561035357600080fd5b61035b610a39565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561039c5780820151818401525b602081019050610380565b50505050905090810190601f1680156103c95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103e257600080fd5b610417600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ad7565b604051808215151515815260200191505060405180910390f35b341561043c57600080fd5b6104b4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610c31565b604051808215151515815260200191505060405180910390f35b34156104d957600080fd5b610524600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ed4565b6040518082815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105d05780601f106105a5576101008083540402835291602001916105d0565b820191906000526020600020905b8154815290600101906020018083116105b357829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b60005481565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561079e575081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b15156107a957600080fd5b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b600460009054906101000a900460ff1681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109e75780601f106109bc576101008083540402835291602001916109e7565b820191906000526020600020905b8154815290600101906020018083116109ca57829003601f168201915b505050505081565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610acf5780601f10610aa457610100808354040283529160200191610acf565b820191906000526020600020905b815481529060010190602001808311610ab257829003601f168201915b505050505081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610b2757600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b92915050565b600082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff1660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e01905060405180910390207c01000000000000000000000000000000000000000000000000000000009004338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828051906020019080838360005b83811015610e735780820151818401525b602081019050610e57565b50505050905090810190601f168015610ea05780820380516001836020036101000a031916815260200191505b5094505050505060006040518083038160008761646e5a03f1925050501515610ec857600080fd5b600190505b9392505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b929150505600a165627a7a72305820f744d18002126867ada799ed60589140b695f52047fb162662114a630cfd71bb0029000000000000000000000000000000000000000000084595161401484a0000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000007426967466f6f6c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034444420000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000084595161401484a0000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000007426967466f6f6c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034444420000000000000000000000000000000000000000000000000000000000"
}