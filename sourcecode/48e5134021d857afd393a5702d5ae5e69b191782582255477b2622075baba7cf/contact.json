{
  "address": "0x17f68886d00845867c154c912b4ccc506ec92fc7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WyvernDAO",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-07\n*/\n\npragma solidity ^0.4.13;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract TokenLocker {\n    \n    address public owner;\n\n    ERC20 public token;\n\n    /**\n     * @dev Create a new TokenLocker contract\n     * @param tokenAddr ERC20 token this contract will be used to lock\n     */\n    function TokenLocker (ERC20 tokenAddr) public {\n        owner = msg.sender;\n        token = tokenAddr;\n    }\n\n    /** \n     *  @dev Call the ERC20 `transfer` function on the underlying token contract\n     *  @param dest Token destination\n     *  @param amount Amount of tokens to be transferred\n     */\n    function transfer(address dest, uint amount) public returns (bool) {\n        require(msg.sender == owner);\n        return token.transfer(dest, amount);\n    }\n\n}\n\ncontract TokenRecipient {\n    event ReceivedEther(address indexed sender, uint amount);\n    event ReceivedTokens(address indexed from, uint256 value, address indexed token, bytes extraData);\n\n    /**\n     * @dev Receive tokens and generate a log event\n     * @param from Address from which to transfer tokens\n     * @param value Amount of tokens to transfer\n     * @param token Address of token\n     * @param extraData Additional data to log\n     */\n    function receiveApproval(address from, uint256 value, address token, bytes extraData) public {\n        ERC20 t = ERC20(token);\n        require(t.transferFrom(from, this, value));\n        ReceivedTokens(from, value, token, extraData);\n    }\n\n    /**\n     * @dev Receive Ether and generate a log event\n     */\n    function () payable public {\n        ReceivedEther(msg.sender, msg.value);\n    }\n}\n\ncontract DelegatedShareholderAssociation is TokenRecipient {\n\n    uint public minimumQuorum;\n    uint public debatingPeriodInMinutes;\n    Proposal[] public proposals;\n    uint public numProposals;\n    ERC20 public sharesTokenAddress;\n\n    /* Delegate addresses by delegator. */\n    mapping (address => address) public delegatesByDelegator;\n\n    /* Locked tokens by delegator. */\n    mapping (address => uint) public lockedDelegatingTokens;\n\n    /* Delegated votes by delegate. */\n    mapping (address => uint) public delegatedAmountsByDelegate;\n    \n    /* Tokens currently locked by vote delegation. */\n    uint public totalLockedTokens;\n\n    /* Threshold for the ability to create proposals. */\n    uint public requiredSharesToBeBoardMember;\n\n    /* Token Locker contract. */\n    TokenLocker public tokenLocker;\n\n    /* Events for all state changes. */\n\n    event ProposalAdded(uint proposalID, address recipient, uint amount, bytes metadataHash);\n    event Voted(uint proposalID, bool position, address voter);\n    event ProposalTallied(uint proposalID, uint yea, uint nay, uint quorum, bool active);\n    event ChangeOfRules(uint newMinimumQuorum, uint newDebatingPeriodInMinutes, address newSharesTokenAddress);\n    event TokensDelegated(address indexed delegator, uint numberOfTokens, address indexed delegate);\n    event TokensUndelegated(address indexed delegator, uint numberOfTokens, address indexed delegate);\n\n    struct Proposal {\n        address recipient;\n        uint amount;\n        bytes metadataHash;\n        uint timeCreated;\n        uint votingDeadline;\n        bool finalized;\n        bool proposalPassed;\n        uint numberOfVotes;\n        bytes32 proposalHash;\n        Vote[] votes;\n        mapping (address => bool) voted;\n    }\n\n    struct Vote {\n        bool inSupport;\n        address voter;\n    }\n\n    /* Only shareholders can execute a function with this modifier. */\n    modifier onlyShareholders {\n        require(ERC20(sharesTokenAddress).balanceOf(msg.sender) > 0);\n        _;\n    }\n\n    /* Only the DAO itself (via an approved proposal) can execute a function with this modifier. */\n    modifier onlySelf {\n        require(msg.sender == address(this));\n        _;\n    }\n\n    /* Any account except the DAO itself can execute a function with this modifier. */\n    modifier notSelf {\n        require(msg.sender != address(this));\n        _;\n    }\n\n    /* Only a shareholder who has *not* delegated his vote can execute a function with this modifier. */\n    modifier onlyUndelegated {\n        require(delegatesByDelegator[msg.sender] == address(0));\n        _;\n    }\n\n    /* Only boardmembers (shareholders above a certain threshold) can execute a function with this modifier. */\n    modifier onlyBoardMembers {\n        require(ERC20(sharesTokenAddress).balanceOf(msg.sender) >= requiredSharesToBeBoardMember);\n        _;\n    }\n\n    /* Only a shareholder who has delegated his vote can execute a function with this modifier. */\n    modifier onlyDelegated {\n        require(delegatesByDelegator[msg.sender] != address(0));\n        _;\n    }\n\n    /**\n      * Delegate an amount of tokens\n      * \n      * @notice Set the delegate address for a specified number of tokens belonging to the sending address, locking the tokens.\n      * @dev An address holding tokens (shares) may only delegate some portion of their vote to one delegate at any one time\n      * @param tokensToLock number of tokens to be locked (sending address must have at least this many tokens)\n      * @param delegate the address to which votes equal to the number of tokens locked will be delegated\n      */\n    function setDelegateAndLockTokens(uint tokensToLock, address delegate)\n        public\n        onlyShareholders\n        onlyUndelegated\n        notSelf\n    {\n        lockedDelegatingTokens[msg.sender] = tokensToLock;\n        delegatedAmountsByDelegate[delegate] = SafeMath.add(delegatedAmountsByDelegate[delegate], tokensToLock);\n        totalLockedTokens = SafeMath.add(totalLockedTokens, tokensToLock);\n        delegatesByDelegator[msg.sender] = delegate;\n        require(sharesTokenAddress.transferFrom(msg.sender, tokenLocker, tokensToLock));\n        require(sharesTokenAddress.balanceOf(tokenLocker) == totalLockedTokens);\n        TokensDelegated(msg.sender, tokensToLock, delegate);\n    }\n\n    /** \n     * Undelegate all delegated tokens\n     * \n     * @notice Clear the delegate address for all tokens delegated by the sending address, unlocking the locked tokens.\n     * @dev Can only be called by a sending address currently delegating tokens, will transfer all locked tokens back to the sender\n     * @return The number of tokens previously locked, now released\n     */\n    function clearDelegateAndUnlockTokens()\n        public\n        onlyDelegated\n        notSelf\n        returns (uint lockedTokens)\n    {\n        address delegate = delegatesByDelegator[msg.sender];\n        lockedTokens = lockedDelegatingTokens[msg.sender];\n        lockedDelegatingTokens[msg.sender] = 0;\n        delegatedAmountsByDelegate[delegate] = SafeMath.sub(delegatedAmountsByDelegate[delegate], lockedTokens);\n        totalLockedTokens = SafeMath.sub(totalLockedTokens, lockedTokens);\n        delete delegatesByDelegator[msg.sender];\n        require(tokenLocker.transfer(msg.sender, lockedTokens));\n        require(sharesTokenAddress.balanceOf(tokenLocker) == totalLockedTokens);\n        TokensUndelegated(msg.sender, lockedTokens, delegate);\n        return lockedTokens;\n    }\n\n    /**\n     * Change voting rules\n     *\n     * Make so that proposals need tobe discussed for at least `minutesForDebate/60` hours\n     * and all voters combined must own more than `minimumSharesToPassAVote` shares of token `sharesAddress` to be executed\n     * and a shareholder needs `sharesToBeBoardMember` shares to create a transaction proposal\n     *\n     * @param minimumSharesToPassAVote proposal can vote only if the sum of shares held by all voters exceed this number\n     * @param minutesForDebate the minimum amount of delay between when a proposal is made and when it can be executed\n     * @param sharesToBeBoardMember the minimum number of shares required to create proposals\n     */\n    function changeVotingRules(uint minimumSharesToPassAVote, uint minutesForDebate, uint sharesToBeBoardMember)\n        public\n        onlySelf\n    {\n        if (minimumSharesToPassAVote == 0 ) {\n            minimumSharesToPassAVote = 1;\n        }\n        minimumQuorum = minimumSharesToPassAVote;\n        debatingPeriodInMinutes = minutesForDebate;\n        requiredSharesToBeBoardMember = sharesToBeBoardMember;\n        ChangeOfRules(minimumQuorum, debatingPeriodInMinutes, sharesTokenAddress);\n    }\n\n    /**\n     * Add Proposal\n     *\n     * Propose to send `weiAmount / 1e18` ether to `beneficiary` for `jobMetadataHash`. `transactionBytecode ? Contains : Does not contain` code.\n     *\n     * @dev Submit proposal for the DAO to execute a particular transaction. Submitter should check that the `beneficiary` account exists, unless the intent is to burn Ether.\n     * @param beneficiary who to send the ether to\n     * @param weiAmount amount of ether to send, in wei\n     * @param jobMetadataHash Hash of job metadata (IPFS)\n     * @param transactionBytecode bytecode of transaction\n     */\n    function newProposal(\n        address beneficiary,\n        uint weiAmount,\n        bytes jobMetadataHash,\n        bytes transactionBytecode\n    )\n        public\n        onlyBoardMembers\n        notSelf\n        returns (uint proposalID)\n    {\n        /* Proposals cannot be directed to the token locking contract. */\n        require(beneficiary != address(tokenLocker));\n        proposalID = proposals.length++;\n        Proposal storage p = proposals[proposalID];\n        p.recipient = beneficiary;\n        p.amount = weiAmount;\n        p.metadataHash = jobMetadataHash;\n        p.proposalHash = keccak256(beneficiary, weiAmount, transactionBytecode);\n        p.timeCreated = now;\n        p.votingDeadline = now + debatingPeriodInMinutes * 1 minutes;\n        p.finalized = false;\n        p.proposalPassed = false;\n        p.numberOfVotes = 0;\n        ProposalAdded(proposalID, beneficiary, weiAmount, jobMetadataHash);\n        numProposals = proposalID+1;\n        return proposalID;\n    }\n\n    /**\n     * Check if a proposal code matches\n     *\n     * @param proposalNumber ID number of the proposal to query\n     * @param beneficiary who to send the ether to\n     * @param weiAmount amount of ether to send\n     * @param transactionBytecode bytecode of transaction\n     */\n    function checkProposalCode(\n        uint proposalNumber,\n        address beneficiary,\n        uint weiAmount,\n        bytes transactionBytecode\n    )\n        public\n        view\n        returns (bool codeChecksOut)\n    {\n        Proposal storage p = proposals[proposalNumber];\n        return p.proposalHash == keccak256(beneficiary, weiAmount, transactionBytecode);\n    }\n\n    /**\n     * Log a vote for a proposal\n     *\n     * Vote `supportsProposal? in support of : against` proposal #`proposalNumber`\n     *\n     * @dev Vote in favor or against an existing proposal. Voter should check that the proposal destination account exists, unless the intent is to burn Ether.\n     * @param proposalNumber number of proposal\n     * @param supportsProposal either in favor or against it\n     */\n    function vote(\n        uint proposalNumber,\n        bool supportsProposal\n    )\n        public\n        onlyShareholders\n        notSelf\n        returns (uint voteID)\n    {\n        Proposal storage p = proposals[proposalNumber];\n        require(p.voted[msg.sender] != true);\n        voteID = p.votes.length++;\n        p.votes[voteID] = Vote({inSupport: supportsProposal, voter: msg.sender});\n        p.voted[msg.sender] = true;\n        p.numberOfVotes = voteID + 1;\n        Voted(proposalNumber, supportsProposal, msg.sender);\n        return voteID;\n    }\n\n    /**\n     * Return whether a particular shareholder has voted on a particular proposal (convenience function)\n     * @param proposalNumber proposal number\n     * @param shareholder address to query\n     * @return whether or not the specified address has cast a vote on the specified proposal\n     */\n    function hasVoted(uint proposalNumber, address shareholder) public view returns (bool) {\n        Proposal storage p = proposals[proposalNumber];\n        return p.voted[shareholder];\n    }\n\n    /**\n     * Count the votes, including delegated votes, in support of, against, and in total for a particular proposal\n     * @param proposalNumber proposal number\n     * @return yea votes, nay votes, quorum (total votes)\n     */\n    function countVotes(uint proposalNumber) public view returns (uint yea, uint nay, uint quorum) {\n        Proposal storage p = proposals[proposalNumber];\n        yea = 0;\n        nay = 0;\n        quorum = 0;\n        for (uint i = 0; i < p.votes.length; ++i) {\n            Vote storage v = p.votes[i];\n            uint voteWeight = SafeMath.add(sharesTokenAddress.balanceOf(v.voter), delegatedAmountsByDelegate[v.voter]);\n            quorum = SafeMath.add(quorum, voteWeight);\n            if (v.inSupport) {\n                yea = SafeMath.add(yea, voteWeight);\n            } else {\n                nay = SafeMath.add(nay, voteWeight);\n            }\n        }\n    }\n\n    /**\n     * Finish vote\n     *\n     * Count the votes proposal #`proposalNumber` and execute it if approved\n     *\n     * @param proposalNumber proposal number\n     * @param transactionBytecode optional: if the transaction contained a bytecode, you need to send it\n     */\n    function executeProposal(uint proposalNumber, bytes transactionBytecode)\n        public\n        notSelf\n    {\n        Proposal storage p = proposals[proposalNumber];\n\n        /* If at or past deadline, not already finalized, and code is correct, keep going. */\n        require((now >= p.votingDeadline) && !p.finalized && p.proposalHash == keccak256(p.recipient, p.amount, transactionBytecode));\n\n        /* Count the votes. */\n        var ( yea, nay, quorum ) = countVotes(proposalNumber);\n\n        /* Assert that a minimum quorum has been reached. */\n        require(quorum >= minimumQuorum);\n        \n        /* Mark proposal as finalized. */   \n        p.finalized = true;\n\n        if (yea > nay) {\n            /* Mark proposal as passed. */\n            p.proposalPassed = true;\n\n            /* Execute the function. */\n            require(p.recipient.call.value(p.amount)(transactionBytecode));\n\n        } else {\n            /* Proposal failed. */\n            p.proposalPassed = false;\n        }\n\n        /* Log event. */\n        ProposalTallied(proposalNumber, yea, nay, quorum, p.proposalPassed);\n    }\n}\n\ncontract WyvernDAO is DelegatedShareholderAssociation {\n\n    string public constant name = \"Project Wyvern DAO\";\n\n    uint public constant TOKEN_DECIMALS                     = 18;\n    uint public constant REQUIRED_SHARES_TO_BE_BOARD_MEMBER = 2000 * (10 ** TOKEN_DECIMALS); // set to ~ 0.1% of supply\n    uint public constant MINIMUM_QUORUM                     = 200000 * (10 ** TOKEN_DECIMALS); // set to 10% of supply\n    uint public constant DEBATE_PERIOD_MINUTES              = 60 * 24 * 3; // set to 3 days\n\n    function WyvernDAO (ERC20 sharesAddress) public {\n        sharesTokenAddress = sharesAddress;\n        requiredSharesToBeBoardMember = REQUIRED_SHARES_TO_BE_BOARD_MEMBER;\n        minimumQuorum = MINIMUM_QUORUM;\n        debatingPeriodInMinutes = DEBATE_PERIOD_MINUTES;\n        tokenLocker = new TokenLocker(sharesAddress);\n    }\n\n}",
  "bytecode": "6060604052341561000f57600080fd5b604051602080611e088339810160405280805160048054600160a060020a031916600160a060020a038316179055686c6b935b8bbd400000600955692a5a058fc295ed0000006000556110e0600155915081905061006b6100b7565b600160a060020a039091168152602001604051809103906000f080151561009157600080fd5b600a8054600160a060020a031916600160a060020a0392909216919091179055506100c7565b60405161023180611bd783390190565b611b01806100d66000396000f30060606040526004361061013a5763ffffffff60e060020a600035041663013cf08b8114610179578063064cc7a71461026457806306fdde031461029f57806306fde1691461032957806313f47f241461034e5780631840f0ca1461036d578063237e9492146103a757806327ebcf0e146103ff5780633fb3ec2814610412578063400e39491461043157806343859632146104445780635b7f415c1461047a5780635fa7df6b1461048d578063645bd436146104af57806369bd3436146104c25780636e676b69146104d55780638160f0b5146104f15780638f4ffcb114610504578063a80bf3e614610570578063b159beac14610583578063b94fa03f14610596578063c9d27afe146105a9578063dbc45228146105c4578063ecc46d1b1461066b578063eceb29451461067e578063f5c476f9146106e6575b33600160a060020a03167fa419615bc8fda4c87663805ee2a3597a6d71c1d476911d9892f340d965bc7bf13460405190815260200160405180910390a2005b341561018457600080fd5b61018f6004356106f9565b604051600160a060020a038a16815260208101899052606081018790526080810186905284151560a082015283151560c082015260e08101839052610100808201839052610120604083018181528a54600260018216159094026000190116929092049083018190526101408301908a90801561024d5780601f106102225761010080835404028352916020019161024d565b820191906000526020600020905b81548152906001019060200180831161023057829003601f168201915b50509a505050505050505050505060405180910390f35b341561026f57600080fd5b610283600160a060020a0360043516610760565b604051600160a060020a03909116815260200160405180910390f35b34156102aa57600080fd5b6102b261077b565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102ee5780820151838201526020016102d6565b50505050905090810190601f16801561031b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561033457600080fd5b61033c6107b2565b60405190815260200160405180910390f35b341561035957600080fd5b61033c600160a060020a03600435166107bf565b341561037857600080fd5b6103836004356107d1565b60405180848152602001838152602001828152602001935050505060405180910390f35b34156103b257600080fd5b6103fd600480359060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061092a95505050505050565b005b341561040a57600080fd5b610283610b91565b341561041d57600080fd5b61033c600160a060020a0360043516610ba0565b341561043c57600080fd5b61033c610bb2565b341561044f57600080fd5b610466600435600160a060020a0360243516610bb8565b604051901515815260200160405180910390f35b341561048557600080fd5b61033c610c00565b341561049857600080fd5b6103fd600435600160a060020a0360243516610c05565b34156104ba57600080fd5b61033c610ecb565b34156104cd57600080fd5b61033c61110d565b34156104e057600080fd5b6103fd600435602435604435611113565b34156104fc57600080fd5b61033c6111b1565b341561050f57600080fd5b6103fd60048035600160a060020a0390811691602480359260443516919060849060643590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506111b795505050505050565b341561057b57600080fd5b610283611303565b341561058e57600080fd5b61033c611312565b34156105a157600080fd5b61033c611320565b34156105b457600080fd5b61033c6004356024351515611326565b34156105cf57600080fd5b61033c60048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061152b95505050505050565b341561067657600080fd5b61033c6117e4565b341561068957600080fd5b610466600480359060248035600160a060020a0316916044359160849060643590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506117ea95505050505050565b34156106f157600080fd5b61033c6118a3565b600280548290811061070757fe5b60009182526020909120600a909102018054600182015460038301546004840154600585015460068601546007870154600160a060020a0390961697509395600201949293919260ff8083169361010090930416919089565b600560205260009081526040902054600160a060020a031681565b60408051908101604052601281527f50726f6a6563742057797665726e2044414f0000000000000000000000000000602082015281565b686c6b935b8bbd40000081565b60066020526000908152604090205481565b60008060008060008060006002888154811015156107eb57fe5b90600052602060002090600a02019350600096506000955060009450600092505b600884015483101561091f576008840180548490811061082857fe5b600091825260208220600454910180549094506108dd92600160a060020a03928316926370a0823192610100900416906040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561089d57600080fd5b6102c65a03f115156108ae57600080fd5b505050604051805184546101009004600160a060020a03166000908152600760205260409020549091506118a9565b90506108e985826118a9565b825490955060ff16156109075761090087826118a9565b9650610914565b61091186826118a9565b95505b82600101925061080c565b505050509193909250565b60008060008030600160a060020a031633600160a060020a03161415151561095157600080fd5b600280548790811061095f57fe5b90600052602060002090600a02019350836004015442101580156109885750600584015460ff16155b8015610a2d575083546001850154600160a060020a0390911690866040516c01000000000000000000000000600160a060020a038516028152601481018390526034810182805190602001908083835b602083106109f75780518252601f1990920191602091820191016109d8565b6001836020036101000a038019825116818451161790925250505091909101945060409350505050519081900390206007850154145b1515610a3857600080fd5b610a41866107d1565b9250925092506000548110151515610a5857600080fd5b60058401805460ff1916600117905581831115610b145760058401805461ff00191661010017905583546001850154600160a060020a03909116908660405180828051906020019080838360005b83811015610abe578082015183820152602001610aa6565b50505050905090810190601f168015610aeb5780820380516001836020036101000a031916815260200191505b5091505060006040518083038185876187965a03f1925050501515610b0f57600080fd5b610b22565b60058401805461ff00191690555b7f748f0810c68633063bb13f3c71e10cd1889925b3721d6e567114d0632574a396868484848860050160019054906101000a900460ff1660405194855260208501939093526040808501929092526060840152901515608083015260a0909101905180910390a1505050505050565b600454600160a060020a031681565b60076020526000908152604090205481565b60035481565b600080600284815481101515610bca57fe5b60009182526020808320600160a060020a03969096168352600a919091029094016009019093525050604090205460ff16919050565b601281565b600454600090600160a060020a03166370a0823133836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610c6057600080fd5b6102c65a03f11515610c7157600080fd5b50505060405180519050111515610c8757600080fd5b600160a060020a033381166000908152600560205260409020541615610cac57600080fd5b30600160a060020a031633600160a060020a031614151515610ccd57600080fd5b600160a060020a0333811660009081526006602090815260408083208690559284168252600790522054610d0190836118a9565b600160a060020a038216600090815260076020526040902055600854610d2790836118a9565b60085533600160a060020a03818116600090815260056020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916868516179055600454600a54908416946323b872dd949093911691879190516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515610dd057600080fd5b6102c65a03f11515610de157600080fd5b505050604051805190501515610df657600080fd5b600854600454600a54600160a060020a03918216916370a08231911660006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610e5957600080fd5b6102c65a03f11515610e6a57600080fd5b50505060405180519050141515610e8057600080fd5b80600160a060020a031633600160a060020a03167f57593c23286b632d1ba413b24ecae252f34f6b81fdff1022dc7ac0d78cde56b78460405190815260200160405180910390a35050565b600160a060020a0333811660009081526005602052604081205490918291161515610ef557600080fd5b30600160a060020a031633600160a060020a031614151515610f1657600080fd5b5050600160a060020a03338116600090815260056020908152604080832054600683528184208054908590559416808452600790925290912054610f5a90836118bf565b600160a060020a038216600090815260076020526040902055600854610f8090836118bf565b600855600160a060020a0333818116600090815260056020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169055600a549093169263a9059cbb92918691516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561101157600080fd5b6102c65a03f1151561102257600080fd5b50505060405180519050151561103757600080fd5b600854600454600a54600160a060020a03918216916370a08231911660006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561109a57600080fd5b6102c65a03f115156110ab57600080fd5b505050604051805190501415156110c157600080fd5b80600160a060020a031633600160a060020a03167fccc924ef18d5fcabbf624302b6a02f9014c9b3371994eacc0cec2c107f2503e48460405190815260200160405180910390a35b5090565b60015481565b30600160a060020a031633600160a060020a031614151561113357600080fd5b82151561113f57600192505b6000839055600182905560098190556004547f68259880819f96f54b67d672fefc666565de06099c91b57a689a42073ba090c99084908490600160a060020a03166040519283526020830191909152600160a060020a03166040808301919091526060909101905180910390a1505050565b60005481565b81600160a060020a0381166323b872dd86308760006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561122257600080fd5b6102c65a03f1151561123357600080fd5b50505060405180519050151561124857600080fd5b82600160a060020a031685600160a060020a03167fd65b48fd35864b3528d38e44760be5553248f89bf3ff6b06cca57817cc2650bf868560405182815260406020820181815290820183818151815260200191508051906020019080838360005b838110156112c15780820151838201526020016112a9565b50505050905090810190601f1680156112ee5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a35050505050565b600a54600160a060020a031681565b692a5a058fc295ed00000081565b60095481565b60045460009081908190600160a060020a03166370a0823133836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561138557600080fd5b6102c65a03f1151561139657600080fd5b505050604051805190501115156113ac57600080fd5b30600160a060020a031633600160a060020a0316141515156113cd57600080fd5b60028054859081106113db57fe5b60009182526020808320600160a060020a03331684526009600a90930201918201905260409091205490915060ff1615156001141561141957600080fd5b6008810180549061142d90600183016118d1565b9150604080519081016040528315158152600160a060020a03331660208201526008820180548490811061145d57fe5b60009182526020909120018151815460ff19169015151781556020820151815474ffffffffffffffffffffffffffffffffffffffff001916610100600160a060020a03928316021790915533908116600090815260098401602052604090819020805460ff19166001908117909155850160068501557f86abfce99b7dd908bec0169288797f85049ec73cbe046ed9de818fab3a497ae0925086918691519283529015156020830152600160a060020a03166040808301919091526060909101905180910390a15092915050565b6009546004546000918291600160a060020a03166370a0823133846040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561158b57600080fd5b6102c65a03f1151561159c57600080fd5b50505060405180519050101515156115b357600080fd5b30600160a060020a031633600160a060020a0316141515156115d457600080fd5b600a54600160a060020a03878116911614156115ef57600080fd5b600280549061160190600183016118fa565b915060028281548110151561161257fe5b60009182526020909120600a90910201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03881617815560018101869055905060028101848051611666929160200190611926565b508585846040516c01000000000000000000000000600160a060020a038516028152601481018390526034810182805190602001908083835b602083106116be5780518252601f19909201916020918201910161169f565b6001836020036101000a0380198251168184511617909252505050919091019450604093505050505190819003902060078201554260038201819055600154603c0201600482015560058101805461ffff19169055600060068201557f06d6b095e85f5218421975622a7aee84a98b32aa7d174b90088357014003b43382878787604051848152600160a060020a03841660208201526040810183905260806060820181815290820183818151815260200191508051906020019080838360005b8381101561179757808201518382015260200161177f565b50505050905090810190601f1680156117c45780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a16001820160035550949350505050565b6110e081565b6000806002868154811015156117fc57fe5b90600052602060002090600a020190508484846040516c01000000000000000000000000600160a060020a038516028152601481018390526034810182805190602001908083835b602083106118635780518252601f199092019160209182019101611844565b6001836020036101000a03801982511681845116179092525050509190910194506040935050505051908190039020600782015414915050949350505050565b60085481565b6000828201838110156118b857fe5b9392505050565b6000828211156118cb57fe5b50900390565b8154818355818115116118f5576000838152602090206118f59181019083016119a0565b505050565b8154818355818115116118f557600a0281600a0283600052602060002091820191016118f591906119d5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061196757805160ff1916838001178555611994565b82800160010185558215611994579182015b82811115611994578251825591602001919060010190611979565b50611109929150611a56565b6119d291905b8082111561110957805474ffffffffffffffffffffffffffffffffffffffffff191681556001016119a6565b90565b6119d291905b8082111561110957805473ffffffffffffffffffffffffffffffffffffffff19168155600060018201819055611a146002830182611a70565b6000600383018190556004830181905560058301805461ffff191690556006830181905560078301819055611a4d906008840190611ab7565b50600a016119db565b6119d291905b808211156111095760008155600101611a5c565b50805460018160011615610100020316600290046000825580601f10611a965750611ab4565b601f016020900490600052602060002090810190611ab49190611a56565b50565b5080546000825590600052602060002090810190611ab491906119a05600a165627a7a72305820b4713782d48e41d6446898379ec9dc040463294282dd658a1f86e50244df31b300296060604052341561000f57600080fd5b6040516020806102318339810160405280805160008054600160a060020a03338116600160a060020a0319928316179092556001805492909316911617905550506101d28061005f6000396000f3006060604052600436106100565763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416638da5cb5b811461005b578063a9059cbb1461008a578063fc0c546a146100c0575b600080fd5b341561006657600080fd5b61006e6100d3565b604051600160a060020a03909116815260200160405180910390f35b341561009557600080fd5b6100ac600160a060020a03600435166024356100e2565b604051901515815260200160405180910390f35b34156100cb57600080fd5b61006e610197565b600054600160a060020a031681565b6000805433600160a060020a039081169116146100fe57600080fd5b600154600160a060020a031663a9059cbb84846000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561017657600080fd5b6102c65a03f1151561018757600080fd5b5050506040518051949350505050565b600154600160a060020a0316815600a165627a7a72305820034deef1551c458c17f29dd97009e6cb31537e228033774d62944011d6ea30b00029000000000000000000000000056017c55ae7ae32d12aef7c679df83a85ca75ff",
  "constructorArguments": "000000000000000000000000056017c55ae7ae32d12aef7c679df83a85ca75ff"
}