{
  "address": "0xfbeef911dc5821886e1dda71586d90ed28174b7d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "KnownOrigin Token",
  "contractName": "KnownOriginDigitalAssetV2",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-04\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/access/rbac/Roles.sol\n\n/**\n * @title Roles\n * @author Francisco Giordano (@frangio)\n * @dev Library for managing addresses assigned to a Role.\n * See RBAC.sol for example usage.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = true;\n  }\n\n  /**\n   * @dev remove an address' access to this role\n   */\n  function remove(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage _role, address _addr)\n    internal\n    view\n  {\n    require(has(_role, _addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage _role, address _addr)\n    internal\n    view\n    returns (bool)\n  {\n    return _role.bearer[_addr];\n  }\n}\n\n// File: contracts/v2/AccessControl.sol\n\n/**\n * @title Based on OpenZeppelin Whitelist & RBCA contracts\n * @dev The AccessControl contract provides different access for addresses, and provides basic authorization control functions.\n */\ncontract AccessControl {\n\n  using Roles for Roles.Role;\n\n  uint8 public constant ROLE_KNOWN_ORIGIN = 1;\n  uint8 public constant ROLE_MINTER = 2;\n  uint8 public constant ROLE_UNDER_MINTER = 3;\n\n  event RoleAdded(address indexed operator, uint8 role);\n  event RoleRemoved(address indexed operator, uint8 role);\n\n  address public owner;\n\n  mapping(uint8 => Roles.Role) private roles;\n\n  modifier onlyIfKnownOrigin() {\n    require(msg.sender == owner || hasRole(msg.sender, ROLE_KNOWN_ORIGIN));\n    _;\n  }\n\n  modifier onlyIfMinter() {\n    require(msg.sender == owner || hasRole(msg.sender, ROLE_KNOWN_ORIGIN) || hasRole(msg.sender, ROLE_MINTER));\n    _;\n  }\n\n  modifier onlyIfUnderMinter() {\n    require(msg.sender == owner || hasRole(msg.sender, ROLE_KNOWN_ORIGIN) || hasRole(msg.sender, ROLE_UNDER_MINTER));\n    _;\n  }\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  ////////////////////////////////////\n  // Whitelist/RBCA Derived Methods //\n  ////////////////////////////////////\n\n  function addAddressToAccessControl(address _operator, uint8 _role)\n  public\n  onlyIfKnownOrigin\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_operator, _role);\n  }\n\n  function removeAddressFromAccessControl(address _operator, uint8 _role)\n  public\n  onlyIfKnownOrigin\n  {\n    roles[_role].remove(_operator);\n    emit RoleRemoved(_operator, _role);\n  }\n\n  function checkRole(address _operator, uint8 _role)\n  public\n  view\n  {\n    roles[_role].check(_operator);\n  }\n\n  function hasRole(address _operator, uint8 _role)\n  public\n  view\n  returns (bool)\n  {\n    return roles[_role].has(_operator);\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/HasNoEther.sol\n\n/**\n * @title Contracts that should not own Ether\n * @author Remco Bloemen <[email protected]π.com>\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n * in the contract, it will allow the owner to reclaim this Ether.\n * @notice Ether can still be sent to this contract by:\n * calling functions labeled `payable`\n * `selfdestruct(contract_address)`\n * mining directly to the contract address\n */\ncontract HasNoEther is Ownable {\n\n  /**\n  * @dev Constructor that rejects incoming Ether\n  * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n  * we could use assembly to access msg.value.\n  */\n  constructor() public payable {\n    require(msg.value == 0);\n  }\n\n  /**\n   * @dev Disallows direct send by setting a default function without the `payable` flag.\n   */\n  function() external {\n  }\n\n  /**\n   * @dev Transfer all Ether held by the contract to the owner.\n   */\n  function reclaimEther() external onlyOwner {\n    owner.transfer(address(this).balance);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface ERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic is ERC165 {\n\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\n  /*\n   * 0x4f558e79 ===\n   *   bytes4(keccak256('exists(uint256)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId)\n    public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator)\n    public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n    public;\n\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public;\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC721Basic {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256 _tokenId);\n\n  function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n  function name() external view returns (string _name);\n  function symbol() external view returns (string _symbol);\n  function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safetransfer`. This function MAY throw to revert and reject the\n   * transfer. Return of other than the magic value MUST result in the\n   * transaction being reverted.\n   * Note: the contract address is always the message sender.\n   * @param _operator The address which called `safeTransferFrom` function\n   * @param _from The address which previously owned the token\n   * @param _tokenId The NFT identifier which is being transferred\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _operator,\n    address _from,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    returns(bytes4);\n}\n\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param _addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address _addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(_addr) }\n    return size > 0;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\n\n/**\n * @title SupportsInterfaceWithLookup\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract SupportsInterfaceWithLookup is ERC165 {\n\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) internal supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    public\n  {\n    _registerInterface(InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return supportedInterfaces[_interfaceId];\n  }\n\n  /**\n   * @dev private method for registering an interface\n   */\n  function _registerInterface(bytes4 _interfaceId)\n    internal\n  {\n    require(_interfaceId != 0xffffffff);\n    supportedInterfaces[_interfaceId] = true;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721BasicToken.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) internal tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) internal ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  constructor()\n    public\n  {\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721);\n    _registerInterface(InterfaceId_ERC721Exists);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(_owner != address(0));\n    return ownedTokensCount[_owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param _tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function exists(uint256 _tokenId) public view returns (bool) {\n    address owner = tokenOwner[_tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId) public {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    tokenApprovals[_tokenId] = _to;\n    emit Approval(owner, _to, _tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param _to operator address to set the approval\n   * @param _approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address _to, bool _approved) public {\n    require(_to != msg.sender);\n    operatorApprovals[msg.sender][_to] = _approved;\n    emit ApprovalForAll(msg.sender, _to, _approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return operatorApprovals[_owner][_operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n  {\n    require(isApprovedOrOwner(msg.sender, _tokenId));\n    require(_from != address(0));\n    require(_to != address(0));\n\n    clearApproval(_from, _tokenId);\n    removeTokenFrom(_from, _tokenId);\n    addTokenTo(_to, _tokenId);\n\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n  {\n    transferFrom(_from, _to, _tokenId);\n    // solium-disable-next-line arg-overflow\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function isApprovedOrOwner(\n    address _spender,\n    uint256 _tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(_tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      _spender == owner ||\n      getApproved(_tokenId) == _spender ||\n      isApprovedForAll(owner, _spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to The address that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addTokenTo(_to, _tokenId);\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    clearApproval(_owner, _tokenId);\n    removeTokenFrom(_owner, _tokenId);\n    emit Transfer(_owner, address(0), _tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param _owner owner of the token\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function clearApproval(address _owner, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _owner);\n    if (tokenApprovals[_tokenId] != address(0)) {\n      tokenApprovals[_tokenId] = address(0);\n    }\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _from);\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n    tokenOwner[_tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param _from address representing the previous owner of the given token ID\n   * @param _to target address that will receive the tokens\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallSafeTransfer(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_to.isContract()) {\n      return true;\n    }\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\n      msg.sender, _from, _tokenId, _data);\n    return (retval == ERC721_RECEIVED);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Token.sol\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\n\n  // Token name\n  string internal name_;\n\n  // Token symbol\n  string internal symbol_;\n\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) internal ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) internal ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] internal allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) internal allTokensIndex;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) internal tokenURIs;\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string _name, string _symbol) public {\n    name_ = _name;\n    symbol_ = _symbol;\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721Enumerable);\n    _registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string) {\n    return name_;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string) {\n    return symbol_;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string) {\n    require(exists(_tokenId));\n    return tokenURIs[_tokenId];\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param _owner address owning the tokens list to be accessed\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(_index < balanceOf(_owner));\n    return ownedTokens[_owner][_index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param _index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\n    require(_index < totalSupply());\n    return allTokens[_index];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param _tokenId uint256 ID of the token to set its URI\n   * @param _uri string URI to assign\n   */\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n    require(exists(_tokenId));\n    tokenURIs[_tokenId] = _uri;\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    super.addTokenTo(_to, _tokenId);\n    uint256 length = ownedTokens[_to].length;\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    super.removeTokenFrom(_from, _tokenId);\n\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n    // then delete the last slot.\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n    // This also deletes the contents at the last position of the array\n    ownedTokens[_from].length--;\n\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    super._mint(_to, _tokenId);\n\n    allTokensIndex[_tokenId] = allTokens.length;\n    allTokens.push(_tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _owner owner of the token to burn\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    super._burn(_owner, _tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\n      delete tokenURIs[_tokenId];\n    }\n\n    // Reorg all tokens array\n    uint256 tokenIndex = allTokensIndex[_tokenId];\n    uint256 lastTokenIndex = allTokens.length.sub(1);\n    uint256 lastToken = allTokens[lastTokenIndex];\n\n    allTokens[tokenIndex] = lastToken;\n    allTokens[lastTokenIndex] = 0;\n\n    allTokens.length--;\n    allTokensIndex[_tokenId] = 0;\n    allTokensIndex[lastToken] = tokenIndex;\n  }\n\n}\n\n// File: contracts/v2/Strings.sol\n\nlibrary Strings {\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n  function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n    bytes memory _ba = bytes(_a);\n    bytes memory _bb = bytes(_b);\n    bytes memory _bc = bytes(_c);\n    bytes memory _bd = bytes(_d);\n    bytes memory _be = bytes(_e);\n    string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n    bytes memory babcde = bytes(abcde);\n    uint k = 0;\n    for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n    for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n    for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n    for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n    for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n    return string(babcde);\n  }\n\n  function strConcat(string _a, string _b) internal pure returns (string) {\n    return strConcat(_a, _b, \"\", \"\", \"\");\n  }\n}\n\n// File: contracts/v2/KnownOriginDigitalAssetV2.sol\n\n// allows for multi-address access controls to different functions\n\n\n// Prevents stuck ether\n\n\n// For safe maths operations\n\n\n// Pause purchasing only in case of emergency/migration\n\n\n// ERC721\n\n\n// Utils only\n\n\n/**\n* @title KnownOriginDigitalAsset - V2\n*\n* http://www.knownorigin.io/\n*\n* ERC721 compliant digital assets for real-world artwork.\n*\n* Base NFT Issuance Contract\n*\n* BE ORIGINAL. BUY ORIGINAL.\n*\n*/\ncontract KnownOriginDigitalAssetV2 is\nERC721Token,\nAccessControl,\nHasNoEther,\nPausable\n{\n  using SafeMath for uint256;\n\n  ////////////\n  // Events //\n  ////////////\n\n  // Emitted on purchases from within this contract\n  event Purchase(\n    uint256 indexed _tokenId,\n    uint256 indexed _editionNumber,\n    address indexed _buyer,\n    uint256 _priceInWei\n  );\n\n  // Emitted on every mint\n  event Minted(\n    uint256 indexed _tokenId,\n    uint256 indexed _editionNumber,\n    address indexed _buyer\n  );\n\n  // Emitted on every edition created\n  event EditionCreated(\n    uint256 indexed _editionNumber,\n    bytes32 indexed _editionData,\n    uint256 indexed _editionType\n  );\n\n  ////////////////\n  // Properties //\n  ////////////////\n\n  uint256 constant internal MAX_UINT32 = ~uint32(0);\n\n  string public tokenBaseURI = \"https://ipfs.infura.io/ipfs/\";\n\n  // simple counter to keep track of the highest edition number used\n  uint256 public highestEditionNumber;\n\n  // total wei been processed through the contract\n  uint256 public totalPurchaseValueInWei;\n\n  // number of assets minted of any type\n  uint256 public totalNumberMinted;\n\n  // number of assets available of any type\n  uint256 public totalNumberAvailable;\n\n  // the KO account which can receive commission\n  address public koCommissionAccount;\n\n  // Optional commission split can be defined per edition\n  mapping(uint256 => CommissionSplit) editionNumberToOptionalCommissionSplit;\n\n  // Simple structure providing an optional commission split per edition purchase\n  struct CommissionSplit {\n    uint256 rate;\n    address recipient;\n  }\n\n  // Object for edition details\n  struct EditionDetails {\n    // Identifiers\n    uint256 editionNumber;    // the range e.g. 10000\n    bytes32 editionData;      // some data about the edition\n    uint256 editionType;      // e.g. 1 = KODA V1, 2 = KOTA, 3 = Bespoke partnership\n    // Config\n    uint256 startDate;        // date when the edition goes on sale\n    uint256 endDate;          // date when the edition is available until\n    address artistAccount;    // artists account\n    uint256 artistCommission; // base artists commission, could be overridden by external contracts\n    uint256 priceInWei;       // base price for edition, could be overridden by external contracts\n    string tokenURI;          // IPFS hash - see base URI\n    bool active;              // Root control - on/off for the edition\n    // Counters\n    uint256 totalSupply;      // Total purchases or mints\n    uint256 totalAvailable;   // Total number available to be purchased\n  }\n\n  // _editionNumber : EditionDetails\n  mapping(uint256 => EditionDetails) internal editionNumberToEditionDetails;\n\n  // _tokenId : _editionNumber\n  mapping(uint256 => uint256) internal tokenIdToEditionNumber;\n\n  // _editionNumber : [_tokenId, _tokenId]\n  mapping(uint256 => uint256[]) internal editionNumberToTokenIds;\n  mapping(uint256 => uint256) internal editionNumberToTokenIdIndex;\n\n  // _artistAccount : [_editionNumber, _editionNumber]\n  mapping(address => uint256[]) internal artistToEditionNumbers;\n  mapping(uint256 => uint256) internal editionNumberToArtistIndex;\n\n  // _editionType : [_editionNumber, _editionNumber]\n  mapping(uint256 => uint256[]) internal editionTypeToEditionNumber;\n  mapping(uint256 => uint256) internal editionNumberToTypeIndex;\n\n  ///////////////\n  // Modifiers //\n  ///////////////\n\n  modifier onlyAvailableEdition(uint256 _editionNumber) {\n    require(editionNumberToEditionDetails[_editionNumber].totalSupply < editionNumberToEditionDetails[_editionNumber].totalAvailable, \"No more editions left to purchase\");\n    _;\n  }\n\n  modifier onlyActiveEdition(uint256 _editionNumber) {\n    require(editionNumberToEditionDetails[_editionNumber].active, \"Edition not active\");\n    _;\n  }\n\n  modifier onlyRealEdition(uint256 _editionNumber) {\n    require(editionNumberToEditionDetails[_editionNumber].editionNumber > 0, \"Edition number invalid\");\n    _;\n  }\n\n  modifier onlyValidTokenId(uint256 _tokenId) {\n    require(exists(_tokenId), \"Token ID does not exist\");\n    _;\n  }\n\n  modifier onlyPurchaseDuringWindow(uint256 _editionNumber) {\n    require(editionNumberToEditionDetails[_editionNumber].startDate <= block.timestamp, \"Edition not available yet\");\n    require(editionNumberToEditionDetails[_editionNumber].endDate >= block.timestamp, \"Edition no longer available\");\n    _;\n  }\n\n  /*\n   * Constructor\n   */\n  constructor () public payable ERC721Token(\"KnownOriginDigitalAsset\", \"KODA\") {\n    // set commission account to contract creator\n    koCommissionAccount = msg.sender;\n  }\n\n  /**\n   * @dev Creates an active edition from the given configuration\n   * @dev Only callable from KO staff/addresses\n   */\n  function createActiveEdition(\n    uint256 _editionNumber,\n    bytes32 _editionData,\n    uint256 _editionType,\n    uint256 _startDate,\n    uint256 _endDate,\n    address _artistAccount,\n    uint256 _artistCommission,\n    uint256 _priceInWei,\n    string _tokenURI,\n    uint256 _totalAvailable\n  )\n  public\n  onlyIfKnownOrigin\n  returns (bool)\n  {\n    return _createEdition(_editionNumber, _editionData, _editionType, _startDate, _endDate, _artistAccount, _artistCommission, _priceInWei, _tokenURI, _totalAvailable, true);\n  }\n\n  /**\n   * @dev Creates an inactive edition from the given configuration\n   * @dev Only callable from KO staff/addresses\n   */\n  function createInactiveEdition(\n    uint256 _editionNumber,\n    bytes32 _editionData,\n    uint256 _editionType,\n    uint256 _startDate,\n    uint256 _endDate,\n    address _artistAccount,\n    uint256 _artistCommission,\n    uint256 _priceInWei,\n    string _tokenURI,\n    uint256 _totalAvailable\n  )\n  public\n  onlyIfKnownOrigin\n  returns (bool)\n  {\n    return _createEdition(_editionNumber, _editionData, _editionType, _startDate, _endDate, _artistAccount, _artistCommission, _priceInWei, _tokenURI, _totalAvailable, false);\n  }\n\n  /**\n   * @dev Creates an active edition from the given configuration\n   * @dev The concept of pre0minted editions means we can 'undermint' token IDS, good for holding back editions from public sale\n   * @dev Only callable from KO staff/addresses\n   */\n  function createActivePreMintedEdition(\n    uint256 _editionNumber,\n    bytes32 _editionData,\n    uint256 _editionType,\n    uint256 _startDate,\n    uint256 _endDate,\n    address _artistAccount,\n    uint256 _artistCommission,\n    uint256 _priceInWei,\n    string _tokenURI,\n    uint256 _totalSupply,\n    uint256 _totalAvailable\n  )\n  public\n  onlyIfKnownOrigin\n  returns (bool)\n  {\n    _createEdition(_editionNumber, _editionData, _editionType, _startDate, _endDate, _artistAccount, _artistCommission, _priceInWei, _tokenURI, _totalAvailable, true);\n    updateTotalSupply(_editionNumber, _totalSupply);\n    return true;\n  }\n\n  /**\n   * @dev Creates an inactive edition from the given configuration\n   * @dev The concept of pre0minted editions means we can 'undermint' token IDS, good for holding back editions from public sale\n   * @dev Only callable from KO staff/addresses\n   */\n  function createInactivePreMintedEdition(\n    uint256 _editionNumber,\n    bytes32 _editionData,\n    uint256 _editionType,\n    uint256 _startDate,\n    uint256 _endDate,\n    address _artistAccount,\n    uint256 _artistCommission,\n    uint256 _priceInWei,\n    string _tokenURI,\n    uint256 _totalSupply,\n    uint256 _totalAvailable\n  )\n  public\n  onlyIfKnownOrigin\n  returns (bool)\n  {\n    _createEdition(_editionNumber, _editionData, _editionType, _startDate, _endDate, _artistAccount, _artistCommission, _priceInWei, _tokenURI, _totalAvailable, false);\n    updateTotalSupply(_editionNumber, _totalSupply);\n    return true;\n  }\n\n  /**\n   * @dev Internal factory method for building editions\n   */\n  function _createEdition(\n    uint256 _editionNumber,\n    bytes32 _editionData,\n    uint256 _editionType,\n    uint256 _startDate,\n    uint256 _endDate,\n    address _artistAccount,\n    uint256 _artistCommission,\n    uint256 _priceInWei,\n    string _tokenURI,\n    uint256 _totalAvailable,\n    bool _active\n  )\n  internal\n  returns (bool)\n  {\n    // Prevent missing edition number\n    require(_editionNumber != 0, \"Edition number not provided\");\n\n    // Prevent edition number lower than last one used\n    require(_editionNumber > highestEditionNumber, \"Edition number must be greater than previously used\");\n\n    // Check previously edition plus total available is less than new edition number\n    require(highestEditionNumber.add(editionNumberToEditionDetails[highestEditionNumber].totalAvailable) < _editionNumber, \"Edition number must be greater than previously used plus total available\");\n\n    // Prevent missing types\n    require(_editionType != 0, \"Edition type not provided\");\n\n    // Prevent missing token URI\n    require(bytes(_tokenURI).length != 0, \"Token URI is missing\");\n\n    // Prevent empty artists address\n    require(_artistAccount != address(0), \"Artist account not provided\");\n\n    // Prevent invalid commissions\n    require(_artistCommission <= 100 && _artistCommission >= 0, \"Artist commission cannot be greater than 100 or less than 0\");\n\n    // Prevent duplicate editions\n    require(editionNumberToEditionDetails[_editionNumber].editionNumber == 0, \"Edition already in existence\");\n\n    // Default end date to max uint256\n    uint256 endDate = _endDate;\n    if (_endDate == 0) {\n      endDate = MAX_UINT32;\n    }\n\n    editionNumberToEditionDetails[_editionNumber] = EditionDetails({\n      editionNumber : _editionNumber,\n      editionData : _editionData,\n      editionType : _editionType,\n      startDate : _startDate,\n      endDate : endDate,\n      artistAccount : _artistAccount,\n      artistCommission : _artistCommission,\n      priceInWei : _priceInWei,\n      tokenURI : _tokenURI,\n      totalSupply : 0, // default to all available\n      totalAvailable : _totalAvailable,\n      active : _active\n      });\n\n    // Add to total available count\n    totalNumberAvailable = totalNumberAvailable.add(_totalAvailable);\n\n    // Update mappings\n    _updateArtistLookupData(_artistAccount, _editionNumber);\n    _updateEditionTypeLookupData(_editionType, _editionNumber);\n\n    emit EditionCreated(_editionNumber, _editionData, _editionType);\n\n    // Update the edition pointer if needs be\n    highestEditionNumber = _editionNumber;\n\n    return true;\n  }\n\n  function _updateEditionTypeLookupData(uint256 _editionType, uint256 _editionNumber) internal {\n    uint256 typeEditionIndex = editionTypeToEditionNumber[_editionType].length;\n    editionTypeToEditionNumber[_editionType].push(_editionNumber);\n    editionNumberToTypeIndex[_editionNumber] = typeEditionIndex;\n  }\n\n  function _updateArtistLookupData(address _artistAccount, uint256 _editionNumber) internal {\n    uint256 artistEditionIndex = artistToEditionNumbers[_artistAccount].length;\n    artistToEditionNumbers[_artistAccount].push(_editionNumber);\n    editionNumberToArtistIndex[_editionNumber] = artistEditionIndex;\n  }\n\n  /**\n   * @dev Public entry point for purchasing an edition\n   * @dev Reverts if edition is invalid\n   * @dev Reverts if payment not provided in full\n   * @dev Reverts if edition is sold out\n   * @dev Reverts if edition is not active or available\n   */\n  function purchase(uint256 _editionNumber)\n  public\n  payable\n  returns (uint256) {\n    return purchaseTo(msg.sender, _editionNumber);\n  }\n\n  /**\n   * @dev Public entry point for purchasing an edition on behalf of someone else\n   * @dev Reverts if edition is invalid\n   * @dev Reverts if payment not provided in full\n   * @dev Reverts if edition is sold out\n   * @dev Reverts if edition is not active or available\n   */\n  function purchaseTo(address _to, uint256 _editionNumber)\n  public\n  payable\n  whenNotPaused\n  onlyRealEdition(_editionNumber)\n  onlyActiveEdition(_editionNumber)\n  onlyAvailableEdition(_editionNumber)\n  onlyPurchaseDuringWindow(_editionNumber)\n  returns (uint256) {\n\n    EditionDetails storage _editionDetails = editionNumberToEditionDetails[_editionNumber];\n    require(msg.value >= _editionDetails.priceInWei, \"Value must be greater than price of edition\");\n\n    // Construct next token ID e.g. 100000 + 1 = ID of 100001 (this first in the edition set)\n    uint256 _tokenId = _nextTokenId(_editionNumber);\n\n    // Create the token\n    _mintToken(_to, _tokenId, _editionNumber, _editionDetails.tokenURI);\n\n    // Splice funds and handle commissions\n    _handleFunds(_editionNumber, _editionDetails.priceInWei, _editionDetails.artistAccount, _editionDetails.artistCommission);\n\n    // Broadcast purchase\n    emit Purchase(_tokenId, _editionNumber, _to, msg.value);\n\n    return _tokenId;\n  }\n\n  /**\n   * @dev Private (KO only) method for minting editions\n   * @dev Payment not needed for this method\n   */\n  function mint(address _to, uint256 _editionNumber)\n  public\n  onlyIfMinter\n  onlyRealEdition(_editionNumber)\n  onlyAvailableEdition(_editionNumber)\n  returns (uint256) {\n    // Construct next token ID e.g. 100000 + 1 = ID of 100001 (this first in the edition set)\n    uint256 _tokenId = _nextTokenId(_editionNumber);\n\n    // Create the token\n    _mintToken(_to, _tokenId, _editionNumber, editionNumberToEditionDetails[_editionNumber].tokenURI);\n\n    // Create the token\n    return _tokenId;\n  }\n\n  /**\n   * @dev Private (KO only) method for under minting editions\n   * @dev Under minting allows for token IDs to be back filled if total supply is not set to zero by default\n   * @dev Payment not needed for this method\n   */\n  function underMint(address _to, uint256 _editionNumber)\n  public\n  onlyIfUnderMinter\n  onlyRealEdition(_editionNumber)\n  returns (uint256) {\n    // Under mint token, meaning it takes one from the already sold version\n    uint256 _tokenId = _underMintNextTokenId(_editionNumber);\n\n    // If the next tokenId generate is more than the available number, abort as we have reached maximum under mint\n    if (_tokenId > _editionNumber.add(editionNumberToEditionDetails[_editionNumber].totalAvailable)) {\n      revert(\"Reached max tokenId, cannot under mint anymore\");\n    }\n\n    // Create the token\n    _mintToken(_to, _tokenId, _editionNumber, editionNumberToEditionDetails[_editionNumber].tokenURI);\n\n    // Create the token\n    return _tokenId;\n  }\n\n  function _nextTokenId(uint256 _editionNumber) internal returns (uint256) {\n    EditionDetails storage _editionDetails = editionNumberToEditionDetails[_editionNumber];\n\n    // Bump number totalSupply\n    _editionDetails.totalSupply = _editionDetails.totalSupply.add(1);\n\n    // Construct next token ID e.g. 100000 + 1 = ID of 100001 (this first in the edition set)\n    return _editionDetails.editionNumber.add(_editionDetails.totalSupply);\n  }\n\n  function _underMintNextTokenId(uint256 _editionNumber) internal returns (uint256) {\n    EditionDetails storage _editionDetails = editionNumberToEditionDetails[_editionNumber];\n\n    // For old editions start the counter as edition + 1\n    uint256 _tokenId = _editionDetails.editionNumber.add(1);\n\n    // Work your way up until you find a free token based on the new _tokenIdd\n    while (exists(_tokenId)) {\n      _tokenId = _tokenId.add(1);\n    }\n\n    // Bump number totalSupply if we are now over minting new tokens\n    if (_tokenId > _editionDetails.editionNumber.add(_editionDetails.totalSupply)) {\n      _editionDetails.totalSupply = _editionDetails.totalSupply.add(1);\n    }\n\n    return _tokenId;\n  }\n\n  function _mintToken(address _to, uint256 _tokenId, uint256 _editionNumber, string _tokenURI) internal {\n\n    // Mint new base token\n    super._mint(_to, _tokenId);\n    super._setTokenURI(_tokenId, _tokenURI);\n\n    // Maintain mapping for tokenId to edition for lookup\n    tokenIdToEditionNumber[_tokenId] = _editionNumber;\n\n    // Get next insert position for edition to token Id mapping\n    uint256 currentIndexOfTokenId = editionNumberToTokenIds[_editionNumber].length;\n\n    // Maintain mapping of edition to token array for \"edition minted tokens\"\n    editionNumberToTokenIds[_editionNumber].push(_tokenId);\n\n    // Maintain a position index for the tokenId within the edition number mapping array, used for clean up token burn\n    editionNumberToTokenIdIndex[_tokenId] = currentIndexOfTokenId;\n\n    // Record sale volume\n    totalNumberMinted = totalNumberMinted.add(1);\n\n    // Emit minted event\n    emit Minted(_tokenId, _editionNumber, _to);\n  }\n\n  function _handleFunds(uint256 _editionNumber, uint256 _priceInWei, address _artistAccount, uint256 _artistCommission) internal {\n\n    // Extract the artists commission and send it\n    uint256 artistPayment = _priceInWei.div(100).mul(_artistCommission);\n    if (artistPayment > 0) {\n      _artistAccount.transfer(artistPayment);\n    }\n\n    // Load any commission overrides\n    CommissionSplit storage commission = editionNumberToOptionalCommissionSplit[_editionNumber];\n\n    // Apply optional commission structure\n    if (commission.rate > 0) {\n      uint256 rateSplit = _priceInWei.div(100).mul(commission.rate);\n      commission.recipient.transfer(rateSplit);\n    }\n\n    // Send remaining eth to KO\n    uint256 remainingCommission = msg.value.sub(artistPayment).sub(rateSplit);\n    koCommissionAccount.transfer(remainingCommission);\n\n    // Record wei sale value\n    totalPurchaseValueInWei = totalPurchaseValueInWei.add(msg.value);\n  }\n\n  /**\n   * @dev Private (KO only) method for burning tokens which have been created incorrectly\n   */\n  function burn(uint256 _tokenId) public onlyIfKnownOrigin {\n\n    // Clear from parents\n    super._burn(ownerOf(_tokenId), _tokenId);\n\n    // Get hold of the edition for cleanup\n    uint256 _editionNumber = tokenIdToEditionNumber[_tokenId];\n\n    // Delete token ID mapping\n    delete tokenIdToEditionNumber[_tokenId];\n\n    // Delete tokens associated to the edition - this will leave a gap in the array of zero\n    uint256[] storage tokenIdsForEdition = editionNumberToTokenIds[_editionNumber];\n    uint256 editionTokenIdIndex = editionNumberToTokenIdIndex[_tokenId];\n    delete tokenIdsForEdition[editionTokenIdIndex];\n  }\n\n  /**\n   * @dev An extension to the default ERC721 behaviour, derived from ERC-875.\n   * @dev Allowing for batch transfers from the sender, will fail if from does not own all the tokens\n   */\n  function batchTransfer(address _to, uint256[] _tokenIds) public {\n    for (uint i = 0; i < _tokenIds.length; i++) {\n      safeTransferFrom(ownerOf(_tokenIds[i]), _to, _tokenIds[i]);\n    }\n  }\n\n  /**\n   * @dev An extension to the default ERC721 behaviour, derived from ERC-875.\n   * @dev Allowing for batch transfers from the provided address, will fail if from does not own all the tokens\n   */\n  function batchTransferFrom(address _from, address _to, uint256[] _tokenIds) public {\n    for (uint i = 0; i < _tokenIds.length; i++) {\n      transferFrom(_from, _to, _tokenIds[i]);\n    }\n  }\n\n  //////////////////\n  // Base Updates //\n  //////////////////\n\n  function updateTokenBaseURI(string _newBaseURI)\n  external\n  onlyIfKnownOrigin {\n    require(bytes(_newBaseURI).length != 0, \"Base URI invalid\");\n    tokenBaseURI = _newBaseURI;\n  }\n\n  function updateKoCommissionAccount(address _koCommissionAccount)\n  external\n  onlyIfKnownOrigin {\n    require(_koCommissionAccount != address(0), \"Invalid address\");\n    koCommissionAccount = _koCommissionAccount;\n  }\n\n  /////////////////////\n  // Edition Updates //\n  /////////////////////\n\n  function updateEditionTokenURI(uint256 _editionNumber, string _uri)\n  external\n  onlyIfKnownOrigin\n  onlyRealEdition(_editionNumber) {\n    editionNumberToEditionDetails[_editionNumber].tokenURI = _uri;\n  }\n\n  function updatePriceInWei(uint256 _editionNumber, uint256 _priceInWei)\n  external\n  onlyIfKnownOrigin\n  onlyRealEdition(_editionNumber) {\n    editionNumberToEditionDetails[_editionNumber].priceInWei = _priceInWei;\n  }\n\n  function updateArtistCommission(uint256 _editionNumber, uint256 _rate)\n  external\n  onlyIfKnownOrigin\n  onlyRealEdition(_editionNumber) {\n    editionNumberToEditionDetails[_editionNumber].artistCommission = _rate;\n  }\n\n  function updateArtistsAccount(uint256 _editionNumber, address _artistAccount)\n  external\n  onlyIfKnownOrigin\n  onlyRealEdition(_editionNumber) {\n\n    EditionDetails storage _originalEditionDetails = editionNumberToEditionDetails[_editionNumber];\n\n    uint256 editionArtistIndex = editionNumberToArtistIndex[_editionNumber];\n\n    // Get list of editions old artist works with\n    uint256[] storage editionNumbersForArtist = artistToEditionNumbers[_originalEditionDetails.artistAccount];\n\n    // Remove edition from artists lists\n    delete editionNumbersForArtist[editionArtistIndex];\n\n    // Add new artists to the list\n    uint256 newArtistsEditionIndex = artistToEditionNumbers[_artistAccount].length;\n    artistToEditionNumbers[_artistAccount].push(_editionNumber);\n    editionNumberToArtistIndex[_editionNumber] = newArtistsEditionIndex;\n\n    // Update the edition\n    _originalEditionDetails.artistAccount = _artistAccount;\n  }\n\n  function updateEditionType(uint256 _editionNumber, uint256 _editionType)\n  external\n  onlyIfKnownOrigin\n  onlyRealEdition(_editionNumber) {\n\n    EditionDetails storage _originalEditionDetails = editionNumberToEditionDetails[_editionNumber];\n\n    // Get list of editions for old type\n    uint256[] storage editionNumbersForType = editionTypeToEditionNumber[_originalEditionDetails.editionType];\n\n    // Remove edition from old type list\n    uint256 editionTypeIndex = editionNumberToTypeIndex[_editionNumber];\n    delete editionNumbersForType[editionTypeIndex];\n\n    // Add new type to the list\n    uint256 newTypeEditionIndex = editionTypeToEditionNumber[_editionType].length;\n    editionTypeToEditionNumber[_editionType].push(_editionNumber);\n    editionNumberToTypeIndex[_editionNumber] = newTypeEditionIndex;\n\n    // Update the edition\n    _originalEditionDetails.editionType = _editionType;\n  }\n\n  function updateActive(uint256 _editionNumber, bool _active)\n  external\n  onlyIfKnownOrigin\n  onlyRealEdition(_editionNumber) {\n    editionNumberToEditionDetails[_editionNumber].active = _active;\n  }\n\n  function updateTotalSupply(uint256 _editionNumber, uint256 _totalSupply)\n  public\n  onlyIfKnownOrigin\n  onlyRealEdition(_editionNumber) {\n    require(tokensOfEdition(_editionNumber).length <= _totalSupply, \"Can not lower totalSupply to below the number of tokens already in existence\");\n    editionNumberToEditionDetails[_editionNumber].totalSupply = _totalSupply;\n  }\n\n  function updateTotalAvailable(uint256 _editionNumber, uint256 _totalAvailable)\n  external\n  onlyIfKnownOrigin\n  onlyRealEdition(_editionNumber) {\n    EditionDetails storage _editionDetails = editionNumberToEditionDetails[_editionNumber];\n\n    require(_editionDetails.totalSupply <= _totalAvailable, \"Unable to reduce available amount to the below the number totalSupply\");\n\n    uint256 originalAvailability = _editionDetails.totalAvailable;\n    _editionDetails.totalAvailable = _totalAvailable;\n    totalNumberAvailable = totalNumberAvailable.sub(originalAvailability).add(_totalAvailable);\n  }\n\n  function updateStartDate(uint256 _editionNumber, uint256 _startDate)\n  external\n  onlyIfKnownOrigin\n  onlyRealEdition(_editionNumber) {\n    editionNumberToEditionDetails[_editionNumber].startDate = _startDate;\n  }\n\n  function updateEndDate(uint256 _editionNumber, uint256 _endDate)\n  external\n  onlyIfKnownOrigin\n  onlyRealEdition(_editionNumber) {\n    editionNumberToEditionDetails[_editionNumber].endDate = _endDate;\n  }\n\n  function updateOptionalCommission(uint256 _editionNumber, uint256 _rate, address _recipient)\n  external\n  onlyIfKnownOrigin\n  onlyRealEdition(_editionNumber) {\n    EditionDetails storage _editionDetails = editionNumberToEditionDetails[_editionNumber];\n    uint256 artistCommission = _editionDetails.artistCommission;\n\n    if (_rate > 0) {\n      require(_recipient != address(0), \"Setting a rate must be accompanied by a valid address\");\n    }\n    require(artistCommission.add(_rate) <= 100, \"Cant set commission greater than 100%\");\n\n    editionNumberToOptionalCommissionSplit[_editionNumber] = CommissionSplit({rate : _rate, recipient : _recipient});\n  }\n\n  ///////////////////\n  // Token Updates //\n  ///////////////////\n\n  function setTokenURI(uint256 _tokenId, string _uri)\n  external\n  onlyIfKnownOrigin\n  onlyValidTokenId(_tokenId) {\n    _setTokenURI(_tokenId, _uri);\n  }\n\n  ///////////////////\n  // Query Methods //\n  ///////////////////\n\n  /**\n   * @dev Lookup the edition of the provided token ID\n   * @dev Returns 0 if not valid\n   */\n  function editionOfTokenId(uint256 _tokenId) public view returns (uint256 _editionNumber) {\n    return tokenIdToEditionNumber[_tokenId];\n  }\n\n  /**\n   * @dev Lookup all editions added for the given edition type\n   * @dev Returns array of edition numbers, any zero edition ids can be ignore/stripped\n   */\n  function editionsOfType(uint256 _type) public view returns (uint256[] _editionNumbers) {\n    return editionTypeToEditionNumber[_type];\n  }\n\n  /**\n   * @dev Lookup all editions for the given artist account\n   * @dev Returns empty list if not valid\n   */\n  function artistsEditions(address _artistsAccount) public view returns (uint256[] _editionNumbers) {\n    return artistToEditionNumbers[_artistsAccount];\n  }\n\n  /**\n   * @dev Lookup all tokens minted for the given edition number\n   * @dev Returns array of token IDs, any zero edition ids can be ignore/stripped\n   */\n  function tokensOfEdition(uint256 _editionNumber) public view returns (uint256[] _tokenIds) {\n    return editionNumberToTokenIds[_editionNumber];\n  }\n\n  /**\n   * @dev Lookup all owned tokens for the provided address\n   * @dev Returns array of token IDs\n   */\n  function tokensOf(address _owner) public view returns (uint256[] _tokenIds) {\n    return ownedTokens[_owner];\n  }\n\n  /**\n   * @dev Checks to see if the edition exists, assumes edition of zero is invalid\n   */\n  function editionExists(uint256 _editionNumber) public view returns (bool) {\n    if (_editionNumber == 0) {\n      return false;\n    }\n    EditionDetails storage editionNumber = editionNumberToEditionDetails[_editionNumber];\n    return editionNumber.editionNumber == _editionNumber;\n  }\n\n  /**\n   * @dev Lookup any optional commission split set for the edition\n   * @dev Both values will be zero if not present\n   */\n  function editionOptionalCommission(uint256 _editionNumber) public view returns (uint256 _rate, address _recipient) {\n    CommissionSplit storage commission = editionNumberToOptionalCommissionSplit[_editionNumber];\n    return (commission.rate, commission.recipient);\n  }\n\n  /**\n   * @dev Main entry point for looking up edition config/metadata\n   * @dev Reverts if invalid edition number provided\n   */\n  function detailsOfEdition(uint256 editionNumber)\n  public view\n  onlyRealEdition(editionNumber)\n  returns (\n    bytes32 _editionData,\n    uint256 _editionType,\n    uint256 _startDate,\n    uint256 _endDate,\n    address _artistAccount,\n    uint256 _artistCommission,\n    uint256 _priceInWei,\n    string _tokenURI,\n    uint256 _totalSupply,\n    uint256 _totalAvailable,\n    bool _active\n  ) {\n    EditionDetails storage _editionDetails = editionNumberToEditionDetails[editionNumber];\n    return (\n    _editionDetails.editionData,\n    _editionDetails.editionType,\n    _editionDetails.startDate,\n    _editionDetails.endDate,\n    _editionDetails.artistAccount,\n    _editionDetails.artistCommission,\n    _editionDetails.priceInWei,\n    Strings.strConcat(tokenBaseURI, _editionDetails.tokenURI),\n    _editionDetails.totalSupply,\n    _editionDetails.totalAvailable,\n    _editionDetails.active\n    );\n  }\n\n  /**\n   * @dev Lookup a tokens common identifying characteristics\n   * @dev Reverts if invalid token ID provided\n   */\n  function tokenData(uint256 _tokenId)\n  public view\n  onlyValidTokenId(_tokenId)\n  returns (\n    uint256 _editionNumber,\n    uint256 _editionType,\n    bytes32 _editionData,\n    string _tokenURI,\n    address _owner\n  ) {\n    uint256 editionNumber = tokenIdToEditionNumber[_tokenId];\n    EditionDetails storage editionDetails = editionNumberToEditionDetails[editionNumber];\n    return (\n    editionNumber,\n    editionDetails.editionType,\n    editionDetails.editionData,\n    tokenURI(_tokenId),\n    ownerOf(_tokenId)\n    );\n  }\n\n  function tokenURI(uint256 _tokenId) public view onlyValidTokenId(_tokenId) returns (string) {\n    return Strings.strConcat(tokenBaseURI, tokenURIs[_tokenId]);\n  }\n\n  function tokenURISafe(uint256 _tokenId) public view returns (string) {\n    return Strings.strConcat(tokenBaseURI, tokenURIs[_tokenId]);\n  }\n\n  function purchaseDatesToken(uint256 _tokenId) public view returns (uint256 _startDate, uint256 _endDate) {\n    uint256 _editionNumber = tokenIdToEditionNumber[_tokenId];\n    return purchaseDatesEdition(_editionNumber);\n  }\n\n  function priceInWeiToken(uint256 _tokenId) public view returns (uint256 _priceInWei) {\n    uint256 _editionNumber = tokenIdToEditionNumber[_tokenId];\n    return priceInWeiEdition(_editionNumber);\n  }\n\n  //////////////////////////\n  // Edition config query //\n  //////////////////////////\n\n  function editionData(uint256 _editionNumber) public view returns (bytes32) {\n    EditionDetails storage _editionDetails = editionNumberToEditionDetails[_editionNumber];\n    return _editionDetails.editionData;\n  }\n\n  function editionType(uint256 _editionNumber) public view returns (uint256) {\n    EditionDetails storage _editionDetails = editionNumberToEditionDetails[_editionNumber];\n    return _editionDetails.editionType;\n  }\n\n  function purchaseDatesEdition(uint256 _editionNumber) public view returns (uint256 _startDate, uint256 _endDate) {\n    EditionDetails storage _editionDetails = editionNumberToEditionDetails[_editionNumber];\n    return (\n    _editionDetails.startDate,\n    _editionDetails.endDate\n    );\n  }\n\n  function artistCommission(uint256 _editionNumber) public view returns (address _artistAccount, uint256 _artistCommission) {\n    EditionDetails storage _editionDetails = editionNumberToEditionDetails[_editionNumber];\n    return (\n    _editionDetails.artistAccount,\n    _editionDetails.artistCommission\n    );\n  }\n\n  function priceInWeiEdition(uint256 _editionNumber) public view returns (uint256 _priceInWei) {\n    EditionDetails storage _editionDetails = editionNumberToEditionDetails[_editionNumber];\n    return _editionDetails.priceInWei;\n  }\n\n  function tokenURIEdition(uint256 _editionNumber) public view returns (string) {\n    EditionDetails storage _editionDetails = editionNumberToEditionDetails[_editionNumber];\n    return Strings.strConcat(tokenBaseURI, _editionDetails.tokenURI);\n  }\n\n  function editionActive(uint256 _editionNumber) public view returns (bool) {\n    EditionDetails storage _editionDetails = editionNumberToEditionDetails[_editionNumber];\n    return _editionDetails.active;\n  }\n\n  function totalRemaining(uint256 _editionNumber) public view returns (uint256) {\n    EditionDetails storage _editionDetails = editionNumberToEditionDetails[_editionNumber];\n    return _editionDetails.totalAvailable.sub(_editionDetails.totalSupply);\n  }\n\n  function totalAvailableEdition(uint256 _editionNumber) public view returns (uint256) {\n    EditionDetails storage _editionDetails = editionNumberToEditionDetails[_editionNumber];\n    return _editionDetails.totalAvailable;\n  }\n\n  function totalSupplyEdition(uint256 _editionNumber) public view returns (uint256) {\n    EditionDetails storage _editionDetails = editionNumberToEditionDetails[_editionNumber];\n    return _editionDetails.totalSupply;\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"updateActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceInWeiToken\",\"outputs\":[{\"name\":\"_priceInWei\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_koCommissionAccount\",\"type\":\"address\"}],\"name\":\"updateKoCommissionAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"editionData\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"updateTokenBaseURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"uint8\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPurchaseValueInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"name\":\"_startDate\",\"type\":\"uint256\"}],\"name\":\"updateStartDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"artistCommission\",\"outputs\":[{\"name\":\"_artistAccount\",\"type\":\"address\"},{\"name\":\"_artistCommission\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"tokenURIEdition\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalNumberAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"uint8\"}],\"name\":\"addAddressToAccessControl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"priceInWeiEdition\",\"outputs\":[{\"name\":\"_priceInWei\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBaseURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"updateArtistCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"editionType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"purchaseDatesEdition\",\"outputs\":[{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_endDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_artistsAccount\",\"type\":\"address\"}],\"name\":\"artistsEditions\",\"outputs\":[{\"name\":\"_editionNumbers\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"totalAvailableEdition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"koCommissionAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"editionNumber\",\"type\":\"uint256\"}],\"name\":\"detailsOfEdition\",\"outputs\":[{\"name\":\"_editionData\",\"type\":\"bytes32\"},{\"name\":\"_editionType\",\"type\":\"uint256\"},{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_endDate\",\"type\":\"uint256\"},{\"name\":\"_artistAccount\",\"type\":\"address\"},{\"name\":\"_artistCommission\",\"type\":\"uint256\"},{\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"name\":\"_tokenURI\",\"type\":\"string\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_totalAvailable\",\"type\":\"uint256\"},{\"name\":\"_active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"updateEditionTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"tokensOfEdition\",\"outputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"underMint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"name\":\"_priceInWei\",\"type\":\"uint256\"}],\"name\":\"updatePriceInWei\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"editionOfTokenId\",\"outputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"purchaseTo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"name\":\"_editionData\",\"type\":\"bytes32\"},{\"name\":\"_editionType\",\"type\":\"uint256\"},{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_endDate\",\"type\":\"uint256\"},{\"name\":\"_artistAccount\",\"type\":\"address\"},{\"name\":\"_artistCommission\",\"type\":\"uint256\"},{\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"name\":\"_tokenURI\",\"type\":\"string\"},{\"name\":\"_totalAvailable\",\"type\":\"uint256\"}],\"name\":\"createActiveEdition\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_MINTER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"uint8\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"uint8\"}],\"name\":\"removeAddressFromAccessControl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"updateOptionalCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_UNDER_MINTER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"name\":\"_editionData\",\"type\":\"bytes32\"},{\"name\":\"_editionType\",\"type\":\"uint256\"},{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_endDate\",\"type\":\"uint256\"},{\"name\":\"_artistAccount\",\"type\":\"address\"},{\"name\":\"_artistCommission\",\"type\":\"uint256\"},{\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"name\":\"_tokenURI\",\"type\":\"string\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_totalAvailable\",\"type\":\"uint256\"}],\"name\":\"createInactivePreMintedEdition\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestEditionNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"name\":\"_editionData\",\"type\":\"bytes32\"},{\"name\":\"_editionType\",\"type\":\"uint256\"},{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_endDate\",\"type\":\"uint256\"},{\"name\":\"_artistAccount\",\"type\":\"address\"},{\"name\":\"_artistCommission\",\"type\":\"uint256\"},{\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"name\":\"_tokenURI\",\"type\":\"string\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_totalAvailable\",\"type\":\"uint256\"}],\"name\":\"createActivePreMintedEdition\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"name\":\"_artistAccount\",\"type\":\"address\"}],\"name\":\"updateArtistsAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenData\",\"outputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"name\":\"_editionType\",\"type\":\"uint256\"},{\"name\":\"_editionData\",\"type\":\"bytes32\"},{\"name\":\"_tokenURI\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyEdition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchaseDatesToken\",\"outputs\":[{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_endDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"editionActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"totalRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"name\":\"_totalAvailable\",\"type\":\"uint256\"}],\"name\":\"updateTotalAvailable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_KNOWN_ORIGIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"editionExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"name\":\"_editionType\",\"type\":\"uint256\"}],\"name\":\"updateEditionType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"editionOptionalCommission\",\"outputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"updateEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"name\":\"_editionData\",\"type\":\"bytes32\"},{\"name\":\"_editionType\",\"type\":\"uint256\"},{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_endDate\",\"type\":\"uint256\"},{\"name\":\"_artistAccount\",\"type\":\"address\"},{\"name\":\"_artistCommission\",\"type\":\"uint256\"},{\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"name\":\"_tokenURI\",\"type\":\"string\"},{\"name\":\"_totalAvailable\",\"type\":\"uint256\"}],\"name\":\"createInactiveEdition\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"editionsOfType\",\"outputs\":[{\"name\":\"_editionNumbers\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalNumberMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"updateTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURISafe\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_priceInWei\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_editionData\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_editionType\",\"type\":\"uint256\"}],\"name\":\"EditionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]",
  "bytecode": ""
}