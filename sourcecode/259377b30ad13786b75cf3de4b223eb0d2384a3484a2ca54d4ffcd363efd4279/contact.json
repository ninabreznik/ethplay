{
  "address": "0xcfd6ae8bf13f42de14867351eaff7a8a3b9fbbe7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "SINERGIA",
  "contractName": "SINERGIA",
  "compilerVersion": "v0.4.19-nightly.2017.10.29+commit.eb140bc6",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-02\n*/\n\npragma solidity ^0.4.18;\n \n/* Technological Institute of Research and Development Sinergia Blockchain  \n   Limited/unlimited coin contract\n    Simpler version of ERC20 interface\n    see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n \n/*\n   ERC20 interface\n  see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n \n/*  SafeMath - the lowest gas library\n  Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    \n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n \n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n \n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n \n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n  \n}\n \n/*\nBasic token\n Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n    \n  using SafeMath for uint256;\n \n  mapping(address => uint256) balances;\n \n function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n \n  /*\n  Gets the balance of the specified address.\n   param _owner The address to query the the balance of. \n   return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n \n}\n \n/* Implementation of the basic standard token.\n  https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is ERC20, BasicToken {\n \n  mapping (address => mapping (address => uint256)) allowed;\n \n  /*\n    Transfer tokens from one address to another\n    param _from address The address which you want to send tokens from\n    param _to address The address which you want to transfer to\n    param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n \n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n \n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n \n  /*\n  Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   param _spender The address which will spend the funds.\n   param _value The amount of Roman Lanskoj's tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n \n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n \n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n \n  /*\n  Function to check the amount of tokens that an owner allowed to a spender.\n  param _owner address The address which owns the funds.\n  param _spender address The address which will spend the funds.\n  return A uint256 specifing the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n \n}\n \n/*\nThe Ownable contract has an owner address, and provides basic authorization control\n functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    \n  address public owner;\n \n \n  function Ownable() {\n    owner = msg.sender;\n  }\n \n  /*\n  Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n \n  /*\n  Allows the current owner to transfer control of the contract to a newOwner.\n  param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    require(newOwner != address(0));      \n    owner = newOwner;\n  }\n \n}\n \ncontract TheLiquidToken is StandardToken, Ownable {\n    // mint can be finished and token become fixed for forever\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n  bool public mintingFinished = false;\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n \n function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    return true;\n  }\n \n  /*\n  Function to stop minting new tokens.\n  return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n  \n}\n    \ncontract SINERGIA is TheLiquidToken {\n  string public constant name = \"SINERGIA\";\n      string public constant symbol = \"SNG\";\n  uint public constant decimals = 8;\n  uint256 public initialSupply = 2000000000000000;\n    \n  // Constructor\n  function SINERGIA () { \n     totalSupply = 2000000000000000;\n      balances[msg.sender] = totalSupply;\n      initialSupply = totalSupply; \n        Transfer(0, this, totalSupply);\n        Transfer(this, msg.sender, totalSupply);\n  }\n}",
  "bytecode": "60606040526003805460a060020a60ff021916905566071afd498d0000600455341561002a57600080fd5b60038054600160a060020a03338116600160a060020a0319909216821790925566071afd498d00006000818155918252600160205260408083208290556004829055309093169260008051602061097e83398151915291905190815260200160405180910390a333600160a060020a031630600160a060020a031660008051602061097e83398151915260005460405190815260200160405180910390a36108a7806100d76000396000f3006060604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146100df57806306fdde0314610106578063095ea7b31461019057806318160ddd146101b257806323b872dd146101d7578063313ce567146101ff578063378dc3dc1461021257806340c10f191461022557806370a08231146102475780637d64bcb4146102665780638da5cb5b1461027957806395d89b41146102a8578063a9059cbb146102bb578063dd62ed3e146102dd578063f2fde38b14610302575b600080fd5b34156100ea57600080fd5b6100f2610323565b604051901515815260200160405180910390f35b341561011157600080fd5b610119610344565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561015557808201518382015260200161013d565b50505050905090810190601f1680156101825780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019b57600080fd5b6100f2600160a060020a036004351660243561037b565b34156101bd57600080fd5b6101c5610421565b60405190815260200160405180910390f35b34156101e257600080fd5b6100f2600160a060020a0360043581169060243516604435610427565b341561020a57600080fd5b6101c561053a565b341561021d57600080fd5b6101c561053f565b341561023057600080fd5b6100f2600160a060020a0360043516602435610545565b341561025257600080fd5b6101c5600160a060020a0360043516610624565b341561027157600080fd5b6100f261063f565b341561028457600080fd5b61028c6106c4565b604051600160a060020a03909116815260200160405180910390f35b34156102b357600080fd5b6101196106d3565b34156102c657600080fd5b6100f2600160a060020a036004351660243561070a565b34156102e857600080fd5b6101c5600160a060020a03600435811690602435166107c9565b341561030d57600080fd5b610321600160a060020a03600435166107f4565b005b60035474010000000000000000000000000000000000000000900460ff1681565b60408051908101604052600881527f53494e4552474941000000000000000000000000000000000000000000000000602082015281565b60008115806103ad5750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b15156103b857600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b600160a060020a03808416600090815260026020908152604080832033851684528252808320549386168352600190915281205490919061046e908463ffffffff61085316565b600160a060020a0380861660009081526001602052604080822093909355908716815220546104a3908463ffffffff61086916565b600160a060020a0386166000908152600160205260409020556104cc818463ffffffff61086916565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b600881565b60045481565b60035460009033600160a060020a0390811691161461056357600080fd5b60035474010000000000000000000000000000000000000000900460ff161561058b57600080fd5b60005461059e908363ffffffff61085316565b6000908155600160a060020a0384168152600160205260409020546105c9908363ffffffff61085316565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a250600192915050565b600160a060020a031660009081526001602052604090205490565b60035460009033600160a060020a0390811691161461065d57600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600354600160a060020a031681565b60408051908101604052600381527f534e470000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a033316600090815260016020526040812054610733908363ffffffff61086916565b600160a060020a033381166000908152600160205260408082209390935590851681522054610768908363ffffffff61085316565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a0390811691161461080f57600080fd5b600160a060020a038116151561082457600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282018381101561086257fe5b9392505050565b60008282111561087557fe5b509003905600a165627a7a723058201b1d8c1e68f7757bff29caadf3d3f4b114741ec888d32b598f7dd6d062ddda3c0029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
  "constructorArguments": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
}