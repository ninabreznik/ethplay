{
  "address": "0x0c62c716d51e07a405e479ff839271a2c9f4fc3b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenERC20",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-13\n*/\n\npragma solidity ^0.4.16;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract TokenERC20 {\n// Public variables of the token\nstring public name; /* name 代币名称 */\nstring public symbol; /* symbol 代币图标 */\nuint8 public decimals = 8; /* decimals 代币小数点位数 */\nuint256 public totalSupply; //代币总量\n\n\n/* 设置一个数组存储每个账户的代币信息，创建所有账户余额数组 */\nmapping (address => uint256) public balanceOf;\nmapping (address => mapping (address => uint256)) public allowance;\n\n// This generates a public event on the blockchain that will notify clients\n/* event事件，它的作用是提醒客户端发生了这个事件，你会注意到钱包有时候会在右下角弹出信息 */\nevent Transfer(address indexed from, address indexed to, uint256 value);\n\nevent Approval(address indexed _owner, address indexed _spender, uint _value);\n// This notifies clients about the amount burnt\nevent Burn(address indexed from, uint256 value);\n\n/**\n* Constrctor function\n*\n* Initializes contract with initial supply tokens to the creator of the contract\n*/\n/*初始化合约，将最初的令牌打入创建者的账户中*/\nfunction TokenERC20(\nuint256 initialSupply,\nstring tokenName,\nstring tokenSymbol\n) public {\ntotalSupply = initialSupply * 10 ** uint256(decimals); //以太币是10^18，后面18个0，所以默认decimals是18,给令牌设置18位小数的长度\nbalanceOf[msg.sender] = totalSupply; // 给创建者所有初始令牌\nname = tokenName; // 设置代币（token）名称\nsymbol = tokenSymbol; // 设置代币（token）符号\n}\n\n/**\n* Internal transfer, only can be called by this contract\n*/\n/**\n* 私有方法从一个帐户发送给另一个帐户代币\n* @param _from address 发送代币的地址\n* @param _to address 接受代币的地址\n* @param _value uint256 接受代币的数量\n*/\nfunction _transfer(address _from, address _to, uint _value) internal {\n\n// Prevent transfer to 0x0 address. Use burn() instead\n//避免转帐的地址是0x0\nrequire(_to != 0x0);\n\n// Check if the sender has enough\n//检查发送者是否拥有足够余额\nrequire(balanceOf[_from] >= _value);\n\n// Check for overflows\n//检查是否溢出\nrequire(balanceOf[_to] + _value > balanceOf[_to]);\n\n// Save this for an assertion in the future\n//保存数据用于后面的判断\nuint previousBalances = balanceOf[_from] + balanceOf[_to];\n\n// Subtract from the sender\n//从发送者减掉发送额\nbalanceOf[_from] -= _value;\n\n// Add the same to the recipient\n//给接收者加上相同的量\nbalanceOf[_to] += _value;\n\n//通知任何监听该交易的客户端\nTransfer(_from, _to, _value);\n\n// Asserts are used to use static analysis to find bugs in your code. They should never fail\n\n//判断买、卖双方的数据是否和转换前一致\nassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n}\n\n\n/**\n* 从主帐户合约调用者发送给别人代币\n* @param _to address 接受代币的地址\n* @param _value uint256 接受代币的数量\n*/\nfunction transfer(address _to, uint256 _value) public returns (bool success) {\nif (balanceOf[msg.sender] >= _value\n&& _value > 0\n&& balanceOf[_to] + _value > balanceOf[_to]) {\nbalanceOf[msg.sender] -= _value;\nbalanceOf[_to] += _value;\n//触发Transfer事件\n_transfer(msg.sender, _to, _value);\nreturn true;\n} else {\nreturn false;\n}\n}\n\n/**\n* 从某个指定的帐户中，向另一个帐户发送代币\n*\n* 调用过程，会检查设置的允许最大交易额\n*\n* @param _from address 发送者地址\n* @param _to address 接受者地址\n* @param _value uint256 要转移的代币数量\n* @return success 是否交易成功\n*/\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\nrequire(_value <= allowance[_from][msg.sender]); // Check allowance\nallowance[_from][msg.sender] -= _value;\n_transfer(_from, _to, _value);\nreturn true;\n}\n//////////////////////////////////////以下//////////////////////////////////////////\n/**\n* 设置帐户允许支付的最大金额\n* 一般在智能合约的时候，避免支付过多，造成风险\n* @param _spender 帐户地址\n* @param _value 金额\n*/\nfunction approve(address _spender, uint256 _value) public returns (bool success) {\nallowance[msg.sender][_spender] = _value;\n//当授权时触发Approval事件\nApproval(msg.sender, _spender, _value);\nreturn true;\n}\n\n/**\n* 设置帐户允许支付的最大金额\n* 一般在智能合约的时候，避免支付过多，造成风险，加入时间参数，可以在 tokenRecipient 中做其他操作\n* @param _spender 帐户地址\n* @param _value 金额\n* @param _extraData 操作的时间\n*/\nfunction approveAndCall(address _spender, uint256 _value, bytes _extraData) public\nreturns (bool success) {\ntokenRecipient spender = tokenRecipient(_spender);\nif (approve(_spender, _value)) {\nspender.receiveApproval(msg.sender, _value, this, _extraData);\nreturn true;\n}\n}\n//////////////////////////////////以上/////////////////////////////////////////////\n/**\n* 减少代币调用者的余额\n* 操作以后是不可逆的\n* @param _value 要删除的数量\n*/\nfunction burn(uint256 _value) public returns (bool success) {\nrequire(balanceOf[msg.sender] >= _value); // Check if the sender has enough\nbalanceOf[msg.sender] -= _value; // Subtract from the sender\ntotalSupply -= _value; // Updates totalSupply\nBurn(msg.sender, _value);\nreturn true;\n}\n\n/**\n* 删除帐户的余额（含其他帐户）\n* 删除以后是不可逆的\n* @param _from 要操作的帐户地址\n* @param _value 要减去的数量\n*/\nfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\nrequire(balanceOf[_from] >= _value); // Check if the targeted balance is enough\nrequire(_value <= allowance[_from][msg.sender]); // Check allowance\nbalanceOf[_from] -= _value; // Subtract from the targeted balance\nallowance[_from][msg.sender] -= _value; // Subtract from the sender's allowance\ntotalSupply -= _value; // Update totalSupply\nBurn(_from, _value);\nreturn true;\n}\n}",
  "bytecode": "60606040526008600260006101000a81548160ff021916908360ff16021790555034156200002c57600080fd5b6040516200143b3803806200143b833981016040528080519060200190919080518201919060200180518201919050505b600260009054906101000a900460ff1660ff16600a0a8302600381905550600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160009080519060200190620000d9929190620000fd565b508060019080519060200190620000f2929190620000fd565b505b505050620001ac565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200014057805160ff191683800117855562000171565b8280016001018555821562000171579182015b828111156200017057825182559160200191906001019062000153565b5b50905062000180919062000184565b5090565b620001a991905b80821115620001a55760008160009055506001016200018b565b5090565b90565b61127f80620001bc6000396000f300606060405236156100b8576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100bd578063095ea7b31461014c57806318160ddd146101a657806323b872dd146101cf578063313ce5671461024857806342966c681461027757806370a08231146102b257806379cc6790146102ff57806395d89b4114610359578063a9059cbb146103e8578063cae9ca5114610442578063dd62ed3e146104df575b600080fd5b34156100c857600080fd5b6100d061054b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101115780820151818401525b6020810190506100f5565b50505050905090810190601f16801561013e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015757600080fd5b61018c600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506105e9565b604051808215151515815260200191505060405180910390f35b34156101b157600080fd5b6101b96106dc565b6040518082815260200191505060405180910390f35b34156101da57600080fd5b61022e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106e2565b604051808215151515815260200191505060405180910390f35b341561025357600080fd5b61025b610810565b604051808260ff1660ff16815260200191505060405180910390f35b341561028257600080fd5b6102986004808035906020019091905050610823565b604051808215151515815260200191505060405180910390f35b34156102bd57600080fd5b6102e9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610928565b6040518082815260200191505060405180910390f35b341561030a57600080fd5b61033f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610940565b604051808215151515815260200191505060405180910390f35b341561036457600080fd5b61036c610b5b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103ad5780820151818401525b602081019050610391565b50505050905090810190601f1680156103da5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103f357600080fd5b610428600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bf9565b604051808215151515815260200191505060405180910390f35b341561044d57600080fd5b6104c5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610d98565b604051808215151515815260200191505060405180910390f35b34156104ea57600080fd5b610535600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f17565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105e15780601f106105b6576101008083540402835291602001916105e1565b820191906000526020600020905b8154815290600101906020018083116105c457829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b60035481565b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561076f57600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610804848484610f3c565b600190505b9392505050565b600260009054906101000a900460ff1681565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561087357600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816003600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600190505b919050565b60046020528060005260406000206000915090505481565b600081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561099057600080fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610a1b57600080fd5b81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816003600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600190505b92915050565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bf15780601f10610bc657610100808354040283529160200191610bf1565b820191906000526020600020905b815481529060010190602001808311610bd457829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610c4a5750600082115b8015610cd55750600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15610d885781600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550610d7f338484610f3c565b60019050610d92565b60009050610d92565b5b92915050565b600080849050610da885856105e9565b15610f0e578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610ea35780820151818401525b602081019050610e87565b50505050905090810190601f168015610ed05780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610ef157600080fd5b6102c65a03f11515610f0257600080fd5b50505060019150610f0f565b5b509392505050565b6005602052816000526040600020602052806000526040600020600091509150505481565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515610f6357600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610fb157600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111151561103f57600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a380600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540114151561124c57fe5b5b505050505600a165627a7a72305820e27d6942cb0ef738e5666acfe1db75d588dd69cc686532172c6181374ac3a20c002900000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000094c656f20546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036c656f0000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000094c656f20546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036c656f0000000000000000000000000000000000000000000000000000000000"
}