{
  "address": "0x3282eb043414888a7c818ac9db0e8086fd5741c2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KamaGamesToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-29\n*/\n\npragma solidity ^0.4.25;\n\nlibrary SafeMath {\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b <= _a);\n    uint256 c = _a - _b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    uint256 c = _a + _b;\n    require(c >= _a);\n    \n    return c;\n  }\n}\n\n/**\n * @title KamaGames ERC20 token\n * @dev KamaGames ERC20 token based on code by OpenZeppelin \n * commit 4385fd5a236db303699476facfd212481eeac6c1 at github.com/OpenZeppelin/openzeppelin-solidity.git\n * >Implementation of the basic standard token.\n * >https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * >Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract KamaGamesToken {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private balances_;\n\n  mapping (address => mapping (address => uint256)) private allowed_;\n\n  uint256 private totalSupply_;\n  \n  event Chips(\n    address indexed _payee,\n    address indexed _to,\n    uint256 _value\n  );\n  \n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n\n  event TokensBurned(\n    address indexed burner,\n    uint256 value\n  );\n\n  address private constant address_prefix = address(~uint256(0xFFFFFFFF));\n\n  constructor() public {\n    totalSupply_ = 31250000000000;\n    balances_[msg.sender] = totalSupply_;\n  }\n  \n  function name() public pure returns (string) { return(\"KamaGames Token\"); }\n  function symbol() public pure returns (string) { return(\"KGT\"); }\n  function decimals() public pure returns (uint8) {return 6;}\n  \n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances_[_owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed_[_owner][_spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances_[msg.sender]);\n    require(_to != address(0));\n    \n    if(_to > address_prefix){\n      _burn(msg.sender, _value);\n      emit Chips(msg.sender, _to, _value);\n      return true;\n    }\n    balances_[msg.sender] = balances_[msg.sender].sub(_value);\n    balances_[_to] = balances_[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    require(_spender != address(0));\n\n    allowed_[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances_[_from]);\n    require(_value <= allowed_[_from][msg.sender]);\n    require(_to != address(0));\n\n    if(_to > address_prefix){\n      _burn(_from,_value);\n      emit Chips(msg.sender, _to, _value);\n      return true;\n    }\n\n    balances_[_from] = balances_[_from].sub(_value);\n    balances_[_to] = balances_[_to].add(_value);\n    allowed_[_from][msg.sender] = allowed_[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(_spender != address(0));\n\n    allowed_[msg.sender][_spender] = (\n      allowed_[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed_[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(_spender != address(0));\n\n    uint256 oldValue = allowed_[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed_[msg.sender][_spender] = 0;\n    } else {\n      allowed_[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed_[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param _account The account whose tokens will be burnt.\n   * @param _amount The amount that will be burnt.\n   */\n  function _burn(address _account, uint256 _amount) internal {\n    require(_account != address(0));\n    require(_amount <= balances_[_account]);\n\n    totalSupply_ = totalSupply_.sub(_amount);\n    balances_[_account] = balances_[_account].sub(_amount);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal _burn function.\n   * @param _account The account whose tokens will be burnt.\n   * @param _amount The amount that will be burnt.\n   */\n  function _burnFrom(address _account, uint256 _amount) internal {\n    require(_amount <= allowed_[_account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    allowed_[_account][msg.sender] = allowed_[_account][msg.sender].sub(\n      _amount);\n    _burn(_account, _amount);\n  }\n  \n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n    emit TokensBurned(msg.sender, _value);\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param _from address The address which you want to send tokens from\n   * @param _value uint256 The amount of token to be burned\n   */\n  function burnFrom(address _from, uint256 _value) public {\n    _burnFrom(_from, _value);\n    emit TokensBurned(_from, _value);\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_payee\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Chips\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50651c6bf5263400600281905533600090815260208190526040902055610b5b8061003c6000396000f3006080604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100c9578063095ea7b31461015357806318160ddd1461018b57806323b872dd146101b2578063313ce567146101dc57806342966c6814610207578063661884631461022157806370a082311461024557806379cc67901461026657806395d89b411461028a578063a9059cbb1461029f578063d73dd623146102c3578063dd62ed3e146102e7575b600080fd5b3480156100d557600080fd5b506100de61030e565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610118578181015183820152602001610100565b50505050905090810190601f1680156101455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015f57600080fd5b50610177600160a060020a0360043516602435610345565b604080519115158252519081900360200190f35b34801561019757600080fd5b506101a06103c4565b60408051918252519081900360200190f35b3480156101be57600080fd5b50610177600160a060020a03600435811690602435166044356103ca565b3480156101e857600080fd5b506101f16105b7565b6040805160ff9092168252519081900360200190f35b34801561021357600080fd5b5061021f6004356105bc565b005b34801561022d57600080fd5b50610177600160a060020a03600435166024356105ff565b34801561025157600080fd5b506101a0600160a060020a0360043516610707565b34801561027257600080fd5b5061021f600160a060020a0360043516602435610722565b34801561029657600080fd5b506100de61076f565b3480156102ab57600080fd5b50610177600160a060020a03600435166024356107a6565b3480156102cf57600080fd5b50610177600160a060020a03600435166024356108fc565b3480156102f357600080fd5b506101a0600160a060020a03600435811690602435166109ac565b60408051808201909152600f81527f4b616d6147616d657320546f6b656e0000000000000000000000000000000000602082015290565b6000600160a060020a038316151561035c57600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60025490565b600160a060020a0383166000908152602081905260408120548211156103ef57600080fd5b600160a060020a038416600090815260016020908152604080832033845290915290205482111561041f57600080fd5b600160a060020a038316151561043457600080fd5b73ffffffffffffffffffffffffffffffff00000000600160a060020a03841611156104ab5761046384836109d7565b604080518381529051600160a060020a0385169133917f7806f422b0566d8310a3949c1f3316a1804085447a523ecfe69b4ae3fef465fd9181900360200190a35060016105b0565b600160a060020a0384166000908152602081905260409020546104d4908363ffffffff610a7016565b600160a060020a038086166000908152602081905260408082209390935590851681522054610509908363ffffffff610a8716565b600160a060020a0380851660009081526020818152604080832094909455918716815260018252828120338252909152205461054b908363ffffffff610a7016565b600160a060020a03808616600081815260016020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060015b9392505050565b600690565b6105c633826109d7565b60408051828152905133917ffd38818f5291bf0bb3a2a48aadc06ba8757865d1dabd804585338aab3009dcb6919081900360200190a250565b600080600160a060020a038416151561061757600080fd5b50336000908152600160209081526040808320600160a060020a038716845290915290205480831061066c57336000908152600160209081526040808320600160a060020a03881684529091528120556106a1565b61067c818463ffffffff610a7016565b336000908152600160209081526040808320600160a060020a03891684529091529020555b336000818152600160209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b61072c8282610a99565b604080518281529051600160a060020a038416917ffd38818f5291bf0bb3a2a48aadc06ba8757865d1dabd804585338aab3009dcb6919081900360200190a25050565b60408051808201909152600381527f4b47540000000000000000000000000000000000000000000000000000000000602082015290565b336000908152602081905260408120548211156107c257600080fd5b600160a060020a03831615156107d757600080fd5b73ffffffffffffffffffffffffffffffff00000000600160a060020a038416111561084e5761080633836109d7565b604080518381529051600160a060020a0385169133917f7806f422b0566d8310a3949c1f3316a1804085447a523ecfe69b4ae3fef465fd9181900360200190a35060016103be565b3360009081526020819052604090205461086e908363ffffffff610a7016565b3360009081526020819052604080822092909255600160a060020a038516815220546108a0908363ffffffff610a8716565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b6000600160a060020a038316151561091357600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610947908363ffffffff610a8716565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600160a060020a03821615156109ec57600080fd5b600160a060020a038216600090815260208190526040902054811115610a1157600080fd5b600254610a24908263ffffffff610a7016565b600255600160a060020a038216600090815260208190526040902054610a50908263ffffffff610a7016565b600160a060020a0390921660009081526020819052604090209190915550565b60008083831115610a8057600080fd5b5050900390565b6000828201838110156105b057600080fd5b600160a060020a0382166000908152600160209081526040808320338452909152902054811115610ac957600080fd5b600160a060020a0382166000908152600160209081526040808320338452909152902054610afd908263ffffffff610a7016565b600160a060020a0383166000908152600160209081526040808320338452909152902055610b2b82826109d7565b50505600a165627a7a723058206a43a88ca82189ea90ed093a3d60619d4a7dbd8e47e4df72184bf552c82a88240029"
}