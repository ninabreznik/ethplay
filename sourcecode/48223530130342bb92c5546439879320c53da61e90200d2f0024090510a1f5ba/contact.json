{
  "address": "0xb7b245eaa57a83b9d460fbcfd24284e8859f9c03",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DUSDToken",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-05\n*/\n\npragma solidity 0.5.8;\n\n/**\n * @title SafeMath \n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n\n    /**\n     * @dev Subtract two unsigned integers, revert on underflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Add two unsigned integers, revert on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev See https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Ownable {\n    address internal _owner;\n    address private _pendingOwner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @return The address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function pendingOwner() public view returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Revert if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"The caller must be owner\");\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n            /**\n     * @dev Allow the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Cannot transfer control of the contract to the zero address\");\n        _pendingOwner = newOwner;\n    }\n\n    function receiveOwnership() public {\n        require(msg.sender == _pendingOwner);\n        emit OwnershipTransferred(_owner, _pendingOwner);\n        _owner = _pendingOwner;\n        _pendingOwner = address(0);  \n    }\n}\n\ninterface TokenStore {\n    function getTokenName() external view returns (string memory);\n    function getSymbol() external view  returns (string memory);\n    function getDecimals() external view returns (uint8);\n    function getTotalSupply() view external returns (uint256);\n    function getBalance(address account) view external returns (uint256);\n    function getAllowance(address _holder, address _spender) view external returns (uint256);\n    function addBalance(address _holder, uint256 _value) external;\n    function subBalance(address _holder, uint256 _value) external;\n    function subAllowance(address _holder, address _spender, uint256 _value) external;\n    function setAllowance(address _holder, address _spender, uint256 _value) external;\n    function addTotalSupply(uint256 _value) external;\n    function subTotalSupply(uint256 _value) external;\n    function addBlackList(address user) external;\n    function removeBlackList(address user) external;\n    function isBlackList(address user) external view returns (bool);\n    function getPaused() external view returns (bool);\n    function unpause() external;\n    function pause() external;\n}\n\ncontract DUSDToken is IERC20, Ownable {\n    using SafeMath for uint256;\n    TokenStore public tokenInstance;\n    event Pause();\n    event Unpause();\n\n    /**\n     * @dev Set '_owner' to a speicified address.\n     * This owner just used for the 'kill' function.\n     */\n    constructor() public {\n        _owner = 0xfe30e619cc2915C905Ca45C1BA8311109A3cBdB1;\n    }\n    \n    \n    /**\n     * contract only can initialized once \n     */\n    bool private initialized = false;\n\n    /**\n     * @dev Set 0 initials tokens, the owner.\n     * this serves as the constructor for the proxy.\n     */\n    function initialize(TokenStore token_instance) public {\n        require(!initialized, \"already initialized\");\n        tokenInstance = token_instance;\n        _owner = 0xfe30e619cc2915C905Ca45C1BA8311109A3cBdB1;\n        initialized = true;\n    }\n\n    \n    /**\n     * @dev See `IERC20.totalSupply`.\n     */\n    function totalSupply() public view returns (uint256) {\n        return tokenInstance.getTotalSupply();\n    }\n\n    /**\n     * @dev See `IERC20.balanceOf`.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return tokenInstance.getBalance(account);\n    }\n    \n    function name() public view returns (string memory) {\n        return tokenInstance.getTokenName();\n    }\n    \n    function symbol() public view returns (string memory) {\n        return tokenInstance.getSymbol();\n    }\n    \n    function decimals() public view returns (uint8) {\n        return tokenInstance.getDecimals();\n    }\n\n    function kill() public onlyOwner {\n        selfdestruct(msg.sender);\n    }\n    \n    modifier whenNotPaused() {\n        require(!tokenInstance.getPaused(), \"Only when the contract is not paused\");\n        _;\n    }\n\n    modifier whenPaused() {\n        require(tokenInstance.getPaused(), \"Only when the contract is paused\");\n        _;\n    }\n\n\n    function pause() public onlyOwner whenNotPaused {\n        tokenInstance.pause();\n        emit Pause();\n    }\n    \n    function unpause() public onlyOwner whenPaused {\n        tokenInstance.unpause();\n        emit Unpause();\n    }\n    \n    function pauseStatus() public view returns (bool) {\n        return tokenInstance.getPaused();\n    }\n    \n    function addToBlackList(address user) public onlyOwner {\n        tokenInstance.addBlackList(user);\n    }\n\n    function removeToBlackList(address user) public onlyOwner {\n        tokenInstance.removeBlackList(user);\n    }\n\n    function isBlackList(address user) public view returns (bool) {\n        return tokenInstance.isBlackList(user);\n    }\n\n    /**\n     * @dev See `IERC20.transfer`.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) whenNotPaused public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.allowance`.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return tokenInstance.getAllowance(owner, spender);\n    }\n\n    /**\n     * @dev See `IERC20.approve`.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) whenNotPaused public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.transferFrom`.\n     *\n     * Emit an `Approval` event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of `ERC20`;\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `value`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) whenNotPaused public returns (bool) {\n        require(!isBlackList(msg.sender), \"Black List: Msg.sender is in blacklist\");\n        _transfer(sender, recipient, amount);\n        tokenInstance.subAllowance(sender, msg.sender, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to `approve` that can be used as a mitigation for\n     * problems described in `IERC20.approve`.\n     *\n     * Emits an `Approval` event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) whenNotPaused public returns (bool) {\n        _approve(msg.sender, spender, tokenInstance.getAllowance(msg.sender, spender).add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to `approve` that can be used as a mitigation for\n     * problems described in `IERC20.approve`.\n     *\n     * Emits an `Approval` event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) whenNotPaused public returns (bool) {\n        _approve(msg.sender, spender, tokenInstance.getAllowance(msg.sender, spender).sub(subtractedValue));\n        return true;\n    }\n\n     function mint(address account, uint256 amount) public onlyOwner returns (bool) {\n        _mint(account, amount);\n        return true;\n    }\n\n    function burn(uint256 amount) public whenNotPaused returns (bool) {\n        _burn(msg.sender, amount);\n        return true;\n    }\n        /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to `transfer`, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a `Transfer` event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: Transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: Transfer to the zero address\");\n        require(!isBlackList(sender), \"Black List: Sender is in blacklist\");\n        require(!isBlackList(recipient), \"Black List: Recipient is in blacklist\");\n        tokenInstance.subBalance(sender, amount);\n        tokenInstance.addBalance(recipient, amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Create `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a `Transfer` event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: Mint to the zero address\");\n        require(!isBlackList(account), \"Black List: Recipient is in blacklist\");\n        tokenInstance.addTotalSupply(amount);\n        tokenInstance.addBalance(account, amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n     /**\n     * @dev Destroy `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a `Transfer` event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 value) internal {\n        tokenInstance.subBalance(account, value);\n        tokenInstance.subTotalSupply(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Set `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an `Approval` event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: Approve from the zero address\");\n        require(spender != address(0), \"ERC20: Approve to the zero address\");\n        require(!isBlackList(owner), \"Black List: owner is in blacklist\");\n        require(!isBlackList(spender), \"Black List: spender is in blacklist\");\n        tokenInstance.setAllowance(owner, spender, value);\n        emit Approval(owner, spender, value);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receiveOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addToBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeToBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenInstance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isBlackList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_instance\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "608060405260028054600160a01b60ff021916905534801561002057600080fd5b50600080546001600160a01b03191673fe30e619cc2915c905ca45c1ba8311109a3cbdb1179055611fb7806100566000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80634b7b6c8d116100f9578063a457c2d711610097578063c4d66de811610071578063c4d66de8146104a4578063dd62ed3e146104ca578063e30c3978146104f8578063f2fde38b14610500576101a9565b8063a457c2d714610426578063a9059cbb14610452578063b36d69191461047e576101a9565b80638456cb59116100d35780638456cb59146104065780638da5cb5b1461040e5780638f32d59b1461041657806395d89b411461041e576101a9565b80634b7b6c8d14610396578063658030b3146103bc57806370a08231146103e0576101a9565b80633950935111610166578063417c73a711610140578063417c73a71461034357806341c0e1b51461036957806342966c6814610371578063466916ca1461038e576101a9565b806339509351146102e35780633f4ba83a1461030f57806340c10f1914610317576101a9565b806306fdde03146101ae578063095ea7b31461022b57806318160ddd1461026b5780631c74a3011461028557806323b872dd1461028f578063313ce567146102c5575b600080fd5b6101b6610526565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101f05781810151838201526020016101d8565b50505050905090810190601f16801561021d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102576004803603604081101561024157600080fd5b506001600160a01b0381351690602001356105fb565b604080519115158252519081900360200190f35b6102736106c2565b60408051918252519081900360200190f35b61028d61073b565b005b610257600480360360608110156102a557600080fd5b506001600160a01b038135811691602081013590911690604001356107b6565b6102cd61093c565b6040805160ff9092168252519081900360200190f35b610257600480360360408110156102f957600080fd5b506001600160a01b038135169060200135610984565b61028d610ad9565b6102576004803603604081101561032d57600080fd5b506001600160a01b038135169060200135610c84565b61028d6004803603602081101561035957600080fd5b50356001600160a01b0316610cda565b61028d610d8f565b6102576004803603602081101561038757600080fd5b5035610ddc565b610257610ea1565b61028d600480360360208110156103ac57600080fd5b50356001600160a01b0316610ee9565b6103c4610f84565b604080516001600160a01b039092168252519081900360200190f35b610273600480360360208110156103f657600080fd5b50356001600160a01b0316610f93565b61028d611019565b6103c46111af565b6102576111be565b6101b66111cf565b6102576004803603604081101561043c57600080fd5b506001600160a01b038135169060200135611217565b6102576004803603604081101561046857600080fd5b506001600160a01b038135169060200135611367565b6102576004803603602081101561049457600080fd5b50356001600160a01b0316611425565b61028d600480360360208110156104ba57600080fd5b50356001600160a01b0316611479565b610273600480360360408110156104e057600080fd5b506001600160a01b038135811691602001351661153b565b6103c46115ca565b61028d6004803603602081101561051657600080fd5b50356001600160a01b03166115d9565b60025460408051600160e01b63862b092b02815290516060926001600160a01b03169163862b092b916004808301926000929190829003018186803b15801561056e57600080fd5b505afa158015610582573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156105ab57600080fd5b8101908080516401000000008111156105c357600080fd5b820160208101848111156105d657600080fd5b81516401000000008111828201871017156105f057600080fd5b509094505050505090565b60025460408051600160e01b636805b84b02815290516000926001600160a01b031691636805b84b916004808301926020929190829003018186803b15801561064357600080fd5b505afa158015610657573d6000803e3d6000fd5b505050506040513d602081101561066d57600080fd5b5051156106ae57604051600160e51b62461bcd028152600401808060200182810382526024815260200180611f686024913960400191505060405180910390fd5b6106b933848461162f565b50600192915050565b60025460408051600160e11b6362720d9102815290516000926001600160a01b03169163c4e41b22916004808301926020929190829003018186803b15801561070a57600080fd5b505afa15801561071e573d6000803e3d6000fd5b505050506040513d602081101561073457600080fd5b5051905090565b6001546001600160a01b0316331461075257600080fd5b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b60025460408051600160e01b636805b84b02815290516000926001600160a01b031691636805b84b916004808301926020929190829003018186803b1580156107fe57600080fd5b505afa158015610812573d6000803e3d6000fd5b505050506040513d602081101561082857600080fd5b50511561086957604051600160e51b62461bcd028152600401808060200182810382526024815260200180611f686024913960400191505060405180910390fd5b61087233611425565b156108b157604051600160e51b62461bcd028152600401808060200182810382526026815260200180611e2e6026913960400191505060405180910390fd5b6108bc84848461180e565b60025460408051600160e11b634bec46690281526001600160a01b03878116600483015233602483015260448201869052915191909216916397d88cd291606480830192600092919082900301818387803b15801561091a57600080fd5b505af115801561092e573d6000803e3d6000fd5b506001979650505050505050565b60025460408051600160e21b633c05076102815290516000926001600160a01b03169163f0141d84916004808301926020929190829003018186803b15801561070a57600080fd5b60025460408051600160e01b636805b84b02815290516000926001600160a01b031691636805b84b916004808301926020929190829003018186803b1580156109cc57600080fd5b505afa1580156109e0573d6000803e3d6000fd5b505050506040513d60208110156109f657600080fd5b505115610a3757604051600160e51b62461bcd028152600401808060200182810382526024815260200180611f686024913960400191505060405180910390fd5b60025460408051600160e01b630af4187d02815233600482018190526001600160a01b03808816602484015292516106b99491938893610ad4938993921691630af4187d91604480820192602092909190829003018186803b158015610a9c57600080fd5b505afa158015610ab0573d6000803e3d6000fd5b505050506040513d6020811015610ac657600080fd5b50519063ffffffff611a5516565b61162f565b610ae16111be565b610b235760408051600160e51b62461bcd0281526020600482015260186024820152600080516020611f48833981519152604482015290519081900360640190fd5b600260009054906101000a90046001600160a01b03166001600160a01b0316636805b84b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7157600080fd5b505afa158015610b85573d6000803e3d6000fd5b505050506040513d6020811015610b9b57600080fd5b5051610bf15760408051600160e51b62461bcd02815260206004820181905260248201527f4f6e6c79207768656e2074686520636f6e747261637420697320706175736564604482015290519081900360640190fd5b600260009054906101000a90046001600160a01b03166001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c4157600080fd5b505af1158015610c55573d6000803e3d6000fd5b50506040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b33925060009150a1565b6000610c8e6111be565b610cd05760408051600160e51b62461bcd0281526020600482015260186024820152600080516020611f48833981519152604482015290519081900360640190fd5b6106b98383611a6e565b610ce26111be565b610d245760408051600160e51b62461bcd0281526020600482015260186024820152600080516020611f48833981519152604482015290519081900360640190fd5b60025460408051600160e61b623b2e4f0281526001600160a01b03848116600483015291519190921691630ecb93c091602480830192600092919082900301818387803b158015610d7457600080fd5b505af1158015610d88573d6000803e3d6000fd5b5050505050565b610d976111be565b610dd95760408051600160e51b62461bcd0281526020600482015260186024820152600080516020611f48833981519152604482015290519081900360640190fd5b33ff5b60025460408051600160e01b636805b84b02815290516000926001600160a01b031691636805b84b916004808301926020929190829003018186803b158015610e2457600080fd5b505afa158015610e38573d6000803e3d6000fd5b505050506040513d6020811015610e4e57600080fd5b505115610e8f57604051600160e51b62461bcd028152600401808060200182810382526024815260200180611f686024913960400191505060405180910390fd5b610e993383611c31565b506001919050565b60025460408051600160e01b636805b84b02815290516000926001600160a01b031691636805b84b916004808301926020929190829003018186803b15801561070a57600080fd5b610ef16111be565b610f335760408051600160e51b62461bcd0281526020600482015260186024820152600080516020611f48833981519152604482015290519081900360640190fd5b60025460408051600160e01b63e4997dc50281526001600160a01b0384811660048301529151919092169163e4997dc591602480830192600092919082900301818387803b158015610d7457600080fd5b6002546001600160a01b031681565b60025460408051600160e01b63f8b2cb4f0281526001600160a01b0384811660048301529151600093929092169163f8b2cb4f91602480820192602092909190829003018186803b158015610fe757600080fd5b505afa158015610ffb573d6000803e3d6000fd5b505050506040513d602081101561101157600080fd5b505192915050565b6110216111be565b6110635760408051600160e51b62461bcd0281526020600482015260186024820152600080516020611f48833981519152604482015290519081900360640190fd5b600260009054906101000a90046001600160a01b03166001600160a01b0316636805b84b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110b157600080fd5b505afa1580156110c5573d6000803e3d6000fd5b505050506040513d60208110156110db57600080fd5b50511561111c57604051600160e51b62461bcd028152600401808060200182810382526024815260200180611f686024913960400191505060405180910390fd5b600260009054906101000a90046001600160a01b03166001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561116c57600080fd5b505af1158015611180573d6000803e3d6000fd5b50506040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff625925060009150a1565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b60025460408051600160e01b631507040102815290516060926001600160a01b0316916315070401916004808301926000929190829003018186803b15801561056e57600080fd5b60025460408051600160e01b636805b84b02815290516000926001600160a01b031691636805b84b916004808301926020929190829003018186803b15801561125f57600080fd5b505afa158015611273573d6000803e3d6000fd5b505050506040513d602081101561128957600080fd5b5051156112ca57604051600160e51b62461bcd028152600401808060200182810382526024815260200180611f686024913960400191505060405180910390fd5b60025460408051600160e01b630af4187d02815233600482018190526001600160a01b03808816602484015292516106b99491938893610ad4938993921691630af4187d91604480820192602092909190829003018186803b15801561132f57600080fd5b505afa158015611343573d6000803e3d6000fd5b505050506040513d602081101561135957600080fd5b50519063ffffffff611d4e16565b60025460408051600160e01b636805b84b02815290516000926001600160a01b031691636805b84b916004808301926020929190829003018186803b1580156113af57600080fd5b505afa1580156113c3573d6000803e3d6000fd5b505050506040513d60208110156113d957600080fd5b50511561141a57604051600160e51b62461bcd028152600401808060200182810382526024815260200180611f686024913960400191505060405180910390fd5b6106b933848461180e565b60025460408051600160e01b63b36d69190281526001600160a01b0384811660048301529151600093929092169163b36d691991602480820192602092909190829003018186803b158015610fe757600080fd5b600254600160a01b900460ff16156114db5760408051600160e51b62461bcd02815260206004820152601360248201527f616c726561647920696e697469616c697a656400000000000000000000000000604482015290519081900360640190fd5b60028054600080546001600160a01b031990811673fe30e619cc2915c905ca45c1ba8311109a3cbdb11790915574ff0000000000000000000000000000000000000000196001600160a01b0390941691161791909116600160a01b179055565b60025460408051600160e01b630af4187d0281526001600160a01b038581166004830152848116602483015291516000939290921691630af4187d91604480820192602092909190829003018186803b15801561159757600080fd5b505afa1580156115ab573d6000803e3d6000fd5b505050506040513d60208110156115c157600080fd5b50519392505050565b6001546001600160a01b031690565b6115e16111be565b6116235760408051600160e51b62461bcd0281526020600482015260186024820152600080516020611f48833981519152604482015290519081900360640190fd5b61162c81611d63565b50565b6001600160a01b03831661167757604051600160e51b62461bcd028152600401808060200182810382526024815260200180611eff6024913960400191505060405180910390fd5b6001600160a01b0382166116bf57604051600160e51b62461bcd028152600401808060200182810382526022815260200180611ebc6022913960400191505060405180910390fd5b6116c883611425565b1561170757604051600160e51b62461bcd028152600401808060200182810382526021815260200180611ede6021913960400191505060405180910390fd5b61171082611425565b1561174f57604051600160e51b62461bcd028152600401808060200182810382526023815260200180611e546023913960400191505060405180910390fd5b60025460408051600160e21b63369182630281526001600160a01b0386811660048301528581166024830152604482018590529151919092169163da46098c91606480830192600092919082900301818387803b1580156117af57600080fd5b505af11580156117c3573d6000803e3d6000fd5b50506040805184815290516001600160a01b038087169450871692507f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259181900360200190a3505050565b6001600160a01b03831661185657604051600160e51b62461bcd028152600401808060200182810382526025815260200180611f236025913960400191505060405180910390fd5b6001600160a01b03821661189e57604051600160e51b62461bcd028152600401808060200182810382526023815260200180611e996023913960400191505060405180910390fd5b6118a783611425565b156118e657604051600160e51b62461bcd028152600401808060200182810382526022815260200180611e776022913960400191505060405180910390fd5b6118ef82611425565b1561192e57604051600160e51b62461bcd028152600401808060200182810382526025815260200180611dce6025913960400191505060405180910390fd5b60025460408051600160e11b6367c775bf0281526001600160a01b038681166004830152602482018590529151919092169163cf8eeb7e91604480830192600092919082900301818387803b15801561198657600080fd5b505af115801561199a573d6000803e3d6000fd5b505060025460408051600160e11b6310f29c1d0281526001600160a01b0387811660048301526024820187905291519190921693506321e5383a9250604480830192600092919082900301818387803b1580156119f657600080fd5b505af1158015611a0a573d6000803e3d6000fd5b50506040805184815290516001600160a01b038087169450871692507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3505050565b600082820183811015611a6757600080fd5b9392505050565b6001600160a01b038216611acc5760408051600160e51b62461bcd02815260206004820152601f60248201527f45524332303a204d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b611ad582611425565b15611b1457604051600160e51b62461bcd028152600401808060200182810382526025815260200180611dce6025913960400191505060405180910390fd5b60025460408051600160e11b63723434470281526004810184905290516001600160a01b039092169163e468688e9160248082019260009290919082900301818387803b158015611b6457600080fd5b505af1158015611b78573d6000803e3d6000fd5b505060025460408051600160e11b6310f29c1d0281526001600160a01b0387811660048301526024820187905291519190921693506321e5383a9250604480830192600092919082900301818387803b158015611bd457600080fd5b505af1158015611be8573d6000803e3d6000fd5b50506040805184815290516001600160a01b0386169350600092507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60025460408051600160e11b6367c775bf0281526001600160a01b038581166004830152602482018590529151919092169163cf8eeb7e91604480830192600092919082900301818387803b158015611c8957600080fd5b505af1158015611c9d573d6000803e3d6000fd5b505060025460408051600160e11b634141c63b0281526004810186905290516001600160a01b0390921693506382838c76925060248082019260009290919082900301818387803b158015611cf157600080fd5b505af1158015611d05573d6000803e3d6000fd5b5050604080518481529051600093506001600160a01b03861692507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600082821115611d5d57600080fd5b50900390565b6001600160a01b038116611dab57604051600160e51b62461bcd02815260040180806020018281038252603b815260200180611df3603b913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b039290921691909117905556fe426c61636b204c6973743a20526563697069656e7420697320696e20626c61636b6c69737443616e6e6f74207472616e7366657220636f6e74726f6c206f662074686520636f6e747261637420746f20746865207a65726f2061646472657373426c61636b204c6973743a204d73672e73656e64657220697320696e20626c61636b6c697374426c61636b204c6973743a207370656e64657220697320696e20626c61636b6c697374426c61636b204c6973743a2053656e64657220697320696e20626c61636b6c69737445524332303a205472616e7366657220746f20746865207a65726f206164647265737345524332303a20417070726f766520746f20746865207a65726f2061646472657373426c61636b204c6973743a206f776e657220697320696e20626c61636b6c69737445524332303a20417070726f76652066726f6d20746865207a65726f206164647265737345524332303a205472616e736665722066726f6d20746865207a65726f20616464726573735468652063616c6c6572206d757374206265206f776e657200000000000000004f6e6c79207768656e2074686520636f6e7472616374206973206e6f7420706175736564a165627a7a7230582092004187558f4d6a7c0d542533d5384d37b59e5e9869be9ad1262656703b29a10029"
}