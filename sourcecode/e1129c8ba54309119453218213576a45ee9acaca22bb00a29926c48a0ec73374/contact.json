{
  "address": "0x6d835879a256978755b8f3a3ec2c76c5188404f5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "UncToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-24\n*/\n\npragma solidity ^0.4.23;\n\n// File: contracts/Owned.sol\n\n// ----------------------------------------------------------------------------\n// Ownership functionality for authorization controls and user permissions\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n// File: contracts/SafeMath.sol\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\ncontract SafeMath {\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function safeSub(uint a, uint b) public pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function safeMul(uint a, uint b) public pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n// File: contracts/ERC20.sol\n\n// ----------------------------------------------------------------------------\n// ERC20 Standard Interface\n// ----------------------------------------------------------------------------\ncontract ERC20 {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n// File: contracts/UncToken.sol\n\n// ----------------------------------------------------------------------------\n// 'UNC' 'Uncloak' token contract\n// Symbol      : UNC\n// Name        : Uncloak\n// Total supply: 4,200,000,000\n// Decimals    : 18\n// ----------------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals\n// Receives ETH and generates tokens\n// ----------------------------------------------------------------------------\ncontract UncToken is SafeMath, Owned, ERC20 {\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint public _totalSupply;\n\n    // Track whether the coin can be transfered\n    bool private transferEnabled = false;\n\n    // track addresses that can transfer regardless of whether transfers are enables\n    mapping(address => bool) public transferAdmins;\n\n    mapping(address => uint) public balances;\n    mapping(address => mapping(address => uint)) internal allowed;\n\n    event Burned(address indexed burner, uint256 value);\n\n    // Check if transfer is valid\n    modifier canTransfer(address _sender) {\n        require(transferEnabled || transferAdmins[_sender]);\n        _;\n    }\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    constructor() public {\n        symbol = \"UNC\";\n        name = \"Uncloak\";\n        decimals = 18;\n        _totalSupply = 4200000000 * 10**uint(decimals);\n        transferAdmins[owner] = true; // Enable transfers for owner\n        balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, _totalSupply);\n    }\n\n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public constant returns (uint) {\n        return _totalSupply;\n    }\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to `to` account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens) canTransfer (msg.sender) public returns (bool success) {\n        require(to != address(this)); //make sure we're not transfering to this contract\n\n        //check edge cases\n        if (balances[msg.sender] >= tokens\n            && tokens > 0) {\n\n                //update balances\n                balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n                balances[to] = safeAdd(balances[to], tokens);\n\n                //log event\n                emit Transfer(msg.sender, to, tokens);\n                return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public returns (bool success) {\n        // Ownly allow changes to or from 0. Mitigates vulnerabiilty of race description\n        // described here: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((tokens == 0) || (allowed[msg.sender][spender] == 0));\n\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer `tokens` from the `from` account to the `to` account\n    //\n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the `from` account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens) canTransfer(from) public returns (bool success) {\n        require(to != address(this));\n\n        //check edge cases\n        if (allowed[from][msg.sender] >= tokens\n            && balances[from] >= tokens\n            && tokens > 0) {\n\n            //update balances and allowances\n            balances[from] = safeSub(balances[from], tokens);\n            allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n            balances[to] = safeAdd(balances[to], tokens);\n\n            //log event\n            emit Transfer(from, to, tokens);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n\n    // Owner can allow transfers for a particular address. Use for crowdsale contract.\n    function setTransferAdmin(address _addr, bool _canTransfer) onlyOwner public {\n        transferAdmins[_addr] = _canTransfer;\n    }\n\n    // Enable transfers for token holders\n    function enablesTransfers() public onlyOwner {\n        transferEnabled = true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Burns a specific number of tokens\n    // ------------------------------------------------------------------------\n    function burn(uint256 _value) public onlyOwner {\n        require(_value > 0);\n\n        address burner = msg.sender;\n        balances[burner] = safeSub(balances[burner], _value);\n        _totalSupply = safeSub(_totalSupply, _value);\n        emit Burned(burner, _value);\n    }\n\n    // ------------------------------------------------------------------------\n    // Doesn't Accept Eth\n    // ------------------------------------------------------------------------\n    function () public payable {\n        revert();\n    }\n}",
  "bytecode": "60806040526000600660006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600381526020017f554e43000000000000000000000000000000000000000000000000000000000081525060029080519060200190620000ba929190620002b6565b506040805190810160405280600781526020017f556e636c6f616b000000000000000000000000000000000000000000000000008152506003908051906020019062000108929190620002b6565b506012600460006101000a81548160ff021916908360ff160217905550600460009054906101000a900460ff1660ff16600a0a63fa56ea00026005819055506001600760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600554600860008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6005546040518082815260200191505060405180910390a362000365565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002f957805160ff19168380011785556200032a565b828001600101855582156200032a579182015b82811115620003295782518255916020019190600101906200030c565b5b5090506200033991906200033d565b5090565b6200036291905b808211156200035e57600081600090555060010162000344565b5090565b90565b6118e780620003756000396000f300608060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610138578063095ea7b3146101c857806318160ddd1461022d57806323b872dd1461025857806327e235e3146102dd578063313ce567146103345780633eaaf86b1461036557806342966c68146103905780636738426c146103bd5780636dfccdb6146103d457806370a082311461042f57806379ba50971461048657806386c8c4911461049d5780638da5cb5b146104ec57806395d89b4114610543578063a293d1e8146105d3578063a9059cbb1461061e578063b5931f7c14610683578063d05c78da146106ce578063d4ee1d9014610719578063dd62ed3e14610770578063e6cb9013146107e7578063f2fde38b14610832575b600080fd5b34801561014457600080fd5b5061014d610875565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561018d578082015181840152602081019050610172565b50505050905090810190601f1680156101ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101d457600080fd5b50610213600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610913565b604051808215151515815260200191505060405180910390f35b34801561023957600080fd5b50610242610a9a565b6040518082815260200191505060405180910390f35b34801561026457600080fd5b506102c3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610aa4565b604051808215151515815260200191505060405180910390f35b3480156102e957600080fd5b5061031e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ec6565b6040518082815260200191505060405180910390f35b34801561034057600080fd5b50610349610ede565b604051808260ff1660ff16815260200191505060405180910390f35b34801561037157600080fd5b5061037a610ef1565b6040518082815260200191505060405180910390f35b34801561039c57600080fd5b506103bb60048036038101908080359060200190929190505050610ef7565b005b3480156103c957600080fd5b506103d2611056565b005b3480156103e057600080fd5b50610415600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110ce565b604051808215151515815260200191505060405180910390f35b34801561043b57600080fd5b50610470600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110ee565b6040518082815260200191505060405180910390f35b34801561049257600080fd5b5061049b611137565b005b3480156104a957600080fd5b506104ea600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506112d6565b005b3480156104f857600080fd5b5061050161138c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561054f57600080fd5b506105586113b1565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561059857808201518184015260208101905061057d565b50505050905090810190601f1680156105c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105df57600080fd5b50610608600480360381019080803590602001909291908035906020019092919050505061144f565b6040518082815260200191505060405180910390f35b34801561062a57600080fd5b50610669600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061146b565b604051808215151515815260200191505060405180910390f35b34801561068f57600080fd5b506106b860048036038101908080359060200190929190803590602001909291905050506116fe565b6040518082815260200191505060405180910390f35b3480156106da57600080fd5b506107036004803603810190808035906020019092919080359060200190929190505050611722565b6040518082815260200191505060405180910390f35b34801561072557600080fd5b5061072e611753565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561077c57600080fd5b506107d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611779565b6040518082815260200191505060405180910390f35b3480156107f357600080fd5b5061081c6004803603810190808035906020019092919080359060200190929190505050611800565b6040518082815260200191505060405180910390f35b34801561083e57600080fd5b50610873600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061181c565b005b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561090b5780601f106108e05761010080835404028352916020019161090b565b820191906000526020600020905b8154815290600101906020018083116108ee57829003601f168201915b505050505081565b60008082148061099f57506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156109aa57600080fd5b81600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600554905090565b600083600660009054906101000a900460ff1680610b0b5750600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515610b1657600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515610b5157600080fd5b82600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610c1c575082600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610c285750600083115b15610eb957610c76600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548461144f565b600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d3f600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548461144f565b600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e08600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611800565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150610ebe565b600091505b509392505050565b60086020528060005260406000206000915090505481565b600460009054906101000a900460ff1681565b60055481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f5457600080fd5b600082111515610f6357600080fd5b339050610faf600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361144f565b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ffe6005548361144f565b6005819055508073ffffffffffffffffffffffffffffffffffffffff167f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df7836040518082815260200191505060405180910390a25050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b157600080fd5b6001600660006101000a81548160ff021916908315150217905550565b60076020528060005260406000206000915054906101000a900460ff1681565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561119357600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561133157600080fd5b80600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114475780601f1061141c57610100808354040283529160200191611447565b820191906000526020600020905b81548152906001019060200180831161142a57829003601f168201915b505050505081565b600082821115151561146057600080fd5b818303905092915050565b600033600660009054906101000a900460ff16806114d25750600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15156114dd57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561151857600080fd5b82600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156115675750600083115b156116f2576115b5600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548461144f565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611641600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611800565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191506116f7565b600091505b5092915050565b6000808211151561170e57600080fd5b818381151561171957fe5b04905092915050565b600081830290506000831480611742575081838281151561173f57fe5b04145b151561174d57600080fd5b92915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000818301905082811015151561181657600080fd5b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561187757600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a723058202d5da6b610872fe2b1f1e08ce644791bf32b04d13a7b9860290b87ba0d73819f0029"
}