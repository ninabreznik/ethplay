{
  "address": "0xfeae531edae10e9248191f81ae483641d4e85cc0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "InfinityPool",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-19\n*/\n\npragma solidity ^0.4.25;\n\n/*******************************************************************************\n *\n * Copyright (c) 2019 Decentralization Authority MDAO.\n * Released under the MIT License.\n *\n * InfinityPool - A multi-tenant mining quarry for ANY ZeroCache token provider\n *                that wishes to offer their users a Proof-of-Work (PoW) reward \n *                system.\n *\n * \n *                Why InfinityPool Mining?\n *                ------------------------\n * \n *                A better model than ICOs and Airdrops, PoW mining is accepted as \n *                the MOST democratic distribution system available in crypto today.\n * \n *                To learn more, please visit:\n *                https://infinitypool.info\n * \n * Version 19.4.19\n *\n * https://d14na.org\n * [emailÂ protected]\n */\n\n\n/*******************************************************************************\n *\n * SafeMath\n */\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n\n/*******************************************************************************\n *\n * ERC Token Standard #20 Interface\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n */\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n/*******************************************************************************\n *\n * ApproveAndCallFallBack\n *\n * Contract function to receive approval and execute function in one call\n * (borrowed from MiniMeToken)\n */\ncontract ApproveAndCallFallBack {\n    function approveAndCall(address spender, uint tokens, bytes data) public;\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\n\n/*******************************************************************************\n *\n * Owned contract\n */\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n\n        emit OwnershipTransferred(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0);\n    }\n}\n\n\n/*******************************************************************************\n * \n * Zer0netDb Interface\n */\ncontract Zer0netDbInterface {\n    /* Interface getters. */\n    function getAddress(bytes32 _key) external view returns (address);\n    function getBool(bytes32 _key)    external view returns (bool);\n    function getBytes(bytes32 _key)   external view returns (bytes);\n    function getInt(bytes32 _key)     external view returns (int);\n    function getString(bytes32 _key)  external view returns (string);\n    function getUint(bytes32 _key)    external view returns (uint);\n\n    /* Interface setters. */\n    function setAddress(bytes32 _key, address _value) external;\n    function setBool(bytes32 _key, bool _value) external;\n    function setBytes(bytes32 _key, bytes _value) external;\n    function setInt(bytes32 _key, int _value) external;\n    function setString(bytes32 _key, string _value) external;\n    function setUint(bytes32 _key, uint _value) external;\n\n    /* Interface deletes. */\n    function deleteAddress(bytes32 _key) external;\n    function deleteBool(bytes32 _key) external;\n    function deleteBytes(bytes32 _key) external;\n    function deleteInt(bytes32 _key) external;\n    function deleteString(bytes32 _key) external;\n    function deleteUint(bytes32 _key) external;\n}\n\n\n/*******************************************************************************\n *\n * ZeroCache Interface\n */\ncontract ZeroCacheInterface {\n    function balanceOf(address _token, address _owner) public constant returns (uint balance);\n    function transfer(address _token, address _to, uint _tokens) external returns (bool success);\n    function transfer(address _token, address _from, address _to, uint _tokens, address _staekholder, uint _staek, uint _expires, uint _nonce, bytes _signature) external returns (bool success);\n}\n\n\n/*******************************************************************************\n *\n * @notice InfinityPool is a public storage for Mineable Crypto.\n *\n * @dev This is a multi-tenant quarry for \"Mineable\" ERC-918 tokens.\n *      https://eips.ethereum.org/EIPS/eip-918\n * \n *      Token Supply\n *      ------------\n *\n *      Owner will maintain 100% control over the token supply by using\n *      the `deposit` and `withdraw` functions to add / reduce the token supply.\n *      (NOTE: withdrawals are managed/transferred via the Minado.sol contract)\n * \n *      Pool Fees\n *      ---------\n * \n *      Upon deposit of an ERC-20 token, 1% is automatically transferred to \n *      the InfinityWell for community reward.\n */\ncontract InfinityPool is Owned {\n    using SafeMath for uint;\n\n    /* Initialize predecessor contract. */\n    address private _predecessor;\n\n    /* Initialize successor contract. */\n    address private _successor;\n    \n    /* Initialize revision number. */\n    uint private _revision;\n\n    /* Initialize Zer0net Db contract. */\n    Zer0netDbInterface private _zer0netDb;\n    \n    /**\n     * Set Namespace\n     * \n     * Provides a \"unique\" name for generating \"unique\" data identifiers,\n     * most commonly used as database \"key-value\" keys.\n     * \n     * NOTE: Use of `namespace` is REQUIRED when generating ANY & ALL\n     *       Zer0netDb keys; in order to prevent ANY accidental or\n     *       malicious SQL-injection vulnerabilities / attacks.\n     */\n    string private _namespace = 'infinitypool';\n\n    event Deposit(\n        address indexed token, \n        address owner, \n        uint tokens\n    );\n\n    event Transfer(\n        address indexed token, \n        address receiver, \n        uint tokens\n    );\n\n    /***************************************************************************\n     *\n     * Constructor\n     */\n    constructor() public {\n        /* Initialize Zer0netDb (eternal) storage database contract. */\n        // NOTE We hard-code the address here, since it should never change.\n        _zer0netDb = Zer0netDbInterface(0xE865Fe1A1A3b342bF0E2fcB11fF4E3BCe58263af);\n\n        /* Initialize (aname) hash. */\n        bytes32 hash = keccak256(abi.encodePacked('aname.', _namespace));\n\n        /* Set predecessor address. */\n        _predecessor = _zer0netDb.getAddress(hash);\n\n        /* Verify predecessor address. */\n        if (_predecessor != 0x0) {\n            /* Retrieve the last revision number (if available). */\n            uint lastRevision = InfinityPool(_predecessor).getRevision();\n            \n            /* Set (current) revision number. */\n            _revision = lastRevision + 1;\n        }\n    }\n\n    /**\n     * @dev Only allow access to an authorized Zer0net administrator.\n     */\n    modifier onlyAuthBy0Admin() {\n        /* Verify write access is only permitted to authorized accounts. */\n        require(_zer0netDb.getBool(keccak256(\n            abi.encodePacked(msg.sender, '.has.auth.for.', _namespace))) == true);\n\n        _;      // function code is inserted here\n    }\n\n    /**\n     * THIS CONTRACT DOES NOT ACCEPT DIRECT ETHER\n     */\n    function () public payable {\n        /* Cancel this transaction. */\n        revert('Oops! Direct payments are NOT permitted here.');\n    }\n\n\n    /***************************************************************************\n     * \n     * ACTIONS\n     * \n     */\n\n    /**\n     * Deposit\n     * \n     * Provides support for \"manual\" token deposits.\n     * \n     * NOTE: This function requires ZeroCache transfer authorization.\n     */\n    function deposit(\n        address _token,\n        address _from, \n        uint _tokens,\n        address _staekholder, \n        uint _staek, \n        uint _expires, \n        uint _nonce, \n        bytes _signature\n    ) external returns (bool success) {\n        /* Transfer the ERC-20 tokens into Pool. */\n        _zeroCache().transfer(\n            _token, \n            _from, \n            address(this), \n            _tokens, \n            _staekholder, \n            _staek, \n            _expires, \n            _nonce, \n            _signature\n        );\n\n        /* InfinityWell 1% token drop. */        \n        _wellDrop(_token, _tokens);\n\n        /* Broadcast event. */\n        emit Deposit(_token, _from, _tokens);\n\n        /* Return success. */\n        return true;\n    }\n    \n    /**\n     * (Irreversible) Well Drop\n     * \n     * A 1% contribution will be automatically \"dropped\" into the InfinityWell\n     * during each deposit into the InfinityPool.\n     */\n    function _wellDrop(\n        address _token,\n        uint _tokens\n    ) private returns (bool success) {\n        /* Set hash. */\n        bytes32 hash = keccak256('aname.infinitywell');\n            \n        /* Retrieve value from Zer0net Db. */\n        address infinityWell = _zer0netDb.getAddress(hash);\n\n        /* Calculate InifinityWell drop amount. */\n        // NOTE: This is fixed at 1% of token (deposit) amount.\n        uint dropAmount = uint(_tokens.div(100));\n        \n        /* Transfer the ERC-20 tokens into the InfinityWell. */\n        // NOTE: This transfer is irreversible.\n        _zeroCache().transfer(\n            _token, \n            infinityWell, \n            dropAmount\n        );\n\n        /* Return success. */\n        return true;\n    }\n    \n    /**\n     * Administrative Transfer\n     * \n     * NOTE: This will typically be called from an authorized,\n     *       open-source Zer0net contract.\n     * \n     * WARNING: This contract DOES NOT / WILL NOT have the ability to \n     *          transfer out non-ZeroCache tokens sent in erroneously.\n     */\n    function transfer(\n        address _token,\n        address _to, \n        uint _tokens\n    ) external onlyAuthBy0Admin returns (bool success) {\n        /* Make transfer. */\n        _zeroCache().transfer(_token, _to, _tokens);\n        \n        /* Broadcast event. */\n        emit Transfer(_token, _to, _tokens);\n\n        /* Return success. */\n        return true;\n    }\n\n\n    /***************************************************************************\n     * \n     * GETTERS\n     * \n     */\n\n    /**\n     * Get Revision (Number)\n     */\n    function getRevision() public view returns (uint) {\n        return _revision;\n    }\n\n    /**\n     * Get Predecessor (Address)\n     */\n    function getPredecessor() public view returns (address) {\n        return _predecessor;\n    }\n    \n    /**\n     * Get Successor (Address)\n     */\n    function getSuccessor() public view returns (address) {\n        return _successor;\n    }\n    \n\n    /***************************************************************************\n     * \n     * SETTERS\n     * \n     */\n\n    /**\n     * Set Successor\n     * \n     * This is the contract address that replaced this current instnace.\n     */\n    function setSuccessor(\n        address _newSuccessor\n    ) onlyAuthBy0Admin external returns (bool success) {\n        /* Set successor contract. */\n        _successor = _newSuccessor;\n        \n        /* Return success. */\n        return true;\n    }\n\n\n    /***************************************************************************\n     * \n     * INTERFACES\n     * \n     */\n\n    /**\n     * Supports Interface (EIP-165)\n     * \n     * (see: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md)\n     * \n     * NOTE: Must support the following conditions:\n     *       1. (true) when interfaceID is 0x01ffc9a7 (EIP165 interface)\n     *       2. (false) when interfaceID is 0xffffffff\n     *       3. (true) for any other interfaceID this contract implements\n     *       4. (false) for any other interfaceID\n     */\n    function supportsInterface(\n        bytes4 _interfaceID\n    ) external pure returns (bool) {\n        /* Initialize constants. */\n        bytes4 InvalidId = 0xffffffff;\n        bytes4 ERC165Id = 0x01ffc9a7;\n\n        /* Validate condition #2. */\n        if (_interfaceID == InvalidId) {\n            return false;\n        }\n\n        /* Validate condition #1. */\n        if (_interfaceID == ERC165Id) {\n            return true;\n        }\n        \n        // TODO Add additional interfaces here.\n        \n        /* Return false (for condition #4). */\n        return false;\n    }\n\n    /**\n     * ZeroCache Interface\n     *\n     * Retrieves the current ZeroCache interface,\n     * using the aname record from Zer0netDb.\n     */\n    function _zeroCache() private view returns (\n        ZeroCacheInterface zeroCache\n    ) {\n        /* Initialize hash. */\n        bytes32 hash = keccak256('aname.zerocache');\n\n        /* Retrieve value from Zer0net Db. */\n        address aname = _zer0netDb.getAddress(hash);\n\n        /* Initialize interface. */\n        zeroCache = ZeroCacheInterface(aname);\n    }\n}",
  "bytecode": "60c0604052600c60808190527f696e66696e697479706f6f6c000000000000000000000000000000000000000060a0908152620000409160069190620002ea565b503480156200004e57600080fd5b5060008054600160a060020a0319908116331782556005805490911673e865fe1a1a3b342bf0e2fcb11ff4e3bce58263af1790556040517f616e616d652e000000000000000000000000000000000000000000000000000060208201908152600680548493919291602601908390600260001960018316156101000201909116048015620001165780601f10620000f357610100808354040283529182019162000116565b820191906000526020600020905b81548152906001019060200180831162000101575b50509150506040516020818303038152906040526040518082805190602001908083835b602083106200015b5780518252601f1990920191602091820191016200013a565b51815160209384036101000a6000190180199092169116179052604080519290940182900382206005547f21f8a721000000000000000000000000000000000000000000000000000000008452600484018290529451909850600160a060020a0390941695506321f8a721945060248083019491935090918290030181600087803b158015620001ea57600080fd5b505af1158015620001ff573d6000803e3d6000fd5b505050506040513d60208110156200021657600080fd5b505160028054600160a060020a031916600160a060020a0392831617908190551615620002e257600260009054906101000a9004600160a060020a0316600160a060020a0316631316529d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620002aa57600080fd5b505af1158015620002bf573d6000803e3d6000fd5b505050506040513d6020811015620002d657600080fd5b50516001810160045590505b50506200038f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200032d57805160ff19168380011785556200035d565b828001600101855582156200035d579182015b828111156200035d57825182559160200191906001019062000340565b506200036b9291506200036f565b5090565b6200038c91905b808211156200036b576000815560010162000376565b90565b610cff806200039f6000396000f3006080604052600436106100955763ffffffff60e060020a60003504166301ffc9a7811461012257806310e5bff81461016d5780631316529d1461018e57806379ba5097146101b557806386d061a1146101cc5780638da5cb5b14610215578063beabacc814610246578063d4ee1d9014610270578063d9bccbf714610285578063e083619a1461029a578063f2fde38b146102af575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f4f6f70732120446972656374207061796d656e747320617265204e4f5420706560448201527f726d697474656420686572652e00000000000000000000000000000000000000606482015290519081900360840190fd5b34801561012e57600080fd5b506101597bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19600435166102d0565b604080519115158252519081900360200190f35b34801561017957600080fd5b50610159600160a060020a0360043516610363565b34801561019a57600080fd5b506101a361052f565b60408051918252519081900360200190f35b3480156101c157600080fd5b506101ca610535565b005b3480156101d857600080fd5b50610159600160a060020a0360048035821691602480358216926044359260643516916084359160a4359160c4359160e4359182019101356105bd565b34801561022157600080fd5b5061022a61073f565b60408051600160a060020a039092168252519081900360200190f35b34801561025257600080fd5b50610159600160a060020a036004358116906024351660443561074e565b34801561027c57600080fd5b5061022a6109e1565b34801561029157600080fd5b5061022a6109f0565b3480156102a657600080fd5b5061022a6109ff565b3480156102bb57600080fd5b506101ca600160a060020a0360043516610a0e565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff197f01ffc9a700000000000000000000000000000000000000000000000000000000838216821415610324576000925061035c565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff198481169082161415610357576001925061035c565b600092505b5050919050565b600554604051336c010000000000000000000000008102602083019081527f2e6861732e617574682e666f722e000000000000000000000000000000000000603484015260068054600095600160a060020a031694637ae1cfca949391604290910190839060026101006001831615026000190190911604801561041e5780601f106103fc57610100808354040283529182019161041e565b820191906000526020600020905b81548152906001019060200180831161040a575b5050925050506040516020818303038152906040526040518082805190602001908083835b602083106104625780518252601f199092019160209182019101610443565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff881660e060020a0283526004830152925160248083019650939450929083900301905081600087803b1580156104c357600080fd5b505af11580156104d7573d6000803e3d6000fd5b505050506040513d60208110156104ed57600080fd5b505115156001146104fd57600080fd5b5060038054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b60045490565b600154600160a060020a0316331461054c57600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b60006105c7610a54565b600160a060020a031663ded79eb88b8b308c8c8c8c8c8c8c6040518b63ffffffff1660e060020a028152600401808b600160a060020a0316600160a060020a031681526020018a600160a060020a0316600160a060020a0316815260200189600160a060020a0316600160a060020a0316815260200188815260200187600160a060020a0316600160a060020a0316815260200186815260200185815260200184815260200180602001828103825284848281815260200192508082843782019150509b505050505050505050505050602060405180830381600087803b1580156106b157600080fd5b505af11580156106c5573d6000803e3d6000fd5b505050506040513d60208110156106db57600080fd5b506106e890508a89610b20565b5060408051600160a060020a038b81168252602082018b90528251908d16927f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62928290030190a25060019998505050505050505050565b600054600160a060020a031681565b600554604051336c010000000000000000000000008102602083019081527f2e6861732e617574682e666f722e000000000000000000000000000000000000603484015260068054600095600160a060020a031694637ae1cfca94939160429091019083906002610100600183161502600019019091160480156108095780601f106107e7576101008083540402835291820191610809565b820191906000526020600020905b8154815290600101906020018083116107f5575b5050925050506040516020818303038152906040526040518082805190602001908083835b6020831061084d5780518252601f19909201916020918201910161082e565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff881660e060020a0283526004830152925160248083019650939450929083900301905081600087803b1580156108ae57600080fd5b505af11580156108c2573d6000803e3d6000fd5b505050506040513d60208110156108d857600080fd5b505115156001146108e857600080fd5b6108f0610a54565b604080517fbeabacc8000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301528681166024830152604482018690529151929091169163beabacc8916064808201926020929091908290030181600087803b15801561096557600080fd5b505af1158015610979573d6000803e3d6000fd5b505050506040513d602081101561098f57600080fd5b505060408051600160a060020a038581168252602082018590528251908716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a25060019392505050565b600154600160a060020a031681565b600354600160a060020a031690565b600254600160a060020a031690565b600054600160a060020a03163314610a2557600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b604080517f616e616d652e7a65726f636163686500000000000000000000000000000000008152815190819003600f0181206005547f21f8a72100000000000000000000000000000000000000000000000000000000835260048301829052925160009391928492600160a060020a0316916321f8a7219160248082019260209290919082900301818787803b158015610aed57600080fd5b505af1158015610b01573d6000803e3d6000fd5b505050506040513d6020811015610b1757600080fd5b50519392505050565b604080517f616e616d652e696e66696e69747977656c6c0000000000000000000000000000815281519081900360120181206005547f21f8a721000000000000000000000000000000000000000000000000000000008352600483018290529251600093919284928392600160a060020a03909116916321f8a72191602480830192602092919082900301818787803b158015610bbc57600080fd5b505af1158015610bd0573d6000803e3d6000fd5b505050506040513d6020811015610be657600080fd5b50519150610bfb85606463ffffffff610cb216565b9050610c05610a54565b604080517fbeabacc8000000000000000000000000000000000000000000000000000000008152600160a060020a0389811660048301528581166024830152604482018590529151929091169163beabacc8916064808201926020929091908290030181600087803b158015610c7a57600080fd5b505af1158015610c8e573d6000803e3d6000fd5b505050506040513d6020811015610ca457600080fd5b506001979650505050505050565b6000808211610cc057600080fd5b8183811515610ccb57fe5b0493925050505600a165627a7a72305820df4b927a02bebd630b4955fa1954176a5cbb9553ee4db25a4e00aee28a0bc2d60029"
}