{
  "address": "0xe1d4a7850e95e9c652b7309cdc9d950859d98673",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Candy",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-12\n*/\n\npragma solidity ^0.4.11;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev modifier to allow actions only when the contract IS paused\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev modifier to allow actions only when the contract IS NOT paused\n   */\n  modifier whenPaused {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused returns (bool) {\n    paused = true;\n    Pause();\n    return true;\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused returns (bool) {\n    paused = false;\n    Unpause();\n    return true;\n  }\n}\n\ncontract ERC20{\n\nbool public isERC20 = true;\n\nfunction balanceOf(address who) constant returns (uint256);\n\nfunction transfer(address _to, uint256 _value) returns (bool);\n\nfunction transferFrom(address _from, address _to, uint256 _value) returns (bool);\n\nfunction approve(address _spender, uint256 _value) returns (bool);\n\nfunction allowance(address _owner, address _spender) constant returns (uint256);\n\n}\n\n\n\ncontract Candy is Pausable {\n  ERC20 public erc20;\n  //uint256 public candy;\n\n  function Candy(address _address){\n        ERC20 candidateContract = ERC20(_address);\n        require(candidateContract.isERC20());\n        erc20 = candidateContract;\n  }\t\n  \n  function() external payable {\n        require(\n            msg.sender != address(0)\n        );\n      erc20.transfer(msg.sender,uint256(5000000000000000000)); \n      //THX! This donation will drive us. \n      //Each sender can only get 5 BUN per time.\n  }\n  \n  function withdrawBalance() external onlyOwner {\n        owner.transfer(this.balance);\n  }\n}",
  "bytecode": "60606040526000805460a060020a60ff0219169055341561001f57600080fd5b6040516020806105108339810160405280805160008054600160a060020a03191633600160a060020a0390811691909117825591935083925090821690632eb67f5390604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156100b057600080fd5b6102c65a03f115156100c157600080fd5b5050506040518051905015156100d657600080fd5b60018054600160a060020a031916600160a060020a03929092169190911790555061040a806101066000396000f3006060604052600436106100825763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633f4ba83a81146101345780635c975abb1461015b5780635fd8c7101461016e578063785e9e86146101835780638456cb59146101b25780638da5cb5b146101c5578063f2fde38b146101d8575b33600160a060020a0316151561009757600080fd5b600154600160a060020a031663a9059cbb33674563918244f400006000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561011757600080fd5b6102c65a03f1151561012857600080fd5b50505060405180515050005b341561013f57600080fd5b6101476101f7565b604051901515815260200160405180910390f35b341561016657600080fd5b61014761027b565b341561017957600080fd5b61018161028b565b005b341561018e57600080fd5b6101966102e1565b604051600160a060020a03909116815260200160405180910390f35b34156101bd57600080fd5b6101476102f0565b34156101d057600080fd5b610196610379565b34156101e357600080fd5b610181600160a060020a0360043516610388565b6000805433600160a060020a0390811691161461021357600080fd5b60005460a060020a900460ff16151561022b57600080fd5b6000805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a150600190565b60005460a060020a900460ff1681565b60005433600160a060020a039081169116146102a657600080fd5b600054600160a060020a039081169030163180156108fc0290604051600060405180830381858888f1935050505015156102df57600080fd5b565b600154600160a060020a031681565b6000805433600160a060020a0390811691161461030c57600080fd5b60005460a060020a900460ff161561032357600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a150600190565b600054600160a060020a031681565b60005433600160a060020a039081169116146103a357600080fd5b600160a060020a038116156103db576000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b505600a165627a7a7230582025cc3d6491e5c52f26de35e4b25d7f898971ed11e830320fb3c45ce9c0b9d1a700290000000000000000000000008ce2236bb743ef077409b43e541eaa4f5b928db3",
  "constructorArguments": "0000000000000000000000008ce2236bb743ef077409b43e541eaa4f5b928db3"
}