{
  "address": "0xb898CEaE9B41fF87b2bC22a41E63755604fE4771",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoLott",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-09\n*/\n\npragma solidity >=0.5.0 <0.7.0;\n\n/**\nOwned contract\n */\ncontract Owned {\n  address payable public owner;\n  address payable public newOwner;\n\n  event OwnershipTransferred(address indexed _from, address indexed _to);\n\n  constructor () public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address payable _newOwner) public onlyOwner {\n    newOwner = _newOwner;\n  }\n\n  function acceptOwnership() public {\n    require(msg.sender == newOwner);\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n    newOwner = address(0);\n  }\n}\n\ncontract CryptoLott is Owned {\n\n  struct Player {\n    address payable playerAddress;\n    string playerName;\n    uint64[] playerNumbers;\n  }\n\n  enum State {\n    Accepting,\n    Finished\n  }\n\n  uint64 private constant UINT64_MAX = ~uint64(0);\n\n  State private state;\n  Player[] private playerList;\n  address[] private winnerAddressList;\n  uint64 private playerInSession;\n  uint64 private lastLuckyNumber;\n  uint256 private totalFund;\n  uint256 private lastTotalFund;\n\n  address payable private charityAddress;\n  uint256 private minPrice;\n  uint64 private maxPlayerRandom;\n  uint64 private playerRandomPadding;\n  uint64 private maxLuckyNumberRandom;\n  uint64 private luckyNumberRandomPadding;\n  uint8 private charityRate;\n  uint8 private winnerRate;\n  bool private contractActive;\n  bool private hasWinner;\n\n  uint public startRound;\n  uint public endRound;\n\n  // @anomous: Event\n  event PlayerRegisterEvent(address indexed _playerAddress);\n  event GameSessionBeginEvent(uint256 _minPrice, uint64 _playerInSession, uint8 _charityRate, uint8 _winnerRate, uint64 _luckyNumberRange);\n  event GameSessionEndEvent(address[] indexed _winnerAddressList, uint64 _luckyNumber, uint256 _totalReward);\n\n  constructor () public {\n    hasWinner = true;\n    contractActive = true;\n    charityAddress = owner;\n    minPrice = 0.01 ether;\n    maxPlayerRandom = 2;\n    playerRandomPadding = 5;\n    maxLuckyNumberRandom = 255;\n    luckyNumberRandomPadding = 0;\n    charityRate = 15;\n    winnerRate = 60;\n    //-------------\n    gameInit();\n  }\n\n  function enableContract(bool status) public onlyOwner {\n    contractActive = status;\n    if (status == false && state == State.Accepting && totalFund > 0 && playerList.length > 0) {\n      finishGame();\n    } else if (status == true) {\n      gameInit();\n    }\n  }\n\n  function upCharityAddress(address payable _charityAddress) public onlyOwner {\n    charityAddress = _charityAddress;\n  }\n\n  function config(uint256 _minPrice, uint64 _maxPlayerRandom,\n    uint64 _maxLuckyNumberRandom, uint8 _charityRate, uint8 _winnerRate) public onlyOwner {\n    require(contractActive == false, \"Need to disable the contract first\");\n    require(_minPrice >= 0.005 ether, \"minPrice > 0.005\");\n    require(_maxPlayerRandom > 1, \"maxPlayerRandom >= 2\");\n    require(_maxLuckyNumberRandom > 9, \"maxLuckyNumberRandom >= 10\");\n    minPrice = _minPrice;\n    maxPlayerRandom = _maxPlayerRandom;\n    playerRandomPadding = 5;\n    maxLuckyNumberRandom = _maxLuckyNumberRandom;\n    luckyNumberRandomPadding = 0;\n    charityRate = _charityRate;\n    winnerRate = _winnerRate;\n  }\n\n  function gameInit() private {\n    require(contractActive == true, \"Contract was disabled\");\n    if (hasWinner) {\n      totalFund = 0;\n      hasWinner = false;\n    }\n    startRound = now;\n    playerList.length = 0;\n    playerInSession = randomMaxPlayer();\n    state = State.Accepting;\n    emit GameSessionBeginEvent(minPrice, playerInSession, charityRate, winnerRate, maxLuckyNumberRandom);\n  }\n\n  // Register player\n  function playerRegister(string memory name, uint64[] memory numbers) payable public {\n    require(contractActive == true, \"Contract was disabled\");\n    require(state == State.Accepting, \"Game state is not valid\");\n    require(numbers.length > 0, \"At least 1 number\");\n    require(msg.value >= minPrice * numbers.length, \"Value is not valid\");\n\n    for (uint i = 0; i < playerList.length; i++) {\n      require(playerList[i].playerAddress != msg.sender);\n      for (uint j = 0; j < playerList[i].playerNumbers.length; j++) {\n        require(playerList[i].playerNumbers[j] <= maxLuckyNumberRandom);\n      }\n    }\n\n    totalFund += msg.value;\n    Player memory player = Player(msg.sender, name, numbers);\n    playerList.push(player);\n    emit PlayerRegisterEvent(player.playerAddress);\n\n    if (playerList.length >= playerInSession) {\n      finishGame();\n\n      if (contractActive) {\n        // Init new game session\n        gameInit();\n      }\n    }\n  }\n\n  function getMinPrice() public view returns (uint256) {\n    return uint256(minPrice);\n  }\n\n  function getCountPlayer() public view returns (uint64) {\n    return uint64(playerList.length);\n  }\n\n  function getMaxPlayer() public view returns (uint64) {\n    return uint64(playerInSession);\n  }\n\n  function getMaxLuckyRandomNumber() public view returns (uint64) {\n    return uint64(maxLuckyNumberRandom);\n  }\n\n  function getLastTotalFund() public view returns (uint256) {\n    return uint256(lastTotalFund);\n  }\n\n  function getLastLuckyNumber() public view returns (uint64) {\n    return uint64(lastLuckyNumber);\n  }\n\n  function getCurrentFund() public view returns (uint256) {\n    return uint256(totalFund);\n  }\n\n  function getCharityAddress() public view returns (address) {\n    return address(charityAddress);\n  }\n\n  function getOwnerAddress() public view returns (address) {\n    return address(owner);\n  }\n\n  function getPlayerInfo(address playerAddress) public view returns (string memory playerName, uint64[] memory playerNumbers) {\n    Player memory player;\n    for (uint i = 0; i < playerList.length; i++) {\n      if (playerList[i].playerAddress == playerAddress) {\n        player = playerList[i];\n        break;\n      }\n    }\n    return (player.playerName, player.playerNumbers);\n  }\n\n  function finishGame() private {\n    state = State.Finished;\n    // Finish session && find winner\n    lastTotalFund = totalFund;\n    lastLuckyNumber = randomLuckyNumber();\n\n    winnerAddressList.length = 0;\n    // Determine winner\n    for (uint i = 0; i < playerList.length; i++) {\n      for (uint j = 0; j < playerList[i].playerNumbers.length; j++) {\n        if (playerList[i].playerNumbers[j] == lastLuckyNumber) {\n          winnerAddressList.push(playerList[i].playerAddress);\n        }\n      }\n    }\n\n    // Distribute Funds\n    uint256 winnerFunds = 0;\n    bool success = false;\n    bytes memory _;\n    if (winnerAddressList.length > 0) {\n      uint256 winnerFund = totalFund * winnerRate / 100 / winnerAddressList.length;\n      for (uint i = 0; i < winnerAddressList.length; i++) {\n        (success, _) = winnerAddressList[i].call.value(winnerFund).gas(20317)(\"\");\n        if (!success) {\n          revert();\n        }\n        winnerFunds += winnerFund;\n      }\n      hasWinner = true;\n    } else {\n      winnerFunds = totalFund * 50 / 100;\n    }\n\n    uint256 charityFund = totalFund * charityRate / 100;\n    if (!hasWinner) {\n      charityFund += totalFund * 5 / 100;\n    }\n\n    (success, _) = charityAddress.call.value(charityFund).gas(20317)(\"\");\n    if (!success) {\n      revert();\n    }\n    (success, _) = owner.call.value(totalFund - winnerFunds - charityFund).gas(20317)(\"\");\n    if (!success) {\n      revert();\n    }\n    totalFund = winnerFunds;\n\n    endRound = now;\n    if (endRound - startRound < 2 days) {\n      if (playerRandomPadding < UINT64_MAX) playerRandomPadding ++;\n      if (luckyNumberRandomPadding < UINT64_MAX) luckyNumberRandomPadding ++;\n      if (maxPlayerRandom < 1000) maxPlayerRandom ++;\n    } else if (playerRandomPadding > 5) {\n      playerRandomPadding --;\n    }\n\n    emit GameSessionEndEvent(winnerAddressList, lastLuckyNumber, lastTotalFund);\n  }\n\n  function toBytes(uint256 x) internal pure returns (bytes memory b) {\n    b = new bytes(32);\n    assembly {mstore(add(b, 32), x)}\n  }\n\n  function random() private view returns (uint64) {\n    uint64 randomNumber = uint64(uint256(keccak256(toBytes(block.timestamp + block.difficulty))));\n    for (uint i = 0; i < playerList.length; i++) {\n      for (uint j = 0; j < playerList[i].playerNumbers.length; j++) {\n        randomNumber ^= playerList[i].playerNumbers[j];\n      }\n    }\n    return randomNumber;\n  }\n\n  function randomLuckyNumber() private view returns (uint64) {\n    return random() % (maxLuckyNumberRandom + 1 + luckyNumberRandomPadding);\n  }\n\n  function randomMaxPlayer() private view returns (uint64) {\n    return (random() % (maxPlayerRandom + 1)) + playerRandomPadding;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"getOwnerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCharityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastTotalFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxLuckyRandomNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"getPlayerInfo\",\"outputs\":[{\"name\":\"playerName\",\"type\":\"string\"},{\"name\":\"playerNumbers\",\"type\":\"uint64[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_charityAddress\",\"type\":\"address\"}],\"name\":\"upCharityAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"_maxPlayerRandom\",\"type\":\"uint64\"},{\"name\":\"_maxLuckyNumberRandom\",\"type\":\"uint64\"},{\"name\":\"_charityRate\",\"type\":\"uint8\"},{\"name\":\"_winnerRate\",\"type\":\"uint8\"}],\"name\":\"config\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCountPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"enableContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastLuckyNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"numbers\",\"type\":\"uint64[]\"}],\"name\":\"playerRegister\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"PlayerRegisterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_playerInSession\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"_charityRate\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_winnerRate\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_luckyNumberRange\",\"type\":\"uint64\"}],\"name\":\"GameSessionBeginEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_winnerAddressList\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"_luckyNumber\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"_totalReward\",\"type\":\"uint256\"}],\"name\":\"GameSessionEndEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600a60036101000a81548160ff0219169083151502179055506001600a60026101000a81548160ff0219169083151502179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550662386f26fc100006008819055506002600960006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506005600960086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060ff600960106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506000600960186101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600f600a60006101000a81548160ff021916908360ff160217905550603c600a60016101000a81548160ff021916908360ff160217905550620001f1620001f7640100000000026401000000009004565b62000700565b60011515600a60029054906101000a900460ff16151514151562000283576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f436f6e7472616374207761732064697361626c6564000000000000000000000081525060200191505060405180910390fd5b600a60039054906101000a900460ff1615620002bd5760006005819055506000600a60036101000a81548160ff0219169083151502179055505b42600b819055506000600281620002d59190620005c0565b50620002ef62000415640100000000026401000000009004565b600460006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156200033757fe5b02179055507ffdf2bc4b463433ab95187f69622b0d3e4305cbcf27c35e8dfb9175adaef97a6d600854600460009054906101000a900467ffffffffffffffff16600a60009054906101000a900460ff16600a60019054906101000a900460ff16600960109054906101000a900467ffffffffffffffff16604051808681526020018567ffffffffffffffff1667ffffffffffffffff1681526020018460ff1660ff1681526020018360ff1660ff1681526020018267ffffffffffffffff1667ffffffffffffffff1681526020019550505050505060405180910390a1565b6000600960089054906101000a900467ffffffffffffffff166001600960009054906101000a900467ffffffffffffffff160167ffffffffffffffff166200046b62000486640100000000026401000000009004565b67ffffffffffffffff168115156200047f57fe5b0601905090565b600080620004a54442016200057b640100000000026401000000009004565b8051906020012060019004905060008090505b600280549050811015620005735760008090505b600282815481101515620004dc57fe5b90600052602060002090600302016002018054905081101562000564576002828154811015156200050957fe5b9060005260206000209060030201600201818154811015156200052857fe5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff16831892508080600101915050620004cc565b508080600101915050620004b8565b508091505090565b606060206040519080825280601f01601f191660200182016040528015620005b25781602001600182028038833980820191505090505b509050816020820152919050565b815481835581811115620005f057600302816003028360005260206000209182019101620005ef9190620005f5565b5b505050565b6200065f91905b808211156200065b57600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006200063f919062000662565b600282016000620006519190620006ae565b50600301620005fc565b5090565b90565b50805460018160011615610100020316600290046000825580601f106200068a5750620006ab565b601f016020900490600052602060002090810190620006aa9190620006d8565b5b50565b508054600082556003016004900490600052602060002090810190620006d59190620006d8565b50565b620006fd91905b80821115620006f9576000816000905550600101620006df565b5090565b90565b61272180620007106000396000f3fe608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630c4f65bd14610117578063196f65d31461016e5780631ad06393146101ad57806327de87941461020457806345e0084a1461022f57806355e3f0861461026e578063593284011461029957806367119e06146103ab578063749aa2d9146103fc57806375292dc81461042757806379ba5097146104a45780638da5cb5b146104bb578063a7a5538f14610512578063b5c77ec914610551578063cb2face91461058e578063d4ee1d90146105cd578063e31a811614610624578063e89de8be1461064f578063f2d673341461079e578063f2fde38b146107c9575b600080fd5b34801561012357600080fd5b5061012c61081a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561017a57600080fd5b50610183610843565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b3480156101b957600080fd5b506101c2610861565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561021057600080fd5b5061021961088b565b6040518082815260200191505060405180910390f35b34801561023b57600080fd5b50610244610895565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b34801561027a57600080fd5b506102836108b3565b6040518082815260200191505060405180910390f35b3480156102a557600080fd5b506102e8600480360360208110156102bc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108b9565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561032c578082015181840152602081019050610311565b50505050905090810190601f1680156103595780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019060200280838360005b8381101561039557808201518184015260208101905061037a565b5050505090500194505050505060405180910390f35b3480156103b757600080fd5b506103fa600480360360208110156103ce57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b27565b005b34801561040857600080fd5b50610411610bc6565b6040518082815260200191505060405180910390f35b34801561043357600080fd5b506104a2600480360360a081101561044a57600080fd5b8101908080359060200190929190803567ffffffffffffffff169060200190929190803567ffffffffffffffff169060200190929190803560ff169060200190929190803560ff169060200190929190505050610bcc565b005b3480156104b057600080fd5b506104b9610f45565b005b3480156104c757600080fd5b506104d06110e4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561051e57600080fd5b50610527611109565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b34801561055d57600080fd5b5061058c6004803603602081101561057457600080fd5b81019080803515159060200190929190505050611116565b005b34801561059a57600080fd5b506105a361120f565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b3480156105d957600080fd5b506105e261122d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561063057600080fd5b50610639611253565b6040518082815260200191505060405180910390f35b61079c6004803603604081101561066557600080fd5b810190808035906020019064010000000081111561068257600080fd5b82018360208201111561069457600080fd5b803590602001918460018302840111640100000000831117156106b657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561071957600080fd5b82018360208201111561072b57600080fd5b8035906020019184602083028401116401000000008311171561074d57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929050505061125d565b005b3480156107aa57600080fd5b506107b3611784565b6040518082815260200191505060405180910390f35b3480156107d557600080fd5b50610818600480360360208110156107ec57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061178e565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600460009054906101000a900467ffffffffffffffff16905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600654905090565b6000600960109054906101000a900467ffffffffffffffff16905090565b600b5481565b6060806108c46123f1565b60008090505b600280549050811015610b0c578473ffffffffffffffffffffffffffffffffffffffff166002828154811015156108fd57fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610aff5760028181548110151561095a57fe5b9060005260206000209060030201606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a635780601f10610a3857610100808354040283529160200191610a63565b820191906000526020600020905b815481529060010190602001808311610a4657829003601f168201915b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610aef57602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff1681526020019060080190602082600701049283019260010382029150808411610aaa5790505b5050505050815250509150610b0c565b80806001019150506108ca565b50806020015181604001518191508090509250925050915091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b8257600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600c5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c2757600080fd5b60001515600a60029054906101000a900460ff161515141515610cd8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f4e65656420746f2064697361626c652074686520636f6e74726163742066697281526020017f737400000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6611c37937e080008510151515610d57576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f6d696e5072696365203e20302e3030350000000000000000000000000000000081525060200191505060405180910390fd5b60018467ffffffffffffffff16111515610dd9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6d6178506c6179657252616e646f6d203e3d203200000000000000000000000081525060200191505060405180910390fd5b60098367ffffffffffffffff16111515610e5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f6d61784c75636b794e756d62657252616e646f6d203e3d20313000000000000081525060200191505060405180910390fd5b8460088190555083600960006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506005600960086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555082600960106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506000600960186101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081600a60006101000a81548160ff021916908360ff16021790555080600a60016101000a81548160ff021916908360ff1602179055505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fa157600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600280549050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561117157600080fd5b80600a60026101000a81548160ff021916908315150217905550600015158115151480156111c45750600060018111156111a757fe5b600160149054906101000a900460ff1660018111156111c257fe5b145b80156111d257506000600554115b80156111e357506000600280549050115b156111f5576111f061182d565b61120c565b60011515811515141561120b5761120a61200a565b5b5b50565b6000600460089054906101000a900467ffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600854905090565b60011515600a60029054906101000a900460ff1615151415156112e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f436f6e7472616374207761732064697361626c6564000000000000000000000081525060200191505060405180910390fd5b600060018111156112f557fe5b600160149054906101000a900460ff16600181111561131057fe5b141515611385576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f47616d65207374617465206973206e6f742076616c696400000000000000000081525060200191505060405180910390fd5b600081511115156113fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4174206c656173742031206e756d62657200000000000000000000000000000081525060200191505060405180910390fd5b805160085402341015151561147b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f56616c7565206973206e6f742076616c6964000000000000000000000000000081525060200191505060405180910390fd5b60008090505b6002805490508110156115e4573373ffffffffffffffffffffffffffffffffffffffff166002828154811015156114b457fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561150957600080fd5b60008090505b60028281548110151561151e57fe5b9060005260206000209060030201600201805490508110156115d657600960109054906101000a900467ffffffffffffffff1667ffffffffffffffff1660028381548110151561156a57fe5b90600052602060002090600302016002018281548110151561158857fe5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff16111515156115c957600080fd5b808060010191505061150f565b508080600101915050611481565b50346005600082825401925050819055506115fd6123f1565b6060604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381525090506002819080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906116c2929190612429565b5060408201518160020190805190602001906116df9291906124a9565b50505050806000015173ffffffffffffffffffffffffffffffffffffffff167f14ef9390b146c40dce0e3b8c9e5c9286fe8a07b054f852e06fe9e2efc28f7e3d60405160405180910390a2600460009054906101000a900467ffffffffffffffff1667ffffffffffffffff1660028054905010151561177f5761176061182d565b600a60029054906101000a900460ff161561177e5761177d61200a565b5b5b505050565b6000600554905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117e957600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60018060146101000a81548160ff0219169083600181111561184b57fe5b0217905550600554600681905550611861612212565b600460086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060006003816118989190612565565b5060008090505b600280549050811015611a275760008090505b6002828154811015156118c157fe5b906000526020600020906003020160020180549050811015611a1957600460089054906101000a900467ffffffffffffffff1667ffffffffffffffff1660028381548110151561190d57fe5b90600052602060002090600302016002018281548110151561192b57fe5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff161415611a0c57600360028381548110151561197657fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b80806001019150506118b2565b50808060010191505061189f565b5060008090506000809050606060006003805490501115611b765760006003805490506064600a60019054906101000a900460ff1660ff1660055402811515611a6c57fe5b04811515611a7657fe5b04905060008090505b600380549050811015611b5457600381815481101515611a9b57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682614f5d90604051806000019050600060405180830381858888f193505050503d8060008114611b28576040519150601f19603f3d011682016040523d82523d6000602084013e611b2d565b606091505b508094508195505050831515611b4257600080fd5b81850194508080600101915050611a7f565b506001600a60036101000a81548160ff02191690831515021790555050611b8b565b6064603260055402811515611b8757fe5b0492505b60006064600a60009054906101000a900460ff1660ff1660055402811515611baf57fe5b049050600a60039054906101000a900460ff161515611bde5760646005805402811515611bd857fe5b04810190505b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681614f5d90604051806000019050600060405180830381858888f193505050503d8060008114611c63576040519150601f19603f3d011682016040523d82523d6000602084013e611c68565b606091505b508093508194505050821515611c7d57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681856005540303614f5d90604051806000019050600060405180830381858888f193505050503d8060008114611d07576040519150601f19603f3d011682016040523d82523d6000602084013e611d0c565b606091505b508093508194505050821515611d2157600080fd5b8360058190555042600c819055506202a300600b54600c54031015611eaf5760001967ffffffffffffffff16600960089054906101000a900467ffffffffffffffff1667ffffffffffffffff161015611dbc576009600881819054906101000a900467ffffffffffffffff168092919060010191906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505b60001967ffffffffffffffff16600960189054906101000a900467ffffffffffffffff1667ffffffffffffffff161015611e38576009601881819054906101000a900467ffffffffffffffff168092919060010191906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505b6103e8600960009054906101000a900467ffffffffffffffff1667ffffffffffffffff161015611eaa576009600081819054906101000a900467ffffffffffffffff168092919060010191906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505b611f22565b6005600960089054906101000a900467ffffffffffffffff1667ffffffffffffffff161115611f21576009600881819054906101000a900467ffffffffffffffff16809291906001900391906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505b5b6003604051808280548015611f8c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611f42575b505091505060405180910390207fa06a0572fcae48117f79772b56e393d8a07cb47bffa09a171c665a2145537524600460089054906101000a900467ffffffffffffffff16600654604051808367ffffffffffffffff1667ffffffffffffffff1681526020018281526020019250505060405180910390a250505050565b60011515600a60029054906101000a900460ff161515141515612095576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f436f6e7472616374207761732064697361626c6564000000000000000000000081525060200191505060405180910390fd5b600a60039054906101000a900460ff16156120ce5760006005819055506000600a60036101000a81548160ff0219169083151502179055505b42600b8190555060006002816120e49190612591565b506120ed612271565b600460006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506000600160146101000a81548160ff0219169083600181111561213457fe5b02179055507ffdf2bc4b463433ab95187f69622b0d3e4305cbcf27c35e8dfb9175adaef97a6d600854600460009054906101000a900467ffffffffffffffff16600a60009054906101000a900460ff16600a60019054906101000a900460ff16600960109054906101000a900467ffffffffffffffff16604051808681526020018567ffffffffffffffff1667ffffffffffffffff1681526020018460ff1660ff1681526020018360ff1660ff1681526020018267ffffffffffffffff1667ffffffffffffffff1681526020019550505050505060405180910390a1565b6000600960189054906101000a900467ffffffffffffffff166001600960109054906101000a900467ffffffffffffffff16010167ffffffffffffffff166122586122d0565b67ffffffffffffffff1681151561226b57fe5b06905090565b6000600960089054906101000a900467ffffffffffffffff166001600960009054906101000a900467ffffffffffffffff160167ffffffffffffffff166122b66122d0565b67ffffffffffffffff168115156122c957fe5b0601905090565b6000806122de4442016123ad565b8051906020012060019004905060008090505b6002805490508110156123a55760008090505b60028281548110151561231357fe5b9060005260206000209060030201600201805490508110156123975760028281548110151561233e57fe5b90600052602060002090600302016002018181548110151561235c57fe5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff16831892508080600101915050612304565b5080806001019150506122f1565b508091505090565b606060206040519080825280601f01601f1916602001820160405280156123e35781602001600182028038833980820191505090505b509050816020820152919050565b606060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061246a57805160ff1916838001178555612498565b82800160010185558215612498579182015b8281111561249757825182559160200191906001019061247c565b5b5090506124a591906125c3565b5090565b828054828255906000526020600020906003016004900481019282156125545791602002820160005b8382111561251e57835183826101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555092602001926008016020816007010492830192600103026124d2565b80156125525782816101000a81549067ffffffffffffffff021916905560080160208160070104928301926001030261251e565b505b50905061256191906125e8565b5090565b81548183558181111561258c5781836000526020600020918201910161258b91906125c3565b5b505050565b8154818355818111156125be576003028160030283600052602060002091820191016125bd919061261f565b5b505050565b6125e591905b808211156125e15760008160009055506001016125c9565b5090565b90565b61261c91905b8082111561261857600081816101000a81549067ffffffffffffffff0219169055506001016125ee565b5090565b90565b61268291905b8082111561267e57600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006126659190612685565b60028201600061267591906126cd565b50600301612625565b5090565b90565b50805460018160011615610100020316600290046000825580601f106126ab57506126ca565b601f0160209004906000526020600020908101906126c991906125c3565b5b50565b5080546000825560030160049004906000526020600020908101906126f291906125c3565b5056fea165627a7a72305820e4247c49c75b650795932537155115ac4bce36d223e7a498104599b8a832b64b0029"
}