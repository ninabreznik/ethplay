{
  "address": "0xbc9395973bd35a3b4bd924f050d2778c07506ecb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GreedTokenICO",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-06\n*/\n\npragma solidity ^0.4.15;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Math\n * @dev Assorted math operations\n */\n\nlibrary Math {\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\ncontract GreedTokenICO is StandardToken, Ownable {\n    using SafeMath for uint256;\n    using Math for uint256;\n\n    string public name = \"GREED TOKEN\";\n    string public symbol = \"GREED\";\n    uint256 public decimals = 18;\n\n    uint256 public constant EXCHANGE_RATE = 700; \n    uint256 constant TOP_MULT = 1000 * (uint256(10) ** decimals);\n    uint256 public bonusMultiplier = 1000 * (uint256(10) ** decimals);\n    \n    uint256 public totalSupply = 3140000000 * (uint256(10) ** decimals);\n    uint256 public startTimestamp = 1510398671; // timestamp after which ICO will start\n    uint256 public durationSeconds = 2682061; // up to 2017-12-12 12:12:12\n\n    address public icoWallet = 0xf34175829b0fc596814009df978c77b5cb47b24f;\n\taddress public vestContract = 0xfbadbf0a1296d2da94e59d76107c61581d393196;\t\t\n\n    uint256 public totalRaised; // total ether raised (in wei)\n    uint256 public totalContributors;\n    uint256 public totalTokensSold;\n\n    uint256 public icoSupply;\n    uint256 public vestSupply;\n    \n    bool public icoOpen = false;\n    bool public icoFinished = false;\n\n\n    function GreedTokenICO () public {\n        // Supply of tokens to be distributed \n        icoSupply = totalSupply.mul(10).div(100); // 10% of supply\n        vestSupply = totalSupply.mul(90).div(100); // 90% of supply\n        \n        // Transfer the tokens to ICO and Vesting Contract\n        // Other tokens will be vested at the end of ICO\n        balances[icoWallet] = icoSupply;\n        balances[vestContract] = vestSupply;\n         \n        Transfer(0x0, icoWallet, icoSupply);\n        Transfer(0x0, vestContract, vestSupply);\n    }\n\n    function() public isIcoOpen payable {\n        require(msg.value > 0);\n        \n        uint256 valuePlus = 50000000000000000; // 0.05 ETH\n        uint256 ONE_ETH = 1000000000000000000;\n        uint256 tokensLeft = balances[icoWallet];\n        uint256 ethToPay = msg.value;\n        uint256 tokensBought;\n\n        if (msg.value >= valuePlus) {\n            tokensBought = msg.value.mul(EXCHANGE_RATE).mul(bonusMultiplier).div(ONE_ETH);\n\t        if (tokensBought > tokensLeft) {\n\t\t        ethToPay = tokensLeft.mul(ONE_ETH).div(bonusMultiplier).div(EXCHANGE_RATE);\n\t\t        tokensBought = tokensLeft;\n\t\t        icoFinished = true;\n\t\t        icoOpen = false;\n\t        }\n\t\t} else {\n            tokensBought = msg.value.mul(EXCHANGE_RATE);\n\t        if (tokensBought > tokensLeft) {\n\t\t        ethToPay = tokensLeft.div(EXCHANGE_RATE);\n\t\t        tokensBought = tokensLeft;\n\t\t        icoFinished = true;\n\t\t        icoOpen = false;\n\t        }\n\t\t}\n\n        icoWallet.transfer(ethToPay);\n        totalRaised = totalRaised.add(ethToPay);\n        totalContributors = totalContributors.add(1);\n        totalTokensSold = totalTokensSold.add(tokensBought);\n\n        balances[icoWallet] = balances[icoWallet].sub(tokensBought);\n        balances[msg.sender] = balances[msg.sender].add(tokensBought);\n        Transfer(icoWallet, msg.sender, tokensBought);\n\n        uint256 refund = msg.value.sub(ethToPay);\n        if (refund > 0) {\n            msg.sender.transfer(refund);\n        }\n\n        bonusMultiplier = TOP_MULT.sub(totalRaised);\n\n        if (bonusMultiplier < ONE_ETH) {\n\t\t        icoFinished = true;\n\t\t        icoOpen = false;\n        }\n        \n\n    }\n\n    function transfer(address _to, uint _value) public isIcoFinished returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public isIcoFinished returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    modifier isIcoOpen() {\n        uint256 blocktime = now;\n\n        require(icoFinished == false);        \n        require(blocktime >= startTimestamp);\n        require(blocktime <= (startTimestamp + durationSeconds));\n        require(totalTokensSold < icoSupply);\n\n        if (icoOpen == false && icoFinished == false) {\n            icoOpen = true;\n        }\n\n        _;\n    }\n\n    modifier isIcoFinished() {\n        uint256 blocktime = now;\n        \n        require(blocktime >= startTimestamp);\n        require(icoFinished == true || totalTokensSold >= icoSupply || (blocktime >= (startTimestamp + durationSeconds)));\n        if (icoFinished == false) {\n            icoFinished = true;\n            icoOpen = false;\n        }\n        _;\n    }\n    \n    function endICO() public isIcoFinished onlyOwner {\n    \n        uint256 tokensLeft;\n        \n        // Tokens left will be transfered to second token sale\n        tokensLeft = balances[icoWallet];\n\t\tbalances[vestContract] = balances[vestContract].add(tokensLeft);\n\t\tvestSupply = vestSupply.add(tokensLeft);\n\t\tbalances[icoWallet] = 0;\n        Transfer(icoWallet, vestContract, tokensLeft);\n    }\n    \n}",
  "bytecode": "606060405260408051908101604052600b81527f475245454420544f4b454e000000000000000000000000000000000000000000602082015260049080516200004d92916020019062000289565b506040805190810160405260058082527f475245454400000000000000000000000000000000000000000000000000000060208301529080516200009692916020019062000289565b5060126006819055683635c9adc5dea000006007556b0a2558dd148992aac4000000600855635a06dacf6009556228eccd600a55600b8054600160a060020a031990811673f34175829b0fc596814009df978c77b5cb47b24f17909155600c805490911673fbadbf0a1296d2da94e59d76107c61581d393196179055805461ffff1916905534156200012757600080fd5b60038054600160a060020a03191633600160a060020a03161790556008546200017d906064906200016890600a640100000000620002438102620007e31704565b906401000000006200080e6200027182021704565b601055600854620001a6906064906200016890605a640100000000620007e36200024382021704565b601190815560108054600b8054600160a060020a03908116600090815260016020526040808220949094559454600c54821686528386205590549254921692916000805160206200150a833981519152915190815260200160405180910390a3600c54601154600160a060020a03909116906000906000805160206200150a8339815191529060405190815260200160405180910390a36200032e565b60008282028315806200026157508284828115156200025e57fe5b04145b15156200026a57fe5b9392505050565b60008082848115156200028057fe5b04949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002cc57805160ff1916838001178555620002fc565b82800160010185558215620002fc579182015b82811115620002fc578251825591602001919060010190620002df565b506200030a9291506200030e565b5090565b6200032b91905b808211156200030a576000815560010162000315565b90565b6111cc806200033e6000396000f30060606040526004361061015e5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146104ac578063095ea7b31461053657806314a8bd0d1461056c57806318160ddd14610591578063192b663d146105a457806322287914146105b757806323b872dd146105e6578063313ce5671461060e578063356e2927146106215780634e8127f6146106345780634f2484091461064757806363b201171461065c578063661884631461066f57806370a08231146106915780638da5cb5b146106b0578063927a90da146106c357806395d89b41146106d65780639acba2af146106e9578063a8b973a1146106fc578063a9059cbb1461070f578063be4663a114610731578063c5c4744c14610744578063d73dd62314610757578063dd62ed3e14610779578063e6fd48bc1461079e578063f251fc8c146107b1578063f2fde38b146107c4575b601254600090819081908190819081904290610100900460ff161561018257600080fd5b60095481101561019157600080fd5b600a54600954018111156101a457600080fd5b601054600f54106101b457600080fd5b60125460ff161580156101cf5750601254610100900460ff16155b156101e2576012805460ff191660011790555b600034116101ef57600080fd5b600b54600160a060020a031660009081526001602052604090205466b1a2bc2ec500009750670de0b6b3a7640000965094503493508684106102ab576102628661025660075461024a6102bc346107e390919063ffffffff16565b9063ffffffff6107e316565b9063ffffffff61080e16565b9250848311156102a65761028b6102bc6102566007546102568a8a6107e390919063ffffffff16565b6012805460ff1961ff00199091166101001716905593508492505b6102f4565b6102bd346102bc63ffffffff6107e316565b9250848311156102f4576102d9856102bc63ffffffff61080e16565b6012805460ff1961ff00199091166101001716905593508492505b600b54600160a060020a031684156108fc0285604051600060405180830381858888f19350505050151561032757600080fd5b600d5461033a908563ffffffff61082516565b600d55600e5461035190600163ffffffff61082516565b600e55600f54610367908463ffffffff61082516565b600f55600b54600160a060020a0316600090815260016020526040902054610395908463ffffffff61083416565b600b54600160a060020a039081166000908152600160205260408082209390935533909116815220546103ce908463ffffffff61082516565b600160a060020a033381166000818152600160205260409081902093909355600b5490929116906000805160206111818339815191529086905190815260200160405180910390a3610426348563ffffffff61083416565b9150600082111561046257600160a060020a03331682156108fc0283604051600060405180830381858888f19350505050151561046257600080fd5b610480600d54600654600a0a6103e80261083490919063ffffffff16565b6007819055869010156104a3576012805460ff1961ff0019909116610100171690555b50505050505050005b34156104b757600080fd5b6104bf610846565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156104fb5780820151838201526020016104e3565b50505050905090810190601f1680156105285780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561054157600080fd5b610558600160a060020a03600435166024356108e4565b604051901515815260200160405180910390f35b341561057757600080fd5b61057f610950565b60405190815260200160405180910390f35b341561059c57600080fd5b61057f610956565b34156105af57600080fd5b61057f61095c565b34156105c257600080fd5b6105ca610962565b604051600160a060020a03909116815260200160405180910390f35b34156105f157600080fd5b610558600160a060020a0360043581169060243516604435610971565b341561061957600080fd5b61057f6109fc565b341561062c57600080fd5b610558610a02565b341561063f57600080fd5b61057f610a10565b341561065257600080fd5b61065a610a16565b005b341561066757600080fd5b61057f610b69565b341561067a57600080fd5b610558600160a060020a0360043516602435610b6f565b341561069c57600080fd5b61057f600160a060020a0360043516610c69565b34156106bb57600080fd5b6105ca610c84565b34156106ce57600080fd5b610558610c93565b34156106e157600080fd5b6104bf610c9c565b34156106f457600080fd5b61057f610d07565b341561070757600080fd5b61057f610d0d565b341561071a57600080fd5b610558600160a060020a0360043516602435610d13565b341561073c57600080fd5b6105ca610d9c565b341561074f57600080fd5b61057f610dab565b341561076257600080fd5b610558600160a060020a0360043516602435610db1565b341561078457600080fd5b61057f600160a060020a0360043581169060243516610e55565b34156107a957600080fd5b61057f610e80565b34156107bc57600080fd5b61057f610e86565b34156107cf57600080fd5b61065a600160a060020a0360043516610e8c565b60008282028315806107ff57508284828115156107fc57fe5b04145b151561080757fe5b9392505050565b600080828481151561081c57fe5b04949350505050565b60008282018381101561080757fe5b60008282111561084057fe5b50900390565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108dc5780601f106108b1576101008083540402835291602001916108dc565b820191906000526020600020905b8154815290600101906020018083116108bf57829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6102bc81565b60085481565b60115481565b600b54600160a060020a031681565b600954600090429081101561098557600080fd5b60125460ff610100909104161515600114806109a55750601054600f5410155b806109b65750600a54600954018110155b15156109c157600080fd5b601254610100900460ff1615156109e8576012805460ff1961ff0019909116610100171690555b6109f3858585610f27565b95945050505050565b60065481565b601254610100900460ff1681565b60105481565b6009546000904290811015610a2a57600080fd5b60125460ff61010090910416151560011480610a4a5750601054600f5410155b80610a5b5750600a54600954018110155b1515610a6657600080fd5b601254610100900460ff161515610a8d576012805460ff1961ff0019909116610100171690555b60035433600160a060020a03908116911614610aa857600080fd5b600b54600160a060020a0390811660009081526001602052604080822054600c549093168252902054909250610ae4908363ffffffff61082516565b600c54600160a060020a0316600090815260016020526040902055601154610b12908363ffffffff61082516565b601155600b8054600160a060020a0390811660009081526001602052604080822091909155600c54925492821692909116906000805160206111818339815191529085905190815260200160405180910390a35050565b600f5481565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115610bcc57600160a060020a033381166000908152600260209081526040808320938816835292905290812055610c03565b610bdc818463ffffffff61083416565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b600354600160a060020a031681565b60125460ff1681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108dc5780601f106108b1576101008083540402835291602001916108dc565b600a5481565b60075481565b6009546000904290811015610d2757600080fd5b60125460ff61010090910416151560011480610d475750601054600f5410155b80610d585750600a54600954018110155b1515610d6357600080fd5b601254610100900460ff161515610d8a576012805460ff1961ff0019909116610100171690555b610d948484611097565b949350505050565b600c54600160a060020a031681565b600d5481565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610de9908363ffffffff61082516565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60095481565b600e5481565b60035433600160a060020a03908116911614610ea757600080fd5b600160a060020a0381161515610ebc57600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a0383161515610f3e57600080fd5b600160a060020a038416600090815260016020526040902054821115610f6357600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115610f9657600080fd5b600160a060020a038416600090815260016020526040902054610fbf908363ffffffff61083416565b600160a060020a038086166000908152600160205260408082209390935590851681522054610ff4908363ffffffff61082516565b600160a060020a0380851660009081526001602090815260408083209490945587831682526002815283822033909316825291909152205461103c908363ffffffff61083416565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516916000805160206111818339815191529085905190815260200160405180910390a35060019392505050565b6000600160a060020a03831615156110ae57600080fd5b600160a060020a0333166000908152600160205260409020548211156110d357600080fd5b600160a060020a0333166000908152600160205260409020546110fc908363ffffffff61083416565b600160a060020a033381166000908152600160205260408082209390935590851681522054611131908363ffffffff61082516565b600160a060020a0380851660008181526001602052604090819020939093559133909116906000805160206111818339815191529085905190815260200160405180910390a3506001929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820975158fe0e2588e39b3be8daea1e7dcce5188a1c93d8c5b7399cdcbb4047cdb30029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
  "constructorArguments": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
}