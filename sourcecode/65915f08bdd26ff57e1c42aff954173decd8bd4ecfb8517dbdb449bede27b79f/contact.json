{
  "address": "0x117ca39dffc4da6fb3af6145dfff246830637fe2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Prover",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-18\n*/\n\npragma solidity ^0.4.18;\n\nlibrary Sets {\n    // address set\n    struct addressSet {\n        address[] members;\n        mapping(address => uint) memberIndices;\n    }\n\n    function insert(addressSet storage self, address other) public {\n        if (!contains(self, other)) {\n            assert(length(self) < 2**256-1);\n            self.members.push(other);\n            self.memberIndices[other] = length(self);\n        }\n    }\n\n    function remove(addressSet storage self, address other) public {\n        if (contains(self, other)) {\n            uint replaceIndex = self.memberIndices[other];\n            address lastMember = self.members[length(self)-1];\n            // overwrite other with the last member and remove last member\n            self.members[replaceIndex-1] = lastMember;\n            self.members.length--;\n            // reflect this change in the indices\n            self.memberIndices[lastMember] = replaceIndex;\n            delete self.memberIndices[other];\n        }\n    }\n\n    function contains(addressSet storage self, address other) public view returns (bool) {\n        return self.memberIndices[other] > 0;\n    }\n\n    function length(addressSet storage self) public view returns (uint) {\n        return self.members.length;\n    }\n\n\n    // uint set\n    struct uintSet {\n        uint[] members;\n        mapping(uint => uint) memberIndices;\n    }\n\n    function insert(uintSet storage self, uint other) public {\n        if (!contains(self, other)) {\n            assert(length(self) < 2**256-1);\n            self.members.push(other);\n            self.memberIndices[other] = length(self);\n        }\n    }\n\n    function remove(uintSet storage self, uint other) public {\n        if (contains(self, other)) {\n            uint replaceIndex = self.memberIndices[other];\n            uint lastMember = self.members[length(self)-1];\n            // overwrite other with the last member and remove last member\n            self.members[replaceIndex-1] = lastMember;\n            self.members.length--;\n            // reflect this change in the indices\n            self.memberIndices[lastMember] = replaceIndex;\n            delete self.memberIndices[other];\n        }\n    }\n\n    function contains(uintSet storage self, uint other) public view returns (bool) {\n        return self.memberIndices[other] > 0;\n    }\n\n    function length(uintSet storage self) public view returns (uint) {\n        return self.members.length;\n    }\n\n\n    // uint8 set\n    struct uint8Set {\n        uint8[] members;\n        mapping(uint8 => uint) memberIndices;\n    }\n\n    function insert(uint8Set storage self, uint8 other) public {\n        if (!contains(self, other)) {\n            assert(length(self) < 2**256-1);\n            self.members.push(other);\n            self.memberIndices[other] = length(self);\n        }\n    }\n\n    function remove(uint8Set storage self, uint8 other) public {\n        if (contains(self, other)) {\n            uint replaceIndex = self.memberIndices[other];\n            uint8 lastMember = self.members[length(self)-1];\n            // overwrite other with the last member and remove last member\n            self.members[replaceIndex-1] = lastMember;\n            self.members.length--;\n            // reflect this change in the indices\n            self.memberIndices[lastMember] = replaceIndex;\n            delete self.memberIndices[other];\n        }\n    }\n\n    function contains(uint8Set storage self, uint8 other) public view returns (bool) {\n        return self.memberIndices[other] > 0;\n    }\n\n    function length(uint8Set storage self) public view returns (uint) {\n        return self.members.length;\n    }\n\n\n    // int set\n    struct intSet {\n        int[] members;\n        mapping(int => uint) memberIndices;\n    }\n\n    function insert(intSet storage self, int other) public {\n        if (!contains(self, other)) {\n            assert(length(self) < 2**256-1);\n            self.members.push(other);\n            self.memberIndices[other] = length(self);\n        }\n    }\n\n    function remove(intSet storage self, int other) public {\n        if (contains(self, other)) {\n            uint replaceIndex = self.memberIndices[other];\n            int lastMember = self.members[length(self)-1];\n            // overwrite other with the last member and remove last member\n            self.members[replaceIndex-1] = lastMember;\n            self.members.length--;\n            // reflect this change in the indices\n            self.memberIndices[lastMember] = replaceIndex;\n            delete self.memberIndices[other];\n        }\n    }\n\n    function contains(intSet storage self, int other) public view returns (bool) {\n        return self.memberIndices[other] > 0;\n    }\n\n    function length(intSet storage self) public view returns (uint) {\n        return self.members.length;\n    }\n\n\n    // int8 set\n    struct int8Set {\n        int8[] members;\n        mapping(int8 => uint) memberIndices;\n    }\n\n    function insert(int8Set storage self, int8 other) public {\n        if (!contains(self, other)) {\n            assert(length(self) < 2**256-1);\n            self.members.push(other);\n            self.memberIndices[other] = length(self);\n        }\n    }\n\n    function remove(int8Set storage self, int8 other) public {\n        if (contains(self, other)) {\n            uint replaceIndex = self.memberIndices[other];\n            int8 lastMember = self.members[length(self)-1];\n            // overwrite other with the last member and remove last member\n            self.members[replaceIndex-1] = lastMember;\n            self.members.length--;\n            // reflect this change in the indices\n            self.memberIndices[lastMember] = replaceIndex;\n            delete self.memberIndices[other];\n        }\n    }\n\n    function contains(int8Set storage self, int8 other) public view returns (bool) {\n        return self.memberIndices[other] > 0;\n    }\n\n    function length(int8Set storage self) public view returns (uint) {\n        return self.members.length;\n    }\n\n\n    // byte set\n    struct byteSet {\n        byte[] members;\n        mapping(byte => uint) memberIndices;\n    }\n\n    function insert(byteSet storage self, byte other) public {\n        if (!contains(self, other)) {\n            assert(length(self) < 2**256-1);\n            self.members.push(other);\n            self.memberIndices[other] = length(self);\n        }\n    }\n\n    function remove(byteSet storage self, byte other) public {\n        if (contains(self, other)) {\n            uint replaceIndex = self.memberIndices[other];\n            byte lastMember = self.members[length(self)-1];\n            // overwrite other with the last member and remove last member\n            self.members[replaceIndex-1] = lastMember;\n            self.members.length--;\n            // reflect this change in the indices\n            self.memberIndices[lastMember] = replaceIndex;\n            delete self.memberIndices[other];\n        }\n    }\n\n    function contains(byteSet storage self, byte other) public view returns (bool) {\n        return self.memberIndices[other] > 0;\n    }\n\n    function length(byteSet storage self) public view returns (uint) {\n        return self.members.length;\n    }\n\n\n    // bytes32 set\n    struct bytes32Set {\n        bytes32[] members;\n        mapping(bytes32 => uint) memberIndices;\n    }\n\n    function insert(bytes32Set storage self, bytes32 other) public {\n        if (!contains(self, other)) {\n            assert(length(self) < 2**256-1);\n            self.members.push(other);\n            self.memberIndices[other] = length(self);\n        }\n    }\n\n    function remove(bytes32Set storage self, bytes32 other) public {\n        if (contains(self, other)) {\n            uint replaceIndex = self.memberIndices[other];\n            bytes32 lastMember = self.members[length(self)-1];\n            // overwrite other with the last member and remove last member\n            self.members[replaceIndex-1] = lastMember;\n            self.members.length--;\n            // reflect this change in the indices\n            self.memberIndices[lastMember] = replaceIndex;\n            delete self.memberIndices[other];\n        }\n    }\n\n    function contains(bytes32Set storage self, bytes32 other) public view returns (bool) {\n        return self.memberIndices[other] > 0;\n    }\n\n    function length(bytes32Set storage self) public view returns (uint) {\n        return self.members.length;\n    }\n}\n\ncontract Prover {\n    // attach library\n    using Sets for Sets.addressSet;\n    using Sets for Sets.bytes32Set;\n\n    // storage vars\n    address owner;\n    Sets.addressSet users;\n    mapping(address => Account) internal accounts;\n\n    // structs\n    struct Account {\n        Sets.bytes32Set entries;\n        mapping(bytes32 => Entry) values;\n    }\n\n    struct Entry {\n        uint time;\n        uint staked;\n    }\n\n    // constructor\n    function Prover() public {\n        owner = msg.sender;\n    }\n\n    // fallback\n    function() internal {\n        revert();\n    }\n\n\n    // modifier to check if a target address has a particular entry\n    modifier entryExists(address target, bytes32 dataHash, bool exists) {\n        assert(accounts[target].entries.contains(dataHash) == exists);\n        _;\n    }\n\n    // external functions\n    // allow access to our structs via functions with convenient return values\n    function registeredUsers()\n        external\n        view\n        returns (address[] unique_addresses) {\n        return users.members;\n    }\n    function userEntries(address target)\n        external\n        view\n        returns (bytes32[] entries) {\n        return accounts[target].entries.members;\n    }\n    function entryInformation(address target, bytes32 dataHash)\n        external\n        view\n        returns (bool proved, uint time, uint staked) {\n        return (accounts[target].entries.contains(dataHash),\n                accounts[target].values[dataHash].time,\n                accounts[target].values[dataHash].staked);\n    }\n\n    // public functions\n    // adding entries\n    function addEntry(bytes32 dataHash)\n        public\n        payable\n        entryExists(msg.sender, dataHash, false){\n        users.insert(msg.sender);\n        accounts[msg.sender].entries.insert(dataHash);\n        accounts[msg.sender].values[dataHash] = Entry(now, msg.value);\n    }\n\n    // deleting entries\n    function deleteEntry(bytes32 dataHash)\n        public\n        entryExists(msg.sender, dataHash, true) {\n        uint rebate = accounts[msg.sender].values[dataHash].staked;\n        // update user account\n        delete accounts[msg.sender].values[dataHash];\n        accounts[msg.sender].entries.remove(dataHash);\n        // delete from users if this was the user's last entry\n        if (accounts[msg.sender].entries.length() == 0) {\n            users.remove(msg.sender);\n        }\n        // send the rebate\n        if (rebate > 0) msg.sender.transfer(rebate);\n    }\n\n    // allow owner to delete contract if no accounts exist\n    function selfDestruct() public {\n        if ((msg.sender == owner) && (users.length() == 0)) {\n            selfdestruct(owner);\n        }\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e2f8061005e6000396000f300606060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063492c981b146100885780635910a18b146100f4578063660d5887146101105780639cb8a26a1461017a5780639f10a9901461018f578063ef8dd09b1461021d575b341561008357600080fd5b600080fd5b341561009357600080fd5b6100cc600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803560001916906020019091905050610244565b6040518084151515158152602001838152602001828152602001935050505060405180910390f35b61010e6004808035600019169060200190919050506103f5565b005b341561011b57600080fd5b6101236106fb565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561016657808201518184015260208101905061014b565b505050509050019250505060405180910390f35b341561018557600080fd5b61018d610792565b005b341561019a57600080fd5b6101c6600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108bf565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156102095780820151818401526020810190506101ee565b505050509050019250505060405180910390f35b341561022857600080fd5b610242600480803560001916906020019091905050610966565b005b6000806000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000017348d904b3bf1cfcd7e1ce2dbcf7dcaecf0b0575c663a61ecd5d9091866000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600019166000191681526020019250505060206040518083038186803b151561030f57600080fd5b6102c65a03f4151561032057600080fd5b50505060405180519050600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000866000191660001916815260200190815260200160002060000154600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008760001916600019168152602001908152602001600020600101549250925092509250925092565b33816000801515600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000017348d904b3bf1cfcd7e1ce2dbcf7dcaecf0b0575c663a61ecd5d9091856000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600019166000191681526020019250505060206040518083038186803b15156104c257600080fd5b6102c65a03f415156104d357600080fd5b5050506040518051905015151415156104e857fe5b60017348d904b3bf1cfcd7e1ce2dbcf7dcaecf0b0575c663e102e97c9091336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b151561058957600080fd5b6102c65a03f4151561059a57600080fd5b505050600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000017348d904b3bf1cfcd7e1ce2dbcf7dcaecf0b0575c6635856638c9091866040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600019166000191681526020019250505060006040518083038186803b151561065a57600080fd5b6102c65a03f4151561066b57600080fd5b505050604080519081016040528042815260200134815250600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008660001916600019168152602001908152602001600020600082015181600001556020820151816001015590505050505050565b610703610ddb565b600160000180548060200260200160405190810160405280929190818152602001828054801561078857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161073e575b5050505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614801561087e5750600060017348d904b3bf1cfcd7e1ce2dbcf7dcaecf0b0575c663f2279f8f90916000604051602001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b151561086157600080fd5b6102c65a03f4151561087257600080fd5b50505060405180519050145b156108bd576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b6108c7610def565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160000180548060200260200160405190810160405280929190818152602001828054801561095a57602002820191906000526020600020905b81546000191681526020019060010190808311610942575b50505050509050919050565b600033826001801515600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000017348d904b3bf1cfcd7e1ce2dbcf7dcaecf0b0575c663a61ecd5d9091856000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600019166000191681526020019250505060206040518083038186803b1515610a3557600080fd5b6102c65a03f41515610a4657600080fd5b505050604051805190501515141515610a5b57fe5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008660001916600019168152602001908152602001600020600101549350600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000866000191660001916815260200190815260200160002060008082016000905560018201600090555050600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000017348d904b3bf1cfcd7e1ce2dbcf7dcaecf0b0575c663f6bf2aab9091876040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600019166000191681526020019250505060006040518083038186803b1515610be757600080fd5b6102c65a03f41515610bf857600080fd5b5050506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000017348d904b3bf1cfcd7e1ce2dbcf7dcaecf0b0575c663990ec6b790916000604051602001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1515610cb357600080fd5b6102c65a03f41515610cc457600080fd5b505050604051805190501415610d8a5760017348d904b3bf1cfcd7e1ce2dbcf7dcaecf0b0575c66340511d619091336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1515610d7557600080fd5b6102c65a03f41515610d8657600080fd5b5050505b6000841115610dd4573373ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f193505050501515610dd357600080fd5b5b5050505050565b602060405190810160405280600081525090565b6020604051908101604052806000815250905600a165627a7a7230582061ae4b85501f78ac64c890bf795f311bc7a3d21470c975a1089e060d6993e5140029"
}