{
  "address": "0x74814602062af64fd7a83155645ddb265598220e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "QuantstampAudit",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-31\n*/\n\npragma solidity 0.4.24;\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: contracts/LinkedListLib.sol\n\n/**\n * @title LinkedListLib\n * @author Darryl Morris (o0ragman0o) and Modular.network\n *\n * This utility library was forked from https://github.com/o0ragman0o/LibCLL\n * into the Modular-Network ethereum-libraries repo at https://github.com/Modular-Network/ethereum-libraries\n * It has been updated to add additional functionality and be more compatible with solidity 0.4.18\n * coding patterns.\n *\n * version 1.1.1\n * Copyright (c) 2017 Modular Inc.\n * The MIT License (MIT)\n * https://github.com/Modular-network/ethereum-libraries/blob/master/LICENSE\n *\n * The LinkedListLib provides functionality for implementing data indexing using\n * a circlular linked list\n *\n * Modular provides smart contract services and security reviews for contract\n * deployments in addition to working on open source projects in the Ethereum\n * community. Our purpose is to test, document, and deploy reusable code onto the\n * blockchain and improve both security and usability. We also educate non-profits,\n * schools, and other community members about the application of blockchain\n * technology. For further information: modular.network\n *\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n\nlibrary LinkedListLib {\n\n    uint256 constant NULL = 0;\n    uint256 constant HEAD = 0;\n    bool constant PREV = false;\n    bool constant NEXT = true;\n\n    struct LinkedList{\n        mapping (uint256 => mapping (bool => uint256)) list;\n    }\n\n    /// @dev returns true if the list exists\n    /// @param self stored linked list from contract\n    function listExists(LinkedList storage self)\n        public\n        view returns (bool)\n    {\n        // if the head nodes previous or next pointers both point to itself, then there are no items in the list\n        if (self.list[HEAD][PREV] != HEAD || self.list[HEAD][NEXT] != HEAD) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /// @dev returns true if the node exists\n    /// @param self stored linked list from contract\n    /// @param _node a node to search for\n    function nodeExists(LinkedList storage self, uint256 _node)\n        public\n        view returns (bool)\n    {\n        if (self.list[_node][PREV] == HEAD && self.list[_node][NEXT] == HEAD) {\n            if (self.list[HEAD][NEXT] == _node) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /// @dev Returns the number of elements in the list\n    /// @param self stored linked list from contract\n    function sizeOf(LinkedList storage self) public view returns (uint256 numElements) {\n        bool exists;\n        uint256 i;\n        (exists,i) = getAdjacent(self, HEAD, NEXT);\n        while (i != HEAD) {\n            (exists,i) = getAdjacent(self, i, NEXT);\n            numElements++;\n        }\n        return;\n    }\n\n    /// @dev Returns the links of a node as a tuple\n    /// @param self stored linked list from contract\n    /// @param _node id of the node to get\n    function getNode(LinkedList storage self, uint256 _node)\n        public view returns (bool,uint256,uint256)\n    {\n        if (!nodeExists(self,_node)) {\n            return (false,0,0);\n        } else {\n            return (true,self.list[_node][PREV], self.list[_node][NEXT]);\n        }\n    }\n\n    /// @dev Returns the link of a node `_node` in direction `_direction`.\n    /// @param self stored linked list from contract\n    /// @param _node id of the node to step from\n    /// @param _direction direction to step in\n    function getAdjacent(LinkedList storage self, uint256 _node, bool _direction)\n        public view returns (bool,uint256)\n    {\n        if (!nodeExists(self,_node)) {\n            return (false,0);\n        } else {\n            return (true,self.list[_node][_direction]);\n        }\n    }\n\n    /// @dev Can be used before `insert` to build an ordered list\n    /// @param self stored linked list from contract\n    /// @param _node an existing node to search from, e.g. HEAD.\n    /// @param _value value to seek\n    /// @param _direction direction to seek in\n    //  @return next first node beyond '_node' in direction `_direction`\n    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n        public view returns (uint256)\n    {\n        if (sizeOf(self) == 0) { return 0; }\n        require((_node == 0) || nodeExists(self,_node));\n        bool exists;\n        uint256 next;\n        (exists,next) = getAdjacent(self, _node, _direction);\n        while  ((next != 0) && (_value != next) && ((_value < next) != _direction)) next = self.list[next][_direction];\n        return next;\n    }\n\n    /// @dev Creates a bidirectional link between two nodes on direction `_direction`\n    /// @param self stored linked list from contract\n    /// @param _node first node for linking\n    /// @param _link  node to link to in the _direction\n    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) private  {\n        self.list[_link][!_direction] = _node;\n        self.list[_node][_direction] = _link;\n    }\n\n    /// @dev Insert node `_new` beside existing node `_node` in direction `_direction`.\n    /// @param self stored linked list from contract\n    /// @param _node existing node\n    /// @param _new  new node to insert\n    /// @param _direction direction to insert node in\n    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n        if(!nodeExists(self,_new) && nodeExists(self,_node)) {\n            uint256 c = self.list[_node][_direction];\n            createLink(self, _node, _new, _direction);\n            createLink(self, _new, c, _direction);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /// @dev removes an entry from the linked list\n    /// @param self stored linked list from contract\n    /// @param _node node to remove from the list\n    function remove(LinkedList storage self, uint256 _node) internal returns (uint256) {\n        if ((_node == NULL) || (!nodeExists(self,_node))) { return 0; }\n        createLink(self, self.list[_node][PREV], self.list[_node][NEXT], NEXT);\n        delete self.list[_node][PREV];\n        delete self.list[_node][NEXT];\n        return _node;\n    }\n\n    /// @dev pushes an enrty to the head of the linked list\n    /// @param self stored linked list from contract\n    /// @param _node new entry to push to the head\n    /// @param _direction push to the head (NEXT) or tail (PREV)\n    function push(LinkedList storage self, uint256 _node, bool _direction) internal  {\n        insert(self, HEAD, _node, _direction);\n    }\n\n    /// @dev pops the first entry from the linked list\n    /// @param self stored linked list from contract\n    /// @param _direction pop from the head (NEXT) or the tail (PREV)\n    function pop(LinkedList storage self, bool _direction) internal returns (uint256) {\n        bool exists;\n        uint256 adj;\n\n        (exists,adj) = getAdjacent(self, HEAD, _direction);\n\n        return remove(self, adj);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/ownership/rbac/Roles.sol\n\n/**\n * @title Roles\n * @author Francisco Giordano (@frangio)\n * @dev Library for managing addresses assigned to a Role.\n *      See RBAC.sol for example usage.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = true;\n  }\n\n  /**\n   * @dev remove an address' access to this role\n   */\n  function remove(Role storage role, address addr)\n    internal\n  {\n    role.bearer[addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage role, address addr)\n    view\n    internal\n  {\n    require(has(role, addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage role, address addr)\n    view\n    internal\n    returns (bool)\n  {\n    return role.bearer[addr];\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/rbac/RBAC.sol\n\n/**\n * @title RBAC (Role-Based Access Control)\n * @author Matt Condon (@Shrugs)\n * @dev Stores and provides setters and getters for roles and addresses.\n * @dev Supports unlimited numbers of roles and addresses.\n * @dev See //contracts/mocks/RBACMock.sol for an example of usage.\n * This RBAC method uses strings to key roles. It may be beneficial\n *  for you to write your own implementation of this interface using Enums or similar.\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\n *  to avoid typos.\n */\ncontract RBAC {\n  using Roles for Roles.Role;\n\n  mapping (string => Roles.Role) private roles;\n\n  event RoleAdded(address addr, string roleName);\n  event RoleRemoved(address addr, string roleName);\n\n  /**\n   * @dev reverts if addr does not have role\n   * @param addr address\n   * @param roleName the name of the role\n   * // reverts\n   */\n  function checkRole(address addr, string roleName)\n    view\n    public\n  {\n    roles[roleName].check(addr);\n  }\n\n  /**\n   * @dev determine if addr has role\n   * @param addr address\n   * @param roleName the name of the role\n   * @return bool\n   */\n  function hasRole(address addr, string roleName)\n    view\n    public\n    returns (bool)\n  {\n    return roles[roleName].has(addr);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param addr address\n   * @param roleName the name of the role\n   */\n  function addRole(address addr, string roleName)\n    internal\n  {\n    roles[roleName].add(addr);\n    emit RoleAdded(addr, roleName);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param addr address\n   * @param roleName the name of the role\n   */\n  function removeRole(address addr, string roleName)\n    internal\n  {\n    roles[roleName].remove(addr);\n    emit RoleRemoved(addr, roleName);\n  }\n\n  /**\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n   * @param roleName the name of the role\n   * // reverts\n   */\n  modifier onlyRole(string roleName)\n  {\n    checkRole(msg.sender, roleName);\n    _;\n  }\n\n  /**\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n   * @param roleNames the names of the roles to scope access to\n   * // reverts\n   *\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n   *  see: https://github.com/ethereum/solidity/issues/2467\n   */\n  // modifier onlyRoles(string[] roleNames) {\n  //     bool hasAnyRole = false;\n  //     for (uint8 i = 0; i < roleNames.length; i++) {\n  //         if (hasRole(msg.sender, roleNames[i])) {\n  //             hasAnyRole = true;\n  //             break;\n  //         }\n  //     }\n\n  //     require(hasAnyRole);\n\n  //     _;\n  // }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Whitelist.sol\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n * @dev This simplifies the implementation of \"user permissions\".\n */\ncontract Whitelist is Ownable, RBAC {\n  event WhitelistedAddressAdded(address addr);\n  event WhitelistedAddressRemoved(address addr);\n\n  string public constant ROLE_WHITELISTED = \"whitelist\";\n\n  /**\n   * @dev Throws if called by any account that's not whitelisted.\n   */\n  modifier onlyWhitelisted() {\n    checkRole(msg.sender, ROLE_WHITELISTED);\n    _;\n  }\n\n  /**\n   * @dev add an address to the whitelist\n   * @param addr address\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address addr)\n    onlyOwner\n    public\n  {\n    addRole(addr, ROLE_WHITELISTED);\n    emit WhitelistedAddressAdded(addr);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function whitelist(address addr)\n    public\n    view\n    returns (bool)\n  {\n    return hasRole(addr, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev add addresses to the whitelist\n   * @param addrs addresses\n   * @return true if at least one address was added to the whitelist,\n   * false if all addresses were already in the whitelist\n   */\n  function addAddressesToWhitelist(address[] addrs)\n    onlyOwner\n    public\n  {\n    for (uint256 i = 0; i < addrs.length; i++) {\n      addAddressToWhitelist(addrs[i]);\n    }\n  }\n\n  /**\n   * @dev remove an address from the whitelist\n   * @param addr address\n   * @return true if the address was removed from the whitelist,\n   * false if the address wasn't in the whitelist in the first place\n   */\n  function removeAddressFromWhitelist(address addr)\n    onlyOwner\n    public\n  {\n    removeRole(addr, ROLE_WHITELISTED);\n    emit WhitelistedAddressRemoved(addr);\n  }\n\n  /**\n   * @dev remove addresses from the whitelist\n   * @param addrs addresses\n   * @return true if at least one address was removed from the whitelist,\n   * false if all addresses weren't in the whitelist in the first place\n   */\n  function removeAddressesFromWhitelist(address[] addrs)\n    onlyOwner\n    public\n  {\n    for (uint256 i = 0; i < addrs.length; i++) {\n      removeAddressFromWhitelist(addrs[i]);\n    }\n  }\n\n}\n\n// File: contracts/QuantstampAuditData.sol\n\ncontract QuantstampAuditData is Whitelist {\n  // the audit data has a whitelist of addresses of audit contracts that may interact with this contract\n  using LinkedListLib for LinkedListLib.LinkedList;\n\n  // constants used by LinkedListLib\n  uint256 constant internal NULL = 0;\n  uint256 constant internal HEAD = 0;\n  bool constant internal PREV = false;\n  bool constant internal NEXT = true;\n\n  // state of audit requests submitted to the contract\n  enum AuditState {\n    None,\n    Queued,\n    Assigned,\n    Refunded,\n    Completed,  // automated audit finished successfully and the report is available\n    Error,      // automated audit failed to finish; the report contains detailed information about the error\n    Expired,\n    Resolved\n  }\n\n  // structure representing an audit\n  struct Audit {\n    address requestor;\n    string contractUri;\n    uint256 price;\n    uint256 requestBlockNumber; // block number that audit was requested\n    QuantstampAuditData.AuditState state;\n    address auditor;       // the address of the node assigned to the audit\n    uint256 assignBlockNumber;  // block number that audit was assigned\n    string reportHash;     // stores the hash of audit report\n    uint256 reportBlockNumber;  // block number that the payment and the audit report were submitted\n    address registrar;  // address of the contract which registers this request\n  }\n\n  // map audits (requestId, Audit)\n  mapping(uint256 => Audit) public audits;\n\n  // token used to pay for audits. This contract assumes that the owner of the contract trusts token's code and\n  // that transfer function (such as transferFrom, transfer) do the right thing\n  StandardToken public token;\n\n  // Once an audit node gets an audit request, the audit price is locked for this many blocks.\n  // After that, the requestor can asks for a refund.\n  uint256 public auditTimeoutInBlocks = 25;\n\n  // maximum number of assigned audits per each auditor\n  uint256 public maxAssignedRequests = 10;\n\n  // map audit nodes to their minimum prices. Defaults to zero: the node accepts all requests.\n  mapping(address => uint256) public minAuditPrice;\n\n  // whitelist audit nodes\n  LinkedListLib.LinkedList internal whitelistedNodesList;\n\n  uint256 private requestCounter;\n\n  event WhitelistedNodeAdded(address addr);\n  event WhitelistedNodeRemoved(address addr);\n\n  /**\n   * @dev The constructor creates an audit contract.\n   * @param tokenAddress The address of a StandardToken that will be used to pay auditor nodes.\n   */\n  constructor (address tokenAddress) public {\n    require(tokenAddress != address(0));\n    token = StandardToken(tokenAddress);\n  }\n\n  function addAuditRequest (address requestor, string contractUri, uint256 price) public onlyWhitelisted returns(uint256) {\n    // assign the next request ID\n    uint256 requestId = ++requestCounter;\n    // store the audit\n    audits[requestId] = Audit(requestor, contractUri, price, block.number, AuditState.Queued, address(0), 0, \"\", 0, msg.sender);  // solhint-disable-line not-rely-on-time\n    return requestId;\n  }\n\n  function getAuditContractUri(uint256 requestId) public view returns(string) {\n    return audits[requestId].contractUri;\n  }\n\n  function getAuditRequestor(uint256 requestId) public view returns(address) {\n    return audits[requestId].requestor;\n  }\n\n  function getAuditPrice (uint256 requestId) public view returns(uint256) {\n    return audits[requestId].price;\n  }\n\n  function getAuditState (uint256 requestId) public view returns(AuditState) {\n    return audits[requestId].state;\n  }\n\n  function getAuditRequestBlockNumber (uint256 requestId) public view returns(uint) {\n    return audits[requestId].requestBlockNumber;\n  }\n\n  function setAuditState (uint256 requestId, AuditState state) public onlyWhitelisted {\n    audits[requestId].state = state;\n  }\n\n  function getAuditAuditor (uint256 requestId) public view returns(address) {\n    return audits[requestId].auditor;\n  }\n\n  function getAuditRegistrar (uint256 requestId) public view returns(address) {\n    return audits[requestId].registrar;\n  }\n\n  function setAuditAuditor (uint256 requestId, address auditor) public onlyWhitelisted {\n    audits[requestId].auditor = auditor;\n  }\n\n  function getAuditAssignBlockNumber (uint256 requestId) public view returns(uint) {\n    return audits[requestId].assignBlockNumber;\n  }\n\n  function setAuditAssignBlockNumber (uint256 requestId, uint256 assignBlockNumber) public onlyWhitelisted {\n    audits[requestId].assignBlockNumber = assignBlockNumber;\n  }\n\n  function setAuditReportHash (uint256 requestId, string reportHash) public onlyWhitelisted {\n    audits[requestId].reportHash = reportHash;\n  }\n\n  function setAuditReportBlockNumber (uint256 requestId, uint256 reportBlockNumber) public onlyWhitelisted {\n    audits[requestId].reportBlockNumber = reportBlockNumber;\n  }\n\n  function setAuditRegistrar (uint256 requestId, address registrar) public onlyWhitelisted {\n    audits[requestId].registrar = registrar;\n  }\n\n  function setAuditTimeout (uint256 timeoutInBlocks) public onlyOwner {\n    auditTimeoutInBlocks = timeoutInBlocks;\n  }\n\n  /**\n   * @dev set the maximum number of audits any audit node can handle at any time.\n   * @param maxAssignments maximum number of audit requests for each auditor\n   */\n  function setMaxAssignedRequests (uint256 maxAssignments) public onlyOwner {\n    maxAssignedRequests = maxAssignments;\n  }\n\n  function getMinAuditPrice (address auditor) public view returns(uint256) {\n    return minAuditPrice[auditor];\n  }\n\n  /**\n   * @dev Allows the audit node to set its minimum price per audit in wei-QSP\n   * @param price The minimum price.\n   */\n  function setMinAuditPrice(address auditor, uint256 price) public onlyWhitelisted {\n    minAuditPrice[auditor] = price;\n  }\n\n  /**\n   * @dev Returns true if a node is whitelisted\n   * param node Node to check.\n   */\n  function isWhitelisted(address node) public view returns(bool) {\n    return whitelistedNodesList.nodeExists(uint256(node));\n  }\n\n  /**\n   * @dev Adds an address to the whitelist\n   * @param addr address\n   * @return true if the address was added to the whitelist\n   */\n  function addNodeToWhitelist(address addr) public onlyOwner returns(bool success) {\n    if (whitelistedNodesList.insert(HEAD, uint256(addr), PREV)) {\n      emit WhitelistedNodeAdded(addr);\n      success = true;\n    }\n  }\n\n  /**\n   * @dev Removes an address from the whitelist linked-list\n   * @param addr address\n   * @return true if the address was removed from the whitelist,\n   */\n  function removeNodeFromWhitelist(address addr) public onlyOwner returns(bool success) {\n    if (whitelistedNodesList.remove(uint256(addr)) != 0) {\n      emit WhitelistedNodeRemoved(addr);\n      success = true;\n    }\n  }\n\n  /**\n   * @dev Given a whitelisted address, returns the next address from the whitelist\n   * @param addr address\n   * @return next address of the given param\n   */\n  function getNextWhitelistedNode(address addr) public view returns(address) {\n    bool direction;\n    uint256 next;\n    (direction, next) = whitelistedNodesList.getAdjacent(uint256(addr), NEXT);\n    return address(next);\n  }\n}\n\n// File: contracts/QuantstampAudit.sol\n\ncontract QuantstampAudit is Ownable, Pausable {\n  using SafeMath for uint256;\n  using LinkedListLib for LinkedListLib.LinkedList;\n\n  // constants used by LinkedListLib\n  uint256 constant internal NULL = 0;\n  uint256 constant internal HEAD = 0;\n  bool constant internal PREV = false;\n  bool constant internal NEXT = true;\n\n  // mapping from an auditor address to the number of requests that it currently processes\n  mapping(address => uint256) public assignedRequestCount;\n\n  // increasingly sorted linked list of prices\n  LinkedListLib.LinkedList internal priceList;\n  // map from price to a list of request IDs\n  mapping(uint256 => LinkedListLib.LinkedList) internal auditsByPrice;\n\n  // list of request IDs of assigned audits (the list preserves temporal order of assignments)\n  LinkedListLib.LinkedList internal assignedAudits;\n\n  // contract that stores audit data (separate from the auditing logic)\n  QuantstampAuditData public auditData;\n\n  event LogAuditFinished(\n    uint256 requestId,\n    address auditor,\n    QuantstampAuditData.AuditState auditResult,\n    string reportHash\n  );\n\n  event LogAuditRequested(uint256 requestId,\n    address requestor,\n    string uri,\n    uint256 price\n  );\n\n  event LogAuditAssigned(uint256 requestId,\n    address auditor,\n    address requestor,\n    string uri,\n    uint256 price,\n    uint256 requestBlockNumber);\n\n  /* solhint-disable event-name-camelcase */\n  event LogReportSubmissionError_InvalidAuditor(uint256 requestId, address auditor);\n  event LogReportSubmissionError_InvalidState(uint256 requestId, address auditor, QuantstampAuditData.AuditState state);\n  event LogReportSubmissionError_InvalidResult(uint256 requestId, address auditor, QuantstampAuditData.AuditState state);\n  event LogReportSubmissionError_ExpiredAudit(uint256 requestId, address auditor, uint256 allowanceBlockNumber);\n  event LogAuditAssignmentError_ExceededMaxAssignedRequests(address auditor);\n  event LogAuditAssignmentUpdate_Expired(uint256 requestId, uint256 allowanceBlockNumber);\n  /* solhint-enable event-name-camelcase */\n\n  event LogAuditQueueIsEmpty();\n\n  event LogPayAuditor(uint256 requestId, address auditor, uint256 amount);\n  event LogAuditNodePriceChanged(address auditor, uint256 amount);\n\n  event LogRefund(uint256 requestId, address requestor, uint256 amount);\n  event LogRefundInvalidRequestor(uint256 requestId, address requestor);\n  event LogRefundInvalidState(uint256 requestId, QuantstampAuditData.AuditState state);\n  event LogRefundInvalidFundsLocked(uint256 requestId, uint256 currentBlock, uint256 fundLockEndBlock);\n\n  // the audit queue has elements, but none satisfy the minPrice of the audit node\n  // amount corresponds to the current minPrice of the auditor\n  event LogAuditNodePriceHigherThanRequests(address auditor, uint256 amount);\n\n  event LogInvalidResolutionCall(uint256 requestId);\n  event LogErrorReportResolved(uint256 requestId, address receiver, uint256 auditPrice);\n\n  enum AuditAvailabilityState {\n    Error,\n    Ready,      // an audit is available to be picked up\n    Empty,      // there is no audit request in the queue\n    Exceeded,   // number of incomplete audit requests is reached the cap\n    Underprice  // all queued audit requests are less than the expected price\n  }\n\n  /**\n   * @dev The constructor creates an audit contract.\n   * @param auditDataAddress The address of a AuditData that stores data used for performing audits.\n   */\n  constructor (address auditDataAddress) public {\n    require(auditDataAddress != address(0));\n    auditData = QuantstampAuditData(auditDataAddress);\n  }\n\n  /**\n   * @dev Throws if called by any account that's not whitelisted.\n   */\n  modifier onlyWhitelisted() {\n    require(auditData.isWhitelisted(msg.sender));\n    _;\n  }\n\n  /**\n   * @dev Returns funds to the requestor.\n   * @param requestId Unique ID of the audit request.\n   */\n  function refund(uint256 requestId) external returns(bool) {\n    QuantstampAuditData.AuditState state = auditData.getAuditState(requestId);\n    // check that the audit exists and is in a valid state\n    if (state != QuantstampAuditData.AuditState.Queued &&\n          state != QuantstampAuditData.AuditState.Assigned &&\n            state != QuantstampAuditData.AuditState.Expired) {\n      emit LogRefundInvalidState(requestId, state);\n      return false;\n    }\n    address requestor = auditData.getAuditRequestor(requestId);\n    if (requestor != msg.sender) {\n      emit LogRefundInvalidRequestor(requestId, msg.sender);\n      return;\n    }\n    uint256 refundBlockNumber = auditData.getAuditAssignBlockNumber(requestId) + auditData.auditTimeoutInBlocks();\n    // check that the auditor has not recently started the audit (locking the funds)\n    if (state == QuantstampAuditData.AuditState.Assigned) {\n      if (block.number <= refundBlockNumber) {\n        emit LogRefundInvalidFundsLocked(requestId, block.number, refundBlockNumber);\n        return false;\n      }\n      // the request is expired but not detected by getNextAuditRequest\n      updateAssignedAudits(requestId);\n    } else if (state == QuantstampAuditData.AuditState.Queued) {\n      // remove the request from the queue\n      // note that if an audit node is currently assigned the request, it is already removed from the queue\n      removeQueueElement(requestId);\n    }\n\n    // set the audit state to refunded\n    auditData.setAuditState(requestId, QuantstampAuditData.AuditState.Refunded);\n\n    // return the funds to the user\n    uint256 price = auditData.getAuditPrice(requestId);\n    emit LogRefund(requestId, requestor, price);\n    return auditData.token().transfer(requestor, price);\n  }\n\n  /**\n   * @dev Submits audit request.\n   * @param contractUri Identifier of the resource to audit.\n   * @param price The total amount of tokens that will be paid for the audit.\n   */\n  function requestAudit(string contractUri, uint256 price) external whenNotPaused returns(uint256) {\n    require(price > 0);\n    // transfer tokens to this contract\n    auditData.token().transferFrom(msg.sender, address(this), price);\n    // store the audit\n    uint256 requestId = auditData.addAuditRequest(msg.sender, contractUri, price);\n\n    // TODO: use existing price instead of HEAD (optimization)\n    queueAuditRequest(requestId, HEAD);\n\n    emit LogAuditRequested(requestId, msg.sender, contractUri, price); // solhint-disable-line not-rely-on-time\n\n    return requestId;\n  }\n\n  /**\n   * @dev Submits the report and pays the auditor node for their work if the audit is completed.\n   * @param requestId Unique identifier of the audit request.\n   * @param auditResult Result of an audit.\n   * @param reportHash Hash of the generated report.\n   */\n  function submitReport(uint256 requestId, QuantstampAuditData.AuditState auditResult, string reportHash) public onlyWhitelisted {\n    if (QuantstampAuditData.AuditState.Completed != auditResult && QuantstampAuditData.AuditState.Error != auditResult) {\n      emit LogReportSubmissionError_InvalidResult(requestId, msg.sender, auditResult);\n      return;\n    }\n\n    QuantstampAuditData.AuditState auditState = auditData.getAuditState(requestId);\n    if (auditState != QuantstampAuditData.AuditState.Assigned) {\n      emit LogReportSubmissionError_InvalidState(requestId, msg.sender, auditState);\n      return;\n    }\n\n    // the sender must be the auditor\n    if (msg.sender != auditData.getAuditAuditor(requestId)) {\n      emit LogReportSubmissionError_InvalidAuditor(requestId, msg.sender);\n      return;\n    }\n\n    // remove the requestId from assigned queue\n    updateAssignedAudits(requestId);\n\n    // auditor should not send a report after its allowed period\n    uint256 allowanceBlockNumber = auditData.getAuditAssignBlockNumber(requestId) + auditData.auditTimeoutInBlocks();\n    if (allowanceBlockNumber < block.number) {\n      // update assigned to expired state\n      auditData.setAuditState(requestId, QuantstampAuditData.AuditState.Expired);\n      emit LogReportSubmissionError_ExpiredAudit(requestId, msg.sender, allowanceBlockNumber);\n      return;\n    }\n\n    // update the audit information held in this contract\n    auditData.setAuditState(requestId, auditResult);\n    auditData.setAuditReportHash(requestId, reportHash);\n    auditData.setAuditReportBlockNumber(requestId, block.number); // solhint-disable-line not-rely-on-time\n\n    // validate the audit state\n    require(isAuditFinished(requestId));\n\n    emit LogAuditFinished(requestId, msg.sender, auditResult, reportHash); // solhint-disable-line not-rely-on-time\n\n    if (auditResult == QuantstampAuditData.AuditState.Completed) {\n      uint256 auditPrice = auditData.getAuditPrice(requestId);\n      auditData.token().transfer(msg.sender, auditPrice);\n      emit LogPayAuditor(requestId, msg.sender, auditPrice);\n    }\n  }\n\n  /**\n   * @dev Determines who has to be paid for a given requestId recorded with an error status\n   * @param requestId Unique identifier of the audit request.\n   * @param toRequester The audit price goes to the requester or the audit node.\n   */\n  function resolveErrorReport(uint256 requestId, bool toRequester) public onlyOwner {\n    QuantstampAuditData.AuditState auditState = auditData.getAuditState(requestId);\n    if (auditState != QuantstampAuditData.AuditState.Error) {\n      emit LogInvalidResolutionCall(requestId);\n      return;\n    }\n\n    uint256 auditPrice = auditData.getAuditPrice(requestId);\n    address receiver = toRequester ? auditData.getAuditRequestor(requestId) : auditData.getAuditAuditor(requestId);\n    auditData.token().transfer(receiver, auditPrice);\n    auditData.setAuditState(requestId, QuantstampAuditData.AuditState.Resolved);\n    emit LogErrorReportResolved(requestId, receiver, auditPrice);\n  }\n\n  /**\n   * @dev Determines if there is an audit request available to be picked up by the caller\n   */\n  function anyRequestAvailable() public view returns(AuditAvailabilityState) {\n    // there are no audits in the queue\n    if (!auditQueueExists()) {\n      return AuditAvailabilityState.Empty;\n    }\n\n    // check if the auditor's assignment is not exceeded.\n    if (assignedRequestCount[msg.sender] >= auditData.maxAssignedRequests()) {\n      return AuditAvailabilityState.Exceeded;\n    }\n\n    if (anyAuditRequestMatchesPrice(auditData.getMinAuditPrice(msg.sender)) == 0) {\n      return AuditAvailabilityState.Underprice;\n    }\n\n    return AuditAvailabilityState.Ready;\n  }\n\n  /**\n   * @dev Finds a list of most expensive audits and assigns the oldest one to the auditor node.\n   */\n  function getNextAuditRequest() public onlyWhitelisted {\n    // remove an expired audit request\n    if (assignedAudits.listExists()) {\n      bool exists;\n      uint256 potentialExpiredRequestId;\n      (exists, potentialExpiredRequestId) = assignedAudits.getAdjacent(HEAD, NEXT);\n      uint256 allowanceBlockNumber = auditData.getAuditAssignBlockNumber(potentialExpiredRequestId) + auditData.auditTimeoutInBlocks();\n      if (allowanceBlockNumber < block.number) {\n        updateAssignedAudits(potentialExpiredRequestId);\n        auditData.setAuditState(potentialExpiredRequestId, QuantstampAuditData.AuditState.Expired);\n        emit LogAuditAssignmentUpdate_Expired(potentialExpiredRequestId, allowanceBlockNumber);\n      }\n    }\n\n    AuditAvailabilityState isRequestAvailable = anyRequestAvailable();\n    // there are no audits in the queue\n    if (isRequestAvailable == AuditAvailabilityState.Empty) {\n      emit LogAuditQueueIsEmpty();\n      return;\n    }\n\n    // check if the auditor's assignment is not exceeded.\n    if (isRequestAvailable == AuditAvailabilityState.Exceeded) {\n      emit LogAuditAssignmentError_ExceededMaxAssignedRequests(msg.sender);\n      return;\n    }\n\n    // there are no audits in the queue with a price high enough for the audit node\n    uint256 minPrice = auditData.getMinAuditPrice(msg.sender);\n    uint256 requestId = dequeueAuditRequest(minPrice);\n    if (requestId == 0) {\n      emit LogAuditNodePriceHigherThanRequests(msg.sender, minPrice);\n      return;\n    }\n\n    auditData.setAuditState(requestId, QuantstampAuditData.AuditState.Assigned);\n    auditData.setAuditAuditor(requestId, msg.sender);\n    auditData.setAuditAssignBlockNumber(requestId, block.number);\n    assignedRequestCount[msg.sender]++;\n\n    // push to the tail\n    assignedAudits.push(requestId, PREV);\n\n    emit LogAuditAssigned(\n      requestId,\n      auditData.getAuditAuditor(requestId),\n      auditData.getAuditRequestor(requestId),\n      auditData.getAuditContractUri(requestId),\n      auditData.getAuditPrice(requestId),\n      auditData.getAuditRequestBlockNumber(requestId));\n  }\n\n  /**\n   * @dev Allows the audit node to set its minimum price per audit in wei-QSP\n   * @param price The minimum price.\n   */\n  function setAuditNodePrice(uint256 price) public onlyWhitelisted {\n    auditData.setMinAuditPrice(msg.sender, price);\n    emit LogAuditNodePriceChanged(msg.sender, price);\n  }\n\n  /**\n   * @dev Checks if an audit is finished. It is considered finished when the audit is either completed or failed.\n   * @param requestId Unique ID of the audit request.\n   */\n  function isAuditFinished(uint256 requestId) public view returns(bool) {\n    QuantstampAuditData.AuditState state = auditData.getAuditState(requestId);\n    return state == QuantstampAuditData.AuditState.Completed || state == QuantstampAuditData.AuditState.Error;\n  }\n\n  /**\n   * @dev Given a price, returns the next price from the priceList\n   * @param price of the current node\n   * @return next price in the linked list\n   */\n  function getNextPrice(uint256 price) public view returns(uint256) {\n    bool exists;\n    uint256 next;\n    (exists, next) = priceList.getAdjacent(price, NEXT);\n    return next;\n  }\n\n  /**\n   * @dev Given a requestId, returns the next one from assignedAudits\n   * @param requestId of the current node\n   * @return next requestId in the linked list\n   */\n  function getNextAssignedRequest(uint256 requestId) public view returns(uint256) {\n    bool exists;\n    uint256 next;\n    (exists, next) = assignedAudits.getAdjacent(requestId, NEXT);\n    return next;\n  }\n\n  /**\n   * @dev Given a price and a requestId, then function returns the next requestId with the same price\n   * return 0, provided the given price does not exist in auditsByPrice\n   * @param price of the current bucket\n   * @param requestId unique Id of an requested audit\n   * @return next requestId with the same price\n   */\n  function getNextAuditByPrice(uint256 price, uint256 requestId) public view returns(uint256) {\n    bool exists;\n    uint256 next;\n    (exists, next) = auditsByPrice[price].getAdjacent(requestId, NEXT);\n    return next;\n  }\n\n  /**\n   * @dev Given a requestId, the function removes it from the list of audits and decreases the number of assigned\n   * audits of the associated auditor\n   * @param requestId unique Id of an requested audit\n   */\n  function updateAssignedAudits(uint256 requestId) internal {\n    assignedAudits.remove(requestId);\n    assignedRequestCount[auditData.getAuditAuditor(requestId)] =\n      assignedRequestCount[auditData.getAuditAuditor(requestId)].sub(1);\n  }\n\n  /**\n   * @dev Checks if the list of audits has any elements\n   */\n  function auditQueueExists() internal view returns(bool) {\n    return priceList.listExists();\n  }\n\n  /**\n   * @dev Adds an audit request to the queue\n   * @param requestId Request ID.\n   * @param existingPrice price of an existing audit in the queue (makes insertion O(1))\n   */\n  function queueAuditRequest(uint256 requestId, uint256 existingPrice) internal {\n    uint256 price = auditData.getAuditPrice(requestId);\n    if (!priceList.nodeExists(price)) {\n      // if a price bucket doesn't exist, create it next to an existing one\n      priceList.insert(priceList.getSortedSpot(existingPrice, price, NEXT), price, PREV);\n    }\n    // push to the tail\n    auditsByPrice[price].push(requestId, PREV);\n  }\n\n  /**\n   * @dev Evaluates if there is an audit price >= minPrice. Returns 0 if there no audit with the desired price.\n   * Note that there should not be any audit with price as 0.\n   * @param minPrice The minimum audit price.\n   */\n  function anyAuditRequestMatchesPrice(uint256 minPrice) internal view returns(uint256) {\n    bool exists;\n    uint256 price;\n\n    // picks the tail of price buckets\n    (exists, price) = priceList.getAdjacent(HEAD, PREV);\n\n    if (price < minPrice) {\n      return 0;\n    }\n    return price;\n  }\n\n  /**\n   * @dev Finds a list of most expensive audits and returns the oldest one that has a price >= minPrice\n   * @param minPrice The minimum audit price.\n   */\n  function dequeueAuditRequest(uint256 minPrice) internal returns(uint256) {\n    uint256 price;\n\n    // picks the tail of price buckets\n    // TODO seems the following statement is redundantly called from getNextAuditRequest. If this is the only place\n    // to call dequeueAuditRequest, then removing the following line saves gas, but leaves dequeueAuditRequest\n    // unsafe for further extension by noobies.\n    price = anyAuditRequestMatchesPrice(minPrice);\n\n    if (price > 0) {\n      // picks the oldest audit request\n      uint256 result = auditsByPrice[price].pop(NEXT);\n      // removes the price bucket if it contains no requests\n      if (!auditsByPrice[price].listExists()) {\n        priceList.remove(price);\n      }\n      return result;\n    }\n    return 0;\n  }\n\n  /**\n   * @dev Removes an element from the list\n   * @param requestId The Id of the request to be removed\n   */\n  function removeQueueElement(uint256 requestId) internal {\n    uint256 price = auditData.getAuditPrice(requestId);\n\n    // the node must exist in the list\n    require(priceList.nodeExists(price));\n    require(auditsByPrice[price].nodeExists(requestId));\n\n    auditsByPrice[price].remove(requestId);\n    if (!auditsByPrice[price].listExists()) {\n      priceList.remove(price);\n    }\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"isAuditFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setAuditNodePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractUri\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"requestAudit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getNextAuditByPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestId\",\"type\":\"uint256\"},{\"name\":\"toRequester\",\"type\":\"bool\"}],\"name\":\"resolveErrorReport\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getNextAssignedRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auditData\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"anyRequestAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestId\",\"type\":\"uint256\"},{\"name\":\"auditResult\",\"type\":\"uint8\"},{\"name\":\"reportHash\",\"type\":\"string\"}],\"name\":\"submitReport\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"getNextPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getNextAuditRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"assignedRequestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"auditDataAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"auditResult\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"reportHash\",\"type\":\"string\"}],\"name\":\"LogAuditFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"requestor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"uri\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"LogAuditRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"uri\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"requestBlockNumber\",\"type\":\"uint256\"}],\"name\":\"LogAuditAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"auditor\",\"type\":\"address\"}],\"name\":\"LogReportSubmissionError_InvalidAuditor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"LogReportSubmissionError_InvalidState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"LogReportSubmissionError_InvalidResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"allowanceBlockNumber\",\"type\":\"uint256\"}],\"name\":\"LogReportSubmissionError_ExpiredAudit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auditor\",\"type\":\"address\"}],\"name\":\"LogAuditAssignmentError_ExceededMaxAssignedRequests\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"allowanceBlockNumber\",\"type\":\"uint256\"}],\"name\":\"LogAuditAssignmentUpdate_Expired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogAuditQueueIsEmpty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPayAuditor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogAuditNodePriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"requestor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"requestor\",\"type\":\"address\"}],\"name\":\"LogRefundInvalidRequestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"LogRefundInvalidState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fundLockEndBlock\",\"type\":\"uint256\"}],\"name\":\"LogRefundInvalidFundsLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogAuditNodePriceHigherThanRequests\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"LogInvalidResolutionCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"auditPrice\",\"type\":\"uint256\"}],\"name\":\"LogErrorReportResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000dC12d419A2E2DB3De79e26628e1ac1298B02D231",
  "libraries": [
    {
      "name": "LinkedListLib",
      "address": "0x9acb1f968e798f3fd3545094a4637cb4179d2557"
    }
  ]
}