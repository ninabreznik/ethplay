{
  "address": "0x41c32a8387ff178659ed9b04190613623f545657",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PassportLogicRegistry",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-19\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/HasNoEther.sol\n\n/**\n * @title Contracts that should not own Ether\n * @author Remco Bloemen <[email protected]π.com>\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n * in the contract, it will allow the owner to reclaim this Ether.\n * @notice Ether can still be sent to this contract by:\n * calling functions labeled `payable`\n * `selfdestruct(contract_address)`\n * mining directly to the contract address\n */\ncontract HasNoEther is Ownable {\n\n  /**\n  * @dev Constructor that rejects incoming Ether\n  * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n  * we could use assembly to access msg.value.\n  */\n  constructor() public payable {\n    require(msg.value == 0);\n  }\n\n  /**\n   * @dev Disallows direct send by setting a default function without the `payable` flag.\n   */\n  function() external {\n  }\n\n  /**\n   * @dev Transfer all Ether held by the contract to the owner.\n   */\n  function reclaimEther() external onlyOwner {\n    owner.transfer(address(this).balance);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20Basic _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n\n  function safeTransferFrom(\n    ERC20 _token,\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transferFrom(_from, _to, _value));\n  }\n\n  function safeApprove(\n    ERC20 _token,\n    address _spender,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.approve(_spender, _value));\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol\n\n/**\n * @title Contracts that should be able to recover tokens\n * @author SylTi\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n * This will prevent any accidental loss of tokens.\n */\ncontract CanReclaimToken is Ownable {\n  using SafeERC20 for ERC20Basic;\n\n  /**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param _token ERC20Basic The address of the token contract\n   */\n  function reclaimToken(ERC20Basic _token) external onlyOwner {\n    uint256 balance = _token.balanceOf(this);\n    _token.safeTransfer(owner, balance);\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/ownership/HasNoTokens.sol\n\n/**\n * @title Contracts that should not own Tokens\n * @author Remco Bloemen <[email protected]π.com>\n * @dev This blocks incoming ERC223 tokens to prevent accidental loss of tokens.\n * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\n * owner to reclaim the tokens.\n */\ncontract HasNoTokens is CanReclaimToken {\n\n /**\n  * @dev Reject all ERC223 compatible tokens\n  * @param _from address The address that is transferring the tokens\n  * @param _value uint256 the amount of the specified token\n  * @param _data Bytes The data passed from the caller.\n  */\n  function tokenFallback(\n    address _from,\n    uint256 _value,\n    bytes _data\n  )\n    external\n    pure\n  {\n    _from;\n    _value;\n    _data;\n    revert();\n  }\n\n}\n\n// File: contracts/IPassportLogicRegistry.sol\n\ninterface IPassportLogicRegistry {\n    /**\n     * @dev This event will be emitted every time a new passport logic implementation is registered\n     * @param version representing the version name of the registered passport logic implementation\n     * @param implementation representing the address of the registered passport logic implementation\n     */\n    event PassportLogicAdded(string version, address implementation);\n\n    /**\n     * @dev This event will be emitted every time a new passport logic implementation is set as current one\n     * @param version representing the version name of the current passport logic implementation\n     * @param implementation representing the address of the current passport logic implementation\n     */\n    event CurrentPassportLogicSet(string version, address implementation);\n\n    /**\n     * @dev Tells the address of the passport logic implementation for a given version\n     * @param _version to query the implementation of\n     * @return address of the passport logic implementation registered for the given version\n     */\n    function getPassportLogic(string _version) external view returns (address);\n\n    /**\n     * @dev Tells the version of the current passport logic implementation\n     * @return version of the current passport logic implementation\n     */\n    function getCurrentPassportLogicVersion() external view returns (string);\n\n    /**\n     * @dev Tells the address of the current passport logic implementation\n     * @return address of the current passport logic implementation\n     */\n    function getCurrentPassportLogic() external view returns (address);\n}\n\n// File: contracts/PassportLogicRegistry.sol\n\n/**\n * @title PassportImplRegistry\n * @dev This contract works as a registry of passport implementations, it holds the implementations for the registered versions.\n */\ncontract PassportLogicRegistry is IPassportLogicRegistry, Ownable, HasNoEther, HasNoTokens {\n    // current passport version/implementation\n    string internal currentPassportLogicVersion;\n    address internal currentPassportLogic;\n\n    // Mapping of versions to passport implementations\n    mapping(string => address) internal passportLogicImplementations;\n\n    /**\n     * @dev The PassportImplRegistry constructor sets the current passport version and implementation.\n     */\n    constructor (string _version, address _implementation) public {\n        _addPassportLogic(_version, _implementation);\n        _setCurrentPassportLogic(_version);\n    }\n\n    /**\n     * @dev Registers a new passport version with its logic implementation address\n     * @param _version representing the version name of the new passport logic implementation to be registered\n     * @param _implementation representing the address of the new passport logic implementation to be registered\n     */\n    function addPassportLogic(string _version, address _implementation) public onlyOwner {\n        _addPassportLogic(_version, _implementation);\n    }\n\n    /**\n     * @dev Tells the address of the passport logic implementation for a given version\n     * @param _version to query the implementation of\n     * @return address of the passport logic implementation registered for the given version\n     */\n    function getPassportLogic(string _version) external view returns (address) {\n        return passportLogicImplementations[_version];\n    }\n\n    /**\n     * @dev Sets a new passport logic implementation as current one\n     * @param _version representing the version name of the passport logic implementation to be set as current one\n     */\n    function setCurrentPassportLogic(string _version) public onlyOwner {\n        _setCurrentPassportLogic(_version);\n    }\n\n    /**\n     * @dev Tells the version of the current passport logic implementation\n     * @return version of the current passport logic implementation\n     */\n    function getCurrentPassportLogicVersion() external view returns (string) {\n        return currentPassportLogicVersion;\n    }\n\n    /**\n     * @dev Tells the address of the current passport logic implementation\n     * @return address of the current passport logic implementation\n     */\n    function getCurrentPassportLogic() external view returns (address) {\n        return currentPassportLogic;\n    }\n\n    function _addPassportLogic(string _version, address _implementation) internal {\n        require(_implementation != 0x0, \"Cannot set implementation to a zero address\");\n        require(passportLogicImplementations[_version] == 0x0, \"Cannot replace existing version implementation\");\n\n        passportLogicImplementations[_version] = _implementation;\n        emit PassportLogicAdded(_version, _implementation);\n    }\n\n    function _setCurrentPassportLogic(string _version) internal {\n        require(passportLogicImplementations[_version] != 0x0, \"Cannot set non-existing passport logic as current implementation\");\n\n        currentPassportLogicVersion = _version;\n        currentPassportLogic = passportLogicImplementations[_version];\n        emit CurrentPassportLogicSet(currentPassportLogicVersion, currentPassportLogic);\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000076e2fe5c37c47fe09dcfa55bec9fd34318922f270000000000000000000000000000000000000000000000000000000000000003302e310000000000000000000000000000000000000000000000000000000000"
}