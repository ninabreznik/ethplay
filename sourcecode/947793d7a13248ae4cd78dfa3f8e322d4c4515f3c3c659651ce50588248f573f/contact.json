{
  "address": "0x7cdc6bb9534f18e6e532b37f4cbcf90bd641e73b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Crowdsale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-03\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n    \n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    uint _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    \n  address public owner;\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));      \n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\ncontract MSPT is Ownable, MintableToken {\n  using SafeMath for uint256;    \n  string public constant name = \"MySmartProperty Tokens\";\n  string public constant symbol = \"MSPT\";\n  uint32 public constant decimals = 18;\n\n  address public addressSupporters;\n  address public addressEccles;\n  address public addressJenkins;\n  address public addressLeskiw;\n  address public addressBilborough;\n\n  uint public summSupporters = 1000000 * 1 ether;\n  uint public summEccles = 2000000 * 1 ether;\n  uint public summJenkins = 2000000 * 1 ether;\n  uint public summLeskiw = 2000000 * 1 ether;\n  uint public summBilborough = 3000000 * 1 ether;\n\n  function MSPT() public {\n    addressSupporters = 0x49ce9f664d9fe7774fE29F5ab17b46266e4437a4;\n    addressEccles = 0xF59C5199FCd7e29b2979831e39EfBcf16b90B485;\n    addressJenkins = 0x974e94C33a37e05c4cE292b43e7F50a57fAA5Bc7;\n    addressLeskiw = 0x3a7e8Eb6DDAa74e58a6F3A39E3d073A9eFA22160;\n    addressBilborough = 0xAabb89Ade1Fc2424b7FE837c40E214375Dcf9840;  \n      \n    //Founders and supporters initial Allocations\n    balances[addressSupporters] = balances[addressSupporters].add(summSupporters);\n    balances[addressEccles] = balances[addressEccles].add(summEccles);\n    balances[addressJenkins] = balances[addressJenkins].add(summJenkins);\n    balances[addressLeskiw] = balances[addressLeskiw].add(summLeskiw);\n    balances[addressBilborough] = balances[addressBilborough].add(summBilborough);\n    totalSupply = summSupporters.add(summEccles).add(summJenkins).add(summLeskiw).add(summBilborough);\n  }\n  function getTotalSupply() public constant returns(uint256){\n      return totalSupply;\n  }\n}\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet\n * as they arrive. The contract requires a MintableToken that will be\n * minted as contributions arrive, note that the crowdsale contract\n * must be owner of the token in order to be able to mint it.\n */\ncontract Crowdsale is Ownable {\n  using SafeMath for uint256;\n  // The token being sold\n  MSPT public token;\n  // start and end timestamps where investments are allowed (both inclusive)\n  uint256 public startPreICO;\n  uint256 public startICO;\n  uint256 public endPreICO;\n  uint256 public endICO;           \n  \n  uint256 public maxAmountPreICO;\n  uint256 public maxAmountICO;\n  \n  uint256 public totalPreICOAmount;\n  uint256 public totalICOAmount;\n  \n  // Remaining Token Allocation\n  uint public mintStart1; //15th July 2018\n  uint public mintStart2; //15th August 2018\n  uint public mintStart3; //15th December 2018\n  uint public mintStart4; //15th January 2018\n  uint public mintStart5; //15th July 2019     \n  \n  // address where funds are collected\n  address public wallet;\n\n  // how many token units a buyer gets per wei\n  uint256 public ratePreICO;\n  uint256 public rateICO;      \n\n  // minimum quantity values\n  uint256 public minQuanValues; \n  \n  // Remaining Token Allocation\n  uint256 public totalMintAmount; \n  uint256 public allowTotalMintAmount;\n  uint256 public mintAmount1;\n  uint256 public mintAmount2;\n  uint256 public mintAmount3;\n  uint256 public mintAmount4;\n  uint256 public mintAmount5;\n  // totalTokens\n  uint256 public totalTokens;\n  \n  /**\n   * event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n  function Crowdsale() public {\n    token = createTokenContract();\n    // total number of tokens\n    totalTokens = 100000000 * 1 ether;\n    // minimum quantity values\n    minQuanValues = 100000000000000000;\n    // start and end timestamps where investments are allowed\n    startPreICO = 1527948000; //3 June 2018 00:00:00 +10 GMT\n    endPreICO = 1530280800; //30 June 2018 00:00:00 +10 GMT\n    startICO = 1530280800; //30 June 2018 00:00:00 +10 GMT\n    endICO = startICO +  30 * 1 days;           \n    // restrictions on amounts during the ico stages\n    maxAmountPreICO = 12000000  * 1 ether;\n    maxAmountICO = 24000000  * 1 ether;\n    // rate decimals = 2;\n    ratePreICO = 79294;\n    rateICO = 59470;\n    // Remaining Token Allocation    \n    mintAmount1 = 10000000 * 1 ether;\n    mintAmount2 = 10000000 * 1 ether;\n    mintAmount3 = 10000000 * 1 ether;\n    mintAmount4 = 10000000 * 1 ether;\n    mintAmount5 = 10000000 * 1 ether;\n    \n    mintStart1 = 1538316000; //1st October  2018 +10 GMT\n    mintStart2 = 1540994400; //1st November 2018 +10 GMT\n    mintStart3 = 1551362400; //1st March    2019 +10 GMT\n    mintStart4 = 1554040800; //1st April    2019 +10 GMT\n    mintStart5 = 1569852000; //1st October  2019 +10 GMT\n    // address where funds are collected\n    wallet = 0x7Ac93a7A1F8304c003274512F6c46C132106FE8E;\n  }\n  function setRatePreICO(uint _ratePreICO) public {\n    ratePreICO = _ratePreICO;\n  }  \n  function setRateICO(uint _rateICO) public {\n    rateICO = _rateICO;\n  }    \n  \n  function createTokenContract() internal returns (MSPT) {\n    return new MSPT();\n  }\n\n  // fallback function can be used to buy tokens\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  // low level token purchase function\n  function buyTokens(address beneficiary) public payable {\n    uint256 tokens;\n    uint256 weiAmount = msg.value;\n    uint256 backAmount;\n    require(beneficiary != address(0));\n    //minimum amount in ETH\n    require(weiAmount >= minQuanValues);\n    if (now >= startPreICO && now < endPreICO && totalPreICOAmount < maxAmountPreICO && tokens == 0){\n      tokens = weiAmount.div(100).mul(ratePreICO);\n      if (maxAmountPreICO.sub(totalPreICOAmount) < tokens){\n        tokens = maxAmountPreICO.sub(totalPreICOAmount); \n        weiAmount = tokens.mul(100).div(ratePreICO);\n        backAmount = msg.value.sub(weiAmount);\n      }\n      totalPreICOAmount = totalPreICOAmount.add(tokens);\n      if (totalPreICOAmount >= maxAmountPreICO){\n        startICO = now;\n        endICO = startICO + 30 * 1 days;\n      }   \n    }    \n    if (now >= startICO && totalICOAmount < maxAmountICO  && tokens == 0){\n      tokens = weiAmount.div(100).mul(rateICO);\n      if (maxAmountICO.sub(totalICOAmount) < tokens){\n        tokens = maxAmountICO.sub(totalICOAmount); \n        weiAmount = tokens.mul(100).div(rateICO);\n        backAmount = msg.value.sub(weiAmount);\n      }\n      totalICOAmount = totalICOAmount.add(tokens);\n    }     \n    require(tokens > 0);\n    token.mint(beneficiary, tokens);\n    wallet.transfer(weiAmount);\n    \n    if (backAmount > 0){\n      msg.sender.transfer(backAmount);    \n    }\n    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n  }\n\n  function mintTokens(address _to, uint256 _amount) onlyOwner public returns (bool) {\n    require(_amount > 0);\n    require(_to != address(0));\n    if (now >= mintStart1 && now < mintStart2){\n      allowTotalMintAmount = mintAmount1;  \n    }\n    if (now >= mintStart2 && now < mintStart3){\n      allowTotalMintAmount = mintAmount1.add(mintAmount2);  \n    }  \n    if (now >= mintStart3 && now < mintStart4){\n      allowTotalMintAmount = mintAmount1.add(mintAmount2).add(mintAmount3);  \n    }       \n    if (now >= mintStart4 && now < mintStart5){\n      allowTotalMintAmount = mintAmount1.add(mintAmount2).add(mintAmount3).add(mintAmount4);  \n    }       \n    if (now >= mintStart5){\n      allowTotalMintAmount = totalMintAmount.add(totalTokens.sub(token.getTotalSupply()));\n    }       \n    require(_amount.add(totalMintAmount) <= allowTotalMintAmount);\n    token.mint(_to, _amount);\n    totalMintAmount = totalMintAmount.add(_amount);\n    return true;\n  }\n  function finishMintingTokens() onlyOwner public returns (bool) {\n    token.finishMinting(); \n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"maxAmountPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowTotalMintAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintStart5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAmountICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintStart2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintStart3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ratePreICO\",\"type\":\"uint256\"}],\"name\":\"setRatePreICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintAmount3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPreICOAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintAmount1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rateICO\",\"type\":\"uint256\"}],\"name\":\"setRateICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintAmount5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintStart4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMintAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minQuanValues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintAmount2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMintingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintStart1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintAmount4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalICOAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a03191633179055610034640100000000610125810204565b60018054600160a060020a0392909216600160a060020a03199283161790556a52b7d2dcc80cd2e4000000601a5567016345785d8a0000601255635b12a2e0600255635b363b606004819055600355635b5dc8606005556a09ed194db19b238c0000006006556a13da329b63364718000000600755620135be60105561e84e6011556a084595161401484a0000006015819055601681905560178190556018819055601955635bb0d6e0600a55635bd9b560600b55635c77e960600c55635ca0c7e0600d55635d920a60600e55600f8054909116737ac93a7a1f8304c003274512f6c46c132106fe8e179055610161565b600061012f610151565b604051809103906000f08015801561014b573d6000803e3d6000fd5b50905090565b604051610dc280610e4a83390190565b610cda806101706000396000f3006080604052600436106101875763ffffffff60e060020a60003504166304338def81146101925780630f3f0e42146101b95780632525aa78146101ce57806332dae2a5146101e35780633568bd39146101f8578063404cf9321461020d5780634c95ca9c146102225780634f2484091461023a578063517a70d41461024f578063521eb273146102645780635c4a627f1461029557806369d6b880146102aa5780636ad43a54146102bf5780636fb66278146102d757806377f3293a146102ec5780637e1c0c09146103015780637fa8c158146103165780638da5cb5b1461032b578063a174c4c614610340578063bc40b52a14610355578063c51601871461036a578063c8765ff21461037f578063d004534114610394578063d6823455146103a9578063dcdaa35b146103be578063e2dc5da5146103d3578063e62bd899146103fc578063ec8ac4d814610411578063f0dda65c14610425578063f1b5bc1714610449578063f2fde38b1461045e578063f3147b001461047f578063fc0c546a14610494575b610190336104a9565b005b34801561019e57600080fd5b506101a76107e7565b60408051918252519081900360200190f35b3480156101c557600080fd5b506101a76107ed565b3480156101da57600080fd5b506101a76107f3565b3480156101ef57600080fd5b506101a76107f9565b34801561020457600080fd5b506101a76107ff565b34801561021957600080fd5b506101a7610805565b34801561022e57600080fd5b5061019060043561080b565b34801561024657600080fd5b506101a7610810565b34801561025b57600080fd5b506101a7610816565b34801561027057600080fd5b5061027961081c565b60408051600160a060020a039092168252519081900360200190f35b3480156102a157600080fd5b506101a761082b565b3480156102b657600080fd5b506101a7610831565b3480156102cb57600080fd5b50610190600435610837565b3480156102e357600080fd5b506101a761083c565b3480156102f857600080fd5b506101a7610842565b34801561030d57600080fd5b506101a7610848565b34801561032257600080fd5b506101a761084e565b34801561033757600080fd5b50610279610854565b34801561034c57600080fd5b506101a7610863565b34801561036157600080fd5b506101a7610869565b34801561037657600080fd5b506101a761086f565b34801561038b57600080fd5b506101a7610875565b3480156103a057600080fd5b506101a761087b565b3480156103b557600080fd5b506101a7610881565b3480156103ca57600080fd5b506101a7610887565b3480156103df57600080fd5b506103e861088d565b604080519115158252519081900360200190f35b34801561040857600080fd5b506101a7610929565b610190600160a060020a03600435166104a9565b34801561043157600080fd5b506103e8600160a060020a036004351660243561092f565b34801561045557600080fd5b506101a7610bc9565b34801561046a57600080fd5b50610190600160a060020a0360043516610bcf565b34801561048b57600080fd5b506101a7610c2a565b3480156104a057600080fd5b50610279610c30565b60003481600160a060020a03841615156104c257600080fd5b6012548210156104d157600080fd5b60025442101580156104e4575060045442105b80156104f35750600654600854105b80156104fd575082155b156105c6576010546105269061051a84606463ffffffff610c3f16565b9063ffffffff610c5b16565b925082610540600854600654610c8d90919063ffffffff16565b10156105975760085460065461055b9163ffffffff610c8d16565b6010549093506105829061057685606463ffffffff610c5b16565b9063ffffffff610c3f16565b9150610594348363ffffffff610c8d16565b90505b6008546105aa908463ffffffff610c9f16565b6008819055600654116105c65742600381905562278d00016005555b60035442101580156105db5750600754600954105b80156105e5575082155b1561067e576011546106029061051a84606463ffffffff610c3f16565b92508261061c600954600754610c8d90919063ffffffff16565b1015610667576009546007546106379163ffffffff610c8d16565b6011549093506106529061057685606463ffffffff610c5b16565b9150610664348363ffffffff610c8d16565b90505b60095461067a908463ffffffff610c9f16565b6009555b6000831161068b57600080fd5b600154604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03878116600483015260248201879052915191909216916340c10f199160448083019260209291908290030181600087803b1580156106fa57600080fd5b505af115801561070e573d6000803e3d6000fd5b505050506040513d602081101561072457600080fd5b5050600f54604051600160a060020a039091169083156108fc029084906000818181858888f19350505050158015610760573d6000803e3d6000fd5b50600081111561079957604051339082156108fc029083906000818181858888f19350505050158015610797573d6000803e3d6000fd5b505b60408051838152602081018590528151600160a060020a0387169233927f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18929081900390910190a350505050565b60065481565b60145481565b600e5481565b60075481565b600b5481565b600c5481565b601055565b60055481565b60175481565b600f54600160a060020a031681565b60085481565b60155481565b601155565b60105481565b60045481565b601a5481565b60035481565b600054600160a060020a031681565b60195481565b60025481565b600d5481565b60115481565b60135481565b60125481565b60165481565b60008054600160a060020a031633146108a557600080fd5b600160009054906101000a9004600160a060020a0316600160a060020a0316637d64bcb46040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156108f857600080fd5b505af115801561090c573d6000803e3d6000fd5b505050506040513d602081101561092257600080fd5b5090919050565b600a5481565b60008054600160a060020a0316331461094757600080fd5b6000821161095457600080fd5b600160a060020a038316151561096957600080fd5b600a54421015801561097c5750600b5442105b15610988576015546014555b600b54421015801561099b5750600c5442105b156109b9576016546015546109b59163ffffffff610c9f16565b6014555b600c5442101580156109cc5750600d5442105b156109fe576109fa6017546109ee601654601554610c9f90919063ffffffff16565b9063ffffffff610c9f16565b6014555b600d544210158015610a115750600e5442105b15610a3d57610a396018546109ee6017546109ee601654601554610c9f90919063ffffffff16565b6014555b600e544210610aed57610ae9610ada600160009054906101000a9004600160a060020a0316600160a060020a031663c4e41b226040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610a9f57600080fd5b505af1158015610ab3573d6000803e3d6000fd5b505050506040513d6020811015610ac957600080fd5b5051601a549063ffffffff610c8d16565b6013549063ffffffff610c9f16565b6014555b601454601354610b0490849063ffffffff610c9f16565b1115610b0f57600080fd5b600154604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015260248201869052915191909216916340c10f199160448083019260209291908290030181600087803b158015610b7e57600080fd5b505af1158015610b92573d6000803e3d6000fd5b505050506040513d6020811015610ba857600080fd5b5050601354610bbd908363ffffffff610c9f16565b60135550600192915050565b60185481565b600054600160a060020a03163314610be657600080fd5b600160a060020a0381161515610bfb57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60095481565b600154600160a060020a031681565b6000808284811515610c4d57fe5b0490508091505b5092915050565b600080831515610c6e5760009150610c54565b50828202828482811515610c7e57fe5b0414610c8657fe5b9392505050565b600082821115610c9957fe5b50900390565b600082820183811015610c8657fe00a165627a7a72305820d3f48673d70eb3c58ab8d2f84e2bda6ad2f90b3faf979ba8519da4a7ce136137002960806040526003805460a060020a60ff021916905569d3c21bcecceda10000006009556a01a784379d99db42000000600a819055600b819055600c556a027b46536c66c8e3000000600d553480156200005757600080fd5b5060038054600160a060020a031990811633179091556004805482167349ce9f664d9fe7774fe29f5ab17b46266e4437a4179081905560058054831673f59c5199fcd7e29b2979831e39efbcf16b90b48517905560068054831673974e94c33a37e05c4ce292b43e7f50a57faa5bc7179055600780548316733a7e8eb6ddaa74e58a6f3a39e3d073a9efa221601790556008805490921673aabb89ade1fc2424b7fe837c40e214375dcf984017909155600954600160a060020a03919091166000908152600160205260409020546200013e9164010000000062000a74620002d382021704565b600454600160a060020a0390811660009081526001602052604080822093909355600a5460055490921681529190912054620001889164010000000062000a74620002d382021704565b600554600160a060020a0390811660009081526001602052604080822093909355600b5460065490921681529190912054620001d29164010000000062000a74620002d382021704565b600654600160a060020a0390811660009081526001602052604080822093909355600c54600754909216815291909120546200021c9164010000000062000a74620002d382021704565b600754600160a060020a0390811660009081526001602052604080822093909355600d5460085490921681529190912054620002669164010000000062000a74620002d382021704565b600854600160a060020a0316600090815260016020526040902055600d54600c54600b54600a54600954620002ca9493620002b59390928492839164010000000062000a74620002d382021704565b9064010000000062000a74620002d382021704565b600055620002ea565b600082820183811015620002e357fe5b9392505050565b610ac880620002fa6000396000f3006080604052600436106101485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461014d57806306fdde0314610176578063095ea7b3146102005780630bc33b2214610224578063146e93291461025557806318160ddd1461027c57806323b872dd14610291578063313ce567146102bb57806340c10f19146102e95780636eb5bef01461030d57806370a08231146103225780637d64bcb4146103435780638da5cb5b1461035857806393dd98661461036d57806395d89b4114610382578063a9059cbb14610397578063b3adfa0c146103bb578063b5fb19ed146103d0578063b96e988b146103e5578063c4e41b22146103fa578063cf5b80181461040f578063da652b4a14610424578063dd62ed3e14610439578063e24b772114610460578063f2fde38b14610475575b600080fd5b34801561015957600080fd5b50610162610498565b604080519115158252519081900360200190f35b34801561018257600080fd5b5061018b6104b9565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101c55781810151838201526020016101ad565b50505050905090810190601f1680156101f25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020c57600080fd5b50610162600160a060020a03600435166024356104f0565b34801561023057600080fd5b50610239610592565b60408051600160a060020a039092168252519081900360200190f35b34801561026157600080fd5b5061026a6105a1565b60408051918252519081900360200190f35b34801561028857600080fd5b5061026a6105a7565b34801561029d57600080fd5b50610162600160a060020a03600435811690602435166044356105ad565b3480156102c757600080fd5b506102d06106bc565b6040805163ffffffff9092168252519081900360200190f35b3480156102f557600080fd5b50610162600160a060020a03600435166024356106c1565b34801561031957600080fd5b506102396107dd565b34801561032e57600080fd5b5061026a600160a060020a03600435166107ec565b34801561034f57600080fd5b50610162610807565b34801561036457600080fd5b506102396108ad565b34801561037957600080fd5b5061026a6108bc565b34801561038e57600080fd5b5061018b6108c2565b3480156103a357600080fd5b50610162600160a060020a03600435166024356108f9565b3480156103c757600080fd5b5061026a6109a9565b3480156103dc57600080fd5b506102396109af565b3480156103f157600080fd5b506102396109be565b34801561040657600080fd5b5061026a6109cd565b34801561041b57600080fd5b5061026a6109d3565b34801561043057600080fd5b5061026a6109d9565b34801561044557600080fd5b5061026a600160a060020a03600435811690602435166109df565b34801561046c57600080fd5b50610239610a0a565b34801561048157600080fd5b50610496600160a060020a0360043516610a19565b005b60035474010000000000000000000000000000000000000000900460ff1681565b60408051808201909152601681527f4d79536d61727450726f706572747920546f6b656e7300000000000000000000602082015281565b60008115806105205750336000908152600260209081526040808320600160a060020a0387168452909152902054155b151561052b57600080fd5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600654600160a060020a031681565b600b5481565b60005481565b600160a060020a038084166000908152600260209081526040808320338452825280832054938616835260019091528120549091906105f2908463ffffffff610a7416565b600160a060020a038086166000908152600160205260408082209390935590871681522054610627908463ffffffff610a8a16565b600160a060020a038616600090815260016020526040902055610650818463ffffffff610a8a16565b600160a060020a03808716600081815260026020908152604080832033845282529182902094909455805187815290519288169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3506001949350505050565b601281565b600354600090600160a060020a031633146106db57600080fd5b60035474010000000000000000000000000000000000000000900460ff161561070357600080fd5b600054610716908363ffffffff610a7416565b6000908155600160a060020a038416815260016020526040902054610741908363ffffffff610a7416565b600160a060020a038416600081815260016020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b600454600160a060020a031681565b600160a060020a031660009081526001602052604090205490565b600354600090600160a060020a0316331461082157600080fd5b60035474010000000000000000000000000000000000000000900460ff161561084957600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a031681565b600a5481565b60408051808201909152600481527f4d53505400000000000000000000000000000000000000000000000000000000602082015281565b33600090815260016020526040812054610919908363ffffffff610a8a16565b3360009081526001602052604080822092909255600160a060020a0385168152205461094b908363ffffffff610a7416565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600c5481565b600554600160a060020a031681565b600854600160a060020a031681565b60005490565b60095481565b600d5481565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600754600160a060020a031681565b600354600160a060020a03163314610a3057600080fd5b600160a060020a0381161515610a4557600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082820183811015610a8357fe5b9392505050565b600082821115610a9657fe5b509003905600a165627a7a7230582041d70cc500bbbaeb407409beba23cef4a0c598e9fc0ada6ca5a34a03a91863060029"
}