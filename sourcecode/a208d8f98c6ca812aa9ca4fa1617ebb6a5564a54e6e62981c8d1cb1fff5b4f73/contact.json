{
  "address": "0x35a6525236eb72ef0629b046767b9b9ac0bd9757",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Bet4Land",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-02\n*/\n\n/**\n * Copyright (C) 2017-2018 Hashfuture Inc. All rights reserved.\n */\n\n\npragma solidity ^0.4.19;\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ncontract Bet4Land is owned {\n\n    /* Struct for one game */\n    struct Game {\n        uint gameId;            // Unique id for a game\n        bytes8 landKey;         // Unique key for a land, derived from longitude and latitude\n        uint seedBlock;         // Block number whose hash as random seed\n        uint userNum;           // Number of users joined this game, maximum 100\n        string content;         // Full content of one game\n    }\n\n    uint gameNum;\n    /* This notes all games and a map from gameId to gameIdx */\n    mapping(uint => Game) games;\n    mapping(uint => uint) indexMap;\n\n    /** constructor */\n    function Bet4Land() public {\n        gameNum = 1;\n    }\n\n    /**\n     * Initialize a new game\n     */\n    function newGame(uint gameId, bytes8 landKey, uint seedBlock, uint userNum, string content) onlyOwner public returns (uint gameIndex) {\n        require(indexMap[gameId] == 0);             // gameId should be unique\n        gameIndex = gameNum++;\n        indexMap[gameId] = gameIndex;\n        games[gameIndex] = Game(gameId, landKey, seedBlock, userNum, content);\n    }\n\n    /**\n     * Get game info by index\n     * Only can be called by newOwner\n     */\n    function getGameInfoByIndex(uint gameIndex) onlyOwner public view returns (uint gameId, bytes8 landKey, uint seedBlock, uint userNum, string content) {\n        require(gameIndex < gameNum);               // should exist\n        require(gameIndex >= 1);                    // should exist\n        gameId = games[gameIndex].gameId;\n        landKey = games[gameIndex].landKey;\n        seedBlock = games[gameIndex].seedBlock;\n        userNum = games[gameIndex].userNum;\n        content = games[gameIndex].content;\n    }\n\n    /**\n     * Get game info by game id\n     * Only can be called by newOwner\n     */\n    function getGameInfoById(uint gameId) public view returns (uint gameIndex, bytes8 landKey, uint seedBlock, uint userNum, string content) {\n        gameIndex = indexMap[gameId];\n        require(gameIndex < gameNum);              // should exist\n        require(gameIndex >= 1);                   // should exist\n        landKey = games[gameIndex].landKey;\n        seedBlock = games[gameIndex].seedBlock;\n        userNum = games[gameIndex].userNum;\n        content = games[gameIndex].content;\n    }\n\n    /**\n     * Get the number of games\n     */\n    function getGameNum() onlyOwner public view returns (uint num) {\n        num = gameNum - 1;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"landKey\",\"type\":\"bytes8\"},{\"name\":\"seedBlock\",\"type\":\"uint256\"},{\"name\":\"userNum\",\"type\":\"uint256\"},{\"name\":\"content\",\"type\":\"string\"}],\"name\":\"newGame\",\"outputs\":[{\"name\":\"gameIndex\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameNum\",\"outputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameInfoById\",\"outputs\":[{\"name\":\"gameIndex\",\"type\":\"uint256\"},{\"name\":\"landKey\",\"type\":\"bytes8\"},{\"name\":\"seedBlock\",\"type\":\"uint256\"},{\"name\":\"userNum\",\"type\":\"uint256\"},{\"name\":\"content\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameIndex\",\"type\":\"uint256\"}],\"name\":\"getGameInfoByIndex\",\"outputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"landKey\",\"type\":\"bytes8\"},{\"name\":\"seedBlock\",\"type\":\"uint256\"},{\"name\":\"userNum\",\"type\":\"uint256\"},{\"name\":\"content\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]",
  "bytecode": "6060604052341561000f57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018081905550610a91806100656000396000f300606060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063213ae9ec1461007d5780636ea8efea1461012d5780638da5cb5b14610156578063d739aaf8146101ab578063f2fde38b14610299578063fb9dd851146102d2575b600080fd5b341561008857600080fd5b610117600480803590602001909190803577ffffffffffffffffffffffffffffffffffffffffffffffff191690602001909190803590602001909190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506103c0565b6040518082815260200191505060405180910390f35b341561013857600080fd5b610140610548565b6040518082815260200191505060405180910390f35b341561016157600080fd5b6101696105af565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101b657600080fd5b6101cc60048080359060200190919050506105d4565b604051808681526020018577ffffffffffffffffffffffffffffffffffffffffffffffff191677ffffffffffffffffffffffffffffffffffffffffffffffff1916815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561025a57808201518184015260208101905061023f565b50505050905090810190601f1680156102875780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34156102a457600080fd5b6102d0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610742565b005b34156102dd57600080fd5b6102f360048080359060200190919050506107e0565b604051808681526020018577ffffffffffffffffffffffffffffffffffffffffffffffff191677ffffffffffffffffffffffffffffffffffffffffffffffff1916815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610381578082015181840152602081019050610366565b50505050905090810190601f1680156103ae5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561041d57600080fd5b6000600360008881526020019081526020016000205414151561043f57600080fd5b6001600081548092919060010191905055905080600360008881526020019081526020016000208190555060a0604051908101604052808781526020018677ffffffffffffffffffffffffffffffffffffffffffffffff1916815260200185815260200184815260200183815250600260008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548167ffffffffffffffff02191690837801000000000000000000000000000000000000000000000000900402179055506040820151816002015560608201518160030155608082015181600401908051906020019061053b9291906109ac565b5090505095945050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105a557600080fd5b6001805403905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000806105e2610a2c565b600360008781526020019081526020016000205494506001548510151561060857600080fd5b6001851015151561061857600080fd5b6002600086815260200190815260200160002060010160009054906101000a900478010000000000000000000000000000000000000000000000000293506002600086815260200190815260200160002060020154925060026000868152602001908152602001600020600301549150600260008681526020019081526020016000206004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107325780601f1061070757610100808354040283529160200191610732565b820191906000526020600020905b81548152906001019060200180831161071557829003601f168201915b5050505050905091939590929450565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561079d57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000806107ee610a2c565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561084957600080fd5b6001548610151561085957600080fd5b6001861015151561086957600080fd5b600260008781526020019081526020016000206000015494506002600087815260200190815260200160002060010160009054906101000a900478010000000000000000000000000000000000000000000000000293506002600087815260200190815260200160002060020154925060026000878152602001908152602001600020600301549150600260008781526020019081526020016000206004018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561099c5780601f106109715761010080835404028352916020019161099c565b820191906000526020600020905b81548152906001019060200180831161097f57829003601f168201915b5050505050905091939590929450565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106109ed57805160ff1916838001178555610a1b565b82800160010185558215610a1b579182015b82811115610a1a5782518255916020019190600101906109ff565b5b509050610a289190610a40565b5090565b602060405190810160405280600081525090565b610a6291905b80821115610a5e576000816000905550600101610a46565b5090565b905600a165627a7a72305820d8044b1e2887c899c99e46c69ddab99d5d8b120be7a19aef717c1e809064052d0029"
}