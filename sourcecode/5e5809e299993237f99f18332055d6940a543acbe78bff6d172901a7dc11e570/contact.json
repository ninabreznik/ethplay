{
  "address": "0x38f22479795a1a51ccd1e5a41f09c7525fb27318",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Trent",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-05\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {if (a == 0) {return 0;} uint256 c = a * b; assert(c / a == b); return c;}\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {uint256 c = a / b; return c;}\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {assert(b <= a); return a - b;}\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {uint256 c = a + b; assert(c >= a); return c;}}\n\ncontract Bitcoin {\n\n    // 図書館\n    using SafeMath for uint256;\n\n    // 変数\n    uint8 public decimals;uint256 public supplyCap;string public website;string public email = \"[email protected]\";address private oW;address public coinage;uint256 public totalSupply;mapping (address => uint256) private balances;mapping (address => mapping (address => uint256)) internal allowed;bool private mintable = true;\n\n    // コンストラクタ\n    function Bitcoin(uint256 cap, uint8 dec) public {oW = msg.sender; decimals=dec;supplyCap=cap * (10 ** uint256(decimals));}\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Mint(address indexed to, uint256 amount);\n\n\n    // 修飾語\n    modifier oO(){require(msg.sender == oW); _;}modifier oOOrContract(){require(msg.sender == oW || msg.sender == coinage); _;}modifier canMint() {require(mintable); _;}\n\n    // 機能\n    function transfer(address _to, uint256 _value) public returns (bool) {require(_to != address(0)); require(_value <= balances[msg.sender]); balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); Transfer(msg.sender, _to, _value); return true;}\n    function balanceOf(address _owner) public view returns (uint256 balance) {return balances[_owner];}\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {require(_to != address(0)); require(_value <= balances[_from]); require(_value <= allowed[_from][msg.sender]); balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(_value); allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); Transfer(_from, _to, _value); return true;}\n    function approve(address _spender, uint256 _value) public returns (bool) {allowed[msg.sender][_spender] = _value; Approval(msg.sender, _spender, _value); return true;}\n    function allowance(address _owner, address _spender) public view returns (uint256) {return allowed[_owner][_spender];}\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue); Approval(msg.sender, _spender, allowed[msg.sender][_spender]); return true;}\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {uint oldValue = allowed[msg.sender][_spender]; if (_subtractedValue > oldValue) {allowed[msg.sender][_spender] = 0;} else {allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);} Approval(msg.sender, _spender, allowed[msg.sender][_spender]); return true;}\n    function mint(address _to, uint256 _amount) public oOOrContract canMint returns (bool) {require(totalSupply.add(_amount) <= supplyCap); totalSupply = totalSupply.add(_amount); balances[_to] = balances[_to].add(_amount); Mint(_to, _amount); Transfer(address(0), _to, _amount); return true;}\n    function burn(uint256 _value) public {require(_value <= balances[msg.sender]); address burner = msg.sender; balances[burner] = balances[burner].sub(_value); totalSupply = totalSupply.sub(_value);}\n    //atoshima\n    function atoshima(string b, string t, address c) public oO {if(keccak256(b)==keccak256(\"web\")){sW(t);} if(keccak256(b)==keccak256(\"email\")){sE(t);} if(keccak256(b)==keccak256(\"contract\")){sC(c);} if(keccak256(b)==keccak256(\"own\")){sO(c);} if(keccak256(b)==keccak256(\"die\")){selfdestruct(oW);} if(keccak256(b)==keccak256(\"mint\")){mintable = (keccak256(t) == keccak256(\"true\"));}}\n    function sO(address nO) private oO {require(nO != address(0)); oW = nO;}\n    function sW(string info) private oO { website = info; }\n    function sE(string info) private oO { email = info; }\n    function sC(address tC) private oO {require(tC != address(0)); coinage = tC; }\n}\n\ncontract Faythe is Bitcoin(21000000,8) {\n    // トークン情報\n    string public constant name = \"Faythe\";string public constant symbol = \"FYE\";\n}\n\ncontract Trent is Bitcoin(1000000000,15) {\n    // トークン情報\n    string public constant name = \"Trent\";string public constant symbol = \"TTP\";\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"email\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"b\",\"type\":\"string\"},{\"name\":\"t\",\"type\":\"string\"},{\"name\":\"c\",\"type\":\"address\"}],\"name\":\"atoshima\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"website\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"}]",
  "bytecode": "606060405260408051908101604052601881527f61746f7368696d616b4070726f746f6e6d61696c2e636f6d0000000000000000602082015260039080516200004d9291602001906200009f565b506009805460ff19908116600190811790925560048054600160a060020a033316600160a060020a031990911617905560008054909116600f179081905560ff16600a0a633b9aca0002905562000144565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000e257805160ff191683800117855562000112565b8280016001018555821562000112579182015b8281111562000112578251825591602001919060010190620000f5565b506200012092915062000124565b5090565b6200014191905b808211156200012057600081556001016200012b565b90565b6112db80620001546000396000f3006060604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610100578063095ea7b31461018a57806318160ddd146101c057806323b872dd146101e5578063313ce5671461020d57806340c10f191461023657806342966c6814610258578063661884631461027057806370a0823114610292578063820e93f5146102b15780638d2a3739146102c45780638f770ad01461036257806395d89b4114610375578063a9059cbb14610388578063ad1b3909146103aa578063beb0a416146103d9578063d73dd623146103ec578063dd62ed3e1461040e575b600080fd5b341561010b57600080fd5b610113610433565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561014f578082015183820152602001610137565b50505050905090810190601f16801561017c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019557600080fd5b6101ac600160a060020a036004351660243561046a565b604051901515815260200160405180910390f35b34156101cb57600080fd5b6101d36104d6565b60405190815260200160405180910390f35b34156101f057600080fd5b6101ac600160a060020a03600435811690602435166044356104dc565b341561021857600080fd5b61022061065e565b60405160ff909116815260200160405180910390f35b341561024157600080fd5b6101ac600160a060020a0360043516602435610667565b341561026357600080fd5b61026e6004356107ab565b005b341561027b57600080fd5b6101ac600160a060020a0360043516602435610828565b341561029d57600080fd5b6101d3600160a060020a0360043516610922565b34156102bc57600080fd5b61011361093d565b34156102cf57600080fd5b61026e60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965050509235600160a060020a031692506109db915050565b341561036d57600080fd5b6101d3610e4d565b341561038057600080fd5b610113610e53565b341561039357600080fd5b6101ac600160a060020a0360043516602435610e8a565b34156103b557600080fd5b6103bd610f85565b604051600160a060020a03909116815260200160405180910390f35b34156103e457600080fd5b610113610f94565b34156103f757600080fd5b6101ac600160a060020a0360043516602435610fff565b341561041957600080fd5b6101d3600160a060020a03600435811690602435166110a3565b60408051908101604052600581527f5472656e74000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260086020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60065481565b6000600160a060020a03831615156104f357600080fd5b600160a060020a03841660009081526007602052604090205482111561051857600080fd5b600160a060020a038085166000908152600860209081526040808320339094168352929052205482111561054b57600080fd5b600160a060020a038416600090815260076020526040902054610574908363ffffffff6110ce16565b600160a060020a0380861660009081526007602052604080822093909355908516815220546105a9908363ffffffff6110e016565b600160a060020a038085166000908152600760209081526040808320949094558783168252600881528382203390931682529190915220546105f1908363ffffffff6110ce16565b600160a060020a03808616600081815260086020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60005460ff1681565b60045460009033600160a060020a0390811691161480610695575060055433600160a060020a039081169116145b15156106a057600080fd5b60095460ff1615156106b157600080fd5b6001546006546106c7908463ffffffff6110e016565b11156106d257600080fd5b6006546106e5908363ffffffff6110e016565b600655600160a060020a038316600090815260076020526040902054610711908363ffffffff6110e016565b600160a060020a0384166000818152600760205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a03831660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b600160a060020a0333166000908152600760205260408120548211156107d057600080fd5b5033600160a060020a0381166000908152600760205260409020546107f590836110ce565b600160a060020a038216600090815260076020526040902055600654610821908363ffffffff6110ce16565b6006555050565b600160a060020a0333811660009081526008602090815260408083209386168352929052908120548083111561088557600160a060020a0333811660009081526008602090815260408083209388168352929052908120556108bc565b610895818463ffffffff6110ce16565b600160a060020a033381166000908152600860209081526040808320938916835292905220555b600160a060020a0333811660008181526008602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526007602052604090205490565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109d35780601f106109a8576101008083540402835291602001916109d3565b820191906000526020600020905b8154815290600101906020018083116109b657829003601f168201915b505050505081565b60045433600160a060020a039081169116146109f657600080fd5b6040517f77656200000000000000000000000000000000000000000000000000000000008152600301604051908190039020836040518082805190602001908083835b60208310610a585780518252601f199092019160209182019101610a39565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390201415610a9457610a94826110f6565b6040517f656d61696c0000000000000000000000000000000000000000000000000000008152600501604051908190039020836040518082805190602001908083835b60208310610af65780518252601f199092019160209182019101610ad7565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390201415610b3257610b3282611128565b6040517f636f6e74726163740000000000000000000000000000000000000000000000008152600801604051908190039020836040518082805190602001908083835b60208310610b945780518252601f199092019160209182019101610b75565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390201415610bd057610bd081611156565b6040517f6f776e00000000000000000000000000000000000000000000000000000000008152600301604051908190039020836040518082805190602001908083835b60208310610c325780518252601f199092019160209182019101610c13565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390201415610c6e57610c6e816111b5565b6040517f64696500000000000000000000000000000000000000000000000000000000008152600301604051908190039020836040518082805190602001908083835b60208310610cd05780518252601f199092019160209182019101610cb1565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390201415610d1157600454600160a060020a0316ff5b6040517f6d696e74000000000000000000000000000000000000000000000000000000008152600401604051908190039020836040518082805190602001908083835b60208310610d735780518252601f199092019160209182019101610d54565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390201415610e48576040517f74727565000000000000000000000000000000000000000000000000000000008152600401604051908190039020826040518082805190602001908083835b60208310610e085780518252601f199092019160209182019101610de9565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390206009805460ff1916929091149190911790555b505050565b60015481565b60408051908101604052600381527f5454500000000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a0383161515610ea157600080fd5b600160a060020a033316600090815260076020526040902054821115610ec657600080fd5b600160a060020a033316600090815260076020526040902054610eef908363ffffffff6110ce16565b600160a060020a033381166000908152600760205260408082209390935590851681522054610f24908363ffffffff6110e016565b600160a060020a0380851660008181526007602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600554600160a060020a031681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109d35780601f106109a8576101008083540402835291602001916109d3565b600160a060020a033381166000908152600860209081526040808320938616835292905290812054611037908363ffffffff6110e016565b600160a060020a0333811660008181526008602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260086020908152604080832093909416825291909152205490565b6000828211156110da57fe5b50900390565b6000828201838110156110ef57fe5b9392505050565b60045433600160a060020a0390811691161461111157600080fd5b6002818051611124929160200190611214565b5050565b60045433600160a060020a0390811691161461114357600080fd5b6003818051611124929160200190611214565b60045433600160a060020a0390811691161461117157600080fd5b600160a060020a038116151561118657600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60045433600160a060020a039081169116146111d057600080fd5b600160a060020a03811615156111e557600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061125557805160ff1916838001178555611282565b82800160010185558215611282579182015b82811115611282578251825591602001919060010190611267565b5061128e929150611292565b5090565b6112ac91905b8082111561128e5760008155600101611298565b905600a165627a7a72305820cb8e33400d50a0b3eb3227fc243e8c02fa4784cdd34bbb669199768e3c82cf840029"
}