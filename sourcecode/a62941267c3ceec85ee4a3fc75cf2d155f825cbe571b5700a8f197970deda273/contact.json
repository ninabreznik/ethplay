{
  "address": "0x628a419592d62cbde91e8d584ee8dae753f973ad",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Spud3D",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-08\n*/\n\npragma solidity ^0.4.25;\n// First Spielley and Dav collab on creating a Hot potato take for P3D\n// pass the spud, \n// each time you have the spud you can win the jackpot, \n// first player has most chance of hitting jackpot and slowly the chances of winning decrease. \n// if someone doesn't take over the spud within 256 blocks you auto win\n// each time you play you get a spudcoin\n// spudcoin reward for UI devs\n// spudcoins can be traded in for a part of the contracts divs\n// dependant on totalsupply and how many coins you trade in\n// you can also trade in spudcoin for spots in the MN rotator when the contract buys P3D\n// \n\ncontract Spud3D {\n    using SafeMath for uint;\n    \n    HourglassInterface constant p3dContract = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\n    SPASMInterface constant SPASM_ = SPASMInterface(0xfaAe60F2CE6491886C9f7C9356bd92F688cA66a1);//spielley's profit sharing payout\n    \n    struct State {\n        \n        uint256 blocknumber;\n        address player;\n        \n        \n    }\n    \n    mapping(uint256 =>  State) public Spudgame;\n    mapping(address => uint256) public playerVault;\n    mapping(address => uint256) public SpudCoin;\n    mapping(uint256 => address) public Rotator;\n    \n    uint256 public totalsupply;//spud totalsupply\n    uint256 public Pot; // pot that get's filled from entry mainly\n    uint256 public SpudPot; // divpot spucoins can be traded for\n    uint256 public round; //roundnumber\n    \n    uint256 public RNGdeterminator; // variable upon gameprogress\n    uint256 public nextspotnr; // next spot in rotator\n    \n    mapping(address => string) public Vanity;\n    \n    event Withdrawn(address indexed player, uint256 indexed amount);\n    event SpudRnG(address indexed player, uint256 indexed outcome);\n    event payout(address indexed player, uint256 indexed amount);\n    \n    function harvestabledivs()\n        view\n        public\n        returns(uint256)\n    {\n        return ( p3dContract.myDividends(true))  ;\n    }\n    function contractownsthismanyP3D()\n        public\n        view\n        returns(uint256)\n    {\n        \n        return (p3dContract.balanceOf(address(this)));\n    }\n    function getthismuchethforyourspud(uint256 amount)\n        public\n        view\n        returns(uint256)\n    {\n        uint256 dividends = p3dContract.myDividends(true);\n            \n            uint256 amt = dividends.div(100);\n            \n            uint256 thepot = SpudPot.add(dividends.sub(amt));\n            \n        uint256 payouts = thepot.mul(amount).div(totalsupply);\n        return (payouts);\n    }\n    function thismanyblockstillthspudholderwins()\n        public\n        view\n        returns(uint256)\n    {\n        uint256 value;\n        if(265-( block.number - Spudgame[round].blocknumber) >0){value = 265- (block.number - Spudgame[round].blocknumber);}\n        return (value);\n    }\n    function currentspudinfo()\n        public\n        view\n        returns(uint256, address)\n    {\n        \n        return (Spudgame[round].blocknumber, Spudgame[round].player);\n    }\n    function returntrueifcurrentplayerwinsround()\n        public\n        view\n        returns(bool)\n    {\n        uint256 refblocknr = Spudgame[round].blocknumber;\n        uint256 RNGresult = uint256(blockhash(refblocknr)) % RNGdeterminator;\n        \n        bool result;\n        if(RNGresult == 1){result = true;}\n        if(refblocknr < block.number - 256){result = true;}\n        return (result);\n    }\n    //mods\n    modifier hasEarnings()\n    {\n        require(playerVault[msg.sender] > 0);\n        _;\n    }\n    \n    function() external payable {} // needed for P3D myDividends\n    //constructor\n    constructor()\n        public\n    {\n        Spudgame[0].player = 0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220;\n        Spudgame[0].blocknumber = block.number;\n        RNGdeterminator = 6;\n        Rotator[0] = 0x989eB9629225B8C06997eF0577CC08535fD789F9;//raffle3d possible MN reward\n        nextspotnr++;\n    }\n    //vanity\n    \n    function changevanity(string van , address masternode) public payable\n    {\n        require(msg.value >= 1  finney);\n        Vanity[msg.sender] = van;\n        if(masternode == 0x0){masternode = 0x989eB9629225B8C06997eF0577CC08535fD789F9;}// raffle3d's address\n        p3dContract.buy.value(msg.value)(masternode);\n    } \n    //\n     function withdraw()\n        external\n        hasEarnings\n    {\n       \n        \n        uint256 amount = playerVault[msg.sender];\n        playerVault[msg.sender] = 0;\n        \n        emit Withdrawn(msg.sender, amount); \n        \n        msg.sender.transfer(amount);\n    }\n    // main function\n    function GetSpud(address MN) public payable\n    {\n        require(msg.value >= 1  finney);\n        address sender = msg.sender;\n        uint256 blocknr = block.number;\n        uint256 curround = round;\n        uint256 refblocknr = Spudgame[curround].blocknumber;\n        \n        SpudCoin[MN]++;\n        totalsupply +=2;\n        SpudCoin[sender]++;\n        \n        // check previous RNG\n        \n        if(blocknr == refblocknr) \n        {\n            // just change state previous player does not win\n            \n            playerVault[msg.sender] += msg.value;\n            \n        }\n        if(blocknr - 256 <= refblocknr && blocknr != refblocknr)\n        {\n        \n        uint256 RNGresult = uint256(blockhash(refblocknr)) % RNGdeterminator;\n        emit SpudRnG(Spudgame[curround].player , RNGresult) ;\n        \n        Pot += msg.value;\n        if(RNGresult == 1)\n        {\n            // won payout\n            uint256 RNGrotator = uint256(blockhash(refblocknr)) % nextspotnr;\n            address rotated = Rotator[RNGrotator]; \n            uint256 base = Pot.div(10);\n            p3dContract.buy.value(base)(rotated);\n            Spudgame[curround].player.transfer(base.mul(5));\n            emit payout(Spudgame[curround].player , base.mul(5));\n            Pot = Pot.sub(base.mul(6));\n            // ifpreviouswon => new round\n            uint256 nextround = curround+1;\n            Spudgame[nextround].player = sender;\n            Spudgame[nextround].blocknumber = blocknr;\n            \n            round++;\n            RNGdeterminator = 6;\n        }\n        if(RNGresult != 1)\n        {\n            // not won\n            \n            Spudgame[curround].player = sender;\n            Spudgame[curround].blocknumber = blocknr;\n        }\n        \n        \n        }\n        if(blocknr - 256 > refblocknr)\n        {\n            //win\n            // won payout\n            Pot += msg.value;\n            RNGrotator = uint256(blockhash(blocknr-1)) % nextspotnr;\n            rotated =Rotator[RNGrotator]; \n            base = Pot.div(10);\n            p3dContract.buy.value(base)(rotated);\n            Spudgame[round].player.transfer(base.mul(5));\n            emit payout(Spudgame[round].player , base.mul(5));\n            Pot = Pot.sub(base.mul(6));\n            // ifpreviouswon => new round\n            nextround = curround+1;\n            Spudgame[nextround].player = sender;\n            Spudgame[nextround].blocknumber = blocknr;\n            \n            round++;\n            RNGdeterminator = 6;\n        }\n        \n    } \n\nfunction SpudToDivs(uint256 amount) public \n    {\n        address sender = msg.sender;\n        require(amount>0 && SpudCoin[sender] >= amount );\n         uint256 dividends = p3dContract.myDividends(true);\n            require(dividends > 0);\n            uint256 amt = dividends.div(100);\n            p3dContract.withdraw();\n            SPASM_.disburse.value(amt)();// to dev fee sharing contract SPASM\n            SpudPot = SpudPot.add(dividends.sub(amt));\n        uint256 payouts = SpudPot.mul(amount).div(totalsupply);\n        SpudPot = SpudPot.sub(payouts);\n        SpudCoin[sender] = SpudCoin[sender].sub(amount);\n        totalsupply = totalsupply.sub(amount);\n        sender.transfer(payouts);\n    } \nfunction SpudToRotator(uint256 amount, address MN) public\n    {\n        address sender = msg.sender;\n        require(amount>0 && SpudCoin[sender] >= amount );\n        uint256 counter;\n    for(uint i=0; i< amount; i++)\n        {\n            counter = i + nextspotnr;\n            Rotator[counter] = MN;\n        }\n    nextspotnr += i;\n    SpudCoin[sender] = SpudCoin[sender].sub(amount);\n    totalsupply = totalsupply.sub(amount);\n    }\n}\n\ninterface HourglassInterface {\n    function buy(address _playerAddress) payable external returns(uint256);\n    function withdraw() external;\n    function myDividends(bool _includeReferralBonus) external view returns(uint256);\n    function balanceOf(address _playerAddress) external view returns(uint256);\n}\ninterface SPASMInterface  {\n    function() payable external;\n    function disburse() external  payable;\n}\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50600080527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb68054600160a060020a0319908116730b0efad4ae088a88ffdc50bce5fb63c6936b922017909155437fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb555600660085560036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff805490911673989eb9629225b8c06997ef0577cc08535fd789f91790556009805460010190556113f2806100e06000396000f30060806040526004361061010e5763ffffffff60e060020a600035041663099b95318114610110578063145b532e14610137578063146ca5311461014c5780631fff606f1461016157806325ccdb4c146101955780633ccfd60b146101cb5780633d0383c2146101e05780635bae0bf5146101f85780636a6f03a0146102105780636b3ffb911461023957806371c9e1771461029057806372dd529b146102a857806374dbe5e6146102bd5780637cf1ffc3146102d157806381d6c866146102e657806391798140146102fb578063921002651461031c578063ab6e988c146103b2578063b891656e146103d3578063ba490a03146103e8578063c77810a41461040c578063eeb1c9af14610421575b005b34801561011c57600080fd5b50610125610436565b60408051918252519081900360200190f35b34801561014357600080fd5b506101256104d7565b34801561015857600080fd5b506101256104dd565b34801561016d57600080fd5b506101796004356104e3565b60408051600160a060020a039092168252519081900360200190f35b3480156101a157600080fd5b506101aa6104fe565b60408051928352600160a060020a0390911660208301528051918290030190f35b3480156101d757600080fd5b5061010e610524565b3480156101ec57600080fd5b506101256004356105b3565b34801561020457600080fd5b506101aa6004356106b0565b34801561021c57600080fd5b506102256106d2565b604080519115158252519081900360200190f35b6040805160206004803580820135601f810184900484028501840190955284845261010e94369492936024939284019190819084018382808284375094975050509235600160a060020a0316935061071d92505050565b34801561029c57600080fd5b5061010e600435610821565b3480156102b457600080fd5b50610125610ac9565b61010e600160a060020a0360043516610acf565b3480156102dd57600080fd5b50610125611057565b3480156102f257600080fd5b5061012561105d565b34801561030757600080fd5b50610125600160a060020a03600435166110cd565b34801561032857600080fd5b5061033d600160a060020a03600435166110df565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561037757818101518382015260200161035f565b50505050905090810190601f1680156103a45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103be57600080fd5b50610125600160a060020a036004351661117a565b3480156103df57600080fd5b5061012561118c565b3480156103f457600080fd5b5061010e600435600160a060020a03602435166111cf565b34801561041857600080fd5b506101256112bb565b34801561042d57600080fd5b506101256112c1565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009173b3775fb83f7d12a36e0475abdd1fca35c091efbe916370a082319160248082019260209290919082900301818787803b1580156104a557600080fd5b505af11580156104b9573d6000803e3d6000fd5b505050506040513d60208110156104cf57600080fd5b505190505b90565b60095481565b60075481565b600360205260009081526040902054600160a060020a031681565b60075460009081526020819052604090208054600190910154600160a060020a03169091565b33600090815260016020526040812054811061053f57600080fd5b503360008181526001602052604080822080549083905590519092839290917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59190a3604051339082156108fc029083906000818181858888f193505050501580156105af573d6000803e3d6000fd5b5050565b600080600080600073b3775fb83f7d12a36e0475abdd1fca35c091efbe600160a060020a031663688abbf760016040518263ffffffff1660e060020a0281526004018082151515158152602001915050602060405180830381600087803b15801561061d57600080fd5b505af1158015610631573d6000803e3d6000fd5b505050506040513d602081101561064757600080fd5b5051935061065c84606463ffffffff6112c716565b9250610680610671858563ffffffff6112e816565b6006549063ffffffff6112fd16565b6004549092506106a69061069a848963ffffffff61131316565b9063ffffffff6112c716565b9695505050505050565b60006020819052908152604090208054600190910154600160a060020a031682565b6007546000908152602081905260408120546008548290819083408115156106f657fe5b0691508160011415610706575060015b6101004303831015610716575060015b9392505050565b66038d7ea4c6800034101561073157600080fd5b336000908152600a60209081526040909120835161075192850190611338565b50600160a060020a0381161515610779575073989eb9629225b8c06997ef0577cc08535fd789f95b604080517ff088d547000000000000000000000000000000000000000000000000000000008152600160a060020a0383166004820152905173b3775fb83f7d12a36e0475abdd1fca35c091efbe9163f088d54791349160248082019260209290919082900301818588803b1580156107f057600080fd5b505af1158015610804573d6000803e3d6000fd5b50505050506040513d602081101561081b57600080fd5b50505050565b3360008080808511801561084d5750600160a060020a0384166000908152600260205260409020548511155b151561085857600080fd5b604080517f688abbf700000000000000000000000000000000000000000000000000000000815260016004820152905173b3775fb83f7d12a36e0475abdd1fca35c091efbe9163688abbf79160248083019260209291908290030181600087803b1580156108c557600080fd5b505af11580156108d9573d6000803e3d6000fd5b505050506040513d60208110156108ef57600080fd5b505192506000831161090057600080fd5b61091183606463ffffffff6112c716565b915073b3775fb83f7d12a36e0475abdd1fca35c091efbe600160a060020a0316633ccfd60b6040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561096557600080fd5b505af1158015610979573d6000803e3d6000fd5b5050505073faae60f2ce6491886c9f7c9356bd92f688ca66a1600160a060020a031663abc6fd0b836040518263ffffffff1660e060020a0281526004016000604051808303818588803b1580156109cf57600080fd5b505af11580156109e3573d6000803e3d6000fd5b50505050506109fe61067183856112e890919063ffffffff16565b6006819055600454610a1a9161069a908863ffffffff61131316565b600654909150610a30908263ffffffff6112e816565b600655600160a060020a038416600090815260026020526040902054610a5c908663ffffffff6112e816565b600160a060020a038516600090815260026020526040902055600454610a88908663ffffffff6112e816565b600455604051600160a060020a0385169082156108fc029083906000818181858888f19350505050158015610ac1573d6000803e3d6000fd5b505050505050565b60045481565b6000808080808080808066038d7ea4c68000341015610aed57600080fd5b60075460008181526020818152604080832054600160a060020a038f1684526002928390528184208054600190810190915560048054909401909355338085529190932080549092019091559a50439950909750955085881415610b61573360009081526001602052604090208054340190555b85610100890311158015610b755750858814155b15610e33576008548640811515610b8857fe5b6000898152602081905260408082206001015490519390920697508792600160a060020a03909216917f12d500c4484086283eca97ceb3e5b19a69b6535fb95f0c0761b82b8d1dfcc4409190a360058054340190556001851415610def576009548640811515610bf457fe5b06600081815260036020526040902054600554919550600160a060020a03169350610c2690600a63ffffffff6112c716565b604080517ff088d547000000000000000000000000000000000000000000000000000000008152600160a060020a0386166004820152905191935073b3775fb83f7d12a36e0475abdd1fca35c091efbe9163f088d547918591602480830192602092919082900301818588803b158015610c9f57600080fd5b505af1158015610cb3573d6000803e3d6000fd5b50505050506040513d6020811015610cca57600080fd5b5050600087815260208190526040902060010154600160a060020a03166108fc610cfb84600563ffffffff61131316565b6040518115909202916000818181858888f19350505050158015610d23573d6000803e3d6000fd5b50610d3582600563ffffffff61131316565b600088815260208190526040808220600101549051600160a060020a03909116917f117de2fd76ea4a212645377cbe8b6af68c7e4c8169b18d98c4e6aa04d07366a191a3610d9c610d8d83600663ffffffff61131316565b6005549063ffffffff6112e816565b6005555060018681016000818152602081905260409020808301805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038d161790558990556007805490920190915560066008555b60018514610e3357600087815260208190526040902060018101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038c161790558890555b856101008903111561104b576005805434019055600954600019890140811515610e5957fe5b06600081815260036020526040902054600554919550600160a060020a03169350610e8b90600a63ffffffff6112c716565b604080517ff088d547000000000000000000000000000000000000000000000000000000008152600160a060020a0386166004820152905191935073b3775fb83f7d12a36e0475abdd1fca35c091efbe9163f088d547918591602480830192602092919082900301818588803b158015610f0457600080fd5b505af1158015610f18573d6000803e3d6000fd5b50505050506040513d6020811015610f2f57600080fd5b5050600754600090815260208190526040902060010154600160a060020a03166108fc610f6384600563ffffffff61131316565b6040518115909202916000818181858888f19350505050158015610f8b573d6000803e3d6000fd5b50610f9d82600563ffffffff61131316565b600754600090815260208190526040808220600101549051600160a060020a03909116917f117de2fd76ea4a212645377cbe8b6af68c7e4c8169b18d98c4e6aa04d07366a191a3610ff8610d8d83600663ffffffff61131316565b6005555060018681016000818152602081905260409020808301805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038d161790558990556007805490920190915560066008555b50505050505050505050565b60065481565b604080517f688abbf700000000000000000000000000000000000000000000000000000000815260016004820152905160009173b3775fb83f7d12a36e0475abdd1fca35c091efbe9163688abbf79160248082019260209290919082900301818787803b1580156104a557600080fd5b60026020526000908152604090205481565b600a6020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156111725780601f1061114757610100808354040283529160200191611172565b820191906000526020600020905b81548152906001019060200180831161115557829003601f168201915b505050505081565b60016020526000908152604090205481565b60075460009081526020819052604081205481904303610109038110156111c757506007546000908152602081905260409020544303610109035b8091505b5090565b3360008080851180156111fa5750600160a060020a0383166000908152600260205260409020548511155b151561120557600080fd5b5060005b848110156112545760095481016000818152600360205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387161790559150600101611209565b6009805482019055600160a060020a038316600090815260026020526040902054611285908663ffffffff6112e816565b600160a060020a0384166000908152600260205260409020556004546112b1908663ffffffff6112e816565b6004555050505050565b60055481565b60085481565b60008082116112d557600080fd5b81838115156112e057fe5b049392505050565b6000828211156112f757600080fd5b50900390565b8181018281101561130d57600080fd5b92915050565b81810282158061132d575081838281151561132a57fe5b04145b151561130d57600080fd5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061137957805160ff19168380011785556113a6565b828001600101855582156113a6579182015b828111156113a657825182559160200191906001019061138b565b506111cb926104d49250905b808211156111cb57600081556001016113b25600a165627a7a72305820f8e80cf5d11f5a23cfff9812fa023e7dcdedd3906f6f29d5915aca094efd80100029"
}