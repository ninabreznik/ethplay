{
  "address": "0xccaad3f2b1e4fed38b0a9b4f5b7b674d59ecfea1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ERC20Token",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-09\n*/\n\npragma solidity ^0.4.21;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract ERC20Token {\n  using SafeMath for uint256;\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  mapping(address => uint256) internal balances_;\n  mapping (address => mapping (address => uint256)) internal allowed_;\n\n  uint256 internal totalSupply_;\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  function ERC20Token(\n    string tokenName,\n    string tokenSymbol,\n    uint8 tokenDecimals,\n    uint256 tokenSupply,\n    address initAddress,\n    uint256 initBalance\n  ) public {\n    name = tokenName;\n    symbol = tokenSymbol;\n    decimals = tokenDecimals;\n    totalSupply_ = tokenSupply * 10 ** uint256(decimals);\n    if (initBalance > 0) {\n        uint256 ib = initBalance * 10 ** uint256(decimals);\n        require(ib <= totalSupply_);\n        balances_[initAddress] = ib;\n        if (ib < totalSupply_) {\n            balances_[msg.sender] = totalSupply_.sub(ib);\n        }\n    } else {\n        balances_[msg.sender] = totalSupply_;\n    }\n  }\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances_[_owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed_ to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed_[_owner][_spender];\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances_[msg.sender]);\n\n    balances_[msg.sender] = balances_[msg.sender].sub(_value);\n    balances_[_to] = balances_[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances_[_from]);\n    require(_value <= allowed_[_from][msg.sender]);\n\n    balances_[_from] = balances_[_from].sub(_value);\n    balances_[_to] = balances_[_to].add(_value);\n    allowed_[_from][msg.sender] = allowed_[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed_[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n}",
  "bytecode": "6060604052341561000f57600080fd5b6040516108fe3803806108fe833981016040528080518201919060200180518201919060200180519190602001805191906020018051919060200180519150600090506003878051610065929160200190610158565b506004868051610079929160200190610158565b506005805460ff191660ff878116919091179182905516600a0a8402600255600082111561011d575060055460025460ff909116600a0a8202908111156100bf57600080fd5b600160a060020a0383166000908152602081905260409020819055600254811015610118576002546100fe90826401000000006106a861014682021704565b600160a060020a0333166000908152602081905260409020555b61013a565b600254600160a060020a0333166000908152602081905260409020555b505050505050506101f3565b60008282111561015257fe5b50900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061019957805160ff19168380011785556101c6565b828001600101855582156101c6579182015b828111156101c65782518255916020019190600101906101ab565b506101d29291506101d6565b5090565b6101f091905b808211156101d257600081556001016101dc565b90565b6106fc806102026000396000f3006060604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461009d578063095ea7b31461012757806318160ddd1461015d57806323b872dd14610182578063313ce567146101aa57806370a08231146101d357806395d89b41146101f2578063a9059cbb14610205578063dd62ed3e14610227575b600080fd5b34156100a857600080fd5b6100b061024c565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100ec5780820151838201526020016100d4565b50505050905090810190601f1680156101195780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013257600080fd5b610149600160a060020a03600435166024356102ea565b604051901515815260200160405180910390f35b341561016857600080fd5b610170610356565b60405190815260200160405180910390f35b341561018d57600080fd5b610149600160a060020a036004358116906024351660443561035c565b34156101b557600080fd5b6101bd6104dc565b60405160ff909116815260200160405180910390f35b34156101de57600080fd5b610170600160a060020a03600435166104e5565b34156101fd57600080fd5b6100b0610500565b341561021057600080fd5b610149600160a060020a036004351660243561056b565b341561023257600080fd5b610170600160a060020a036004358116906024351661067d565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102e25780601f106102b7576101008083540402835291602001916102e2565b820191906000526020600020905b8154815290600101906020018083116102c557829003601f168201915b505050505081565b600160a060020a03338116600081815260016020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60025490565b6000600160a060020a038316151561037357600080fd5b600160a060020a03841660009081526020819052604090205482111561039857600080fd5b600160a060020a03808516600090815260016020908152604080832033909416835292905220548211156103cb57600080fd5b600160a060020a0384166000908152602081905260409020546103f4908363ffffffff6106a816565b600160a060020a038086166000908152602081905260408082209390935590851681522054610429908363ffffffff6106ba16565b600160a060020a038085166000908152602081815260408083209490945587831682526001815283822033909316825291909152205461046f908363ffffffff6106a816565b600160a060020a03808616600081815260016020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60055460ff1681565b600160a060020a031660009081526020819052604090205490565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102e25780601f106102b7576101008083540402835291602001916102e2565b6000600160a060020a038316151561058257600080fd5b600160a060020a0333166000908152602081905260409020548211156105a757600080fd5b600160a060020a0333166000908152602081905260409020546105d0908363ffffffff6106a816565b600160a060020a033381166000908152602081905260408082209390935590851681522054610605908363ffffffff6106ba16565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6000828211156106b457fe5b50900390565b6000828201838110156106c957fe5b93925050505600a165627a7a7230582049b1b5dbc48994b63295053e98602aed3f2f81d05a817709574c70243df33739002900000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000002540be40000000000000000000000000025e4586d940f3545963b5af552dcdfc4062e7e3c00000000000000000000000000000000000000000000000000000002540be4000000000000000000000000000000000000000000000000000000000000000010546865203520537061636520436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035435430000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000002540be40000000000000000000000000025e4586d940f3545963b5af552dcdfc4062e7e3c00000000000000000000000000000000000000000000000000000002540be4000000000000000000000000000000000000000000000000000000000000000010546865203520537061636520436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035435430000000000000000000000000000000000000000000000000000000000"
}