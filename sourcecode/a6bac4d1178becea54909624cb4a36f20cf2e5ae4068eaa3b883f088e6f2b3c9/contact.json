{
  "address": "0xc6fb494987cafaeda71a4052da7ff0695ca3998d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MultiSend",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "pragma solidity ^0.4.23;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract MultiSend {\n  event Multisended(uint256 total, address tokenAddress); \n  function multiSend(address _token, address[] addresses, uint[] counts) public {\n    uint total;\n    ERC20 token = ERC20(_token);\n    for(uint i = 0; i < addresses.length; i++) {\n      require(token.transferFrom(msg.sender, addresses[i], counts[i]));\n        total += counts[i];\n    }\n    emit Multisended(total,_token);\n  }\n  function multiSendEth(address[] addresses,uint[] counts) public payable {\n    for(uint i = 0; i < addresses.length; i++) {\n      addresses[i].transfer(counts[i]);\n    }\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b50610475806100206000396000f30060806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680639ec68f0f14610051578063e702d7af1461011a575b600080fd5b34801561005d57600080fd5b50610118600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506101b6565b005b6101b460048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506103b3565b005b6000806000859150600090505b8451811015610340578173ffffffffffffffffffffffffffffffffffffffff166323b872dd3387848151811015156101f757fe5b90602001906020020151878581518110151561020f57fe5b906020019060200201516040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156102d157600080fd5b505af11580156102e5573d6000803e3d6000fd5b505050506040513d60208110156102fb57600080fd5b8101908080519060200190929190505050151561031757600080fd5b838181518110151561032557fe5b906020019060200201518301925080806001019150506101c3565b7f04afd2ce457d973046bd54f5d7d36368546da08b88be1bca8ae50e32b451da178387604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1505050505050565b60008090505b82518110156104445782818151811015156103d057fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff166108fc838381518110151561040157fe5b906020019060200201519081150290604051600060405180830381858888f19350505050158015610436573d6000803e3d6000fd5b5080806001019150506103b9565b5050505600a165627a7a72305820469433f1c6b025784672814bde09ac05e47a7729221d2daa1bad100229f903050029"
}