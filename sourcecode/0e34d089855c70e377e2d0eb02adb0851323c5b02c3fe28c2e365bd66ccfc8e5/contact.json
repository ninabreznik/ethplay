{
  "address": "0x83ff572a1757b9e4508cb08f13a79ed162c756c4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ZCOR",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-19\n*/\n\npragma solidity ^0.4.24;\n\ncontract ERC20Interface {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function transfer(address to, uint tokens) public returns (bool success);\n\n    \n    //function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    //function approve(address spender, uint tokens) public returns (bool success);\n    //function transferFrom(address from, address to, uint tokens) public returns (bool success);\n    \n    event Transfer(address indexed from, address indexed to, uint tokens);\n    //event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\ncontract ZCOR is ERC20Interface, Ownable{\n    string public name = \"ZROCOR\";\n    string public symbol = \"ZCOR\";\n    uint public decimals = 0;\n    \n    uint public supply;\n    address public founder;\n    \n    mapping(address => uint) public balances;\n    mapping(uint => mapping(address => uint)) public timeLockedBalances;\n    mapping(uint => address[]) public lockedAddresses;\n\n\n event Transfer(address indexed from, address indexed to, uint tokens);\n\n\n    constructor() public{\n        supply = 10000000000;\n        founder = msg.sender;\n        balances[founder] = supply;\n    }\n    \n    // transfer locked balance to an address\n    function transferLockedBalance(uint _category, address _to, uint _value) public onlyOwner returns (bool success) {\n        require(balances[msg.sender] >= _value && _value > 0);\n        lockedAddresses[_category].push(_to);\n        balances[msg.sender] -= _value;\n        timeLockedBalances[_category][_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    // unlock category of locked address\n    function unlockBalance(uint _category) public onlyOwner returns (bool success) {\n        uint _length = lockedAddresses[_category].length;\n        address _addr;\n        uint _value = 0;\n        for(uint i = 0; i< _length; i++) {\n            _addr = lockedAddresses[_category][i];\n            _value = timeLockedBalances[_category][_addr];\n            balances[_addr] += _value;\n            timeLockedBalances[_category][_addr] = 0;\n        }\n        delete lockedAddresses[_category];\n        return true;\n    }\n    \n    //view locked balance\n    function lockedBalanceOf(uint level, address _address) public view returns (uint balance) {\n        return timeLockedBalances[level][_address];\n    }\n    \n    function totalSupply() public view returns (uint){\n        return supply;\n    }\n    \n    function balanceOf(address tokenOwner) public view returns (uint balance){\n        return balances[tokenOwner];\n    }\n     \n     \n    //transfer from the owner balance to another address\n    function transfer(address to, uint tokens) public returns (bool success){\n        require(balances[msg.sender] >= tokens && tokens > 0);\n         \n        balances[to] += tokens;\n        balances[msg.sender] -= tokens;\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n     \n     \n    function burn(uint256 _value) public onlyOwner returns (bool success) {\n        require(balances[founder] >= _value);   // Check if the sender has enough\n        balances[founder] -= _value;            // Subtract from the sender\n        supply -= _value;                      // Updates totalSupply\n        return true;\n    }\n\n    function mint(uint256 _value) public onlyOwner returns (bool success) {\n        require(balances[founder] >= _value);   // Check if the sender has enough\n        balances[founder] += _value;            // Add to the sender\n        supply += _value;                      // Updates totalSupply\n        return true;\n    }\n     \n}",
  "bytecode": "60806040526040805190810160405280600681526020017f5a524f434f5200000000000000000000000000000000000000000000000000008152506001908051906020019062000051929190620001ae565b506040805190810160405280600481526020017f5a434f5200000000000000000000000000000000000000000000000000000000815250600290805190602001906200009f929190620001ae565b506000600355348015620000b257600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506402540be40060048190555033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060045460066000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506200025d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001f157805160ff191683800117855562000222565b8280016001018555821562000222579182015b828111156200022157825182559160200191906001019062000204565b5b50905062000231919062000235565b5090565b6200025a91905b80821115620002565760008160009055506001016200023c565b5090565b90565b611410806200026d6000396000f3006080604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063047fc9aa1461010157806306fdde031461012c578063145ca116146101bc57806318160ddd1461022b57806327e235e314610256578063304f129d146102ad578063313ce567146102f2578063318c45ab1461031d57806342966c68146103945780634d853ee5146103d95780635e9bd1df1461043057806370a08231146104915780638da5cb5b146104e857806395d89b411461053f578063a0712d68146105cf578063a9059cbb14610614578063e7d185df14610679578063f2fde38b146106da575b600080fd5b34801561010d57600080fd5b5061011661071d565b6040518082815260200191505060405180910390f35b34801561013857600080fd5b50610141610723565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610181578082015181840152602081019050610166565b50505050905090810190601f1680156101ae5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101c857600080fd5b5061021160048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107c1565b604051808215151515815260200191505060405180910390f35b34801561023757600080fd5b50610240610a0a565b6040518082815260200191505060405180910390f35b34801561026257600080fd5b50610297600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a14565b6040518082815260200191505060405180910390f35b3480156102b957600080fd5b506102d860048036038101908080359060200190929190505050610a2c565b604051808215151515815260200191505060405180910390f35b3480156102fe57600080fd5b50610307610c35565b6040518082815260200191505060405180910390f35b34801561032957600080fd5b506103526004803603810190808035906020019092919080359060200190929190505050610c3b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103a057600080fd5b506103bf60048036038101908080359060200190929190505050610c88565b604051808215151515815260200191505060405180910390f35b3480156103e557600080fd5b506103ee610ddd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043c57600080fd5b5061047b60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e03565b6040518082815260200191505060405180910390f35b34801561049d57600080fd5b506104d2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e5e565b6040518082815260200191505060405180910390f35b3480156104f457600080fd5b506104fd610ea7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561054b57600080fd5b50610554610ecc565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610594578082015181840152602081019050610579565b50505050905090810190601f1680156105c15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105db57600080fd5b506105fa60048036038101908080359060200190929190505050610f6a565b604051808215151515815260200191505060405180910390f35b34801561062057600080fd5b5061065f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110bf565b604051808215151515815260200191505060405180910390f35b34801561068557600080fd5b506106c460048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611224565b6040518082815260200191505060405180910390f35b3480156106e657600080fd5b5061071b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611249565b005b60045481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107b95780601f1061078e576101008083540402835291602001916107b9565b820191906000526020600020905b81548152906001019060200180831161079c57829003601f168201915b505050505081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561081e57600080fd5b81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561086d5750600082115b151561087857600080fd5b600860008581526020019081526020016000208390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816007600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000600454905090565b60066020528060005260406000206000915090505481565b60008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a8f57600080fd5b6008600087815260200190815260200160002080549050935060009150600090505b83811015610c09576008600087815260200190815260200160002081815481101515610ad957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692506007600087815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555060006007600088815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508080600101915050610ab1565b600860008781526020019081526020016000206000610c28919061139e565b6001945050505050919050565b60035481565b600860205281600052604060002081815481101515610c5657fe5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ce557600080fd5b8160066000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610d5557600080fd5b8160066000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508160046000828254039250508190555060019050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006007600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f625780601f10610f3757610100808354040283529160200191610f62565b820191906000526020600020905b815481529060010190602001808311610f4557829003601f168201915b505050505081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fc757600080fd5b8160066000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561103757600080fd5b8160066000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508160046000828254019250508190555060019050919050565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156111105750600082115b151561111b57600080fd5b81600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6007602052816000526040600020602052806000526040600020600091509150505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112a457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156112e057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b50805460008255906000526020600020908101906113bc91906113bf565b50565b6113e191905b808211156113dd5760008160009055506001016113c5565b5090565b905600a165627a7a7230582059e7a241349bc0cdbea921abf6615fab35664a0d3e29bbdb3acbd2d853065cd90029"
}