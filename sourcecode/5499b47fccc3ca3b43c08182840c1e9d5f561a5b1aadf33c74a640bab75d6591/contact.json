{
  "address": "0x6a5fa6e4e002e6ce4b6563686b37edf76943641f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NutopiaCoin",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "1000",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\npragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract NutopiaCoin is IERC20 {\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    using SafeMath for uint256;\n\n    enum ReleaseType {\n        Public,\n        Private1,\n        Private23,\n        Foundation,\n        Ecosystem,\n        Team,\n        Airdrop,\n        Contributor\n    }\n\n    // Default is Public aka no locking\n    mapping (address => ReleaseType) private _accountType;\n\n    // Required to calculate actual balance\n    // uint256 should be more than enough in lifetime\n    mapping (address => uint256) private _totalBalance;\n    mapping (address => uint256) private _spentBalance;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply = 10_000_000_000E18;\n\n    string private _name = \"Nutopia Coin\";\n    string private _symbol = \"NUCO\";\n    uint8 private _decimals = 18;\n\n    address public owner;\n\n    // Used when calculating available balance\n    // Will change after\n    uint256 public reference_time = 2000000000;\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n\n        // Initial balance\n        _totalBalance[owner] = _totalSupply;\n        _accountType[owner] = ReleaseType.Public;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        require(_spender != address(0));\n\n        _allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        _transfer(_from, _to, _value);\n        _allowed[_from][_to] = _allowed[_from][_to].sub(_value);\n        return true;\n    }\n\n    function _transfer(address from, address to, uint256 value) internal {\n        require(value <= balanceOf(from));\n        require(to != address(0));\n\n        _spentBalance[from] = _spentBalance[from].add(value);\n        assert(_spentBalance[from] <= _totalBalance[from]);\n\n        _totalBalance[to] = _totalBalance[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    // For ERC20 compatible clients, show current available balance instead of total balance\n    // This is also called in other functions to get the balance\n    // SafeMath should be unnecessary as all calculations should be already \"safe\"\n    // May lose precision due to truncating but it only loses fraction of E-18 so should be safe to ignore\n    // Overflow should be impossible as uint256 has E+77 and total supply has only E+28\n    // For complete readable schedule, please refer to official documents\n    function balanceOf(address _owner) public view returns (uint256) {\n        // Type of address\n        ReleaseType _type = _accountType[_owner];\n        uint256 balance = _totalBalance[_owner];\n\n        // Contract owner is exempt from \"before release\" check to be able to make initial distribution\n        // Contract owner is also exempt from locking\n        if (_owner == owner) {\n            return balance.sub(_spentBalance[_owner]);\n        }\n\n        // Elapsed time since release\n        int256 elapsed = int256(now) - int256(reference_time);\n        // Before release\n        if (elapsed < 0) {\n            return 0;\n        }\n        // Shortcut: after complete unlock\n        if (elapsed >= 21 * 30 days) {\n            return balance.sub(_spentBalance[_owner]);\n        }\n\n        // Available amount for each type of address\n        if (_type == ReleaseType.Public) {\n            // No locking\n        } else if (_type == ReleaseType.Private1) {\n            if (elapsed < 3 * 30 days) {\n                balance = 0;\n            } else if (elapsed < 6 * 30 days) {\n                balance = balance / 6;\n            } else if (elapsed < 9 * 30 days) {\n                balance = balance * 2 / 6;\n            } else if (elapsed < 12 * 30 days) {\n                balance = balance * 3 / 6;\n            } else if (elapsed < 15 * 30 days) {\n                balance = balance * 4 / 6;\n            } else if (elapsed < 18 * 30 days) {\n                balance = balance * 5 / 6;\n            }\n        } else if (_type == ReleaseType.Private23) {\n            if (elapsed < 6 * 30 days) {\n                balance = 0;\n            } else if (elapsed < 9 * 30 days) {\n                balance = balance / 4;\n            } else if (elapsed < 12 * 30 days) {\n                balance = balance * 2 / 4;\n            } else if (elapsed < 15 * 30 days) {\n                balance = balance * 3 / 4;\n            }\n        } else if (_type == ReleaseType.Foundation) {\n            if (elapsed < 3 * 30 days) {\n                balance = 0;\n            } else if (elapsed < 6 * 30 days) {\n                balance = balance * 3 / 20;\n            } else if (elapsed < 9 * 30 days) {\n                balance = balance * 6 / 20;\n            } else if (elapsed < 12 * 30 days) {\n                balance = balance * 9 / 20;\n            } else if (elapsed < 15 * 30 days) {\n                balance = balance * 12 / 20;\n            } else if (elapsed < 18 * 30 days) {\n                balance = balance * 15 / 20;\n            } else if (elapsed < 21 * 30 days) {\n                balance = balance * 18 / 20;\n            }\n        } else if (_type == ReleaseType.Ecosystem) {\n            if (elapsed < 3 * 30 days) {\n                balance = balance * 5 / 30;\n            } else if (elapsed < 6 * 30 days) {\n                balance = balance * 10 / 30;\n            } else if (elapsed < 9 * 30 days) {\n                balance = balance * 15 / 30;\n            } else if (elapsed < 12 * 30 days) {\n                balance = balance * 18 / 30;\n            } else if (elapsed < 15 * 30 days) {\n                balance = balance * 21 / 30;\n            } else if (elapsed < 18 * 30 days) {\n                balance = balance * 24 / 30;\n            } else if (elapsed < 21 * 30 days) {\n                balance = balance * 27 / 30;\n            }\n        } else if (_type == ReleaseType.Team) {\n            if (elapsed < 12 * 30 days) {\n                balance = 0;\n            } else if (elapsed < 15 * 30 days) {\n                balance = balance / 4;\n            } else if (elapsed < 18 * 30 days) {\n                balance = balance * 2 / 4;\n            } else if (elapsed < 21 * 30 days) {\n                balance = balance * 3 / 4;\n            }\n        } else if (_type == ReleaseType.Airdrop) {\n            if (elapsed < 3 * 30 days) {\n                balance = balance / 2;\n            }\n        } else if (_type == ReleaseType.Contributor) {\n            if (elapsed < 12 * 30 days) {\n                balance = 0;\n            } else if (elapsed < 15 * 30 days) {\n                balance = balance / 4;\n            } else if (elapsed < 18 * 30 days) {\n                balance = balance * 2 / 4;\n            } else if (elapsed < 21 * 30 days) {\n                balance = balance * 3 / 4;\n            }\n        } else {\n            // For unknown type which is quite impossible, return zero\n            return 0;\n        }\n        \n        return balance.sub(_spentBalance[_owner]);\n\n    }\n\n    // Total balance including locked part\n    function totalBalanceOf(address _owner) public view returns (uint256) {\n        return _totalBalance[_owner].sub(_spentBalance[_owner]);\n    }\n\n    // Allowance is not affected by locking\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return _allowed[_owner][_spender];\n    }\n\n    // Set the release type of specified address\n    // Only contract owner could call this\n    function setReleaseType(address _target, ReleaseType _type) public onlyOwner {\n        require(_target != address(0));\n        _accountType[_target] = _type;\n    }\n\n    // Set reference time\n    // Only contract owner could call this\n    function setReferenceTime(uint256 newTime) public onlyOwner {\n        reference_time = newTime;\n    }\n\n    // Contract owner transfer\n    // Note that only current contract owner and \"Public\" addresses are exempt from locking\n    function ownerTransfer(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}",
  "bytecode": "6b204fce5e3e2502611000000060045560c0604052600c60808190527f4e75746f70696120436f696e000000000000000000000000000000000000000060a090815261004e9160059190610116565b506040805180820190915260048082527f4e55434f00000000000000000000000000000000000000000000000000000000602090920191825261009391600691610116565b506007805460ff1916601217905563773594006008553480156100b557600080fd5b5060078054610100338102610100600160a81b031990921691909117808355600454908290046001600160a01b039081166000908152600160209081526040808320949094559454939093041682529181905220805460ff191690556101b1565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061015757805160ff1916838001178555610184565b82800160010185558215610184579182015b82811115610184578251825591602001919060010190610169565b50610190929150610194565b5090565b6101ae91905b80821115610190576000815560010161019a565b90565b610cde806101c06000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80634b0ee02a116100975780639c8aefda116100665780639c8aefda146102cd578063a9059cbb146102fc578063bc57d14314610328578063dd62ed3e14610345576100f5565b80634b0ee02a1461025557806370a082311461027b5780638da5cb5b146102a157806395d89b41146102c5576100f5565b806318160ddd116100d357806318160ddd146101df578063212918fb146101f957806323b872dd14610201578063313ce56714610237576100f5565b806306fdde03146100fa578063095ea7b3146101775780631815c208146101b7575b600080fd5b610102610373565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561013c578181015183820152602001610124565b50505050905090810190601f1680156101695780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101a36004803603604081101561018d57600080fd5b506001600160a01b038135169060200135610409565b604080519115158252519081900360200190f35b6101dd600480360360208110156101cd57600080fd5b50356001600160a01b0316610485565b005b6101e7610532565b60408051918252519081900360200190f35b6101e7610538565b6101a36004803603606081101561021757600080fd5b506001600160a01b0381358116916020810135909116906040013561053e565b61023f6105b1565b6040805160ff9092168252519081900360200190f35b6101e76004803603602081101561026b57600080fd5b50356001600160a01b03166105ba565b6101e76004803603602081101561029157600080fd5b50356001600160a01b03166105f5565b6102a9610a40565b604080516001600160a01b039092168252519081900360200190f35b610102610a54565b6101dd600480360360408110156102e357600080fd5b5080356001600160a01b0316906020013560ff16610ab5565b6101a36004803603604081101561031257600080fd5b506001600160a01b038135169060200135610b1c565b6101dd6004803603602081101561033e57600080fd5b5035610b32565b6101e76004803603604081101561035b57600080fd5b506001600160a01b0381358116916020013516610b53565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103ff5780601f106103d4576101008083540402835291602001916103ff565b820191906000526020600020905b8154815290600101906020018083116103e257829003601f168201915b5050505050905090565b60006001600160a01b03831661041e57600080fd5b3360008181526003602090815260408083206001600160a01b03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60075461010090046001600160a01b031633146104a157600080fd5b6001600160a01b0381166104b457600080fd5b6007546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600780546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b60045490565b60085481565b600061054b848484610b7e565b6001600160a01b03808516600090815260036020908152604080832093871683529290522054610581908363ffffffff610c8416565b6001600160a01b038086166000908152600360209081526040808320938816835292905220555060019392505050565b60075460ff1690565b6001600160a01b03811660009081526002602090815260408083205460019092528220546105ed9163ffffffff610c8416565b90505b919050565b6001600160a01b03808216600081815260208181526040808320546001909252822054600754929460ff90921693909261010090049091161415610666576001600160a01b03841660009081526002602052604090205461065d90829063ffffffff610c8416565b925050506105f0565b6008544203600081121561068057600093505050506105f0565b63033e910081126106bf576001600160a01b0385166000908152600260205260409020546106b590839063ffffffff610c8416565b93505050506105f0565b60008360078111156106cd57fe5b14156106d857610a0d565b60018360078111156106e657fe5b1415610778576276a7008112156107005760009150610773565b62ed4e00811215610717576006825b049150610773565b630163f50081121561072e5760066002830261070f565b6301da9c008112156107455760066003830261070f565b630251430081121561075c5760066004830261070f565b6302c7ea00811215610773576006600583025b0491505b610a0d565b600283600781111561078657fe5b14156107e25762ed4e008112156107a05760009150610773565b630163f5008112156107b45760048261070f565b6301da9c008112156107cb5760046002830261070f565b63025143008112156107735760046003830261076f565b60038360078111156107f057fe5b1415610893576276a70081121561080a5760009150610773565b62ed4e008112156108205760146003830261070f565b630163f5008112156108375760146006830261070f565b6301da9c0081121561084e5760146009830261070f565b6302514300811215610865576014600c830261070f565b6302c7ea0081121561087c576014600f830261070f565b63033e91008112156107735760146012830261076f565b60048360078111156108a157fe5b1415610946576276a7008112156108bd57601e6005830261070f565b62ed4e008112156108d357601e600a830261070f565b630163f5008112156108ea57601e600f830261070f565b6301da9c0081121561090157601e6012830261070f565b630251430081121561091857601e6015830261070f565b6302c7ea0081121561092f57601e6018830261070f565b63033e910081121561077357601e601b830261076f565b600583600781111561095457fe5b14156109b1576301da9c0081121561096f5760009150610773565b63025143008112156109835760048261070f565b6302c7ea0081121561099a5760046002830261070f565b63033e91008112156107735760046003830261076f565b60068360078111156109bf57fe5b14156109d8576276a7008112156107735760028261076f565b60078360078111156109e657fe5b1415610a01576301da9c0081121561096f5760009150610773565b600093505050506105f0565b6001600160a01b038516600090815260026020526040902054610a3790839063ffffffff610c8416565b95945050505050565b60075461010090046001600160a01b031681565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103ff5780601f106103d4576101008083540402835291602001916103ff565b60075461010090046001600160a01b03163314610ad157600080fd5b6001600160a01b038216610ae457600080fd5b6001600160a01b0382166000908152602081905260409020805482919060ff19166001836007811115610b1357fe5b02179055505050565b6000610b29338484610b7e565b50600192915050565b60075461010090046001600160a01b03163314610b4e57600080fd5b600855565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b610b87836105f5565b811115610b9357600080fd5b6001600160a01b038216610ba657600080fd5b6001600160a01b038316600090815260026020526040902054610bcf908263ffffffff610c9916565b6001600160a01b0384166000908152600260208181526040808420859055600182529092205491521015610bff57fe5b6001600160a01b038216600090815260016020526040902054610c28908263ffffffff610c9916565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600082821115610c9357600080fd5b50900390565b600082820183811015610cab57600080fd5b939250505056fea165627a7a723058206fd28fc15f53ed70fb90167b42ea536390fe34680265779551eff469e8fc2e2a0029"
}