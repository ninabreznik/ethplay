{
  "address": "0xb54d5dcbadefe0838b3fb4cae3aa071c553aa297",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NotaryMulti",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-30\n*/\n\npragma solidity ^0.4.23;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0));\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\n\ncontract Notary is Ownable {\n\n    struct Record {\n        bytes notarisedData;\n        uint256 timestamp;\n    }\n\n    mapping(bytes32 => Record) public records;\n    uint256 public notarisationFee;\n\n    /**\n    * @dev initialize Notary\n    * @param _owner of the notary\n    */\n    constructor (address _owner) public {\n        owner = _owner;\n    }\n\n    /**\n    * @dev make sure that the call has the notarisation cost\n    */\n    modifier callHasNotarisationCost() {\n        require(msg.value >= notarisationFee);\n        _;\n    }\n\n    /**\n    * @dev set notarisation cost\n    * @param _fee to notarize a record\n    */\n    function setNotarisationFee(uint256 _fee) public onlyOwner {\n        notarisationFee = _fee;\n    }\n\n    /**\n    * @dev fetch a Record by it's data notarised data\n    * @param _notarisedData the data that got notarised\n    */\n    function record(bytes _notarisedData) public constant returns(bytes, uint256) {\n        Record memory r = records[keccak256(_notarisedData)];\n        return (r.notarisedData, r.timestamp);\n    }\n\n    /**\n    * @dev notarize a new record\n    * @param _record the record to notarize\n    */\n    function notarize(bytes _record)\n        public\n        payable\n        callHasNotarisationCost\n    {\n\n        // create hash of record to to have an unique and deterministic key\n        bytes32 recordHash = keccak256(_record);\n\n        // make sure the record hasn't been notarised\n        require(records[recordHash].timestamp == 0);\n\n        // transfer notarisation fee to owner\n        if (owner != address(0)){\n            owner.transfer(address(this).balance);\n        }\n\n        // notarize record\n        records[recordHash] = Record({\n            notarisedData: _record,\n            timestamp: now\n        });\n\n    }\n\n}\n\ncontract NotaryMulti {\n\n    Notary public notary;\n\n    constructor(Notary _notary) public {\n        notary = _notary;\n    }\n\n    function notaryFee() public constant returns (uint256) {\n        return 2 * notary.notarisationFee();\n    }\n\n    /**\n    * @dev notarize two records\n    * @param _firstRecord is the first record that should be notarized\n    * @param _secondRecord is the second record that should be notarized\n    */\n    function notarizeTwo(bytes _firstRecord, bytes _secondRecord) payable public {\n        notary.notarize(_firstRecord);\n        notary.notarize(_secondRecord);\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405160208061053c83398101806040528101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506104b9806100836000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063092677851461005c578063835c853b146100fe5780639d54c79d14610129575b600080fd5b6100fc600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610180565b005b34801561010a57600080fd5b5061011361039e565b6040518082815260200191505060405180910390f35b34801561013557600080fd5b5061013e610468565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb1ace34836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561022957808201518184015260208101905061020e565b50505050905090810190601f1680156102565780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b15801561027557600080fd5b505af1158015610289573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb1ace34826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561033657808201518184015260208101905061031b565b50505050905090810190601f1680156103635780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b15801561038257600080fd5b505af1158015610396573d6000803e3d6000fd5b505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c9d3a8856040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561042557600080fd5b505af1158015610439573d6000803e3d6000fd5b505050506040513d602081101561044f57600080fd5b8101908080519060200190929190505050600202905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058202cc3ce3166f146856442a0298a74aefd83d170a2371aa464613c2a3c6688e64c0029000000000000000000000000460637d6e57c7b404a81297fa46faea5b3170261",
  "constructorArguments": "000000000000000000000000460637d6e57c7b404a81297fa46faea5b3170261"
}