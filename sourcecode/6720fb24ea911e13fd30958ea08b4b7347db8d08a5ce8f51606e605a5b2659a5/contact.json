{
  "address": "0x7f4ca7139f9847dde009b4c6af1e173c1bf03d2d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Microverse",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-25\n*/\n\npragma solidity ^0.4.13;\n\ncontract HexBoard3 {\n\n  // To ease iteration\n  uint8 constant public minTileId= 1;\n  uint8 constant public maxTileId = 19;\n  uint8 constant public numTiles = 19;\n\n  // Any 0s in the neighbor array represent non-neighbors. There might be a better way to do this, but w/e\n  mapping(uint8 => uint8[6]) public tileToNeighbors;\n  uint8 constant public nullNeighborValue = 0;\n\n  // TODO: Add neighbor calculation in if we want to use neighbors in jackpot calculation\n  constructor() public {\n  }\n}\n\ncontract JackpotRules {\n  using SafeMath for uint256;\n\n  constructor() public {}\n\n  // NOTE: The next methods *must* add up to 100%\n\n  // 50%\n  function _winnerJackpot(uint256 jackpot) public pure returns (uint256) {\n    return jackpot.div(2);\n  }\n\n  // 40%\n  function _landholderJackpot(uint256 jackpot) public pure returns (uint256) {\n    return (jackpot.mul(2)).div(5);\n  }\n\n  // 5%\n  function _nextPotJackpot(uint256 jackpot) public pure returns (uint256) {\n    return jackpot.div(20);\n  }\n\n  // 5%\n  function _teamJackpot(uint256 jackpot) public pure returns (uint256) {\n    return jackpot.div(20);\n  }\n}\n\nlibrary Math {\n  /**\n  * @dev Returns the largest of two numbers.\n  */\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  /**\n  * @dev Returns the smallest of two numbers.\n  */\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  /**\n  * @dev Calculates the average of two numbers. Since these are integers,\n  * averages of an even and odd number cannot be represented, and will be\n  * rounded down.\n  */\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\n    // (a + b) / 2 can overflow, so we distribute\n    return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n  }\n}\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ncontract PullPayment {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) public payments;\n    uint256 public totalPayments;\n\n    /**\n     * @dev Withdraw accumulated balance, called by payee.\n     */\n    function withdrawPayments() public {\n        address payee = msg.sender;\n        uint256 payment = payments[payee];\n\n        require(payment != 0);\n        require(address(this).balance >= payment);\n\n        totalPayments = totalPayments.sub(payment);\n        payments[payee] = 0;\n\n        payee.transfer(payment);\n    }\n\n    /**\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\n     * @param dest The destination address of the funds.\n     * @param amount The amount to transfer.\n     */\n    function asyncSend(address dest, uint256 amount) internal {\n        payments[dest] = payments[dest].add(amount);\n        totalPayments = totalPayments.add(amount);\n    }\n}\n\nlibrary SafeMath {\n\n    /**\n     * @dev Multiplies two numbers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two numbers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract TaxRules {\n    using SafeMath for uint256;\n\n    constructor() public {}\n\n    // 10%\n    function _priceToTax(uint256 price) public pure returns (uint256) {\n        return price.div(10);\n    }\n\n    // NOTE: The next methods *must* add up to 100%\n\n    // 40%\n    function _jackpotTax(uint256 tax) public pure returns (uint256) {\n        return (tax.mul(2)).div(5);\n    }\n\n    // 38%\n    function _totalLandholderTax(uint256 tax) public pure returns (uint256) {\n        return (tax.mul(19)).div(50);\n    }\n\n    // 17%/12%\n    function _teamTax(uint256 tax, bool hasReferrer) public pure returns (uint256) {\n        if (hasReferrer) {\n            return (tax.mul(3)).div(25);\n        } else {\n            return (tax.mul(17)).div(100);\n        }\n    }\n\n    // 5% although only invoked if _teamTax is lower value\n    function _referrerTax(uint256 tax, bool hasReferrer)  public pure returns (uint256) {\n        if (hasReferrer) {\n            return tax.div(20);\n        } else {\n            return 0;\n        }\n    }\n\n    // 5%\n    function _nextPotTax(uint256 tax) public pure returns (uint256) {\n        return tax.div(20);\n    }\n}\n\ncontract Microverse is\n    HexBoard3,\n    PullPayment,\n    Ownable,\n    TaxRules,\n    JackpotRules {\n    using SafeMath for uint256;\n    using Math for uint256;\n\n    // states this contract progresses through\n    enum Stage {\n        DutchAuction,\n        GameRounds\n    }\n    Stage public stage = Stage.DutchAuction;\n\n    modifier atStage(Stage _stage) {\n        require(\n            stage == _stage,\n            \"Function cannot be called at this time.\"\n        );\n        _;\n    }\n\n    // NOTE: stage arg for debugging purposes only! Should just be set to 0 by default\n    constructor(uint startingStage) public {\n        if (startingStage == uint(Stage.GameRounds)) {\n            stage = Stage.GameRounds;\n            _startGameRound();\n        } else {\n            _startAuction();\n        }\n    }\n\n    mapping(uint8 => address) public tileToOwner;\n    mapping(uint8 => uint256) public tileToPrice;\n    uint256 public totalTileValue;\n\n    function _changeTilePrice(uint8 tileId, uint256 newPrice) private {\n        uint256 oldPrice = tileToPrice[tileId];\n        tileToPrice[tileId] = newPrice;\n        totalTileValue = (totalTileValue.sub(oldPrice)).add(newPrice);\n    }\n\n    event TileOwnerChanged(\n        uint8 indexed tileId,\n        address indexed oldOwner,\n        address indexed newOwner,\n        uint256 oldPrice,\n        uint256 newPrice\n    );\n\n    /////////////\n    // Team stuff\n    /////////////\n\n    // The muscle behind microverse\n    address public teamAddress1 = 0xcB46219bA114245c3A18761E4f7891f9C4BeF8c0;\n    address public teamAddress2 = 0xF2AFb5c2D205B36F22BE528A1300393B1C399E79;\n    address public teamAddress3 = 0x22FC59B3878F0Aa2e43F7f3388c1e20D83Cf8ba2;\n\n    function _sendToTeam(uint256 amount) private {\n        uint256 perTeamMemberFee = amount.div(3);\n\n        asyncSend(teamAddress1, perTeamMemberFee);\n        asyncSend(teamAddress2, perTeamMemberFee);\n        asyncSend(teamAddress3, perTeamMemberFee);\n    }\n\n    function withdrawContractBalance() external onlyOwner {\n        uint256 contractBalance = address(this).balance;\n        uint256 withdrawableBalance = contractBalance.sub(totalPayments);\n\n        // No withdrawal necessary if <= 0 balance\n        require(withdrawableBalance > 0);\n\n        asyncSend(msg.sender, withdrawableBalance);\n    }\n\n    //////////\n    // Auction\n    //////////\n\n    event AuctionStarted(\n        uint256 startingAuctionPrice,\n        uint256 endingAuctionPrice,\n        uint256 auctionDuration,\n        uint256 startTime\n    );\n\n    event AuctionEnded(\n        uint256 endTime\n    );\n\n    uint256 constant public startingAuctionPrice = 1 ether;\n    uint256 constant public endingAuctionPrice = 0.05 ether;\n    uint256 constant public auctionDuration = 5 days; // period over which land price decreases linearly\n\n    uint256 public numBoughtTiles;\n    uint256 public auctionStartTime;\n\n    function buyTileAuction(uint8 tileId, uint256 newPrice, address referrer) public payable atStage(Stage.DutchAuction) {\n        require(\n            tileToOwner[tileId] == address(0) && tileToPrice[tileId] == 0,\n            \"Can't buy a tile that's already been auctioned off\"\n        );\n\n        uint256 tax = _priceToTax(newPrice);\n        uint256 price = getTilePriceAuction();\n\n        require(\n            msg.value >= tax.add(price),\n            \"Must pay the full price and tax for a tile on auction\"\n        );\n\n        // NOTE: *entire* payment distributed as Game taxes\n        _distributeAuctionTax(msg.value, referrer);\n\n        tileToOwner[tileId] = msg.sender;\n        _changeTilePrice(tileId, newPrice);\n\n        numBoughtTiles = numBoughtTiles.add(1);\n\n        emit TileOwnerChanged(tileId, address(0), msg.sender, price, newPrice);\n\n        if (numBoughtTiles >= numTiles) {\n            endAuction();\n        }\n    }\n\n    // NOTE: Some common logic with _distributeTax\n    function _distributeAuctionTax(uint256 tax, address referrer) private {\n        _distributeLandholderTax(_totalLandholderTax(tax));\n\n        // NOTE: Because no notion of 'current jackpot', everything added to next pot\n        uint256 totalJackpotTax = _jackpotTax(tax).add(_nextPotTax(tax));\n        nextJackpot = nextJackpot.add(totalJackpotTax);\n\n        // NOTE: referrer tax comes out of dev team tax\n        bool hasReferrer = referrer != address(0);\n        _sendToTeam(_teamTax(tax, hasReferrer));\n        asyncSend(referrer, _referrerTax(tax, hasReferrer));\n    }\n\n    function getTilePriceAuction() public view atStage(Stage.DutchAuction) returns (uint256) {\n        uint256 secondsPassed = 0;\n\n        // This should always be the case...\n        if (now > auctionStartTime) {\n            secondsPassed = now.sub(auctionStartTime);\n        }\n\n        if (secondsPassed >= auctionDuration) {\n            return endingAuctionPrice;\n        } else {\n            uint256 maxPriceDelta = startingAuctionPrice.sub(endingAuctionPrice);\n            uint256 actualPriceDelta = (maxPriceDelta.mul(secondsPassed)).div(auctionDuration);\n\n            return startingAuctionPrice.sub(actualPriceDelta);\n        }\n    }\n\n    function endAuction() private {\n        require(\n            numBoughtTiles >= numTiles,\n            \"Can't end auction if are unbought tiles\"\n        );\n\n        stage = Stage.GameRounds;\n        _startGameRound();\n\n        emit AuctionEnded(now);\n    }\n\n    function _startAuction() private {\n        auctionStartTime = now;\n        numBoughtTiles = 0;\n\n        emit AuctionStarted(startingAuctionPrice,\n                            endingAuctionPrice,\n                            auctionDuration,\n                            auctionStartTime);\n    }\n\n    ///////\n    // Game\n    ///////\n\n    uint256 constant public startingRoundExtension = 12 hours;\n    uint256 constant public halvingVolume = 10 ether; // tx volume before next duration halving\n    uint256 constant public minRoundExtension = 10 seconds; // could set to 1 second\n\n    uint256 public roundNumber = 0;\n\n    uint256 public curExtensionVolume;\n    uint256 public curRoundExtension;\n\n    uint256 public roundEndTime;\n\n    uint256 public jackpot;\n    uint256 public nextJackpot;\n\n    // Only emitted if owner doesn't *also* change\n    event TilePriceChanged(\n        uint8 indexed tileId,\n        address indexed owner,\n        uint256 oldPrice,\n        uint256 newPrice\n    );\n\n    event GameRoundStarted(\n        uint256 initJackpot,\n        uint256 endTime,\n        uint256 roundNumber\n    );\n\n    event GameRoundExtended(\n        uint256 endTime\n    );\n\n    event GameRoundEnded(\n        uint256 jackpot\n    );\n\n    ////////////////////////////////////\n    // [Game] Round extension management\n    ////////////////////////////////////\n\n    function roundTimeRemaining() public view atStage(Stage.GameRounds) returns (uint256)  {\n        if (_roundOver()) {\n            return 0;\n        } else {\n            return roundEndTime.sub(now);\n        }\n    }\n\n    function _extendRound() private {\n        roundEndTime = roundEndTime.max(now.add(curRoundExtension));\n\n        emit GameRoundExtended(roundEndTime);\n    }\n\n    function _startGameRound() private {\n        curExtensionVolume = 0 ether;\n        curRoundExtension = startingRoundExtension;\n\n        jackpot = nextJackpot;\n        nextJackpot = 0;\n\n        roundNumber = roundNumber.add(1);\n\n        _extendRound();\n\n        emit GameRoundStarted(jackpot, roundEndTime, roundNumber);\n    }\n\n    function _roundOver() private view returns (bool) {\n        return now >= roundEndTime;\n    }\n\n    modifier duringRound() {\n        require(\n            !_roundOver(),\n            \"Round can't be over!\"\n        );\n        _;\n    }\n\n    // NOTE: Must be called for all volume we want to count towards round extension halving\n    function _logRoundExtensionVolume(uint256 amount) private {\n        curExtensionVolume = curExtensionVolume.add(amount);\n\n        if (curExtensionVolume >= halvingVolume) {\n            curRoundExtension = curRoundExtension.div(2).max(minRoundExtension);\n            curExtensionVolume = 0 ether;\n        }\n    }\n\n    ////////////////////////\n    // [Game] Player actions\n    ////////////////////////\n\n    function endGameRound() public atStage(Stage.GameRounds) {\n        require(\n            _roundOver(),\n            \"Round must be over!\"\n        );\n\n        _distributeJackpot();\n\n        emit GameRoundEnded(jackpot);\n\n        _startGameRound();\n    }\n\n    function setTilePrice(uint8 tileId, uint256 newPrice, address referrer)\n        public\n        payable\n        atStage(Stage.GameRounds)\n        duringRound {\n        require(\n            tileToOwner[tileId] == msg.sender,\n            \"Can't set tile price for a tile you don't own!\"\n        );\n\n        uint256 tax = _priceToTax(newPrice);\n\n        require(\n            msg.value >= tax,\n            \"Must pay tax on new tile price!\"\n        );\n\n        uint256 oldPrice = tileToPrice[tileId];\n        _distributeTax(msg.value, referrer);\n        _changeTilePrice(tileId, newPrice);\n\n        // NOTE: Currently we extend round for 'every' tile price change. Alternatively could do only on\n        // increases or decreases or changes exceeding some magnitude\n        _extendRound();\n        _logRoundExtensionVolume(msg.value);\n\n        emit TilePriceChanged(tileId, tileToOwner[tileId], oldPrice, newPrice);\n    }\n\n    function buyTile(uint8 tileId, uint256 newPrice, address referrer)\n        public\n        payable\n        atStage(Stage.GameRounds)\n        duringRound {\n        address oldOwner = tileToOwner[tileId];\n        require(\n            oldOwner != msg.sender,\n            \"Can't buy a tile you already own\"\n        );\n\n        uint256 tax = _priceToTax(newPrice);\n\n        uint256 oldPrice = tileToPrice[tileId];\n        require(\n            msg.value >= tax.add(oldPrice),\n            \"Must pay full price and tax for tile\"\n        );\n\n        // pay seller\n        asyncSend(oldOwner, tileToPrice[tileId]);\n        tileToOwner[tileId] = msg.sender;\n\n        uint256 actualTax = msg.value.sub(oldPrice);\n        _distributeTax(actualTax, referrer);\n\n        _changeTilePrice(tileId, newPrice);\n        _extendRound();\n        _logRoundExtensionVolume(msg.value);\n\n        emit TileOwnerChanged(tileId, oldOwner, msg.sender, oldPrice, newPrice);\n    }\n\n    ///////////////////////////////////////\n    // [Game] Dividend/jackpot distribution\n    ///////////////////////////////////////\n\n    function _distributeJackpot() private {\n        uint256 winnerJackpot = _winnerJackpot(jackpot);\n        uint256 landholderJackpot = _landholderJackpot(jackpot);\n        _distributeWinnerAndLandholderJackpot(winnerJackpot, landholderJackpot);\n\n        _sendToTeam(_teamJackpot(jackpot));\n        nextJackpot = nextJackpot.add(_nextPotJackpot(jackpot));\n    }\n\n    function _calculatePriceComplement(uint8 tileId) private view returns (uint256) {\n        return totalTileValue.sub(tileToPrice[tileId]);\n    }\n\n    // NOTE: These are bundled together so that we only have to compute complements once\n    function _distributeWinnerAndLandholderJackpot(uint256 winnerJackpot, uint256 landholderJackpot) private {\n        uint256[] memory complements = new uint256[](numTiles + 1); // inc necessary b/c tiles are 1-indexed\n        uint256 totalPriceComplement = 0;\n\n        uint256 bestComplement = 0;\n        uint8 lastWinningTileId = 0;\n        for (uint8 i = minTileId; i <= maxTileId; i++) {\n            uint256 priceComplement = _calculatePriceComplement(i);\n\n            // update winner\n            if (bestComplement == 0 || priceComplement > bestComplement) {\n                bestComplement = priceComplement;\n                lastWinningTileId = i;\n            }\n\n            complements[i] = priceComplement;\n            totalPriceComplement = totalPriceComplement.add(priceComplement);\n        }\n        uint256 numWinners = 0;\n        for (i = minTileId; i <= maxTileId; i++) {\n            if (_calculatePriceComplement(i) == bestComplement) {\n                numWinners++;\n            }\n        }\n\n        // distribute jackpot among all winners. save time on the majority (1-winner) case\n        if (numWinners == 1) {\n            asyncSend(tileToOwner[lastWinningTileId], winnerJackpot);\n        } else {\n            for (i = minTileId; i <= maxTileId; i++) {\n                if (_calculatePriceComplement(i) == bestComplement) {\n                    asyncSend(tileToOwner[i], winnerJackpot.div(numWinners));\n                }\n            }\n        }\n\n        // distribute landholder things\n        for (i = minTileId; i <= maxTileId; i++) {\n            // NOTE: We don't exclude the jackpot winner(s) here, so the winner(s) is paid 'twice'\n            uint256 landholderAllocation = complements[i].mul(landholderJackpot).div(totalPriceComplement);\n\n            asyncSend(tileToOwner[i], landholderAllocation);\n        }\n    }\n\n    function _distributeTax(uint256 tax, address referrer) private {\n        jackpot = jackpot.add(_jackpotTax(tax));\n\n        _distributeLandholderTax(_totalLandholderTax(tax));\n        nextJackpot = nextJackpot.add(_nextPotTax(tax));\n\n        // NOTE: referrer tax comes out of dev team tax\n        bool hasReferrer = referrer != address(0);\n        _sendToTeam(_teamTax(tax, hasReferrer));\n        asyncSend(referrer, _referrerTax(tax, hasReferrer));\n    }\n\n    function _distributeLandholderTax(uint256 tax) private {\n        for (uint8 tile = minTileId; tile <= maxTileId; tile++) {\n            if (tileToOwner[tile] != address(0) && tileToPrice[tile] != 0) {\n                uint256 tilePrice = tileToPrice[tile];\n                uint256 allocation = tax.mul(tilePrice).div(totalTileValue);\n\n                asyncSend(tileToOwner[tile], allocation);\n            }\n        }\n    }\n}",
  "bytecode": "60806040526003805460a060020a60ff021916905560078054600160a060020a031990811673cb46219ba114245c3a18761e4f7891f9c4bef8c01790915560088054821673f2afb5c2d205b36f22be528a1300393b1c399e79179055600980549091167322fc59b3878f0aa2e43f7f3388c1e20d83cf8ba21790556000600c553480156200008c57600080fd5b5060405160208062001fa8833981016040525160038054600160a060020a031916331790556001811415620000fb576003805460a060020a60ff02191674010000000000000000000000000000000000000000179055620000f564010000000062000115810204565b6200010e565b6200010e640100000000620001a7810204565b50620002b2565b6000600d81905561a8c0600e556011805460105555600c5462000148906001640100000000620017886200020b82021704565b600c556200015e64010000000062000225810204565b601054600f54600c5460408051938452602084019290925282820152517f8dbc109f2b860f13cb31cb0e968bcd6324ad443f6cc2853fdf3ca82904a8a0089181900360600190a1565b42600b8190556000600a5560408051670de0b6b3a7640000815266b1a2bc2ec50000602082015262069780818301526060810192909252517fa832766a05f1bd0298b0268308621777cfe1e4eea23afe7c06beea79bc6ddd2d9181900360800190a1565b6000828201838110156200021e57600080fd5b9392505050565b600e54620002609062000248904290640100000000620017886200020b82021704565b600f549064010000000062001c3e6200029982021704565b600f81905560408051918252517fe3663e221e6fb10518d40e9d9a20cd6f59853232fbfebc7de3821ed0c8fb36d29181900360200190a1565b600081831015620002ab57816200021e565b5090919050565b611ce680620002c26000396000f3006080604052600436106102445763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416625b4487811461024957806303fca0611461027057806306e42962146102855780630a6f5d8e1461029d5780630cbf54c8146102b55780630e51574f146102ca5780630eb51c9c146102e15780631ccff716146102f657806320178db3146103215780633459d2ba14610336578063391f3b2d1461034b5780633ebf2508146103635780633f4acbe8146103785780633fecde211461039557806349087bcc146103b25780634e2786fb146103c757806351b472b9146103dc5780635b98f169146103f15780635f99c1b21461029d5780636103d70b1461040c57806366cd442a1461042157806369008fb6146104585780636b31ee01146104755780636b433ccf1461048a57806371566c23146104a25780637e9de0bc146104b757806384db8d1e1461034b578063861a588e146104d45780638771fc4a146104e95780638da5cb5b146104fe578063925183cd146105135780639798532f14610531578063a93b1a6514610549578063aca21a1e14610566578063ad2daa481461057b578063b6bb354b14610590578063bfab3db9146105a5578063c040e6b8146105ba578063c2539429146105f3578063c9e87f3114610608578063cce439641461061d578063cf6934181461034b578063de8d77e714610632578063e2982c2114610647578063e40205d614610668578063e9360a3614610608578063eb54f9ec1461067d578063f2fde38b14610692575b600080fd5b34801561025557600080fd5b5061025e6106b3565b60408051918252519081900360200190f35b34801561027c57600080fd5b5061025e6106b9565b34801561029157600080fd5b5061025e6004356106bf565b3480156102a957600080fd5b5061025e6004356106d8565b3480156102c157600080fd5b5061025e6106fc565b3480156102d657600080fd5b506102df610703565b005b3480156102ed57600080fd5b5061025e61081b565b34801561030257600080fd5b5061030b610821565b6040805160ff9092168252519081900360200190f35b34801561032d57600080fd5b5061025e610826565b34801561034257600080fd5b5061025e61082c565b34801561035757600080fd5b5061025e60043561093c565b34801561036f57600080fd5b5061025e61094f565b34801561038457600080fd5b5061025e600435602435151561095b565b6102df60ff60043516602435600160a060020a0360443516610996565b3480156103be57600080fd5b5061025e610bfe565b3480156103d357600080fd5b5061025e610c09565b3480156103e857600080fd5b5061025e610c0f565b3480156103fd57600080fd5b5061025e60ff60043516610c1b565b34801561041857600080fd5b506102df610c2d565b34801561042d57600080fd5b5061043c60ff60043516610cb6565b60408051600160a060020a039092168252519081900360200190f35b6102df60ff60043516602435600160a060020a0360443516610cd1565b34801561048157600080fd5b5061025e610f55565b34801561049657600080fd5b5061025e600435610f5b565b3480156104ae57600080fd5b5061025e610f73565b6102df60ff60043516602435600160a060020a0360443516610f79565b3480156104e057600080fd5b5061043c61124b565b3480156104f557600080fd5b5061025e61125a565b34801561050a57600080fd5b5061043c611260565b34801561051f57600080fd5b5061030b60ff6004351660243561126f565b34801561053d57600080fd5b5061025e6004356112a7565b34801561055557600080fd5b5061025e60043560243515156112ba565b34801561057257600080fd5b5061030b6112db565b34801561058757600080fd5b5061025e6112e0565b34801561059c57600080fd5b5061043c611384565b3480156105b157600080fd5b506102df611393565b3480156105c657600080fd5b506105cf6113e4565b604051808260018111156105df57fe5b60ff16815260200191505060405180910390f35b3480156105ff57600080fd5b5061025e6113f4565b34801561061457600080fd5b5061030b6113fa565b34801561062957600080fd5b5061043c6113ff565b34801561063e57600080fd5b5061025e61140e565b34801561065357600080fd5b5061025e600160a060020a0360043516611413565b34801561067457600080fd5b5061025e611425565b34801561068957600080fd5b5061025e61142b565b34801561069e57600080fd5b506102df600160a060020a0360043516611431565b60025481565b60115481565b60006106d282600263ffffffff6114c616565b92915050565b60006106d260056106f084600263ffffffff6114ee16565b9063ffffffff6114c616565b6206978081565b60018060035460a060020a900460ff16600181111561071e57fe5b14610775576040805160e560020a62461bcd0281526020600482015260276024820152600080516020611c7b8339815191526044820152600080516020611c9b833981519152606482015290519081900360840190fd5b61077d611523565b15156107d3576040805160e560020a62461bcd02815260206004820152601360248201527f526f756e64206d757374206265206f7665722100000000000000000000000000604482015290519081900360640190fd5b6107db61152c565b60105460408051918252517f3cf3fa68b629d58f07a4aab1808a70df09365f335635faa68ce0478aee6d8abc9181900360200190a161081861158a565b50565b61a8c081565b600181565b60065481565b6000808080808060035460a060020a900460ff16600181111561084b57fe5b146108a2576040805160e560020a62461bcd0281526020600482015260276024820152600080516020611c7b8339815191526044820152600080516020611c9b833981519152606482015290519081900360840190fd5b60009350600b544211156108c757600b546108c490429063ffffffff61160716565b93505b6206978084106108e05766b1a2bc2ec500009450610935565b6108ff670de0b6b3a764000066b1a2bc2ec5000063ffffffff61160716565b9250610918620697806106f0858763ffffffff6114ee16565b9150610932670de0b6b3a76400008363ffffffff61160716565b94505b5050505090565b60006106d282601463ffffffff6114c616565b670de0b6b3a764000081565b600081156109805761097960196106f085600363ffffffff6114ee16565b90506106d2565b61097960646106f085601163ffffffff6114ee16565b60008060018060035460a060020a900460ff1660018111156109b457fe5b14610a0b576040805160e560020a62461bcd0281526020600482015260276024820152600080516020611c7b8339815191526044820152600080516020611c9b833981519152606482015290519081900360840190fd5b610a13611523565b15610a68576040805160e560020a62461bcd02815260206004820152601460248201527f526f756e642063616e2774206265206f76657221000000000000000000000000604482015290519081900360640190fd5b60ff8616600090815260046020526040902054600160a060020a03163314610b00576040805160e560020a62461bcd02815260206004820152602e60248201527f43616e2774207365742074696c6520707269636520666f7220612074696c652060448201527f796f7520646f6e2774206f776e21000000000000000000000000000000000000606482015290519081900360840190fd5b610b09856112a7565b925034831115610b63576040805160e560020a62461bcd02815260206004820152601f60248201527f4d7573742070617920746178206f6e206e65772074696c652070726963652100604482015290519081900360640190fd5b60ff86166000908152600560205260409020549150610b82348561161e565b610b8c868661168b565b610b946116d0565b610b9d34611730565b60ff86166000818152600460209081526040918290205482518681529182018990528251600160a060020a0390911693927f6c8ddfd61cb90c6918b2dfdf677c44fc270fcb4b7dfa22b0665fbd1976832fca928290030190a3505050505050565b66b1a2bc2ec5000081565b600c5481565b678ac7230489e8000081565b60056020526000908152604090205481565b33600081815260016020526040902054801515610c4957600080fd5b3031811115610c5757600080fd5b600254610c6a908263ffffffff61160716565b600255600160a060020a0382166000818152600160205260408082208290555183156108fc0291849190818181858888f19350505050158015610cb1573d6000803e3d6000fd5b505050565b600460205260009081526040902054600160a060020a031681565b600080808060035460a060020a900460ff166001811115610cee57fe5b14610d45576040805160e560020a62461bcd0281526020600482015260276024820152600080516020611c7b8339815191526044820152600080516020611c9b833981519152606482015290519081900360840190fd5b60ff8616600090815260046020526040902054600160a060020a0316158015610d7e575060ff8616600090815260056020526040902054155b1515610dfa576040805160e560020a62461bcd02815260206004820152603260248201527f43616e27742062757920612074696c652074686174277320616c72656164792060448201527f6265656e2061756374696f6e6564206f66660000000000000000000000000000606482015290519081900360840190fd5b610e03856112a7565b9250610e0d61082c565b9150610e1f838363ffffffff61178816565b341015610e9c576040805160e560020a62461bcd02815260206004820152603560248201527f4d75737420706179207468652066756c6c20707269636520616e64207461782060448201527f666f7220612074696c65206f6e2061756374696f6e0000000000000000000000606482015290519081900360840190fd5b610ea6348561179a565b60ff86166000908152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff191633179055610edf868661168b565b600a54610ef390600163ffffffff61178816565b600a5560408051838152602081018790528151339260009260ff8b16927f7a60be58ea0cf4cbccda877e1d59dc979442a2a3cc294136d1b7a325e366f34d929181900390910190a4600a54601311610f4d57610f4d611805565b505050505050565b60105481565b60006106d260326106f084601363ffffffff6114ee16565b600a5481565b600080808060018060035460a060020a900460ff166001811115610f9957fe5b14610ff0576040805160e560020a62461bcd0281526020600482015260276024820152600080516020611c7b8339815191526044820152600080516020611c9b833981519152606482015290519081900360840190fd5b610ff8611523565b1561104d576040805160e560020a62461bcd02815260206004820152601460248201527f526f756e642063616e2774206265206f76657221000000000000000000000000604482015290519081900360640190fd5b60ff8816600090815260046020526040902054600160a060020a03169450338514156110c3576040805160e560020a62461bcd02815260206004820181905260248201527f43616e27742062757920612074696c6520796f7520616c7265616479206f776e604482015290519081900360640190fd5b6110cc876112a7565b60ff891660009081526005602052604090205490945092506110f4848463ffffffff61178816565b341015611170576040805160e560020a62461bcd028152602060048201526024808201527f4d757374207061792066756c6c20707269636520616e642074617820666f722060448201527f74696c6500000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60ff881660009081526005602052604090205461118e9086906118e7565b60ff88166000908152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff1916331790556111cd348463ffffffff61160716565b91506111d9828761161e565b6111e3888861168b565b6111eb6116d0565b6111f434611730565b604080518481526020810189905281513392600160a060020a0389169260ff8d16927f7a60be58ea0cf4cbccda877e1d59dc979442a2a3cc294136d1b7a325e366f34d929181900390910190a45050505050505050565b600854600160a060020a031681565b600d5481565b600354600160a060020a031681565b60006020528160005260406000208160068110151561128a57fe5b602081049091015460ff601f9092166101000a9004169150829050565b60006106d282600a63ffffffff6114c616565b600081156112d35761097983601463ffffffff6114c616565b5060006106d2565b600081565b600060018060035460a060020a900460ff1660018111156112fd57fe5b14611354576040805160e560020a62461bcd0281526020600482015260276024820152600080516020611c7b8339815191526044820152600080516020611c9b833981519152606482015290519081900360840190fd5b61135c611523565b1561136a5760009150611380565b600f5461137d904263ffffffff61160716565b91505b5090565b600754600160a060020a031681565b6003546000908190600160a060020a031633146113af57600080fd5b600254303192506113c790839063ffffffff61160716565b9050600081116113d657600080fd5b6113e033826118e7565b5050565b60035460a060020a900460ff1681565b600e5481565b601381565b600954600160a060020a031681565b600a81565b60016020526000908152604090205481565b600f5481565b600b5481565b600354600160a060020a0316331461144857600080fd5b600160a060020a038116151561145d57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000808083116114d557600080fd5b82848115156114e057fe5b0490508091505b5092915050565b60008083151561150157600091506114e7565b5082820282848281151561151157fe5b041461151c57600080fd5b9392505050565b600f5442101590565b60008061153a6010546106bf565b91506115476010546106d8565b90506115538282611943565b61156661156160105461093c565b611b34565b61158361157460105461093c565b6011549063ffffffff61178816565b6011555050565b6000600d81905561a8c0600e556011805460105555600c546115b390600163ffffffff61178816565b600c556115be6116d0565b601054600f54600c5460408051938452602084019290925282820152517f8dbc109f2b860f13cb31cb0e968bcd6324ad443f6cc2853fdf3ca82904a8a0089181900360600190a1565b6000808383111561161757600080fd5b5050900390565b600061163b61162c846106d8565b6010549063ffffffff61178816565b60105561164f61164a84610f5b565b611b8c565b61165b6115748461093c565b60115550600160a060020a0381161515611678611561848361095b565b610cb18261168685846112ba565b6118e7565b60ff821660009081526005602052604090208054908290556006546116c89083906116bc908463ffffffff61160716565b9063ffffffff61178816565b600655505050565b6116f76116e8600e544261178890919063ffffffff16565b600f549063ffffffff611c3e16565b600f81905560408051918252517fe3663e221e6fb10518d40e9d9a20cd6f59853232fbfebc7de3821ed0c8fb36d29181900360200190a1565b600d54611743908263ffffffff61178816565b600d819055678ac7230489e80000116108185761177d600a6117716002600e546114c690919063ffffffff16565b9063ffffffff611c3e16565b600e556000600d5550565b60008282018381101561151c57600080fd5b6000806117a961164a85610f5b565b6117be6117b58561093c565b6116bc866106d8565b6011549092506117d4908363ffffffff61178816565b60115550600160a060020a03821615156117f1611561858361095b565b6117ff8361168686846112ba565b50505050565b600a5460131115611886576040805160e560020a62461bcd02815260206004820152602760248201527f43616e277420656e642061756374696f6e2069662061726520756e626f75676860448201527f742074696c657300000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556118b261158a565b6040805142815290517f45806e512b1f4f10e33e8b3cb64d1d11d998d8c554a95e0841fc1c701278bd5d9181900360200190a1565b600160a060020a038216600090815260016020526040902054611910908263ffffffff61178816565b600160a060020a03831660009081526001602052604090205560025461193c908263ffffffff61178816565b6002555050565b6040805160148082526102a08201909252606091600091829182918291829182918291906020820161028080388339019050509750600096506000955060009450600193505b601360ff8516116119f05761199d84611c55565b92508515806119ab57508583115b156119b7578295508394505b82888560ff168151811015156119c957fe5b602090810290910101526119e3878463ffffffff61178816565b9650600190930192611989565b60009150600193505b601360ff851611611a265785611a0e85611c55565b1415611a1b576001909101905b6001909301926119f9565b8160011415611a5a5760ff8516600090815260046020526040902054611a5590600160a060020a03168b6118e7565b611ab5565b600193505b601360ff851611611ab55785611a7485611c55565b1415611aaa5760ff8416600090815260046020526040902054611aaa90600160a060020a03166116868c8563ffffffff6114c616565b600190930192611a5f565b600193505b601360ff851611611b2857611af4876106f08b8b8860ff16815181101515611ade57fe5b602090810290910101519063ffffffff6114ee16565b60ff8516600090815260046020526040902054909150611b1d90600160a060020a0316826118e7565b600190930192611aba565b50505050505050505050565b6000611b4782600363ffffffff6114c616565b600754909150611b6090600160a060020a0316826118e7565b600854611b7690600160a060020a0316826118e7565b6009546113e090600160a060020a0316826118e7565b60016000805b601360ff8416116117ff5760ff8316600090815260046020526040902054600160a060020a031615801590611bd8575060ff831660009081526005602052604090205415155b15611c335760ff8316600090815260056020526040902054600654909250611c0a906106f0868563ffffffff6114ee16565b60ff8416600090815260046020526040902054909150611c3390600160a060020a0316826118e7565b600190920191611b92565b600081831015611c4e578161151c565b5090919050565b60ff81166000908152600560205260408120546006546106d29163ffffffff61160716560046756e6374696f6e2063616e6e6f742062652063616c6c656420617420746869732074696d652e00000000000000000000000000000000000000000000000000a165627a7a72305820d0013543f611e4cdbbabd91b5c36652a078dc74154982481f0120315b7f9825500290000000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000000"
}