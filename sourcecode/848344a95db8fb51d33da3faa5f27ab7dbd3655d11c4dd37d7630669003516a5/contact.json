{
  "address": "0xced4e93198734ddaff8492d525bd258d49eb388e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "EidooToken",
  "contractName": "EidooToken",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-02\n*/\n\npragma solidity ^0.4.13;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract MintableInterface {\n  function mint(address _to, uint256 _amount) returns (bool);\n  function mintLocked(address _to, uint256 _amount) returns (bool);\n}\n\n/**\n * This is the Crowdsale contract from OpenZeppelin version 1.2.0\n * The only changes are:\n *   - the type of token field is changed from MintableToken to MintableInterface\n *   - the createTokenContract() method is removed, the token field must be initialized in the derived contracts constuctor\n **/\n\n\n\n\n\n\n/**\n * @title Crowdsale \n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end block, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet \n * as they arrive.\n */\ncontract Crowdsale {\n  using SafeMath for uint256;\n\n  // The token being sold\n  MintableInterface public token;\n\n  // start and end block where investments are allowed (both inclusive)\n  uint256 public startBlock;\n  uint256 public endBlock;\n\n  // address where funds are collected\n  address public wallet;\n\n  // how many token units a buyer gets per wei\n  uint256 public rate;\n\n  // amount of raised money in wei\n  uint256 public weiRaised;\n\n  /**\n   * event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */ \n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n\n  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {\n    require(_startBlock >= block.number);\n    require(_endBlock >= _startBlock);\n    require(_rate > 0);\n    require(_wallet != 0x0);\n\n    startBlock = _startBlock;\n    endBlock = _endBlock;\n    rate = _rate;\n    wallet = _wallet;\n  }\n\n  // fallback function can be used to buy tokens\n  function () payable {\n    buyTokens(msg.sender);\n  }\n\n  // low level token purchase function\n  function buyTokens(address beneficiary) payable {\n    require(beneficiary != 0x0);\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n\n    // calculate token amount to be created\n    uint256 tokens = weiAmount.mul(rate);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    token.mint(beneficiary, tokens);\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n    forwardFunds();\n  }\n\n  // send ether to the fund collection wallet\n  // override to create custom fund forwarding mechanisms\n  function forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n\n  // @return true if the transaction can buy tokens\n  function validPurchase() internal constant returns (bool) {\n    uint256 current = block.number;\n    bool withinPeriod = current >= startBlock && current <= endBlock;\n    bool nonZeroPurchase = msg.value != 0;\n    return withinPeriod && nonZeroPurchase;\n  }\n\n  // @return true if crowdsale event has ended\n  function hasEnded() public constant returns (bool) {\n    return block.number > endBlock;\n  }\n\n\n}\n\n/**\n * @title CappedCrowdsale\n * @dev Extension of Crowsdale with a max amount of funds raised\n */\ncontract TokenCappedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  // tokenCap should be initialized in derived contract\n  uint256 public tokenCap;\n\n  uint256 public soldTokens;\n\n  // overriding Crowdsale#hasEnded to add tokenCap logic\n  // @return true if crowdsale event has ended\n  function hasEnded() public constant returns (bool) {\n    bool capReached = soldTokens >= tokenCap;\n    return super.hasEnded() || capReached;\n  }\n\n  // overriding Crowdsale#buyTokens to add extra tokenCap logic\n  function buyTokens(address beneficiary) payable {\n    // calculate token amount to be created\n    uint256 tokens = msg.value.mul(rate);\n    uint256 newTotalSold = soldTokens.add(tokens);\n    require(newTotalSold <= tokenCap);\n    soldTokens = newTotalSold;\n    super.buyTokens(beneficiary);\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * This is the TokenTimelock contract from OpenZeppelin version 1.2.0\n * The only changes are:\n *   - all contract fields are declared as public\n *   - removed deprecated claim() method\n **/\n\n\n\n\n\n/**\n * @title TokenTimelock\n * @dev TokenTimelock is a token holder contract that will allow a \n * beneficiary to extract the tokens after a given release time\n */\ncontract TokenTimelock {\n  \n  // ERC20 basic token contract being held\n  ERC20Basic public token;\n\n  // beneficiary of tokens after they are released\n  address public beneficiary;\n\n  // timestamp when token release is enabled\n  uint public releaseTime;\n\n  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint _releaseTime) {\n    require(_releaseTime > now);\n    token = _token;\n    beneficiary = _beneficiary;\n    releaseTime = _releaseTime;\n  }\n\n  /**\n   * @notice Transfers tokens held by timelock to beneficiary.\n   */\n  function release() {\n    require(now >= releaseTime);\n\n    uint amount = token.balanceOf(this);\n    require(amount > 0);\n\n    token.transfer(beneficiary, amount);\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\ncontract EidooToken is MintableInterface, Ownable, StandardToken {\n  using SafeMath for uint256;\n\n  string public name = \"Eidoo Token\";\n  string public symbol = \"EDO\";\n  uint256 public decimals = 18;\n\n  uint256 public transferableFromBlock;\n  uint256 public lockEndBlock;\n  mapping (address => uint256) public initiallyLockedAmount;\n\n  function EidooToken(uint256 _transferableFromBlock, uint256 _lockEndBlock) {\n    require(_lockEndBlock > _transferableFromBlock);\n    transferableFromBlock = _transferableFromBlock;\n    lockEndBlock = _lockEndBlock;\n  }\n\n  modifier canTransfer(address _from, uint _value) {\n    if (block.number < lockEndBlock) {\n      require(block.number >= transferableFromBlock);\n      uint256 locked = lockedBalanceOf(_from);\n      if (locked > 0) {\n        uint256 newBalance = balanceOf(_from).sub(_value);\n        require(newBalance >= locked);\n      }\n    }\n   _;\n  }\n\n  function lockedBalanceOf(address _to) constant returns(uint256) {\n    uint256 locked = initiallyLockedAmount[_to];\n    if (block.number >= lockEndBlock ) return 0;\n    else if (block.number <= transferableFromBlock) return locked;\n\n    uint256 releaseForBlock = locked.div(lockEndBlock.sub(transferableFromBlock));\n    uint256 released = block.number.sub(transferableFromBlock).mul(releaseForBlock);\n    return locked.sub(released);\n  }\n\n  function transfer(address _to, uint _value) canTransfer(msg.sender, _value) returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint _value) canTransfer(_from, _value) returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  // --------------- Minting methods\n\n  modifier canMint() {\n    require(!mintingFinished());\n    _;\n  }\n\n  function mintingFinished() constant returns(bool) {\n    return block.number >= transferableFromBlock;\n  }\n\n  /**\n   * @dev Function to mint tokens, implements MintableInterface\n   * @param _to The address that will recieve the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  function mintLocked(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n    initiallyLockedAmount[_to] = initiallyLockedAmount[_to].add(_amount);\n    return mint(_to, _amount);\n  }\n\n  function burn(uint256 _amount) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\n    totalSupply = totalSupply.sub(_amount);\n    Transfer(msg.sender, address(0), _amount);\n    return true;\n  }\n}\n\ncontract EidooTokenSale is Ownable, TokenCappedCrowdsale {\n  using SafeMath for uint256;\n  uint256 public MAXIMUM_SUPPLY = 100000000 * 10**18;\n  uint256 [] public LOCKED = [     20000000 * 10**18,\n                                   15000000 * 10**18,\n                                    6000000 * 10**18,\n                                    6000000 * 10**18 ];\n  uint256 public POST_ICO =        21000000 * 10**18;\n  uint256 [] public LOCK_END = [\n    1570190400, // 4 October 2019 12:00:00 GMT\n    1538654400, // 4 October 2018 12:00:00 GMT\n    1522843200, // 4 April 2018 12:00:00 GMT\n    1515067200  // 4 January 2018 12:00:00 GMT\n  ];\n\n  mapping (address => bool) public claimed;\n  TokenTimelock [4] public timeLocks;\n\n  event ClaimTokens(address indexed to, uint amount);\n\n  modifier beforeStart() {\n    require(block.number < startBlock);\n    _;\n  }\n\n  function EidooTokenSale(\n    uint256 _startBlock,\n    uint256 _endBlock,\n    uint256 _rate,\n    uint _tokenStartBlock,\n    uint _tokenLockEndBlock,\n    address _wallet\n  )\n    Crowdsale(_startBlock, _endBlock, _rate, _wallet)\n  {\n    token = new EidooToken(_tokenStartBlock, _tokenLockEndBlock);\n\n    // create timelocks for tokens\n    timeLocks[0] = new TokenTimelock(EidooToken(token), _wallet, LOCK_END[0]);\n    timeLocks[1] = new TokenTimelock(EidooToken(token), _wallet, LOCK_END[1]);\n    timeLocks[2] = new TokenTimelock(EidooToken(token), _wallet, LOCK_END[2]);\n    timeLocks[3] = new TokenTimelock(EidooToken(token), _wallet, LOCK_END[3]);\n    token.mint(address(timeLocks[0]), LOCKED[0]);\n    token.mint(address(timeLocks[1]), LOCKED[1]);\n    token.mint(address(timeLocks[2]), LOCKED[2]);\n    token.mint(address(timeLocks[3]), LOCKED[3]);\n\n    token.mint(_wallet, POST_ICO);\n\n    // initialize maximum number of tokens that can be sold\n    tokenCap = MAXIMUM_SUPPLY.sub(EidooToken(token).totalSupply());\n  }\n\n  function claimTokens(address [] buyers, uint [] amounts) onlyOwner beforeStart public {\n    require(buyers.length == amounts.length);\n    uint len = buyers.length;\n    for (uint i = 0; i < len; i++) {\n      address to = buyers[i];\n      uint256 amount = amounts[i];\n      if (amount > 0 && !claimed[to]) {\n        claimed[to] = true;\n        if (to == 0x32Be343B94f860124dC4fEe278FDCBD38C102D88) {\n          // replace Poloniex Wallet address\n          to = 0x2274bebe2b47Ec99D50BB9b12005c921F28B83bB;\n        }\n        tokenCap = tokenCap.sub(amount);\n        uint256 unlockedAmount = amount.div(10).mul(3);\n        token.mint(to, unlockedAmount);\n        token.mintLocked(to, amount.sub(unlockedAmount));\n        ClaimTokens(to, amount);\n      }\n    }\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferableFromBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"initiallyLockedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_transferableFromBlock\",\"type\":\"uint256\"},{\"name\":\"_lockEndBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "606060405260408051908101604052600b81527f4569646f6f20546f6b656e0000000000000000000000000000000000000000006020820152600490805161004b9291602001906100f6565b5060408051908101604052600381527f45444f0000000000000000000000000000000000000000000000000000000000602082015260059080516100939291602001906100f6565b50601260065534156100a457600080fd5b604051604080610d8d833981016040528080519190602001805160008054600160a060020a03191633600160a060020a03161790559150508181116100e857600080fd5b600791909155600855610191565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061013757805160ff1916838001178555610164565b82800160010185558215610164579182015b82811115610164578251825591602001919060010190610149565b50610170929150610174565b5090565b61018e91905b80821115610170576000815560010161017a565b90565b610bed806101a06000396000f300606060405236156101045763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461010957806306fdde0314610130578063095ea7b3146101ba57806318160ddd146101dc57806323b872dd14610201578063313ce5671461022957806340c10f191461023c57806342966c681461025e5780635143e24614610274578063593557361461029657806370a08231146102b55780638587edbb146102d45780638da5cb5b146102e757806395d89b4114610316578063a9059cbb14610329578063c78b200c1461034b578063dd62ed3e1461035e578063f2fde38b14610383578063f559468c146103a4575b600080fd5b341561011457600080fd5b61011c6103c3565b604051901515815260200160405180910390f35b341561013b57600080fd5b6101436103cc565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561017f578082015183820152602001610167565b50505050905090810190601f1680156101ac5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101c557600080fd5b61011c600160a060020a036004351660243561046a565b34156101e757600080fd5b6101ef610510565b60405190815260200160405180910390f35b341561020c57600080fd5b61011c600160a060020a0360043581169060243516604435610516565b341561023457600080fd5b6101ef610589565b341561024757600080fd5b61011c600160a060020a036004351660243561058f565b341561026957600080fd5b61011c600435610645565b341561027f57600080fd5b61011c600160a060020a03600435166024356106d2565b34156102a157600080fd5b6101ef600160a060020a0360043516610753565b34156102c057600080fd5b6101ef600160a060020a03600435166107fe565b34156102df57600080fd5b6101ef610819565b34156102f257600080fd5b6102fa61081f565b604051600160a060020a03909116815260200160405180910390f35b341561032157600080fd5b61014361082e565b341561033457600080fd5b61011c600160a060020a0360043516602435610899565b341561035657600080fd5b6101ef6108fe565b341561036957600080fd5b6101ef600160a060020a0360043581169060243516610904565b341561038e57600080fd5b6103a2600160a060020a036004351661092f565b005b34156103af57600080fd5b6101ef600160a060020a0360043516610985565b60075443101590565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104625780601f1061043757610100808354040283529160200191610462565b820191906000526020600020905b81548152906001019060200180831161044557829003601f168201915b505050505081565b600081158061049c5750600160a060020a03338116600090815260036020908152604080832093871683529290522054155b15156104a757600080fd5b600160a060020a03338116600081815260036020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60015481565b600083826000806008544310156105725760075443101561053657600080fd5b61053f84610753565b915060008211156105725761056383610557866107fe565b9063ffffffff61099716565b90508181101561057257600080fd5b61057d8888886109a9565b98975050505050505050565b60065481565b6000805433600160a060020a039081169116146105ab57600080fd5b6105b36103c3565b156105bd57600080fd5b6001546105d0908363ffffffff610aaa16565b600155600160a060020a0383166000908152600260205260409020546105fc908363ffffffff610aaa16565b600160a060020a038416600081815260026020526040808220939093559091600080516020610ba28339815191529085905190815260200160405180910390a350600192915050565b600160a060020a03331660009081526002602052604081205461066e908363ffffffff61099716565b600160a060020a03331660009081526002602052604090205560015461069a908363ffffffff61099716565b600155600033600160a060020a0316600080516020610ba28339815191528460405190815260200160405180910390a3506001919050565b6000805433600160a060020a039081169116146106ee57600080fd5b6106f66103c3565b1561070057600080fd5b600160a060020a038316600090815260096020526040902054610729908363ffffffff610aaa16565b600160a060020a03841660009081526009602052604090205561074c838361058f565b9392505050565b600160a060020a03811660009081526009602052604081205460085482908190431061078257600093506107f6565b6007544311610793578293506107f6565b6107ba6107ad60075460085461099790919063ffffffff16565b849063ffffffff610ab916565b91506107e1826107d56007544361099790919063ffffffff16565b9063ffffffff610ad016565b90506107f3838263ffffffff61099716565b93505b505050919050565b600160a060020a031660009081526002602052604090205490565b60085481565b600054600160a060020a031681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104625780601f1061043757610100808354040283529160200191610462565b600033826000806008544310156108e9576007544310156108b957600080fd5b6108c284610753565b915060008211156108e9576108da83610557866107fe565b9050818110156108e957600080fd5b6108f38787610af4565b979650505050505050565b60075481565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60005433600160a060020a0390811691161461094a57600080fd5b600160a060020a03811615610982576000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b60096020526000908152604090205481565b6000828211156109a357fe5b50900390565b600160a060020a0380841660009081526003602090815260408083203385168452825280832054938616835260029091528120549091906109f0908463ffffffff610aaa16565b600160a060020a038086166000908152600260205260408082209390935590871681522054610a25908463ffffffff61099716565b600160a060020a038616600090815260026020526040902055610a4e818463ffffffff61099716565b600160a060020a0380871660008181526003602090815260408083203386168452909152908190209390935590861691600080516020610ba28339815191529086905190815260200160405180910390a3506001949350505050565b60008282018381101561074c57fe5b6000808284811515610ac757fe5b04949350505050565b6000828202831580610aec5750828482811515610ae957fe5b04145b151561074c57fe5b600160a060020a033316600090815260026020526040812054610b1d908363ffffffff61099716565b600160a060020a033381166000908152600260205260408082209390935590851681522054610b52908363ffffffff610aaa16565b600160a060020a038085166000818152600260205260409081902093909355913390911690600080516020610ba28339815191529085905190815260200160405180910390a3506001929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820f64a6d34b986366e39ef076d5418296700a5ac33a233e6e01aebcbcd1e7337d00029000000000000000000000000000000000000000000000000000000000042b5a700000000000000000000000000000000000000000000000000000000004e9327",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000042b5a700000000000000000000000000000000000000000000000000000000004e9327"
}