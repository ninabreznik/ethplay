{
  "address": "0xa5d1f9c89fad1168c228de0d8f425e881d56db22",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LobefyToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-22\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\n/**\n * @title Controller\n * @dev The Controller contract has an owner address, and provides basic authorization and transfer control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Controller {\n    \n    address private _owner;\n    bool private _paused;\n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event Paused(address account);\n    event Unpaused(address account);\n    \n    mapping(address => bool) private owners;\n    \n    /**\n    * @dev The Controller constructor sets the initial `owner` of the contract to the sender\n    * account, and allows transfer by default.\n    */\n    constructor() internal {\n        setOwner(msg.sender);\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(owners[msg.sender]);\n        _;\n    }\n\n    function setOwner(address addr) internal returns(bool) {\n        if (!owners[addr]) {\n          owners[addr] = true;\n          _owner = addr;\n          return true; \n        }\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */   \n    function changeOwner(address newOwner) onlyOwner public returns(bool) {\n        require (!owners[newOwner]);\n          owners[newOwner];\n          _owner = newOwner;\n          emit OwnershipTransferred(_owner, newOwner);\n          return; \n        }\n\n    /**\n    * @return the address of the owner.\n    */\n    function Owner() public view returns (address) {\n        return _owner;\n    }\n    \n    /**\n    * @return true if the contract is paused, false otherwise.\n    */\n    function paused() public view returns(bool) {\n    return _paused;\n    }\n    \n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n    require(!_paused);\n    _;\n    }\n    \n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n    require(_paused);\n    _;\n    }\n    \n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() public onlyOwner whenNotPaused {\n    _paused = true;\n    emit Paused(msg.sender);\n    }\n    \n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() public onlyOwner whenPaused {\n    _paused = false;\n    emit Unpaused(msg.sender);\n    }\n    \n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value); \n  }\n}\n\n\ncontract LobefyToken is ERC20, Controller {\n    \n    using SafeMath for uint256;\n    \n    string private _name = \"Lobefy Token\";\n    string private _symbol = \"CRWD\";\n    uint8 private _decimals = 18;\n    \n    address private team1 = 0xDA19316953D19f5f8C6361d68C6D0078c06285d3;\n    address private team2 = 0x928bdD2F7b286Ff300b054ac0897464Ffe5455b2;\n    address private team3 = 0x327d33e81988425B380B7f91C317961e3797Eedf;\n    address private team4 = 0x4d76022f6df7D007119FDffc310984b1F1E30660;\n    address private team5 = 0xA8534e7645003708B10316Dd5B6166b90649F4da;\n    address private team6 = 0xfF3005C63FD5633c3bd5D3D4f34b0491D0a564E5;\n    address private team7 = 0xb3FCDed4A67E56621F06dB5ff72bf8D93afeCb12;\n    address private reserve = 0x6Fc693855Ef50fDf378Add1bf487dB12772F4c8f;\n    \n    uint256 private team1Balance = 50 * (10 ** 6) * (10 ** 18);\n    uint256 private team2Balance = 50 * (10 ** 6) * (10 ** 18);\n    uint256 private team3Balance = 25 * (10 ** 6) * (10 ** 18);\n    uint256 private team4Balance = 15 * (10 ** 6) * (10 ** 18);\n    uint256 private team5Balance = 25 * (10 ** 6) * (10 ** 18);\n    uint256 private team6Balance = 25 * (10 ** 6) * (10 ** 18);\n    uint256 private team7Balance = 25 * (10 ** 6) * (10 ** 18);\n    uint256 private reserveBalance = 35 * (10 ** 6) * (10 ** 18);\n    \n    \n    constructor() public {\n        mint(team1,team1Balance);\n        mint(team2,team2Balance);\n        mint(team3,team3Balance);\n        mint(team4,team4Balance);\n        mint(team5,team5Balance);\n        mint(team6,team6Balance);\n        mint(team7,team7Balance);\n        mint(reserve,reserveBalance);\n    }\n\n    /**\n    * @return the name of the token.\n    */\n    function name() public view returns(string) {\n        return _name;\n    }\n\n    /**\n    * @return the symbol of the token.\n    */\n    function symbol() public view returns(string) {\n        return _symbol;\n    }\n\n    /**\n    * @return the number of decimals of the token.\n    */\n    function decimals() public view returns(uint8) {\n        return _decimals;\n    }\n    \n    /**\n    * @dev Function to mint tokens\n    * @param to The address that will receive the minted tokens.\n    * @param value The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mint(address to, uint256 value) public onlyOwner returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n\n    /**\n    * @dev ERC20 modified with pausable transfers.\n    **/\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n    \n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseAllowance( address spender, uint addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    function decreaseAllowance( address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n    \n    /**\n    * @dev Burns a specific amount of tokens.\n    * @param value The amount of token to be burned.\n    */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n}",
  "bytecode": "60c0604052600c60808190527f4c6f6265667920546f6b656e000000000000000000000000000000000000000060a0908152620000409160059190620004bd565b506040805180820190915260048082527f435257440000000000000000000000000000000000000000000000000000000060209092019182526200008791600691620004bd565b506007805474da19316953d19f5f8c6361d68c6d0078c06285d30061010060a860020a031960ff199092166012908117929092161790915560088054600160a060020a031990811673928bdd2f7b286ff300b054ac0897464ffe5455b21790915560098054821673327d33e81988425b380b7f91c317961e3797eedf179055600a80548216734d76022f6df7d007119fdffc310984b1f1e30660179055600b8054821673a8534e7645003708b10316dd5b6166b90649f4da179055600c8054821673ff3005c63fd5633c3bd5d3d4f34b0491d0a564e5179055600d8054821673b3fcded4a67e56621f06db5ff72bf8d93afecb12179055600e8054909116736fc693855ef50fdf378add1bf487db12772f4c8f1790556a295be96e64066972000000600f8190556010556a14adf4b7320334b900000060118190556a0c685fa11e01ec6f000000909155601381905560148190556015556a1cf389cd46047d03000000601655348015620001fa57600080fd5b506200020f3364010000000062000343810204565b50600754600f5462000239916101009004600160a060020a031690640100000000620003a7810204565b506008546010546200025e91600160a060020a031690640100000000620003a7810204565b506009546011546200028391600160a060020a031690640100000000620003a7810204565b50600a54601254620002a891600160a060020a031690640100000000620003a7810204565b50600b54601354620002cd91600160a060020a031690640100000000620003a7810204565b50600c54601454620002f291600160a060020a031690640100000000620003a7810204565b50600d546015546200031791600160a060020a031690640100000000620003a7810204565b50600e546016546200033c91600160a060020a031690640100000000620003a7810204565b5062000562565b600160a060020a03811660009081526004602052604081205460ff161515620003a25750600160a060020a0381166000818152600460205260409020805460ff1916600190811790915560038054600160a060020a0319169092179091555b919050565b3360009081526004602052604081205460ff161515620003c657600080fd5b620003db8383640100000000620003e4810204565b50600192915050565b600160a060020a0382161515620003fa57600080fd5b60025462000417908264010000000062000ca8620004a382021704565b600255600160a060020a0382166000908152602081905260409020546200044d908264010000000062000ca8620004a382021704565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600082820183811015620004b657600080fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200050057805160ff191683800117855562000530565b8280016001018555821562000530579182015b828111156200053057825182559160200191906001019062000513565b506200053e92915062000542565b5090565b6200055f91905b808211156200053e576000815560010162000549565b90565b610ce680620005726000396000f3006080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610100578063095ea7b31461018a57806318160ddd146101c257806323b872dd146101e9578063313ce56714610213578063395093511461023e5780633f4ba83a1461026257806340c10f191461027957806342966c681461029d5780635c975abb146102b557806370a08231146102ca5780638456cb59146102eb57806395d89b4114610300578063a457c2d714610315578063a6f9dae114610339578063a9059cbb1461035a578063b4a99a4e1461037e578063dd62ed3e146103af575b600080fd5b34801561010c57600080fd5b506101156103d6565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014f578181015183820152602001610137565b50505050905090810190601f16801561017c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019657600080fd5b506101ae600160a060020a036004351660243561046c565b604080519115158252519081900360200190f35b3480156101ce57600080fd5b506101d7610497565b60408051918252519081900360200190f35b3480156101f557600080fd5b506101ae600160a060020a036004358116906024351660443561049d565b34801561021f57600080fd5b506102286104ca565b6040805160ff9092168252519081900360200190f35b34801561024a57600080fd5b506101ae600160a060020a03600435166024356104d3565b34801561026e57600080fd5b506102776104f7565b005b34801561028557600080fd5b506101ae600160a060020a0360043516602435610580565b3480156102a957600080fd5b506102776004356105b1565b3480156102c157600080fd5b506101ae6105be565b3480156102d657600080fd5b506101d7600160a060020a03600435166105ce565b3480156102f757600080fd5b506102776105e9565b34801561030c57600080fd5b50610115610677565b34801561032157600080fd5b506101ae600160a060020a03600435166024356106d8565b34801561034557600080fd5b506101ae600160a060020a03600435166106fc565b34801561036657600080fd5b506101ae600160a060020a03600435166024356107a6565b34801561038a57600080fd5b506103936107ca565b60408051600160a060020a039092168252519081900360200190f35b3480156103bb57600080fd5b506101d7600160a060020a03600435811690602435166107d9565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104625780601f1061043757610100808354040283529160200191610462565b820191906000526020600020905b81548152906001019060200180831161044557829003601f168201915b5050505050905090565b60035460009060a060020a900460ff161561048657600080fd5b6104908383610804565b9392505050565b60025490565b60035460009060a060020a900460ff16156104b757600080fd5b6104c2848484610882565b949350505050565b60075460ff1690565b60035460009060a060020a900460ff16156104ed57600080fd5b610490838361091f565b3360009081526004602052604090205460ff16151561051557600080fd5b60035460a060020a900460ff16151561052d57600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b3360009081526004602052604081205460ff16151561059e57600080fd5b6105a883836109cf565b50600192915050565b6105bb3382610a79565b50565b60035460a060020a900460ff1690565b600160a060020a031660009081526020819052604090205490565b3360009081526004602052604090205460ff16151561060757600080fd5b60035460a060020a900460ff161561061e57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104625780601f1061043757610100808354040283529160200191610462565b60035460009060a060020a900460ff16156106f257600080fd5b6104908383610b47565b3360009081526004602052604081205460ff16151561071a57600080fd5b600160a060020a03821660009081526004602052604090205460ff161561074057600080fd5b600160a060020a03808316600081815260046020526003805473ffffffffffffffffffffffffffffffffffffffff1916831790819055604051929316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a3919050565b60035460009060a060020a900460ff16156107c057600080fd5b6104908383610b92565b600354600160a060020a031690565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6000600160a060020a038316151561081b57600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600160a060020a03831660009081526001602090815260408083203384529091528120548211156108b257600080fd5b600160a060020a03841660009081526001602090815260408083203384529091529020546108e6908363ffffffff610b9f16565b600160a060020a0385166000908152600160209081526040808320338452909152902055610915848484610bb6565b5060019392505050565b6000600160a060020a038316151561093657600080fd5b336000908152600160209081526040808320600160a060020a038716845290915290205461096a908363ffffffff610ca816565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03821615156109e457600080fd5b6002546109f7908263ffffffff610ca816565b600255600160a060020a038216600090815260208190526040902054610a23908263ffffffff610ca816565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a0382161515610a8e57600080fd5b600160a060020a038216600090815260208190526040902054811115610ab357600080fd5b600254610ac6908263ffffffff610b9f16565b600255600160a060020a038216600090815260208190526040902054610af2908263ffffffff610b9f16565b600160a060020a038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b6000600160a060020a0383161515610b5e57600080fd5b336000908152600160209081526040808320600160a060020a038716845290915290205461096a908363ffffffff610b9f16565b60006105a8338484610bb6565b60008083831115610baf57600080fd5b5050900390565b600160a060020a038316600090815260208190526040902054811115610bdb57600080fd5b600160a060020a0382161515610bf057600080fd5b600160a060020a038316600090815260208190526040902054610c19908263ffffffff610b9f16565b600160a060020a038085166000908152602081905260408082209390935590841681522054610c4e908263ffffffff610ca816565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282018381101561049057600080fd00a165627a7a723058208d0b444f8768a5184dc9e42faa1068d55e0d932252b849f79f4cc36f176a25420029"
}