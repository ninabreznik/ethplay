{
  "address": "0xa809d363a66c576a2a814cdbfefc107c600a55f0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "HyperLoot Token",
  "contractName": "HyperLootToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-07\n*/\n\npragma solidity 0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n    address public pendingOwner;\n    address public manager;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Modifier throws if called by any account other than the pendingOwner.\n     */\n    modifier onlyPendingOwner() {\n        require(msg.sender == pendingOwner);\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Allows the current owner to set the pendingOwner address.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        pendingOwner = newOwner;\n    }\n\n    /**\n     * @dev Allows the pendingOwner address to finalize the transfer.\n     */\n    function claimOwnership() public onlyPendingOwner {\n        emit OwnershipTransferred(owner, pendingOwner);\n        owner = pendingOwner;\n        pendingOwner = address(0);\n    }\n\n    /**\n     * @dev Sets the manager address.\n     * @param _manager The manager address.\n     */\n    function setManager(address _manager) public onlyOwner {\n        require(_manager != address(0));\n        manager = _manager;\n    }\n\n}\n\n\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    function allowance(address who, address spender) public view returns (uint256);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed who, address indexed spender, uint256 value);\n}\n\n\ncontract HyperLootToken is ERC20, Ownable {\n    using SafeMath for uint256;\n\n    uint256 internal totalSupply_;\n    uint8 public decimals = 18;\n    uint256 public MAX_TOTAL_SUPPLY = uint256(1000000000) * uint256(10) ** decimals;\n    mapping(address => uint256) internal balances;\n    mapping(address => mapping (address => uint256)) internal allowed;\n    string public name = \"HyperLoot\";\n    string public symbol = \"HLT\";\n\n    event Mint(address indexed _to, uint _amount);\n\n    modifier canMint() {\n        require(msg.sender == manager);\n        require(totalSupply() <= MAX_TOTAL_SUPPLY);\n        _;\n    }\n\n    /**\n     * @dev Reclaim all ERC20Basic compatible tokens\n     * @param token ERC20B The address of the token contract\n     */\n    function reclaimToken(ERC20 token) external onlyOwner {\n        uint256 balance = token.balanceOf(this);\n        token.transfer(owner, balance);\n    }\n\n    /**\n    * @dev total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev max total number of tokens\n    */\n    function getMaxTotalSupply() public view returns (uint256) {\n        return MAX_TOTAL_SUPPLY;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _who The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _who) public view returns (uint256 balance) {\n        return balances[_who];\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _who address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _who, address _spender) public view returns (uint256) {\n        return allowed[_who][_spender];\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount) public canMint returns (bool) {\n        require(_amount > 0);\n        require(_to != address(0));\n        totalSupply_ = totalSupply_.add(_amount);\n        require(totalSupply_ <= MAX_TOTAL_SUPPLY);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n}",
  "bytecode": "60048054601260ff19909116179081905560ff16600a0a633b9aca000260055560c0604052600960808190527f48797065724c6f6f74000000000000000000000000000000000000000000000060a090815261005e91600891906100bb565b506040805180820190915260038082527f484c54000000000000000000000000000000000000000000000000000000000060209092019182526100a3916009916100bb565b5060008054600160a060020a03191633179055610156565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100fc57805160ff1916838001178555610129565b82800160010185558215610129579182015b8281111561012957825182559160200191906001019061010e565b50610135929150610139565b5090565b61015391905b80821115610135576000815560010161013f565b90565b610e0d806101656000396000f30060806040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610121578063095ea7b3146101ab57806317ffc320146101e357806318160ddd1461020657806323b872dd1461022d578063313ce5671461025757806333039d3d1461028257806340c10f1914610297578063481c6a75146102bb5780634e71e0c8146102ec5780635db30bb114610301578063661884631461031657806370a082311461033a5780638da5cb5b1461035b57806395d89b4114610370578063a9059cbb14610385578063d0ebdbe7146103a9578063d73dd623146103ca578063dd62ed3e146103ee578063e30c397814610415578063f2fde38b1461042a575b600080fd5b34801561012d57600080fd5b5061013661044b565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610170578181015183820152602001610158565b50505050905090810190601f16801561019d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b757600080fd5b506101cf600160a060020a03600435166024356104d9565b604080519115158252519081900360200190f35b3480156101ef57600080fd5b50610204600160a060020a036004351661053f565b005b34801561021257600080fd5b5061021b610688565b60408051918252519081900360200190f35b34801561023957600080fd5b506101cf600160a060020a036004358116906024351660443561068e565b34801561026357600080fd5b5061026c610807565b6040805160ff9092168252519081900360200190f35b34801561028e57600080fd5b5061021b610810565b3480156102a357600080fd5b506101cf600160a060020a0360043516602435610816565b3480156102c757600080fd5b506102d0610953565b60408051600160a060020a039092168252519081900360200190f35b3480156102f857600080fd5b50610204610962565b34801561030d57600080fd5b5061021b6109ea565b34801561032257600080fd5b506101cf600160a060020a03600435166024356109f0565b34801561034657600080fd5b5061021b600160a060020a0360043516610ae0565b34801561036757600080fd5b506102d0610afb565b34801561037c57600080fd5b50610136610b0a565b34801561039157600080fd5b506101cf600160a060020a0360043516602435610b65565b3480156103b557600080fd5b50610204600160a060020a0360043516610c48565b3480156103d657600080fd5b506101cf600160a060020a0360043516602435610ca3565b3480156103fa57600080fd5b5061021b600160a060020a0360043581169060243516610d3c565b34801561042157600080fd5b506102d0610d67565b34801561043657600080fd5b50610204600160a060020a0360043516610d76565b6008805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104d15780601f106104a6576101008083540402835291602001916104d1565b820191906000526020600020905b8154815290600101906020018083116104b457829003601f168201915b505050505081565b336000818152600760209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60008054600160a060020a0316331461055757600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038416916370a082319160248083019260209291908290030181600087803b1580156105b857600080fd5b505af11580156105cc573d6000803e3d6000fd5b505050506040513d60208110156105e257600080fd5b505160008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810185905290519394509085169263a9059cbb92604480840193602093929083900390910190829087803b15801561065857600080fd5b505af115801561066c573d6000803e3d6000fd5b505050506040513d602081101561068257600080fd5b50505050565b60035490565b6000600160a060020a03831615156106a557600080fd5b600160a060020a0384166000908152600660205260409020548211156106ca57600080fd5b600160a060020a03841660009081526007602090815260408083203384529091529020548211156106fa57600080fd5b600160a060020a038416600090815260066020526040902054610723908363ffffffff610dbc16565b600160a060020a038086166000908152600660205260408082209390935590851681522054610758908363ffffffff610dce16565b600160a060020a03808516600090815260066020908152604080832094909455918716815260078252828120338252909152205461079c908363ffffffff610dbc16565b600160a060020a03808616600081815260076020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60045460ff1681565b60055481565b600254600090600160a060020a0316331461083057600080fd5b60055461083b610688565b111561084657600080fd5b6000821161085357600080fd5b600160a060020a038316151561086857600080fd5b60035461087b908363ffffffff610dce16565b6003819055600554101561088e57600080fd5b600160a060020a0383166000908152600660205260409020546108b7908363ffffffff610dce16565b600160a060020a038416600081815260066020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b600254600160a060020a031681565b600154600160a060020a0316331461097957600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b60055490565b336000908152600760209081526040808320600160a060020a038616845290915281205480831115610a4557336000908152600760209081526040808320600160a060020a0388168452909152812055610a7a565b610a55818463ffffffff610dbc16565b336000908152600760209081526040808320600160a060020a03891684529091529020555b336000818152600760209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526006602052604090205490565b600054600160a060020a031681565b6009805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104d15780601f106104a6576101008083540402835291602001916104d1565b6000600160a060020a0383161515610b7c57600080fd5b33600090815260066020526040902054821115610b9857600080fd5b33600090815260066020526040902054610bb8908363ffffffff610dbc16565b3360009081526006602052604080822092909255600160a060020a03851681522054610bea908363ffffffff610dce16565b600160a060020a0384166000818152600660209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600054600160a060020a03163314610c5f57600080fd5b600160a060020a0381161515610c7457600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b336000908152600760209081526040808320600160a060020a0386168452909152812054610cd7908363ffffffff610dce16565b336000818152600760209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b600154600160a060020a031681565b600054600160a060020a03163314610d8d57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610dc857fe5b50900390565b81810182811015610ddb57fe5b929150505600a165627a7a72305820358ad9e2b43af4d94114e7c41af84ca0d08853ad10857e4e524750b819de8d4d0029"
}