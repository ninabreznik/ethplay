{
  "address": "0x6aedbf8dff31437220df351950ba2a3362168d1b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Dragonglass Token",
  "contractName": "DGS",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-16\n*/\n\npragma solidity ^0.4.13;\n\ncontract ERC20Interface {\n\n    // Get total token supply\n    function totalSupply()\n    public constant returns (uint256 _totalSupply);\n\n    // Get specific account balance\n    function balanceOf(address _owner)\n    public constant returns (uint256 balance);\n\n    // Send _value tokens to the address _to\n    function transfer(address _to, uint256 _value)\n    public returns (bool success);\n\n    // Send _value of tokens from address one address to another (withdraw)\n    function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool success);\n\n    // Allow _spender to withdraw from sender account _value times\n    function approve(address _spender, uint256 _value)\n    public returns (bool success);\n\n    // Get the amount which _spender is allowed to withdraw from _owner\n    function allowance(address _owner, address _spender)\n    public constant returns (uint256 remaining);\n\n    // Triggered when tokens are transferred.\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    // Triggered whenever approve(...) is called.\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract DGS is ERC20Interface {\n\n    string public constant NAME = \"Dragonglass\";\n    string public constant SYMBOL = \"DGS\";\n    uint public constant DECIMALS = 8;\n\n    uint256 supply = 0;\n    mapping(address => uint256) balances;\n    mapping(address => mapping (address => uint256)) allowed;\n\n    mapping (address => uint) allowedToMine;\n\n    address public allocationAddressICO;\n\n    uint256 public mineableSupply = 0;\n\n    address founder;\n\n\n    uint public constant DECIMAL_INDEX = 10**DECIMALS;\n\n    // Miner constants\n    //Represents constant 0,25892541\n    uint private constant MINING_PERCENTAGE = 25892541;\n    uint private constant STAKE_PERCENTAGE = 5 * DECIMAL_INDEX / 100;\n\n    function DGS (uint256 _initial,\n        address _founder) public {\n            supply = _initial;\n            mineableSupply = supply * 10;\n            founder = _founder;\n    }\n\n    modifier onlyFounder {\n        require(msg.sender == founder);\n        _;\n    }\n\n    function totalSupply()\n    public constant returns (uint256 _totalSupply) {\n        _totalSupply = supply;\n    }\n\n    function balanceOf(address _owner)\n    public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function getAllowedToMine(address _owner)\n    public constant returns (uint _allowedToMine) {\n        return allowedToMine[_owner];\n    }\n\n    // Get available for mining supply\n    function getMineableSupply()\n    public constant returns (uint256 _mineableSupply){\n        _mineableSupply = mineableSupply;\n    }\n\n    function transfer(address _to, uint256 _value)\n    public returns (bool success) {\n        require(_to != address(0));\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        mine(msg.sender, _to, _value);\n        balances[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool success) {\n        uint256 allowance = allowed[_from][msg.sender];\n        require(_to != address(0) && balances[_from] >= _value\n            && allowance >= _value);\n            balances[_from] -= _value;\n            mine(_from, _to, _value);\n            balances[_to] += _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n    }\n\n    function approve(address _spender, uint256 _value)\n    public returns (bool success){\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender)\n    public constant returns (uint256 remaining){\n        return  allowed[_owner][_spender];\n    }\n\n    function setIcoAddress(address _icoAddress) public onlyFounder() {\n        require(allocationAddressICO == address(0));\n        allocationAddressICO = _icoAddress;\n        balances[allocationAddressICO] = totalSupply();\n    }\n\n    function calculateMinedCoinsForTX(uint stake, uint _value)\n    public pure returns (uint _minedAmount) {\n\n        var _max = SafeMath.max256(_value, stake);\n        var _min = SafeMath.min256(_value, stake);\n\n        uint factor = _min * DECIMAL_INDEX /_max;\n\n        if(_value > stake)\n            factor += factor * STAKE_PERCENTAGE / DECIMAL_INDEX;\n        if(factor > DECIMAL_INDEX)\n            factor = DECIMAL_INDEX;\n\n        var totalStake = stake + _value;\n        var factorInCoins = totalStake * factor / DECIMAL_INDEX;\n\n        _minedAmount = factorInCoins *  MINING_PERCENTAGE / DECIMAL_INDEX;\n    }\n\n    function mine\n    (address _sender, address _receiver, uint _transactionValue) private {\n        if(_sender == allocationAddressICO) {\n            // Allow to mine x10\n            allowedToMine[_receiver] += _transactionValue * 10;\n        } else {\n            doMining(_sender, _transactionValue);\n        }\n    }\n\n    function doMining(address _miner, uint _transactionValue)\n    private {\n        uint _minedAmount = calculateMinedCoinsForTX(balanceOf(_miner), _transactionValue);\n        if(allowedToMine[_miner] <= _minedAmount) {\n            _minedAmount = allowedToMine[_miner];\n            allowedToMine[_miner] = 0;\n        } else {\n            allowedToMine[_miner] -= _minedAmount;\n        }\n        balances[_miner] += _minedAmount;\n        supply += _minedAmount;\n        mineableSupply -= _minedAmount;\n        Mined(_miner, _minedAmount);\n    }\n\n    event Mined(address indexed _miner, uint256 _minedAmount);\n}\n\nlibrary SafeMath {\n  function mul(uint a, uint b) internal pure returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint a, uint b) internal pure returns (uint) {\n    uint c = a / b;\n    return c;\n  }\n\n  function sub(uint a, uint b) internal pure returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal pure returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"stake\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"calculateMinedCoinsForTX\",\"outputs\":[{\"name\":\"_minedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMAL_INDEX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocationAddressICO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMineableSupply\",\"outputs\":[{\"name\":\"_mineableSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoAddress\",\"type\":\"address\"}],\"name\":\"setIcoAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mineableSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getAllowedToMine\",\"outputs\":[{\"name\":\"_allowedToMine\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initial\",\"type\":\"uint256\"},{\"name\":\"_founder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_miner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_minedAmount\",\"type\":\"uint256\"}],\"name\":\"Mined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052600080556000600555341561001857600080fd5b6040516040806112c68339810160405280805190602001909190805190602001909190505081600081905550600a6000540260058190555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050611224806100a26000396000f3006060604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063095ea7b3146100eb57806318160ddd1461014557806323b872dd1461016e5780632e0f2625146101e75780634246ad24146102105780636ce27c7b1461025057806370a08231146102795780638df41c32146102c65780638f094efb1461031b578063a3f4df7e14610344578063a9059cbb146103d2578063bd792db31461042c578063d6fb167814610465578063d9e55f7a1461048e578063dd62ed3e146104db578063f76f8d7814610547575b600080fd5b34156100f657600080fd5b61012b600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506105d5565b604051808215151515815260200191505060405180910390f35b341561015057600080fd5b6101586106c7565b6040518082815260200191505060405180910390f35b341561017957600080fd5b6101cd600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106d0565b604051808215151515815260200191505060405180910390f35b34156101f257600080fd5b6101fa610985565b6040518082815260200191505060405180910390f35b341561021b57600080fd5b61023a600480803590602001909190803590602001909190505061098a565b6040518082815260200191505060405180910390f35b341561025b57600080fd5b610263610a41565b6040518082815260200191505060405180910390f35b341561028457600080fd5b6102b0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a49565b6040518082815260200191505060405180910390f35b34156102d157600080fd5b6102d9610a92565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561032657600080fd5b61032e610ab8565b6040518082815260200191505060405180910390f35b341561034f57600080fd5b610357610ac2565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561039757808201518184015260208101905061037c565b50505050905090810190601f1680156103c45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103dd57600080fd5b610412600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610afb565b604051808215151515815260200191505060405180910390f35b341561043757600080fd5b610463600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c9a565b005b341561047057600080fd5b610478610e04565b6040518082815260200191505060405180910390f35b341561049957600080fd5b6104c5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e0a565b6040518082815260200191505060405180910390f35b34156104e657600080fd5b610531600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e53565b6040518082815260200191505060405180910390f35b341561055257600080fd5b61055a610eda565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561059a57808201518184015260208101905061057f565b50505050905090810190601f1680156105c75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008054905090565b600080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141580156107ce575082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156107da5750828110155b15156107e557600080fd5b82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555061083d858585610f13565b82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555082600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b600881565b60008060008060008061099d8789610fce565b94506109a98789610fe8565b9350846008600a0a85028115156109bc57fe5b049250878711156109f1576008600a0a60646008600a0a6005028115156109df57fe5b0484028115156109eb57fe5b04830192505b6008600a0a831115610a05576008600a0a92505b86880191506008600a0a838302811515610a1b57fe5b0490506008600a0a63018b16bd8202811515610a3357fe5b049550505050505092915050565b6008600a0a81565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600554905090565b6040805190810160405280600b81526020017f447261676f6e676c61737300000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610b3857600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610b8657600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610bde338484610f13565b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610cf657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610d5357600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610d9c6106c7565b60016000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60055481565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6040805190810160405280600381526020017f444753000000000000000000000000000000000000000000000000000000000081525081565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610fbe57600a8102600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550610fc9565b610fc88382611001565b5b505050565b600081831015610fde5781610fe0565b825b905092915050565b6000818310610ff75781610ff9565b825b905092915050565b600061101561100f84610a49565b8361098a565b905080600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115156110eb57600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611139565b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806000808282540192505081905550806005600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff167f3ad10ba9777a3bc21180a465e5459861d07cbdb271af9a0f10c993b365b760f8826040518082815260200191505060405180910390a25050505600a165627a7a72305820daf49401474397eb5b72fbea8ed837f601ca3a2760a979313aca0fde12af94700029000000000000000000000000000000000000000000000000018abef783b6e700000000000000000000000000017347540ac86ef7bf81e1ff81989f9184090098",
  "constructorArguments": "000000000000000000000000000000000000000000000000018abef783b6e700000000000000000000000000017347540ac86ef7bf81e1ff81989f9184090098"
}