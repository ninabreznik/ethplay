{
  "address": "0xc26925d537af8b3f315eeaf27113e84875b6f1b9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "POVCoin Token",
  "contractName": "SaleToken",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-17\n*/\n\npragma solidity ^0.4.13;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    require(newOwner != address(0));      \n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    require(_to != address(0));\n\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n  \n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until \n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue) \n    returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) \n    returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * Токен продаж\n *\n * ERC-20 токен\n *\n */\n\ncontract SaleToken is StandardToken, Ownable {\n    using SafeMath for uint;\n\n    /* Описание см. в конструкторе */\n    string public name;\n\n    string public symbol;\n\n    uint public decimals;\n\n    address public mintAgent;\n\n    /** Событие обновления токена (имя и символ) */\n    event UpdatedTokenInformation(string newName, string newSymbol);\n\n    /**\n     * Конструктор\n     *\n     * @param _name - имя токена\n     * @param _symbol - символ токена\n     * @param _decimals - кол-во знаков после запятой\n     */\n    function SaleToken(string _name, string _symbol, uint _decimals) {\n        name = _name;\n        symbol = _symbol;\n\n        decimals = _decimals;\n    }\n\n    /**\n     * Может вызвать только агент\n     */\n    function mint(uint amount) public onlyMintAgent {\n        balances[mintAgent] = balances[mintAgent].add(amount);\n\n        totalSupply = balances[mintAgent];\n    }\n\n    /**\n     * Владелец может обновить инфу по токену\n     */\n    function setTokenInformation(string _name, string _symbol) external onlyOwner {\n        name = _name;\n        symbol = _symbol;\n\n        // Вызываем событие\n        UpdatedTokenInformation(name, symbol);\n    }\n\n    /**\n     * Может вызвать только владелец\n     * Установить можно только 1 раз\n     */\n    function setMintAgent(address mintAgentAddress) external emptyMintAgent onlyOwner {\n        mintAgent = mintAgentAddress;\n    }\n\n    /**\n     * Модификаторы\n     */\n    modifier onlyMintAgent() {\n        require(msg.sender == mintAgent);\n        _;\n    }\n\n    modifier emptyMintAgent() {\n        require(mintAgent == 0);\n        _;\n    }\n\n}",
  "bytecode": "6060604052341561000f57600080fd5b604051610e44380380610e448339810160405280805182019190602001805182019190602001805160038054600160a060020a03191633600160a060020a0316179055915060049050838051610069929160200190610089565b50600582805161007d929160200190610089565b50600655506101249050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100ca57805160ff19168380011785556100f7565b828001600101855582156100f7579182015b828111156100f75782518255916020019190600101906100dc565b50610103929150610107565b5090565b61012191905b80821115610103576000815560010161010d565b90565b610d11806101336000396000f300606060405236156100ee5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f3578063095ea7b31461017d5780630d3737b0146101b357806318160ddd146101e257806323b872dd14610207578063313ce5671461022f5780634eee966f14610242578063661884631461026e57806370a08231146102905780638da5cb5b146102af57806395d89b41146102c2578063a0712d68146102d5578063a9059cbb146102eb578063ab8025091461030d578063d73dd6231461032c578063dd62ed3e1461034e578063f2fde38b14610373575b600080fd5b34156100fe57600080fd5b610106610392565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561014257808201518382015260200161012a565b50505050905090810190601f16801561016f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018857600080fd5b61019f600160a060020a0360043516602435610430565b604051901515815260200160405180910390f35b34156101be57600080fd5b6101c66104d6565b604051600160a060020a03909116815260200160405180910390f35b34156101ed57600080fd5b6101f56104e5565b60405190815260200160405180910390f35b341561021257600080fd5b61019f600160a060020a03600435811690602435166044356104eb565b341561023a57600080fd5b6101f5610615565b341561024d57600080fd5b61026c602460048035828101929082013591813591820191013561061b565b005b341561027957600080fd5b61019f600160a060020a036004351660243561077d565b341561029b57600080fd5b6101f5600160a060020a0360043516610877565b34156102ba57600080fd5b6101c6610892565b34156102cd57600080fd5b6101066108a1565b34156102e057600080fd5b61026c60043561090c565b34156102f657600080fd5b61019f600160a060020a0360043516602435610982565b341561031857600080fd5b61026c600160a060020a0360043516610a58565b341561033757600080fd5b61019f600160a060020a0360043516602435610ab8565b341561035957600080fd5b6101f5600160a060020a0360043581169060243516610b5c565b341561037e57600080fd5b61026c600160a060020a0360043516610b87565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104285780601f106103fd57610100808354040283529160200191610428565b820191906000526020600020905b81548152906001019060200180831161040b57829003601f168201915b505050505081565b60008115806104625750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561046d57600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b600754600160a060020a031681565b60005481565b600080600160a060020a038416151561050357600080fd5b50600160a060020a03808516600081815260026020908152604080832033909516835293815283822054928252600190529190912054610549908463ffffffff610c2216565b600160a060020a03808716600090815260016020526040808220939093559086168152205461057e908463ffffffff610c3416565b600160a060020a0385166000908152600160205260409020556105a7818463ffffffff610c2216565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b60065481565b60035433600160a060020a0390811691161461063657600080fd5b61064260048585610c4a565b5061064f60058383610c4a565b507fd131ab1e6f279deea74e13a18477e13e2107deb6dc8ae955648948be5841fb46600460056040516040808252835460026000196101006001841615020190911604908201819052819060208201906060830190869080156106f35780601f106106c8576101008083540402835291602001916106f3565b820191906000526020600020905b8154815290600101906020018083116106d657829003601f168201915b50508381038252845460026000196101006001841615020190911604808252602090910190859080156107675780601f1061073c57610100808354040283529160200191610767565b820191906000526020600020905b81548152906001019060200180831161074a57829003601f168201915b505094505050505060405180910390a150505050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156107da57600160a060020a033381166000908152600260209081526040808320938816835292905290812055610811565b6107ea818463ffffffff610c2216565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b600354600160a060020a031681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104285780601f106103fd57610100808354040283529160200191610428565b60075433600160a060020a0390811691161461092757600080fd5b600754600160a060020a0316600090815260016020526040902054610952908263ffffffff610c3416565b60078054600160a060020a0390811660009081526001602052604080822094909455915416815290812054905550565b6000600160a060020a038316151561099957600080fd5b600160a060020a0333166000908152600160205260409020546109c2908363ffffffff610c2216565b600160a060020a0333811660009081526001602052604080822093909355908516815220546109f7908363ffffffff610c3416565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600754600160a060020a031615610a6e57600080fd5b60035433600160a060020a03908116911614610a8957600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610af0908363ffffffff610c3416565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610ba257600080fd5b600160a060020a0381161515610bb757600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610c2e57fe5b50900390565b600082820183811015610c4357fe5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610c8b5782800160ff19823516178555610cb8565b82800160010185558215610cb8579182015b82811115610cb8578235825591602001919060010190610c9d565b50610cc4929150610cc8565b5090565b610ce291905b80821115610cc45760008155600101610cce565b905600a165627a7a72305820116c467c7f4fb439bcd75d69370bd161ef9b9761f3a40f3d00c9e926e7f975140029000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000d504f56436f696e20546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004504f565200000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000d504f56436f696e20546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004504f565200000000000000000000000000000000000000000000000000000000"
}