{
  "address": "0x4cadb4bad0e2a49cc5d6ce26d8628c8f451da346",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MasterMultiSig",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-29\n*/\n\npragma solidity ^0.5.4;\n\ncontract MasterMultiSig {\n    \n    \n    /*\n     *  Events\n     */\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Revocation(address indexed sender, uint indexed transactionId);\n    event Submission(uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event Deposit(address indexed sender, uint value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint required);\n    \n        /*\n     *  Storage\n     */\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] public owners;\n    uint public required;\n    uint public transactionCount;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n    \n    /**\n     * Constants\n     */ \n     \n    uint constant public MAX_OWNER_COUNT = 50;\n    \n    address public staticCallContractAddress = 0xf14c1236921A912bcD9cFfCF82a4fDDB53F95732;\n\n      /**\n   * @dev There are 5 user control wallets, all HSMd \n   * @dev As the system scales, a new master control contract can be deployed, if more signing keys are needed\n   * @dev But because they only sign they are not the limiting factor on scaling\n   */\n   address[] public user_control_accounts =  [\n       0xf78D37d2Db140248d80B379DB133Cae18E1d9b2a,\n       0xf953019b530e6E70449f47064adfd57BfF133292,\n       0xEe10F820E0fBa6Ade8bFf3d6C4774E57e1b64963,\n       0xE9e9dcDb86aD336E54DB1C11E194928B1475af19,\n       0x01341E4DB2856691Ce718840CD8Eca21Fb1e6ad4];\n    \n\n  /**\n   * @dev Modifiers, mostly from the Gnosis Multisig\n   */\n    modifier onlyWallet() {\n        require(msg.sender == address(this));\n        _;\n    }\n    \n        modifier ownerDoesNotExist(address owner) {\n        require(!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require(isOwner[owner]);\n        _;\n    }\n\n    modifier transactionExists(uint transactionId) {\n        require(transactions[transactionId].destination != address(0));\n        _;\n    }\n\n    modifier confirmed(uint transactionId, address owner) {\n        require(confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(uint transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(uint transactionId) {\n        require(!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require(_address != address(0));\n        _;\n    }\n\n    modifier validRequirement(uint ownerCount, uint _required) {\n        require(ownerCount <= MAX_OWNER_COUNT\n            && _required <= ownerCount\n            && _required != 0\n            && ownerCount != 0);\n        _;\n    }\n  \n   \n   /** \n    * @dev A mapping of all sender keys\n    */ \n    \n   mapping(address => bool) validSenderKeys;\n   \n   /**\n    * @dev Static view functions to retrieve information \n    */\n    \n    /** \n     * @dev used to retrieve a control account by index \n     */ \n     function returnUserControlAddress(uint account_id) public view returns (address) {\n      return(user_control_accounts[account_id]);\n    }\n     \n    /**\n    * @dev function to see if sending key is valid\n    */\n    \n    function returnIsValidSendingKey(address sending_key) public view returns (bool) {\n      return(validSenderKeys[sending_key]);\n    }\n    \n    /**\n    * @dev get current location of static call contract\n    */\n  \n     function returnStaticContractAddress() public view returns (address) {\n          return(staticCallContractAddress);\n      }\n      \n      /**\n       * @dev Functions to alter master contract information, such as HSM signing wallet keys, static contract\n       * @dev All can only be changed by a multi sig transaciton so they have the onlyWallet modifier\n       */ \n    \n      /**\n       * @dev Used to change a signing control address at an index\n       */ \n    \n      function changeUserControlAddress(uint account_id, address new_user_control) external onlyWallet {\n          user_control_accounts[account_id] = new_user_control;\n        }\n  \n      /**\n       * @dev Functions to add and remove sending keys\n       */\n       \n       function addSendingKey(address new_sending_key) external onlyWallet {\n           validSenderKeys[new_sending_key] = true;\n       }\n       \n       function removeSendingKey(address sending_key) external onlyWallet {\n           validSenderKeys[sending_key] = false;\n       }\n       \n       /**\n        * @dev Function to change location of static address\n        * @dev Will be used to upgrade static contract \n        */ \n        \n         function changeStaticLocation(address new_location) external onlyWallet {\n           staticCallContractAddress = new_location;\n       }\n   \n  \n     /**\n   * Recovery function for signature - taken from OpenZeppelin\n   * Stored here to reduce deployment cost of a Nifty Wallet \n   * Putting it in the MasterContract to lower bytes of each individual wallet deployment\n   * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/9e1da49f235476290d5433dac6807500e18c7251/contracts/ECRecovery.sol\n   * @dev Recover signer address from a message by using their signature\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n   */\n  function recover(bytes32 hash, bytes memory sig) public pure returns (address) {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n\n    //Check the signature length\n    if (sig.length != 65) {\n      return (address(0));\n    }\n\n    // Divide the signature in r, s and v variables\n    // ecrecover takes the signature parameters, and the only way to get them\n    // currently is to use assembly.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n      r := mload(add(sig, 32))\n      s := mload(add(sig, 64))\n      v := byte(0, mload(add(sig, 96)))\n    }\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n    if (v < 27) {\n      v += 27;\n    }\n\n    // If the version is correct return the signer address\n    if (v != 27 && v != 28) {\n      return (address(0));\n    } else {\n      return ecrecover(hash, v, r, s);\n    }\n  }\n  \n  /**\n   * @dev Function to properly encode a globally unique transaction call\n   * @dev Stored here to reduce deployment costs of a Nifty Wallet instance\n   */ \n\n      struct mStruct {\n        address wal_add;\n        address des_add;\n        uint value;\n        uint internalTxCount;\n        bytes txData;\n    }\n    \n    function returnTxMessageToSign(bytes memory txData,\n                                address des_add,\n                                uint value,\n                                uint tx_count) public view returns(bytes32) {\n        mStruct memory message = mStruct(msg.sender, des_add, value, tx_count, txData);\n        return keccak256(abi.encodePacked(message.wal_add, message.des_add, message.value, message.internalTxCount, message.txData));\n    }\n  \n  /**\n   * Multisig transactions from https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol\n   * Used to call transactions that will modify the master contract\n   * Plus maintain owners, etc\n   */\n   \n   /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    constructor(address[] memory _owners, uint _required, address[] memory signing_keys)\n        public\n        validRequirement(_owners.length, _required)\n    {\n        for (uint i=0; i<_owners.length; i++) {\n            require(!isOwner[_owners[i]] && _owners[i] != address(0));\n            isOwner[_owners[i]] = true;\n        }\n        for (uint i=0; i<signing_keys.length; i++) {\n            require(signing_keys[i] != address(0));\n            validSenderKeys[signing_keys[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        emit OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        emit OwnerRemoval(owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param newOwner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyWallet\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        emit OwnerRemoval(owner);\n        emit OwnerAddition(newOwner);\n    }\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        emit RequirementChange(_required);\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes memory data)\n        public\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        emit Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        emit Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txn = transactions[transactionId];\n            txn.executed = true;\n            if (external_call(txn.destination, txn.value, txn.data.length, txn.data))\n                emit Execution(transactionId);\n            else {\n                emit ExecutionFailure(transactionId);\n                txn.executed = false;\n            }\n        }\n    }\n\n    // call has been separated into its own function in order to take advantage\n    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\n    function external_call(address destination, uint value, uint dataLength, bytes memory data) internal returns (bool) {\n        bool result;\n        assembly {\n            let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\n            result := call(\n                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting\n                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\n                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\n                destination,\n                value,\n                d,\n                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\n                x,\n                0                  // Output is ignored, therefore the output size is zero\n            )\n        }\n        return result;\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        view\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n    }\n\n    /*\n     * Internal functions\n     */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes memory data)\n        internal\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        emit Submission(transactionId);\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n        public\n        view\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n    }\n\n    /// @dev Returns total number of transactions after filers are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        view\n        returns (uint count)\n    {\n        for (uint i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n                count += 1;\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        view\n        returns (address[] memory)\n    {\n        return owners;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n        public\n        view\n        returns (address[] memory _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        _confirmations = new address[](count);\n        for (i=0; i<count; i++)\n            _confirmations[i] = confirmationsTemp[i];\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n        public\n        view\n        returns (uint[] memory _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n            {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        _transactionIds = new uint[](to - from);\n        for (i=from; i<to; i++)\n            _transactionIds[i - from] = transactionIdsTemp[i];\n    }\n  \n\n}",
  "bytecode": "608060405273f14c1236921a912bcd9cffcf82a4fddb53f95732600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a06040519081016040528073f78d37d2db140248d80b379db133cae18e1d9b2a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200173f953019b530e6e70449f47064adfd57bff13329273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200173ee10f820e0fba6ade8bff3d6c4774e57e1b6496373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200173e9e9dcdb86ad336e54db1c11e194928b1475af1973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020017301341e4db2856691ce718840cd8eca21fb1e6ad473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152506007906005620001d392919062000558565b50348015620001e157600080fd5b50604051620034ec380380620034ec833981018060405260608110156200020757600080fd5b8101908080516401000000008111156200022057600080fd5b828101905060208101848111156200023757600080fd5b81518560208202830111640100000000821117156200025557600080fd5b50509291906020018051906020019092919080516401000000008111156200027c57600080fd5b828101905060208101848111156200029357600080fd5b8151856020820283011164010000000082111715620002b157600080fd5b505092919050505082518260328211158015620002ce5750818111155b8015620002dc575060008114155b8015620002ea575060008214155b1515620002f657600080fd5b60008090505b855181101562000448576002600087838151811015156200031957fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158015620003be5750600073ffffffffffffffffffffffffffffffffffffffff1686828151811015156200039b57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1614155b1515620003ca57600080fd5b6001600260008884815181101515620003df57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050620002fc565b5060008090505b83518110156200052c57600073ffffffffffffffffffffffffffffffffffffffff1684828151811015156200048057fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1614151515620004ae57600080fd5b6001600860008684815181101515620004c357fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806001019150506200044f565b50846003908051906020019062000545929190620005e7565b50836004819055505050505050620006bc565b828054828255906000526020600020908101928215620005d4579160200282015b82811115620005d35782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000579565b5b509050620005e3919062000676565b5090565b82805482825590600052602060002090810192821562000663579160200282015b82811115620006625782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000608565b5b50905062000672919062000676565b5090565b620006b991905b80821115620006b557600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055506001016200067d565b5090565b90565b612e2080620006cc6000396000f3fe608060405234801561001057600080fd5b506004361061020d576000357c010000000000000000000000000000000000000000000000000000000090048063a334f5c41161012c578063d74f8edd116100bf578063ec0f8a8e1161008e578063ec0f8a8e14610d44578063ec9614a114610d88578063ee22610b14610df6578063f196db8f14610e245761020d565b8063d74f8edd14610c48578063d9ea7ed514610c66578063dc8452cd14610cc2578063e20056e614610ce05761020d565b8063b77bf600116100fb578063b77bf60014610ad5578063ba51a6df14610af3578063c01a8c8414610b21578063c642747414610b4f5761020d565b8063a334f5c414610860578063a8abe69a14610963578063b0bb7ebd14610a08578063b5dc40c314610a525761020d565b806354741525116101a45780637f5b8fbd116101735780637f5b8fbd1461068f5780638b51d13f146106d35780639ace38c214610715578063a0e67e2b146108015761020d565b806354741525146105475780637065cb4814610597578063732b942d146105db578063784547a7146106495761020d565b806320ea8d86116101e057806320ea8d861461041357806326bf6d25146104415780632f54bf6e146104855780633411c81c146104e15761020d565b8063025e7c271461021257806316ca8c4b14610280578063173825d9146102ca57806319045a251461030e575b600080fd5b61023e6004803603602081101561022857600080fd5b8101908080359060200190929190505050610e72565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610288610eb0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61030c600480360360208110156102e057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ed6565b005b6103d16004803603604081101561032457600080fd5b81019080803590602001909291908035906020019064010000000081111561034b57600080fd5b82018360208201111561035d57600080fd5b8035906020019184600183028401116401000000008311171561037f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061116e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61043f6004803603602081101561042957600080fd5b8101908080359060200190929190505050611252565b005b6104836004803603602081101561045757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113fa565b005b6104c76004803603602081101561049b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061148f565b604051808215151515815260200191505060405180910390f35b61052d600480360360408110156104f757600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114af565b604051808215151515815260200191505060405180910390f35b6105816004803603604081101561055d57600080fd5b810190808035151590602001909291908035151590602001909291905050506114de565b6040518082815260200191505060405180910390f35b6105d9600480360360208110156105ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611570565b005b610607600480360360208110156105f157600080fd5b810190808035906020019092919050505061178b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106756004803603602081101561065f57600080fd5b81019080803590602001909291905050506117c9565b604051808215151515815260200191505060405180910390f35b6106d1600480360360208110156106a557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118b0565b005b6106ff600480360360208110156106e957600080fd5b8101908080359060200190929190505050611945565b6040518082815260200191505060405180910390f35b6107416004803603602081101561072b57600080fd5b8101908080359060200190929190505050611a10565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018060200183151515158152602001828103825284818151815260200191508051906020019080838360005b838110156107c35780820151818401526020810190506107a8565b50505050905090810190601f1680156107f05780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b610809611b05565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561084c578082015181840152602081019050610831565b505050509050019250505060405180910390f35b61094d6004803603608081101561087657600080fd5b810190808035906020019064010000000081111561089357600080fd5b8201836020820111156108a557600080fd5b803590602001918460018302840111640100000000831117156108c757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050611b93565b6040518082815260200191505060405180910390f35b6109b16004803603608081101561097957600080fd5b810190808035906020019092919080359060200190929190803515159060200190929190803515159060200190929190505050611d1c565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156109f45780820151818401526020810190506109d9565b505050509050019250505060405180910390f35b610a10611e8c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610a7e60048036036020811015610a6857600080fd5b8101908080359060200190929190505050611eb6565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610ac1578082015181840152602081019050610aa6565b505050509050019250505060405180910390f35b610add6120f2565b6040518082815260200191505060405180910390f35b610b1f60048036036020811015610b0957600080fd5b81019080803590602001909291905050506120f8565b005b610b4d60048036036020811015610b3757600080fd5b81019080803590602001909291905050506121b2565b005b610c3260048036036060811015610b6557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610bac57600080fd5b820183602082011115610bbe57600080fd5b80359060200191846001830284011164010000000083111715610be057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506123a5565b6040518082815260200191505060405180910390f35b610c506123c4565b6040518082815260200191505060405180910390f35b610ca860048036036020811015610c7c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123c9565b604051808215151515815260200191505060405180910390f35b610cca61241f565b6040518082815260200191505060405180910390f35b610d4260048036036040811015610cf657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612425565b005b610d8660048036036020811015610d5a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612739565b005b610db460048036036020811015610d9e57600080fd5b81019080803590602001909291905050506127b7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610e2260048036036020811015610e0c57600080fd5b81019080803590602001909291905050506127fa565b005b610e7060048036036040811015610e3a57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612aa2565b005b600381815481101515610e8157fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f1057600080fd5b80600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610f6957600080fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060008090505b6001600380549050038110156110ef578273ffffffffffffffffffffffffffffffffffffffff16600382815481101515610ffd57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156110e257600360016003805490500381548110151561105b57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660038281548110151561109557fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506110ef565b8080600101915050610fc7565b5060016003818180549050039150816111089190612cc7565b506003805490506004541115611127576111266003805490506120f8565b5b8173ffffffffffffffffffffffffffffffffffffffff167f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9060405160405180910390a25050565b6000806000806041855114151561118b576000935050505061124c565b6020850151925060408501519150606085015160001a9050601b8160ff1610156111b657601b810190505b601b8160ff16141580156111ce5750601c8160ff1614155b156111df576000935050505061124c565b60018682858560405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561123c573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b33600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156112ab57600080fd5b81336001600083815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561131657600080fd5b8360008082815260200190815260200160002060030160009054906101000a900460ff1615151561134657600080fd5b60006001600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550843373ffffffffffffffffffffffffffffffffffffffff167ff6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e960405160405180910390a35050505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561143457600080fd5b6001600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60026020528060005260406000206000915054906101000a900460ff1681565b60016020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600080600090505b6005548110156115695783801561151d575060008082815260200190815260200160002060030160009054906101000a900460ff16155b80611550575082801561154f575060008082815260200190815260200160002060030160009054906101000a900460ff165b5b1561155c576001820191505b80806001019150506114e6565b5092915050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115aa57600080fd5b80600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561160457600080fd5b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561164157600080fd5b6001600380549050016004546032821115801561165e5750818111155b801561166b575060008114155b8015611678575060008214155b151561168357600080fd5b6001600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060038590806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508473ffffffffffffffffffffffffffffffffffffffff167ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d60405160405180910390a25050505050565b60078181548110151561179a57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000905060008090505b6003805490508110156118a85760016000858152602001908152602001600020600060038381548110151561180757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611886576001820191505b60045482141561189b576001925050506118ab565b80806001019150506117d6565b50505b919050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118ea57600080fd5b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600080600090505b600380549050811015611a0a5760016000848152602001908152602001600020600060038381548110151561197e57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156119fd576001820191505b808060010191505061194d565b50919050565b60006020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ae85780601f10611abd57610100808354040283529160200191611ae8565b820191906000526020600020905b815481529060010190602001808311611acb57829003601f168201915b5050505050908060030160009054906101000a900460ff16905084565b60606003805480602002602001604051908101604052809291908181526020018280548015611b8957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611b3f575b5050505050905090565b6000611b9d612cf3565b60a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184815260200187815250905080600001518160200151826040015183606001518460800151604051602001808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140184815260200183815260200182805190602001908083835b602083101515611cd25780518252602082019150602081019050602083039250611cad565b6001836020036101000a0380198251168184511680821785525050505050509050019550505050505060405160208183030381529060405280519060200120915050949350505050565b606080600554604051908082528060200260200182016040528015611d505781602001602082028038833980820191505090505b509050600080905060008090505b600554811015611dfe57858015611d95575060008082815260200190815260200160002060030160009054906101000a900460ff16155b80611dc85750848015611dc7575060008082815260200190815260200160002060030160009054906101000a900460ff165b5b15611df157808383815181101515611ddc57fe5b90602001906020020181815250506001820191505b8080600101915050611d5e565b878703604051908082528060200260200182016040528015611e2f5781602001602082028038833980820191505090505b5093508790505b86811015611e81578281815181101515611e4c57fe5b9060200190602002015184898303815181101515611e6657fe5b90602001906020020181815250508080600101915050611e36565b505050949350505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606080600380549050604051908082528060200260200182016040528015611eed5781602001602082028038833980820191505090505b509050600080905060008090505b60038054905081101561203c57600160008681526020019081526020016000206000600383815481101515611f2c57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561202f57600381815481101515611fb357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168383815181101515611fec57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506001820191505b8080600101915050611efb565b8160405190808252806020026020018201604052801561206b5781602001602082028038833980820191505090505b509350600090505b818110156120ea57828181518110151561208957fe5b9060200190602002015184828151811015156120a157fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050612073565b505050919050565b60055481565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561213257600080fd5b600380549050816032821115801561214a5750818111155b8015612157575060008114155b8015612164575060008214155b151561216f57600080fd5b826004819055507fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a836040518082815260200191505060405180910390a1505050565b33600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561220b57600080fd5b81600073ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561227d57600080fd5b82336001600083815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156122e957600080fd5b600180600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550843373ffffffffffffffffffffffffffffffffffffffff167f4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef60405160405180910390a361239e856127fa565b5050505050565b60006123b2848484612b38565b90506123bd816121b2565b9392505050565b603281565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60045481565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561245f57600080fd5b81600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156124b857600080fd5b81600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561251257600080fd5b60008090505b6003805490508110156125fc578473ffffffffffffffffffffffffffffffffffffffff1660038281548110151561254b57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156125ef57836003828154811015156125a257fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506125fc565b8080600101915050612518565b506000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508373ffffffffffffffffffffffffffffffffffffffff167f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9060405160405180910390a28273ffffffffffffffffffffffffffffffffffffffff167ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d60405160405180910390a250505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561277357600080fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006007828154811015156127c857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b33600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561285357600080fd5b81336001600083815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156128be57600080fd5b8360008082815260200190815260200160002060030160009054906101000a900460ff161515156128ee57600080fd5b6128f7856117c9565b15612a9b576000806000878152602001908152602001600020905060018160030160006101000a81548160ff021916908315150217905550612a178160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826001015483600201805460018160011615610100020316600290049050846002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612a0d5780601f106129e257610100808354040283529160200191612a0d565b820191906000526020600020905b8154815290600101906020018083116129f057829003601f168201915b5050505050612ca0565b15612a4e57857f33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed7560405160405180910390a2612a99565b857f526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b7923660405160405180910390a260008160030160006101000a81548160ff0219169083151502179055505b505b5050505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612adc57600080fd5b80600783815481101515612aec57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600083600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612b7757600080fd5b60055491506080604051908101604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020016000151581525060008084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002019080519060200190612c36929190612d4f565b5060608201518160030160006101000a81548160ff0219169083151502179055509050506001600560008282540192505081905550817fc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e5160405160405180910390a2509392505050565b6000806040516020840160008287838a8c6187965a03f19250505080915050949350505050565b815481835581811115612cee57818360005260206000209182019101612ced9190612dcf565b5b505050565b60a060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612d9057805160ff1916838001178555612dbe565b82800160010185558215612dbe579182015b82811115612dbd578251825591602001919060010190612da2565b5b509050612dcb9190612dcf565b5090565b612df191905b80821115612ded576000816000905550600101612dd5565b5090565b9056fea165627a7a72305820d1f36bf51c73821a0cc9f860d71f2459bc0307de27241d44ec59e1e66ac4fa7100290000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000005000000000000000000000000824ff697be0d15452aa27a906a92264f82434ab600000000000000000000000067319e7527d8aad3eb5eff49c83695285b105fb00000000000000000000000007833ab47b5c33a54476622e51f424e2951bc61480000000000000000000000008418edbf5af2c59fcfc0eb9f8e952aa927dac44f00000000000000000000000035924d0f1cc3d2782fb25f52b5e7b88077f3098100000000000000000000000000000000000000000000000000000000000000050000000000000000000000005b32ae47ae442878c1f820441295dec0a73fe84b0000000000000000000000000d77e08354956db50ceb831015b52624b952c63400000000000000000000000062e5bb1522721774b6d62062416f26a40b0548510000000000000000000000007f5753d1900a4413430f848fd6304170fe404bff000000000000000000000000f45642e2d1b15033bae954612665ac99bfc69e97",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000005000000000000000000000000824ff697be0d15452aa27a906a92264f82434ab600000000000000000000000067319e7527d8aad3eb5eff49c83695285b105fb00000000000000000000000007833ab47b5c33a54476622e51f424e2951bc61480000000000000000000000008418edbf5af2c59fcfc0eb9f8e952aa927dac44f00000000000000000000000035924d0f1cc3d2782fb25f52b5e7b88077f3098100000000000000000000000000000000000000000000000000000000000000050000000000000000000000005b32ae47ae442878c1f820441295dec0a73fe84b0000000000000000000000000d77e08354956db50ceb831015b52624b952c63400000000000000000000000062e5bb1522721774b6d62062416f26a40b0548510000000000000000000000007f5753d1900a4413430f848fd6304170fe404bff000000000000000000000000f45642e2d1b15033bae954612665ac99bfc69e97"
}