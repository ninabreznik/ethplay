{
  "address": "0x5d9f58562cc3250b36595f7716a9cd4381d793e1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoCricketToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-20\n*/\n\npragma solidity ^0.4.25;\n\nlibrary SafeMath\n{\n\tfunction mul(uint a, uint b) internal pure returns (uint)\n\t{\n\t\tif (a == 0)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t\tuint c = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\tfunction div(uint a, uint b) internal pure returns (uint)\n\t{\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\tuint c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn c;\n\t}\n\n\tfunction sub(uint a, uint b) internal pure returns (uint)\n\t{\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\tfunction add(uint a, uint b) internal pure returns (uint)\n\t{\n\t\tuint c = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\ncontract ERC721\n{\n\tfunction approve(address _to, uint _tokenId) public;\n\tfunction balanceOf(address _owner) public view returns (uint balance);\n\tfunction implementsERC721() public pure returns (bool);\n\tfunction ownerOf(uint _tokenId) public view returns (address addr);\n\tfunction takeOwnership(uint _tokenId) public;\n\tfunction totalSupply() public view returns (uint total);\n\tfunction transferFrom(address _from, address _to, uint _tokenId) public;\n\tfunction transfer(address _to, uint _tokenId) public;\n\n\tevent LogTransfer(address indexed from, address indexed to, uint tokenId);\n\tevent LogApproval(address indexed owner, address indexed approved, uint tokenId);\n}\n\ncontract CryptoCricketToken is ERC721\n{\n\tevent LogBirth(uint tokenId, string name, uint internalTypeId, uint Price);\n\tevent LogSnatch(uint tokenId, string tokenName, address oldOwner, address newOwner, uint oldPrice, uint newPrice);\n\tevent LogTransfer(address from, address to, uint tokenId);\n\n\tstring public constant name = \"CryptoCricket\";\n\tstring public constant symbol = \"CryptoCricketToken\";\n\n\tuint private commision = 4;\n\n\tmapping (uint => uint) private startingPrice;\n\n\t/// @dev A mapping from player IDs to the address that owns them. All players have some valid owner address.\n\tmapping (uint => address) public playerIndexToOwner;\n\n\t// @dev A mapping from owner address to count of tokens that address owns. Used internally inside balanceOf() to resolve ownership count.\n\tmapping (address => uint) private ownershipTokenCount;\n\n\t/// @dev A mapping from PlayerIDs to an address that has been approved to call transferFrom(). Each Player can only have one approved address for transfer at any time. A zero value means no approval is outstanding.\n\tmapping (uint => address) public playerIndexToApproved;\n\n\t// @dev A mapping from PlayerIDs to the price of the token.\n\tmapping (uint => uint) private playerIndexToPrice;\n\n\t// @dev A mapping from PlayerIDs to the reward price of the token obtained while selling.\n\tmapping (uint => uint) private playerIndexToRewardPrice;\n\n\t// The addresses of the accounts (or contracts) that can execute actions within each roles.\n\taddress public ceoAddress;\n\taddress public devAddress;\n\n\tstruct Player\n\t{\n\t\tstring name;\n\t\tuint internalTypeId;\n\t}\n\n\tPlayer[] private players;\n\n\t/// @dev Access modifier for CEO-only functionality\n\tmodifier onlyCEO()\n\t{\n\t\trequire(msg.sender == ceoAddress);\n\t\t_;\n\t}\n\n\tmodifier onlyDevORCEO()\n\t{\n\t\trequire(msg.sender == devAddress || msg.sender == ceoAddress);\n\t\t_;\n\t}\n\n\tconstructor(address _ceo, address _dev) public\n\t{\n\t\tceoAddress = _ceo;\n\t\tdevAddress = _dev;\n\t\tstartingPrice[0] = 0.005 ether; // 2x\n\t\tstartingPrice[1] = 0.007 ether; // 2.5x\n\t\tstartingPrice[2] = 0.005 ether; // 1.5x\n\t}\n\n\t/// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\n\t/// @param _to The address to be granted transfer approval. Pass address(0) to\n\t///    clear all approvals.\n\t/// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n\t/// @dev Required for ERC-721 compliance.\n\tfunction approve(address _to, uint _tokenId) public\n\t{\n\t\trequire(owns(msg.sender, _tokenId));\n\t\tplayerIndexToApproved[_tokenId] = _to;\n\t\temit LogApproval(msg.sender, _to, _tokenId);\n\t}\n\n\tfunction getRewardPrice(uint buyingPrice, uint _internalTypeId) internal view returns(uint rewardPrice)\n\t{\n\t\tif(_internalTypeId == 0) //Cricket Board Card\n\t\t{\n\t\t\trewardPrice = SafeMath.div(SafeMath.mul(buyingPrice, 200), 100);\n\t\t}\n\t\telse if(_internalTypeId == 1) //Country Card\n\t\t{\n\t\t\trewardPrice = SafeMath.div(SafeMath.mul(buyingPrice, 250), 100);\n\t\t}\n\t\telse //Player Card\n\t\t{\n\t\t\trewardPrice = SafeMath.div(SafeMath.mul(buyingPrice, 150), 100);\n\t\t}\n\n\t\trewardPrice = uint(SafeMath.div(SafeMath.mul(rewardPrice, SafeMath.sub(100, commision)), 100));\n\t\treturn rewardPrice;\n\t}\n\n\n\t/// For creating Player\n\tfunction createPlayer(string _name, uint _internalTypeId) public onlyDevORCEO\n\t{\n\t\trequire (_internalTypeId >= 0 && _internalTypeId <= 2);\n\t\tPlayer memory _player = Player({name: _name, internalTypeId: _internalTypeId});\n\t\tuint newPlayerId = players.push(_player) - 1;\n\t\tplayerIndexToPrice[newPlayerId] = startingPrice[_internalTypeId];\n\t\tplayerIndexToRewardPrice[newPlayerId] = getRewardPrice(playerIndexToPrice[newPlayerId], _internalTypeId);\n\n\t\temit LogBirth(newPlayerId, _name, _internalTypeId, startingPrice[_internalTypeId]);\n\n\t\t// This will assign ownership, and also emit the Transfer event as per ERC721 draft\n\t\t_transfer(address(0), address(this), newPlayerId);\n\t}\n\n\tfunction payout(address _to) public onlyCEO\n\t{\n\t\tif(_addressNotNull(_to))\n\t\t{\n\t\t\t_to.transfer(address(this).balance);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tceoAddress.transfer(address(this).balance);\n\t\t}\n\t}\n\n\t// Allows someone to send ether and obtain the token\n\tfunction purchase(uint _tokenId) public payable\n\t{\n\t\taddress oldOwner = playerIndexToOwner[_tokenId];\n\t\tuint sellingPrice = playerIndexToPrice[_tokenId];\n\n\t\trequire(oldOwner != msg.sender);\n\t\trequire(_addressNotNull(msg.sender));\n\t\trequire(msg.value >= sellingPrice);\n\n\t\taddress newOwner = msg.sender;\n\t\tuint payment = uint(SafeMath.div(SafeMath.mul(sellingPrice, SafeMath.sub(100, commision)), 100));\n\t\tuint purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\n\t\tuint _internalTypeId = players[_tokenId].internalTypeId;\n\n\t\tif(_internalTypeId == 0) //Cricket Board Card\n\t\t{\n\t\t\tplayerIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 200), 100);\n\t\t}\n\t\telse if(_internalTypeId == 1) //Country Card\n\t\t{\n\t\t\tplayerIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 250), 100);\n\t\t}\n\t\telse //Player Card\n\t\t{\n\t\t\tplayerIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 150), 100);\n\t\t}\n\n\t\t_transfer(oldOwner, newOwner, _tokenId);\n\t\temit LogSnatch(_tokenId, players[_tokenId].name, oldOwner, newOwner, sellingPrice, playerIndexToPrice[_tokenId]);\n\n\t\tplayerIndexToRewardPrice[_tokenId] = getRewardPrice(playerIndexToPrice[_tokenId], _internalTypeId);\n\n\t\tif (oldOwner != address(this))\n\t\t{\n\t\t\toldOwner.transfer(payment);\n\t\t}\n\t\tmsg.sender.transfer(purchaseExcess);\n\t}\n\n\t/// @param _owner The owner whose soccer player tokens we are interested in.\n\t/// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\n\t///    expensive (it walks the entire Players array looking for players belonging to owner),\n\t///    but it also returns a dynamic array, which is only supported for web3 calls, and\n\t///    not contract-to-contract calls.\n\tfunction tokensOfOwner(address _owner) public view returns(uint[] ownerTokens)\n\t{\n\t\tuint tokenCount = balanceOf(_owner);\n\t\tif (tokenCount == 0)\n\t\t{\n\t\t\treturn new uint[](0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tuint[] memory result = new uint[](tokenCount);\n\t\t\tuint totalPlayers = totalSupply();\n\t\t\tuint resultIndex = 0;\n\n\t\t\tuint playerId;\n\t\t\tfor (playerId = 0; playerId <= totalPlayers; playerId++)\n\t\t\t{\n\t\t\t\tif (playerIndexToOwner[playerId] == _owner)\n\t\t\t\t{\n\t\t\t\t\tresult[resultIndex] = playerId;\n\t\t\t\t\tresultIndex++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\t/// Owner initates the transfer of the token to another account\n\t/// @param _to The address for the token to be transferred to.\n\t/// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n\t/// @dev Required for ERC-721 compliance.\n\tfunction transfer(address _to, uint _tokenId) public\n\t{\n\t\trequire(owns(msg.sender, _tokenId));\n\t\trequire(_addressNotNull(_to));\n\n\t\t_transfer(msg.sender, _to, _tokenId);\n\t}\n\n\t/// Third-party initiates transfer of token from address _from to address _to\n\t/// @param _from The address for the token to be transferred from.\n\t/// @param _to The address for the token to be transferred to.\n\t/// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n\t/// @dev Required for ERC-721 compliance.\n\tfunction transferFrom(address _from, address _to, uint _tokenId) public\n\t{\n\t\trequire(owns(_from, _tokenId));\n\t\trequire(_approved(_to, _tokenId));\n\t\trequire(_addressNotNull(_to));\n\t\t_transfer(_from, _to, _tokenId);\n\t}\n\n\t/// @dev Assigns ownership of a specific Player to an address.\n\tfunction _transfer(address _from, address _to, uint _tokenId) private\n\t{\n\t\t// Since the number of players is capped to 2^32 we can't overflow this\n\t\townershipTokenCount[_to]++;\n\t\t//transfer ownership\n\t\tplayerIndexToOwner[_tokenId] = _to;\n\n\t\t// When creating new players _from is 0x0, but we can't account that address.\n\t\tif (_addressNotNull(_from))\n\t\t{\n\t\t\townershipTokenCount[_from]--;\n\t\t\t// clear any previously approved ownership exchange\n\t\t\tdelete playerIndexToApproved[_tokenId];\n\t\t}\n\n\t\t// Emit the transfer event.\n\t\temit LogTransfer(_from, _to, _tokenId);\n\t}\n\n\t/// Safety check on _to address to prevent against an unexpected 0x0 default.\n\tfunction _addressNotNull(address _to) private pure returns (bool)\n\t{\n\t\treturn (_to != address(0));\n\t}\n\n\t/// For querying balance of a particular account\n\t/// @param _owner The address for balance query\n\t/// @dev Required for ERC-721 compliance.\n\tfunction balanceOf(address _owner) public view returns (uint balance)\n\t{\n\t\treturn ownershipTokenCount[_owner];\n\t}\n\n\t/// @notice Returns all the relevant information about a specific player.\n\t/// @param _tokenId The tokenId of the player of interest.\n\tfunction getPlayer(uint _tokenId) public view returns (string playerName, uint internalTypeId, uint sellingPrice, address owner)\n\t{\n\t\tPlayer storage player = players[_tokenId];\n\t\tplayerName = player.name;\n\t\tinternalTypeId = player.internalTypeId;\n\t\tsellingPrice = playerIndexToPrice[_tokenId];\n\t\towner = playerIndexToOwner[_tokenId];\n\t}\n\n\t/// For querying owner of token\n\t/// @param _tokenId The tokenID for owner inquiry\n\t/// @dev Required for ERC-721 compliance.\n\tfunction ownerOf(uint _tokenId) public view returns (address owner)\n\t{\n\t\towner = playerIndexToOwner[_tokenId];\n\t\trequire (_addressNotNull(owner));\n\t}\n\n\t/// For checking approval of transfer for address _to\n\tfunction _approved(address _to, uint _tokenId) private view returns (bool)\n\t{\n\t\treturn playerIndexToApproved[_tokenId] == _to;\n\t}\n\n\t/// Check for token ownership\n\tfunction owns(address claimant, uint _tokenId) private view returns (bool)\n\t{\n\t\treturn (claimant == playerIndexToOwner[_tokenId]);\n\t}\n\n\tfunction priceOf(uint _tokenId) public view returns (uint price)\n\t{\n\t\treturn playerIndexToPrice[_tokenId];\n\t}\n\n\tfunction rewardPriceOf(uint _tokenId) public view returns (uint price)\n\t{\n\t\treturn playerIndexToRewardPrice[_tokenId];\n\t}\n\n\t/// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n\t/// @param _newCEO The address of the new CEO\n\tfunction setCEO(address _newCEO) public onlyCEO\n\t{\n\t\trequire (_addressNotNull(_newCEO));\n\t\tceoAddress = _newCEO;\n\t}\n\n\t/// @dev Assigns a new address to act as the Dev. Only available to the current CEO.\n\t/// @param _newDev The address of the new Dev\n\tfunction setDev(address _newDev) public onlyCEO\n\t{\n\t\trequire (_addressNotNull(_newDev));\n\t\tdevAddress = _newDev;\n\t}\n\n\t/// @notice Allow pre-approved user to take ownership of a token\n\t/// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n\t/// @dev Required for ERC-721 compliance.\n\tfunction takeOwnership(uint _tokenId) public\n\t{\n\t\taddress newOwner = msg.sender;\n\t\taddress oldOwner = playerIndexToOwner[_tokenId];\n\n\t\t// Safety check to prevent against an unexpected 0x0 default.\n\t\trequire(_addressNotNull(newOwner));\n\n\t\t// Making sure transfer is approved\n\t\trequire(_approved(newOwner, _tokenId));\n\n\t\t_transfer(oldOwner, newOwner, _tokenId);\n\t}\n\n\t/// @dev Assigns a new commison percentage. Only available to the current CEO.\n\t/// @param _newCommision The new commison\n\tfunction updateCommision (uint _newCommision) public onlyCEO\n\t{\n\t\trequire (_newCommision > 0 && _newCommision < 100);\n\t\tcommision = _newCommision;\n\t}\n\n\tfunction implementsERC721() public pure returns (bool)\n\t{\n\t\treturn true;\n\t}\n\n\t/// For querying totalSupply of token\n\t/// @dev Required for ERC-721 compliance.\n\tfunction totalSupply() public view returns (uint total)\n\t{\n\t\treturn players.length;\n\t}\n}",
  "bytecode": "6080604052600460005534801561001557600080fd5b50604051604080611ff5833981018060405281019080805190602001909291908051906020019092919050505081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506611c37937e0800060016000808152602001908152602001600020819055506618de76816d80006001600060018152602001908152602001600020819055506611c37937e080006001600060028152602001908152602001600020819055505050611ec1806101346000396000f30060806040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610143578063095ea7b3146101d35780630a0f8168146102205780630b7e9c44146102775780630c28ebee146102ba5780631051db341461032d57806318160ddd1461035c57806323b872dd1461038757806327d7874c146103f45780633ad10ef6146104375780636352211e1461048e57806370a08231146104fb5780638462151c1461055257806395d89b41146105ea578063a9059cbb1461067a578063b2e6ceeb146106c7578063b9186d7d146106f4578063d477f05f14610735578063ddf0659d14610778578063e55ae4e8146107a5578063e86189a31461088c578063e94e80fa146108cd578063efef39a11461093a578063f2d05f2b1461095a575b600080fd5b34801561014f57600080fd5b506101586109c7565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561019857808201518184015260208101905061017d565b50505050905090810190601f1680156101c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101df57600080fd5b5061021e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a00565b005b34801561022c57600080fd5b50610235610ad0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561028357600080fd5b506102b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610af6565b005b3480156102c657600080fd5b5061032b600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050610c47565b005b34801561033957600080fd5b50610342610ecc565b604051808215151515815260200191505060405180910390f35b34801561036857600080fd5b50610371610ed5565b6040518082815260200191505060405180910390f35b34801561039357600080fd5b506103f2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ee2565b005b34801561040057600080fd5b50610435600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f30565b005b34801561044357600080fd5b5061044c610fe4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561049a57600080fd5b506104b96004803603810190808035906020019092919050505061100a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561050757600080fd5b5061053c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061105b565b6040518082815260200191505060405180910390f35b34801561055e57600080fd5b50610593600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110a4565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156105d65780820151818401526020810190506105bb565b505050509050019250505060405180910390f35b3480156105f657600080fd5b506105ff6111f1565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561063f578082015181840152602081019050610624565b50505050905090810190601f16801561066c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561068657600080fd5b506106c5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061122a565b005b3480156106d357600080fd5b506106f260048036038101908080359060200190929190505050611262565b005b34801561070057600080fd5b5061071f600480360381019080803590602001909291905050506112d7565b6040518082815260200191505060405180910390f35b34801561074157600080fd5b50610776600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112f4565b005b34801561078457600080fd5b506107a3600480360381019080803590602001909291905050506113a8565b005b3480156107b157600080fd5b506107d060048036038101908080359060200190929190505050611429565b60405180806020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825286818151815260200191508051906020019080838360005b8381101561084e578082015181840152602081019050610833565b50505050905090810190601f16801561087b5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561089857600080fd5b506108b76004803603810190808035906020019092919050505061154a565b6040518082815260200191505060405180910390f35b3480156108d957600080fd5b506108f860048036038101908080359060200190929190505050611567565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6109586004803603810190808035906020019092919050505061159a565b005b34801561096657600080fd5b50610985600480360381019080803590602001909291905050506119ba565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6040805190810160405280600d81526020017f43727970746f437269636b65740000000000000000000000000000000000000081525081565b610a0a33826119ed565b1515610a1557600080fd5b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc5c187f53b6bf5e61e032320e996f271e6dc6b212ee64ec28ba8e6b9e3f97a4e836040518082815260200191505060405180910390a35050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b5257600080fd5b610b5b81611a59565b15610bc3578073ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610bbd573d6000803e3d6000fd5b50610c44565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610c42573d6000803e3d6000fd5b505b50565b610c4f611dd6565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610cfa5750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610d0557600080fd5b60008310158015610d17575060028311155b1515610d2257600080fd5b60408051908101604052808581526020018481525091506001600983908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000019080519060200190610d85929190611df0565b5060208201518160010155505003905060016000848152602001908152602001600020546005600083815260200190815260200160002081905550610ddd600560008381526020019081526020016000205484611a92565b60066000838152602001908152602001600020819055507eeff25fe7f59e1403044fc49cb10d2df816729f49f23dee61d54dc7e38e32ad81858560016000888152602001908152602001600020546040518085815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610e7d578082015181840152602081019050610e62565b50505050905090810190601f168015610eaa5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a1610ec660003083611b21565b50505050565b60006001905090565b6000600980549050905090565b610eec83826119ed565b1515610ef757600080fd5b610f018282611cfb565b1515610f0c57600080fd5b610f1582611a59565b1515610f2057600080fd5b610f2b838383611b21565b505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f8c57600080fd5b610f9581611a59565b1515610fa057600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061104b81611a59565b151561105657600080fd5b919050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606000606060008060006110b88761105b565b945060008514156110fb5760006040519080825280602002602001820160405280156110f35781602001602082028038833980820191505090505b5095506111e7565b8460405190808252806020026020018201604052801561112a5781602001602082028038833980820191505090505b509350611135610ed5565b925060009150600090505b82811115156111e3578673ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156111d6578084838151811015156111bf57fe5b906020019060200201818152505081806001019250505b8080600101915050611140565b8395505b5050505050919050565b6040805190810160405280601281526020017f43727970746f437269636b6574546f6b656e000000000000000000000000000081525081565b61123433826119ed565b151561123f57600080fd5b61124882611a59565b151561125357600080fd5b61125e338383611b21565b5050565b6000803391506002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506112a782611a59565b15156112b257600080fd5b6112bc8284611cfb565b15156112c757600080fd5b6112d2818385611b21565b505050565b600060056000838152602001908152602001600020549050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561135057600080fd5b61135981611a59565b151561136457600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561140457600080fd5b6000811180156114145750606481105b151561141f57600080fd5b8060008190555050565b606060008060008060098681548110151561144057fe5b90600052602060002090600202019050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114e85780601f106114bd576101008083540402835291602001916114e8565b820191906000526020600020905b8154815290600101906020018083116114cb57829003601f168201915b5050505050945080600101549350600560008781526020019081526020016000205492506002600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150509193509193565b600060066000838152602001908152602001600020549050919050565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000806000806002600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169550600560008881526020019081526020016000205494503373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415151561162a57600080fd5b61163333611a59565b151561163e57600080fd5b84341015151561164d57600080fd5b339350611670611669866116646064600054611d67565b611d80565b6064611dbb565b925061167c3486611d67565b915060098781548110151561168d57fe5b906000526020600020906002020160010154905060008114156116db576116bf6116b88660c8611d80565b6064611dbb565b6005600089815260200190815260200160002081905550611743565b6001811415611715576116f96116f28660fa611d80565b6064611dbb565b6005600089815260200190815260200160002081905550611742565b61172a611723866096611d80565b6064611dbb565b60056000898152602001908152602001600020819055505b5b61174e868589611b21565b7f32e62e87468f6673191cc7a41230a9d60b6a6a9f5368458c134e67c8ab63d9058760098981548110151561177f57fe5b9060005260206000209060020201600001888789600560008e81526020019081526020016000205460405180878152602001806020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018281038252878181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156118a65780601f1061187b576101008083540402835291602001916118a6565b820191906000526020600020905b81548152906001019060200180831161188957829003601f168201915b505097505050505050505060405180910390a16118d6600560008981526020019081526020016000205482611a92565b60066000898152602001908152602001600020819055503073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614151561196a578573ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015611968573d6000803e3d6000fd5b505b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156119b0573d6000803e3d6000fd5b5050505050505050565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600080821415611ab857611ab1611aaa8460c8611d80565b6064611dbb565b9050611af6565b6001821415611add57611ad6611acf8460fa611d80565b6064611dbb565b9050611af5565b611af2611aeb846096611d80565b6064611dbb565b90505b5b611b16611b0f82611b0a6064600054611d67565b611d80565b6064611dbb565b905080905092915050565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611bcb83611a59565b15611c5757600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001900391905055506004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b7f0a85107a334eae0d22d21cdf13af0f8e8125039ec60baaa843d2c4c5b0680174838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050565b60008273ffffffffffffffffffffffffffffffffffffffff166004600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b6000828211151515611d7557fe5b818303905092915050565b6000806000841415611d955760009150611db4565b8284029050828482811515611da657fe5b04141515611db057fe5b8091505b5092915050565b6000808284811515611dc957fe5b0490508091505092915050565b604080519081016040528060608152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611e3157805160ff1916838001178555611e5f565b82800160010185558215611e5f579182015b82811115611e5e578251825591602001919060010190611e43565b5b509050611e6c9190611e70565b5090565b611e9291905b80821115611e8e576000816000905550600101611e76565b5090565b905600a165627a7a723058202133ac999e4cdf022db1a6eb5e88e15f4719a3592178a907f43155a09192b3920029000000000000000000000000c9bd44581117391b00924eda83c3c06828cd6c970000000000000000000000009eacc4fa9ee051a6dfd8b47ae4765effc1142a42",
  "constructorArguments": "000000000000000000000000c9bd44581117391b00924eda83c3c06828cd6c970000000000000000000000009eacc4fa9ee051a6dfd8b47ae4765effc1142a42"
}