{
  "address": "0xffb8cca6d55762df595f21e78f21cd8dfeadf1c8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ProofofEIF",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-06\n*/\n\npragma solidity ^0.4.25;\n\n/*\n*\n*  _____                  __          __   ______ _____ ______ \n* |  __ \\                / _|        / _| |  ____|_   _|  ____|\n* | |__) | __ ___   ___ | |_    ___ | |_  | |__    | | | |__   \n* |  ___/ '__/ _ \\ / _ \\|  _|  / _ \\|  _| |  __|   | | |  __|  \n* | |   | | | (_) | (_) | |   | (_) | |   | |____ _| |_| |     \n* |_|   |_|  \\___/ \\___/|_|    \\___/|_|   |______|_____|_|     \n*                                                              \n*            Proof of EIF   -  ZERO DEV FEES!\n*\n* [✓] 5% EIF fee - 5% goes to EasyInvestForever (excluding the shared divs below)\n* [✓] 48%-8% Withdraw fee goes to Token Holders as divs \n*     (fee starts at 48% and reduces down to 8% over 30 day period to discourage early dumps)\n* [✓] 15% Deposit fee of which at least 5% goes to Token Holders as divs \n*      (up to 10% to any referrers - referrers are sticky for better referral earnings)\n* [✓] 0% Token transfer fee enabling third party trading\n* [✓] Multi-level STICKY Referral System - 10% from total purchase\n*  *  [✓]  1st level 50% (5% from total purchase)\n*  *  [✓]  2nd level 30% (3% from total purchase)\n*  *  [✓]  3rd level 20% (2% from total purchase)\n*/\n\n\n/**\n * Definition of contract accepting Proof of EIF (EIF) tokens\n * Games or any other innovative platforms can reuse this contract to support Proof Of EIF (EIF) tokens\n */\ncontract AcceptsEIF {\n    ProofofEIF public tokenContract;\n\n    constructor(address _tokenContract) public {\n        tokenContract = ProofofEIF(_tokenContract);\n    }\n\n    modifier onlyTokenContract {\n        require(msg.sender == address(tokenContract));\n        _;\n    }\n\n    /**\n    * @dev Standard ERC677 function that will handle incoming token transfers.\n    *\n    * @param _from  Token sender address.\n    * @param _value Amount of tokens.\n    * @param _data  Transaction metadata.\n    */\n    function tokenFallback(address _from, uint256 _value, bytes _data) external returns (bool);\n}\n\n\ncontract ProofofEIF {\n\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n\n    modifier onlyBagholders {\n        require(myTokens() > 0);\n        _;\n    }\n\n    modifier onlyStronghands {\n        require(myDividends(true) > 0);\n        _;\n    }\n    \n    modifier notGasbag() {\n      require(tx.gasprice <= 200000000000); // max 200 gwei\n      _;\n    }\n\n    modifier notContract() {\n      require (msg.sender == tx.origin);\n\n      _;\n    }\n    \n    \n       /// @dev Limit ambassador mine and prevent deposits before startTime\n    modifier antiEarlyWhale {\n        if (isPremine()) { //max 1ETH purchase premineLimit per ambassador\n          require(ambassadors_[msg.sender] && msg.value <= premineLimit);\n        // stop them purchasing a second time\n          ambassadors_[msg.sender]=false;\n        }\n        else require (isStarted());\n        _;\n    }\n    \n    \n    \n    // administrators can:\n    // -> change the name of the contract\n    // -> change the name of the token\n    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\n    // -> a few more things such as add ambassadors, administrators, reset more things\n    // they CANNOT:\n    // -> take funds\n    // -> disable withdrawals\n    // -> kill the contract\n    // -> change the price of tokens\n    modifier onlyAdministrator(){\n        address _customerAddress = msg.sender;\n        require(administrators[_customerAddress]);\n        _;\n    }    \n    \n    // administrator list (see above on what they can do)\n    mapping(address => bool) public administrators;\n    // ambassadors list (promoters who will get the contract started)\n    mapping(address => bool) public ambassadors_;\n\n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n\n    event onReferralUse(\n        address indexed referrer,\n        uint8  indexed level,\n        uint256 ethereumCollected,\n        address indexed customerAddress,\n        uint256 timestamp\n    );\n\n\n\n    string public name = \"Proof of EIF\";\n    string public symbol = \"EIF\";\n    uint8 constant public decimals = 18;\n    uint8 constant internal entryFee_ = 15;\n    \n    /// @dev 48% dividends for token selling\n    uint8 constant internal startExitFee_ = 48;\n\n    /// @dev 8% dividends for token selling after step\n    uint8 constant internal finalExitFee_ = 8;\n\n    /// @dev Exit fee falls over period of 30 days\n    uint256 constant internal exitFeeFallDuration_ = 30 days;\n    \n    /// @dev starting\n    uint256 public startTime = 0; //  January 1, 1970 12:00:00\n    mapping(address => uint256) internal bonusBalance_;\n    uint256 public depositCount_;\n    uint8 constant internal fundEIF_ = 5; // 5% goes to first EasyInvestForever contract\n    \n    /// @dev anti-early-whale\n    uint256 public maxEarlyStake = 2.5 ether;\n    uint256 public whaleBalanceLimit = 75 ether;\n    uint256 public premineLimit = 1 ether;\n    uint256 public ambassadorCount = 1;\n    \n    /// @dev PoEIF address\n    address public PoEIF;\n    \n    // Address to send the 5% EasyInvestForever Fee\n    address public giveEthFundAddress = 0x35027a992A3c232Dd7A350bb75004aD8567561B2;\n    uint256 public totalEthFundRecieved; // total ETH EasyInvestForever recieved from this contract\n    uint256 public totalEthFundCollected; // total ETH collected in this contract for EasyInvestForever\n    \n    \n    uint8 constant internal maxReferralFee_ = 10; // 10% from total sum (lev1 - 5%, lev2 - 3%, lev3 - 2%)\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n    uint256 constant internal magnitude = 2 ** 64;\n    uint256 public stakingRequirement = 50e18;\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    uint256 internal tokenSupply_;\n    uint256 internal profitPerShare_;\n    \n    // Special Platform control from scam game contracts on PoEIF platform\n    mapping(address => bool) public canAcceptTokens_; // contracts, which can accept PoEIF tokens\n\n    mapping(address => address) public stickyRef;\n    \n    /*=======================================\n    =            CONSTRUCTOR                =\n    =======================================*/\n\n   constructor () public {\n     PoEIF = msg.sender;\n     // initially set only contract creator as ambassador and administrator but can be changed later\n     ambassadors_[PoEIF] = true;\n     administrators[PoEIF] = true;\n   }    \n    \n\n    function buy(address _referredBy) notGasbag antiEarlyWhale public payable {\n        purchaseInternal(msg.value, _referredBy);\n    }\n\n    function() payable notGasbag antiEarlyWhale public {\n        purchaseInternal(msg.value, 0x0);\n    }\n    \n/**\n * Sends FUND money to the Easy Invest Forever Contract\n * Contract address can also be updated by admin if required in the future\n */\n \n     function updateFundAddress(address _newAddress)\n        onlyAdministrator()\n        public\n    {\n        giveEthFundAddress = _newAddress;\n    }\n    \n    function payFund() public {\n        uint256 ethToPay = SafeMath.sub(totalEthFundCollected, totalEthFundRecieved);\n        require(ethToPay > 0);\n        totalEthFundRecieved = SafeMath.add(totalEthFundRecieved, ethToPay);\n        if(!giveEthFundAddress.call.value(ethToPay)()) {\n            revert();\n        }\n    }\n\n /**\n  * Anyone can donate divs using this function to spread some love to all tokenholders without buying tokens\n  */\n    function donateDivs() payable public {\n        require(msg.value > 10000 wei && tokenSupply_ > 0);\n\n        uint256 _dividends = msg.value;\n        // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n        profitPerShare_ += (_dividends * magnitude / tokenSupply_);\n    } \n\n    // @dev Function setting the start time of the system  - can also be reset when contract balance is under 10ETH\n    function setStartTime(uint256 _startTime) onlyAdministrator public {\n        if (address(this).balance < 10 ether ) {\n            startTime = _startTime; \n            // If not already in premine, set premine to start again - remove default ambassador afterwards for zero premine\n            if (!isPremine()) {depositCount_ = 0; ambassadorCount = 1; ambassadors_[PoEIF] = true;}\n        }\n    }\n    \n    // @dev Function for find if premine\n    function isPremine() public view returns (bool) {\n      return depositCount_ < ambassadorCount;\n    }\n\n    // @dev Function for find if started\n    function isStarted() public view returns (bool) {\n      return startTime!=0 && now > startTime;\n    }    \n\n    function reinvest() onlyStronghands public {\n        uint256 _dividends = myDividends(false);\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n\n    function exit() public {\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if (_tokens > 0) sell(_tokens);\n        withdraw();\n    }\n\n    function withdraw() onlyStronghands public {\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false);\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        _customerAddress.transfer(_dividends);\n        emit onWithdraw(_customerAddress, _dividends);\n    }\n\n    function sell(uint256 _amountOfTokens) onlyBagholders public {\n        address _customerAddress = msg.sender;\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee()), 100);\n        \n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundEIF_), 100);\n        // Take out dividends and then _fundPayout\n        uint256 _taxedEthereum =  SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\n\n        // Add ethereum to send to fund\n        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\n\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\n\n        if (tokenSupply_ > 0) {\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());\n    }\n\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders public returns (bool) {\n        // setup\n        address _customerAddress = msg.sender;\n\n        // make sure we have the requested tokens\n        // also disables transfers until ambassador phase is over\n        // ( we dont want whale premines )\n        require(!isPremine() && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n\n        // withdraw all outstanding dividends first\n        if(myDividends(true) > 0) withdraw();\n\n        // exchange tokens\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\n\n        // update dividend trackers\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\n\n\n        // fire event\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\n        return true;\n    }\n\n\n /**\n    * Transfer token to a specified address and forward the data to recipient\n    * ERC-677 standard\n    * https://github.com/ethereum/EIPs/issues/677\n    * @param _to    Receiver address.\n    * @param _value Amount of tokens that will be transferred.\n    * @param _data  Transaction metadata.\n    */\n    function transferAndCall(address _to, uint256 _value, bytes _data) external returns (bool) {\n      require(_to != address(0));\n      require(canAcceptTokens_[_to] == true); // security check that contract approved by PoEIF platform\n      require(transfer(_to, _value)); // do a normal token transfer to the contract\n\n      if (isContract(_to)) {\n        AcceptsEIF receiver = AcceptsEIF(_to);\n        require(receiver.tokenFallback(msg.sender, _value, _data));\n      }\n\n      return true;\n    }\n\n    /**\n     * Additional check that the game address we are sending tokens to is a contract\n     * assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n     */\n     function isContract(address _addr) private constant returns (bool is_contract) {\n       // retrieve the size of the code on target address, this needs assembly\n       uint length;\n       assembly { length := extcodesize(_addr) }\n       return length > 0;\n     }\n\n    /**\n     * Precautionary measures in case we need to adjust the masternode rate.\n     */\n    function setStakingRequirement(uint256 _amountOfTokens)\n        onlyAdministrator()\n        public\n    {\n        stakingRequirement = _amountOfTokens;\n    }\n    \n     /**\n     * Set new Early limits (only appropriate at start of new game).\n     */\n    function setEarlyLimits(uint256 _whaleBalanceLimit, uint256 _maxEarlyStake, uint256 _premineLimit)\n        onlyAdministrator()\n        public\n    {\n        whaleBalanceLimit = _whaleBalanceLimit;\n        maxEarlyStake = _maxEarlyStake;\n        premineLimit = _premineLimit;\n    }\n    \n\n    /**\n     * Add or remove game contract, which can accept PoEIF (EIF) tokens\n     */\n    function setCanAcceptTokens(address _address, bool _value)\n      onlyAdministrator()\n      public\n    {\n      canAcceptTokens_[_address] = _value;\n    }\n\n    /**\n     * If we want to rebrand, we can.\n     */\n    function setName(string _name)\n        onlyAdministrator()\n        public\n    {\n        name = _name;\n    }\n\n    /**\n     * If we want to rebrand, we can.\n     */\n    function setSymbol(string _symbol)\n        onlyAdministrator()\n        public\n    {\n        symbol = _symbol;\n    }\n\n  /**\n   * @dev add an address to the ambassadors_ list (this can be done anytime until the premine finishes)\n   * @param addr address\n   * @return true if the address was added to the list, false if the address was already in the list\n   */\n  function addAmbassador(address addr) onlyAdministrator public returns(bool success) {\n    if (!ambassadors_[addr] && isPremine()) {\n      ambassadors_[addr] = true;\n      ambassadorCount += 1;\n      success = true;\n    }\n  }\n\n\n  /**\n   * @dev remove an address from the ambassadors_ list\n   * (only do this if they take too long to buy premine - they are removed automatically during premine purchase)\n   * @param addr address\n   * @return true if the address was removed from the list,\n   * false if the address wasn't in the list in the first place\n   */\n  function removeAmbassador(address addr) onlyAdministrator public returns(bool success) {\n    if (ambassadors_[addr]) {\n      ambassadors_[addr] = false;\n      ambassadorCount -= 1;\n      success = true;\n    }\n  }\n  \n    /**\n   * @dev add an address to the administrators list\n   * @param addr address\n   * @return true if the address was added to the list, false if the address was already in the list\n   */\n  function addAdministrator(address addr) onlyAdministrator public returns(bool success) {\n    if (!administrators[addr]) {\n      administrators[addr] = true;\n      success = true;\n    }\n  }\n\n\n  /**\n   * @dev remove an address from the administrators list\n   * @param addr address\n   * @return true if the address was removed from the list,\n   * false if the address wasn't in the list in the first place or not called by original administrator\n   */\n  function removeAdministrator(address addr) onlyAdministrator public returns(bool success) {\n    if (administrators[addr] && msg.sender==PoEIF) {\n      administrators[addr] = false;\n      success = true;\n    }\n  }\n\n\n    function totalEthereumBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return tokenSupply_;\n    }\n\n    function myTokens() public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n\n    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n\n    function balanceOf(address _customerAddress) public view returns (uint256) {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\n        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n\n    function sellPrice() public view returns (uint256) {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee()), 100);\n            uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundEIF_), 100);\n            uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\n            return _taxedEthereum;\n        }\n    }\n\n    function buyPrice() public view returns (uint256) {\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);\n            uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundEIF_), 100);\n            uint256 _taxedEthereum =  SafeMath.add(SafeMath.add(_ethereum, _dividends), _fundPayout);\n\n            return _taxedEthereum;\n        }\n    }\n\n    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns (uint256) {\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, entryFee_), 100);\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereumToSpend, fundEIF_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereumToSpend, _dividends), _fundPayout);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n\n        return _amountOfTokens;\n    }\n\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee()), 100);\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundEIF_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\n        return _taxedEthereum;\n    }\n\n    function exitFee() public view returns (uint8) {\n        if (startTime==0 || now < startTime){\n           return startExitFee_;\n        }\n        \n        uint256 secondsPassed = now - startTime;\n        if (secondsPassed >= exitFeeFallDuration_) {\n            return finalExitFee_;\n        }\n        uint8 totalChange = startExitFee_ - finalExitFee_;\n        uint8 currentChange = uint8(totalChange * secondsPassed / exitFeeFallDuration_);\n        uint8 currentFee = startExitFee_- currentChange;\n        return currentFee;\n    }\n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n\n    // Make sure we will send back excess if user sends more than early limits\n    function purchaseInternal(uint256 _incomingEthereum, address _referredBy)\n      internal\n      notContract() // no contracts allowed\n      returns(uint256) {\n\n      uint256 purchaseEthereum = _incomingEthereum;\n      uint256 excess;\n      if(purchaseEthereum > maxEarlyStake ) { // check if the transaction is over early limit of 2.5 ether\n          if (SafeMath.sub(address(this).balance, purchaseEthereum) <= whaleBalanceLimit) { // if so check the contract is less than 75 ether whaleBalanceLimit\n              purchaseEthereum = maxEarlyStake;\n              excess = SafeMath.sub(_incomingEthereum, purchaseEthereum);\n          }\n      }\n    \n      if (excess > 0) {\n        msg.sender.transfer(excess);\n      }\n    \n      purchaseTokens(purchaseEthereum, _referredBy);\n    }\n\n    function handleReferrals(address _referredBy, uint _referralBonus, uint _undividedDividends) internal returns (uint){\n        uint _dividends = _undividedDividends;\n        address _level1Referrer = stickyRef[msg.sender];\n        \n        if (_level1Referrer == address(0x0)){\n            _level1Referrer = _referredBy;\n        }\n        // is the user referred by a masternode?\n        if(\n            // is this a referred purchase?\n            _level1Referrer != 0x0000000000000000000000000000000000000000 &&\n\n            // no cheating!\n            _level1Referrer != msg.sender &&\n\n            // does the referrer have at least X whole tokens?\n            // i.e is the referrer a godly chad masternode\n            tokenBalanceLedger_[_level1Referrer] >= stakingRequirement\n        ){\n            // wealth redistribution\n            if (stickyRef[msg.sender] == address(0x0)){\n                stickyRef[msg.sender] = _level1Referrer;\n            }\n\n            // level 1 refs - 50%\n            uint256 ethereumCollected =  _referralBonus/2;\n            referralBalance_[_level1Referrer] = SafeMath.add(referralBalance_[_level1Referrer], ethereumCollected);\n            _dividends = SafeMath.sub(_dividends, ethereumCollected);\n            emit onReferralUse(_level1Referrer, 1, ethereumCollected, msg.sender, now);\n\n            address _level2Referrer = stickyRef[_level1Referrer];\n\n            if (_level2Referrer != address(0x0) && tokenBalanceLedger_[_level2Referrer] >= stakingRequirement){\n                // level 2 refs - 30%\n                ethereumCollected =  (_referralBonus*3)/10;\n                referralBalance_[_level2Referrer] = SafeMath.add(referralBalance_[_level2Referrer], ethereumCollected);\n                _dividends = SafeMath.sub(_dividends, ethereumCollected);\n                emit onReferralUse(_level2Referrer, 2, ethereumCollected, _level1Referrer, now);\n                address _level3Referrer = stickyRef[_level2Referrer];\n\n                if (_level3Referrer != address(0x0) && tokenBalanceLedger_[_level3Referrer] >= stakingRequirement){\n                    //level 3 refs - 20%\n                    ethereumCollected =  (_referralBonus*2)/10;\n                    referralBalance_[_level3Referrer] = SafeMath.add(referralBalance_[_level3Referrer], ethereumCollected);\n                    _dividends = SafeMath.sub(_dividends, ethereumCollected);\n                    emit onReferralUse(_level3Referrer, 3, ethereumCollected, _level2Referrer, now);\n                }\n            }\n        }\n        return _dividends;\n    }\n\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) internal returns (uint256) {\n        address _customerAddress = msg.sender;\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);\n        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_incomingEthereum, maxReferralFee_), 100);\n        uint256 _dividends = handleReferrals(_referredBy, _referralBonus, _undividedDividends);\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_incomingEthereum, fundEIF_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_incomingEthereum, _undividedDividends), _fundPayout);\n        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\n        \n        \n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n\n        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\n\n        if (tokenSupply_ > 0) {\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\n        } else {\n            tokenSupply_ = _amountOfTokens;\n        }\n\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());\n        // Keep track\n        depositCount_++;\n        return _amountOfTokens;\n    }\n\n    function ethereumToTokens_(uint256 _ethereum) internal view returns (uint256) {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived =\n            (\n                (\n                    SafeMath.sub(\n                        (sqrt\n                            (\n                                (_tokenPriceInitial ** 2)\n                                +\n                                (2 * (tokenPriceIncremental_ * 1e18) * (_ethereum * 1e18))\n                                +\n                                ((tokenPriceIncremental_ ** 2) * (tokenSupply_ ** 2))\n                                +\n                                (2 * tokenPriceIncremental_ * _tokenPriceInitial*tokenSupply_)\n                            )\n                        ), _tokenPriceInitial\n                    )\n                ) / (tokenPriceIncremental_)\n            ) - (tokenSupply_);\n\n        return _tokensReceived;\n    }\n\n    function tokensToEthereum_(uint256 _tokens) internal view returns (uint256) {\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n            (\n                SafeMath.sub(\n                    (\n                        (\n                            (\n                                tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))\n                            ) - tokenPriceIncremental_\n                        ) * (tokens_ - 1e18)\n                    ), (tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2\n                )\n                / 1e18);\n\n        return _etherReceived;\n    }\n\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\n        uint256 z = (x + 1) / 2;\n        y = x;\n\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n\n\n}\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ambassadorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canAcceptTokens_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateFundAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setCanAcceptTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAmbassador\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stickyRef\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxEarlyStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"giveEthFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ambassadors_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"premineLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exitFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAdministrator\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"administrators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthFundCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whaleBalanceLimit\",\"type\":\"uint256\"},{\"name\":\"_maxEarlyStake\",\"type\":\"uint256\"},{\"name\":\"_premineLimit\",\"type\":\"uint256\"}],\"name\":\"setEarlyLimits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"setStakingRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PoEIF\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whaleBalanceLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthFundRecieved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdministrator\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donateDivs\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPremine\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositCount_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAmbassador\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"ethereumCollected\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onReferralUse\",\"type\":\"event\"}]",
  "bytecode": "60c0604052600c60808190527f50726f6f66206f6620454946000000000000000000000000000000000000000060a09081526200004091600291906200014d565b506040805180820190915260038082527f454946000000000000000000000000000000000000000000000000000000000060209092019182526200008591816200014d565b5060006004556722b1c8c1227a0000600755680410d586a20a4c0000600855670de0b6b3a76400006009556001600a55600c8054600160a060020a0319167335027a992a3c232dd7a350bb75004ad8567561b21790556802b5e3af16b1880000600f55348015620000f557600080fd5b50600b8054600160a060020a0319163317808255600160a060020a039081166000908152600160208181526040808420805460ff199081168517909155955490941683528290529190208054909216179055620001f2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019057805160ff1916838001178555620001c0565b82800160010185558215620001c0579182015b82811115620001c0578251825591602001919060010190620001a3565b50620001ce929150620001d2565b5090565b620001ef91905b80821115620001ce5760008155600101620001d9565b90565b61205c80620002026000396000f3006080604052600436106102655763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b81146102ed578063016650441461032057806306fdde03146103355780630f34dc16146103bf57806310d0ffdd146103f457806318160ddd1461040c5780631d5459f7146104215780632260937314610444578063294205b41461045c578063295c25d514610482578063313ce567146104a35780633ccfd60b146104ce5780633e0a322d146104e35780634000aea0146104fb5780634b7503341461052c5780634d6352e514610541578063544736e61461057e57806356d399e814610593578063585bc281146105a85780635e079aa5146105bd5780636122d906146105d257806362254eeb146105f35780636284ae4114610608578063688abbf71461061d57806368fa8134146106375780636b2f46321461065857806370a082311461066d57806376be15851461068e57806378e97925146106af5780637ff276bd146106c4578063817189df146106d95780638328b610146106f75780638620410b1461070f57806387c935cf146107245780638974372d1461073957806391e331071461074e578063949e8acd1461076357806395d89b4114610778578063a4d556861461078d578063a9059cbb146107a2578063b84c8246146107c6578063c47f00271461081f578063c999117614610878578063ca970bac14610899578063d6dda33d146108a1578063da7af32d146108b6578063de96587e146108cb578063e4849b32146108ec578063e9fad8ee14610904578063f088d54714610919578063fdb5a03e1461092d575b642e90edd0003a111561027757600080fd5b61027f610942565b156102cc573360009081526001602052604090205460ff1680156102a557506009543411155b15156102b057600080fd5b336000908152600160205260409020805460ff191690556102df565b6102d461094d565b15156102df57600080fd5b6102ea346000610968565b50005b3480156102f957600080fd5b5061030e600160a060020a03600435166109f5565b60408051918252519081900360200190f35b34801561032c57600080fd5b5061030e610a30565b34801561034157600080fd5b5061034a610a36565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561038457818101518382015260200161036c565b50505050905090810190601f1680156103b15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103cb57600080fd5b506103e0600160a060020a0360043516610ac1565b604080519115158252519081900360200190f35b34801561040057600080fd5b5061030e600435610ad6565b34801561041857600080fd5b5061030e610b2b565b34801561042d57600080fd5b50610442600160a060020a0360043516610b31565b005b34801561045057600080fd5b5061030e600435610b7f565b34801561046857600080fd5b50610442600160a060020a03600435166024351515610bdf565b34801561048e57600080fd5b506103e0600160a060020a0360043516610c29565b3480156104af57600080fd5b506104b8610cb1565b6040805160ff9092168252519081900360200190f35b3480156104da57600080fd5b50610442610cb6565b3480156104ef57600080fd5b50610442600435610d89565b34801561050757600080fd5b506103e060048035600160a060020a0316906024803591604435918201910135610e01565b34801561053857600080fd5b5061030e610f3b565b34801561054d57600080fd5b50610562600160a060020a0360043516610fa9565b60408051600160a060020a039092168252519081900360200190f35b34801561058a57600080fd5b506103e061094d565b34801561059f57600080fd5b5061030e610fc4565b3480156105b457600080fd5b5061030e610fca565b3480156105c957600080fd5b50610562610fd0565b3480156105de57600080fd5b506103e0600160a060020a0360043516610fdf565b3480156105ff57600080fd5b5061030e610ff4565b34801561061457600080fd5b506104b8610ffa565b34801561062957600080fd5b5061030e6004351515611052565b34801561064357600080fd5b506103e0600160a060020a0360043516611093565b34801561066457600080fd5b5061030e611111565b34801561067957600080fd5b5061030e600160a060020a0360043516611116565b34801561069a57600080fd5b506103e0600160a060020a0360043516611131565b3480156106bb57600080fd5b5061030e611146565b3480156106d057600080fd5b5061030e61114c565b3480156106e557600080fd5b50610442600435602435604435611152565b34801561070357600080fd5b5061044260043561117f565b34801561071b57600080fd5b5061030e6111a3565b34801561073057600080fd5b50610562611209565b34801561074557600080fd5b50610442611218565b34801561075a57600080fd5b5061030e611275565b34801561076f57600080fd5b5061030e61127b565b34801561078457600080fd5b5061034a61128e565b34801561079957600080fd5b5061030e6112e9565b3480156107ae57600080fd5b506103e0600160a060020a03600435166024356112ef565b3480156107d257600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261044294369492936024939284019190819084018382808284375094975061143b9650505050505050565b34801561082b57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104429436949293602493928401919081908401838280828437509497506114719650505050505050565b34801561088457600080fd5b506103e0600160a060020a03600435166114a2565b61044261150f565b3480156108ad57600080fd5b506103e0610942565b3480156108c257600080fd5b5061030e61155a565b3480156108d757600080fd5b506103e0600160a060020a0360043516611560565b3480156108f857600080fd5b506104426004356115d3565b34801561091057600080fd5b5061044261176b565b610442600160a060020a0360043516611794565b34801561093957600080fd5b50610442611818565b600a54600654105b90565b6000600454600014158015610963575060045442115b905090565b6000808033321461097857600080fd5b8491506007548211156109aa576008546109933031846118ce565b116109aa5760075491506109a785836118ce565b90505b60008111156109e257604051339082156108fc029083906000818181858888f193505050501580156109e0573d6000803e3d6000fd5b505b6109ec82856118e0565b50505092915050565b600160a060020a0316600090815260126020908152604080832054601090925290912054601454680100000000000000009102919091030490565b600a5481565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015610ab95780601f10610a8e57610100808354040283529160200191610ab9565b820191906000526020600020905b815481529060010190602001808311610a9c57829003601f168201915b505050505081565b60156020526000908152604090205460ff1681565b600080808080610af1610aea87600f611abe565b6064611ae9565b9350610b01610aea876005611abe565b9250610b16610b1087866118ce565b846118ce565b9150610b2182611b00565b9695505050505050565b60135490565b3360008181526020819052604090205460ff161515610b4f57600080fd5b50600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008060008060006013548611151515610b9857600080fd5b610ba186611b98565b9350610bba610aea85610bb2610ffa565b60ff16611abe565b9250610bca610aea856005611abe565b9150610b21610bd985856118ce565b836118ce565b3360008181526020819052604090205460ff161515610bfd57600080fd5b50600160a060020a03919091166000908152601560205260409020805460ff1916911515919091179055565b3360008181526020819052604081205490919060ff161515610c4a57600080fd5b600160a060020a03831660009081526001602052604090205460ff16158015610c765750610c76610942565b15610cab57600160a060020a0383166000908152600160208190526040909120805460ff191682179055600a80548201905591505b50919050565b601281565b6000806000610cc56001611052565b11610ccf57600080fd5b339150610cdc6000611052565b600160a060020a038316600081815260126020908152604080832080546801000000000000000087020190556011909152808220805490839055905193019350909183156108fc0291849190818181858888f19350505050158015610d45573d6000803e3d6000fd5b50604080518281529051600160a060020a038416917fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc919081900360200190a25050565b3360008181526020819052604090205460ff161515610da757600080fd5b678ac7230489e8000030311015610dfd576004829055610dc5610942565b1515610dfd57600060068190556001600a819055600b54600160a060020a0316825260208190526040909120805460ff191690911790555b5050565b600080600160a060020a0386161515610e1957600080fd5b600160a060020a03861660009081526015602052604090205460ff161515600114610e4357600080fd5b610e4d86866112ef565b1515610e5857600080fd5b610e6186611c04565b15610f2f57506040517fc0ee0b8a000000000000000000000000000000000000000000000000000000008152336004820181815260248301879052606060448401908152606484018690528893600160a060020a0385169363c0ee0b8a9390928a928a928a929091608401848480828437820191505095505050505050602060405180830381600087803b158015610ef857600080fd5b505af1158015610f0c573d6000803e3d6000fd5b505050506040513d6020811015610f2257600080fd5b50511515610f2f57600080fd5b50600195945050505050565b600080600080600060135460001415610f5b576414f46b04009450610fa2565b610f6c670de0b6b3a7640000611b98565b9350610f7d610aea85610bb2610ffa565b9250610f8d610aea856005611abe565b9150610f9c610bd985856118ce565b90508094505b5050505090565b601660205260009081526040902054600160a060020a031681565b600f5481565b60075481565b600c54600160a060020a031681565b60016020526000908152604090205460ff1681565b60095481565b600080600080600060045460001480611014575060045442105b156110225760309450610fa2565b6004544203935062278d00841061103c5760089450610fa2565b50505062278d0060289190910204603003919050565b6000338261106857611063816109f5565b61108c565b600160a060020a03811660009081526011602052604090205461108a826109f5565b015b9392505050565b3360008181526020819052604081205490919060ff1615156110b457600080fd5b600160a060020a03831660009081526020819052604090205460ff1680156110e65750600b54600160a060020a031633145b15610cab575050600160a060020a03166000908152602081905260409020805460ff19169055600190565b303190565b600160a060020a031660009081526010602052604090205490565b60006020819052908152604090205460ff1681565b60045481565b600e5481565b3360008181526020819052604090205460ff16151561117057600080fd5b50600892909255600755600955565b3360008181526020819052604090205460ff16151561119d57600080fd5b50600f55565b6000806000806000601354600014156111c35764199c82cc009450610fa2565b6111d4670de0b6b3a7640000611b98565b93506111e4610aea85600f611abe565b92506111f4610aea856005611abe565b9150610f9c6112038585611c0c565b83611c0c565b600b54600160a060020a031681565b6000611228600e54600d546118ce565b90506000811161123757600080fd5b611243600d5482611c0c565b600d55600c54604051600160a060020a03909116908290600081818185875af192505050151561127257600080fd5b50565b60085481565b60003361128781611116565b91505b5090565b6003805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610ab95780601f10610a8e57610100808354040283529160200191610ab9565b600d5481565b60008060006112fc61127b565b1161130657600080fd5b5033611310610942565b1580156113355750600160a060020a0381166000908152601060205260409020548311155b151561134057600080fd5b600061134c6001611052565b111561135a5761135a610cb6565b600160a060020a03811660009081526010602052604090205461137d90846118ce565b600160a060020a0380831660009081526010602052604080822093909355908616815220546113ac9084611c0c565b600160a060020a0385811660008181526010602090815260408083209590955560148054948716808452601283528684208054968b02909603909555548383529185902080549289029092019091558351878152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3600191505b5092915050565b3360008181526020819052604090205460ff16151561145957600080fd5b815161146c906003906020850190611fa2565b505050565b3360008181526020819052604090205460ff16151561148f57600080fd5b815161146c906002906020850190611fa2565b3360008181526020819052604081205490919060ff1615156114c357600080fd5b600160a060020a03831660009081526020819052604090205460ff161515610cab575050600160a060020a03166000908152602081905260409020805460ff1916600190811790915590565b60006127103411801561152457506000601354115b151561152f57600080fd5b34905060135468010000000000000000820281151561154a57fe5b6014805492909104909101905550565b60065481565b3360008181526020819052604081205490919060ff16151561158157600080fd5b600160a060020a03831660009081526001602052604090205460ff1615610cab575050600160a060020a03166000908152600160208190526040909120805460ff19169055600a805460001901905590565b6000806000806000806000806115e761127b565b116115f157600080fd5b3360008181526010602052604090205490975088111561161057600080fd5b87955061161c86611b98565b945061162d610aea86610bb2610ffa565b935061163d610aea866005611abe565b925061164c610b1086866118ce565b915061165a600e5484611c0c565b600e5560135461166a90876118ce565b601355600160a060020a03871660009081526010602052604090205461169090876118ce565b600160a060020a03881660009081526010602090815260408083209390935560145460129091529181208054928902680100000000000000008602019283900390556013549192501015611706576117026014546013546801000000000000000087028115156116fc57fe5b04611c0c565b6014555b86600160a060020a03167f8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e87844261173c6111a3565b604080519485526020850193909352838301919091526060830152519081900360800190a25050505050505050565b336000818152601060205260408120549081111561178c5761178c816115d3565b610dfd610cb6565b642e90edd0003a11156117a657600080fd5b6117ae610942565b156117fb573360009081526001602052604090205460ff1680156117d457506009543411155b15156117df57600080fd5b336000908152600160205260409020805460ff1916905561180e565b61180361094d565b151561180e57600080fd5b610dfd3482610968565b6000806000806118286001611052565b1161183257600080fd5b61183c6000611052565b3360008181526012602090815260408083208054680100000000000000008702019055601190915281208054908290559092019450925061187e9084906118e0565b905081600160a060020a03167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588483604051808381526020018281526020019250505060405180910390a2505050565b6000828211156118da57fe5b50900390565b60003381808080808080806118f9610aea8d600f611abe565b9750611909610aea8d600a611abe565b96506119168b888a611c1b565b9550611926610aea8d6005611abe565b945061193b6119358d8a6118ce565b866118ce565b9350611949600e5486611c0c565b600e5561195584611b00565b9250680100000000000000008602915060008311801561197f575060135461197d8482611c0c565b115b151561198a57600080fd5b600060135411156119ee576119a160135484611c0c565b60138190556801000000000000000087028115156119bb57fe5b601480549290910490910190556013546801000000000000000087028115156119e057fe5b0483028203820391506119f4565b60138390555b600160a060020a038916600090815260106020526040902054611a179084611c0c565b600160a060020a03808b166000818152601060209081526040808320959095556014546012909152939020805493870286900393840190559192508c16907f8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab8e8642611a816111a3565b604080519485526020850193909352838301919091526060830152519081900360800190a350506006805460010190559998505050505050505050565b600080831515611ad15760009150611434565b50828202828482811515611ae157fe5b041461108c57fe5b6000808284811515611af757fe5b04949350505050565b6013546000906c01431e0fae6d7217caa00000009082906402540be400611b85611b7f730380d4bd8a8678c1bb542c80deb4800000000000880268056bc75e2d631000006002860a02017005e0a1fd2712875988becaad0000000000850201780197d4df19d605767337e9f14d3eec8920e40000000000000001611f6d565b856118ce565b811515611b8e57fe5b0403949350505050565b601354600090670de0b6b3a7640000838101918101908390611bf16414f46b04008285046402540be40002018702600283670de0b6b3a763ffff1982890a8b900301046402540be40002811515611beb57fe5b046118ce565b811515611bfa57fe5b0495945050505050565b6000903b1190565b60008282018381101561108c57fe5b336000908152601660205260408120548290600160a060020a0316828080831515611c44578893505b600160a060020a03841615801590611c655750600160a060020a0384163314155b8015611c8b5750600f54600160a060020a03851660009081526010602052604090205410155b15611f605733600090815260166020526040902054600160a060020a03161515611ce557336000908152601660205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0386161790555b600160a060020a038416600090815260116020526040902054600289049350611d0e9084611c0c565b600160a060020a038516600090815260116020526040902055611d3185846118ce565b6040805185815242602082015281519297503392600192600160a060020a038916927faa2bebb51de7655c0cc01571c3c91cda2f269b8d8add6392407afc885f8b0a58929081900390910190a4600160a060020a038085166000908152601660205260409020541691508115801590611dc45750600f54600160a060020a03831660009081526010602052604090205410155b15611f6057600160a060020a038216600090815260116020526040902054600a60038a02049350611df59084611c0c565b600160a060020a038316600090815260116020526040902055611e1885846118ce565b945083600160a060020a0316600283600160a060020a03167faa2bebb51de7655c0cc01571c3c91cda2f269b8d8add6392407afc885f8b0a588642604051808381526020018281526020019250505060405180910390a450600160a060020a03808216600090815260166020526040902054168015801590611eb45750600f54600160a060020a03821660009081526010602052604090205410155b15611f6057600160a060020a038116600090815260116020526040902054600a60028a02049350611ee59084611c0c565b600160a060020a038216600090815260116020526040902055611f0885846118ce565b945081600160a060020a0316600382600160a060020a03167faa2bebb51de7655c0cc01571c3c91cda2f269b8d8add6392407afc885f8b0a588642604051808381526020018281526020019250505060405180910390a45b5092979650505050505050565b80600260018201045b81811015610cab578091506002818285811515611f8f57fe5b0401811515611f9a57fe5b049050611f76565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611fe357805160ff1916838001178555612010565b82800160010185558215612010579182015b82811115612010578251825591602001919060010190611ff5565b5061128a9261094a9250905b8082111561128a576000815560010161201c5600a165627a7a72305820fd5a5e19ecdc5d62a83df107d6f445176a7cbced3b812988c15bc324145c7e440029"
}