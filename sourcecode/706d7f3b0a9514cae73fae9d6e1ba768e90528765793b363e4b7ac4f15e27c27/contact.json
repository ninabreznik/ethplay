{
  "address": "0x5dc94fcee70ed28c5e7c450a5a09255bbc39aec1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HWGR",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-12\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/math/SafeMath.sol\n\n/**\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\n * Released under the MIT license.\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/LICENSE\n*/\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/token/ERC20/ERC20Interface.sol\n\n/**\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\n * Released under the MIT license.\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/LICENSE\n*/\n\n/**\n * @title \n * @dev \n */\ncontract ERC20Interface {\n  function totalSupply() external view returns (uint256);\n  function balanceOf(address who) external view returns (uint256);\n  function transfer(address to, uint256 value) external returns (bool);\n  function allowance(address owner, address spender) external view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\n  function approve(address spender, uint256 value) external returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/token/ERC20/ERC20Standard.sol\n\n/**\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\n * Released under the MIT license.\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/LICENSE\n*/\n\n\n\n/**\n * @title \n * @dev \n */\ncontract ERC20Standard is ERC20Interface {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) external returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * \n   * To avoid this issue, allowances are only allowed to be changed between zero and non-zero.\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) external returns (bool) {\n    require(allowed[msg.sender][_spender] == 0 || _value == 0);\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() external view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) external view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) external view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) external returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/token/ERC223/ERC223ReceivingContract.sol\n\n/**\n * Released under the MIT license.\n * https://github.com/Dexaran/ERC223-token-standard/blob/master/LICENSE\n*/\n\n\n/**\n * @title Contract that will work with ERC223 tokens.\n */\n \ncontract ERC223ReceivingContract { \n/**\n * @dev Standard ERC223 function that will handle incoming token transfers.\n *\n * @param _from  Token sender address.\n * @param _value Amount of tokens.\n * @param _data  Transaction metadata.\n */\n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\n// File: contracts/token/ERC223/ERC223Interface.sol\n\n/**\n * Released under the MIT license.\n * https://github.com/Dexaran/ERC223-token-standard/blob/master/LICENSE\n*/\n\ncontract ERC223Interface {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function transfer(address to, uint256 value, bytes data) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts/token/ERC223/ERC223Standard.sol\n\n/**\n * Released under the MIT license.\n * https://github.com/Dexaran/ERC223-token-standard/blob/master/LICENSE\n*/\n\n\n\n\n\n/**\n * @title Reference implementation of the ERC223 standard token.\n */\ncontract ERC223Standard is ERC223Interface, ERC20Standard {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Transfer the specified amount of tokens to the specified address.\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\n     *      The token transfer fails if the recipient is a contract\n     *      but does not implement the `tokenFallback` function\n     *      or the fallback function to receive funds.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     * @param _data  Transaction metadata.\n     */\n    function transfer(address _to, uint256 _value, bytes _data) external returns(bool){\n        // Standard function transfer similar to ERC20 transfer with no _data .\n        // Added due to backwards compatibility reasons .\n        uint256 codeLength;\n\n        assembly {\n            // Retrieve the size of the code on target address, this needs assembly .\n            codeLength := extcodesize(_to)\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        if(codeLength>0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, _data);\n        }\n        emit Transfer(msg.sender, _to, _value);\n    }\n    \n    /**\n     * @dev Transfer the specified amount of tokens to the specified address.\n     *      This function works the same with the previous one\n     *      but doesn't contain `_data` param.\n     *      Added due to backwards compatibility reasons.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     */\n    function transfer(address _to, uint256 _value) external returns(bool){\n        uint256 codeLength;\n        bytes memory empty;\n\n        assembly {\n            // Retrieve the size of the code on target address, this needs assembly .\n            codeLength := extcodesize(_to)\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        if(codeLength>0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, empty);\n        }\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n \n}\n\n// File: contracts/ownership/Ownable.sol\n\n/**\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\n * Released under the MIT license.\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/LICENSE\n*/\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: contracts/token/extentions/MintableToken.sol\n\n/**\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\n * Released under the MIT license.\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/LICENSE\n*/\n\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is ERC223Standard, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: contracts/DAICOVO/DaicovoStandardToken.sol\n\n/**\n * @title DAICOVO standard ERC20, ERC223 compliant token\n * @dev Inherited ERC20 and ERC223 token functionalities.\n * @dev Extended with forceTransfer() function to support compatibility\n * @dev with exisiting apps which expects ERC20 token's transfer function berhavior.\n */\ncontract DaicovoStandardToken is ERC20Standard, ERC223Standard, MintableToken {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    constructor(string _name, string _symbol, uint8 _decimals) public {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    /**\n     * @dev It provides an ERC20 compatible transfer function without checking of\n     * @dev target address whether it's contract or EOA address.\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     */\n    function forceTransfer(address _to, uint _value) external returns(bool) {\n        require(_to != address(0x0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n}\n\n// File: contracts/token/extentions/BurnableToken.sol\n\n/**\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\n * Released under the MIT license.\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/LICENSE\n*/\n\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is ERC223Standard {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n/**\n * @title Capped token\n * @dev Mintable token with a token cap.\n */\ncontract CappedToken is MintableToken {\n\n  uint256 public cap;\n\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) public returns (bool) {\n    require(totalSupply_.add(_amount) <= cap);\n    return super.mint(_to, _amount);\n  }\n\n}\n\n/**\n * @title HWG Revolution Token\n * @dev ERC20, ERC223 compliant mintable, burnable token.\n */\ncontract HWGR is DaicovoStandardToken, BurnableToken, CappedToken {\n    constructor () public DaicovoStandardToken(\"HWG Revolution\", \"REV\", 8) CappedToken(10000000000000000) {\n    }\n}",
  "bytecode": "60806040526003805460a060020a60ff02191690553480156200002157600080fd5b50604080518082018252600e81527f485747205265766f6c7574696f6e0000000000000000000000000000000000006020808301918252835180850190945260038085527f5245560000000000000000000000000000000000000000000000000000000000918501919091528054600160a060020a031916331790558151662386f26fc100009391600891620000ba91600491620000fe565b508151620000d0906005906020850190620000fe565b506006805460ff191660ff92909216919091179055505060008111620000f557600080fd5b600755620001a3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200014157805160ff191683800117855562000171565b8280016001018555821562000171579182015b828111156200017157825182559160200191906001019062000154565b506200017f92915062000183565b5090565b620001a091905b808211156200017f57600081556001016200018a565b90565b6110f880620001b36000396000f3006080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461011657806306fdde031461013f578063095ea7b3146101c957806318160ddd146101ed57806323b872dd14610214578063313ce5671461023e578063355274ea1461026957806340c10f191461027e57806342966c68146102a257806366188463146102bc57806370a08231146102e05780637d64bcb4146103015780638da5cb5b1461031657806395d89b4114610347578063a9059cbb1461035c578063be45fd6214610380578063d73dd623146103b1578063dd62ed3e146103d5578063f2fde38b146103fc578063ffb0885d1461041d575b600080fd5b34801561012257600080fd5b5061012b610441565b604080519115158252519081900360200190f35b34801561014b57600080fd5b50610154610462565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018e578181015183820152602001610176565b50505050905090810190601f1680156101bb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101d557600080fd5b5061012b600160a060020a03600435166024356104f0565b3480156101f957600080fd5b50610202610590565b60408051918252519081900360200190f35b34801561022057600080fd5b5061012b600160a060020a0360043581169060243516604435610596565b34801561024a57600080fd5b506102536106fb565b6040805160ff9092168252519081900360200190f35b34801561027557600080fd5b50610202610704565b34801561028a57600080fd5b5061012b600160a060020a036004351660243561070a565b3480156102ae57600080fd5b506102ba600435610740565b005b3480156102c857600080fd5b5061012b600160a060020a036004351660243561074d565b3480156102ec57600080fd5b50610202600160a060020a036004351661083d565b34801561030d57600080fd5b5061012b610858565b34801561032257600080fd5b5061032b6108fe565b60408051600160a060020a039092168252519081900360200190f35b34801561035357600080fd5b5061015461090d565b34801561036857600080fd5b5061012b600160a060020a0360043516602435610968565b34801561038c57600080fd5b5061012b60048035600160a060020a0316906024803591604435918201910135610b0e565b3480156103bd57600080fd5b5061012b600160a060020a0360043516602435610c6b565b3480156103e157600080fd5b50610202600160a060020a0360043581169060243516610d04565b34801561040857600080fd5b506102ba600160a060020a0360043516610d2f565b34801561042957600080fd5b5061012b600160a060020a0360043516602435610dc4565b60035474010000000000000000000000000000000000000000900460ff1681565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104e85780601f106104bd576101008083540402835291602001916104e8565b820191906000526020600020905b8154815290600101906020018083116104cb57829003601f168201915b505050505081565b336000908152600160209081526040808320600160a060020a0386168452909152812054158061051e575081155b151561052957600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60025490565b6000600160a060020a03831615156105ad57600080fd5b600160a060020a0384166000908152602081905260409020548211156105d257600080fd5b600160a060020a038416600090815260016020908152604080832033845290915290205482111561060257600080fd5b600160a060020a03841660009081526020819052604090205461062b908363ffffffff610e9316565b600160a060020a038086166000908152602081905260408082209390935590851681522054610660908363ffffffff610ea516565b600160a060020a038085166000908152602081815260408083209490945591871681526001825282812033825290915220546106a2908363ffffffff610e9316565b600160a060020a03808616600081815260016020908152604080832033845282529182902094909455805186815290519287169391926000805160206110ad833981519152929181900390910190a35060019392505050565b60065460ff1681565b60075481565b600060075461072483600254610ea590919063ffffffff16565b111561072f57600080fd5b6107398383610eb4565b9392505050565b61074a3382610fbd565b50565b336000908152600160209081526040808320600160a060020a0386168452909152812054808311156107a257336000908152600160209081526040808320600160a060020a03881684529091528120556107d7565b6107b2818463ffffffff610e9316565b336000908152600160209081526040808320600160a060020a03891684529091529020555b336000818152600160209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600090600160a060020a0316331461087257600080fd5b60035474010000000000000000000000000000000000000000900460ff161561089a57600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104e85780601f106104bd576101008083540402835291602001916104e8565b33600090815260208190526040812054833b906060908390610990908663ffffffff610e9316565b3360009081526020819052604080822092909255600160a060020a038816815220546109c2908663ffffffff610ea516565b600160a060020a038716600090815260208190526040812091909155831115610ad457506040517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081523360048201818152602483018790526060604484019081528451606485015284518994600160a060020a0386169463c0ee0b8a9490938b93899360840190602085019080838360005b83811015610a6d578181015183820152602001610a55565b50505050905090810190601f168015610a9a5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610abb57600080fd5b505af1158015610acf573d6000803e3d6000fd5b505050505b604080518681529051600160a060020a0388169133916000805160206110ad8339815191529181900360200190a350600195945050505050565b33600090815260208190526040812054853b908290610b33908763ffffffff610e9316565b3360009081526020819052604080822092909255600160a060020a03891681522054610b65908763ffffffff610ea516565b600160a060020a038816600090815260208190526040812091909155821115610c3357506040517fc0ee0b8a000000000000000000000000000000000000000000000000000000008152336004820181815260248301889052606060448401908152606484018790528993600160a060020a0385169363c0ee0b8a9390928b928b928b929091608401848480828437820191505095505050505050600060405180830381600087803b158015610c1a57600080fd5b505af1158015610c2e573d6000803e3d6000fd5b505050505b604080518781529051600160a060020a0389169133916000805160206110ad8339815191529181900360200190a35050949350505050565b336000908152600160209081526040808320600160a060020a0386168452909152812054610c9f908363ffffffff610ea516565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600354600160a060020a03163314610d4657600080fd5b600160a060020a0381161515610d5b57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a0383161515610ddb57600080fd5b33600090815260208190526040902054821115610df757600080fd5b33600090815260208190526040902054610e17908363ffffffff610e9316565b3360009081526020819052604080822092909255600160a060020a03851681522054610e49908363ffffffff610ea516565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233926000805160206110ad8339815191529281900390910190a350600192915050565b600082821115610e9f57fe5b50900390565b60008282018381101561073957fe5b600354600090600160a060020a03163314610ece57600080fd5b60035474010000000000000000000000000000000000000000900460ff1615610ef657600080fd5b600254610f09908363ffffffff610ea516565b600255600160a060020a038316600090815260208190526040902054610f35908363ffffffff610ea516565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000916000805160206110ad8339815191529181900360200190a350600192915050565b600160a060020a038216600090815260208190526040902054811115610fe257600080fd5b600160a060020a03821660009081526020819052604090205461100b908263ffffffff610e9316565b600160a060020a038316600090815260208190526040902055600254611037908263ffffffff610e9316565b600255604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516916000805160206110ad8339815191529181900360200190a350505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820e6360ef4f750d040d06d46ce5418edf58435f89e63715ee7062346ca506e23720029"
}