{
  "address": "0x71a42fd60323204912468cd32a8283ed5d45a28f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Slugroad",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-01\n*/\n\npragma solidity ^0.4.24;\n\n/* SLUGROAD\n\nSimple Fomo Game with fair scaling.\nSlugroad has 3 different tracks: different networks, with different settings.\nThis is the Ethereum track.\n\nA car drives to hyperspeed.\nSpeed starts at a min of 100mph and rises to a max 1000mph over 7 days.\n\nBuy Slugs with ETH.\nSlugs persist between loops!\n\nGet ETH divs from other Slug buys.\nUse your earned ETH to Time Warp, buying Slugs for a cheaper price.\n\nThrow Slugs on the windshield to stop the car (+6 minute timer) and become the Driver.\n\nAs the driver, you earn miles according to your speed.\nTrade 6000 miles for 1% of the pot.\n\nOnce the car reaches hyperspeed, the Driver starts draining the pot.\n0.01% is drained every second, up to a maximum of 36% in one hour.\n\nThe Driver can jump out of the window at any moment to secure his gains.\nOnce the Driver jumps out, the car drives freely.\nTimer resets to 1 hour.\nThe wheel goes to the starter, but he gets no reward if the car crosses the finish line.\n\nIf someone else throws Slugs before the Driver jumps out, he takes the wheel.\nTimer resets to 6 minutes, and the Driver gets nothing!\n\nIf the Driver keeps the wheel for one hour in hyperspeed, he gets the full pot.\nThen we move to loop 2 immediately, on a 7 days timer.\n\nSlug price: (0.000025 + (loopchest/10000)) / loop\nThe price of slugs initially rises then lowers through a loop, as the pot is drained.\nWith each new loop, the price of slugs decrease significantly (cancel out early advantage)\n\nPlayers can Skip Ahead with the ether they won.\nSlug price changes to (0.000025 + (loopchest/10000)) / (loop + 1)\nTraveling through time will always be more fruitful than buying.\n\nPot split:\n- 60% divs\n- 20% slugBank (reserve pot)\n- 10% loopChest (round pot)\n- 10% snailthrone\n\n*/\n\ncontract Slugroad {\n    using SafeMath for uint;\n    \n    /* Events */\n    \n    event WithdrewBalance (address indexed player, uint eth);\n    event BoughtSlug (address indexed player, uint eth, uint slug);\n    event SkippedAhead (address indexed player, uint eth, uint slug);\n    event TradedMile (address indexed player, uint eth, uint mile);\n    event BecameDriver (address indexed player, uint eth);\n    event TookWheel (address indexed player, uint eth);\n    event ThrewSlug (address indexed player);\n    event JumpedOut (address indexed player, uint eth);\n    event TimeWarped (address indexed player, uint indexed loop, uint eth);\n    event NewLoop (address indexed player, uint indexed loop);\n    event PaidThrone (address indexed player, uint eth);\n    event BoostedPot (address indexed player, uint eth);    \n\n    /* Constants */\n    \n    uint256 constant public RACE_TIMER_START    = 604800; //7 days\n    uint256 constant public HYPERSPEED_LENGTH   = 3600; //1 hour\n\tuint256 constant public THROW_SLUG_REQ      = 200; //slugs to become driver\n    uint256 constant public DRIVER_TIMER_BOOST  = 360; //6 minutes\n    uint256 constant public SLUG_COST_FLOOR     = 0.000025 ether; //4 zeroes\n    uint256 constant public DIV_SLUG_COST       = 10000; //loop pot divider\n    uint256 constant public TOKEN_MAX_BUY       = 1 ether; //max allowed eth in one buy transaction\n    uint256 constant public MIN_SPEED           = 100;\n    uint256 constant public MAX_SPEED           = 1000;\n    uint256 constant public ACCEL_FACTOR        = 672; //inverse of acceleration per second\n    uint256 constant public MILE_REQ            = 6000; //required miles for 1% of the pot\n    address constant public SNAILTHRONE         = 0x261d650a521103428C6827a11fc0CBCe96D74DBc;\n\t\n    /* Variables */\n    \n    // Race starter\n    address public starter;\n    bool public gameStarted;\n    \n    // loop, timer, driver\n    uint256 public loop;\n    uint256 public timer;\n    address public driver;\n    \n    // Are we in hyperspeed?\n    bool public hyperSpeed = false;\n    \n    // Last driver claim\n    uint256 public lastHijack;\n    \n    // Pots\n    uint256 public loopChest;\n    uint256 public slugBank;\n    uint256 public thronePot;\n    \n    // Divs for one slug, max amount of slugs\n    uint256 public divPerSlug;\n    uint256 public maxSlug;\n    \t\n    /* Mappings */\n    \n    mapping (address => uint256) public slugNest;\n    mapping (address => uint256) public playerBalance;\n    mapping (address => uint256) public claimedDiv;\n    mapping (address => uint256) public mile;\n\t\n    /* Functions */\n    \n    //-- GAME START --\n    \n    // Constructor\n    // Sets msg.sender as starter, to start the game properly\n    \n    constructor() public {\n        starter = msg.sender;\n        gameStarted = false;\n    }\n    \n    // StartRace\n    // Initialize timer\n    // Set starter as driver (starter can't win or trade miles)\n    // Buy tokens for value of message\n    \n    function StartRace() public payable {\n        require(gameStarted == false);\n        require(msg.sender == starter);\n        \n        timer = now.add(RACE_TIMER_START).add(HYPERSPEED_LENGTH);\n        loop = 1;\n        gameStarted = true;\n        lastHijack = now;\n        driver = starter;\n        BuySlug();\n    }\n\n    //-- PRIVATE --\n\n    // PotSplit\n    // Called on buy and hatch\n    // 60% divs, 20% slugBank, 10% loopChest, 10% thronePot\n    \n    function PotSplit(uint256 _msgValue) private {\n        divPerSlug = divPerSlug.add(_msgValue.mul(3).div(5).div(maxSlug));\n        slugBank = slugBank.add(_msgValue.div(5));\n        loopChest = loopChest.add(_msgValue.div(10));\n        thronePot = thronePot.add(_msgValue.div(10));\n    }\n    \n    // ClaimDiv\n    // Sends player dividends to his playerBalance\n    // Adjusts claimable dividends\n    \n    function ClaimDiv() private {\n        uint256 _playerDiv = ComputeDiv(msg.sender);\n        \n        if(_playerDiv > 0){\n            //Add new divs to claimed divs\n            claimedDiv[msg.sender] = claimedDiv[msg.sender].add(_playerDiv);\n                \n            //Send divs to playerBalance\n            playerBalance[msg.sender] = playerBalance[msg.sender].add(_playerDiv);\n        }\n    }\n    \n    // BecomeDriver\n    // Gives driver role, and miles to previous driver\n    \n    function BecomeDriver() private {\n        \n        //give miles to previous driver\n        uint256 _mile = ComputeMileDriven();\n        mile[driver] = mile[driver].add(_mile);\n        \n        //if we're in hyperspeed, the new driver ends up 6 minutes before hyperspeed\n        if(now.add(HYPERSPEED_LENGTH) >= timer){\n            timer = now.add(DRIVER_TIMER_BOOST).add(HYPERSPEED_LENGTH);\n            \n            emit TookWheel(msg.sender, loopChest);\n            \n        //else, simply add 6 minutes to timer    \n        } else {\n            timer = timer.add(DRIVER_TIMER_BOOST);\n            \n            emit BecameDriver(msg.sender, loopChest);\n        }\n        \n        lastHijack = now;\n        driver = msg.sender;\n    }\n    \n    //-- ACTIONS --\n    \n    // TimeWarp\n    // Call manually when race is over\n    // Distributes loopchest and miles to winner, moves to next loop \n    \n    function TimeWarp() public {\n\t\trequire(gameStarted == true, \"game hasn't started yet\");\n        require(now >= timer, \"race isn't finished yet\");\n        \n        //give miles to driver\n        uint256 _mile = ComputeMileDriven();\n        mile[driver] = mile[driver].add(_mile);\n        \n        //Reset timer and start new loop \n        timer = now.add(RACE_TIMER_START).add(HYPERSPEED_LENGTH);\n        loop = loop.add(1);\n        \n        //Adjust loop and slug pots\n        uint256 _nextPot = slugBank.div(2);\n        slugBank = slugBank.sub(_nextPot);\n        \n        //Make sure the car isn't driving freely\n        if(driver != starter){\n            \n            //Calculate reward\n            uint256 _reward = loopChest;\n        \n            //Change loopchest\n            loopChest = _nextPot;\n        \n            //Give reward\n            playerBalance[driver] = playerBalance[driver].add(_reward);\n        \n            emit TimeWarped(driver, loop, _reward);\n            \n        //Else, start a new loop with different event    \n        } else {\n            \n            //Change loopchest\n            loopChest = loopChest.add(_nextPot);\n\n            emit NewLoop(msg.sender, loop);\n        }\n        \n        lastHijack = now;\n        //msg.sender becomes Driver\n        driver = msg.sender;\n    }\n    \n    // BuySlug\n    // Get token price, adjust maxSlug and divs, give slugs\n    \n    function BuySlug() public payable {\n        require(gameStarted == true, \"game hasn't started yet\");\n        require(tx.origin == msg.sender, \"contracts not allowed\");\n        require(msg.value <= TOKEN_MAX_BUY, \"maximum buy = 1 ETH\");\n\t\trequire(now <= timer, \"race is over!\");\n        \n        //Calculate price and resulting slugs\n        uint256 _slugBought = ComputeBuy(msg.value, true);\n            \n        //Adjust player claimed divs\n        claimedDiv[msg.sender] = claimedDiv[msg.sender].add(_slugBought.mul(divPerSlug));\n            \n        //Change maxSlug before new div calculation\n        maxSlug = maxSlug.add(_slugBought);\n            \n        //Divide incoming ETH\n        PotSplit(msg.value);\n            \n        //Add player slugs\n        slugNest[msg.sender] = slugNest[msg.sender].add(_slugBought);\n        \n\t\temit BoughtSlug(msg.sender, msg.value, _slugBought);\n\t\t\n        //Become driver if player bought at least 200 slugs\n        if(_slugBought >= 200){\n            BecomeDriver();\n        }       \n    }\n    \n    // SkipAhead\n    // Functions like BuySlug, using player balance\n    // Less cost per Slug (+1 loop)\n    \n    function SkipAhead() public {\n        require(gameStarted == true, \"game hasn't started yet\");\n        ClaimDiv();\n        require(playerBalance[msg.sender] > 0, \"no ether to timetravel\");\n\t\trequire(now <= timer, \"race is over!\");\n        \n        //Calculate price and resulting slugs\n        uint256 _etherSpent = playerBalance[msg.sender];\n        uint256 _slugHatched = ComputeBuy(_etherSpent, false);\n            \n        //Adjust player claimed divs (reinvest + new slugs) and balance\n        claimedDiv[msg.sender] = claimedDiv[msg.sender].add(_slugHatched.mul(divPerSlug));\n        playerBalance[msg.sender] = 0;\n            \n        //Change maxSlug before new div calculation\n        maxSlug = maxSlug.add(_slugHatched);\n                    \n        //Divide reinvested ETH\n        PotSplit(_etherSpent);\n            \n        //Add player slugs\n        slugNest[msg.sender] = slugNest[msg.sender].add(_slugHatched);\n        \n\t\temit SkippedAhead(msg.sender, _etherSpent, _slugHatched);\n\t\t\n        //Become driver if player hatched at least 200 slugs\n        if(_slugHatched >= 200){\n            BecomeDriver();\n        }\n    }\n    \n    // WithdrawBalance\n    // Sends player ingame ETH balance to his wallet\n    \n    function WithdrawBalance() public {\n        ClaimDiv();\n        require(playerBalance[msg.sender] > 0, \"no ether to withdraw\");\n        \n        uint256 _amount = playerBalance[msg.sender];\n        playerBalance[msg.sender] = 0;\n        msg.sender.transfer(_amount);\n        \n        emit WithdrewBalance(msg.sender, _amount);\n    }\n    \n    // ThrowSlug\n    // Throws slugs on the windshield to claim Driver\n    \n    function ThrowSlug() public {\n        require(gameStarted == true, \"game hasn't started yet\");\n        require(slugNest[msg.sender] >= THROW_SLUG_REQ, \"not enough slugs in nest\");\n        require(now <= timer, \"race is over!\");\n        \n        //Call ClaimDiv so ETH isn't blackholed\n        ClaimDiv();\n            \n        //Remove slugs\n        maxSlug = maxSlug.sub(THROW_SLUG_REQ);\n        slugNest[msg.sender] = slugNest[msg.sender].sub(THROW_SLUG_REQ);\n            \n        //Adjust msg.sender claimed dividends\n        claimedDiv[msg.sender] = claimedDiv[msg.sender].sub(THROW_SLUG_REQ.mul(divPerSlug));\n        \n\t\temit ThrewSlug(msg.sender);\n\t\t\n        //Run become driver function\n        BecomeDriver();\n    }\n    \n    // JumpOut\n    // Driver jumps out of the car to secure his ETH gains\n    // Give him his miles as well\n    \n    function JumpOut() public {\n        require(gameStarted == true, \"game hasn't started yet\");\n        require(msg.sender == driver, \"can't jump out if you're not in the car!\");\n        require(msg.sender != starter, \"starter isn't allowed to be driver\");\n        \n        //give miles to driver\n        uint256 _mile = ComputeMileDriven();\n        mile[driver] = mile[driver].add(_mile);\n        \n        //calculate reward\n        uint256 _reward = ComputeHyperReward();\n            \n        //remove reward from pot\n        loopChest = loopChest.sub(_reward);\n            \n        //put timer back to 1 hours (+1 hour of hyperspeed)\n        timer = now.add(HYPERSPEED_LENGTH.mul(2));\n            \n        //give player his reward\n        playerBalance[msg.sender] = playerBalance[msg.sender].add(_reward);\n        \n        //set driver as the starter\n        driver = starter;\n        \n        //set lastHijack to reset miles count to 0 (easier on frontend)\n        lastHijack = now;\n            \n        emit JumpedOut(msg.sender, _reward);\n    }\n    \n    // TradeMile\n    // Exchanges player miles for part of the pot\n    \n    function TradeMile() public {\n        require(mile[msg.sender] >= MILE_REQ, \"not enough miles for a reward\");\n        require(msg.sender != starter, \"starter isn't allowed to trade miles\");\n        require(msg.sender != driver, \"can't trade miles while driver\");\n        \n        //divide player miles by req\n\t\tuint256 _mile = mile[msg.sender].div(MILE_REQ);\n\t\t\n\t\t//can't get more than 20% of the pot at once\n\t\tif(_mile > 20){\n\t\t    _mile = 20;\n\t\t}\n        \n        //calculate reward\n        uint256 _reward = ComputeMileReward(_mile);\n        \n        //remove reward from pot\n        loopChest = loopChest.sub(_reward);\n        \n        //lower player miles by amount spent\n        mile[msg.sender] = mile[msg.sender].sub(_mile.mul(MILE_REQ));\n        \n        //give player his reward\n        playerBalance[msg.sender] = playerBalance[msg.sender].add(_reward);\n        \n        emit TradedMile(msg.sender, _reward, _mile);\n    }\n    \n    // PayThrone\n    // Sends thronePot to SnailThrone\n    \n    function PayThrone() public {\n        uint256 _payThrone = thronePot;\n        thronePot = 0;\n        if (!SNAILTHRONE.call.value(_payThrone)()){\n            revert();\n        }\n        \n        emit PaidThrone(msg.sender, _payThrone);\n    }\n    \n    // fallback function\n    // Feeds the slugBank\n    \n    function() public payable {\n        slugBank = slugBank.add(msg.value);\n        \n        emit BoostedPot(msg.sender, msg.value);\n    }\n    \n    //-- VIEW --\n\n    // ComputeHyperReward\n    // Returns ETH reward for driving in hyperspeed\n    // Reward = HYPERSPEED_LENGTH - (timer - now) * 0.01% * loopchest\n    // 0.01% = /10000\n    // This will throw before we're in hyperspeed, so account for that in frontend\n    \n    function ComputeHyperReward() public view returns(uint256) {\n        uint256 _remainder = timer.sub(now);\n        return HYPERSPEED_LENGTH.sub(_remainder).mul(loopChest).div(10000);\n    }\n\n    // ComputeSlugCost\n    // Returns ETH required to buy one slug\n    // 1 slug = (S_C_FLOOR + (loopchest / DIV_SLUG_COST)) / loop \n    // On hatch, add 1 to loop\n    \n    function ComputeSlugCost(bool _isBuy) public view returns(uint256) {\n        if(_isBuy == true){\n            return (SLUG_COST_FLOOR.add(loopChest.div(DIV_SLUG_COST))).div(loop);\n        } else {\n            return (SLUG_COST_FLOOR.add(loopChest.div(DIV_SLUG_COST))).div(loop.add(1));\n        }\n    }\n    \n    // ComputeBuy\n    // Returns slugs bought for a given amount of ETH\n    // True = buy, false = hatch\n    \n    function ComputeBuy(uint256 _ether, bool _isBuy) public view returns(uint256) {\n        uint256 _slugCost;\n        if(_isBuy == true){\n            _slugCost = ComputeSlugCost(true);\n        } else {\n            _slugCost = ComputeSlugCost(false);\n        }\n        return _ether.div(_slugCost);\n    }\n    \n    // ComputeDiv\n    // Returns unclaimed divs for a player\n    \n    function ComputeDiv(address _player) public view returns(uint256) {\n        //Calculate share of player\n        uint256 _playerShare = divPerSlug.mul(slugNest[_player]);\n\t\t\n        //Subtract already claimed divs\n    \t_playerShare = _playerShare.sub(claimedDiv[_player]);\n        return _playerShare;\n    }\n    \n    // ComputeSpeed\n    // Returns current speed\n    // speed = maxspeed - ((timer - _time - 1 hour) / accelFactor)\n    \n    function ComputeSpeed(uint256 _time) public view returns(uint256) {\n        \n        //check we're not in hyperspeed\n        if(timer > _time.add(HYPERSPEED_LENGTH)){\n            \n            //check we're not more than 7 days away from end\n            if(timer.sub(_time) < RACE_TIMER_START){\n                return MAX_SPEED.sub((timer.sub(_time).sub(HYPERSPEED_LENGTH)).div(ACCEL_FACTOR));\n            } else {\n                return MIN_SPEED; //more than 7 days away\n            }\n        } else {\n            return MAX_SPEED; //hyperspeed\n        }\n    }\n    \n    // ComputeMileDriven\n    // Returns miles driven during this driver session\n    \n    function ComputeMileDriven() public view returns(uint256) {\n        uint256 _speedThen = ComputeSpeed(lastHijack);\n        uint256 _speedNow = ComputeSpeed(now);\n        uint256 _timeDriven = now.sub(lastHijack);\n        uint256 _averageSpeed = (_speedNow.add(_speedThen)).div(2);\n        return _timeDriven.mul(_averageSpeed).div(HYPERSPEED_LENGTH);\n    }\n    \n    // ComputeMileReward\n    // Returns ether reward for a given multiplier of the req\n    \n    function ComputeMileReward(uint256 _reqMul) public view returns(uint256) {\n        return _reqMul.mul(loopChest).div(100);\n    }\n    \n    // GetNest\n    // Returns player slugs\n    \n    function GetNest(address _player) public view returns(uint256) {\n        return slugNest[_player];\n    }\n    \n    // GetMile\n    // Returns player mile\n    \n    function GetMile(address _player) public view returns(uint256) {\n        return mile[_player];\n    }\n    \n    // GetBalance\n    // Returns player balance\n    \n    function GetBalance(address _player) public view returns(uint256) {\n        return playerBalance[_player];\n    }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"lastHijack\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SLUG_COST_FLOOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"GetMile\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"TradeMile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MILE_REQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RACE_TIMER_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SPEED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"slugNest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"THROW_SLUG_REQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"slugBank\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ThrowSlug\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"GetBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SNAILTHRONE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_MAX_BUY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PayThrone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mile\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ether\",\"type\":\"uint256\"},{\"name\":\"_isBuy\",\"type\":\"bool\"}],\"name\":\"ComputeBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"TimeWarp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"driver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"ComputeDiv\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSlug\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"GetNest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"ComputeSpeed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loopChest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HYPERSPEED_LENGTH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedDiv\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_reqMul\",\"type\":\"uint256\"}],\"name\":\"ComputeMileReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_SPEED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DRIVER_TIMER_BOOST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"SkipAhead\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thronePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StartRace\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DIV_SLUG_COST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCEL_FACTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BuySlug\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divPerSlug\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ComputeMileDriven\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ComputeHyperReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_isBuy\",\"type\":\"bool\"}],\"name\":\"ComputeSlugCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"JumpOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hyperSpeed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"starter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"WithdrewBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"slug\",\"type\":\"uint256\"}],\"name\":\"BoughtSlug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"slug\",\"type\":\"uint256\"}],\"name\":\"SkippedAhead\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"mile\",\"type\":\"uint256\"}],\"name\":\"TradedMile\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"BecameDriver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"TookWheel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"}],\"name\":\"ThrewSlug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"JumpedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"loop\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"TimeWarped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"loop\",\"type\":\"uint256\"}],\"name\":\"NewLoop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"PaidThrone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"BoostedPot\",\"type\":\"event\"}]",
  "bytecode": "60806040526003805460a060020a60ff021916905534801561002057600080fd5b506000805460a060020a60ff0219600160a060020a03199091163317169055611df98061004e6000396000f30060806040526004361061023a5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663060400f881146102885780630d37af1c146102af5780630d9c4cd5146102c4578063189ed8cf146102e55780631ca9d3b0146102fc5780632160a4c514610311578063258d90df14610326578063299041ac1461033b57806331f853f31461035c578063349bb3bb14610371578063391a498a1461038657806343e2e5041461039b57806349427b6b146103bc5780634af202d0146103ed5780634c5f97b6146104025780634de8d1d4146104175780634e33f83b1461043857806357da04ba146104595780635e123ce41461047657806363b090ec1461049f5780636ecc5d62146104b457806372a2a1a9146104c9578063753c5220146104ea5780637dab38ed146104ff5780638767d0bd1461052057806388c9cb3c146105385780638aa70e271461054d57806398fab872146105625780639ac5f223146105775780639c3be7a3146105985780639d3c0b3c146105b0578063a1375142146105c5578063a39d716d146105da578063a92100cb146105ef578063bc3a699814610604578063bd69b07114610619578063bf013c041461062e578063bfa0e0e914610636578063c016ed4d1461064b578063c060db7314610660578063c0d8376b14610668578063d91328791461067d578063e7fc78ef14610692578063e8049991146106a7578063ea87712a146106c1578063f0651e6c146106d6578063f5a8492f146106eb575b60065461024d903463ffffffff61070016565b60065560408051348152905133917f02ab1e41f7e6cab4a9e4ccd1f35f0cf0d843cb000f1251dfb0eec75ba3538617919081900360200190a2005b34801561029457600080fd5b5061029d61071a565b60408051918252519081900360200190f35b3480156102bb57600080fd5b5061029d610720565b3480156102d057600080fd5b5061029d600160a060020a036004351661072a565b3480156102f157600080fd5b506102fa610749565b005b34801561030857600080fd5b5061029d6109a5565b34801561031d57600080fd5b5061029d6109ab565b34801561033257600080fd5b5061029d6109b2565b34801561034757600080fd5b5061029d600160a060020a03600435166109b8565b34801561036857600080fd5b5061029d6109ca565b34801561037d57600080fd5b5061029d6109cf565b34801561039257600080fd5b506102fa6109d5565b3480156103a757600080fd5b5061029d600160a060020a0360043516610bb5565b3480156103c857600080fd5b506103d1610bd0565b60408051600160a060020a039092168252519081900360200190f35b3480156103f957600080fd5b5061029d610be8565b34801561040e57600080fd5b506102fa610bf4565b34801561042357600080fd5b5061029d600160a060020a0360043516610c6a565b34801561044457600080fd5b5061029d600160a060020a0360043516610c7c565b34801561046557600080fd5b5061029d6004356024351515610c8e565b34801561048257600080fd5b5061048b610cd2565b604080519115158252519081900360200190f35b3480156104ab57600080fd5b506102fa610ce2565b3480156104c057600080fd5b506103d1610f70565b3480156104d557600080fd5b5061029d600160a060020a0360043516610f7f565b3480156104f657600080fd5b5061029d610fe1565b34801561050b57600080fd5b5061029d600160a060020a0360043516610fe7565b34801561052c57600080fd5b5061029d600435611002565b34801561054457600080fd5b5061029d6110a0565b34801561055957600080fd5b5061029d6110a6565b34801561056e57600080fd5b5061029d6110ac565b34801561058357600080fd5b5061029d600160a060020a03600435166110b2565b3480156105a457600080fd5b5061029d6004356110c4565b3480156105bc57600080fd5b5061029d6110e6565b3480156105d157600080fd5b5061029d6110eb565b3480156105e657600080fd5b506102fa6110f1565b3480156105fb57600080fd5b5061029d6111dc565b34801561061057600080fd5b506102fa6111e2565b34801561062557600080fd5b5061029d611415565b6102fa61141b565b34801561064257600080fd5b5061029d6114c7565b34801561065757600080fd5b5061029d6114cd565b6102fa6114d3565b34801561067457600080fd5b5061029d611711565b34801561068957600080fd5b5061029d611717565b34801561069e57600080fd5b5061029d611784565b3480156106b357600080fd5b5061029d60043515156117d1565b3480156106cd57600080fd5b506102fa611842565b3480156106e257600080fd5b5061048b611ae3565b3480156106f757600080fd5b506103d1611af3565b60008282018381101561070f57fe5b8091505b5092915050565b60045481565b6516bcc41e900081565b600160a060020a0381166000908152600d60205260409020545b919050565b336000908152600d6020526040812054819061177011156107b4576040805160e560020a62461bcd02815260206004820152601d60248201527f6e6f7420656e6f756768206d696c657320666f72206120726577617264000000604482015290519081900360640190fd5b600054600160a060020a031633141561083c576040805160e560020a62461bcd028152602060048201526024808201527f737461727465722069736e277420616c6c6f77656420746f207472616465206d60448201527f696c657300000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600354600160a060020a031633141561089f576040805160e560020a62461bcd02815260206004820152601e60248201527f63616e2774207472616465206d696c6573207768696c65206472697665720000604482015290519081900360640190fd5b336000908152600d60205260409020546108c19061177063ffffffff611b0216565b915060148211156108d157601491505b6108da826110c4565b6005549091506108f0908263ffffffff611b1916565b6005556109246109088361177063ffffffff611b2b16565b336000908152600d60205260409020549063ffffffff611b1916565b336000908152600d6020908152604080832093909355600b90522054610950908263ffffffff61070016565b336000818152600b6020908152604091829020939093558051848152928301859052805191927f3b0c9567f4293c87fbe62bf2dcaa0a6fff4ec5201fcd73bfd034143b3ac3ced8929081900390910190a25050565b61177081565b62093a8081565b6103e881565b600a6020526000908152604090205481565b60c881565b60065481565b60005460a060020a900460ff161515600114610a29576040805160e560020a62461bcd0281526020600482015260176024820152600080516020611dae833981519152604482015290519081900360640190fd5b336000908152600a602052604090205460c81115610a91576040805160e560020a62461bcd02815260206004820152601860248201527f6e6f7420656e6f75676820736c75677320696e206e6573740000000000000000604482015290519081900360640190fd5b600254421115610aeb576040805160e560020a62461bcd02815260206004820152600d60248201527f72616365206973206f7665722100000000000000000000000000000000000000604482015290519081900360640190fd5b610af3611b56565b600954610b079060c863ffffffff611b1916565b600955336000908152600a6020526040902054610b2b9060c863ffffffff611b1916565b336000908152600a6020526040902055600854610b7090610b549060c89063ffffffff611b2b16565b336000908152600c60205260409020549063ffffffff611b1916565b336000818152600c602052604080822093909355915190917fc3414d62567e77427f07b26d625cf191295a7bfd57ec2b49686914339aced65c91a2610bb3611bcb565b565b600160a060020a03166000908152600b602052604090205490565b73261d650a521103428c6827a11fc0cbce96d74dbc81565b670de0b6b3a764000081565b60078054600091829055604051909173261d650a521103428c6827a11fc0cbce96d74dbc91839181818185875af1925050501515610c3157600080fd5b60408051828152905133917ffd2b287395e90cf1891bf11bd61ab2c174577b8854eb26c5d22c6321f969387d919081900360200190a250565b600d6020526000908152604090205481565b600b6020526000908152604090205481565b60008060018315151415610cad57610ca660016117d1565b9050610cba565b610cb760006117d1565b90505b610cca848263ffffffff611b0216565b949350505050565b60005460a060020a900460ff1681565b600080548190819060a060020a900460ff161515600114610d3b576040805160e560020a62461bcd0281526020600482015260176024820152600080516020611dae833981519152604482015290519081900360640190fd5b600254421015610d95576040805160e560020a62461bcd02815260206004820152601760248201527f726163652069736e27742066696e697368656420796574000000000000000000604482015290519081900360640190fd5b610d9d611717565b600354600160a060020a03166000908152600d6020526040902054909350610dcb908463ffffffff61070016565b600354600160a060020a03166000908152600d6020526040902055610e0b610e10610dff4262093a8063ffffffff61070016565b9063ffffffff61070016565b60025560018054610e219163ffffffff61070016565b600155600654610e3890600263ffffffff611b0216565b600654909250610e4e908363ffffffff611b1916565b600655600054600354600160a060020a03908116911614610f0357506005805490829055600354600160a060020a03166000908152600b6020526040902054610e9d908263ffffffff61070016565b60038054600160a060020a039081166000908152600b60209081526040918290209490945560015492548151868152915193949216927fc50fa11ae53e502c906177cadf15685e1e9efa1e677d4b9ac6a914e08bd9bf42929181900390910190a3610f48565b600554610f16908363ffffffff61070016565b60055560015460405133907fadfef8fb947d4cb55cf1b0907c4da55aa0f8b4ff6024da26a54ccd22cc502b7c90600090a35b505042600455506003805473ffffffffffffffffffffffffffffffffffffffff191633179055565b600354600160a060020a031681565b600160a060020a0381166000908152600a60205260408120546008548291610fad919063ffffffff611b2b16565b600160a060020a0384166000908152600c6020526040902054909150610fda90829063ffffffff611b1916565b9392505050565b60095481565b600160a060020a03166000908152600a602052604090205490565b600061101682610e1063ffffffff61070016565b60025411156110975760025462093a8090611037908463ffffffff611b1916565b101561108f576110886110796102a061106d610e1061106187600254611b1990919063ffffffff16565b9063ffffffff611b1916565b9063ffffffff611b0216565b6103e89063ffffffff611b1916565b9050610744565b506064610744565b506103e8610744565b60025481565b60055481565b610e1081565b600c6020526000908152604090205481565b60006110e0606461106d60055485611b2b90919063ffffffff16565b92915050565b606481565b61016881565b60006110fb611b56565b336000908152600b602052604081205411611160576040805160e560020a62461bcd02815260206004820152601460248201527f6e6f20657468657220746f207769746864726177000000000000000000000000604482015290519081900360640190fd5b50336000818152600b6020526040808220805490839055905190929183156108fc02918491818181858888f193505050501580156111a2573d6000803e3d6000fd5b5060408051828152905133917f3b57c8ab659a2ed2a5b1674c7197d3cfefb18665ee17600906500f02dd3a306c919081900360200190a250565b60015481565b60008054819060a060020a900460ff161515600114611239576040805160e560020a62461bcd0281526020600482015260176024820152600080516020611dae833981519152604482015290519081900360640190fd5b611241611b56565b336000908152600b6020526040812054116112a6576040805160e560020a62461bcd02815260206004820152601660248201527f6e6f20657468657220746f2074696d6574726176656c00000000000000000000604482015290519081900360640190fd5b600254421115611300576040805160e560020a62461bcd02815260206004820152600d60248201527f72616365206973206f7665722100000000000000000000000000000000000000604482015290519081900360640190fd5b336000908152600b6020526040812054925061131d908390610c8e565b905061135361133760085483611b2b90919063ffffffff16565b336000908152600c60205260409020549063ffffffff61070016565b336000908152600c6020908152604080832093909355600b905290812055600954611384908263ffffffff61070016565b60095561139082611d07565b336000908152600a60205260409020546113b0908263ffffffff61070016565b336000818152600a6020908152604091829020939093558051858152928301849052805191927fb8fdd5f083245abdd38188b13a7fa8dd7c22d02e33f9ecb2782dc71dbb7b1059929081900390910190a260c8811061141157611411611bcb565b5050565b60075481565b60005460a060020a900460ff161561143257600080fd5b600054600160a060020a0316331461144957600080fd5b611462610e10610dff4262093a8063ffffffff61070016565b600255600180556000805474ff0000000000000000000000000000000000000000191660a060020a1790819055426004556003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055610bb36114d3565b61271081565b6102a081565b6000805460a060020a900460ff161515600114611528576040805160e560020a62461bcd0281526020600482015260176024820152600080516020611dae833981519152604482015290519081900360640190fd5b32331461157f576040805160e560020a62461bcd02815260206004820152601560248201527f636f6e747261637473206e6f7420616c6c6f7765640000000000000000000000604482015290519081900360640190fd5b670de0b6b3a76400003411156115df576040805160e560020a62461bcd02815260206004820152601360248201527f6d6178696d756d20627579203d20312045544800000000000000000000000000604482015290519081900360640190fd5b600254421115611639576040805160e560020a62461bcd02815260206004820152600d60248201527f72616365206973206f7665722100000000000000000000000000000000000000604482015290519081900360640190fd5b611644346001610c8e565b905061165e61133760085483611b2b90919063ffffffff16565b336000908152600c6020526040902055600954611681908263ffffffff61070016565b60095561168d34611d07565b336000908152600a60205260409020546116ad908263ffffffff61070016565b336000818152600a6020908152604091829020939093558051348152928301849052805191927f3c64cc25ab9d35b96d1591eef5b16990ef46968da37ab65b92a39ef3c40ae7eb929081900390910190a260c8811061170e5761170e611bcb565b50565b60085481565b600080600080600061172a600454611002565b935061173542611002565b925061174c60045442611b1990919063ffffffff16565b9150611763600261106d858763ffffffff61070016565b905061177b610e1061106d848463ffffffff611b2b16565b94505050505090565b60008061179c42600254611b1990919063ffffffff16565b90506117cb61271061106d6005546117bf85610e10611b1990919063ffffffff16565b9063ffffffff611b2b16565b91505090565b6000600182151514156118115761108860015461106d6117fe612710600554611b0290919063ffffffff16565b6516bcc41e90009063ffffffff61070016565b6110886118296001805461070090919063ffffffff16565b60055461106d906117fe9061271063ffffffff611b0216565b60008054819060a060020a900460ff161515600114611899576040805160e560020a62461bcd0281526020600482015260176024820152600080516020611dae833981519152604482015290519081900360640190fd5b600354600160a060020a03163314611921576040805160e560020a62461bcd02815260206004820152602860248201527f63616e2774206a756d70206f757420696620796f75277265206e6f7420696e2060448201527f7468652063617221000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600054600160a060020a03163314156119aa576040805160e560020a62461bcd02815260206004820152602260248201527f737461727465722069736e277420616c6c6f77656420746f206265206472697660448201527f6572000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6119b2611717565b600354600160a060020a03166000908152600d60205260409020549092506119e0908363ffffffff61070016565b600354600160a060020a03166000908152600d6020526040902055611a03611784565b600554909150611a19908263ffffffff611b1916565b600555611a3f611a32610e10600263ffffffff611b2b16565b429063ffffffff61070016565b600255336000908152600b6020526040902054611a62908263ffffffff61070016565b336000818152600b602090815260408083209490945590546003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055426004558251848152925191927f4e08e7ecbe58ad7af74171bb2fc7cd3724593d95ec2e03ea4bdb2557af8eb455929081900390910190a25050565b60035460a060020a900460ff1681565b600054600160a060020a031681565b6000808284811515611b1057fe5b04949350505050565b600082821115611b2557fe5b50900390565b600080831515611b3e5760009150610713565b50828202828482811515611b4e57fe5b041461070f57fe5b6000611b6133610f7f565b9050600081111561170e57336000908152600c6020526040902054611b8c908263ffffffff61070016565b336000908152600c6020908152604080832093909355600b90522054611bb8908263ffffffff61070016565b336000908152600b602052604090205550565b6000611bd5611717565b600354600160a060020a03166000908152600d6020526040902054909150611c03908263ffffffff61070016565b600354600160a060020a03166000908152600d6020526040902055600254611c3342610e1063ffffffff61070016565b10611c9057611c50610e10610dff4261016863ffffffff61070016565b600255600554604080519182525133917fadf6220a588104749601706697313531f36af5e03750678c389911f6bf55bd1c919081900360200190a2611ce1565b600254611ca59061016863ffffffff61070016565b600255600554604080519182525133917f15571f589608f747b4d4a04ad5f37b668bb2f904e20ba197aaf5c5098ca3ecc0919081900360200190a25b50426004556003805473ffffffffffffffffffffffffffffffffffffffff191633179055565b600954611d3590611d269061106d60058186600363ffffffff611b2b16565b6008549063ffffffff61070016565b600855611d5b611d4c82600563ffffffff611b0216565b6006549063ffffffff61070016565b600655611d81611d7282600a63ffffffff611b0216565b6005549063ffffffff61070016565b600555611da7611d9882600a63ffffffff611b0216565b6007549063ffffffff61070016565b60075550560067616d65206861736e2774207374617274656420796574000000000000000000a165627a7a7230582081b9dd0e800c87094a75a11d4c954bcae60849fdd106ba56ed24b1a9fd6ad9760029"
}