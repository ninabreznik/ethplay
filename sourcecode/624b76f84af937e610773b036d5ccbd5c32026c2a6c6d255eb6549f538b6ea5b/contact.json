{
  "address": "0xdc078ff399d0001c31454e83896e8881d164fb95",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ShrimpFarmer",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-18\n*/\n\npragma solidity ^0.4.18; // solhint-disable-line\n\n// similar as shrimpfarmer, with three changes:\n// A. one third of your snails die when you sell eggs\n// B. you can transfer ownership of the devfee through sacrificing snails\n// C. the \"free\" 300 snails cost 0.001 eth (in line with the mining fee)\n\n// bots should have a harder time, and whales can compete for the devfee\n\ncontract ShrimpFarmer{\n    //uint256 EGGS_PER_SHRIMP_PER_SECOND=1;\n    uint256 public EGGS_TO_HATCH_1SHRIMP=86400;//for final version should be seconds in a day\n    uint256 public STARTING_SHRIMP=300;\n    uint256 PSN=10000;\n    uint256 PSNH=5000;\n    bool public initialized=false;\n    address public ceoAddress;\n    mapping (address => uint256) public hatcheryShrimp;\n    mapping (address => uint256) public claimedEggs;\n    mapping (address => uint256) public lastHatch;\n    mapping (address => address) public referrals;\n    uint256 public marketEggs;\n    uint256 public snailmasterReq=100000;\n    function ShrimpFarmer() public{\n        ceoAddress=msg.sender;\n    }\n    function becomeSnailmaster() public{\n        require(initialized);\n        require(hatcheryShrimp[msg.sender]>=snailmasterReq);\n        hatcheryShrimp[msg.sender]=SafeMath.sub(hatcheryShrimp[msg.sender],snailmasterReq);\n        snailmasterReq=SafeMath.add(snailmasterReq,100000);//+100k shrimps each time\n        ceoAddress=msg.sender;\n    }\n    function hatchEggs(address ref) public{\n        require(initialized);\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\n            referrals[msg.sender]=ref;\n        }\n        uint256 eggsUsed=getMyEggs();\n        uint256 newShrimp=SafeMath.div(eggsUsed,EGGS_TO_HATCH_1SHRIMP);\n        hatcheryShrimp[msg.sender]=SafeMath.add(hatcheryShrimp[msg.sender],newShrimp);\n        claimedEggs[msg.sender]=0;\n        lastHatch[msg.sender]=now;\n        \n        //send referral eggs\n        claimedEggs[referrals[msg.sender]]=SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,5));\n        \n        //boost market to nerf shrimp hoarding\n        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,10));\n    }\n    function sellEggs() public{\n        require(initialized);\n        uint256 hasEggs=getMyEggs();\n        uint256 eggValue=calculateEggSell(hasEggs);\n        uint256 fee=devFee(eggValue);\n        // kill one third of the owner's snails on egg sale\n        hatcheryShrimp[msg.sender]=SafeMath.mul(SafeMath.div(hatcheryShrimp[msg.sender],3),2);\n        claimedEggs[msg.sender]=0;\n        lastHatch[msg.sender]=now;\n        marketEggs=SafeMath.add(marketEggs,hasEggs);\n        ceoAddress.transfer(fee);\n        msg.sender.transfer(SafeMath.sub(eggValue,fee));\n    }\n    function buyEggs() public payable{\n        require(initialized);\n        uint256 eggsBought=calculateEggBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\n        ceoAddress.transfer(devFee(msg.value));\n        claimedEggs[msg.sender]=SafeMath.add(claimedEggs[msg.sender],eggsBought);\n    }\n    //magic trade balancing algorithm\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n    }\n    function calculateEggSell(uint256 eggs) public view returns(uint256){\n        return calculateTrade(eggs,marketEggs,this.balance);\n    }\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n        return calculateTrade(eth,contractBalance,marketEggs);\n    }\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\n        return calculateEggBuy(eth,this.balance);\n    }\n    function devFee(uint256 amount) public view returns(uint256){\n        return SafeMath.div(SafeMath.mul(amount,4),100);\n    }\n    function seedMarket(uint256 eggs) public payable{\n        require(marketEggs==0);\n        initialized=true;\n        marketEggs=eggs;\n    }\n    function getFreeShrimp() public payable{\n        require(initialized);\n        require(msg.value==0.001 ether); //similar to mining fee, prevents bots\n        ceoAddress.transfer(msg.value); //snailmaster gets this entrance fee\n        require(hatcheryShrimp[msg.sender]==0);\n        lastHatch[msg.sender]=now;\n        hatcheryShrimp[msg.sender]=STARTING_SHRIMP;\n    }\n    function getBalance() public view returns(uint256){\n        return this.balance;\n    }\n    function getMyShrimp() public view returns(uint256){\n        return hatcheryShrimp[msg.sender];\n    }\n    function getSnailmasterReq() public view returns(uint256){\n        return snailmasterReq;\n    }\n    function getMyEggs() public view returns(uint256){\n        return SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender));\n    }\n    function getEggsSinceLastHatch(address adr) public view returns(uint256){\n        uint256 secondsPassed=min(EGGS_TO_HATCH_1SHRIMP,SafeMath.sub(now,lastHatch[adr]));\n        return SafeMath.mul(secondsPassed,hatcheryShrimp[adr]);\n    }\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getFreeShrimp\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSnailmasterReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatchEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyEggs\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EGGS_TO_HATCH_1SHRIMP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcheryShrimp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"snailmasterReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyShrimp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getEggsSinceLastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_SHRIMP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"becomeSnailmaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]",
  "bytecode": "60606040526201518060005561012c6001556127106002556113886003556000600460006101000a81548160ff021916908315150217905550620186a0600a55341561004a57600080fd5b33600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061153b8061009a6000396000f300606060405260043610610154576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a0f81681461015957806312065fe0146101ae578063158ef93e146101d7578063229824c41461020457806323b3c7711461024d57806326fd842214610257578063286eab15146102975780632e9392bb146102c05780633955f0fe146102e95780633b653755146102fe5780633bc0461a146103165780633ec862a81461034d57806343ce742214610386578063467ece79146103af5780634f74acfe146103fc5780637267036114610406578063732e77d0146104535780637e2cb9741461047c5780637e56fde5146104c95780638574ddf9146105005780638e316327146105295780639ca423b314610560578063c2127e03146105d9578063d7c8843b14610602578063fb05594f1461064f578063fe3c5d8014610678575b600080fd5b341561016457600080fd5b61016c61068d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101b957600080fd5b6101c16106b3565b6040518082815260200191505060405180910390f35b34156101e257600080fd5b6101ea6106d2565b604051808215151515815260200191505060405180910390f35b341561020f57600080fd5b61023760048080359060200190919080359060200190919080359060200190919050506106e5565b6040518082815260200191505060405180910390f35b610255610738565b005b341561026257600080fd5b61028160048080359060200190919080359060200190919050506108a4565b6040518082815260200191505060405180910390f35b34156102a257600080fd5b6102aa6108bb565b6040518082815260200191505060405180910390f35b34156102cb57600080fd5b6102d36108c5565b6040518082815260200191505060405180910390f35b34156102f457600080fd5b6102fc6108cb565b005b6103146004808035906020019091905050610aed565b005b341561032157600080fd5b6103376004808035906020019091905050610b23565b6040518082815260200191505060405180910390f35b341561035857600080fd5b610384600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b41565b005b341561039157600080fd5b610399610f95565b6040518082815260200191505060405180910390f35b34156103ba57600080fd5b6103e6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610fed565b6040518082815260200191505060405180910390f35b610404611005565b005b341561041157600080fd5b61043d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061115b565b6040518082815260200191505060405180910390f35b341561045e57600080fd5b610466611173565b6040518082815260200191505060405180910390f35b341561048757600080fd5b6104b3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611179565b6040518082815260200191505060405180910390f35b34156104d457600080fd5b6104ea6004808035906020019091905050611191565b6040518082815260200191505060405180910390f35b341561050b57600080fd5b6105136111bb565b6040518082815260200191505060405180910390f35b341561053457600080fd5b61054a60048080359060200190919050506111c1565b6040518082815260200191505060405180910390f35b341561056b57600080fd5b610597600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111ee565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105e457600080fd5b6105ec611221565b6040518082815260200191505060405180910390f35b341561060d57600080fd5b610639600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611268565b6040518082815260200191505060405180910390f35b341561065a57600080fd5b610662611312565b6040518082815260200191505060405180910390f35b341561068357600080fd5b61068b611318565b005b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b600460009054906101000a900460ff1681565b600061072f6106f660025484611469565b61072a60035461072561071f61070e6002548a611469565b61071a6003548c611469565b6114a4565b896114c2565b6114a4565b6114c2565b90509392505050565b600460009054906101000a900460ff16151561075357600080fd5b66038d7ea4c680003414151561076857600080fd5b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015156107ca57600080fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561081857600080fd5b42600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600154600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60006108b383836009546106e5565b905092915050565b6000600a54905090565b60095481565b6000806000600460009054906101000a900460ff1615156108eb57600080fd5b6108f3610f95565b92506108fe836111c1565b915061090982610b23565b905061095f610958600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460036114c2565b6002611469565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a37600954846114a4565b600981905550600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515610a9f57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc610ac384846114dd565b9081150290604051600060405180830381858888f193505050501515610ae857600080fd5b505050565b6000600954141515610afe57600080fd5b6001600460006101000a81548160ff0219169083151502179055508060098190555050565b6000610b3a610b33836004611469565b60646114c2565b9050919050565b600080600460009054906101000a900460ff161515610b5f57600080fd5b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015610c6f57503373ffffffffffffffffffffffffffffffffffffffff16600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15610cf35782600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b610cfb610f95565b9150610d09826000546114c2565b9050610d54600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826114a4565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ed260066000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ecd8460056114c2565b6114a4565b60066000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f8a600954610f8584600a6114c2565b6114a4565b600981905550505050565b6000610fe8600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fe333611268565b6114a4565b905090565b60076020528060005260406000206000915090505481565b6000600460009054906101000a900460ff16151561102257600080fd5b61104c346110473073ffffffffffffffffffffffffffffffffffffffff1631346114dd565b6108a4565b90506110608161105b83610b23565b6114dd565b9050600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6110a734610b23565b9081150290604051600060405180830381858888f1935050505015156110cc57600080fd5b611115600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826114a4565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60066020528060005260406000206000915090505481565b60005481565b60056020528060005260406000206000915090505481565b60006111b4823073ffffffffffffffffffffffffffffffffffffffff16316108a4565b9050919050565b600a5481565b60006111e7826009543073ffffffffffffffffffffffffffffffffffffffff16316106e5565b9050919050565b60086020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000806112bf6000546112ba42600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114dd565b6114f6565b905061130a81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611469565b915050919050565b60015481565b600460009054906101000a900460ff16151561133357600080fd5b600a54600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561138357600080fd5b6113ce600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600a546114dd565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611420600a54620186a06114a4565b600a8190555033600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600080600084141561147e576000915061149d565b828402905082848281151561148f57fe5b0414151561149957fe5b8091505b5092915050565b60008082840190508381101515156114b857fe5b8091505092915050565b60008082848115156114d057fe5b0490508091505092915050565b60008282111515156114eb57fe5b818303905092915050565b60008183106115055781611507565b825b9050929150505600a165627a7a72305820e39cabaf765044946b0f9d5881d9886bc67aa6bcb02e021622c8f2d82e7f3e010029"
}