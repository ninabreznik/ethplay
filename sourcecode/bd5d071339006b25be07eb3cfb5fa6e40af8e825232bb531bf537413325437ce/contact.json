{
  "address": "0x9e4ad79049282f942c1b4c9b418f0357a0637017",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Noxon",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-02\n*/\n\npragma solidity ^ 0.4.17;\n\n/*\nOld contract: (2016-2017) 0x3F2D17ed39876c0864d321D8a533ba8080273EdE\n\n1. Transfer Ether to contract for get tokens\nThe exchange rate is calculated at the time of receipt of payment and is:\n\n_emissionPrice = this.balance / _totalSupply * 2\n\n2. Transfer tokens back to the contract for withdraw ETH \nin proportion to your share of the reserve fund (contract balance), the tokens themselves are destroyed (burned).\n\n_burnPrice = this.balance / _totalSupply\n\n*/\n\n// ----------------------------------------------------------------------------\n// Safe maths from OpenZeppelin\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n\tfunction mul(uint256 a, uint256 b) internal constant returns(uint256) {\n\t\tuint256 c = a * b;\n\t\tassert(a == 0 || c / a == b);\n\t\treturn c;\n\t}\n\n\tfunction div(uint256 a, uint256 b) internal constant returns(uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\tuint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn c;\n\t}\n\n\tfunction sub(uint256 a, uint256 b) internal constant returns(uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\tfunction add(uint256 a, uint256 b) internal constant returns(uint256) {\n\t\tuint256 c = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/issues/20\ncontract ERC20Interface {\n\tfunction totalSupply() public constant returns(uint256 totalSupplyReturn);\n\n\tfunction balanceOf(address _owner) public constant returns(uint256 balance);\n\n\tfunction transfer(address _to, uint256 _value) public returns(bool success);\n\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns(bool success);\n\n\tfunction approve(address _spender, uint256 _value) public returns(bool success);\n\n\tfunction allowance(address _owner, address _spender) public constant returns(uint256 remaining);\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\ncontract Noxon is ERC20Interface {\n\tusing SafeMath for uint;\n\n\tstring public constant symbol = \"NOXON\";\n\tstring public constant name = \"NOXON\";\n\tuint8 public constant decimals = 0; //warning! dividing rounds down, the remainder of the division is the profit of the contract\n\tuint256 _totalSupply = 0;\n\tuint256 _burnPrice;\n\tuint256 _emissionPrice;\n\tuint256 initialized;\n\t\n\tbool public emissionlocked = false;\n\t// Owner of this contract\n\taddress public owner;\n\taddress public manager;\n\n\t// Balances for each account\n\tmapping(address => uint256) balances;\n\n\t// Owner of account approves the transfer of an amount to another account\n\tmapping(address => mapping(address => uint256)) allowed;\n\n\t// Functions with this modifier can only be executed by the owner\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n\taddress newOwner;\n\taddress newManager;\n\t// BK Ok - Only owner can assign new proposed owner\n\tfunction changeOwner(address _newOwner) public onlyOwner {\n\t\tnewOwner = _newOwner;\n\t}\n\n\t// BK Ok - Only new proposed owner can accept ownership \n\tfunction acceptOwnership() public {\n\t\tif (msg.sender == newOwner) {\n\t\t\towner = newOwner;\n\t\t\tnewOwner = address(0);\n\t\t}\n\t}\n\n\n\tfunction changeManager(address _newManager) public onlyOwner {\n\t\tnewManager = _newManager;\n\t}\n\n\n\tfunction acceptManagership() public {\n\t\tif (msg.sender == newManager) {\n\t\t\tmanager = newManager;\n            newManager = address(0);\n\t\t}\n\t}\n\n\t// Constructor\n\t\n\tfunction Noxon() public {\n        require(_totalSupply == 0);\n\t\towner = msg.sender;\n\t\tmanager = owner;\n        \n\t}\n\tfunction NoxonInit() public payable onlyOwner returns (bool) {\n\t\trequire(_totalSupply == 0);\n\t\trequire(initialized == 0);\n\t\trequire(msg.value > 0);\n\t\tTransfer(0, msg.sender, 1);\n\t\tbalances[owner] = 1; //owner got 1 token\n\t\t_totalSupply = balances[owner];\n\t\t_burnPrice = msg.value;\n\t\t_emissionPrice = _burnPrice.mul(2);\n\t\tinitialized = block.timestamp;\n\t\treturn true;\n\t}\n\n\t//The owner can turn off accepting new ether\n\tfunction lockEmission() public onlyOwner {\n\t\temissionlocked = true;\n\t}\n\n\tfunction unlockEmission() public onlyOwner {\n\t\temissionlocked = false;\n\t}\n\n\tfunction totalSupply() public constant returns(uint256) {\n\t\treturn _totalSupply;\n\t}\n\n\tfunction burnPrice() public constant returns(uint256) {\n\t\treturn _burnPrice;\n\t}\n\n\tfunction emissionPrice() public constant returns(uint256) {\n\t\treturn _emissionPrice;\n\t}\n\n\t// What is the balance of a particular account?\n\tfunction balanceOf(address _owner) public constant returns(uint256 balance) {\n\t\treturn balances[_owner];\n\t}\n\n\t// Transfer the balance from owner's account to another account\n\tfunction transfer(address _to, uint256 _amount) public returns(bool success) {\n\n\t\t// if you send TOKENS to the contract they will be burned and you will return part of Ether from smart contract\n\t\tif (_to == address(this)) {\n\t\t\treturn burnTokens(_amount);\n\t\t} else {\n\n\t\t\tif (balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) {\n\t\t\t\tbalances[msg.sender] = balances[msg.sender].sub(_amount);\n\t\t\t\tbalances[_to] = balances[_to].add(_amount);\n\t\t\t\tTransfer(msg.sender, _to, _amount);\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t}\n\t}\n\n\tfunction burnTokens(uint256 _amount) private returns(bool success) {\n\n\t\t_burnPrice = getBurnPrice();\n\t\tuint256 _burnPriceTmp = _burnPrice;\n\n\t\tif (balances[msg.sender] >= _amount && _amount > 0) {\n\n\t\t\t// subtracts the amount from seller's balance and suply\n\t\t\tbalances[msg.sender] = balances[msg.sender].sub(_amount);\n\t\t\t_totalSupply = _totalSupply.sub(_amount);\n\n\t\t\t//do not allow sell last share (fear of dividing by zero)\n\t\t\tassert(_totalSupply >= 1);\n\n\t\t\t// sends ether to the seller\n\t\t\tmsg.sender.transfer(_amount.mul(_burnPrice));\n\n\t\t\t//check new burn price\n\t\t\t_burnPrice = getBurnPrice();\n\n\t\t\t//only growth required \n\t\t\tassert(_burnPrice >= _burnPriceTmp);\n\n\t\t\t//send event\n\t\t\tTokenBurned(msg.sender, _amount.mul(_burnPrice), _burnPrice, _amount);\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tevent TokenBought(address indexed buyer, uint256 ethers, uint _emissionedPrice, uint amountOfTokens);\n\tevent TokenBurned(address indexed buyer, uint256 ethers, uint _burnedPrice, uint amountOfTokens);\n\n\tfunction () public payable {\n\t    //buy tokens\n\n\t\t//save tmp for double check in the end of function\n\t\t//_burnPrice never changes when someone buy tokens\n\t\tuint256 _burnPriceTmp = _burnPrice;\n\n\t\trequire(emissionlocked == false);\n\t\trequire(_burnPrice > 0 && _emissionPrice > _burnPrice);\n\t\trequire(msg.value > 0);\n\n\t\t// calculate the amount\n\t\tuint256 amount = msg.value / _emissionPrice;\n\n\t\t//check overflow\n\t\trequire(balances[msg.sender] + amount > balances[msg.sender]);\n\n\t\t// adds the amount to buyer's balance\n\t\tbalances[msg.sender] = balances[msg.sender].add(amount);\n\t\t_totalSupply = _totalSupply.add(amount);\n\n        uint mg = msg.value / 2;\n\t\t//send 50% to manager\n\t\tmanager.transfer(mg);\n\t\tTokenBought(msg.sender, msg.value, _emissionPrice, amount);\n\n\t\t//are prices unchanged?   \n\t\t_burnPrice = getBurnPrice();\n\t\t_emissionPrice = _burnPrice.mul(2);\n\n\t\t//\"only growth\"\n\t\tassert(_burnPrice >= _burnPriceTmp);\n\t}\n    \n\tfunction getBurnPrice() public returns(uint) {\n\t\treturn this.balance / _totalSupply;\n\t}\n\n\tevent EtherReserved(uint etherReserved);\n\t//add Ether to reserve fund without issue new tokens (prices will growth)\n\n\tfunction addToReserve() public payable returns(bool) {\n\t    uint256 _burnPriceTmp = _burnPrice;\n\t\tif (msg.value > 0) {\n\t\t\t_burnPrice = getBurnPrice();\n\t\t\t_emissionPrice = _burnPrice.mul(2);\n\t\t\tEtherReserved(msg.value);\n\t\t\t\n\t\t\t//\"only growth\" check \n\t\t    assert(_burnPrice >= _burnPriceTmp);\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Send _value amount of tokens from address _from to address _to\n\t// The transferFrom method is used for a withdraw workflow, allowing contracts to send\n\t// tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n\t// fees in sub-currencies; the command should fail unless the _from account has\n\t// deliberately authorized the sender of the message via some mechanism; we propose\n\t// these standardized APIs for approval:\n\tfunction transferFrom(\n\t\taddress _from,\n\t\taddress _to,\n\t\tuint256 _amount\n\t) public returns(bool success) {\n\t\tif (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to] && _to != address(this) //not allow burn tockens from exhanges\n\t\t) {\n\t\t\tbalances[_from] = balances[_from].sub(_amount);\n\t\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n\t\t\tbalances[_to] = balances[_to].add(_amount);\n\t\t\tTransfer(_from, _to, _amount);\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n\t// If this function is called again it overwrites the current allowance with _value.\n\tfunction approve(address _spender, uint256 _amount) public returns(bool success) {\n\t\tallowed[msg.sender][_spender] = _amount;\n\t\tApproval(msg.sender, _spender, _amount);\n\t\treturn true;\n\t}\n\n\tfunction allowance(address _owner, address _spender) public constant returns(uint256 remaining) {\n\t\treturn allowed[_owner][_spender];\n\t}\n\n\tfunction transferAnyERC20Token(address tokenAddress, uint amount)\n\tpublic\n\tonlyOwner returns(bool success) {\n\t\treturn ERC20Interface(tokenAddress).transfer(owner, amount);\n\t}\n\n\tfunction burnAll() external returns(bool) {\n\t\treturn burnTokens(balances[msg.sender]);\n\t}\n    \n    \n}\n\ncontract TestProcess {\n    Noxon main;\n    \n    function TestProcess() payable {\n        main = new Noxon();\n    }\n   \n    function () payable {\n        \n    }\n     \n    function init() returns (uint) {\n       \n        if (!main.NoxonInit.value(12)()) throw;    //init and set burn price as 12 and emission price to 24 \n        if (!main.call.value(24)()) revert(); //buy 1 token\n \n        assert(main.balanceOf(address(this)) == 2); \n        \n        if (main.call.value(23)()) revert(); //send small amount (must be twhrowed)\n        assert(main.balanceOf(address(this)) == 2); \n    }\n    \n    \n    \n    function test1() returns (uint) {\n        if (!main.call.value(26)()) revert(); //check floor round (26/24 must issue 1 token)\n        assert(main.balanceOf(address(this)) == 3); \n        assert(main.emissionPrice() == 24); //24.6 but round floor\n        return main.balance;\n    }\n    \n    function test2() returns (uint){\n        if (!main.call.value(40)()) revert(); //check floor round (40/24 must issue 1 token)\n        assert(main.balanceOf(address(this)) == 4); \n        //assert(main.emissionPrice() == 28);\n        //return main.burnPrice();\n    } \n    \n    function test3() {\n        if (!main.transfer(address(main),2)) revert();\n        assert(main.burnPrice() == 14);\n    } \n    \n}",
  "bytecode": "6060604052600080556000600460006101000a81548160ff021916908315150217905550341561002e57600080fd5b6000805414151561003e57600080fd5b33600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611f2a806100f16000396000f30060606040523615610147576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146103fe578063095ea7b31461048c57806318160ddd146104e657806323b872dd1461050f5780632ae6218d14610588578063313ce567146105b1578063481c6a75146105e057806349a0c9761461063557806370a082311461064a57806373f00fb31461069757806379ba5097146106c4578063832df980146106d95780638da5cb5b146106ee57806395d89b41146107435780639975038c146107d1578063a3fbbaae146107fe578063a6f9dae114610837578063a9059cbb14610870578063b15651ff146108ca578063b81f39a8146108f3578063bde6a5a914610915578063dc39d06d1461093e578063dd62ed3e14610998578063ea1f9b3e14610a04578063fd3a77db14610a26575b6000806000600154925060001515600460009054906101000a900460ff16151514151561017357600080fd5b60006001541180156101885750600154600254115b151561019357600080fd5b6000341115156101a257600080fd5b600254348115156101af57fe5b049150600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111151561024057600080fd5b61029282600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a3b90919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506102ea82600054610a3b90919063ffffffff16565b6000819055506002348115156102fc57fe5b049050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561036157600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167f884543c08d36fb5c9b3b688dd0453c9f287199124bdbddb3b7f9ca885a4d34a0346002548560405180848152602001838152602001828152602001935050505060405180910390a26103c9610a59565b6001819055506103e56002600154610a8490919063ffffffff16565b60028190555082600154101515156103f957fe5b505050005b341561040957600080fd5b610411610ab7565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610451578082015181840152602081019050610436565b50505050905090810190601f16801561047e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561049757600080fd5b6104cc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610af0565b604051808215151515815260200191505060405180910390f35b34156104f157600080fd5b6104f9610be2565b6040518082815260200191505060405180910390f35b341561051a57600080fd5b61056e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610beb565b604051808215151515815260200191505060405180910390f35b341561059357600080fd5b61059b610a59565b6040518082815260200191505060405180910390f35b34156105bc57600080fd5b6105c461103f565b604051808260ff1660ff16815260200191505060405180910390f35b34156105eb57600080fd5b6105f3611044565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561064057600080fd5b61064861106a565b005b341561065557600080fd5b610681600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506110e3565b6040518082815260200191505060405180910390f35b34156106a257600080fd5b6106aa61112c565b604051808215151515815260200191505060405180910390f35b34156106cf57600080fd5b6106d761113f565b005b34156106e457600080fd5b6106ec61123d565b005b34156106f957600080fd5b6107016112b6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561074e57600080fd5b6107566112dc565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561079657808201518184015260208101905061077b565b50505050905090810190601f1680156107c35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156107dc57600080fd5b6107e4611315565b604051808215151515815260200191505060405180910390f35b341561080957600080fd5b610835600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611364565b005b341561084257600080fd5b61086e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611404565b005b341561087b57600080fd5b6108b0600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506114a4565b604051808215151515815260200191505060405180910390f35b34156108d557600080fd5b6108dd61176c565b6040518082815260200191505060405180910390f35b6108fb611776565b604051808215151515815260200191505060405180910390f35b341561092057600080fd5b610928611808565b6040518082815260200191505060405180910390f35b341561094957600080fd5b61097e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611812565b604051808215151515815260200191505060405180910390f35b34156109a357600080fd5b6109ee600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611960565b6040518082815260200191505060405180910390f35b610a0c6119e7565b604051808215151515815260200191505060405180910390f35b3415610a3157600080fd5b610a39611bc6565b005b6000808284019050838110151515610a4f57fe5b8091505092915050565b600080543073ffffffffffffffffffffffffffffffffffffffff1631811515610a7e57fe5b04905090565b60008082840290506000841480610aa55750828482811515610aa257fe5b04145b1515610aad57fe5b8091505092915050565b6040805190810160405280600581526020017f4e4f584f4e00000000000000000000000000000000000000000000000000000081525081565b600081600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008054905090565b600081600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610cb8575081600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610cc45750600082115b8015610d4f5750600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b8015610d8757503073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b1561103357610dde82600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cc490919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610eb082600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cc490919063ffffffff16565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f8282600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a3b90919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611038565b600090505b9392505050565b600081565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110c657600080fd5b6000600460006101000a81548160ff021916908315150217905550565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600460009054906101000a900460ff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561123b57600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b565b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561129957600080fd5b6001600460006101000a81548160ff021916908315150217905550565b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600581526020017f4e4f584f4e00000000000000000000000000000000000000000000000000000081525081565b600061135f600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cdd565b905090565b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113c057600080fd5b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561146057600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156114ea576114e382611cdd565b9050611766565b81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156115395750600082115b80156115c45750600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b156117615761161b82600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cc490919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116b082600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a3b90919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611766565b600090505b92915050565b6000600254905090565b600080600154905060003411156117ff5761178f610a59565b6001819055506117ab6002600154610a8490919063ffffffff16565b6002819055507f968f9dc3ee163656a938edc154c528821b379303fc28d5a757381ffa59756005346040518082815260200191505060405180910390a180600154101515156117f657fe5b60019150611804565b600091505b5090565b6000600154905090565b6000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561187057600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561193d57600080fd5b6102c65a03f1151561194e57600080fd5b50505060405180519050905092915050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a4557600080fd5b60008054141515611a5557600080fd5b6000600354141515611a6657600080fd5b600034111515611a7557600080fd5b3373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60016040518082815260200191505060405180910390a3600160066000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060066000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460008190555034600181905550611bb26002600154610a8490919063ffffffff16565b600281905550426003819055506001905090565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611cc257600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b565b6000828211151515611cd257fe5b818303905092915050565b600080611ce8610a59565b600181905550600154905082600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015611d425750600083115b15611ef357611d9983600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cc490919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611df183600054611cc490919063ffffffff16565b600081905550600160005410151515611e0657fe5b3373ffffffffffffffffffffffffffffffffffffffff166108fc611e3560015486610a8490919063ffffffff16565b9081150290604051600060405180830381858888f193505050501515611e5a57600080fd5b611e62610a59565b6001819055508060015410151515611e7657fe5b3373ffffffffffffffffffffffffffffffffffffffff167fe06aa145e36ec4b8740f4896d15faf3815dd20984c287e8c36f9e34b32ab9e7e611ec360015486610a8490919063ffffffff16565b6001548660405180848152602001838152602001828152602001935050505060405180910390a260019150611ef8565b600091505b509190505600a165627a7a723058200a6a24e71491b45dd4260f86aad5c6aaa95542453aa20126980a4c34295624dc0029"
}