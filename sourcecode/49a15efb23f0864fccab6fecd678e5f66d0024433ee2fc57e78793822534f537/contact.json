{
  "address": "0x9cb9eb4bb7800bdbb017be2a4ffbeccb67454ea9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "blockoptions",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-01\n*/\n\npragma solidity ^ 0.4 .8;\n\n\ncontract ERC20 {\n\n    uint public totalSupply;\n\n    function balanceOf(address who) constant returns(uint256);\n\n    function allowance(address owner, address spender) constant returns(uint);\n\n    function transferFrom(address from, address to, uint value) returns(bool ok);\n\n    function approve(address spender, uint value) returns(bool ok);\n\n    function transfer(address to, uint value) returns(bool ok);\n\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n\n}\n\ncontract blockoptions is ERC20\n\n{\n\n       /* Public variables of the token */\n      //To store name for token\n      string public name = \"blockoptions\";\n    \n      //To store symbol for token       \n      string public symbol = \"BOPT\";\n    \n      //To store decimal places for token\n      uint8 public decimals = 8;    \n    \n      //To store current supply of BOPT\n      uint public totalSupply=20000000 * 100000000;\n      \n       uint pre_ico_start;\n       uint pre_ico_end;\n       uint ico_start;\n       uint ico_end;\n       mapping(uint => address) investor;\n       mapping(uint => uint) weireceived;\n       mapping(uint => uint) optsSent;\n      \n        event preico(uint counter,address investors,uint weiReceived,uint boptsent);\n        event ico(uint counter,address investors,uint weiReceived,uint boptsent);\n        uint counter=0;\n        uint profit_sent=0;\n        bool stopped = false;\n        \n      function blockoptions() payable{\n          owner = msg.sender;\n          balances[owner] = totalSupply ; //to handle 8 decimal places\n          pre_ico_start = now;\n          pre_ico_end = pre_ico_start + 7 days;\n          \n        }\n      //map to store BOPT balance corresponding to address\n      mapping(address => uint) balances;\n    \n      //To store spender with allowed amount of BOPT to spend corresponding to BOPTs holder's account\n      mapping (address => mapping (address => uint)) allowed;\n    \n      //owner variable to store contract owner account\n      address public owner;\n      \n      //modifier to check transaction initiator is only owner\n      modifier onlyOwner() {\n        if (msg.sender == owner)\n          _;\n      }\n    \n      //ownership can be transferred to provided newOwner. Function can only be initiated by contract owner's account\n      function transferOwnership(address newOwner) onlyOwner {\n          balances[newOwner] = balances[owner];\n          balances[owner]=0;\n          owner = newOwner;\n      }\n\n        /**\n        * Multiplication with safety check\n        */\n        function Mul(uint a, uint b) internal returns (uint) {\n          uint c = a * b;\n          //check result should not be other wise until a=0\n          assert(a == 0 || c / a == b);\n          return c;\n        }\n    \n        /**\n        * Division with safety check\n        */\n        function Div(uint a, uint b) internal returns (uint) {\n          //overflow check; b must not be 0\n          assert(b > 0);\n          uint c = a / b;\n          assert(a == b * c + a % b);\n          return c;\n        }\n    \n        /**\n        * Subtraction with safety check\n        */\n        function Sub(uint a, uint b) internal returns (uint) {\n          //b must be greater that a as we need to store value in unsigned integer\n          assert(b <= a);\n          return a - b;\n        }\n    \n        /**\n        * Addition with safety check\n        */\n        function Add(uint a, uint b) internal returns (uint) {\n          uint c = a + b;\n          //result must be greater as a or b can not be negative\n          assert(c>=a && c>=b);\n          return c;\n        }\n    \n      /**\n        * assert used in different Math functions\n        */\n        function assert(bool assertion) internal {\n          if (!assertion) {\n            throw;\n          }\n        }\n    \n    //Implementation for transferring BOPT to provided address \n      function transfer(address _to, uint _value) returns (bool){\n\n        uint check = balances[owner] - _value;\n        if(msg.sender == owner && now>=pre_ico_start && now<=pre_ico_end && check < 1900000000000000)\n        {\n            return false;\n        }\n        else if(msg.sender ==owner && now>=pre_ico_end && now<=(pre_ico_end + 16 days) && check < 1850000000000000)\n        {\n            return false;\n        }\n        else if(msg.sender == owner && check < 150000000000000 && now < ico_start + 180 days)\n        {\n            return false;\n        }\n        else if (msg.sender == owner && check < 100000000000000 && now < ico_start + 360 days)\n        {\n            return false;\n        }\n        else if (msg.sender == owner && check < 50000000000000 && now < ico_start + 540 days)\n        {\n            return false;\n        }\n        //Check provided BOPT should not be 0\n       else if (_value > 0) {\n          //deduct OPTS amount from transaction initiator\n          balances[msg.sender] = Sub(balances[msg.sender],_value);\n          //Add OPTS to balace of target account\n          balances[_to] = Add(balances[_to],_value);\n          //Emit event for transferring BOPT\n          Transfer(msg.sender, _to, _value);\n          return true;\n        }\n        else{\n          return false;\n        }\n      }\n      \n      //Transfer initiated by spender \n      function transferFrom(address _from, address _to, uint _value) returns (bool) {\n    \n        //Check provided BOPT should not be 0\n        if (_value > 0) {\n          //Get amount of BOPT for which spender is authorized\n          var _allowance = allowed[_from][msg.sender];\n          //Add amount of BOPT in trarget account's balance\n          balances[_to] = Add(balances[_to], _value);\n          //Deduct BOPT amount from _from account\n          balances[_from] = Sub(balances[_from], _value);\n          //Deduct Authorized amount for spender\n          allowed[_from][msg.sender] = Sub(_allowance, _value);\n          //Emit event for Transfer\n          Transfer(_from, _to, _value);\n          return true;\n        }else{\n          return false;\n        }\n      }\n      \n      //Get BOPT balance for provided address\n      function balanceOf(address _owner) constant returns (uint balance) {\n        return balances[_owner];\n      }\n      \n      //Add spender to authorize for spending specified amount of BOPT \n      function approve(address _spender, uint _value) returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        //Emit event for approval provided to spender\n        Approval(msg.sender, _spender, _value);\n        return true;\n      }\n      \n      //Get BOPT amount that spender can spend from provided owner's account \n      function allowance(address _owner, address _spender) constant returns (uint remaining) {\n        return allowed[_owner][_spender];\n      }\n      \n       /*\t\n       * Failsafe drain\n       */\n    \tfunction drain() onlyOwner {\n    \t\towner.send(this.balance);\n    \t}\n\t\n    \tfunction() payable \n    \t{   \n    \t    if(stopped && msg.sender != owner)\n    \t    revert();\n    \t     else if(msg.sender == owner)\n    \t    {\n    \t        profit_sent = msg.value;\n    \t    }\n    \t   else if(now>=pre_ico_start && now<=pre_ico_end)\n    \t    {\n    \t        uint check = balances[owner]-((400*msg.value)/10000000000);\n    \t        if(check >= 1900000000000000)\n                pre_ico(msg.sender,msg.value);\n    \t    }\n            else if (now>=ico_start && now<ico_end)\n            {\n                main_ico(msg.sender,msg.value);\n            }\n            \n        }\n       \n       function pre_ico(address sender, uint value)payable\n       {\n          counter = counter+1;\n\t      investor[counter]=sender;\n          weireceived[counter]=value;\n          optsSent[counter] = (400*value)/10000000000;\n          balances[owner]=balances[owner]-optsSent[counter];\n          balances[investor[counter]]+=optsSent[counter];\n          preico(counter,investor[counter],weireceived[counter],optsSent[counter]);\n       }\n       \n       function  main_ico(address sender, uint value)payable\n       {\n           if(now >= ico_start && now <= (ico_start + 7 days)) //20% discount on BOPT\n           {\n              counter = counter+1;\n    \t      investor[counter]=sender;\n              weireceived[counter]=value;\n              optsSent[counter] = (250*value)/10000000000;\n              balances[owner]=balances[owner]-optsSent[counter];\n              balances[investor[counter]]+=optsSent[counter];\n              ico(counter,investor[counter],weireceived[counter],optsSent[counter]);\n           }\n           else if (now >= (ico_start + 7 days) && now <= (ico_start + 14 days)) //10% discount on BOPT\n           {\n              counter = counter+1;\n    \t      investor[counter]=sender;\n              weireceived[counter]=value;\n              optsSent[counter] = (220*value)/10000000000;\n              balances[owner]=balances[owner]-optsSent[counter];\n              balances[investor[counter]]+=optsSent[counter];\n              ico(counter,investor[counter],weireceived[counter],optsSent[counter]);\n           }\n           else if (now >= (ico_start + 14 days) && now <= (ico_start + 31 days)) //no discount on BOPT\n           {\n              counter = counter+1;\n    \t      investor[counter]=sender;\n              weireceived[counter]=value;\n              optsSent[counter] = (200*value)/10000000000;\n              balances[owner]=balances[owner]-optsSent[counter];\n              balances[investor[counter]]+=optsSent[counter];\n              ico(counter,investor[counter],weireceived[counter],optsSent[counter]);\n           }\n       }\n       \n       function startICO()onlyOwner\n       {\n           ico_start = now;\n           ico_end=ico_start + 31 days;\n           pre_ico_start = 0;\n           pre_ico_end = 0;\n           \n       }\n       \n      \n        function endICO()onlyOwner\n       {\n          stopped=true;\n          if(balances[owner] > 150000000000000)\n          {\n              uint burnedTokens = balances[owner]-150000000000000;\n           totalSupply = totalSupply-burnedTokens;\n           balances[owner] = 150000000000000;\n          }\n       }\n}",
  "bytecode": "60606040526040805190810160405280600c81526020017f626c6f636b6f7074696f6e7300000000000000000000000000000000000000008152506001908051906020019062000051929190620001b2565b506040805190810160405280600481526020017f424f505400000000000000000000000000000000000000000000000000000000815250600290805190602001906200009f929190620001b2565b506008600360006101000a81548160ff021916908360ff16021790555066071afd498d00006004556000600c556000600d556000600e60006101000a81548160ff0219169083151502179055505b33601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600454600f6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055504260058190555062093a80600554016006819055505b62000261565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001f557805160ff191683800117855562000226565b8280016001018555821562000226579182015b828111156200022557825182559160200191906001019062000208565b5b50905062000235919062000239565b5090565b6200025e91905b808211156200025a57600081600090555060010162000240565b5090565b90565b61237480620002716000396000f300606060405236156100e4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461029f578063095ea7b31461032e57806318160ddd1461038857806323b872dd146103b1578063313ce5671461042a5780634f2484091461045957806370a082311461046e5780637fa8c158146104bb5780638a593cbe146104d05780638da5cb5b1461050757806395d89b411461055c5780639890220b146105eb578063a9059cbb14610600578063d086a2011461065a578063dd62ed3e14610691578063f2fde38b146106fd575b61029d5b6000600e60009054906101000a900460ff1680156101545750601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561015e57600080fd5b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156101c05734600d81905550610298565b60055442101580156101d457506006544211155b15610273576402540be40034610190028115156101ed57fe5b04600f6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540390506606c00a3912c0008110151561026e5761026d3334610736565b5b610297565b6007544210158015610286575060085442105b15610296576102953334610a34565b5b5b5b5b5b50565b005b34156102aa57600080fd5b6102b2611392565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102f35780820151818401525b6020810190506102d7565b50505050905090810190601f1680156103205780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561033957600080fd5b61036e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611430565b604051808215151515815260200191505060405180910390f35b341561039357600080fd5b61039b611523565b6040518082815260200191505060405180910390f35b34156103bc57600080fd5b610410600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611529565b604051808215151515815260200191505060405180910390f35b341561043557600080fd5b61043d6117d6565b604051808260ff1660ff16815260200191505060405180910390f35b341561046457600080fd5b61046c6117e9565b005b341561047957600080fd5b6104a5600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506119b5565b6040518082815260200191505060405180910390f35b34156104c657600080fd5b6104ce6119ff565b005b610505600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610736565b005b341561051257600080fd5b61051a611a7f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561056757600080fd5b61056f611aa5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105b05780820151818401525b602081019050610594565b50505050905090810190601f1680156105dd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105f657600080fd5b6105fe611b43565b005b341561060b57600080fd5b610640600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611c0d565b604051808215151515815260200191505060405180910390f35b61068f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a34565b005b341561069c57600080fd5b6106e7600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506120c2565b6040518082815260200191505060405180910390f35b341561070857600080fd5b610734600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061214a565b005b6001600c5401600c819055508160096000600c54815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600a6000600c548152602001908152602001600020819055506402540be40081610190028115156107c457fe5b04600b6000600c54815260200190815260200160002081905550600b6000600c54815260200190815260200160002054600f6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403600f6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b6000600c54815260200190815260200160002054600f600060096000600c54815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507fb63adb3ad627fefe6419829d33da55399bef5173a0b24ee091d51ca91f81fd62600c5460096000600c54815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a6000600c54815260200190815260200160002054600b6000600c54815260200190815260200160002054604051808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a15b5050565b6007544210158015610a4d575062093a80600754014211155b15610d4f576001600c5401600c819055508160096000600c54815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600a6000600c548152602001908152602001600020819055506402540be4008160fa02811515610adf57fe5b04600b6000600c54815260200190815260200160002081905550600b6000600c54815260200190815260200160002054600f6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403600f6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b6000600c54815260200190815260200160002054600f600060096000600c54815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507fc78a373669ffe3cb1e540c677e3bc8bebbefaa8a6ed41ee4872e06f65521642f600c5460096000600c54815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a6000600c54815260200190815260200160002054600b6000600c54815260200190815260200160002054604051808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a161138d565b62093a80600754014210158015610d6d575062127500600754014211155b1561106f576001600c5401600c819055508160096000600c54815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600a6000600c548152602001908152602001600020819055506402540be4008160dc02811515610dff57fe5b04600b6000600c54815260200190815260200160002081905550600b6000600c54815260200190815260200160002054600f6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403600f6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b6000600c54815260200190815260200160002054600f600060096000600c54815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507fc78a373669ffe3cb1e540c677e3bc8bebbefaa8a6ed41ee4872e06f65521642f600c5460096000600c54815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a6000600c54815260200190815260200160002054600b6000600c54815260200190815260200160002054604051808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a161138c565b6212750060075401421015801561108d57506228de80600754014211155b1561138b576001600c5401600c819055508160096000600c54815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600a6000600c548152602001908152602001600020819055506402540be4008160c80281151561111f57fe5b04600b6000600c54815260200190815260200160002081905550600b6000600c54815260200190815260200160002054600f6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403600f6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b6000600c54815260200190815260200160002054600f600060096000600c54815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507fc78a373669ffe3cb1e540c677e3bc8bebbefaa8a6ed41ee4872e06f65521642f600c5460096000600c54815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a6000600c54815260200190815260200160002054600b6000600c54815260200190815260200160002054604051808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a15b5b5b5b5050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114285780601f106113fd57610100808354040283529160200191611428565b820191906000526020600020905b81548152906001019060200180831161140b57829003601f168201915b505050505081565b600081601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b60045481565b60008060008311156117c457601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506115fd600f60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846122f3565b600f60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611689600f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548461231e565b600f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116d6818461231e565b601060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191506117ce565b600091506117ce565b5b509392505050565b600360009054906101000a900460ff1681565b6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156119b1576001600e60006101000a81548160ff02191690831515021790555065886c98b76000600f6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156119af5765886c98b76000600f6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054039050806004540360048190555065886c98b76000600f6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b5b5b50565b6000600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611a7c57426007819055506228de8060075401600881905550600060058190555060006006819055505b5b5b565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b3b5780601f10611b1057610100808354040283529160200191611b3b565b820191906000526020600020905b815481529060010190602001808311611b1e57829003601f168201915b505050505081565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611c0a57601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050505b5b5b565b60008082600f6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054039050601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015611cd557506005544210155b8015611ce357506006544211155b8015611cf557506606c00a3912c00081105b15611d0357600091506120bb565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015611d6257506006544210155b8015611d75575062151800600654014211155b8015611d87575066069290b0d5a00081105b15611d9557600091506120bb565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015611df7575065886c98b7600081105b8015611e09575062ed4e006007540142105b15611e1757600091506120bb565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015611e795750655af3107a400081105b8015611e8c57506301da9c006007540142105b15611e9a57600091506120bb565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015611efc5750652d79883d200081105b8015611f0f57506302c7ea006007540142105b15611f1d57600091506120bb565b60008311156120ac57611f6f600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548461231e565b600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ffb600f60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846122f3565b600f60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191506120bb565b600091506120bb565b5b5b5b5b5b5b5092915050565b6000601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156122ef57600f6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600f6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600080828401905061231384821015801561230e5750838210155b612338565b8091505b5092915050565b600061232c83831115612338565b81830390505b92915050565b80151561234457600080fd5b5b505600a165627a7a72305820e3430888813414493331d7501bf4a6768a1b9341aca51524a85d650e21c52afb0029"
}