{
  "address": "0xb7a9bf7cc64ad5d8e625d7326ec0ecdb2d4e3a14",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EIE",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-18\n*/\n\npragma solidity ^0.4.25;\n\n/**\n *\n * Easy Investment Eternal Contract\n *  - GAIN 4% PER 24 HOURS (every 5900 blocks)\n *  - NO FEES on your investment\n *  - NO FEES are collected by the contract creator\n *\n * How to use:\n *  1. Burn (or send to token address) any amount of EIE to make an investment\n *  2a. Claim your profit by sending 0 EIE transaction (every day, every week, i don't care unless you're spending too much on GAS)\n *  OR\n *  2b. Send more EIE to reinvest AND get your profit at the same time\n *  3. During the first week, you can send 0 Ether to the contract address an unlimited number of times, receiving 1 EIE for each transaction\n *\n * RECOMMENDED GAS LIMIT: 200000\n * RECOMMENDED GAS PRICE: https://ethgasstation.info/\n *\n * Contract reviewed and approved by pros!\n *\n */\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract EIE {\n    // Public variables of the token\n    string public name = 'EasyInvestEternal';\n    string public symbol = 'EIE';\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply = 1000000000000000000000000;\n    uint256 public createdAtBlock;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    \n    // records amounts invested\n    mapping (address => uint256) public invested;\n    // records blocks at which investments were made\n    mapping (address => uint256) public atBlock;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    // This generates a public event on the blockchain that will notify clients\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constructor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    constructor() public {\n        createdAtBlock = block.number;\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n    }\n    \n    function isFirstWeek() internal view returns (bool) {\n        return block.number < createdAtBlock + 5900 * 7;\n    }\n    \n    function _issue(uint _value) internal {\n        balanceOf[msg.sender] += _value;\n        totalSupply += _value;\n        emit Transfer(0, this, _value);\n        emit Transfer(this, msg.sender, _value);\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        if (_to == address(this)) {\n            burn(_value);\n        } else {\n            _transfer(msg.sender, _to, _value);\n        }\n        return true;\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` on behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens and invest tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        emit Transfer(msg.sender, this, 0);\n        \n        if (invested[msg.sender] != 0) {\n            // calculate profit amount as such:\n            // amount = (amount invested) * 4% * (blocks since last transaction) / 5900\n            // 5900 is an average block count per day produced by Ethereum blockchain\n            uint256 amount = invested[msg.sender] * 4 / 100 * (block.number - atBlock[msg.sender]) / 5900;\n\n            // send calculated amount of ether directly to sender (aka YOU)\n            _issue(amount);\n        }\n        \n        atBlock[msg.sender] = block.number;\n        invested[msg.sender] += _value;\n        \n        return true;\n    }\n\n    // this function called every time anyone sends a transaction to this contract\n    function () external payable {\n        if (msg.value > 0 || !isFirstWeek()) {\n            revert();\n        }\n        \n        _issue(1000000000000000000);\n    }\n}",
  "bytecode": "60c0604052601160808190527f45617379496e76657374457465726e616c00000000000000000000000000000060a090815261003e91600091906100c8565b506040805180820190915260038082527f45494500000000000000000000000000000000000000000000000000000000006020909201918252610083916001916100c8565b506002805460ff1916601217905569d3c21bcecceda10000006003553480156100ab57600080fd5b504360045560035433600090815260056020526040902055610163565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010957805160ff1916838001178555610136565b82800160010185558215610136579182015b8281111561013657825182559160200191906001019061011b565b50610142929150610146565b5090565b61016091905b80821115610142576000815560010161014c565b90565b6109d9806101726000396000f3006080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610100578063095ea7b31461018a57806318160ddd146101c257806323b872dd146101e9578063313ce5671461021357806342966c681461023e57806359acb42c1461025657806366b3f6bf1461026b57806370a082311461028c5780638aac1362146102ad57806395d89b41146102ce578063a9059cbb146102e3578063cae9ca5114610307578063dd62ed3e14610370575b60003411806100e357506100e1610397565b155b156100ed57600080fd5b6100fe670de0b6b3a76400006103a3565b005b34801561010c57600080fd5b5061011561040b565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014f578181015183820152602001610137565b50505050905090810190601f16801561017c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019657600080fd5b506101ae600160a060020a0360043516602435610499565b604080519115158252519081900360200190f35b3480156101ce57600080fd5b506101d76104ff565b60408051918252519081900360200190f35b3480156101f557600080fd5b506101ae600160a060020a0360043581169060243516604435610505565b34801561021f57600080fd5b50610228610574565b6040805160ff9092168252519081900360200190f35b34801561024a57600080fd5b506101ae60043561057d565b34801561026257600080fd5b506101d7610695565b34801561027757600080fd5b506101d7600160a060020a036004351661069b565b34801561029857600080fd5b506101d7600160a060020a03600435166106ad565b3480156102b957600080fd5b506101d7600160a060020a03600435166106bf565b3480156102da57600080fd5b506101156106d1565b3480156102ef57600080fd5b506101ae600160a060020a036004351660243561072b565b34801561031357600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101ae948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506107619650505050505050565b34801561037c57600080fd5b506101d7600160a060020a036004358116906024351661087a565b60045461a15401431090565b33600090815260056020908152604080832080548501905560038054850190558051848152905130939260008051602061098e833981519152928290030190a36040805182815290513391309160008051602061098e8339815191529181900360200190a350565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104915780601f1061046657610100808354040283529160200191610491565b820191906000526020600020905b81548152906001019060200180831161047457829003601f168201915b505050505081565b336000818152600660209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60035481565b600160a060020a038316600090815260066020908152604080832033845290915281205482111561053557600080fd5b600160a060020a038416600090815260066020908152604080832033845290915290208054839003905561056a848484610897565b5060019392505050565b60025460ff1681565b33600090815260056020526040812054819083111561059b57600080fd5b3360008181526005602090815260409182902080548790039055600380548790039055815186815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2604080516000815290513091339160008051602061098e8339815191529181900360200190a3336000908152600760205260409020541561066a573360009081526008602090815260408083205460079092529091205461170c91430390606490600402040281151561065e57fe5b04905061066a816103a3565b5050336000908152600860209081526040808320439055600790915290208054919091019055600190565b60045481565b60076020526000908152604090205481565b60056020526000908152604090205481565b60086020526000908152604090205481565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104915780601f1061046657610100808354040283529160200191610491565b6000600160a060020a03831630141561074d576107478261057d565b50610758565b610758338484610897565b50600192915050565b60008361076e8185610499565b15610872576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b838110156108065781810151838201526020016107ee565b50505050905090810190601f1680156108335780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561085557600080fd5b505af1158015610869573d6000803e3d6000fd5b50505050600191505b509392505050565b600660209081526000928352604080842090915290825290205481565b6000600160a060020a03831615156108ae57600080fd5b600160a060020a0384166000908152600560205260409020548211156108d357600080fd5b600160a060020a03831660009081526005602052604090205482810110156108fa57600080fd5b50600160a060020a0380831660008181526005602090815260408083208054958916808552828520805489810390915594869052815488019091558151878152915193909501949260008051602061098e833981519152929181900390910190a3600160a060020a0380841660009081526005602052604080822054928716825290205401811461098757fe5b505050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058202509c9700da947163b1f4f2e304e8b642ccc45180420bac75e8922655128f3630029"
}