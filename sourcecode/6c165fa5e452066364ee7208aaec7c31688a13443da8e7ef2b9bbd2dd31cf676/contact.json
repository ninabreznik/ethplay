{
  "address": "0x54a2d42a40f51259dedd1978f6c118a0f0eff078",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SecondPriceAuction",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-11\n*/\n\n//! Copyright Parity Technologies, 2017.\n//! Released under the Apache Licence 2.\n\npragma solidity ^0.4.17;\n\n/// Stripped down ERC20 standard token interface.\ncontract Token {\n\tfunction transfer(address _to, uint256 _value) public returns (bool success);\n}\n\n// From Certifier.sol\ncontract Certifier {\n\tevent Confirmed(address indexed who);\n\tevent Revoked(address indexed who);\n\tfunction certified(address) public constant returns (bool);\n\tfunction get(address, string) public constant returns (bytes32);\n\tfunction getAddress(address, string) public constant returns (address);\n\tfunction getUint(address, string) public constant returns (uint);\n}\n\n/// Simple modified second price auction contract. Price starts high and monotonically decreases\n/// until all tokens are sold at the current price with currently received funds.\n/// The price curve has been chosen to resemble a logarithmic curve\n/// and produce a reasonable auction timeline.\ncontract SecondPriceAuction {\n\t// Events:\n\n\t/// Someone bought in at a particular max-price.\n\tevent Buyin(address indexed who, uint accounted, uint received, uint price);\n\n\t/// Admin injected a purchase.\n\tevent Injected(address indexed who, uint accounted, uint received);\n\n\t/// Admin uninjected a purchase.\n\tevent Uninjected(address indexed who);\n\n\t/// At least 5 minutes has passed since last Ticked event.\n\tevent Ticked(uint era, uint received, uint accounted);\n\n\t/// The sale just ended with the current price.\n\tevent Ended(uint price);\n\n\t/// Finalised the purchase for `who`, who has been given `tokens` tokens.\n\tevent Finalised(address indexed who, uint tokens);\n\n\t/// Auction is over. All accounts finalised.\n\tevent Retired();\n\n\t// Constructor:\n\n\t/// Simple constructor.\n\t/// Token cap should take be in whole tokens, not smallest divisible units.\n\tfunction SecondPriceAuction(\n\t\taddress _certifierContract,\n\t\taddress _tokenContract,\n\t\taddress _treasury,\n\t\taddress _admin,\n\t\tuint _beginTime,\n\t\tuint _tokenCap\n\t)\n\t\tpublic\n\t{\n\t\tcertifier = Certifier(_certifierContract);\n\t\ttokenContract = Token(_tokenContract);\n\t\ttreasury = _treasury;\n\t\tadmin = _admin;\n\t\tbeginTime = _beginTime;\n\t\ttokenCap = _tokenCap;\n\t\tendTime = beginTime + 28 days;\n\t}\n\n\t// No default function, entry-level users\n\tfunction() public { assert(false); }\n\n\t// Public interaction:\n\n\t/// Buyin function. Throws if the sale is not active and when refund would be needed.\n\tfunction buyin(uint8 v, bytes32 r, bytes32 s)\n\t\tpublic\n\t\tpayable\n\t\twhen_not_halted\n\t\twhen_active\n\t\tonly_eligible(msg.sender, v, r, s)\n\t{\n\t\tflushEra();\n\n\t\t// Flush bonus period:\n\t\tif (currentBonus > 0) {\n\t\t\t// Bonus is currently active...\n\t\t\tif (now >= beginTime + BONUS_MIN_DURATION\t\t\t\t// ...but outside the automatic bonus period\n\t\t\t\t&& lastNewInterest + BONUS_LATCH <= block.number\t// ...and had no new interest for some blocks\n\t\t\t) {\n\t\t\t\tcurrentBonus--;\n\t\t\t}\n\t\t\tif (now >= beginTime + BONUS_MAX_DURATION) {\n\t\t\t\tcurrentBonus = 0;\n\t\t\t}\n\t\t\tif (buyins[msg.sender].received == 0) {\t// We have new interest\n\t\t\t\tlastNewInterest = uint32(block.number);\n\t\t\t}\n\t\t}\n\n\t\tuint accounted;\n\t\tbool refund;\n\t\tuint price;\n\t\t(accounted, refund, price) = theDeal(msg.value);\n\n\t\t/// No refunds allowed.\n\t\trequire (!refund);\n\n\t\t// record the acceptance.\n\t\tbuyins[msg.sender].accounted += uint128(accounted);\n\t\tbuyins[msg.sender].received += uint128(msg.value);\n\t\ttotalAccounted += accounted;\n\t\ttotalReceived += msg.value;\n\t\tendTime = calculateEndTime();\n\t\tBuyin(msg.sender, accounted, msg.value, price);\n\n\t\t// send to treasury\n\t\ttreasury.transfer(msg.value);\n\t}\n\n\t/// Like buyin except no payment required and bonus automatically given.\n\tfunction inject(address _who, uint128 _received)\n\t\tpublic\n\t\tonly_admin\n\t\tonly_basic(_who)\n\t\tbefore_beginning\n\t{\n\t\tuint128 bonus = _received * uint128(currentBonus) / 100;\n\t\tuint128 accounted = _received + bonus;\n\n\t\tbuyins[_who].accounted += accounted;\n\t\tbuyins[_who].received += _received;\n\t\ttotalAccounted += accounted;\n\t\ttotalReceived += _received;\n\t\tendTime = calculateEndTime();\n\t\tInjected(_who, accounted, _received);\n\t}\n\n\t/// Reverses a previous `inject` command.\n\tfunction uninject(address _who)\n\t\tpublic\n\t\tonly_admin\n\t\tbefore_beginning\n\t{\n\t\ttotalAccounted -= buyins[_who].accounted;\n\t\ttotalReceived -= buyins[_who].received;\n\t\tdelete buyins[_who];\n\t\tendTime = calculateEndTime();\n\t\tUninjected(_who);\n\t}\n\n\t/// Mint tokens for a particular participant.\n\tfunction finalise(address _who)\n\t\tpublic\n\t\twhen_not_halted\n\t\twhen_ended\n\t\tonly_buyins(_who)\n\t{\n\t\t// end the auction if we're the first one to finalise.\n\t\tif (endPrice == 0) {\n\t\t\tendPrice = totalAccounted / tokenCap;\n\t\t\tEnded(endPrice);\n\t\t}\n\n\t\t// enact the purchase.\n\t\tuint total = buyins[_who].accounted;\n\t\tuint tokens = total / endPrice;\n\t\ttotalFinalised += total;\n\t\tdelete buyins[_who];\n\t\trequire (tokenContract.transfer(_who, tokens));\n\n\t\tFinalised(_who, tokens);\n\n\t\tif (totalFinalised == totalAccounted) {\n\t\t\tRetired();\n\t\t}\n\t}\n\n\t// Prviate utilities:\n\n\t/// Ensure the era tracker is prepared in case the current changed.\n\tfunction flushEra() private {\n\t\tuint currentEra = (now - beginTime) / ERA_PERIOD;\n\t\tif (currentEra > eraIndex) {\n\t\t\tTicked(eraIndex, totalReceived, totalAccounted);\n\t\t}\n\t\teraIndex = currentEra;\n\t}\n\n\t// Admin interaction:\n\n\t/// Emergency function to pause buy-in and finalisation.\n\tfunction setHalted(bool _halted) public only_admin { halted = _halted; }\n\n\t/// Emergency function to drain the contract of any funds.\n\tfunction drain() public only_admin { treasury.transfer(this.balance); }\n\n\t// Inspection:\n\n\t/**\n\t * The formula for the price over time.\n\t *\n\t * This is a hand-crafted formula (no named to the constants) in order to\n\t * provide the following requirements:\n\t *\n\t * - Simple reciprocal curve (of the form y = a + b / (x + c));\n\t * - Would be completely unreasonable to end in the first 48 hours;\n\t * - Would reach $65m effective cap in 4 weeks.\n\t *\n\t * The curve begins with an effective cap (EC) of over $30b, more ether\n\t * than is in existance. After 48 hours, the EC reduces to approx. $1b.\n\t * At just over 10 days, the EC has reduced to $200m, and half way through\n\t * the 19th day it has reduced to $100m.\n\t *\n\t * Here's the curve: https://www.desmos.com/calculator/k6iprxzcrg?embed\n\t */\n\n\t/// The current end time of the sale assuming that nobody else buys in.\n\tfunction calculateEndTime() public constant returns (uint) {\n\t\tvar factor = tokenCap / DIVISOR * USDWEI;\n\t\treturn beginTime + 40000000 * factor / (totalAccounted + 5 * factor) - 5760;\n\t}\n\n\t/// The current price for a single indivisible part of a token. If a buyin happens now, this is\n\t/// the highest price per indivisible token part that the buyer will pay. This doesn't\n\t/// include the discount which may be available.\n\tfunction currentPrice() public constant when_active returns (uint weiPerIndivisibleTokenPart) {\n\t\treturn (USDWEI * 40000000 / (now - beginTime + 5760) - USDWEI * 5) / DIVISOR;\n\t}\n\n\t/// Returns the total indivisible token parts available for purchase right now.\n\tfunction tokensAvailable() public constant when_active returns (uint tokens) {\n\t\tuint _currentCap = totalAccounted / currentPrice();\n\t\tif (_currentCap >= tokenCap) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn tokenCap - _currentCap;\n\t}\n\n\t/// The largest purchase than can be made at present, not including any\n\t/// discount.\n\tfunction maxPurchase() public constant when_active returns (uint spend) {\n\t\treturn tokenCap * currentPrice() - totalAccounted;\n\t}\n\n\t/// Get the number of `tokens` that would be given if the sender were to\n\t/// spend `_value` now. Also tell you what `refund` would be given, if any.\n\tfunction theDeal(uint _value)\n\t\tpublic\n\t\tconstant\n\t\twhen_active\n\t\treturns (uint accounted, bool refund, uint price)\n\t{\n\t\tuint _bonus = bonus(_value);\n\n\t\tprice = currentPrice();\n\t\taccounted = _value + _bonus;\n\n\t\tuint available = tokensAvailable();\n\t\tuint tokens = accounted / price;\n\t\trefund = (tokens > available);\n\t}\n\n\t/// Any applicable bonus to `_value`.\n\tfunction bonus(uint _value)\n\t\tpublic\n\t\tconstant\n\t\twhen_active\n\t\treturns (uint extra)\n\t{\n\t\treturn _value * uint(currentBonus) / 100;\n\t}\n\n\t/// True if the sale is ongoing.\n\tfunction isActive() public constant returns (bool) { return now >= beginTime && now < endTime; }\n\n\t/// True if all buyins have finalised.\n\tfunction allFinalised() public constant returns (bool) { return now >= endTime && totalAccounted == totalFinalised; }\n\n\t/// Returns true if the sender of this transaction is a basic account.\n\tfunction isBasicAccount(address _who) internal constant returns (bool) {\n\t\tuint senderCodeSize;\n\t\tassembly {\n\t\t\tsenderCodeSize := extcodesize(_who)\n\t\t}\n\t    return senderCodeSize == 0;\n\t}\n\n\t// Modifiers:\n\n\t/// Ensure the sale is ongoing.\n\tmodifier when_active { require (isActive()); _; }\n\n\t/// Ensure the sale has not begun.\n\tmodifier before_beginning { require (now < beginTime); _; }\n\n\t/// Ensure the sale is ended.\n\tmodifier when_ended { require (now >= endTime); _; }\n\n\t/// Ensure we're not halted.\n\tmodifier when_not_halted { require (!halted); _; }\n\n\t/// Ensure `_who` is a participant.\n\tmodifier only_buyins(address _who) { require (buyins[_who].accounted != 0); _; }\n\n\t/// Ensure sender is admin.\n\tmodifier only_admin { require (msg.sender == admin); _; }\n\n\t/// Ensure that the signature is valid, `who` is a certified, basic account,\n\t/// the gas price is sufficiently low and the value is sufficiently high.\n\tmodifier only_eligible(address who, uint8 v, bytes32 r, bytes32 s) {\n\t\trequire (\n\t\t\tecrecover(STATEMENT_HASH, v, r, s) == who &&\n\t\t\tcertifier.certified(who) &&\n\t\t\tisBasicAccount(who) &&\n\t\t\tmsg.value >= DUST_LIMIT\n\t\t);\n\t\t_;\n\t}\n\n\t/// Ensure sender is not a contract.\n\tmodifier only_basic(address who) { require (isBasicAccount(who)); _; }\n\n\t// State:\n\n\tstruct Account {\n\t\tuint128 accounted;\t// including bonus & hit\n\t\tuint128 received;\t// just the amount received, without bonus & hit\n\t}\n\n\t/// Those who have bought in to the auction.\n\tmapping (address => Account) public buyins;\n\n\t/// Total amount of ether received, excluding phantom \"bonus\" ether.\n\tuint public totalReceived = 0;\n\n\t/// Total amount of ether accounted for, including phantom \"bonus\" ether.\n\tuint public totalAccounted = 0;\n\n\t/// Total amount of ether which has been finalised.\n\tuint public totalFinalised = 0;\n\n\t/// The current end time. Gets updated when new funds are received.\n\tuint public endTime;\n\n\t/// The price per token; only valid once the sale has ended and at least one\n\t/// participant has finalised.\n\tuint public endPrice;\n\n\t/// Must be false for any public function to be called.\n\tbool public halted;\n\n\t/// The current percentage of bonus that purchasers get.\n\tuint8 public currentBonus = 15;\n\n\t/// The last block that had a new participant.\n\tuint32 public lastNewInterest;\n\n\t// Constants after constructor:\n\n\t/// The tokens contract.\n\tToken public tokenContract;\n\n\t/// The certifier.\n\tCertifier public certifier;\n\n\t/// The treasury address; where all the Ether goes.\n\taddress public treasury;\n\n\t/// The admin address; auction can be paused or halted at any time by this.\n\taddress public admin;\n\n\t/// The time at which the sale begins.\n\tuint public beginTime;\n\n\t/// Maximum amount of tokens to mint. Once totalAccounted / currentPrice is\n\t/// greater than this, the sale ends.\n\tuint public tokenCap;\n\n\t// Era stuff (isolated)\n\t/// The era for which the current consolidated data represents.\n\tuint public eraIndex;\n\n\t/// The size of the era in seconds.\n\tuint constant public ERA_PERIOD = 5 minutes;\n\n\t// Static constants:\n\n\t/// Anything less than this is considered dust and cannot be used to buy in.\n\tuint constant public DUST_LIMIT = 5 finney;\n\n\t/// The hash of the statement which must be signed in order to buyin.\n\t/// The meaning of this hash is:\n\t///\n\t/// parity.api.util.sha3(parity.api.util.asciiToHex(\"\\x19Ethereum Signed Message:\\n\" + tscs.length + tscs))\n\t/// where `toUTF8 = x => unescape(encodeURIComponent(x))`\n\t/// and `tscs` is the toUTF8 called on the contents of https://gist.githubusercontent.com/gavofyork/5a530cad3b19c1cafe9148f608d729d2/raw/a116b507fd6d96036037f3affd393994b307c09a/gistfile1.txt\n\tbytes32 constant public STATEMENT_HASH = 0x2cedb9c5443254bae6c4f44a31abcb33ec27a0bd03eb58e22e38cdb8b366876d;\n\n\t/// Minimum duration after sale begins that bonus is active.\n\tuint constant public BONUS_MIN_DURATION = 1 hours;\n\n\t/// Minimum duration after sale begins that bonus is active.\n\tuint constant public BONUS_MAX_DURATION = 24 hours;\n\n\t/// Number of consecutive blocks where there must be no new interest before bonus ends.\n\tuint constant public BONUS_LATCH = 2;\n\n\t/// Number of Wei in one USD, constant.\n\tuint constant public USDWEI = 3226 szabo;\n\n\t/// Divisor of the token.\n\tuint constant public DIVISOR = 1000;\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"ERA_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"certifier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"bonus\",\"outputs\":[{\"name\":\"extra\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eraIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAccounted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"finalise\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DIVISOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyins\",\"outputs\":[{\"name\":\"accounted\",\"type\":\"uint128\"},{\"name\":\"received\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_MIN_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DUST_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"uninject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFinalised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_LATCH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDWEI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAvailable\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beginTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastNewInterest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATEMENT_HASH\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPurchase\",\"outputs\":[{\"name\":\"spend\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_MAX_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"weiPerIndivisibleTokenPart\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"theDeal\",\"outputs\":[{\"name\":\"accounted\",\"type\":\"uint256\"},{\"name\":\"refund\",\"type\":\"bool\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_received\",\"type\":\"uint128\"}],\"name\":\"inject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"buyin\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_halted\",\"type\":\"bool\"}],\"name\":\"setHalted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allFinalised\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_certifierContract\",\"type\":\"address\"},{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_treasury\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_beginTime\",\"type\":\"uint256\"},{\"name\":\"_tokenCap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"accounted\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"received\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Buyin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"accounted\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"received\",\"type\":\"uint256\"}],\"name\":\"Injected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Uninjected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"era\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"received\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accounted\",\"type\":\"uint256\"}],\"name\":\"Ticked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Ended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Finalised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Retired\",\"type\":\"event\"}]",
  "bytecode": "60606040526000600181905560028190556003556006805461ff001916610f00179055341561002d57600080fd5b60405160c0806111f083398101604052808051919060200180519190602001805191906020018051919060200180519190602001805160078054600160a060020a0319908116600160a060020a039a8b161790915560068054603060020a60d060020a0319166601000000000000998b169990990298909817909755600880548816968916969096179095555050600980549094169190941617909155600a829055600b556224ea0001600455611107806100e96000396000f300606060405236156101bc5763ffffffff60e060020a6000350416630f6d9f0081146101cb578063120c7efd146101f057806322f3e2d41461021f57806324749b591461024657806324fc253e1461025c5780632964e4e61461026f5780633197cbb614610282578063330c3fe5146102955780633410fe6e146102b45780633f8d9568146102c7578063409c7baf1461030a578063421934731461031d5780634290a5b91461033057806344af946f1461034f5780634ed767a1146103625780634f0693a11461037557806354fbde651461038857806355a373d61461039b57806360659a92146103ae57806361d027b3146103c157806388149fb9146103d45780638e550bd1146103e757806394c21ff314610413578063977b055b146104265780639890220b146104395780639b0c1e511461044c5780639d1b464a1461045f578063a3c2c46214610472578063b3c7d09714610485578063b868723e146104bf578063b9b8af0b146104d2578063bac6068c146104e5578063d028003714610510578063dcc279c814610524578063dd54291b1461053c578063eca73f641461054f578063f450d53a14610578578063f851a4401461058b575b34156101c757600080fd5bfe5b005b34156101d657600080fd5b6101de61059e565b60405190815260200160405180910390f35b34156101fb57600080fd5b6102036105a4565b604051600160a060020a03909116815260200160405180910390f35b341561022a57600080fd5b6102326105b3565b604051901515815260200160405180910390f35b341561025157600080fd5b6101de6004356105cd565b341561026757600080fd5b6101de6105f9565b341561027a57600080fd5b6101de6105ff565b341561028d57600080fd5b6101de610605565b34156102a057600080fd5b6101c9600160a060020a036004351661060b565b34156102bf57600080fd5b6101de610812565b34156102d257600080fd5b6102e6600160a060020a0360043516610818565b6040516001608060020a039283168152911660208201526040908101905180910390f35b341561031557600080fd5b6101de61083e565b341561032857600080fd5b6101de610844565b341561033b57600080fd5b6101c9600160a060020a036004351661084f565b341561035a57600080fd5b6101de6108ff565b341561036d57600080fd5b6101de610945565b341561038057600080fd5b6101de61094b565b341561039357600080fd5b6101de610950565b34156103a657600080fd5b61020361095b565b34156103b957600080fd5b6101de610974565b34156103cc57600080fd5b6102036109be565b34156103df57600080fd5b6101de6109cd565b34156103f257600080fd5b6103fa6109d3565b60405163ffffffff909116815260200160405180910390f35b341561041e57600080fd5b6101de6109e5565b341561043157600080fd5b6101de610a09565b341561044457600080fd5b6101c9610a33565b341561045757600080fd5b6101de610a89565b341561046a57600080fd5b6101de610a90565b341561047d57600080fd5b6101de610ae4565b341561049057600080fd5b61049b600435610aea565b60405192835290151560208301526040808301919091526060909101905180910390f35b34156104ca57600080fd5b6101de610b47565b34156104dd57600080fd5b610232610b4d565b34156104f057600080fd5b6101c9600160a060020a03600435166001608060020a0360243516610b56565b6101c960ff60043516602435604435610c90565b341561052f57600080fd5b6101c96004351515610fff565b341561054757600080fd5b6101de61102d565b341561055a57600080fd5b610562611033565b60405160ff909116815260200160405180910390f35b341561058357600080fd5b610232611041565b341561059657600080fd5b61020361105b565b61012c81565b600754600160a060020a031681565b6000600a5442101580156105c8575060045442105b905090565b60006105d76105b3565b15156105e257600080fd5b600654606490610100900460ff1683020492915050565b600c5481565b60025481565b60045481565b600654600090819060ff161561062057600080fd5b60045442101561062f57600080fd5b600160a060020a03831660009081526020819052604090205483906001608060020a0316151561065e57600080fd5b60055415156106b057600b5460025481151561067657fe5b0460058190557f601095663bda08ac0f932087ef2eb08e42e4bcd1927f3a8d9500f6ad2c5aef909060405190815260200160405180910390a15b600160a060020a0384166000908152602081905260409020546005546001608060020a039091169350838115156106e357fe5b6003805486019055600160a060020a038087166000908152602081905260408082208290556006549490930495506601000000000000909304169163a9059cbb9187918691516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561077057600080fd5b6102c65a03f1151561078157600080fd5b50505060405180519050151561079657600080fd5b83600160a060020a03167fd8a5cca1cc817d045ce0d6e405348bae3f2558baca99f954815924542f8e51648360405190815260200160405180910390a2600254600354141561080c577fc15f68f0a72806ff3f8bf2435385a67c4c22413f1c7931ef7bcea718e6ffcf0360405160405180910390a15b50505050565b6103e881565b6000602081905290815260409020546001608060020a0380821691608060020a90041682565b610e1081565b6611c37937e0800081565b60095433600160a060020a0390811691161461086a57600080fd5b600a54421061087857600080fd5b600160a060020a03811660009081526020819052604081208054600280546001608060020a0392831690039055815460018054608060020a90920490921690039055556108c36108ff565b600455600160a060020a0381167fc807cb02fce253121bbcda57e2aba8cdfa080d7650a91ac39520a8a9e4b5ffa960405160405180910390a250565b600080660b7607a80ba0006103e8600b5481151561091957fe5b040290506116808160050260025401826302625a000281151561093857fe5b04600a54010391505b5090565b60035481565b600281565b660b7607a80ba00081565b60065466010000000000009004600160a060020a031681565b60008061097f6105b3565b151561098a57600080fd5b610992610a90565b60025481151561099e57fe5b049050600b54811015156109b55760009150610941565b600b5403919050565b600854600160a060020a031681565b600a5481565b60065462010000900463ffffffff1681565b7f2cedb9c5443254bae6c4f44a31abcb33ec27a0bd03eb58e22e38cdb8b366876d81565b6000610a136105b3565b1515610a1e57600080fd5b600254610a29610a90565b600b540203905090565b60095433600160a060020a03908116911614610a4e57600080fd5b600854600160a060020a039081169030163180156108fc0290604051600060405180830381858888f193505050501515610a8757600080fd5b565b6201518081565b6000610a9a6105b3565b1515610aa557600080fd5b6103e8660b7607a80ba000600502600a54420361168001660b7607a80ba0006302625a0002811515610ad357fe5b0403811515610ade57fe5b04905090565b60015481565b600080600080600080610afb6105b3565b1515610b0657600080fd5b610b0f876105cd565b9250610b19610a90565b93508287019550610b28610974565b91508386811515610b3557fe5b04905081811194505050509193909250565b60055481565b60065460ff1681565b600954600090819033600160a060020a03908116911614610b7657600080fd5b83610b808161106a565b1515610b8b57600080fd5b600a544210610b9957600080fd5b600654606490610100900460ff1685026001608060020a0316600160a060020a038716600090815260208190526040902080546fffffffffffffffffffffffffffffffff198116939092048781016001608060020a039384168101841694909417808416608060020a9182900485168a01851690910217909155600280548484160190556001805492881690920190915593509150610c366108ff565b600455600160a060020a0385167f2ae7c31359dcbe79d8c73f09dfd8402987b1236967e2224d8d398f6f40f46dd783866040516001608060020a039283168152911660208201526040908101905180910390a25050505050565b6006546000908190819060ff1615610ca757600080fd5b610caf6105b3565b1515610cba57600080fd5b33868686600160a060020a03841660017f2cedb9c5443254bae6c4f44a31abcb33ec27a0bd03eb58e22e38cdb8b366876d8585856040516000815260200160405260006040516020015260405193845260ff90921660208085019190915260408085019290925260608401929092526080909201915160208103908084039060008661646e5a03f11515610d4d57600080fd5b505060206040510351600160a060020a0316148015610ddc5750600754600160a060020a031663cc1d4c028560006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610dc057600080fd5b6102c65a03f11515610dd157600080fd5b505050604051805190505b8015610dec5750610dec8461106a565b8015610dff57506611c37937e080003410155b1515610e0a57600080fd5b610e1261106f565b600654600061010090910460ff161115610ede57610e10600a54014210158015610e5157506006544363ffffffff620100009092049190911660020111155b15610e78576006805460001960ff610100808404821692909201160261ff00199091161790555b600a5462015180014210610e92576006805461ff00191690555b33600160a060020a0316600090815260208190526040902054608060020a90046001608060020a03161515610ede576006805465ffffffff00001916620100004363ffffffff16021790555b610ee734610aea565b919850965094508515610ef957600080fd5b33600160a060020a0316600090815260208190526040902080546fffffffffffffffffffffffffffffffff1981166001608060020a039182168a0182161780821634608060020a9283900484168101909316909102179091556002805489019055600180549091019055610f6b6108ff565b600455600160a060020a0333167f332ff6f9deafa8e3394664e234c5b6ecd51769ea7a7170a2bf25fa8687cf620e88348860405180848152602001838152602001828152602001935050505060405180910390a2600854600160a060020a03163480156108fc0290604051600060405180830381858888f193505050501515610ff357600080fd5b50505050505050505050565b60095433600160a060020a0390811691161461101a57600080fd5b6006805460ff1916911515919091179055565b600b5481565b600654610100900460ff1681565b600060045442101580156105c85750506003546002541490565b600954600160a060020a031681565b3b1590565b600a5460009061012c904203049050600c548111156110d6577f82fbbe47003f3ca8230f7ab30eeabd25f09023e15ca04dc5bd49ac1a11a223b9600c5460015460025460405180848152602001838152602001828152602001935050505060405180910390a15b600c555600a165627a7a7230582088a6d8cd91e489fbd6c2002598acb7f90f870227b01fe82edd3e4fd14e3e64d000290000000000000000000000001e2f058c43ac8965938f6e9ca286685a3e63f24e000000000000000000000000b59f67a8bff5d8cd03f6ac17265c550ed8f339070000000000000000000000003bfc20f0b9afcace800d73d2191166ff165402580000000000000000000000000019cbe96be7c69a8218237aadff5f9657965f020000000000000000000000000000000000000000000000000000000059e331ca000000000000000000000000000000000000000000000000000000012a05f200",
  "constructorArguments": "0000000000000000000000001e2f058c43ac8965938f6e9ca286685a3e63f24e000000000000000000000000b59f67a8bff5d8cd03f6ac17265c550ed8f339070000000000000000000000003bfc20f0b9afcace800d73d2191166ff165402580000000000000000000000000019cbe96be7c69a8218237aadff5f9657965f020000000000000000000000000000000000000000000000000000000059e331ca000000000000000000000000000000000000000000000000000000012a05f200"
}