{
  "address": "0x6c6ee5e31d828de241282b9606c8e98ea48526e2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Holo Token",
  "contractName": "HoloToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-01\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// This is an ERC-20 token contract based on Open Zepplin's StandardToken\n// and MintableToken plus the ability to burn tokens.\n//\n// We had to copy over the code instead of inheriting because of changes\n// to the modifier lists of some functions:\n//   * transfer(), transferFrom() and approve() are not callable during\n//     the minting period, only after MintingFinished()\n//   * mint() can only be called by the minter who is not the owner\n//     but the HoloTokenSale contract.\n//\n// Token can be burned by a special 'destroyer' role that can only\n// burn its tokens.\ncontract HoloToken is Ownable {\n  string public constant name = \"HoloToken\";\n  string public constant symbol = \"HOT\";\n  uint8 public constant decimals = 18;\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  event Mint(address indexed to, uint256 amount);\n  event MintingFinished();\n  event Burn(uint256 amount);\n\n  uint256 public totalSupply;\n\n\n  //==================================================================================\n  // Zeppelin BasicToken (plus modifier to not allow transfers during minting period):\n  //==================================================================================\n\n  using SafeMath for uint256;\n\n  mapping(address => uint256) public balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public whenMintingFinished returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n\n  //=====================================================================================\n  // Zeppelin StandardToken (plus modifier to not allow transfers during minting period):\n  //=====================================================================================\n  mapping (address => mapping (address => uint256)) public allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public whenMintingFinished returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public whenMintingFinished returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n\n  //=====================================================================================\n  // Minting:\n  //=====================================================================================\n\n  bool public mintingFinished = false;\n  address public destroyer;\n  address public minter;\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier whenMintingFinished() {\n    require(mintingFinished);\n    _;\n  }\n\n  modifier onlyMinter() {\n    require(msg.sender == minter);\n    _;\n  }\n\n  function setMinter(address _minter) external onlyOwner {\n    minter = _minter;\n  }\n\n  function mint(address _to, uint256 _amount) external onlyMinter canMint  returns (bool) {\n    require(balances[_to] + _amount > balances[_to]); // Guard against overflow\n    require(totalSupply + _amount > totalSupply);     // Guard against overflow  (this should never happen)\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    return true;\n  }\n\n  function finishMinting() external onlyMinter returns (bool) {\n    mintingFinished = true;\n    MintingFinished();\n    return true;\n  }\n\n\n  //=====================================================================================\n  // Burning:\n  //=====================================================================================\n\n\n  modifier onlyDestroyer() {\n     require(msg.sender == destroyer);\n     _;\n  }\n\n  function setDestroyer(address _destroyer) external onlyOwner {\n    destroyer = _destroyer;\n  }\n\n  function burn(uint256 _amount) external onlyDestroyer {\n    require(balances[destroyer] >= _amount && _amount > 0);\n    balances[destroyer] = balances[destroyer].sub(_amount);\n    totalSupply = totalSupply.sub(_amount);\n    Burn(_amount);\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"destroyer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destroyer\",\"type\":\"address\"}],\"name\":\"setDestroyer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintingFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60606040526004805460ff1916905560008054600160a060020a033316600160a060020a0319909116179055610e348061003a6000396000f3006060604052600436106101325763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461013757806306fdde031461015e57806307546172146101e8578063095ea7b31461021757806311367b261461023957806318160ddd1461024c57806323b872dd1461027157806327e235e314610299578063313ce567146102b857806340c10f19146102e157806342966c68146103035780635c6581651461031b57806366188463146103405780636a7301b81461036257806370a08231146103815780637d64bcb4146103a05780638da5cb5b146103b357806395d89b41146103c6578063a9059cbb146103d9578063d73dd623146103fb578063dd62ed3e1461041d578063f2fde38b14610442578063fca3b5aa14610461575b600080fd5b341561014257600080fd5b61014a610480565b604051901515815260200160405180910390f35b341561016957600080fd5b610171610489565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101ad578082015183820152602001610195565b50505050905090810190601f1680156101da5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101f357600080fd5b6101fb6104c0565b604051600160a060020a03909116815260200160405180910390f35b341561022257600080fd5b61014a600160a060020a03600435166024356104cf565b341561024457600080fd5b6101fb61054c565b341561025757600080fd5b61025f610560565b60405190815260200160405180910390f35b341561027c57600080fd5b61014a600160a060020a0360043581169060243516604435610566565b34156102a457600080fd5b61025f600160a060020a03600435166106fa565b34156102c357600080fd5b6102cb61070c565b60405160ff909116815260200160405180910390f35b34156102ec57600080fd5b61014a600160a060020a0360043516602435610711565b341561030e57600080fd5b61031960043561080f565b005b341561032657600080fd5b61025f600160a060020a03600435811690602435166108fa565b341561034b57600080fd5b61014a600160a060020a0360043516602435610917565b341561036d57600080fd5b610319600160a060020a0360043516610a11565b341561038c57600080fd5b61025f600160a060020a0360043516610a61565b34156103ab57600080fd5b61014a610a7c565b34156103be57600080fd5b6101fb610ad9565b34156103d157600080fd5b610171610ae8565b34156103e457600080fd5b61014a600160a060020a0360043516602435610b1f565b341561040657600080fd5b61014a600160a060020a0360043516602435610c2c565b341561042857600080fd5b61025f600160a060020a0360043581169060243516610cd0565b341561044d57600080fd5b610319600160a060020a0360043516610cfb565b341561046c57600080fd5b610319600160a060020a0360043516610d96565b60045460ff1681565b60408051908101604052600981527f486f6c6f546f6b656e0000000000000000000000000000000000000000000000602082015281565b600554600160a060020a031681565b60045460009060ff1615156104e357600080fd5b600160a060020a03338116600081815260036020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6004546101009004600160a060020a031681565b60015481565b60045460009060ff16151561057a57600080fd5b600160a060020a038316151561058f57600080fd5b600160a060020a0384166000908152600260205260409020548211156105b457600080fd5b600160a060020a03808516600090815260036020908152604080832033909416835292905220548211156105e757600080fd5b600160a060020a038416600090815260026020526040902054610610908363ffffffff610de016565b600160a060020a038086166000908152600260205260408082209390935590851681522054610645908363ffffffff610df216565b600160a060020a0380851660009081526002602090815260408083209490945587831682526003815283822033909316825291909152205461068d908363ffffffff610de016565b600160a060020a03808616600081815260036020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60026020526000908152604090205481565b601281565b60055460009033600160a060020a0390811691161461072f57600080fd5b60045460ff161561073f57600080fd5b600160a060020a0383166000908152600260205260409020548281011161076557600080fd5b6001548281011161077557600080fd5b600154610788908363ffffffff610df216565b600155600160a060020a0383166000908152600260205260409020546107b4908363ffffffff610df216565b600160a060020a0384166000818152600260205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a250600192915050565b60045433600160a060020a03908116610100909204161461082f57600080fd5b6004546101009004600160a060020a031660009081526002602052604090205481901080159061085f5750600081115b151561086a57600080fd5b6004546101009004600160a060020a03166000908152600260205260409020546108949082610de0565b6004546101009004600160a060020a03166000908152600260205260409020556001546108c19082610de0565b6001557fb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb8160405190815260200160405180910390a150565b600360209081526000928352604080842090915290825290205481565b600160a060020a0333811660009081526003602090815260408083209386168352929052908120548083111561097457600160a060020a0333811660009081526003602090815260408083209388168352929052908120556109ab565b610984818463ffffffff610de016565b600160a060020a033381166000908152600360209081526040808320938916835292905220555b600160a060020a0333811660008181526003602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b60005433600160a060020a03908116911614610a2c57600080fd5b60048054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b600160a060020a031660009081526002602052604090205490565b60055460009033600160a060020a03908116911614610a9a57600080fd5b6004805460ff191660011790557fb828d9b5c78095deeeeff2eca2e5d4fe046ce3feb4c99702624a3fd384ad2dbc60405160405180910390a150600190565b600054600160a060020a031681565b60408051908101604052600381527f484f540000000000000000000000000000000000000000000000000000000000602082015281565b60045460009060ff161515610b3357600080fd5b600160a060020a0383161515610b4857600080fd5b600160a060020a033316600090815260026020526040902054821115610b6d57600080fd5b600160a060020a033316600090815260026020526040902054610b96908363ffffffff610de016565b600160a060020a033381166000908152600260205260408082209390935590851681522054610bcb908363ffffffff610df216565b600160a060020a0380851660008181526002602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a033381166000908152600360209081526040808320938616835292905290812054610c64908363ffffffff610df216565b600160a060020a0333811660008181526003602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60005433600160a060020a03908116911614610d1657600080fd5b600160a060020a0381161515610d2b57600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60005433600160a060020a03908116911614610db157600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610dec57fe5b50900390565b600082820183811015610e0157fe5b93925050505600a165627a7a723058204221a25d326558196a818e387d635875fd978d9c808705f736bb498658d4e7ab0029"
}