{
  "address": "0xe1f2b626a0c4817ba3b16b6bd1f4147d97b91681",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenSale",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-15\n*/\n\n/**\n * Copyright (c) 2019 blockimmo AG [emailÂ protected]\n * No license\n */\n\npragma solidity 0.5.4;\n\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must equal true).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n\n        require(address(token).isContract());\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success);\n\n        if (returndata.length > 0) { // Return data is optional\n            require(abi.decode(returndata, (bool)));\n        }\n    }\n}\n\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\ncontract ReentrancyGuard {\n    /// @dev counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n\n    constructor () internal {\n        // The counter starts at one to prevent changing it from zero to a non-zero\n        // value, which is a more expensive operation.\n        _guardCounter = 1;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter);\n    }\n}\n\ncontract Crowdsale is ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // The token being sold\n    IERC20 private _token;\n\n    // Address where funds are collected\n    address payable private _wallet;\n\n    // How many token units a buyer gets per wei.\n    // The rate is the conversion between wei and the smallest and indivisible token unit.\n    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\n    // 1 wei will give you 1 unit, or 0.001 TOK.\n    uint256 private _rate;\n\n    // Amount of wei raised\n    uint256 private _weiRaised;\n\n    /**\n     * Event for token purchase logging\n     * @param purchaser who paid for the tokens\n     * @param beneficiary who got the tokens\n     * @param value weis paid for purchase\n     * @param amount amount of tokens purchased\n     */\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    /**\n     * @param rate Number of token units a buyer gets per wei\n     * @dev The rate is the conversion between wei and the smallest and indivisible\n     * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\n     * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\n     * @param wallet Address where collected funds will be forwarded to\n     * @param token Address of the token being sold\n     */\n    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n        require(rate > 0);\n        require(wallet != address(0));\n        require(address(token) != address(0));\n\n        _rate = rate;\n        _wallet = wallet;\n        _token = token;\n    }\n\n    /**\n     * @dev fallback function ***DO NOT OVERRIDE***\n     * Note that other contracts will transfer funds with a base gas stipend\n     * of 2300, which is not enough to call buyTokens. Consider calling\n     * buyTokens directly when purchasing tokens from a contract.\n     */\n    function () external payable {\n        buyTokens(msg.sender);\n    }\n\n    /**\n     * @return the token being sold.\n     */\n    function token() public view returns (IERC20) {\n        return _token;\n    }\n\n    /**\n     * @return the address where funds are collected.\n     */\n    function wallet() public view returns (address payable) {\n        return _wallet;\n    }\n\n    /**\n     * @return the number of token units a buyer gets per wei.\n     */\n    function rate() public view returns (uint256) {\n        return _rate;\n    }\n\n    /**\n     * @return the amount of wei raised.\n     */\n    function weiRaised() public view returns (uint256) {\n        return _weiRaised;\n    }\n\n    /**\n     * @dev low level token purchase ***DO NOT OVERRIDE***\n     * This function has a non-reentrancy guard, so it shouldn't be called by\n     * another `nonReentrant` function.\n     * @param beneficiary Recipient of the token purchase\n     */\n    function buyTokens(address beneficiary) public nonReentrant payable {\n        uint256 weiAmount = _weiAmount();\n        _preValidatePurchase(beneficiary, weiAmount);\n\n        // calculate token amount to be created\n        uint256 tokens = _getTokenAmount(weiAmount);\n\n        // update state\n        _weiRaised = _weiRaised.add(weiAmount);\n\n        _processPurchase(beneficiary, tokens);\n        emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\n\n        _updatePurchasingState(beneficiary, weiAmount);\n\n        _forwardFunds();\n        _postValidatePurchase(beneficiary, weiAmount);\n    }\n\n    /**\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\n     * Use `super` in contracts that inherit from Crowdsale to extend their validations.\n     * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n     *     super._preValidatePurchase(beneficiary, weiAmount);\n     *     require(weiRaised().add(weiAmount) <= cap);\n     * @param beneficiary Address performing the token purchase\n     * @param weiAmount Value in wei involved in the purchase\n     */\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n        require(beneficiary != address(0));\n        require(weiAmount != 0);\n    }\n\n    /**\n     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\n     * conditions are not met.\n     * @param beneficiary Address performing the token purchase\n     * @param weiAmount Value in wei involved in the purchase\n     */\n    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    /**\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\n     * its tokens.\n     * @param beneficiary Address performing the token purchase\n     * @param tokenAmount Number of tokens to be emitted\n     */\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n        _token.safeTransfer(beneficiary, tokenAmount);\n    }\n\n    /**\n     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\n     * tokens.\n     * @param beneficiary Address receiving the tokens\n     * @param tokenAmount Number of tokens to be purchased\n     */\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\n        _deliverTokens(beneficiary, tokenAmount);\n    }\n\n    /**\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\n     * etc.)\n     * @param beneficiary Address receiving the tokens\n     * @param weiAmount Value in wei involved in the purchase\n     */\n    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    /**\n     * @dev Override to extend the way in which ether is converted to tokens.\n     * @param weiAmount Value in wei to be converted into tokens\n     * @return Number of tokens that can be purchased with the specified _weiAmount\n     */\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n        return weiAmount.mul(_rate);\n    }\n\n    /**\n     * @dev Determines how ETH is stored/forwarded on purchases.\n     */\n    function _forwardFunds() internal {\n        _wallet.transfer(msg.value);\n    }\n\n    /**\n     * @dev Determines the value (in Wei) included with a purchase.\n     */\n    function _weiAmount() internal view returns (uint256) {\n      return msg.value;\n    }\n}\n\ncontract CappedCrowdsale is Crowdsale {\n    using SafeMath for uint256;\n\n    uint256 private _cap;\n\n    /**\n     * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n     * @param cap Max amount of wei to be contributed\n     */\n    constructor (uint256 cap) public {\n        require(cap > 0);\n        _cap = cap;\n    }\n\n    /**\n     * @return the cap of the crowdsale.\n     */\n    function cap() public view returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @dev Checks whether the cap has been reached.\n     * @return Whether the cap was reached\n     */\n    function capReached() public view returns (bool) {\n        return weiRaised() >= _cap;\n    }\n\n    /**\n     * @dev Extend parent behavior requiring purchase to respect the funding cap.\n     * @param beneficiary Token purchaser\n     * @param weiAmount Amount of wei contributed\n     */\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n        super._preValidatePurchase(beneficiary, weiAmount);\n        require(weiRaised().add(weiAmount) <= _cap);\n    }\n}\n\ncontract TimedCrowdsale is Crowdsale {\n    using SafeMath for uint256;\n\n    uint256 private _openingTime;\n    uint256 private _closingTime;\n\n    /**\n     * Event for crowdsale extending\n     * @param newClosingTime new closing time\n     * @param prevClosingTime old closing time\n     */\n    event TimedCrowdsaleExtended(uint256 prevClosingTime, uint256 newClosingTime);\n\n    /**\n     * @dev Reverts if not in crowdsale time range.\n     */\n    modifier onlyWhileOpen {\n        require(isOpen());\n        _;\n    }\n\n    /**\n     * @dev Constructor, takes crowdsale opening and closing times.\n     * @param openingTime Crowdsale opening time\n     * @param closingTime Crowdsale closing time\n     */\n    constructor (uint256 openingTime, uint256 closingTime) public {\n        // solhint-disable-next-line not-rely-on-time\n        require(openingTime >= block.timestamp);\n        require(closingTime > openingTime);\n\n        _openingTime = openingTime;\n        _closingTime = closingTime;\n    }\n\n    /**\n     * @return the crowdsale opening time.\n     */\n    function openingTime() public view returns (uint256) {\n        return _openingTime;\n    }\n\n    /**\n     * @return the crowdsale closing time.\n     */\n    function closingTime() public view returns (uint256) {\n        return _closingTime;\n    }\n\n    /**\n     * @return true if the crowdsale is open, false otherwise.\n     */\n    function isOpen() public view returns (bool) {\n        // solhint-disable-next-line not-rely-on-time\n        return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n    }\n\n    /**\n     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n     * @return Whether crowdsale period has elapsed\n     */\n    function hasClosed() public view returns (bool) {\n        // solhint-disable-next-line not-rely-on-time\n        return block.timestamp > _closingTime;\n    }\n\n    /**\n     * @dev Extend parent behavior requiring to be within contributing period\n     * @param beneficiary Token purchaser\n     * @param weiAmount Amount of wei contributed\n     */\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {\n        super._preValidatePurchase(beneficiary, weiAmount);\n    }\n\n    /**\n     * @dev Extend crowdsale\n     * @param newClosingTime Crowdsale closing time\n     */\n    function _extendTime(uint256 newClosingTime) internal {\n        require(!hasClosed());\n        require(newClosingTime > _closingTime);\n\n        emit TimedCrowdsaleExtended(_closingTime, newClosingTime);\n        _closingTime = newClosingTime;\n    }\n}\n\ncontract FinalizableCrowdsale is TimedCrowdsale {\n    using SafeMath for uint256;\n\n    bool private _finalized;\n\n    event CrowdsaleFinalized();\n\n    constructor () internal {\n        _finalized = false;\n    }\n\n    /**\n     * @return true if the crowdsale is finalized, false otherwise.\n     */\n    function finalized() public view returns (bool) {\n        return _finalized;\n    }\n\n    /**\n     * @dev Must be called after crowdsale ends, to do some extra finalization\n     * work. Calls the contract's finalization function.\n     */\n    function finalize() public {\n        require(!_finalized);\n        require(hasClosed());\n\n        _finalized = true;\n\n        _finalization();\n        emit CrowdsaleFinalized();\n    }\n\n    /**\n     * @dev Can be overridden to add finalization logic. The overriding function\n     * should call super._finalization() to ensure the chain of finalization is\n     * executed entirely.\n     */\n    function _finalization() internal {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n}\n\ncontract PostDeliveryCrowdsale is TimedCrowdsale {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balances;\n\n    /**\n     * @dev Withdraw tokens only after crowdsale ends.\n     * @param beneficiary Whose tokens will be withdrawn.\n     */\n    function withdrawTokens(address beneficiary) public {\n        require(hasClosed());\n        uint256 amount = _balances[beneficiary];\n        require(amount > 0);\n        _balances[beneficiary] = 0;\n        _deliverTokens(beneficiary, amount);\n    }\n\n    /**\n     * @return the balance of an account.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev Overrides parent by storing balances instead of issuing tokens right away.\n     * @param beneficiary Token purchaser\n     * @param tokenAmount Amount of tokens purchased\n     */\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\n        _balances[beneficiary] = _balances[beneficiary].add(tokenAmount);\n    }\n\n}\n\ncontract MoneyMarketInterface {\n  function getSupplyBalance(address account, address asset) public view returns (uint);\n  function supply(address asset, uint amount) public returns (uint);\n  function withdraw(address asset, uint requestedAmount) public returns (uint);\n}\n\ncontract LoanEscrow is Pausable {\n  using SafeERC20 for IERC20;\n  using SafeMath for uint256;\n\n  // configurable to any ERC20 (i.e. xCHF)\n  IERC20 public dai = IERC20(0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359);  // 0x9Ad61E35f8309aF944136283157FABCc5AD371E5  // 0xB4272071eCAdd69d933AdcD19cA99fe80664fc08\n  MoneyMarketInterface public moneyMarket = MoneyMarketInterface(0x3FDA67f7583380E67ef93072294a7fAc882FD7E7);  // 0x6732c278C58FC90542cce498981844A073D693d7\n\n  event Deposited(address indexed from, uint256 daiAmount);\n  event InterestWithdrawn(address indexed to, uint256 daiAmount);\n  event Pulled(address indexed to, uint256 daiAmount);\n\n  mapping(address => uint256) public deposits;\n  mapping(address => uint256) public pulls;\n  uint256 public deposited;\n  uint256 public pulled;\n\n  modifier onlyBlockimmo() {\n    require(msg.sender == blockimmo(), \"onlyBlockimmo\");\n    _;\n  }\n\n  function blockimmo() public view returns (address);\n\n  function withdrawInterest() public onlyBlockimmo {\n    uint256 amountInterest = moneyMarket.getSupplyBalance(address(this), address(dai)).add(dai.balanceOf(address(this))).add(pulled).sub(deposited);\n    require(amountInterest > 0, \"no interest\");\n\n    uint256 errorCode = (amountInterest > dai.balanceOf(address(this))) ? moneyMarket.withdraw(address(dai), amountInterest.sub(dai.balanceOf(address(this)))) : 0;\n    require(errorCode == 0, \"withdraw failed\");\n\n    dai.safeTransfer(msg.sender, amountInterest);\n    emit InterestWithdrawn(msg.sender, amountInterest);\n  }\n\n  function withdrawMoneyMarket(uint256 _amountDai) public onlyBlockimmo {\n    uint256 errorCode = moneyMarket.withdraw(address(dai), _amountDai);\n    require(errorCode == 0, \"withdraw failed\");\n  }\n\n  function deposit(address _from, uint256 _amountDai) internal {\n    require(_from != address(0) && _amountDai > 0, \"invalid parameter(s)\");\n\n    dai.safeTransferFrom(msg.sender, address(this), _amountDai);\n\n    if (!paused()) {\n      dai.safeApprove(address(moneyMarket), _amountDai);\n\n      uint256 errorCode = moneyMarket.supply(address(dai), _amountDai);\n      require(errorCode == 0, \"supply failed\");\n      require(dai.allowance(address(this), address(moneyMarket)) == 0, \"allowance not fully consumed by moneyMarket\");\n    }\n\n    deposits[_from] = deposits[_from].add(_amountDai);\n    deposited = deposited.add(_amountDai);\n    emit Deposited(_from, _amountDai);\n  }\n\n  function pull(address _to, uint256 _amountDai, bool _refund) internal {\n    require(_to != address(0) && _amountDai > 0, \"invalid parameter(s)\");\n\n    uint256 errorCode = (_amountDai > dai.balanceOf(address(this))) ? moneyMarket.withdraw(address(dai), _amountDai.sub(dai.balanceOf(address(this)))) : 0;\n    require(errorCode == 0, \"withdraw failed\");\n\n    if (_refund) {\n      deposits[_to] = deposits[_to].sub(_amountDai);\n      deposited = deposited.sub(_amountDai);\n    } else {\n      pulls[_to] = pulls[_to].add(_amountDai);\n      pulled = pulled.add(_amountDai);\n    }\n\n    dai.safeTransfer(_to, _amountDai);\n    emit Pulled(_to, _amountDai);\n  }\n}\n\ncontract LandRegistryProxyInterface {\n  function owner() public view returns (address);\n}\n\ncontract WhitelistInterface {\n  function checkRole(address _operator, string memory _role) public view;\n  function hasRole(address _operator, string memory _role) public view returns (bool);\n}\n\ncontract WhitelistProxyInterface {\n  function whitelist() public view returns (WhitelistInterface);\n}\n\ncontract TokenSale is CappedCrowdsale, FinalizableCrowdsale, LoanEscrow, PostDeliveryCrowdsale {\n LandRegistryProxyInterface public registryProxy = LandRegistryProxyInterface(0xe72AD2A335AE18e6C7cdb6dAEB64b0330883CD56);  // 0x0f5Ea0A652E851678Ebf77B69484bFcD31F9459B;\n  WhitelistProxyInterface public whitelistProxy = WhitelistProxyInterface(0x7223b032180CDb06Be7a3D634B1E10032111F367);  // 0xEC8bE1A5630364292E56D01129E8ee8A9578d7D8;\n\n  mapping(address => bool) public claimedRefund;\n  uint256 public goal;\n  mapping(address => bool) public reversed;\n  uint256 public totalTokens;\n\n  constructor (\n    uint256 _cap,\n    uint256 _closingTime,\n    uint256 _goal,\n    uint256 _openingTime,\n    uint256 _rate,\n    IERC20 _token,\n    address payable _wallet\n  )\n  public\n    Crowdsale(_rate, _wallet, _token)\n    CappedCrowdsale(_cap)\n    FinalizableCrowdsale()\n    TimedCrowdsale(_openingTime, _closingTime)\n    PostDeliveryCrowdsale()\n  {\n    goal = _goal;\n  }\n\n  function blockimmo() public view returns (address) {\n    return registryProxy.owner();\n  }\n\n  function claimRefund(address _refundee) public {\n    require(finalized() && !goalReached());\n    require(!claimedRefund[_refundee]);\n\n    claimedRefund[_refundee] = true;\n    pull(_refundee, deposits[_refundee], true);\n  }\n\n  function goalReached() public view returns (bool) {\n    return weiRaised() >= goal;\n  }\n\n  function hasClosed() public view returns (bool) {\n    return capReached() || super.hasClosed();\n  }\n\n  function reverse(address _account) public {\n    require(!finalized());\n    require(!reversed[_account]);\n    WhitelistInterface whitelist = whitelistProxy.whitelist();\n    require(!whitelist.hasRole(_account, \"authorized\"));\n\n    reversed[_account] = true;\n    pull(_account, deposits[_account], true);\n  }\n\n  function totalTokensSold() public view returns (uint256) {\n    return _getTokenAmount(weiRaised());\n  }\n\n  function withdrawTokens(address beneficiary) public {  // airdrop remaining tokens to investors proportionally\n    require(finalized() && goalReached(), \"withdrawTokens requires the TokenSale to be successfully finalized\");\n    require(!reversed[beneficiary]);\n\n    uint256 extra = totalTokens.sub(totalTokensSold()).mul(balanceOf(beneficiary)).div(totalTokensSold());\n    _deliverTokens(beneficiary, extra);\n\n    super.withdrawTokens(beneficiary);\n  }\n\n  function weiRaised() public view returns (uint256) {\n    return deposited;\n  }\n\n  function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n    return weiAmount.div(rate());\n  }\n\n  function _finalization() internal {\n    require(msg.sender == blockimmo() || msg.sender == wallet());\n    super._finalization();\n\n    totalTokens = token().balanceOf(address(this));\n\n    if (goalReached()) {\n      uint256 fee = weiRaised().div(100);\n\n      pull(blockimmo(), fee, false);\n      pull(wallet(), weiRaised().sub(fee), false);\n    } else {\n      token().safeTransfer(wallet(), totalTokens);\n    }\n  }\n\n  function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\n    super._processPurchase(beneficiary, tokenAmount);\n    deposit(beneficiary, tokenAmount.mul(rate()));\n  }\n\n  function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n    require(msg.value == 0, \"ether loss\");\n    require(!reversed[beneficiary]);\n\n    super._preValidatePurchase(beneficiary, weiAmount);\n\n    WhitelistInterface whitelist = whitelistProxy.whitelist();\n    whitelist.checkRole(beneficiary, \"authorized\");\n    require(deposits[beneficiary].add(weiAmount) <= 100000e18 || whitelist.hasRole(beneficiary, \"uncapped\"));\n  }\n\n  function _weiAmount() internal view returns (uint256) {\n    return dai.allowance(msg.sender, address(this));\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"withdrawInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registryProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pulls\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountDai\",\"type\":\"uint256\"}],\"name\":\"withdrawMoneyMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reversed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_refundee\",\"type\":\"address\"}],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moneyMarket\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"reverse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pulled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockimmo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"},{\"name\":\"_goal\",\"type\":\"uint256\"},{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"InterestWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"Pulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CrowdsaleFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"prevClosingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newClosingTime\",\"type\":\"uint256\"}],\"name\":\"TimedCrowdsaleExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"}]",
  "bytecode": "6080604052600a80547489d24a6b4ccb1b6faa2625fe562bdd9a232603590061010060a860020a0319909116179055600b8054600160a060020a0319908116733fda67f7583380e67ef93072294a7fac882fd7e71790915560118054821673e72ad2a335ae18e6c7cdb6daeb64b0330883cd5617905560128054909116737223b032180cdb06be7a3d634b1e10032111f367179055348015620000a157600080fd5b5060405160e08062002a14833981018060405260e0811015620000c357600080fd5b508051602082015160408301516060840151608085015160a086015160c09096015160016000908155959694959394929391929184908790899086908590879083116200010f57600080fd5b600160a060020a03821615156200012557600080fd5b600160a060020a03811615156200013b57600080fd5b60039290925560028054600160a060020a03928316600160a060020a03199182161790915560018054929093169116179055600081116200017b57600080fd5b600555428210156200018c57600080fd5b8181116200019957600080fd5b6006919091556007556008805460ff19169055620001c033640100000000620001da810204565b5050600a805460ff19169055505060145550620002bf9050565b620001f56009826401000000006200245f6200022c82021704565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600160a060020a03811615156200024257600080fd5b62000257828264010000000062000287810204565b156200026257600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a03821615156200029f57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b61274580620002cf6000396000f3fe60806040526004361061023e5760003560e060020a900480636ef8d66d11610132578063bffa55d5116100af578063ef8b715111610073578063ef8b71511461069e578063f280d77b146106b3578063f4b9fa75146106c8578063fc0c546a146106dd578063fc7e286d146106f25761023e565b8063bffa55d5146105e8578063d6d75f511461061b578063e30bd74014610630578063ec8ac4d814610663578063eef49ee3146106895761023e565b806382dc1ec4116100f657806382dc1ec4146105435780638456cb59146105765780639d7694ad1461058b578063b3f05b97146105be578063b7a8807c146105d35761023e565b80636ef8d66d146104a757806370a08231146104bc5780637d3d6522146104ef5780637e1c0c0914610504578063812bb2a3146105195761023e565b806346fbf68e116101c05780634f935945116101845780634f93594514610420578063521eb273146104355780635c975abb1461044a57806363b201171461045f578063664c35ab146104745761023e565b806346fbf68e1461037b57806347535d7b146103ae57806349df728c146103c35780634b6753bc146103f65780634bb278f31461040b5761023e565b80632c4e722e116102075780632c4e722e14610300578063355274ea146103275780633f4ba83a1461033c57806340193883146103515780634042b66f146103665761023e565b806263750c146102495780631515bc2b1461025e5780631aebd69514610287578063218d984b146102ba57806327cdf22e146102eb575b61024733610725565b005b34801561025557600080fd5b506102476107ea565b34801561026a57600080fd5b50610273610c6f565b604080519115158252519081900360200190f35b34801561029357600080fd5b50610273600480360360208110156102aa57600080fd5b5035600160a060020a0316610c8c565b3480156102c657600080fd5b506102cf610ca1565b60408051600160a060020a039092168252519081900360200190f35b3480156102f757600080fd5b506102cf610cb0565b34801561030c57600080fd5b50610315610cbf565b60408051918252519081900360200190f35b34801561033357600080fd5b50610315610cc5565b34801561034857600080fd5b50610247610ccb565b34801561035d57600080fd5b50610315610d2f565b34801561037257600080fd5b50610315610d35565b34801561038757600080fd5b506102736004803603602081101561039e57600080fd5b5035600160a060020a0316610d3b565b3480156103ba57600080fd5b50610273610d54565b3480156103cf57600080fd5b50610247600480360360208110156103e657600080fd5b5035600160a060020a0316610d6d565b34801561040257600080fd5b50610315610e4a565b34801561041757600080fd5b50610247610e50565b34801561042c57600080fd5b50610273610eb3565b34801561044157600080fd5b506102cf610ec7565b34801561045657600080fd5b50610273610ed6565b34801561046b57600080fd5b50610315610edf565b34801561048057600080fd5b506103156004803603602081101561049757600080fd5b5035600160a060020a0316610ef1565b3480156104b357600080fd5b50610247610f03565b3480156104c857600080fd5b50610315600480360360208110156104df57600080fd5b5035600160a060020a0316610f0e565b3480156104fb57600080fd5b50610273610f29565b34801561051057600080fd5b50610315610f36565b34801561052557600080fd5b506102476004803603602081101561053c57600080fd5b5035610f3c565b34801561054f57600080fd5b506102476004803603602081101561056657600080fd5b5035600160a060020a03166110a1565b34801561058257600080fd5b506102476110c1565b34801561059757600080fd5b50610273600480360360208110156105ae57600080fd5b5035600160a060020a0316611127565b3480156105ca57600080fd5b5061027361113c565b3480156105df57600080fd5b50610315611145565b3480156105f457600080fd5b506102476004803603602081101561060b57600080fd5b5035600160a060020a031661114b565b34801561062757600080fd5b506102cf6111d3565b34801561063c57600080fd5b506102476004803603602081101561065357600080fd5b5035600160a060020a03166111e2565b6102476004803603602081101561067957600080fd5b5035600160a060020a0316610725565b34801561069557600080fd5b506103156113b2565b3480156106aa57600080fd5b506103156113b8565b3480156106bf57600080fd5b506102cf6113be565b3480156106d457600080fd5b506102cf61144d565b3480156106e957600080fd5b506102cf611461565b3480156106fe57600080fd5b506103156004803603602081101561071557600080fd5b5035600160a060020a0316611470565b6000805460010180825590610738611482565b905061074483826114f1565b600061074f826117c4565b600454909150610765908363ffffffff6117de16565b60045561077284826117f7565b60408051838152602081018390528151600160a060020a0387169233927f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b929081900390910190a36107c484836107e6565b6107cc611822565b6107d684836107e6565b505060005481146107e657600080fd5b5050565b6107f26113be565b600160a060020a03163314610851576040805160e560020a62461bcd02815260206004820152600d60248201527f6f6e6c79426c6f636b696d6d6f00000000000000000000000000000000000000604482015290519081900360640190fd5b60006109c0600e546109b4600f546109a8600a60019054906101000a9004600160a060020a0316600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156108d057600080fd5b505afa1580156108e4573d6000803e3d6000fd5b505050506040513d60208110156108fa57600080fd5b5051600b54600a54604080517fba377731000000000000000000000000000000000000000000000000000000008152306004820152610100909204600160a060020a039081166024840152905192169163ba37773191604480820192602092909190829003018186803b15801561097057600080fd5b505afa158015610984573d6000803e3d6000fd5b505050506040513d602081101561099a57600080fd5b50519063ffffffff6117de16565b9063ffffffff6117de16565b9063ffffffff61185b16565b905060008111610a1a576040805160e560020a62461bcd02815260206004820152600b60248201527f6e6f20696e746572657374000000000000000000000000000000000000000000604482015290519081900360640190fd5b600a546040805160e060020a6370a0823102815230600482015290516000926101009004600160a060020a0316916370a08231916024808301926020929190829003018186803b158015610a6d57600080fd5b505afa158015610a81573d6000803e3d6000fd5b505050506040513d6020811015610a9757600080fd5b50518211610aa6576000610bc1565b600b54600a546040805160e060020a6370a082310281523060048201529051600160a060020a039384169363f3fef3a39361010090041691610b429183916370a08231916024808301926020929190829003018186803b158015610b0957600080fd5b505afa158015610b1d573d6000803e3d6000fd5b505050506040513d6020811015610b3357600080fd5b5051869063ffffffff61185b16565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610b9457600080fd5b505af1158015610ba8573d6000803e3d6000fd5b505050506040513d6020811015610bbe57600080fd5b50515b90508015610c19576040805160e560020a62461bcd02815260206004820152600f60248201527f7769746864726177206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b600a54610c35906101009004600160a060020a03163384611870565b60408051838152905133917f0fb2ffd41401cdebe76e1a7cdcaed20ad31cf8d215f8209b73ec00525cb8d686919081900360200190a25050565b6000610c79610eb3565b80610c875750610c876118f0565b905090565b60136020526000908152604090205460ff1681565b601154600160a060020a031681565b601254600160a060020a031681565b60035490565b60055490565b610cd433610d3b565b1515610cdf57600080fd5b600a5460ff161515610cf057600080fd5b600a805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b60145481565b600e5490565b6000610d4e60098363ffffffff6118f816565b92915050565b60006006544210158015610c8757505060075442111590565b610d7561113c565b8015610d845750610d84610f29565b1515610dc45760405160e560020a62461bcd0281526004018080602001828103825260428152602001806126d86042913960600191505060405180910390fd5b600160a060020a03811660009081526015602052604090205460ff1615610dea57600080fd5b6000610e35610df7610edf565b610e29610e0385610f0e565b610e1d610e0e610edf565b6016549063ffffffff61185b16565b9063ffffffff61192f16565b9063ffffffff61195a16565b9050610e41828261197e565b6107e68261199b565b60075490565b60085460ff1615610e6057600080fd5b610e68610c6f565b1515610e7357600080fd5b6008805460ff19166001179055610e886119f6565b6040517f9270cc390c096600a1c17c44345a1ba689fafd99d97487b10cfccf86cf73183690600090a1565b6000600554610ec0610d35565b1015905090565b600254600160a060020a031690565b600a5460ff1690565b6000610c87610eec610d35565b6117c4565b600d6020526000908152604090205481565b610f0c33611b58565b565b600160a060020a031660009081526010602052604090205490565b6000601454610ec0610d35565b60165481565b610f446113be565b600160a060020a03163314610fa3576040805160e560020a62461bcd02815260206004820152600d60248201527f6f6e6c79426c6f636b696d6d6f00000000000000000000000000000000000000604482015290519081900360640190fd5b600b54600a54604080517ff3fef3a3000000000000000000000000000000000000000000000000000000008152610100909204600160a060020a039081166004840152602483018590529051600093919091169163f3fef3a391604480830192602092919082900301818787803b15801561101d57600080fd5b505af1158015611031573d6000803e3d6000fd5b505050506040513d602081101561104757600080fd5b5051905080156107e6576040805160e560020a62461bcd02815260206004820152600f60248201527f7769746864726177206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b6110aa33610d3b565b15156110b557600080fd5b6110be81611ba0565b50565b6110ca33610d3b565b15156110d557600080fd5b600a5460ff16156110e557600080fd5b600a805460ff191660011790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b60156020526000908152604090205460ff1681565b60085460ff1690565b60065490565b61115361113c565b80156111645750611162610f29565b155b151561116f57600080fd5b600160a060020a03811660009081526013602052604090205460ff161561119557600080fd5b600160a060020a0381166000908152601360209081526040808320805460ff19166001908117909155600c909252909120546110be91839190611be8565b600b54600160a060020a031681565b6111ea61113c565b156111f457600080fd5b600160a060020a03811660009081526015602052604090205460ff161561121a57600080fd5b601254604080517f93e59dc10000000000000000000000000000000000000000000000000000000081529051600092600160a060020a0316916393e59dc1916004808301926020929190829003018186803b15801561127857600080fd5b505afa15801561128c573d6000803e3d6000fd5b505050506040513d60208110156112a257600080fd5b5051604080517f217fe6c6000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483015260248201839052600a60448301527f617574686f72697a656400000000000000000000000000000000000000000000606483015291519293509083169163217fe6c691608480820192602092909190829003018186803b15801561133e57600080fd5b505afa158015611352573d6000803e3d6000fd5b505050506040513d602081101561136857600080fd5b50511561137457600080fd5b600160a060020a0382166000908152601560209081526040808320805460ff19166001908117909155600c909252909120546107e691849190611be8565b600e5481565b600f5481565b601154604080517f8da5cb5b0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a031691638da5cb5b916004808301926020929190829003018186803b15801561141c57600080fd5b505afa158015611430573d6000803e3d6000fd5b505050506040513d602081101561144657600080fd5b5051905090565b600a546101009004600160a060020a031681565b600154600160a060020a031690565b600c6020526000908152604090205481565b600a54604080517fdd62ed3e00000000000000000000000000000000000000000000000000000000815233600482015230602482015290516000926101009004600160a060020a03169163dd62ed3e916044808301926020929190829003018186803b15801561141c57600080fd5b3415611547576040805160e560020a62461bcd02815260206004820152600a60248201527f6574686572206c6f737300000000000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a03821660009081526015602052604090205460ff161561156d57600080fd5b6115778282611f72565b601254604080517f93e59dc10000000000000000000000000000000000000000000000000000000081529051600092600160a060020a0316916393e59dc1916004808301926020929190829003018186803b1580156115d557600080fd5b505afa1580156115e9573d6000803e3d6000fd5b505050506040513d60208110156115ff57600080fd5b5051604080517f0988ca8c000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015260248201839052600a60448301527f617574686f72697a6564000000000000000000000000000000000000000000006064830152915192935090831691630988ca8c91608480820192600092909190829003018186803b15801561169b57600080fd5b505afa1580156116af573d6000803e3d6000fd5b505050600160a060020a0384166000908152600c602052604090205469152d02c7e14af680000091506116e8908463ffffffff6117de16565b1115806117b45750604080517f217fe6c6000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483015260248201839052600860448301527f756e636170706564000000000000000000000000000000000000000000000000606483015291519183169163217fe6c691608480820192602092909190829003018186803b15801561178757600080fd5b505afa15801561179b573d6000803e3d6000fd5b505050506040513d60208110156117b157600080fd5b50515b15156117bf57600080fd5b505050565b6000610d4e6117d1610cbf565b839063ffffffff61195a16565b6000828201838110156117f057600080fd5b9392505050565b6118018282611f8f565b6107e68261181d611810610cbf565b849063ffffffff61192f16565b611fd8565b600254604051600160a060020a03909116903480156108fc02916000818181858888f193505050501580156110be573d6000803e3d6000fd5b60008282111561186a57600080fd5b50900390565b60408051600160a060020a038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526117bf90849061230e565b600754421190565b6000600160a060020a038216151561190f57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b600082151561194057506000610d4e565b82820282848281151561194f57fe5b04146117f057600080fd5b600080821161196857600080fd5b6000828481151561197557fe5b04949350505050565b6001546107e690600160a060020a0316838363ffffffff61187016565b6119a3610c6f565b15156119ae57600080fd5b600160a060020a0381166000908152601060205260408120549081116119d357600080fd5b600160a060020a0382166000908152601060205260408120556107e6828261197e565b6119fe6113be565b600160a060020a031633600160a060020a03161480611a355750611a20610ec7565b600160a060020a031633600160a060020a0316145b1515611a4057600080fd5b611a48610f0c565b611a50611461565b600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015611aa857600080fd5b505afa158015611abc573d6000803e3d6000fd5b505050506040513d6020811015611ad257600080fd5b5051601655611adf610f29565b15611b2c576000611af36064610e29610d35565b9050611b08611b006113be565b826000611be8565b611b26611b13610ec7565b611b1f836109b4610d35565b6000611be8565b50610f0c565b610f0c611b37610ec7565b601654611b42611461565b600160a060020a0316919063ffffffff61187016565b611b6960098263ffffffff61241316565b604051600160a060020a038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b611bb160098263ffffffff61245f16565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600160a060020a03831615801590611c005750600082115b1515611c56576040805160e560020a62461bcd02815260206004820152601460248201527f696e76616c696420706172616d65746572287329000000000000000000000000604482015290519081900360640190fd5b600a546040805160e060020a6370a0823102815230600482015290516000926101009004600160a060020a0316916370a08231916024808301926020929190829003018186803b158015611ca957600080fd5b505afa158015611cbd573d6000803e3d6000fd5b505050506040513d6020811015611cd357600080fd5b50518311611ce2576000611dfd565b600b54600a546040805160e060020a6370a082310281523060048201529051600160a060020a039384169363f3fef3a39361010090041691611d7e9183916370a08231916024808301926020929190829003018186803b158015611d4557600080fd5b505afa158015611d59573d6000803e3d6000fd5b505050506040513d6020811015611d6f57600080fd5b5051879063ffffffff61185b16565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015611dd057600080fd5b505af1158015611de4573d6000803e3d6000fd5b505050506040513d6020811015611dfa57600080fd5b50515b90508015611e55576040805160e560020a62461bcd02815260206004820152600f60248201527f7769746864726177206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b8115611eb857600160a060020a0384166000908152600c6020526040902054611e84908463ffffffff61185b16565b600160a060020a0385166000908152600c6020526040902055600e54611eb0908463ffffffff61185b16565b600e55611f11565b600160a060020a0384166000908152600d6020526040902054611ee1908463ffffffff6117de16565b600160a060020a0385166000908152600d6020526040902055600f54611f0d908463ffffffff6117de16565b600f555b600a54611f2d906101009004600160a060020a03168585611870565b604080518481529051600160a060020a038616917f8f6dc746d2ddfc02adada7fa1b00410b478496d5fed7a2b9020322b3959fe9ee919081900360200190a250505050565b611f7a610d54565b1515611f8557600080fd5b6107e682826124ad565b600160a060020a038216600090815260106020526040902054611fb8908263ffffffff6117de16565b600160a060020a0390921660009081526010602052604090209190915550565b600160a060020a03821615801590611ff05750600081115b1515612046576040805160e560020a62461bcd02815260206004820152601460248201527f696e76616c696420706172616d65746572287329000000000000000000000000604482015290519081900360640190fd5b600a54612063906101009004600160a060020a03163330846124d1565b61206b610ed6565b151561227357600b54600a5461209391600160a060020a036101009092048216911683612559565b600b54600a54604080517ff2b9fdb8000000000000000000000000000000000000000000000000000000008152610100909204600160a060020a039081166004840152602483018590529051600093919091169163f2b9fdb891604480830192602092919082900301818787803b15801561210d57600080fd5b505af1158015612121573d6000803e3d6000fd5b505050506040513d602081101561213757600080fd5b505190508015612191576040805160e560020a62461bcd02815260206004820152600d60248201527f737570706c79206661696c656400000000000000000000000000000000000000604482015290519081900360640190fd5b600a54600b54604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152306004820152600160a060020a03928316602482015290516101009093049091169163dd62ed3e91604480820192602092909190829003018186803b15801561220657600080fd5b505afa15801561221a573d6000803e3d6000fd5b505050506040513d602081101561223057600080fd5b5051156122715760405160e560020a62461bcd02815260040180806020018281038252602b8152602001806126ad602b913960400191505060405180910390fd5b505b600160a060020a0382166000908152600c602052604090205461229c908263ffffffff6117de16565b600160a060020a0383166000908152600c6020526040902055600e546122c8908263ffffffff6117de16565b600e55604080518281529051600160a060020a038416917f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4919081900360200190a25050565b61232082600160a060020a0316612683565b151561232b57600080fd5b6000606083600160a060020a0316836040518082805190602001908083835b602083106123695780518252601f19909201916020918201910161234a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146123cb576040519150601f19603f3d011682016040523d82523d6000602084013e6123d0565b606091505b50915091508115156123e157600080fd5b60008151111561240d5780806020019051602081101561240057600080fd5b5051151561240d57600080fd5b50505050565b600160a060020a038116151561242857600080fd5b61243282826118f8565b151561243d57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a038116151561247457600080fd5b61247e82826118f8565b1561248857600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6124b7828261268b565b6005546124c6826109a8610d35565b11156107e657600080fd5b60408051600160a060020a0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261240d90859061230e565b8015806125f85750604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152306004820152600160a060020a03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156125ca57600080fd5b505afa1580156125de573d6000803e3d6000fd5b505050506040513d60208110156125f457600080fd5b5051155b151561260357600080fd5b60408051600160a060020a038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790526117bf90849061230e565b6000903b1190565b600160a060020a03821615156126a057600080fd5b8015156107e657600080fdfe616c6c6f77616e6365206e6f742066756c6c7920636f6e73756d6564206279206d6f6e65794d61726b65747769746864726177546f6b656e732072657175697265732074686520546f6b656e53616c6520746f206265207375636365737366756c6c792066696e616c697a6564a165627a7a72305820cdf694d0f53a6378194e880bf9dc62e85d4cf68b94e37d1551c7d1bca5d980b1002900000000000000000000000000000000000000000018d0bf423c03d8de000000000000000000000000000000000000000000000000000000000000005f725d23000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000000000000000005cba452300000000000000000000000000000000000000000000000000000000000000640000000000000000000000002c4548c07c1ea235453d16c544fdc775a468bed50000000000000000000000006472963389bd05eb3f1b7097d1b29fab50706537",
  "constructorArguments": "00000000000000000000000000000000000000000018d0bf423c03d8de000000000000000000000000000000000000000000000000000000000000005f725d23000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000000000000000005cba452300000000000000000000000000000000000000000000000000000000000000640000000000000000000000002c4548c07c1ea235453d16c544fdc775a468bed50000000000000000000000006472963389bd05eb3f1b7097d1b29fab50706537"
}