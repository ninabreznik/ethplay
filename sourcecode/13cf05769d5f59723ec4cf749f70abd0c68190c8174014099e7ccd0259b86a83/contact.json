{
  "address": "0xb630a38cb8b5f3a00df576415e5efd20b7cd5e28",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Choon",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-27\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n// The NOTES ERC20 Token. There is a delay before addresses that are not added to the \"activeGroup\" can transfer tokens. \n// That delay ends when admin calls the \"activate()\" function.\n// Otherwise it is a generic ERC20 standard token, based originally on the BAT token\n// https://etherscan.io/address/0x0d8775f648430679a709e98d2b0cb6250d2887ef#code\n\n// The standard ERC20 Token interface\ncontract Token {\n    uint256 public totalSupply;\n    function balanceOf(address _owner) constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n    function approve(address _spender, uint256 _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// NOTES Token Implementation - transfers are prohibited unless switched on by admin\ncontract Notes is Token {\n\n    using SafeMath for uint256;\n\n    //// CONSTANTS\n\n    // Number of NOTES (800 million)\n    uint256 public constant TOTAL_SUPPLY = 2000 * (10**6) * 10**uint256(decimals);\n\n    // Token Metadata\n    string public constant name = \"NOTES\";\n    string public constant symbol = \"NOTES\";\n    uint8 public constant decimals = 18;\n    string public version = \"1.0\";\n\n    //// PROPERTIES\n\n    address admin;\n    bool public activated = false;\n    mapping (address => bool) public activeGroup;\n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    //// MODIFIERS\n\n    modifier active()\n    {\n        require(activated || activeGroup[msg.sender]);\n        _;\n    }\n\n    modifier onlyAdmin()\n    {\n        require(msg.sender == admin);\n        _;\n    }\n\n    //// CONSTRUCTOR\n\n    function Notes(address fund, address _admin)\n    {\n        admin = _admin;\n        totalSupply = TOTAL_SUPPLY;\n        balances[fund] = TOTAL_SUPPLY;    // Deposit all to fund\n        Transfer(address(this), fund, TOTAL_SUPPLY);\n        activeGroup[fund] = true;  // Allow the fund to transfer\n    }\n\n    //// ADMIN FUNCTIONS\n\n    function addToActiveGroup(address a) onlyAdmin {\n        activeGroup[a] = true;\n    }\n\n    function activate() onlyAdmin {\n        activated = true;\n    }\n\n    //// TOKEN FUNCTIONS\n\n    function transfer(address _to, uint256 _value) active returns (bool success) {\n        require(_to != address(0));\n        require(_value > 0);\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) active returns (bool success) {\n        require(_to != address(0));\n        require(balances[_from] >= _value);\n        require(allowed[_from][msg.sender] >= _value && _value > 0);\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) active returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n}\n\n// The Choon smart contract. A state channel on the streaming service distributes cryptographically signed vouchers to artists on demand.\n// Those artists can then cash those vouchers into NOTES via this contract.\n// A solo artist could cash the NOTES directly to an address, or a band could cash them to a Smart Record Contract.\n// The Smart Record contract would then distribute the NOTES to the individual artists, according to its terms.\n\ncontract Choon  {\n\n    using SafeMath for uint256;\n\n    // Events\n    event VoucherCashed(address indexed to, uint256 value);\n\n    // Notes Contract\n    address notesContract;\n\n    // The address of the state channel authority that signs the vouchers\n    address choonAuthority;\n\n    // The contract admin\n    address admin;\n\n    // The total Notes payments to each address\n    mapping(address => uint256) public payments;\n\n    // Used to kill the contract in case it needs to be replaced with a new one\n    bool active = true;\n\n    // Modifiers\n    modifier onlyAdmin()\n    {\n        require(msg.sender == admin);\n        _;\n    }\n\n    modifier isActive()\n    {\n        require(active);\n        _;\n    }\n\n    // Constructor\n    function Choon(address _notesContract, address _choonAuthority, address _admin)\n    {\n        notesContract = _notesContract;\n        choonAuthority = _choonAuthority;\n        admin = _admin;\n    }\n\n    function setActive(bool _active) onlyAdmin external {\n        active = _active;\n    }\n\n    function setAuthority(address _authority) onlyAdmin external {\n        choonAuthority = _authority;\n    }\n\n    function shutdown() onlyAdmin external {\n        active = false;\n        // Transfer all remaining Notes to admin\n        uint256 balance = Notes(notesContract).balanceOf(address(this));\n        Notes(notesContract).transfer(admin, balance);\n    }\n\n    /// @dev Remit a voucher to Choon to get paid Notes\n    // Note that the voucher always updates the *total* lifetime balance of the beneficiary.\n    // This contract tracks what has been paid out so far, so it then knows how much to pay.\n    // This prevents double-spending of vouchers.\n    function remit(address receiver, uint256 balance, bytes sig) external isActive {\n        // Ensure that the voucher sig is valid and from the choonAuthority\n        require(verifyBalanceProof(receiver, balance, sig));\n        // Compute the NOTES owed due to this voucher and pay the beneficiary (receiver).\n        uint priorBalance = payments[receiver];\n        uint owed = balance.sub(priorBalance);\n        require(owed > 0);\n        payments[receiver] = balance;\n        Notes(notesContract).transfer(receiver, owed);\n        VoucherCashed(receiver, owed);\n    }\n\n    function verifyBalanceProof(address receiver, uint256 balance, bytes sig) private returns (bool) {\n        bytes memory prefix = \"\\x19Choon:\\n32\";\n        bytes32 message_hash = keccak256(prefix, receiver, balance);\n        address signer = ecverify(message_hash, sig);\n        return (signer == choonAuthority);\n    }\n\n    // ECVerify function, from ÂµRaiden and others\n    function ecverify(bytes32 hash, bytes signature) private returns (address signature_address) {\n        require(signature.length == 65);\n\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // The signature format is a compact form of:\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n        // Compact means, uint8 is not padded to 32 bytes.\n        assembly {\n            r := mload(add(signature, 32))\n            s := mload(add(signature, 64))\n\n        // Here we are loading the last 32 bytes, including 31 bytes of 's'.\n            v := byte(0, mload(add(signature, 96)))\n        }\n\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible\n        if (v < 27) {\n            v += 27;\n        }\n\n        require(v == 27 || v == 28);\n\n        signature_address = ecrecover(hash, v, r, s);\n\n        // ecrecover returns zero on error\n        require(signature_address != 0x0);\n\n        return signature_address;\n    }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_authority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"remit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_notesContract\",\"type\":\"address\"},{\"name\":\"_choonAuthority\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"VoucherCashed\",\"type\":\"event\"}]",
  "bytecode": "60606040526004805460ff19166001179055341561001c57600080fd5b6040516060806106df83398101604052808051919060200180519190602001805160008054600160a060020a0319908116600160a060020a0397881617825560018054821696881696909617909555600280549095169190951617909255506106539182915061008c90396000f3006060604052600436106100535763ffffffff60e060020a6000350416637a9e5e4b8114610058578063acec338a14610079578063da9eadac14610091578063e2982c21146100c0578063fc0e74d1146100f1575b600080fd5b341561006357600080fd5b610077600160a060020a0360043516610104565b005b341561008457600080fd5b610077600435151561014e565b341561009c57600080fd5b61007760048035600160a060020a031690602480359160443591820191013561017c565b34156100cb57600080fd5b6100df600160a060020a03600435166102e7565b60405190815260200160405180910390f35b34156100fc57600080fd5b6100776102f9565b60025433600160a060020a0390811691161461011f57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60025433600160a060020a0390811691161461016957600080fd5b6004805460ff1916911515919091179055565b600454600090819060ff16151561019257600080fd5b6101cc868686868080601f01602080910402602001604051908101604052818152929190602084018383808284375061041e945050505050565b15156101d757600080fd5b600160a060020a0386166000908152600360205260409020549150610202858363ffffffff61051916565b90506000811161021157600080fd5b600160a060020a0380871660009081526003602052604080822088905581549092169163a9059cbb918991859190516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561028757600080fd5b6102c65a03f1151561029857600080fd5b50505060405180515050600160a060020a0386167f37059d29ee1c1c146213abfc52fca6da534ea55f4ace421c371ca91711e115a78260405190815260200160405180910390a2505050505050565b60036020526000908152604090205481565b60025460009033600160a060020a0390811691161461031757600080fd5b6004805460ff1916905560008054600160a060020a0316906370a082319030906040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561037c57600080fd5b6102c65a03f1151561038d57600080fd5b505050604051805160008054600254929450600160a060020a03908116935063a9059cbb92169084906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561040057600080fd5b6102c65a03f1151561041157600080fd5b5050506040518051505050565b6000610428610615565b6000806040805190810160405280600a81526020017f1943686f6f6e3a0a33320000000000000000000000000000000000000000000081525092508287876040518084805190602001908083835b602083106104955780518252601f199092019160209182019101610476565b6001836020036101000a03801982511681845116808217855250505050505090500183600160a060020a0316600160a060020a03166c010000000000000000000000000281526014018281526020019350505050604051809103902091506104fd828661052b565b600154600160a060020a03908116911614979650505050505050565b60008282111561052557fe5b50900390565b600080600080845160411461053f57600080fd5b6020850151925060408501519150606085015160001a9050601b8160ff16101561056757601b015b8060ff16601b148061057c57508060ff16601c145b151561058757600080fd5b6001868285856040516000815260200160405260006040516020015260405193845260ff90921660208085019190915260408085019290925260608401929092526080909201915160208103908084039060008661646e5a03f115156105ec57600080fd5b5050602060405103519350600160a060020a038416151561060c57600080fd5b50505092915050565b602060405190810160405260008152905600a165627a7a72305820ce9504421b5e85fb96556bc63196727ca3e9699927e3abea6bf16a6514148ed600290000000000000000000000005e6364d4534f780ae053b93b45c8b8840e683eb7000000000000000000000000f5827e7142e151660a5baf3f43630d70d002b9df0000000000000000000000007d7e227c80d14fd82d22998bd76e38fec9487c9a",
  "constructorArguments": "0000000000000000000000005e6364d4534f780ae053b93b45c8b8840e683eb7000000000000000000000000f5827e7142e151660a5baf3f43630d70d002b9df0000000000000000000000007d7e227c80d14fd82d22998bd76e38fec9487c9a"
}