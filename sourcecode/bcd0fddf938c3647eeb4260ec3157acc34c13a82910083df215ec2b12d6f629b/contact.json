{
  "address": "0x9ec58861641bc805564bbc0c5fb4a856516238e7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AppicsToken",
  "compilerVersion": "v0.4.20-nightly.2017.12.20+commit.efc198d5",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-03\n*/\n\n// Appics token smart contract.\n// Developed by Phenom.Team <[emailÂ protected]>\n\npragma solidity ^ 0.4.15;\n\n/**\n *   @title SafeMath\n *   @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns(uint256) {\n        assert(b > 0);\n        uint256 c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns(uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns(uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/**\n *   @title ERC20\n *   @dev Standart ERC20 token interface\n */\ncontract ERC20 {\n    uint256 public totalSupply = 0;\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n    function balanceOf(address _owner) public constant returns(uint256);\n    function transfer(address _to, uint256 _value) public returns(bool);\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool);\n    function approve(address _spender, uint256 _value) public returns(bool);\n    function allowance(address _owner, address _spender) public constant returns(uint256);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n/**\n *   @title \n *   @dev Appics token contract\n */\ncontract AppicsToken is ERC20 {\n    using SafeMath for uint256;\n    string public name = \"Appics\";\n    string public symbol = \"XAP\";\n    uint256 public decimals = 18;\n\n    // Ico contract address\n    address public ico;\n    event Burn(address indexed from, uint256 value);\n\n    // Disables/enables token transfers\n    bool public tokensAreFrozen = true;\n\n    // Allows execution by the ico only\n    modifier icoOnly {\n        require(msg.sender == ico);\n        _;\n    }\n\n   /**\n    *   @dev Contract constructor function sets Ico address\n    *   @param _ico          ico address\n    */\n    function AppicsToken(address _ico) public {\n        ico = _ico;\n    }\n\n   /**\n    *   @dev Mint tokens\n    *   @param _holder       beneficiary address the tokens will be issued to\n    *   @param _value        number of tokens to issue\n    */\n    function mintTokens(address _holder, uint256 _value) external icoOnly {\n        require(_value > 0);\n        balances[_holder] = balances[_holder].add(_value);\n        totalSupply = totalSupply.add(_value);\n        Transfer(0x0, _holder, _value);\n    }\n\n   /**\n    *   @dev Enables token transfers\n    */\n    function defrostTokens() external icoOnly {\n      tokensAreFrozen = false;\n    }\n\n    /**\n    *   @dev Disables token transfers\n    */\n    function frostTokens() external icoOnly {\n      tokensAreFrozen = true;\n    }\n\n   /**\n    *   @dev Burn Tokens\n    *   @param _investor     token holder address which the tokens will be burnt\n    *   @param _value        number of tokens to burn\n    */\n    function burnTokens(address _investor, uint256 _value) external icoOnly {\n        require(balances[_investor] > 0);\n        totalSupply = totalSupply.sub(_value);\n        balances[_investor] = balances[_investor].sub(_value);\n        Burn(_investor, _value);\n    }\n\n   /**\n    *   @dev Get balance of investor\n    *   @param _owner        investor's address\n    *   @return              balance of investor\n    */\n    function balanceOf(address _owner) public constant returns(uint256) {\n      return balances[_owner];\n    }\n\n   /**\n    *   @dev Send coins\n    *   throws on any error rather then return a false flag to minimize\n    *   user errors\n    *   @param _to           target address\n    *   @param _amount       transfer amount\n    *\n    *   @return true if the transfer was successful\n    */\n    function transfer(address _to, uint256 _amount) public returns(bool) {\n        require(!tokensAreFrozen);\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n   /**\n    *   @dev An account/contract attempts to get the coins\n    *   throws on any error rather then return a false flag to minimize user errors\n    *\n    *   @param _from         source address\n    *   @param _to           target address\n    *   @param _amount       transfer amount\n    *\n    *   @return true if the transfer was successful\n    */\n    function transferFrom(address _from, address _to, uint256 _amount) public returns(bool) {\n        require(!tokensAreFrozen);\n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(_from, _to, _amount);\n        return true;\n    }\n\n   /**\n    *   @dev Allows another account/contract to spend some tokens on its behalf\n    *   throws on any error rather then return a false flag to minimize user errors\n    *\n    *   also, to minimize the risk of the approve/transferFrom attack vector\n    *   approve has to be called twice in 2 separate transactions - once to\n    *   change the allowance to 0 and secondly to change it to the new allowance\n    *   value\n    *\n    *   @param _spender      approved address\n    *   @param _amount       allowance amount\n    *\n    *   @return true if the approval was successful\n    */\n    function approve(address _spender, uint256 _amount) public returns(bool) {\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n   /**\n    *   @dev Function to check the amount of tokens that an owner allowed to a spender.\n    *\n    *   @param _owner        the address which owns the funds\n    *   @param _spender      the address which will spend the funds\n    *\n    *   @return              the amount of tokens still avaible for the spender\n    */\n    function allowance(address _owner, address _spender) public constant returns(uint256) {\n        return allowed[_owner][_spender];\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"frostTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"defrostTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAreFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ico\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052600080556040805190810160405280600681526020017f4170706963730000000000000000000000000000000000000000000000000000815250600390805190602001906200005592919062000135565b506040805190810160405280600381526020017f584150000000000000000000000000000000000000000000000000000000000081525060049080519060200190620000a392919062000135565b5060126005556001600660146101000a81548160ff0219169083151502179055503415620000d057600080fd5b6040516020806200141e8339810160405280805190602001909190505080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001e4565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200017857805160ff1916838001178555620001a9565b82800160010185558215620001a9579182015b82811115620001a85782518255916020019190600101906200018b565b5b509050620001b89190620001bc565b5090565b620001e191905b80821115620001dd576000816000905550600101620001c3565b5090565b90565b61122a80620001f46000396000f3006060604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100e0578063095ea7b31461016e5780630d1118ce146101c857806318160ddd1461020a57806323b872dd14610233578063313ce567146102ac5780634ac6d5f4146102d55780635d452201146102ea57806370a082311461033f5780638e0ef0331461038c57806395d89b41146103a1578063a9059cbb1461042f578063ca67065f14610489578063dd62ed3e146104b6578063f0dda65c14610522575b600080fd5b34156100eb57600080fd5b6100f3610564565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610133578082015181840152602081019050610118565b50505050905090810190601f1680156101605780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017957600080fd5b6101ae600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610602565b604051808215151515815260200191505060405180910390f35b34156101d357600080fd5b610208600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610789565b005b341561021557600080fd5b61021d610935565b6040518082815260200191505060405180910390f35b341561023e57600080fd5b610292600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061093b565b604051808215151515815260200191505060405180910390f35b34156102b757600080fd5b6102bf610c02565b6040518082815260200191505060405180910390f35b34156102e057600080fd5b6102e8610c08565b005b34156102f557600080fd5b6102fd610c81565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561034a57600080fd5b610376600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ca7565b6040518082815260200191505060405180910390f35b341561039757600080fd5b61039f610cf0565b005b34156103ac57600080fd5b6103b4610d69565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103f45780820151818401526020810190506103d9565b50505050905090810190601f1680156104215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561043a57600080fd5b61046f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e07565b604051808215151515815260200191505060405180910390f35b341561049457600080fd5b61049c610fbe565b604051808215151515815260200191505060405180910390f35b34156104c157600080fd5b61050c600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610fd1565b6040518082815260200191505060405180910390f35b341561052d57600080fd5b610562600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611058565b005b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105fa5780601f106105cf576101008083540402835291602001916105fa565b820191906000526020600020905b8154815290600101906020018083116105dd57829003601f168201915b505050505081565b60008082148061068e57506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561069957600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107e557600080fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151561083357600080fd5b610848816000546111c790919063ffffffff16565b6000819055506108a081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111c790919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a25050565b60005481565b6000600660149054906101000a900460ff1615151561095957600080fd5b6109ab82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111c790919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a7d82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111c790919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b4f82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111e090919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60055481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c6457600080fd5b6001600660146101000a81548160ff021916908315150217905550565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d4c57600080fd5b6000600660146101000a81548160ff021916908315150217905550565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dff5780601f10610dd457610100808354040283529160200191610dff565b820191906000526020600020905b815481529060010190602001808311610de257829003601f168201915b505050505081565b6000600660149054906101000a900460ff16151515610e2557600080fd5b610e7782600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111c790919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f0c82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111e090919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600660149054906101000a900460ff1681565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b457600080fd5b6000811115156110c357600080fd5b61111581600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111e090919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061116d816000546111e090919063ffffffff16565b6000819055508173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008282111515156111d557fe5b818303905092915050565b60008082840190508381101515156111f457fe5b80915050929150505600a165627a7a723058206f1b717ae5f336fb406bb767f520ae6eb7ce88a7b51a51e1097f91568ebf84d40029000000000000000000000000c8d9b34e5913cd935095cae813dd345a6896c11c",
  "constructorArguments": "000000000000000000000000c8d9b34e5913cd935095cae813dd345a6896c11c"
}