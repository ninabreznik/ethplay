{
  "address": "0xf91f508e34e7af0493d6b33dbdab61d4cca5d5f3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TWOPercent",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-02\n*/\n\npragma solidity >=0.4.21;\n\n\nlibrary sMath {\n    function multiply(uint256 a, uint256 b) internal pure returns(uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n\n    function division(uint256 a, uint256 b) internal pure returns(uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n\n    function subtract(uint256 a, uint256 b) internal pure returns(uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n\n    function plus(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract owned {\n    address public owner;\n    address public crowdOwner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n    \n    function transferCrowdOwner(address newCrowdOwner) onlyOwner public {\n        crowdOwner = newCrowdOwner;\n    }\n}\n\n/**\n * @title ERC20\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20 {\n    function totalSupply() public view returns(uint256);\n    function balanceOf(address who) public view returns(uint256);\n    function transfer(address to, uint256 value) public returns(bool);\n    function allowance(address owner, address spender) public view returns(uint256);\n    function transferFrom(address from, address to, uint256 value) public returns(bool);\n    function approve(address spender, uint256 value) public returns(bool);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\n\n\ncontract StandardToken is ERC20{\n    using sMath\n    for uint256;\n\n    mapping(address => uint256) balances;\n    mapping(address => uint256) balances_crowd;\n    mapping(address => mapping(address => uint256)) internal allowed;\n    uint256 totalSupply_;\n\n\n    function totalSupply() public view returns(uint256) {\n        return totalSupply_;\n    }\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != address(0x0));\n        require(balances[_from] >= _value);\n        require(balances[_to].plus(_value) > balances[_to]);\n        uint previousBalances = balances[_from].plus(balances[_to]);\n        balances[_from] = balances[_from].subtract(_value);\n        balances[_to] = balances[_to].plus(_value);\n        emit Transfer(_from, _to, _value);\n        assert(balances[_from].plus(balances[_to]) == previousBalances);\n    }\n\n    function transfer(address _to, uint256 _value) public returns(bool) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOfDef(address _owner) public view returns(uint256 balance) {\n        return balances[_owner];\n    }\n     \n    function balanceOf(address _owner) public view returns(uint256 balance) {\n        return balances[_owner].plus(balances_crowd[_owner]);\n    }\n    \n    function balanceOfCrowd(address _owner) public view returns(uint256 balance) {\n        return balances_crowd[_owner];\n    }\n\n    function allowance(address _owner, address _spender) public view returns(uint256) {\n        return allowed[_owner][_spender];\n    }\n\n\n    function increaseApproval(address _spender, uint _addedValue) public returns(bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].plus(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns(bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.subtract(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\n/**\n * @title 2Percent\n */\n\ncontract TWOPercent is StandardToken, owned {\n    uint public INITIAL_SUPPLY = 2500000000;\n\tstring public name = 'TWOPercent';\n\tstring public symbol = 'TPCT';\n\tuint public decimals = 18;\n    \n\n    bool public frozenAll = false;\n\n    mapping(address => bool) public frozenAccount;\n\n    event FrozenFunds(address target, bool frozen);\n    event FrozenAll(bool stop);\n    event Burn(address indexed from, uint256 value);\n    event LockEvent(address from, address to, uint startLock, uint endLock, uint256 value);\n    event Aborted();\n    \n    struct transForAddr {\n        address fromAddr;\n        address toAddr;\n        uint8 sendFlag ; // 1 send, 0 receive\n        uint256 amount;\n        uint256 balances;\n        uint256 balance_crowd;\n        uint regdate;\n    }\n    \n    struct lockForAddr {\n        uint startLock;\n        uint endLock;\n    }\n    \n    mapping(address => transForAddr[]) transForAddrs;\n    mapping(address => lockForAddr) lockForAddrs;\n    \n    \n    function setLockForAddr(address _address, uint _startLock, uint _endLock) onlyOwner public {\n        lockForAddrs[_address] = lockForAddr(_startLock, _endLock);\n    }\n    \n    function getLockForAddr(address _address)  public view returns (uint, uint) {\n        lockForAddr storage _lockForAddr = lockForAddrs[_address];\n        return (_lockForAddr.startLock, _lockForAddr.endLock);\n    }\n    \n    function getLockStartForAddr(address _address)  public view returns (uint) {\n        lockForAddr storage _lockForAddr = lockForAddrs[_address];\n        return _lockForAddr.startLock;\n    }\n    \n    function getLockEndForAddr(address _address)  public view returns (uint) {\n        lockForAddr storage _lockForAddr = lockForAddrs[_address];\n        return _lockForAddr.endLock;\n    }\n\n\n    constructor() public {\n        \n        totalSupply_ = INITIAL_SUPPLY * 10 ** uint256(decimals);\n        balances[msg.sender] = totalSupply_;\n        \n        emit Transfer(address(0x0), msg.sender, totalSupply_);\n    }\n    \n    \n    function transForAddrsCnt(address _address) public view returns (uint) {\n        return transForAddrs[_address].length;\n    }\n    \n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != address(0x0)); // Prevent transfer to 0x0 address. Use burn() instead\n        //require(balances[_from] >= _value); \n        require(balances[_from].plus(balances_crowd[_from]) >= _value); \n        require(balances[_to].plus(_value) >= balances[_to]); \n        require(!frozenAccount[_from]); \n        require(!frozenAccount[_to]); \n        require(!frozenAll); \n\n        if(balances[_from] >= _value) {\n            balances[_from] = balances[_from].subtract(_value);    \n        } else {\n            if(getLockStartForAddr(_from) > 0) {\n            \n                uint kstNow = now + 32400;\n                \n                if(!(getLockStartForAddr(_from) < kstNow &&  kstNow < getLockEndForAddr(_from))) {\n                    uint firstValue = _value.subtract(balances[_from]);\n                    uint twiceValue = _value.subtract(firstValue);\n                    \n                    balances_crowd[_from] = balances_crowd[_from].subtract(firstValue);\n                    balances[_from] = balances[_from].subtract(twiceValue);\n                }else {\n                    emit LockEvent(_from, _to, getLockStartForAddr(_from), getLockEndForAddr(_from), _value);\n                    emit Aborted();\n                    //emit Transfer(_from, _to, _value);\n                    return;\n                }\n            }else {\n                emit LockEvent(_from, _to, getLockStartForAddr(_from), getLockEndForAddr(_from), _value);\n                emit Aborted();\n                //emit Transfer(_from, _to, _value);\n                return;\n            }\n        }\n        \n        if(msg.sender == crowdOwner)  balances_crowd[_to] = balances_crowd[_to].plus(_value);\n        else balances[_to] = balances[_to].plus(_value);\n        \n        // addTransForAddrs(_from, _to, 1, _value, balances[_from], balances_crowd[_from]);\n        // addTransForAddrs(_to, _from, 0, _value, balances[_to], balances_crowd[_to]);        \n        \n        emit Transfer(_from, _to, _value);\n    }\n\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balances[target] = balances[target].plus(mintedAmount);\n        totalSupply_ = totalSupply_.plus(mintedAmount);\n        emit Transfer(address(0), address(this), mintedAmount);\n        emit Transfer(address(this), target, mintedAmount);\n    }\n\n    function burn(uint256 _value) public returns(bool success) {\n        require(balances[msg.sender] >= _value); // Check if the sender has enough\n        balances[msg.sender] = balances[msg.sender].subtract(_value); // Subtract from the sender\n        totalSupply_ = totalSupply_.subtract(_value); // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    function frozenAllChange(bool stop) onlyOwner public {\n        frozenAll = stop;\n        emit FrozenAll(frozenAll);\n    }\n        \n    // function addTransForAddrs(address _fromAddr, address _toAddr, uint8 _status, uint256 _amount, uint256 _balances, uint256 _balances_crowd) internal {\n    //     transForAddrs[_fromAddr].push(transForAddr(_fromAddr, _toAddr, _status, _amount, _balances, _balances_crowd, now));\n    // }\n    \n    // function getTransForAddrs(address _address, uint256 _index) onlyOwner public view returns (address, address, uint8, uint256, uint256, uint256, uint) {\n    //     if(_index > 0) require(transForAddrsCnt(_address) >= _index.subtract(1));\n        \n    //     transForAddr storage _transForAddr = transForAddrs[_address][_index];\n    //     return (_transForAddr.fromAddr, _transForAddr.toAddr, _transForAddr.sendFlag, _transForAddr.amount, _transForAddr.balances, _transForAddr.balance_crowd, _transForAddr.regdate);\n    // }  \n    \n    \n    // function getTransForAddrsAll(address _address) onlyOwner public view returns (address[] memory, uint8[] memory, uint256[] memory, uint256[] memory, uint256[] memory, uint[] memory) {\n    //     address[] memory _addressTwo = new address[](transForAddrs[_address].length);\n    //     uint8[] memory _status = new uint8[](transForAddrs[_address].length);\n    //     uint256[] memory _amount = new uint256[](transForAddrs[_address].length);\n    //     uint256[] memory _balances = new uint256[](transForAddrs[_address].length);\n    //     uint256[] memory _balances_crowd = new uint256[](transForAddrs[_address].length);\n    //     uint[] memory _regdate = new uint[](transForAddrs[_address].length);\n     \n    //     for(uint i = 0; i < transForAddrs[_address].length; i++){\n    //       // _addressOne[i] = transForAddrs[_address][i].fromAddr;\n    //         _addressTwo[i] = transForAddrs[_address][i].toAddr;            \n    //         _status[i] = transForAddrs[_address][i].sendFlag;\n    //         _amount[i] = transForAddrs[_address][i].amount;\n    //         _balances[i] = transForAddrs[_address][i].balances;\n    //         _balances_crowd[i] = transForAddrs[_address][i].balance_crowd;\n    //         _regdate[i] = transForAddrs[_address][i].regdate;\n    //     }\n        \n    //     return ( _addressTwo, _status, _amount, _balances, _balances_crowd, _regdate);\n    // }\n    \n    function approve(address _spender, uint256 _value) public returns(bool) {\n        require(!frozenAccount[_spender]); \n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        require(!frozenAccount[_from]); \n        require(!frozenAccount[_to]); \n\n        balances[_from] = balances[_from].subtract(_value);\n        balances[_to] = balances[_to].plus(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].subtract(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n}",
  "bytecode": "6080604052639502f9006006556040805190810160405280600a81526020017f54574f50657263656e74000000000000000000000000000000000000000000008152506007908051906020019062000059929190620001da565b506040805190810160405280600481526020017f545043540000000000000000000000000000000000000000000000000000000081525060089080519060200190620000a7929190620001da565b5060126009556000600a60006101000a81548160ff021916908315150217905550348015620000d557600080fd5b5033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600954600a0a600654026003819055506003546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6003546040518082815260200191505060405180910390a362000289565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200021d57805160ff19168380011785556200024e565b828001600101855582156200024e579182015b828111156200024d57825182559160200191906001019062000230565b5b5090506200025d919062000261565b5090565b6200028691905b808211156200028257600081600090555060010162000268565b5090565b90565b612bd680620002996000396000f3fe60806040526004361061016f576000357c01000000000000000000000000000000000000000000000000000000009004806306fdde0314610174578063095ea7b31461020457806318160ddd1461027757806321972fb7146102a257806323b872dd146102d15780632ff2e9dc14610364578063313ce5671461038f57806342966c68146103ba5780634ac3ec4e1461040d5780634ee0ed8e1461047257806356340fc1146104d7578063661884631461051457806370a082311461058757806379c65068146105ec5780637a946469146106475780638da5cb5b1461069e57806395d89b41146106f5578063a67ae0bd14610785578063a6e6d4a1146107d6578063a9059cbb1461083b578063b18d5bc7146108ae578063b414d4b614610913578063d73dd6231461097c578063dd62ed3e146109ef578063e48f2e9b14610a74578063e63da8dc14610ae0578063e724529c14610b45578063f2fde38b14610ba2578063fb700f4614610bf3575b600080fd5b34801561018057600080fd5b50610189610c58565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101c95780820151818401526020810190506101ae565b50505050905090810190601f1680156101f65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021057600080fd5b5061025d6004803603604081101561022757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cf6565b604051808215151515815260200191505060405180910390f35b34801561028357600080fd5b5061028c610e41565b6040518082815260200191505060405180910390f35b3480156102ae57600080fd5b506102b7610e4b565b604051808215151515815260200191505060405180910390f35b3480156102dd57600080fd5b5061034a600480360360608110156102f457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e5e565b604051808215151515815260200191505060405180910390f35b34801561037057600080fd5b506103796112ca565b6040518082815260200191505060405180910390f35b34801561039b57600080fd5b506103a46112d0565b6040518082815260200191505060405180910390f35b3480156103c657600080fd5b506103f3600480360360208110156103dd57600080fd5b81019080803590602001909291905050506112d6565b604051808215151515815260200191505060405180910390f35b34801561041957600080fd5b506104706004803603606081101561043057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505061142a565b005b34801561047e57600080fd5b506104c16004803603602081101561049557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114f6565b6040518082815260200191505060405180910390f35b3480156104e357600080fd5b50610512600480360360208110156104fa57600080fd5b81019080803515159060200190929190505050611547565b005b34801561052057600080fd5b5061056d6004803603604081101561053757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061160a565b604051808215151515815260200191505060405180910390f35b34801561059357600080fd5b506105d6600480360360208110156105aa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061189b565b6040518082815260200191505060405180910390f35b3480156105f857600080fd5b506106456004803603604081101561060f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611934565b005b34801561065357600080fd5b5061065c611b0d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106aa57600080fd5b506106b3611b33565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561070157600080fd5b5061070a611b59565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561074a57808201518184015260208101905061072f565b50505050905090810190601f1680156107775780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561079157600080fd5b506107d4600480360360208110156107a857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bf7565b005b3480156107e257600080fd5b50610825600480360360208110156107f957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c97565b6040518082815260200191505060405180910390f35b34801561084757600080fd5b506108946004803603604081101561085e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611ce3565b604051808215151515815260200191505060405180910390f35b3480156108ba57600080fd5b506108fd600480360360208110156108d157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cfa565b6040518082815260200191505060405180910390f35b34801561091f57600080fd5b506109626004803603602081101561093657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d4b565b604051808215151515815260200191505060405180910390f35b34801561098857600080fd5b506109d56004803603604081101561099f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611d6b565b604051808215151515815260200191505060405180910390f35b3480156109fb57600080fd5b50610a5e60048036036040811015610a1257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f67565b6040518082815260200191505060405180910390f35b348015610a8057600080fd5b50610ac360048036036020811015610a9757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611fee565b604051808381526020018281526020019250505060405180910390f35b348015610aec57600080fd5b50610b2f60048036036020811015610b0357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612048565b6040518082815260200191505060405180910390f35b348015610b5157600080fd5b50610ba060048036036040811015610b6857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050612090565b005b348015610bae57600080fd5b50610bf160048036036020811015610bc557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506121b6565b005b348015610bff57600080fd5b50610c4260048036036020811015610c1657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612256565b6040518082815260200191505060405180910390f35b60078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cee5780601f10610cc357610100808354040283529160200191610cee565b820191906000526020600020905b815481529060010190602001808311610cd157829003601f168201915b505050505081565b6000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610d5157600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600354905090565b600a60009054906101000a900460ff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610e9b57600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610ee857600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610f7357600080fd5b600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610fcc57600080fd5b600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561102557600080fd5b611076826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461229f90919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611109826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122b890919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111da82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461229f90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60065481565b60095481565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561132557600080fd5b611376826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461229f90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113cd8260035461229f90919063ffffffff16565b6003819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a260019050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561148657600080fd5b604080519081016040528083815260200182815250600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155905050505050565b600080600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000154915050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115a357600080fd5b80600a60006101000a81548160ff0219169083151502179055507f17c6f6ea7de4d6f3c7aa34e4245069fb6f7cc013ed910365c7f2dc1169f79961600a60009054906101000a900460ff16604051808215151515815260200191505060405180910390a150565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083111561171b576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506117af565b61172e838261229f90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600061192d600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122b890919063ffffffff16565b9050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561199057600080fd5b6119e1816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122b890919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a38816003546122b890919063ffffffff16565b6003819055503073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a38173ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60088054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bef5780601f10611bc457610100808354040283529160200191611bef565b820191906000526020600020905b815481529060010190602001808311611bd257829003601f168201915b505050505081565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c5357600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b6000611cf03384846122d6565b6001905092915050565b600080600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010154915050919050565b600b6020528060005260406000206000915054906101000a900460ff1681565b6000611dfc82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122b890919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806000015481600101549250925050915091565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156120ec57600080fd5b80600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a58282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561221257600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008282111515156122ad57fe5b818303905092915050565b60008082840190508381101515156122cc57fe5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561231257600080fd5b806123a3600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122b890919063ffffffff16565b101515156123b057600080fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612440826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122b890919063ffffffff16565b1015151561244d57600080fd5b600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156124a657600080fd5b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156124ff57600080fd5b600a60009054906101000a900460ff1615151561251b57600080fd5b806000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015156125fa576125b3816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461229f90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506129bb565b6000612605846114f6565b11156128ca576000617e90420190508061261e856114f6565b108015612632575061262f84611cfa565b81105b15156127d357600061268b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548461229f90919063ffffffff16565b905060006126a2828561229f90919063ffffffff16565b90506126f682600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461229f90919063ffffffff16565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061278a816000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461229f90919063ffffffff16565b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050506128c4565b7f7ffcb823d8e837de0a296e22ad8f66b30396f3841f80b30079d0d7a862a8c84484846127ff876114f6565b61280888611cfa565b86604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018281526020019550505050505060405180910390a17f72c874aeff0b183a56e2b79c71b46e1aed4dee5e09862134b8821ba2fddbf8bf60405160405180910390a150612ba5565b506129ba565b7f7ffcb823d8e837de0a296e22ad8f66b30396f3841f80b30079d0d7a862a8c84483836128f6866114f6565b6128ff87611cfa565b85604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018281526020019550505050505060405180910390a17f72c874aeff0b183a56e2b79c71b46e1aed4dee5e09862134b8821ba2fddbf8bf60405160405180910390a1612ba5565b5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415612aab57612a6381600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122b890919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612b3f565b612afc816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122b890919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b50505056fea165627a7a723058205ad15de2b7f564f284ca26fa87c17e8fe2bc8846d5c84cfcc7254048c75d3c6b0029"
}