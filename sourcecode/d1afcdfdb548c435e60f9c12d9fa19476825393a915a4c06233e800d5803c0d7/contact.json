{
  "address": "0x2a790479cd47f686804fe570b903f3b6cf08599d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ChainmonstersShop",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-04\n*/\n\n//\n// Our shop contract acts as a payment provider for our in-game shop system. \n// Coin packages that are purchased here are being picked up by our offchain \n// sync network and are then translated into in-game assets. This happens with\n// minimal delay and enables a fluid gameplay experience. An in-game notification\n// informs players about the successful purchase of coins.\n// \n// Prices are scaled against the current USD value of ETH courtesy of\n// MAKERDAO (https://developer.makerdao.com/feeds/) \n// This enables us to match our native In-App-Purchase prices from e.g. Apple's AppStore\n// We can also reduce the price of packages temporarily for e.g. events and promotions.\n//\n\npragma solidity ^0.4.21;\n\n\ncontract DSAuthority {\n    function canCall(\n        address src, address dst, bytes4 sig\n    ) constant returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    function DSAuth() {\n        owner = msg.sender;\n        LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        auth\n    {\n        owner = owner_;\n        LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        auth\n    {\n        authority = authority_;\n        LogSetAuthority(authority);\n    }\n\n    modifier auth {\n        assert(isAuthorized(msg.sender, msg.sig));\n        _;\n    }\n\n    modifier authorized(bytes4 sig) {\n        assert(isAuthorized(msg.sender, sig));\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, this, sig);\n        }\n    }\n\n    function assert(bool x) internal {\n        if (!x) throw;\n    }\n}\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n\tuint\t \t  wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\ncontract DSMath {\n    \n    /*\n    standard uint256 functions\n     */\n\n    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        assert((z = x + y) >= x);\n    }\n\n    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        assert((z = x - y) <= x);\n    }\n\n    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        assert((z = x * y) >= x);\n    }\n\n    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        z = x / y;\n    }\n\n    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        return x <= y ? x : y;\n    }\n    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        return x >= y ? x : y;\n    }\n\n    /*\n    uint128 functions (h is for half)\n     */\n\n\n    function hadd(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        assert((z = x + y) >= x);\n    }\n\n    function hsub(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        assert((z = x - y) <= x);\n    }\n\n    function hmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        assert((z = x * y) >= x);\n    }\n\n    function hdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        z = x / y;\n    }\n\n    function hmin(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        return x <= y ? x : y;\n    }\n    function hmax(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        return x >= y ? x : y;\n    }\n\n\n    /*\n    int256 functions\n     */\n\n    function imin(int256 x, int256 y) constant internal returns (int256 z) {\n        return x <= y ? x : y;\n    }\n    function imax(int256 x, int256 y) constant internal returns (int256 z) {\n        return x >= y ? x : y;\n    }\n\n    /*\n    WAD math\n     */\n\n    uint128 constant WAD = 10 ** 18;\n\n    function wadd(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hadd(x, y);\n    }\n\n    function wsub(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hsub(x, y);\n    }\n\n    function wmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        z = cast((uint256(x) * y + WAD / 2) / WAD);\n    }\n\n    function wdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        z = cast((uint256(x) * WAD + y / 2) / y);\n    }\n\n    function wmin(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hmin(x, y);\n    }\n    function wmax(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hmax(x, y);\n    }\n\n    /*\n    RAY math\n     */\n\n    uint128 constant RAY = 10 ** 27;\n\n    function radd(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hadd(x, y);\n    }\n\n    function rsub(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hsub(x, y);\n    }\n\n    function rmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        z = cast((uint256(x) * y + RAY / 2) / RAY);\n    }\n\n    function rdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n        z = cast((uint256(x) * RAY + y / 2) / y);\n    }\n\n    function rpow(uint128 x, uint64 n) constant internal returns (uint128 z) {\n        // This famous algorithm is called \"exponentiation by squaring\"\n        // and calculates x^n with x as fixed-point and n as regular unsigned.\n        //\n        // It's O(log n), instead of O(n) for naive repeated multiplication.\n        //\n        // These facts are why it works:\n        //\n        //  If n is even, then x^n = (x^2)^(n/2).\n        //  If n is odd,  then x^n = x * x^(n-1),\n        //   and applying the equation for even x gives\n        //    x^n = x * (x^2)^((n-1) / 2).\n        //\n        //  Also, EVM division is flooring and\n        //    floor[(n-1) / 2] = floor[n / 2].\n\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n\n    function rmin(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hmin(x, y);\n    }\n    function rmax(uint128 x, uint128 y) constant internal returns (uint128) {\n        return hmax(x, y);\n    }\n\n    function cast(uint256 x) constant internal returns (uint128 z) {\n        assert((z = uint128(x)) == x);\n    }\n\n}\n\ncontract DSThing is DSAuth, DSNote, DSMath {\n}\n\ncontract DSValue is DSThing {\n    bool    has;\n    bytes32 val;\n    function peek() constant returns (bytes32, bool) {\n        return (val,has);\n    }\n    function read() constant returns (bytes32) {\n        var (wut, has) = peek();\n        assert(has);\n        return wut;\n    }\n    function poke(bytes32 wut) note auth {\n        val = wut;\n        has = true;\n    }\n    function void() note auth { // unset the value\n        has = false;\n    }\n}\n\ncontract Medianizer is DSValue {\n    mapping (bytes12 => address) public values;\n    mapping (address => bytes12) public indexes;\n    bytes12 public next = 0x1;\n\n    uint96 public min = 0x1;\n\n    function set(address wat) auth {\n        bytes12 nextId = bytes12(uint96(next) + 1);\n        assert(nextId != 0x0);\n        set(next, wat);\n        next = nextId;\n    }\n\n    function set(bytes12 pos, address wat) note auth {\n        if (pos == 0x0) throw;\n\n        if (wat != 0 && indexes[wat] != 0) throw;\n\n        indexes[values[pos]] = 0; // Making sure to remove a possible existing address in that position\n\n        if (wat != 0) {\n            indexes[wat] = pos;\n        }\n\n        values[pos] = wat;\n    }\n\n    function setMin(uint96 min_) note auth {\n        if (min_ == 0x0) throw;\n        min = min_;\n    }\n\n    function setNext(bytes12 next_) note auth {\n        if (next_ == 0x0) throw;\n        next = next_;\n    }\n\n    function unset(bytes12 pos) {\n        set(pos, 0);\n    }\n\n    function unset(address wat) {\n        set(indexes[wat], 0);\n    }\n\n    function poke() {\n        poke(0);\n    }\n\n    function poke(bytes32) note {\n        (val, has) = compute();\n    }\n\n    function compute() constant returns (bytes32, bool) {\n        bytes32[] memory wuts = new bytes32[](uint96(next) - 1);\n        uint96 ctr = 0;\n        for (uint96 i = 1; i < uint96(next); i++) {\n            if (values[bytes12(i)] != 0) {\n                var (wut, wuz) = DSValue(values[bytes12(i)]).peek();\n                if (wuz) {\n                    if (ctr == 0 || wut >= wuts[ctr - 1]) {\n                        wuts[ctr] = wut;\n                    } else {\n                        uint96 j = 0;\n                        while (wut >= wuts[j]) {\n                            j++;\n                        }\n                        for (uint96 k = ctr; k > j; k--) {\n                            wuts[k] = wuts[k - 1];\n                        }\n                        wuts[j] = wut;\n                    }\n                    ctr++;\n                }\n            }\n        }\n\n        if (ctr < min) return (val, false);\n\n        bytes32 value;\n        if (ctr % 2 == 0) {\n            uint128 val1 = uint128(wuts[(ctr / 2) - 1]);\n            uint128 val2 = uint128(wuts[ctr / 2]);\n            value = bytes32(wdiv(hadd(val1, val2), 2 ether));\n        } else {\n            value = wuts[(ctr - 1) / 2];\n        }\n\n        return (value, true);\n    }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n * via OpenZeppelin\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    require(_newOwner != address(0));\n    OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n\n}\n\n\ncontract ChainmonstersMedianizer is Ownable {\n\n    address medianizerBase;\n    Medianizer makerMed;\n\n    constructor(address _medianizerContract) public {\n        owner = msg.sender;\n\n        medianizerBase = _medianizerContract;\n\n        makerMed = Medianizer(medianizerBase);\n    }\n\n    function updateMedianizerBase(address _medianizerContract) public onlyOwner {\n        medianizerBase = _medianizerContract;\n        makerMed = Medianizer(medianizerBase);\n    }\n\n    function getUSDPrice() public view returns (uint256) {\n        return bytesToUint(toBytes(makerMed.read()));\n    }\n    \n    function isMedianizer() public view returns (bool) {\n        return true;\n    }\n    \n    \n\n    function toBytes(bytes32 _data) public pure returns (bytes) {\n        return abi.encodePacked(_data);\n    }\n\n    function bytesToUint(bytes b) public pure returns (uint256){\n        uint256 number;\n        for(uint i=0;i<b.length;i++){\n            number = number + uint(b[i])*(2**(8*(b.length-(i+1))));\n        }\n        return number;\n    }\n\n}\n\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that throw on error\n*/\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, returns 0 if it would go into minus range.\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b >= a) {\n            return 0;\n        }\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract ChainmonstersShop {\n    using SafeMath for uint256; \n    \n    // static\n    address public owner;\n    \n    // start auction manually at given time\n    bool started;\n\n    uint256 public totalCoinsSold;\n\n    address medianizer;\n    uint256 shiftValue = 100; // double digit shifting to support prices like $29.99\n    uint256 multiplier = 10000; // internal multiplier\n\n    struct Package {\n        // price in USD\n        uint256 price;\n        // reference to in-game equivalent e.g. \"100 Coins\"\n        string packageReference;\n        // available for purchase?\n        bool isActive;\n        // amount of coins\n        uint256 coinsAmount;\n    }\n\n    \n    event LogPurchase(address _from, uint256 _price, string _packageReference);\n\n    mapping(address => uint256) public addressToCoinsPurchased;\n    Package[] packages;\n\n    constructor() public {\n        owner = msg.sender;\n\n        started = false;\n        \n        _addPackage(99, \"100 Coins\", true, 100);\n        _addPackage(549, \"550 Coins\", true, 550);\n        _addPackage(1099, \"1200 Coins\", true, 1200);\n        _addPackage(2199, \"2500 Coins\", true, 2500);\n        _addPackage(4399, \"5200 Coins\", true, 5200);\n        _addPackage(10999, \"14500 Coins\", true, 14500);\n        \n    }\n\n    function startShop() public onlyOwner {\n        require(started == false);\n        started = true;\n    }\n\n    // in case of contract switch or adding new packages\n    function pauseShop() public onlyOwner {\n        require(started == true);\n        started = false;\n    }\n\n    function isStarted() public view returns (bool success) {\n        return started;\n    }\n\n    function purchasePackage(uint256 _id) public\n        payable\n        returns (bool success)\n        {\n            require(started == true);\n            require(packages[_id].isActive == true);\n            require(msg.sender != owner);\n            require(msg.value == priceOf(_id)); // only accept 100% accurate prices\n\n            addressToCoinsPurchased[msg.sender] += packages[_id].coinsAmount;\n            totalCoinsSold += packages[_id].coinsAmount;\n            emit LogPurchase(msg.sender, msg.value, packages[_id].packageReference);\n        }\n        \n    function _addPackage(uint256 _price, string _packageReference, bool _isActive, uint256 _coinsAmount)\n        internal\n        {\n            require(_price > 0);\n            Package memory _package = Package({\n            price: uint256(_price),\n            packageReference: string(_packageReference),\n            isActive: bool(_isActive),\n            coinsAmount: uint256(_coinsAmount)\n        });\n\n        uint256 newPackageId = packages.push(_package);\n\n        }\n\n    function addPackage(uint256 _price, string _packageReference, bool _isActive, uint256 _coinsAmount)\n        external\n        onlyOwner\n        {\n            _addPackage(_price, _packageReference, _isActive, _coinsAmount);\n        }\n        \n    function setPackageActive(uint256 _id, bool _active)\n        external\n        onlyOwner\n        {\n            packages[_id].isActive = _active;\n        }\n\n    function setPrice(uint256 _packageId, uint256 _newPrice)\n        external\n        onlyOwner\n        {\n            require(packages[_packageId].price > 0);\n            packages[_packageId].price = _newPrice;\n        }\n\n    function getPackage(uint256 _id)\n        external \n        view\n        returns (uint256 priceInETH, uint256 priceInUSD, string packageReference, uint256 coinsAmount, bool isActive )\n        {\n            Package storage package = packages[_id];\n            priceInETH = priceOf(_id);\n            priceInUSD = package.price;\n            packageReference = package.packageReference;\n            coinsAmount = package.coinsAmount;\n            isActive = package.isActive;\n        \n        }\n\n \n  function priceOf(uint256 _packageId)\n    public\n    view\n    returns (uint256) \n    {\n\n        // if no medianizer is set then return fixed price(!)\n        if (medianizer == address(0x0)) {\n          return packages[_packageId].price;\n        }\n        else {\n          // the price of usd/eth gets returned from medianizer\n          uint256 USDinWei = ChainmonstersMedianizer(medianizer).getUSDPrice();\n    \n          uint256 multValue = (packages[_packageId].price.mul(multiplier)).div(USDinWei.div(1 ether));\n          uint256 inWei = multValue.mul(1 ether);\n          uint256 result = inWei.div(shiftValue.mul(multiplier));\n          return result;\n        }\n    \n  }\n  \n  function getPackagesCount()\n    public\n    view\n    returns (uint256)\n    {\n        return packages.length;\n    }\n\n  function setMedianizer(ChainmonstersMedianizer _medianizer)\n     public\n    onlyOwner \n    {\n    require(_medianizer.isMedianizer(), \"given address is not a medianizer contract!\");\n    medianizer = _medianizer;\n  }\n\n    \n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    function withdrawBalance()\n        external \n        onlyOwner \n        {\n            uint256 balance = this.balance;\n            owner.transfer(balance);\n        }\n  \n}",
  "bytecode": "608060405260646003556127106004553480156200001c57600080fd5b506000805460a060020a60ff0219600160a060020a0319909116331716905560408051808201909152600981527f31303020436f696e73000000000000000000000000000000000000000000000060208201526200008a906063906001606464010000000062000243810204565b620000e16102256040805190810160405280600981526020017f35353020436f696e730000000000000000000000000000000000000000000000815250600161022662000243640100000000026401000000009004565b6200013861044b6040805190810160405280600a81526020017f3132303020436f696e730000000000000000000000000000000000000000000081525060016104b062000243640100000000026401000000009004565b6200018f6108976040805190810160405280600a81526020017f3235303020436f696e730000000000000000000000000000000000000000000081525060016109c462000243640100000000026401000000009004565b620001e661112f6040805190810160405280600a81526020017f3532303020436f696e7300000000000000000000000000000000000000000000815250600161145062000243640100000000026401000000009004565b6200023d612af76040805190810160405280600b81526020017f313435303020436f696e7300000000000000000000000000000000000000000081525060016138a462000243640100000000026401000000009004565b620003fe565b6200024d6200032e565b60008086116200025c57600080fd5b60408051608081018252878152602080820188815287151593830193909352606082018690526006805460018101808355600092909252835160049091027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f81019182559451805194975091948794919362000300937ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d409092019291019062000359565b50604082015160028201805460ff191691151591909117905560609091015160039091015550505050505050565b6080604051908101604052806000815260200160608152602001600015158152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200039c57805160ff1916838001178555620003cc565b82800160010185558215620003cc579182015b82811115620003cc578251825591602001919060010190620003af565b50620003da929150620003de565b5090565b620003fb91905b80821115620003da5760008155600101620003e5565b90565b610d06806200040e6000396000f3006080604052600436106100c15763ffffffff60e060020a60003504166301f4d12081146100c657806335c1d1e5146100f4578063425345a41461011b57806345ba28b814610130578063544736e6146101515780635c1633711461017a5780635fd8c7101461018f5780638da5cb5b146101a4578063a3d5ecb7146101d5578063b0166004146101e0578063b9186d7d146101fd578063b99dfe1814610215578063d41f90b0146102c5578063e7baf8dd146102da578063f7d97577146102fb575b600080fd5b3480156100d257600080fd5b506100f26004803590602480359081019101356044351515606435610316565b005b34801561010057600080fd5b50610109610372565b60408051918252519081900360200190f35b34801561012757600080fd5b506100f2610378565b34801561013c57600080fd5b50610109600160a060020a03600435166103ca565b34801561015d57600080fd5b506101666103dc565b604080519115158252519081900360200190f35b34801561018657600080fd5b506100f26103ed565b34801561019b57600080fd5b506100f2610441565b3480156101b057600080fd5b506101b961049a565b60408051600160a060020a039092168252519081900360200190f35b6101666004356104a9565b3480156101ec57600080fd5b506100f2600435602435151561068b565b34801561020957600080fd5b506101096004356106d8565b34801561022157600080fd5b5061022d600435610848565b604051808681526020018581526020018060200184815260200183151515158152602001828103825285818151815260200191508051906020019080838360005b8381101561028657818101518382015260200161026e565b50505050905090810190601f1680156102b35780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b3480156102d157600080fd5b50610109610932565b3480156102e657600080fd5b506100f2600160a060020a0360043516610938565b34801561030757600080fd5b506100f2600435602435610a7b565b600054600160a060020a0316331461032d57600080fd5b61036b8585858080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508484610ae3565b5050505050565b60015481565b600054600160a060020a0316331461038f57600080fd5b60005460a060020a900460ff1615156001146103aa57600080fd5b6000805474ff000000000000000000000000000000000000000019169055565b60056020526000908152604090205481565b60005460a060020a900460ff165b90565b600054600160a060020a0316331461040457600080fd5b60005460a060020a900460ff161561041b57600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a179055565b60008054600160a060020a0316331461045957600080fd5b5060008054604051303192600160a060020a03909216916108fc841502918491818181858888f19350505050158015610496573d6000803e3d6000fd5b5050565b600054600160a060020a031681565b6000805460a060020a900460ff1615156001146104c557600080fd5b60068054839081106104d357fe5b600091825260209091206002600490920201015460ff1615156001146104f857600080fd5b600054600160a060020a031633141561051057600080fd5b610519826106d8565b341461052457600080fd5b600680548390811061053257fe5b60009182526020808320600360049093020191909101543383526005909152604090912080549091019055600680548390811061056b57fe5b9060005260206000209060040201600301546001600082825401925050819055507fd8a2323418273868c836e9e79b1d28d0c5f141e8421785695298728293c17c4633346006858154811015156105be57fe5b90600052602060002090600402016001016040518084600160a060020a0316600160a060020a03168152602001838152602001806020018281038252838181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156106765780601f1061064b57610100808354040283529160200191610676565b820191906000526020600020905b81548152906001019060200180831161065957829003601f168201915b505094505050505060405180910390a1919050565b600054600160a060020a031633146106a257600080fd5b806006838154811015156106b257fe5b60009182526020909120600490910201600201805460ff19169115159190911790555050565b6002546000908190819081908190600160a060020a0316151561071c57600680548790811061070357fe5b906000526020600020906004020160000154945061083f565b600260009054906101000a9004600160a060020a0316600160a060020a031663c338287f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561076f57600080fd5b505af1158015610783573d6000803e3d6000fd5b505050506040513d602081101561079957600080fd5b505193506107f66107b885670de0b6b3a764000063ffffffff610bc916565b6107ea60045460068a8154811015156107cd57fe5b60009182526020909120600490910201549063ffffffff610be516565b9063ffffffff610bc916565b925061081083670de0b6b3a764000063ffffffff610be516565b915061083961082c600454600354610be590919063ffffffff16565b839063ffffffff610bc916565b90508094505b50505050919050565b6000806060600080600060068781548110151561086157fe5b9060005260206000209060040201905061087a876106d8565b815460018084018054604080516020600295841615610100026000190190931694909404601f8101839004830285018301909152808452949a509298509092909183018282801561090c5780601f106108e15761010080835404028352916020019161090c565b820191906000526020600020905b8154815290600101906020018083116108ef57829003601f168201915b5050506003840154600290940154989a9799509197929660ff9093169550919350505050565b60065490565b600054600160a060020a0316331461094f57600080fd5b80600160a060020a03166369fc29b96040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561098d57600080fd5b505af11580156109a1573d6000803e3d6000fd5b505050506040513d60208110156109b757600080fd5b50511515610a4c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f676976656e2061646472657373206973206e6f742061206d656469616e697a6560448201527f7220636f6e747261637421000000000000000000000000000000000000000000606482015290519081900360840190fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a03163314610a9257600080fd5b6000600683815481101515610aa357fe5b600091825260209091206004909102015411610abe57600080fd5b80600683815481101515610ace57fe5b60009182526020909120600490910201555050565b610aeb610c17565b6000808611610af957600080fd5b60408051608081018252878152602080820188815287151593830193909352606082018690526006805460018101808355600092909252835160049091027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f810191825594518051949750919487949193610b9b937ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4090920192910190610c42565b50604082015160028201805460ff191691151591909117905560609091015160039091015550505050505050565b6000808284811515610bd757fe5b0490508091505b5092915050565b600080831515610bf85760009150610bde565b50828202828482811515610c0857fe5b0414610c1057fe5b9392505050565b6080604051908101604052806000815260200160608152602001600015158152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610c8357805160ff1916838001178555610cb0565b82800160010185558215610cb0579182015b82811115610cb0578251825591602001919060010190610c95565b50610cbc929150610cc0565b5090565b6103ea91905b80821115610cbc5760008155600101610cc65600a165627a7a72305820474927962ba02fd913bf772e93ef7e025b688c2adb5507f5025c818513131e200029"
}