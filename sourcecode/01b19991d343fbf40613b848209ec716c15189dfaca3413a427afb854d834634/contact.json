{
  "address": "0x6de2fc65b1b9bf0612ea8f39c990051d85b1b50a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FabotCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-15\n*/\n\n// pragma solidity ^0.5.2;\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}\n\ncontract ERC20 {\n    function balanceOf(address who) public view returns (uint256);\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract Token is ERC20, Pausable {\n\n    struct sUserInfo {\n        uint256 balance;\n        bool lock;\n        mapping(address => uint256) allowed;\n    }\n    \n    using SafeMath for uint256;\n\n    string public name;\n    string public symbol;\n    uint256 public decimals;\n    uint256 public totalSupply;\n\n    bool public restoreFinished = false;\n\n    mapping(address => sUserInfo) user;\n\n    event Mint(uint256 value);\n    event Burn(uint256 value);\n    event RestoreFinished();\n    \n    modifier canRestore() {\n        require(!restoreFinished);\n        _;\n    }\n    \n    function () external payable {\n        revert();\n    }\n    \n    function validTransfer(address _from, address _to, uint256 _value, bool _lockCheck) internal {\n        require(_to != address(this));\n        require(_to != address(0));\n        require(user[_from].balance >= _value);\n        if(_lockCheck) {\n            require(user[_from].lock == false);\n        }\n    }\n\n    function lock(address _owner) public onlyOwner returns (bool) {\n        require(user[_owner].lock == false);\n        user[_owner].lock = true;\n        return true;\n    }\n    function unlock(address _owner) public onlyOwner returns (bool) {\n        require(user[_owner].lock == true);\n        user[_owner].lock = false;\n       return true;\n    }\n \n    function burn(address _to, uint256 _value) public onlyOwner returns (bool) {\n        require(_value <= user[_to].balance);\n        user[_to].balance = user[_to].balance.sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(_value);\n        return true;\n    }\n   \n    function distribute(address _to, uint256 _value) public onlyOwner returns (bool) {\n        validTransfer(msg.sender, _to, _value, false);\n       \n        user[msg.sender].balance = user[msg.sender].balance.sub(_value);\n        user[_to].balance = user[_to].balance.add(_value);\n       \n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        require(_value > 0);\n        user[msg.sender].allowed[_spender] = _value; \n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n        validTransfer(_from, _to, _value, true);\n        require(_value <=  user[_from].allowed[msg.sender]);\n\n        user[_from].balance = user[_from].balance.sub(_value);\n        user[_to].balance = user[_to].balance.add(_value);\n\n        user[_from].allowed[msg.sender] = user[_from].allowed[msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n        validTransfer(msg.sender, _to, _value, true);\n\n        user[msg.sender].balance = user[msg.sender].balance.sub(_value);\n        user[_to].balance = user[_to].balance.add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    function transferRestore(address _from, address _to, uint256 _value) public onlyOwner canRestore returns (bool) {\n        validTransfer(_from, _to, _value, false);\n       \n        user[_from].balance = user[_from].balance.sub(_value);\n        user[_to].balance = user[_to].balance.add(_value);\n       \n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    function finishRestore() public onlyOwner returns (bool) {\n        restoreFinished = true;\n        emit RestoreFinished();\n        return true;\n    }\n    \n    \n    function balanceOf(address _owner) public view returns (uint256) {\n        return user[_owner].balance;\n    }\n    function lockState(address _owner) public view returns (bool) {\n        return user[_owner].lock;\n    }\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return user[_owner].allowed[_spender];\n    }\n    \n}\n\ncontract LockBalance is Ownable {\n    \n    enum eLockType {None, Individual, GroupA, GroupB, GroupC, GroupD, GroupE, GroupF, GroupG, GroupH, GroupI, GroupJ}\n    struct sGroupLockDate {\n        uint256[] lockTime;\n        uint256[] lockPercent;\n    }\n    struct sLockInfo {\n        uint256[] lockType;\n        uint256[] lockBalanceStandard;\n        uint256[] startTime;\n        uint256[] endTime;\n    }\n    \n    using SafeMath for uint256;\n\n    mapping(uint => sGroupLockDate) groupLockDate;\n    \n    mapping(address => sLockInfo) lockUser;\n\n    event Lock(address indexed from, uint256 value, uint256 endTime);\n    \n    function setLockUser(address _to, eLockType _lockType, uint256 _value, uint256 _endTime) internal {\n        lockUser[_to].lockType.push(uint256(_lockType));\n        lockUser[_to].lockBalanceStandard.push(_value);\n        lockUser[_to].startTime.push(now);\n        lockUser[_to].endTime.push(_endTime);\n\n        emit Lock(_to, _value, _endTime);\n    }\n\n    function lockBalanceGroup(address _owner, uint _index) internal view returns (uint256) {\n        uint256 percent = 0;\n        uint256 key = uint256(lockUser[_owner].lockType[_index]);\n\n        uint256 time = 99999999999;\n        for(uint256 i = 0 ; i < groupLockDate[key].lockTime.length; i++) {\n            if(now < groupLockDate[key].lockTime[i]) {\n                if(groupLockDate[key].lockTime[i] < time) {\n                    time = groupLockDate[key].lockTime[i];\n                    percent = groupLockDate[key].lockPercent[i];    \n                }\n            }\n        }\n        \n        if(percent == 0){\n            return 0;\n        } else {\n            return lockUser[_owner].lockBalanceStandard[_index].mul(uint256(percent)).div(100);\n        }\n    }\n\n    function lockBalanceIndividual(address _owner, uint _index) internal view returns (uint256) {\n        if(now < lockUser[_owner].endTime[_index]) {\n            return lockUser[_owner].lockBalanceStandard[_index];\n        } else {\n            return 0;\n        }\n    }\n    \n    function clearLockUser(address _owner, uint _index) onlyOwner public {\n        require(lockUser[_owner].endTime.length >_index);\n        lockUser[_owner].endTime[_index] = 0;\n    }\n        \n    function addLockDate(eLockType _lockType, uint256 _second, uint256 _percent) onlyOwner public {\n        require(_percent > 0 && _percent <= 100);\n        sGroupLockDate storage lockInfo = groupLockDate[uint256(_lockType)];\n        bool isExists = false;\n        for(uint256 i = 0; i < lockInfo.lockTime.length; i++) {\n            if(lockInfo.lockTime[i] == _second) {\n                revert();\n                break;\n            }\n        }\n        \n        if(isExists) {\n           revert();\n        } else {\n            lockInfo.lockTime.push(_second);\n            lockInfo.lockPercent.push(_percent);\n        }\n    }\n    \n    function deleteLockDate(eLockType _lockType, uint256 _lockTime) onlyOwner public {\n        sGroupLockDate storage lockDate = groupLockDate[uint256(_lockType)];\n        \n        bool isExists = false;\n        uint256 index = 0;\n        for(uint256 i = 0; i < lockDate.lockTime.length; i++) {\n            if(lockDate.lockTime[i] == _lockTime) {\n                isExists = true;\n                index = i;\n                break;\n            }\n        }\n        \n        if(isExists) {\n            for(uint256 k = index; k < lockDate.lockTime.length - 1; k++){\n                lockDate.lockTime[k] = lockDate.lockTime[k + 1];\n                lockDate.lockPercent[k] = lockDate.lockPercent[k + 1];\n            }\n            delete lockDate.lockTime[lockDate.lockTime.length - 1];\n            lockDate.lockTime.length--;\n            delete lockDate.lockPercent[lockDate.lockPercent.length - 1];\n            lockDate.lockPercent.length--;\n        } else {\n            revert();\n        }\n        \n    }\n\n\n    function lockTypeInfoGroup(eLockType _type) public view returns (uint256[] memory , uint256[] memory ) {\n        uint256 key = uint256(_type);\n        return (groupLockDate[key].lockTime, groupLockDate[key].lockPercent);\n    }\n    function lockUserInfo(address _owner) public view returns (uint256[] memory , uint256[] memory , uint256[] memory , uint256[] memory , uint256[] memory ) {\n        \n        uint256[] memory balance = new uint256[](lockUser[_owner].lockType.length);\n        for(uint256 i = 0; i < lockUser[_owner].lockType.length; i++){\n            if(lockUser[_owner].lockType[i] == uint256(eLockType.Individual)) {\n                balance[i] = balance[i].add(lockBalanceIndividual(_owner, i));\n            } else if(lockUser[_owner].lockType[i] != uint256(eLockType.None)) {\n                balance[i] = balance[i].add(lockBalanceGroup(_owner, i));\n            }\n        }\n        \n        return (lockUser[_owner].lockType,\n        lockUser[_owner].lockBalanceStandard,\n        balance,\n        lockUser[_owner].startTime,\n        lockUser[_owner].endTime);\n    }\n    function lockBalanceAll(address _owner) public view returns (uint256) {\n        uint256 lockBalance = 0;\n        for(uint256 i = 0; i < lockUser[_owner].lockType.length; i++){\n            if(lockUser[_owner].lockType[i] == uint256(eLockType.Individual)) {\n                lockBalance = lockBalance.add(lockBalanceIndividual(_owner, i));\n            } else if(lockUser[_owner].lockType[i] != uint256(eLockType.None)) {\n                lockBalance = lockBalance.add(lockBalanceGroup(_owner, i));\n            }\n        }\n        return lockBalance;\n    }\n    \n}\n\ncontract FabotCoin is Token, LockBalance {\n\n    constructor() public {\n        name = \"FABOT\";\n        symbol = \"FC\";\n        decimals = 18;\n        uint256 initialSupply = 4000000000;\n        totalSupply = initialSupply * 10 ** uint(decimals);\n        user[owner].balance = totalSupply;\n        emit Transfer(address(0), owner, totalSupply);\n    }\n\n    function validTransfer(address _from, address _to, uint256 _value, bool _lockCheck) internal {\n        super.validTransfer(_from, _to, _value, _lockCheck);\n        if(_lockCheck) {\n            require(_value <= useBalanceOf(_from));\n        }\n    }\n\n    function setLockUsers(eLockType _type, address[] memory _to, uint256[] memory _value, uint256[] memory  _endTime) onlyOwner public {  \n        require(_to.length > 0);\n        require(_to.length == _value.length);\n        require(_to.length == _endTime.length);\n        require(_type != eLockType.None);\n        \n        for(uint256 i = 0; i < _to.length; i++){\n            require(_value[i] <= useBalanceOf(_to[i]));\n            setLockUser(_to[i], _type, _value[i], _endTime[i]);\n        }\n    }\n    \n    function useBalanceOf(address _owner) public view returns (uint256) {\n        return balanceOf(_owner).sub(lockBalanceAll(_owner));\n    }\n    \n}",
  "bytecode": "608060405260008060146101000a81548160ff0219169083151502179055506000600560006101000a81548160ff0219169083151502179055503480156200004657600080fd5b506000336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600581526020017f4641424f5400000000000000000000000000000000000000000000000000000081525060019080519060200190620000d69291906200023c565b506040805190810160405280600281526020017f464300000000000000000000000000000000000000000000000000000000000081525060029080519060200190620001249291906200023c565b50601260038190555063ee6b28009050600354600a0a8102600481905550600454600660008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6004546040518082815260200191505060405180910390a350620002eb565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200027f57805160ff1916838001178555620002b0565b82800160010185558215620002b0579182015b82811115620002af57825182559160200191906001019062000292565b5b509050620002bf9190620002c3565b5090565b620002e891905b80821115620002e4576000816000905550600101620002ca565b5090565b90565b61374680620002fb6000396000f300608060405260043610610180576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063015d200f1461018557806305c7400a146101dc57806306fdde031461020b5780630789a3131461029b578063095ea7b3146102d557806318160ddd1461033a57806323b872dd146103655780632f6c493c146103ea578063313ce567146104455780633f4ba83a146104705780634149953d146104875780635c975abb1461050c57806369132d431461053b57806370a08231146105925780638456cb59146105e95780638da5cb5b146106005780638e2833341461065757806390e99b091461072457806394dbc70e1461075357806395d89b41146107ae5780639846d9de1461083e5780639a713d05146109375780639dc29fac1461097b578063a26a1bc9146109e0578063a9059cbb14610a2d578063ac1a717514610a92578063dd62ed3e14610c4a578063f2fde38b14610cc1578063f435f5a714610d04578063fb93210814610d5f575b600080fd5b34801561019157600080fd5b506101c6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dc4565b6040518082815260200191505060405180910390f35b3480156101e857600080fd5b506101f1610f53565b604051808215151515815260200191505060405180910390f35b34801561021757600080fd5b50610220610f66565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610260578082015181840152602081019050610245565b50505050905090810190601f16801561028d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102a757600080fd5b506102d3600480360381019080803560ff16906020019092919080359060200190929190505050611004565b005b3480156102e157600080fd5b50610320600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611219565b604051808215151515815260200191505060405180910390f35b34801561034657600080fd5b5061034f611338565b6040518082815260200191505060405180910390f35b34801561037157600080fd5b506103d0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061133e565b604051808215151515815260200191505060405180910390f35b3480156103f657600080fd5b5061042b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116b1565b604051808215151515815260200191505060405180910390f35b34801561045157600080fd5b5061045a6117d4565b6040518082815260200191505060405180910390f35b34801561047c57600080fd5b506104856117da565b005b34801561049357600080fd5b506104f2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611898565b604051808215151515815260200191505060405180910390f35b34801561051857600080fd5b50610521611ac4565b604051808215151515815260200191505060405180910390f35b34801561054757600080fd5b5061057c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ad7565b6040518082815260200191505060405180910390f35b34801561059e57600080fd5b506105d3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b03565b6040518082815260200191505060405180910390f35b3480156105f557600080fd5b506105fe611b4f565b005b34801561060c57600080fd5b50610615611c0f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561066357600080fd5b50610685600480360381019080803560ff169060200190929190505050611c34565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156106cc5780820151818401526020810190506106b1565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561070e5780820151818401526020810190506106f3565b5050505090500194505050505060405180910390f35b34801561073057600080fd5b50610739611d21565b604051808215151515815260200191505060405180910390f35b34801561075f57600080fd5b50610794600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611dcc565b604051808215151515815260200191505060405180910390f35b3480156107ba57600080fd5b506107c3611e25565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108035780820151818401526020810190506107e8565b50505050905090810190601f1680156108305780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561084a57600080fd5b50610935600480360381019080803560ff169060200190929190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050611ec3565b005b34801561094357600080fd5b50610979600480360381019080803560ff169060200190929190803590602001909291908035906020019092919050505061202e565b005b34801561098757600080fd5b506109c6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612186565b604051808215151515815260200191505060405180910390f35b3480156109ec57600080fd5b50610a2b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061232b565b005b348015610a3957600080fd5b50610a78600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061243c565b604051808215151515815260200191505060405180910390f35b348015610a9e57600080fd5b50610ad3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061260b565b60405180806020018060200180602001806020018060200186810386528b818151815260200191508051906020019060200280838360005b83811015610b26578082015181840152602081019050610b0b565b5050505090500186810385528a818151815260200191508051906020019060200280838360005b83811015610b68578082015181840152602081019050610b4d565b50505050905001868103845289818151815260200191508051906020019060200280838360005b83811015610baa578082015181840152602081019050610b8f565b50505050905001868103835288818151815260200191508051906020019060200280838360005b83811015610bec578082015181840152602081019050610bd1565b50505050905001868103825287818151815260200191508051906020019060200280838360005b83811015610c2e578082015181840152602081019050610c13565b505050509050019a505050505050505050505060405180910390f35b348015610c5657600080fd5b50610cab600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612ad2565b6040518082815260200191505060405180910390f35b348015610ccd57600080fd5b50610d02600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b5c565b005b348015610d1057600080fd5b50610d45600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612cb1565b604051808215151515815260200191505060405180910390f35b348015610d6b57600080fd5b50610daa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612dd4565b604051808215151515815260200191505060405180910390f35b6000806000809150600090505b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180549050811015610f49576001600b811115610e2b57fe5b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000182815481101515610e7a57fe5b90600052602060002001541415610eae57610ea7610e988583612fe3565b836130b290919063ffffffff16565b9150610f3c565b6000600b811115610ebb57fe5b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000182815481101515610f0a57fe5b9060005260206000200154141515610f3b57610f38610f2985836130d0565b836130b290919063ffffffff16565b91505b5b8080600101915050610dd1565b8192505050919050565b600560009054906101000a900460ff1681565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ffc5780601f10610fd157610100808354040283529160200191610ffc565b820191906000526020600020905b815481529060010190602001808311610fdf57829003601f168201915b505050505081565b60008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561106757600080fd5b6007600088600b81111561107757fe5b815260200190815260200160002094506000935060009250600091505b84600001805490508210156110df578585600001838154811015156110b557fe5b906000526020600020015414156110d257600193508192506110df565b8180600101925050611094565b831561120b578290505b600185600001805490500381101561118457846000016001820181548110151561110f57fe5b9060005260206000200154856000018281548110151561112b57fe5b9060005260206000200181905550846001016001820181548110151561114d57fe5b9060005260206000200154856001018281548110151561116957fe5b906000526020600020018190555080806001019150506110e9565b84600001600186600001805490500381548110151561119f57fe5b9060005260206000200160009055846000018054809190600190036111c491906136c9565b508460010160018660010180549050038154811015156111e057fe5b90600052602060002001600090558460010180548091906001900361120591906136c9565b50611210565b600080fd5b50505050505050565b60008060149054906101000a900460ff1615151561123657600080fd5b60008211151561124557600080fd5b81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60045481565b60008060149054906101000a900460ff1615151561135b57600080fd5b61136884848460016132dc565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156113f657600080fd5b61144b82600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461330c90919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055506114e682600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546130b290919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055506115be82600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461330c90919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561170e57600080fd5b60011515600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff16151514151561177057600080fd5b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548160ff02191690831515021790555060019050919050565b60035481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561183557600080fd5b600060149054906101000a900460ff16151561185057600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118f557600080fd5b600560009054906101000a900460ff1615151561191157600080fd5b61191e84848460006132dc565b61197382600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461330c90919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550611a0e82600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546130b290919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600060149054906101000a900460ff1681565b6000611afc611ae583610dc4565b611aee84611b03565b61330c90919063ffffffff16565b9050919050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611baa57600080fd5b600060149054906101000a900460ff16151515611bc657600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606080600083600b811115611c4557fe5b9050600760008281526020019081526020016000206000016007600083815260200190815260200160002060010181805480602002602001604051908101604052809291908181526020018280548015611cbe57602002820191906000526020600020905b815481526020019060010190808311611caa575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015611d1057602002820191906000526020600020905b815481526020019060010190808311611cfc575b505050505090509250925050915091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d7e57600080fd5b6001600560006101000a81548160ff0219169083151502179055507f7187cbcbda53f626dba64b95bb4562770cbe3f2026eebce9d93b79a169f8460c60405160405180910390a16001905090565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff169050919050565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ebb5780601f10611e9057610100808354040283529160200191611ebb565b820191906000526020600020905b815481529060010190602001808311611e9e57829003601f168201915b505050505081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f2057600080fd5b60008451111515611f3057600080fd5b82518451141515611f4057600080fd5b81518451141515611f5057600080fd5b6000600b811115611f5d57fe5b85600b811115611f6957fe5b14151515611f7657600080fd5b600090505b835181101561202757611fa48482815181101515611f9557fe5b90602001906020020151611ad7565b8382815181101515611fb257fe5b9060200190602002015111151515611fc957600080fd5b61201a8482815181101515611fda57fe5b90602001906020020151868584815181101515611ff357fe5b90602001906020020151858581518110151561200b57fe5b90602001906020020151613325565b8080600101915050611f7b565b5050505050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561208e57600080fd5b60008411801561209f575060648411155b15156120aa57600080fd5b6007600087600b8111156120ba57fe5b8152602001908152602001600020925060009150600090505b8260000180549050811015612117578483600001828154811015156120f457fe5b9060005260206000200154141561210a57600080fd5b80806001019150506120d3565b811561212257600080fd5b8260000185908060018154018082558091505090600182039060005260206000200160009091929091909150555082600101849080600181540180825580915050906001820390600052602060002001600090919290919091505550505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121e357600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154821115151561223457600080fd5b61228982600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461330c90919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055506122e48260045461330c90919063ffffffff16565b6004819055507fb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb826040518082815260200191505060405180910390a16001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561238657600080fd5b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301805490501115156123d957600080fd5b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018281548110151561242a57fe5b90600052602060002001819055505050565b60008060149054906101000a900460ff1615151561245957600080fd5b61246633848460016132dc565b6124bb82600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461330c90919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555061255682600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546130b290919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6060806060806060806000600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905060405190808252806020026020018201604052801561268a5781602001602082028038833980820191505090505b509150600090505b600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905081101561286c576001600b8111156126ec57fe5b600860008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018281548110151561273b57fe5b906000526020600020015414156127a05761277f6127598983612fe3565b838381518110151561276757fe5b906020019060200201516130b290919063ffffffff16565b828281518110151561278d57fe5b906020019060200201818152505061285f565b6000600b8111156127ad57fe5b600860008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001828154811015156127fc57fe5b906000526020600020015414151561285e5761284161281b89836130d0565b838381518110151561282957fe5b906020019060200201516130b290919063ffffffff16565b828281518110151561284f57fe5b90602001906020020181815250505b5b8080600101915050612692565b600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600860008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010183600860008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600860008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301848054806020026020016040519081016040528092919081815260200182805480156129c057602002820191906000526020600020905b8154815260200190600101908083116129ac575b5050505050945083805480602002602001604051908101604052809291908181526020018280548015612a1257602002820191906000526020600020905b8154815260200190600101908083116129fe575b5050505050935081805480602002602001604051908101604052809291908181526020018280548015612a6457602002820191906000526020600020905b815481526020019060010190808311612a50575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015612ab657602002820191906000526020600020905b815481526020019060010190808311612aa2575b5050505050905096509650965096509650505091939590929450565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612bb757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612bf357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612d0e57600080fd5b60001515600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff161515141515612d7057600080fd5b6001600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548160ff02191690831515021790555060019050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612e3157600080fd5b612e3e33848460006132dc565b612e9382600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461330c90919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550612f2e82600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546130b290919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018281548110151561303457fe5b90600052602060002001544210156130a757600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018281548110151561309557fe5b906000526020600020015490506130ac565b600090505b92915050565b60008082840190508381101515156130c657fe5b8091505092915050565b6000806000806000809350600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018681548110151561312a57fe5b9060005260206000200154925064174876e7ff9150600090505b600760008481526020019081526020016000206000018054905081101561323e57600760008481526020019081526020016000206000018181548110151561318857fe5b9060005260206000200154421015613231578160076000858152602001908152602001600020600001828154811015156131be57fe5b906000526020600020015410156132305760076000848152602001908152602001600020600001818154811015156131f257fe5b90600052602060002001549150600760008481526020019081526020016000206001018181548110151561322257fe5b906000526020600020015493505b5b8080600101915050613144565b600084141561325057600094506132d2565b6132cf60646132c186600860008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018a8154811015156132a857fe5b906000526020600020015461353c90919063ffffffff16565b61357790919063ffffffff16565b94505b5050505092915050565b6132e884848484613592565b8015613306576132f784611ad7565b821115151561330557600080fd5b5b50505050565b600082821115151561331a57fe5b818303905092915050565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000183600b81111561337357fe5b9080600181540180825580915050906001820390600052602060002001600090919290919091505550600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101829080600181540180825580915050906001820390600052602060002001600090919290919091505550600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201429080600181540180825580915050906001820390600052602060002001600090919290919091505550600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190806001815401808255809150509060018203906000526020600020016000909192909190915055508373ffffffffffffffffffffffffffffffffffffffff167f49eaf4942f1237055eb4cfa5f31c9dfe50d5b4ade01e021f7de8be2fbbde557b8383604051808381526020018281526020019250505060405180910390a250505050565b60008060008414156135515760009150613570565b828402905082848281151561356257fe5b0414151561356c57fe5b8091505b5092915050565b600080828481151561358557fe5b0490508091505092915050565b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156135cd57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561360957600080fd5b81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541015151561365a57600080fd5b80156136c35760001515600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff1615151415156136c257600080fd5b5b50505050565b8154818355818111156136f0578183600052602060002091820191016136ef91906136f5565b5b505050565b61371791905b808211156137135760008160009055506001016136fb565b5090565b905600a165627a7a72305820bab56275c4a7e0fe215ef468e418bb8fc5353cc718631725f25dad2f26aa4e9d0029"
}