{
  "address": "0x1ab601a2e158fbfd44b314e3a9dae742332c7f48",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "QRToken",
  "compilerVersion": "v0.5.5+commit.47a71e8f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-15\n*/\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Elliptic curve signature operations\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\n * See https://github.com/ethereum/solidity/issues/864\n */\n\nlibrary ECDSA {\n    /**\n     * @dev Recover signer address from a message by using their signature\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n     * @param signature bytes signature, the signature is generated using web3.eth.sign()\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // Check the signature length\n        if (signature.length != 65) {\n            return (address(0));\n        }\n\n        // Divide the signature in r, s and v variables\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        if (v < 27) {\n            v += 27;\n        }\n\n        // If the version is correct return the signer address\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n            return ecrecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * toEthSignedMessageHash\n     * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\n     * and hash the result\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n\n// File: contracts/IndexedMerkleProof.sol\n\npragma solidity ^0.5.5;\n\n\nlibrary IndexedMerkleProof {\n    function compute(bytes memory proof, uint160 leaf) internal pure returns (uint160 root, uint256 index) {\n        uint160 computedHash = leaf;\n\n        for (uint256 i = 0; i < proof.length / 20; i++) {\n            uint160 proofElement;\n            // solium-disable-next-line security/no-inline-assembly\n            assembly {\n                proofElement := div(mload(add(proof, add(32, mul(i, 20)))), 0x1000000000000000000000000)\n            }\n\n            if (computedHash < proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = uint160(uint256(keccak256(abi.encodePacked(computedHash, proofElement))));\n                index += (1 << i);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = uint160(uint256(keccak256(abi.encodePacked(proofElement, computedHash))));\n            }\n        }\n\n        return (computedHash, index);\n    }\n}\n\n// File: contracts/InstaLend.sol\n\npragma solidity ^0.5.5;\n\n\n\n\ncontract InstaLend {\n    using SafeMath for uint;\n\n    address private _feesReceiver;\n    uint256 private _feesPercent;\n    bool private _inLendingMode;\n\n    modifier notInLendingMode {\n        require(!_inLendingMode);\n        _;\n    }\n\n    constructor(address receiver, uint256 percent) public {\n        _feesReceiver = receiver;\n        _feesPercent = percent;\n    }\n\n    function feesReceiver() public view returns(address) {\n        return _feesReceiver;\n    }\n\n    function feesPercent() public view returns(uint256) {\n        return _feesPercent;\n    }\n\n    function lend(\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        address target,\n        bytes memory data\n    )\n        public\n        notInLendingMode\n    {\n        _inLendingMode = true;\n\n        // Backup original balances and lend tokens\n        uint256[] memory prevAmounts = new uint256[](tokens.length);\n        for (uint i = 0; i < tokens.length; i++) {\n            prevAmounts[i] = tokens[i].balanceOf(address(this));\n            require(tokens[i].transfer(target, amounts[i]));\n        }\n\n        // Perform arbitrary call\n        (bool res,) = target.call(data);    // solium-disable-line security/no-low-level-calls\n        require(res, \"Invalid arbitrary call\");\n\n        // Ensure original balances were restored\n        for (uint i = 0; i < tokens.length; i++) {\n            uint256 expectedFees = amounts[i].mul(_feesPercent).div(100);\n            require(tokens[i].balanceOf(address(this)) >= prevAmounts[i].add(expectedFees));\n            if (_feesReceiver != address(this)) {\n                require(tokens[i].transfer(_feesReceiver, expectedFees));\n            }\n        }\n\n        _inLendingMode = false;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n// File: contracts/CheckedERC20.sol\n\npragma solidity ^0.5.5;\n\n\n\n\nlibrary CheckedERC20 {\n    using SafeMath for uint;\n\n    function isContract(IERC20 addr) internal view returns(bool result) {\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            result := gt(extcodesize(addr), 0)\n        }\n    }\n\n    function handleReturnBool() internal pure returns(bool result) {\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            switch returndatasize()\n            case 0 { // not a std erc20\n                result := 1\n            }\n            case 32 { // std erc20\n                returndatacopy(0, 0, 32)\n                result := mload(0)\n            }\n            default { // anything else, should revert for safety\n                revert(0, 0)\n            }\n        }\n    }\n\n    function handleReturnBytes32() internal pure returns(bytes32 result) {\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            switch eq(returndatasize(), 32) // not a std erc20\n            case 1 {\n                returndatacopy(0, 0, 32)\n                result := mload(0)\n            }\n\n            switch gt(returndatasize(), 32) // std erc20\n            case 1 {\n                returndatacopy(0, 64, 32)\n                result := mload(0)\n            }\n\n            switch lt(returndatasize(), 32) // anything else, should revert for safety\n            case 1 {\n                revert(0, 0)\n            }\n        }\n    }\n\n    function asmTransfer(IERC20 token, address to, uint256 value) internal returns(bool) {\n        require(isContract(token));\n        // solium-disable-next-line security/no-low-level-calls\n        (bool res,) = address(token).call(abi.encodeWithSignature(\"transfer(address,uint256)\", to, value));\n        require(res);\n        return handleReturnBool();\n    }\n\n    function asmTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns(bool) {\n        require(isContract(token));\n        // solium-disable-next-line security/no-low-level-calls\n        (bool res,) = address(token).call(abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", from, to, value));\n        require(res);\n        return handleReturnBool();\n    }\n\n    function asmApprove(IERC20 token, address spender, uint256 value) internal returns(bool) {\n        require(isContract(token));\n        // solium-disable-next-line security/no-low-level-calls\n        (bool res,) = address(token).call(abi.encodeWithSignature(\"approve(address,uint256)\", spender, value));\n        require(res);\n        return handleReturnBool();\n    }\n\n    //\n\n    function checkedTransfer(IERC20 token, address to, uint256 value) internal {\n        if (value > 0) {\n            uint256 balance = token.balanceOf(address(this));\n            asmTransfer(token, to, value);\n            require(token.balanceOf(address(this)) == balance.sub(value), \"checkedTransfer: Final balance didn't match\");\n        }\n    }\n\n    function checkedTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        if (value > 0) {\n            uint256 toBalance = token.balanceOf(to);\n            asmTransferFrom(token, from, to, value);\n            require(token.balanceOf(to) == toBalance.add(value), \"checkedTransfer: Final balance didn't match\");\n        }\n    }\n}\n\n// File: contracts/IKyberNetwork.sol\n\npragma solidity ^0.5.2;\n\n\ncontract IKyberNetwork {\n    function trade(\n        address src,\n        uint256 srcAmount,\n        address dest,\n        address destAddress,\n        uint256 maxDestAmount,\n        uint256 minConversionRate,\n        address walletId\n    )\n        public\n        payable\n        returns(uint);\n\n    function getExpectedRate(\n        address source,\n        address dest,\n        uint srcQty\n    )\n        public\n        view\n        returns (\n            uint expectedPrice,\n            uint slippagePrice\n        );\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/AnyPaymentReceiver.sol\n\npragma solidity ^0.5.5;\n\n\n\n\n\n\n\ncontract AnyPaymentReceiver is Ownable {\n    using SafeMath for uint256;\n    using CheckedERC20 for IERC20;\n\n    address constant public ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    function _processPayment(\n        IKyberNetwork kyber,\n        address paymentToken,\n        uint256 paymentAmount\n    )\n        internal\n        returns(uint256)\n    {\n        uint256 previousBalance = address(this).balance;\n\n        require(IERC20(paymentToken).asmApprove(address(kyber), paymentAmount));\n        kyber.trade(\n            paymentToken,\n            paymentAmount,\n            ETHER_ADDRESS,\n            address(this),\n            1 << 255,\n            0,\n            address(0)\n        );\n\n        uint256 currentBalance = address(this).balance;\n        return currentBalance.sub(previousBalance);\n    }\n}\n\n// File: contracts/QRToken.sol\n\npragma solidity ^0.5.5;\n\n\n\n\n\n\n\n\n\n\ncontract QRToken is InstaLend, AnyPaymentReceiver {\n    using SafeMath for uint;\n    using ECDSA for bytes;\n    using IndexedMerkleProof for bytes;\n    using CheckedERC20 for IERC20;\n\n    uint256 constant public MAX_CODES_COUNT = 1024;\n    uint256 constant public MAX_WORDS_COUNT = (MAX_CODES_COUNT + 31) / 32;\n\n    struct Distribution {\n        IERC20 token;\n        uint256 sumAmount;\n        uint256 codesCount;\n        uint256 deadline;\n        address sponsor;\n        uint256[32] bitMask; // MAX_WORDS_COUNT\n    }\n\n    mapping(uint160 => Distribution) public distributions;\n\n    event Created(\n        address indexed creator,\n        uint160 indexed root,\n        IERC20 indexed token,\n        uint256 sumTokenAmount,\n        uint256 codesCount,\n        uint256 deadline\n    );\n\n    event Redeemed(\n        uint160 indexed root,\n        uint256 index,\n        address receiver\n    );\n\n    constructor()\n        public\n        InstaLend(msg.sender, 1)\n    {\n    }\n\n    function create(\n        IERC20 token,\n        uint256 sumTokenAmount,\n        uint256 codesCount,\n        uint160 root,\n        uint256 deadline\n    )\n        external\n        notInLendingMode\n    {\n        require(0 < sumTokenAmount);\n        require(0 < codesCount && codesCount <= MAX_CODES_COUNT);\n        require(deadline > now);\n\n        token.checkedTransferFrom(msg.sender, address(this), sumTokenAmount);\n        Distribution storage distribution = distributions[root];\n        distribution.token = token;\n        distribution.sumAmount = sumTokenAmount;\n        distribution.codesCount = codesCount;\n        distribution.deadline = deadline;\n        distribution.sponsor = msg.sender;\n\n        emit Created(msg.sender, root, token, sumTokenAmount, codesCount, deadline);\n    }\n\n    function redeemed(uint160 root, uint index) public view returns(bool) {\n        Distribution storage distribution = distributions[root];\n        return distribution.bitMask[index / 32] & (1 << (index % 32)) != 0;\n    }\n\n    function calcRootAndIndex(\n        bytes memory signature,\n        bytes memory merkleProof,\n        bytes memory message\n    )\n        public\n        pure\n        returns(uint160 root, uint256 index)\n    {\n        bytes32 messageHash = keccak256(message);\n        bytes32 signedHash = ECDSA.toEthSignedMessageHash(messageHash);\n        address signer = ECDSA.recover(signedHash, signature);\n        uint160 signerHash = uint160(uint256(keccak256(abi.encodePacked(signer))));\n        return merkleProof.compute(signerHash);\n    }\n\n    function redeem(\n        bytes calldata signature,\n        bytes calldata merkleProof\n    )\n        external\n        notInLendingMode\n    {\n        (uint160 root, uint256 index) = calcRootAndIndex(signature, merkleProof, abi.encodePacked(msg.sender));\n        Distribution storage distribution = distributions[root];\n        require(distribution.bitMask[index / 32] & (1 << (index % 32)) == 0);\n\n        distribution.bitMask[index / 32] = distribution.bitMask[index / 32] | (1 << (index % 32));\n        distribution.token.checkedTransfer(msg.sender, distribution.sumAmount.div(distribution.codesCount));\n        emit Redeemed(root, index, msg.sender);\n    }\n\n    function redeemWithFee(\n        IKyberNetwork kyber, // 0x818E6FECD516Ecc3849DAf6845e3EC868087B755\n        address receiver,\n        uint256 feePrecent,\n        bytes calldata signature,\n        bytes calldata merkleProof\n    )\n        external\n        notInLendingMode\n    {\n        (uint160 root, uint256 index) = calcRootAndIndex(signature, merkleProof, abi.encodePacked(receiver, feePrecent, msg.sender));\n        Distribution storage distribution = distributions[root];\n        require(distribution.bitMask[index / 32] & (1 << (index % 32)) == 0);\n\n        distribution.bitMask[index / 32] = distribution.bitMask[index / 32] | (1 << (index % 32));\n        uint256 reward = distribution.sumAmount.div(distribution.codesCount);\n        uint256 fee = reward.mul(feePrecent).div(100);\n        distribution.token.checkedTransfer(receiver, reward.sub(fee));\n        emit Redeemed(root, index, msg.sender);\n\n        uint256 gotEther = _processPayment(kyber, address(distribution.token), fee);\n        msg.sender.transfer(gotEther);\n    }\n\n    function abort(uint160 root)\n        public\n        notInLendingMode\n    {\n        Distribution storage distribution = distributions[root];\n        require(now > distribution.deadline);\n\n        uint256 count = 0;\n        for (uint i = 0; i < 1024; i++) {\n            if (distribution.bitMask[i / 32] & (1 << (i % 32)) != 0) {\n                count += distribution.sumAmount / distribution.codesCount;\n            }\n        }\n        distribution.token.checkedTransfer(distribution.sponsor, distribution.sumAmount.sub(count));\n        delete distributions[root];\n    }\n\n    function() external payable {\n        require(msg.sender != tx.origin);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"lend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_WORDS_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"kyber\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"feePrecent\",\"type\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\"},{\"name\":\"merkleProof\",\"type\":\"bytes\"}],\"name\":\"redeemWithFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CODES_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"root\",\"type\":\"uint160\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"redeemed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint160\"}],\"name\":\"distributions\",\"outputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"sumAmount\",\"type\":\"uint256\"},{\"name\":\"codesCount\",\"type\":\"uint256\"},{\"name\":\"deadline\",\"type\":\"uint256\"},{\"name\":\"sponsor\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"signature\",\"type\":\"bytes\"},{\"name\":\"merkleProof\",\"type\":\"bytes\"},{\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"calcRootAndIndex\",\"outputs\":[{\"name\":\"root\",\"type\":\"uint160\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"sumTokenAmount\",\"type\":\"uint256\"},{\"name\":\"codesCount\",\"type\":\"uint256\"},{\"name\":\"root\",\"type\":\"uint160\"},{\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"root\",\"type\":\"uint160\"}],\"name\":\"abort\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feesReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feesPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"signature\",\"type\":\"bytes\"},{\"name\":\"merkleProof\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"root\",\"type\":\"uint160\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sumTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"codesCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"root\",\"type\":\"uint160\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50600080546001600160a01b0319163390811782556001805560028054610100928302610100600160a81b031990911617908190556040519190046001600160a01b031691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3611f798061008a6000396000f3fe6080604052600436106100fe5760003560e01c806383217a7611610095578063bca93cf511610064578063bca93cf514610771578063cf1d21c014610786578063dfbfbab31461079b578063e5c1bf6e146107b0578063f2fde38b1461087b576100fe565b806383217a76146106a95780638da5cb5b146106f85780638f32d59b146107295780639dc217ac1461073e576100fe565b806372ab7040116100d157806372ab7040146103fa578063746aa14f1461040f57806376748bfe1461045c57806376a60f37146104cb576100fe565b80633f22fa971461010d57806354ff60c5146102d35780636831c9a5146102fa578063715018a6146103e5575b3332141561010b57600080fd5b005b34801561011957600080fd5b5061010b6004803603608081101561013057600080fd5b810190602081018135600160201b81111561014a57600080fd5b82018360208201111561015c57600080fd5b803590602001918460208302840111600160201b8311171561017d57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156101cc57600080fd5b8201836020820111156101de57600080fd5b803590602001918460208302840111600160201b831117156101ff57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092956001600160a01b03853516959094909350604081019250602001359050600160201b81111561025f57600080fd5b82018360208201111561027157600080fd5b803590602001918460018302840111600160201b8311171561029257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506108ae945050505050565b3480156102df57600080fd5b506102e8610d54565b60408051918252519081900360200190f35b34801561030657600080fd5b5061010b600480360360a081101561031d57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561035757600080fd5b82018360208201111561036957600080fd5b803590602001918460018302840111600160201b8311171561038a57600080fd5b919390929091602081019035600160201b8111156103a757600080fd5b8201836020820111156103b957600080fd5b803590602001918460018302840111600160201b831117156103da57600080fd5b509092509050610d59565b3480156103f157600080fd5b5061010b610f90565b34801561040657600080fd5b506102e8610ff3565b34801561041b57600080fd5b506104486004803603604081101561043257600080fd5b506001600160a01b038135169060200135610ff9565b604080519115158252519081900360200190f35b34801561046857600080fd5b5061048f6004803603602081101561047f57600080fd5b50356001600160a01b031661103c565b604080516001600160a01b0396871681526020810195909552848101939093526060840191909152909216608082015290519081900360a00190f35b3480156104d757600080fd5b50610686600480360360608110156104ee57600080fd5b810190602081018135600160201b81111561050857600080fd5b82018360208201111561051a57600080fd5b803590602001918460018302840111600160201b8311171561053b57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561058d57600080fd5b82018360208201111561059f57600080fd5b803590602001918460018302840111600160201b831117156105c057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561061257600080fd5b82018360208201111561062457600080fd5b803590602001918460018302840111600160201b8311171561064557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611077945050505050565b604080516001600160a01b03909316835260208301919091528051918290030190f35b3480156106b557600080fd5b5061010b600480360360a08110156106cc57600080fd5b506001600160a01b038135811691602081013591604082013591606081013590911690608001356110ef565b34801561070457600080fd5b5061070d6111ee565b604080516001600160a01b039092168252519081900360200190f35b34801561073557600080fd5b50610448611203565b34801561074a57600080fd5b5061010b6004803603602081101561076157600080fd5b50356001600160a01b0316611219565b34801561077d57600080fd5b5061070d611343565b34801561079257600080fd5b5061070d611352565b3480156107a757600080fd5b506102e861136a565b3480156107bc57600080fd5b5061010b600480360360408110156107d357600080fd5b810190602081018135600160201b8111156107ed57600080fd5b8201836020820111156107ff57600080fd5b803590602001918460018302840111600160201b8311171561082057600080fd5b919390929091602081019035600160201b81111561083d57600080fd5b82018360208201111561084f57600080fd5b803590602001918460018302840111600160201b8311171561087057600080fd5b509092509050611370565b34801561088757600080fd5b5061010b6004803603602081101561089e57600080fd5b50356001600160a01b031661150f565b60025460ff16156108be57600080fd5b6002805460ff19166001179055835160408051828152602080840282010190915260609180156108f8578160200160208202803883390190505b50905060005b8551811015610a7657858181518110151561091557fe5b602090810290910181015160408051600160e01b6370a0823102815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b15801561096557600080fd5b505afa158015610979573d6000803e3d6000fd5b505050506040513d602081101561098f57600080fd5b5051825183908390811061099f57fe5b6020908102909101015285518690829081106109b757fe5b906020019060200201516001600160a01b031663a9059cbb8587848151811015156109de57fe5b906020019060200201516040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610a3757600080fd5b505af1158015610a4b573d6000803e3d6000fd5b505050506040513d6020811015610a6157600080fd5b50511515610a6e57600080fd5b6001016108fe565b506000836001600160a01b0316836040518082805190602001908083835b60208310610ab35780518252601f199092019160209182019101610a94565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610b15576040519150601f19603f3d011682016040523d82523d6000602084013e610b1a565b606091505b50509050801515610b755760408051600160e51b62461bcd02815260206004820152601660248201527f496e76616c6964206172626974726172792063616c6c00000000000000000000604482015290519081900360640190fd5b60005b8651811015610d41576000610bbe6064610bb26001548a86815181101515610b9c57fe5b602090810290910101519063ffffffff61152e16565b9063ffffffff61156016565b9050610be8818584815181101515610bd257fe5b602090810290910101519063ffffffff61158416565b8883815181101515610bf657fe5b602090810290910181015160408051600160e01b6370a0823102815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b158015610c4657600080fd5b505afa158015610c5a573d6000803e3d6000fd5b505050506040513d6020811015610c7057600080fd5b50511015610c7d57600080fd5b6000546001600160a01b03163014610d38578782815181101515610c9d57fe5b60209081029091018101516000805460408051600160e01b63a9059cbb0281526001600160a01b039283166004820152602481018790529051919093169363a9059cbb93604480820194929392918390030190829087803b158015610d0157600080fd5b505af1158015610d15573d6000803e3d6000fd5b505050506040513d6020811015610d2b57600080fd5b50511515610d3857600080fd5b50600101610b78565b50506002805460ff191690555050505050565b602081565b60025460ff1615610d6957600080fd5b600080610e1986868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a01819004810282018101909252888152925088915087908190840183828082843760009201919091525050604080516001600160a01b038f16606090811b6020830152603482018f905233901b605482015281516048818303018152606890910190915291506110779050565b6001600160a01b03821660009081526003602090815260409091209294509092508260019190061b600582016020840460208110610e5357fe5b01541615610e6057600080fd5b6001601f83161b600582016020808504908110610e7957fe5b015417600582016020840460208110610e8e57fe5b015560028101546001820154600091610ead919063ffffffff61156016565b90506000610ec66064610bb2848d63ffffffff61152e16565b9050610ef48b610edc848463ffffffff61159616565b85546001600160a01b0316919063ffffffff6115ab16565b6040805185815233602082015281516001600160a01b038816927f641d546b107be1bdeb003ea43cd4820edae20cbafff52c960807c1dfebd60e39928290030190a28254600090610f50908e906001600160a01b031684611703565b604051909150339082156108fc029083906000818181858888f19350505050158015610f80573d6000803e3d6000fd5b5050505050505050505050505050565b610f98611203565b1515610fa357600080fd5b60025460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360028054610100600160a81b0319169055565b61040081565b6001600160a01b03821660009081526003602090815260408220908360019190061b60058201602085046020811061102d57fe5b01541615159150505b92915050565b6003602081905260009182526040909120805460018201546002830154938301546004909301546001600160a01b0392831694919391921685565b8051602082012060009081908161108d82611805565b9050600061109b8289611856565b604080516001600160a01b03831660601b60208083019190915282518083036014018152603490920190925280519101209091506110df888263ffffffff61192916565b9550955050505050935093915050565b60025460ff16156110ff57600080fd5b6000841161110c57600080fd5b82600010801561111e57506104008311155b151561112957600080fd5b42811161113557600080fd5b6111506001600160a01b03861633308763ffffffff611a2316565b6001600160a01b0382811660008181526003602081815260409283902080546001600160a01b0319908116968c169687178255600182018b9055600282018a90559281018790556004810180543394168417905583518a81529182018990528184018790529251929493927fcfb949ded60b18b3bf30a99a2212adb75707e3e33694ee1c4b34bcf71b0826ee916060908290030190a4505050505050565b60025461010090046001600160a01b03165b90565b60025461010090046001600160a01b0316331490565b60025460ff161561122957600080fd5b6001600160a01b038116600090815260036020819052604090912090810154421161125357600080fd5b6000805b6104008110156112a3576001601f82161b60058401602080840490811061127a57fe5b0154161561129b578260020154836001015481151561129557fe5b04820191505b600101611257565b50600482015460018301546112e4916001600160a01b0316906112cc908463ffffffff61159616565b84546001600160a01b0316919063ffffffff6115ab16565b6001600160a01b0383166000908152600360208190526040822080546001600160a01b0319908116825560018201849055600282018490559181018390556004810180549092169091559061133c6005830182611eff565b5050505050565b6000546001600160a01b031690565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60015490565b60025460ff161561138057600080fd5b60008061141686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a01819004810282018101909252888152925088915087908190840183828082843760009201919091525050604080513360601b602082015281518082036014018152603490910190915291506110779050565b6001600160a01b03821660009081526003602090815260409091209294509092508260019190061b60058201602084046020811061145057fe5b0154161561145d57600080fd5b6001601f83161b60058201602080850490811061147657fe5b01541760058201602084046020811061148b57fe5b0155600281015460018201546114c49133916114ac9163ffffffff61156016565b83546001600160a01b0316919063ffffffff6115ab16565b6040805183815233602082015281516001600160a01b038616927f641d546b107be1bdeb003ea43cd4820edae20cbafff52c960807c1dfebd60e39928290030190a250505050505050565b611517611203565b151561152257600080fd5b61152b81611b8d565b50565b600082151561153f57506000611036565b82820282848281151561154e57fe5b041461155957600080fd5b9392505050565b600081151561156e57600080fd5b6000828481151561157b57fe5b04949350505050565b60008282018381101561155957600080fd5b6000828211156115a557600080fd5b50900390565b80156116fe5760408051600160e01b6370a0823102815230600482015290516000916001600160a01b038616916370a0823191602480820192602092909190829003018186803b1580156115fe57600080fd5b505afa158015611612573d6000803e3d6000fd5b505050506040513d602081101561162857600080fd5b50519050611637848484611c09565b50611648818363ffffffff61159616565b60408051600160e01b6370a0823102815230600482015290516001600160a01b038716916370a08231916024808301926020929190829003018186803b15801561169157600080fd5b505afa1580156116a5573d6000803e3d6000fd5b505050506040513d60208110156116bb57600080fd5b5051146116fc57604051600160e51b62461bcd02815260040180806020018281038252602b815260200180611f23602b913960400191505060405180910390fd5b505b505050565b600030316117216001600160a01b038516868563ffffffff611d2216565b151561172c57600080fd5b60408051600160e01b63cb3c28c70281526001600160a01b0386811660048301526024820186905273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6044830152306064830152600160ff1b6084830152600060a4830181905260c4830181905292519088169263cb3c28c79260e480820193602093909283900390910190829087803b1580156117bd57600080fd5b505af11580156117d1573d6000803e3d6000fd5b505050506040513d60208110156117e757600080fd5b505030316117fb818363ffffffff61159616565b9695505050505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b600080600080845160411415156118735760009350505050611036565b50505060208201516040830151606084015160001a601b81101561189557601b015b8060ff16601b141580156118ad57508060ff16601c14155b156118be5760009350505050611036565b6040805160008152602080820180845289905260ff8416828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa158015611915573d6000803e3d6000fd5b505050602060405103519350505050611036565b60008082815b855160149004811015611a195760148102860160200151600160601b90046001600160a01b0380821690841610156119b157604080516001600160a01b03948516606090811b602080840191909152958416901b603482015281516028818303018152604890910190915280519301929092206001821b939093019291611a10565b808360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b8152601401925050506040516020818303038152906040528051906020012060001c92505b5060010161192f565b5091509250929050565b80156116fc576000846001600160a01b03166370a08231846040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015611a8157600080fd5b505afa158015611a95573d6000803e3d6000fd5b505050506040513d6020811015611aab57600080fd5b50519050611abb85858585611db2565b50611acc818363ffffffff61158416565b856001600160a01b03166370a08231856040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015611b2257600080fd5b505afa158015611b36573d6000803e3d6000fd5b505050506040513d6020811015611b4c57600080fd5b50511461133c57604051600160e51b62461bcd02815260040180806020018281038252602b815260200180611f23602b913960400191505060405180910390fd5b6001600160a01b0381161515611ba257600080fd5b6002546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600280546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6000611c1484611eca565b1515611c1f57600080fd5b604080516001600160a01b038581166024830152604480830186905283518084039091018152606490920183526020820180516001600160e01b0316600160e01b63a9059cbb0217815292518251600094928916939282918083835b60208310611c9a5780518252601f199092019160209182019101611c7b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611cfc576040519150601f19603f3d011682016040523d82523d6000602084013e611d01565b606091505b50509050801515611d1157600080fd5b611d19611ed0565b95945050505050565b6000611d2d84611eca565b1515611d3857600080fd5b604080516001600160a01b038581166024830152604480830186905283518084039091018152606490920183526020820180516001600160e01b0316600160e01b63095ea7b302178152925182516000949289169392829180838360208310611c9a5780518252601f199092019160209182019101611c7b565b6000611dbd85611eca565b1515611dc857600080fd5b604080516001600160a01b0386811660248301528581166044830152606480830186905283518084039091018152608490920183526020820180516001600160e01b0316600160e01b6323b872dd0217815292518251600094928a16939282918083835b60208310611e4b5780518252601f199092019160209182019101611e2c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611ead576040519150601f19603f3d011682016040523d82523d6000602084013e611eb2565b606091505b50509050801515611ec257600080fd5b6117fb611ed0565b3b151590565b60003d8015611ee65760208114611eef57600080fd5b60019150611efb565b60206000803e60005191505b5090565b5061152b906112009060208101905b80821115611efb5760008155600101611f0e56fe636865636b65645472616e736665723a2046696e616c2062616c616e6365206469646e2774206d61746368a165627a7a723058200bfb4078edaf0f5fd4ae274089f8cdd104092d3a9af915433590e0fcca926d470029"
}