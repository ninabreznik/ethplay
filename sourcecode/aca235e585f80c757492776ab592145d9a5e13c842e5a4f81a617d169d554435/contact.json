{
  "address": "0x9af2c6b1a28d3d6bc084bd267f70e90d49741d5b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Axpire Token",
  "contractName": "AxpireToken",
  "compilerVersion": "v0.4.20-nightly.2018.1.6+commit.2548228b",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-01\n*/\n\npragma solidity ^0.4.15;\n//Owner Contract-For Defining Owner and Transferring Ownership\ncontract Ownable {\n    address public owner;\n\n    function Ownable() public {\n        owner = 0x2e1977127F682723C778bBcac576A4aF2c0e790d;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract TokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n}\n\n\n\n//Token Format\ncontract ERC20 is Ownable {\n    using SafeMath for uint256;\n    //Public Variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n\n    mapping (address => uint256) public balances;\n\n    mapping (address => mapping (address => uint256)) public allowed;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n\n    //Constructor\n    function ERC20(\n    uint256 _initialSupply,\n    string _tokenName,\n    uint8 _decimalUnits,\n    string _tokenSymbol\n    ) public\n    {\n\n        balances[0x2e1977127F682723C778bBcac576A4aF2c0e790d] = _initialSupply;\n        totalSupply = _initialSupply;\n        decimals = _decimalUnits;\n        symbol = _tokenSymbol;\n        name = _tokenName;\n    }\n\n    /* public methods */\n    function transfer(address _to, uint256 _value) public  returns (bool) {\n\n\n        bool status = transferInternal(msg.sender, _to, _value);\n\n        require(status == true);\n\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n\n\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n\n\n        TokenRecipient spender = TokenRecipient(_spender);\n\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\n\n        if (allowed[_from][msg.sender] < _value) {\n            return false;\n        }\n\n        bool _success = transferInternal(_from, _to, _value);\n\n        if (_success) {\n            allowed[_from][msg.sender] -= _value;\n        }\n\n        return _success;\n    }\n\n    /*constant functions*/\n    function totalSupply() public constant returns (uint256) {\n        return totalSupply;\n    }\n\n    function balanceOf(address _address) public constant returns (uint256 balance) {\n        return balances[_address];\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /* internal functions*/\n    function setBalance(address _holder, uint256 _amount) internal {\n        balances[_holder] = _amount;\n    }\n\n    function transferInternal(address _from, address _to, uint256 _value) internal returns (bool success) {\n\n        if (_value == 0) {\n            Transfer(_from, _to, _value);\n\n            return true;\n        }\n\n        if (balances[_from] < _value) {\n            return false;\n        }\n\n        setBalance(_from, balances[_from].sub(_value));\n        setBalance(_to, balances[_to].add(_value));\n\n        Transfer(_from, _to, _value);\n\n        return true;\n    }\n}\n\ncontract ERC223 {\n    event Transfer(address indexed from, address indexed to, uint value, bytes  data);\n    function transfer(address to, uint value, bytes data) public returns (bool ok);\n    function transfer(address to, uint value, bytes data, string customFallback) public returns (bool ok);\n}\n\n\ncontract ContractReceiver {\n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\n\n/******************************************/\n/** Axpire TOKEN **/\n/******************************************/\ncontract AxpireToken is ERC223,ERC20 {\n\n    uint256 initialSupply= 350000000 * 10**8;\n    string tokenName=\"aXpire Token\";\n    string tokenSymbol=\"AXP\";\n    uint8 decimalUnits=8;\n\n    //Constructor\n    function AxpireToken() public\n    ERC20(initialSupply, tokenName, decimalUnits, tokenSymbol)\n    {\n        owner = 0x2e1977127F682723C778bBcac576A4aF2c0e790d;\n        //Assigning total no of tokens\n        balances[owner] = initialSupply;\n        totalSupply = initialSupply;\n    }\n\n\n    function transfer(address to, uint256 value, bytes data) public returns (bool success) {\n\n        bool status = transferInternal(msg.sender, to, value, data);\n\n        return status;\n    }\n\n    function transfer(address to, uint value, bytes data, string customFallback) public returns (bool success) {\n\n        bool status = transferInternal(msg.sender, to, value, data, true, customFallback);\n\n        return status;\n    }\n\n    // rollback changes to transferInternal for transferFrom\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\n        if (allowed[_from][msg.sender] < _value) {\n            return false;\n        }\n\n        bool _success = super.transferInternal(_from, _to, _value);\n\n        if (_success) {\n            allowed[_from][msg.sender] -= _value;\n        }\n\n        return _success;\n    }\n\n    function transferInternal(address from, address to, uint256 value, bytes data) internal returns (bool success) {\n        return transferInternal(from, to, value, data, false, \"\");\n    }\n\n    function transferInternal(\n    address from,\n    address to,\n    uint256 value,\n    bytes data,\n    bool useCustomFallback,\n    string customFallback\n    )\n    internal returns (bool success)\n    {\n        bool status = super.transferInternal(from, to, value);\n\n        if (status) {\n            if (isContract(to)) {\n                ContractReceiver receiver = ContractReceiver(to);\n\n                if (useCustomFallback) {\n                    // solhint-disable-next-line avoid-call-value\n                    require(receiver.call.value(0)(bytes4(keccak256(customFallback)), from, value, data) == true);\n                } else {\n                    receiver.tokenFallback(from, value, data);\n                }\n            }\n\n            Transfer(from, to, value, data);\n        }\n\n        return status;\n    }\n\n    function transferInternal(address from, address to, uint256 value) internal returns (bool success) {\n\n        bytes memory data;\n\n        return transferInternal(from, to, value, data, false, \"\");\n    }\n\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) private returns (bool) {\n        uint length;\n        assembly {\n        //retrieve the size of the code on target address, this needs assembly\n        length := extcodesize(_addr)\n        }\n        return (length > 0);\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"customFallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "6060604052667c5850872380006007556040805190810160405280600c81526020017f61587069726520546f6b656e0000000000000000000000000000000000000000815250600890805190602001906200005c929190620003f2565b506040805190810160405280600381526020017f415850000000000000000000000000000000000000000000000000000000000081525060099080519060200190620000aa929190620003f2565b506008600a60006101000a81548160ff021916908360ff1602179055503415620000d357600080fd5b60075460088054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620001705780601f10620001445761010080835404028352916020019162000170565b820191906000526020600020905b8154815290600101906020018083116200015257829003601f168201915b5050505050600a60009054906101000a900460ff1660098054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156200021f5780601f10620001f3576101008083540402835291602001916200021f565b820191906000526020600020905b8154815290600101906020018083116200020157829003601f168201915b5050505050732e1977127f682723c778bbcac576a4af2c0e790d6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360056000732e1977127f682723c778bbcac576a4af2c0e790d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360048190555081600360006101000a81548160ff021916908360ff16021790555080600290805190602001906200030a929190620003f2565b50826001908051906020019062000323929190620003f2565b5050505050732e1977127f682723c778bbcac576a4af2c0e790d6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600754600560008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600754600481905550620004a1565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200043557805160ff191683800117855562000466565b8280016001018555821562000466579182015b828111156200046557825182559160200191906001019062000448565b5b50905062000475919062000479565b5090565b6200049e91905b808211156200049a57600081600090555060010162000480565b5090565b90565b6115c880620004b16000396000f3006060604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100eb578063095ea7b31461017957806318160ddd146101d357806323b872dd146101fc57806327e235e314610275578063313ce567146102c25780635c658165146102f157806370a082311461035d5780638da5cb5b146103aa57806395d89b41146103ff578063a9059cbb1461048d578063be45fd62146104e7578063cae9ca5114610584578063dd62ed3e14610621578063f2fde38b1461068d578063f6368f8a146106c6575b600080fd5b34156100f657600080fd5b6100fe6107a6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013e578082015181840152602081019050610123565b50505050905090810190601f16801561016b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018457600080fd5b6101b9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610844565b604051808215151515815260200191505060405180910390f35b34156101de57600080fd5b6101e6610936565b6040518082815260200191505060405180910390f35b341561020757600080fd5b61025b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610940565b604051808215151515815260200191505060405180910390f35b341561028057600080fd5b6102ac600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a7a565b6040518082815260200191505060405180910390f35b34156102cd57600080fd5b6102d5610a92565b604051808260ff1660ff16815260200191505060405180910390f35b34156102fc57600080fd5b610347600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610aa5565b6040518082815260200191505060405180910390f35b341561036857600080fd5b610394600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610aca565b6040518082815260200191505060405180910390f35b34156103b557600080fd5b6103bd610b13565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561040a57600080fd5b610412610b38565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610452578082015181840152602081019050610437565b50505050905090810190601f16801561047f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561049857600080fd5b6104cd600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bd6565b604051808215151515815260200191505060405180910390f35b34156104f257600080fd5b61056a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610c04565b604051808215151515815260200191505060405180910390f35b341561058f57600080fd5b610607600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610c20565b604051808215151515815260200191505060405180910390f35b341561062c57600080fd5b610677600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d9e565b6040518082815260200191505060405180910390f35b341561069857600080fd5b6106c4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e25565b005b34156106d157600080fd5b61078c600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610ec3565b604051808215151515815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561083c5780601f106108115761010080835404028352916020019161083c565b820191906000526020600020905b81548152906001019060200180831161081f57829003601f168201915b505050505081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600454905090565b60008082600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156109d05760009150610a72565b6109db858585610ee3565b90508015610a6e5782600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b8091505b509392505050565b60056020528060005260406000206000915090505481565b600360009054906101000a900460ff1681565b6006602052816000526040600020602052806000526040600020600091509150505481565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bce5780601f10610ba357610100808354040283529160200191610bce565b820191906000526020600020905b815481529060010190602001808311610bb157829003601f168201915b505050505081565b600080610be43385856110d2565b905060011515811515141515610bf957600080fd5b600191505092915050565b600080610c1333868686611105565b9050809150509392505050565b600080849050610c308585610844565b15610d95578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610d2a578082015181840152602081019050610d0f565b50505050905090810190601f168015610d575780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610d7857600080fd5b6102c65a03f11515610d8957600080fd5b50505060019150610d96565b5b509392505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e8057600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080610ed533878787600188611130565b905080915050949350505050565b600080821415610f5b578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190506110cb565b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610fab57600090506110cb565b6110068461100184600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114f690919063ffffffff16565b61150f565b6110618361105c84600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461155790919063ffffffff16565b61150f565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b60006110dc611588565b6110fb8585858460006020604051908101604052806000815250611130565b9150509392505050565b60006111268585858560006020604051908101604052806000815250611130565b9050949350505050565b6000806000611140898989610ee3565b915081156114e75761115188611575565b156114145787905084156112ef57600115158173ffffffffffffffffffffffffffffffffffffffff166000866040518082805190602001908083835b6020831015156111b2578051825260208201915060208101905060208303925061118d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207c01000000000000000000000000000000000000000000000000000000009004908c8b8b6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828051906020019080838360005b83811015611293578082015181840152602081019050611278565b50505050905090810190601f1680156112c05780820380516001836020036101000a031916815260200191505b50935050505060006040518083038185886187965a03f1935050505015151415156112ea57600080fd5b611413565b8073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a8a89896040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156113b1578082015181840152602081019050611396565b50505050905090810190601f1680156113de5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15156113fe57600080fd5b6102c65a03f1151561140f57600080fd5b5050505b5b8773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1689896040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156114ab578082015181840152602081019050611490565b50505050905090810190601f1680156114d85780820380516001836020036101000a031916815260200191505b50935050505060405180910390a35b81925050509695505050505050565b600082821115151561150457fe5b818303905092915050565b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600080828401905083811015151561156b57fe5b8091505092915050565b600080823b905060008111915050919050565b6020604051908101604052806000815250905600a165627a7a72305820b8fa869d3d99ead854f601f11db9ed6d3252b572215d275d3d3110384a1abef00029"
}