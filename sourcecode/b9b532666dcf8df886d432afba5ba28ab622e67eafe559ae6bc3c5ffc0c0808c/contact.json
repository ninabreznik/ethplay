{
  "address": "0xb58f5f3adcbe928ea343c12d047656c59b3c1f2a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DividendManager",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-10\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ninterface UnicornDividendTokenInterface {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function getHolder(uint256) external view returns (address);\n    function getHoldersCount() external view returns (uint256);\n}\n\ncontract DividendManager {\n    using SafeMath for uint256;\n\n    /* Our handle to the UnicornToken contract. */\n    UnicornDividendTokenInterface unicornDividendToken;\n\n    /* Handle payments we couldn't make. */\n    mapping (address => uint256) public pendingWithdrawals;\n\n    /* Indicates a payment is now available to a shareholder */\n    event WithdrawalAvailable(address indexed holder, uint256 amount);\n\n    /* Indicates a payment is payed to a shareholder */\n    event WithdrawalPayed(address indexed holder, uint256 amount);\n\n    /* Indicates a dividend payment was made. */\n    event DividendPayment(uint256 paymentPerShare);\n\n    /* Create our contract with references to other contracts as required. */\n    function DividendManager(address _unicornDividendToken) public{\n        /* Setup access to our other contracts and validate their versions */\n        unicornDividendToken = UnicornDividendTokenInterface(_unicornDividendToken);\n    }\n\n    uint256 public retainedEarning = 0;\n\n\n    // Makes a dividend payment - we make it available to all senders then send the change back to the caller.  We don't actually send the payments to everyone to reduce gas cost and also to\n    // prevent potentially getting into a situation where we have recipients throwing causing dividend failures and having to consolidate their dividends in a separate process.\n\n    function () public payable {\n        payDividend();\n    }\n\n    function payDividend() public payable {\n        retainedEarning = retainedEarning.add(msg.value);\n        require(retainedEarning > 0);\n\n        /* Determine how much to pay each shareholder. */\n        uint256 totalSupply = unicornDividendToken.totalSupply();\n        uint256 paymentPerShare = retainedEarning.div(totalSupply);\n        if (paymentPerShare > 0) {\n            uint256 totalPaidOut = 0;\n            /* Enum all accounts and send them payment */\n            for (uint256 i = 1; i <= unicornDividendToken.getHoldersCount(); i++) {\n                address holder = unicornDividendToken.getHolder(i);\n                uint256 withdrawal = paymentPerShare * unicornDividendToken.balanceOf(holder);\n                pendingWithdrawals[holder] = pendingWithdrawals[holder].add(withdrawal);\n                WithdrawalAvailable(holder, withdrawal);\n                totalPaidOut = totalPaidOut.add(withdrawal);\n            }\n            retainedEarning = retainedEarning.sub(totalPaidOut);\n        }\n        DividendPayment(paymentPerShare);\n    }\n\n    /* Allows a user to request a withdrawal of their dividend in full. */\n    function withdrawDividend() public {\n        uint amount = pendingWithdrawals[msg.sender];\n        require (amount > 0);\n        pendingWithdrawals[msg.sender] = 0;\n        msg.sender.transfer(amount);\n        WithdrawalPayed(msg.sender, amount);\n    }\n}",
  "bytecode": "60606040526000600255341561001457600080fd5b6040516020806107f683398101604052808051906020019091905050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610776806100806000396000f300606060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630b6826ca1461006c5780636a47400214610076578063752329ec1461008b578063f3f43703146100b4575b61006a610101565b005b610074610101565b005b341561008157600080fd5b6100896105b1565b005b341561009657600080fd5b61009e6106da565b6040518082815260200191505060405180910390f35b34156100bf57600080fd5b6100eb600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506106e0565b6040518082815260200191505060405180910390f35b60008060008060008061011f346002546106f890919063ffffffff16565b600281905550600060025411151561013657600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156101c357600080fd5b6102c65a03f115156101d457600080fd5b5050506040518051905095506101f58660025461071690919063ffffffff16565b945060008511156105725760009350600192505b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166373889f4a6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561029657600080fd5b6102c65a03f115156102a757600080fd5b5050506040518051905083111515610556576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e8a96b46846000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b151561035157600080fd5b6102c65a03f1151561036257600080fd5b5050506040518051905091506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561043257600080fd5b6102c65a03f1151561044357600080fd5b50505060405180519050850290506104a381600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106f890919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167fc01f5431b0115fdcf7e402c897faa3faad99d1a9f0c380e85cb52352c6b3881b826040518082815260200191505060405180910390a261054781856106f890919063ffffffff16565b93508280600101935050610209565b61056b8460025461073190919063ffffffff16565b6002819055505b7f23b3a9e74bec74a80a1b99fd645e2c39c1de9cbf9dd755dbb426f1449efeda91856040518082815260200191505060405180910390a1505050505050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111151561060457600080fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561068957600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167fc03f16347217ec95b1d2a942bd11bd3c6dde728406dd9b548cc22acc8e44d66d826040518082815260200191505060405180910390a250565b60025481565b60016020528060005260406000206000915090505481565b600080828401905083811015151561070c57fe5b8091505092915050565b600080828481151561072457fe5b0490508091505092915050565b600082821115151561073f57fe5b8183039050929150505600a165627a7a7230582039894a694450773307b508ccc9c5bd208b7002ed2d1991cb043f794a4d13f5a40029000000000000000000000000c6a5cc090b709ee71080effff3b0dddbd9d9d8e4",
  "constructorArguments": "000000000000000000000000c6a5cc090b709ee71080effff3b0dddbd9d9d8e4"
}