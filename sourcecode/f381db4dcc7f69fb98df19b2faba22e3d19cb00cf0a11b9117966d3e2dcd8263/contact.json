{
  "address": "0xb818acc3307fd45a461df55df75f3aa435682977",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BitpaintingAuctions",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-29\n*/\n\npragma solidity ^0.4.15;\n\n// File: contracts/interfaces/IAuctions.sol\n\ncontract IAuctions {\n\n    function currentPrice(uint _tokenId) public constant returns (uint256);\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration) public;\n    function createReleaseAuction(\n        uint _tokenId,\n        uint _startingPrice,\n        uint _endingPrice,\n        uint _startedAt,\n        uint _duration) public;\n    function cancelAuction(uint256 _tokenId) external;\n    function cancelAuctionWhenPaused(uint256 _tokenId) external;\n    function bid(uint256 _tokenId, address _owner) external payable;\n    function market() public constant returns (\n        uint[] tokens,\n        address[] sellers,\n        uint8[] generations,\n        uint8[] speeds,\n        uint[] prices\n    );\n    function auctionsOf(address _of) public constant returns (\n        uint[] tokens,\n        uint[] prices\n    );\n    function signature() external constant returns (uint _signature);\n}\n\n// File: contracts/interfaces/IStorage.sol\n\ncontract IStorage {\n    function isOwner(address _address) public constant returns (bool);\n\n    function isAllowed(address _address) external constant returns (bool);\n    function developer() public constant returns (address);\n    function setDeveloper(address _address) public;\n    function addAdmin(address _address) public;\n    function isAdmin(address _address) public constant returns (bool);\n    function removeAdmin(address _address) public;\n    function contracts(uint _signature) public returns (address _address);\n\n    function exists(uint _tokenId) external constant returns (bool);\n    function paintingsCount() public constant returns (uint);\n    function increaseOwnershipTokenCount(address _address) public;\n    function decreaseOwnershipTokenCount(address _address) public;\n    function setOwnership(uint _tokenId, address _address) public;\n    function getPainting(uint _tokenId)\n        external constant returns (address, uint, uint, uint, uint8, uint8);\n    function createPainting(\n        address _owner,\n        uint _tokenId,\n        uint _parentId,\n        uint8 _generation,\n        uint8 _speed,\n        uint _artistId,\n        uint _releasedAt) public;\n    function approve(uint _tokenId, address _claimant) external;\n    function isApprovedFor(uint _tokenId, address _claimant)\n        external constant returns (bool);\n    function createEditionMeta(uint _tokenId) public;\n    function getPaintingOwner(uint _tokenId)\n        external constant returns (address);\n    function getPaintingGeneration(uint _tokenId)\n        public constant returns (uint8);\n    function getPaintingSpeed(uint _tokenId)\n        external constant returns (uint8);\n    function getPaintingArtistId(uint _tokenId)\n        public constant returns (uint artistId);\n    function getOwnershipTokenCount(address _address)\n        external constant returns (uint);\n    function isReady(uint _tokenId) public constant returns (bool);\n    function getPaintingIdAtIndex(uint _index) public constant returns (uint);\n    function lastEditionOf(uint _index) public constant returns (uint);\n    function getPaintingOriginal(uint _tokenId)\n        external constant returns (uint);\n    function canBeBidden(uint _tokenId) public constant returns (bool _can);\n\n    function addAuction(\n        uint _tokenId,\n        uint _startingPrice,\n        uint _endingPrice,\n        uint _duration,\n        address _seller) public;\n    function addReleaseAuction(\n        uint _tokenId,\n        uint _startingPrice,\n        uint _endingPrice,\n        uint _startedAt,\n        uint _duration) public;\n    function initAuction(\n        uint _tokenId,\n        uint _startingPrice,\n        uint _endingPrice,\n        uint _startedAt,\n        uint _duration,\n        address _seller,\n        bool _byTeam) public;\n    function _isOnAuction(uint _tokenId) internal constant returns (bool);\n    function isOnAuction(uint _tokenId) external constant returns (bool);\n    function removeAuction(uint _tokenId) public;\n    function getAuction(uint256 _tokenId)\n        external constant returns (\n        address seller,\n        uint256 startingPrice,\n        uint256 endingPrice,\n        uint256 duration,\n        uint256 startedAt);\n    function getAuctionSeller(uint256 _tokenId)\n        public constant returns (address);\n    function getAuctionEnd(uint _tokenId)\n        public constant returns (uint);\n    function canBeCanceled(uint _tokenId) external constant returns (bool);\n    function getAuctionsCount() public constant returns (uint);\n    function getTokensOnAuction() public constant returns (uint[]);\n    function getTokenIdAtIndex(uint _index) public constant returns (uint);\n    function getAuctionStartedAt(uint256 _tokenId) public constant returns (uint);\n\n    function getOffsetIndex() public constant returns (uint);\n    function nextOffsetIndex() public returns (uint);\n    function canCreateEdition(uint _tokenId, uint8 _generation)\n        public constant returns (bool);\n    function isValidGeneration(uint8 _generation)\n        public constant returns (bool);\n    function increaseGenerationCount(uint _tokenId, uint8 _generation) public;\n    function getEditionsCount(uint _tokenId) external constant returns (uint8[3]);\n    function setLastEditionOf(uint _tokenId, uint _editionId) public;\n    function setEditionLimits(uint _tokenId, uint8 _gen1, uint8 _gen2, uint8 _gen3) public;\n    function getEditionLimits(uint _tokenId) external constant returns (uint8[3]);\n\n    function hasEditionInProgress(uint _tokenId) external constant returns (bool);\n    function hasEmptyEditionSlots(uint _tokenId) external constant returns (bool);\n\n    function setPaintingName(uint _tokenId, string _name) public;\n    function setPaintingArtist(uint _tokenId, string _name) public;\n    function purgeInformation(uint _tokenId) public;\n    function resetEditionLimits(uint _tokenId) public;\n    function resetPainting(uint _tokenId) public;\n    function decreaseSpeed(uint _tokenId) public;\n    function isCanceled(uint _tokenId) public constant returns (bool _is);\n    function totalPaintingsCount() public constant returns (uint _total);\n    function isSecondary(uint _tokenId) public constant returns (bool _is);\n    function secondarySaleCut() public constant returns (uint8 _cut);\n    function sealForChanges(uint _tokenId) public;\n    function canBeChanged(uint _tokenId) public constant returns (bool _can);\n\n    function getPaintingName(uint _tokenId) public constant returns (string);\n    function getPaintingArtist(uint _tokenId) public constant returns (string);\n\n    function signature() external constant returns (bytes4);\n}\n\n// File: contracts/libs/Ownable.sol\n\n/**\n* @title Ownable\n* @dev Manages ownership of the contracts\n*/\ncontract Ownable {\n\n    address public owner;\n\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function isOwner(address _address) public constant returns (bool) {\n        return _address == owner;\n    }\n\n    function transferOwnership(address newOwner) external onlyOwner {\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n\n}\n\n// File: contracts/libs/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    /**\n    * @dev modifier to allow actions only when the contract IS paused\n    */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n    * @dev modifier to allow actions only when the contract IS NOT paused\n    */\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function _pause() internal whenNotPaused {\n        paused = true;\n        Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function _unpause() internal whenPaused {\n        paused = false;\n        Unpause();\n    }\n}\n\n// File: contracts/libs/BitpaintingBase.sol\n\ncontract BitpaintingBase is Pausable {\n    /*** EVENTS ***/\n    event Create(uint _tokenId,\n        address _owner,\n        uint _parentId,\n        uint8 _generation,\n        uint _createdAt,\n        uint _completedAt);\n\n    event Transfer(address from, address to, uint256 tokenId);\n\n    IStorage public bitpaintingStorage;\n\n    modifier canPauseUnpause() {\n        require(msg.sender == owner || msg.sender == bitpaintingStorage.developer());\n        _;\n    }\n\n    function setBitpaintingStorage(address _address) public onlyOwner {\n        require(_address != address(0));\n        bitpaintingStorage = IStorage(_address);\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() public canPauseUnpause whenNotPaused {\n        super._pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() external canPauseUnpause whenPaused {\n        super._unpause();\n    }\n\n    function canUserReleaseArtwork(address _address)\n        public constant returns (bool _can) {\n        return (bitpaintingStorage.isOwner(_address)\n            || bitpaintingStorage.isAdmin(_address)\n            || bitpaintingStorage.isAllowed(_address));\n    }\n\n    function canUserCancelArtwork(address _address)\n        public constant returns (bool _can) {\n        return (bitpaintingStorage.isOwner(_address)\n            || bitpaintingStorage.isAdmin(_address));\n    }\n\n    modifier canReleaseArtwork() {\n        require(canUserReleaseArtwork(msg.sender));\n        _;\n    }\n\n    modifier canCancelArtwork() {\n        require(canUserCancelArtwork(msg.sender));\n        _;\n    }\n\n    /// @dev Assigns ownership of a specific Painting to an address.\n    function _transfer(address _from, address _to, uint256 _tokenId)\n        internal {\n        bitpaintingStorage.setOwnership(_tokenId, _to);\n        Transfer(_from, _to, _tokenId);\n    }\n\n    function _createOriginalPainting(uint _tokenId, uint _artistId, uint _releasedAt) internal {\n        address _owner = owner;\n        uint _parentId = 0;\n        uint8 _generation = 0;\n        uint8 _speed = 10;\n        _createPainting(_owner, _tokenId, _parentId, _generation, _speed, _artistId, _releasedAt);\n    }\n\n    function _createPainting(\n        address _owner,\n        uint _tokenId,\n        uint _parentId,\n        uint8 _generation,\n        uint8 _speed,\n        uint _artistId,\n        uint _releasedAt\n    )\n        internal\n    {\n        require(_tokenId == uint256(uint32(_tokenId)));\n        require(_parentId == uint256(uint32(_parentId)));\n        require(_generation == uint256(uint8(_generation)));\n\n        bitpaintingStorage.createPainting(\n            _owner, _tokenId, _parentId, _generation, _speed, _artistId, _releasedAt);\n\n        uint _createdAt;\n        uint _completedAt;\n        (,,_createdAt, _completedAt,,) = bitpaintingStorage.getPainting(_tokenId);\n\n        // emit the create event\n        Create(\n            _tokenId,\n            _owner,\n            _parentId,\n            _generation,\n            _createdAt,\n            _completedAt\n        );\n\n        // This will assign ownership, and also emit the Transfer event as\n        // per ERC721 draft\n        _transfer(0, _owner, _tokenId);\n    }\n\n}\n\n// File: contracts/libs/ERC721.sol\n\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n/// @author Dieter Shirley <[email protected]> (https://github.com/dete)\ncontract ERC721 {\n    // Required methods\n    function totalSupply() public constant returns (uint256 total);\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n    function ownerOf(uint256 _tokenId) external constant returns (address owner);\n    function approve(address _to, uint256 _tokenId) external;\n    function transfer(address _to, uint256 _tokenId) external;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n\n    // Events\n    event Transfer(address from, address to, uint256 tokenId);\n    event Approval(address owner, address approved, uint256 tokenId);\n\n    // Optional\n    // function name() public view returns (string name);\n    // function symbol() public view returns (string symbol);\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\n\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n    function supportsInterface(bytes4 _interfaceID) external constant returns (bool);\n}\n\n// File: contracts/libs/ERC721Metadata.sol\n\n/// @title The external contract that is responsible for generating metadata for the kitties,\n///  it has one function that will return the data as bytes.\ncontract ERC721Metadata {\n    /// @dev Given a token Id, returns a byte array that is supposed to be converted into string.\n    function getMetadata(uint256 _tokenId, string) public constant returns (bytes32[4] buffer, uint256 count) {\n        if (_tokenId == 1) {\n            buffer[0] = \"Hello World! :D\";\n            count = 15;\n        } else if (_tokenId == 2) {\n            buffer[0] = \"I would definitely choose a medi\";\n            buffer[1] = \"um length string.\";\n            count = 49;\n        } else if (_tokenId == 3) {\n            buffer[0] = \"Lorem ipsum dolor sit amet, mi e\";\n            buffer[1] = \"st accumsan dapibus augue lorem,\";\n            buffer[2] = \" tristique vestibulum id, libero\";\n            buffer[3] = \" suscipit varius sapien aliquam.\";\n            count = 128;\n        }\n    }\n}\n\n// File: contracts/libs/PaintingOwnership.sol\n\ncontract PaintingOwnership is BitpaintingBase, ERC721 {\n\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n    string public constant name = \"BitPaintings\";\n    string public constant symbol = \"BP\";\n\n    ERC721Metadata public erc721Metadata;\n\n    bytes4 constant InterfaceSignature_ERC165 =\n        bytes4(keccak256('supportsInterface(bytes4)'));\n\n    bytes4 constant InterfaceSignature_ERC721 =\n        bytes4(keccak256('name()')) ^\n        bytes4(keccak256('symbol()')) ^\n        bytes4(keccak256('totalSupply()')) ^\n        bytes4(keccak256('balanceOf(address)')) ^\n        bytes4(keccak256('ownerOf(uint256)')) ^\n        bytes4(keccak256('approve(address,uint256)')) ^\n        bytes4(keccak256('transfer(address,uint256)')) ^\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n        bytes4(keccak256('tokensOfOwner(address)')) ^\n        bytes4(keccak256('tokenMetadata(uint256,string)'));\n\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n    ///  Returns true for any standardized interfaces implemented by this contract. We implement\n    ///  ERC-165 (obviously!) and ERC-721.\n    function supportsInterface(bytes4 _interfaceID) external constant returns (bool)\n    {\n        // DEBUG ONLY\n        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\n\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n    }\n\n    /// @dev Set the address of the sibling contract that tracks metadata.\n    ///  CEO only.\n    function setMetadataAddress(address _contractAddress) public onlyOwner {\n        erc721Metadata = ERC721Metadata(_contractAddress);\n    }\n\n    function _owns(address _claimant, uint256 _tokenId) internal constant returns (bool) {\n        return bitpaintingStorage.getPaintingOwner(_tokenId) == _claimant;\n    }\n\n    function balanceOf(address _owner) public constant returns (uint256 count) {\n        return bitpaintingStorage.getOwnershipTokenCount(_owner);\n    }\n\n    function _approve(uint256 _tokenId, address _approved) internal {\n        bitpaintingStorage.approve(_tokenId, _approved);\n    }\n\n    function _approvedFor(address _claimant, uint256 _tokenId)\n        internal constant returns (bool) {\n        return bitpaintingStorage.isApprovedFor(_tokenId, _claimant);\n    }\n\n    function transfer(\n        address _to,\n        uint256 _tokenId\n    )\n        external\n        whenNotPaused\n    {\n        require(_to != address(0));\n        require(_to != address(this));\n        require(_owns(msg.sender, _tokenId));\n\n        _transfer(msg.sender, _to, _tokenId);\n    }\n\n    function approve(\n      address _to,\n      uint256 _tokenId\n    )\n      external\n      whenNotPaused\n    {\n      require(_owns(msg.sender, _tokenId));\n      _approve(_tokenId, _to);\n\n      Approval(msg.sender, _to, _tokenId);\n    }\n\n    function transferFrom(\n      address _from,\n      address _to,\n      uint256 _tokenId\n    )\n        external whenNotPaused {\n        _transferFrom(_from, _to, _tokenId);\n    }\n\n    function _transferFrom(\n      address _from,\n      address _to,\n      uint256 _tokenId\n    )\n        internal\n        whenNotPaused\n    {\n        require(_to != address(0));\n        require(_to != address(this));\n        require(_approvedFor(msg.sender, _tokenId));\n        require(_owns(_from, _tokenId));\n\n        _transfer(_from, _to, _tokenId);\n    }\n\n    function totalSupply() public constant returns (uint) {\n      return bitpaintingStorage.paintingsCount();\n    }\n\n    function ownerOf(uint256 _tokenId)\n        external constant returns (address) {\n        return _ownerOf(_tokenId);\n    }\n\n    function _ownerOf(uint256 _tokenId)\n        internal constant returns (address) {\n        return bitpaintingStorage.getPaintingOwner(_tokenId);\n    }\n\n    function tokensOfOwner(address _owner)\n        external constant returns(uint256[]) {\n        uint256 tokenCount = balanceOf(_owner);\n\n        if (tokenCount == 0) {\n          return new uint256[](0);\n        }\n\n        uint256[] memory result = new uint256[](tokenCount);\n        uint256 totalCats = totalSupply();\n        uint256 resultIndex = 0;\n\n        uint256 paintingId;\n\n        for (paintingId = 1; paintingId <= totalCats; paintingId++) {\n            if (bitpaintingStorage.getPaintingOwner(paintingId) == _owner) {\n                result[resultIndex] = paintingId;\n                resultIndex++;\n            }\n        }\n\n        return result;\n    }\n\n    /// @dev Adapted from memcpy() by @arachnid (Nick Johnson <[email protected]>)\n    ///  This method is licenced under the Apache License.\n    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\n    function _memcpy(uint _dest, uint _src, uint _len) private constant {\n      // Copy word-length chunks while possible\n      for(; _len >= 32; _len -= 32) {\n          assembly {\n              mstore(_dest, mload(_src))\n          }\n          _dest += 32;\n          _src += 32;\n      }\n\n      // Copy remaining bytes\n      uint256 mask = 256 ** (32 - _len) - 1;\n      assembly {\n          let srcpart := and(mload(_src), not(mask))\n          let destpart := and(mload(_dest), mask)\n          mstore(_dest, or(destpart, srcpart))\n      }\n    }\n\n    /// @dev Adapted from toString(slice) by @arachnid (Nick Johnson <[email protected]>)\n    ///  This method is licenced under the Apache License.\n    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\n    function _toString(bytes32[4] _rawBytes, uint256 _stringLength) private constant returns (string) {\n      var outputString = new string(_stringLength);\n      uint256 outputPtr;\n      uint256 bytesPtr;\n\n      assembly {\n          outputPtr := add(outputString, 32)\n          bytesPtr := _rawBytes\n      }\n\n      _memcpy(outputPtr, bytesPtr, _stringLength);\n\n      return outputString;\n    }\n\n    /// @notice Returns a URI pointing to a metadata package for this token conforming to\n    ///  ERC-721 (https://github.com/ethereum/EIPs/issues/721)\n    /// @param _tokenId The ID number of the Kitty whose metadata should be returned.\n    function tokenMetadata(uint256 _tokenId, string _preferredTransport) external constant returns (string infoUrl) {\n      require(erc721Metadata != address(0));\n      bytes32[4] memory buffer;\n      uint256 count;\n      (buffer, count) = erc721Metadata.getMetadata(_tokenId, _preferredTransport);\n\n      return _toString(buffer, count);\n    }\n\n    function withdraw() external onlyOwner {\n        owner.transfer(this.balance);\n    }\n}\n\n// File: contracts/BitpaintingAuctions.sol\n\ncontract BitpaintingAuctions is PaintingOwnership, IAuctions {\n\n    event AuctionCreated(\n        uint tokenId,\n        address seller,\n        uint startingPrice,\n        uint endingPrice,\n        uint duration);\n    event AuctionCancelled(uint tokenId, address seller);\n    event AuctionSuccessful(uint tokenId, uint totalPrice, address winner);\n\n    function currentPrice(uint _tokenId)\n        public\n        constant\n        returns (uint)\n    {\n        require(bitpaintingStorage.isOnAuction(_tokenId));\n        uint secondsPassed = 0;\n        address seller;\n        uint startingPrice;\n        uint endingPrice;\n        uint duration;\n        uint startedAt;\n        (seller, startingPrice, endingPrice, duration, startedAt)\n            = bitpaintingStorage.getAuction(_tokenId);\n\n        // move that as class/contract member\n        uint weis_in_gwei = 1000000000;\n        if (now < startedAt) {\n            return (startingPrice / weis_in_gwei);\n        }\n\n        if (now > startedAt) {\n            secondsPassed = now - startedAt;\n        }\n\n        return _computeCurrentPrice(\n            startingPrice,\n            endingPrice,\n            duration,\n            secondsPassed\n        );\n    }\n\n    /// returns the price in gwei instead of wei\n    function _computeCurrentPrice(\n        uint _startingPrice,\n        uint _endingPrice,\n        uint _duration,\n        uint _secondsPassed\n    )\n        internal\n        constant\n        returns (uint)\n    {\n        uint weis_in_gwei = 1000000000;\n        if (_secondsPassed >= _duration) {\n            return _endingPrice / weis_in_gwei;\n        }\n\n        int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\n        int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\n        int256 _currentPrice = int256(_startingPrice) + currentPriceChange;\n\n        return uint(_currentPrice) / weis_in_gwei;\n    }\n\n    function _bid(uint _tokenId, uint _amount) private {\n        require(bitpaintingStorage.isOnAuction(_tokenId));\n        require(bitpaintingStorage.canBeBidden(_tokenId));\n\n        uint weis_in_gwei = 1000000000;\n        address seller = bitpaintingStorage.getAuctionSeller(_tokenId);\n        uint price = currentPrice(_tokenId) * weis_in_gwei;\n        require(_amount >= price);\n\n        if (bitpaintingStorage.isSecondary(_tokenId)) {\n            uint8 cut = bitpaintingStorage.secondarySaleCut();\n            uint forSeller = ((100 - cut) * _amount) / 100;\n            seller.transfer(forSeller);\n        }\n        bitpaintingStorage.removeAuction(_tokenId);\n        bitpaintingStorage.increaseOwnershipTokenCount(msg.sender);\n        bitpaintingStorage.decreaseOwnershipTokenCount(seller);\n        bitpaintingStorage.sealForChanges(_tokenId);\n\n        AuctionSuccessful(_tokenId, price, msg.sender);\n    }\n\n    function _escrow(address _owner, uint _tokenId) internal {\n        _transferFrom(_owner, this, _tokenId);\n    }\n\n    /// @dev Cancels an auction unconditionally.\n    function _cancelAuction(uint _tokenId) internal {\n        bitpaintingStorage.removeAuction(_tokenId);\n        AuctionCancelled(_tokenId, msg.sender);\n    }\n\n    /// @dev Creates and begins a new auction.\n    /// @param _tokenId - ID of token to auction, sender must be owner.\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\n    /// @param _duration - Length of time to move between starting\n    ///  price and ending price (in seconds).\n    /// @param _seller - Seller, if not the message sender\n    function _createAuction(\n        uint _tokenId,\n        uint _startingPrice,\n        uint _endingPrice,\n        uint _duration,\n        address _seller\n    )\n        public\n        whenNotPaused\n    {\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint(uint128(_startingPrice)));\n        require(_endingPrice == uint(uint128(_endingPrice)));\n        require(_duration == uint(uint64(_duration)));\n\n        bitpaintingStorage.addAuction(_tokenId, _startingPrice, _endingPrice, _duration, _seller);\n\n        AuctionCreated(\n            uint(_tokenId),\n            _seller,\n            uint(_startingPrice),\n            uint(_endingPrice),\n            uint(_duration)\n        );\n    }\n\n    function _createReleaseAuction(\n        uint _tokenId,\n        uint _startingPrice,\n        uint _endingPrice,\n        uint _startedAt,\n        uint _duration\n    ) internal {\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint(uint128(_startingPrice)));\n        require(_endingPrice == uint(uint128(_endingPrice)));\n        require(_duration == uint(uint64(_duration)));\n\n        bitpaintingStorage.addReleaseAuction(\n            _tokenId,\n            _startingPrice,\n            _endingPrice,\n            _startedAt,\n            _duration);\n    }\n\n    /// @dev Put a painting up for auction.\n    ///  Does some ownership trickery to create auctions in one tx.\n    function createReleaseAuction(\n        uint _tokenId,\n        uint _startingPrice,\n        uint _endingPrice,\n        uint _startedAt,\n        uint _duration\n    ) public whenNotPaused canReleaseArtwork {\n        require(_startingPrice > _endingPrice);\n        _createReleaseAuction(\n            _tokenId,\n            _startingPrice,\n            _endingPrice,\n            _startedAt,\n            _duration\n        );\n    }\n\n    /// @dev Put a painting up for auction.\n    ///  Does some ownership trickery to create auctions in one tx.\n    function createAuction(\n        uint _tokenId,\n        uint _startingPrice,\n        uint _endingPrice,\n        uint _duration\n    )\n        public\n        whenNotPaused\n    {\n        require(bitpaintingStorage.getPaintingOwner(_tokenId) == msg.sender);\n        require(!bitpaintingStorage.hasEditionInProgress(_tokenId));\n        require(bitpaintingStorage.isReady(_tokenId));\n        require(!bitpaintingStorage.isOnAuction(_tokenId));\n        require(_startingPrice > _endingPrice);\n\n        _approve(_tokenId, msg.sender);\n        _createAuction(\n            _tokenId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }\n\n    function cancelAuction(uint _tokenId) external whenNotPaused {\n        require(bitpaintingStorage.isOnAuction(_tokenId));\n        address seller = bitpaintingStorage.getAuctionSeller(_tokenId);\n        require(msg.sender == seller);\n        _cancelAuction(_tokenId);\n    }\n\n    function cancelAuctionWhenPaused(uint _tokenId)\n        external whenPaused onlyOwner {\n        require(bitpaintingStorage.isOnAuction(_tokenId));\n        address seller = bitpaintingStorage.getAuctionSeller(_tokenId);\n        require(msg.sender == seller);\n        _cancelAuction(_tokenId);\n    }\n\n    function bid(uint _tokenId, address _owner) external payable whenNotPaused {\n        address seller = bitpaintingStorage.getAuctionSeller(_tokenId);\n        require(seller == _owner);\n        _bid(_tokenId, msg.value);\n        _transfer(seller, msg.sender, _tokenId);\n    }\n\n    function market() public constant returns (\n        uint[] tokens,\n        address[] sellers,\n        uint8[] generations,\n        uint8[] speeds,\n        uint[] prices\n        ) {\n        uint length = bitpaintingStorage.totalPaintingsCount();\n        uint count = bitpaintingStorage.getAuctionsCount();\n        tokens = new uint[](count);\n        generations = new uint8[](count);\n        sellers = new address[](count);\n        speeds = new uint8[](count);\n        prices = new uint[](count);\n        uint pointer = 0;\n\n        for(uint index = 0; index < length; index++) {\n            uint tokenId = bitpaintingStorage.getPaintingIdAtIndex(index);\n\n            if (bitpaintingStorage.isCanceled(tokenId)) {\n                continue;\n            }\n\n            if (!bitpaintingStorage.isOnAuction(tokenId)) {\n                continue;\n            }\n\n            tokens[pointer] = tokenId;\n            generations[pointer] = bitpaintingStorage.getPaintingGeneration(tokenId);\n            sellers[pointer] = _ownerOf(tokenId);\n            speeds[pointer] = bitpaintingStorage.getPaintingSpeed(tokenId);\n            prices[pointer] = currentPrice(tokenId);\n            pointer++;\n        }\n    }\n\n    function auctionsOf(address _of) public constant returns (\n            uint[] tokens,\n            uint[] prices\n        ) {\n\n        uint tokenCount = totalSupply();\n        uint length = balanceOf(_of);\n        uint pointer;\n\n        tokens = new uint[](length);\n        prices = new uint[](length);\n\n        for(uint index = 0; index < tokenCount; index++) {\n            uint tokenId = bitpaintingStorage.getPaintingIdAtIndex(index);\n\n            if (_ownerOf(tokenId) != _of) {\n                continue;\n            }\n\n            if (!bitpaintingStorage.isReady(tokenId)) {\n                continue;\n            }\n\n            if (!bitpaintingStorage.isOnAuction(tokenId)) {\n                continue;\n            }\n\n            tokens[pointer] = tokenId;\n            prices[pointer] = currentPrice(tokenId);\n            pointer++;\n        }\n    }\n\n    function signature() external constant returns (uint _signature) {\n        return uint(keccak256(\"auctions\"));\n    }\n}",
  "bytecode": "60606040526000805460a060020a60ff02191690555b60008054600160a060020a03191633600160a060020a03161790555b5b613205806100416000396000f300606060405236156101905763ffffffff60e060020a60003504166301ffc9a781146101955780630560ff44146101e157806306fdde031461027b578063095ea7b314610306578063179047431461032a57806318160ddd1461035957806323b872dd1461037e578063290b3cb7146103a85780632f54bf6e146103db578063362f29c91461040e5780633ccfd60b1461042f5780633f4ba83a14610444578063431f21da1461045957806351ff48471461047a57806357fc990f1461049f5780635c975abb146104cc5780636352211e146104f357806370a08231146105255780637a3c4c171461055657806380f556051461057e5780638456cb59146106fe5780638462151c14610713578063878eb368146107865780638da5cb5b1461079e57806395d89b41146107cd57806396b5a755146108585780639f04996d14610870578063a9059cbb14610889578063aad9973f146108ad578063bc4006f5146108e0578063c824a2221461090f578063e17b25af146109c9578063f2653966146109ea578063f2fde38b14610a0e575b600080fd5b34156101a057600080fd5b6101cd7fffffffff0000000000000000000000000000000000000000000000000000000060043516610a2f565b604051901515815260200160405180910390f35b34156101ec57600080fd5b610203600480359060248035908101910135610cb6565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102405780820151818401525b602001610227565b50505050905090810190601f16801561026d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561028657600080fd5b610203610d95565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102405780820151818401525b602001610227565b50505050905090810190601f16801561026d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561031157600080fd5b610328600160a060020a0360043516602435610dcc565b005b341561033557600080fd5b61033d610e58565b604051600160a060020a03909116815260200160405180910390f35b341561036457600080fd5b61036c610e67565b60405190815260200160405180910390f35b341561038957600080fd5b610328600160a060020a0360043581169060243516604435610ed1565b005b34156103b357600080fd5b6101cd600160a060020a0360043516610efa565b604051901515815260200160405180910390f35b34156103e657600080fd5b6101cd600160a060020a0360043516610ff3565b604051901515815260200160405180910390f35b341561041957600080fd5b610328600160a060020a036004351661100a565b005b341561043a57600080fd5b610328611067565b005b341561044f57600080fd5b6103286110bf565b005b341561046457600080fd5b61032860043560243560443560643561117f565b005b341561048557600080fd5b61036c6113a9565b60405190815260200160405180910390f35b34156104aa57600080fd5b610328600435602435604435606435600160a060020a03608435166113e3565b005b34156104d757600080fd5b6101cd611536565b604051901515815260200160405180910390f35b34156104fe57600080fd5b61033d600435611546565b604051600160a060020a03909116815260200160405180910390f35b341561053057600080fd5b61036c600160a060020a0360043516611559565b60405190815260200160405180910390f35b341561056157600080fd5b61036c6004356115d6565b60405190815260200160405180910390f35b341561058957600080fd5b61059161173d565b60405180806020018060200180602001806020018060200186810386528b818151815260200191508051906020019060200280838360005b838110156105e25780820151818401525b6020016105c9565b5050505090500186810385528a818151815260200191508051906020019060200280838360005b838110156106225780820151818401525b602001610609565b50505050905001868103845289818151815260200191508051906020019060200280838360005b838110156106625780820151818401525b602001610649565b50505050905001868103835288818151815260200191508051906020019060200280838360005b838110156106a25780820151818401525b602001610689565b50505050905001868103825287818151815260200191508051906020019060200280838360005b838110156106e25780820151818401525b6020016106c9565b505050509050019a505050505050505050505060405180910390f35b341561070957600080fd5b610328611bda565b005b341561071e57600080fd5b610732600160a060020a0360043516611c99565b60405160208082528190810183818151815260200191508051906020019060200280838360005b838110156107725780820151818401525b602001610759565b505050509050019250505060405180910390f35b341561079157600080fd5b610328600435611dda565b005b34156107a957600080fd5b61033d611f1b565b604051600160a060020a03909116815260200160405180910390f35b34156107d857600080fd5b610203611f2a565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102405780820151818401525b602001610227565b50505050905090810190601f16801561026d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561086357600080fd5b610328600435611f61565b005b610328600435600160a060020a0360243516612085565b005b341561089457600080fd5b610328600160a060020a036004351660243561213e565b005b34156108b857600080fd5b6101cd600160a060020a03600435166121b1565b604051901515815260200160405180910390f35b34156108eb57600080fd5b61033d612325565b604051600160a060020a03909116815260200160405180910390f35b341561091a57600080fd5b61092e600160a060020a0360043516612334565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156109735780820151818401525b60200161095a565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156109b35780820151818401525b60200161099a565b5050505090500194505050505060405180910390f35b34156109d457600080fd5b610328600160a060020a0360043516612586565b005b34156109f557600080fd5b6103286004356024356044356064356084356125ce565b005b3415610a1957600080fd5b610328600160a060020a036004351661261c565b005b60006040517f737570706f727473496e7465726661636528627974657334290000000000000081526019016040518091039020600160e060020a03191682600160e060020a0319161480610cae57506040517f746f6b656e4d657461646174612875696e743235362c737472696e67290000008152601d0160405180910390206040517f746f6b656e734f664f776e657228616464726573732900000000000000000000815260160160405180910390206040517f7472616e7366657246726f6d28616464726573732c616464726573732c75696e81527f7432353629000000000000000000000000000000000000000000000000000000602082015260250160405180910390206040517f7472616e7366657228616464726573732c75696e743235362900000000000000815260190160405180910390206040517f617070726f766528616464726573732c75696e74323536290000000000000000815260180160405180910390206040517f6f776e65724f662875696e743235362900000000000000000000000000000000815260100160405180910390206040517f62616c616e63654f662861646472657373290000000000000000000000000000815260120160405180910390206040517f746f74616c537570706c792829000000000000000000000000000000000000008152600d0160405180910390206040517f73796d626f6c2829000000000000000000000000000000000000000000000000815260080160405180910390206040517f6e616d652829000000000000000000000000000000000000000000000000000081526006016040518091039020181818181818181818600160e060020a03191682600160e060020a031916145b90505b919050565b610cbe613168565b610cc661317a565b600254600090600160a060020a03161515610ce057600080fd5b600254600160a060020a031663cb4799f2878787600060405160a0015260405160e060020a63ffffffff861602815260048101848152604060248301908152604483018490529091606401848480828437820191505094505050505060a060405180830381600087803b1515610d5557600080fd5b6102c65a03f11515610d6657600080fd5b50505060405180608001805160209091016040529092509050610d898282612679565b92505b50509392505050565b60408051908101604052600c81527f4269745061696e74696e67730000000000000000000000000000000000000000602082015281565b60005460a060020a900460ff1615610de357600080fd5b610ded33826126ce565b1515610df857600080fd5b610e028183612753565b7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925338383604051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a15b5b5050565b600154600160a060020a031681565b600154600090600160a060020a031663197b945482604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610eb157600080fd5b6102c65a03f11515610ec257600080fd5b50505060405180519150505b90565b60005460a060020a900460ff1615610ee857600080fd5b610ef38383836127c3565b5b5b505050565b600154600090600160a060020a0316632f54bf6e83836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610f5557600080fd5b6102c65a03f11515610f6657600080fd5b5050506040518051905080610cae5750600154600160a060020a03166324d7806c8360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610fcf57600080fd5b6102c65a03f11515610fe057600080fd5b505050604051805190505b90505b919050565b600054600160a060020a038281169116145b919050565b60005433600160a060020a0390811691161461102557600080fd5b600160a060020a038116151561103a57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b60005433600160a060020a0390811691161461108257600080fd5b600054600160a060020a039081169030163180156108fc0290604051600060405180830381858888f1935050505015156110bb57600080fd5b5b5b565b60005433600160a060020a039081169116148061114f5750600154600160a060020a031663ca4b208b6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561111f57600080fd5b6102c65a03f1151561113057600080fd5b50505060405180519050600160a060020a031633600160a060020a0316145b151561115a57600080fd5b60005460a060020a900460ff16151561117257600080fd5b6110bb61284c565b5b5b5b565b60005460a060020a900460ff161561119657600080fd5b600154600160a060020a033381169116630d66343c8660006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156111eb57600080fd5b6102c65a03f115156111fc57600080fd5b50505060405180519050600160a060020a031614151561121b57600080fd5b600154600160a060020a0316635f4eab658560006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561126c57600080fd5b6102c65a03f1151561127d57600080fd5b505050604051805115905061129157600080fd5b600154600160a060020a03166350df8f718560006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156112e257600080fd5b6102c65a03f115156112f357600080fd5b50505060405180519050151561130857600080fd5b600154600160a060020a03166337e246ad8560006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561135957600080fd5b6102c65a03f1151561136a57600080fd5b505050604051805115905061137e57600080fd5b81831161138a57600080fd5b6113948433612753565b6113a184848484336113e3565b5b5b50505050565b60006040517f61756374696f6e73000000000000000000000000000000000000000000000000815260080160405190819003902090505b90565b60005460a060020a900460ff16156113fa57600080fd5b6fffffffffffffffffffffffffffffffff8416841461141857600080fd5b6fffffffffffffffffffffffffffffffff8316831461143657600080fd5b67ffffffffffffffff8216821461144c57600080fd5b600154600160a060020a031663c9a6b2a8868686868660405160e060020a63ffffffff88160281526004810195909552602485019390935260448401919091526064830152600160a060020a0316608482015260a401600060405180830381600087803b15156114bb57600080fd5b6102c65a03f115156114cc57600080fd5b5050507f05f9bf100dd0ca9f37f08e0526690286d357ed7d6c5a4ac29730440b6e2dfd628582868686604051948552600160a060020a0390931660208501526040808501929092526060840152608083019190915260a0909101905180910390a15b5b5050505050565b60005460a060020a900460ff1681565b6000610cae826128b2565b90505b919050565b600154600090600160a060020a031663b4f6eae483836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610fcf57600080fd5b6102c65a03f11515610fe057600080fd5b50505060405180519150505b919050565b6001546000908190819081908190819081908190600160a060020a03166337e246ad8a836040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561163757600080fd5b6102c65a03f1151561164857600080fd5b50505060405180519050151561165d57600080fd5b60015460009750600160a060020a03166378bd79358a8960405160a0015260405160e060020a63ffffffff8416028152600481019190915260240160a060405180830381600087803b15156116b157600080fd5b6102c65a03f115156116c257600080fd5b5050506040518051906020018051906020018051906020018051906020018051949a509298509096509450909250633b9aca00915050428290101561171457808581151561170c57fe5b049750611731565b814211156117225781420396505b61172e8585858a612927565b97505b50505050505050919050565b611745613168565b61174d613168565b611755613168565b61175d613168565b611765613168565b6001546000908190819081908190600160a060020a0316632efd08df82604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156117b757600080fd5b6102c65a03f115156117c857600080fd5b5050506040518051600154909650600160a060020a0316905063e45c18796000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561181d57600080fd5b6102c65a03f1151561182e57600080fd5b505050604051805190509350836040518059106118485750595b908082528060200260200182016040525b5099508360405180591061186a5750595b908082528060200260200182016040525b5097508360405180591061188c5750595b908082528060200260200182016040525b509850836040518059106118ae5750595b908082528060200260200182016040525b509650836040518059106118d05750595b908082528060200260200182016040525b50955060009250600091505b84821015611bcd57600154600160a060020a031663a3e7061d8360006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561194657600080fd5b6102c65a03f1151561195757600080fd5b5050506040518051600154909250600160a060020a031690506339e3af9b8260006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156119b557600080fd5b6102c65a03f115156119c657600080fd5b50505060405180519050156119da57611bc2565b600154600160a060020a03166337e246ad8260006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515611a2b57600080fd5b6102c65a03f11515611a3c57600080fd5b505050604051805190501515611a5157611bc2565b808a8481518110611a5e57fe5b60209081029091010152600154600160a060020a0316630af9d89c8260006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515611ab957600080fd5b6102c65a03f11515611aca57600080fd5b50505060405180519050888481518110611ae057fe5b60ff909216602092830290910190910152611afa816128b2565b898481518110611b0657fe5b600160a060020a039283166020918202909201015260015416639ed573608260006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515611b6457600080fd5b6102c65a03f11515611b7557600080fd5b50505060405180519050878481518110611b8b57fe5b60ff909216602092830290910190910152611ba5816115d6565b868481518110611bb157fe5b602090810290910101526001909201915b6001909101906118ed565b5b50505050509091929394565b60005433600160a060020a0390811691161480611c6a5750600154600160a060020a031663ca4b208b6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611c3a57600080fd5b6102c65a03f11515611c4b57600080fd5b50505060405180519050600160a060020a031633600160a060020a0316145b1515611c7557600080fd5b60005460a060020a900460ff1615611c8c57600080fd5b6110bb61297f565b5b5b5b565b611ca1613168565b6000611cab613168565b6000806000611cb987611559565b9450841515611cea576000604051805910611cd15750595b908082528060200260200182016040525b509550611dd0565b84604051805910611cf85750595b908082528060200260200182016040525b509350611d14610e67565b925060009150600190505b828111611dcc57600154600160a060020a038089169116630d66343c8360006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515611d7b57600080fd5b6102c65a03f11515611d8c57600080fd5b50505060405180519050600160a060020a03161415611dc35780848381518110611db257fe5b602090810290910101526001909101905b5b600101611d1f565b8395505b5050505050919050565b6000805460a060020a900460ff161515611df357600080fd5b60005433600160a060020a03908116911614611e0e57600080fd5b600154600160a060020a03166337e246ad8360006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515611e5f57600080fd5b6102c65a03f11515611e7057600080fd5b505050604051805190501515611e8557600080fd5b600154600160a060020a031663c50c44cf8360006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515611ed657600080fd5b6102c65a03f11515611ee757600080fd5b505050604051805191505033600160a060020a0390811690821614611f0b57600080fd5b610e53826129ea565b5b5b5b5050565b600054600160a060020a031681565b60408051908101604052600281527f4250000000000000000000000000000000000000000000000000000000000000602082015281565b6000805460a060020a900460ff1615611e0e57600080fd5b600154600160a060020a03166337e246ad8360006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515611e5f57600080fd5b6102c65a03f11515611e7057600080fd5b505050604051805190501515611e8557600080fd5b600154600160a060020a031663c50c44cf8360006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515611ed657600080fd5b6102c65a03f11515611ee757600080fd5b505050604051805191505033600160a060020a0390811690821614611f0b57600080fd5b610e53826129ea565b5b5b5050565b6000805460a060020a900460ff161561209d57600080fd5b600154600160a060020a031663c50c44cf8460006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156120ee57600080fd5b6102c65a03f115156120ff57600080fd5b5050506040518051915050600160a060020a038082169083161461212257600080fd5b61212c8334612a8d565b610ef3813385612f07565b5b5b505050565b60005460a060020a900460ff161561215557600080fd5b600160a060020a038216151561216a57600080fd5b30600160a060020a031682600160a060020a03161415151561218b57600080fd5b61219533826126ce565b15156121a057600080fd5b610e53338383612f07565b5b5b5050565b600154600090600160a060020a0316632f54bf6e83836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561220c57600080fd5b6102c65a03f1151561221d57600080fd5b50505060405180519050806122a25750600154600160a060020a03166324d7806c8360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561228657600080fd5b6102c65a03f1151561229757600080fd5b505050604051805190505b80610cae5750600154600160a060020a031663babcc5398360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610fcf57600080fd5b6102c65a03f11515610fe057600080fd5b505050604051805190505b90505b919050565b600254600160a060020a031681565b61233c613168565b612344613168565b6000806000806000612354610e67565b945061235f88611559565b93508360405180591061236f5750595b908082528060200260200182016040525b509650836040518059106123915750595b908082528060200260200182016040525b509550600091505b8482101561257b57600154600160a060020a031663a3e7061d8360006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561240357600080fd5b6102c65a03f1151561241457600080fd5b5050506040518051915050600160a060020a038816612432826128b2565b600160a060020a03161461244557612570565b600154600160a060020a03166350df8f718260006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561249657600080fd5b6102c65a03f115156124a757600080fd5b5050506040518051905015156124bc57612570565b600154600160a060020a03166337e246ad8260006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561250d57600080fd5b6102c65a03f1151561251e57600080fd5b50505060405180519050151561253357612570565b8087848151811061254057fe5b60209081029091010152612553816115d6565b86848151811061255f57fe5b602090810290910101526001909201915b6001909101906123aa565b5b5050505050915091565b60005433600160a060020a039081169116146125a157600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b60005460a060020a900460ff16156125e557600080fd5b6125ee336121b1565b15156125f957600080fd5b82841161260557600080fd5b61152e8585858585612fc8565b5b5b5b5050505050565b60005433600160a060020a0390811691161461263757600080fd5b600160a060020a038116151561264c57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b612681613168565b612689613168565b6000808460405180591061269a5750595b908082528060200260200182016040525b50925050602082019050846126c182828761309c565b8293505b50505092915050565b600154600090600160a060020a038085169116630d66343c84846040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561272557600080fd5b6102c65a03f1151561273657600080fd5b50505060405180519050600160a060020a03161490505b92915050565b600154600160a060020a031663febe4909838360405160e060020a63ffffffff85160281526004810192909252600160a060020a03166024820152604401600060405180830381600087803b15156127aa57600080fd5b6102c65a03f1151561152e57600080fd5b5050505b5050565b60005460a060020a900460ff16156127da57600080fd5b600160a060020a03821615156127ef57600080fd5b30600160a060020a031682600160a060020a03161415151561281057600080fd5b61281a33826130e3565b151561282557600080fd5b61282f83826126ce565b151561283a57600080fd5b610ef3838383612f07565b5b5b505050565b60005460a060020a900460ff16151561286457600080fd5b6000805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a15b5b565b600154600090600160a060020a0316630d66343c83836040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515610fcf57600080fd5b6102c65a03f11515610fe057600080fd5b50505060405180519150505b919050565b6000633b9aca0081808086861061294b57838881151561294357fe5b049450612973565b88880392508686840281151561295d57fe5b05915050878101838181151561296f57fe5b0494505b50505050949350505050565b60005460a060020a900460ff161561299657600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a15b5b565b600154600160a060020a0316632dd7030b8260405160e060020a63ffffffff84160281526004810191909152602401600060405180830381600087803b1515612a3257600080fd5b6102c65a03f11515612a4357600080fd5b5050507f10ac9f0bb365b5d22d7bec500408692f23fdf83eadfec71615ef88b4c1134f0e8133604051918252600160a060020a031660208201526040908101905180910390a15b50565b6001546000908190819081908190600160a060020a03166337e246ad88836040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515612ae857600080fd5b6102c65a03f11515612af957600080fd5b505050604051805190501515612b0e57600080fd5b600154600160a060020a031663eabc8b8e8860006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515612b5f57600080fd5b6102c65a03f11515612b7057600080fd5b505050604051805190501515612b8557600080fd5b600154633b9aca009550600160a060020a031663c50c44cf8860006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515612bdd57600080fd5b6102c65a03f11515612bee57600080fd5b50505060405180519050935084612c04886115d6565b02925082861015612c1457600080fd5b600154600160a060020a0316638ff6e9718860006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515612c6557600080fd5b6102c65a03f11515612c7657600080fd5b5050506040518051905015612d2957600154600160a060020a031663590731b76000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515612ccd57600080fd5b6102c65a03f11515612cde57600080fd5b505050604051805192506064905060ff8382031687025b049050600160a060020a03841681156108fc0282604051600060405180830381858888f193505050501515612d2957600080fd5b5b600154600160a060020a0316632dd7030b8860405160e060020a63ffffffff84160281526004810191909152602401600060405180830381600087803b1515612d7257600080fd5b6102c65a03f11515612d8357600080fd5b5050600154600160a060020a03169050636bfaa9033360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1515612dd757600080fd5b6102c65a03f11515612de857600080fd5b5050600154600160a060020a03169050631be6ce578560405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1515612e3c57600080fd5b6102c65a03f11515612e4d57600080fd5b5050600154600160a060020a03169050631e801c8c8860405160e060020a63ffffffff84160281526004810191909152602401600060405180830381600087803b1515612e9957600080fd5b6102c65a03f11515612eaa57600080fd5b5050507f4fcc30d90a842164dd58501ab874a101a3749c3d4747139cefe7c876f4ccebd28784336040519283526020830191909152600160a060020a03166040808301919091526060909101905180910390a15b50505050505050565b600154600160a060020a031663687c4fa7828460405160e060020a63ffffffff85160281526004810192909252600160a060020a03166024820152604401600060405180830381600087803b1515612f5e57600080fd5b6102c65a03f11515612f6f57600080fd5b5050507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef838383604051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a15b505050565b6fffffffffffffffffffffffffffffffff84168414612fe657600080fd5b6fffffffffffffffffffffffffffffffff8316831461300457600080fd5b67ffffffffffffffff8116811461301a57600080fd5b600154600160a060020a031663902a83cd868686868660405160e060020a63ffffffff88160281526004810195909552602485019390935260448401919091526064830152608482015260a401600060405180830381600087803b151561308057600080fd5b6102c65a03f1151561309157600080fd5b5050505b5050505050565b60005b602082106130c357825184526020840193506020830192505b60208203915061309f565b6001826020036101000a0390508019835116818551161784525b50505050565b600154600090600160a060020a031663b5b12e758385846040516020015260405160e060020a63ffffffff85160281526004810192909252600160a060020a03166024820152604401602060405180830381600087803b151561314557600080fd5b6102c65a03f1151561315657600080fd5b50505060405180519150505b92915050565b60206040519081016040526000815290565b60806040519081016040526004815b600081526000199190910190602001816131895790505090565b60206040519081016040526000815290565b60206040519081016040526000815290565b602060405190810160405260008152905600a165627a7a72305820824a11c55ad5b1bf19e88544dbb48543ff2dd8cecf8e395235e9ebe0073caa000029"
}