{
  "address": "0x9af4f26941677c706cfecf6d3379ff01bb85d5ab",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "DomRaiderToken",
  "contractName": "DRTCoin",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-17\n*/\n\npragma solidity ^0.4.15;\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    require(newOwner != address(0));\n    owner = newOwner;\n  }\n\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function minimum( uint a, uint b) internal returns ( uint result) {\n    if ( a <= b ) {\n      result = a;\n    }\n    else {\n      result = b;\n    }\n  }\n\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    require(_to != address(0));\n\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue)\n    returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue)\n    returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract DRTCoin is StandardToken, Ownable {\n    /* Overriding some ERC20 variables */\n    string public constant name = \"DomRaiderToken\";\n    string public constant symbol = \"DRT\";\n    uint256 public constant decimals = 8;\n\n    /* DRT specific variables */\n    // Max amount of tokens minted - Exact value input with stretch goals and before deploying contract\n    uint256 public constant MAX_SUPPLY_OF_TOKEN = 1300000000 * 10 ** decimals;\n\n    // Freeze duration for advisors accounts\n    uint public constant START_ICO_TIMESTAMP = 1507622400;\n    uint public constant DEFROST_PERIOD = 43200; // month in minutes  (1 month = 43200 min)\n    uint public constant DEFROST_MONTHLY_PERCENT_OWNER = 5; // 5% per month is automatically defrosted\n    uint public constant DEFROST_INITIAL_PERCENT_OWNER = 10; // 90% locked\n    uint public constant DEFROST_MONTHLY_PERCENT = 10; // 10% per month is automatically defrosted\n    uint public constant DEFROST_INITIAL_PERCENT = 20; // 80% locked\n\n    // Fields that can be changed by functions\n    address[] icedBalances;\n    mapping (address => uint256) icedBalances_frosted;\n    mapping (address => uint256) icedBalances_defrosted;\n\n    uint256 ownerFrosted;\n    uint256 ownerDefrosted;\n\n    // Variable useful for verifying that the assignedSupply matches that totalSupply\n    uint256 public assignedSupply;\n    //Boolean to allow or not the initial assignment of token (batch)\n    bool public batchAssignStopped = false;\n\n    /**\n     * @dev Constructor that gives msg.sender all of existing tokens.\n     */\n    function DRTCoin() {\n        owner = msg.sender;\n        uint256 amount = 545000000 * 10 ** decimals;\n        uint256 amount2assign = amount * DEFROST_INITIAL_PERCENT_OWNER / 100;\n        balances[owner] = amount2assign;\n        ownerDefrosted = amount2assign;\n        ownerFrosted = amount - amount2assign;\n        totalSupply = MAX_SUPPLY_OF_TOKEN;\n        assignedSupply = amount;\n    }\n\n    /**\n     * @dev Transfer tokens in batches (of addresses)\n     * @param _vaddr address The address which you want to send tokens from\n     * @param _vamounts address The address which you want to transfer to\n     */\n    function batchAssignTokens(address[] _vaddr, uint[] _vamounts, bool[] _vIcedBalance) onlyOwner {\n        require(batchAssignStopped == false);\n        require(_vaddr.length == _vamounts.length);\n        //Looping into input arrays to assign target amount to each given address\n        for (uint index = 0; index < _vaddr.length; index++) {\n            address toAddress = _vaddr[index];\n            uint amount = _vamounts[index] * 10 ** decimals;\n            bool isIced = _vIcedBalance[index];\n            if (balances[toAddress] == 0) {\n                // In case it's filled two times, it only increments once\n                // Assigns the balance\n                assignedSupply += amount;\n                if (isIced == false) {\n                    // Normal account\n                    balances[toAddress] = amount;\n                }\n                else {\n                    // Iced account. The balance is not affected here\n                    icedBalances.push(toAddress);\n                    uint256 amount2assign = amount * DEFROST_INITIAL_PERCENT / 100;\n                    balances[toAddress] = amount2assign;\n                    icedBalances_defrosted[toAddress] = amount2assign;\n                    icedBalances_frosted[toAddress] = amount - amount2assign;\n                }\n            }\n        }\n    }\n\n    function canDefrost() onlyOwner constant returns (bool bCanDefrost){\n        bCanDefrost = now > START_ICO_TIMESTAMP;\n    }\n\n    function getBlockTimestamp() constant returns (uint256){\n        return now;\n    }\n\n\n    /**\n     * @dev Defrost token (for advisors)\n     * Method called by the owner once per defrost period (1 month)\n     */\n    function defrostToken() onlyOwner {\n        require(now > START_ICO_TIMESTAMP);\n        // Looping into the iced accounts\n        for (uint index = 0; index < icedBalances.length; index++) {\n            address currentAddress = icedBalances[index];\n            uint256 amountTotal = icedBalances_frosted[currentAddress] + icedBalances_defrosted[currentAddress];\n            uint256 targetDeFrosted = (SafeMath.minimum(100, DEFROST_INITIAL_PERCENT + elapsedMonthsFromICOStart() * DEFROST_MONTHLY_PERCENT)) * amountTotal / 100;\n            uint256 amountToRelease = targetDeFrosted - icedBalances_defrosted[currentAddress];\n            if (amountToRelease > 0) {\n                icedBalances_frosted[currentAddress] = icedBalances_frosted[currentAddress] - amountToRelease;\n                icedBalances_defrosted[currentAddress] = icedBalances_defrosted[currentAddress] + amountToRelease;\n                balances[currentAddress] = balances[currentAddress] + amountToRelease;\n            }\n        }\n\n    }\n    /**\n     * Defrost for the owner of the contract\n     */\n    function defrostOwner() onlyOwner {\n        if (now < START_ICO_TIMESTAMP) {\n            return;\n        }\n        uint256 amountTotal = ownerFrosted + ownerDefrosted;\n        uint256 targetDeFrosted = (SafeMath.minimum(100, DEFROST_INITIAL_PERCENT_OWNER + elapsedMonthsFromICOStart() * DEFROST_MONTHLY_PERCENT_OWNER)) * amountTotal / 100;\n        uint256 amountToRelease = targetDeFrosted - ownerDefrosted;\n        if (amountToRelease > 0) {\n            ownerFrosted = ownerFrosted - amountToRelease;\n            ownerDefrosted = ownerDefrosted + amountToRelease;\n            balances[owner] = balances[owner] + amountToRelease;\n        }\n    }\n\n    function elapsedMonthsFromICOStart() constant returns (uint elapsed) {\n        elapsed = ((now - START_ICO_TIMESTAMP) / 60) / DEFROST_PERIOD;\n    }\n\n    function stopBatchAssign() onlyOwner {\n        require(batchAssignStopped == false);\n        batchAssignStopped = true;\n    }\n\n    function getAddressBalance(address addr) constant returns (uint256 balance)  {\n        balance = balances[addr];\n    }\n\n    function getAddressAndBalance(address addr) constant returns (address _address, uint256 _amount)  {\n        _address = addr;\n        _amount = balances[addr];\n    }\n\n    function getIcedAddresses() constant returns (address[] vaddr)  {\n        vaddr = icedBalances;\n    }\n\n    function getIcedInfos(address addr) constant returns (address icedaddr, uint256 balance, uint256 frosted, uint256 defrosted)  {\n        icedaddr = addr;\n        balance = balances[addr];\n        frosted = icedBalances_frosted[addr];\n        defrosted = icedBalances_defrosted[addr];\n    }\n\n    function getOwnerInfos() constant returns (address owneraddr, uint256 balance, uint256 frosted, uint256 defrosted)  {\n        owneraddr = owner;\n        balance = balances[owneraddr];\n        frosted = ownerFrosted;\n        defrosted = ownerDefrosted;\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"DEFROST_MONTHLY_PERCENT_OWNER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFROST_INITIAL_PERCENT_OWNER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"batchAssignStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopBatchAssign\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAddressBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"elapsedMonthsFromICOStart\",\"outputs\":[{\"name\":\"elapsed\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canDefrost\",\"outputs\":[{\"name\":\"bCanDefrost\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFROST_INITIAL_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_ICO_TIMESTAMP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnerInfos\",\"outputs\":[{\"name\":\"owneraddr\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"frosted\",\"type\":\"uint256\"},{\"name\":\"defrosted\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFROST_MONTHLY_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SUPPLY_OF_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assignedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFROST_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"defrostToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getIcedInfos\",\"outputs\":[{\"name\":\"icedaddr\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"frosted\",\"type\":\"uint256\"},{\"name\":\"defrosted\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAddressAndBalance\",\"outputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIcedAddresses\",\"outputs\":[{\"name\":\"vaddr\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vaddr\",\"type\":\"address[]\"},{\"name\":\"_vamounts\",\"type\":\"uint256[]\"},{\"name\":\"_vIcedBalance\",\"type\":\"bool[]\"}],\"name\":\"batchAssignTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"defrostOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526000600a60006101000a81548160ff021916908315150217905550341561002a57600080fd5b5b6000805b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506008600a0a63207c0a400291506064600a83028115156100ce57fe5b0490508060016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806008819055508082036007819055506008600a0a634d7c6d0002600081905550816009819055505b50505b6125a4806101726000396000f300606060405236156101aa576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630547bf4d146101af57806306fdde03146101d8578063095ea7b3146102675780630dcc59e6146102c15780630f6413b7146102ea57806318160ddd146103175780631986bc551461034057806323b872dd14610355578063313ce567146103ce57806335046722146103f75780635600e8271461044457806363b3c0071461046d578063661884631461049a57806370a08231146104f457806374f79c8e1461054157806375b3a83e1461056a578063796b89b9146105935780638a6281f6146105bc5780638da5cb5b146106265780638e44e74e1461067b57806395d89b41146106a4578063a9059cbb14610733578063ad71a1fd1461078d578063b1efeece146107b6578063c1615c87146107df578063cb89902414610808578063d6a152311461081d578063d73dd623146108ab578063dd62ed3e14610905578063e799059614610971578063f2fde38b146109f1578063f6e898b014610a2a578063fadf4cb214610a95578063fc143f2b14610b6f575b600080fd5b34156101ba57600080fd5b6101c2610b84565b6040518082815260200191505060405180910390f35b34156101e357600080fd5b6101eb610b89565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561022c5780820151818401525b602081019050610210565b50505050905090810190601f1680156102595780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561027257600080fd5b6102a7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bc2565b604051808215151515815260200191505060405180910390f35b34156102cc57600080fd5b6102d4610d4a565b6040518082815260200191505060405180910390f35b34156102f557600080fd5b6102fd610d4f565b604051808215151515815260200191505060405180910390f35b341561032257600080fd5b61032a610d62565b6040518082815260200191505060405180910390f35b341561034b57600080fd5b610353610d68565b005b341561036057600080fd5b6103b4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e05565b604051808215151515815260200191505060405180910390f35b34156103d957600080fd5b6103e16110f2565b6040518082815260200191505060405180910390f35b341561040257600080fd5b61042e600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506110f7565b6040518082815260200191505060405180910390f35b341561044f57600080fd5b610457611141565b6040518082815260200191505060405180910390f35b341561047857600080fd5b610480611169565b604051808215151515815260200191505060405180910390f35b34156104a557600080fd5b6104da600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506111d5565b604051808215151515815260200191505060405180910390f35b34156104ff57600080fd5b61052b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611467565b6040518082815260200191505060405180910390f35b341561054c57600080fd5b6105546114b1565b6040518082815260200191505060405180910390f35b341561057557600080fd5b61057d6114b6565b6040518082815260200191505060405180910390f35b341561059e57600080fd5b6105a66114be565b6040518082815260200191505060405180910390f35b34156105c757600080fd5b6105cf6114c7565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390f35b341561063157600080fd5b610639611545565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561068657600080fd5b61068e61156b565b6040518082815260200191505060405180910390f35b34156106af57600080fd5b6106b7611570565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106f85780820151818401525b6020810190506106dc565b50505050905090810190601f1680156107255780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561073e57600080fd5b610773600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506115a9565b604051808215151515815260200191505060405180910390f35b341561079857600080fd5b6107a0611780565b6040518082815260200191505060405180910390f35b34156107c157600080fd5b6107c961178e565b6040518082815260200191505060405180910390f35b34156107ea57600080fd5b6107f2611794565b6040518082815260200191505060405180910390f35b341561081357600080fd5b61081b61179a565b005b341561082857600080fd5b610854600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611aff565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390f35b34156108b657600080fd5b6108eb600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611bd6565b604051808215151515815260200191505060405180910390f35b341561091057600080fd5b61095b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611dd3565b6040518082815260200191505060405180910390f35b341561097c57600080fd5b6109a8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611e5b565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b34156109fc57600080fd5b610a28600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611ea9565b005b3415610a3557600080fd5b610a3d611f87565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610a815780820151818401525b602081019050610a65565b505050509050019250505060405180910390f35b3415610aa057600080fd5b610b6d600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190505061201c565b005b3415610b7a57600080fd5b610b82612322565b005b600581565b6040805190810160405280600e81526020017f446f6d526169646572546f6b656e00000000000000000000000000000000000081525081565b600080821480610c4e57506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515610c5957600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b600a81565b600a60009054906101000a900460ff1681565b60005481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610dc457600080fd5b60001515600a60009054906101000a900460ff161515141515610de657600080fd5b6001600a60006101000a81548160ff0219169083151502179055505b5b565b600080600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515610e4457600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610f1583600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124bc90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610faa83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124d690919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061100083826124bc90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505b509392505050565b600881565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b600061a8c0603c6359dc7e00420381151561115857fe5b0481151561116257fe5b0490505b90565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111c757600080fd5b6359dc7e00421190505b5b90565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156112e6576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061137a565b6112f983826124bc90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505b5092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b601481565b6359dc7e0081565b60004290505b90565b600080600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169350600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250600754915060085490505b90919293565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a81565b6040805190810160405280600381526020017f445254000000000000000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156115e657600080fd5b61163882600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124bc90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116cd82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124d690919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b92915050565b6008600a0a634d7c6d000281565b60095481565b61a8c081565b6000806000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117fe57600080fd5b6359dc7e004211151561181057600080fd5b600094505b600480549050851015611af65760048581548110151561183157fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169350600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540192506064836118fe6064600a6118f5611141565b026014016124f5565b0281151561190857fe5b049150600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054820390506000811115611ae85780600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b8480600101955050611815565b5b5b5050505050565b600080600080849350600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b9193509193565b6000611c6782600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124d690919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600190505b92915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b600080829150600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b915091565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f0557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611f4157600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b611f8f612513565b600480548060200260200160405190810160405280929190818152602001828054801561201157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611fc7575b505050505090505b90565b6000806000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561208057600080fd5b60001515600a60009054906101000a900460ff1615151415156120a257600080fd5b865188511415156120b257600080fd5b600094505b87518510156123165787858151811015156120ce57fe5b9060200190602002015193506008600a0a87868151811015156120ed57fe5b90602001906020020151029250858581518110151561210857fe5b9060200190602002015191506000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561230857826009600082825401925050819055506000151582151514156121c25782600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612307565b600480548060010182816121d69190612527565b916000526020600020900160005b86909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060646014840281151561223557fe5b04905080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808303600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b5b84806001019550506120b7565b5b5b5050505050505050565b6000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561238357600080fd5b6359dc7e00421015612394576124b6565b6008546007540192506064836123b8606460056123af611141565b02600a016124f5565b028115156123c257fe5b0491506008548203905060008111156124b557806007540360078190555080600854016008819055508060016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540160016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b5b505050565b60008282111515156124ca57fe5b81830390505b92915050565b60008082840190508381101515156124ea57fe5b8091505b5092915050565b600081831115156125085782905061250c565b8190505b5b92915050565b602060405190810160405280600081525090565b81548183558181151161254e5781836000526020600020918201910161254d9190612553565b5b505050565b61257591905b80821115612571576000816000905550600101612559565b5090565b905600a165627a7a72305820149cbc4f34b50bf9938e2d5d60b99a0ac353e18728cddbf2dfec0004d243263d0029"
}