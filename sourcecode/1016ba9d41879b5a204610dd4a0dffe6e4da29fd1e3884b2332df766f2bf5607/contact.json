{
  "address": "0x2967ddff5dd66f807f2af1cb0e89f5ea22ce972c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Escrow",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-05\n*/\n\npragma solidity ^0.4.22;\n\n\ncontract Token  {\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    uint256 public totalSupply;\n\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success);\n    function decreaseApproval (address _spender, uint _subtractedValue)public returns (bool success);\n}\n\ncontract EternalStorage {\n\n    /**** Storage Types *******/\n\n    address public owner;\n\n    mapping(bytes32 => uint256)    private uIntStorage;\n    mapping(bytes32 => uint8)      private uInt8Storage;\n    mapping(bytes32 => string)     private stringStorage;\n    mapping(bytes32 => address)    private addressStorage;\n    mapping(bytes32 => bytes)      private bytesStorage;\n    mapping(bytes32 => bool)       private boolStorage;\n    mapping(bytes32 => int256)     private intStorage;\n    mapping(bytes32 => bytes32)    private bytes32Storage;\n\n\n    /*** Modifiers ************/\n\n    /// @dev Only allow access from the latest version of a contract after deployment\n    modifier onlyLatestContract() {\n        require(addressStorage[keccak256(abi.encodePacked(\"contract.address\", msg.sender))] != 0x0 || msg.sender == owner);\n        _;\n    }\n\n    /// @dev constructor\n    constructor() public {\n        owner = msg.sender;\n        addressStorage[keccak256(abi.encodePacked(\"contract.address\", msg.sender))] = msg.sender;\n    }\n\n    function setOwner() public {\n        require(msg.sender == owner);\n        addressStorage[keccak256(abi.encodePacked(\"contract.address\", owner))] = 0x0;\n        owner = msg.sender;\n        addressStorage[keccak256(abi.encodePacked(\"contract.address\", msg.sender))] = msg.sender;\n    }\n\n    /**** Get Methods ***********/\n\n    /// @param _key The key for the record\n    function getAddress(bytes32 _key) external view returns (address) {\n        return addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getUint(bytes32 _key) external view returns (uint) {\n        return uIntStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getUint8(bytes32 _key) external view returns (uint8) {\n        return uInt8Storage[_key];\n    }\n\n\n    /// @param _key The key for the record\n    function getString(bytes32 _key) external view returns (string) {\n        return stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBytes(bytes32 _key) external view returns (bytes) {\n        return bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBytes32(bytes32 _key) external view returns (bytes32) {\n        return bytes32Storage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBool(bytes32 _key) external view returns (bool) {\n        return boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getInt(bytes32 _key) external view returns (int) {\n        return intStorage[_key];\n    }\n\n    /**** Set Methods ***********/\n\n    /// @param _key The key for the record\n    function setAddress(bytes32 _key, address _value) onlyLatestContract external {\n        addressStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setUint(bytes32 _key, uint _value) onlyLatestContract external {\n        uIntStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setUint8(bytes32 _key, uint8 _value) onlyLatestContract external {\n        uInt8Storage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setString(bytes32 _key, string _value) onlyLatestContract external {\n        stringStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBytes(bytes32 _key, bytes _value) onlyLatestContract external {\n        bytesStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBytes32(bytes32 _key, bytes32 _value) onlyLatestContract external {\n        bytes32Storage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBool(bytes32 _key, bool _value) onlyLatestContract external {\n        boolStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setInt(bytes32 _key, int _value) onlyLatestContract external {\n        intStorage[_key] = _value;\n    }\n\n    /**** Delete Methods ***********/\n\n    /// @param _key The key for the record\n    function deleteAddress(bytes32 _key) onlyLatestContract external {\n        delete addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteUint(bytes32 _key) onlyLatestContract external {\n        delete uIntStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteUint8(bytes32 _key) onlyLatestContract external {\n        delete uInt8Storage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteString(bytes32 _key) onlyLatestContract external {\n        delete stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBytes(bytes32 _key) onlyLatestContract external {\n        delete bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBytes32(bytes32 _key) onlyLatestContract external {\n        delete bytes32Storage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBool(bytes32 _key) onlyLatestContract external {\n        delete boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteInt(bytes32 _key) onlyLatestContract external {\n        delete intStorage[_key];\n    }\n}\n\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\ncontract Withdrawable is Ownable {\n    function withdrawEth(uint value) external onlyOwner {\n        require(address(this).balance >= value);\n        msg.sender.transfer(value);\n    }\n\n    function withdrawToken(address token, uint value) external onlyOwner {\n        require(Token(token).balanceOf(address(this)) >= value, \"Not enough tokens\");\n        require(Token(token).transfer(msg.sender, value));\n    }\n}\n\ncontract EscrowConfig is Ownable {\n\n    using EscrowConfigLib for address;\n\n    address public config;\n\n    constructor(address storageAddress) public {\n        config = storageAddress;\n    }\n\n    function resetValuesToDefault() external onlyOwner {\n        config.setPaymentFee(2);//%\n    }\n\n    function setStorageAddress(address storageAddress) external onlyOwner {\n        config = storageAddress;\n    }\n\n    function getPaymentFee() external view returns (uint8) {\n        return config.getPaymentFee();\n    }\n\n    //value - % of payment amount\n    function setPaymentFee(uint8 value) external onlyOwner {\n        require(value >= 0 && value < 100, \"Fee in % of payment amount must be >= 0 and < 100\");\n        config.setPaymentFee(value);\n    }\n}\n\ncontract PaymentHolder is Ownable {\n\n    modifier onlyAllowed() {\n        require(allowed[msg.sender]);\n        _;\n    }\n\n    modifier onlyUpdater() {\n        require(msg.sender == updater);\n        _;\n    }\n\n    mapping(address => bool) public allowed;\n    address public updater;\n\n    /*-----------------MAINTAIN METHODS------------------*/\n\n    function setUpdater(address _updater)\n    external onlyOwner {\n        updater = _updater;\n    }\n\n    function migrate(address newHolder, address[] tokens, address[] _allowed)\n    external onlyOwner {\n        require(PaymentHolder(newHolder).update.value(address(this).balance)(_allowed));\n        for (uint256 i = 0; i < tokens.length; i++) {\n            address token = tokens[i];\n            uint256 balance = Token(token).balanceOf(this);\n            if (balance > 0) {\n                require(Token(token).transfer(newHolder, balance));\n            }\n        }\n    }\n\n    function update(address[] _allowed)\n    external payable onlyUpdater returns(bool) {\n        for (uint256 i = 0; i < _allowed.length; i++) {\n            allowed[_allowed[i]] = true;\n        }\n        return true;\n    }\n\n    /*-----------------OWNER FLOW------------------*/\n\n    function allow(address to) \n    external onlyOwner { allowed[to] = true; }\n\n    function prohibit(address to)\n    external onlyOwner { allowed[to] = false; }\n\n    /*-----------------ALLOWED FLOW------------------*/\n\n    function depositEth()\n    public payable onlyAllowed returns (bool) {\n        //Default function to receive eth\n        return true;\n    }\n\n    function withdrawEth(address to, uint256 amount)\n    public onlyAllowed returns(bool) {\n        require(address(this).balance >= amount, \"Not enough ETH balance\");\n        to.transfer(amount);\n        return true;\n    }\n\n    function withdrawToken(address to, uint256 amount, address token)\n    public onlyAllowed returns(bool) {\n        require(Token(token).balanceOf(this) >= amount, \"Not enough token balance\");\n        require(Token(token).transfer(to, amount));\n        return true;\n    }\n\n}\n\ncontract ICourt is Ownable {\n\n    function getCaseId(address applicant, address respondent, bytes32 deal, uint256 date, bytes32 title, uint256 amount) \n        public pure returns(bytes32);\n\n    function getCaseStatus(bytes32 caseId) public view returns(uint8);\n\n    function getCaseVerdict(bytes32 caseId) public view returns(bool);\n}\n\nlibrary EscrowConfigLib {\n\n    function getPaymentFee(address storageAddress) public view returns (uint8) {\n        return EternalStorage(storageAddress).getUint8(keccak256(abi.encodePacked(\"escrow.config.payment.fee\")));\n    }\n\n    function setPaymentFee(address storageAddress, uint8 value) public {\n        EternalStorage(storageAddress).setUint8(keccak256(abi.encodePacked(\"escrow.config.payment.fee\")), value);\n    }\n}\n\ncontract IEscrow is Withdrawable {\n\n    /*----------------------PAYMENT STATUSES----------------------*/\n\n    //SIGNED status kept for backward compatibility\n    enum PaymentStatus {NONE/*code=0*/, CREATED/*code=1*/, SIGNED/*code=2*/, CONFIRMED/*code=3*/, RELEASED/*code=4*/, RELEASED_BY_DISPUTE /*code=5*/, CLOSED/*code=6*/, CANCELED/*code=7*/}\n    \n    /*----------------------EVENTS----------------------*/\n\n    event PaymentCreated(bytes32 paymentId, address depositor, address beneficiary, address token, bytes32 deal, uint256 amount, uint8 fee, bool feePayed);\n    event PaymentSigned(bytes32 paymentId, bool confirmed);\n    event PaymentDeposited(bytes32 paymentId, uint256 depositedAmount, bool confirmed);\n    event PaymentReleased(bytes32 paymentId);\n    event PaymentOffer(bytes32 paymentId, uint256 offerAmount);\n    event PaymentOfferCanceled(bytes32 paymentId);\n    event PaymentOwnOfferCanceled(bytes32 paymentId);\n    event PaymentOfferAccepted(bytes32 paymentId, uint256 releaseToBeneficiary, uint256 refundToDepositor);\n    event PaymentWithdrawn(bytes32 paymentId, uint256 amount);\n    event PaymentWithdrawnByDispute(bytes32 paymentId, uint256 amount, bytes32 dispute);\n    event PaymentCanceled(bytes32 paymentId);\n    event PaymentClosed(bytes32 paymentId);\n    event PaymentClosedByDispute(bytes32 paymentId, bytes32 dispute);\n\n    /*----------------------PUBLIC STATE----------------------*/\n\n    address public lib;\n    address public courtAddress;\n    address public paymentHolder;\n\n\n    /*----------------------CONFIGURATION METHODS (only owner) ----------------------*/\n    function setStorageAddress(address _storageAddress) external;\n\n    function setCourtAddress(address _courtAddress) external;\n\n    /*----------------------PUBLIC USER METHODS----------------------*/\n    /** @dev Depositor creates escrow payment. Set token as 0x0 in case of ETH amount.\n      * @param addresses [depositor, beneficiary, token]\n      * @param depositorPayFee If true, depositor have to send (amount + (amount * fee) / 100).\n      */\n    function createPayment(address[3] addresses, bytes32 deal, uint256 amount, bool depositorPayFee) external;\n\n    /** @dev Beneficiary signs escrow payment as consent for taking part.\n      * @param addresses [depositor, beneficiary, token]\n      */\n    function sign(address[3] addresses, bytes32 deal, uint256 amount) external;\n\n    /** @dev Depositor deposits payment amount only after it was signed by beneficiary.\n      * @param addresses [depositor, beneficiary, token]\n      */\n    function deposit(address[3] addresses, bytes32 deal, uint256 amount) external payable;\n\n    /** @dev Depositor or Beneficiary requests payment cancellation after payment was signed by beneficiary.\n      *      Payment is closed, if depositor and beneficiary both request cancellation.\n      * @param addresses [depositor, beneficiary, token]\n      */\n    function cancel(address[3] addresses, bytes32 deal, uint256 amount) external;\n\n    /** @dev Depositor close payment though transfer payment amount to another party.\n      * @param addresses [depositor, beneficiary, token]\n      */\n    function release(address[3] addresses, bytes32 deal, uint256 amount) external;\n\n    /** @dev Depositor or beneficiary offers partial closing payment with offerAmount.\n      * @param addresses [depositor, beneficiary, token]\n      * @param offerAmount Amount of partial closing offer in currency of payment (ETH or token).\n      */\n    function offer(address[3] addresses, bytes32 deal, uint256 amount, uint256 offerAmount) external;\n\n    /** @dev Depositor or beneficiary canceles another party offer.\n      * @param addresses [depositor, beneficiary, token]\n      */\n    function cancelOffer(address[3] addresses, bytes32 deal, uint256 amount) external;\n\n    /** @dev Depositor or beneficiary cancels own offer.\n      * @param addresses [depositor, beneficiary, token]\n      */\n    function cancelOwnOffer(address[3] addresses, bytes32 deal, uint256 amount) external;\n\n    /** @dev Depositor or beneficiary accepts opposite party offer.\n      * @param addresses [depositor, beneficiary, token]\n      */\n    function acceptOffer(address[3] addresses, bytes32 deal, uint256 amount) external;\n\n   \n    /** @dev Depositor or beneficiary withdraw amounts.\n      * @param addresses [depositor, beneficiary, token]\n      */\n    function withdraw(address[3] addresses, bytes32 deal, uint256 amount) external;\n\n    /** @dev Depositor or Beneficiary withdraw amounts according dispute verdict.\n      * @dev Have to use fucking arrays due to \"stack too deep\" issue.\n      * @param addresses [depositor, beneficiary, token]\n      * @param disputeParties [applicant, respondent]\n      * @param uints [paymentAmount, disputeAmount, disputeCreatedAt]\n      * @param byts [deal, disputeTitle]\n      */\n    function withdrawByDispute(address[3] addresses, address[2] disputeParties, uint256[3] uints, bytes32[2] byts) external;\n}\n\nlibrary FeeLib {\n\n    function getTotalFee(address storageAddress, address token)\n    public view returns(uint256) {\n        return EternalStorage(storageAddress).getUint(keccak256(abi.encodePacked(\"payment.fee.total\", token)));\n    }\n\n    function setTotalFee(address storageAddress, uint256 value, address token)\n    public {\n        EternalStorage(storageAddress).setUint(keccak256(abi.encodePacked(\"payment.fee.total\", token)), value);\n    }\n\n    function addFee(address storageAddress, uint256 value, address token)\n    public {\n        uint256 newTotalFee = getTotalFee(storageAddress, token) + value;\n        setTotalFee(storageAddress, newTotalFee, token);\n    }\n\n    \n}\n\nlibrary PaymentLib {\n\n    function getPaymentId(address[3] addresses, bytes32 deal, uint256 amount) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(addresses[0], addresses[1], addresses[2], deal, amount));\n    }\n\n    function createPayment(\n        address storageAddress, bytes32 paymentId, uint8 fee, uint8 status, bool feePayed\n    ) public {\n        setPaymentStatus(storageAddress, paymentId, status);\n        setPaymentFee(storageAddress, paymentId, fee);\n        if (feePayed) {\n            setFeePayed(storageAddress, paymentId, true);\n        }\n    }\n\n    function isCancelRequested(address storageAddress, bytes32 paymentId, address party)\n    public view returns(bool) {\n        return EternalStorage(storageAddress).getBool(keccak256(abi.encodePacked(\"payment.cance\", paymentId, party)));\n    }\n\n    function setCancelRequested(address storageAddress, bytes32 paymentId, address party, bool value)\n    public {\n        EternalStorage(storageAddress).setBool(keccak256(abi.encodePacked(\"payment.cance\", paymentId, party)), value);\n    }\n\n    function getPaymentFee(address storageAddress, bytes32 paymentId)\n    public view returns (uint8) {\n        return EternalStorage(storageAddress).getUint8(keccak256(abi.encodePacked(\"payment.fee\", paymentId)));\n    }\n\n    function setPaymentFee(address storageAddress, bytes32 paymentId, uint8 value)\n    public {\n        EternalStorage(storageAddress).setUint8(keccak256(abi.encodePacked(\"payment.fee\", paymentId)), value);\n    }\n\n    function isFeePayed(address storageAddress, bytes32 paymentId)\n    public view returns (bool) {\n        return EternalStorage(storageAddress).getBool(keccak256(abi.encodePacked(\"payment.fee.payed\", paymentId)));\n    }\n\n    function setFeePayed(address storageAddress, bytes32 paymentId, bool value)\n    public {\n        EternalStorage(storageAddress).setBool(keccak256(abi.encodePacked(\"payment.fee.payed\", paymentId)), value);\n    }\n\n    function isDeposited(address storageAddress, bytes32 paymentId)\n    public view returns (bool) {\n        return EternalStorage(storageAddress).getBool(keccak256(abi.encodePacked(\"payment.deposited\", paymentId)));\n    }\n\n    function setDeposited(address storageAddress, bytes32 paymentId, bool value)\n    public {\n        EternalStorage(storageAddress).setBool(keccak256(abi.encodePacked(\"payment.deposited\", paymentId)), value);\n    }\n\n    function isSigned(address storageAddress, bytes32 paymentId)\n    public view returns (bool) {\n        return EternalStorage(storageAddress).getBool(keccak256(abi.encodePacked(\"payment.signed\", paymentId)));\n    }\n\n    function setSigned(address storageAddress, bytes32 paymentId, bool value)\n    public {\n        EternalStorage(storageAddress).setBool(keccak256(abi.encodePacked(\"payment.signed\", paymentId)), value);\n    }\n\n    function getPaymentStatus(address storageAddress, bytes32 paymentId)\n    public view returns (uint8) {\n        return EternalStorage(storageAddress).getUint8(keccak256(abi.encodePacked(\"payment.status\", paymentId)));\n    }\n\n    function setPaymentStatus(address storageAddress, bytes32 paymentId, uint8 status)\n    public {\n        EternalStorage(storageAddress).setUint8(keccak256(abi.encodePacked(\"payment.status\", paymentId)), status);\n    }\n\n    function getOfferAmount(address storageAddress, bytes32 paymentId, address user)\n    public view returns (uint256) {\n        return EternalStorage(storageAddress).getUint(keccak256(abi.encodePacked(\"payment.amount.refund\", paymentId, user)));\n    }\n\n    function setOfferAmount(address storageAddress, bytes32 paymentId, address user, uint256 amount)\n    public {\n        EternalStorage(storageAddress).setUint(keccak256(abi.encodePacked(\"payment.amount.refund\", paymentId, user)), amount);\n    }\n\n    function getWithdrawAmount(address storageAddress, bytes32 paymentId, address user)\n    public view returns (uint256) {\n        return EternalStorage(storageAddress).getUint(keccak256(abi.encodePacked(\"payment.amount.withdraw\", paymentId, user)));\n    }\n\n    function setWithdrawAmount(address storageAddress, bytes32 paymentId, address user, uint256 amount)\n    public {\n        EternalStorage(storageAddress).setUint(keccak256(abi.encodePacked(\"payment.amount.withdraw\", paymentId, user)), amount);\n    }\n\n    function isWithdrawn(address storageAddress, bytes32 paymentId, address user)\n    public view returns (bool) {\n        return EternalStorage(storageAddress).getBool(keccak256(abi.encodePacked(\"payment.withdrawed\", paymentId, user)));\n    }\n\n    function setWithdrawn(address storageAddress, bytes32 paymentId, address user, bool value)\n    public {\n        EternalStorage(storageAddress).setBool(keccak256(abi.encodePacked(\"payment.withdrawed\", paymentId, user)), value);\n    }\n\n    function getPayment(address storageAddress, bytes32 paymentId)\n    public view returns(\n        uint8 status, uint8 fee, bool feePayed, bool signed, bool deposited\n    ) {\n        status = uint8(getPaymentStatus(storageAddress, paymentId));\n        fee = getPaymentFee(storageAddress, paymentId);\n        feePayed = isFeePayed(storageAddress, paymentId);\n        signed = isSigned(storageAddress, paymentId);\n        deposited = isDeposited(storageAddress, paymentId);\n    }\n\n    function getPaymentOffers(address storageAddress, address depositor, address beneficiary, bytes32 paymentId)\n    public view returns(uint256 depositorOffer, uint256 beneficiaryOffer) {\n        depositorOffer = getOfferAmount(storageAddress, paymentId, depositor);\n        beneficiaryOffer = getOfferAmount(storageAddress, paymentId, beneficiary);\n    }\n}\n\ncontract Escrow is IEscrow {\n    using PaymentLib for address;\n    using FeeLib for address;\n    using EscrowConfigLib for address;\n\n    constructor(address storageAddress, address _paymentHolder, address _courtAddress) public {\n        lib = storageAddress;\n        courtAddress = _courtAddress;\n        paymentHolder = _paymentHolder;\n    }\n\n    /*----------------------CONFIGURATION METHODS----------------------*/\n\n    function setStorageAddress(address _storageAddress) external onlyOwner {\n        lib = _storageAddress;\n    }\n\n    function setPaymentHolder(address _paymentHolder) external onlyOwner {\n        paymentHolder = _paymentHolder;\n    }\n\n    function setCourtAddress(address _courtAddress) external onlyOwner {\n        courtAddress = _courtAddress;\n    }\n\n    function getTotalFee(address token)\n    public view returns(uint256) {\n        return lib.getTotalFee(token);\n    }\n\n    function withdrawFee(address to, address token) \n    external onlyOwner {\n        uint256 totalFee = lib.getTotalFee(token);\n        require(totalFee >= 0, \"Can not withdraw 0 total fee\");\n        if (token == address(0)) {\n            require(PaymentHolder(paymentHolder).withdrawEth(to, totalFee), \"Error during withdraw ETH\");\n        } else {\n            require(PaymentHolder(paymentHolder).withdrawToken(to, totalFee, token), \"Error during withdraw Token\");\n        }\n        lib.setTotalFee(0 ,token);\n    }\n\n    /*----------------------PUBLIC USER METHODS----------------------*/\n\n    /** @dev Depositor creates escrow payment. Set token as 0x0 in case of ETH amount.\n      * @param addresses [depositor, beneficiary, token]\n      * @param depositorPayFee If true, depositor have to send (amount + (amount * fee) / 100).\n      */\n    function createPayment(address[3] addresses, bytes32 deal, uint256 amount, bool depositorPayFee)\n    external {\n        onlyParties(addresses);\n        require(addresses[0] != address(0), \"Depositor can not be 0x0 address\");\n        require(addresses[1] != address(0), \"Beneficiary can not be 0x0 address\");\n        require(addresses[0] != addresses[1], \"Depositor and beneficiary can not be the same\");\n        require(deal != 0x0, \"deal can not be 0x0\");\n        require(amount != 0, \"amount can not be 0\");\n        bytes32 paymentId = getPaymentId(addresses, deal, amount);\n        checkStatus(paymentId, PaymentStatus.NONE);\n        uint8 fee = lib.getPaymentFee();\n        lib.createPayment(paymentId, fee, uint8(PaymentStatus.CREATED), depositorPayFee);\n        emit PaymentCreated(paymentId, addresses[0], addresses[1], addresses[2], deal, amount, fee, depositorPayFee);\n    }\n\n    /** @dev Beneficiary signs escrow payment as consent for taking part.\n      * @param addresses [depositor, beneficiary, token]\n      */\n    function sign(address[3] addresses, bytes32 deal, uint256 amount)\n    external {\n        onlyBeneficiary(addresses);\n        bytes32 paymentId = getPaymentId(addresses, deal, amount);\n        require(!lib.isSigned(paymentId), \"Payment can be signed only once\");\n        checkStatus(paymentId, PaymentStatus.CREATED);\n        lib.setSigned(paymentId, true);\n        bool confirmed = lib.isDeposited(paymentId);\n        if (confirmed) {\n            setPaymentStatus(paymentId, PaymentStatus.CONFIRMED);\n        }\n        emit PaymentSigned(paymentId, confirmed);\n    }\n\n    /** @dev Depositor deposits payment amount only after it was signed by beneficiary\n      * @param addresses [depositor, beneficiary, token]\n      */\n    function deposit(address[3] addresses, bytes32 deal, uint256 amount)\n    external payable {\n        onlyDepositor(addresses);\n        bytes32 paymentId = getPaymentId(addresses, deal, amount);\n        PaymentStatus status = getPaymentStatus(paymentId);\n        require(!lib.isDeposited(paymentId), \"Payment can be deposited only once\");\n        require(status == PaymentStatus.CREATED || status == PaymentStatus.SIGNED, \"Invalid current payment status\");\n        uint256 depositAmount = amount;\n        if (lib.isFeePayed(paymentId)) {\n            depositAmount = amount + calcFee(amount, lib.getPaymentFee(paymentId));\n        }\n        address token = getToken(addresses);\n        if (token == address(0)) {\n            require(msg.value == depositAmount, \"ETH amount must be equal amount\");\n            require(PaymentHolder(paymentHolder).depositEth.value(msg.value)(), \"Not enough eth\");\n        } else {\n            require(msg.value == 0, \"ETH amount must be 0 for token transfer\");\n            require(Token(token).allowance(msg.sender, address(this)) >= depositAmount, \"Not enough token allowance\");\n            require(Token(token).balanceOf(msg.sender) >= depositAmount, \"No enough tokens\");\n            require(Token(token).transferFrom(msg.sender, paymentHolder, depositAmount), \"Error during transafer tokens\");\n        }\n        lib.setDeposited(paymentId, true);\n        bool confirmed = lib.isSigned(paymentId);\n        if (confirmed) {\n            setPaymentStatus(paymentId, PaymentStatus.CONFIRMED);\n        }\n        emit PaymentDeposited(paymentId, depositAmount, confirmed);\n    }\n\n    /** @dev Depositor or Beneficiary requests payment cancellation after payment was signed by beneficiary.\n      *      Payment is closed, if depositor and beneficiary both request cancellation.\n      * @param addresses [depositor, beneficiary, token]\n      */\n    function cancel(address[3] addresses, bytes32 deal, uint256 amount)\n    external {\n        onlyParties(addresses);\n        bytes32 paymentId = getPaymentId(addresses, deal, amount);\n        checkStatus(paymentId, PaymentStatus.CREATED);\n        setPaymentStatus(paymentId, PaymentStatus.CANCELED);\n        if (lib.isDeposited(paymentId)) {\n            uint256 amountToRefund = amount;\n            if (lib.isFeePayed(paymentId)) {\n                amountToRefund = amount + calcFee(amount, lib.getPaymentFee(paymentId));\n            }\n            transfer(getDepositor(addresses), amountToRefund, getToken(addresses));\n        }\n        setPaymentStatus(paymentId, PaymentStatus.CANCELED);\n        emit PaymentCanceled(paymentId);\n        emit PaymentCanceled(paymentId);\n    }\n\n    /** @dev Depositor close payment though transfer payment amount to another party.\n      * @param addresses [depositor, beneficiary, token]\n      */\n    function release(address[3] addresses, bytes32 deal, uint256 amount)\n    external {\n        onlyDepositor(addresses);\n        bytes32 paymentId = getPaymentId(addresses, deal, amount);\n        checkStatus(paymentId, PaymentStatus.CONFIRMED);\n        doRelease(addresses, [amount, 0], paymentId);\n        emit PaymentReleased(paymentId);\n    }\n\n    /** @dev Depositor or beneficiary offers partial closing payment with offerAmount.\n      * @param addresses [depositor, beneficiary, token]\n      * @param offerAmount Amount of partial closing offer in currency of payment (ETH or token).\n      */\n    function offer(address[3] addresses, bytes32 deal, uint256 amount, uint256 offerAmount)\n    external {\n        onlyParties(addresses);\n        require(offerAmount >= 0 && offerAmount <= amount, \"Offer amount must be >= 0 and <= payment amount\");\n        bytes32 paymentId = getPaymentId(addresses, deal, amount);\n        uint256 anotherOfferAmount = lib.getOfferAmount(paymentId, getAnotherParty(addresses));\n        require(anotherOfferAmount == 0, \"Sender can not make offer if another party has done the same before\");\n        lib.setOfferAmount(paymentId, msg.sender, offerAmount);\n        emit PaymentOffer(paymentId, offerAmount);\n    }\n\n    /** @dev Depositor or beneficiary cancels opposite party offer.\n      * @param addresses [depositor, beneficiary, token]\n      */\n    function cancelOffer(address[3] addresses, bytes32 deal, uint256 amount)\n    external {\n        bytes32 paymentId = doCancelOffer(addresses, deal, amount, getAnotherParty(addresses));\n        emit PaymentOfferCanceled(paymentId);\n    }\n\n    /** @dev Depositor or beneficiary cancels own offer.\n    * @param addresses [depositor, beneficiary, token]\n    */\n    function cancelOwnOffer(address[3] addresses, bytes32 deal, uint256 amount)\n    external {\n        bytes32 paymentId = doCancelOffer(addresses, deal, amount, msg.sender);\n        emit PaymentOwnOfferCanceled(paymentId);\n    }\n\n    /** @dev Depositor or beneficiary accepts opposite party offer.\n      * @param addresses [depositor, beneficiary, token]\n      */\n    function acceptOffer(address[3] addresses, bytes32 deal, uint256 amount)\n    external {\n        onlyParties(addresses);\n        bytes32 paymentId = getPaymentId(addresses, deal, amount);\n        checkStatus(paymentId, PaymentStatus.CONFIRMED);\n        uint256 offerAmount = lib.getOfferAmount(paymentId, getAnotherParty(addresses));\n        require(offerAmount != 0, \"Sender can not accept another party offer of 0\");\n        uint256 toBeneficiary = offerAmount;\n        uint256 toDepositor = amount - offerAmount;\n        //if sender is beneficiary\n        if (msg.sender == addresses[1]) {\n            toBeneficiary = amount - offerAmount;\n            toDepositor = offerAmount;\n        }\n        doRelease(addresses, [toBeneficiary, toDepositor], paymentId);\n        emit PaymentOfferAccepted(paymentId, toBeneficiary, toDepositor);\n    }\n\n    /** @dev Depositor or beneficiary withdraw amounts.\n      * @param addresses [depositor, beneficiary, token]\n      */\n    function withdraw(address[3] addresses, bytes32 deal, uint256 amount)\n    external {\n        onlyParties(addresses);\n        bytes32 paymentId = getPaymentId(addresses, deal, amount);\n        checkStatus(paymentId, PaymentStatus.RELEASED);\n        require(!lib.isWithdrawn(paymentId, msg.sender), \"User can not withdraw twice.\");\n        uint256 withdrawAmount = lib.getWithdrawAmount(paymentId, msg.sender);\n        withdrawAmount = transferWithFee(msg.sender, withdrawAmount, addresses[2], paymentId);\n        emit PaymentWithdrawn(paymentId, withdrawAmount);\n        lib.setWithdrawn(paymentId, msg.sender, true);\n        address anotherParty = getAnotherParty(addresses);\n        if (lib.getWithdrawAmount(paymentId, anotherParty) == 0 || lib.isWithdrawn(paymentId, anotherParty)) {\n            setPaymentStatus(paymentId, PaymentStatus.CLOSED);\n            emit PaymentClosed(paymentId);\n        }\n    }\n\n    /** @dev Depositor or Beneficiary withdraw amounts according dispute verdict.\n      * @dev Have to use fucking arrays due to \"stack too deep\" issue.\n      * @param addresses [depositor, beneficiary, token]\n      * @param disputeParties [applicant, respondent]\n      * @param uints [paymentAmount, disputeAmount, disputeCreatedAt]\n      * @param byts [deal, disputeTitle]\n      */\n    function withdrawByDispute(address[3] addresses, address[2] disputeParties, uint256[3] uints, bytes32[2] byts)\n    external {\n        onlyParties(addresses);\n        require(\n            addresses[0] == disputeParties[0] && addresses[1] == disputeParties[1] || addresses[0] == disputeParties[1] && addresses[1] == disputeParties[0],\n            \"Depositor and beneficiary must be dispute parties\"\n        );\n        bytes32 paymentId = getPaymentId(addresses, byts[0], uints[0]);\n        PaymentStatus paymentStatus = getPaymentStatus(paymentId);\n        require(paymentStatus == PaymentStatus.CONFIRMED || paymentStatus == PaymentStatus.RELEASED_BY_DISPUTE, \"Invalid current payment status\");\n        require(!lib.isWithdrawn(paymentId, msg.sender), \"User can not withdraw twice.\");\n        bytes32 dispute = ICourt(courtAddress).getCaseId(\n            disputeParties[0] /*applicant*/, disputeParties[1]/*respondent*/,\n            paymentId/*deal*/, uints[2]/*disputeCreatedAt*/,\n            byts[1]/*disputeTitle*/, uints[1]/*disputeAmount*/\n        );\n        require(ICourt(courtAddress).getCaseStatus(dispute) == 3, \"Case must be closed\");\n        /*[releaseAmount, refundAmount]*/\n        uint256[2] memory withdrawAmounts = [uint256(0), 0];\n        bool won = ICourt(courtAddress).getCaseVerdict(dispute);\n        //depositor == applicant\n        if (won) {\n            //use paymentAmount if disputeAmount is greater\n            withdrawAmounts[0] = uints[1] > uints[0] ? uints[0] : uints[1];\n            withdrawAmounts[1] = uints[0] - withdrawAmounts[0];\n        } else {\n            //make full release\n            withdrawAmounts[1] = uints[0];\n        }\n        if (msg.sender != disputeParties[0]) {\n            withdrawAmounts[0] = withdrawAmounts[0] + withdrawAmounts[1];\n            withdrawAmounts[1] = withdrawAmounts[0] - withdrawAmounts[1];\n            withdrawAmounts[0] = withdrawAmounts[0] - withdrawAmounts[1];\n        }\n        address anotherParty = getAnotherParty(addresses);\n        //if sender is depositor\n        withdrawAmounts[0] = transferWithFee(msg.sender, withdrawAmounts[0], addresses[2], paymentId);\n        emit PaymentWithdrawnByDispute(paymentId, withdrawAmounts[0], dispute);\n        lib.setWithdrawn(paymentId, msg.sender, true);\n        if (withdrawAmounts[1] == 0 || lib.isWithdrawn(paymentId, anotherParty)) {\n            setPaymentStatus(paymentId, PaymentStatus.CLOSED);\n            emit PaymentClosedByDispute(paymentId, dispute);\n        } else {\n            //need to prevent withdraw by another flow, e.g. simple release or offer accepting\n            setPaymentStatus(paymentId, PaymentStatus.RELEASED_BY_DISPUTE);\n        }\n    }\n    \n    /*------------------PRIVATE METHODS----------------------*/\n    function getPaymentId(address[3] addresses, bytes32 deal, uint256 amount)\n    public pure returns (bytes32) {return PaymentLib.getPaymentId(addresses, deal, amount);}\n\n    function getDepositor(address[3] addresses) private pure returns (address) {return addresses[0];}\n\n    function getBeneficiary(address[3] addresses) private pure returns (address) {return addresses[1];}\n\n    function getToken(address[3] addresses) private pure returns (address) {return addresses[2];}\n\n    function getAnotherParty(address[3] addresses) private view returns (address) {\n        return msg.sender == addresses[0] ? addresses[1] : addresses[0];\n    }\n\n    function onlyParties(address[3] addresses) private view {require(msg.sender == addresses[0] || msg.sender == addresses[1]);}\n\n    function onlyDepositor(address[3] addresses) private view {require(msg.sender == addresses[0]);}\n\n    function onlyBeneficiary(address[3] addresses) private view {require(msg.sender == addresses[1]);}\n\n    function getPaymentStatus(bytes32 paymentId)\n    private view returns (PaymentStatus) {\n        return PaymentStatus(lib.getPaymentStatus(paymentId));\n    }\n\n    function setPaymentStatus(bytes32 paymentId, PaymentStatus status)\n    private {\n        lib.setPaymentStatus(paymentId, uint8(status));\n    }\n\n    function checkStatus(bytes32 paymentId, PaymentStatus status)\n    private view {\n        require(lib.getPaymentStatus(paymentId) == uint8(status), \"Required status does not match actual one\");\n    }\n\n    function doCancelOffer(address[3] addresses, bytes32 deal, uint256 amount, address from)\n    private returns(bytes32 paymentId) {\n        onlyParties(addresses);\n        paymentId = getPaymentId(addresses, deal, amount);\n        checkStatus(paymentId, PaymentStatus.CONFIRMED);\n        uint256 offerAmount = lib.getOfferAmount(paymentId, from);\n        require(offerAmount != 0, \"Sender can not cancel offer of 0\");\n        lib.setOfferAmount(paymentId, from, 0);\n    }\n\n    /** @param addresses [depositor, beneficiary, token]\n      * @param amounts [releaseAmount, refundAmount]\n      */\n    function doRelease(address[3] addresses, uint256[2] amounts, bytes32 paymentId)\n    private {\n        setPaymentStatus(paymentId, PaymentStatus.RELEASED);\n        lib.setWithdrawAmount(paymentId, getBeneficiary(addresses), amounts[0]);\n        lib.setWithdrawAmount(paymentId, getDepositor(addresses), amounts[1]);\n    }\n\n    function transferWithFee(address to, uint256 amount, address token, bytes32 paymentId)\n    private returns (uint256 transferAmount) {\n        require(amount != 0, \"There is sense to invoke this method if withdraw amount is 0.\");\n        uint256 feeAmount = calcFee(amount, lib.getPaymentFee(paymentId));\n        transferAmount = amount;\n        if (!lib.isFeePayed(paymentId)) {\n            transferAmount = amount - feeAmount;\n        }\n        transfer(to, transferAmount, token);\n        if (feeAmount > 0) {\n            lib.addFee(feeAmount, token);\n        }\n    }   \n\n    function transfer(address to, uint256 amount, address token)\n    private {\n        if (amount == 0) {\n            return;\n        }\n        if (token == address(0)) {\n            require(PaymentHolder(paymentHolder).withdrawEth(to, amount), \"Error during withdraw ETH\");\n        } else {\n            require(PaymentHolder(paymentHolder).withdrawToken(to, amount, token), \"Error during withdraw Token\");\n        }\n    }\n\n    function calcFee(uint amount, uint fee)\n    private pure returns (uint256) {\n        return ((amount * fee) / 100);\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405160608061414c83398101604090815281516020830151919092015160008054600160a060020a0319908116331790915560018054600160a060020a039586169083161790556002805492851692821692909217909155600380549390921692169190911790556140c3806100896000396000f3006080604052600436106101245763ffffffff60e060020a60003504166317958e72811461012957806321d6806e146101485780632f548b84146101665780633881babe1461018357806358401a9c1461019357806359b910d6146101b55780635ab01de8146101d65780636b5a8d4e146101f35780636c8d9a84146102505780637db5c88e146102815780638c232838146102a25780638c838d6f146102c35780638da5cb5b146102e457806392801230146102f95780639e281a981461030e578063a82c7b5a14610332578063b2e749511461034f578063b67fc9e61461036c578063c09f1d1914610381578063c311d0491461039e578063c879c6d8146103b6578063cb37cce0146103dd578063d0c62e4f146103fa578063f2fde38b1461041a575b600080fd5b34801561013557600080fd5b50610146600460643560843561043b565b005b34801561015457600080fd5b506101466004606460a4610104610741565b34801561017257600080fd5b506101466004606435608435610f13565b610146600460643560843561127b565b34801561019f57600080fd5b50610146600460643560843560a4351515611c19565b3480156101c157600080fd5b50610146600160a060020a0360043516612086565b3480156101e257600080fd5b5061014660046064356084356120cc565b3480156101ff57600080fd5b5060408051606081810190925261023e913691600491606491908390600390839083908082843750939650508335945050506020909101359050612163565b60408051918252519081900360200190f35b34801561025c57600080fd5b50610265612228565b60408051600160a060020a039092168252519081900360200190f35b34801561028d57600080fd5b50610146600160a060020a0360043516612237565b3480156102ae57600080fd5b5061023e600160a060020a036004351661227d565b3480156102cf57600080fd5b50610146600160a060020a0360043516612331565b3480156102f057600080fd5b50610265612377565b34801561030557600080fd5b50610265612386565b34801561031a57600080fd5b50610146600160a060020a0360043516602435612395565b34801561033e57600080fd5b506101466004606435608435612535565b34801561035b57600080fd5b5061014660046064356084356127a0565b34801561037857600080fd5b50610265612c75565b34801561038d57600080fd5b506101466004606435608435612c84565b3480156103aa57600080fd5b50610146600435612cf4565b3480156103c257600080fd5b50610146600160a060020a0360043581169060243516612d46565b3480156103e957600080fd5b506101466004606435608435613103565b34801561040657600080fd5b50610146600460643560843560a4356131e2565b34801561042657600080fd5b50610146600160a060020a0360043516613528565b60008061046a856003806020026040519081016040528092919082600360200280828437506135bc9350505050565b604080516060818101909252610496918790600390839083908082843782019150505050508585612163565b600154604080517f5202d820000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015260248201839052519193507370edf62a31c67116e2c1abdd16721dcefbd40b7c91635202d82091604480820192602092909190829003018186803b15801561051757600080fd5b505af415801561052b573d6000803e3d6000fd5b505050506040513d602081101561054157600080fd5b505115610598576040805160e560020a62461bcd02815260206004820152601f60248201527f5061796d656e742063616e206265207369676e6564206f6e6c79206f6e636500604482015290519081900360640190fd5b6105a38260016135dc565b60018054604080517f37dd2acd000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015260248201859052604482019290925290517370edf62a31c67116e2c1abdd16721dcefbd40b7c916337dd2acd916064808301926000929190829003018186803b15801561062a57600080fd5b505af415801561063e573d6000803e3d6000fd5b5050600154604080517fc0194bb2000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015260248201869052517370edf62a31c67116e2c1abdd16721dcefbd40b7c935063c0194bb292506044808301926020929190829003018186803b1580156106bf57600080fd5b505af41580156106d3573d6000803e3d6000fd5b505050506040513d60208110156106e957600080fd5b5051905080156106fe576106fe826003613716565b60408051838152821515602082015281517f745edda55b0281ac9c1b596cac561f470be837d565adc773ea2f6f6e03e62097929181900390910190a15050505050565b600080600061074e61407c565b60008061077d8a6003806020026040519081016040528092919082600360200280828437506137b29350505050565b8935600160a060020a039081168a35919091161480156107b0575060208a810135600160a060020a03908116918b013516145b806107ec57508935600160a060020a0390811660208b0135919091161480156107ec575060208a0135600160a060020a039081168a3591909116145b1515610868576040805160e560020a62461bcd02815260206004820152603160248201527f4465706f7369746f7220616e642062656e6566696369617279206d757374206260448201527f6520646973707574652070617274696573000000000000000000000000000000606482015290519081900360840190fd5b6040805160608181019092526108a1918c906003908390839080828437508c935060009250610895915050565b60200201358a35612163565b95506108ac866137d8565b945060038560078111156108bc57fe5b14806108d3575060058560078111156108d157fe5b145b1515610929576040805160e560020a62461bcd02815260206004820152601e60248201527f496e76616c69642063757272656e74207061796d656e74207374617475730000604482015290519081900360640190fd5b6001546040805160e060020a63e3d79b23028152600160a060020a03909216600483015260248201889052336044830152517370edf62a31c67116e2c1abdd16721dcefbd40b7c9163e3d79b23916064808301926020929190829003018186803b15801561099657600080fd5b505af41580156109aa573d6000803e3d6000fd5b505050506040513d60208110156109c057600080fd5b505115610a17576040805160e560020a62461bcd02815260206004820152601c60248201527f557365722063616e206e6f742077697468647261772074776963652e00000000604482015290519081900360640190fd5b600254604080517fb4e85e8b000000000000000000000000000000000000000000000000000000008152600160a060020a038c35811660048301526020808e013582166024840152604483018b90528c84013560648401528b81013560848401528c81013560a4840152925193169263b4e85e8b9260c4808401939192918290030181600087803b158015610aab57600080fd5b505af1158015610abf573d6000803e3d6000fd5b505050506040513d6020811015610ad557600080fd5b5051600254604080517f258198af000000000000000000000000000000000000000000000000000000008152600481018490529051929650600160a060020a039091169163258198af916024808201926020929091908290030181600087803b158015610b4157600080fd5b505af1158015610b55573d6000803e3d6000fd5b505050506040513d6020811015610b6b57600080fd5b505160ff16600314610bc7576040805160e560020a62461bcd02815260206004820152601360248201527f43617365206d75737420626520636c6f73656400000000000000000000000000604482015290519081900360640190fd5b6040805180820182526000808252602080830182905260025484517ffeecca1b000000000000000000000000000000000000000000000000000000008152600481018a90529451939750600160a060020a03169363feecca1b9360248083019491928390030190829087803b158015610c3f57600080fd5b505af1158015610c53573d6000803e3d6000fd5b505050506040513d6020811015610c6957600080fd5b505191508115610c9c578735602089013511610c89576020880135610c8c565b87355b8084528835036020840152610ca4565b873560208401525b33600160a060020a038a351614610cca5760208301805184518101908103918290520383525b604080516060818101909252610cf2918c906003908390839080828437506138999350505050565b8351909150610d11903390600160a060020a0360408e013516896138c3565b808452604080518881526020810192909252818101869052517f4bdd5fc7075e9a3e0f5b7a7c89d8cc2109bf7f17b8539083cf459dcdaab4627d9181900360600190a160018054604080517f4eb58add000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015260248201899052336044830152606482019290925290517370edf62a31c67116e2c1abdd16721dcefbd40b7c91634eb58add916084808301926000929190829003018186803b158015610de157600080fd5b505af4158015610df5573d6000803e3d6000fd5b5085925060019150610e049050565b60200201511580610eac57506001546040805160e060020a63e3d79b23028152600160a060020a039283166004820152602481018990529183166044830152517370edf62a31c67116e2c1abdd16721dcefbd40b7c9163e3d79b23916064808301926020929190829003018186803b158015610e7f57600080fd5b505af4158015610e93573d6000803e3d6000fd5b505050506040513d6020811015610ea957600080fd5b50515b15610efc57610ebc866006613716565b604080518781526020810186905281517f4df10cf6d48f8da5081ba3ae81b03bda1ebc3687f7d26689effe6179980ac958929181900390910190a1610f07565b610f07866005613716565b50505050505050505050565b600080610f42856003806020026040519081016040528092919082600360200280828437506137b29350505050565b604080516060818101909252610f6e918790600390839083908082843782019150505050508585612163565b9150610f7b8260016135dc565b610f86826007613716565b600154604080517fc0194bb2000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015260248201849052517370edf62a31c67116e2c1abdd16721dcefbd40b7c9163c0194bb2916044808301926020929190829003018186803b15801561100357600080fd5b505af4158015611017573d6000803e3d6000fd5b505050506040513d602081101561102d57600080fd5b5051156112035750600154604080517fbac9b405000000000000000000000000000000000000000000000000000000008152600160a060020a039092166004830152602482018390525183917370edf62a31c67116e2c1abdd16721dcefbd40b7c9163bac9b40591604480820192602092909190829003018186803b1580156110b557600080fd5b505af41580156110c9573d6000803e3d6000fd5b505050506040513d60208110156110df57600080fd5b5051156111a257600154604080517fc1c8bbff000000000000000000000000000000000000000000000000000000008152600160a060020a039092166004830152602482018490525161119d9185917370edf62a31c67116e2c1abdd16721dcefbd40b7c9163c1c8bbff916044808301926020929190829003018186803b15801561116957600080fd5b505af415801561117d573d6000803e3d6000fd5b505050506040513d602081101561119357600080fd5b505160ff16613b3d565b830190505b6112036111d186600380602002604051908101604052809291908260036020028082843750613b459350505050565b826111fe88600380602002604051908101604052809291908260036020028082843750613b4e9350505050565b613b58565b61120e826007613716565b6040805183815290517f40929445cf61fa3eecb1608d40d8d799740665fd4ff83b863f0050e89792b1299181900360200190a16040805183815290517f40929445cf61fa3eecb1608d40d8d799740665fd4ff83b863f0050e89792b1299181900360200190a15050505050565b60008060008060006112af88600380602002604051908101604052809291908260036020028082843750613d689350505050565b6040805160608181019092526112db918a90600390839083908082843782019150505050508888612163565b94506112e6856137d8565b600154604080517fc0194bb2000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015260248201889052519195507370edf62a31c67116e2c1abdd16721dcefbd40b7c9163c0194bb291604480820192602092909190829003018186803b15801561136757600080fd5b505af415801561137b573d6000803e3d6000fd5b505050506040513d602081101561139157600080fd5b50511561140e576040805160e560020a62461bcd02815260206004820152602260248201527f5061796d656e742063616e206265206465706f7369746564206f6e6c79206f6e60448201527f6365000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600184600781111561141c57fe5b14806114335750600284600781111561143157fe5b145b1515611489576040805160e560020a62461bcd02815260206004820152601e60248201527f496e76616c69642063757272656e74207061796d656e74207374617475730000604482015290519081900360640190fd5b600154604080517fbac9b405000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015260248201879052518794507370edf62a31c67116e2c1abdd16721dcefbd40b7c9163bac9b405916044808301926020929190829003018186803b15801561150957600080fd5b505af415801561151d573d6000803e3d6000fd5b505050506040513d602081101561153357600080fd5b5051156115c257600154604080517fc1c8bbff000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015260248201879052516115bd9188917370edf62a31c67116e2c1abdd16721dcefbd40b7c9163c1c8bbff916044808301926020929190829003018186803b15801561116957600080fd5b860192505b6040805160608181019092526115ea918a90600390839083908082843750613b4e9350505050565b9150600160a060020a038216151561172e57348314611653576040805160e560020a62461bcd02815260206004820152601f60248201527f45544820616d6f756e74206d75737420626520657175616c20616d6f756e7400604482015290519081900360640190fd5b600360009054906101000a9004600160a060020a0316600160a060020a031663439370b1346040518263ffffffff1660e060020a0281526004016020604051808303818588803b1580156116a657600080fd5b505af11580156116ba573d6000803e3d6000fd5b50505050506040513d60208110156116d157600080fd5b50511515611729576040805160e560020a62461bcd02815260206004820152600e60248201527f4e6f7420656e6f75676820657468000000000000000000000000000000000000604482015290519081900360640190fd5b611a73565b34156117aa576040805160e560020a62461bcd02815260206004820152602760248201527f45544820616d6f756e74206d757374206265203020666f7220746f6b656e207460448201527f72616e7366657200000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b604080517fdd62ed3e00000000000000000000000000000000000000000000000000000000815233600482015230602482015290518491600160a060020a0385169163dd62ed3e916044808201926020929091908290030181600087803b15801561181457600080fd5b505af1158015611828573d6000803e3d6000fd5b505050506040513d602081101561183e57600080fd5b50511015611896576040805160e560020a62461bcd02815260206004820152601a60248201527f4e6f7420656e6f75676820746f6b656e20616c6c6f77616e6365000000000000604482015290519081900360640190fd5b604080517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015290518491600160a060020a038516916370a08231916024808201926020929091908290030181600087803b1580156118fa57600080fd5b505af115801561190e573d6000803e3d6000fd5b505050506040513d602081101561192457600080fd5b5051101561197c576040805160e560020a62461bcd02815260206004820152601060248201527f4e6f20656e6f75676820746f6b656e7300000000000000000000000000000000604482015290519081900360640190fd5b600354604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a039283166024820152604481018690529051918416916323b872dd916064808201926020929091908290030181600087803b1580156119f157600080fd5b505af1158015611a05573d6000803e3d6000fd5b505050506040513d6020811015611a1b57600080fd5b50511515611a73576040805160e560020a62461bcd02815260206004820152601d60248201527f4572726f7220647572696e67207472616e736166657220746f6b656e73000000604482015290519081900360640190fd5b60018054604080517f70e866a1000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015260248201889052604482019290925290517370edf62a31c67116e2c1abdd16721dcefbd40b7c916370e866a1916064808301926000929190829003018186803b158015611afa57600080fd5b505af4158015611b0e573d6000803e3d6000fd5b5050600154604080517f5202d820000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015260248201899052517370edf62a31c67116e2c1abdd16721dcefbd40b7c9350635202d82092506044808301926020929190829003018186803b158015611b8f57600080fd5b505af4158015611ba3573d6000803e3d6000fd5b505050506040513d6020811015611bb957600080fd5b505190508015611bce57611bce856003613716565b60408051868152602081018590528215158183015290517f02f5059d6c2ca585877c37dea5eef4295b3a86a233b42e826cf0fd5cd85763879181900360600190a15050505050505050565b600080611c48866003806020026040519081016040528092919082600360200280828437506137b29350505050565b600160a060020a038635161515611ca9576040805160e560020a62461bcd02815260206004820181905260248201527f4465706f7369746f722063616e206e6f74206265203078302061646472657373604482015290519081900360640190fd5b600160a060020a036020870135161515611d33576040805160e560020a62461bcd02815260206004820152602260248201527f42656e65666963696172792063616e206e6f742062652030783020616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8535600160a060020a039081166020880135919091161415611dc5576040805160e560020a62461bcd02815260206004820152602d60248201527f4465706f7369746f7220616e642062656e65666963696172792063616e206e6f60448201527f74206265207468652073616d6500000000000000000000000000000000000000606482015290519081900360840190fd5b841515611e1c576040805160e560020a62461bcd02815260206004820152601360248201527f6465616c2063616e206e6f742062652030783000000000000000000000000000604482015290519081900360640190fd5b831515611e73576040805160e560020a62461bcd02815260206004820152601360248201527f616d6f756e742063616e206e6f74206265203000000000000000000000000000604482015290519081900360640190fd5b604080516060818101909252611e9f918890600390839083908082843782019150505050508686612163565b9150611eac8260006135dc565b600154604080517f91967c5a000000000000000000000000000000000000000000000000000000008152600160a060020a039092166004830152517337ca21783f23ac3455c97deea6484ae4a2571835916391967c5a916024808301926020929190829003018186803b158015611f2257600080fd5b505af4158015611f36573d6000803e3d6000fd5b505050506040513d6020811015611f4c57600080fd5b505160018054604080517fde67ede8000000000000000000000000000000000000000000000000000000008152600160a060020a0390921660048301526024820186905260ff841660448301526064820192909252851515608482015290519192507370edf62a31c67116e2c1abdd16721dcefbd40b7c9163de67ede89160a480820192600092909190829003018186803b158015611fea57600080fd5b505af4158015611ffe573d6000803e3d6000fd5b505060408051858152600160a060020a038a3581166020808401919091528b01358116828401528a8301351660608201526080810189905260a0810188905260ff851660c082015286151560e082015290517ff098beb13feecb1bacbeca5ff3775821b39fd983eeea937f7dc5a65579dc0983935090819003610100019150a1505050505050565b600054600160a060020a0316331461209d57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600061212684600380602002604051908101604052809291908260036020028082843750506040805160608181019092528994508893506121219250908a906003908390839080828437506138999350505050565b613d70565b6040805182815290519192507f081f8f8f13cad6992091771c1f78fd7a439a16c4d4e6c83216da37aaeb6cbb73919081900360200190a150505050565b60007370edf62a31c67116e2c1abdd16721dcefbd40b7c636b5a8d4e8585856040518463ffffffff1660e060020a0281526004018084600360200280838360005b838110156121bc5781810151838201526020016121a4565b505050509050018360001916600019168152602001828152602001935050505060206040518083038186803b1580156121f457600080fd5b505af4158015612208573d6000803e3d6000fd5b505050506040513d602081101561221e57600080fd5b5051949350505050565b600354600160a060020a031681565b600054600160a060020a0316331461224e57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600154604080517fd2d55dde000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015291831660248301525160009173115fc6b0c86a064a307206377844b712745c47c09163d2d55dde91604480820192602092909190829003018186803b1580156122ff57600080fd5b505af4158015612313573d6000803e3d6000fd5b505050506040513d602081101561232957600080fd5b505192915050565b600054600160a060020a0316331461234857600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031681565b600154600160a060020a031681565b600054600160a060020a031633146123ac57600080fd5b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290518291600160a060020a038516916370a08231916024808201926020929091908290030181600087803b15801561241057600080fd5b505af1158015612424573d6000803e3d6000fd5b505050506040513d602081101561243a57600080fd5b50511015612492576040805160e560020a62461bcd02815260206004820152601160248201527f4e6f7420656e6f75676820746f6b656e73000000000000000000000000000000604482015290519081900360640190fd5b604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018390529051600160a060020a0384169163a9059cbb9160448083019260209291908290030181600087803b1580156124fa57600080fd5b505af115801561250e573d6000803e3d6000fd5b505050506040513d602081101561252457600080fd5b5051151561253157600080fd5b5050565b600080600080612567876003806020026040519081016040528092919082600360200280828437506137b29350505050565b604080516060818101909252612593918990600390839083908082843782019150505050508787612163565b93506125a08460036135dc565b6001546040805160608181019092527370edf62a31c67116e2c1abdd16721dcefbd40b7c9263583ca3dd92600160a060020a039091169188916125f691908d906003908390839080828437506138999350505050565b6040805160e060020a63ffffffff8716028152600160a060020a03948516600482015260248101939093529216604482015290516064808301926020929190829003018186803b15801561264957600080fd5b505af415801561265d573d6000803e3d6000fd5b505050506040513d602081101561267357600080fd5b505192508215156126f4576040805160e560020a62461bcd02815260206004820152602e60248201527f53656e6465722063616e206e6f742061636365707420616e6f7468657220706160448201527f727479206f66666572206f662030000000000000000000000000000000000000606482015290519081900360840190fd5b5081905080840333600160a060020a036020890135161415612717575050808303815b6040805160608181019092526127579189906003908390839080828437820191505050505060408051908101604052808581526020018481525086613f2a565b604080518581526020810184905280820183905290517f9b11fc121986ae8e0c1c499dbe6d0f4cde998e7f8616207eb0815b89748a2bc49181900360600190a150505050505050565b60008060006127d1866003806020026040519081016040528092919082600360200280828437506137b29350505050565b6040805160608181019092526127fd918890600390839083908082843782019150505050508686612163565b925061280a8360046135dc565b6001546040805160e060020a63e3d79b23028152600160a060020a03909216600483015260248201859052336044830152517370edf62a31c67116e2c1abdd16721dcefbd40b7c9163e3d79b23916064808301926020929190829003018186803b15801561287757600080fd5b505af415801561288b573d6000803e3d6000fd5b505050506040513d60208110156128a157600080fd5b5051156128f8576040805160e560020a62461bcd02815260206004820152601c60248201527f557365722063616e206e6f742077697468647261772074776963652e00000000604482015290519081900360640190fd5b600154604080517f1cbd6150000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015260248201859052336044830152517370edf62a31c67116e2c1abdd16721dcefbd40b7c91631cbd6150916064808301926020929190829003018186803b15801561297b57600080fd5b505af415801561298f573d6000803e3d6000fd5b505050506040513d60208110156129a557600080fd5b505191506129c23383600160a060020a0360408a013516866138c3565b604080518581526020810183905281519294507f6675346cd43846f7d47c310d39fb5c15bc7db66b3770338cdf1f133613a5ae98929081900390910190a160018054604080517f4eb58add000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015260248201869052336044830152606482019290925290517370edf62a31c67116e2c1abdd16721dcefbd40b7c91634eb58add916084808301926000929190829003018186803b158015612a8d57600080fd5b505af4158015612aa1573d6000803e3d6000fd5b50505050612ad1866003806020026040519081016040528092919082600360200280828437506138999350505050565b600154604080517f1cbd6150000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152602481018790529183166044830152519192507370edf62a31c67116e2c1abdd16721dcefbd40b7c91631cbd615091606480820192602092909190829003018186803b158015612b5a57600080fd5b505af4158015612b6e573d6000803e3d6000fd5b505050506040513d6020811015612b8457600080fd5b50511580612c2957506001546040805160e060020a63e3d79b23028152600160a060020a039283166004820152602481018690529183166044830152517370edf62a31c67116e2c1abdd16721dcefbd40b7c9163e3d79b23916064808301926020929190829003018186803b158015612bfc57600080fd5b505af4158015612c10573d6000803e3d6000fd5b505050506040513d6020811015612c2657600080fd5b50515b15612c6d57612c39836006613716565b6040805184815290517f68220abc28c532fc63aabe5cfeff203d97feef456c085adc687630a7d7d6fc839181900360200190a15b505050505050565b600254600160a060020a031681565b6000612cb78460038060200260405190810160405280929190826003602002808284378201915050505050848433613d70565b6040805182815290519192507f2a06c2b0c62191099c445efebca8160d9c6e229eca288dc0c8927dfeb145d9c7919081900360200190a150505050565b600054600160a060020a03163314612d0b57600080fd5b3031811115612d1957600080fd5b604051339082156108fc029083906000818181858888f19350505050158015612531573d6000803e3d6000fd5b60008054600160a060020a03163314612d5e57600080fd5b600154604080517fd2d55dde000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015291841660248301525173115fc6b0c86a064a307206377844b712745c47c09163d2d55dde916044808301926020929190829003018186803b158015612ddc57600080fd5b505af4158015612df0573d6000803e3d6000fd5b505050506040513d6020811015612e0657600080fd5b505190506000811015612e63576040805160e560020a62461bcd02815260206004820152601c60248201527f43616e206e6f74207769746864726177203020746f74616c2066656500000000604482015290519081900360640190fd5b600160a060020a0382161515612f6957600354604080517f1b9a91a4000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301526024820185905291519190921691631b9a91a49160448083019260209291908290030181600087803b158015612ee257600080fd5b505af1158015612ef6573d6000803e3d6000fd5b505050506040513d6020811015612f0c57600080fd5b50511515612f64576040805160e560020a62461bcd02815260206004820152601960248201527f4572726f7220647572696e672077697468647261772045544800000000000000604482015290519081900360640190fd5b613062565b600354604080517f3ccdbb28000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015260248201859052858116604483015291519190921691633ccdbb289160648083019260209291908290030181600087803b158015612fe057600080fd5b505af1158015612ff4573d6000803e3d6000fd5b505050506040513d602081101561300a57600080fd5b50511515613062576040805160e560020a62461bcd02815260206004820152601b60248201527f4572726f7220647572696e6720776974686472617720546f6b656e0000000000604482015290519081900360640190fd5b600154604080517f943a92af000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526000602482018190529285166044820152905173115fc6b0c86a064a307206377844b712745c47c09263943a92af9260648082019391829003018186803b1580156130e657600080fd5b505af41580156130fa573d6000803e3d6000fd5b50505050505050565b600061313184600380602002604051908101604052809291908260036020028082843750613d689350505050565b60408051606081810190925261315d918690600390839083908082843782019150505050508484612163565b905061316a8160036135dc565b6040805160608181019092526131a99186906003908390839080828437505060408051808201909152878152600060208201529250859150613f2a9050565b6040805182815290517fc21bc94c1b5d9d43bbd526118faff1ad8ff9147b010a5308c667a679c4309ea39181900360200190a150505050565b600080613211866003806020026040519081016040528092919082600360200280828437506137b29350505050565b600083101580156132225750838311155b151561329e576040805160e560020a62461bcd02815260206004820152602f60248201527f4f6666657220616d6f756e74206d757374206265203e3d203020616e64203c3d60448201527f207061796d656e7420616d6f756e740000000000000000000000000000000000606482015290519081900360840190fd5b6040805160608181019092526132ca918890600390839083908082843782019150505050508686612163565b6001546040805160608181019092529294507370edf62a31c67116e2c1abdd16721dcefbd40b7c9263583ca3dd92600160a060020a0316918691613320918c906003908390839080828437506138999350505050565b6040805160e060020a63ffffffff8716028152600160a060020a03948516600482015260248101939093529216604482015290516064808301926020929190829003018186803b15801561337357600080fd5b505af4158015613387573d6000803e3d6000fd5b505050506040513d602081101561339d57600080fd5b505190508015613443576040805160e560020a62461bcd02815260206004820152604360248201527f53656e6465722063616e206e6f74206d616b65206f6666657220696620616e6f60448201527f746865722070617274792068617320646f6e65207468652073616d652062656660648201527f6f72650000000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600154604080517f84fd164b000000000000000000000000000000000000000000000000000000008152600160a060020a0390921660048301526024820184905233604483015260648201859052517370edf62a31c67116e2c1abdd16721dcefbd40b7c916384fd164b916084808301926000929190829003018186803b1580156134cd57600080fd5b505af41580156134e1573d6000803e3d6000fd5b5050604080518581526020810187905281517f87c801e0682b2eae974160fe106ed40041a03f8111fabdd5a9073c943419092a9450908190039091019150a1505050505050565b600054600160a060020a0316331461353f57600080fd5b600160a060020a038116151561355457600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b8060015b6020020151600160a060020a031633146135d957600080fd5b50565b8060078111156135e857fe5b600154604080517fac21e60a000000000000000000000000000000000000000000000000000000008152600160a060020a039092166004830152602482018590525160ff92909216917370edf62a31c67116e2c1abdd16721dcefbd40b7c9163ac21e60a916044808301926020929190829003018186803b15801561366c57600080fd5b505af4158015613680573d6000803e3d6000fd5b505050506040513d602081101561369657600080fd5b505160ff1614612531576040805160e560020a62461bcd02815260206004820152602960248201527f52657175697265642073746174757320646f6573206e6f74206d61746368206160448201527f637475616c206f6e650000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6001547370edf62a31c67116e2c1abdd16721dcefbd40b7c90637011660790600160a060020a03168484600781111561374b57fe5b6040805160e060020a63ffffffff8716028152600160a060020a039094166004850152602484019290925260ff166044830152516064808301926000929190829003018186803b15801561379e57600080fd5b505af4158015612c6d573d6000803e3d6000fd5b8051600160a060020a03163314806137cd57508060016135c0565b15156135d957600080fd5b600154604080517fac21e60a000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015260248201839052516000917370edf62a31c67116e2c1abdd16721dcefbd40b7c9163ac21e60a91604480820192602092909190829003018186803b15801561385957600080fd5b505af415801561386d573d6000803e3d6000fd5b505050506040513d602081101561388357600080fd5b505160ff16600781111561389357fe5b92915050565b8051600090600160a060020a031633146138b4578151613893565b8160015b602002015192915050565b600080841515613943576040805160e560020a62461bcd02815260206004820152603d60248201527f54686572652069732073656e736520746f20696e766f6b652074686973206d6560448201527f74686f6420696620776974686472617720616d6f756e7420697320302e000000606482015290519081900360840190fd5b600154604080517fc1c8bbff000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015260248201859052516139c69187917370edf62a31c67116e2c1abdd16721dcefbd40b7c9163c1c8bbff916044808301926020929190829003018186803b15801561116957600080fd5b600154604080517fbac9b405000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015260248201869052518794509192507370edf62a31c67116e2c1abdd16721dcefbd40b7c9163bac9b40591604480820192602092909190829003018186803b158015613a4a57600080fd5b505af4158015613a5e573d6000803e3d6000fd5b505050506040513d6020811015613a7457600080fd5b50511515613a825780850391505b613a8d868386613b58565b6000811115613b3457600154604080517fb8adfa49000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810184905291861660448301525173115fc6b0c86a064a307206377844b712745c47c09163b8adfa49916064808301926000929190829003018186803b158015613b1b57600080fd5b505af4158015613b2f573d6000803e3d6000fd5b505050505b50949350505050565b606491020490565b600081816138b8565b60008160026138b8565b811515613b6457613d63565b600160a060020a0381161515613c6a57600354604080517f1b9a91a4000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301526024820186905291519190921691631b9a91a49160448083019260209291908290030181600087803b158015613be357600080fd5b505af1158015613bf7573d6000803e3d6000fd5b505050506040513d6020811015613c0d57600080fd5b50511515613c65576040805160e560020a62461bcd02815260206004820152601960248201527f4572726f7220647572696e672077697468647261772045544800000000000000604482015290519081900360640190fd5b613d63565b600354604080517f3ccdbb28000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015260248201869052848116604483015291519190921691633ccdbb289160648083019260209291908290030181600087803b158015613ce157600080fd5b505af1158015613cf5573d6000803e3d6000fd5b505050506040513d6020811015613d0b57600080fd5b50511515613d63576040805160e560020a62461bcd02815260206004820152601b60248201527f4572726f7220647572696e6720776974686472617720546f6b656e0000000000604482015290519081900360640190fd5b505050565b8060006135c0565b600080613d7c866137b2565b613d87868686612163565b9150613d948260036135dc565b600154604080517f583ca3dd000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152602481018590529185166044830152517370edf62a31c67116e2c1abdd16721dcefbd40b7c9163583ca3dd916064808301926020929190829003018186803b158015613e1957600080fd5b505af4158015613e2d573d6000803e3d6000fd5b505050506040513d6020811015613e4357600080fd5b50519050801515613e9e576040805160e560020a62461bcd02815260206004820181905260248201527f53656e6465722063616e206e6f742063616e63656c206f66666572206f662030604482015290519081900360640190fd5b600154604080517f84fd164b000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015260248101859052918516604483015260006064830181905290517370edf62a31c67116e2c1abdd16721dcefbd40b7c926384fd164b926084808301939192829003018186803b158015613b1b57600080fd5b613f35816004613716565b6001547370edf62a31c67116e2c1abdd16721dcefbd40b7c90636430435190600160a060020a031683613f6787614072565b86516040805163ffffffff871660e060020a028152600160a060020a0395861660048201526024810194909452919093166044830152606482019290925290516084808301926000929190829003018186803b158015613fc657600080fd5b505af4158015613fda573d6000803e3d6000fd5b50506001547370edf62a31c67116e2c1abdd16721dcefbd40b7c925063643043519150600160a060020a03168361401087613b45565b60208701516040805163ffffffff871660e060020a028152600160a060020a0395861660048201526024810194909452919093166044830152606482019290925290516084808301926000929190829003018186803b1580156130e657600080fd5b60008160016138b8565b604080518082018252906002908290803883395091929150505600a165627a7a72305820c053bb28cbd7b99d08c35bf6cb2170f16628a13c341e169d2841329e4c5b8ef300290000000000000000000000007a690e2f34cf4277a15733d926926f39810635a7000000000000000000000000a40a4959b20f565d371ef8967604c76560896c64000000000000000000000000df7b14d1101e22d502234240385dd72f05cfc0d2",
  "constructorArguments": "0000000000000000000000007a690e2f34cf4277a15733d926926f39810635a7000000000000000000000000a40a4959b20f565d371ef8967604c76560896c64000000000000000000000000df7b14d1101e22d502234240385dd72f05cfc0d2",
  "libraries": [
    {
      "name": "PaymentLib",
      "address": "0x70edf62a31c67116e2c1abdd16721dcefbd40b7c"
    },
    {
      "name": "EscrowConfigLib",
      "address": "0x37ca21783f23ac3455c97deea6484ae4a2571835"
    },
    {
      "name": "FeeLib",
      "address": "0x115fc6b0c86a064a307206377844b712745c47c0"
    }
  ]
}