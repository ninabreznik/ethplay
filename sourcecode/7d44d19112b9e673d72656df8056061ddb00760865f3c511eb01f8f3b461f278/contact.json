{
  "address": "0x7434ec6cfc9d511baa76772188004529d4324342",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "StubeeEduCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-19\n*/\n\npragma solidity ^0.4.24;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract StubeeEduCoin {\n    // Public variables of the token\n    // 토큰의 공용 변수\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    // 18개의 소수점이 강하게 제안된 기본값입니다. 변경하지 마십시오.\n\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    // 이렇게 하면 모든 밸런스를 가진 배열이 만들어집니다.\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    // 이렇게 하면 블록체인에 대해 고객에게 알릴 공개 이벤트가 생성됩니다.\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    // This generates a public event on the blockchain that will notify clients\n    // 이렇게 하면 블록체인에 대해 고객에게 알릴 공개 이벤트가 생성됩니다.\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    // This notifies clients about the amount burnt\n    // 이는 고객에게 연소된 양을 알려줍니다.\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constructor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     * 계약 작성자에게 초기 공급 토큰과 계약을 초기화합니다.\n     */\n    constructor (\n        address fromAdd,\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n\n        // Update total supply with the decimal amount\n        // 총 공급량을 십진수로 업데이트합니다.\n        totalSupply = initialSupply * 10 ** uint256(decimals);  \n        \n        // Give the creator all initial tokens\n        // 작성자에게 모든 초기 토큰 제공\n        balanceOf[fromAdd] = totalSupply;                \n\n        // Set the name for display purposes\n        // 표시에 사용할 이름 설정\n        name = tokenName;        \n\n        // Set the symbol for display purposes\n        // 표시 용도의 기호 설정                           \n        symbol = tokenSymbol;                               \n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     * 내부 이전, 이 계약에서만 호출할 수 있습니다.\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n\n        // Prevent transfer to 0x0 address. Use burn() instead\n        // 0x0 주소로 전송하지 마십시오. 대신 굽기()를 사용합니다.\n        require(_to != 0x0);\n\n\n        // Check if the sender has enough\n        // 발신인이 충분한지 확인\n        require(balanceOf[_from] >= _value);\n\n\n        // Check for overflows\n        // 오버플로우 확인\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n\n\n        // Save this for an assertion in the future\n        // 향후 주장을 위해 저장\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n\n\n        // Subtract from the sender\n        // 발신자에서 빼기\n        balanceOf[_from] -= _value;\n\n\n        // Add the same to the recipient\n        // 수신자에게 동일한 항목 추가\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n\n\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        // 명령어는 정적 분석을 사용하여 코드의 버그를 찾는 데 사용됩니다. 그들은 절대 실패해서는 안된다.\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     * 당신의 계정에서 '_value' 토큰을 '_to'로 보냅니다.\n     *\n     * @param _to The address of the recipient(받는 사람의 주소)\n     * @param _value the amount to send (송금액)\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` on behalf of `_from`\n     * '_from' 대신 `_value`토큰을 `_to`로 보냅니다.\n     *\n     * @param _from The address of the sender(보낸 사람의 주소)\n     * @param _to The address of the recipient(받는 사람의 주소)\n     * @param _value the amount to send(발송액)\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance(수당)\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n     * `_spender`에서 귀하를 대신하여 `_value` 토큰만 사용하도록 허용합니다.\n     *\n     * @param _spender The address authorized to spend(사용 허가된 주소)\n     * @param _value the max amount they can spend(그들이 지출할 수 있는 최대액)\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n     * `_spender`가 귀하를 대신하여 `_value` 토큰을 사용한 후 계약을 할 수 있도록 허용\n     *\n     * @param _spender The address authorized to spend(사용 허가된 주소)\n     * @param _value the max amount they can spend(그들이 지출할 수 있는 최대액)\n     * @param _extraData some extra information to send to the approved contract(승인된 계약에 보낼 추가 정보)\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     * 시스템에서 `_value` 토큰을 복구할 수 없게 제거\n     *\n     * @param _value the amount of money to burn(태울 돈)\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough(보낸 사람이 충분한지 확인)\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender(보낸 사람에서 차감)\n        totalSupply -= _value;                      // Updates totalSupply(총긍급량 업데이트)\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     * `_from`대신하여 시스템에서 `_value` 토큰을 복구할 수 없게 제거\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough(목표 잔액이 충분한 지 확인)\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance(수당 확인)\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance(목표 잔액에서 차감)\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance(보낸 사람 수당에서 차감)\n        totalSupply -= _value;                              // Update totalSupply(총긍급량 업데이트)\n        emit Burn(_from, _value);\n        return true;\n    }\n}",
  "bytecode": "60806040526002805460ff1916601217905534801561001d57600080fd5b50604051610a1a380380610a1a833981016040908152815160208084015183850151606086015160025460ff16600a0a83026003819055600160a060020a03861660009081526004865296872055908601805194969295909491909201926100899291908501906100a7565b50805161009d9060019060208401906100a7565b5050505050610142565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e857805160ff1916838001178555610115565b82800160010185558215610115579182015b828111156101155782518255916020019190600101906100fa565b50610121929150610125565b5090565b61013f91905b80821115610121576000815560010161012b565b90565b6108c9806101516000396000f3006080604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100be578063095ea7b31461014857806318160ddd1461018057806323b872dd146101a7578063313ce567146101d157806342966c68146101fc57806370a082311461021457806379cc67901461023557806395d89b4114610259578063a9059cbb1461026e578063cae9ca5114610292578063dd62ed3e146102fb575b600080fd5b3480156100ca57600080fd5b506100d3610322565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561010d5781810151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015457600080fd5b5061016c600160a060020a03600435166024356103b0565b604080519115158252519081900360200190f35b34801561018c57600080fd5b50610195610416565b60408051918252519081900360200190f35b3480156101b357600080fd5b5061016c600160a060020a036004358116906024351660443561041c565b3480156101dd57600080fd5b506101e661048b565b6040805160ff9092168252519081900360200190f35b34801561020857600080fd5b5061016c600435610494565b34801561022057600080fd5b50610195600160a060020a036004351661050c565b34801561024157600080fd5b5061016c600160a060020a036004351660243561051e565b34801561026557600080fd5b506100d36105ef565b34801561027a57600080fd5b5061016c600160a060020a0360043516602435610649565b34801561029e57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261016c948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061065f9650505050505050565b34801561030757600080fd5b50610195600160a060020a0360043581169060243516610778565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103a85780601f1061037d576101008083540402835291602001916103a8565b820191906000526020600020905b81548152906001019060200180831161038b57829003601f168201915b505050505081565b336000818152600560209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60035481565b600160a060020a038316600090815260056020908152604080832033845290915281205482111561044c57600080fd5b600160a060020a0384166000908152600560209081526040808320338452909152902080548390039055610481848484610795565b5060019392505050565b60025460ff1681565b336000908152600460205260408120548211156104b057600080fd5b3360008181526004602090815260409182902080548690039055600380548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b60046020526000908152604090205481565b600160a060020a03821660009081526004602052604081205482111561054357600080fd5b600160a060020a038316600090815260056020908152604080832033845290915290205482111561057357600080fd5b600160a060020a0383166000818152600460209081526040808320805487900390556005825280832033845282529182902080548690039055600380548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a250600192915050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103a85780601f1061037d576101008083540402835291602001916103a8565b6000610656338484610795565b50600192915050565b60008361066c81856103b0565b15610770576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b838110156107045781810151838201526020016106ec565b50505050905090810190601f1680156107315780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561075357600080fd5b505af1158015610767573d6000803e3d6000fd5b50505050600191505b509392505050565b600560209081526000928352604080842090915290825290205481565b6000600160a060020a03831615156107ac57600080fd5b600160a060020a0384166000908152600460205260409020548211156107d157600080fd5b600160a060020a03831660009081526004602052604090205482810110156107f857600080fd5b50600160a060020a038083166000818152600460209081526040808320805495891680855282852080548981039091559486905281548801909155815187815291519390950194927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600160a060020a0380841660009081526004602052604080822054928716825290205401811461089757fe5b505050505600a165627a7a723058202dacbf3a567560cccffb48bb3c59d955ffb3604262e607716ad9e60a39d4107c00290000000000000000000000003fef120cfae105682d7b8c7d60c4aa00cc97a21300000000000000000000000000000000000000000000000000000006fc23ac00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000f5354554245452045445520434f494e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035345430000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000003fef120cfae105682d7b8c7d60c4aa00cc97a21300000000000000000000000000000000000000000000000000000006fc23ac00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000f5354554245452045445520434f494e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035345430000000000000000000000000000000000000000000000000000000000"
}