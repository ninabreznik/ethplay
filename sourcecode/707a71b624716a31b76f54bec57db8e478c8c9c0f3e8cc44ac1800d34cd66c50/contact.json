{
  "address": "0x7c33f3d417ef65a5299998bf7bbd35921963336c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "FriendNetwork: Token Sale",
  "contractName": "FNTCrowdsale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-22\n*/\n\n/*************************************************************************\n * This contract has been merged with solidify\n * https://github.com/tiesnetwork/solidify\n *************************************************************************/\n \n pragma solidity ^0.4.18;\n\n\n/*************************************************************************\n * import \"zeppelin-solidity/contracts/token/TokenTimelock.sol\" : start\n *************************************************************************/\n\n\n/*************************************************************************\n * import \"./ERC20Basic.sol\" : start\n *************************************************************************/\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n/*************************************************************************\n * import \"./ERC20Basic.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"../token/SafeERC20.sol\" : start\n *************************************************************************/\n\n\n/*************************************************************************\n * import \"./ERC20.sol\" : start\n *************************************************************************/\n\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n/*************************************************************************\n * import \"./ERC20.sol\" : end\n *************************************************************************/\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n/*************************************************************************\n * import \"../token/SafeERC20.sol\" : end\n *************************************************************************/\n\n/**\n * @title TokenTimelock\n * @dev TokenTimelock is a token holder contract that will allow a\n * beneficiary to extract the tokens after a given release time\n */\ncontract TokenTimelock {\n  using SafeERC20 for ERC20Basic;\n\n  // ERC20 basic token contract being held\n  ERC20Basic public token;\n\n  // beneficiary of tokens after they are released\n  address public beneficiary;\n\n  // timestamp when token release is enabled\n  uint256 public releaseTime;\n\n  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n    require(_releaseTime > now);\n    token = _token;\n    beneficiary = _beneficiary;\n    releaseTime = _releaseTime;\n  }\n\n  /**\n   * @notice Transfers tokens held by timelock to beneficiary.\n   */\n  function release() public {\n    require(now >= releaseTime);\n\n    uint256 amount = token.balanceOf(this);\n    require(amount > 0);\n\n    token.safeTransfer(beneficiary, amount);\n  }\n}\n/*************************************************************************\n * import \"zeppelin-solidity/contracts/token/TokenTimelock.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"./FNTRefundableCrowdsale.sol\" : start\n *************************************************************************/\n\n/*************************************************************************\n * import \"zeppelin-solidity/contracts/crowdsale/RefundableCrowdsale.sol\" : start\n *************************************************************************/\n\n\n/*************************************************************************\n * import \"../math/SafeMath.sol\" : start\n *************************************************************************/\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n/*************************************************************************\n * import \"../math/SafeMath.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"./FinalizableCrowdsale.sol\" : start\n *************************************************************************/\n\n\n/*************************************************************************\n * import \"../ownership/Ownable.sol\" : start\n *************************************************************************/\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n/*************************************************************************\n * import \"../ownership/Ownable.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"./Crowdsale.sol\" : start\n *************************************************************************/\n\n/*************************************************************************\n * import \"../token/MintableToken.sol\" : start\n *************************************************************************/\n\n\n/*************************************************************************\n * import \"./StandardToken.sol\" : start\n *************************************************************************/\n\n\n/*************************************************************************\n * import \"./BasicToken.sol\" : start\n *************************************************************************/\n\n\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n/*************************************************************************\n * import \"./BasicToken.sol\" : end\n *************************************************************************/\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n/*************************************************************************\n * import \"./StandardToken.sol\" : end\n *************************************************************************/\n\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n/*************************************************************************\n * import \"../token/MintableToken.sol\" : end\n *************************************************************************/\n\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet\n * as they arrive.\n */\ncontract Crowdsale {\n  using SafeMath for uint256;\n\n  // The token being sold\n  MintableToken public token;\n\n  // start and end timestamps where investments are allowed (both inclusive)\n  uint256 public startTime;\n  uint256 public endTime;\n\n  // address where funds are collected\n  address public wallet;\n\n  // how many token units a buyer gets per wei\n  uint256 public rate;\n\n  // amount of raised money in wei\n  uint256 public weiRaised;\n\n  /**\n   * event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n    require(_startTime >= now);\n    require(_endTime >= _startTime);\n    require(_rate > 0);\n    require(_wallet != address(0));\n\n    token = createTokenContract();\n    startTime = _startTime;\n    endTime = _endTime;\n    rate = _rate;\n    wallet = _wallet;\n  }\n\n  // creates the token to be sold.\n  // override this method to have crowdsale of a specific mintable token.\n  function createTokenContract() internal returns (MintableToken) {\n    return new MintableToken();\n  }\n\n\n  // fallback function can be used to buy tokens\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  // low level token purchase function\n  function buyTokens(address beneficiary) public payable {\n    require(beneficiary != address(0));\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n\n    // calculate token amount to be created\n    uint256 tokens = weiAmount.mul(rate);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    token.mint(beneficiary, tokens);\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n    forwardFunds();\n  }\n\n  // send ether to the fund collection wallet\n  // override to create custom fund forwarding mechanisms\n  function forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n\n  // @return true if the transaction can buy tokens\n  function validPurchase() internal view returns (bool) {\n    bool withinPeriod = now >= startTime && now <= endTime;\n    bool nonZeroPurchase = msg.value != 0;\n    return withinPeriod && nonZeroPurchase;\n  }\n\n  // @return true if crowdsale event has ended\n  function hasEnded() public view returns (bool) {\n    return now > endTime;\n  }\n\n\n}\n/*************************************************************************\n * import \"./Crowdsale.sol\" : end\n *************************************************************************/\n\n/**\n * @title FinalizableCrowdsale\n * @dev Extension of Crowdsale where an owner can do extra work\n * after finishing.\n */\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\n  using SafeMath for uint256;\n\n  bool public isFinalized = false;\n\n  event Finalized();\n\n  /**\n   * @dev Must be called after crowdsale ends, to do some extra finalization\n   * work. Calls the contract's finalization function.\n   */\n  function finalize() onlyOwner public {\n    require(!isFinalized);\n    require(hasEnded());\n\n    finalization();\n    Finalized();\n\n    isFinalized = true;\n  }\n\n  /**\n   * @dev Can be overridden to add finalization logic. The overriding function\n   * should call super.finalization() to ensure the chain of finalization is\n   * executed entirely.\n   */\n  function finalization() internal {\n  }\n}\n/*************************************************************************\n * import \"./FinalizableCrowdsale.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"./RefundVault.sol\" : start\n *************************************************************************/\n\n\n\n\n/**\n * @title RefundVault\n * @dev This contract is used for storing funds while a crowdsale\n * is in progress. Supports refunding the money if crowdsale fails,\n * and forwarding it if crowdsale is successful.\n */\ncontract RefundVault is Ownable {\n  using SafeMath for uint256;\n\n  enum State { Active, Refunding, Closed }\n\n  mapping (address => uint256) public deposited;\n  address public wallet;\n  State public state;\n\n  event Closed();\n  event RefundsEnabled();\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\n\n  function RefundVault(address _wallet) public {\n    require(_wallet != address(0));\n    wallet = _wallet;\n    state = State.Active;\n  }\n\n  function deposit(address investor) onlyOwner public payable {\n    require(state == State.Active);\n    deposited[investor] = deposited[investor].add(msg.value);\n  }\n\n  function close() onlyOwner public {\n    require(state == State.Active);\n    state = State.Closed;\n    Closed();\n    wallet.transfer(this.balance);\n  }\n\n  function enableRefunds() onlyOwner public {\n    require(state == State.Active);\n    state = State.Refunding;\n    RefundsEnabled();\n  }\n\n  function refund(address investor) public {\n    require(state == State.Refunding);\n    uint256 depositedValue = deposited[investor];\n    deposited[investor] = 0;\n    investor.transfer(depositedValue);\n    Refunded(investor, depositedValue);\n  }\n}\n/*************************************************************************\n * import \"./RefundVault.sol\" : end\n *************************************************************************/\n\n\n/**\n * @title RefundableCrowdsale\n * @dev Extension of Crowdsale contract that adds a funding goal, and\n * the possibility of users getting a refund if goal is not met.\n * Uses a RefundVault as the crowdsale's vault.\n */\ncontract RefundableCrowdsale is FinalizableCrowdsale {\n  using SafeMath for uint256;\n\n  // minimum amount of funds to be raised in weis\n  uint256 public goal;\n\n  // refund vault used to hold funds while crowdsale is running\n  RefundVault public vault;\n\n  function RefundableCrowdsale(uint256 _goal) public {\n    require(_goal > 0);\n    vault = new RefundVault(wallet);\n    goal = _goal;\n  }\n\n  // We're overriding the fund forwarding from Crowdsale.\n  // In addition to sending the funds, we want to call\n  // the RefundVault deposit function\n  function forwardFunds() internal {\n    vault.deposit.value(msg.value)(msg.sender);\n  }\n\n  // if crowdsale is unsuccessful, investors can claim refunds here\n  function claimRefund() public {\n    require(isFinalized);\n    require(!goalReached());\n\n    vault.refund(msg.sender);\n  }\n\n  // vault finalization task, called when owner calls finalize()\n  function finalization() internal {\n    if (goalReached()) {\n      vault.close();\n    } else {\n      vault.enableRefunds();\n    }\n\n    super.finalization();\n  }\n\n  function goalReached() public view returns (bool) {\n    return weiRaised >= goal;\n  }\n\n}\n/*************************************************************************\n * import \"zeppelin-solidity/contracts/crowdsale/RefundableCrowdsale.sol\" : end\n *************************************************************************/\n\n\n/**\n * @title FNTRefundableCrowdsale\n * @dev Extension of teh RefundableCrowdsale form zeppelin to allow vault to be\n * closed once soft cap is reached\n */\ncontract FNTRefundableCrowdsale is RefundableCrowdsale {\n\n  // if the vault was closed before finalization\n  bool public vaultClosed = false;\n\n  // close vault call\n  function closeVault() public onlyOwner {\n    require(!vaultClosed);\n    require(goalReached());\n    vault.close();\n    vaultClosed = true;\n  }\n\n  // We're overriding the fund forwarding from Crowdsale.\n  // In addition to sending the funds, we want to call\n  // the RefundVault deposit function if the vault is not closed,\n  // if it is closed we forward teh funds to the wallet\n  function forwardFunds() internal {\n    if (!vaultClosed) {\n      vault.deposit.value(msg.value)(msg.sender);\n    } else {\n      wallet.transfer(msg.value);\n    }\n  }\n\n  // vault finalization task, called when owner calls finalize()\n  function finalization() internal {\n    if (!vaultClosed && goalReached()) {\n      vault.close();\n      vaultClosed = true;\n    } else if (!goalReached()) {\n      vault.enableRefunds();\n    }\n  }\n}\n/*************************************************************************\n * import \"./FNTRefundableCrowdsale.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"./FNTToken.sol\" : start\n *************************************************************************/\n\n\n/*************************************************************************\n * import \"zeppelin-solidity/contracts/token/BurnableToken.sol\" : start\n *************************************************************************/\n\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n}\n/*************************************************************************\n * import \"zeppelin-solidity/contracts/token/BurnableToken.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"zeppelin-solidity/contracts/token/PausableToken.sol\" : start\n *************************************************************************/\n\n\n/*************************************************************************\n * import \"../lifecycle/Pausable.sol\" : start\n *************************************************************************/\n\n\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n/*************************************************************************\n * import \"../lifecycle/Pausable.sol\" : end\n *************************************************************************/\n\n/**\n * @title Pausable token\n *\n * @dev StandardToken modified with pausable transfers.\n **/\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n/*************************************************************************\n * import \"zeppelin-solidity/contracts/token/PausableToken.sol\" : end\n *************************************************************************/\n\n/**\n   @title FNTToken, the Friend token\n\n   Implementation of FRND, the ERC20 token for Friend, with extra methods\n   to transfer value and data to execute a call on transfer.\n   Uses OpenZeppelin BurnableToken, MintableToken and PausableToken.\n */\ncontract FNTToken is BurnableToken, MintableToken, PausableToken {\n  // Token Name\n  string public constant NAME = \"Friend Network Token\";\n\n  // Token Symbol\n  string public constant SYMBOL = \"FRND\";\n\n  // Token decimals\n  uint8 public constant DECIMALS = 18;\n\n}\n/*************************************************************************\n * import \"./FNTToken.sol\" : end\n *************************************************************************/\n\n/**\n * @title FNTCrowdsale\n * @dev The crowdsale of the Firend Token network\n * The Friend token network will have a max total supply of 2000000000\n * The minimun cap for the sale is 25000 ETH\n * The crowdsale is capped in tokens total supply\n * If the minimun cap is not reached the ETH raised is returned\n */\ncontract FNTCrowdsale is FNTRefundableCrowdsale {\n\n  uint256 public maxICOSupply;\n\n  uint256 public maxTotalSupply;\n\n  uint256 public minFunding;\n\n  uint256 public mediumFunding;\n\n  uint256 public highFunding;\n\n  uint256 public presaleWei;\n\n  address public teamAddress;\n\n  address public FSNASAddress;\n\n  mapping(address => bool) public whitelist;\n\n  event WhitelistedAddressAdded(address addr);\n  event WhitelistedAddressRemoved(address addr);\n  event VestedTeamTokens(address first, address second, address thrid, address fourth);\n\n  /**\n   * @dev Throws if called by any account that's not whitelisted.\n   */\n  modifier onlyWhitelisted() {\n    require(whitelist[msg.sender]);\n    _;\n  }\n\n  /**\n   * @dev Constructor\n   * Creates a Refundable Crowdsale and set the funding, max supply and addresses\n   * to distribute tokens at the end of the crowdsale.\n   * @param _startTime address, when the crowdsale starts\n   * @param _endTime address, when the crowdsale ends\n   * @param _rate address, crowdsale rate without bonus\n   * @param _minFunding address, soft cap\n   * @param _mediumFunding address, medium funding stage\n   * @param _highFunding address, high funding stage\n   * @param _wallet address, wallet to receive ETH raised\n   * @param _maxTotalSupply address, maximun token supply\n   * @param _teamAddress address, team's address\n   * @param _FSNASAddress address, fsnas address\n   */\n  function FNTCrowdsale(\n    uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _minFunding,\n    uint256 _mediumFunding, uint256 _highFunding, address _wallet,\n    uint256 _maxTotalSupply, address _teamAddress, address _FSNASAddress\n  ) public\n    RefundableCrowdsale(_minFunding)\n    Crowdsale(_startTime, _endTime, _rate, _wallet)\n  {\n    require(_maxTotalSupply > 0);\n    require(_minFunding > 0);\n    require(_mediumFunding > _minFunding);\n    require(_highFunding > _mediumFunding);\n    require(_teamAddress != address(0));\n    require(_FSNASAddress != address(0));\n    minFunding = _minFunding;\n    mediumFunding = _mediumFunding;\n    highFunding = _highFunding;\n    maxTotalSupply = _maxTotalSupply;\n    maxICOSupply = maxTotalSupply.mul(82).div(100);\n    teamAddress = _teamAddress;\n    FSNASAddress = _FSNASAddress;\n    FNTToken(token).pause();\n  }\n\n  // Internal function that returns a MintableToken, FNTToken is mintable\n  function createTokenContract() internal returns (MintableToken) {\n    return new FNTToken();\n  }\n\n  /**\n   * @dev Buy tokens fallback function, overrides zeppelin buyTokens function\n   * @param beneficiary address, the address that will receive the tokens\n   *\n   * ONLY send from a ERC20 compatible wallet like myetherwallet.com\n   *\n   */\n  function buyTokens(address beneficiary) public onlyWhitelisted payable {\n    require(beneficiary != address(0));\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n\n    // calculate token amount to be created\n    uint256 tokens = 0;\n    if (weiRaised < minFunding) {\n\n      // If the weiRaised go from less than min funding to more than high funding\n      if (weiRaised.add(weiAmount) > highFunding) {\n        tokens = minFunding.sub(weiRaised)\n          .mul(rate).mul(115).div(100);\n        tokens = tokens.add(\n          mediumFunding.sub(minFunding).mul(rate).mul(110).div(100)\n        );\n        tokens = tokens.add(\n          highFunding.sub(mediumFunding).mul(rate).mul(105).div(100)\n        );\n        tokens = tokens.add(\n          weiRaised.add(weiAmount).sub(highFunding).mul(rate)\n        );\n\n      // If the weiRaised go from less than min funding to more than medium funding\n      } else if (weiRaised.add(weiAmount) > mediumFunding) {\n        tokens = minFunding.sub(weiRaised)\n          .mul(rate).mul(115).div(100);\n        tokens = tokens.add(\n          mediumFunding.sub(minFunding).mul(rate).mul(110).div(100)\n        );\n        tokens = tokens.add(\n          weiRaised.add(weiAmount).sub(mediumFunding).mul(rate).mul(105).div(100)\n        );\n\n      // If the weiRaised go from less than min funding to more than min funding\n      // but less than medium\n      } else if (weiRaised.add(weiAmount) > minFunding) {\n        tokens = minFunding.sub(weiRaised)\n          .mul(rate).mul(115).div(100);\n        tokens = tokens.add(\n          weiRaised.add(weiAmount).sub(minFunding).mul(rate).mul(110).div(100)\n        );\n\n      // If the weiRaised still continues being less than min funding\n      } else {\n        tokens = weiAmount.mul(rate).mul(115).div(100);\n      }\n\n    } else if ((weiRaised >= minFunding) && (weiRaised < mediumFunding)) {\n\n      // If the weiRaised go from more than min funding and less than min funding\n      // to more than high funding\n      if (weiRaised.add(weiAmount) > highFunding) {\n        tokens = mediumFunding.sub(weiRaised)\n          .mul(rate).mul(110).div(100);\n        tokens = tokens.add(\n          highFunding.sub(mediumFunding).mul(rate).mul(105).div(100)\n        );\n        tokens = tokens.add(\n          weiRaised.add(weiAmount).sub(highFunding).mul(rate)\n        );\n\n      // If the weiRaised go from more than min funding and less than min funding\n      // to more than medium funding\n      } else if (weiRaised.add(weiAmount) > mediumFunding) {\n        tokens = mediumFunding.sub(weiRaised)\n          .mul(rate).mul(110).div(100);\n        tokens = tokens.add(\n          weiRaised.add(weiAmount).sub(mediumFunding).mul(rate).mul(105).div(100)\n        );\n\n      // If the weiRaised still continues being less than medium funding\n      } else {\n        tokens = weiAmount.mul(rate).mul(110).div(100);\n      }\n\n    } else if ((weiRaised >= mediumFunding) && (weiRaised < highFunding)) {\n\n      // If the weiRaised go from more than medium funding and less than high funding\n      // to more than high funding\n      if (weiRaised.add(weiAmount) > highFunding) {\n        tokens = highFunding.sub(weiRaised)\n          .mul(rate).mul(105).div(100);\n        tokens = tokens.add(\n          weiRaised.add(weiAmount).sub(highFunding).mul(rate)\n        );\n\n      // If the weiRaised still continues being less than high funding\n      } else {\n        tokens = weiAmount.mul(rate).mul(105).div(100);\n      }\n\n    // If the weiRaised still continues being more than high funding\n    } else {\n      tokens = weiAmount.mul(rate);\n    }\n\n    // Check not to sold more than maxICOSupply\n    require(token.totalSupply().add(tokens) <= maxICOSupply);\n\n    // Take in count wei received\n    weiRaised = weiRaised.add(weiAmount);\n\n    // Mint the token to the buyer\n    token.mint(beneficiary, tokens);\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n    // Forward funds to vault\n    forwardFunds();\n  }\n\n  /**\n   * @dev Distribute tokens to a batch of addresses, called only by owner\n   * @param addrs address[], the addresses where tokens will be issued\n   * @param values uint256[], the value in wei to be added\n   * @param rate uint256, the rate of tokens per ETH used\n   */\n  function addPresaleTokens(\n    address[] addrs, uint256[] values, uint256 rate\n  ) onlyOwner external {\n    require(now < endTime);\n    require(addrs.length == values.length);\n    require(rate > 0);\n\n    uint256 totalTokens = 0;\n\n    for(uint256 i = 0; i < addrs.length; i ++) {\n      token.mint(addrs[i], values[i].mul(rate));\n      totalTokens = totalTokens.add(values[i].mul(rate));\n\n      // Take in count wei received\n      weiRaised = weiRaised.add(values[i]);\n      presaleWei = presaleWei.add(values[i]);\n    }\n\n    // Check not to issue more than maxICOSupply\n    require(token.totalSupply() <= maxICOSupply);\n  }\n\n  /**\n   * @dev add an address to the whitelist\n   * @param addrs address[] addresses to be added in whitelist\n   */\n  function addToWhitelist(address[] addrs) onlyOwner external {\n    for(uint256 i = 0; i < addrs.length; i ++) {\n      require(!whitelist[addrs[i]]);\n      whitelist[addrs[i]] = true;\n      WhitelistedAddressAdded(addrs[i]);\n    }\n  }\n\n  /**\n   * @dev remove an address from the whitelist\n   * @param addrs address[] addresses to be removed from whitelist\n   */\n  function removeFromWhitelist(address[] addrs) onlyOwner public {\n    for(uint256 i = 0; i < addrs.length; i ++) {\n      require(whitelist[addrs[i]]);\n      whitelist[addrs[i]] = false;\n      WhitelistedAddressRemoved(addrs[i]);\n    }\n  }\n\n\n  /**\n   * @dev Must be called after crowdsale ends, to do some extra finalization\n   * work. Calls the contract's finalization function.\n   */\n  function finalize() onlyOwner public {\n    require(!isFinalized);\n    \n    if( goalReached() )\n    {\n\t    finalization();\n\t    Finalized();\n\t\n\t    isFinalized = true;\n    }\n\telse\n\t{\n\t\tif( hasEnded() )\n\t\t{\n\t\t    vault.enableRefunds();\n\t\t    \n\t\t    Finalized();\n\t\t    isFinalized = true;\n\t\t}\n\t}    \n  }\n\n  /**\n   * @dev Finalize the crowdsale and token minting, and transfer ownership of\n   * the token, can be called only by owner\n   */\n  function finalization() internal {\n    super.finalization();\n\n    // Multiplying tokens sold by 0,219512195122\n    // 18 / 82 = 0,219512195122 , which means that for every token sold in ICO\n    // 0,219512195122 extra tokens will be issued.\n    uint256 extraTokens = token.totalSupply().mul(219512195122).div(1000000000000);\n    uint256 teamTokens = extraTokens.div(3);\n    uint256 FSNASTokens = extraTokens.div(3).mul(2);\n\n    // Mint toke time locks to team\n    TokenTimelock firstBatch = new TokenTimelock(token, teamAddress, now.add(30 days));\n    token.mint(firstBatch, teamTokens.div(2));\n\n    TokenTimelock secondBatch = new TokenTimelock(token, teamAddress, now.add(1 years));\n    token.mint(secondBatch, teamTokens.div(2).div(3));\n\n    TokenTimelock thirdBatch = new TokenTimelock(token, teamAddress, now.add(2 years));\n    token.mint(thirdBatch, teamTokens.div(2).div(3));\n\n    TokenTimelock fourthBatch = new TokenTimelock(token, teamAddress, now.add(3 years));\n    token.mint(fourthBatch, teamTokens.div(2).div(3));\n\n    VestedTeamTokens(firstBatch, secondBatch, thirdBatch, fourthBatch);\n\n    // Mint FSNAS tokens\n    token.mint(FSNASAddress, FSNASTokens);\n\n    // Finsih the minting\n    token.finishMinting();\n\n    // Transfer ownership of token to company wallet\n    token.transferOwnership(wallet);\n\n  }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"closeVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FSNASAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxICOSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"addPresaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mediumFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_minFunding\",\"type\":\"uint256\"},{\"name\":\"_mediumFunding\",\"type\":\"uint256\"},{\"name\":\"_highFunding\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_maxTotalSupply\",\"type\":\"uint256\"},{\"name\":\"_teamAddress\",\"type\":\"address\"},{\"name\":\"_FSNASAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"first\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"second\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"thrid\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fourth\",\"type\":\"address\"}],\"name\":\"VestedTeamTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]",
  "bytecode": "60806040526006805460a060020a60ff02199081169091556008805490911690553480156200002d57600080fd5b50604051610140806200384983398101604090815281516020830151918301516060840151608085015160a086015160c087015160e088015161010089015161012090990151969895969495939492939192909190868a8a8a87428410156200009557600080fd5b83831015620000a357600080fd5b60008211620000b157600080fd5b600160a060020a0381161515620000c757600080fd5b620000da640100000000620002f4810204565b60008054600160a060020a03928316600160a060020a0319918216178255600196909655600294909455600492909255600380549190921690841617905560068054909216331790915581116200013057600080fd5b600354600160a060020a03166200014662000375565b600160a060020a03909116815260405190819003602001906000f08015801562000174573d6000803e3d6000fd5b5060088054600160a060020a031916600160a060020a039290921691909117905560075560008311620001a657600080fd5b60008711620001b457600080fd5b868611620001c157600080fd5b858511620001ce57600080fd5b600160a060020a0382161515620001e457600080fd5b600160a060020a0381161515620001fa57600080fd5b600b879055600c869055600d859055600a8390556200024460646200022f856052640100000000620013256200032382021704565b90640100000000620013506200035d82021704565b600955600f8054600160a060020a03808516600160a060020a03199283161790925560108054848416921691909117905560008054604080517f8456cb5900000000000000000000000000000000000000000000000000000000815290519190931692638456cb5992600480830193919282900301818387803b158015620002cb57600080fd5b505af1158015620002e0573d6000803e3d6000fd5b505050505050505050505050505062000397565b60006200030062000386565b604051809103906000f0801580156200031d573d6000803e3d6000fd5b50905090565b60008083151562000338576000915062000356565b508282028284828115156200034957fe5b04146200035257fe5b8091505b5092915050565b60008082848115156200036c57fe5b04949350505050565b6040516105fe80620023b783390190565b604051610e9480620029b583390190565b61201080620003a76000396000f3006080604052600436106101665763ffffffff60e060020a60003504166318976fa28114610171578063193a4249146101865780631c75f085146101ad5780632ab4d052146101de5780632c4e722e146101f35780633197cbb61461020857806333905d411461021d57806340193883146102325780634042b66f146102475780634bb278f31461025c578063521eb27314610271578063548db1741461028657806359a536b0146102db5780635c9920fc146102f05780636f5d64fa1461031957806378e979251461032e5780637d3d6522146103435780637f649783146103585780638d4e4083146103785780638da5cb5b1461038d5780639b19251a146103a2578063b16d8622146103c3578063b5545a3c146103d8578063d77a39c9146103ed578063ec8ac4d81461041c578063ecb70fb714610430578063edd13e3814610445578063f2fde38b1461045a578063fbfa77cf1461047b578063fc0c546a14610490575b61016f336104a5565b005b34801561017d57600080fd5b5061016f610a2d565b34801561019257600080fd5b5061019b610aff565b60408051918252519081900360200190f35b3480156101b957600080fd5b506101c2610b05565b60408051600160a060020a039092168252519081900360200190f35b3480156101ea57600080fd5b5061019b610b14565b3480156101ff57600080fd5b5061019b610b1a565b34801561021457600080fd5b5061019b610b20565b34801561022957600080fd5b5061019b610b26565b34801561023e57600080fd5b5061019b610b2c565b34801561025357600080fd5b5061019b610b32565b34801561026857600080fd5b5061016f610b38565b34801561027d57600080fd5b506101c2610c95565b34801561029257600080fd5b506040805160206004803580820135838102808601850190965280855261016f95369593946024949385019291829185019084908082843750949750610ca49650505050505050565b3480156102e757600080fd5b5061019b610db6565b3480156102fc57600080fd5b50610305610dbc565b604080519115158252519081900360200190f35b34801561032557600080fd5b506101c2610dcc565b34801561033a57600080fd5b5061019b610ddb565b34801561034f57600080fd5b50610305610de1565b34801561036457600080fd5b5061016f6004803560248101910135610dec565b34801561038457600080fd5b50610305610eed565b34801561039957600080fd5b506101c2610efd565b3480156103ae57600080fd5b50610305600160a060020a0360043516610f0c565b3480156103cf57600080fd5b5061019b610f21565b3480156103e457600080fd5b5061016f610f27565b3480156103f957600080fd5b5061016f6024600480358281019290820135918135918201910135604435610fd0565b61016f600160a060020a03600435166104a5565b34801561043c57600080fd5b50610305611208565b34801561045157600080fd5b5061019b611210565b34801561046657600080fd5b5061016f600160a060020a0360043516611216565b34801561048757600080fd5b506101c26112ab565b34801561049c57600080fd5b506101c26112ba565b33600090815260116020526040812054819060ff1615156104c557600080fd5b600160a060020a03831615156104da57600080fd5b6104e26112c9565b15156104ed57600080fd5b34915060009050600b54600554101561073257600d54600554610516908463ffffffff6112f916565b11156105f95761055b606461054f6073610543600454610543600554600b5461131390919063ffffffff16565b9063ffffffff61132516565b9063ffffffff61135016565b9050610594610587606461054f606e610543600454610543600b54600c5461131390919063ffffffff16565b829063ffffffff6112f916565b90506105c0610587606461054f6069610543600454610543600c54600d5461131390919063ffffffff16565b90506105f2610587600454610543600d546105e6876005546112f990919063ffffffff16565b9063ffffffff61131316565b905061072d565b600c5460055461060f908463ffffffff6112f916565b11156106985761063c606461054f6073610543600454610543600554600b5461131390919063ffffffff16565b9050610668610587606461054f606e610543600454610543600b54600c5461131390919063ffffffff16565b90506105f2610587606461054f6069610543600454610543600c546105e68b6005546112f990919063ffffffff16565b600b546005546106ae908463ffffffff6112f916565b111561070b576106db606461054f6073610543600454610543600554600b5461131390919063ffffffff16565b90506105f2610587606461054f606e610543600454610543600b546105e68b6005546112f990919063ffffffff16565b61072a606461054f60736105436004548761132590919063ffffffff16565b90505b610888565b600b54600554101580156107495750600c54600554105b156107f357600d54600554610764908463ffffffff6112f916565b111561079157610594606461054f606e610543600454610543600554600c5461131390919063ffffffff16565b600c546005546107a7908463ffffffff6112f916565b11156107d457610668606461054f606e610543600454610543600554600c5461131390919063ffffffff16565b61072a606461054f606e6105436004548761132590919063ffffffff16565b600c546005541015801561080a5750600d54600554105b1561087157600d54600554610825908463ffffffff6112f916565b1115610852576105c0606461054f6069610543600454610543600554600d5461131390919063ffffffff16565b61072a606461054f60696105436004548761132590919063ffffffff16565b60045461088590839063ffffffff61132516565b90505b600954610919826000809054906101000a9004600160a060020a0316600160a060020a03166318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156108e157600080fd5b505af11580156108f5573d6000803e3d6000fd5b505050506040513d602081101561090b57600080fd5b50519063ffffffff6112f916565b111561092457600080fd5b600554610937908363ffffffff6112f916565b60055560008054604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03878116600483015260248201869052915191909216926340c10f1992604480820193602093909283900390910190829087803b1580156109ac57600080fd5b505af11580156109c0573d6000803e3d6000fd5b505050506040513d60208110156109d657600080fd5b505060408051838152602081018390528151600160a060020a0386169233927f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18929081900390910190a3610a28611367565b505050565b600654600160a060020a03163314610a4457600080fd5b60085460a060020a900460ff1615610a5b57600080fd5b610a63610de1565b1515610a6e57600080fd5b600860009054906101000a9004600160a060020a0316600160a060020a03166343d726d66040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610ac157600080fd5b505af1158015610ad5573d6000803e3d6000fd5b50506008805474ff0000000000000000000000000000000000000000191660a060020a1790555050565b600b5481565b600f54600160a060020a031681565b600a5481565b60045481565b60025481565b600d5481565b60075481565b60055481565b600654600160a060020a03163314610b4f57600080fd5b60065460a060020a900460ff1615610b6657600080fd5b610b6e610de1565b15610bcd57610b7b61143a565b6040517f6823b073d48d6e3a7d385eeb601452d680e74bb46afe3255a7d778f3a9b1768190600090a16006805474ff0000000000000000000000000000000000000000191660a060020a179055610c93565b610bd5611208565b15610c9357600860009054906101000a9004600160a060020a0316600160a060020a0316638c52dc416040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610c2d57600080fd5b505af1158015610c41573d6000803e3d6000fd5b50506040517f6823b073d48d6e3a7d385eeb601452d680e74bb46afe3255a7d778f3a9b17681925060009150a16006805474ff0000000000000000000000000000000000000000191660a060020a1790555b565b600354600160a060020a031681565b600654600090600160a060020a03163314610cbe57600080fd5b5060005b8151811015610db257601160008383815181101515610cdd57fe5b6020908102909101810151600160a060020a031682528101919091526040016000205460ff161515610d0e57600080fd5b6000601160008484815181101515610d2257fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff191691151591909117905581517ff1abf01a1043b7c244d128e8595cf0c1d10743b022b03a02dffd8ca3bf729f5a90839083908110610d8457fe5b602090810290910181015160408051600160a060020a039092168252519081900390910190a1600101610cc2565b5050565b600e5481565b60085460a060020a900460ff1681565b601054600160a060020a031681565b60015481565b600754600554101590565b600654600090600160a060020a03163314610e0657600080fd5b5060005b81811015610a285760116000848484818110610e2257fe5b60209081029290920135600160a060020a03168352508101919091526040016000205460ff1615610e5257600080fd5b600160116000858585818110610e6457fe5b60209081029290920135600160a060020a0316835250810191909152604001600020805460ff19169115159190911790557fd1bba68c128cc3f427e5831b3c6f99f480b6efa6b9e80c757768f6124158cc3f838383818110610ec257fe5b6040805160209283029490940135600160a060020a03168452519283900301919050a1600101610e0a565b60065460a060020a900460ff1681565b600654600160a060020a031681565b60116020526000908152604090205460ff1681565b60095481565b60065460a060020a900460ff161515610f3f57600080fd5b610f47610de1565b15610f5157600080fd5b600854604080517ffa89401a0000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a039092169163fa89401a9160248082019260009290919082900301818387803b158015610fb657600080fd5b505af1158015610fca573d6000803e3d6000fd5b50505050565b6006546000908190600160a060020a03163314610fec57600080fd5b6002544210610ffa57600080fd5b85841461100657600080fd5b6000831161101357600080fd5b5060009050805b8581101561117357600054600160a060020a03166340c10f1988888481811061103f57fe5b90506020020135600160a060020a031661107686898987818110151561106157fe5b9050602002013561132590919063ffffffff16565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156110c857600080fd5b505af11580156110dc573d6000803e3d6000fd5b505050506040513d60208110156110f257600080fd5b5061111590506111088487878581811061106157fe5b839063ffffffff6112f916565b915061113e85858381811061112657fe5b905060200201356005546112f990919063ffffffff16565b60055561116885858381811061115057fe5b90506020020135600e546112f990919063ffffffff16565b600e5560010161101a565b6009546000809054906101000a9004600160a060020a0316600160a060020a03166318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156111c857600080fd5b505af11580156111dc573d6000803e3d6000fd5b505050506040513d60208110156111f257600080fd5b505111156111ff57600080fd5b50505050505050565b600254421190565b600c5481565b600654600160a060020a0316331461122d57600080fd5b600160a060020a038116151561124257600080fd5b600654604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600854600160a060020a031681565b600054600160a060020a031681565b600080600060015442101580156112e257506002544211155b9150503415158180156112f25750805b9250505090565b60008282018381101561130857fe5b8091505b5092915050565b60008282111561131f57fe5b50900390565b600080831515611338576000915061130c565b5082820282848281151561134857fe5b041461130857fe5b600080828481151561135e57fe5b04949350505050565b60085460a060020a900460ff1615156113fe57600854604080517ff340fa010000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a039092169163f340fa01913491602480830192600092919082900301818588803b1580156113e057600080fd5b505af11580156113f4573d6000803e3d6000fd5b5050505050610c93565b600354604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015611437573d6000803e3d6000fd5b50565b600080600080600080600061144d611b76565b6114e964e8d4a5100061054f64331bf248326000809054906101000a9004600160a060020a0316600160a060020a03166318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156114b157600080fd5b505af11580156114c5573d6000803e3d6000fd5b505050506040513d60208110156114db57600080fd5b50519063ffffffff61132516565b96506114fc87600363ffffffff61135016565b9550611514600261054389600363ffffffff61135016565b600054600f54919650600160a060020a03908116911661153d4262278d0063ffffffff6112f916565b611545611c8e565b600160a060020a039384168152919092166020820152604080820192909252905190819003606001906000f080158015611583573d6000803e3d6000fd5b50600054909450600160a060020a03166340c10f19856115aa89600263ffffffff61135016565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156115fc57600080fd5b505af1158015611610573d6000803e3d6000fd5b505050506040513d602081101561162657600080fd5b5050600054600f54600160a060020a03918216911661164f426301e1338063ffffffff6112f916565b611657611c8e565b600160a060020a039384168152919092166020820152604080820192909252905190819003606001906000f080158015611695573d6000803e3d6000fd5b50600054909350600160a060020a03166340c10f19846116c1600361054f8b600263ffffffff61135016565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561171357600080fd5b505af1158015611727573d6000803e3d6000fd5b505050506040513d602081101561173d57600080fd5b5050600054600f54600160a060020a039182169116611766426303c2670063ffffffff6112f916565b61176e611c8e565b600160a060020a039384168152919092166020820152604080820192909252905190819003606001906000f0801580156117ac573d6000803e3d6000fd5b50600054909250600160a060020a03166340c10f19836117d8600361054f8b600263ffffffff61135016565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561182a57600080fd5b505af115801561183e573d6000803e3d6000fd5b505050506040513d602081101561185457600080fd5b5050600054600f54600160a060020a03918216911661187d426305a39a8063ffffffff6112f916565b611885611c8e565b600160a060020a039384168152919092166020820152604080820192909252905190819003606001906000f0801580156118c3573d6000803e3d6000fd5b50600054909150600160a060020a03166340c10f19826118ef600361054f8b600263ffffffff61135016565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561194157600080fd5b505af1158015611955573d6000803e3d6000fd5b505050506040513d602081101561196b57600080fd5b505060408051600160a060020a0380871682528086166020830152808516828401528316606082015290517f5de1f8e45cdb37a0c9497ddefa4804a35774f65a53c47f12e47d8f10591871919181900360800190a160008054601054604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152602481018a9052905191909216926340c10f1992604480820193602093909283900390910190829087803b158015611a3557600080fd5b505af1158015611a49573d6000803e3d6000fd5b505050506040513d6020811015611a5f57600080fd5b505060008054604080517f7d64bcb40000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921692637d64bcb4926004808401936020939083900390910190829087803b158015611ac257600080fd5b505af1158015611ad6573d6000803e3d6000fd5b505050506040513d6020811015611aec57600080fd5b505060008054600354604080517ff2fde38b000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201529051919092169263f2fde38b926024808201939182900301818387803b158015611b5557600080fd5b505af1158015611b69573d6000803e3d6000fd5b5050505050505050505050565b60085460a060020a900460ff16158015611b935750611b93610de1565b15611c2d57600860009054906101000a9004600160a060020a0316600160a060020a03166343d726d66040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015611beb57600080fd5b505af1158015611bff573d6000803e3d6000fd5b50506008805474ff0000000000000000000000000000000000000000191660a060020a17905550610c939050565b611c35610de1565b1515610c9357600860009054906101000a9004600160a060020a0316600160a060020a0316638c52dc416040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610fb657600080fd5b60405161034680611c9f833901905600608060405234801561001057600080fd5b5060405160608061034683398101604090815281516020830151919092015142811161003b57600080fd5b60008054600160a060020a03948516600160a060020a03199182161790915560018054939094169216919091179091556002556102c98061007d6000396000f3006080604052600436106100615763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166338af3eed811461006657806386d1a69f14610097578063b91d4001146100ae578063fc0c546a146100d5575b600080fd5b34801561007257600080fd5b5061007b6100ea565b60408051600160a060020a039092168252519081900360200190f35b3480156100a357600080fd5b506100ac6100f9565b005b3480156100ba57600080fd5b506100c36101d3565b60408051918252519081900360200190f35b3480156100e157600080fd5b5061007b6101d9565b600154600160a060020a031681565b60025460009042101561010b57600080fd5b60008054604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216926370a08231926024808401936020939083900390910190829087803b15801561017257600080fd5b505af1158015610186573d6000803e3d6000fd5b505050506040513d602081101561019c57600080fd5b50519050600081116101ad57600080fd5b6001546000546101d091600160a060020a0391821691168363ffffffff6101e816565b50565b60025481565b600054600160a060020a031681565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561026457600080fd5b505af1158015610278573d6000803e3d6000fd5b505050506040513d602081101561028e57600080fd5b5051151561029857fe5b5050505600a165627a7a72305820f7dfaa34496598dee12c187f8aa9661dd853064933aba4dc36bc9b50cc5446f90029a165627a7a72305820de9ce6cbedcbac106894d2365141dab27e80bb328167e8262a0240954199bd970029608060405234801561001057600080fd5b506040516020806105fe833981016040525160008054600160a060020a03191633179055600160a060020a038116151561004957600080fd5b60028054600160a060020a031916600160a060020a03929092169190911760a060020a60ff021916905561057c806100826000396000f3006080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166343d726d6811461009d578063521eb273146100b45780638c52dc41146100e55780638da5cb5b146100fa578063c19d93fb1461010f578063cb13cddb14610148578063f2fde38b1461017b578063f340fa011461019c578063fa89401a146101b0575b600080fd5b3480156100a957600080fd5b506100b26101d1565b005b3480156100c057600080fd5b506100c96102a7565b60408051600160a060020a039092168252519081900360200190f35b3480156100f157600080fd5b506100b26102b6565b34801561010657600080fd5b506100c9610340565b34801561011b57600080fd5b5061012461034f565b6040518082600281111561013457fe5b60ff16815260200191505060405180910390f35b34801561015457600080fd5b50610169600160a060020a036004351661035f565b60408051918252519081900360200190f35b34801561018757600080fd5b506100b2600160a060020a0360043516610371565b6100b2600160a060020a0360043516610405565b3480156101bc57600080fd5b506100b2600160a060020a0360043516610485565b600054600160a060020a031633146101e857600080fd5b60006002805460a060020a900460ff169081111561020257fe5b1461020c57600080fd5b6002805474ff00000000000000000000000000000000000000001916740200000000000000000000000000000000000000001790556040517f1cdde67b72a90f19919ac732a437ac2f7a10fc128d28c2a6e525d89ce5cd9d3a90600090a1600254604051600160a060020a0390911690303180156108fc02916000818181858888f193505050501580156102a4573d6000803e3d6000fd5b50565b600254600160a060020a031681565b600054600160a060020a031633146102cd57600080fd5b60006002805460a060020a900460ff16908111156102e757fe5b146102f157600080fd5b6002805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f599d8e5a83cffb867d051598c4d70e805d59802d8081c1c7d6dffc5b6aca2b8990600090a1565b600054600160a060020a031681565b60025460a060020a900460ff1681565b60016020526000908152604090205481565b600054600160a060020a0316331461038857600080fd5b600160a060020a038116151561039d57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a0316331461041c57600080fd5b60006002805460a060020a900460ff169081111561043657fe5b1461044057600080fd5b600160a060020a038116600090815260016020526040902054610469903463ffffffff61053a16565b600160a060020a03909116600090815260016020526040902055565b600060016002805460a060020a900460ff16908111156104a157fe5b146104ab57600080fd5b50600160a060020a038116600081815260016020526040808220805490839055905190929183156108fc02918491818181858888f193505050501580156104f6573d6000803e3d6000fd5b50604080518281529051600160a060020a038416917fd7dee2702d63ad89917b6a4da9981c90c4d24f8c2bdfd64c604ecae57d8d0651919081900360200190a25050565b60008282018381101561054957fe5b93925050505600a165627a7a7230582080d3aad804e44271b0c44cc5dd96cc0e4e0ad588ff58b4e156f06e4ba28df4d20029608060405260038054600160b060020a03191633179055610e6f806100256000396000f3006080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b8114610116578063095ea7b31461013f57806318160ddd1461016357806323b872dd1461018a5780632e0f2625146101b45780633f4ba83a146101df57806340c10f19146101f657806342966c681461021a5780635c975abb14610232578063661884631461024757806370a082311461026b5780637d64bcb41461028c5780638456cb59146102a15780638da5cb5b146102b6578063a3f4df7e146102e7578063a9059cbb14610371578063d73dd62314610395578063dd62ed3e146103b9578063f2fde38b146103e0578063f76f8d7814610401575b600080fd5b34801561012257600080fd5b5061012b610416565b604080519115158252519081900360200190f35b34801561014b57600080fd5b5061012b600160a060020a0360043516602435610437565b34801561016f57600080fd5b50610178610462565b60408051918252519081900360200190f35b34801561019657600080fd5b5061012b600160a060020a0360043581169060243516604435610468565b3480156101c057600080fd5b506101c9610495565b6040805160ff9092168252519081900360200190f35b3480156101eb57600080fd5b506101f461049a565b005b34801561020257600080fd5b5061012b600160a060020a0360043516602435610513565b34801561022657600080fd5b506101f460043561062f565b34801561023e57600080fd5b5061012b6106df565b34801561025357600080fd5b5061012b600160a060020a03600435166024356106ef565b34801561027757600080fd5b50610178600160a060020a0360043516610713565b34801561029857600080fd5b5061012b61072e565b3480156102ad57600080fd5b506101f46107d4565b3480156102c257600080fd5b506102cb610852565b60408051600160a060020a039092168252519081900360200190f35b3480156102f357600080fd5b506102fc610861565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561033657818101518382015260200161031e565b50505050905090810190601f1680156103635780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561037d57600080fd5b5061012b600160a060020a0360043516602435610898565b3480156103a157600080fd5b5061012b600160a060020a03600435166024356108bc565b3480156103c557600080fd5b50610178600160a060020a03600435811690602435166108e0565b3480156103ec57600080fd5b506101f4600160a060020a036004351661090b565b34801561040d57600080fd5b506102fc6109a0565b60035474010000000000000000000000000000000000000000900460ff1681565b60035460009060a860020a900460ff161561045157600080fd5b61045b83836109d7565b9392505050565b60005481565b60035460009060a860020a900460ff161561048257600080fd5b61048d848484610a3d565b949350505050565b601281565b600354600160a060020a031633146104b157600080fd5b60035460a860020a900460ff1615156104c957600080fd5b6003805475ff000000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600354600090600160a060020a0316331461052d57600080fd5b60035474010000000000000000000000000000000000000000900460ff161561055557600080fd5b600054610568908363ffffffff610bb616565b6000908155600160a060020a038416815260016020526040902054610593908363ffffffff610bb616565b600160a060020a038416600081815260016020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b3360009081526001602052604081205482111561064b57600080fd5b503360008181526001602052604090205461066c908363ffffffff610bc516565b600160a060020a03821660009081526001602052604081209190915554610699908363ffffffff610bc516565b600055604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b60035460a860020a900460ff1681565b60035460009060a860020a900460ff161561070957600080fd5b61045b8383610bd7565b600160a060020a031660009081526001602052604090205490565b600354600090600160a060020a0316331461074857600080fd5b60035474010000000000000000000000000000000000000000900460ff161561077057600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a031633146107eb57600080fd5b60035460a860020a900460ff161561080257600080fd5b6003805475ff000000000000000000000000000000000000000000191660a860020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b60408051808201909152601481527f467269656e64204e6574776f726b20546f6b656e000000000000000000000000602082015281565b60035460009060a860020a900460ff16156108b257600080fd5b61045b8383610cc7565b60035460009060a860020a900460ff16156108d657600080fd5b61045b8383610daa565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a0316331461092257600080fd5b600160a060020a038116151561093757600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60408051808201909152600481527f46524e4400000000000000000000000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6000600160a060020a0383161515610a5457600080fd5b600160a060020a038416600090815260016020526040902054821115610a7957600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115610aa957600080fd5b600160a060020a038416600090815260016020526040902054610ad2908363ffffffff610bc516565b600160a060020a038086166000908152600160205260408082209390935590851681522054610b07908363ffffffff610bb616565b600160a060020a038085166000908152600160209081526040808320949094559187168152600282528281203382529091522054610b4b908363ffffffff610bc516565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60008282018381101561045b57fe5b600082821115610bd157fe5b50900390565b336000908152600260209081526040808320600160a060020a038616845290915281205480831115610c2c57336000908152600260209081526040808320600160a060020a0388168452909152812055610c61565b610c3c818463ffffffff610bc516565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6000600160a060020a0383161515610cde57600080fd5b33600090815260016020526040902054821115610cfa57600080fd5b33600090815260016020526040902054610d1a908363ffffffff610bc516565b3360009081526001602052604080822092909255600160a060020a03851681522054610d4c908363ffffffff610bb616565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a0386168452909152812054610dde908363ffffffff610bb616565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a3506001929150505600a165627a7a7230582089203944f6fe7ed3b2a885a7ebf94b1d3108cd91956e4b636fb27d38adf71a570029000000000000000000000000000000000000000000000000000000005b2363f0000000000000000000000000000000000000000000000000000000005c1cf1e00000000000000000000000000000000000000000000000000000000000004e2000000000000000000000000000000000000000000000021e19e0c9bab240000000000000000000000000000000000000000000000000054b40b1f852bda00000000000000000000000000000000000000000000000000a968163f0a57b400000000000000000000000000000d8d3b694907a0ea26db1bc91ad4f36b3a89cb1cb000000000000000000000000000000000000000006765c793fa10079d00000000000000000000000000000003bd976b3b67f5ec9569c9d969af2bac622db98020000000000000000000000001991803a9797beb4325b74a537056e21326a4485",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000005b2363f0000000000000000000000000000000000000000000000000000000005c1cf1e00000000000000000000000000000000000000000000000000000000000004e2000000000000000000000000000000000000000000000021e19e0c9bab240000000000000000000000000000000000000000000000000054b40b1f852bda00000000000000000000000000000000000000000000000000a968163f0a57b400000000000000000000000000000d8d3b694907a0ea26db1bc91ad4f36b3a89cb1cb000000000000000000000000000000000000000006765c793fa10079d00000000000000000000000000000003BD976B3b67f5EC9569C9d969Af2BAc622Db98020000000000000000000000001991803a9797beb4325b74a537056e21326a4485"
}