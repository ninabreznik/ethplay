{
  "address": "0x2ff6644edd313ffa31a2b66f367f25a0634ce9d3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Marmo",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-03\n*/\n\npragma solidity ^0.5.7;\n\n\nlibrary SigUtils {\n    /**\n      @dev Recovers address who signed the message \n      @param _hash operation ethereum signed message hash\n      @param _signature message `hash` signature  \n    */\n    function ecrecover2 (\n        bytes32 _hash, \n        bytes memory _signature\n    ) internal pure returns (address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        assembly {\n            r := mload(add(_signature, 32))\n            s := mload(add(_signature, 64))\n            v := and(mload(add(_signature, 65)), 255)\n        }\n\n        if (v < 27) {\n            v += 27;\n        }\n\n        return ecrecover(\n            _hash,\n            v,\n            r,\n            s\n        );\n    }\n}\n\n// File: contracts/Marmo.sol\n\npragma solidity ^0.5.7;\n\n\n/*\n    Marmo wallet\n\n    It has a signer, and it accepts signed messages ´Intents´ (Meta-Txs)\n    all messages are composed by an interpreter and a ´data´ field.\n*/\ncontract Marmo {\n    event Relayed(bytes32 indexed _id, address _implementation, bytes _data);\n    event Canceled(bytes32 indexed _id);\n\n    // Random Invalid signer address\n    // Intents signed with this address are invalid\n    address private constant INVALID_ADDRESS = address(0x9431Bab00000000000000000000000039bD955c9);\n\n    // Random slot to store signer\n    bytes32 private constant SIGNER_SLOT = keccak256(\"marmo.wallet.signer\");\n\n    // [1 bit (canceled) 95 bits (block) 160 bits (relayer)]\n    mapping(bytes32 => bytes32) private intentReceipt;\n\n    function() external payable {}\n\n    // Inits the wallet, any address can Init\n    // it should be called using another contract\n    function init(address _signer) external payable {\n        address signer;\n        bytes32 signerSlot = SIGNER_SLOT;\n        assembly { signer := sload(signerSlot) }\n        require(signer == address(0), \"Signer already defined\");\n        assembly { sstore(signerSlot, _signer) }\n    }\n\n    // Signer of the Marmo wallet\n    // can perform transactions by signing Intents\n    function signer() public view returns (address _signer) {\n        bytes32 signerSlot = SIGNER_SLOT;\n        assembly { _signer := sload(signerSlot) }\n    } \n\n    // Address that relayed the `_id` intent\n    // address(0) if the intent was not relayed\n    function relayedBy(bytes32 _id) external view returns (address _relayer) {\n        (,,_relayer) = _decodeReceipt(intentReceipt[_id]);\n    }\n\n    // Block when the intent was relayed\n    // 0 if the intent was not relayed\n    function relayedAt(bytes32 _id) external view returns (uint256 _block) {\n        (,_block,) = _decodeReceipt(intentReceipt[_id]);\n    }\n\n    // True if the intent was canceled\n    // An executed intent can't be canceled and\n    // a Canceled intent can't be executed\n    function isCanceled(bytes32 _id) external view returns (bool _canceled) {\n        (_canceled,,) = _decodeReceipt(intentReceipt[_id]);\n    }\n\n    // Relay a signed intent\n    //\n    // The implementation receives data containing the id of the 'intent' and its data,\n    // and it will perform all subsequent calls.\n    //\n    // The same _implementation and _data combination can only be relayed once\n    //\n    // Returns the result of the 'delegatecall' execution\n    function relay(\n        address _implementation,\n        bytes calldata _data,\n        bytes calldata _signature\n    ) external payable returns (\n        bytes memory result\n    ) {\n        // Calculate ID from\n        // (this, _implementation, data)\n        // Any change in _data results in a different ID\n        bytes32 id = keccak256(\n            abi.encodePacked(\n                address(this),\n                _implementation,\n                keccak256(_data)\n            )\n        );\n\n        // Read receipt only once\n        // if the receipt is 0, the Intent was not canceled or relayed\n        if (intentReceipt[id] != bytes32(0)) {\n            // Decode the receipt and determine if the Intent was canceled or relayed\n            (bool canceled, , address relayer) = _decodeReceipt(intentReceipt[id]);\n            require(relayer == address(0), \"Intent already relayed\");\n            require(!canceled, \"Intent was canceled\");\n            revert(\"Unknown error\");\n        }\n\n        // Read the signer from storage, avoid multiples 'sload' ops\n        address _signer = signer();\n\n        // The signer 'INVALID_ADDRESS' is considered invalid and it will always throw\n        // this is meant to disable the wallet safely\n        require(_signer != INVALID_ADDRESS, \"Signer is not a valid address\");\n\n        // Validate if the msg.sender is the signer or if the provided signature is valid\n        require(_signer == msg.sender || _signer == SigUtils.ecrecover2(id, _signature), \"Invalid signature\");\n\n        // Save the receipt before performing any other action\n        intentReceipt[id] = _encodeReceipt(false, block.number, msg.sender);\n\n        // Emit the 'relayed' event\n        emit Relayed(id, _implementation, _data);\n\n        // Perform 'delegatecall' to _implementation, appending the id of the intent\n        // to the beginning of the _data.\n\n        bool success;\n        (success, result) = _implementation.delegatecall(abi.encode(id, _data));\n\n        // If the 'delegatecall' failed, reverts the transaction\n        // forwarding the revert message\n        if (!success) {\n            assembly {\n                revert(add(result, 32), mload(result))\n            }\n        }\n    }\n\n    // Cancels a not executed Intent '_id'\n    // a canceled intent can't be executed\n    function cancel(bytes32 _id) external {\n        require(msg.sender == address(this), \"Only wallet can cancel txs\");\n\n        if (intentReceipt[_id] != bytes32(0)) {\n            (bool canceled, , address relayer) = _decodeReceipt(intentReceipt[_id]);\n            require(relayer == address(0), \"Intent already relayed\");\n            require(!canceled, \"Intent was canceled\");\n            revert(\"Unknown error\");\n        }\n\n        emit Canceled(_id);\n        intentReceipt[_id] = _encodeReceipt(true, 0, address(0));\n    }\n\n    // Encodes an Intent receipt\n    // into a single bytes32\n    // canceled (1 bit) + block (95 bits) + relayer (160 bits)\n    // notice: Does not validate the _block length,\n    // a _block overflow would not corrupt the wallet state\n    function _encodeReceipt(\n        bool _canceled,\n        uint256 _block,\n        address _relayer\n    ) internal pure returns (bytes32 _receipt) {\n        assembly {\n            _receipt := or(shl(255, _canceled), or(shl(160, _block), _relayer))\n        }\n    }\n    \n    // Decodes an Intent receipt\n    // reverse of _encodeReceipt(bool,uint256,address)\n    function _decodeReceipt(bytes32 _receipt) internal pure returns (\n        bool _canceled,\n        uint256 _block,\n        address _relayer\n    ) {\n        assembly {\n            _canceled := shr(255, _receipt)\n            _block := and(shr(160, _receipt), 0x7fffffffffffffffffffffff)\n            _relayer := and(_receipt, 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n    }\n\n    // Used to receive ERC721 tokens\n    function onERC721Received(address, address, uint256, bytes calldata) external pure returns (bytes4) {\n        return bytes4(0x150b7a02);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"relayedBy\",\"outputs\":[{\"name\":\"_relayer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"name\":\"_signer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"isCanceled\",\"outputs\":[{\"name\":\"_canceled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"relayedAt\",\"outputs\":[{\"name\":\"_block\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_implementation\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"relay\",\"outputs\":[{\"name\":\"result\",\"type\":\"bytes\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_implementation\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Relayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"Canceled\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50610b51806100206000396000f3fe60806040526004361061007b5760003560e01c806361b69fde1161004e57806361b69fde146101b8578063b2b2b7dc146101f6578063c4d252f514610232578063ed3d9e171461025c5761007b565b8063150b7a021461007d57806319ab453c146101375780631dd3dd0b1461015d578063238ac933146101a3575b005b34801561008957600080fd5b5061011a600480360360808110156100a057600080fd5b6001600160a01b038235811692602081013590911691604082013591908101906080810160608201356401000000008111156100db57600080fd5b8201836020820111156100ed57600080fd5b8035906020019184600183028401116401000000008311171561010f57600080fd5b5090925090506103a3565b604080516001600160e01b03199092168252519081900360200190f35b61007b6004803603602081101561014d57600080fd5b50356001600160a01b03166103b7565b34801561016957600080fd5b506101876004803603602081101561018057600080fd5b5035610452565b604080516001600160a01b039092168252519081900360200190f35b3480156101af57600080fd5b50610187610472565b3480156101c457600080fd5b506101e2600480360360208110156101db57600080fd5b50356104a8565b604080519115158252519081900360200190f35b34801561020257600080fd5b506102206004803603602081101561021957600080fd5b50356104c9565b60408051918252519081900360200190f35b34801561023e57600080fd5b5061007b6004803603602081101561025557600080fd5b50356104e9565b61032e6004803603606081101561027257600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561029d57600080fd5b8201836020820111156102af57600080fd5b803590602001918460018302840111640100000000831117156102d157600080fd5b9193909290916020810190356401000000008111156102ef57600080fd5b82018360208201111561030157600080fd5b8035906020019184600183028401116401000000008311171561032357600080fd5b5090925090506106c4565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610368578181015183820152602001610350565b50505050905090810190601f1680156103955780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b600160e11b630a85bd010295945050505050565b604080517f6d61726d6f2e77616c6c65742e7369676e657200000000000000000000000000815290519081900360130190208054906001600160a01b0382161561044b5760408051600160e51b62461bcd02815260206004820152601660248201527f5369676e657220616c726561647920646566696e656400000000000000000000604482015290519081900360640190fd5b9190915550565b60008181526020819052604081205461046a90610a5e565b949350505050565b604080517f6d61726d6f2e77616c6c65742e7369676e657200000000000000000000000000815290519081900360130190205490565b6000818152602081905260408120546104c090610a5e565b50909392505050565b6000818152602081905260408120546104e190610a5e565b509392505050565b3330146105405760408051600160e51b62461bcd02815260206004820152601a60248201527f4f6e6c792077616c6c65742063616e2063616e63656c20747873000000000000604482015290519081900360640190fd5b6000818152602081905260409020541561067a57600081815260208190526040812054819061056e90610a5e565b919350909150506001600160a01b038116156105d45760408051600160e51b62461bcd02815260206004820152601660248201527f496e74656e7420616c72656164792072656c6179656400000000000000000000604482015290519081900360640190fd5b811561062a5760408051600160e51b62461bcd02815260206004820152601360248201527f496e74656e74207761732063616e63656c656400000000000000000000000000604482015290519081900360640190fd5b60408051600160e51b62461bcd02815260206004820152600d60248201527f556e6b6e6f776e206572726f7200000000000000000000000000000000000000604482015290519081900360640190fd5b60405181907f134fdd648feeaf30251f0157f9624ef8608ff9a042aad6d13e73f35d21d3f88d90600090a26106b26001600080610a84565b60009182526020829052604090912055565b6060600030878787604051808383808284378083019250505092505050604051809103902060405160200180846001600160a01b03166001600160a01b031660601b8152601401836001600160a01b03166001600160a01b031660601b815260140182815260200193505050506040516020818303038152906040528051906020012090506000801b600080838152602001908152602001600020541461077f57600081815260208190526040812054819061056e90610a5e565b6000610789610472565b90506001600160a01b038116739431bab00000000000000000000000039bd955c914156108005760408051600160e51b62461bcd02815260206004820152601d60248201527f5369676e6572206973206e6f7420612076616c69642061646472657373000000604482015290519081900360640190fd5b6001600160a01b03811633148061086757506108528286868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a9592505050565b6001600160a01b0316816001600160a01b0316145b6108bb5760408051600160e51b62461bcd02815260206004820152601160248201527f496e76616c6964207369676e6174757265000000000000000000000000000000604482015290519081900360640190fd5b6108c760004333610a84565b600083815260208181526040918290209290925580516001600160a01b038b16815291820181815290820188905283917fe195391127b8ac7a8c5b591c002591c812fd7b31f88bb5bf85a701503d399c52918b918b918b919060608201848480828437600083820152604051601f909101601f1916909201829003965090945050505050a26000886001600160a01b031683898960405160200180848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509450505050506040516020818303038152906040526040518082805190602001908083835b602083106109db5780518252601f1990920191602091820191016109bc565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610a3b576040519150601f19603f3d011682016040523d82523d6000602084013e610a40565b606091505b509450905080610a5257835160208501fd5b50505095945050505050565b60ff81901c9160a082901c6b7fffffffffffffffffffffff16916001600160a01b031690565b60a09190911b1760ff9190911b1790565b602081015160408201516041830151600092919060ff16601b811015610ab957601b015b6040805160008152602080820180845289905260ff8416828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa158015610b10573d6000803e3d6000fd5b5050604051601f19015197965050505050505056fea165627a7a723058201fbf8df1a510885710c0e0dc9613a31a5eb2cd395fca1cc0beb9ab73daf69c6e0029"
}