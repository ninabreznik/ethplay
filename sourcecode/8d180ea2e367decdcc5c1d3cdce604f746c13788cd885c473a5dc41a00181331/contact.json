{
  "address": "0x358d12436080a01a16f711014610f8a4c2c2d233",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Pundi X: Old Token",
  "contractName": "PundiXToken",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-02\n*/\n\npragma solidity ^0.4.11;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    require(newOwner != address(0));      \n    owner = newOwner;\n  }\n\n}\n\n\ncontract Crowdsale {\n  using SafeMath for uint256;\n\n  // The token being sold\n  MintableToken public token;\n\n  // start and end timestamps where investments are allowed (both inclusive)\n  uint256 public startTime;\n  uint256 public endTime;\n\n  // address where funds are collected\n  address public wallet;\n\n  // how many token units a buyer gets per wei\n  uint256 public rate;\n\n  // amount of raised money in wei\n  uint256 public weiRaised;\n\n  /**\n   * event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */ \n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\n    require(_startTime >= now);\n    require(_endTime >= _startTime);\n    require(_rate > 0);\n    require(_wallet != 0x0);\n\n    token = createTokenContract();\n    startTime = _startTime;\n    endTime = _endTime;\n    rate = _rate;\n    wallet = _wallet;\n  }\n\n  // creates the token to be sold. \n  // override this method to have crowdsale of a specific mintable token.\n  function createTokenContract() internal returns (MintableToken) {\n    return new MintableToken();\n  }\n\n\n  // fallback function can be used to buy tokens\n  function () payable {\n    buyTokens(msg.sender);\n  }\n\n  // low level token purchase function\n  function buyTokens(address beneficiary) payable {\n    require(beneficiary != 0x0);\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n\n    // calculate token amount to be created\n    uint256 tokens = weiAmount.mul(rate);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    token.mint(beneficiary, tokens);\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n    forwardFunds();\n  }\n\n  // send ether to the fund collection wallet\n  // override to create custom fund forwarding mechanisms\n  function forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n\n  // @return true if the transaction can buy tokens\n  function validPurchase() internal constant returns (bool) {\n    bool withinPeriod = now >= startTime && now <= endTime;\n    bool nonZeroPurchase = msg.value != 0;\n    return withinPeriod && nonZeroPurchase;\n  }\n\n  // @return true if crowdsale event has ended\n  function hasEnded() public constant returns (bool) {\n    return now > endTime;\n  }\n\n\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    require(_to != address(0));\n\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n  \n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until \n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue) \n    returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) \n    returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract BurnableToken is StandardToken {\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint _value)\n        public\n    {\n        require(_value > 0);\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n\n    event Burn(address indexed burner, uint indexed value);\n}\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(0x0, _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n\ncontract PundiXToken is MintableToken, BurnableToken {\n\n    event ShowCurrentIndex(address indexed to, uint256 value);\n    event ShowBonus(address indexed to, uint256 value);\n\n    string public constant name = \"Pundi X Token\";\n    string public constant symbol = \"PXS\";\n    uint8 public constant decimals = 18;\n\n    uint256 public totalSupplyBonus;\n\n    uint64[] public bonusTimeList = [\n    1512057600,1514736000,1517414400,1519833600,1522512000,1525104000,1527782400,1530374400,1533052800,1535731200,1538323200,1541001600,\n    1543593600,1546272000,1548950400,1551369600,1554048000,1556640000,1559318400,1561910400,1564588800,1567267200,1569859200,1572537600,\n    1575129600,1577808000,1580486400,1582992000,1585670400,1588262400,1590940800,1593532800,1596211200,1598889600,1601481600,1604160000];\n\n\n    uint8 public currentTimeIndex;\n\n    function PundiXToken() {\n        currentTimeIndex = 0;\n    }\n\n    // --------------------------------------------------------\n    mapping(address=>uint256) weiBalance;\n    address[] public investors;\n\n    function addWei(address _address, uint256 _value) onlyOwner canMint public {\n        uint256 value = weiBalance[_address];\n        if (value == 0) {\n            investors.push(_address);\n        }\n        weiBalance[_address] = value.add(_value);\n    }\n\n    function getInvestorsCount() constant onlyOwner public returns (uint256 investorsCount) {\n        return investors.length;\n    }\n\n    function getWeiBalance(address _address) constant onlyOwner public returns (uint256 balance) {\n        return weiBalance[_address];\n    }\n\n    // --------------------------------------------------------\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        bool result = super.transferFrom(_from, _to, _value);\n        if (result && currentTimeIndex < bonusTimeList.length) {\n            bonus(_from);\n            bonus(_to);\n        }\n        return result;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        bool result = super.transfer(_to, _value);\n        if (result && currentTimeIndex < bonusTimeList.length) {\n            bonus(msg.sender);\n            bonus(_to);\n        }\n        return result;\n    }\n\n\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n        bool result = super.mint(_to, _amount);\n        if (result) {\n            bonus(_to);\n        }\n        return result;\n    }\n\n    function burn(uint256 _value) public {\n        super.burn(_value);\n        if (currentTimeIndex < bonusTimeList.length) {\n            bonus(msg.sender);\n        }\n\n    }\n    // --------------------------------------------------------\n\n    mapping(address => User) public users;\n\n    struct User {\n        uint256 txTimestamp;\n        uint256[] monthBalance;\n        uint8 monthIndex;\n        uint256[] receiveBonus;\n        uint8 receiveIndex;\n    }\n\n    function bonus(address _address) internal {\n        User storage user = users[_address];\n        tryNextTimeRange();\n\n        uint64 maxTime = bonusTimeList[currentTimeIndex];\n        if (user.txTimestamp > maxTime) {\n            return;\n        }\n\n        uint64 minTime = 0;\n        if (currentTimeIndex > 0) {\n            minTime = bonusTimeList[currentTimeIndex-1];\n        }\n\n        for (uint _i = user.monthBalance.length; _i <= currentTimeIndex; _i++) {\n            user.monthBalance.push(0);\n        }\n\n        // first time\n        if (user.txTimestamp == 0) {\n            user.monthBalance[currentTimeIndex] = balances[_address];\n            user.monthIndex = currentTimeIndex;\n        } else if (user.txTimestamp >= minTime) {\n            user.monthBalance[currentTimeIndex] = balances[_address];\n        } else { // (user.txTimestamp < minTime) cross month\n            uint256 pBalance = user.monthBalance[user.monthIndex];\n            for (uint8 i = user.monthIndex; i < currentTimeIndex; i++) {\n                user.monthBalance[i] = pBalance;\n            }\n            user.monthBalance[currentTimeIndex] = balances[_address];\n            user.monthIndex = currentTimeIndex;\n        }\n        user.txTimestamp = now;\n\n    }\n\n    function tryNextTimeRange() internal {\n        uint8 len = uint8(bonusTimeList.length) - 1;\n        uint64 _now = uint64(now);\n        for(; currentTimeIndex < len; currentTimeIndex++) {\n            if (bonusTimeList[currentTimeIndex] >= _now) {\n                break;\n            }\n        }\n    }\n\n    function receiveBonus() public {\n        tryNextTimeRange();\n\n        if (currentTimeIndex == 0) {\n            return;\n        }\n\n        address addr = msg.sender;\n\n        User storage user = users[addr];\n\n        if (user.monthIndex < currentTimeIndex) {\n            bonus(addr);\n        }\n\n        User storage xuser = users[addr];\n\n        if (xuser.receiveIndex == xuser.monthIndex || xuser.receiveIndex >= bonusTimeList.length) {\n            return;\n        }\n\n\n        require(user.receiveIndex < user.monthIndex);\n\n        uint8 monthInterval = xuser.monthIndex - xuser.receiveIndex;\n\n        uint256 bonusToken = 0;\n\n        if (monthInterval > 6) {\n            uint8 _length = monthInterval - 6;\n\n            for (uint8 j = 0; j < _length; j++) {\n                xuser.receiveBonus.push(0);\n                xuser.receiveIndex++;\n            }\n        }\n\n        uint256 balance = xuser.monthBalance[xuser.monthIndex];\n\n        for (uint8 i = xuser.receiveIndex; i < xuser.monthIndex; i++) {\n            uint256 preMonthBonus = calculateBonusToken(i, balance);\n            balance = preMonthBonus.add(balance);\n            bonusToken = bonusToken.add(preMonthBonus);\n            xuser.receiveBonus.push(preMonthBonus);\n            xuser.receiveIndex++;\n        }\n\n        // 事件\n        ShowBonus(addr, bonusToken);\n\n        if (bonusToken == 0) {\n            return;\n        }\n\n        totalSupplyBonus = totalSupplyBonus.sub(bonusToken);\n\n        this.transfer(addr, bonusToken);\n    }\n\n    function calculateBonusToken(uint8 _monthIndex, uint256 _balance) internal returns (uint256) {\n        uint256 bonusToken = 0;\n        if (_monthIndex < 12) {\n            // 7.31606308769453%\n            bonusToken = _balance.div(10000000000000000).mul(731606308769453);\n        } else if (_monthIndex < 24) {\n            // 2.11637098909784%\n            bonusToken = _balance.div(10000000000000000).mul(211637098909784);\n        } else if (_monthIndex < 36) {\n            // 0.881870060450728%\n            bonusToken = _balance.div(100000000000000000).mul(881870060450728);\n        }\n\n        return bonusToken;\n    }\n\n\n    function calculationTotalSupply() onlyOwner {\n        uint256 u1 = totalSupply.div(10);\n\n        uint256 year1 = u1.mul(4);\n        uint256 year2 = u1.mul(2);\n        uint256 year3 = u1;\n\n        totalSupplyBonus = year1.add(year2).add(year3);\n    }\n\n    function recycleUnreceivedBonus(address _address) onlyOwner {\n        tryNextTimeRange();\n        require(currentTimeIndex > 34);\n\n        uint64 _now = uint64(now);\n\n        uint64 maxTime = bonusTimeList[currentTimeIndex];\n\n        uint256 bonusToken = 0;\n\n        // TODO 180 days\n        uint64 finalTime = 180 days + maxTime;\n\n        if (_now > finalTime) {\n            bonusToken = totalSupplyBonus;\n            totalSupplyBonus = 0;\n        }\n\n        require(bonusToken != 0);\n\n        this.transfer(_address, bonusToken);\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receiveBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"calculationTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"recycleUnreceivedBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonusTimeList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"txTimestamp\",\"type\":\"uint256\"},{\"name\":\"monthIndex\",\"type\":\"uint8\"},{\"name\":\"receiveIndex\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getWeiBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTimeIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addWei\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorsCount\",\"outputs\":[{\"name\":\"investorsCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ShowCurrentIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ShowBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526000600360146101000a81548160ff02191690831515021790555061048060405190810160405280635a202b0063ffffffff168152602001635a49098063ffffffff168152602001635a71e80063ffffffff168152602001635a96d20063ffffffff168152602001635abfb08063ffffffff168152602001635ae73d8063ffffffff168152602001635b101c0063ffffffff168152602001635b37a90063ffffffff168152602001635b60878063ffffffff168152602001635b89660063ffffffff168152602001635bb0f30063ffffffff168152602001635bd9d18063ffffffff168152602001635c015e8063ffffffff168152602001635c2a3d0063ffffffff168152602001635c531b8063ffffffff168152602001635c78058063ffffffff168152602001635ca0e40063ffffffff168152602001635cc8710063ffffffff168152602001635cf14f8063ffffffff168152602001635d18dc8063ffffffff168152602001635d41bb0063ffffffff168152602001635d6a998063ffffffff168152602001635d92268063ffffffff168152602001635dbb050063ffffffff168152602001635de2920063ffffffff168152602001635e0b708063ffffffff168152602001635e344f0063ffffffff168152602001635e5a8a8063ffffffff168152602001635e83690063ffffffff168152602001635eaaf60063ffffffff168152602001635ed3d48063ffffffff168152602001635efb618063ffffffff168152602001635f24400063ffffffff168152602001635f4d1e8063ffffffff168152602001635f74ab8063ffffffff168152602001635f9d8a0063ffffffff1681525060059060246200027c929190620002ec565b5034156200028957600080fd5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600660006101000a81548160ff021916908360ff160217905550620003e5565b82805482825590600052602060002090600301600490048101928215620003985791602002820160005b838211156200036057835183826101000a81548167ffffffffffffffff021916908363ffffffff160217905550926020019260080160208160070104928301926001030262000316565b8015620003965782816101000a81549067ffffffffffffffff021916905560080160208160070104928301926001030262000360565b505b509050620003a79190620003ab565b5090565b620003e291905b80821115620003de57600081816101000a81549067ffffffffffffffff021916905550600101620003b2565b5090565b90565b612d6580620003f56000396000f30060606040523615610168576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b1461016d57806306fdde031461019a578063095ea7b314610228578063153aa7711461028257806318160ddd146102ab57806323b872dd146102d4578063305074511461034d578063313ce567146103625780633feb5f2b1461039157806340c10f19146103f457806342966c681461044e578063500b6b3e146104715780636618846314610486578063668e39f6146104e057806370a08231146105195780637c50fb2f146105665780637d64bcb4146105b15780638da5cb5b146105de57806395d89b4114610633578063a87430ba146106c1578063a9059cbb14610728578063c1f16bdc14610782578063cf40bb58146107cf578063d73dd623146107fe578063dd62ed3e14610858578063e319e7b9146108c4578063ed21187a14610906578063f2fde38b1461092f575b600080fd5b341561017857600080fd5b610180610968565b604051808215151515815260200191505060405180910390f35b34156101a557600080fd5b6101ad61097b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ed5780820151818401526020810190506101d2565b50505050905090810190601f16801561021a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561023357600080fd5b610268600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109b4565b604051808215151515815260200191505060405180910390f35b341561028d57600080fd5b610295610b3b565b6040518082815260200191505060405180910390f35b34156102b657600080fd5b6102be610b41565b6040518082815260200191505060405180910390f35b34156102df57600080fd5b610333600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b47565b604051808215151515815260200191505060405180910390f35b341561035857600080fd5b610360610b9d565b005b341561036d57600080fd5b610375611031565b604051808260ff1660ff16815260200191505060405180910390f35b341561039c57600080fd5b6103b26004808035906020019091905050611036565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103ff57600080fd5b610434600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611075565b604051808215151515815260200191505060405180910390f35b341561045957600080fd5b61046f6004808035906020019091905050611116565b005b341561047c57600080fd5b61048461114b565b005b341561049157600080fd5b6104c6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611225565b604051808215151515815260200191505060405180910390f35b34156104eb57600080fd5b610517600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506114b6565b005b341561052457600080fd5b610550600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506116a5565b6040518082815260200191505060405180910390f35b341561057157600080fd5b61058760048080359060200190919050506116ee565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b34156105bc57600080fd5b6105c461172b565b604051808215151515815260200191505060405180910390f35b34156105e957600080fd5b6105f16117d7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561063e57600080fd5b6106466117fd565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561068657808201518184015260208101905061066b565b50505050905090810190601f1680156106b35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156106cc57600080fd5b6106f8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611836565b604051808481526020018360ff1660ff1681526020018260ff1660ff168152602001935050505060405180910390f35b341561073357600080fd5b610768600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061187a565b604051808215151515815260200191505060405180910390f35b341561078d57600080fd5b6107b9600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506118ce565b6040518082815260200191505060405180910390f35b34156107da57600080fd5b6107e2611973565b604051808260ff1660ff16815260200191505060405180910390f35b341561080957600080fd5b61083e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611986565b604051808215151515815260200191505060405180910390f35b341561086357600080fd5b6108ae600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611b82565b6040518082815260200191505060405180910390f35b34156108cf57600080fd5b610904600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611c09565b005b341561091157600080fd5b610919611d8d565b6040518082815260200191505060405180910390f35b341561093a57600080fd5b610966600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611df6565b005b600360149054906101000a900460ff1681565b6040805190810160405280600d81526020017f50756e6469205820546f6b656e0000000000000000000000000000000000000081525081565b600080821480610a4057506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515610a4b57600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60045481565b60005481565b600080610b55858585611ed2565b9050808015610b7a5750600580549050600660009054906101000a900460ff1660ff16105b15610b9257610b88856121be565b610b91846121be565b5b809150509392505050565b600080600080600080600080600080610bb46125cd565b6000600660009054906101000a900460ff1660ff161415610bd457611025565b339950600960008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209850600660009054906101000a900460ff1660ff168960020160009054906101000a900460ff1660ff161015610c5057610c4f8a6121be565b5b600960008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002097508760020160009054906101000a900460ff1660ff168860040160009054906101000a900460ff1660ff161480610ce057506005805490508860040160009054906101000a900460ff1660ff1610155b15610cea57611025565b8860020160009054906101000a900460ff1660ff168960040160009054906101000a900460ff1660ff16101515610d2057600080fd5b8760040160009054906101000a900460ff168860020160009054906101000a900460ff160396506000955060068760ff161115610ddd57600687039450600093505b8460ff168460ff161015610ddc57876003018054806001018281610d869190612cbc565b91600052602060002090016000809091909150555087600401600081819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff160217905550508380600101945050610d62565b5b876001018860020160009054906101000a900460ff1660ff16815481101515610e0257fe5b90600052602060002090015492508760040160009054906101000a900460ff1691505b8760020160009054906101000a900460ff1660ff168260ff161015610ee657610e4e82846126a3565b9050610e63838261278490919063ffffffff16565b9250610e78818761278490919063ffffffff16565b9550876003018054806001018281610e909190612cbc565b91600052602060002090016000839091909150555087600401600081819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff160217905550508180600101925050610e25565b8973ffffffffffffffffffffffffffffffffffffffff167f9068881fcedccd6ef7baa02c4176cbb2f3e9a4215ac113330d36e6d3ca1d5498876040518082815260200191505060405180910390a26000861415610f4257611025565b610f57866004546127a290919063ffffffff16565b6004819055503073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8b886000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561100857600080fd5b6102c65a03f1151561101957600080fd5b50505060405180519050505b50505050505050505050565b601281565b60088181548110151561104557fe5b90600052602060002090016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110d457600080fd5b600360149054906101000a900460ff161515156110f057600080fd5b6110fa84846127bb565b9050801561110c5761110b846121be565b5b8091505092915050565b61111f8161298d565b600580549050600660009054906101000a900460ff1660ff16101561114857611147336121be565b5b50565b600080600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111ad57600080fd5b6111c3600a600054612a9890919063ffffffff16565b93506111d9600485612ab390919063ffffffff16565b92506111ef600285612ab390919063ffffffff16565b91508390506112198161120b848661278490919063ffffffff16565b61278490919063ffffffff16565b60048190555050505050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115611336576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113ca565b61134983826127a290919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600080600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561151857600080fd5b6115206125cd565b6022600660009054906101000a900460ff1660ff1611151561154157600080fd5b4293506005600660009054906101000a900460ff1660ff1681548110151561156557fe5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff169250600091508262ed4e000190508067ffffffffffffffff168467ffffffffffffffff1611156115c757600454915060006004819055505b600082141515156115d757600080fd5b3073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561168257600080fd5b6102c65a03f1151561169357600080fd5b50505060405180519050505050505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6005818154811015156116fd57fe5b9060005260206000209060049182820401919006600802915054906101000a900467ffffffffffffffff1681565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561178957600080fd5b6001600360146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f505853000000000000000000000000000000000000000000000000000000000081525081565b60096020528060005260406000206000915090508060000154908060020160009054906101000a900460ff16908060040160009054906101000a900460ff16905083565b6000806118878484612ae6565b90508080156118ac5750600580549050600660009054906101000a900460ff1660ff16105b156118c4576118ba336121be565b6118c3846121be565b5b8091505092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561192c57600080fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600660009054906101000a900460ff1681565b6000611a1782600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461278490919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c6757600080fd5b600360149054906101000a900460ff16151515611c8357600080fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811415611d325760088054806001018281611ce29190612ce8565b9160005260206000209001600085909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b611d45828261278490919063ffffffff16565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611deb57600080fd5b600880549050905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e5257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611e8e57600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515611f1157600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050611fe283600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127a290919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061207783600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461278490919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506120cd83826127a290919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b600080600080600080600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002095506122106125cd565b6005600660009054906101000a900460ff1660ff1681548110151561223157fe5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1694508467ffffffffffffffff1686600001541115612278576125c4565b600093506000600660009054906101000a900460ff1660ff1611156122e85760056001600660009054906101000a900460ff160360ff168154811015156122bb57fe5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1693505b856001018054905092505b600660009054906101000a900460ff1660ff1683111515612346578560010180548060010182816123249190612cbc565b91600052602060002090016000809091909150555082806001019350506122f3565b6000866000015414156123f657600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486600101600660009054906101000a900460ff1660ff168154811015156123b657fe5b906000526020600020900181905550600660009054906101000a900460ff168660020160006101000a81548160ff021916908360ff1602179055506125ba565b8367ffffffffffffffff16866000015410151561248457600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486600101600660009054906101000a900460ff1660ff1681548110151561247057fe5b9060005260206000209001819055506125b9565b856001018660020160009054906101000a900460ff1660ff168154811015156124a957fe5b90600052602060002090015491508560020160009054906101000a900460ff1690505b600660009054906101000a900460ff1660ff168160ff16101561251a5781866001018260ff168154811015156124fe57fe5b90600052602060002090018190555080806001019150506124cc565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486600101600660009054906101000a900460ff1660ff1681548110151561257d57fe5b906000526020600020900181905550600660009054906101000a900460ff168660020160006101000a81548160ff021916908360ff1602179055505b5b4286600001819055505b50505050505050565b60008060016005805490500391504290505b8160ff16600660009054906101000a900460ff1660ff16101561269f578067ffffffffffffffff166005600660009054906101000a900460ff1660ff1681548110151561262857fe5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff161015156126685761269f565b6006600081819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff160217905550506125df565b5050565b60008060009050600c8460ff1610156126f0576126e9660299645e264ead6126db662386f26fc1000086612a9890919063ffffffff16565b612ab390919063ffffffff16565b905061277a565b60188460ff1610156127355761272e65c07b9a1a1058612720662386f26fc1000086612a9890919063ffffffff16565b612ab390919063ffffffff16565b9050612779565b60248460ff161015612778576127756603220e5fb0f3a861276767016345785d8a000086612a9890919063ffffffff16565b612ab390919063ffffffff16565b90505b5b5b8091505092915050565b600080828401905083811015151561279857fe5b8091505092915050565b60008282111515156127b057fe5b818303905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561281957600080fd5b600360149054906101000a900460ff1615151561283557600080fd5b61284a8260005461278490919063ffffffff16565b6000819055506128a282600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461278490919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000808211151561299d57600080fd5b3390506129f282600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127a290919063ffffffff16565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612a4a826000546127a290919063ffffffff16565b600081905550818173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca560405160405180910390a35050565b6000808284811515612aa657fe5b0490508091505092915050565b60008082840290506000841480612ad45750828482811515612ad157fe5b04145b1515612adc57fe5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515612b2357600080fd5b612b7582600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127a290919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612c0a82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461278490919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b815481835581811511612ce357818360005260206000209182019101612ce29190612d14565b5b505050565b815481835581811511612d0f57818360005260206000209182019101612d0e9190612d14565b5b505050565b612d3691905b80821115612d32576000816000905550600101612d1a565b5090565b905600a165627a7a7230582042c64deb81c720297448b8ad9de371a29d6407a352383a64b6a0dae67b2fc18c0029"
}