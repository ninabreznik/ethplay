{
  "address": "0x261d650a521103428c6827a11fc0cbce96d74dbc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SnailThrone",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-24\n*/\n\npragma solidity ^0.4.24;\n\n/* SNAILTHRONE\n\n// SnailFarm + Pyramid + Fomo\n\n// Buy and sell snails, pyramid tokens, directly from the contract\n// Snail holders receive proportional dividends from buys and hatches\n// Token price correlates with snail max supply\n\n// Snails produce eggs, at a rate of 8% per day\n// Up to a maximum equal to the amount of snails the player owns\n// Players can hatch these eggs to turn them into more tokens\n// Hatching comes at half the cost of buying tokens\n// Players can also sacrifice their eggs to the FrogKing for an ETH reward\n\n// On buy, incoming ETH is distributed as such:\n// 50% saved for the SnailPot (token price on sale)\n// 20% in divs\n// 20% go to the FrogPot\n// 2% is given to the current Pharaoh\n// 2% goes to the SnailGod pot\n// 6% goes to the referral. lacking ref, it goes to the SnailGod pot\n\n// On hatch, incoming ETH is distributed as follows:\n// 40% in divs\n// 40% go to the FrogPot\n// 4% is given to the current Pharaoh\n// 16% goes to the SnailGod pot\n\n// SNAILPOT \n// Snails can be sold to the SnailPot for ether \n// Price per snail is 50% of the current buy price \n// No more than 10% of the SnailPot can be drained in one sale \n\n// FROGPOT\n// Feeding eggs to the frogking grants a reward \n// Ether earned = frogpot * eggs fed / total snails\n\n// SNAILGOD\n// The ultimate reward of the game, on a 24 hours timer\n// Sacrifice a minimum of 40 snails to become the Pharaoh\n// While the Pharaoh sits on the throne, he receives 2% ETH of every buy\n// A successful sacrifice will bump the timer back up by 8 minutes\n// and set the minimum snail requirement to 40 + this sacrifice\n// This number lowers back down to 40 over time\n// Once the timer hits 0, whoever holds the Pharaoh title ascends to godhood\n// The SnailGod can instantly claim 50% of the SnailGod pot\n// Timer resets at 24 hours, minimum sacrifice resets at 40 snails \n// and the previous Pharaoh takes the throne until a contender sacrifices enough snails\n\n// REFERRALS\n// Unlocked by owning at least 300 snails\n// Every buy through a referral link gives 6% to the referred address\n// Addresses aren't bound to their referral link\n// Referrals don't profit from hatching eggs\n\n*/\n\ncontract SnailThrone {\n    using SafeMath for uint;\n    \n    /* Events */\n    \n    event WithdrewEarnings (address indexed player, uint ethreward);\n    event ClaimedDivs (address indexed player, uint ethreward);\n    event BoughtSnail (address indexed player, uint ethspent, uint snail);\n    event SoldSnail (address indexed player, uint ethreward, uint snail);\n    event HatchedSnail (address indexed player, uint ethspent, uint snail);\n    event FedFrogking (address indexed player, uint ethreward, uint egg);\n    event Ascended (address indexed player, uint ethreward, uint indexed round);\n    event BecamePharaoh (address indexed player, uint indexed round);\n    event NewDivs (uint ethreward);\n    \n    /* Constants */\n    \n    uint256 public GOD_TIMER_START      = 86400; //seconds, or 24 hours\n\tuint256 public PHARAOH_REQ_START    = 40; //number of snails to become pharaoh\n    uint256 public GOD_TIMER_INTERVAL   = 12; //seconds to remove one snail from req\n\tuint256 public GOD_TIMER_BOOST\t\t= 480; //seconds added to timer with new pharaoh\n    uint256 public TIME_TO_HATCH_1SNAIL = 1080000; //8% daily\n    uint256 public TOKEN_PRICE_FLOOR    = 0.00002 ether; //4 zeroes\n    uint256 public TOKEN_PRICE_MULT     = 0.00000000001 ether; //10 zeroes\n    uint256 public TOKEN_MAX_BUY        = 4 ether; //max allowed eth in one buy transaction\n    uint256 public SNAIL_REQ_REF        = 300; //number of snails for ref link to be active\n\t\n    /* Variables */\n    \n    //Becomes true one time to start the game\n    bool public gameStarted             = false;\n    \n    //Used to ensure a proper game start\n    address public gameOwner;\n    \n    //SnailGod round, amount, timer\n    uint256 public godRound             = 0;\n    uint256 public godPot               = 0;\n    uint256 public godTimer             = 0;\n    \n    //Current Pharaoh\n    address public pharaoh;\n    \n    //Last time throne was claimed or pharaohReq was computed\n    uint256 public lastClaim;\n    \n    //Snails required to become the Pharaoh\n    uint256 public pharaohReq           = PHARAOH_REQ_START;\n    \n    //Total number of snail tokens\n    uint256 public maxSnail             = 0;\n    \n    //Egg sell fund\n    uint256 public frogPot              = 0;\n    \n    //Token sell fund\n    uint256 public snailPot             = 0;\n    \n    //Current divs per snail\n    uint256 public divsPerSnail         = 0;\n    \t\n    /* Mappings */\n    \n    mapping (address => uint256) public hatcherySnail;\n    mapping (address => uint256) public lastHatch;\n    mapping (address => uint256) public playerEarnings;\n    mapping (address => uint256) public claimedDivs;\n\t\n    /* Functions */\n    \n    // ACTIONS\n    \n    // Constructor\n    // Sets msg.sender as gameOwner to start the game properly\n    \n    constructor() public {\n        gameOwner = msg.sender;\n    }\n\n    // StartGame\n    // Initialize godTimer\n    // Set pharaoh and lastPharaoh as gameOwner\n    // Buy tokens for value of message\n    \n    function StartGame() public payable {\n        require(gameStarted == false);\n        require(msg.sender == gameOwner);\n        \n        godTimer = now + GOD_TIMER_START;\n        godRound = 1;\n        gameStarted = true;\n        pharaoh = gameOwner;\n        lastClaim = now;\n        BuySnail(msg.sender);\n    }\n    \n    // WithdrawEarnings\n    // Sends all player ETH earnings to his wallet\n    \n    function WithdrawEarnings() public {\n        require(playerEarnings[msg.sender] > 0);\n        \n        uint256 _amount = playerEarnings[msg.sender];\n        playerEarnings[msg.sender] = 0;\n        msg.sender.transfer(_amount);\n        \n        emit WithdrewEarnings(msg.sender, _amount);\n    }\n    \n    // ClaimDivs\n    // Sends player dividends to his playerEarnings\n    // Adjusts claimable dividends\n    \n    function ClaimDivs() public {\n        \n        uint256 _playerDivs = ComputeMyDivs();\n        \n        if(_playerDivs > 0) {\n            //Add new divs to claimed divs\n            claimedDivs[msg.sender] = claimedDivs[msg.sender].add(_playerDivs);\n            \n            //Send divs to playerEarnings\n            playerEarnings[msg.sender] = playerEarnings[msg.sender].add(_playerDivs);\n            \n            emit ClaimedDivs(msg.sender, _playerDivs);\n        }\n    }\n    \n    // BuySnail \n    \n    function BuySnail(address _ref) public payable {\n        require(gameStarted == true, \"game hasn't started yet\");\n        require(tx.origin == msg.sender, \"contracts not allowed\");\n        require(msg.value <= TOKEN_MAX_BUY, \"maximum buy = 4 ETH\");\n        \n        //Calculate price and resulting snails\n        uint256 _snailsBought = ComputeBuy(msg.value);\n        \n        //Adjust player claimed divs\n        claimedDivs[msg.sender] = claimedDivs[msg.sender].add(_snailsBought.mul(divsPerSnail));\n        \n        //Change maxSnail before new div calculation\n        maxSnail = maxSnail.add(_snailsBought);\n        \n        //Divide incoming ETH\n        PotSplit(msg.value, _ref, true);\n        \n        //Set last hatch to current timestamp\n        lastHatch[msg.sender] = now;\n        \n        //Add player snails\n        hatcherySnail[msg.sender] = hatcherySnail[msg.sender].add(_snailsBought);\n        \n        emit BoughtSnail(msg.sender, msg.value, _snailsBought);\n    }\n    \n    // SellSnail\n    \n    function SellSnail(uint256 _tokensSold) public {\n        require(gameStarted == true, \"game hasn't started yet\");\n        require(hatcherySnail[msg.sender] >= _tokensSold, \"not enough snails to sell\");\n        \n        //Call ClaimDivs so ETH isn't blackholed\n        ClaimDivs();\n\n        //Check token price, sell price is half of current buy price\n        uint256 _tokenSellPrice = ComputeTokenPrice();\n        _tokenSellPrice = _tokenSellPrice.div(2);\n        \n        //Check maximum ETH that can be obtained = 10% of SnailPot\n        uint256 _maxEth = snailPot.div(10);\n        \n        //Check maximum amount of tokens that can be sold\n        uint256 _maxTokens = _maxEth.div(_tokenSellPrice);\n        \n        //Check if player tried to sell too many tokens\n        if(_tokensSold > _maxTokens) {\n            _tokensSold = _maxTokens;\n        }\n        \n        //Calculate sell reward, tokens * price per token\n        uint256 _sellReward = _tokensSold.mul(_tokenSellPrice);\n        \n        //Remove reserve ETH \n        snailPot = snailPot.sub(_sellReward);\n        \n        //Remove tokens\n        hatcherySnail[msg.sender] = hatcherySnail[msg.sender].sub(_tokensSold);\n        maxSnail = maxSnail.sub(_tokensSold);\n        \n        //Adjust player claimed divs\n        claimedDivs[msg.sender] = claimedDivs[msg.sender].sub(divsPerSnail.mul(_tokensSold));\n        \n        //Give ETH to player \n        playerEarnings[msg.sender] = playerEarnings[msg.sender].add(_sellReward);\n        \n        emit SoldSnail(msg.sender, _sellReward, _tokensSold);\n    }\n    \n    // HatchEgg\n    // Turns player eggs into snails\n    // Costs half the ETH of a normal buy\n    \n    function HatchEgg() public payable {\n        require(gameStarted == true, \"game hasn't started yet\");\n        require(msg.value > 0, \"need ETH to hatch eggs\");\n        \n        //Check how many eggs the ether sent can pay for\n        uint256 _tokenPrice = ComputeTokenPrice().div(2);\n        uint256 _maxHatch = msg.value.div(_tokenPrice);\n        \n        //Check number of eggs to hatch\n        uint256 _newSnail = ComputeMyEggs(msg.sender);\n        \n        //Multiply by token price\n        uint256 _snailPrice = _tokenPrice.mul(_newSnail);\n        \n        //Refund any extra ether\n        uint256 _ethUsed = msg.value;\n                \n        if (msg.value > _snailPrice) {\n            uint256 _refund = msg.value.sub(_snailPrice);\n            playerEarnings[msg.sender] = playerEarnings[msg.sender].add(_refund);\n            _ethUsed = _snailPrice;\n        }\n        \n        //Adjust new snail amount if not enough ether \n        if (msg.value < _snailPrice) {\n            _newSnail = _maxHatch;\n        }\n        \n        //Adjust player divs\n        claimedDivs[msg.sender] = claimedDivs[msg.sender].add(_newSnail.mul(divsPerSnail));\n        \n        //Change maxSnail before div calculation\n        maxSnail = maxSnail.add(_newSnail);\n        \n        //Divide incoming ETH \n        PotSplit(_ethUsed, msg.sender, false);\n        \n        //Add new snails\n        lastHatch[msg.sender] = now;\n        hatcherySnail[msg.sender] = hatcherySnail[msg.sender].add(_newSnail);\n        \n        emit HatchedSnail(msg.sender, _ethUsed, _newSnail);\n    }\n    \n    // PotSplit\n    // Called on buy and hatch\n    \n    function PotSplit(uint256 _msgValue, address _ref, bool _buy) private {\n        \n        //On token buy, 50% of the ether goes to snailpot\n        //On hatch, no ether goes to the snailpot\n        uint256 _eth = _msgValue;\n        \n        if (_buy == true) {\n            _eth = _msgValue.div(2);\n            snailPot = snailPot.add(_eth);\n        }\n        \n        //20% distributed as divs (40% on hatch)\n        divsPerSnail = divsPerSnail.add(_eth.mul(2).div(5).div(maxSnail));\n        \n        //20% to FrogPot (40% on hatch)\n        frogPot = frogPot.add(_eth.mul(2).div(5));\n        \n        //2% to Pharaoh (4% on hatch)\n        playerEarnings[pharaoh] = playerEarnings[pharaoh].add(_eth.mul(2).div(50));\n        \n        //2% to SnailGod pot (4% on hatch)\n        godPot = godPot.add(_eth.mul(2).div(50));\n        \n        //Check for referrals (300 snails required)\n        //Give 6% to referrer if there is one\n        //Else give 6% to SnailGod pot\n        //Always give 12% to SnailGod pot on hatch\n        if (_ref != msg.sender && hatcherySnail[_ref] >= SNAIL_REQ_REF) {\n            playerEarnings[_ref] = playerEarnings[_ref].add(_eth.mul(6).div(50));\n        } else {\n            godPot = godPot.add(_eth.mul(6).div(50));\n        }\n    }\n    \n    // FeedEgg\n    // Sacrifices the player's eggs to the FrogPot\n    // Gives ETH in return\n    \n    function FeedEgg() public {\n        require(gameStarted == true, \"game hasn't started yet\");\n        \n        //Check number of eggs to hatch\n        uint256 _eggsUsed = ComputeMyEggs(msg.sender);\n        \n        //Remove eggs\n        lastHatch[msg.sender] = now;\n        \n        //Calculate ETH earned\n        uint256 _reward = _eggsUsed.mul(frogPot).div(maxSnail);\n        frogPot = frogPot.sub(_reward);\n        playerEarnings[msg.sender] = playerEarnings[msg.sender].add(_reward);\n        \n        emit FedFrogking(msg.sender, _reward, _eggsUsed);\n    }\n    \n    // AscendGod\n    // Distributes SnailGod pot to winner, restarts timer \n    \n    function AscendGod() public {\n\t\trequire(gameStarted == true, \"game hasn't started yet\");\n        require(now >= godTimer, \"pharaoh hasn't ascended yet\");\n        \n        //Reset timer and start new round \n        godTimer = now + GOD_TIMER_START;\n        pharaohReq = PHARAOH_REQ_START;\n        godRound = godRound.add(1);\n        \n        //Calculate and give reward\n        uint256 _godReward = godPot.div(2);\n        godPot = godPot.sub(_godReward);\n        playerEarnings[pharaoh] = playerEarnings[pharaoh].add(_godReward);\n        \n        emit Ascended(pharaoh, _godReward, godRound);\n        \n        //msg.sender becomes pharaoh \n        pharaoh = msg.sender;\n    }\n\n    // BecomePharaoh\n    // Sacrifices snails to become the Pharaoh\n    \n    function BecomePharaoh(uint256 _snails) public {\n        require(gameStarted == true, \"game hasn't started yet\");\n        require(hatcherySnail[msg.sender] >= _snails, \"not enough snails in hatchery\");\n        \n        //Run end round function if round is over\n        if(now >= godTimer) {\n            AscendGod();\n        }\n        \n        //Call ClaimDivs so ETH isn't blackholed\n        ClaimDivs();\n        \n        //Check number of snails to remove from pharaohReq\n        uint256 _snailsToRemove = ComputePharaohReq();\n        \n        //Save claim time to lower number of snails later\n        lastClaim = now;\n        \n        //Adjust pharaohReq\n        if(pharaohReq < _snailsToRemove){\n            pharaohReq = PHARAOH_REQ_START;\n        } else {\n            pharaohReq = pharaohReq.sub(_snailsToRemove);\n            if(pharaohReq < PHARAOH_REQ_START){\n                pharaohReq = PHARAOH_REQ_START;\n            }\n        }\n        \n        //Make sure player fits requirement\n        if(_snails >= pharaohReq) {\n            \n        //Remove snails\n            maxSnail = maxSnail.sub(_snails);\n            hatcherySnail[msg.sender] = hatcherySnail[msg.sender].sub(_snails);\n            \n        //Adjust msg.sender claimed dividends\n            claimedDivs[msg.sender] = claimedDivs[msg.sender].sub(_snails.mul(divsPerSnail));\n        \n        //Add 8 minutes to timer\n            godTimer = godTimer.add(GOD_TIMER_BOOST);\n            \n        //pharaohReq becomes the amount of snails sacrificed + 40\n            pharaohReq = _snails.add(PHARAOH_REQ_START);\n\n        //msg.sender becomes new Pharaoh\n            pharaoh = msg.sender;\n            \n            emit BecamePharaoh(msg.sender, godRound);\n        }\n    }\n    \n    // fallback function\n    // Distributes sent ETH as dividends\n    \n    function() public payable {\n        divsPerSnail = divsPerSnail.add(msg.value.div(maxSnail));\n        \n        emit NewDivs(msg.value);\n    }\n    \n    // VIEW\n    \n    // ComputePharaohReq\n    // Returns number of snails to remove from pharaohReq\n    // Snail requirement lowers by 1 every 12 seconds\n\n    function ComputePharaohReq() public view returns(uint256) {\n        uint256 _timeLeft = now.sub(lastClaim);\n        uint256 _req = _timeLeft.div(GOD_TIMER_INTERVAL);\n        return _req;\n    }\n\n    // ComputeTokenPrice\n    // Returns ETH required to buy one snail\n    // 1 snail = (T_P_FLOOR + (T_P_MULT * total amount of snails)) eth\n    \n    function ComputeTokenPrice() public view returns(uint256) {\n        return TOKEN_PRICE_FLOOR.add(TOKEN_PRICE_MULT.mul(maxSnail));\n    }\n    \n    // ComputeBuy\n    // Returns snails bought for a given amount of ETH \n    \n    function ComputeBuy(uint256 _ether) public view returns(uint256) {\n        uint256 _tokenPrice = ComputeTokenPrice();\n        return _ether.div(_tokenPrice);\n    }\n    \n    // ComputeMyEggs\n    // Returns eggs produced since last hatch or sacrifice\n\t// Egg amount can never be above current snail count\n    \n    function ComputeMyEggs(address adr) public view returns(uint256) {\n        uint256 _eggs = now.sub(lastHatch[adr]);\n        _eggs = _eggs.mul(hatcherySnail[adr]).div(TIME_TO_HATCH_1SNAIL);\n        if (_eggs > hatcherySnail[adr]) {\n            _eggs = hatcherySnail[adr];\n        }\n        return _eggs;\n    }\n    \n    // ComputeMyDivs\n    // Returns unclaimed divs for the player\n    \n    function ComputeMyDivs() public view returns(uint256) {\n        //Calculate share of player\n        uint256 _playerShare = divsPerSnail.mul(hatcherySnail[msg.sender]);\n\t\t\n        //Subtract already claimed divs\n    \t_playerShare = _playerShare.sub(claimedDivs[msg.sender]);\n        return _playerShare;\n    }\n    \n    // GetMySnails\n    // Returns player snails\n    \n    function GetMySnails() public view returns(uint256) {\n        return hatcherySnail[msg.sender];\n    }\n    \n    // GetMyEarnings\n    // Returns player earnings\n    \n    function GetMyEarnings() public view returns(uint256) {\n        return playerEarnings[msg.sender];\n    }\n    \n    // GetContractBalance\n    // Returns ETH in contract\n    \n    function GetContractBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n    \n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"ClaimDivs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ComputeMyDivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"AscendGod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"godTimer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_snails\",\"type\":\"uint256\"}],\"name\":\"BecomePharaoh\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcherySnail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"FeedEgg\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PHARAOH_REQ_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMySnails\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_MAX_BUY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frogPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedDivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SNAIL_REQ_REF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"BuySnail\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pharaoh\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerEarnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"snailPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GOD_TIMER_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_PRICE_FLOOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pharaohReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"HatchEgg\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"godPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StartGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawEarnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ether\",\"type\":\"uint256\"}],\"name\":\"ComputeBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensSold\",\"type\":\"uint256\"}],\"name\":\"SellSnail\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_TO_HATCH_1SNAIL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ComputePharaohReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ComputeTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"godRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_PRICE_MULT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divsPerSnail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GOD_TIMER_BOOST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GOD_TIMER_INTERVAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyEarnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"ComputeMyEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSnail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethreward\",\"type\":\"uint256\"}],\"name\":\"WithdrewEarnings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethreward\",\"type\":\"uint256\"}],\"name\":\"ClaimedDivs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethspent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"snail\",\"type\":\"uint256\"}],\"name\":\"BoughtSnail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethreward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"snail\",\"type\":\"uint256\"}],\"name\":\"SoldSnail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethspent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"snail\",\"type\":\"uint256\"}],\"name\":\"HatchedSnail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethreward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"egg\",\"type\":\"uint256\"}],\"name\":\"FedFrogking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethreward\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Ascended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"BecamePharaoh\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ethreward\",\"type\":\"uint256\"}],\"name\":\"NewDivs\",\"type\":\"event\"}]",
  "bytecode": "608060405262015180600090815560286001819055600c60028190556101e060035562107ac06004556512309ce5400060055562989680600655673782dace9d90000060075561012c6008556009805460ff19169055600a839055600b839055829055600f5560108190556011819055601281905560135534801561008357600080fd5b506009805461010060a860020a031916336101000217905561183b806100aa6000396000f3006080604052600436106102035763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663076600ec811461026157806308f14dd8146102785780631e4644601461029f57806320d0a718146102b457806320e561f3146102c957806321d1d388146102e157806340a530171461030257806341693dd814610317578063457eff2f1461032c578063467ece79146103415780634af202d0146103625780634ced1be7146103775780634dfe89e71461038c5780634ee6fa13146103ad57806359423a7f146103c25780635e123ce4146103d6578063661db79b146103ff57806369f92773146104305780636c3aaab71461045157806372255bec146104665780638225cd191461047b578063878d2218146104905780638b5e331c146104a55780638d3a7edb146104ad578063a3dfc364146104c2578063a8adb564146104ca578063ad2e6aff146104df578063c22af7ff146104f4578063c4cc161b1461050c578063c6daeeaa14610524578063c6e946df14610539578063c82467c91461054e578063cf41ee0f14610563578063def71c7814610578578063e0e0a95a1461058d578063ec612b83146105a2578063f1759626146105b7578063f3083c44146105cc578063f546232d146105e1578063f6b12f2814610602578063f6d0bf2f14610617578063f734857e1461062c575b61022a61021b6010543461064190919063ffffffff16565b6013549063ffffffff61065d16565b6013556040805134815290517e745acf7b129fcf888425bc875b066e2d76018ca5c44b4e8274804cae712a699181900360200190a1005b34801561026d57600080fd5b50610276610673565b005b34801561028457600080fd5b5061028d610721565b60408051918252519081900360200190f35b3480156102ab57600080fd5b50610276610770565b3480156102c057600080fd5b5061028d610919565b3480156102d557600080fd5b5061027660043561091f565b3480156102ed57600080fd5b5061028d600160a060020a0360043516610b53565b34801561030e57600080fd5b50610276610b65565b34801561032357600080fd5b5061028d610c8a565b34801561033857600080fd5b5061028d610c90565b34801561034d57600080fd5b5061028d600160a060020a0360043516610ca3565b34801561036e57600080fd5b5061028d610cb5565b34801561038357600080fd5b5061028d610cbb565b34801561039857600080fd5b5061028d600160a060020a0360043516610cc1565b3480156103b957600080fd5b5061028d610cd3565b610276600160a060020a0360043516610cd9565b3480156103e257600080fd5b506103eb610ecd565b604080519115158252519081900360200190f35b34801561040b57600080fd5b50610414610ed6565b60408051600160a060020a039092168252519081900360200190f35b34801561043c57600080fd5b5061028d600160a060020a0360043516610ee5565b34801561045d57600080fd5b5061028d610ef7565b34801561047257600080fd5b5061028d610efd565b34801561048757600080fd5b5061028d610f03565b34801561049c57600080fd5b5061028d610f09565b610276610f0f565b3480156104b957600080fd5b5061028d61112d565b610276611133565b3480156104d657600080fd5b5061028d6111bf565b3480156104eb57600080fd5b506102766111c5565b34801561050057600080fd5b5061028d60043561125c565b34801561051857600080fd5b50610276600435611279565b34801561053057600080fd5b5061028d61149a565b34801561054557600080fd5b5061028d6114a0565b34801561055a57600080fd5b5061028d6114d1565b34801561056f57600080fd5b5061028d611501565b34801561058457600080fd5b5061028d611507565b34801561059957600080fd5b5061028d61150d565b3480156105ae57600080fd5b5061028d611513565b3480156105c357600080fd5b5061028d611519565b3480156105d857600080fd5b5061028d61151f565b3480156105ed57600080fd5b5061028d600160a060020a0360043516611532565b34801561060e57600080fd5b506104146115d2565b34801561062357600080fd5b5061028d6115e6565b34801561063857600080fd5b5061028d6115eb565b600080828481151561064f57fe5b0490508091505b5092915050565b60008282018381101561066c57fe5b9392505050565b600061067d610721565b9050600081111561071e57336000908152601760205260409020546106a8908263ffffffff61065d16565b336000908152601760209081526040808320939093556016905220546106d4908263ffffffff61065d16565b33600081815260166020908152604091829020939093558051848152905191927fc95f5b57d6968ab5fceb36d06095e6bcd7f6a057a0ffd4534874fc2c1bc3d7c792918290030190a25b50565b336000908152601460205260408120546013548291610746919063ffffffff6115f116565b3360009081526017602052604090205490915061076a90829063ffffffff61161c16565b92915050565b60095460009060ff1615156001146107c0576040805160e560020a62461bcd02815260206004820152601760248201526000805160206117f0833981519152604482015290519081900360640190fd5b600c5442101561081a576040805160e560020a62461bcd02815260206004820152601b60248201527f70686172616f68206861736e277420617363656e646564207965740000000000604482015290519081900360640190fd5b6000544201600c5560018054600f55600a5461083b9163ffffffff61065d16565b600a55600b5461085290600263ffffffff61064116565b600b54909150610868908263ffffffff61161c16565b600b55600d54600160a060020a0316600090815260166020526040902054610896908263ffffffff61065d16565b600d8054600160a060020a0390811660009081526016602090815260409182902094909455600a5492548151868152915193949216927fda739e1890ec21f60b7a7ae3d34be556eae309b72dec4fe3617e29cb1b6c8b10929181900390910190a350600d805473ffffffffffffffffffffffffffffffffffffffff191633179055565b600c5481565b60095460009060ff16151560011461096f576040805160e560020a62461bcd02815260206004820152601760248201526000805160206117f0833981519152604482015290519081900360640190fd5b336000908152601460205260409020548211156109d6576040805160e560020a62461bcd02815260206004820152601d60248201527f6e6f7420656e6f75676820736e61696c7320696e206861746368657279000000604482015290519081900360640190fd5b600c5442106109e7576109e7610770565b6109ef610673565b6109f76114a0565b42600e55600f54909150811115610a1357600154600f55610a3b565b600f54610a26908263ffffffff61161c16565b600f8190556001541115610a3b57600154600f555b600f548210610b4f57601054610a57908363ffffffff61161c16565b60105533600090815260146020526040902054610a7a908363ffffffff61161c16565b33600090815260146020526040902055601354610abe90610aa290849063ffffffff6115f116565b336000908152601760205260409020549063ffffffff61161c16565b33600090815260176020526040902055600354600c54610ae39163ffffffff61065d16565b600c55600154610afa90839063ffffffff61065d16565b600f55600d805473ffffffffffffffffffffffffffffffffffffffff191633908117909155600a546040519091907fe27cb9a1ab8afadd27eedf136dc62c503555f2de46c6e406c4686fda69abd39890600090a35b5050565b60146020526000908152604090205481565b600954600090819060ff161515600114610bb7576040805160e560020a62461bcd02815260206004820152601760248201526000805160206117f0833981519152604482015290519081900360640190fd5b610bc033611532565b336000908152601560205260409020429055601054601154919350610bfc91610bf090859063ffffffff6115f116565b9063ffffffff61064116565b601154909150610c12908263ffffffff61161c16565b60115533600090815260166020526040902054610c35908263ffffffff61065d16565b33600081815260166020908152604091829020939093558051848152928301859052805191927f229a24dfd28bbaf7ddd1a317967e5f658b2ad6b2e9d9f3ec1b1bf09ecec17625929081900390910190a25050565b60015481565b3360009081526014602052604090205490565b60156020526000908152604090205481565b60075481565b60115481565b60176020526000908152604090205481565b60085481565b60095460009060ff161515600114610d29576040805160e560020a62461bcd02815260206004820152601760248201526000805160206117f0833981519152604482015290519081900360640190fd5b323314610d80576040805160e560020a62461bcd02815260206004820152601560248201527f636f6e747261637473206e6f7420616c6c6f7765640000000000000000000000604482015290519081900360640190fd5b600754341115610dda576040805160e560020a62461bcd02815260206004820152601360248201527f6d6178696d756d20627579203d20342045544800000000000000000000000000604482015290519081900360640190fd5b610de33461125c565b9050610e19610dfd601354836115f190919063ffffffff16565b336000908152601760205260409020549063ffffffff61065d16565b33600090815260176020526040902055601054610e3c908263ffffffff61065d16565b601055610e4b3483600161162e565b3360009081526015602090815260408083204290556014909152902054610e78908263ffffffff61065d16565b33600081815260146020908152604091829020939093558051348152928301849052805191927f08a800eabe1f629c9863424263b12e3ece21bd1c6654ae97f143e05716ee5ae0929081900390910190a25050565b60095460ff1681565b600d54600160a060020a031681565b60166020526000908152604090205481565b60125481565b60005481565b60055481565b600f5481565b6009546000908190819081908190819060ff161515600114610f69576040805160e560020a62461bcd02815260206004820152601760248201526000805160206117f0833981519152604482015290519081900360640190fd5b60003411610fc1576040805160e560020a62461bcd02815260206004820152601660248201527f6e6565642045544820746f206861746368206567677300000000000000000000604482015290519081900360640190fd5b610fce6002610bf06114d1565b9550610fe0348763ffffffff61064116565b9450610feb33611532565b9350610ffd868563ffffffff6115f116565b9250349150823411156110515761101a348463ffffffff61161c16565b3360009081526016602052604090205490915061103d908263ffffffff61065d16565b336000908152601660205260409020558291505b8234101561105d578493505b611075610dfd601354866115f190919063ffffffff16565b33600090815260176020526040902055601054611098908563ffffffff61065d16565b6010556110a78233600061162e565b33600090815260156020908152604080832042905560149091529020546110d4908563ffffffff61065d16565b33600081815260146020908152604091829020939093558051858152928301879052805191927fe0bc6cbf1201336231e315089a4c484f27a6f15e78ba2634681518468d1a051a929081900390910190a2505050505050565b600b5481565b60095460ff161561114357600080fd5b6009546101009004600160a060020a0316331461115f57600080fd5b60005442908101600c556001600a8190556009805460ff191690911790819055600d8054610100909204600160a060020a031673ffffffffffffffffffffffffffffffffffffffff19909216919091179055600e556111bd33610cd9565b565b600e5481565b3360009081526016602052604081205481106111e057600080fd5b5033600081815260166020526040808220805490839055905190929183156108fc02918491818181858888f19350505050158015611222573d6000803e3d6000fd5b5060408051828152905133917fc7035f890abdb50e1dcbc2664e1f5a9c99696d1ded57f140955139aaddb2b06a919081900360200190a250565b6000806112676114d1565b905061066c838263ffffffff61064116565b60095460009081908190819060ff1615156001146112cf576040805160e560020a62461bcd02815260206004820152601760248201526000805160206117f0833981519152604482015290519081900360640190fd5b33600090815260146020526040902054851115611336576040805160e560020a62461bcd02815260206004820152601960248201527f6e6f7420656e6f75676820736e61696c7320746f2073656c6c00000000000000604482015290519081900360640190fd5b61133e610673565b6113466114d1565b935061135984600263ffffffff61064116565b60125490945061137090600a63ffffffff61064116565b9250611382838563ffffffff61064116565b915081851115611390578194505b6113a0858563ffffffff6115f116565b6012549091506113b6908263ffffffff61161c16565b601255336000908152601460205260409020546113d9908663ffffffff61161c16565b336000908152601460205260409020556010546113fc908663ffffffff61161c16565b60105560135461141690610aa2908763ffffffff6115f116565b33600090815260176020908152604080832093909355601690522054611442908263ffffffff61065d16565b33600081815260166020908152604091829020939093558051848152928301889052805191927f7f8c786179fb79de8e39f3892d466953f1db1a6172c7783d36c427acea8055a8929081900390910190a25050505050565b60045481565b60008060006114ba600e544261161c90919063ffffffff16565b915061066c6002548361064190919063ffffffff16565b60006114fc6114ed6010546006546115f190919063ffffffff16565b6005549063ffffffff61065d16565b905090565b600a5481565b60065481565b60135481565b60035481565b60025481565b3360009081526016602052604090205490565b600160a060020a038116600090815260156020526040812054819061155e90429063ffffffff61161c16565b600454600160a060020a03851660009081526014602052604090205491925061159291610bf090849063ffffffff6115f116565b600160a060020a03841660009081526014602052604090205490915081111561076a575050600160a060020a031660009081526014602052604090205490565b6009546101009004600160a060020a031681565b303190565b60105481565b6000808315156116045760009150610656565b5082820282848281151561161457fe5b041461066c57fe5b60008282111561162857fe5b50900390565b82600182151514156116655761164b84600263ffffffff61064116565b601254909150611661908263ffffffff61065d16565b6012555b6010546116849061021b90610bf060058186600263ffffffff6115f116565b6013556116af6116a06005610bf084600263ffffffff6115f116565b6011549063ffffffff61065d16565b6011556116f26116cb6032610bf084600263ffffffff6115f116565b600d54600160a060020a03166000908152601660205260409020549063ffffffff61065d16565b600d54600160a060020a03166000908152601660205260409020556117356117266032610bf084600263ffffffff6115f116565b600b549063ffffffff61065d16565b600b55600160a060020a038316331480159061176b5750600854600160a060020a03841660009081526014602052604090205410155b156117cc576117ae6117896032610bf084600663ffffffff6115f116565b600160a060020a0385166000908152601660205260409020549063ffffffff61065d16565b600160a060020a0384166000908152601660205260409020556117e9565b6117e56117266032610bf084600663ffffffff6115f116565b600b555b50505050560067616d65206861736e2774207374617274656420796574000000000000000000a165627a7a72305820e81cf8d09b3ba8b4c3d51e9cd13a385dba83f21d3441bc31c6e536cdb8bbdb6e0029"
}