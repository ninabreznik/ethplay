{
  "address": "0x6020da0f7c1857dbe4431ec92a15cc318d933eaa",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ETMToken",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-26\n*/\n\npragma solidity ^0.5.0;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero account\");\n        return role.bearer[account];\n    }\n}\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor() internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\ncontract AdministratorRole {\n    using Roles for Roles.Role;\n\n    event AdministractorTransfered(address indexed previousAdmin, address indexed newAdmin);\n    event LockerAdded(address indexed account);\n    event LockerRemoved(address indexed account);\n\n    address private _admin;\n    Roles.Role private _lockers;\n\n    constructor() internal {\n        _admin = msg.sender;\n\n        emit AdministractorTransfered(address(0), _admin);\n    }\n\n    function administrator() public view returns (address) {\n        return _admin;\n    }\n\n    modifier onlyAdministrator() {\n        require(isAdministrator(), \"AdministratorRole: caller is not the administrator\");\n        _;\n    }\n\n    function isAdministrator() public view returns (bool) {\n        return msg.sender == _admin;\n    }\n\n    function transferAdministrator(address newAdmin) public onlyAdministrator {\n        _transferAdministrator(newAdmin);\n    }\n\n    function _transferAdministrator(address newAdmin) internal {\n        require(newAdmin != address(0), \"Ownable: new owner is the zero address\");\n        emit AdministractorTransfered(_admin, newAdmin);\n        _admin = newAdmin;\n    }\n\n    modifier lockerExists(address account) {\n        require(isLocker(account), \"AdministratorRole: account is not a locker\");\n        _;\n    }\n\n    modifier lockerNotExists(address account) {\n        require(!isLocker(account), \"AdministratorRole: account is a locker\");\n        _;\n    }\n\n    modifier onlyUnlocker() {\n        require(!isLocker(msg.sender), \"AdministratorRole: caller is a locker\");\n        _;\n    }\n\n    modifier onlyLocker() {\n        require(isLocker(msg.sender), \"AdministratorRole: caller is not a locker\");\n        _;\n    }\n\n    function isLocker(address account) public view returns (bool) {\n        return _lockers.has(account);\n    }\n\n    function addLocker(address account) public onlyAdministrator lockerNotExists(account) {\n        _addLocker(account);\n    }\n\n    function removeLocker(address account) public onlyAdministrator lockerExists(account) {\n        _removeLocker(account);\n    }\n\n    function _addLocker(address account) internal {\n        _lockers.add(account);\n        emit LockerAdded(account);\n    }\n\n    function _removeLocker(address account) internal {\n        _lockers.remove(account);\n        emit LockerRemoved(account);\n    }\n}\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() internal {\n        _owner = msg.sender;\n\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor() internal {\n        _paused = false;\n    }\n\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20 is IERC20, AdministratorRole, Pausable {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    function transfer(address to, uint256 value) public whenNotPaused onlyUnlocker returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused onlyUnlocker returns (bool) {\n        if (value != 0 && _allowed[msg.sender][spender] != 0) return false;\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused lockerNotExists(from) returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused onlyUnlocker returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused onlyUnlocker returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0), \"ERC20: transfer to zero address\");\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: mint to zero address\");\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n}\n\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor(string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\ncontract ETMToken is Ownable, ERC20Detailed, ERC20 {\n    using SafeMath for uint256;\n\n    uint8 public constant DECIMALS = 18;\n    uint256 private INIT_SUPPLY = uint256(210000000).mul(10 ** uint256(DECIMALS));\n    bool private _destoried = false;\n\n    constructor() public ERC20Detailed(\"EnTanMo\", \"ETM\", DECIMALS) {\n        _mint(msg.sender, INIT_SUPPLY);\n    }\n\n    function destory() public onlyOwner returns (bool) {\n        if (!_destoried) {\n            selfdestruct(address(0));\n            _destoried = true;\n            return true;\n        }\n\n        return false;\n    }\n}",
  "bytecode": "60806040526200002a630c845880670de0b6b3a76400006401000000006200167d620001ca82021704565b600a55600b805460ff191690553480156200004457600080fd5b50604080518082018252600781527f456e54616e4d6f0000000000000000000000000000000000000000000000000060208083019190915282518084018452600381527f45544d00000000000000000000000000000000000000000000000000000000009181019190915260008054600160a060020a0319163317808255935192939192601292600160a060020a031691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a382516200011090600190602086019062000565565b5081516200012690600290602085019062000565565b506003805460ff191660ff929092169190911761010060a860020a0319166101003381029190911791829055604051600160a060020a0391909204169250600091507f959c86c0ffefa8ea7b1b92a4d23fdc50f29afba43d22084ee2160497fe353bd2908290a3620001a1336401000000006200024f810204565b6006805460ff19169055600a54620001c4903390640100000000620002a1810204565b6200060a565b6000821515620001dd5750600062000249565b828202828482811515620001ed57fe5b041462000246576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018062001f0c6021913960400191505060405180910390fd5b90505b92915050565b6200026a6005826401000000006200158d620003c482021704565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600160a060020a03821615156200031957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f45524332303a206d696e7420746f207a65726f20616464726573730000000000604482015290519081900360640190fd5b600954620003369082640100000000620012996200046b82021704565b600955600160a060020a0382166000908152600760205260409020546200036c9082640100000000620012996200046b82021704565b600160a060020a03831660008181526007602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b620003d98282640100000000620004e0810204565b156200044657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000828201838110156200024657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000600160a060020a038216151562000545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018062001eea6022913960400191505060405180910390fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620005a857805160ff1916838001178555620005d8565b82800160010185558215620005d8579182015b82811115620005d8578251825591602001919060010190620005bb565b50620005e6929150620005ea565b5090565b6200060791905b80821115620005e65760008155600101620005f1565b90565b6118d0806200061a6000396000f3fe608060405234801561001057600080fd5b50600436106101e1576000357c0100000000000000000000000000000000000000000000000000000000900480636ef8d66d11610116578063a457c2d7116100b4578063ce62cd4a1161008e578063ce62cd4a146104e7578063dd62ed3e1461050d578063f2fde38b1461053b578063f53d0a8e14610561576101e1565b8063a457c2d714610469578063a9059cbb14610495578063c648a3a2146104c1576101e1565b80638456cb59116100f05780638456cb591461042d5780638da5cb5b146104355780638f32d59b1461045957806395d89b4114610461576101e1565b80636ef8d66d146103d957806370a08231146103e157806382dc1ec414610407576101e1565b8063313ce5671161018357806345cc58901161015d57806345cc58901461037d57806346fbf68e146103a35780635c975abb146103c95780636bdebcc9146103d1576101e1565b8063313ce5671461033f57806339509351146103475780633f4ba83a14610373576101e1565b80631aea6257116101bf5780631aea6257146102bd57806323b872dd146102c55780632e0f2625146102fb5780632ec63d7c14610319576101e1565b806306fdde03146101e6578063095ea7b31461026357806318160ddd146102a3575b600080fd5b6101ee610569565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610228578181015183820152602001610210565b50505050905090810190601f1680156102555780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61028f6004803603604081101561027957600080fd5b50600160a060020a0381351690602001356105fe565b604080519115158252519081900360200190f35b6102ab6106e5565b60408051918252519081900360200190f35b61028f6106eb565b61028f600480360360608110156102db57600080fd5b50600160a060020a03813581169160208101359091169060400135610701565b6103036107ec565b6040805160ff9092168252519081900360200190f35b61028f6004803603602081101561032f57600080fd5b5035600160a060020a03166107f1565b610303610804565b61028f6004803603604081101561035d57600080fd5b50600160a060020a03813516906020013561080d565b61037b6108dc565b005b61037b6004803603602081101561039357600080fd5b5035600160a060020a03166109c0565b61028f600480360360208110156103b957600080fd5b5035600160a060020a0316610a5e565b61028f610a71565b61028f610a7a565b61037b610af0565b6102ab600480360360208110156103f757600080fd5b5035600160a060020a0316610afb565b61037b6004803603602081101561041d57600080fd5b5035600160a060020a0316610b16565b61037b610b6b565b61043d610c3f565b60408051600160a060020a039092168252519081900360200190f35b61028f610c4e565b6101ee610c5f565b61028f6004803603604081101561047f57600080fd5b50600160a060020a038135169060200135610cbd565b61028f600480360360408110156104ab57600080fd5b50600160a060020a038135169060200135610d8c565b61037b600480360360208110156104d757600080fd5b5035600160a060020a0316610e2b565b61037b600480360360208110156104fd57600080fd5b5035600160a060020a0316610e7c565b6102ab6004803603604081101561052357600080fd5b50600160a060020a0381358116916020013516610f17565b61037b6004803603602081101561055157600080fd5b5035600160a060020a0316610f42565b61043d610fa9565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156105f45780601f106105c9576101008083540402835291602001916105f4565b820191906000526020600020905b8154815290600101906020018083116105d757829003601f168201915b5050505050905090565b60065460009060ff161561064a576040805160e560020a62461bcd0281526020600482015260106024820152600080516020611861833981519152604482015290519081900360640190fd5b610653336107f1565b156106925760405160e560020a62461bcd0281526004018080602001828103825260258152602001806117d86025913960400191505060405180910390fd5b81158015906106c35750336000908152600860209081526040808320600160a060020a038716845290915290205415155b156106d0575060006106df565b6106db338484610fbd565b5060015b92915050565b60095490565b6003546101009004600160a060020a0316331490565b60065460009060ff161561074d576040805160e560020a62461bcd0281526020600482015260106024820152600080516020611861833981519152604482015290519081900360640190fd5b83610757816107f1565b156107965760405160e560020a62461bcd0281526004018080602001828103825260268152602001806117566026913960400191505060405180910390fd5b6107a18585856110b3565b600160a060020a0385166000908152600860209081526040808320338085529252909120546107e19187916107dc908763ffffffff6111cd16565b610fbd565b506001949350505050565b601281565b60006106df60048363ffffffff61122d16565b60035460ff1690565b60065460009060ff1615610859576040805160e560020a62461bcd0281526020600482015260106024820152600080516020611861833981519152604482015290519081900360640190fd5b610862336107f1565b156108a15760405160e560020a62461bcd0281526004018080602001828103825260258152602001806117d86025913960400191505060405180910390fd5b336000818152600860209081526040808320600160a060020a03881684529091529020546106db919085906107dc908663ffffffff61129916565b6108e533610a5e565b15156109255760405160e560020a62461bcd0281526004018080602001828103825260308152602001806116de6030913960400191505060405180910390fd5b60065460ff161515610981576040805160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015290519081900360640190fd5b6006805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b6109c86106eb565b1515610a085760405160e560020a62461bcd0281526004018080602001828103825260328152602001806117a66032913960400191505060405180910390fd5b80610a12816107f1565b15610a515760405160e560020a62461bcd0281526004018080602001828103825260268152602001806117566026913960400191505060405180910390fd5b610a5a826112fd565b5050565b60006106df60058363ffffffff61122d16565b60065460ff1690565b6000610a84610c4e565b1515610ada576040805160e560020a62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600b5460ff161515610aea576000ff5b50600090565b610af933611345565b565b600160a060020a031660009081526007602052604090205490565b610b1f33610a5e565b1515610b5f5760405160e560020a62461bcd0281526004018080602001828103825260308152602001806116de6030913960400191505060405180910390fd5b610b688161138d565b50565b610b7433610a5e565b1515610bb45760405160e560020a62461bcd0281526004018080602001828103825260308152602001806116de6030913960400191505060405180910390fd5b60065460ff1615610bfd576040805160e560020a62461bcd0281526020600482015260106024820152600080516020611861833981519152604482015290519081900360640190fd5b6006805460ff191660011790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b600054600160a060020a031690565b600054600160a060020a0316331490565b60028054604080516020601f60001961010060018716150201909416859004938401819004810282018101909252828152606093909290918301828280156105f45780601f106105c9576101008083540402835291602001916105f4565b60065460009060ff1615610d09576040805160e560020a62461bcd0281526020600482015260106024820152600080516020611861833981519152604482015290519081900360640190fd5b610d12336107f1565b15610d515760405160e560020a62461bcd0281526004018080602001828103825260258152602001806117d86025913960400191505060405180910390fd5b336000818152600860209081526040808320600160a060020a03881684529091529020546106db919085906107dc908663ffffffff6111cd16565b60065460009060ff1615610dd8576040805160e560020a62461bcd0281526020600482015260106024820152600080516020611861833981519152604482015290519081900360640190fd5b610de1336107f1565b15610e205760405160e560020a62461bcd0281526004018080602001828103825260258152602001806117d86025913960400191505060405180910390fd5b6106db3384846110b3565b610e336106eb565b1515610e735760405160e560020a62461bcd0281526004018080602001828103825260328152602001806117a66032913960400191505060405180910390fd5b610b68816113d5565b610e846106eb565b1515610ec45760405160e560020a62461bcd0281526004018080602001828103825260328152602001806117a66032913960400191505060405180910390fd5b80610ece816107f1565b1515610f0e5760405160e560020a62461bcd02815260040180806020018281038252602a81526020018061177c602a913960400191505060405180910390fd5b610a5a82611493565b600160a060020a03918216600090815260086020908152604080832093909416825291909152205490565b610f4a610c4e565b1515610fa0576040805160e560020a62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610b68816114db565b6003546101009004600160a060020a031690565b600160a060020a03831615156110075760405160e560020a62461bcd0281526004018080602001828103825260248152602001806118816024913960400191505060405180910390fd5b600160a060020a03821615156110515760405160e560020a62461bcd0281526004018080602001828103825260228152602001806117346022913960400191505060405180910390fd5b600160a060020a03808416600081815260086020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600160a060020a0382161515611113576040805160e560020a62461bcd02815260206004820152601f60248201527f45524332303a207472616e7366657220746f207a65726f206164647265737300604482015290519081900360640190fd5b600160a060020a03831660009081526007602052604090205461113c908263ffffffff6111cd16565b600160a060020a038085166000908152600760205260408082209390935590841681522054611171908263ffffffff61129916565b600160a060020a0380841660008181526007602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600082821115611227576040805160e560020a62461bcd02815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000600160a060020a03821615156112795760405160e560020a62461bcd02815260040180806020018281038252602281526020018061181e6022913960400191505060405180910390fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b6000828201838110156112f6576040805160e560020a62461bcd02815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b61130e60048263ffffffff61158d16565b604051600160a060020a038216907f7c5af8d36d8be103bc583da8e01d3e98f15216cc7ef38832c7550b34e8feb43a90600090a250565b61135660058263ffffffff61161116565b604051600160a060020a038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b61139e60058263ffffffff61158d16565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600160a060020a038116151561141f5760405160e560020a62461bcd02815260040180806020018281038252602681526020018061170e6026913960400191505060405180910390fd5b600354604051600160a060020a0380841692610100900416907f959c86c0ffefa8ea7b1b92a4d23fdc50f29afba43d22084ee2160497fe353bd290600090a360038054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b6114a460048263ffffffff61161116565b604051600160a060020a038216907f95266445d018e5b30f957c915e91b04bb4a19bf0f8f21020a08dad9be7931df490600090a250565b600160a060020a03811615156115255760405160e560020a62461bcd02815260040180806020018281038252602681526020018061170e6026913960400191505060405180910390fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b611597828261122d565b156115ec576040805160e560020a62461bcd02815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b61161b828261122d565b151561165b5760405160e560020a62461bcd0281526004018080602001828103825260218152602001806117fd6021913960400191505060405180910390fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600082151561168e575060006106df565b82820282848281151561169d57fe5b04146112f65760405160e560020a62461bcd0281526004018080602001828103825260218152602001806118406021913960400191505060405180910390fdfe506175736572526f6c653a2063616c6c657220646f6573206e6f742068617665207468652050617573657220726f6c654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737341646d696e6973747261746f72526f6c653a206163636f756e742069732061206c6f636b657241646d696e6973747261746f72526f6c653a206163636f756e74206973206e6f742061206c6f636b657241646d696e6973747261746f72526f6c653a2063616c6c6572206973206e6f74207468652061646d696e6973747261746f7241646d696e6973747261746f72526f6c653a2063616c6c65722069732061206c6f636b6572526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c65526f6c65733a206163636f756e7420697320746865207a65726f206163636f756e74536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775061757361626c653a207061757365640000000000000000000000000000000045524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373a165627a7a72305820f930ff7000a9f81211932514fccc6bab1ce1d6f5b0806d4904500190e2f6de010029526f6c65733a206163636f756e7420697320746865207a65726f206163636f756e74536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
  "constructorArguments": "526f6c65733a206163636f756e7420697320746865207a65726f206163636f756e74536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77"
}