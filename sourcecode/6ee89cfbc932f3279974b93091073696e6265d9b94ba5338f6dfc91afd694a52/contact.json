{
  "address": "0xd69b75d5dc270e4f6cd664ac2354d12423c5ae9e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "IronHands",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-07\n*/\n\npragma solidity ^0.4.21;\n\n/**\n * \n * \n *                \n *\n * ATTENTION!\n * \n * This code? IS NOT DESIGNED FOR ACTUAL USE.\n * \n * The author of this code really wishes you wouldn't send your ETH to it, but it's been\n * done with P3D and there are very happy users because of it.\n * \n * No, seriously. It's probablly illegal anyway. So don't do it.\n * \n * Let me repeat that: Don't actually send money to this contract. You are \n * likely breaking several local and national laws in doing so.\n * \n * This code is intended to educate. Nothing else. If you use it, expect S.W.A.T \n * teams at your door. I wrote this code because I wanted to experiment\n * with smart contracts, and I think code should be open source. So consider\n * it public domain, No Rights Reserved. Participating in pyramid schemes\n * is genuinely illegal so just don't even think about going beyond\n * reading the code and understanding how it works.\n * \n * Seriously. I'm not kidding. It's probablly broken in some critical way anyway\n * and will suck all your money out your wallet, install a virus on your computer\n * sleep with your wife, kidnap your children and sell them into slavery,\n * make you forget to file your taxes, and give you cancer.\n * \n * \n * What it does:\n * \n * It takes 50% of the ETH in it and buys tokens.\n * It takes 50% of the ETH in it and pays back depositors.\n * Depositors get in line and are paid out in order of deposit, plus the deposit\n * percent.\n * The tokens collect dividends, which in turn pay into the payout pool\n * to be split 50/50.\n * \n * If you're seeing this contract in it's initial configuration, it should be\n * set to 200% (double deposits), and pointed at PoWH:\n * 0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe\n * \n * But you should verify this for yourself.\n *  \n *  \n */\n\ncontract ERC20Interface {\n    function transfer(address to, uint256 tokens) public returns (bool success);\n}\n\ncontract POOH {\n    \n    function buy(address) public payable returns(uint256);\n    function withdraw() public;\n    function myTokens() public view returns(uint256);\n    function myDividends(bool) public view returns(uint256);\n}\n\ncontract Owned {\n    address public owner;\n    address public ownerCandidate;\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    function changeOwner(address _newOwner) public onlyOwner {\n        ownerCandidate = _newOwner;\n    }\n    \n    function acceptOwnership() public {\n        require(msg.sender == ownerCandidate);  \n        owner = ownerCandidate;\n    }\n    \n}\n\ncontract IronHands is Owned {\n    \n    /**\n     * Modifiers\n     */\n     \n    /**\n     * Only owners are allowed.\n     */\n    modifier onlyOwner(){\n        require(msg.sender == owner);\n        _;\n    }\n    \n    /**\n     * The tokens can never be stolen.\n     */\n    modifier notPooh(address aContract){\n        require(aContract != address(weak_hands));\n        _;\n    }\n   \n    /**\n     * Events\n     */\n    event Deposit(uint256 amount, address depositer);\n    event Purchase(uint256 amountSpent, uint256 tokensReceived);\n    event Payout(uint256 amount, address creditor);\n    event Dividends(uint256 amount);\n   \n    /**\n     * Structs\n     */\n    struct Participant {\n        address etherAddress;\n        uint256 payout;\n    }\n\n    //Total ETH managed over the lifetime of the contract\n    uint256 throughput;\n    //Total ETH received from dividends\n    uint256 dividends;\n    //The percent to return to depositers. 100 for 00%, 200 to double, etc.\n    uint256 public multiplier;\n    //Where in the line we are with creditors\n    uint256 public payoutOrder = 0;\n    //How much is owed to people\n    uint256 public backlog = 0;\n    //The creditor line\n    Participant[] public participants;\n    //How much each person is owed\n    mapping(address => uint256) public creditRemaining;\n    //What we will be buying\n    POOH weak_hands;\n\n    /**\n     * Constructor\n     */\n    function IronHands(uint multiplierPercent, address pooh) public {\n        multiplier = multiplierPercent;\n        weak_hands = POOH(pooh);\n    }\n    \n    \n    /**\n     * Fallback function allows anyone to send money for the cost of gas which\n     * goes into the pool. Used by withdraw/dividend payouts so it has to be cheap.\n     */\n    function() payable public {\n    }\n    \n    /**\n     * Deposit ETH to get in line to be credited back the multiplier as a percent,\n     * add that ETH to the pool, get the dividends and put them in the pool,\n     * then pay out who we owe and buy more tokens.\n     */ \n    function deposit() payable public {\n        //You have to send more than 1000000 wei.\n        require(msg.value > 1000000);\n        //Compute how much to pay them\n        uint256 amountCredited = (msg.value * multiplier) / 100;\n        //Get in line to be paid back.\n        participants.push(Participant(msg.sender, amountCredited));\n        //Increase the backlog by the amount owed\n        backlog += amountCredited;\n        //Increase the amount owed to this address\n        creditRemaining[msg.sender] += amountCredited;\n        //Emit a deposit event.\n        emit Deposit(msg.value, msg.sender);\n        //If I have dividends\n        if(myDividends() > 0){\n            //Withdraw dividends\n            withdraw();\n        }\n        //Pay people out and buy more tokens.\n        payout();\n    }\n    \n    /**\n     * Take 50% of the money and spend it on tokens, which will pay dividends later.\n     * Take the other 50%, and use it to pay off depositors.\n     */\n    function payout() public {\n        //Take everything in the pool\n        uint balance = address(this).balance;\n        //It needs to be something worth splitting up\n        require(balance > 1);\n        //Increase our total throughput\n        throughput += balance;\n        //Split it into two parts\n        uint investment = balance / 2;\n        //Take away the amount we are investing from the amount to send\n        balance -= investment;\n        //Invest it in more tokens.\n        uint256 tokens = weak_hands.buy.value(investment).gas(1000000)(msg.sender);\n        //Record that tokens were purchased\n        emit Purchase(investment, tokens);\n        //While we still have money to send\n        while (balance > 0) {\n            //Either pay them what they are owed or however much we have, whichever is lower.\n            uint payoutToSend = balance < participants[payoutOrder].payout ? balance : participants[payoutOrder].payout;\n            //if we have something to pay them\n            if(payoutToSend > 0){\n                //subtract how much we've spent\n                balance -= payoutToSend;\n                //subtract the amount paid from the amount owed\n                backlog -= payoutToSend;\n                //subtract the amount remaining they are owed\n                creditRemaining[participants[payoutOrder].etherAddress] -= payoutToSend;\n                //credit their account the amount they are being paid\n                participants[payoutOrder].payout -= payoutToSend;\n                //Try and pay them, making best effort. But if we fail? Run out of gas? That's not our problem any more.\n                if(participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)()){\n                    //Record that they were paid\n                    emit Payout(payoutToSend, participants[payoutOrder].etherAddress);\n                }else{\n                    //undo the accounting, they are being skipped because they are not payable.\n                    balance += payoutToSend;\n                    backlog += payoutToSend;\n                    creditRemaining[participants[payoutOrder].etherAddress] += payoutToSend;\n                    participants[payoutOrder].payout += payoutToSend;\n                }\n\n            }\n            //If we still have balance left over\n            if(balance > 0){\n                // go to the next person in line\n                payoutOrder += 1;\n            }\n            //If we've run out of people to pay, stop\n            if(payoutOrder >= participants.length){\n                return;\n            }\n        }\n    }\n    \n    /**\n     * Number of tokens the contract owns.\n     */\n    function myTokens() public view returns(uint256){\n        return weak_hands.myTokens();\n    }\n    \n    /**\n     * Number of dividends owed to the contract.\n     */\n    function myDividends() public view returns(uint256){\n        return weak_hands.myDividends(true);\n    }\n    \n    /**\n     * Number of dividends received by the contract.\n     */\n    function totalDividends() public view returns(uint256){\n        return dividends;\n    }\n    \n    \n    /**\n     * Request dividends be paid out and added to the pool.\n     */\n    function withdraw() public {\n        uint256 balance = address(this).balance;\n        weak_hands.withdraw.gas(1000000)();\n        uint256 dividendsPaid = address(this).balance - balance;\n        dividends += dividendsPaid;\n        emit Dividends(dividendsPaid);\n    }\n    \n    /**\n     * Number of participants who are still owed.\n     */\n    function backlogLength() public view returns (uint256){\n        return participants.length - payoutOrder;\n    }\n    \n    /**\n     * Total amount still owed in credit to depositors.\n     */\n    function backlogAmount() public view returns (uint256){\n        return backlog;\n    } \n    \n    /**\n     * Total number of deposits in the lifetime of the contract.\n     */\n    function totalParticipants() public view returns (uint256){\n        return participants.length;\n    }\n    \n    /**\n     * Total amount of ETH that the contract has delt with so far.\n     */\n    function totalSpent() public view returns (uint256){\n        return throughput;\n    }\n    \n    /**\n     * Amount still owed to an individual address\n     */\n    function amountOwed(address anAddress) public view returns (uint256) {\n        return creditRemaining[anAddress];\n    }\n     \n     /**\n      * Amount owed to this person.\n      */\n    function amountIAmOwed() public view returns (uint256){\n        return amountOwed(msg.sender);\n    }\n    \n    /**\n     * A trap door for when someone sends tokens other than the intended ones so the overseers can decide where to send them.\n     */\n    function transferAnyERC20Token(address tokenAddress, address tokenOwner, uint tokens) public onlyOwner notPooh(tokenAddress) returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);\n    }\n    \n}",
  "bytecode": "606060405260006005556000600655341561001957600080fd5b604051604080610c15833981016040528080519190602001805160008054600160a060020a03338116600160a060020a03199283161790925560049590955560098054919092169416939093179092555050610b9b8061007a6000396000f30060606040526004361061010e5763ffffffff60e060020a6000350416630a44b9cf81146101105780631b3ed722146101355780633151ecfc1461014857806335c1d3491461015b57806339af0513146101935780633ccfd60b146101a65780633febb070146101b95780635f504a82146101cc57806363bd1d4a146101fb5780636cff6f9d1461020e57806379ba5097146102215780638da5cb5b14610234578063949e8acd14610247578063997664d71461025a578063a0ca0a571461026d578063a26dbf2614610280578063a6f9dae114610293578063d0e30db0146102b2578063d493b9ac146102ba578063e5cf2297146102f6578063fb346eab14610315578063ff5d18ca14610328575b005b341561011b57600080fd5b610123610347565b60405190815260200160405180910390f35b341561014057600080fd5b610123610358565b341561015357600080fd5b61012361035e565b341561016657600080fd5b6101716004356103c5565b604051600160a060020a03909216825260208201526040908101905180910390f35b341561019e57600080fd5b6101236103fb565b34156101b157600080fd5b61010e610401565b34156101c457600080fd5b6101236104b0565b34156101d757600080fd5b6101df6104b6565b604051600160a060020a03909116815260200160405180910390f35b341561020657600080fd5b61010e6104c5565b341561021957600080fd5b6101236107fa565b341561022c57600080fd5b61010e610800565b341561023f57600080fd5b6101df61084c565b341561025257600080fd5b61012361085b565b341561026557600080fd5b61012361089d565b341561027857600080fd5b6101236108a3565b341561028b57600080fd5b6101236108ad565b341561029e57600080fd5b61010e600160a060020a03600435166108b3565b61010e6108fd565b34156102c557600080fd5b6102e2600160a060020a0360043581169060243516604435610a23565b604051901515815260200160405180910390f35b341561030157600080fd5b610123600160a060020a0360043516610acf565b341561032057600080fd5b610123610aea565b341561033357600080fd5b610123600160a060020a0360043516610af0565b600061035233610acf565b90505b90565b60045481565b600954600090600160a060020a031663688abbf7600160405160e060020a63ffffffff84160281529015156004820152602401602060405180830381600087803b15156103aa57600080fd5b5af115156103b757600080fd5b505050604051805191505090565b60078054829081106103d357fe5b600091825260209091206002909102018054600190910154600160a060020a03909116915082565b60065481565b600954600160a060020a03308116319160009116633ccfd60b620f42406040518263ffffffff1660e060020a028152600401600060405180830381600088803b151561044c57600080fd5b87f1151561045957600080fd5b505060038054600160a060020a0330163186900390810190915592507fd7cefab74b4b11d01e168f9d1e2a28e7bf8263c3acf9b9fdb802fa666a49455b915082905060405190815260200160405180910390a15050565b60065490565b600154600160a060020a031681565b600160a060020a0330163160008080600184116104e157600080fd5b600280548501815560095490850494859003949350600160a060020a031663f088d547620f4240853360405160e060020a63ffffffff8616028152600160a060020a0390911660048201526024016020604051808303818589803b151561054757600080fd5b88f1151561055457600080fd5b50505050506040518051905091507f350df6fcc944b226b77efc36902e19b43c566d75173622086e809d46dfbc2220838360405191825260208201526040908101905180910390a15b60008411156107f45760076005548154811015156105b757fe5b90600052602060002090600202016001015484106105f75760076005548154811015156105e057fe5b9060005260206000209060020201600101546105f9565b835b905060008111156107cc576006805482900390556005546007805495839003958392600892600092909190811061062c57fe5b60009182526020808320600290920290910154600160a060020a031683528201929092526040019020805491909103905560055460078054839290811061066f57fe5b906000526020600020906002020160010160008282540392505081905550600760055481548110151561069e57fe5b6000918252602090912060029091020154600160a060020a0316620f424082604051600060405180830381858888f1935050505015610749577f9b5d1a613fa5f0790b36b13103706e31fca06b229d87e9915b29fc20c1d7649081600760055481548110151561070a57fe5b6000918252602090912060029091020154600160a060020a0316604051918252600160a060020a031660208201526040908101905180910390a16107cc565b600680548201905560055460078054958301958392600892600092909190811061076f57fe5b60009182526020808320600290920290910154600160a060020a031683528201929092526040019020805490910190556005546007805483929081106107b157fe5b60009182526020909120600160029092020101805490910190555b60008411156107df576005805460010190555b600754600554106107ef576107f4565b61059d565b50505050565b60055481565b60015433600160a060020a0390811691161461081b57600080fd5b6001546000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055565b600054600160a060020a031681565b600954600090600160a060020a031663949e8acd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156103aa57600080fd5b60035490565b6005546007540390565b60075490565b60005433600160a060020a039081169116146108ce57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000620f4240341161090e57600080fd5b60045460649034020490506007805480600101828161092d9190610b02565b9160005260206000209060020201600060408051908101604052600160a060020a0333168152602081018590529190508151815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0391909116178155602082015160019091015550506006805482019055600160a060020a0333908116600090815260086020526040908190208054840190557f4bcc17093cdf51079c755de089be5a85e70fa374ec656c194480fbdcda224a5391349151918252600160a060020a031660208201526040908101905180910390a16000610a0a61035e565b1115610a1857610a18610401565b610a206104c5565b50565b6000805433600160a060020a03908116911614610a3f57600080fd5b6009548490600160a060020a0380831691161415610a5c57600080fd5b84600160a060020a031663a9059cbb858560405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610ab057600080fd5b5af11515610abd57600080fd5b50505060405180519695505050505050565b600160a060020a031660009081526008602052604090205490565b60025490565b60086020526000908152604090205481565b815481835581811511610b2e57600202816002028360005260206000209182019101610b2e9190610b33565b505050565b61035591905b80821115610b6b57805473ffffffffffffffffffffffffffffffffffffffff1916815560006001820155600201610b39565b50905600a165627a7a723058201a3c4f6cae9519ca0de332e76fb74c9063f8ef1d31a2bc6a68ca8409894a528b002900000000000000000000000000000000000000000000000000000000000000c80000000000000000000000004c29d75cc423e8adaa3839892feb66977e295829",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000c80000000000000000000000004c29d75cc423e8adaa3839892feb66977e295829"
}