{
  "address": "0xa2ec368c2f894c253b869ce8e5ae03d4ee655ebd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LIRAX",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-13\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n\ncontract ERC223 {\n    uint256 public totalSupply_;\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function totalSupply() public view returns (uint256 _supply);\n\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function transfer(address to, uint value) public returns (bool success);\n    function transfer(address to, uint value, bytes data) public returns (bool success);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n}\n\n\ncontract ContractReceiver {\n    /**\n     * @dev Standard ERC223 function that will handle incoming token transfers.\n     * @param _from  Token sender address.\n     * @param _value Amount of tokens.\n     * @param _data  Transaction metadata.\n     */\n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\n\ncontract ERC223Token is ERC223 {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    uint256 public totalSupply_;\n\n    /**\n    * @dev total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256 _supply) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    * @param _data Transaction metadata.\n    */\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, _data);\n        } else {\n            return transferToAddress(_to, _value, _data);\n        }\n    }\n\n    /**\n    * @dev transfer token for a specified address similar to ERC20 transfer.\n    * @dev Added due to backwards compatibility reasons.\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint _value) public returns (bool success) {\n        bytes memory empty;\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, empty);\n        } else {\n            return transferToAddress(_to, _value, empty);\n        }\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n    * @dev isContract\n    * @param _addr The address to check if it's a contract or not\n    * @return true if _addr is a contract\n    */\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) private view returns (bool is_contract) {\n        uint length;\n        /* solium-disable-next-line */\n        assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        if (length > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n    * @dev transferToAddress transfers the specified amount of tokens to the specified address\n    * @param _to    Receiver address.\n    * @param _value Amount of tokens that will be transferred.\n    * @param _data  Transaction metadata.\n    * @return true  if transaction went through\n    */\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n        if (balanceOf(msg.sender) < _value) revert();\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n        balances[_to] = balanceOf(_to).add(_value);\n        Transfer(msg.sender, _to, _value);\n        ERC223Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n\n    /**\n    * @dev transferToContract transfers the specified amount of tokens to the specified contract address\n    * @param _to    Receiver address.\n    * @param _value Amount of tokens that will be transferred.\n    * @param _data  Transaction metadata.\n    * @return true  if transaction went through\n    */\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n        if (balanceOf(msg.sender) < _value) revert();\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n        balances[_to] = balanceOf(_to).add(_value);\n        ContractReceiver reciever = ContractReceiver(_to);\n        reciever.tokenFallback(msg.sender, _value, _data);\n        Transfer(msg.sender, _to, _value);\n        ERC223Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n    \n    function addTokenToTotalSupply(uint _value) public {\n        require(_value > 0);\n        balances[msg.sender] = balances[msg.sender] + _value;\n        totalSupply_ = totalSupply_ + _value;\n        \n    }\n}\n\n/**\n * @title BFEXToken Bank Future Exchange Token Contract by AngelCoin.io\n */\ncontract LIRAX is ERC223Token, Ownable {\n\n    string public constant name = \"LIRAX\";\n    string public constant symbol = \"LRX\";\n    uint8 public constant decimals = 18;\n\n    uint256 public constant INITIAL_SUPPLY = 100000000 * (10 ** uint256(decimals));\n    address public feeHoldingAddress;\n\n    address public owner;\n\n    /**\n     * @dev BFEXToken Constructor gives msg..\n     */\n    function LIRAX() public {\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        owner = msg.sender;\n        feeHoldingAddress = owner;\n        Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n    }\n\n    /**\n    * @dev transfer token for a specified address similar to ERC20 transfer.\n    * @dev Added due to backwards compatibility reasons.\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function adminTransfer(address _from, address _to, uint256 _value, uint256 _fee) public payable onlyOwner returns (bool success) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value > _fee);\n\n        balances[feeHoldingAddress] = balances[feeHoldingAddress].add(_fee);\n\n        uint256 actualValue = _value.sub(_fee);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(actualValue);\n        Transfer(_from, _to, actualValue);\n        Transfer(_from, feeHoldingAddress, _fee);\n        return true;\n    }\n\n    function changeFeeHoldingAddress(address newFeeHoldingAddress) public onlyOwner {\n        feeHoldingAddress = newFeeHoldingAddress;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addTokenToTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFeeHoldingAddress\",\"type\":\"address\"}],\"name\":\"changeFeeHoldingAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeHoldingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"adminTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ERC223Transfer\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b506004805433600160a060020a031991821681179092556a52b7d2dcc80cd2e40000006003819055600083815260016020908152604080832084905560068054861687179081905560058054600160a060020a0390921691909616179094558351928352925190927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a3610f9c806100af6000396000f3006080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610116578063095ea7b3146101a057806311ab19f8146101d857806318160ddd146101f257806323b872dd146102195780632ff2e9dc14610243578063313ce56714610258578063324536eb14610283578063549961dd1461029857806366188463146102b957806370a08231146102dd5780638da5cb5b146102fe57806395d89b411461032f5780639a507d9b14610344578063a9059cbb14610359578063bc7aa8bc1461037d578063be45fd621461039d578063d73dd62314610406578063dd62ed3e1461042a578063f2fde38b14610451575b600080fd5b34801561012257600080fd5b5061012b610472565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016557818101518382015260200161014d565b50505050905090810190601f1680156101925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ac57600080fd5b506101c4600160a060020a03600435166024356104a9565b604080519115158252519081900360200190f35b3480156101e457600080fd5b506101f060043561050f565b005b3480156101fe57600080fd5b5061020761053c565b60408051918252519081900360200190f35b34801561022557600080fd5b506101c4600160a060020a0360043581169060243516604435610542565b34801561024f57600080fd5b506102076106aa565b34801561026457600080fd5b5061026d6106b9565b6040805160ff9092168252519081900360200190f35b34801561028f57600080fd5b506102076106be565b3480156102a457600080fd5b506101f0600160a060020a03600435166106c4565b3480156102c557600080fd5b506101c4600160a060020a036004351660243561070a565b3480156102e957600080fd5b50610207600160a060020a03600435166107fc565b34801561030a57600080fd5b50610313610817565b60408051600160a060020a039092168252519081900360200190f35b34801561033b57600080fd5b5061012b610826565b34801561035057600080fd5b5061031361085d565b34801561036557600080fd5b506101c4600160a060020a036004351660243561086c565b6101c4600160a060020a036004358116906024351660443560643561089b565b3480156103a957600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101c4948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610a399650505050505050565b34801561041257600080fd5b506101c4600160a060020a0360043516602435610a66565b34801561043657600080fd5b50610207600160a060020a0360043581169060243516610aff565b34801561045d57600080fd5b506101f0600160a060020a0360043516610b2a565b60408051808201909152600581527f4c49524158000000000000000000000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6000811161051c57600080fd5b336000908152600160205260409020805482019055600380549091019055565b60035490565b6000600160a060020a038316151561055957600080fd5b600160a060020a03841660009081526001602052604090205482111561057e57600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156105ae57600080fd5b600160a060020a0384166000908152600160205260409020546105d7908363ffffffff610b7c16565b600160a060020a03808616600090815260016020526040808220939093559085168152205461060c908363ffffffff610b8e16565b600160a060020a038085166000908152600160209081526040808320949094559187168152600282528281203382529091522054610650908363ffffffff610b7c16565b600160a060020a0380861660008181526002602090815260408083203384528252918290209490945580518681529051928716939192600080516020610f51833981519152929181900390910190a35060015b9392505050565b6a52b7d2dcc80cd2e400000081565b601281565b60035481565b600454600160a060020a031633146106db57600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b336000908152600260209081526040808320600160a060020a03861684529091528120548083111561075f57336000908152600260209081526040808320600160a060020a0388168452909152812055610794565b61076f818463ffffffff610b7c16565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a3600191505b5092915050565b600160a060020a031660009081526001602052604090205490565b600654600160a060020a031681565b60408051808201909152600381527f4c52580000000000000000000000000000000000000000000000000000000000602082015281565b600554600160a060020a031681565b6000606061087984610ba1565b1561089057610889848483610bc1565b91506107f5565b610889848483610e0d565b6004546000908190600160a060020a031633146108b757600080fd5b600160a060020a03851615156108cc57600080fd5b600160a060020a0386166000908152600160205260409020548411156108f157600080fd5b8284116108fd57600080fd5b600554600160a060020a0316600090815260016020526040902054610928908463ffffffff610b8e16565b600554600160a060020a0316600090815260016020526040902055610953848463ffffffff610b7c16565b600160a060020a03871660009081526001602052604090205490915061097f908563ffffffff610b7c16565b600160a060020a0380881660009081526001602052604080822093909355908716815220546109b4908263ffffffff610b8e16565b600160a060020a0380871660008181526001602090815260409182902094909455805185815290519193928a1692600080516020610f5183398151915292918290030190a3600554604080518581529051600160a060020a0392831692891691600080516020610f51833981519152919081900360200190a350600195945050505050565b6000610a4484610ba1565b15610a5b57610a54848484610bc1565b90506106a3565b610a54848484610e0d565b336000908152600260209081526040808320600160a060020a0386168452909152812054610a9a908363ffffffff610b8e16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600454600160a060020a03163314610b4157600080fd5b600160a060020a03811615610b79576004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b600082821115610b8857fe5b50900390565b81810182811015610b9b57fe5b92915050565b6000813b81811115610bb65760019150610bbb565b600091505b50919050565b60008083610bce336107fc565b1015610bd957600080fd5b610bf284610be6336107fc565b9063ffffffff610b7c16565b33600090815260016020526040902055610c1b84610c0f876107fc565b9063ffffffff610b8e16565b600160a060020a03861660008181526001602090815260408083209490945592517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081523360048201818152602483018a90526060604484019081528951606485015289518c9850959663c0ee0b8a9693958c958c956084909101928601918190849084905b83811015610cb9578181015183820152602001610ca1565b50505050905090810190601f168015610ce65780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610d0757600080fd5b505af1158015610d1b573d6000803e3d6000fd5b5050604080518781529051600160a060020a0389169350339250600080516020610f518339815191529181900360200190a384600160a060020a031633600160a060020a03167f9bfafdc2ae8835972d7b64ef3f8f307165ac22ceffde4a742c52da5487f45fd186866040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610dc7578181015183820152602001610daf565b50505050905090810190601f168015610df45780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3506001949350505050565b600082610e19336107fc565b1015610e2457600080fd5b610e3183610be6336107fc565b33600090815260016020526040902055610e4e83610c0f866107fc565b600160a060020a038516600081815260016020908152604091829020939093558051868152905191923392600080516020610f518339815191529281900390910190a383600160a060020a031633600160a060020a03167f9bfafdc2ae8835972d7b64ef3f8f307165ac22ceffde4a742c52da5487f45fd185856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610f0b578181015183820152602001610ef3565b50505050905090810190601f168015610f385780820380516001836020036101000a031916815260200191505b50935050505060405180910390a350600193925050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820843b433fc01e3b0374c7e0c929f822a370c8d0eb463350eed0e71dcc5e1c4ec70029"
}