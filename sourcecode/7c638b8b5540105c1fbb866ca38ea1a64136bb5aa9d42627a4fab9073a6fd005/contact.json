{
  "address": "0x696826c18a6bc9be4bbfe3c3a6bb9f5a69388687",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DecentralizationSmartGames",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-11\n*/\n\npragma solidity ^0.4.25;\n\ncontract DecentralizationSmartGames{\n    using SafeMath for uint256;\n    \n    string public constant name   = \"Decentralization Smart Games\";\n    string public constant symbol = \"DSG\";\n    uint8 public constant decimals = 18;\n    uint256 public constant tokenPrice = 0.00065 ether;\n    uint256 public totalSupply; /* Total number of existing DSG tokens */\n    uint256 public divPerTokenPool; /* Trigger for calculating dividends on \"Pool dividends\" program */\n    uint256 public divPerTokenGaming; /* Trigger for calculating dividends on \"Gaming dividends\" program */\n    uint256 public developmentBalance; /* Balance that is used to support the project and games development */\n    uint256 public charityBalance;  /* Balance that is used for charity */\n    address[2] public owners;  /* Addresses of the contract owners */\n    address[2] public candidates; /* Addresses of the future contract owners */\n    /**Fee public fee - Structure where all percentages of the distribution of incoming funds are stored\n     * uint8 fee.r0 - First referrer - 6%\n     * uint8 fee.r1 - Second referrer - 4%\n     * uint8 fee.r2 - Third referrer - 3%\n     * uint8 fee.r3 - Fourth referrer - 2%\n     * uint8 fee.r4 - Fifth referrer - 1%\n     * uint8 fee.charity - Charity - 1%\n     * uint8 fee.development - For game development and project support - 18%\n     * uint8 fee.buy - For buying DSG tokens - 65%\n     */\n    Fee public fee = Fee(6,4,3,2,1,1,18,65);\n    /**Dividends public totalDividends - Structure where general dividend payments are kept\n     * uint256 totalDividends.referrer - Referrer Dividends\n     * uint256 totalDividends.gaming - Gaming Dividends\n     * uint256 totalDividends.pool - Pool Dividends\n     */\n    Dividends public totalDividends  = Dividends(0,0,0);\n    mapping (address => mapping (address => uint256)) private allowed;\n    /**mapping (address => Account) private account - Investors accounts data\n     * uint256 account[address].tokenBalance - Number of DSG tokens on balance\n     * uint256 account[address].ethereumBalance - The amount of ETH on balance (dividends)\n     * uint256 account[address].lastDivPerTokenPool - The trigger of last dividend payment upon the \"Pool dividends\" program \n     * uint256 account[address].lastDivPerTokenGaming - The trigger of last dividend payment upon the \"Gaming dividends\" program\n     * uint256 account[address].totalDividendsReferrer - Total amount of dividends upon the \"Referrer dividends\" program\n     * uint256 account[address].totalDividendsGaming - Total amount of dividends upon the \"Gaming dividends\" program \n     * uint256 account[address].totalDividendsPool -Total amount of dividends upon the \"Pool dividends\" program\n     * address[5] account[address].referrer - Array of all the referrers\n     * bool account[address].active - True, if the account is active\n     */\n    mapping (address => Account) public account;\n    mapping (address => bool) public games; /* The list of contracts from which dividends are allowed */\n    \n    struct Account {\n        uint256 tokenBalance;\n        uint256 ethereumBalance;\n        uint256 lastDivPerTokenPool;\n        uint256 lastDivPerTokenGaming;\n        uint256 totalDividendsReferrer;\n        uint256 totalDividendsGaming;\n        uint256 totalDividendsPool;\n        address[5] referrer;\n        bool active;\n    }\n    struct Fee{\n        uint8 r1;\n        uint8 r2;\n        uint8 r3;\n        uint8 r4;\n        uint8 r5;\n        uint8 charity;\n        uint8 development;\n        uint8 buy;\n    }\n    struct Dividends{\n        uint256 referrer;\n        uint256 gaming;\n        uint256 pool;\n    }\n    /* Allowed if the address is not 0x */\n    modifier check0x(address address0x) {\n        require(address0x != address(0), \"Address is 0x\");\n        _;\n    }\n    /* Allowed if on balance of DSG tokens >= amountDSG */\n    modifier checkDSG(uint256 amountDSG) {\n        require(account[msg.sender].tokenBalance >= amountDSG, \"You don't have enough DSG on balance\");\n        _;\n    }\n    /* Allowed if on balance ETH >= amountETH */\n    modifier checkETH(uint256 amountETH) {\n        require(account[msg.sender].ethereumBalance >= amountETH, \"You don't have enough ETH on balance\");\n        _;\n    }\n    /* Allowed if the function is called by one the contract owners */\n    modifier onlyOwners() {\n        require(msg.sender == owners[0] || msg.sender == owners[1], \"You are not owner\");\n        _;\n    }\n    /* Allowed if the sale is still active */\n    modifier sellTime() { \n        require(now <= 1560211200, \"The sale is over\");\n        _;\n    }\n    /* Dividends upon the \"Pool Dividends\" program are being paid */\n    /* Dividends upon the \"Gaming Dividends\" program are being paid */\n    modifier payDividends(address sender) {\n        uint256 poolDividends = getPoolDividends();\n        uint256 gamingDividends = getGamingDividends();\n\t\tif(poolDividends > 0 && account[sender].active == true){\n\t\t\taccount[sender].totalDividendsPool = account[sender].totalDividendsPool.add(poolDividends);\n\t\t\taccount[sender].ethereumBalance = account[sender].ethereumBalance.add(poolDividends);\n\t\t}\n        if(gamingDividends > 0 && account[sender].active == true){\n\t\t\taccount[sender].totalDividendsGaming = account[sender].totalDividendsGaming.add(gamingDividends);\n\t\t\taccount[sender].ethereumBalance = account[sender].ethereumBalance.add(gamingDividends);\n\t\t}\n        _;\n\t    account[sender].lastDivPerTokenPool = divPerTokenPool;\n        account[sender].lastDivPerTokenGaming = divPerTokenGaming;\n        \n    }\n    /**We assign two contract owners, whose referrers are from the same address\n     * In the same manner we activate their accounts\n     */\n    constructor(address owner2) public{\n        address owner1 = msg.sender;\n        owners[0]                = owner1;\n        owners[1]                = owner2;\n        account[owner1].active   = true;\n        account[owner2].active   = true;\n        account[owner1].referrer = [owner1, owner1, owner1, owner1, owner1];\n        account[owner2].referrer = [owner2, owner2, owner2, owner2, owner2];\n    }\n    /**buy() - the function of buying DSG tokens.\n     * It is active only during the time interval specified in sellTime()\n     * Dividends upon Pool Dividends program are being paid\n     * Dividends upon the Gaming Dividends program are being paid\n     * address referrerAddress - The address of the referrer who invited to the program\n     * require - Minimum purchase is 100 DSG or 0.1 ETH\n     */\n    function buy(address referrerAddress) payDividends(msg.sender) sellTime public payable\n    {\n        require(msg.value >= 0.1 ether, \"Minimum investment is 0.1 ETH\");\n        uint256 forTokensPurchase = msg.value.mul(fee.buy).div(100); /* 65% */\n        uint256 forDevelopment = msg.value.mul(fee.development).div(100); /* 18% */\n        uint256 forCharity = msg.value.mul(fee.charity).div(100); /* 1% */\n        uint256 tokens = forTokensPurchase.mul(10 ** uint(decimals)).div(tokenPrice); /* The number of DSG tokens is counted (1ETH = 1000 DSG) */\n        _setReferrer(referrerAddress, msg.sender);  /* Assigning of referrers */\n        _mint(msg.sender, tokens); /* We create new DSG tokens and add to balance */\n        _setProjectDividends(forDevelopment, forCharity); /*  ETH is accrued to the project balances (18%, 1%) */\n        _distribution(msg.sender, msg.value.mul(fee.r1).div(100), 0); /* Dividends are accrued to the first refferer - 6% */\n        _distribution(msg.sender, msg.value.mul(fee.r2).div(100), 1); /* Dividends are accrued to the second refferer - 4% */\n        _distribution(msg.sender, msg.value.mul(fee.r3).div(100), 2); /* Dividends are accrued to the third refferer - 3% */\n        _distribution(msg.sender, msg.value.mul(fee.r4).div(100), 3); /* Dividends are accrued to the fourth refferer - 2% */\n        _distribution(msg.sender, msg.value.mul(fee.r5).div(100), 4); /* Dividends are accrued to the fifth referrer - 1% */\n        emit Buy(msg.sender, msg.value, tokens, totalSupply, now);\n    }\n    /**reinvest() - dividends reinvestment function.\n     * It is active only during the time interval specified in sellTime()\n     * Dividends upon the Pool Dividends and Gaming Dividends programs are being paid - payDividends(msg.sender)\n     * Checking whether the investor has a given amount of ETH in the contract - checkETH(amountEthereum)\n     * address amountEthereum - The amount of ETH sent for reinvestment (dividends)\n     */\n    function reinvest(uint256 amountEthereum) payDividends(msg.sender) checkETH(amountEthereum) sellTime public\n    {\n        uint256 tokens = amountEthereum.mul(10 ** uint(decimals)).div(tokenPrice); /* The amount of DSG tokens is counted (1ETH = 1000 DSG) */\n        _mint(msg.sender, tokens); /* We create DSG tokens and add to the balance */\n        account[msg.sender].ethereumBalance = account[msg.sender].ethereumBalance.sub(amountEthereum);/* The amount of ETH from the investor is decreased */\n        emit Reinvest(msg.sender, amountEthereum, tokens, totalSupply, now);\n    }\n    /**reinvest() - dividends reinvestment function.\n     * Checking whether there are enough DSG tokens on balance - checkDSG(amountTokens)\n     * Dividends upon the Pool Dividends and Gaming Dividends program are being paid - payDividends(msg.sender)\n     * address amountEthereum - The amount of ETH sent for reinvestment (dividends)\n     * require - Checking whether the investor has a given amount of ETH in the contract\n     */\n    function sell(uint256 amountTokens) payDividends(msg.sender) checkDSG(amountTokens) public\n    {\n        uint256 ethereum = amountTokens.mul(tokenPrice).div(10 ** uint(decimals));/* Counting the number of ETH (1000 DSG = 1ETH) */\n        account[msg.sender].ethereumBalance = account[msg.sender].ethereumBalance.add(ethereum);\n        _burn(msg.sender, amountTokens);/* Tokens are burnt */\n        emit Sell(msg.sender, amountTokens, ethereum, totalSupply, now);\n    }\n    /**withdraw() - the function of ETH withdrawal from the contract\n     * Dividends upon the Pool Dividends and Gaming Dividends programs are being paid - payDividends(msg.sender)\n     * Checking whether the investor has a given amount of ETH in the contract - checkETH(amountEthereum)\n     * address amountEthereum - The amount of ETH requested for withdrawal\n     */\n    function withdraw(uint256 amountEthereum) payDividends(msg.sender) checkETH(amountEthereum) public\n    {\n        msg.sender.transfer(amountEthereum); /* ETH is sent */\n        account[msg.sender].ethereumBalance = account[msg.sender].ethereumBalance.sub(amountEthereum);/* Decreasing the amount of ETH from the investor */\n        emit Withdraw(msg.sender, amountEthereum, now);\n    }\n    /**gamingDividendsReception() - function that receives and distributes dividends upon the \"Gaming Dividends\" program\n     * require - if the address of the game is not registered in mapping games, the transaction will be declined\n     */\n    function gamingDividendsReception() payable external{\n        require(getGame(msg.sender) == true, \"Game not active\");\n        uint256 eth            = msg.value;\n        uint256 forDevelopment = eth.mul(19).div(100); /* To support the project - 19% */\n        uint256 forInvesotrs   = eth.mul(80).div(100); /* To all DSG holders - 80% */\n        uint256 forCharity     = eth.div(100); /* For charity - 1% */\n        _setProjectDividends(forDevelopment, forCharity); /* Dividends for supporting the projects are distributed */\n        _setGamingDividends(forInvesotrs); /* Gaming dividends are distributed */\n    }\n    /**_distribution() - function of dividends distribution upon the \"Referrer Dividends\" program\n     * With a mimimum purchase ranging from 100 to 9999 DSG\n     * Only the first level of the referral program is open and a floating percentage is offered, which depends on the amount of investment.\n     * Formula - ETH * DSG / 10000 = %\n     * ETH   - the amount of Ethereum, which the investor should have received  if the balance had been >= 10000 DSG (6%)\n     * DSG   - the amount of tokens on the referrer's balance, which accrues interest\n     * 10000 - minimum amount of tokens when all the percentage levels are open\n     * - The first level is a floating percentage depending on the amount of holding\n     * - The second level - for all upon the \"Pool dividends\" program\n     * - The third level - for all upon the \"Pool dividends\" program\n     * - The fourth level - for all upon the \"Pool dividends\" program\n     * - The fifth level - for all upon the \"Pool dividends\" program\n     * With 10000 DSG on balance and more the entire referral system will be activated and the investor will receive all interest from all levels\n     * The function automatically checks the investor's DSG balance at the time of dividends distribution, this that referral\n     * program can be fully activated or deactivated automatically depending on the DSG balance at the time of distribution\n     * address senderAddress - the address of referral that sends dividends to his referrer\n     * uint256 eth - the amount of ETH which referrer should send to the referrer\n     * uint8 k - the number of referrer\n     */\n    function _distribution(address senderAddress, uint256 eth, uint8 k) private{\n        address referrer = account[senderAddress].referrer[k];\n        uint256 referrerBalance = account[referrer].tokenBalance;\n        uint256 senderTokenBalance = account[senderAddress].tokenBalance;\n        uint256 minReferrerBalance = 10000e18;\n        if(referrerBalance >= minReferrerBalance){\n            _setReferrerDividends(referrer, eth);/* The interest is sent to the referrer */\n        }\n        else if(k == 0 && referrerBalance < minReferrerBalance && referrer != address(0)){\n            uint256 forReferrer = eth.mul(referrerBalance).div(minReferrerBalance);/* The floating percentage is counted */\n            uint256 forPool = eth.sub(forReferrer);/* Amount for Pool Dividends (all DSG holders) */\n            _setReferrerDividends(referrer, forReferrer);/* The referrer is sent his interest */\n            _setPoolDividends(forPool, senderTokenBalance);/* Dividends are paid to all the DSG token holders */\n        }\n        else{\n            _setPoolDividends(eth, senderTokenBalance);/* If the refferal is 0x - Dividends are paid to all the DSG token holders */\n        }\n    }\n    /* _setReferrerDividends() - the function which sends referrer his dividends */\n    function _setReferrerDividends(address referrer, uint256 eth) private {\n        account[referrer].ethereumBalance = account[referrer].ethereumBalance.add(eth);\n        account[referrer].totalDividendsReferrer = account[referrer].totalDividendsReferrer.add(eth);\n        totalDividends.referrer = totalDividends.referrer.add(eth);\n    }\n    /**_setReferrer() - the function which assigns referrers to the buyer\n     * address referrerAddress - the address of referrer who invited the investor to the project\n     * address senderAddress - the buyer's address\n     * The function assigns referrers only once when buying tokens\n     * Referrers can not be changed\n     * require(referrerAddress != senderAddress) - Checks whether the buyer is not a referrer himself\n     * require(account[referrerAddress].active == true || referrerAddress == address(0))\n     * Checks whether the referrer exists in the project\n     */\n    function _setReferrer(address referrerAddress, address senderAddress) private\n    {\n        if(account[senderAddress].active == false){\n            require(referrerAddress != senderAddress, \"You can't be referrer for yourself\");\n            require(account[referrerAddress].active == true || referrerAddress == address(0), \"Your referrer was not found in the contract\");\n            account[senderAddress].referrer = [\n                                               referrerAddress, /* The referrer who invited the investor */\n                                               account[referrerAddress].referrer[0],\n                                               account[referrerAddress].referrer[1],\n                                               account[referrerAddress].referrer[2],\n                                               account[referrerAddress].referrer[3]\n                                              ];\n            account[senderAddress].active   = true; /* The account is activated */\n            emit Referrer(\n                senderAddress,\n                account[senderAddress].referrer[0],\n                account[senderAddress].referrer[1],\n                account[senderAddress].referrer[2],\n                account[senderAddress].referrer[3],\n                account[senderAddress].referrer[4],\n                now\n            );\n        }\n    }\n    /**setRef_setProjectDividendserrer() - the function of dividends payment to support the project\n     * uint256 forDevelopment - To support the project - 18%\n     * uint256 forCharity - For charity - 1%\n     */\n    function _setProjectDividends(uint256 forDevelopment, uint256 forCharity) private{\n        developmentBalance = developmentBalance.add(forDevelopment);\n        charityBalance = charityBalance.add(forCharity);\n    }\n    /**_setPoolDividends() - the function of uniform distribution of dividends to all DSG holders upon the \"Pool Dividends\" program\n     * During the distribution of dividends, the amount of tokens that are on the buyer's balance is not taken into account,\n     * since he does not participate in the distribution of dividends\n     * uint256 amountEthereum - the amount of ETH which should be distributed to all DSG holders\n     * uint256 userTokens - the amount of DSG that is on the buyer's balance\n     */\n    function _setPoolDividends(uint256 amountEthereum, uint256 userTokens) private{\n        if(amountEthereum > 0){\n\t\t    divPerTokenPool = divPerTokenPool.add(amountEthereum.mul(10 ** uint(decimals)).div(totalSupply.sub(userTokens)));\n\t\t    totalDividends.pool = totalDividends.pool.add(amountEthereum);\n        }\n    }\n    /**_setGamingDividends() - the function of uniform distribution of dividends to all DSG holders upon the \"Gaming Dividends\" program\n     * uint256 amountEthereum - the amount of ETH which should be distributed to all DSG holders\n     */\n    function _setGamingDividends(uint256 amountEthereum) private{\n        if(amountEthereum > 0){\n\t\t    divPerTokenGaming = divPerTokenGaming.add(amountEthereum.mul(10 ** uint(decimals)).div(totalSupply));\n\t\t    totalDividends.gaming = totalDividends.gaming.add(amountEthereum);\n        }\n    }\n    /**setGame() - the function of adding a new address of the game contract, from which you can receive dividends\n     * address gameAddress - the address of the game contract\n     * bool active - if TRUE, the dividends can be received\n     */\n    function setGame(address gameAddress, bool active) public onlyOwners returns(bool){\n        games[gameAddress] = active;\n        return true;\n    }\n    /**getPoolDividends() - the function of calculating dividends for the investor upon the \"Pool Dividends\" program\n     * returns(uint256) - the amount of ETH that was counted to the investor is returned\n     * and which has not been paid to him yet\n     */\n    function getPoolDividends() public view returns(uint256)\n    {\n        uint newDividendsPerToken = divPerTokenPool.sub(account[msg.sender].lastDivPerTokenPool);\n        return account[msg.sender].tokenBalance.mul(newDividendsPerToken).div(10 ** uint(decimals));\n    }\n    /**getGameDividends() - the function of calculating dividends for the investor upon the \"Gaming Dividends\" program\n     * returns(uint256) - the amount of ETH that was counted to the investor is returned,\n     * and which has not been paid to him yet\n     */\n    function getGamingDividends() public view returns(uint256)\n    {\n        uint newDividendsPerToken = divPerTokenGaming.sub(account[msg.sender].lastDivPerTokenGaming);\n        return account[msg.sender].tokenBalance.mul(newDividendsPerToken).div(10 ** uint(decimals));\n    }\n    /* getAccountData() - the function that returns all the data of the investor */\n    function getAccountData() public view returns(\n        uint256 tokenBalance,\n        uint256 ethereumBalance, \n        uint256 lastDivPerTokenPool,\n        uint256 lastDivPerTokenGaming,\n        uint256 totalDividendsPool,\n        uint256 totalDividendsReferrer,\n        uint256 totalDividendsGaming,\n        address[5] memory referrer,\n        bool active)\n    {\n        return(\n            account[msg.sender].tokenBalance,\n            account[msg.sender].ethereumBalance,\n            account[msg.sender].lastDivPerTokenPool,\n            account[msg.sender].lastDivPerTokenGaming,\n            account[msg.sender].totalDividendsPool,\n            account[msg.sender].totalDividendsReferrer,\n            account[msg.sender].totalDividendsGaming,\n            account[msg.sender].referrer,\n            account[msg.sender].active\n        );\n    }\n    /* getContractBalance() - the function that returns a contract balance */\n    function getContractBalance() view public returns (uint256) {\n        return address(this).balance;\n    }\n    /* getGame() - the function that checks whether the game is active or not. If TRUE - the game is active. If FALSE - the game is not active */\n    function getGame(address gameAddress) view public returns (bool) {\n        return games[gameAddress];\n    }\n    /* transferOwnership() - the function that assigns the future founder of the contract */\n    function transferOwnership(address candidate, uint8 k) check0x(candidate) onlyOwners public\n    {\n        candidates[k] = candidate;\n    }\n    /* confirmOwner() - the function that confirms the new founder of the contract and assigns him */\n    function confirmOwner(uint8 k) public\n    {\n        require(msg.sender == candidates[k], \"You are not candidate\");\n        owners[k] = candidates[k];\n        delete candidates[k];\n    }\n    /* charitytWithdraw() - the function of withdrawal for charity */\n    function charitytWithdraw(address recipient) onlyOwners check0x(recipient) public\n    {\n        recipient.transfer(charityBalance);\n        delete charityBalance;\n    }\n    /* developmentWithdraw() - the function of withdrawal for the project support */\n    function developmentWithdraw(address recipient) onlyOwners check0x(recipient) public\n    {\n        recipient.transfer(developmentBalance);\n        delete developmentBalance;\n    }\n    /* balanceOf() - the function that returns the amount of DSG tokens on balance (ERC20 standart) */\n    function balanceOf(address owner) public view returns(uint256)\n    {\n        return account[owner].tokenBalance;\n    }\n    /* allowance() - the function that checks how much spender can spend tokens of the owner user (ERC20 standart) */\n    function allowance(address owner, address spender) public view returns(uint256)\n    {\n        return allowed[owner][spender];\n    }\n    /* transferTo() - the function sends DSG tokens to another user (ERC20 standart) */\n    function transfer(address to, uint256 value) public returns(bool)\n    {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n    /* transferTo() - the function that allows the user to spend n-number of tokens for spender (ERC20 standart) */\n    function approve(address spender, uint256 value) check0x(spender) checkDSG(value) public returns(bool)\n    {\n        allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n    /* transferFrom() - the function sends tokens from one address to another, only to the address that gave the permission (ERC20 standart) */\n    function transferFrom(address from, address to, uint256 value) public returns(bool)\n    {\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, allowed[from][msg.sender]);\n        return true;\n    }\n    /* _transfer() - the function of tokens sending  (ERC20 standart) */\n    function _transfer(address from, address to, uint256 value) payDividends(from) payDividends(to) checkDSG(value) check0x(to) private\n    {\n        account[from].tokenBalance = account[from].tokenBalance.sub(value);\n        account[to].tokenBalance = account[to].tokenBalance.add(value);\n        if(account[to].active == false) account[to].active = true;\n        emit Transfer(from, to, value);\n    }\n    /* transferFrom() - the function of tokens creating (ERC20 standart) */\n    function _mint(address customerAddress, uint256 value) check0x(customerAddress) private\n    {\n        totalSupply = totalSupply.add(value);\n        account[customerAddress].tokenBalance = account[customerAddress].tokenBalance.add(value);\n        emit Transfer(address(0), customerAddress, value);\n    }\n    /* transferFrom() - the function of tokens _burning (ERC20 standart) */\n    function _burn(address customerAddress, uint256 value) check0x(customerAddress) private\n    {\n        totalSupply = totalSupply.sub(value);\n        account[customerAddress].tokenBalance = account[customerAddress].tokenBalance.sub(value);\n        emit Transfer(customerAddress, address(0), value);\n    }\n    event Buy(\n        address indexed customerAddress,\n        uint256 inputEthereum,\n        uint256 outputToken,\n        uint256 totalSupply,\n        uint256 timestamp\n    );\n    event Sell(\n        address indexed customerAddress,\n        uint256 amountTokens,\n        uint256 outputEthereum,\n        uint256 totalSupply,\n        uint256 timestamp\n    );\n    event Reinvest(\n        address indexed customerAddress,\n        uint256 amountEthereum,\n        uint256 outputToken,\n        uint256 totalSupply,\n        uint256 timestamp\n    );\n    event Withdraw(\n        address indexed customerAddress,\n        uint256 indexed amountEthereum,\n        uint256 timestamp\n    );\n    event Referrer(\n        address indexed customerAddress,\n        address indexed referrer1,\n        address referrer2,\n        address referrer3,\n        address referrer4,\n        address referrer5,\n        uint256 timestamp\n    );\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint tokens\n    );\n    event Approval(\n        address indexed tokenOwner,\n        address indexed spender,\n        uint tokens\n    );\n}\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {  return 0; }\n        uint256 c = a * b;\n        require(c / a == b, \"Mul error\");\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"Div error\");\n        uint256 c = a / b;\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"Sub error\");\n        uint256 c = a - b;\n        return c;\n    }\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"Add error\");\n        return c;\n    }\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"Mod error\");\n        return a % b;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountEthereum\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developmentBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidates\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGamingDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divPerTokenGaming\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"charitytWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divPerTokenPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"},{\"name\":\"k\",\"type\":\"uint8\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"account\",\"outputs\":[{\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"name\":\"ethereumBalance\",\"type\":\"uint256\"},{\"name\":\"lastDivPerTokenPool\",\"type\":\"uint256\"},{\"name\":\"lastDivPerTokenGaming\",\"type\":\"uint256\"},{\"name\":\"totalDividendsReferrer\",\"type\":\"uint256\"},{\"name\":\"totalDividendsGaming\",\"type\":\"uint256\"},{\"name\":\"totalDividendsPool\",\"type\":\"uint256\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccountData\",\"outputs\":[{\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"name\":\"ethereumBalance\",\"type\":\"uint256\"},{\"name\":\"lastDivPerTokenPool\",\"type\":\"uint256\"},{\"name\":\"lastDivPerTokenGaming\",\"type\":\"uint256\"},{\"name\":\"totalDividendsPool\",\"type\":\"uint256\"},{\"name\":\"totalDividendsReferrer\",\"type\":\"uint256\"},{\"name\":\"totalDividendsGaming\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address[5]\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"developmentWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountEthereum\",\"type\":\"uint256\"}],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameAddress\",\"type\":\"address\"}],\"name\":\"getGame\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividends\",\"outputs\":[{\"name\":\"referrer\",\"type\":\"uint256\"},{\"name\":\"gaming\",\"type\":\"uint256\"},{\"name\":\"pool\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charityBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"gamingDividendsReception\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameAddress\",\"type\":\"address\"},{\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setGame\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPoolDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"r1\",\"type\":\"uint8\"},{\"name\":\"r2\",\"type\":\"uint8\"},{\"name\":\"r3\",\"type\":\"uint8\"},{\"name\":\"r4\",\"type\":\"uint8\"},{\"name\":\"r5\",\"type\":\"uint8\"},{\"name\":\"charity\",\"type\":\"uint8\"},{\"name\":\"development\",\"type\":\"uint8\"},{\"name\":\"buy\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"k\",\"type\":\"uint8\"}],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"owner2\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"inputEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"outputToken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"outputEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"outputToken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amountEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer1\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referrer2\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referrer3\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referrer4\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referrer5\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Referrer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000003270abd6c2a3c4e47e054c45160fa2bd430b33fc"
}