{
  "address": "0x849c2ea2a8f0ed0fe6d28b17fa0f779d6a45dff1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EDUToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-26\n*/\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\n\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    uint256 _allowance = allowed[_from][msg.sender];\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  function increaseApproval (address _spender, uint _addedValue)\n    returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue)\n    returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract Certifier {\n    event Confirmed(address indexed who);\n    event Revoked(address indexed who);\n    function certified(address) public constant returns (bool);\n    function get(address, string) public constant returns (bytes32);\n    function getAddress(address, string) public constant returns (address);\n    function getUint(address, string) public constant returns (uint);\n}\n\ncontract EDUToken is StandardToken {\n\n    using SafeMath for uint256;\n\n    Certifier public certifier;\n\n    // EVENTS\n    event CreatedEDU(address indexed _creator, uint256 _amountOfEDU);\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n\n    // GENERAL INFORMATION ABOUT THE TOKEN\n    string public constant name = \"EDU Token\";\n    string public constant symbol = \"EDU\";\n    uint256 public constant decimals = 4;\n    string public version = \"1.0\";\n\n    // CONSTANTS\n    // Purchase limits\n    uint256 public constant TotalEDUSupply = 48000000*10000;                    // MAX TOTAL EDU TOKENS 48 million\n    uint256 public constant maxEarlyPresaleEDUSupply = 2601600*10000;           // Maximum EDU tokens early presale supply (Presale Stage 1)\n    uint256 public constant maxPresaleEDUSupply = 2198400*10000;                // Maximum EDU tokens presale supply (Presale Stage 2)\n    uint256 public constant OSUniEDUSupply = 8400000*10000;                     // Open Source University EDU tokens supply\n    uint256 public constant SaleEDUSupply = 30000000*10000;                     // Allocated EDU tokens for crowdsale\n    uint256 public constant sigTeamAndAdvisersEDUSupply = 3840000*10000;        // EDU tokens supply allocated for team and advisers\n    uint256 public constant sigBountyProgramEDUSupply = 960000*10000;           // EDU tokens supply allocated for bounty program\n\n    //ASSIGNED IN INITIALIZATION\n    // Time limits\n    uint256 public preSaleStartTime;                                            // Start presale time\n    uint256 public preSaleEndTime;                                              // End presale time\n    uint256 public saleStartTime;                                               // Start sale time (start crowdsale)\n    uint256 public saleEndTime;                                                 // End crowdsale\n\n    // Purchase limits\n    uint256 public earlyPresaleEDUSupply;\n    uint256 public PresaleEDUSupply;\n\n    // Refund in EDU tokens because of the KYC procedure\n    uint256 public EDU_KYC_BONUS = 50*10000;                                    // Bonus 50 EDU tokens for the KYC procedure\n\n    // Lock EDU tokens\n    uint256 public LockEDUTeam;                                                 // Lock EDU tokens relocated for the team\n\n    // Token bonuses\n    uint256 public EDU_PER_ETH_EARLY_PRE_SALE = 1350;                           // 1350 EDU = 1 ETH  presale stage 1  until the quantities are exhausted\n    uint256 public EDU_PER_ETH_PRE_SALE = 1200;                                 // 1200 EDU = 1 ETH  presale stage 2\n\n    // Token sale\n    uint256 public EDU_PER_ETH_SALE;                                            // Crowdsale price which will be anaunced after the alpha version of the OSUni platform\n\n    // Addresses\n    address public ownerAddress;                                                // Address used by Open Source University\n    address public presaleAddress;                                              // Address used in the presale period\n    address public saleAddress;                                                 // Address used in the crowdsale period\n    address public sigTeamAndAdvisersAddress;                                   // EDU tokens for the team and advisers\n    address public sigBountyProgramAddress;                                     // EDU tokens bounty program\n    address public contributionsAddress;                                        // Address used for contributions\n\n    // Contribution indicator\n    bool public allowContribution = true;                                       // Flag to change if transfering is allowed\n\n    // Running totals\n    uint256 public totalWEIInvested = 0;                                        // Total WEI invested\n    uint256 public totalEDUSLeft = 0;                                           // Total EDU left\n    uint256 public totalEDUSAllocated = 0;                                      // Total EDU allocated\n    mapping (address => uint256) public WEIContributed;                         // Total WEI Per Account\n\n    // Owner of account approves the transfer of an amount to another account\n    mapping(address => mapping (address => uint256)) allowed;\n\n    // Functions with this modifier can only be executed by the owner of following smart contract\n    modifier onlyOwner() {\n        if (msg.sender != ownerAddress) {\n            revert();\n        }\n        _;\n    }\n\n    // Minimal contribution which will be processed is 0.5 ETH\n    modifier minimalContribution() {\n        require(500000000000000000 <= msg.value);\n        _;\n    }\n\n    // Freeze all EDU token transfers during sale period\n    modifier freezeDuringEDUtokenSale() {\n        if ( (msg.sender == ownerAddress) ||\n             (msg.sender == contributionsAddress) ||\n             (msg.sender == presaleAddress) ||\n             (msg.sender == saleAddress) ||\n             (msg.sender == sigBountyProgramAddress) ) {\n            _;\n        } else {\n            if((block.timestamp > preSaleStartTime && block.timestamp < preSaleEndTime) || (block.timestamp > saleStartTime && block.timestamp < saleEndTime)) {\n                revert();\n            } else {\n                _;\n            }\n        }\n    }\n\n    // Freeze EDU tokens for TeamAndAdvisers for 1 year after the end of the presale\n    modifier freezeTeamAndAdvisersEDUTokens(address _address) {\n        if (_address == sigTeamAndAdvisersAddress) {\n            if (LockEDUTeam > block.timestamp) { revert(); }\n        }\n        _;\n    }\n\n    // INITIALIZATIONS FUNCTION\n    function EDUToken(\n        address _presaleAddress,\n        address _saleAddress,\n        address _sigTeamAndAdvisersAddress,\n        address _sigBountyProgramAddress,\n        address _contributionsAddress\n    ) {\n        certifier = Certifier(0x1e2F058C43ac8965938F6e9CA286685A3E63F24E);\n        ownerAddress = msg.sender;                                                               // Store owners address\n        presaleAddress = _presaleAddress;                                                        // Store presale address\n        saleAddress = _saleAddress;\n        sigTeamAndAdvisersAddress = _sigTeamAndAdvisersAddress;                                  // Store sale address\n        sigBountyProgramAddress = _sigBountyProgramAddress;\n        contributionsAddress = _contributionsAddress;\n\n        preSaleStartTime = 1511179200;                                                           // Start of presale right after end of early presale period\n        preSaleEndTime = 1514764799;                                                             // End of the presale period 1 week after end of early presale\n        LockEDUTeam = preSaleEndTime + 1 years;                                                  // EDU tokens allocated for the team will be freezed for one year\n\n        earlyPresaleEDUSupply = maxEarlyPresaleEDUSupply;                                        // MAX TOTAL DURING EARLY PRESALE (2 601 600 EDU Tokens)\n        PresaleEDUSupply = maxPresaleEDUSupply;                                                  // MAX TOTAL DURING PRESALE (2 198 400 EDU Tokens)\n\n        balances[contributionsAddress] = OSUniEDUSupply;                                         // Allocating EDU tokens for Open Source University             // Allocating EDU tokens for early presale\n        balances[presaleAddress] = SafeMath.add(maxPresaleEDUSupply, maxEarlyPresaleEDUSupply);  // Allocating EDU tokens for presale\n        balances[saleAddress] = SaleEDUSupply;                                                   // Allocating EDU tokens for sale\n        balances[sigTeamAndAdvisersAddress] = sigTeamAndAdvisersEDUSupply;                       // Allocating EDU tokens for team and advisers\n        balances[sigBountyProgramAddress] = sigBountyProgramEDUSupply;                           // Bounty program address\n\n\n        totalEDUSAllocated = OSUniEDUSupply + sigTeamAndAdvisersEDUSupply + sigBountyProgramEDUSupply;\n        totalEDUSLeft = SafeMath.sub(TotalEDUSupply, totalEDUSAllocated);                        // EDU Tokens left for sale\n\n        totalSupply = TotalEDUSupply;                                                            // Total EDU Token supply\n    }\n\n    // FALL BACK FUNCTION TO ALLOW ETHER CONTRIBUTIONS\n    function()\n        payable\n        minimalContribution\n    {\n        require(allowContribution);\n\n        // Only PICOPS certified addresses will be allowed to participate\n        if (!certifier.certified(msg.sender)) {\n            revert();\n        }\n\n        // Transaction value in Wei\n        uint256 amountInWei = msg.value;\n\n        // Initial amounts\n        uint256 amountOfEDU = 0;\n\n        if (block.timestamp > preSaleStartTime && block.timestamp < preSaleEndTime) {\n            amountOfEDU = amountInWei.mul(EDU_PER_ETH_EARLY_PRE_SALE).div(100000000000000);\n            if(!(WEIContributed[msg.sender] > 0)) {\n                amountOfEDU += EDU_KYC_BONUS;  // Bonus for KYC procedure\n            }\n            if (earlyPresaleEDUSupply > 0 && earlyPresaleEDUSupply >= amountOfEDU) {\n                require(updateEDUBalanceFunc(presaleAddress, amountOfEDU));\n                earlyPresaleEDUSupply = earlyPresaleEDUSupply.sub(amountOfEDU);\n            } else if (PresaleEDUSupply > 0) {\n                if (earlyPresaleEDUSupply != 0) {\n                    PresaleEDUSupply = PresaleEDUSupply.add(earlyPresaleEDUSupply);\n                    earlyPresaleEDUSupply = 0;\n                }\n                amountOfEDU = amountInWei.mul(EDU_PER_ETH_PRE_SALE).div(100000000000000);\n                if(!(WEIContributed[msg.sender] > 0)) {\n                    amountOfEDU += EDU_KYC_BONUS;\n                }\n                require(PresaleEDUSupply >= amountOfEDU);\n                require(updateEDUBalanceFunc(presaleAddress, amountOfEDU));\n                PresaleEDUSupply = PresaleEDUSupply.sub(amountOfEDU);\n            } else {\n                revert();\n            }\n        } else if (block.timestamp > saleStartTime && block.timestamp < saleEndTime) {\n            // Sale period\n            amountOfEDU = amountInWei.mul(EDU_PER_ETH_SALE).div(100000000000000);\n            require(totalEDUSLeft >= amountOfEDU);\n            require(updateEDUBalanceFunc(saleAddress, amountOfEDU));\n        } else {\n            // Outside contribution period\n            revert();\n        }\n\n        // Update total WEI Invested\n        totalWEIInvested = totalWEIInvested.add(amountInWei);\n        assert(totalWEIInvested > 0);\n        // Update total WEI Invested by account\n        uint256 contributedSafe = WEIContributed[msg.sender].add(amountInWei);\n        assert(contributedSafe > 0);\n        WEIContributed[msg.sender] = contributedSafe;\n\n        // Transfer contributions to Open Source University\n        contributionsAddress.transfer(amountInWei);\n\n        // CREATE EVENT FOR SENDER\n        CreatedEDU(msg.sender, amountOfEDU);\n    }\n\n    /**\n     * @dev Function for updating the balance and double checks allocated EDU tokens\n     * @param _from The address that will send EDU tokens.\n     * @param _amountOfEDU The amount of tokens which will be send to contributor.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function updateEDUBalanceFunc(address _from, uint256 _amountOfEDU) internal returns (bool) {\n        // Update total EDU balance\n        totalEDUSLeft = totalEDUSLeft.sub(_amountOfEDU);\n        totalEDUSAllocated += _amountOfEDU;\n\n        // Validate EDU allocation\n        if (totalEDUSAllocated <= TotalEDUSupply && totalEDUSAllocated > 0) {\n            // Update user EDU balance\n            uint256 balanceSafe = balances[msg.sender].add(_amountOfEDU);\n            assert(balanceSafe > 0);\n            balances[msg.sender] = balanceSafe;\n            uint256 balanceDiv = balances[_from].sub(_amountOfEDU);\n            balances[_from] = balanceDiv;\n            return true;\n        } else {\n            totalEDUSLeft = totalEDUSLeft.add(_amountOfEDU);\n            totalEDUSAllocated -= _amountOfEDU;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Set contribution flag status\n     * @param _allowContribution This is additional parmition for the contributers\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function setAllowContributionFlag(bool _allowContribution) public returns (bool success) {\n        require(msg.sender == ownerAddress);\n        allowContribution = _allowContribution;\n        return true;\n    }\n\n    /**\n     * @dev Set the sale period\n     * @param _saleStartTime Sets the starting time of the sale period\n     * @param _saleEndTime Sets the end time of the sale period\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function setSaleTimes(uint256 _saleStartTime, uint256 _saleEndTime) public returns (bool success) {\n        require(msg.sender == ownerAddress);\n        saleStartTime = _saleStartTime;\n        saleEndTime = _saleEndTime;\n        return true;\n    }\n\n    /**\n     * @dev Set change the presale period if necessary\n     * @param _preSaleStartTime Sets the starting time of the presale period\n     * @param _preSaleEndTime Sets the end time of the presale period\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function setPresaleTime(uint256 _preSaleStartTime, uint256 _preSaleEndTime) public returns (bool success) {\n        require(msg.sender == ownerAddress);\n        preSaleStartTime = _preSaleStartTime;\n        preSaleEndTime = _preSaleEndTime;\n        return true;\n    }\n\n    function setEDUPrice(\n        uint256 _valEarlyPresale,\n        uint256 _valPresale,\n        uint256 _valSale\n    ) public returns (bool success) {\n        require(msg.sender == ownerAddress);\n        EDU_PER_ETH_EARLY_PRE_SALE = _valEarlyPresale;\n        EDU_PER_ETH_PRE_SALE = _valPresale;\n        EDU_PER_ETH_SALE = _valSale;\n        return true;\n    }\n\n    function updateCertifier(address _address) public returns (bool success) {\n        certifier = Certifier(_address);\n        return true;\n    }\n\n    // Balance of a specific account\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    // Transfer the balance from owner's account to another account\n    function transfer(address _to, uint256 _amount) freezeDuringEDUtokenSale freezeTeamAndAdvisersEDUTokens(msg.sender) returns (bool success) {\n        if (balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) {\n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // Send _value amount of tokens from address _from to address _to\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n    // fees in sub-currencies; the command should fail unless the _from account has\n    // deliberately authorized the sender of the message via some mechanism; we propose\n    // these standardized APIs for approval:\n    function transferFrom(address _from, address _to, uint256 _amount) freezeDuringEDUtokenSale freezeTeamAndAdvisersEDUTokens(_from) returns (bool success) {\n        if (balances[_from] >= _amount\n             && allowed[_from][msg.sender] >= _amount\n             && _amount > 0\n             && balances[_to] + _amount > balances[_to]) {\n            balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    function approve(address _spender, uint256 _amount) freezeDuringEDUtokenSale freezeTeamAndAdvisersEDUTokens(msg.sender) returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000001663ad6a0f4281559464a1beb59207919b0105e6000000000000000000000000c4f4f0c68f3dd0460ac9209a6454b99a79ab029b000000000000000000000000c40e3221e358a342289db22ac77667b980f8d3350000000000000000000000004a38281bd87a319ab66e9ba218fc5104a8477370000000000000000000000000269d55ef8acfdf0b83ccd08278ab440f87f9e9d8"
}