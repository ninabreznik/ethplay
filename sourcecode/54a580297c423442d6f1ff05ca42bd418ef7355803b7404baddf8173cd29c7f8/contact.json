{
  "address": "0x56940c657035113bed2cee111ef8c5c80220bbb9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PaymentProcessor",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-25\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Destructible.sol\n\n/**\n * @title Destructible\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n */\ncontract Destructible is Ownable {\n  /**\n   * @dev Transfers the current balance to the owner and terminates the contract.\n   */\n  function destroy() public onlyOwner {\n    selfdestruct(owner);\n  }\n\n  function destroyAndSend(address _recipient) public onlyOwner {\n    selfdestruct(_recipient);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Contactable.sol\n\n/**\n * @title Contactable token\n * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\n * contact information.\n */\ncontract Contactable is Ownable {\n\n  string public contactInformation;\n\n  /**\n    * @dev Allows the owner to set a string with their contact information.\n    * @param _info The contact information to attach to the contract.\n    */\n  function setContactInformation(string _info) public onlyOwner {\n    contactInformation = _info;\n  }\n}\n\n// File: monetha-utility-contracts/contracts/Restricted.sol\n\n/** @title Restricted\n *  Exposes onlyMonetha modifier\n */\ncontract Restricted is Ownable {\n\n    //MonethaAddress set event\n    event MonethaAddressSet(\n        address _address,\n        bool _isMonethaAddress\n    );\n\n    mapping (address => bool) public isMonethaAddress;\n\n    /**\n     *  Restrict methods in such way, that they can be invoked only by monethaAddress account.\n     */\n    modifier onlyMonetha() {\n        require(isMonethaAddress[msg.sender]);\n        _;\n    }\n\n    /**\n     *  Allows owner to set new monetha address\n     */\n    function setMonethaAddress(address _address, bool _isMonethaAddress) onlyOwner public {\n        isMonethaAddress[_address] = _isMonethaAddress;\n\n        emit MonethaAddressSet(_address, _isMonethaAddress);\n    }\n}\n\n// File: monetha-loyalty-contracts/contracts/IMonethaVoucher.sol\n\ninterface IMonethaVoucher {\n    /**\n    * @dev Total number of vouchers in shared pool\n    */\n    function totalInSharedPool() external view returns (uint256);\n\n    /**\n     * @dev Converts vouchers to equivalent amount of wei.\n     * @param _value amount of vouchers (vouchers) to convert to amount of wei\n     * @return A uint256 specifying the amount of wei.\n     */\n    function toWei(uint256 _value) external view returns (uint256);\n\n    /**\n     * @dev Converts amount of wei to equivalent amount of vouchers.\n     * @param _value amount of wei to convert to vouchers (vouchers)\n     * @return A uint256 specifying the amount of vouchers.\n     */\n    function fromWei(uint256 _value) external view returns (uint256);\n\n    /**\n     * @dev Applies discount for address by returning vouchers to shared pool and transferring funds (in wei). May be called only by Monetha.\n     * @param _for address to apply discount for\n     * @param _vouchers amount of vouchers to return to shared pool\n     * @return Actual number of vouchers returned to shared pool and amount of funds (in wei) transferred.\n     */\n    function applyDiscount(address _for, uint256 _vouchers) external returns (uint256 amountVouchers, uint256 amountWei);\n\n    /**\n     * @dev Applies payback by transferring vouchers from the shared pool to the user.\n     * The amount of transferred vouchers is equivalent to the amount of Ether in the `_amountWei` parameter.\n     * @param _for address to apply payback for\n     * @param _amountWei amount of Ether to estimate the amount of vouchers\n     * @return The number of vouchers added\n     */\n    function applyPayback(address _for, uint256 _amountWei) external returns (uint256 amountVouchers);\n\n    /**\n     * @dev Function to buy vouchers by transferring equivalent amount in Ether to contract. May be called only by Monetha.\n     * After the vouchers are purchased, they can be sold or released to another user. Purchased vouchers are stored in\n     * a separate pool and may not be expired.\n     * @param _vouchers The amount of vouchers to buy. The caller must also transfer an equivalent amount of Ether.\n     */\n    function buyVouchers(uint256 _vouchers) external payable;\n\n    /**\n     * @dev The function allows Monetha account to sell previously purchased vouchers and get Ether from the sale.\n     * The equivalent amount of Ether will be transferred to the caller. May be called only by Monetha.\n     * @param _vouchers The amount of vouchers to sell.\n     * @return A uint256 specifying the amount of Ether (in wei) transferred to the caller.\n     */\n    function sellVouchers(uint256 _vouchers) external returns(uint256 weis);\n\n    /**\n     * @dev Function allows Monetha account to release the purchased vouchers to any address.\n     * The released voucher acquires an expiration property and should be used in Monetha ecosystem within 6 months, otherwise\n     * it will be returned to shared pool. May be called only by Monetha.\n     * @param _to address to release vouchers to.\n     * @param _value the amount of vouchers to release.\n     */\n    function releasePurchasedTo(address _to, uint256 _value) external returns (bool);\n\n    /**\n     * @dev Function to check the amount of vouchers that an owner (Monetha account) allowed to sell or release to some user.\n     * @param owner The address which owns the funds.\n     * @return A uint256 specifying the amount of vouchers still available for the owner.\n     */\n    function purchasedBy(address owner) external view returns (uint256);\n}\n\n// File: contracts/GenericERC20.sol\n\n/**\n* @title GenericERC20 interface\n*/\ncontract GenericERC20 {\n    function totalSupply() public view returns (uint256);\n\n    function decimals() public view returns(uint256);\n\n    function balanceOf(address _who) public view returns (uint256);\n\n    function allowance(address _owner, address _spender)\n        public view returns (uint256);\n        \n    // Return type not defined intentionally since not all ERC20 tokens return proper result type\n    function transfer(address _to, uint256 _value) public;\n\n    function approve(address _spender, uint256 _value)\n        public returns (bool);\n\n    function transferFrom(address _from, address _to, uint256 _value)\n        public returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n// File: contracts/MonethaGateway.sol\n\n/**\n *  @title MonethaGateway\n *\n *  MonethaGateway forward funds from order payment to merchant's wallet and collects Monetha fee.\n */\ncontract MonethaGateway is Pausable, Contactable, Destructible, Restricted {\n\n    using SafeMath for uint256;\n\n    string constant VERSION = \"0.6\";\n\n    /**\n     *  Fee permille of Monetha fee.\n     *  1 permille (‰) = 0.1 percent (%)\n     *  15‰ = 1.5%\n     */\n    uint public constant FEE_PERMILLE = 15;\n\n\n    uint public constant PERMILLE_COEFFICIENT = 1000;\n\n    /**\n     *  Address of Monetha Vault for fee collection\n     */\n    address public monethaVault;\n\n    /**\n     *  Account for permissions managing\n     */\n    address public admin;\n\n    /**\n     * Monetha voucher contract\n     */\n    IMonethaVoucher public monethaVoucher;\n\n    /**\n     *  Max. discount permille.\n     *  10 permille = 1 %\n     */\n    uint public MaxDiscountPermille;\n\n    event PaymentProcessedEther(address merchantWallet, uint merchantIncome, uint monethaIncome);\n    event PaymentProcessedToken(address tokenAddress, address merchantWallet, uint merchantIncome, uint monethaIncome);\n    event MonethaVoucherChanged(\n        address indexed previousMonethaVoucher,\n        address indexed newMonethaVoucher\n    );\n    event MaxDiscountPermilleChanged(uint prevPermilleValue, uint newPermilleValue);\n\n    /**\n     *  @param _monethaVault Address of Monetha Vault\n     */\n    constructor(address _monethaVault, address _admin, IMonethaVoucher _monethaVoucher) public {\n        require(_monethaVault != 0x0);\n        monethaVault = _monethaVault;\n\n        setAdmin(_admin);\n        setMonethaVoucher(_monethaVoucher);\n        setMaxDiscountPermille(700); // 70%\n    }\n\n    /**\n     *  acceptPayment accept payment from PaymentAcceptor, forwards it to merchant's wallet\n     *      and collects Monetha fee.\n     *  @param _merchantWallet address of merchant's wallet for fund transfer\n     *  @param _monethaFee is a fee collected by Monetha\n     */\n    /**\n     *  acceptPayment accept payment from PaymentAcceptor, forwards it to merchant's wallet\n     *      and collects Monetha fee.\n     *  @param _merchantWallet address of merchant's wallet for fund transfer\n     *  @param _monethaFee is a fee collected by Monetha\n     */\n    function acceptPayment(address _merchantWallet,\n        uint _monethaFee,\n        address _customerAddress,\n        uint _vouchersApply,\n        uint _paybackPermille)\n    external payable onlyMonetha whenNotPaused returns (uint discountWei){\n        require(_merchantWallet != 0x0);\n        uint price = msg.value;\n        // Monetha fee cannot be greater than 1.5% of payment\n        require(_monethaFee >= 0 && _monethaFee <= FEE_PERMILLE.mul(price).div(1000));\n\n        discountWei = 0;\n        if (monethaVoucher != address(0)) {\n            if (_vouchersApply > 0 && MaxDiscountPermille > 0) {\n                uint maxDiscountWei = price.mul(MaxDiscountPermille).div(PERMILLE_COEFFICIENT);\n                uint maxVouchers = monethaVoucher.fromWei(maxDiscountWei);\n                // limit vouchers to apply\n                uint vouchersApply = _vouchersApply;\n                if (vouchersApply > maxVouchers) {\n                    vouchersApply = maxVouchers;\n                }\n\n                (, discountWei) = monethaVoucher.applyDiscount(_customerAddress, vouchersApply);\n            }\n\n            if (_paybackPermille > 0) {\n                uint paybackWei = price.sub(discountWei).mul(_paybackPermille).div(PERMILLE_COEFFICIENT);\n                if (paybackWei > 0) {\n                    monethaVoucher.applyPayback(_customerAddress, paybackWei);\n                }\n            }\n        }\n\n        uint merchantIncome = price.sub(_monethaFee);\n\n        _merchantWallet.transfer(merchantIncome);\n        monethaVault.transfer(_monethaFee);\n\n        emit PaymentProcessedEther(_merchantWallet, merchantIncome, _monethaFee);\n    }\n\n    /**\n     *  acceptTokenPayment accept token payment from PaymentAcceptor, forwards it to merchant's wallet\n     *      and collects Monetha fee.\n     *  @param _merchantWallet address of merchant's wallet for fund transfer\n     *  @param _monethaFee is a fee collected by Monetha\n     *  @param _tokenAddress is the token address\n     *  @param _value is the order value\n     */\n    function acceptTokenPayment(\n        address _merchantWallet,\n        uint _monethaFee,\n        address _tokenAddress,\n        uint _value\n    )\n    external onlyMonetha whenNotPaused\n    {\n        require(_merchantWallet != 0x0);\n\n        // Monetha fee cannot be greater than 1.5% of payment\n        require(_monethaFee >= 0 && _monethaFee <= FEE_PERMILLE.mul(_value).div(1000));\n\n        uint merchantIncome = _value.sub(_monethaFee);\n\n        GenericERC20(_tokenAddress).transfer(_merchantWallet, merchantIncome);\n        GenericERC20(_tokenAddress).transfer(monethaVault, _monethaFee);\n\n        emit PaymentProcessedToken(_tokenAddress, _merchantWallet, merchantIncome, _monethaFee);\n    }\n\n    /**\n     *  changeMonethaVault allows owner to change address of Monetha Vault.\n     *  @param newVault New address of Monetha Vault\n     */\n    function changeMonethaVault(address newVault) external onlyOwner whenNotPaused {\n        monethaVault = newVault;\n    }\n\n    /**\n     *  Allows other monetha account or contract to set new monetha address\n     */\n    function setMonethaAddress(address _address, bool _isMonethaAddress) public {\n        require(msg.sender == admin || msg.sender == owner);\n\n        isMonethaAddress[_address] = _isMonethaAddress;\n\n        emit MonethaAddressSet(_address, _isMonethaAddress);\n    }\n\n    /**\n     *  setAdmin allows owner to change address of admin.\n     *  @param _admin New address of admin\n     */\n    function setAdmin(address _admin) public onlyOwner {\n        require(_admin != address(0));\n        admin = _admin;\n    }\n\n    /**\n     *  setAdmin allows owner to change address of Monetha voucher contract. If set to 0x0 address, discounts and paybacks are disabled.\n     *  @param _monethaVoucher New address of Monetha voucher contract\n     */\n    function setMonethaVoucher(IMonethaVoucher _monethaVoucher) public onlyOwner {\n        if (monethaVoucher != _monethaVoucher) {\n            emit MonethaVoucherChanged(monethaVoucher, _monethaVoucher);\n            monethaVoucher = _monethaVoucher;\n        }\n    }\n\n    /**\n     *  setMaxDiscountPermille allows Monetha to change max.discount percentage\n     *  @param _maxDiscountPermille New value of max.discount (in permille)\n     */\n    function setMaxDiscountPermille(uint _maxDiscountPermille) public onlyOwner {\n        require(_maxDiscountPermille <= PERMILLE_COEFFICIENT);\n        emit MaxDiscountPermilleChanged(MaxDiscountPermille, _maxDiscountPermille);\n        MaxDiscountPermille = _maxDiscountPermille;\n    }\n}\n\n// File: contracts/MerchantDealsHistory.sol\n\n/**\n *  @title MerchantDealsHistory\n *  Contract stores hash of Deals conditions together with parties reputation for each deal\n *  This history enables to see evolution of trust rating for both parties\n */\ncontract MerchantDealsHistory is Contactable, Restricted {\n\n    string constant VERSION = \"0.3\";\n\n    ///  Merchant identifier hash\n    bytes32 public merchantIdHash;\n    \n    //Deal event\n    event DealCompleted(\n        uint orderId,\n        address clientAddress,\n        uint32 clientReputation,\n        uint32 merchantReputation,\n        bool successful,\n        uint dealHash\n    );\n\n    //Deal cancellation event\n    event DealCancelationReason(\n        uint orderId,\n        address clientAddress,\n        uint32 clientReputation,\n        uint32 merchantReputation,\n        uint dealHash,\n        string cancelReason\n    );\n\n    //Deal refund event\n    event DealRefundReason(\n        uint orderId,\n        address clientAddress,\n        uint32 clientReputation,\n        uint32 merchantReputation,\n        uint dealHash,\n        string refundReason\n    );\n\n    /**\n     *  @param _merchantId Merchant of the acceptor\n     */\n    constructor(string _merchantId) public {\n        require(bytes(_merchantId).length > 0);\n        merchantIdHash = keccak256(abi.encodePacked(_merchantId));\n    }\n\n    /**\n     *  recordDeal creates an event of completed deal\n     *  @param _orderId Identifier of deal's order\n     *  @param _clientAddress Address of client's account\n     *  @param _clientReputation Updated reputation of the client\n     *  @param _merchantReputation Updated reputation of the merchant\n     *  @param _isSuccess Identifies whether deal was successful or not\n     *  @param _dealHash Hashcode of the deal, describing the order (used for deal verification)\n     */\n    function recordDeal(\n        uint _orderId,\n        address _clientAddress,\n        uint32 _clientReputation,\n        uint32 _merchantReputation,\n        bool _isSuccess,\n        uint _dealHash)\n        external onlyMonetha\n    {\n        emit DealCompleted(\n            _orderId,\n            _clientAddress,\n            _clientReputation,\n            _merchantReputation,\n            _isSuccess,\n            _dealHash\n        );\n    }\n\n    /**\n     *  recordDealCancelReason creates an event of not paid deal that was cancelled \n     *  @param _orderId Identifier of deal's order\n     *  @param _clientAddress Address of client's account\n     *  @param _clientReputation Updated reputation of the client\n     *  @param _merchantReputation Updated reputation of the merchant\n     *  @param _dealHash Hashcode of the deal, describing the order (used for deal verification)\n     *  @param _cancelReason deal cancelation reason (text)\n     */\n    function recordDealCancelReason(\n        uint _orderId,\n        address _clientAddress,\n        uint32 _clientReputation,\n        uint32 _merchantReputation,\n        uint _dealHash,\n        string _cancelReason)\n        external onlyMonetha\n    {\n        emit DealCancelationReason(\n            _orderId,\n            _clientAddress,\n            _clientReputation,\n            _merchantReputation,\n            _dealHash,\n            _cancelReason\n        );\n    }\n\n/**\n     *  recordDealRefundReason creates an event of not paid deal that was cancelled \n     *  @param _orderId Identifier of deal's order\n     *  @param _clientAddress Address of client's account\n     *  @param _clientReputation Updated reputation of the client\n     *  @param _merchantReputation Updated reputation of the merchant\n     *  @param _dealHash Hashcode of the deal, describing the order (used for deal verification)\n     *  @param _refundReason deal refund reason (text)\n     */\n    function recordDealRefundReason(\n        uint _orderId,\n        address _clientAddress,\n        uint32 _clientReputation,\n        uint32 _merchantReputation,\n        uint _dealHash,\n        string _refundReason)\n        external onlyMonetha\n    {\n        emit DealRefundReason(\n            _orderId,\n            _clientAddress,\n            _clientReputation,\n            _merchantReputation,\n            _dealHash,\n            _refundReason\n        );\n    }\n}\n\n// File: monetha-utility-contracts/contracts/SafeDestructible.sol\n\n/**\n * @title SafeDestructible\n * Base contract that can be destroyed by owner.\n * Can be destructed if there are no funds on contract balance.\n */\ncontract SafeDestructible is Ownable {\n    function destroy() onlyOwner public {\n        require(address(this).balance == 0);\n        selfdestruct(owner);\n    }\n}\n\n// File: contracts/MerchantWallet.sol\n\n/**\n *  @title MerchantWallet\n *  Serves as a public Merchant profile with merchant profile info,\n *      payment settings and latest reputation value.\n *  Also MerchantWallet accepts payments for orders.\n */\n\ncontract MerchantWallet is Pausable, SafeDestructible, Contactable, Restricted {\n\n    string constant VERSION = \"0.5\";\n\n    /// Address of merchant's account, that can withdraw from wallet\n    address public merchantAccount;\n\n    /// Address of merchant's fund address.\n    address public merchantFundAddress;\n\n    /// Unique Merchant identifier hash\n    bytes32 public merchantIdHash;\n\n    /// profileMap stores general information about the merchant\n    mapping (string=>string) profileMap;\n\n    /// paymentSettingsMap stores payment and order settings for the merchant\n    mapping (string=>string) paymentSettingsMap;\n\n    /// compositeReputationMap stores composite reputation, that compraises from several metrics\n    mapping (string=>uint32) compositeReputationMap;\n\n    /// number of last digits in compositeReputation for fractional part\n    uint8 public constant REPUTATION_DECIMALS = 4;\n\n    /**\n     *  Restrict methods in such way, that they can be invoked only by merchant account.\n     */\n    modifier onlyMerchant() {\n        require(msg.sender == merchantAccount);\n        _;\n    }\n\n    /**\n     *  Fund Address should always be Externally Owned Account and not a contract.\n     */\n    modifier isEOA(address _fundAddress) {\n        uint256 _codeLength;\n        assembly {_codeLength := extcodesize(_fundAddress)}\n        require(_codeLength == 0, \"sorry humans only\");\n        _;\n    }\n\n    /**\n     *  Restrict methods in such way, that they can be invoked only by merchant account or by monethaAddress account.\n     */\n    modifier onlyMerchantOrMonetha() {\n        require(msg.sender == merchantAccount || isMonethaAddress[msg.sender]);\n        _;\n    }\n\n    /**\n     *  @param _merchantAccount Address of merchant's account, that can withdraw from wallet\n     *  @param _merchantId Merchant identifier\n     *  @param _fundAddress Merchant's fund address, where amount will be transferred.\n     */\n    constructor(address _merchantAccount, string _merchantId, address _fundAddress) public isEOA(_fundAddress) {\n        require(_merchantAccount != 0x0);\n        require(bytes(_merchantId).length > 0);\n\n        merchantAccount = _merchantAccount;\n        merchantIdHash = keccak256(abi.encodePacked(_merchantId));\n\n        merchantFundAddress = _fundAddress;\n    }\n\n    /**\n     *  Accept payment from MonethaGateway\n     */\n    function () external payable {\n    }\n\n    /**\n     *  @return profile info by string key\n     */\n    function profile(string key) external constant returns (string) {\n        return profileMap[key];\n    }\n\n    /**\n     *  @return payment setting by string key\n     */\n    function paymentSettings(string key) external constant returns (string) {\n        return paymentSettingsMap[key];\n    }\n\n    /**\n     *  @return composite reputation value by string key\n     */\n    function compositeReputation(string key) external constant returns (uint32) {\n        return compositeReputationMap[key];\n    }\n\n    /**\n     *  Set profile info by string key\n     */\n    function setProfile(\n        string profileKey,\n        string profileValue,\n        string repKey,\n        uint32 repValue\n    )\n        external onlyOwner\n    {\n        profileMap[profileKey] = profileValue;\n\n        if (bytes(repKey).length != 0) {\n            compositeReputationMap[repKey] = repValue;\n        }\n    }\n\n    /**\n     *  Set payment setting by string key\n     */\n    function setPaymentSettings(string key, string value) external onlyOwner {\n        paymentSettingsMap[key] = value;\n    }\n\n    /**\n     *  Set composite reputation value by string key\n     */\n    function setCompositeReputation(string key, uint32 value) external onlyMonetha {\n        compositeReputationMap[key] = value;\n    }\n\n    /**\n     *  Allows withdrawal of funds to beneficiary address\n     */\n    function doWithdrawal(address beneficiary, uint amount) private {\n        require(beneficiary != 0x0);\n        beneficiary.transfer(amount);\n    }\n\n    /**\n     *  Allows merchant to withdraw funds to beneficiary address\n     */\n    function withdrawTo(address beneficiary, uint amount) public onlyMerchant whenNotPaused {\n        doWithdrawal(beneficiary, amount);\n    }\n\n    /**\n     *  Allows merchant to withdraw funds to it's own account\n     */\n    function withdraw(uint amount) external onlyMerchant {\n        withdrawTo(msg.sender, amount);\n    }\n\n    /**\n     *  Allows merchant or Monetha to initiate exchange of funds by withdrawing funds to deposit address of the exchange\n     */\n    function withdrawToExchange(address depositAccount, uint amount) external onlyMerchantOrMonetha whenNotPaused {\n        doWithdrawal(depositAccount, amount);\n    }\n\n    /**\n     *  Allows merchant or Monetha to initiate exchange of funds by withdrawing all funds to deposit address of the exchange\n     */\n    function withdrawAllToExchange(address depositAccount, uint min_amount) external onlyMerchantOrMonetha whenNotPaused {\n        require (address(this).balance >= min_amount);\n        doWithdrawal(depositAccount, address(this).balance);\n    }\n\n    /**\n     *  Allows merchant or Monetha to initiate exchange of tokens by withdrawing all tokens to deposit address of the exchange\n     */\n    function withdrawAllTokensToExchange(address _tokenAddress, address _depositAccount, uint _minAmount) external onlyMerchantOrMonetha whenNotPaused {\n        require(_tokenAddress != address(0));\n        \n        uint balance = GenericERC20(_tokenAddress).balanceOf(address(this));\n        \n        require(balance >= _minAmount);\n        \n        GenericERC20(_tokenAddress).transfer(_depositAccount, balance);\n    }\n\n    /**\n     *  Allows merchant to change it's account address\n     */\n    function changeMerchantAccount(address newAccount) external onlyMerchant whenNotPaused {\n        merchantAccount = newAccount;\n    }\n\n    /**\n     *  Allows merchant to change it's fund address.\n     */\n    function changeFundAddress(address newFundAddress) external onlyMerchant isEOA(newFundAddress) {\n        merchantFundAddress = newFundAddress;\n    }\n}\n\n// File: contracts/PaymentProcessor.sol\n\n/**\n *  @title PaymentProcessor\n *  Each Merchant has one PaymentProcessor that ensure payment and order processing with Trust and Reputation\n *\n *  Payment Processor State Transitions:\n *  Null -(addOrder) -> Created\n *  Created -(securePay) -> Paid\n *  Created -(cancelOrder) -> Cancelled\n *  Paid -(refundPayment) -> Refunding\n *  Paid -(processPayment) -> Finalized\n *  Refunding -(withdrawRefund) -> Refunded\n */\n\n\ncontract PaymentProcessor is Pausable, Destructible, Contactable, Restricted {\n\n    using SafeMath for uint256;\n\n    string constant VERSION = \"0.7\";\n\n    /**\n     *  Fee permille of Monetha fee.\n     *  1 permille = 0.1 %\n     *  15 permille = 1.5%\n     */\n    uint public constant FEE_PERMILLE = 15;\n\n    /**\n     *  Payback permille.\n     *  1 permille = 0.1 %\n     */\n    uint public constant PAYBACK_PERMILLE = 2; // 0.2%\n\n    uint public constant PERMILLE_COEFFICIENT = 1000;\n\n    /// MonethaGateway contract for payment processing\n    MonethaGateway public monethaGateway;\n\n    /// MerchantDealsHistory contract of acceptor's merchant\n    MerchantDealsHistory public merchantHistory;\n\n    /// Address of MerchantWallet, where merchant reputation and funds are stored\n    MerchantWallet public merchantWallet;\n\n    /// Merchant identifier hash, that associates with the acceptor\n    bytes32 public merchantIdHash;\n\n    enum State {Null, Created, Paid, Finalized, Refunding, Refunded, Cancelled}\n\n    struct Order {\n        State state;\n        uint price;\n        uint fee;\n        address paymentAcceptor;\n        address originAddress;\n        address tokenAddress;\n        uint vouchersApply;\n        uint discount;\n    }\n\n    mapping(uint => Order) public orders;\n\n    /**\n     *  Asserts current state.\n     *  @param _state Expected state\n     *  @param _orderId Order Id\n     */\n    modifier atState(uint _orderId, State _state) {\n        require(_state == orders[_orderId].state);\n        _;\n    }\n\n    /**\n     *  Performs a transition after function execution.\n     *  @param _state Next state\n     *  @param _orderId Order Id\n     */\n    modifier transition(uint _orderId, State _state) {\n        _;\n        orders[_orderId].state = _state;\n    }\n\n    /**\n     *  payment Processor sets Monetha Gateway\n     *  @param _merchantId Merchant of the acceptor\n     *  @param _merchantHistory Address of MerchantDealsHistory contract of acceptor's merchant\n     *  @param _monethaGateway Address of MonethaGateway contract for payment processing\n     *  @param _merchantWallet Address of MerchantWallet, where merchant reputation and funds are stored\n     */\n    constructor(\n        string _merchantId,\n        MerchantDealsHistory _merchantHistory,\n        MonethaGateway _monethaGateway,\n        MerchantWallet _merchantWallet\n    )\n    public\n    {\n        require(bytes(_merchantId).length > 0);\n\n        merchantIdHash = keccak256(abi.encodePacked(_merchantId));\n\n        setMonethaGateway(_monethaGateway);\n        setMerchantWallet(_merchantWallet);\n        setMerchantDealsHistory(_merchantHistory);\n    }\n\n    /**\n     *  Assigns the acceptor to the order (when client initiates order).\n     *  @param _orderId Identifier of the order\n     *  @param _price Price of the order \n     *  @param _paymentAcceptor order payment acceptor\n     *  @param _originAddress buyer address\n     *  @param _fee Monetha fee\n     */\n    function addOrder(\n        uint _orderId,\n        uint _price,\n        address _paymentAcceptor,\n        address _originAddress,\n        uint _fee,\n        address _tokenAddress,\n        uint _vouchersApply\n    ) external whenNotPaused atState(_orderId, State.Null)\n    {\n        require(_orderId > 0);\n        require(_price > 0);\n        require(_fee >= 0 && _fee <= FEE_PERMILLE.mul(_price).div(PERMILLE_COEFFICIENT));\n        // Monetha fee cannot be greater than 1.5% of price\n        require(_paymentAcceptor != address(0));\n        require(_originAddress != address(0));\n        require(orders[_orderId].price == 0 && orders[_orderId].fee == 0);\n\n        orders[_orderId] = Order({\n            state : State.Created,\n            price : _price,\n            fee : _fee,\n            paymentAcceptor : _paymentAcceptor,\n            originAddress : _originAddress,\n            tokenAddress : _tokenAddress,\n            vouchersApply : _vouchersApply,\n            discount: 0\n            });\n    }\n\n    /**\n     *  securePay can be used by client if he wants to securely set client address for refund together with payment.\n     *  This function require more gas, then fallback function.\n     *  @param _orderId Identifier of the order\n     */\n    function securePay(uint _orderId)\n    external payable whenNotPaused\n    atState(_orderId, State.Created) transition(_orderId, State.Paid)\n    {\n        Order storage order = orders[_orderId];\n\n        require(order.tokenAddress == address(0));\n        require(msg.sender == order.paymentAcceptor);\n        require(msg.value == order.price);\n    }\n\n    /**\n     *  secureTokenPay can be used by client if he wants to securely set client address for token refund together with token payment.\n     *  This call requires that token's approve method has been called prior to this.\n     *  @param _orderId Identifier of the order\n     */\n    function secureTokenPay(uint _orderId)\n    external whenNotPaused\n    atState(_orderId, State.Created) transition(_orderId, State.Paid)\n    {\n        Order storage order = orders[_orderId];\n\n        require(msg.sender == order.paymentAcceptor);\n        require(order.tokenAddress != address(0));\n\n        GenericERC20(order.tokenAddress).transferFrom(msg.sender, address(this), order.price);\n    }\n\n    /**\n     *  cancelOrder is used when client doesn't pay and order need to be cancelled.\n     *  @param _orderId Identifier of the order\n     *  @param _clientReputation Updated reputation of the client\n     *  @param _merchantReputation Updated reputation of the merchant\n     *  @param _dealHash Hashcode of the deal, describing the order (used for deal verification)\n     *  @param _cancelReason Order cancel reason\n     */\n    function cancelOrder(\n        uint _orderId,\n        uint32 _clientReputation,\n        uint32 _merchantReputation,\n        uint _dealHash,\n        string _cancelReason\n    )\n    external onlyMonetha whenNotPaused\n    atState(_orderId, State.Created) transition(_orderId, State.Cancelled)\n    {\n        require(bytes(_cancelReason).length > 0);\n\n        Order storage order = orders[_orderId];\n\n        updateDealConditions(\n            _orderId,\n            _clientReputation,\n            _merchantReputation,\n            false,\n            _dealHash\n        );\n\n        merchantHistory.recordDealCancelReason(\n            _orderId,\n            order.originAddress,\n            _clientReputation,\n            _merchantReputation,\n            _dealHash,\n            _cancelReason\n        );\n    }\n\n    /**\n     *  refundPayment used in case order cannot be processed.\n     *  This function initiate process of funds refunding to the client.\n     *  @param _orderId Identifier of the order\n     *  @param _clientReputation Updated reputation of the client\n     *  @param _merchantReputation Updated reputation of the merchant\n     *  @param _dealHash Hashcode of the deal, describing the order (used for deal verification)\n     *  @param _refundReason Order refund reason, order will be moved to State Cancelled after Client withdraws money\n     */\n    function refundPayment(\n        uint _orderId,\n        uint32 _clientReputation,\n        uint32 _merchantReputation,\n        uint _dealHash,\n        string _refundReason\n    )\n    external onlyMonetha whenNotPaused\n    atState(_orderId, State.Paid) transition(_orderId, State.Refunding)\n    {\n        require(bytes(_refundReason).length > 0);\n\n        Order storage order = orders[_orderId];\n\n        updateDealConditions(\n            _orderId,\n            _clientReputation,\n            _merchantReputation,\n            false,\n            _dealHash\n        );\n\n        merchantHistory.recordDealRefundReason(\n            _orderId,\n            order.originAddress,\n            _clientReputation,\n            _merchantReputation,\n            _dealHash,\n            _refundReason\n        );\n    }\n\n    /**\n     *  withdrawRefund performs fund transfer to the client's account.\n     *  @param _orderId Identifier of the order\n     */\n    function withdrawRefund(uint _orderId)\n    external whenNotPaused\n    atState(_orderId, State.Refunding) transition(_orderId, State.Refunded)\n    {\n        Order storage order = orders[_orderId];\n        require(order.tokenAddress == address(0));\n\n        order.originAddress.transfer(order.price.sub(order.discount));\n    }\n\n    /**\n     *  withdrawTokenRefund performs token transfer to the client's account.\n     *  @param _orderId Identifier of the order\n     */\n    function withdrawTokenRefund(uint _orderId)\n    external whenNotPaused\n    atState(_orderId, State.Refunding) transition(_orderId, State.Refunded)\n    {\n        require(orders[_orderId].tokenAddress != address(0));\n\n        GenericERC20(orders[_orderId].tokenAddress).transfer(orders[_orderId].originAddress, orders[_orderId].price);\n    }\n\n    /**\n     *  processPayment transfer funds/tokens to MonethaGateway and completes the order.\n     *  @param _orderId Identifier of the order\n     *  @param _clientReputation Updated reputation of the client\n     *  @param _merchantReputation Updated reputation of the merchant\n     *  @param _dealHash Hashcode of the deal, describing the order (used for deal verification)\n     */\n    function processPayment(\n        uint _orderId,\n        uint32 _clientReputation,\n        uint32 _merchantReputation,\n        uint _dealHash\n    )\n    external onlyMonetha whenNotPaused\n    atState(_orderId, State.Paid) transition(_orderId, State.Finalized)\n    {\n        Order storage order = orders[_orderId];\n        address fundAddress = merchantWallet.merchantFundAddress();\n\n        if (order.tokenAddress != address(0)) {\n            if (fundAddress != address(0)) {\n                GenericERC20(order.tokenAddress).transfer(address(monethaGateway), order.price);\n                monethaGateway.acceptTokenPayment(fundAddress, order.fee, order.tokenAddress, order.price);\n            } else {\n                GenericERC20(order.tokenAddress).transfer(address(monethaGateway), order.price);\n                monethaGateway.acceptTokenPayment(merchantWallet, order.fee, order.tokenAddress, order.price);\n            }\n        } else {\n            uint discountWei = 0;\n            if (fundAddress != address(0)) {\n                discountWei = monethaGateway.acceptPayment.value(order.price)(\n                    fundAddress,\n                    order.fee,\n                    order.originAddress,\n                    order.vouchersApply,\n                    PAYBACK_PERMILLE);\n            } else {\n                discountWei = monethaGateway.acceptPayment.value(order.price)(\n                    merchantWallet,\n                    order.fee,\n                    order.originAddress,\n                    order.vouchersApply,\n                    PAYBACK_PERMILLE);\n            }\n\n            if (discountWei > 0) {\n                order.discount = discountWei;\n            }\n        }\n\n        updateDealConditions(\n            _orderId,\n            _clientReputation,\n            _merchantReputation,\n            true,\n            _dealHash\n        );\n    }\n\n    /**\n     *  setMonethaGateway allows owner to change address of MonethaGateway.\n     *  @param _newGateway Address of new MonethaGateway contract\n     */\n    function setMonethaGateway(MonethaGateway _newGateway) public onlyOwner {\n        require(address(_newGateway) != 0x0);\n\n        monethaGateway = _newGateway;\n    }\n\n    /**\n     *  setMerchantWallet allows owner to change address of MerchantWallet.\n     *  @param _newWallet Address of new MerchantWallet contract\n     */\n    function setMerchantWallet(MerchantWallet _newWallet) public onlyOwner {\n        require(address(_newWallet) != 0x0);\n        require(_newWallet.merchantIdHash() == merchantIdHash);\n\n        merchantWallet = _newWallet;\n    }\n\n    /**\n     *  setMerchantDealsHistory allows owner to change address of MerchantDealsHistory.\n     *  @param _merchantHistory Address of new MerchantDealsHistory contract\n     */\n    function setMerchantDealsHistory(MerchantDealsHistory _merchantHistory) public onlyOwner {\n        require(address(_merchantHistory) != 0x0);\n        require(_merchantHistory.merchantIdHash() == merchantIdHash);\n\n        merchantHistory = _merchantHistory;\n    }\n\n    /**\n     *  updateDealConditions record finalized deal and updates merchant reputation\n     *  in future: update Client reputation\n     *  @param _orderId Identifier of the order\n     *  @param _clientReputation Updated reputation of the client\n     *  @param _merchantReputation Updated reputation of the merchant\n     *  @param _isSuccess Identifies whether deal was successful or not\n     *  @param _dealHash Hashcode of the deal, describing the order (used for deal verification)\n     */\n    function updateDealConditions(\n        uint _orderId,\n        uint32 _clientReputation,\n        uint32 _merchantReputation,\n        bool _isSuccess,\n        uint _dealHash\n    )\n    internal\n    {\n        merchantHistory.recordDeal(\n            _orderId,\n            orders[_orderId].originAddress,\n            _clientReputation,\n            _merchantReputation,\n            _isSuccess,\n            _dealHash\n        );\n\n        //update parties Reputation\n        merchantWallet.setCompositeReputation(\"total\", _merchantReputation);\n    }\n}",
  "bytecode": "60806040526000805460a060020a60ff02191690553480156200002157600080fd5b506040516200223b3803806200223b8339810160409081528151602083015191830151606084015160008054600160a060020a0319163317815592909401805190949192106200007057600080fd5b836040516020018082805190602001908083835b60208310620000a55780518252601f19909201916020918201910162000084565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106200010a5780518252601f199092019160209182019101620000e9565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120600655506200014f915083905064010000000062000181810204565b6200016381640100000000620001d1810204565b6200017783640100000000620002b9810204565b50505050620003a1565b600054600160a060020a031633146200019957600080fd5b600160a060020a0381161515620001af57600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b600054600160a060020a03163314620001e957600080fd5b600160a060020a0381161515620001ff57600080fd5b6006546000191681600160a060020a031663f0daba016040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200025e57600080fd5b505af115801562000273573d6000803e3d6000fd5b505050506040513d60208110156200028a57600080fd5b5051146200029757600080fd5b60058054600160a060020a031916600160a060020a0392909216919091179055565b600054600160a060020a03163314620002d157600080fd5b600160a060020a0381161515620002e757600080fd5b6006546000191681600160a060020a031663f0daba016040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200034657600080fd5b505af11580156200035b573d6000803e3d6000fd5b505050506040513d60208110156200037257600080fd5b5051146200037f57600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055565b611e8a80620003b16000396000f3006080604052600436106101715763ffffffff60e060020a60003504166331d41325811461017657806336f7ab5e146101ab5780633d17a2d8146102355780633f4ba83a146102665780634153d65b1461027d578063444b6048146102885780634baf43e4146102a95780635c975abb146102d05780636137412c146102e5578063715018a6146102fa57806383197ef01461030f5780638456cb59146103245780638467d9cf146103395780638b11fb3e146103735780638da5cb5b1461038b5780639d153495146103a0578063a85c38ef146103b8578063aab9f16514610430578063ac1a13fb1461045a578063b440bf3914610494578063b967a52e146104b5578063bc85e0641461050e578063c07e339114610523578063c48aab6d14610549578063c4cc3f4d14610583578063ddda66db14610598578063de8248fb146105b9578063e5b8d6e0146105ce578063f0daba01146105e6578063f2fde38b146105fb578063f5074f411461061c575b600080fd5b34801561018257600080fd5b50610197600160a060020a036004351661063d565b604080519115158252519081900360200190f35b3480156101b757600080fd5b506101c0610652565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101fa5781810151838201526020016101e2565b50505050905090810190601f1680156102275780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024157600080fd5b5061024a6106df565b60408051600160a060020a039092168252519081900360200190f35b34801561027257600080fd5b5061027b6106ee565b005b61027b600435610764565b34801561029457600080fd5b5061027b600160a060020a036004351661083d565b3480156102b557600080fd5b506102be610913565b60408051918252519081900360200190f35b3480156102dc57600080fd5b50610197610918565b3480156102f157600080fd5b5061024a610928565b34801561030657600080fd5b5061027b610937565b34801561031b57600080fd5b5061027b6109a3565b34801561033057600080fd5b5061027b6109c8565b34801561034557600080fd5b5061027b600480359063ffffffff602480358216926044359092169160643591608435908101910135610a43565b34801561037f57600080fd5b5061027b600435610c0f565b34801561039757600080fd5b5061024a610d72565b3480156103ac57600080fd5b5061027b600435610d81565b3480156103c457600080fd5b506103d0600435610e7a565b604051808960068111156103e057fe5b60ff168152602081019890985250604080880196909652600160a060020a0394851660608801529284166080870152921660a085015260c084019190915260e08301525190819003610100019150f35b34801561043c57600080fd5b5061027b60043563ffffffff60243581169060443516606435610ed2565b34801561046657600080fd5b5061027b600480359063ffffffff60248035821692604435909216916064359160843590810191013561146a565b3480156104a057600080fd5b5061027b600160a060020a03600435166115e8565b3480156104c157600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261027b9436949293602493928401919081908401838280828437509497506116439650505050505050565b34801561051a57600080fd5b5061024a611671565b34801561052f57600080fd5b5061027b600160a060020a03600435166024351515611680565b34801561055557600080fd5b5061027b600435602435600160a060020a036044358116906064358116906084359060a4351660c4356116fb565b34801561058f57600080fd5b506102be61190e565b3480156105a457600080fd5b5061027b600160a060020a0360043516611914565b3480156105c557600080fd5b506102be6119ea565b3480156105da57600080fd5b5061027b6004356119ef565b3480156105f257600080fd5b506102be611b34565b34801561060757600080fd5b5061027b600160a060020a0360043516611b3a565b34801561062857600080fd5b5061027b600160a060020a0360043516611b5d565b60026020526000908152604090205460ff1681565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106d75780601f106106ac576101008083540402835291602001916106d7565b820191906000526020600020905b8154815290600101906020018083116106ba57829003601f168201915b505050505081565b600454600160a060020a031681565b600054600160a060020a0316331461070557600080fd5b60005460a060020a900460ff16151561071d57600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b6000805460a060020a900460ff161561077c57600080fd5b600082815260076020526040902054829060019060ff16600681111561079e57fe5b8160068111156107aa57fe5b146107b457600080fd5b600084815260076020526040902060058101549093508490600290600160a060020a0316156107e257600080fd5b6003850154600160a060020a031633146107fb57600080fd5b6001850154341461080b57600080fd5b6000828152600760205260409020805482919060ff1916600183600681111561083057fe5b0217905550505050505050565b600054600160a060020a0316331461085457600080fd5b600160a060020a038116151561086957600080fd5b6006546000191681600160a060020a031663f0daba016040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156108ae57600080fd5b505af11580156108c2573d6000803e3d6000fd5b505050506040513d60208110156108d857600080fd5b5051146108e457600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600281565b60005460a060020a900460ff1681565b600354600160a060020a031681565b600054600160a060020a0316331461094e57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031633146109ba57600080fd5b600054600160a060020a0316ff5b600054600160a060020a031633146109df57600080fd5b60005460a060020a900460ff16156109f657600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b3360009081526002602052604081205460ff161515610a6157600080fd5b60005460a060020a900460ff1615610a7857600080fd5b600087815260076020526040902054879060029060ff166006811115610a9a57fe5b816006811115610aa657fe5b14610ab057600080fd5b88600460008611610ac057600080fd5b60008b81526007602052604081209550610ae0908c908c908c908c611b80565b600460009054906101000a9004600160a060020a0316600160a060020a031663188c668c8c8760040160009054906101000a9004600160a060020a03168d8d8d8d8d6040518863ffffffff1660e060020a0281526004018088815260200187600160a060020a0316600160a060020a031681526020018663ffffffff1663ffffffff1681526020018563ffffffff1663ffffffff168152602001848152602001806020018281038252848482818152602001925080828437820191505098505050505050505050600060405180830381600087803b158015610bc157600080fd5b505af1158015610bd5573d6000803e3d6000fd5b5050506000838152600760205260409020805483925060ff19166001836006811115610bfd57fe5b02179055505050505050505050505050565b6000805460a060020a900460ff1615610c2757600080fd5b600082815260076020526040902054829060019060ff166006811115610c4957fe5b816006811115610c5557fe5b14610c5f57600080fd5b600084815260076020526040902060038101549093508490600290600160a060020a03163314610c8e57600080fd5b6005850154600160a060020a03161515610ca757600080fd5b60058501546001860154604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481019290925251600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b158015610d2157600080fd5b505af1158015610d35573d6000803e3d6000fd5b505050506040513d6020811015610d4b57600080fd5b50506000828152600760205260409020805482919060ff1916600183600681111561083057fe5b600054600160a060020a031681565b6000805460a060020a900460ff1615610d9957600080fd5b600082815260076020526040902054829060049060ff166006811115610dbb57fe5b816006811115610dc757fe5b14610dd157600080fd5b60008481526007602052604090206005818101549194508591600160a060020a031615610dfd57600080fd5b600485015460078601546001870154600160a060020a03909216916108fc91610e2c919063ffffffff611cf116565b6040518115909202916000818181858888f19350505050158015610e54573d6000803e3d6000fd5b506000828152600760205260409020805482919060ff1916600183600681111561083057fe5b60076020819052600091825260409091208054600182015460028301546003840154600485015460058601546006870154969097015460ff9095169693959294600160a060020a039283169491831693919092169188565b336000908152600260205260408120548190819060ff161515610ef457600080fd5b60005460a060020a900460ff1615610f0b57600080fd5b600087815260076020526040902054879060029060ff166006811115610f2d57fe5b816006811115610f3957fe5b14610f4357600080fd5b886003600760008c81526020019081526020016000209650600560009054906101000a9004600160a060020a0316600160a060020a031663969596d66040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610fae57600080fd5b505af1158015610fc2573d6000803e3d6000fd5b505050506040513d6020811015610fd857600080fd5b50516005880154909650600160a060020a03161561127357600160a060020a038616156111395760058701546003546001890154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a039384166004820152602481019290925251919092169163a9059cbb91604480830192600092919082900301818387803b15801561107757600080fd5b505af115801561108b573d6000803e3d6000fd5b505060035460028a015460058b015460018c0154604080517fcc4fbc43000000000000000000000000000000000000000000000000000000008152600160a060020a038e811660048301526024820195909552928416604484015260648301919091525191909216935063cc4fbc439250608480830192600092919082900301818387803b15801561111c57600080fd5b505af1158015611130573d6000803e3d6000fd5b5050505061126e565b60058701546003546001890154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a039384166004820152602481019290925251919092169163a9059cbb91604480830192600092919082900301818387803b1580156111b157600080fd5b505af11580156111c5573d6000803e3d6000fd5b50506003546005805460028c0154918c015460018d0154604080517fcc4fbc43000000000000000000000000000000000000000000000000000000008152600160a060020a039485166004820152602481019590955291831660448501526064840152519216935063cc4fbc43925060848082019260009290919082900301818387803b15801561125557600080fd5b505af1158015611269573d6000803e3d6000fd5b505050505b611437565b60009450600160a060020a038616156113575760035460018801546002808a01546004808c015460068d0154604080517fd21c39a1000000000000000000000000000000000000000000000000000000008152600160a060020a038f81169582019590955260248101959095529183166044850152606484015260848301939093529151919093169263d21c39a1929160a480830192602092919082900301818588803b15801561132357600080fd5b505af1158015611337573d6000803e3d6000fd5b50505050506040513d602081101561134e57600080fd5b50519450611426565b60035460018801546005546002808b01546004808d015460068e0154604080517fd21c39a1000000000000000000000000000000000000000000000000000000008152600160a060020a0397881694810194909452602484019490945290851660448301526064820152608481019290925251919093169263d21c39a1929160a480830192602092919082900301818588803b1580156113f657600080fd5b505af115801561140a573d6000803e3d6000fd5b50505050506040513d602081101561142157600080fd5b505194505b600085111561143757600787018590555b6114458b8b8b60018c611b80565b6000828152600760205260409020805482919060ff19166001836006811115610bfd57fe5b3360009081526002602052604081205460ff16151561148857600080fd5b60005460a060020a900460ff161561149f57600080fd5b600087815260076020526040902054879060019060ff1660068111156114c157fe5b8160068111156114cd57fe5b146114d757600080fd5b886006600086116114e757600080fd5b60008b81526007602052604081209550611507908c908c908c908c611b80565b600460009054906101000a9004600160a060020a0316600160a060020a031663a0e5e8218c8760040160009054906101000a9004600160a060020a03168d8d8d8d8d6040518863ffffffff1660e060020a0281526004018088815260200187600160a060020a0316600160a060020a031681526020018663ffffffff1663ffffffff1681526020018563ffffffff1663ffffffff168152602001848152602001806020018281038252848482818152602001925080828437820191505098505050505050505050600060405180830381600087803b158015610bc157600080fd5b600054600160a060020a031633146115ff57600080fd5b600160a060020a038116151561161457600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a0316331461165a57600080fd5b805161166d906001906020840190611dc3565b5050565b600554600160a060020a031681565b600054600160a060020a0316331461169757600080fd5b600160a060020a038216600081815260026020908152604091829020805460ff191685151590811790915582519384529083015280517fa551de8741dbb2092ce6bc142fd0ff3af5dfbf87d0aa594619fccddb0141e6929281900390910190a15050565b60005460a060020a900460ff161561171257600080fd5b60008781526007602052604081205488919060ff16600681111561173257fe5b81600681111561173e57fe5b1461174857600080fd5b6000891161175557600080fd5b6000881161176257600080fd5b6000851015801561179557506117916103e8611785600f8b63ffffffff611d0816565b9063ffffffff611d3116565b8511155b15156117a057600080fd5b600160a060020a03871615156117b557600080fd5b600160a060020a03861615156117ca57600080fd5b6000898152600760205260409020600101541580156117f85750600089815260076020526040902060020154155b151561180357600080fd5b604080516101008101909152806001815260208082018b90526040808301899052600160a060020a03808c1660608501528a81166080850152881660a084015260c08301879052600060e09093018390528c83526007909152902081518154829060ff1916600183600681111561187657fe5b021790555060208201516001820155604082015160028201556060820151600382018054600160a060020a0392831673ffffffffffffffffffffffffffffffffffffffff1991821617909155608084015160048401805491841691831691909117905560a084015160058401805491909316911617905560c0820151600682015560e090910151600790910155505050505050505050565b6103e881565b600054600160a060020a0316331461192b57600080fd5b600160a060020a038116151561194057600080fd5b6006546000191681600160a060020a031663f0daba016040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561198557600080fd5b505af1158015611999573d6000803e3d6000fd5b505050506040513d60208110156119af57600080fd5b5051146119bb57600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600f81565b60005460a060020a900460ff1615611a0657600080fd5b600081815260076020526040902054819060049060ff166006811115611a2857fe5b816006811115611a3457fe5b14611a3e57600080fd5b6000838152600760205260409020600590810154849190600160a060020a03161515611a6957600080fd5b600085815260076020526040808220600581015460048083015460019093015484517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a03948516928101929092526024820152925191169263a9059cbb926044808201939182900301818387803b158015611aec57600080fd5b505af1158015611b00573d6000803e3d6000fd5b5050506000838152600760205260409020805483925060ff19166001836006811115611b2857fe5b02179055505050505050565b60065481565b600054600160a060020a03163314611b5157600080fd5b611b5a81611d46565b50565b600054600160a060020a03163314611b7457600080fd5b80600160a060020a0316ff5b6004805460008781526007602052604080822084015481517f5d818e6b0000000000000000000000000000000000000000000000000000000081529485018a9052600160a060020a03908116602486015263ffffffff808a16604487015288166064860152861515608486015260a485018690529051921692635d818e6b9260c4808301939282900301818387803b158015611c1b57600080fd5b505af1158015611c2f573d6000803e3d6000fd5b505060058054604080517fe25a51b600000000000000000000000000000000000000000000000000000000815263ffffffff891660248201526004810182905260448101939093527f746f74616c000000000000000000000000000000000000000000000000000000606484015251600160a060020a03909116935063e25a51b69250608480830192600092919082900301818387803b158015611cd257600080fd5b505af1158015611ce6573d6000803e3d6000fd5b505050505050505050565b600082821115611cfd57fe5b508082035b92915050565b6000821515611d1957506000611d02565b50818102818382811515611d2957fe5b0414611d0257fe5b60008183811515611d3e57fe5b049392505050565b600160a060020a0381161515611d5b57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611e0457805160ff1916838001178555611e31565b82800160010185558215611e31579182015b82811115611e31578251825591602001919060010190611e16565b50611e3d929150611e41565b5090565b611e5b91905b80821115611e3d5760008155600101611e47565b905600a165627a7a72305820425d83036b103995a4b1fb5fa0bc1e5a0b2584d9eff20ea952e670fe3943f9c200290000000000000000000000000000000000000000000000000000000000000080000000000000000000000000915ee955e4f0dda590605b9efeb62f73dfe2a0b30000000000000000000000004492604eefb7a59885a5b7cbe52d82a0b5614cac0000000000000000000000005d4c653f2c09c9d0bdae2b157061b440f53f26e600000000000000000000000000000000000000000000000000000000000000053132373030000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000915ee955e4f0dda590605b9efeb62f73dfe2a0b30000000000000000000000004492604eefb7a59885a5b7cbe52d82a0b5614cac0000000000000000000000005d4c653f2c09c9d0bdae2b157061b440f53f26e600000000000000000000000000000000000000000000000000000000000000053132373030000000000000000000000000000000000000000000000000000000"
}