{
  "address": "0x863c99a51b39859e4fde2f38770749b5f6b36572",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GetRichFaster",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-27\n*/\n\npragma solidity ^0.4.25;\n\n/**\n*\nGetRichFaster - 20% each 24 hours\n*/\ncontract GetRichFaster {\n\n    using SafeMath for uint256;\n\n    mapping(address => uint256) investments;\n    mapping(address => uint256) joined;\n    mapping(address => uint256) withdrawals;\n    mapping(address => uint256) referrer;\n\n    uint256 public step = 100;\n    uint256 public minimum = 10 finney;\n    uint256 public stakingRequirement = 2 ether;\n    address public ownerWallet;\n    address public owner;\n\n    event Invest(address investor, uint256 amount);\n    event Withdraw(address investor, uint256 amount);\n    event Bounty(address hunter, uint256 amount);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Ð¡onstructor Sets the original roles of the contract\n     */\n\n    constructor() public {\n        owner = msg.sender;\n        ownerWallet = msg.sender;\n    }\n\n    /**\n     * @dev Modifiers\n     */\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     * @param newOwnerWallet The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner, address newOwnerWallet) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        ownerWallet = newOwnerWallet;\n    }\n\n    /**\n     * @dev Investments\n     */\n    function () public payable {\n        buy(0x0);\n    }\n\n    function buy(address _referredBy) public payable {\n        require(msg.value >= minimum);\n\n        address _customerAddress = msg.sender;\n\n        if(\n           // is this a referred purchase?\n           _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n           // no cheating!\n           _referredBy != _customerAddress &&\n\n           // does the referrer have at least X whole tokens?\n           // i.e is the referrer a godly chad masternode\n           investments[_referredBy] >= stakingRequirement\n       ){\n           // wealth redistribution\n           referrer[_referredBy] = referrer[_referredBy].add(msg.value.mul(5).div(100));\n       }\n\n       if (investments[msg.sender] > 0){\n           if (withdraw()){\n               withdrawals[msg.sender] = 0;\n           }\n       }\n       investments[msg.sender] = investments[msg.sender].add(msg.value);\n       joined[msg.sender] = block.timestamp;\n       ownerWallet.transfer(msg.value.mul(5).div(100));\n       emit Invest(msg.sender, msg.value);\n    }\n\n    /**\n    * @dev Evaluate current balance\n    * @param _address Address of investor\n    */\n    function getBalance(address _address) view public returns (uint256) {\n        uint256 minutesCount = now.sub(joined[_address]).div(1 minutes);\n        uint256 percent = investments[_address].mul(step).div(100);\n        uint256 different = percent.mul(minutesCount).div(7200);\n        uint256 balance = different.sub(withdrawals[_address]);\n\n        return balance;\n    }\n\n    /**\n    * @dev Withdraw dividends from contract\n    */\n    function withdraw() public returns (bool){\n        require(joined[msg.sender] > 0);\n        uint256 balance = getBalance(msg.sender);\n        if (address(this).balance > balance){\n            if (balance > 0){\n                withdrawals[msg.sender] = withdrawals[msg.sender].add(balance);\n                msg.sender.transfer(balance);\n                emit Withdraw(msg.sender, balance);\n            }\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n    * @dev Bounty reward\n    */\n    function bounty() public {\n        uint256 refBalance = checkReferral(msg.sender);\n        if(refBalance >= minimum) {\n             if (address(this).balance > refBalance) {\n                referrer[msg.sender] = 0;\n                msg.sender.transfer(refBalance);\n                emit Bounty(msg.sender, refBalance);\n             }\n        }\n    }\n\n    /**\n    * @dev Gets balance of the sender address.\n    * @return An uint256 representing the amount owned by the msg.sender.\n    */\n    function checkBalance() public view returns (uint256) {\n        return getBalance(msg.sender);\n    }\n\n    /**\n    * @dev Gets withdrawals of the specified address.\n    * @param _investor The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function checkWithdrawals(address _investor) public view returns (uint256) {\n        return withdrawals[_investor];\n    }\n\n    /**\n    * @dev Gets investments of the specified address.\n    * @param _investor The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function checkInvestments(address _investor) public view returns (uint256) {\n        return investments[_investor];\n    }\n\n    /**\n    * @dev Gets referrer balance of the specified address.\n    * @param _hunter The address of the referrer\n    * @return An uint256 representing the referral earnings.\n    */\n    function checkReferral(address _hunter) public view returns (uint256) {\n        return referrer[_hunter];\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "bytecode": "60806040526064600455662386f26fc10000600555671bc16d674ec8000060065534801561002c57600080fd5b5033600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611079806100be6000396000f3006080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630c19f80e146100dc5780633ccfd60b1461013357806352d6804d1461016257806356d399e81461018d5780636d435421146101b8578063835c11541461021b5780638da5cb5b146102725780639335dcb7146102c9578063943dfef1146103205780639d9fcc7214610337578063c71daccb1461038e578063e25fe175146103b9578063f088d547146103e4578063f8b2cb4f1461041a575b6100da6000610471565b005b3480156100e857600080fd5b5061011d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061086d565b6040518082815260200191505060405180910390f35b34801561013f57600080fd5b506101486108b6565b604051808215151515815260200191505060405180910390f35b34801561016e57600080fd5b50610177610a94565b6040518082815260200191505060405180910390f35b34801561019957600080fd5b506101a2610a9a565b6040518082815260200191505060405180910390f35b3480156101c457600080fd5b50610219600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610aa0565b005b34801561022757600080fd5b5061025c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c3a565b6040518082815260200191505060405180910390f35b34801561027e57600080fd5b50610287610c82565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102d557600080fd5b506102de610ca8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561032c57600080fd5b50610335610cce565b005b34801561034357600080fd5b50610378600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e01565b6040518082815260200191505060405180910390f35b34801561039a57600080fd5b506103a3610e4a565b6040518082815260200191505060405180910390f35b3480156103c557600080fd5b506103ce610e5a565b6040518082815260200191505060405180910390f35b610418600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610471565b005b34801561042657600080fd5b5061045b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e60565b6040518082815260200191505060405180910390f35b6000600554341015151561048457600080fd5b339050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156104f057508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b801561053c57506006546000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b156105fd576105b961056b606461055d600534610fc090919063ffffffff16565b610ffb90919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461101690919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156106985761064c6108b6565b15610697576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b6106e9346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461101690919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6107d260646107c4600534610fc090919063ffffffff16565b610ffb90919063ffffffff16565b9081150290604051600060405180830381858888f193505050501580156107fd573d6000803e3d6000fd5b507fd90d253a9de34d2fdd5a75ae49ea17fcb43af32fc8ea08cc6d2341991dd3872e3334604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151561090757600080fd5b61091033610e60565b9050803073ffffffffffffffffffffffffffffffffffffffff16311115610a8b576000811115610a825761098c81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461101690919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a15573d6000803e3d6000fd5b507f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243643382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b60019150610a90565b600091505b5090565b60055481565b60065481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610afc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610b3857600080fd5b8173ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a381600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610cd93361086d565b905060055481101515610dfe57803073ffffffffffffffffffffffffffffffffffffffff16311115610dfd576000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d90573d6000803e3d6000fd5b507f4cc4e2a1284006914465e82a99bce908c3ad5b5d4b08fbef40faf68169cee2a83382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b50565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610e5533610e60565b905090565b60045481565b6000806000806000610ecd603c610ebf600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544261103490919063ffffffff16565b610ffb90919063ffffffff16565b9350610f356064610f276004546000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fc090919063ffffffff16565b610ffb90919063ffffffff16565b9250610f5e611c20610f508686610fc090919063ffffffff16565b610ffb90919063ffffffff16565b9150610fb2600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361103490919063ffffffff16565b905080945050505050919050565b6000806000841415610fd55760009150610ff4565b8284029050828482811515610fe657fe5b04141515610ff057fe5b8091505b5092915050565b600080828481151561100957fe5b0490508091505092915050565b600080828401905083811015151561102a57fe5b8091505092915050565b600082821115151561104257fe5b8183039050929150505600a165627a7a72305820a26b0a5291dad5489a469d381077642c1c552febbe251bb7c5fbfe17fc7ef4460029"
}