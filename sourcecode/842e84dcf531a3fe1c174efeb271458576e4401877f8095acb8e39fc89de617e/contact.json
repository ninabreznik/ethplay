{
  "address": "0x820bff1885d9948a8f543bf979ae4812958722eb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PALToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-17\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title Helps contracts guard agains rentrancy attacks.\n * @author Remco Bloemen <[email protected]π.com>\n * @notice If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /**\n   * @dev We use a single lock for the whole contract.37487895\n   */\n  bool private rentrancy_lock = false;\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * @notice If you mark a function `nonReentrant`, you should also\n   * mark it `external`. Calling one nonReentrant function from\n   * another is not supported. Instead, you can implement a\n   * `private` function doing the actual work, and a `external`\n   * wrapper marked as `nonReentrant`.\n   */\n  modifier nonReentrant() {\n    require(!rentrancy_lock);\n    rentrancy_lock = true;\n    _;\n    rentrancy_lock = false;\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public{\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public{\n    require(newOwner != address(0));\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner public {\n    owner = pendingOwner;\n    pendingOwner = 0x0;\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\ncontract Operational is Claimable {\n    address public operator;\n\n    function Operational(address _operator) public {\n      operator = _operator;\n    }\n\n    modifier onlyOperator() {\n      require(msg.sender == operator);\n      _;\n    }\n\n    function transferOperator(address newOperator) public onlyOwner {\n      require(newOperator != address(0));\n      operator = newOperator;\n    }\n\n}\n\nlibrary DateTime {\n        /*\n         *  Date and Time utilities for ethereum contracts\n         *\n         */\n        struct MyDateTime {\n                uint16 year;\n                uint8 month;\n                uint8 day;\n                uint8 hour;\n                uint8 minute;\n                uint8 second;\n                uint8 weekday;\n        }\n\n        uint constant DAY_IN_SECONDS = 86400;\n        uint constant YEAR_IN_SECONDS = 31536000;\n        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n\n        uint constant HOUR_IN_SECONDS = 3600;\n        uint constant MINUTE_IN_SECONDS = 60;\n\n        uint16 constant ORIGIN_YEAR = 1970;\n\n        function isLeapYear(uint16 year) public pure returns (bool) {\n                if (year % 4 != 0) {\n                        return false;\n                }\n                if (year % 100 != 0) {\n                        return true;\n                }\n                if (year % 400 != 0) {\n                        return false;\n                }\n                return true;\n        }\n\n        function leapYearsBefore(uint year) public pure returns (uint) {\n                year -= 1;\n                return year / 4 - year / 100 + year / 400;\n        }\n\n        function getDaysInMonth(uint8 month, uint16 year) public pure returns (uint8) {\n                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                        return 31;\n                }\n                else if (month == 4 || month == 6 || month == 9 || month == 11) {\n                        return 30;\n                }\n                else if (isLeapYear(year)) {\n                        return 29;\n                }\n                else {\n                        return 28;\n                }\n        }\n\n        function parseTimestamp(uint timestamp) internal pure returns (MyDateTime dt) {\n                uint secondsAccountedFor = 0;\n                uint buf;\n                uint8 i;\n\n                // Year\n                dt.year = getYear(timestamp);\n                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n\n                // Month\n                uint secondsInMonth;\n                for (i = 1; i <= 12; i++) {\n                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n                        if (secondsInMonth + secondsAccountedFor > timestamp) {\n                                dt.month = i;\n                                break;\n                        }\n                        secondsAccountedFor += secondsInMonth;\n                }\n\n                // Day\n                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n                        if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n                                dt.day = i;\n                                break;\n                        }\n                        secondsAccountedFor += DAY_IN_SECONDS;\n                }\n\n                // Hour\n                dt.hour = 0;//getHour(timestamp);\n\n                // Minute\n                dt.minute = 0;//getMinute(timestamp);\n\n                // Second\n                dt.second = 0;//getSecond(timestamp);\n\n                // Day of week.\n                dt.weekday = 0;//getWeekday(timestamp);\n\n        }\n\n        function getYear(uint timestamp) public pure returns (uint16) {\n                uint secondsAccountedFor = 0;\n                uint16 year;\n                uint numLeapYears;\n\n                // Year\n                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n\n                while (secondsAccountedFor > timestamp) {\n                        if (isLeapYear(uint16(year - 1))) {\n                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n                        }\n                        else {\n                                secondsAccountedFor -= YEAR_IN_SECONDS;\n                        }\n                        year -= 1;\n                }\n                return year;\n        }\n\n        function getMonth(uint timestamp) public pure returns (uint8) {\n                return parseTimestamp(timestamp).month;\n        }\n\n        function getDay(uint timestamp) public pure returns (uint8) {\n                return parseTimestamp(timestamp).day;\n        }\n\n        function getHour(uint timestamp) public pure returns (uint8) {\n                return uint8((timestamp / 60 / 60) % 24);\n        }\n\n        function getMinute(uint timestamp) public pure returns (uint8) {\n                return uint8((timestamp / 60) % 60);\n        }\n\n        function getSecond(uint timestamp) public pure returns (uint8) {\n                return uint8(timestamp % 60);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day) public pure returns (uint timestamp) {\n                return toTimestamp(year, month, day, 0, 0, 0);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public pure returns (uint timestamp) {\n                uint16 i;\n\n                // Year\n                for (i = ORIGIN_YEAR; i < year; i++) {\n                        if (isLeapYear(i)) {\n                                timestamp += LEAP_YEAR_IN_SECONDS;\n                        }\n                        else {\n                                timestamp += YEAR_IN_SECONDS;\n                        }\n                }\n\n                // Month\n                uint8[12] memory monthDayCounts;\n                monthDayCounts[0] = 31;\n                if (isLeapYear(year)) {\n                        monthDayCounts[1] = 29;\n                }\n                else {\n                        monthDayCounts[1] = 28;\n                }\n                monthDayCounts[2] = 31;\n                monthDayCounts[3] = 30;\n                monthDayCounts[4] = 31;\n                monthDayCounts[5] = 30;\n                monthDayCounts[6] = 31;\n                monthDayCounts[7] = 31;\n                monthDayCounts[8] = 30;\n                monthDayCounts[9] = 31;\n                monthDayCounts[10] = 30;\n                monthDayCounts[11] = 31;\n\n                for (i = 1; i < month; i++) {\n                        timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n                }\n\n                // Day\n                timestamp += DAY_IN_SECONDS * (day - 1);\n\n                // Hour\n                timestamp += HOUR_IN_SECONDS * (hour);\n\n                // Minute\n                timestamp += MINUTE_IN_SECONDS * (minute);\n\n                // Second\n                timestamp += second;\n\n                return timestamp;\n        }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken {\n    event Burn(address indexed burner, uint256 value);\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public returns (bool) {\n        require(_value > 0);\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n        return true;\n    }\n}\n\ncontract LockableToken is Ownable, ReentrancyGuard, BurnableToken {\n\n    using DateTime for uint;\n    using SafeMath for uint256;\n\n    mapping (uint256 => uint256) public lockedBalances;\n    uint256[] public lockedKeys;\n    // For store all user's transfer records, eg: (0x000...000 => (201806 => 100) )\n    mapping (address => mapping (uint256 => uint256) ) public payRecords;\n\n    event TransferLocked(address indexed from,address indexed to,uint256 value, uint256 releaseTime);//new\n    event ReleaseLockedBalance( uint256 value, uint256 releaseTime); //new\n\n    function transferLockedToken(uint256 _value) public payable nonReentrant returns (bool) {\n\n        require(_value > 0 && _value <= balances[msg.sender]);\n\n        uint256 unlockTime = now.add(26 weeks);\n        uint theYear = unlockTime.parseTimestamp().year;\n        uint theMonth = unlockTime.parseTimestamp().month;\n        uint256 theKey = (theYear.mul(100)).add(theMonth);\n\n        address _to = owner;\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        // Stored user's transfer per month\n        var dt = now.parseTimestamp();\n        var (curYear, curMonth) = (uint256(dt.year), uint256(dt.month) );\n        uint256 yearMonth = (curYear.mul(100)).add(curMonth);\n        payRecords[msg.sender][yearMonth] = payRecords[msg.sender][yearMonth].add(_value);\n\n        if(lockedBalances[theKey] == 0) {\n            lockedBalances[theKey] = _value;\n            push_or_update_key(theKey);\n        }\n        else {\n            lockedBalances[theKey] = lockedBalances[theKey].add(_value);\n        }\n        TransferLocked(msg.sender, _to, _value, unlockTime);\n        return true;\n    }\n\n    function releaseLockedBalance() public returns (uint256 releaseAmount) {\n        return releaseLockedBalance(now);\n    }\n\n    function releaseLockedBalance(uint256 unlockTime) internal returns (uint256 releaseAmount) {\n        uint theYear = unlockTime.parseTimestamp().year;\n        uint theMonth = unlockTime.parseTimestamp().month;\n        uint256 currentTime = (theYear.mul(100)).add(theMonth);\n        for (uint i = 0; i < lockedKeys.length; i++) {\n            uint256 theTime = lockedKeys[i];\n            if(theTime == 0 || lockedBalances[theTime] == 0)\n                continue;\n\n            if(currentTime >= theTime) {\n                releaseAmount = releaseAmount.add(lockedBalances[theTime]);\n                unlockBalanceByKey(theTime,i);\n            }\n        }\n        ReleaseLockedBalance(releaseAmount,currentTime);\n        return releaseAmount;\n    }\n\n    function unlockBalanceByKey(uint256 theKey,uint keyIndex) internal {\n        uint256 _value = lockedBalances[theKey];\n        balances[owner] = balances[owner].add(_value);\n        delete lockedBalances[theKey];\n        delete lockedKeys[keyIndex];\n    }\n\n    function lockedBalance() public constant returns (uint256 value) {\n        for (uint i=0; i < lockedKeys.length; i++) {\n            value = value.add(lockedBalances[lockedKeys[i]]);\n        }\n        return value;\n    }\n\n    function push_or_update_key(uint256 key) private {\n        bool found_index = false;\n        uint256 i=0;\n        // Found a empty key.\n        if(lockedKeys.length >= 1) {\n            for(; i<lockedKeys.length; i++) {\n                if(lockedKeys[i] == 0) {\n                    found_index = true;\n                    break;\n                }\n            }\n        }\n\n        // If found a empty key(value == 0) in lockedKeys array, reused it.\n        if( found_index ) {\n            lockedKeys[i] = key;\n        } else {\n            lockedKeys.push(key);\n        }\n    }\n}\n\ncontract ReleaseableToken is Operational, LockableToken {\n    using SafeMath for uint;\n    using DateTime for uint256;\n    bool secondYearUpdate = false; // Limit ,update to second year\n    uint256 public createTime; // Contract creation time\n    uint256 standardDecimals = 100000000; // 8 decimal places\n\n    uint256 public limitSupplyPerYear = standardDecimals.mul(10000000000); // Year limit, first year\n    uint256 public dailyLimit = standardDecimals.mul(10000000000); // Day limit\n\n    uint256 public supplyLimit = standardDecimals.mul(10000000000); // PALT MAX\n    uint256 public releaseTokenTime = 0;\n\n    event ReleaseSupply(address operator, uint256 value, uint256 releaseTime);\n    event UnfreezeAmount(address receiver, uint256 amount, uint256 unfreezeTime);\n\n    function ReleaseableToken(\n                    uint256 initTotalSupply,\n                    address operator\n                ) public Operational(operator) {\n        totalSupply = standardDecimals.mul(initTotalSupply);\n        createTime = now;\n        balances[msg.sender] = totalSupply;\n    }\n\n    // Release the amount on the time\n    function releaseSupply(uint256 releaseAmount) public onlyOperator returns(uint256 _actualRelease) {\n\n        require(now >= (releaseTokenTime.add(1 days)) );\n        require(releaseAmount <= dailyLimit);\n        updateLimit();\n        require(limitSupplyPerYear > 0);\n        if (releaseAmount > limitSupplyPerYear) {\n            if (totalSupply.add(limitSupplyPerYear) > supplyLimit) {\n                releaseAmount = supplyLimit.sub(totalSupply);\n                totalSupply = supplyLimit;\n            } else {\n                totalSupply = totalSupply.add(limitSupplyPerYear);\n                releaseAmount = limitSupplyPerYear;\n            }\n            limitSupplyPerYear = 0;\n        } else {\n            if (totalSupply.add(releaseAmount) > supplyLimit) {\n                releaseAmount = supplyLimit.sub(totalSupply);\n                totalSupply = supplyLimit;\n            } else {\n                totalSupply = totalSupply.add(releaseAmount);\n            }\n            limitSupplyPerYear = limitSupplyPerYear.sub(releaseAmount);\n        }\n\n        releaseTokenTime = now;\n        balances[owner] = balances[owner].add(releaseAmount);\n        ReleaseSupply(msg.sender, releaseAmount, releaseTokenTime);\n        return releaseAmount;\n    }\n\n    // Update year limit\n    function updateLimit() internal {\n        if (createTime.add(1 years) < now && !secondYearUpdate) {\n            limitSupplyPerYear = standardDecimals.mul(10000000000);\n            secondYearUpdate = true;\n        }\n        if (createTime.add(2 * 1 years) < now) {\n            if (totalSupply < supplyLimit) {\n                limitSupplyPerYear = supplyLimit.sub(totalSupply);\n            }\n        }\n    }\n\n    // Set day limit\n    function setDailyLimit(uint256 _dailyLimit) public onlyOwner {\n        dailyLimit = _dailyLimit;\n    }\n}\n\ncontract PALToken is ReleaseableToken {\n    string public standard = '2018071701';\n    string public name = 'PALToken';\n    string public symbol = 'PALT';\n    uint8 public decimals = 8;\n\n    function PALToken(\n                     uint256 initTotalSupply,\n                     address operator\n                     ) public ReleaseableToken(initTotalSupply, operator) {}\n}",
  "bytecode": "60606040526002805460a060020a60ff02191690556009805460ff191690556305f5e100600b81905562000047906402540be4006401000000006200133b6200022d82021704565b600c55600b546200006c906402540be4006401000000006200133b6200022d82021704565b600d55600b5462000091906402540be4006401000000006200133b6200022d82021704565b600e556000600f5560408051908101604052600a81527f323031383037313730310000000000000000000000000000000000000000000060208201526010908051620000e29291602001906200025b565b5060408051908101604052600881527f50414c546f6b656e000000000000000000000000000000000000000000000000602082015260119080516200012c9291602001906200025b565b5060408051908101604052600481527f50414c540000000000000000000000000000000000000000000000000000000060208201526012908051620001769291602001906200025b565b506013805460ff1916600817905534156200019057600080fd5b60405160408062001a90833981016040528080519190602001805160008054600160a060020a03338116600160a060020a0319928316179092556002805492841692909116919091179055600b5490925083915082906200020090836401000000006200133b6200022d82021704565b600381905542600a55600160a060020a033316600090815260046020526040902055506200030092505050565b60008282028315806200024b57508284828115156200024857fe5b04145b15156200025457fe5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200029e57805160ff1916838001178555620002ce565b82800160010185558215620002ce579182015b82811115620002ce578251825591602001919060010190620002b1565b50620002dc929150620002e0565b5090565b620002fd91905b80821115620002dc5760008155600101620002e7565b90565b61178080620003106000396000f30060606040526004361061017f5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610184578063095ea7b31461020e5780630be2e9771461024457806318160ddd1461026c57806319d1997a1461027f57806323b872dd1461029257806329605e77146102ba578063313ce567146102db578063323661f614610304578063364e74eb146103175780633972323a1461032a578063401b57b51461034057806342966c681461034b5780634b184522146103615780634e71e0c81461038357806355dfc97c14610396578063570ca735146103a95780635a3b7e42146103d857806361dcd7ab146103eb57806367eeba0c146103fe57806370a08231146104115780637b80889b146104305780638da5cb5b1461044357806395d89b41146104565780639fc3587a14610469578063a9059cbb1461047f578063b20d30a9146104a1578063dd62ed3e146104b7578063e30c3978146104dc578063f2fde38b146104ef575b600080fd5b341561018f57600080fd5b61019761050e565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101d35780820151838201526020016101bb565b50505050905090810190601f1680156102005780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561021957600080fd5b610230600160a060020a03600435166024356105ac565b604051901515815260200160405180910390f35b341561024f57600080fd5b61025a600435610653565b60405190815260200160405180910390f35b341561027757600080fd5b61025a610672565b341561028a57600080fd5b61025a610678565b341561029d57600080fd5b610230600160a060020a036004358116906024351660443561067e565b34156102c557600080fd5b6102d9600160a060020a0360043516610791565b005b34156102e657600080fd5b6102ee6107f0565b60405160ff909116815260200160405180910390f35b341561030f57600080fd5b61025a6107f9565b341561032257600080fd5b61025a61080a565b341561033557600080fd5b61025a600435610810565b610230600435610822565b341561035657600080fd5b610230600435610ad2565b341561036c57600080fd5b61025a600160a060020a0360043516602435610ba0565b341561038e57600080fd5b6102d9610bbd565b34156103a157600080fd5b61025a610c0c565b34156103b457600080fd5b6103bc610c12565b604051600160a060020a03909116815260200160405180910390f35b34156103e357600080fd5b610197610c21565b34156103f657600080fd5b61025a610c8c565b341561040957600080fd5b61025a610c92565b341561041c57600080fd5b61025a600160a060020a0360043516610c98565b341561043b57600080fd5b61025a610cb7565b341561044e57600080fd5b6103bc610d13565b341561046157600080fd5b610197610d22565b341561047457600080fd5b61025a600435610d8d565b341561048a57600080fd5b610230600160a060020a0360043516602435610f7d565b34156104ac57600080fd5b6102d960043561103c565b34156104c257600080fd5b61025a600160a060020a036004358116906024351661105c565b34156104e757600080fd5b6103bc611087565b34156104fa57600080fd5b6102d9600160a060020a0360043516611096565b60118054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105a45780601f10610579576101008083540402835291602001916105a4565b820191906000526020600020905b81548152906001019060200180831161058757829003601f168201915b505050505081565b60008115806105de5750600160a060020a03338116600090815260056020908152604080832093871683529290522054155b15156105e957600080fd5b600160a060020a03338116600081815260056020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b600780548290811061066157fe5b600091825260209091200154905081565b60035481565b600e5481565b600160a060020a0380841660009081526005602090815260408083203385168452825280832054938616835260049091528120549091906106c5908463ffffffff6110e016565b600160a060020a0380861660009081526004602052604080822093909355908716815220546106fa908463ffffffff6110f616565b600160a060020a038616600090815260046020526040902055610723818463ffffffff6110f616565b600160a060020a03808716600081815260056020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b60005433600160a060020a039081169116146107ac57600080fd5b600160a060020a03811615156107c157600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60135460ff1681565b600061080442611108565b90505b90565b600f5481565b60066020526000908152604090205481565b6000806000806000806108336116df565b6002546000908190819074010000000000000000000000000000000000000000900460ff161561086257600080fd5b6002805474ff000000000000000000000000000000000000000019167401000000000000000000000000000000000000000017905560008b1180156108bf5750600160a060020a0333166000908152600460205260409020548b11155b15156108ca57600080fd5b6108dd4262eff10063ffffffff6110e016565b98506108e88961121c565b5161ffff1697506108f88961121c565b6020015160ff169650610922876109168a606463ffffffff61133b16565b9063ffffffff6110e016565b60008054600160a060020a033381168352600460205260409092205492985016955061094e908c6110f6565b600160a060020a0333166000908152600460205260409020556109704261121c565b9350835161ffff16846020015190935060ff16915061099a8261091685606463ffffffff61133b16565b600160a060020a03331660009081526008602090815260408083208484529091529020549091506109d1908c63ffffffff6110e016565b600160a060020a03331660009081526008602090815260408083208584528252808320939093558882526006905220541515610a265760008681526006602052604090208b9055610a218661135f565b610a55565b600086815260066020526040902054610a45908c63ffffffff6110e016565b6000878152600660205260409020555b84600160a060020a031633600160a060020a03167f34c966766e471b87b7ce8d0d0358378cf20008a30bbb36246a3413c8a286834e8d8c60405191825260208201526040908101905180910390a350506002805474ff00000000000000000000000000000000000000001916905550600198975050505050505050565b600080808311610ae157600080fd5b600160a060020a033316600090815260046020526040902054831115610b0657600080fd5b5033600160a060020a038116600090815260046020526040902054610b2b90846110f6565b600160a060020a038216600090815260046020526040902055600354610b57908463ffffffff6110f616565b600355600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58460405190815260200160405180910390a250600192915050565b600860209081526000928352604080842090915290825290205481565b60015433600160a060020a03908116911614610bd857600080fd5b600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600c5481565b600254600160a060020a031681565b60108054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105a45780601f10610579576101008083540402835291602001916105a4565b600a5481565b600d5481565b600160a060020a0381166000908152600460205260409020545b919050565b6000805b600754811015610d0f57610d0560066000600784815481101515610cdb57fe5b906000526020600020900154815260200190815260200160002054836110e090919063ffffffff16565b9150600101610cbb565b5090565b600054600160a060020a031681565b60128054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105a45780601f10610579576101008083540402835291602001916105a4565b60025460009033600160a060020a03908116911614610dab57600080fd5b600f54610dc1906201518063ffffffff6110e016565b421015610dcd57600080fd5b600d54821115610ddc57600080fd5b610de46113fb565b600c5460009011610df457600080fd5b600c54821115610e6657600e54600c54600354610e169163ffffffff6110e016565b1115610e3e57600354600e54610e319163ffffffff6110f616565b600e546003559150610e5c565b600c54600354610e539163ffffffff6110e016565b600355600c5491505b6000600c55610ed2565b600e54600354610e7c908463ffffffff6110e016565b1115610ea457600354600e54610e979163ffffffff6110f616565b600e546003559150610ebb565b600354610eb7908363ffffffff6110e016565b6003555b600c54610ece908363ffffffff6110f616565b600c555b42600f5560008054600160a060020a0316815260046020526040902054610eff908363ffffffff6110e016565b60008054600160a060020a03168152600460205260409081902091909155600f547f3f9e3494cddacfc8ffad423303d89b42edd68c349155fc54854d5d6dbe0a5e399133918591518084600160a060020a0316600160a060020a03168152602001838152602001828152602001935050505060405180910390a15090565b600160a060020a033316600090815260046020526040812054610fa6908363ffffffff6110f616565b600160a060020a033381166000908152600460205260408082209390935590851681522054610fdb908363ffffffff6110e016565b600160a060020a0380851660008181526004602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60005433600160a060020a0390811691161461105757600080fd5b600d55565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b600154600160a060020a031681565b60005433600160a060020a039081169116146110b157600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000828201838110156110ef57fe5b9392505050565b60008282111561110257fe5b50900390565b60008060008060008061111a8761121c565b5161ffff16945061112a8761121c565b6020015160ff1693506111488461091687606463ffffffff61133b16565b9250600091505b6007548210156111d857600780548390811061116757fe5b906000526020600020900154905080600014806111905750600081815260066020526040902054155b1561119a576111cd565b8083106111cd576000818152600660205260409020546111c190879063ffffffff6110e016565b95506111cd8183611498565b60019091019061114f565b7ff5ba171f62e65293ff8b87dd0673f98bdee68cd09f08953de0f6ccc36caf5715868460405191825260208201526040908101905180910390a15050505050919050565b6112246116df565b600080808061123286611518565b61ffff1685526112436107b26115a8565b611251865161ffff166115a8565b039250826301e285000284019350826107b286600001510361ffff16036301e133800284019350600191505b600c60ff8316116112c4576112938286516115c3565b60ff16620151800290508584820111156112b55760ff821660208601526112c4565b9283019260019091019061127d565b600191505b6112d8856020015186516115c3565b60ff168260ff16111515611315578584620151800111156113015760ff82166040860152611315565b6201518093909301926001909101906112c9565b50506000606084018190526080840181905260a0840181905260c0840152509092915050565b6000828202831580611357575082848281151561135457fe5b04145b15156110ef57fe5b6007546000908190600190106113ad575b6007548110156113ad57600780548290811061138857fe5b906000526020600020900154600014156113a557600191506113ad565b600101611370565b81156113d457826007828154811015156113c357fe5b6000918252602090912001556113f6565b60078054600181016113e6838261171b565b5060009182526020909120018390555b505050565b600a544290611414906301e1338063ffffffff6110e016565b108015611424575060095460ff16155b1561145257600b54611441906402540be40063ffffffff61133b16565b600c556009805460ff191660011790555b600a54429061146b906303c2670063ffffffff6110e016565b101561149657600e54600354101561149657600354600e546114929163ffffffff6110f616565b600c555b565b6000828152600660209081526040808320548354600160a060020a031684526004909252909120546114d0908263ffffffff6110e016565b60008054600160a060020a03168152600460209081526040808320939093558582526006905290812055600780548390811061150857fe5b6000918252602082200155505050565b6000806107b26301e1338084048101908290611533906115a8565b6115408361ffff166115a8565b039050806301e285000283019250806107b2830361ffff16036301e1338002830192505b848311156115a05761157860018303611689565b1561158b576301e2850083039250611595565b6301e13380830392505b600182039150611564565b509392505050565b60001901600061019082046064830460048404030192915050565b60008260ff16600114806115da57508260ff166003145b806115e857508260ff166005145b806115f657508260ff166007145b8061160457508260ff166008145b8061161257508260ff16600a145b8061162057508260ff16600c145b1561162d5750601f61064d565b8260ff166004148061164257508260ff166006145b8061165057508260ff166009145b8061165e57508260ff16600b145b1561166b5750601e61064d565b61167482611689565b156116815750601d61064d565b50601c61064d565b6000600461ffff83160661ffff16156116a457506000610cb2565b606461ffff83160661ffff16156116bd57506001610cb2565b61019061ffff83160661ffff16156116d757506000610cb2565b506001919050565b60e06040519081016040908152600080835260208301819052908201819052606082018190526080820181905260a0820181905260c082015290565b8154818355818115116113f6576000838152602090206113f691810190830161080791905b80821115610d0f57600081556001016117405600a165627a7a723058209ca75371bb583cfe4595c0ebdb4d4a50a5164bf805c38d7216b3ab064792bce000290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036e1d98c2fd4dcd8e32436f10839dacd6be752d",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036e1d98c2fd4dcd8e32436f10839dacd6be752d"
}