{
  "address": "0xc0d9655d69bdb764ca3f69a8771e87e133fabd94",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Serum",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-04\n*/\n\npragma solidity ^0.4.19;\n\n// Name your new coin. Make sure the constructor has the same name.\ncontract Serum {\n\n    // This will be you, the minter. It is set in the constructor.\n    address public minter;\n\n    // This mapping stores everyone's balances.\n    mapping (address => uint) public balances;\n\n    // This event will track when someone sends some tokens.\n    event Sent(address from, address to, uint amount);\n    event Mint(uint amount);\n\n    // This is the constructor. It runs only once, when the contract is created.\n    function MyCoin() public {\n        minter = msg.sender;\n    }\n\n    // Function to create some new coins for someone.\n    // As the minter, only you will have access to this.\n    function mint(address receiver, uint amount) public {\n        if (msg.sender != minter) return;\n        balances[receiver] += amount;\n        Mint(amount);\n    }\n\n    // Function to send some coins. Anyone with coins can do this.\n    function send(address receiver, uint amount) public {\n        if (balances[msg.sender] < amount) return;\n        balances[msg.sender] -= amount;\n        balances[receiver] += amount;\n        Sent(msg.sender, receiver, amount);\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b6102be8061001e6000396000f30060606040526004361061006c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166307546172811461007157806327e235e3146100a057806340c10f19146100d1578063aa1e47ae146100f5578063d0679d3414610108575b600080fd5b341561007c57600080fd5b61008461012a565b604051600160a060020a03909116815260200160405180910390f35b34156100ab57600080fd5b6100bf600160a060020a0360043516610139565b60405190815260200160405180910390f35b34156100dc57600080fd5b6100f3600160a060020a036004351660243561014b565b005b341561010057600080fd5b6100f36101be565b341561011357600080fd5b6100f3600160a060020a03600435166024356101e8565b600054600160a060020a031681565b60016020526000908152604090205481565b60005433600160a060020a03908116911614610166576101ba565b600160a060020a038216600090815260016020526040908190208054830190557f07883703ed0e86588a40d76551c92f8a4b329e3bf19765e0e6749473c1a846659082905190815260200160405180910390a15b5050565b6000805473ffffffffffffffffffffffffffffffffffffffff191633600160a060020a0316179055565b600160a060020a0333166000908152600160205260409020548190101561020e576101ba565b600160a060020a03338181166000908152600160205260408082208054869003905592851681528290208054840190557f3990db2d31862302a685e8086b5755072a6e2b5b780af1ee81ece35ee3cd3345918490849051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a150505600a165627a7a72305820cd7cead0e494deba28991edd55dcd179493cde2a8bc7eaa1777d3bdf0b6117a70029"
}