{
  "address": "0xb17e6fa558c3115aeb9500913f412faa62689d11",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PowerOfGroup",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-20\n*/\n\npragma solidity >=0.4.21 <0.6.0;\n\nlibrary SafeMath {\n\n    function mul(uint a, uint b) internal pure returns(uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function sub(uint a, uint b) internal pure  returns(uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint a, uint b) internal  pure returns(uint) {\n        uint c = a + b;\n        assert(c >= a && c >= b);\n        return c;\n    }\n}\n\n\ncontract ERC20 {\n    uint public totalSupply;\n\n    function balanceOf(address who) public view returns(uint);\n\n    function allowance(address owner, address spender) public view returns(uint);\n\n    function transfer(address to, uint value) public returns(bool ok);\n\n    function transferFrom(address from, address to, uint value) public returns(bool ok);\n\n    function approve(address spender, uint value) public returns(bool ok);\n\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address payable public owner;\n    address payable public newOwner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    constructor() public {\n        owner = msg.sender;\n        newOwner = address(0);\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param _newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address payable _newOwner) public onlyOwner {\n        require(address(0) != _newOwner);\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, msg.sender);\n        owner = msg.sender;\n        newOwner = address(0);\n    }\n\n}\n\n/**\n* ================================*\n*            power of group.社群动力!\n* ================================*\n*/\ncontract PowerOfGroup is ERC20, Ownable {\n\n    event Burn(address indexed burner, uint256 value);\n\n    using SafeMath for uint;\n    // Public variables of the token\n    string public name = \"Power Of Group\"; // the name for display purposes\n    string public symbol = \"POG\"; // the symbol for display purposes\n    uint public decimals = 18; // How many decimals to show.\n    string public version = \"1.0\"; // Version of token\n    uint public totalSupply = 1000000000 * (10**18);\n\n    mapping(address => uint) public balances;\n    mapping(address => mapping(address => uint)) public allowed;\n\n    // The Token constructor\n    constructor()\n    public\n    {\n        balances[owner] = totalSupply;\n    }\n\n    // @notice If we want to rebrand, we can.\n    function setName(string memory _name)\n    onlyOwner\n    public\n    {\n        name = _name;\n    }\n\n    // @notice If we want to rebrand, we can.\n    function setSymbol(string memory _symbol)\n    onlyOwner\n    public\n    {\n        symbol = _symbol;\n    }\n\n    // @notice transfer tokens to given address\n    // @param _to {address} address or recipient\n    // @param _value {uint} amount to transfer\n    // @return  {bool} true if successful\n    function transfer(address _to, uint _value) public returns(bool) {\n\n        require(_to != address(0));\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    // @notice transfer tokens from given address to another address\n    // @param _from {address} from whom tokens are transferred\n    // @param _to {address} to whom tokens are transferred\n    // @param _value {uint} amount of tokens to transfer\n    // @return  {bool} true if successful\n    function transferFrom(address _from, address _to, uint256 _value) public  returns(bool success) {\n\n        require(_to != address(0));\n        require(balances[_from] >= _value); // Check if the sender has enough\n        require(_value <= allowed[_from][msg.sender]); // Check if allowed is greater or equal\n        balances[_from] = balances[_from].sub(_value); // Subtract from the sender\n        balances[_to] = balances[_to].add(_value); // Add the same to the recipient\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); // adjust allowed\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    // @notice to query balance of account\n    // @return _owner {address} address of user to query balance\n    function balanceOf(address _owner) public view returns(uint balance) {\n        return balances[_owner];\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    *\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint _value) public returns(bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    // @notice to query of allowance of one user to the other\n    // @param _owner {address} of the owner of the account\n    // @param _spender {address} of the spender of the account\n    // @return remaining {uint} amount of remaining allowance\n    function allowance(address _owner, address _spender) public view returns(uint remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * approve should be called when allowed[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    */\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(burner, _value);\n    }\n\n}",
  "bytecode": ""
}