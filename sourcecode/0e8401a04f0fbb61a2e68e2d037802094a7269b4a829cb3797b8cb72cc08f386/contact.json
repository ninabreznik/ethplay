{
  "address": "0xb0e50319c5734A6aBB12feb2C235003169361c4E",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TAOPool",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\npragma solidity >=0.5.4 <0.6.0;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n\t/**\n\t * @dev Multiplies two numbers, throws on overflow.\n\t */\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tc = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Integer division of two numbers, truncating the quotient.\n\t */\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\t// uint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn a / b;\n\t}\n\n\t/**\n\t * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n\t */\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\t/**\n\t * @dev Adds two numbers, throws on overflow.\n\t */\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\tc = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\n\ninterface INameTAOPosition {\n\tfunction senderIsAdvocate(address _sender, address _id) external view returns (bool);\n\tfunction senderIsListener(address _sender, address _id) external view returns (bool);\n\tfunction senderIsSpeaker(address _sender, address _id) external view returns (bool);\n\tfunction senderIsPosition(address _sender, address _id) external view returns (bool);\n\tfunction getAdvocate(address _id) external view returns (address);\n\tfunction nameIsAdvocate(address _nameId, address _id) external view returns (bool);\n\tfunction nameIsPosition(address _nameId, address _id) external view returns (bool);\n\tfunction initialize(address _id, address _advocateId, address _listenerId, address _speakerId) external returns (bool);\n\tfunction determinePosition(address _sender, address _id) external view returns (uint256);\n}\n\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\n\n\n\n\n\n/**\n * @title TAO\n */\ncontract TAO {\n\tusing SafeMath for uint256;\n\n\taddress public vaultAddress;\n\tstring public name;\t\t\t\t// the name for this TAO\n\taddress public originId;\t\t// the ID of the Name that created this TAO. If Name, it's the eth address\n\n\t// TAO's data\n\tstring public datHash;\n\tstring public database;\n\tstring public keyValue;\n\tbytes32 public contentId;\n\n\t/**\n\t * 0 = TAO\n\t * 1 = Name\n\t */\n\tuint8 public typeId;\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _vaultAddress\n\t) public {\n\t\tname = _name;\n\t\toriginId = _originId;\n\t\tdatHash = _datHash;\n\t\tdatabase = _database;\n\t\tkeyValue = _keyValue;\n\t\tcontentId = _contentId;\n\n\t\t// Creating TAO\n\t\ttypeId = 0;\n\n\t\tvaultAddress = _vaultAddress;\n\t}\n\n\t/**\n\t * @dev Checks if calling address is Vault contract\n\t */\n\tmodifier onlyVault {\n\t\trequire (msg.sender == vaultAddress);\n\t\t_;\n\t}\n\n\t/**\n\t * Will receive any ETH sent\n\t */\n\tfunction () external payable {\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ETH from this TAO to `_recipient`\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\t_recipient.transfer(_amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ERC20 Token from this TAO to `_recipient`\n\t * @param _erc20TokenAddress The address of ERC20 Token\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferERC20(address _erc20TokenAddress, address _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\tTokenERC20 _erc20 = TokenERC20(_erc20TokenAddress);\n\t\t_erc20.transfer(_recipient, _amount);\n\t\treturn true;\n\t}\n}\n\n\ninterface INameAccountRecovery {\n\tfunction isCompromised(address _id) external view returns (bool);\n}\n\n\ninterface INameFactory {\n\tfunction nonces(address _nameId) external view returns (uint256);\n\tfunction incrementNonce(address _nameId) external returns (uint256);\n\tfunction ethAddressToNameId(address _ethAddress) external view returns (address);\n\tfunction setNameNewAddress(address _id, address _newAddress) external returns (bool);\n\tfunction nameIdToEthAddress(address _nameId) external view returns (address);\n}\n\n\ncontract TheAO {\n\taddress public theAO;\n\taddress public nameTAOPositionAddress;\n\n\t// Check whether an address is whitelisted and granted access to transact\n\t// on behalf of others\n\tmapping (address => bool) public whitelist;\n\n\tconstructor() public {\n\t\ttheAO = msg.sender;\n\t}\n\n\t/**\n\t * @dev Checks if msg.sender is in whitelist.\n\t */\n\tmodifier inWhitelist() {\n\t\trequire (whitelist[msg.sender] == true);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n}\n\n\ninterface ITAOFactory {\n\tfunction nonces(address _taoId) external view returns (uint256);\n\tfunction incrementNonce(address _taoId) external returns (uint256);\n}\n\n\ninterface ITAOPool {\n\tfunction createPool(address _taoId, bool _ethosCapStatus, uint256 _ethosCapAmount) external returns (bool);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @title Name\n */\ncontract Name is TAO {\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name, address _originId, string memory _datHash, string memory _database, string memory _keyValue, bytes32 _contentId, address _vaultAddress)\n\t\tTAO (_name, _originId, _datHash, _database, _keyValue, _contentId, _vaultAddress) public {\n\t\t// Creating Name\n\t\ttypeId = 1;\n\t}\n}\n\n\n\n\n\n\ncontract TokenERC20 {\n\t// Public variables of the token\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals = 18;\n\t// 18 decimals is the strongly suggested default, avoid changing it\n\tuint256 public totalSupply;\n\n\t// This creates an array with all balances\n\tmapping (address => uint256) public balanceOf;\n\tmapping (address => mapping (address => uint256)) public allowance;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\t// This notifies clients about the amount burnt\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * Constructor function\n\t *\n\t * Initializes contract with initial supply tokens to the creator of the contract\n\t */\n\tconstructor (uint256 initialSupply, string memory tokenName, string memory tokenSymbol) public {\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n\t\tname = tokenName;                                   // Set the name for display purposes\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\n\t}\n\n\t/**\n\t * Internal transfer, only can be called by this contract\n\t */\n\tfunction _transfer(address _from, address _to, uint _value) internal {\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(_to != address(0));\n\t\t// Check if the sender has enough\n\t\trequire(balanceOf[_from] >= _value);\n\t\t// Check for overflows\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\n\t\t// Save this for an assertion in the future\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t\t// Subtract from the sender\n\t\tbalanceOf[_from] -= _value;\n\t\t// Add the same to the recipient\n\t\tbalanceOf[_to] += _value;\n\t\temit Transfer(_from, _to, _value);\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\t}\n\n\t/**\n\t * Transfer tokens\n\t *\n\t * Send `_value` tokens to `_to` from your account\n\t *\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n\t\t_transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Transfer tokens from other address\n\t *\n\t * Send `_value` tokens to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\n\t\tallowance[_from][msg.sender] -= _value;\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t */\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\tallowance[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address and notify\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t * @param _extraData some extra information to send to the approved contract\n\t */\n\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n\t\ttokenRecipient spender = tokenRecipient(_spender);\n\t\tif (approve(_spender, _value)) {\n\t\t\tspender.receiveApproval(msg.sender, _value, address(this), _extraData);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Destroy tokens\n\t *\n\t * Remove `_value` tokens from the system irreversibly\n\t *\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burn(uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\n\t\ttotalSupply -= _value;                      // Updates totalSupply\n\t\temit Burn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Destroy tokens from other account\n\t *\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n\t\ttotalSupply -= _value;                              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n}\n\n\n/**\n * @title AOLibrary\n */\nlibrary AOLibrary {\n\tusing SafeMath for uint256;\n\n\tuint256 constant private _MULTIPLIER_DIVISOR = 10 ** 6; // 1000000 = 1\n\tuint256 constant private _PERCENTAGE_DIVISOR = 10 ** 6; // 100% = 1000000\n\n\t/**\n\t * @dev Check whether or not the given TAO ID is a TAO\n\t * @param _taoId The ID of the TAO\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isTAO(address _taoId) public view returns (bool) {\n\t\treturn (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);\n\t}\n\n\t/**\n\t * @dev Check whether or not the given Name ID is a Name\n\t * @param _nameId The ID of the Name\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isName(address _nameId) public view returns (bool) {\n\t\treturn (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);\n\t}\n\n\t/**\n\t * @dev Check if `_tokenAddress` is a valid ERC20 Token address\n\t * @param _tokenAddress The ERC20 Token address to check\n\t */\n\tfunction isValidERC20TokenAddress(address _tokenAddress) public view returns (bool) {\n\t\tif (_tokenAddress == address(0)) {\n\t\t\treturn false;\n\t\t}\n\t\tTokenERC20 _erc20 = TokenERC20(_tokenAddress);\n\t\treturn (_erc20.totalSupply() >= 0 && bytes(_erc20.name()).length > 0 && bytes(_erc20.symbol()).length > 0);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t * @param _sender The address to check\n\t * @param _theAO The AO address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t * @return true if yes, false otherwise\n\t */\n\tfunction isTheAO(address _sender, address _theAO, address _nameTAOPositionAddress) public view returns (bool) {\n\t\treturn (_sender == _theAO ||\n\t\t\t(\n\t\t\t\t(isTAO(_theAO) || isName(_theAO)) &&\n\t\t\t\t_nameTAOPositionAddress != address(0) &&\n\t\t\t\tINameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate percentage.\n\t *\t\tPercentage stored throughout AO contracts covers 4 decimals,\n\t *\t\tso 1% is 10000, 1.25% is 12500, etc\n\t */\n\tfunction PERCENTAGE_DIVISOR() public pure returns (uint256) {\n\t\treturn _PERCENTAGE_DIVISOR;\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate multiplier.\n\t *\t\tMultiplier stored throughout AO contracts covers 6 decimals,\n\t *\t\tso 1 is 1000000, 0.023 is 23000, etc\n\t */\n\tfunction MULTIPLIER_DIVISOR() public pure returns (uint256) {\n\t\treturn _MULTIPLIER_DIVISOR;\n\t}\n\n\t/**\n\t * @dev deploy a TAO\n\t * @param _name The name of the TAO\n\t * @param _originId The Name ID the creates the TAO\n\t * @param _datHash The datHash of this TAO\n\t * @param _database The database for this TAO\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this TAO\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployTAO(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (TAO _tao) {\n\t\t_tao = new TAO(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev deploy a Name\n\t * @param _name The name of the Name\n\t * @param _originId The eth address the creates the Name\n\t * @param _datHash The datHash of this Name\n\t * @param _database The database for this Name\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this Name\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployName(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (Name _myName) {\n\t\t_myName = new Name(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev Calculate the new weighted multiplier when adding `_additionalPrimordialAmount` at `_additionalWeightedMultiplier` to the current `_currentPrimordialBalance` at `_currentWeightedMultiplier`\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _currentPrimordialBalance Account's current primordial ion balance\n\t * @param _additionalWeightedMultiplier The weighted multiplier to be added\n\t * @param _additionalPrimordialAmount The primordial ion amount to be added\n\t * @return the new primordial weighted multiplier\n\t */\n\tfunction calculateWeightedMultiplier(uint256 _currentWeightedMultiplier, uint256 _currentPrimordialBalance, uint256 _additionalWeightedMultiplier, uint256 _additionalPrimordialAmount) public pure returns (uint256) {\n\t\tif (_currentWeightedMultiplier > 0) {\n\t\t\tuint256 _totalWeightedIons = (_currentWeightedMultiplier.mul(_currentPrimordialBalance)).add(_additionalWeightedMultiplier.mul(_additionalPrimordialAmount));\n\t\t\tuint256 _totalIons = _currentPrimordialBalance.add(_additionalPrimordialAmount);\n\t\t\treturn _totalWeightedIons.div(_totalIons);\n\t\t} else {\n\t\t\treturn _additionalWeightedMultiplier;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the primordial ion multiplier on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Multiplier = S\n\t *\t\tEnding Multiplier = E\n\t *\t\tTo Purchase = P\n\t *\t\tMultiplier for next Lot of Amount = (1 - ((M + P/2) / T)) x (S-E)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion mintable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting multiplier in (10 ** 6)\n\t * @param _endingMultiplier The ending multiplier in (10 ** 6)\n\t * @return The multiplier in (10 ** 6)\n\t */\n\tfunction calculatePrimordialMultiplier(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * Multiplier = (1 - (temp / T)) x (S-E)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply multiplier with _MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR to account for 6 decimals\n\t\t\t * so, Multiplier = (_MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR) * (1 - (temp / T)) * (S-E)\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR * (1 - (temp / T))) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Take out the division by _MULTIPLIER_DIVISOR for now and include in later calculation\n\t\t\t * Multiplier = (_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)\n\t\t\t */\n\t\t\tuint256 multiplier = (_MULTIPLIER_DIVISOR.sub(_MULTIPLIER_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier));\n\t\t\t/**\n\t\t\t * Since _startingMultiplier and _endingMultiplier are in 6 decimals\n\t\t\t * Need to divide multiplier by _MULTIPLIER_DIVISOR\n\t\t\t */\n\t\t\treturn multiplier.div(_MULTIPLIER_DIVISOR);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus percentage of network ion on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Network Bonus Multiplier = Bs\n\t *\t\tEnding Network Bonus Multiplier = Be\n\t *\t\tTo Purchase = P\n\t *\t\tAO Bonus % = B% = (1 - ((M + P/2) / T)) x (Bs-Be)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusPercentage(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * B% = (1 - (temp / T)) x (Bs-Be)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply B% with _PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR to account for 6 decimals\n\t\t\t * so, B% = (_PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR) * (1 - (temp / T)) * (Bs-Be)\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR * (1 - (temp / T))) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * Take out the division by _PERCENTAGE_DIVISOR for now and include in later calculation\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)\n\t\t\t * But since Bs and Be are in 6 decimals, need to divide by _PERCENTAGE_DIVISOR\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be) / _PERCENTAGE_DIVISOR\n\t\t\t */\n\t\t\tuint256 bonusPercentage = (_PERCENTAGE_DIVISOR.sub(_PERCENTAGE_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier)).div(_PERCENTAGE_DIVISOR);\n\t\t\treturn bonusPercentage;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus amount of network ion on a given lot\n\t *\t\tAO Bonus Amount = B% x P\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusAmount(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tuint256 bonusPercentage = calculateNetworkBonusPercentage(_purchaseAmount, _totalPrimordialMintable, _totalPrimordialMinted, _startingMultiplier, _endingMultiplier);\n\t\t/**\n\t\t * Since bonusPercentage is in _PERCENTAGE_DIVISOR format, need to divide it with _PERCENTAGE DIVISOR\n\t\t * when calculating the network ion bonus amount\n\t\t */\n\t\tuint256 networkBonus = bonusPercentage.mul(_purchaseAmount).div(_PERCENTAGE_DIVISOR);\n\t\treturn networkBonus;\n\t}\n\n\t/**\n\t * @dev Calculate the maximum amount of Primordial an account can burn\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_maximumMultiplier = S\n\t *\t\t_amountToBurn = B\n\t *\t\tB = ((S x P) - (P x M)) / S\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _maximumMultiplier The maximum multiplier of this account\n\t * @return The maximum burn amount\n\t */\n\tfunction calculateMaximumBurnAmount(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _maximumMultiplier) public pure returns (uint256) {\n\t\treturn (_maximumMultiplier.mul(_primordialBalance).sub(_primordialBalance.mul(_currentWeightedMultiplier))).div(_maximumMultiplier);\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after burning primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToBurn = B\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P - B)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToBurn The amount of primordial ion to burn\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterBurn(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToBurn) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.sub(_amountToBurn));\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after converting network ion to primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToConvert = C\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P + C)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToConvert The amount of network ion to convert\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterConversion(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToConvert) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.add(_amountToConvert));\n\t}\n\n\t/**\n\t * @dev count num of digits\n\t * @param number uint256 of the nuumber to be checked\n\t * @return uint8 num of digits\n\t */\n\tfunction numDigits(uint256 number) public pure returns (uint8) {\n\t\tuint8 digits = 0;\n\t\twhile(number != 0) {\n\t\t\tnumber = number.div(10);\n\t\t\tdigits++;\n\t\t}\n\t\treturn digits;\n\t}\n}\n\n\n\n\n\n/**\n * @title TAOController\n */\ncontract TAOController is TheAO {\n\taddress public nameFactoryAddress;\n\taddress public nameAccountRecoveryAddress;\n\n\tINameFactory internal _nameFactory;\n\tINameTAOPosition internal _nameTAOPosition;\n\tINameAccountRecovery internal _nameAccountRecovery;\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor(address _nameFactoryAddress) public {\n\t\tsetNameFactoryAddress(_nameFactoryAddress);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t */\n\tmodifier onlyTheAO {\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if `_taoId` is a TAO\n\t */\n\tmodifier isTAO(address _taoId) {\n\t\trequire (AOLibrary.isTAO(_taoId));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if `_nameId` is a Name\n\t */\n\tmodifier isName(address _nameId) {\n\t\trequire (AOLibrary.isName(_nameId));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if `_id` is a Name or a TAO\n\t */\n\tmodifier isNameOrTAO(address _id) {\n\t\trequire (AOLibrary.isName(_id) || AOLibrary.isTAO(_id));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check is msg.sender address is a Name\n\t */\n\t modifier senderIsName() {\n\t\trequire (_nameFactory.ethAddressToNameId(msg.sender) != address(0));\n\t\t_;\n\t }\n\n\t/**\n\t * @dev Check if msg.sender is the current advocate of TAO ID\n\t */\n\tmodifier onlyAdvocate(address _id) {\n\t\trequire (_nameTAOPosition.senderIsAdvocate(msg.sender, _id));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Only allowed if sender's Name is not compromised\n\t */\n\tmodifier senderNameNotCompromised() {\n\t\trequire (!_nameAccountRecovery.isCompromised(_nameFactory.ethAddressToNameId(msg.sender)));\n\t\t_;\n\t}\n\n\t/***** The AO ONLY METHODS *****/\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n\n\t/**\n\t * @dev The AO sets NameFactory address\n\t * @param _nameFactoryAddress The address of NameFactory\n\t */\n\tfunction setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {\n\t\trequire (_nameFactoryAddress != address(0));\n\t\tnameFactoryAddress = _nameFactoryAddress;\n\t\t_nameFactory = INameFactory(_nameFactoryAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets NameTAOPosition address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\n\t\trequire (_nameTAOPositionAddress != address(0));\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\n\t\t_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the NameAccountRecovery Address\n\t * @param _nameAccountRecoveryAddress The address of NameAccountRecovery\n\t */\n\tfunction setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {\n\t\trequire (_nameAccountRecoveryAddress != address(0));\n\t\tnameAccountRecoveryAddress = _nameAccountRecoveryAddress;\n\t\t_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);\n\t}\n}\n\n\n\n\n\n\n\n\n\n/**\n * @title TAOCurrency\n */\ncontract TAOCurrency is TheAO {\n\tusing SafeMath for uint256;\n\n\t// Public variables of the contract\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals;\n\n\t// To differentiate denomination of TAO Currency\n\tuint256 public powerOfTen;\n\n\tuint256 public totalSupply;\n\n\t// This creates an array with all balances\n\t// address is the address of nameId, not the eth public address\n\tmapping (address => uint256) public balanceOf;\n\n\t// This generates a public event on the blockchain that will notify clients\n\t// address is the address of TAO/Name Id, not eth public address\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This notifies clients about the amount burnt\n\t// address is the address of TAO/Name Id, not eth public address\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * Constructor function\n\t *\n\t * Initializes contract with initial supply TAOCurrency to the creator of the contract\n\t */\n\tconstructor (string memory _name, string memory _symbol, address _nameTAOPositionAddress) public {\n\t\tname = _name;\t\t// Set the name for display purposes\n\t\tsymbol = _symbol;\t// Set the symbol for display purposes\n\n\t\tpowerOfTen = 0;\n\t\tdecimals = 0;\n\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t */\n\tmodifier onlyTheAO {\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if `_id` is a Name or a TAO\n\t */\n\tmodifier isNameOrTAO(address _id) {\n\t\trequire (AOLibrary.isName(_id) || AOLibrary.isTAO(_id));\n\t\t_;\n\t}\n\n\t/***** The AO ONLY METHODS *****/\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n\n\t/**\n\t * @dev The AO set the NameTAOPosition Address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\n\t\trequire (_nameTAOPositionAddress != address(0));\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * @dev transfer TAOCurrency from other address\n\t *\n\t * Send `_value` TAOCurrency to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public inWhitelist isNameOrTAO(_from) isNameOrTAO(_to) returns (bool) {\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Create `mintedAmount` TAOCurrency and send it to `target`\n\t * @param target Address to receive TAOCurrency\n\t * @param mintedAmount The amount of TAOCurrency it will receive\n\t * @return true on success\n\t */\n\tfunction mint(address target, uint256 mintedAmount) public inWhitelist isNameOrTAO(target) returns (bool) {\n\t\t_mint(target, mintedAmount);\n\t\treturn true;\n\t}\n\n\t/**\n\t *\n\t * @dev Whitelisted address remove `_value` TAOCurrency from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction whitelistBurnFrom(address _from, uint256 _value) public inWhitelist isNameOrTAO(_from) returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance\n\t\ttotalSupply = totalSupply.sub(_value);              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n\n\t/***** INTERNAL METHODS *****/\n\t/**\n\t * @dev Send `_value` TAOCurrency from `_from` to `_to`\n\t * @param _from The address of sender\n\t * @param _to The address of the recipient\n\t * @param _value The amount to send\n\t */\n\tfunction _transfer(address _from, address _to, uint256 _value) internal {\n\t\trequire (_to != address(0));\t\t\t\t\t\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire (balanceOf[_from] >= _value);\t\t\t\t\t// Check if the sender has enough\n\t\trequire (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\n\t\tuint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);        // Subtract from the sender\n\t\tbalanceOf[_to] = balanceOf[_to].add(_value);            // Add the same to the recipient\n\t\temit Transfer(_from, _to, _value);\n\t\tassert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n\t}\n\n\t/**\n\t * @dev Create `mintedAmount` TAOCurrency and send it to `target`\n\t * @param target Address to receive TAOCurrency\n\t * @param mintedAmount The amount of TAOCurrency it will receive\n\t */\n\tfunction _mint(address target, uint256 mintedAmount) internal {\n\t\tbalanceOf[target] = balanceOf[target].add(mintedAmount);\n\t\ttotalSupply = totalSupply.add(mintedAmount);\n\t\temit Transfer(address(0), address(this), mintedAmount);\n\t\temit Transfer(address(this), target, mintedAmount);\n\t}\n}\n\n\n\n\n\n\n\n\ncontract Logos is TAOCurrency {\n\taddress public nameFactoryAddress;\n\taddress public nameAccountRecoveryAddress;\n\n\tINameFactory internal _nameFactory;\n\tINameTAOPosition internal _nameTAOPosition;\n\tINameAccountRecovery internal _nameAccountRecovery;\n\n\t// Mapping of a Name ID to the amount of Logos positioned by others to itself\n\t// address is the address of nameId, not the eth public address\n\tmapping (address => uint256) public positionFromOthers;\n\n\t// Mapping of Name ID to other Name ID and the amount of Logos positioned by itself\n\tmapping (address => mapping(address => uint256)) public positionOnOthers;\n\n\t// Mapping of a Name ID to the total amount of Logos positioned by itself on others\n\tmapping (address => uint256) public totalPositionOnOthers;\n\n\t// Mapping of Name ID to it's advocated TAO ID and the amount of Logos earned\n\tmapping (address => mapping(address => uint256)) public advocatedTAOLogos;\n\n\t// Mapping of a Name ID to the total amount of Logos earned from advocated TAO\n\tmapping (address => uint256) public totalAdvocatedTAOLogos;\n\n\t// Event broadcasted to public when `from` address position `value` Logos to `to`\n\tevent PositionFrom(address indexed from, address indexed to, uint256 value);\n\n\t// Event broadcasted to public when `from` address unposition `value` Logos from `to`\n\tevent UnpositionFrom(address indexed from, address indexed to, uint256 value);\n\n\t// Event broadcasted to public when `nameId` receives `amount` of Logos from advocating `taoId`\n\tevent AddAdvocatedTAOLogos(address indexed nameId, address indexed taoId, uint256 amount);\n\n\t// Event broadcasted to public when Logos from advocating `taoId` is transferred from `fromNameId` to `toNameId`\n\tevent TransferAdvocatedTAOLogos(address indexed fromNameId, address indexed toNameId, address indexed taoId, uint256 amount);\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor(string memory _name, string memory _symbol, address _nameFactoryAddress, address _nameTAOPositionAddress)\n\t\tTAOCurrency(_name, _symbol, _nameTAOPositionAddress) public {\n\t\tsetNameFactoryAddress(_nameFactoryAddress);\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev Check if `_taoId` is a TAO\n\t */\n\tmodifier isTAO(address _taoId) {\n\t\trequire (AOLibrary.isTAO(_taoId));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if `_nameId` is a Name\n\t */\n\tmodifier isName(address _nameId) {\n\t\trequire (AOLibrary.isName(_nameId));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if msg.sender is the current advocate of _id\n\t */\n\tmodifier onlyAdvocate(address _id) {\n\t\trequire (_nameTAOPosition.senderIsAdvocate(msg.sender, _id));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Only allowed if Name is not compromised\n\t */\n\tmodifier nameNotCompromised(address _id) {\n\t\trequire (!_nameAccountRecovery.isCompromised(_id));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Only allowed if sender's Name is not compromised\n\t */\n\tmodifier senderNameNotCompromised() {\n\t\trequire (!_nameAccountRecovery.isCompromised(_nameFactory.ethAddressToNameId(msg.sender)));\n\t\t_;\n\t}\n\n\t/***** THE AO ONLY METHODS *****/\n\t/**\n\t * @dev The AO sets NameFactory address\n\t * @param _nameFactoryAddress The address of NameFactory\n\t */\n\tfunction setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {\n\t\trequire (_nameFactoryAddress != address(0));\n\t\tnameFactoryAddress = _nameFactoryAddress;\n\t\t_nameFactory = INameFactory(_nameFactoryAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the NameTAOPosition Address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\n\t\trequire (_nameTAOPositionAddress != address(0));\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\n\t\t_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the NameAccountRecovery Address\n\t * @param _nameAccountRecoveryAddress The address of NameAccountRecovery\n\t */\n\tfunction setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {\n\t\trequire (_nameAccountRecoveryAddress != address(0));\n\t\tnameAccountRecoveryAddress = _nameAccountRecoveryAddress;\n\t\t_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * @dev Get the total sum of Logos for an address\n\t * @param _target The address to check\n\t * @return The total sum of Logos (own + positioned + advocated TAOs)\n\t */\n\tfunction sumBalanceOf(address _target) public isName(_target) view returns (uint256) {\n\t\treturn balanceOf[_target].add(positionFromOthers[_target]).add(totalAdvocatedTAOLogos[_target]);\n\t}\n\n\t/**\n\t * @dev Return the amount of Logos that are available to be positioned on other\n\t * @param _sender The sender address to check\n\t * @return The amount of Logos that are available to be positioned on other\n\t */\n\tfunction availableToPositionAmount(address _sender) public isName(_sender) view returns (uint256) {\n\t\treturn balanceOf[_sender].sub(totalPositionOnOthers[_sender]);\n\t}\n\n\t/**\n\t * @dev `_from` Name position `_value` Logos onto `_to` Name\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to position\n\t * @return true on success\n\t */\n\tfunction positionFrom(address _from, address _to, uint256 _value) public isName(_from) isName(_to) nameNotCompromised(_from) nameNotCompromised(_to) onlyAdvocate(_from) senderNameNotCompromised returns (bool) {\n\t\trequire (_from != _to);\t// Can't position Logos to itself\n\t\trequire (availableToPositionAmount(_from) >= _value); // should have enough balance to position\n\t\trequire (positionFromOthers[_to].add(_value) >= positionFromOthers[_to]); // check for overflows\n\n\t\tpositionOnOthers[_from][_to] = positionOnOthers[_from][_to].add(_value);\n\t\ttotalPositionOnOthers[_from] = totalPositionOnOthers[_from].add(_value);\n\t\tpositionFromOthers[_to] = positionFromOthers[_to].add(_value);\n\n\t\temit PositionFrom(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev `_from` Name unposition `_value` Logos from `_to` Name\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to unposition\n\t * @return true on success\n\t */\n\tfunction unpositionFrom(address _from, address _to, uint256 _value) public isName(_from) isName(_to) nameNotCompromised(_from) nameNotCompromised(_to) onlyAdvocate(_from) senderNameNotCompromised returns (bool) {\n\t\trequire (_from != _to);\t// Can't unposition Logos to itself\n\t\trequire (positionOnOthers[_from][_to] >= _value);\n\n\t\tpositionOnOthers[_from][_to] = positionOnOthers[_from][_to].sub(_value);\n\t\ttotalPositionOnOthers[_from] = totalPositionOnOthers[_from].sub(_value);\n\t\tpositionFromOthers[_to] = positionFromOthers[_to].sub(_value);\n\n\t\temit UnpositionFrom(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Add `_amount` logos earned from advocating a TAO `_taoId` to its Advocate\n\t * @param _taoId The ID of the advocated TAO\n\t * @param _amount the amount to reward\n\t * @return true on success\n\t */\n\tfunction addAdvocatedTAOLogos(address _taoId, uint256 _amount) public inWhitelist isTAO(_taoId) returns (bool) {\n\t\trequire (_amount > 0);\n\t\taddress _nameId = _nameTAOPosition.getAdvocate(_taoId);\n\n\t\tadvocatedTAOLogos[_nameId][_taoId] = advocatedTAOLogos[_nameId][_taoId].add(_amount);\n\t\ttotalAdvocatedTAOLogos[_nameId] = totalAdvocatedTAOLogos[_nameId].add(_amount);\n\n\t\temit AddAdvocatedTAOLogos(_nameId, _taoId, _amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Transfer logos earned from advocating a TAO `_taoId` from `_fromNameId` to the Advocate of `_taoId`\n\t * @param _fromNameId The ID of the Name that sends the Logos\n\t * @param _taoId The ID of the advocated TAO\n\t * @return true on success\n\t */\n\tfunction transferAdvocatedTAOLogos(address _fromNameId, address _taoId) public inWhitelist isName(_fromNameId) isTAO(_taoId) returns (bool) {\n\t\taddress _toNameId = _nameTAOPosition.getAdvocate(_taoId);\n\t\trequire (_fromNameId != _toNameId);\n\t\trequire (totalAdvocatedTAOLogos[_fromNameId] >= advocatedTAOLogos[_fromNameId][_taoId]);\n\n\t\tuint256 _amount = advocatedTAOLogos[_fromNameId][_taoId];\n\t\tadvocatedTAOLogos[_fromNameId][_taoId] = 0;\n\t\ttotalAdvocatedTAOLogos[_fromNameId] = totalAdvocatedTAOLogos[_fromNameId].sub(_amount);\n\t\tadvocatedTAOLogos[_toNameId][_taoId] = advocatedTAOLogos[_toNameId][_taoId].add(_amount);\n\t\ttotalAdvocatedTAOLogos[_toNameId] = totalAdvocatedTAOLogos[_toNameId].add(_amount);\n\n\t\temit TransferAdvocatedTAOLogos(_fromNameId, _toNameId, _taoId, _amount);\n\t\treturn true;\n\t}\n}\n\n\n\n/**\n * @title TAOPool\n *\n * This contract acts as the bookkeeper of TAO Currencies that are staked on TAO\n */\ncontract TAOPool is TAOController, ITAOPool {\n\tusing SafeMath for uint256;\n\n\taddress public taoFactoryAddress;\n\taddress public pathosAddress;\n\taddress public ethosAddress;\n\taddress public logosAddress;\n\n\tITAOFactory internal _taoFactory;\n\tTAOCurrency internal _pathos;\n\tTAOCurrency internal _ethos;\n\tLogos internal _logos;\n\n\tstruct Pool {\n\t\taddress taoId;\n\t\t/**\n\t\t * If true, has ethos cap. Otherwise, no ethos cap.\n\t\t */\n\t\tbool ethosCapStatus;\n\t\tuint256 ethosCapAmount;\t// Creates a cap for the amount of Ethos that can be staked into this pool\n\n\t\t/**\n\t\t * If true, Pool is live and can be staked into.\n\t\t */\n\t\tbool status;\n\t}\n\n\tstruct EthosLot {\n\t\tbytes32 ethosLotId;\t\t\t\t\t// The ID of this Lot\n\t\taddress nameId;\t\t\t\t\t\t// The ID of the Name that staked Ethos\n\t\tuint256 lotQuantity;\t\t\t\t// Amount of Ethos being staked to the Pool from this Lot\n\t\taddress taoId;\t\t\t\t\t\t// Identifier for the Pool this Lot is adding to\n\t\tuint256 poolPreStakeSnapshot;\t\t// Amount of Ethos contributed to the Pool prior to this Lot Number\n\t\tuint256 poolStakeLotSnapshot;\t\t// poolPreStakeSnapshot + lotQuantity\n\t\tuint256 lotValueInLogos;\n\t\tuint256 logosWithdrawn;\t\t\t\t// Amount of Logos withdrawn from this Lot\n\t\tuint256 timestamp;\n\t}\n\n\tuint256 public contractTotalEthosLot;\t\t// Total Ethos lot from all pools\n\tuint256 public contractTotalPathosStake;\t// Total Pathos stake from all pools (how many Pathos stakes are there in contract)\n\tuint256 public contractTotalEthos;\t\t\t// Quantity of Ethos that has been staked to all Pools\n\tuint256 public contractTotalPathos;\t\t\t// Quantity of Pathos that has been staked to all Pools\n\tuint256 public contractTotalLogosWithdrawn;\t\t// Quantity of Logos that has been withdrawn from all Pools\n\n\t// Mapping from TAO ID to Pool\n\tmapping (address => Pool) public pools;\n\n\t// Mapping from Ethos Lot ID to Ethos Lot\n\tmapping (bytes32 => EthosLot) public ethosLots;\n\n\t// Mapping from Pool's TAO ID to total Ethos Lots in the Pool\n\tmapping (address => uint256) public poolTotalEthosLot;\n\n\t// Mapping from Pool's TAO ID to quantity of Logos that has been withdrawn from the Pool\n\tmapping (address => uint256) public poolTotalLogosWithdrawn;\n\n\t// Mapping from a Name ID to its Ethos Lots\n\tmapping (address => bytes32[]) internal ownerEthosLots;\n\n\t// Mapping from a Name ID to quantity of Ethos staked from all Ethos lots\n\tmapping (address => uint256) public totalEthosStaked;\n\n\t// Mapping from a Name ID to quantity of Pathos staked from all Ethos lots\n\tmapping (address => uint256) public totalPathosStaked;\n\n\t// Mapping from a Name ID to total Logos withdrawn from all Ethos lots\n\tmapping (address => uint256) public totalLogosWithdrawn;\n\n\t// Mapping from a Name ID to quantity of Ethos staked from all Ethos lots on a Pool\n\tmapping (address => mapping (address => uint256)) public namePoolEthosStaked;\n\n\t// Mapping from a Name ID to quantity of Pathos staked on a Pool\n\tmapping (address => mapping (address => uint256)) public namePoolPathosStaked;\n\n\t// Mapping from a Name ID to quantity of Logos withdrawn from a Pool\n\tmapping (address => mapping (address => uint256)) public namePoolLogosWithdrawn;\n\n\t// Event to be broadcasted to public when Pool is created\n\tevent CreatePool(address indexed taoId, bool ethosCapStatus, uint256 ethosCapAmount, bool status);\n\n\t// Event to be broadcasted to public when Pool's status is updated\n\t// If status == true, start Pool\n\t// Otherwise, stop Pool\n\tevent UpdatePoolStatus(address indexed taoId, bool status, uint256 nonce);\n\n\t// Event to be broadcasted to public when Pool's Ethos cap is updated\n\tevent UpdatePoolEthosCap(address indexed taoId, bool ethosCapStatus, uint256 ethosCapAmount, uint256 nonce);\n\n\t/**\n\t * Event to be broadcasted to public when nameId stakes Ethos\n\t */\n\tevent StakeEthos(address indexed taoId, bytes32 indexed ethosLotId, address indexed nameId, uint256 lotQuantity, uint256 poolPreStakeSnapshot, uint256 poolStakeLotSnapshot, uint256 lotValueInLogos, uint256 timestamp);\n\n\t// Event to be broadcasted to public when nameId stakes Pathos\n\tevent StakePathos(address indexed taoId, bytes32 indexed stakeId, address indexed nameId, uint256 stakeQuantity, uint256 currentPoolTotalStakedPathos, uint256 timestamp);\n\n\t// Event to be broadcasted to public when nameId withdraws Logos from Ethos Lot\n\tevent WithdrawLogos(address indexed nameId, bytes32 indexed ethosLotId, address indexed taoId, uint256 withdrawnAmount, uint256 currentLotValueInLogos, uint256 currentLotLogosWithdrawn, uint256 timestamp);\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor(address _nameFactoryAddress, address _taoFactoryAddress, address _nameTAOPositionAddress, address _pathosAddress, address _ethosAddress, address _logosAddress)\n\t\tTAOController(_nameFactoryAddress) public {\n\t\tsetTAOFactoryAddress(_taoFactoryAddress);\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\n\t\tsetPathosAddress(_pathosAddress);\n\t\tsetEthosAddress(_ethosAddress);\n\t\tsetLogosAddress(_logosAddress);\n\t}\n\n\t/**\n\t * @dev Check if calling address is TAO Factory address\n\t */\n\tmodifier onlyTAOFactory {\n\t\trequire (msg.sender == taoFactoryAddress);\n\t\t_;\n\t}\n\n\t/***** The AO ONLY METHODS *****/\n\t/**\n\t * @dev The AO set the TAOFactory Address\n\t * @param _taoFactoryAddress The address of TAOFactory\n\t */\n\tfunction setTAOFactoryAddress(address _taoFactoryAddress) public onlyTheAO {\n\t\trequire (_taoFactoryAddress != address(0));\n\t\ttaoFactoryAddress = _taoFactoryAddress;\n\t\t_taoFactory = ITAOFactory(_taoFactoryAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the Pathos Address\n\t * @param _pathosAddress The address of Pathos\n\t */\n\tfunction setPathosAddress(address _pathosAddress) public onlyTheAO {\n\t\trequire (_pathosAddress != address(0));\n\t\tpathosAddress = _pathosAddress;\n\t\t_pathos = TAOCurrency(_pathosAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the Ethos Address\n\t * @param _ethosAddress The address of Ethos\n\t */\n\tfunction setEthosAddress(address _ethosAddress) public onlyTheAO {\n\t\trequire (_ethosAddress != address(0));\n\t\tethosAddress = _ethosAddress;\n\t\t_ethos = TAOCurrency(_ethosAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the Logos Address\n\t * @param _logosAddress The address of Logos\n\t */\n\tfunction setLogosAddress(address _logosAddress) public onlyTheAO {\n\t\trequire (_logosAddress != address(0));\n\t\tlogosAddress = _logosAddress;\n\t\t_logos = Logos(_logosAddress);\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * @dev Check whether or not Pool exist for a TAO ID\n\t * @param _id The ID to be checked\n\t * @return true if yes, false otherwise\n\t */\n\tfunction isExist(address _id) public view returns (bool) {\n\t\treturn pools[_id].taoId != address(0);\n\t}\n\n\t/**\n\t * @dev Create a pool for a TAO\n\t */\n\tfunction createPool(\n\t\taddress _taoId,\n\t\tbool _ethosCapStatus,\n\t\tuint256 _ethosCapAmount\n\t) external isTAO(_taoId) onlyTAOFactory returns (bool) {\n\t\t// Make sure ethos cap amount is provided if ethos cap is enabled\n\t\tif (_ethosCapStatus) {\n\t\t\trequire (_ethosCapAmount > 0);\n\t\t}\n\t\t// Make sure the pool is not yet created\n\t\trequire (pools[_taoId].taoId == address(0));\n\n\t\tPool storage _pool = pools[_taoId];\n\t\t_pool.taoId = _taoId;\n\t\t_pool.status = true;\n\t\t_pool.ethosCapStatus = _ethosCapStatus;\n\t\tif (_ethosCapStatus) {\n\t\t\t_pool.ethosCapAmount = _ethosCapAmount;\n\t\t}\n\n\t\temit CreatePool(_pool.taoId, _pool.ethosCapStatus, _pool.ethosCapAmount, _pool.status);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Start/Stop a Pool\n\t * @param _taoId The TAO ID of the Pool\n\t * @param _status The status to set. true = start. false = stop\n\t */\n\tfunction updatePoolStatus(address _taoId, bool _status) public isTAO(_taoId) onlyAdvocate(_taoId) senderNameNotCompromised {\n\t\trequire (pools[_taoId].taoId != address(0));\n\t\tpools[_taoId].status = _status;\n\n\t\tuint256 _nonce = _taoFactory.incrementNonce(_taoId);\n\t\trequire (_nonce > 0);\n\n\t\temit UpdatePoolStatus(_taoId, _status, _nonce);\n\t}\n\n\t/**\n\t * @dev Update Ethos cap of a Pool\n\t * @param _taoId The TAO ID of the Pool\n\t * @param _ethosCapStatus The ethos cap status to set\n\t * @param _ethosCapAmount The ethos cap amount to set\n\t */\n\tfunction updatePoolEthosCap(address _taoId, bool _ethosCapStatus, uint256 _ethosCapAmount) public isTAO(_taoId) onlyAdvocate(_taoId) senderNameNotCompromised {\n\t\trequire (pools[_taoId].taoId != address(0));\n\t\t// If there is an ethos cap\n\t\tif (_ethosCapStatus) {\n\t\t\trequire (_ethosCapAmount > 0 && _ethosCapAmount > _pathos.balanceOf(_taoId));\n\t\t}\n\n\t\tpools[_taoId].ethosCapStatus = _ethosCapStatus;\n\t\tif (_ethosCapStatus) {\n\t\t\tpools[_taoId].ethosCapAmount = _ethosCapAmount;\n\t\t}\n\n\t\tuint256 _nonce = _taoFactory.incrementNonce(_taoId);\n\t\trequire (_nonce > 0);\n\n\t\temit UpdatePoolEthosCap(_taoId, _ethosCapStatus, _ethosCapAmount, _nonce);\n\t}\n\n\t/**\n\t * @dev A Name stakes Ethos in Pool `_taoId`\n\t * @param _taoId The TAO ID of the Pool\n\t * @param _quantity The amount of Ethos to be staked\n\t */\n\tfunction stakeEthos(address _taoId, uint256 _quantity) public isTAO(_taoId) senderIsName senderNameNotCompromised {\n\t\tPool memory _pool = pools[_taoId];\n\t\taddress _nameId = _nameFactory.ethAddressToNameId(msg.sender);\n\t\trequire (_pool.status == true && _quantity > 0 && _ethos.balanceOf(_nameId) >= _quantity);\n\n\t\t// If there is an ethos cap\n\t\tif (_pool.ethosCapStatus) {\n\t\t\trequire (_ethos.balanceOf(_taoId).add(_quantity) <= _pool.ethosCapAmount);\n\t\t}\n\n\t\t// Create Ethos Lot for this transaction\n\t\tcontractTotalEthosLot++;\n\t\tpoolTotalEthosLot[_taoId]++;\n\n\t\t// Generate Ethos Lot ID\n\t\tbytes32 _ethosLotId = keccak256(abi.encodePacked(this, msg.sender, contractTotalEthosLot));\n\n\t\tEthosLot storage _ethosLot = ethosLots[_ethosLotId];\n\t\t_ethosLot.ethosLotId = _ethosLotId;\n\t\t_ethosLot.nameId = _nameId;\n\t\t_ethosLot.lotQuantity = _quantity;\n\t\t_ethosLot.taoId = _taoId;\n\t\t_ethosLot.poolPreStakeSnapshot = _ethos.balanceOf(_taoId);\n\t\t_ethosLot.poolStakeLotSnapshot = _ethos.balanceOf(_taoId).add(_quantity);\n\t\t_ethosLot.lotValueInLogos = _quantity;\n\t\t_ethosLot.timestamp = now;\n\n\t\townerEthosLots[_nameId].push(_ethosLotId);\n\n\t\t// Update contract variables\n\t\ttotalEthosStaked[_nameId] = totalEthosStaked[_nameId].add(_quantity);\n\t\tnamePoolEthosStaked[_nameId][_taoId] = namePoolEthosStaked[_nameId][_taoId].add(_quantity);\n\t\tcontractTotalEthos = contractTotalEthos.add(_quantity);\n\n\t\trequire (_ethos.transferFrom(_nameId, _taoId, _quantity));\n\n\t\temit StakeEthos(_ethosLot.taoId, _ethosLot.ethosLotId, _ethosLot.nameId, _ethosLot.lotQuantity, _ethosLot.poolPreStakeSnapshot, _ethosLot.poolStakeLotSnapshot, _ethosLot.lotValueInLogos, _ethosLot.timestamp);\n\t}\n\n\t/**\n\t * @dev Retrieve number of Ethos Lots a `_nameId` has\n\t * @param _nameId The Name ID of the Ethos Lot's owner\n\t * @return Total Ethos Lots the owner has\n\t */\n\tfunction ownerTotalEthosLot(address _nameId) public view returns (uint256) {\n\t\treturn ownerEthosLots[_nameId].length;\n\t}\n\n\t/**\n\t * @dev Get list of owner's Ethos Lot IDs from `_from` to `_to` index\n\t * @param _nameId The Name Id of the Ethos Lot's owner\n\t * @param _from The starting index, (i.e 0)\n\t * @param _to The ending index, (i.e total - 1)\n\t * @return list of owner's Ethos Lot IDs\n\t */\n\tfunction ownerEthosLotIds(address _nameId, uint256 _from, uint256 _to) public view returns (bytes32[] memory) {\n\t\trequire (_from >= 0 && _to >= _from && ownerEthosLots[_nameId].length > _to);\n\t\tbytes32[] memory _ethosLotIds = new bytes32[](_to.sub(_from).add(1));\n\t\tfor (uint256 i = _from; i <= _to; i++) {\n\t\t\t_ethosLotIds[i.sub(_from)] = ownerEthosLots[_nameId][i];\n\t\t}\n\t\treturn _ethosLotIds;\n\t}\n\n\t/**\n\t * @dev Return the amount of Pathos that can be staked on Pool\n\t * @param _taoId The TAO ID of the Pool\n\t * @return The amount of Pathos that can be staked\n\t */\n\tfunction availablePathosToStake(address _taoId) public isTAO(_taoId) view returns (uint256) {\n\t\tif (pools[_taoId].status == true) {\n\t\t\treturn _ethos.balanceOf(_taoId).sub(_pathos.balanceOf(_taoId));\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev A Name stakes Pathos in Pool `_taoId`\n\t * @param _taoId The TAO ID of the Pool\n\t * @param _quantity The amount of Pathos to stake\n\t */\n\tfunction stakePathos(address _taoId, uint256 _quantity) public isTAO(_taoId) senderIsName senderNameNotCompromised {\n\t\tPool memory _pool = pools[_taoId];\n\t\taddress _nameId = _nameFactory.ethAddressToNameId(msg.sender);\n\t\trequire (_pool.status == true && _quantity > 0 && _pathos.balanceOf(_nameId) >= _quantity && _quantity <= availablePathosToStake(_taoId));\n\n\t\t// Update contract variables\n\t\tcontractTotalPathosStake++;\n\t\ttotalPathosStaked[_nameId] = totalPathosStaked[_nameId].add(_quantity);\n\t\tnamePoolPathosStaked[_nameId][_taoId] = namePoolPathosStaked[_nameId][_taoId].add(_quantity);\n\t\tcontractTotalPathos = contractTotalPathos.add(_quantity);\n\n\t\t// Generate Pathos Stake ID\n\t\tbytes32 _stakeId = keccak256(abi.encodePacked(this, msg.sender, contractTotalPathosStake));\n\n\t\trequire (_pathos.transferFrom(_nameId, _taoId, _quantity));\n\n\t\t// Also add advocated TAO logos to Advocate of _taoId\n\t\trequire (_logos.addAdvocatedTAOLogos(_taoId, _quantity));\n\n\t\temit StakePathos(_taoId, _stakeId, _nameId, _quantity, _pathos.balanceOf(_taoId), now);\n\t}\n\n\t/**\n\t * @dev Name that staked Ethos withdraw Logos from Ethos Lot `_ethosLotId`\n\t * @param _ethosLotId The ID of the Ethos Lot\n\t */\n\tfunction withdrawLogos(bytes32 _ethosLotId) public senderIsName senderNameNotCompromised {\n\t\tEthosLot storage _ethosLot = ethosLots[_ethosLotId];\n\t\taddress _nameId = _nameFactory.ethAddressToNameId(msg.sender);\n\t\trequire (_ethosLot.nameId == _nameId && _ethosLot.lotValueInLogos > 0);\n\n\t\tuint256 logosAvailableToWithdraw = lotLogosAvailableToWithdraw(_ethosLotId);\n\n\t\trequire (logosAvailableToWithdraw > 0 && logosAvailableToWithdraw <= _ethosLot.lotValueInLogos);\n\n\t\t// Update lot variables\n\t\t_ethosLot.logosWithdrawn = _ethosLot.logosWithdrawn.add(logosAvailableToWithdraw);\n\t\t_ethosLot.lotValueInLogos = _ethosLot.lotValueInLogos.sub(logosAvailableToWithdraw);\n\n\t\t// Update contract variables\n\t\tcontractTotalLogosWithdrawn = contractTotalLogosWithdrawn.add(logosAvailableToWithdraw);\n\t\tpoolTotalLogosWithdrawn[_ethosLot.taoId] = poolTotalLogosWithdrawn[_ethosLot.taoId].add(logosAvailableToWithdraw);\n\t\ttotalLogosWithdrawn[_ethosLot.nameId] = totalLogosWithdrawn[_ethosLot.nameId].add(logosAvailableToWithdraw);\n\t\tnamePoolLogosWithdrawn[_ethosLot.nameId][_ethosLot.taoId] = namePoolLogosWithdrawn[_ethosLot.nameId][_ethosLot.taoId].add(logosAvailableToWithdraw);\n\n\t\t// Mint logos to seller\n\t\trequire (_logos.mint(_nameId, logosAvailableToWithdraw));\n\n\t\temit WithdrawLogos(_ethosLot.nameId, _ethosLot.ethosLotId, _ethosLot.taoId, logosAvailableToWithdraw, _ethosLot.lotValueInLogos, _ethosLot.logosWithdrawn, now);\n\t}\n\n\t/**\n\t * @dev Name gets Ethos Lot `_ethosLotId` available Logos to withdraw\n\t * @param _ethosLotId The ID of the Ethos Lot\n\t * @return The amount of Logos available to withdraw\n\t */\n\tfunction lotLogosAvailableToWithdraw(bytes32 _ethosLotId) public view returns (uint256) {\n\t\tEthosLot memory _ethosLot = ethosLots[_ethosLotId];\n\t\trequire (_ethosLot.nameId != address(0));\n\n\t\tuint256 logosAvailableToWithdraw = 0;\n\n\t\tif (_pathos.balanceOf(_ethosLot.taoId) > _ethosLot.poolPreStakeSnapshot && _ethosLot.lotValueInLogos > 0) {\n\t\t\tlogosAvailableToWithdraw = (_pathos.balanceOf(_ethosLot.taoId) >= _ethosLot.poolStakeLotSnapshot) ? _ethosLot.lotQuantity : _pathos.balanceOf(_ethosLot.taoId).sub(_ethosLot.poolPreStakeSnapshot);\n\t\t\tif (logosAvailableToWithdraw > 0) {\n\t\t\t\tlogosAvailableToWithdraw = logosAvailableToWithdraw.sub(_ethosLot.logosWithdrawn);\n\t\t\t}\n\t\t}\n\t\treturn logosAvailableToWithdraw;\n\t}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"isExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethosAddress\",\"type\":\"address\"}],\"name\":\"setEthosAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameAccountRecoveryAddress\",\"type\":\"address\"}],\"name\":\"setNameAccountRecoveryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taoFactoryAddress\",\"type\":\"address\"}],\"name\":\"setTAOFactoryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taoId\",\"type\":\"address\"},{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"stakePathos\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalEthosStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taoId\",\"type\":\"address\"},{\"name\":\"_ethosCapStatus\",\"type\":\"bool\"},{\"name\":\"_ethosCapAmount\",\"type\":\"uint256\"}],\"name\":\"updatePoolEthosCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethosLotId\",\"type\":\"bytes32\"}],\"name\":\"lotLogosAvailableToWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolTotalLogosWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taoId\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updatePoolStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"logosAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pathosAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLogosWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameTAOPositionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalPathosStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"name\":\"setNameTAOPositionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"namePoolPathosStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taoId\",\"type\":\"address\"},{\"name\":\"_ethosCapStatus\",\"type\":\"bool\"},{\"name\":\"_ethosCapAmount\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ethosLots\",\"outputs\":[{\"name\":\"ethosLotId\",\"type\":\"bytes32\"},{\"name\":\"nameId\",\"type\":\"address\"},{\"name\":\"lotQuantity\",\"type\":\"uint256\"},{\"name\":\"taoId\",\"type\":\"address\"},{\"name\":\"poolPreStakeSnapshot\",\"type\":\"uint256\"},{\"name\":\"poolStakeLotSnapshot\",\"type\":\"uint256\"},{\"name\":\"lotValueInLogos\",\"type\":\"uint256\"},{\"name\":\"logosWithdrawn\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nameId\",\"type\":\"address\"}],\"name\":\"ownerTotalEthosLot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pathosAddress\",\"type\":\"address\"}],\"name\":\"setPathosAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractTotalPathosStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractTotalEthos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"}],\"name\":\"setNameFactoryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolTotalEthosLot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethosAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"namePoolLogosWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractTotalLogosWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_taoId\",\"type\":\"address\"}],\"name\":\"availablePathosToStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"name\":\"taoId\",\"type\":\"address\"},{\"name\":\"ethosCapStatus\",\"type\":\"bool\"},{\"name\":\"ethosCapAmount\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameAccountRecoveryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theAO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"namePoolEthosStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameFactoryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractTotalPathos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nameId\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"ownerEthosLotIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethosLotId\",\"type\":\"bytes32\"}],\"name\":\"withdrawLogos\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractTotalEthosLot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_theAO\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taoId\",\"type\":\"address\"},{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"stakeEthos\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"taoFactoryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_logosAddress\",\"type\":\"address\"}],\"name\":\"setLogosAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"},{\"name\":\"_taoFactoryAddress\",\"type\":\"address\"},{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"},{\"name\":\"_pathosAddress\",\"type\":\"address\"},{\"name\":\"_ethosAddress\",\"type\":\"address\"},{\"name\":\"_logosAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"taoId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethosCapStatus\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"ethosCapAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"CreatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"taoId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"UpdatePoolStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"taoId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethosCapStatus\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"ethosCapAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"UpdatePoolEthosCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"taoId\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ethosLotId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"nameId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lotQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"poolPreStakeSnapshot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"poolStakeLotSnapshot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lotValueInLogos\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakeEthos\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"taoId\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"stakeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"nameId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stakeQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentPoolTotalStakedPathos\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakePathos\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"nameId\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ethosLotId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"taoId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentLotValueInLogos\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentLotLogosWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawLogos\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b5060405160c08062003d5d833981018060405260c08110156200003357600080fd5b508051602082015160408301516060840151608085015160a09095015160008054600160a060020a031916331790559394929391929091856200007f81640100000000620000f0810204565b506200009485640100000000620001f5810204565b620000a884640100000000620002fa810204565b620000bc83640100000000620003ff810204565b620000d08264010000000062000504810204565b620000e48164010000000062000609810204565b5050505050506200070e565b600054600154604080517ff66afcac000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156200017957600080fd5b505af41580156200018e573d6000803e3d6000fd5b505050506040513d6020811015620001a557600080fd5b50511515620001b357600080fd5b600160a060020a0381161515620001c957600080fd5b60038054600160a060020a03909216600160a060020a0319928316811790915560058054909216179055565b600054600154604080517ff66afcac000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156200027e57600080fd5b505af415801562000293573d6000803e3d6000fd5b505050506040513d6020811015620002aa57600080fd5b50511515620002b857600080fd5b600160a060020a0381161515620002ce57600080fd5b60088054600160a060020a03909216600160a060020a03199283168117909155600c8054909216179055565b600054600154604080517ff66afcac000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156200038357600080fd5b505af415801562000398573d6000803e3d6000fd5b505050506040513d6020811015620003af57600080fd5b50511515620003bd57600080fd5b600160a060020a0381161515620003d357600080fd5b60018054600160a060020a03909216600160a060020a0319928316811790915560068054909216179055565b600054600154604080517ff66afcac000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156200048857600080fd5b505af41580156200049d573d6000803e3d6000fd5b505050506040513d6020811015620004b457600080fd5b50511515620004c257600080fd5b600160a060020a0381161515620004d857600080fd5b60098054600160a060020a03909216600160a060020a03199283168117909155600d8054909216179055565b600054600154604080517ff66afcac000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156200058d57600080fd5b505af4158015620005a2573d6000803e3d6000fd5b505050506040513d6020811015620005b957600080fd5b50511515620005c757600080fd5b600160a060020a0381161515620005dd57600080fd5b600a8054600160a060020a03909216600160a060020a03199283168117909155600e8054909216179055565b600054600154604080517ff66afcac000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156200069257600080fd5b505af4158015620006a7573d6000803e3d6000fd5b505050506040513d6020811015620006be57600080fd5b50511515620006cc57600080fd5b600160a060020a0381161515620006e257600080fd5b600b8054600160a060020a03909216600160a060020a03199283168117909155600f8054909216179055565b61363f806200071e6000396000f3fe608060405234801561001057600080fd5b50600436106102775760003560e060020a900480637b3d601311610155578063a9b6b38e116100c7578063e3fcd9301161008b578063e3fcd93014610836578063ef3070f814610853578063f2fde38b1461085b578063f68d8f5a14610881578063ff0374b5146108ad578063ff3781c6146108b557610277565b8063a9b6b38e1461076e578063b2e6b2fc14610776578063bc406206146107a4578063c6185ae1146107ac578063ddd332d2146107b457610277565b8063917f84e211610119578063917f84e21461068c57806395c13f0a146106ba57806398334461146106c25780639b19251a146106e8578063a4063dbc1461070e578063a4e5fad21461076657610277565b80637b3d6013146106285780638bce77f3146106305780638c924361146106385780638f55e65f1461065e5780639093a7901461068457610277565b80634486ab0a116101ee5780635cfaf2ef116101b25780635cfaf2ef146104e15780635f7f0ad814610507578063698b7764146105355780636dfdf69b146105695780637565fb6a146105dc578063793c82281461060257610277565b80634486ab0a1461045757806349c82bc41461045f5780634ef033f01461048557806353d6fd591461048d5780635baf6a47146104bb57610277565b806328d313b51161024057806328d313b5146103565780632f4f6bc41461038e5780632fbb7695146103c257806332232636146103df57806334172c9e1461040557806338da7de71461043357610277565b806213eb4b1461027c5780631add5b98146102b65780631dfde2bd146102de5780632191207a1461030457806324d723171461032a575b600080fd5b6102a26004803603602081101561029257600080fd5b5035600160a060020a03166108db565b604080519115158252519081900360200190f35b6102dc600480360360208110156102cc57600080fd5b5035600160a060020a03166108fb565b005b6102dc600480360360208110156102f457600080fd5b5035600160a060020a03166109e5565b6102dc6004803603602081101561031a57600080fd5b5035600160a060020a0316610ad2565b6102dc6004803603604081101561034057600080fd5b50600160a060020a038135169060200135610bbc565b61037c6004803603602081101561036c57600080fd5b5035600160a060020a0316611289565b60408051918252519081900360200190f35b6102dc600480360360608110156103a457600080fd5b50600160a060020a038135169060208101351515906040013561129b565b61037c600480360360208110156103d857600080fd5b50356116ff565b61037c600480360360208110156103f557600080fd5b5035600160a060020a0316611990565b6102dc6004803603604081101561041b57600080fd5b50600160a060020a03813516906020013515156119a2565b61043b611d11565b60408051600160a060020a039092168252519081900360200190f35b61043b611d20565b61037c6004803603602081101561047557600080fd5b5035600160a060020a0316611d2f565b61043b611d41565b6102dc600480360360408110156104a357600080fd5b50600160a060020a0381351690602001351515611d50565b61037c600480360360208110156104d157600080fd5b5035600160a060020a0316611e39565b6102dc600480360360208110156104f757600080fd5b5035600160a060020a0316611e4b565b61037c6004803603604081101561051d57600080fd5b50600160a060020a0381358116916020013516611f35565b6102a26004803603606081101561054b57600080fd5b50600160a060020a0381351690602081013515159060400135611f52565b6105866004803603602081101561057f57600080fd5b5035612123565b60408051998a52600160a060020a0398891660208b015289810197909752949096166060880152608087019290925260a086015260c085015260e084019290925261010083019190915251908190036101200190f35b61037c600480360360208110156105f257600080fd5b5035600160a060020a031661217a565b6102dc6004803603602081101561061857600080fd5b5035600160a060020a0316612195565b61037c61227f565b61037c612285565b6102dc6004803603602081101561064e57600080fd5b5035600160a060020a031661228b565b61037c6004803603602081101561067457600080fd5b5035600160a060020a0316612375565b61043b612387565b61037c600480360360408110156106a257600080fd5b50600160a060020a0381358116916020013516612396565b61037c6123b3565b61037c600480360360208110156106d857600080fd5b5035600160a060020a03166123b9565b6102a2600480360360208110156106fe57600080fd5b5035600160a060020a0316612563565b6107346004803603602081101561072457600080fd5b5035600160a060020a0316612578565b60408051600160a060020a03909516855292151560208501528383019190915215156060830152519081900360800190f35b61043b6125b1565b61043b6125c0565b61037c6004803603604081101561078c57600080fd5b50600160a060020a03813581169160200135166125cf565b61043b6125ec565b61037c6125fb565b6107e6600480360360608110156107ca57600080fd5b50600160a060020a038135169060208101359060400135612601565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561082257818101518382015260200161080a565b505050509050019250505060405180910390f35b6102dc6004803603602081101561084c57600080fd5b5035612700565b61037c612bbb565b6102dc6004803603602081101561087157600080fd5b5035600160a060020a0316612bc1565b6102dc6004803603604081101561089757600080fd5b50600160a060020a038135169060200135612ca1565b61043b61346c565b6102dc600480360360208110156108cb57600080fd5b5035600160a060020a031661347b565b600160a060020a0390811660009081526015602052604090205416151590565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b15801561096d57600080fd5b505af4158015610981573d6000803e3d6000fd5b505050506040513d602081101561099757600080fd5b505115156109a457600080fd5b600160a060020a03811615156109b957600080fd5b600a8054600160a060020a03909216600160a060020a03199283168117909155600e8054909216179055565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015610a5757600080fd5b505af4158015610a6b573d6000803e3d6000fd5b505050506040513d6020811015610a8157600080fd5b50511515610a8e57600080fd5b600160a060020a0381161515610aa357600080fd5b60048054600160a060020a0319908116600160a060020a03938416179182905560078054929093169116179055565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015610b4457600080fd5b505af4158015610b58573d6000803e3d6000fd5b505050506040513d6020811015610b6e57600080fd5b50511515610b7b57600080fd5b600160a060020a0381161515610b9057600080fd5b60088054600160a060020a03909216600160a060020a03199283168117909155600c8054909216179055565b81731150d53299abb7de27464d01b626728f5c840229632fca5414826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015610c2157600080fd5b505af4158015610c35573d6000803e3d6000fd5b505050506040513d6020811015610c4b57600080fd5b50511515610c5857600080fd5b6005546040805160e060020a63029b7d530281523360048201529051600092600160a060020a03169163029b7d53916024808301926020929190829003018186803b158015610ca657600080fd5b505afa158015610cba573d6000803e3d6000fd5b505050506040513d6020811015610cd057600080fd5b5051600160a060020a03161415610ce657600080fd5b6007546005546040805160e060020a63029b7d530281523360048201529051600160a060020a0393841693633ebc2ab393169163029b7d53916024808301926020929190829003018186803b158015610d3e57600080fd5b505afa158015610d52573d6000803e3d6000fd5b505050506040513d6020811015610d6857600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a039092166004830152516024808301926020929190829003018186803b158015610dad57600080fd5b505afa158015610dc1573d6000803e3d6000fd5b505050506040513d6020811015610dd757600080fd5b505115610de357600080fd5b610deb61358a565b50600160a060020a03808416600090815260156020908152604080832081516080810183528154808716825260ff60a060020a909104811615158286015260018301548285015260029092015490911615156060820152600554825160e060020a63029b7d5302815233600482015292519195169263029b7d539260248082019391829003018186803b158015610e8157600080fd5b505afa158015610e95573d6000803e3d6000fd5b505050506040513d6020811015610eab57600080fd5b5051606083015190915015156001148015610ec65750600084115b8015610f4f5750600d546040805160e060020a6370a08231028152600160a060020a0384811660048301529151879392909216916370a0823191602480820192602092909190829003018186803b158015610f2057600080fd5b505afa158015610f34573d6000803e3d6000fd5b505050506040513d6020811015610f4a57600080fd5b505110155b8015610f635750610f5f856123b9565b8411155b1515610f6e57600080fd5b601180546001019055600160a060020a0381166000908152601b6020526040902054610fa0908563ffffffff61356516565b600160a060020a038083166000908152601b6020908152604080832094909455601e81528382209289168252919091522054610fe2908563ffffffff61356516565b600160a060020a038083166000908152601e60209081526040808320938a168352929052205560135461101b908563ffffffff61356516565b601355601154604080516c01000000000000000000000000308102602080840191909152339190910260348301526048808301949094528251808303909401845260688201808452845194820194909420600d547f23b872dd00000000000000000000000000000000000000000000000000000000909552600160a060020a03868116606c8501528a8116608c85015260ac84018a905293519094909316926323b872dd9260cc8082019392918290030181600087803b1580156110de57600080fd5b505af11580156110f2573d6000803e3d6000fd5b505050506040513d602081101561110857600080fd5b5051151561111557600080fd5b600f54604080517f97fe5ea3000000000000000000000000000000000000000000000000000000008152600160a060020a03898116600483015260248201899052915191909216916397fe5ea39160448083019260209291908290030181600087803b15801561118457600080fd5b505af1158015611198573d6000803e3d6000fd5b505050506040513d60208110156111ae57600080fd5b505115156111bb57600080fd5b600d546040805160e060020a6370a08231028152600160a060020a03898116600483018190529251818716948694937f8b94cee0a5e9ffbca07138e4e77976118bfa50f795533045acb35a073a8d084a938c939216916370a0823191602480820192602092909190829003018186803b15801561123757600080fd5b505afa15801561124b573d6000803e3d6000fd5b505050506040513d602081101561126157600080fd5b50516040805192835260208301919091524282820152519081900360600190a4505050505050565b601a6020526000908152604090205481565b82731150d53299abb7de27464d01b626728f5c840229632fca5414826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b15801561130057600080fd5b505af4158015611314573d6000803e3d6000fd5b505050506040513d602081101561132a57600080fd5b5051151561133757600080fd5b600654604080517f71ce52ed000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a0380881660248301529151879392909216916371ce52ed91604480820192602092909190829003018186803b1580156113a657600080fd5b505afa1580156113ba573d6000803e3d6000fd5b505050506040513d60208110156113d057600080fd5b505115156113dd57600080fd5b6007546005546040805160e060020a63029b7d530281523360048201529051600160a060020a0393841693633ebc2ab393169163029b7d53916024808301926020929190829003018186803b15801561143557600080fd5b505afa158015611449573d6000803e3d6000fd5b505050506040513d602081101561145f57600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a039092166004830152516024808301926020929190829003018186803b1580156114a457600080fd5b505afa1580156114b8573d6000803e3d6000fd5b505050506040513d60208110156114ce57600080fd5b5051156114da57600080fd5b600160a060020a0385811660009081526015602052604090205416151561150057600080fd5b831561159b576000831180156115905750600d546040805160e060020a6370a08231028152600160a060020a038881166004830152915191909216916370a08231916024808301926020929190829003018186803b15801561156157600080fd5b505afa158015611575573d6000803e3d6000fd5b505050506040513d602081101561158b57600080fd5b505183115b151561159b57600080fd5b600160a060020a038516600090815260156020526040902080548515801560a060020a0274ff0000000000000000000000000000000000000000199092169190911790915561160357600160a060020a03851660009081526015602052604090206001018390555b600c54604080517ff5743c4c000000000000000000000000000000000000000000000000000000008152600160a060020a0388811660048301529151600093929092169163f5743c4c9160248082019260209290919082900301818787803b15801561166e57600080fd5b505af1158015611682573d6000803e3d6000fd5b505050506040513d602081101561169857600080fd5b50519050600081116116a957600080fd5b604080518615158152602081018690528082018390529051600160a060020a038816917f710a196358986b34ff7b89eb2ca10d88508cb3f52d8392a2f595722804cc1325919081900360600190a2505050505050565b60006117096135b1565b50600082815260166020908152604091829020825161012081018452815481526001820154600160a060020a039081169382018490526002830154948201949094526003820154909316606084015260048101546080840152600581015460a0840152600681015460c0840152600781015460e084015260080154610100830152151561179557600080fd5b6080810151600d5460608301516040805160e060020a6370a08231028152600160a060020a03928316600482015290516000949392909216916370a0823191602480820192602092909190829003018186803b1580156117f457600080fd5b505afa158015611808573d6000803e3d6000fd5b505050506040513d602081101561181e57600080fd5b5051118015611831575060008260c00151115b156119895760a0820151600d5460608401516040805160e060020a6370a08231028152600160a060020a039283166004820152905191909216916370a08231916024808301926020929190829003018186803b15801561189057600080fd5b505afa1580156118a4573d6000803e3d6000fd5b505050506040513d60208110156118ba57600080fd5b5051101561195f576080820151600d5460608401516040805160e060020a6370a08231028152600160a060020a039283166004820152905161195a949392909216916370a0823191602480820192602092909190829003018186803b15801561192257600080fd5b505afa158015611936573d6000803e3d6000fd5b505050506040513d602081101561194c57600080fd5b50519063ffffffff61357816565b611965565b81604001515b905060008111156119895760e082015161198690829063ffffffff61357816565b90505b9392505050565b60186020526000908152604090205481565b81731150d53299abb7de27464d01b626728f5c840229632fca5414826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015611a0757600080fd5b505af4158015611a1b573d6000803e3d6000fd5b505050506040513d6020811015611a3157600080fd5b50511515611a3e57600080fd5b600654604080517f71ce52ed000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a0380871660248301529151869392909216916371ce52ed91604480820192602092909190829003018186803b158015611aad57600080fd5b505afa158015611ac1573d6000803e3d6000fd5b505050506040513d6020811015611ad757600080fd5b50511515611ae457600080fd5b6007546005546040805160e060020a63029b7d530281523360048201529051600160a060020a0393841693633ebc2ab393169163029b7d53916024808301926020929190829003018186803b158015611b3c57600080fd5b505afa158015611b50573d6000803e3d6000fd5b505050506040513d6020811015611b6657600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a039092166004830152516024808301926020929190829003018186803b158015611bab57600080fd5b505afa158015611bbf573d6000803e3d6000fd5b505050506040513d6020811015611bd557600080fd5b505115611be157600080fd5b600160a060020a03848116600090815260156020526040902054161515611c0757600080fd5b600160a060020a038481166000818152601560209081526040808320600201805460ff1916891515179055600c5481517ff5743c4c000000000000000000000000000000000000000000000000000000008152600481019590955290519294169263f5743c4c926024808301939282900301818787803b158015611c8a57600080fd5b505af1158015611c9e573d6000803e3d6000fd5b505050506040513d6020811015611cb457600080fd5b5051905060008111611cc557600080fd5b604080518515158152602081018390528151600160a060020a038816927ff5f6f496ff95818da72c68de653328ef258d57133b8c64064a809a21df3b2d15928290030190a25050505050565b600b54600160a060020a031681565b600954600160a060020a031681565b601c6020526000908152604090205481565b600154600160a060020a031681565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015611dc257600080fd5b505af4158015611dd6573d6000803e3d6000fd5b505050506040513d6020811015611dec57600080fd5b50511515611df957600080fd5b600160a060020a0382161515611e0e57600080fd5b600160a060020a03919091166000908152600260205260409020805460ff1916911515919091179055565b601b6020526000908152604090205481565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015611ebd57600080fd5b505af4158015611ed1573d6000803e3d6000fd5b505050506040513d6020811015611ee757600080fd5b50511515611ef457600080fd5b600160a060020a0381161515611f0957600080fd5b60018054600160a060020a03909216600160a060020a0319928316811790915560068054909216179055565b601e60209081526000928352604080842090915290825290205481565b600083731150d53299abb7de27464d01b626728f5c840229632fca5414826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015611fb957600080fd5b505af4158015611fcd573d6000803e3d6000fd5b505050506040513d6020811015611fe357600080fd5b50511515611ff057600080fd5b600854600160a060020a0316331461200757600080fd5b831561201a576000831161201a57600080fd5b600160a060020a03858116600090815260156020526040902054161561203f57600080fd5b600160a060020a03851660008181526015602052604090208054600282018054600160ff19909116179055600160a060020a03191690911774ff0000000000000000000000000000000000000000191660a060020a86158015919091029190911782556120ae57600181018490555b8054600182015460028301546040805160ff60a060020a86048116151582526020820194909452919092161515818301529051600160a060020a03909216917f2d333584a4195376719b161f274a701d7dbe5698253665deb3edc1c1e4b8c6bd9181900360600190a250600195945050505050565b6016602052600090815260409020805460018201546002830154600384015460048501546005860154600687015460078801546008909801549697600160a060020a03968716979596909416949293919290919089565b600160a060020a031660009081526019602052604090205490565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b15801561220757600080fd5b505af415801561221b573d6000803e3d6000fd5b505050506040513d602081101561223157600080fd5b5051151561223e57600080fd5b600160a060020a038116151561225357600080fd5b60098054600160a060020a03909216600160a060020a03199283168117909155600d8054909216179055565b60115481565b60125481565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156122fd57600080fd5b505af4158015612311573d6000803e3d6000fd5b505050506040513d602081101561232757600080fd5b5051151561233457600080fd5b600160a060020a038116151561234957600080fd5b60038054600160a060020a03909216600160a060020a0319928316811790915560058054909216179055565b60176020526000908152604090205481565b600a54600160a060020a031681565b601f60209081526000928352604080842090915290825290205481565b60145481565b600081731150d53299abb7de27464d01b626728f5c840229632fca5414826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b15801561242057600080fd5b505af4158015612434573d6000803e3d6000fd5b505050506040513d602081101561244a57600080fd5b5051151561245757600080fd5b600160a060020a03831660009081526015602052604090206002015460ff1615156001141561255857600d546040805160e060020a6370a08231028152600160a060020a03868116600483015291516125519392909216916370a0823191602480820192602092909190829003018186803b1580156124d557600080fd5b505afa1580156124e9573d6000803e3d6000fd5b505050506040513d60208110156124ff57600080fd5b5051600e546040805160e060020a6370a08231028152600160a060020a038881166004830152915191909216916370a08231916024808301926020929190829003018186803b15801561192257600080fd5b915061255d565b600091505b50919050565b60026020526000908152604090205460ff1681565b601560205260009081526040902080546001820154600290920154600160a060020a0382169260ff60a060020a90930483169290911684565b600454600160a060020a031681565b600054600160a060020a031681565b601d60209081526000928352604080842090915290825290205481565b600354600160a060020a031681565b60135481565b6060600083101580156126145750828210155b80156126375750600160a060020a03841660009081526019602052604090205482105b151561264257600080fd5b60606126656001612659858763ffffffff61357816565b9063ffffffff61356516565b60405190808252806020026020018201604052801561268e578160200160208202803883390190505b509050835b8381116126f757600160a060020a03861660009081526019602052604090208054829081106126be57fe5b600091825260209091200154826126db838863ffffffff61357816565b815181106126e557fe5b60209081029091010152600101612693565b50949350505050565b6005546040805160e060020a63029b7d530281523360048201529051600092600160a060020a03169163029b7d53916024808301926020929190829003018186803b15801561274e57600080fd5b505afa158015612762573d6000803e3d6000fd5b505050506040513d602081101561277857600080fd5b5051600160a060020a0316141561278e57600080fd5b6007546005546040805160e060020a63029b7d530281523360048201529051600160a060020a0393841693633ebc2ab393169163029b7d53916024808301926020929190829003018186803b1580156127e657600080fd5b505afa1580156127fa573d6000803e3d6000fd5b505050506040513d602081101561281057600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a039092166004830152516024808301926020929190829003018186803b15801561285557600080fd5b505afa158015612869573d6000803e3d6000fd5b505050506040513d602081101561287f57600080fd5b50511561288b57600080fd5b6000818152601660209081526040808320600554825160e060020a63029b7d530281523360048201529251919493600160a060020a039091169263029b7d539260248083019392829003018186803b1580156128e657600080fd5b505afa1580156128fa573d6000803e3d6000fd5b505050506040513d602081101561291057600080fd5b50516001830154909150600160a060020a038083169116148015612938575060008260060154115b151561294357600080fd5b600061294e846116ff565b9050600081118015612964575082600601548111155b151561296f57600080fd5b6007830154612984908263ffffffff61356516565b6007840155600683015461299e908263ffffffff61357816565b60068401556014546129b6908263ffffffff61356516565b6014556003830154600160a060020a03166000908152601860205260409020546129e6908263ffffffff61356516565b6003840154600160a060020a0390811660009081526018602090815260408083209490945560018701549092168152601c9091522054612a2c908263ffffffff61356516565b600184018054600160a060020a039081166000908152601c6020908152604080832095909555925482168152601f83528381206003880154909216815291522054612a7d908263ffffffff61356516565b6001840154600160a060020a039081166000908152601f60209081526040808320600389015485168452825280832094909455600f5484517f40c10f1900000000000000000000000000000000000000000000000000000000815287851660048201526024810187905294519316936340c10f199360448083019491928390030190829087803b158015612b1057600080fd5b505af1158015612b24573d6000803e3d6000fd5b505050506040513d6020811015612b3a57600080fd5b50511515612b4757600080fd5b600383015483546001850154600686015460078701546040805187815260208101939093528281019190915242606083015251600160a060020a039485169492909216917f04948b7acb9fd946cfe937519700b8b415b7e2b1b2ed0c45464add19548c05cc9181900360800190a450505050565b60105481565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015612c3357600080fd5b505af4158015612c47573d6000803e3d6000fd5b505050506040513d6020811015612c5d57600080fd5b50511515612c6a57600080fd5b600160a060020a0381161515612c7f57600080fd5b60008054600160a060020a031916600160a060020a0392909216919091179055565b81731150d53299abb7de27464d01b626728f5c840229632fca5414826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015612d0657600080fd5b505af4158015612d1a573d6000803e3d6000fd5b505050506040513d6020811015612d3057600080fd5b50511515612d3d57600080fd5b6005546040805160e060020a63029b7d530281523360048201529051600092600160a060020a03169163029b7d53916024808301926020929190829003018186803b158015612d8b57600080fd5b505afa158015612d9f573d6000803e3d6000fd5b505050506040513d6020811015612db557600080fd5b5051600160a060020a03161415612dcb57600080fd5b6007546005546040805160e060020a63029b7d530281523360048201529051600160a060020a0393841693633ebc2ab393169163029b7d53916024808301926020929190829003018186803b158015612e2357600080fd5b505afa158015612e37573d6000803e3d6000fd5b505050506040513d6020811015612e4d57600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a039092166004830152516024808301926020929190829003018186803b158015612e9257600080fd5b505afa158015612ea6573d6000803e3d6000fd5b505050506040513d6020811015612ebc57600080fd5b505115612ec857600080fd5b612ed061358a565b50600160a060020a03808416600090815260156020908152604080832081516080810183528154808716825260ff60a060020a909104811615158286015260018301548285015260029092015490911615156060820152600554825160e060020a63029b7d5302815233600482015292519195169263029b7d539260248082019391829003018186803b158015612f6657600080fd5b505afa158015612f7a573d6000803e3d6000fd5b505050506040513d6020811015612f9057600080fd5b5051606083015190915015156001148015612fab5750600084115b80156130345750600e546040805160e060020a6370a08231028152600160a060020a0384811660048301529151879392909216916370a0823191602480820192602092909190829003018186803b15801561300557600080fd5b505afa158015613019573d6000803e3d6000fd5b505050506040513d602081101561302f57600080fd5b505110155b151561303f57600080fd5b8160200151156130e857604080830151600e54825160e060020a6370a08231028152600160a060020a038981166004830152935192936130dd93899391909116916370a08231916024808301926020929190829003018186803b1580156130a557600080fd5b505afa1580156130b9573d6000803e3d6000fd5b505050506040513d60208110156130cf57600080fd5b50519063ffffffff61356516565b11156130e857600080fd5b6010805460019081018255600160a060020a038088166000818152601760209081526040808320805487019055955486516c0100000000000000000000000030810282850152330260348201526048808201929092528751808203909201825260688101808952825192840192909220808552601684529388902084815596870180548a8816600160a060020a031991821617909155600288018d905560038801805490911686179055600e5460e060020a6370a0823102909252606c81019490945295519195909316926370a0823192608c8082019391829003018186803b1580156131d457600080fd5b505afa1580156131e8573d6000803e3d6000fd5b505050506040513d60208110156131fe57600080fd5b5051600480830191909155600e546040805160e060020a6370a08231028152600160a060020a038b811694820194909452905161325e938a9316916370a08231916024808301926020929190829003018186803b1580156130a557600080fd5b600582015560068101869055426008820155600160a060020a0383166000818152601960209081526040808320805460018101825590845282842001869055928252601a905220546132b6908763ffffffff61356516565b600160a060020a038085166000908152601a6020908152604080832094909455601d8152838220928b1682529190915220546132f8908763ffffffff61356516565b600160a060020a038085166000908152601d60209081526040808320938c1683529290522055601254613331908763ffffffff61356516565b601255600e54604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301528a81166024830152604482018a9052915191909216916323b872dd9160648083019260209291908290030181600087803b1580156133ab57600080fd5b505af11580156133bf573d6000803e3d6000fd5b505050506040513d60208110156133d557600080fd5b505115156133e257600080fd5b60018101548154600383015460028401546004850154600586015460068701546008880154604080519586526020860194909452848401929092526060840152608083015251600160a060020a039485169492909216917f649ebc3a713a736fd86489f7362fff3bb4099403c0f6de86bd7d409aeb9808389181900360a00190a450505050505050565b600854600160a060020a031681565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156134ed57600080fd5b505af4158015613501573d6000803e3d6000fd5b505050506040513d602081101561351757600080fd5b5051151561352457600080fd5b600160a060020a038116151561353957600080fd5b600b8054600160a060020a03909216600160a060020a03199283168117909155600f8054909216179055565b8181018281101561357257fe5b92915050565b60008282111561358457fe5b50900390565b60408051608081018252600080825260208201819052918101829052606081019190915290565b61012060405190810160405280600080191681526020016000600160a060020a03168152602001600081526020016000600160a060020a031681526020016000815260200160008152602001600081526020016000815260200160008152509056fea165627a7a72305820cfa687e0b28474051e57443385b3326dddc54820c45eca7fd1b1d965f2643f00002900000000000000000000000010fbf61e4cce57d72eed8b5d9728134ce374bd8200000000000000000000000002a9bb92365b72fb735364af2af55ebfa9eb02c20000000000000000000000001f7f65b220a0f2d48b28390380f57468e7a382fe000000000000000000000000b1b8ea7d3f55436c3cd5afcd89e56cce85a0b8b30000000000000000000000003ecc8d4ab143fb5d87024dc886762aea0254aebd0000000000000000000000005dd10a41c67a9192b98374419219a18e8e827a30",
  "constructorArguments": "00000000000000000000000010fbf61e4cce57d72eed8b5d9728134ce374bd8200000000000000000000000002a9bb92365b72fb735364af2af55ebfa9eb02c20000000000000000000000001f7f65b220a0f2d48b28390380f57468e7a382fe000000000000000000000000b1b8ea7d3f55436c3cd5afcd89e56cce85a0b8b30000000000000000000000003ecc8d4ab143fb5d87024dc886762aea0254aebd0000000000000000000000005dd10a41c67a9192b98374419219a18e8e827a30",
  "libraries": [
    {
      "name": "AOLibrary",
      "address": "0x1150d53299Abb7DE27464D01B626728f5c840229"
    }
  ]
}