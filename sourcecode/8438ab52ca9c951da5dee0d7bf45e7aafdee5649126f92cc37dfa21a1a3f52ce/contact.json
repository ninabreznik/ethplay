{
  "address": "0x9b15b0455a175c70a0997f763459da4aa2df9dde",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ROSCtoken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-21\n*/\n\npragma solidity ^0.4.16;\n/* 创建一个父类， 账户管理员 */\ncontract owned {\n\n    address public owner;\n\n    function owned() public {\n    owner = msg.sender;\n    }\n\n    /* modifier是修改标志 */\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /* 修改管理员账户， onlyOwner代表只能是用户管理员来修改 */\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }   \n}\n\n/* receiveApproval服务合约指示代币合约将代币从发送者的账户转移到服务合约的账户（通过调用服务合约的 */\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract TokenERC20 {\n    // 代币（token）的公共变量\n    string public name;             //代币名字\n    string public symbol;           //代币符号\n    uint8 public decimals = 18;     //代币小数点位数， 18是默认， 尽量不要更改\n\n    uint256 public totalSupply;     //代币总量\n\n    // 记录各个账户的代币数目\n    mapping (address => uint256) public balanceOf;\n\n    // A账户存在B账户资金\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // 转账通知事件\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // 销毁金额通知事件\n    event Burn(address indexed from, uint256 value);\n\n    /* 构造函数 */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // 根据decimals计算代币的数量\n        balanceOf[msg.sender] = totalSupply;                    // 给生成者所有的代币数量\n        name = tokenName;                                       // 设置代币的名字\n        symbol = tokenSymbol;                                   // 设置代币的符号\n    }\n\n    /* 私有的交易函数 */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // 防止转移到0x0， 用burn代替这个功能\n        require(_to != 0x0);\n        // 检测发送者是否有足够的资金\n        require(balanceOf[_from] >= _value);\n        // 检查是否溢出（数据类型的溢出）\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // 将此保存为将来的断言， 函数最后会有一个检验\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // 减少发送者资产\n        balanceOf[_from] -= _value;\n        // 增加接收者的资产\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n        // 断言检测， 不应该为错\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /* 传递tokens */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /* 从其他账户转移资产 */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /*  授权第三方从发送者账户转移代币，然后通过transferFrom()函数来执行第三方的转移操作 */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /*\n    为其他地址设置津贴， 并通知\n    发送者通知代币合约, 代币合约通知服务合约receiveApproval, 服务合约指示代币合约将代币从发送者的账户转移到服务合约的账户（通过调用服务合约的transferFrom)\n    */\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n    * 销毁代币\n    */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n    * 从其他账户销毁代币\n    */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        Burn(_from, _value);\n        return true;\n    }\n}\n\n/******************************************/\n/*       ADVANCED TOKEN STARTS HERE       */\n/******************************************/\n\ncontract ROSCtoken is owned, TokenERC20 {\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    /* 冻结账户 */\n    mapping (address => bool) public frozenAccount;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    /* 构造函数 */\n    function ROSCtoken(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n\n    /* 转账， 比父类加入了账户冻结 */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                           // Add the same to the recipient\n        Transfer(_from, _to, _value);\n    }\n\n/// 向指定账户增发资金\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balanceOf[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        Transfer(0, this, mintedAmount);\n        Transfer(this, target, mintedAmount);\n\n    }\n\n\n    /// 冻结 or 解冻账户\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    /// @notice Buy tokens from contract by sending ether\n    function buy() payable public {\n        uint amount = msg.value / buyPrice;               // calculates the amount\n        _transfer(this, msg.sender, amount);              // makes the transfers\n    }\n\n    function sell(uint256 amount) public {\n        require(this.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\n        _transfer(msg.sender, this, amount);              // makes the transfers\n        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n    }\n}",
  "bytecode": "60806040526003805460ff1916601217905534801561001d57600080fd5b50604051610db8380380610db883398101604090815281516020808401518385015160008054600160a060020a03191633908117825560035460ff16600a0a86026004819055908252600585529590209490945584018051929490930191849184918491610090916001918501906100b0565b5080516100a49060029060208401906100b0565b5050505050505061014b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100f157805160ff191683800117855561011e565b8280016001018555821561011e579182015b8281111561011e578251825591602001919060010190610103565b5061012a92915061012e565b5090565b61014891905b8082111561012a5760008155600101610134565b90565b610c5e8061015a6000396000f3006080604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305fefda7811461012c57806306fdde0314610149578063095ea7b3146101d357806318160ddd1461020b57806323b872dd14610232578063313ce5671461025c57806342966c68146102875780634b7503341461029f57806370a08231146102b457806379c65068146102d557806379cc6790146102f95780638620410b1461031d5780638da5cb5b1461033257806395d89b4114610363578063a6f2ae3a14610378578063a9059cbb14610380578063b414d4b6146103a4578063cae9ca51146103c5578063dd62ed3e1461042e578063e4849b3214610455578063e724529c1461046d578063f2fde38b14610493575b600080fd5b34801561013857600080fd5b506101476004356024356104b4565b005b34801561015557600080fd5b5061015e6104d6565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610198578181015183820152602001610180565b50505050905090810190601f1680156101c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101df57600080fd5b506101f7600160a060020a0360043516602435610563565b604080519115158252519081900360200190f35b34801561021757600080fd5b50610220610590565b60408051918252519081900360200190f35b34801561023e57600080fd5b506101f7600160a060020a0360043581169060243516604435610596565b34801561026857600080fd5b50610271610605565b6040805160ff9092168252519081900360200190f35b34801561029357600080fd5b506101f760043561060e565b3480156102ab57600080fd5b50610220610686565b3480156102c057600080fd5b50610220600160a060020a036004351661068c565b3480156102e157600080fd5b50610147600160a060020a036004351660243561069e565b34801561030557600080fd5b506101f7600160a060020a0360043516602435610754565b34801561032957600080fd5b50610220610825565b34801561033e57600080fd5b5061034761082b565b60408051600160a060020a039092168252519081900360200190f35b34801561036f57600080fd5b5061015e61083a565b610147610892565b34801561038c57600080fd5b50610147600160a060020a03600435166024356108b2565b3480156103b057600080fd5b506101f7600160a060020a03600435166108c1565b3480156103d157600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101f7948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506108d69650505050505050565b34801561043a57600080fd5b50610220600160a060020a03600435811690602435166109ef565b34801561046157600080fd5b50610147600435610a0c565b34801561047957600080fd5b50610147600160a060020a03600435166024351515610a59565b34801561049f57600080fd5b50610147600160a060020a0360043516610ad4565b600054600160a060020a031633146104cb57600080fd5b600791909155600855565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561055b5780601f106105305761010080835404028352916020019161055b565b820191906000526020600020905b81548152906001019060200180831161053e57829003601f168201915b505050505081565b336000908152600660209081526040808320600160a060020a039590951683529390529190912055600190565b60045481565b600160a060020a03831660009081526006602090815260408083203384529091528120548211156105c657600080fd5b600160a060020a03841660009081526006602090815260408083203384529091529020805483900390556105fb848484610b1a565b5060019392505050565b60035460ff1681565b3360009081526005602052604081205482111561062a57600080fd5b3360008181526005602090815260409182902080548690039055600480548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b60075481565b60056020526000908152604090205481565b600054600160a060020a031633146106b557600080fd5b600160a060020a03821660009081526005602090815260408083208054850190556004805485019055805184815290513093927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a3604080518281529051600160a060020a0384169130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600160a060020a03821660009081526005602052604081205482111561077957600080fd5b600160a060020a03831660009081526006602090815260408083203384529091529020548211156107a957600080fd5b600160a060020a0383166000818152600560209081526040808320805487900390556006825280832033845282529182902080548690039055600480548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a250600192915050565b60085481565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152929183018282801561055b5780601f106105305761010080835404028352916020019161055b565b6000600854348115156108a157fe5b0490506108af303383610b1a565b50565b6108bd338383610b1a565b5050565b60096020526000908152604090205460ff1681565b6000836108e38185610563565b156109e7576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b8381101561097b578181015183820152602001610963565b50505050905090810190601f1680156109a85780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156109ca57600080fd5b505af11580156109de573d6000803e3d6000fd5b50505050600191505b509392505050565b600660209081526000928352604080842090915290825290205481565b600754810230311015610a1e57600080fd5b610a29333083610b1a565b6007546040513391830280156108fc02916000818181858888f193505050501580156108bd573d6000803e3d6000fd5b600054600160a060020a03163314610a7057600080fd5b600160a060020a038216600081815260096020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b600054600160a060020a03163314610aeb57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0382161515610b2f57600080fd5b600160a060020a038316600090815260056020526040902054811115610b5457600080fd5b600160a060020a03821660009081526005602052604090205481810111610b7a57600080fd5b600160a060020a03831660009081526009602052604090205460ff1615610ba057600080fd5b600160a060020a03821660009081526009602052604090205460ff1615610bc657600080fd5b600160a060020a03808416600081815260056020908152604080832080548790039055938616808352918490208054860190558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050505600a165627a7a72305820616cedf9e5bb6e3dac1d11c4b87abb5d6429b279817259a34f20b90418c12bb00029000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004524f5343000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004524f534300000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004524f5343000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004524f534300000000000000000000000000000000000000000000000000000000"
}