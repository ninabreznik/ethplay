{
  "address": "0x611fd421087b18029cc011e91639c18d748a6d71",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KeyToken",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-03\n*/\n\npragma solidity ^0.4.13;\n    \n   // ----------------------------------------------------------------------------------------------\n   // Sample fixed supply token contract\n   // Enjoy. (c) BokkyPooBah 2017. The MIT Licence.\n   // ----------------------------------------------------------------------------------------------\n    \n   // ERC Token Standard #20 Interface\n   // https://github.com/ethereum/EIPs/issues/20\n\n   // --------------- Added --------------\n   // 1. SafeMath + mintToken\n   // 2. transfer ownership\n   //\n   library SafeMath {\n\t  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n\t    uint256 c = a * b;\n\t    assert(a == 0 || c / a == b);\n\t    return c;\n\t  }\n\n\t  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n\t    // assert(b > 0); // Solidity automatically throws when dividing by 0\n\t    uint256 c = a / b;\n\t    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t    return c;\n\t  }\n\n\t  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n\t    assert(b <= a);\n\t    return a - b;\n\t  }\n\n\t  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n\t    uint256 c = a + b;\n\t    assert(c >= a);\n\t    return c;\n\t  }\n\t}\n\n  contract ERC20Interface {\n      // Get the total token supply\n      function totalSupply() constant returns (uint256 totalSupply);\n   \n      // Get the account balance of another account with address _owner\n      function balanceOf(address _owner) constant returns (uint256 balance);\n   \n      // Send _value amount of tokens to address _to\n      function transfer(address _to, uint256 _value) returns (bool success);\n   \n      // Send _value amount of tokens from address _from to address _to\n      function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n   \n      // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n      // If this function is called again it overwrites the current allowance with _value.\n      // this function is required for some DEX functionality\n      function approve(address _spender, uint256 _value) returns (bool success);\n   \n      // Returns the amount which _spender is still allowed to withdraw from _owner\n      function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n   \n      // Triggered when tokens are transferred.\n      event Transfer(address indexed _from, address indexed _to, uint256 _value);\n   \n      // Triggered whenever approve(address _spender, uint256 _value) is called.\n      event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n  }\n   \n  contract KeyToken is ERC20Interface {\n      string public constant symbol = \"KeY\";\n      string public constant name = \"KeYToken\";\n      uint8 public constant decimals = 0;\n      uint256 _totalSupply = 11111111111;\n      \n      // Owner of this contract\n      address public owner;\n   \n      // Balances for each account\n      mapping(address => uint256) balances;\n   \n      // Owner of account approves the transfer of an amount to another account\n      mapping(address => mapping (address => uint256)) allowed;\n   \n      // Functions with this modifier can only be executed by the owner\n      modifier onlyOwner() {\n          require (msg.sender == owner);\n          _;\n      }\n\n      // Add: transfer ownership\n      function transferOwnership(address newOwner) onlyOwner{\n      \t  owner = newOwner;\n      }\n   \n      // Constructor\n      function KeyToken() {\n          owner = msg.sender;\n          balances[owner] = _totalSupply;\n      }\n   \n      function totalSupply() constant returns (uint256 totalSupply) {\n          totalSupply = _totalSupply;\n      }\n   \n      // What is the balance of a particular account?\n      function balanceOf(address _owner) constant returns (uint256 balance) {\n          return balances[_owner];\n      }\n   \n      // Transfer the balance from owner's account to another account\n      function transfer(address _to, uint256 _amount) returns (bool success) {\n          if (balances[msg.sender] >= _amount \n              && _amount > 0\n              && balances[_to] + _amount > balances[_to]) {\n              balances[msg.sender] -= _amount;\n              balances[_to] += _amount;\n              Transfer(msg.sender, _to, _amount);\n              return true;\n          } else {\n              return false;\n          }\n      }\n   \n      // Send _value amount of tokens from address _from to address _to\n      // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n      // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n      // fees in sub-currencies; the command should fail unless the _from account has\n      // deliberately authorized the sender of the message via some mechanism; we propose\n      // these standardized APIs for approval:\n      function transferFrom(\n          address _from,\n          address _to,\n          uint256 _amount\n     ) returns (bool success) {\n         if (balances[_from] >= _amount\n             && allowed[_from][msg.sender] >= _amount\n             && _amount > 0\n             && balances[_to] + _amount > balances[_to]) {\n             balances[_from] -= _amount;\n             allowed[_from][msg.sender] -= _amount;\n             balances[_to] += _amount;\n             Transfer(_from, _to, _amount);\n             return true;\n         } else {\n             return false;\n         }\n     }\n  \n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n     // If this function is called again it overwrites the current allowance with _value.\n     function approve(address _spender, uint256 _amount) returns (bool success) {\n         allowed[msg.sender][_spender] = _amount;\n         Approval(msg.sender, _spender, _amount);\n         return true;\n     }\n  \n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n         return allowed[_owner][_spender];\n     }\n\n     // Add: Mint Token\n     function mintToken(address target, uint256 mintedAmount) onlyOwner{\n     \tbalances[target] = SafeMath.add(balances[target], mintedAmount);\n     \t_totalSupply = SafeMath.add(_totalSupply, mintedAmount);\n     \tTransfer(0, this, mintedAmount);\n     \tTransfer(this, target, mintedAmount);\n     }\n\n\n }",
  "bytecode": "60606040526402964619c7600055341561001857600080fd5b5b60018054600160a060020a03191633600160a060020a03908116919091179182905560008054929091168152600260205260409020555b5b61082c806100606000396000f300606060405236156100b75763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100bc578063095ea7b31461014757806318160ddd1461017d57806323b872dd146101a2578063313ce567146101de57806370a082311461020757806379c65068146102385780638da5cb5b1461025c57806395d89b411461028b578063a9059cbb14610316578063dd62ed3e1461034c578063f2fde38b14610383575b600080fd5b34156100c757600080fd5b6100cf6103a4565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561010c5780820151818401525b6020016100f3565b50505050905090810190601f1680156101395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015257600080fd5b610169600160a060020a03600435166024356103db565b604051901515815260200160405180910390f35b341561018857600080fd5b610190610448565b60405190815260200160405180910390f35b34156101ad57600080fd5b610169600160a060020a036004358116906024351660443561044f565b604051901515815260200160405180910390f35b34156101e957600080fd5b6101f1610559565b60405160ff909116815260200160405180910390f35b341561021257600080fd5b610190600160a060020a036004351661055e565b60405190815260200160405180910390f35b341561024357600080fd5b61025a600160a060020a036004351660243561057d565b005b341561026757600080fd5b61026f61064e565b604051600160a060020a03909116815260200160405180910390f35b341561029657600080fd5b6100cf61065d565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561010c5780820151818401525b6020016100f3565b50505050905090810190601f1680156101395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561032157600080fd5b610169600160a060020a0360043516602435610694565b604051901515815260200160405180910390f35b341561035757600080fd5b610190600160a060020a0360043581169060243516610751565b60405190815260200160405180910390f35b341561038e57600080fd5b61025a600160a060020a036004351661077e565b005b60408051908101604052600881527f4b6559546f6b656e000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260036020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b6000545b90565b600160a060020a03831660009081526002602052604081205482901080159061049f5750600160a060020a0380851660009081526003602090815260408083203390941683529290522054829010155b80156104ab5750600082115b80156104d05750600160a060020a038316600090815260026020526040902054828101115b1561054d57600160a060020a0380851660008181526002602081815260408084208054899003905560038252808420338716855282528084208054899003905594881680845291905290839020805486019055916000805160206107e18339815191529085905190815260200160405180910390a3506001610551565b5060005b5b9392505050565b600081565b600160a060020a0381166000908152600260205260409020545b919050565b60015433600160a060020a0390811691161461059857600080fd5b600160a060020a0382166000908152600260205260409020546105bb90826107c6565b600160a060020a038316600090815260026020526040812091909155546105e290826107c6565b6000908155600160a060020a033016906000805160206107e18339815191528360405190815260200160405180910390a381600160a060020a031630600160a060020a03166000805160206107e18339815191528360405190815260200160405180910390a35b5b5050565b600154600160a060020a031681565b60408051908101604052600381527f4b65590000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a0333166000908152600260205260408120548290108015906106bd5750600082115b80156106e25750600160a060020a038316600090815260026020526040902054828101115b1561074257600160a060020a033381166000818152600260205260408082208054879003905592861680825290839020805486019055916000805160206107e18339815191529085905190815260200160405180910390a3506001610442565b506000610442565b5b92915050565b600160a060020a038083166000908152600360209081526040808320938516835292905220545b92915050565b60015433600160a060020a0390811691161461079957600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b6000828201838110156107d557fe5b8091505b50929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058204241369ad8d9206aa2915ae763ca008c09d6573ad3979ded861de718d0a02a760029"
}