{
  "address": "0x79a198b2355ca2aef695d8a4987582e093911ebb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SiringClockAuction",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-05\n*/\n\npragma solidity ^0.4.11;\n\n\ncontract Ownable {\n    address public owner;\n\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n\n\ncontract ERC721 {\n    function totalSupply() public view returns (uint256 total);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\n    function approve(address _to, uint256 _tokenId) external;\n    function transfer(address _to, uint256 _tokenId) external;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n    event Transfer(address from, address to, uint256 tokenId);\n    event Approval(address owner, address approved, uint256 tokenId);\n}\n\ncontract GeneScienceInterface {\n    function isGeneScience() public pure returns (bool);\n    function mixGenes(uint256 genes1, uint256 genes2, uint256 targetBlock) public returns (uint256);\n}\n\ncontract BotAccessControl {\n    event ContractUpgrade(address newContract);\n    address public ceoAddress;\n    address public cfoAddress;\n    address public cooAddress;\n    bool public paused = false;\n\n    modifier onlyCEO() {\n        require(msg.sender == ceoAddress);\n        _;\n    }\n\n    modifier onlyCFO() {\n        require(msg.sender == cfoAddress);\n        _;\n    }\n\n    modifier onlyCOO() {\n        require(msg.sender == cooAddress);\n        _;\n    }\n\n    modifier onlyCLevel() {\n        require(\n            msg.sender == cooAddress ||\n            msg.sender == ceoAddress ||\n            msg.sender == cfoAddress\n        );\n        _;\n    }\n\n    function setCEO(address _newCEO) external onlyCEO {\n        require(_newCEO != address(0));\n\n        ceoAddress = _newCEO;\n    }\n\n    function setCFO(address _newCFO) external onlyCEO {\n        require(_newCFO != address(0));\n\n        cfoAddress = _newCFO;\n    }\n\n    function setCOO(address _newCOO) external onlyCEO {\n        require(_newCOO != address(0));\n\n        cooAddress = _newCOO;\n    }\n\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n    function pause() external onlyCLevel whenNotPaused {\n        paused = true;\n    }\n\n    function unpause() public onlyCEO whenPaused {\n        paused = false;\n    }\n}\n\n\ncontract BotBase is BotAccessControl {\n    event Birth(\n      address owner,\n      uint256 botId,\n      uint256 matronId,\n      uint256 sireId,\n      uint256 genes,\n      uint256 birthTime\n    );\n\n    event Transfer(address from, address to, uint256 tokenId);\n\n    struct Bot {\n        uint256 genes;\n        uint64 birthTime;\n        uint64 cooldownEndBlock;\n        uint32 matronId;\n        uint32 sireId;\n        uint32 siringWithId;\n        uint16 cooldownIndex;\n        uint16 generation;\n    }\n\n    uint32[14] public cooldowns = [\n        uint32(1 minutes),\n        uint32(2 minutes),\n        uint32(5 minutes),\n        uint32(10 minutes),\n        uint32(30 minutes),\n        uint32(1 hours),\n        uint32(2 hours),\n        uint32(4 hours),\n        uint32(8 hours),\n        uint32(16 hours),\n        uint32(1 days),\n        uint32(2 days),\n        uint32(4 days),\n        uint32(7 days)\n    ];\n\n    uint256 public secondsPerBlock = 15;\n\n    Bot[] bots;\n\n    mapping (uint256 => address) public botIndexToOwner;\n    mapping (address => uint256) ownershipTokenCount;\n    mapping (uint256 => address) public botIndexToApproved;\n    mapping (uint256 => address) public sireAllowedToAddress;\n    uint32 public destroyedBots;\n    SaleClockAuction public saleAuction;\n    SiringClockAuction public siringAuction;\n\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        if (_to == address(0)) {\n            delete botIndexToOwner[_tokenId];\n        } else {\n            ownershipTokenCount[_to]++;\n            botIndexToOwner[_tokenId] = _to;\n        }\n        if (_from != address(0)) {\n            ownershipTokenCount[_from]--;\n            delete sireAllowedToAddress[_tokenId];\n            delete botIndexToApproved[_tokenId];\n        }\n        Transfer(_from, _to, _tokenId);\n    }\n\n    function _createBot(\n        uint256 _matronId,\n        uint256 _sireId,\n        uint256 _generation,\n        uint256 _genes,\n        address _owner\n    )\n        internal\n        returns (uint)\n    {\n        require(_matronId == uint256(uint32(_matronId)));\n        require(_sireId == uint256(uint32(_sireId)));\n        require(_generation == uint256(uint16(_generation)));\n\n        uint16 cooldownIndex = uint16(_generation / 2);\n        if (cooldownIndex > 13) {\n            cooldownIndex = 13;\n        }\n\n        Bot memory _bot = Bot({\n            genes: _genes,\n            birthTime: uint64(now),\n            cooldownEndBlock: 0,\n            matronId: uint32(_matronId),\n            sireId: uint32(_sireId),\n            siringWithId: 0,\n            cooldownIndex: cooldownIndex,\n            generation: uint16(_generation)\n        });\n        uint256 newBotId = bots.push(_bot) - 1;\n\n        require(newBotId == uint256(uint32(newBotId)));\n\n        Birth(\n            _owner,\n            newBotId,\n            uint256(_bot.matronId),\n            uint256(_bot.sireId),\n            _bot.genes,\n            uint256(_bot.birthTime)\n       );\n\n        _transfer(0, _owner, newBotId);\n\n        return newBotId;\n    }\n\n    function _destroyBot(uint256 _botId) internal {\n        require(_botId > 0);\n        address from = botIndexToOwner[_botId];\n        require(from != address(0));\n        destroyedBots++;\n        _transfer(from, 0, _botId);\n    }\n\n    function setSecondsPerBlock(uint256 secs) external onlyCLevel {\n        require(secs < cooldowns[0]);\n        secondsPerBlock = secs;\n    }\n}\n\n\ncontract BotExtension is BotBase {\n    event Lock(uint256 botId, uint16 mask);\n    mapping (address => bool) extensions;\n    mapping (uint256 => uint16) locks;\n    uint16 constant LOCK_BREEDING = 1;\n    uint16 constant LOCK_TRANSFER = 2;\n    uint16 constant LOCK_ALL = LOCK_BREEDING | LOCK_TRANSFER;\n\n    function addExtension(address _contract) external onlyCEO {\n        extensions[_contract] = true;\n    }\n\n    function removeExtension(address _contract) external onlyCEO {\n        delete extensions[_contract];\n    }\n\n    modifier onlyExtension() {\n        require(extensions[msg.sender] == true);\n        _;\n    }\n\n    function extCreateBot(\n        uint256 _matronId,\n        uint256 _sireId,\n        uint256 _generation,\n        uint256 _genes,\n        address _owner\n    )\n        public\n        onlyExtension\n        returns (uint)\n    {\n        return _createBot(_matronId, _sireId, _generation, _genes, _owner);\n    }\n\n    function extDestroyBot(uint256 _botId)\n        public\n        onlyExtension\n    {\n        require(locks[_botId] == 0);\n\n        _destroyBot(_botId);\n    }\n\n    function extLockBot(uint256 _botId, uint16 _mask)\n        public\n        onlyExtension\n    {\n        _lockBot(_botId, _mask);\n    }\n\n    function _lockBot(uint256 _botId, uint16 _mask)\n        internal\n    {\n        require(_mask > 0);\n\n        uint16 mask = locks[_botId];\n        require(mask & _mask == 0);\n\n        if (_mask & LOCK_BREEDING > 0) {\n            Bot storage bot = bots[_botId];\n            require(bot.siringWithId == 0);\n        }\n\n        if (_mask & LOCK_TRANSFER > 0) {\n            address owner = botIndexToOwner[_botId];\n            require(owner != address(saleAuction));\n            require(owner != address(siringAuction));\n        }\n\n        mask |= _mask;\n\n        locks[_botId] = mask;\n\n        Lock(_botId, mask);\n    }\n\n    function extUnlockBot(uint256 _botId, uint16 _mask)\n        public\n        onlyExtension\n        returns (uint16)\n    {\n        _unlockBot(_botId, _mask);\n    }\n\n    function _unlockBot(uint256 _botId, uint16 _mask)\n        internal\n    {\n        require(_mask > 0);\n\n        uint16 mask = locks[_botId];\n        require(mask & _mask == _mask);\n        mask ^= _mask;\n\n        locks[_botId] = mask;\n\n        Lock(_botId, mask);\n    }\n\n    function extGetLock(uint256 _botId)\n        public\n        view\n        onlyExtension\n        returns (uint16)\n    {\n        return locks[_botId];\n    }\n}\n\n\ncontract BotOwnership is BotExtension, ERC721 {\n    string public constant name = \"CryptoBots\";\n    string public constant symbol = \"CBT\";\n\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return botIndexToOwner[_tokenId] == _claimant;\n    }\n\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return botIndexToApproved[_tokenId] == _claimant;\n    }\n\n    function _approve(uint256 _tokenId, address _approved) internal {\n        botIndexToApproved[_tokenId] = _approved;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 count) {\n        return ownershipTokenCount[_owner];\n    }\n\n    function transfer(\n        address _to,\n        uint256 _tokenId\n    )\n        external\n        whenNotPaused\n    {\n        require(_to != address(0));\n        require(_to != address(this));\n        require(_to != address(saleAuction));\n        require(_to != address(siringAuction));\n        require(_owns(msg.sender, _tokenId));\n        require(locks[_tokenId] & LOCK_TRANSFER == 0);\n        _transfer(msg.sender, _to, _tokenId);\n    }\n\n    function approve(\n        address _to,\n        uint256 _tokenId\n    )\n        external\n        whenNotPaused\n    {\n        require(_owns(msg.sender, _tokenId));\n        require(locks[_tokenId] & LOCK_TRANSFER == 0);\n        _approve(_tokenId, _to);\n        Approval(msg.sender, _to, _tokenId);\n    }\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    )\n        external\n        whenNotPaused\n    {\n        require(_to != address(0));\n        require(_to != address(this));\n        require(_approvedFor(msg.sender, _tokenId));\n        require(_owns(_from, _tokenId));\n        require(locks[_tokenId] & LOCK_TRANSFER == 0);\n        _transfer(_from, _to, _tokenId);\n    }\n\n    function totalSupply() public view returns (uint) {\n        return bots.length - destroyedBots;\n    }\n\n    function ownerOf(uint256 _tokenId)\n        external\n        view\n        returns (address owner)\n    {\n        owner = botIndexToOwner[_tokenId];\n        require(owner != address(0));\n    }\n\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n        uint256 tokenCount = balanceOf(_owner);\n\n        if (tokenCount == 0) {\n            return new uint256[](0);\n        } else {\n            uint256[] memory result = new uint256[](tokenCount);\n            uint256 totalBots = bots.length - 1;\n            uint256 resultIndex = 0;\n            uint256 botId;\n            for (botId = 0; botId <= totalBots; botId++) {\n                if (botIndexToOwner[botId] == _owner) {\n                    result[resultIndex] = botId;\n                    resultIndex++;\n                }\n            }\n\n            return result;\n        }\n    }\n}\n\n\ncontract BotBreeding is BotOwnership {\n    event Pregnant(address owner, uint256 matronId, uint256 sireId, uint256 cooldownEndBlock);\n    uint256 public autoBirthFee = 2 finney;\n    uint256 public pregnantBots;\n    GeneScienceInterface public geneScience;\n\n    function setGeneScienceAddress(address _address) external onlyCEO {\n        GeneScienceInterface candidateContract = GeneScienceInterface(_address);\n        require(candidateContract.isGeneScience());\n        geneScience = candidateContract;\n    }\n\n    function _isReadyToBreed(uint256 _botId, Bot _bot) internal view returns (bool) {\n        return\n            (_bot.siringWithId == 0) &&\n            (_bot.cooldownEndBlock <= uint64(block.number)) &&\n            (locks[_botId] & LOCK_BREEDING == 0);\n    }\n\n    function _isSiringPermitted(uint256 _sireId, uint256 _matronId) internal view returns (bool) {\n        address matronOwner = botIndexToOwner[_matronId];\n        address sireOwner = botIndexToOwner[_sireId];\n        return (matronOwner == sireOwner || sireAllowedToAddress[_sireId] == matronOwner);\n    }\n\n    function _triggerCooldown(Bot storage _bot) internal {\n        _bot.cooldownEndBlock = uint64((cooldowns[_bot.cooldownIndex]/secondsPerBlock) + block.number);\n        if (_bot.cooldownIndex < 13) {\n            _bot.cooldownIndex += 1;\n        }\n    }\n\n    function approveSiring(address _addr, uint256 _sireId)\n        external\n        whenNotPaused\n    {\n        require(_owns(msg.sender, _sireId));\n        sireAllowedToAddress[_sireId] = _addr;\n    }\n\n    function setAutoBirthFee(uint256 val) external onlyCOO {\n        autoBirthFee = val;\n    }\n\n    function _isReadyToGiveBirth(Bot _matron) private view returns (bool) {\n        return (_matron.siringWithId != 0) && (_matron.cooldownEndBlock <= uint64(block.number));\n    }\n\n    function isReadyToBreed(uint256 _botId)\n        public\n        view\n        returns (bool)\n    {\n        Bot storage bot = bots[_botId];\n        return _botId > 0 && _isReadyToBreed(_botId, bot);\n    }\n\n    function isPregnant(uint256 _botId)\n        public\n        view\n        returns (bool)\n    {\n        return _botId > 0 && bots[_botId].siringWithId != 0;\n    }\n\n    function _isValidMatingPair(\n        Bot storage _matron,\n        uint256 _matronId,\n        Bot storage _sire,\n        uint256 _sireId\n    )\n        private\n        view\n        returns(bool)\n    {\n        if (_matronId == _sireId) {\n            return false;\n        }\n        if (_matron.matronId == _sireId || _matron.sireId == _sireId) {\n            return false;\n        }\n        if (_sire.matronId == _matronId || _sire.sireId == _matronId) {\n            return false;\n        }\n        if (_sire.matronId == 0 || _matron.matronId == 0) {\n            return true;\n        }\n        if (_sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId) {\n            return false;\n        }\n        if (_sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId) {\n            return false;\n        }\n        return true;\n    }\n\n    function _canBreedWithViaAuction(uint256 _matronId, uint256 _sireId)\n        internal\n        view\n        returns (bool)\n    {\n        Bot storage matron = bots[_matronId];\n        Bot storage sire = bots[_sireId];\n        return _isValidMatingPair(matron, _matronId, sire, _sireId);\n    }\n\n    function canBreedWith(uint256 _matronId, uint256 _sireId)\n        external\n        view\n        returns(bool)\n    {\n        require(_matronId > 0);\n        require(_sireId > 0);\n        Bot storage matron = bots[_matronId];\n        Bot storage sire = bots[_sireId];\n        return _isValidMatingPair(matron, _matronId, sire, _sireId) &&\n            _isSiringPermitted(_sireId, _matronId);\n    }\n\n    function _breedWith(uint256 _matronId, uint256 _sireId) internal {\n        Bot storage sire = bots[_sireId];\n        Bot storage matron = bots[_matronId];\n        matron.siringWithId = uint32(_sireId);\n        _triggerCooldown(sire);\n        _triggerCooldown(matron);\n        delete sireAllowedToAddress[_matronId];\n        delete sireAllowedToAddress[_sireId];\n        pregnantBots++;\n        Pregnant(botIndexToOwner[_matronId], _matronId, _sireId, matron.cooldownEndBlock);\n    }\n\n    function breedWithAuto(uint256 _matronId, uint256 _sireId)\n        external\n        payable\n        whenNotPaused\n    {\n        require(msg.value >= autoBirthFee);\n        require(_owns(msg.sender, _matronId));\n        require(_isSiringPermitted(_sireId, _matronId));\n        Bot storage matron = bots[_matronId];\n        require(_isReadyToBreed(_matronId, matron));\n        Bot storage sire = bots[_sireId];\n        require(_isReadyToBreed(_sireId, sire));\n        require(_isValidMatingPair(\n            matron,\n            _matronId,\n            sire,\n            _sireId\n        ));\n        _breedWith(_matronId, _sireId);\n    }\n\n    function giveBirth(uint256 _matronId)\n        external\n        whenNotPaused\n        returns(uint256)\n    {\n        Bot storage matron = bots[_matronId];\n        require(matron.birthTime != 0);\n        require(_isReadyToGiveBirth(matron));\n        uint256 sireId = matron.siringWithId;\n        Bot storage sire = bots[sireId];\n        uint16 parentGen = matron.generation;\n        if (sire.generation > matron.generation) {\n            parentGen = sire.generation;\n        }\n        uint256 childGenes = geneScience.mixGenes(matron.genes, sire.genes, matron.cooldownEndBlock - 1);\n        address owner = botIndexToOwner[_matronId];\n        uint256 botId = _createBot(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner);\n        delete matron.siringWithId;\n        pregnantBots--;\n        msg.sender.send(autoBirthFee);\n        return botId;\n    }\n}\n\n\ncontract ClockAuctionBase {\n    struct Auction {\n        address seller;\n        uint128 startingPrice;\n        uint128 endingPrice;\n        uint64 duration;\n        uint64 startedAt;\n    }\n    ERC721 public nonFungibleContract;\n    uint256 public ownerCut;\n    mapping (uint256 => Auction) tokenIdToAuction;\n    event AuctionCreated(\n      address seller,\n      uint256 tokenId,\n      uint256 startingPrice,\n      uint256 endingPrice,\n      uint256 creationTime,\n      uint256 duration\n    );\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address seller, address winner, uint256 time);\n    event AuctionCancelled(uint256 tokenId, address seller, uint256 time);\n\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\n    }\n\n    function _escrow(address _owner, uint256 _tokenId) internal {\n        nonFungibleContract.transferFrom(_owner, this, _tokenId);\n    }\n\n    function _transfer(address _receiver, uint256 _tokenId) internal {\n        nonFungibleContract.transfer(_receiver, _tokenId);\n    }\n\n    function _addAuction(uint256 _tokenId, Auction _auction) internal {\n        require(_auction.duration >= 1 minutes);\n        tokenIdToAuction[_tokenId] = _auction;\n        AuctionCreated(\n            _auction.seller,\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.startedAt),\n            uint256(_auction.duration)\n        );\n    }\n\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\n        _removeAuction(_tokenId);\n        _transfer(_seller, _tokenId);\n        AuctionCancelled(_tokenId, _seller, uint256(now));\n    }\n\n    function _bid(uint256 _tokenId, uint256 _bidAmount)\n        internal\n        returns (uint256)\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        uint256 price = _currentPrice(auction);\n        require(_bidAmount >= price);\n        address seller = auction.seller;\n        _removeAuction(_tokenId);\n        if (price > 0) {\n            uint256 auctioneerCut = _computeCut(price);\n            uint256 sellerProceeds = price - auctioneerCut;\n            seller.transfer(sellerProceeds);\n        }\n        uint256 bidExcess = _bidAmount - price;\n        msg.sender.transfer(bidExcess);\n        AuctionSuccessful(_tokenId, price, seller, msg.sender, uint256(now));\n        return price;\n    }\n\n    function _removeAuction(uint256 _tokenId) internal {\n        delete tokenIdToAuction[_tokenId];\n    }\n\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\n        return (_auction.startedAt > 0);\n    }\n\n    function _currentPrice(Auction storage _auction)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 secondsPassed = 0;\n        if (now > _auction.startedAt) {\n            secondsPassed = now - _auction.startedAt;\n        }\n        return _computeCurrentPrice(\n            _auction.startingPrice,\n            _auction.endingPrice,\n            _auction.duration,\n            secondsPassed\n        );\n    }\n\n    function _computeCurrentPrice(\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        uint256 _secondsPassed\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        if (_secondsPassed >= _duration) {\n            return _endingPrice;\n        } else {\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\n            return uint256(currentPrice);\n        }\n    }\n\n    function _computeCut(uint256 _price) internal view returns (uint256) {\n        return _price * ownerCut / 10000;\n    }\n}\n\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n    bool public paused = false;\n\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n    function pause() public onlyOwner whenNotPaused returns (bool) {\n        paused = true;\n        Pause();\n        return true;\n    }\n\n    function unpause() public onlyOwner whenPaused returns (bool) {\n        paused = false;\n        Unpause();\n        return true;\n    }\n}\n\n\ncontract ClockAuction is Pausable, ClockAuctionBase {\n    function ClockAuction(address _nftAddress, uint256 _cut) public {\n        require(_cut <= 10000);\n        ownerCut = _cut;\n\n        ERC721 candidateContract = ERC721(_nftAddress);\n        nonFungibleContract = candidateContract;\n    }\n\n    function withdrawBalance() external {\n        address nftAddress = address(nonFungibleContract);\n        require(\n            msg.sender == owner ||\n            msg.sender == nftAddress\n        );\n        bool res = nftAddress.send(this.balance);\n    }\n\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n        whenNotPaused\n    {\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n        require(_owns(msg.sender, _tokenId));\n        _escrow(msg.sender, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now)\n        );\n        _addAuction(_tokenId, auction);\n    }\n\n    function bid(uint256 _tokenId)\n        external\n        payable\n        whenNotPaused\n    {\n        _bid(_tokenId, msg.value);\n        _transfer(msg.sender, _tokenId);\n    }\n\n    function cancelAuction(uint256 _tokenId)\n        external\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        address seller = auction.seller;\n        require(msg.sender == seller);\n        _cancelAuction(_tokenId, seller);\n    }\n\n    function cancelAuctionWhenPaused(uint256 _tokenId)\n        external\n        whenPaused\n        onlyOwner\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        _cancelAuction(_tokenId, auction.seller);\n    }\n\n    function getAuction(uint256 _tokenId)\n        external\n        view\n        returns\n    (\n        address seller,\n        uint256 startingPrice,\n        uint256 endingPrice,\n        uint256 duration,\n        uint256 startedAt\n    )\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        return (\n            auction.seller,\n            auction.startingPrice,\n            auction.endingPrice,\n            auction.duration,\n            auction.startedAt\n        );\n    }\n\n    function getCurrentPrice(uint256 _tokenId)\n        external\n        view\n        returns (uint256)\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        return _currentPrice(auction);\n    }\n\n}\n\n\ncontract SiringClockAuction is ClockAuction {\n    bool public isSiringClockAuction = true;\n\n    function SiringClockAuction(address _nftAddr, uint256 _cut) public\n        ClockAuction(_nftAddr, _cut) {}\n\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n    {\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now)\n        );\n        _addAuction(_tokenId, auction);\n    }\n\n    function bid(uint256 _tokenId)\n        external\n        payable\n    {\n        require(msg.sender == address(nonFungibleContract));\n        address seller = tokenIdToAuction[_tokenId].seller;\n        _bid(_tokenId, msg.value);\n        _transfer(seller, _tokenId);\n    }\n\n}\n\n\ncontract SaleClockAuction is ClockAuction {\n    bool public isSaleClockAuction = true;\n    uint256 public gen0SaleCount;\n    uint256[5] public lastGen0SalePrices;\n\n    function SaleClockAuction(address _nftAddr, uint256 _cut) public\n        ClockAuction(_nftAddr, _cut) {}\n\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n    {\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now)\n        );\n        _addAuction(_tokenId, auction);\n    }\n\n    function bid(uint256 _tokenId)\n        external\n        payable\n    {\n        address seller = tokenIdToAuction[_tokenId].seller;\n        uint256 price = _bid(_tokenId, msg.value);\n        _transfer(msg.sender, _tokenId);\n        if (seller == address(nonFungibleContract)) {\n            lastGen0SalePrices[gen0SaleCount % 5] = price;\n            gen0SaleCount++;\n        }\n    }\n\n    function averageGen0SalePrice() external view returns (uint256) {\n        uint256 sum = 0;\n        for (uint256 i = 0; i < 5; i++) {\n            sum += lastGen0SalePrices[i];\n        }\n        return sum / 5;\n    }\n\n}\n\n\ncontract BotAuction is BotBreeding {\n    function setSaleAuctionAddress(address _address) external onlyCEO {\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\n        require(candidateContract.isSaleClockAuction());\n        saleAuction = candidateContract;\n    }\n\n    function setSiringAuctionAddress(address _address) external onlyCEO {\n        SiringClockAuction candidateContract = SiringClockAuction(_address);\n        require(candidateContract.isSiringClockAuction());\n        siringAuction = candidateContract;\n    }\n\n    function createSaleAuction(\n        uint256 _botId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )\n        external\n        whenNotPaused\n    {\n        require(_owns(msg.sender, _botId));\n        require(!isPregnant(_botId));\n        _approve(_botId, saleAuction);\n        saleAuction.createAuction(\n            _botId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }\n\n    function createSiringAuction(\n        uint256 _botId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )\n        external\n        whenNotPaused\n    {\n        require(_owns(msg.sender, _botId));\n        require(isReadyToBreed(_botId));\n        _approve(_botId, siringAuction);\n        siringAuction.createAuction(\n            _botId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }\n\n    function bidOnSiringAuction(\n        uint256 _sireId,\n        uint256 _matronId\n    )\n        external\n        payable\n        whenNotPaused\n    {\n        require(_owns(msg.sender, _matronId));\n        require(isReadyToBreed(_matronId));\n        require(_canBreedWithViaAuction(_matronId, _sireId));\n        uint256 currentPrice = siringAuction.getCurrentPrice(_sireId);\n        require(msg.value >= currentPrice + autoBirthFee);\n        siringAuction.bid.value(msg.value - autoBirthFee)(_sireId);\n        _breedWith(uint32(_matronId), uint32(_sireId));\n    }\n\n    function withdrawAuctionBalances() external onlyCLevel {\n        saleAuction.withdrawBalance();\n        siringAuction.withdrawBalance();\n    }\n}\n\n\ncontract BotMinting is BotAuction {\n    uint256 public constant PROMO_CREATION_LIMIT = 5000;\n    uint256 public constant GEN0_CREATION_LIMIT = 45000;\n    uint256 public constant GEN0_STARTING_PRICE = 10 finney;\n    uint256 public constant GEN0_AUCTION_DURATION = 1 days;\n    uint256 public promoCreatedCount;\n    uint256 public gen0CreatedCount;\n\n    function createPromoBot(uint256 _genes, address _owner) external onlyCOO {\n        address botOwner = _owner;\n        if (botOwner == address(0)) {\n            botOwner = cooAddress;\n        }\n        require(promoCreatedCount < PROMO_CREATION_LIMIT);\n\n        promoCreatedCount++;\n        _createBot(0, 0, 0, _genes, botOwner);\n    }\n\n    function createGen0Auction(uint256 _genes) external onlyCOO {\n        require(gen0CreatedCount < GEN0_CREATION_LIMIT);\n\n        uint256 botId = _createBot(0, 0, 0, _genes, address(this));\n        _approve(botId, saleAuction);\n\n        saleAuction.createAuction(\n            botId,\n            _computeNextGen0Price(),\n            0,\n            GEN0_AUCTION_DURATION,\n            address(this)\n        );\n\n        gen0CreatedCount++;\n    }\n\n    function _computeNextGen0Price() internal view returns (uint256) {\n        uint256 avePrice = saleAuction.averageGen0SalePrice();\n        require(avePrice == uint256(uint128(avePrice)));\n        uint256 nextPrice = avePrice + (avePrice / 2);\n        if (nextPrice < GEN0_STARTING_PRICE) {\n            nextPrice = GEN0_STARTING_PRICE;\n        }\n        return nextPrice;\n    }\n}\n\n\ncontract BotCore is BotMinting {\n    address public newContractAddress;\n\n    function BotCore() public {\n        paused = true;\n        ceoAddress = msg.sender;\n        cooAddress = msg.sender;\n        _createBot(0, 0, 0, uint256(-1), msg.sender);\n    }\n\n    function setNewAddress(address _v2Address) external onlyCEO whenPaused {\n        newContractAddress = _v2Address;\n        ContractUpgrade(_v2Address);\n    }\n\n    function() external payable {\n        require(\n            msg.sender == address(saleAuction) ||\n            msg.sender == address(siringAuction)\n        );\n    }\n\n    function getBot(uint256 _id)\n        external\n        view\n        returns (\n        bool isGestating,\n        bool isReady,\n        uint256 cooldownIndex,\n        uint256 nextActionAt,\n        uint256 siringWithId,\n        uint256 birthTime,\n        uint256 matronId,\n        uint256 sireId,\n        uint256 generation,\n        uint256 genes\n    )\n    {\n        require(botIndexToOwner[_id] != address(0));\n        Bot storage bot = bots[_id];\n        isGestating = (bot.siringWithId != 0);\n        isReady = (bot.cooldownEndBlock <= block.number);\n        cooldownIndex = uint256(bot.cooldownIndex);\n        nextActionAt = uint256(bot.cooldownEndBlock);\n        siringWithId = uint256(bot.siringWithId);\n        birthTime = uint256(bot.birthTime);\n        matronId = uint256(bot.matronId);\n        sireId = uint256(bot.sireId);\n        generation = uint256(bot.generation);\n        genes = bot.genes;\n    }\n\n    function unpause() public onlyCEO whenPaused {\n        require(saleAuction != address(0));\n        require(siringAuction != address(0));\n        require(geneScience != address(0));\n        require(newContractAddress == address(0));\n        super.unpause();\n    }\n\n    function withdrawBalance() external onlyCFO {\n        uint256 balance = this.balance;\n        uint256 subtractFees = (pregnantBots + 1) * autoBirthFee;\n        if (balance > subtractFees) {\n            cfoAddress.send(balance - subtractFees);\n        }\n    }\n\n    function destroyBot(uint256 _botId) external onlyCEO {\n        require(locks[_botId] == 0);\n        _destroyBot(_botId);\n    }\n}",
  "bytecode": "606060405260008060146101000a81548160ff0219169083151502179055506001600460006101000a81548160ff021916908315150217905550341561004457600080fd5b60405160408061175a8339810160405280805190602001909190805190602001909190505081816000336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061271082111515156100be57600080fd5b8160028190555082905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505061163d8061011d6000396000f3006060604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806327ebe40a146100e05780633f4ba83a1461013d578063454a2ab31461016a5780635c975abb146101825780635fd8c710146101af57806376190f8f146101c457806378bd7935146101f157806383b5ff8b146102705780638456cb5914610299578063878eb368146102c65780638da5cb5b146102e957806396b5a7551461033e578063c55d0f5614610361578063dd1b7a0f14610398578063f2fde38b146103ed575b600080fd5b34156100eb57600080fd5b61013b600480803590602001909190803590602001909190803590602001909190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610426565b005b341561014857600080fd5b610150610576565b604051808215151515815260200191505060405180910390f35b610180600480803590602001909190505061063b565b005b341561018d57600080fd5b6101956106eb565b604051808215151515815260200191505060405180910390f35b34156101ba57600080fd5b6101c26106fe565b005b34156101cf57600080fd5b6101d7610809565b604051808215151515815260200191505060405180910390f35b34156101fc57600080fd5b610212600480803590602001909190505061081c565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b341561027b57600080fd5b61028361093f565b6040518082815260200191505060405180910390f35b34156102a457600080fd5b6102ac610945565b604051808215151515815260200191505060405180910390f35b34156102d157600080fd5b6102e76004808035906020019091905050610a0c565b005b34156102f457600080fd5b6102fc610ade565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561034957600080fd5b61035f6004808035906020019091905050610b03565b005b341561036c57600080fd5b6103826004808035906020019091905050610b9f565b6040518082815260200191505060405180910390f35b34156103a357600080fd5b6103ab610bdc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103f857600080fd5b610424600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c02565b005b61042e611593565b846fffffffffffffffffffffffffffffffff168514151561044e57600080fd5b836fffffffffffffffffffffffffffffffff168414151561046e57600080fd5b8267ffffffffffffffff168314151561048657600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104e257600080fd5b6104ec8287610cd7565b60a0604051908101604052808373ffffffffffffffffffffffffffffffffffffffff168152602001866fffffffffffffffffffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff1681526020018467ffffffffffffffff1681526020014267ffffffffffffffff16815250905061056e8682610de7565b505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105d357600080fd5b600060149054906101000a900460ff1615156105ee57600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a16001905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561069957600080fd5b6003600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506106dc823461101a565b506106e781836111f5565b5050565b600060149054906101000a900460ff1681565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806107ac57508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156107b757600080fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505090505050565b600460009054906101000a900460ff1681565b600080600080600080600360008881526020019081526020016000209050610843816112d1565b151561084e57600080fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a90046fffffffffffffffffffffffffffffffff168260010160109054906101000a90046fffffffffffffffffffffffffffffffff168360020160009054906101000a900467ffffffffffffffff168460020160089054906101000a900467ffffffffffffffff16836fffffffffffffffffffffffffffffffff169350826fffffffffffffffffffffffffffffffff1692508167ffffffffffffffff1691508067ffffffffffffffff169050955095509550955095505091939590929450565b60025481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109a257600080fd5b600060149054906101000a900460ff161515156109be57600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a16001905090565b60008060149054906101000a900460ff161515610a2857600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a8357600080fd5b600360008381526020019081526020016000209050610aa1816112d1565b1515610aac57600080fd5b610ada828260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166112ff565b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600360008481526020019081526020016000209150610b24826112d1565b1515610b2f57600080fd5b8160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b9057600080fd5b610b9a83826112ff565b505050565b600080600360008481526020019081526020016000209050610bc0816112d1565b1515610bcb57600080fd5b610bd481611389565b915050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c5d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610cd457806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8330846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1515610dcf57600080fd5b6102c65a03f11515610de057600080fd5b5050505050565b603c816060015167ffffffffffffffff1610151515610e0557600080fd5b806003600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060608201518160020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509050507fabdd2430f9e10eb5db384c1218c42f980dd5fcda760a680a0d95ec506f0963cb81600001518383602001516fffffffffffffffffffffffffffffffff1684604001516fffffffffffffffffffffffffffffffff16856080015167ffffffffffffffff16866060015167ffffffffffffffff16604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390a15050565b6000806000806000806000600360008a81526020019081526020016000209550611043866112d1565b151561104e57600080fd5b61105786611389565b945084881015151561106857600080fd5b8560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693506110988961147c565b60008511156110f2576110aa85611538565b925082850391508373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015156110f157600080fd5b5b84880390503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561113757600080fd5b7fc2a394cb356728b3540b84dee72ea6de41f44fd94de223565258efe1549ee06f8986863342604051808681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019550505050505060405180910390a184965050505050505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15156112b957600080fd5b6102c65a03f115156112ca57600080fd5b5050505050565b6000808260020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff16119050919050565b6113088261147c565b61131281836111f5565b7f6a3d5a07d548e27ae884a742682e9b929c0a0e4040990bc28c04637c5c077104828242604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15050565b600080600090508260020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff164211156113e2578260020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff16420390505b6114748360010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168460010160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168560020160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1684611553565b915050919050565b60036000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160106101000a8154906fffffffffffffffffffffffffffffffff02191690556002820160006101000a81549067ffffffffffffffff02191690556002820160086101000a81549067ffffffffffffffff0219169055505050565b6000612710600254830281151561154b57fe5b049050919050565b600080600080858510151561156a57869350611588565b87870392508585840281151561157c57fe5b05915081880190508093505b505050949350505050565b60a060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff16815250905600a165627a7a7230582071c1285791d6db7351f727478d1603250dbbf3429534694086d3a0f8907a086c0029000000000000000000000000f7a6e15dfd5cdd9ef12711bd757a9b6021abf643000000000000000000000000000000000000000000000000000000000000012c",
  "constructorArguments": "000000000000000000000000f7a6e15dfd5cdd9ef12711bd757a9b6021abf643000000000000000000000000000000000000000000000000000000000000012c"
}