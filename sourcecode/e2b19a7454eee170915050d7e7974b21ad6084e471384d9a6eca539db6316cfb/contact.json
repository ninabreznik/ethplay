{
  "address": "0x609d6f40eed97ec8a96cb9bca78d73caa6225b8a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Keeper",
  "compilerVersion": "v0.5.9+commit.e560f70d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-06\n*/\n\npragma solidity 0.5.9;\n\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n/**\n * @title Claimable\n * @dev Claimable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable {\n    address public owner;\n    address public pendingOwner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n    * @dev The Claimable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev Modifier throws if called by any account other than the pendingOwner.\n    */\n    modifier onlyPendingOwner() {\n        require(msg.sender == pendingOwner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to set the pendingOwner address.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        pendingOwner = newOwner;\n    }\n\n    /**\n    * @dev Allows the pendingOwner address to finalize the transfer.\n    */\n    function claimOwnership() public onlyPendingOwner {\n        emit OwnershipTransferred(owner, pendingOwner);\n        owner = pendingOwner;\n        pendingOwner = address(0);\n    }\n}\n\n/**\n* @title Keeper\n*\n* @dev Implements the early investors' SWG tokens locking mechanism.\n* To avoid momentary dumping SWG token, the Keeper holds the early\n* investor's funds frozen until unFreezeStartDate. Between unFreezeStartDate\n* and totalUnFreezeDate, the contract allows holder to withdraw amount\n* proportional to time passed. After totalUnFreezeDate the funds get totally\n* unlocked and the early investor can spend the entire amount at any moment.\n*/\ncontract Keeper is Claimable {\n    using SafeMath for uint256;\n    IERC20 public token;\n    // the date when withdrawals become possible\n    uint256 public unFreezeStartDate;\n    // the date when all funds get unfrozen\n    uint256 public totalUnFreezeDate;\n    // the records about individual balances\n    mapping(address => uint256) public balances;\n    // the records about already withdrawn amounts\n    mapping(address => uint256) public withdrawnBalances;\n    // the sum of registered balance\n    uint256 public totalBalance;\n\n    constructor(\n        IERC20 _token,\n        uint256 _unFreezeStartDate,\n        uint256 _totalUnFreezeDate\n    ) public {\n        // solhint-disable-next-line not-rely-on-time\n        require(_unFreezeStartDate >= block.timestamp);\n        require(_totalUnFreezeDate > _unFreezeStartDate);\n        token = _token;\n        unFreezeStartDate = _unFreezeStartDate;\n        totalUnFreezeDate = _totalUnFreezeDate;\n    }\n\n    /**\n     * @dev Adds the individual holder's balance\n     *\n     * Called by the backend of payout engine per holder (after token got transferred on the Keeper)\n     */\n    function addBalance(address _to, uint256 _value) public onlyOwner {\n        require(_to != address(0));\n        require(_value > 0);\n        require(totalBalance.add(_value)\n                <= token.balanceOf(address(this)), \"not enough tokens\");\n        balances[_to] = balances[_to].add(_value);\n        totalBalance = totalBalance.add(_value);\n    }\n\n    /**\n     * @dev Withdraws the allowed amount of tokens\n     *\n     * Called by the investor through Keeper Dapp or Etherscan write interface\n     */\n    function withdraw(address _to, uint256 _value) public {\n        require(_to != address(0));\n        require(_value > 0);\n        require(unFreezeStartDate < now, \"not unfrozen yet\");\n        require(\n            (getUnfrozenAmount(msg.sender).sub(withdrawnBalances[msg.sender]))\n            >= _value\n        );\n        withdrawnBalances[msg.sender] = withdrawnBalances[msg.sender].add(_value);\n        totalBalance = totalBalance.sub(_value);\n        token.transfer(_to, _value);\n    }\n\n    /**\n     * @dev Shows the amount of tokens allowed to withdraw\n     *\n     * Called by the investor through Keeper Dapp or Etherscan write interface\n     */\n    function getUnfrozenAmount(address _holder) public view returns (uint256) {\n        if (now > unFreezeStartDate) {\n            if (now > totalUnFreezeDate) {\n                // tokens are totally unfrozen\n                return balances[_holder];\n            }\n            // tokens are partially unfrozen\n            uint256 partialFreezePeriodLen =\n                totalUnFreezeDate.sub(unFreezeStartDate);\n            uint256 secondsSincePeriodStart = now.sub(unFreezeStartDate);\n            uint256 amount = balances[_holder]\n                .mul(secondsSincePeriodStart)\n                .div(partialFreezePeriodLen);\n            return amount;\n        }\n        // tokens are totally frozen\n        return 0;\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000f71d36e9ffaa54394015c718c75b5cc323f55ec1000000000000000000000000000000000000000000000000000000005cfa2790000000000000000000000000000000000000000000000000000000005edcac90"
}