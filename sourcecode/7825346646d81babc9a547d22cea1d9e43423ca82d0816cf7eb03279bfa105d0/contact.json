{
  "address": "0xa94f6fc384ca2cab02eb1dd6a9efc43e43dd6dfb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "UKTTokenController",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-31\n*/\n\npragma solidity ^0.4.21;\n\n\n\n/**\n * @title AddressTools\n * @dev Useful tools for address type\n */\nlibrary AddressTools {\n\t\n\t/**\n\t* @dev Returns true if given address is the contract address, otherwise - returns false\n\t*/\n\tfunction isContract(address a) internal view returns (bool) {\n\t\tif(a == address(0)) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tuint codeSize;\n\t\t// solium-disable-next-line security/no-inline-assembly\n\t\tassembly {\n\t\t\tcodeSize := extcodesize(a)\n\t\t}\n\t\t\n\t\tif(codeSize > 0) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\t\n\taddress public owner;\n\taddress public potentialOwner;\n\t\n\t\n\tevent OwnershipRemoved(address indexed previousOwner);\n\tevent OwnershipTransfer(address indexed previousOwner, address indexed newOwner);\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\t\n\t\n\t/**\n\t * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n\t * account.\n\t */\n\tfunction Ownable() public {\n\t\towner = msg.sender;\n\t}\n\t\n\t\n\t/**\n\t * @dev Throws if called by any account other than the owner.\n\t */\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\t\n\t\n\t/**\n\t * @dev Throws if called by any account other than the owner.\n\t */\n\tmodifier onlyPotentialOwner() {\n\t\trequire(msg.sender == potentialOwner);\n\t\t_;\n\t}\n\t\n\t\n\t/**\n\t * @dev Allows the current owner to transfer control of the contract to a newOwner.\n\t * @param newOwner The address of potential new owner to transfer ownership to.\n\t */\n\tfunction transferOwnership(address newOwner) public onlyOwner {\n\t\trequire(newOwner != address(0));\n\t\temit OwnershipTransfer(owner, newOwner);\n\t\tpotentialOwner = newOwner;\n\t}\n\t\n\t\n\t/**\n\t * @dev Allow the potential owner confirm ownership of the contract.\n\t */\n\tfunction confirmOwnership() public onlyPotentialOwner {\n\t\temit OwnershipTransferred(owner, potentialOwner);\n\t\towner = potentialOwner;\n\t\tpotentialOwner = address(0);\n\t}\n\t\n\t\n\t/**\n\t * @dev Remove the contract owner permanently\n\t */\n\tfunction removeOwnership() public onlyOwner {\n\t\temit OwnershipRemoved(owner);\n\t\towner = address(0);\n\t}\n\t\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\t\n\t/**\n\t* @dev Multiplies two numbers, throws on overflow.\n\t*/\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\t\n\t\n\t/**\n\t* @dev Integer division of two numbers, truncating the quotient.\n\t*/\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a / b;\n\t\treturn c;\n\t}\n\t\n\t\n\t/**\n\t* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n\t*/\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\t\n\t\n\t/**\n\t* @dev Adds two numbers, throws on overflow.\n\t*/\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n\t\n\t\n\t/**\n\t* @dev Powers the first number to the second, throws on overflow.\n\t*/\n\tfunction pow(uint a, uint b) internal pure returns (uint) {\n\t\tif (b == 0) {\n\t\t\treturn 1;\n\t\t}\n\t\tuint c = a ** b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n\t\n\t\n\t/**\n\t * @dev Multiplies the given number by 10**decimals\n\t */\n\tfunction withDecimals(uint number, uint decimals) internal pure returns (uint) {\n\t\treturn mul(number, pow(10, decimals));\n\t}\n\t\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n\tfunction totalSupply() public view returns (uint256);\n\tfunction balanceOf(address who) public view returns (uint256);\n\tfunction transfer(address to, uint256 value) public returns (bool);\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n\t\n\tusing SafeMath for uint256;\n\t\n\tmapping(address => uint256) public balances;\n\t\n\tuint256 public totalSupply_;\n\t\n\t\n\t/**\n\t* @dev total number of tokens in existence\n\t*/\n\tfunction totalSupply() public view returns (uint256) {\n\t\treturn totalSupply_;\n\t}\n\t\n\t\n\t/**\n\t* @dev transfer token for a specified address\n\t* @param _to The address to transfer to.\n\t* @param _value The amount to be transferred.\n\t*/\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n\t\trequire(_to != address(0));\n\t\trequire(_value <= balances[msg.sender]);\n\t\t\n\t\t// SafeMath.sub will throw if there is not enough balance.\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\temit Transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\t\n\t\n\t/**\n\t* @dev Gets the balance of the specified address.\n\t* @param _owner The address to query the the balance of.\n\t* @return An uint256 representing the amount owned by the passed address.\n\t*/\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n\t\treturn balances[_owner];\n\t}\n\t\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\t\n\tevent Burn(address indexed burner, uint256 value);\n\t\n\t/**\n\t * @dev Burns a specific amount of tokens.\n\t * @param _value The amount of token to be burned.\n\t */\n\tfunction burn(uint256 _value) public {\n\t\trequire(_value <= balances[msg.sender]);\n\t\t// no need to require value <= totalSupply, since that would imply the\n\t\t// sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\t\t\n\t\taddress burner = msg.sender;\n\t\tbalances[burner] = balances[burner].sub(_value);\n\t\ttotalSupply_ = totalSupply_.sub(_value);\n\t\temit Burn(burner, _value);\n\t\temit Transfer(burner, address(0), _value);\n\t}\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n\tfunction allowance(address owner, address spender) public view returns (uint256);\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n\tfunction approve(address spender, uint256 value) public returns (bool);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title ERC223 interface\n * @dev see https://github.com/ethereum/EIPs/issues/223\n */\ncontract ERC223 is ERC20 {\n\tfunction transfer(address to, uint256 value, bytes data) public returns (bool);\n\tevent ERC223Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n}\n\n/**\n * @title UKTTokenBasic\n * @dev UKTTokenBasic interface\n */\ncontract UKTTokenBasic is ERC223, BurnableToken {\n\t\n\tbool public isControlled = false;\n\tbool public isConfigured = false;\n\tbool public isAllocated = false;\n\t\n\t// mapping of string labels to initial allocated addresses\n\tmapping(bytes32 => address) public allocationAddressesTypes;\n\t// mapping of addresses to time lock period\n\tmapping(address => uint32) public timelockedAddresses;\n\t// mapping of addresses to lock flag\n\tmapping(address => bool) public lockedAddresses;\n\t\n\t\n\tfunction setConfiguration(string _name, string _symbol, uint _totalSupply) external returns (bool);\n\tfunction setInitialAllocation(address[] addresses, bytes32[] addressesTypes, uint[] amounts) external returns (bool);\n\tfunction setInitialAllocationLock(address allocationAddress ) external returns (bool);\n\tfunction setInitialAllocationUnlock(address allocationAddress ) external returns (bool);\n\tfunction setInitialAllocationTimelock(address allocationAddress, uint32 timelockTillDate ) external returns (bool);\n\t\n\t// fires when the token contract becomes controlled\n\tevent Controlled(address indexed tokenController);\n\t// fires when the token contract becomes configured\n\tevent Configured(string tokenName, string tokenSymbol, uint totalSupply);\n\tevent InitiallyAllocated(address indexed owner, bytes32 addressType, uint balance);\n\tevent InitiallAllocationLocked(address indexed owner);\n\tevent InitiallAllocationUnlocked(address indexed owner);\n\tevent InitiallAllocationTimelocked(address indexed owner, uint32 timestamp);\n\t\n}\n\n/**\n * @title  Basic controller contract for basic UKT token\n * @author  Oleg Levshin <[emailÂ protected]>\n */\ncontract UKTTokenController is Ownable {\n\t\n\tusing SafeMath for uint256;\n\tusing AddressTools for address;\n\t\n\tbool public isFinalized = false;\n\t\n\t// address of the controlled token\n\tUKTTokenBasic public token;\n\t// finalize function type. One of two values is possible: \"transfer\" or \"burn\"\n\tbytes32 public finalizeType = \"transfer\";\n\t// address type where finalize function will transfer undistributed tokens\n\tbytes32 public finalizeTransferAddressType = \"\";\n\t// maximum quantity of addresses to distribute\n\tuint8 internal MAX_ADDRESSES_FOR_DISTRIBUTE = 100;\n\t// list of locked initial allocation addresses\n\taddress[] internal lockedAddressesList;\n\t\n\t\n\t// fires when tokens distributed to holder\n\tevent Distributed(address indexed holder, bytes32 indexed trackingId, uint256 amount);\n\t// fires when tokens distribution is finalized\n\tevent Finalized();\n\t\n\t/**\n\t * @dev The UKTTokenController constructor\n\t */\n\tfunction UKTTokenController(\n\t\tbytes32 _finalizeType,\n\t\tbytes32 _finalizeTransferAddressType\n\t) public {\n\t\trequire(_finalizeType == \"transfer\" || _finalizeType == \"burn\");\n\t\t\n\t\tif (_finalizeType == \"transfer\") {\n\t\t\trequire(_finalizeTransferAddressType != \"\");\n\t\t} else if (_finalizeType == \"burn\") {\n\t\t\trequire(_finalizeTransferAddressType == \"\");\n\t\t}\n\t\t\n\t\tfinalizeType = _finalizeType;\n\t\tfinalizeTransferAddressType = _finalizeTransferAddressType;\n\t}\n\t\n\t\n\t/**\n\t * @dev Sets controlled token\n\t */\n\tfunction setToken (\n\t\taddress _token\n\t) public onlyOwner returns (bool) {\n\t\trequire(token == address(0));\n\t\trequire(_token.isContract());\n\t\t\n\t\ttoken = UKTTokenBasic(_token);\n\t\t\n\t\treturn true;\n\t}\n\t\n\t\n\t/**\n\t * @dev Configures controlled token params\n\t */\n\tfunction configureTokenParams(\n\t\tstring _name,\n\t\tstring _symbol,\n\t\tuint _totalSupply\n\t) public onlyOwner returns (bool) {\n\t\trequire(token != address(0));\n\t\treturn token.setConfiguration(_name, _symbol, _totalSupply);\n\t}\n\t\n\t\n\t/**\n\t * @dev Allocates initial ICO balances (like team, advisory tokens and others)\n\t */\n\tfunction allocateInitialBalances(\n\t\taddress[] addresses,\n\t\tbytes32[] addressesTypes,\n\t\tuint[] amounts\n\t) public onlyOwner returns (bool) {\n\t\trequire(token != address(0));\n\t\treturn token.setInitialAllocation(addresses, addressesTypes, amounts);\n\t}\n\t\n\t\n\t/**\n\t * @dev Locks given allocation address\n\t */\n\tfunction lockAllocationAddress(\n\t\taddress allocationAddress\n\t) public onlyOwner returns (bool) {\n\t\trequire(token != address(0));\n\t\ttoken.setInitialAllocationLock(allocationAddress);\n\t\tlockedAddressesList.push(allocationAddress);\n\t\treturn true;\n\t}\n\t\n\t\n\t/**\n\t * @dev Unlocks given allocation address\n\t */\n\tfunction unlockAllocationAddress(\n\t\taddress allocationAddress\n\t) public onlyOwner returns (bool) {\n\t\trequire(token != address(0));\n\t\t\n\t\ttoken.setInitialAllocationUnlock(allocationAddress);\n\t\t\n\t\tfor (uint idx = 0; idx < lockedAddressesList.length; idx++) {\n\t\t\tif (lockedAddressesList[idx] == allocationAddress) {\n\t\t\t\tlockedAddressesList[idx] = address(0);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\t\n\t/**\n\t * @dev Unlocks all allocation addresses\n\t */\n\tfunction unlockAllAllocationAddresses() public onlyOwner returns (bool) {\n\t\tfor(uint a = 0; a < lockedAddressesList.length; a++) {\n\t\t\tif (lockedAddressesList[a] == address(0)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tunlockAllocationAddress(lockedAddressesList[a]);\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\t\n\t/**\n\t * @dev Locks given allocation address with timestamp\n\t */\n\tfunction timelockAllocationAddress(\n\t\taddress allocationAddress,\n\t\tuint32 timelockTillDate\n\t) public onlyOwner returns (bool) {\n\t\trequire(token != address(0));\n\t\treturn token.setInitialAllocationTimelock(allocationAddress, timelockTillDate);\n\t}\n\t\n\t\n\t\n\t/**\n\t * @dev Distributes tokens to holders (investors)\n\t */\n\tfunction distribute(\n\t\taddress[] addresses,\n\t\tuint[] amounts,\n\t\tbytes32[] trackingIds\n\t) public onlyOwner returns (bool) {\n\t\trequire(token != address(0));\n\t\t// quantity of addresses should be less than MAX_ADDRESSES_FOR_DISTRIBUTE\n\t\trequire(addresses.length < MAX_ADDRESSES_FOR_DISTRIBUTE);\n\t\t// the array of addresses should be the same length as the array of amounts\n\t\trequire(addresses.length == amounts.length && addresses.length == trackingIds.length);\n\t\t\n\t\tfor(uint a = 0; a < addresses.length; a++) {\n\t\t\ttoken.transfer(addresses[a], amounts[a]);\n\t\t\temit Distributed(addresses[a], trackingIds[a], amounts[a]);\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\t\n\t/**\n\t * @dev Finalizes the ability to use the controller and destructs it\n\t */\n\tfunction finalize() public onlyOwner {\n\t\t\n\t\tif (finalizeType == \"transfer\") {\n\t\t\t// transfer all undistributed tokens to particular address\n\t\t\ttoken.transfer(\n\t\t\t\ttoken.allocationAddressesTypes(finalizeTransferAddressType),\n\t\t\t\ttoken.balanceOf(this)\n\t\t\t);\n\t\t} else if (finalizeType == \"burn\") {\n\t\t\t// burn all undistributed tokens\n\t\t\ttoken.burn(token.balanceOf(this));\n\t\t}\n\t\t\n\t\trequire(unlockAllAllocationAddresses());\n\t\t\n\t\tremoveOwnership();\n\t\t\n\t\tisFinalized = true;\n\t\temit Finalized();\n\t}\n\t\n}",
  "bytecode": "",
  "constructorArguments": "6275726e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
}