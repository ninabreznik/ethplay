{
  "address": "0x6165240c9c9ee2c1616a96f0ef13c70d0e6fed0a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FqgChainCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-27\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  function batchTransfer(address[] receivers, uint256[] values) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n  uint256 internal totalSupply_;\n\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function batchTransfer(address[] _receivers, uint256[] _values) public returns (bool) {\n    require(_receivers.length > 0);\n    require(_receivers.length < 100000);\n    require(_receivers.length == _values.length);\n\n    uint256 sum;\n    for(uint i = 0; i < _values.length; i++) {\n      sum = sum.add(_values[i]);\n    }\n    require(sum <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(sum);\n    for(uint j = 0; j < _receivers.length; j++) {\n      balances[_receivers[j]] = balances[_receivers[j]].add(_values[j]);\n      emit Transfer(msg.sender, _receivers[j], _values[j]);\n    }\n    return true;\n  }\n}\n\ncontract FqgChainCoin is BasicToken {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor() public {\n    name = \"FqgChain2.0\";\n    symbol = \"FQG\";\n    decimals = 18;\n    totalSupply_ = 2e26;\n    balances[msg.sender]=totalSupply_;\n    emit Transfer(address(0), msg.sender, totalSupply_);\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b506040805190810160405280600b81526020017f467167436861696e322e300000000000000000000000000000000000000000008152506002908051906020019061005c929190610189565b506040805190810160405280600381526020017f4651470000000000000000000000000000000000000000000000000000000000815250600390805190602001906100a8929190610189565b506012600460006101000a81548160ff021916908360ff1602179055506aa56fa5b99019a5c80000006001819055506001546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6001546040518082815260200191505060405180910390a361022e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101ca57805160ff19168380011785556101f8565b828001600101855582156101f8579182015b828111156101f75782518255916020019190600101906101dc565b5b5090506102059190610209565b5090565b61022b91905b8082111561022757600081600090555060010161020f565b5090565b90565b610a948061023d6000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461008857806318160ddd14610118578063313ce5671461014357806370a082311461017457806388d695b2146101cb57806395d89b411461028c578063a9059cbb1461031c575b600080fd5b34801561009457600080fd5b5061009d610381565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100dd5780820151818401526020810190506100c2565b50505050905090810190601f16801561010a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561012457600080fd5b5061012d61041f565b6040518082815260200191505060405180910390f35b34801561014f57600080fd5b50610158610429565b604051808260ff1660ff16815260200191505060405180910390f35b34801561018057600080fd5b506101b5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061043c565b6040518082815260200191505060405180910390f35b3480156101d757600080fd5b506102726004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610484565b604051808215151515815260200191505060405180910390f35b34801561029857600080fd5b506102a1610776565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102e15780820151818401526020810190506102c6565b50505050905090810190601f16801561030e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561032857600080fd5b50610367600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610814565b604051808215151515815260200191505060405180910390f35b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104175780601f106103ec57610100808354040283529160200191610417565b820191906000526020600020905b8154815290600101906020018083116103fa57829003601f168201915b505050505081565b6000600154905090565b600460009054906101000a900460ff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806000806000865111151561049a57600080fd5b620186a086511015156104ac57600080fd5b845186511415156104bc57600080fd5b600091505b8451821015610503576104f485838151811015156104db57fe5b9060200190602002015184610a3390919063ffffffff16565b925081806001019250506104c1565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561055057600080fd5b6105a1836000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a4f90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600090505b855181101561076957610670858281518110151561060257fe5b90602001906020020151600080898581518110151561061d57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a3390919063ffffffff16565b600080888481518110151561068157fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555085818151811015156106d757fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef878481518110151561073d57fe5b906020019060200201516040518082815260200191505060405180910390a380806001019150506105e8565b6001935050505092915050565b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561080c5780601f106107e15761010080835404028352916020019161080c565b820191906000526020600020905b8154815290600101906020018083116107ef57829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561085157600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561089e57600080fd5b6108ef826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a4f90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610982826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a3390919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60008183019050828110151515610a4657fe5b80905092915050565b6000828211151515610a5d57fe5b8183039050929150505600a165627a7a72305820e26191d2ce5a6290a987297e136ebbf8f0af53360cd1c856d6b174dad2acdd1f0029"
}