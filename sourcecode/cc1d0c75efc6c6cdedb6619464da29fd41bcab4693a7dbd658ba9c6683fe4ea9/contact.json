{
  "address": "0x11c7c367a82adfdaf608f4d46938b63e736ee547",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DataMiningController",
  "compilerVersion": "v0.4.25-nightly.2018.5.18+commit.4d7b092c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-17\n*/\n\n/* ==================================================================== */\n/* Copyright (c) 2018 The CryptoRacing Project.  All rights reserved.\n/* \n/*   The first idle car race game of blockchain                 \n/* ==================================================================== */\n\npragma solidity ^0.4.20;\n\ncontract AccessAdmin {\n    bool public isPaused = false;\n    address public addrAdmin;  \n\n    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\n\n    constructor() public {\n        addrAdmin = msg.sender;\n    }  \n\n    modifier onlyAdmin() {\n        require(msg.sender == addrAdmin);\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(!isPaused);\n        _;\n    }\n\n    modifier whenPaused {\n        require(isPaused);\n        _;\n    }\n\n    function setAdmin(address _newAdmin) external onlyAdmin {\n        require(_newAdmin != address(0));\n        emit AdminTransferred(addrAdmin, _newAdmin);\n        addrAdmin = _newAdmin;\n    }\n\n    function doPause() external onlyAdmin whenNotPaused {\n        isPaused = true;\n    }\n\n    function doUnpause() external onlyAdmin whenPaused {\n        isPaused = false;\n    }\n}\n\ncontract AccessService is AccessAdmin {\n    address public addrService;\n    address public addrFinance;\n\n    modifier onlyService() {\n        require(msg.sender == addrService);\n        _;\n    }\n\n    modifier onlyFinance() {\n        require(msg.sender == addrFinance);\n        _;\n    }\n\n    function setService(address _newService) external {\n        require(msg.sender == addrService || msg.sender == addrAdmin);\n        require(_newService != address(0));\n        addrService = _newService;\n    }\n\n    function setFinance(address _newFinance) external {\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n        require(_newFinance != address(0));\n        addrFinance = _newFinance;\n    }\n\n    function withdraw(address _target, uint256 _amount) \n        external \n    {\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n        require(_amount > 0);\n        address receiver = _target == address(0) ? addrFinance : _target;\n        uint256 balance = this.balance;\n        if (_amount < balance) {\n            receiver.transfer(_amount);\n        } else {\n            receiver.transfer(this.balance);\n        }      \n    }\n}\n\ninterface IDataMining {\n    function subFreeMineral(address _target) external returns(bool);\n}\n\ninterface IDataEquip {\n    function isEquiped(address _target, uint256 _tokenId) external view returns(bool);\n    function isEquipedAny2(address _target, uint256 _tokenId1, uint256 _tokenId2) external view returns(bool);\n    function isEquipedAny3(address _target, uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3) external view returns(bool);\n}\n\ncontract DataMiningController is AccessService, IDataMining {\n    event FreeMineralChange(address indexed _target, uint32 _accCnt);\n\n\n    /// @dev Free mining count map\n    mapping (address => uint32) freeMineral;\n    /// @dev Trust contract\n    mapping (address => bool) actionContracts;\n\n    constructor() public {\n        addrAdmin = msg.sender;\n        addrService = msg.sender;\n        addrFinance = msg.sender;\n    }\n\n   \n    function addFreeMineral(address _target, uint32 _cnt)  \n        external\n        onlyService\n    {\n        require(_target != address(0));\n        require(_cnt <= 32);\n        uint32 oldCnt = freeMineral[_target];\n        freeMineral[_target] = oldCnt + _cnt;\n        emit FreeMineralChange(_target, freeMineral[_target]);\n    }\n\n    function addFreeMineralMulti(address[] _targets, uint32[] _cnts)\n        external\n        onlyService\n    {\n        uint256 targetLength = _targets.length;\n        require(targetLength <= 64);\n        require(targetLength == _cnts.length);\n        address addrZero = address(0);\n        uint32 oldCnt;\n        uint32 newCnt;\n        address addr;\n        for (uint256 i = 0; i < targetLength; ++i) {\n            addr = _targets[i];\n            if (addr != addrZero && _cnts[i] <= 32) {\n                oldCnt = freeMineral[addr];\n                newCnt = oldCnt + _cnts[i];\n                assert(oldCnt < newCnt);\n                freeMineral[addr] = newCnt;\n                emit FreeMineralChange(addr, freeMineral[addr]);\n            }\n        }\n    }\n\n    function setActionContract(address _actionAddr, bool _useful) external onlyAdmin {\n        actionContracts[_actionAddr] = _useful;\n    }\n\n    function getActionContract(address _actionAddr) external view onlyAdmin returns(bool) {\n        return actionContracts[_actionAddr];\n    }\n\n    function subFreeMineral(address _target) external returns(bool) {\n        require(actionContracts[msg.sender]);\n        require(_target != address(0));\n        uint32 cnts = freeMineral[_target];\n        assert(cnts > 0);\n        freeMineral[_target] = cnts - 1;\n        emit FreeMineralChange(_target, cnts - 1);\n        return true;\n    }\n\n    function getFreeMineral(address _target) external view returns(uint32) {\n        return freeMineral[_target];\n    }\n}",
  "bytecode": "608060405260008060006101000a81548160ff02191690831515021790555034801561002a57600080fd5b5033600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506115668061013e6000396000f3006080604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806330efb8d3146100eb5780634ea34cdb146101025780635d6720b41461015d57806367d0661d146101c05780636fb642de146101d7578063704b6c021461022657806382cb9df9146102695780639b8d3064146102c05780639e179b9114610303578063b187bd2614610356578063bf8bdac114610385578063bfae2f0e146103c8578063c1c7bc681461041f578063cdd977e014610472578063d0946d00146104c9578063f3fef3a314610524575b600080fd5b3480156100f757600080fd5b50610100610571565b005b34801561010e57600080fd5b50610143600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610603565b604051808215151515815260200191505060405180910390f35b34801561016957600080fd5b5061019e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106b4565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b3480156101cc57600080fd5b506101d561070d565b005b3480156101e357600080fd5b50610224600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506107a0565b005b34801561023257600080fd5b50610267600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610857565b005b34801561027557600080fd5b5061027e6109af565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102cc57600080fd5b50610301600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109d5565b005b34801561030f57600080fd5b50610354600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803563ffffffff169060200190929190505050610b09565b005b34801561036257600080fd5b5061036b610d19565b604051808215151515815260200191505060405180910390f35b34801561039157600080fd5b506103c6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d2b565b005b3480156103d457600080fd5b506103dd610e5f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561042b57600080fd5b50610470600480360381019080803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390505050610e85565b005b34801561047e57600080fd5b50610487611158565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104d557600080fd5b5061050a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061117e565b604051808215151515815260200191505060405180910390f35b34801561053057600080fd5b5061056f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611341565b005b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105cd57600080fd5b6000809054906101000a900460ff1615156105e757600080fd5b60008060006101000a81548160ff021916908315150217905550565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561066057600080fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff169050919050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561076957600080fd5b6000809054906101000a900460ff1615151561078457600080fd5b60016000806101000a81548160ff021916908315150217905550565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107fc57600080fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108b357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156108ef57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec660405160405180910390a380600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610a7e5750600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610a8957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610ac557600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b6757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610ba357600080fd5b60208263ffffffff1611151515610bb957600080fd5b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff169050818101600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff167f573c011c9e16e9b12132a9c55fd9ddf8128e178b756d2fa8f7e3346258db7183600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff16604051808263ffffffff1663ffffffff16815260200191505060405180910390a2505050565b6000809054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610dd45750600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610ddf57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610e1b57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610eea57600080fd5b89899050955060408611151515610f0057600080fd5b8787905086141515610f1157600080fd5b60009450600090505b8581101561114c578989828181101515610f3057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1691508473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015610fac575060208888838181101515610f9657fe5b9050602002013563ffffffff1663ffffffff1611155b1561114157600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff169350878782818110151561101157fe5b9050602002013563ffffffff16840192508263ffffffff168463ffffffff1610151561103957fe5b82600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167f573c011c9e16e9b12132a9c55fd9ddf8128e178b756d2fa8f7e3346258db7183600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff16604051808263ffffffff1663ffffffff16815260200191505060405180910390a25b806001019050610f1a565b50505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156111d957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561121557600080fd5b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff16905060008163ffffffff1611151561127957fe5b60018103600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff167f573c011c9e16e9b12132a9c55fd9ddf8128e178b756d2fa8f7e3346258db718360018303604051808263ffffffff1663ffffffff16815260200191505060405180910390a26001915050919050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806113ed5750600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156113f857600080fd5b60008311151561140757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146114415783611465565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b91503073ffffffffffffffffffffffffffffffffffffffff16319050808310156114d5578173ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050501580156114cf573d6000803e3d6000fd5b50611534565b8173ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015611532573d6000803e3d6000fd5b505b505050505600a165627a7a72305820b5801623b29f4ff0006593155ca5dfb41c1e6f445d5baa479a143897648be2790029"
}