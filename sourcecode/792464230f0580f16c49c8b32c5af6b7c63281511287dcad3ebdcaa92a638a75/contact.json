{
  "address": "0x4e0a88e9b30df014dc980ef237d6776f24f23222",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CoblicToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-13\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract CoblicAccessControl {\n\t/**\n\t *\t\t- The Admin: The admin can reassign other roles and change the addresses of Coblic's smart contracts.\n\t *\t\t\tIt is also the only role that can unpause the smart contract, and is initially set to the address\n\t *\t\t\tthat created the smart contract in the CoblicToken constructor.\n\t *\n\t *\t\t- The System: The System can call burn function\n\t *\n\t */\n\n\t// The addresses of the accounts (or contracts) that can execute actions within each roles.\n\taddress public adminAddress;\n\taddress public systemAddress;\n\taddress public ceoAddress;\n\n\t/// @dev Access modifier for Admin-only functionality\n\tmodifier onlyAdmin() {\n\t\trequire(msg.sender == adminAddress);\n\t\t_;\n\t}\n\n\t// @dev Access modifier for CEO-only functionality\n\tmodifier onlyCEO() {\n\t\trequire(msg.sender == ceoAddress || msg.sender == adminAddress);\n\t\t_;\n\t}\n\n\t/// @dev Access modifier for System-only functionality\n\tmodifier onlySystem() {\n\t\trequire(msg.sender == systemAddress || msg.sender == adminAddress);\n\t\t_;\n\t}\n\n\t/// @dev Assigns a new address to act as the Admin. Only available to the current Admin.\n\t/// @param _newAdminAddress The address of the new Admin\n\tfunction setAdmin(address _newAdminAddress) public onlyAdmin {\n\t\trequire(_newAdminAddress != address(0));\n\n\t\tadminAddress = _newAdminAddress;\n\t}\n\n\t/// @dev Assigns a new address to act as the System. Only available to the current Admin.\n\t/// @param _newSystemAddress The address of the new System\n\tfunction setSystem(address _newSystemAddress) public onlySystem {\n\t\trequire(_newSystemAddress != address(0));\n\n\t\tsystemAddress = _newSystemAddress;\n\t}\n\n\t/// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n\t/// @param _newCEOAddress The address of the new CEO\n\tfunction setCEO(address _newCEOAddress) public onlyCEO {\n\t\trequire(_newCEOAddress != address(0));\n\n\t\tceoAddress = _newCEOAddress;\n\t}\n}\n\n/**\n * @title ERC1132 interface\n * @dev see https://github.com/ethereum/EIPs/issues/1132\n */\n\ncontract ERC1132 {\n\t/**\n\t * @dev Reasons why a user's tokens have been locked\n\t */\n\tmapping(address => bytes32[]) public lockReason;\n\n\t/**\n\t * @dev locked token structure\n\t */\n\tstruct lockToken {\n\t\tuint256 amount;\n\t\tuint256 validity;\n\t\tbool claimed;\n\t}\n\n\t/**\n\t * @dev Holds number & validity of tokens locked for a given reason for\n\t *      a specified address\n\t */\n\tmapping(address => mapping(bytes32 => lockToken)) public locked;\n\n\t/**\n\t * @dev Records data of all the tokens Locked\n\t */\n\tevent Locked(\n\t\t\taddress indexed _of,\n\t\t\tbytes32 indexed _reason,\n\t\t\tuint256 _amount,\n\t\t\tuint256 _validity\n\t\t\t);\n\n\t/**\n\t * @dev Records data of all the tokens unlocked\n\t */\n\tevent Unlocked(\n\t\t\taddress indexed _of,\n\t\t\tbytes32 indexed _reason,\n\t\t\tuint256 _amount\n\t\t\t);\n\n\t/**\n\t * @dev Locks a specified amount of tokens against an address,\n\t *      for a specified reason and time\n\t * @param _reason The reason to lock tokens\n\t * @param _amount Number of tokens to be locked\n\t * @param _time Lock time in seconds\n\t * @param _of address to be locked\n\t */\n\tfunction lock(bytes32 _reason, uint256 _amount, uint256 _time, address _of)\n\t\tpublic returns (bool);\n\n\t/**\n\t * @dev Returns tokens locked for a specified address for a\n\t *      specified reason\n\t *\n\t * @param _of The address whose tokens are locked\n\t * @param _reason The reason to query the lock tokens for\n\t */\n\tfunction tokensLocked(address _of, bytes32 _reason)\n\t\tpublic view returns (uint256 amount);\n\n\t/**\n\t * @dev Returns tokens locked for a specified address for a\n\t *      specified reason at a specific time\n\t *\n\t * @param _of The address whose tokens are locked\n\t * @param _reason The reason to query the lock tokens for\n\t * @param _time The timestamp to query the lock tokens for\n\t */\n\tfunction tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time)\n\t\tpublic view returns (uint256 amount);\n\n\t/**\n\t * @dev Returns total tokens held by an address (locked + transferable)\n\t * @param _of The address to query the total balance of\n\t */\n\tfunction totalBalanceOf(address _of)\n\t\tpublic view returns (uint256 amount);\n\n\t/**\n\t * @dev Extends lock for a specified reason and time\n\t * @param _reason The reason to lock tokens\n\t * @param _time Lock extension time in seconds\n\t */\n\tfunction extendLock(bytes32 _reason, uint256 _time)\n\t\tpublic returns (bool);\n\n\t/**\n\t * @dev Increase number of tokens locked for a specified reason\n\t * @param _reason The reason to lock tokens\n\t * @param _amount Number of tokens to be increased\n\t */\n\tfunction increaseLockAmount(bytes32 _reason, uint256 _amount)\n\t\tpublic returns (bool);\n\n\t/**\n\t * @dev Returns unlockable tokens for a specified address for a specified reason\n\t * @param _of The address to query the the unlockable token count of\n\t * @param _reason The reason to query the unlockable tokens for\n\t */\n\tfunction tokensUnlockable(address _of, bytes32 _reason)\n\t\tpublic view returns (uint256 amount);\n\n\t/**\n\t * @dev Unlocks the unlockable tokens of a specified address\n\t * @param _of Address of user, claiming back unlockable tokens\n\t */\n\tfunction unlock(address _of)\n\t\tpublic returns (uint256 unlockableTokens);\n\n\t/**\n\t * @dev Gets the unlockable tokens of a specified address\n\t * @param _of The address to query the the unlockable token count of\n\t */\n\tfunction getUnlockableTokens(address _of)\n\t\tpublic view returns (uint256 unlockableTokens);\n\n}\n\ncontract CoblicToken is StandardToken, CoblicAccessControl, ERC1132 {\n\t// Define constants\n\tstring public constant name = \"Coblic Token\";\n\tstring public constant symbol = \"CT\";\n\tuint256 public constant decimals = 18;\n\tuint256 public constant INITIAL_SUPPLY = 20000000000 * (10 ** decimals);\n\n\tevent Mint(address minter, uint256 value);\n\tevent Burn(address burner, uint256 value);\n\n\t/**\n\t * @dev Error messages for require statements\n\t */\n\tstring internal constant INVALID_TOKEN_VALUES = 'Invalid token values';\n\tstring internal constant NOT_ENOUGH_TOKENS = 'Not enough tokens';\n\tstring internal constant ALREADY_LOCKED = 'Tokens already locked';\n\tstring internal constant NOT_LOCKED = 'No tokens locked';\n\tstring internal constant AMOUNT_ZERO = 'Amount can not be 0';\n\n\tconstructor(address _adminAddress, address _systemAddress, address _ceoAddress) public {\n\t\tadminAddress = _adminAddress;\n\t\tsystemAddress = _systemAddress;\n\t\tceoAddress = _ceoAddress;\n\t\ttotalSupply_ = INITIAL_SUPPLY;\n\t\tbalances[adminAddress] = INITIAL_SUPPLY;\n\t}\n\n\t/**\n\t * admin or system can call burn function to burn tokens in 0x0 address\n\t */\n\n\t/**\n\t * @dev Mint a specified amount of tokens to the Admin address. Only available to the Admin.\n\t * @param _to address to mint\n\t * @param _amount an amount value to be minted\n\t */\n\tfunction mint(address _to, uint256 _amount) public onlyAdmin {\n\t\trequire(_amount > 0, INVALID_TOKEN_VALUES);\n\t\tbalances[_to] = balances[_to].add(_amount);\n\t\ttotalSupply_ = totalSupply_.add(_amount);\n\t\temit Mint(_to, _amount);\n\t}\n\n\t/**\n\t * @dev Burn a specified amount of tokens in msg.sender. Only available to the Admin and System.\n\t * @param _of address to burn\n\t * @param _amount an amount value to be burned\n\t */\n\tfunction burn(address _of, uint256 _amount) public onlySystem {\n\t\trequire(_amount > 0, INVALID_TOKEN_VALUES);\n\t\trequire(_amount <= balances[_of], NOT_ENOUGH_TOKENS);\n\t\tbalances[_of] = balances[_of].sub(_amount);\n\t\ttotalSupply_ = totalSupply_.sub(_amount);\n\t\temit Burn(_of, _amount);\n\t}\n\n\t/**\n\t * @dev Locks a specified amount of tokens against an address,\n\t *      for a specified reason and time\n\t * @param _reason The reason to lock tokens\n\t * @param _amount Number of tokens to be locked\n\t * @param _time Lock time in seconds\n\t * @param _of address to be locked\n\t */\n\tfunction lock(bytes32 _reason, uint256 _amount, uint256 _time, address _of) public onlyAdmin returns (bool) {\n\t\tuint256 validUntil = now.add(_time); //solhint-disable-line\n\n\t\t// If tokens are already locked, then functions extendLock or\n\t\t// increaseLockAmount should be used to make any changes\n\t\trequire(_amount <= balances[_of], NOT_ENOUGH_TOKENS);\n\t\trequire(tokensLocked(_of, _reason) == 0, ALREADY_LOCKED);\n\t\trequire(_amount != 0, AMOUNT_ZERO);\n\n\t\tif (locked[_of][_reason].amount == 0)\n\t\t\tlockReason[_of].push(_reason);\n\n\t\tbalances[address(this)] = balances[address(this)].add(_amount);\n\t\tbalances[_of] = balances[_of].sub(_amount);\n\n\t\tlocked[_of][_reason] = lockToken(_amount, validUntil, false);\n\n\t\temit Transfer(_of, address(this), _amount);\n\t\temit Locked(_of, _reason, _amount, validUntil);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Transfers and Locks a specified amount of tokens,\n\t *      for a specified reason and time\n\t * @param _to adress to which tokens are to be transfered\n\t * @param _reason The reason to lock tokens\n\t * @param _amount Number of tokens to be transfered and locked\n\t * @param _time Lock time in seconds\n\t */\n\tfunction transferWithLock(address _to, bytes32 _reason, uint256 _amount, uint256 _time) public returns (bool) {\n\t\tuint256 validUntil = now.add(_time); //solhint-disable-line\n\n\t\trequire(tokensLocked(_to, _reason) == 0, ALREADY_LOCKED);\n\t\trequire(_amount != 0, AMOUNT_ZERO);\n\n\t\tif (locked[_to][_reason].amount == 0)\n\t\t\tlockReason[_to].push(_reason);\n\n\t\ttransfer(address(this), _amount);\n\n\t\tlocked[_to][_reason] = lockToken(_amount, validUntil, false);\n\n\t\temit Locked(_to, _reason, _amount, validUntil);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Returns tokens locked for a specified address for a\n\t *      specified reason\n\t *\n\t * @param _of The address whose tokens are locked\n\t * @param _reason The reason to query the lock tokens for\n\t */\n\tfunction tokensLocked(address _of, bytes32 _reason) public view returns (uint256 amount) {\n\t\tif (!locked[_of][_reason].claimed)\n\t\t\tamount = locked[_of][_reason].amount;\n\t}\n\n\t/**\n\t * @dev Returns tokens locked for a specified address for a\n\t *      specified reason at a specific time\n\t *\n\t * @param _of The address whose tokens are locked\n\t * @param _reason The reason to query the lock tokens for\n\t * @param _time The timestamp to query the lock tokens for\n\t */\n\tfunction tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time) public view returns (uint256 amount) {\n\t\tif (locked[_of][_reason].validity > _time)\n\t\t\tamount = locked[_of][_reason].amount;\n\t}\n\n\t/**\n\t * @dev Returns total tokens held by an address (locked + transferable)\n\t * @param _of The address to query the total balance of\n\t */\n\tfunction totalBalanceOf(address _of) public view returns (uint256 amount) {\n\t\tamount = balanceOf(_of);\n\n\t\tfor (uint256 i = 0; i < lockReason[_of].length; i++) {\n\t\t\tamount = amount.add(tokensLocked(_of, lockReason[_of][i]));\n\t\t}\n\t}\n\n\t/**\n\t * @dev Extends lock for a specified reason and time\n\t * @param _reason The reason to lock tokens\n\t * @param _time Lock extension time in seconds\n\t */\n\tfunction extendLock(bytes32 _reason, uint256 _time) public returns (bool) {\n\t\trequire(tokensLocked(msg.sender, _reason) > 0, NOT_LOCKED);\n\n\t\tlocked[msg.sender][_reason].validity = locked[msg.sender][_reason].validity.add(_time);\n\n\t\temit Locked(msg.sender, _reason, locked[msg.sender][_reason].amount, locked[msg.sender][_reason].validity);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Increase number of tokens locked for a specified reason\n\t * @param _reason The reason to lock tokens\n\t * @param _amount Number of tokens to be increased\n\t */\n\tfunction increaseLockAmount(bytes32 _reason, uint256 _amount) public returns (bool) {\n\t\trequire(tokensLocked(msg.sender, _reason) > 0, NOT_LOCKED);\n\t\ttransfer(address(this), _amount);\n\n\t\tlocked[msg.sender][_reason].amount = locked[msg.sender][_reason].amount.add(_amount);\n\n\t\temit Locked(msg.sender, _reason, locked[msg.sender][_reason].amount, locked[msg.sender][_reason].validity);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Returns unlockable tokens for a specified address for a specified reason\n\t * @param _of The address to query the the unlockable token count of\n\t * @param _reason The reason to query the unlockable tokens for\n\t */\n\tfunction tokensUnlockable(address _of, bytes32 _reason) public view returns (uint256 amount) {\n\t\tif (locked[_of][_reason].validity <= now && !locked[_of][_reason].claimed) //solhint-disable-line\n\t\t\tamount = locked[_of][_reason].amount;\n\t}\n\n\t/**\n\t * @dev Unlocks the unlockable tokens of a specified address\n\t * @param _of Address of user, claiming back unlockable tokens\n\t */\n\tfunction unlock(address _of) public returns (uint256 unlockableTokens) {\n\t\tuint256 lockedTokens;\n\n\t\tfor (uint256 i = 0; i < lockReason[_of].length; i++) {\n\t\t\tlockedTokens = tokensUnlockable(_of, lockReason[_of][i]);\n\t\t\tif (lockedTokens > 0) {\n\t\t\t\tunlockableTokens = unlockableTokens.add(lockedTokens);\n\t\t\t\tlocked[_of][lockReason[_of][i]].claimed = true;\n\t\t\t\temit Unlocked(_of, lockReason[_of][i], lockedTokens);\n\t\t\t}\n\t\t}  \n\n\t\tif (unlockableTokens > 0)\n\t\t\tthis.transfer(_of, unlockableTokens);\n\t}\n\n\t/**\n\t * @dev Gets the unlockable tokens of a specified address\n\t * @param _of The address to query the the unlockable token count of\n\t */\n\tfunction getUnlockableTokens(address _of) public view returns (uint256 unlockableTokens) {\n\t\tfor (uint256 i = 0; i < lockReason[_of].length; i++) {\n\t\t\tunlockableTokens = unlockableTokens.add(tokensUnlockable(_of, lockReason[_of][i]));\n\t\t}  \n\t}\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051606080611da783398101604090815281516020808401519383015160038054600160a060020a03948516600160a060020a0319918216179182905560048054978616978216979097179096556005805492851692909616919091179094556b409f9cbc7c4a04c2200000006001819055939091166000908152908190522055611d05806100a26000396000f3006080604052600436106101955763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461019a578063095ea7b3146102245780630a0f81681461025c578063179e91f11461028d57806318160ddd146102c65780631a69dc5c146102db57806323b872dd1461030557806327d7874c1461032f5780632f6c493c146103525780632ff2e9dc14610373578063313ce5671461038857806340c10f191461039d5780634b0ee02a146103c15780634cb5465f146103e25780635294d0e81461040c57806355837757146104305780635ca48d8c146104515780636618846314610475578063704b6c021461049957806370a08231146104ba57806371d66f00146104db57806381fc4d90146104ff57806395d89b411461051a5780639dc29fac1461052f578063a9059cbb14610553578063a9dab16714610577578063ab4a2eb314610592578063d3e848f1146105b3578063d71be8db146105c8578063d73dd6231461060c578063dd62ed3e14610630578063fc6f946814610657575b600080fd5b3480156101a657600080fd5b506101af61066c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101e95781810151838201526020016101d1565b50505050905090810190601f1680156102165780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023057600080fd5b50610248600160a060020a03600435166024356106a3565b604080519115158252519081900360200190f35b34801561026857600080fd5b5061027161070a565b60408051600160a060020a039092168252519081900360200190f35b34801561029957600080fd5b506102b4600160a060020a0360043516602435604435610719565b60408051918252519081900360200190f35b3480156102d257600080fd5b506102b4610774565b3480156102e757600080fd5b50610248600435602435604435600160a060020a036064351661077a565b34801561031157600080fd5b50610248600160a060020a0360043581169060243516604435610b23565b34801561033b57600080fd5b50610350600160a060020a0360043516610c98565b005b34801561035e57600080fd5b506102b4600160a060020a0360043516610d0a565b34801561037f57600080fd5b506102b4610f0a565b34801561039457600080fd5b506102b4610f1a565b3480156103a957600080fd5b50610350600160a060020a0360043516602435610f1f565b3480156103cd57600080fd5b506102b4600160a060020a036004351661105e565b3480156103ee57600080fd5b50610248600160a060020a03600435166024356044356064356110ed565b34801561041857600080fd5b506102b4600160a060020a0360043516602435611307565b34801561043c57600080fd5b50610350600160a060020a0360043516611392565b34801561045d57600080fd5b506102b4600160a060020a0360043516602435611404565b34801561048157600080fd5b50610248600160a060020a036004351660243561145d565b3480156104a557600080fd5b50610350600160a060020a036004351661154c565b3480156104c657600080fd5b506102b4600160a060020a03600435166115a7565b3480156104e757600080fd5b506102b4600160a060020a03600435166024356115c2565b34801561050b57600080fd5b506102486004356024356115f2565b34801561052657600080fd5b506101af61170a565b34801561053b57600080fd5b50610350600160a060020a0360043516602435611741565b34801561055f57600080fd5b50610248600160a060020a0360043516602435611939565b34801561058357600080fd5b50610248600435602435611a18565b34801561059e57600080fd5b506102b4600160a060020a0360043516611b2c565b3480156105bf57600080fd5b50610271611b89565b3480156105d457600080fd5b506105ec600160a060020a0360043516602435611b98565b604080519384526020840192909252151582820152519081900360600190f35b34801561061857600080fd5b50610248600160a060020a0360043516602435611bc7565b34801561063c57600080fd5b506102b4600160a060020a0360043581169060243516611c60565b34801561066357600080fd5b50610271611c8b565b60408051808201909152600c81527f436f626c696320546f6b656e0000000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b600554600160a060020a031681565b600160a060020a038316600090815260076020908152604080832085845290915281206001015482101561076d5750600160a060020a03831660009081526007602090815260408083208584529091529020545b9392505050565b60015490565b6003546000908190600160a060020a0316331461079657600080fd5b6107a6428563ffffffff611c9a16565b600160a060020a03841660009081526020818152604091829020548251808401909352601183527f4e6f7420656e6f75676820746f6b656e7300000000000000000000000000000091830191909152919250908611156108875760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561084c578181015183820152602001610834565b50505050905090810190601f1680156108795780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506108928387611404565b60408051808201909152601581527f546f6b656e7320616c7265616479206c6f636b65640000000000000000000000602082015290156109175760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561084c578181015183820152602001610834565b5060408051808201909152601381527f416d6f756e742063616e206e6f74206265203000000000000000000000000000602082015285151561099e5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561084c578181015183820152602001610834565b50600160a060020a038316600090815260076020908152604080832089845290915290205415156109f557600160a060020a0383166000908152600660209081526040822080546001810182559083529120018690555b30600090815260208190526040902054610a15908663ffffffff611c9a16565b3060009081526020819052604080822092909255600160a060020a03851681522054610a47908663ffffffff611ca716565b600160a060020a038416600081815260208181526040808320949094558351606081018552898152808201868152818601848152858552600784528685208d86528452938690209151825551600182015591516002909201805460ff1916921515929092179091558251888152925130937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92908290030190a3604080518681526020810183905281518892600160a060020a03871692600080516020611cba833981519152929081900390910190a350600195945050505050565b600160a060020a038316600090815260208190526040812054821115610b4857600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115610b7857600080fd5b600160a060020a0383161515610b8d57600080fd5b600160a060020a038416600090815260208190526040902054610bb6908363ffffffff611ca716565b600160a060020a038086166000908152602081905260408082209390935590851681522054610beb908363ffffffff611c9a16565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610c2d908363ffffffff611ca716565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600554600160a060020a0316331480610cbb5750600354600160a060020a031633145b1515610cc657600080fd5b600160a060020a0381161515610cdb57600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080805b600160a060020a038416600090815260066020526040902054811015610e6557600160a060020a03841660009081526006602052604090208054610d6991869184908110610d5957fe5b9060005260206000200154611307565b91506000821115610e5d57610d84838363ffffffff611c9a16565b600160a060020a038516600090815260076020908152604080832060069092528220805493965060019391929185908110610dbb57fe5b60009182526020808320919091015483528281019390935260409182018120600201805460ff191694151594909417909355600160a060020a038716835260069091529020805482908110610e0c57fe5b90600052602060002001546000191684600160a060020a03167f11f87fd5adcd05786919b8b868f59a70d78ae4eb6f305c5927f9c5b1659841a4846040518082815260200191505060405180910390a35b600101610d0f565b6000831115610f0357604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0386166004820152602481018590529051309163a9059cbb9160448083019260209291908290030181600087803b158015610ed657600080fd5b505af1158015610eea573d6000803e3d6000fd5b505050506040513d6020811015610f0057600080fd5b50505b5050919050565b6b409f9cbc7c4a04c22000000081565b601281565b600354600160a060020a03163314610f3657600080fd5b60408051808201909152601481527f496e76616c696420746f6b656e2076616c756573000000000000000000000000602082015260008211610fbd5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561084c578181015183820152602001610834565b50600160a060020a038216600090815260208190526040902054610fe7908263ffffffff611c9a16565b600160a060020a038316600090815260208190526040902055600154611013908263ffffffff611c9a16565b60015560408051600160a060020a03841681526020810183905281517f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885929181900390910190a15050565b60008061106a836115a7565b9150600090505b600160a060020a0383166000908152600660205260409020548110156110e757600160a060020a038316600090815260066020526040902080546110dd916110d091869190859081106110c057fe5b9060005260206000200154611404565b839063ffffffff611c9a16565b9150600101611071565b50919050565b600080611100428463ffffffff611c9a16565b905061110c8686611404565b60408051808201909152601581527f546f6b656e7320616c7265616479206c6f636b65640000000000000000000000602082015290156111915760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561084c578181015183820152602001610834565b5060408051808201909152601381527f416d6f756e742063616e206e6f7420626520300000000000000000000000000060208201528415156112185760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561084c578181015183820152602001610834565b50600160a060020a0386166000908152600760209081526040808320888452909152902054151561126f57600160a060020a0386166000908152600660209081526040822080546001810182559083529120018590555b6112793085611939565b506040805160608101825285815260208082018481526000838501818152600160a060020a038c16808352600785528683208c8452855291869020945185559151600185015590516002909301805460ff191693151593909317909255825187815290810184905282518893600080516020611cba833981519152928290030190a350600195945050505050565b600160a060020a038216600090815260076020908152604080832084845290915281206001015442108015906113645750600160a060020a038316600090815260076020908152604080832085845290915290206002015460ff16155b156107045750600160a060020a03919091166000908152600760209081526040808320938352929052205490565b600454600160a060020a03163314806113b55750600354600160a060020a031633145b15156113c057600080fd5b600160a060020a03811615156113d557600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038216600090815260076020908152604080832084845290915281206002015460ff1615156107045750600160a060020a03919091166000908152600760209081526040808320938352929052205490565b336000908152600260209081526040808320600160a060020a03861684529091528120548083106114b157336000908152600260209081526040808320600160a060020a03881684529091528120556114e6565b6114c1818463ffffffff611ca716565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600354600160a060020a0316331461156357600080fd5b600160a060020a038116151561157857600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a031660009081526020819052604090205490565b6006602052816000526040600020818154811015156115dd57fe5b90600052602060002001600091509150505481565b6000806115ff3385611404565b60408051808201909152601081527f4e6f20746f6b656e73206c6f636b656400000000000000000000000000000000602082015291106116845760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561084c578181015183820152602001610834565b5061168f3083611939565b503360009081526007602090815260408083208684529091529020546116bb908363ffffffff611c9a16565b3360008181526007602090815260408083208884528252918290208481556001015482519485529084015280518693600080516020611cba83398151915292908290030190a350600192915050565b60408051808201909152600281527f4354000000000000000000000000000000000000000000000000000000000000602082015281565b600454600160a060020a03163314806117645750600354600160a060020a031633145b151561176f57600080fd5b60408051808201909152601481527f496e76616c696420746f6b656e2076616c7565730000000000000000000000006020820152600082116117f65760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561084c578181015183820152602001610834565b50600160a060020a03821660009081526020818152604091829020548251808401909352601183527f4e6f7420656e6f75676820746f6b656e73000000000000000000000000000000918301919091528211156118985760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561084c578181015183820152602001610834565b50600160a060020a0382166000908152602081905260409020546118c2908263ffffffff611ca716565b600160a060020a0383166000908152602081905260409020556001546118ee908263ffffffff611ca716565b60015560408051600160a060020a03841681526020810183905281517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5929181900390910190a15050565b3360009081526020819052604081205482111561195557600080fd5b600160a060020a038316151561196a57600080fd5b3360009081526020819052604090205461198a908363ffffffff611ca716565b3360009081526020819052604080822092909255600160a060020a038516815220546119bc908363ffffffff611c9a16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600080611a253385611404565b60408051808201909152601081527f4e6f20746f6b656e73206c6f636b65640000000000000000000000000000000060208201529110611aaa5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561084c578181015183820152602001610834565b50336000908152600760209081526040808320868452909152902060010154611ad9908363ffffffff611c9a16565b336000818152600760209081526040808320888452825291829020600181018590555482519081529081019390935280518693600080516020611cba83398151915292908290030190a350600192915050565b6000805b600160a060020a0383166000908152600660205260409020548110156110e757600160a060020a03831660009081526006602052604090208054611b7f916110d09186919085908110610d5957fe5b9150600101611b30565b600454600160a060020a031681565b600760209081526000928352604080842090915290825290208054600182015460029092015490919060ff1683565b336000908152600260209081526040808320600160a060020a0386168452909152812054611bfb908363ffffffff611c9a16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a031681565b8181018281101561070457fe5b600082821115611cb357fe5b509003905600ea90ef40963535482537f0689e05cb8d259e459ebd21530e826702294d0eafdda165627a7a723058201509146146041af804f6c125fa2fa1cf75bbbabf8b2f98b75a098e6fcc85432e002900000000000000000000000063e871cefe1b456c068c19d7ab5e22c302152550000000000000000000000000d9f4e62bba20a25b29e4ec10647786c7bc9ab174000000000000000000000000766749ca5dd8fe6a1c97fa90465144103cc9cf42",
  "constructorArguments": "00000000000000000000000063e871cefe1b456c068c19d7ab5e22c302152550000000000000000000000000d9f4e62bba20a25b29e4ec10647786c7bc9ab174000000000000000000000000766749ca5dd8fe6a1c97fa90465144103cc9cf42"
}