{
  "address": "0x1906ec68d06772d938d893a63f7bf35e0035d90a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AacColoredTokens",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-07\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\n//-----------------------------------------------------------------------------\n/// @title Ownable\n/// @dev The Ownable contract has an owner address, and provides basic \n///  authorization control functions, this simplifies the implementation of\n///  \"user permissions\".\n//-----------------------------------------------------------------------------\ncontract Ownable {\n    //-------------------------------------------------------------------------\n    /// @dev Emits when owner address changes by any mechanism.\n    //-------------------------------------------------------------------------\n    event OwnershipTransfer (address previousOwner, address newOwner);\n    \n    // Wallet address that can sucessfully execute onlyOwner functions\n    address owner;\n    \n    //-------------------------------------------------------------------------\n    /// @dev Sets the owner of the contract to the sender account.\n    //-------------------------------------------------------------------------\n    constructor() public {\n        owner = msg.sender;\n        emit OwnershipTransfer(address(0), owner);\n    }\n\n    //-------------------------------------------------------------------------\n    /// @dev Throws if called by any account other than `owner`.\n    //-------------------------------------------------------------------------\n    modifier onlyOwner() {\n        require(\n            msg.sender == owner,\n            \"Function can only be called by contract owner\"\n        );\n        _;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Transfer control of the contract to a newOwner.\n    /// @dev Throws if `_newOwner` is zero address.\n    /// @param _newOwner The address to transfer ownership to.\n    //-------------------------------------------------------------------------\n    function transferOwnership(address _newOwner) public onlyOwner {\n        // for safety, new owner parameter must not be 0\n        require (\n            _newOwner != address(0),\n            \"New owner address cannot be zero\"\n        );\n        // define local variable for old owner\n        address oldOwner = owner;\n        // set owner to new owner\n        owner = _newOwner;\n        // emit ownership transfer event\n        emit OwnershipTransfer(oldOwner, _newOwner);\n    }\n}\n\n\n//-----------------------------------------------------------------------------\n/// @title VIP 181 Interface - VIP 181-compliant view functions \n//-----------------------------------------------------------------------------\ninterface VIP181 {\n    function ownerOf(uint256 _tokenId) external view returns (address);\n    function getApproved(uint256 _tokenId) external view returns (address);\n    function isApprovedForAll(\n        address _owner, \n        address _operator\n    ) external view returns (bool);\n}\n\ninterface VIP180 {\n    function transferFrom(address _from, address _to, uint _tokens) external returns (bool);\n}\n\ninterface LockedTokenManager {    \n    function lockFrom(\n        address _tokenHolder, \n        address _tokenAddress, \n        uint _tokens, \n        uint _numberOfMonths\n    ) external returns(bool);\n    \n    function transferFromAndLock(\n        address _from,\n        address _to,\n        address _tokenAddress,\n        uint _tokens,\n        uint _numberOfMonths\n    ) external returns (bool);\n}\n\n\ncontract SegmentedTransfer is Ownable {\n    \n    struct TransferSettings {\n        uint burnedPercent;\n        uint lockedPercent;\n        uint transferredThenLockedPercent;\n        uint lockedMonths;\n    }\n    // Lock contract to interface with\n    LockedTokenManager public lockContract;\n\n    //-------------------------------------------------------------------------\n    /// @dev Throws if parameter is zero\n    //-------------------------------------------------------------------------\n    modifier notZero(uint _param) {\n        require(_param != 0, \"Parameter cannot be zero\");\n        _;\n    }\n    \n    //-------------------------------------------------------------------------\n    /// @notice Set the address of the lock interface to `_lockAddress`.\n    /// @dev Throws if aacAddress is the zero address.\n    /// @param _lockAddress The address of the lock interface.\n    //-------------------------------------------------------------------------\n    function setLockContract (address _lockAddress)\n        external \n        notZero(uint(_lockAddress)) \n        onlyOwner\n    {\n        // initialize contract to lockAddress\n        lockContract = LockedTokenManager(_lockAddress);\n    }\n    \n    //-------------------------------------------------------------------------\n    /// @notice (1)Burn (2)Lock (3)TransferThenLock (4)Transfer\n    //-------------------------------------------------------------------------\n    function segmentedTransfer(\n        address _tokenContractAddress,\n        address _to,\n        uint _totalTokens,\n        TransferSettings storage _transfer\n    ) internal {\n        uint tokensLeft = _totalTokens;\n        uint amount;\n        // burn\n        if (_transfer.burnedPercent > 0) {\n            amount = _totalTokens * _transfer.burnedPercent / 100;\n            VIP180(_tokenContractAddress).transferFrom(msg.sender, address(0), amount);\n            tokensLeft -= amount;\n        }\n        // Lock\n        if (_transfer.lockedPercent > 0) {\n            amount = _totalTokens * _transfer.lockedPercent / 100;\n            lockContract.lockFrom(\n                msg.sender, \n                _tokenContractAddress, \n                _transfer.lockedMonths, \n                amount\n            );\n            tokensLeft -= amount;\n        }\n        // Transfer Then Lock\n        if (_transfer.transferredThenLockedPercent > 0) {\n            amount = _totalTokens * _transfer.transferredThenLockedPercent / 100;\n            lockContract.transferFromAndLock(\n                msg.sender, \n                address(_to), \n                _tokenContractAddress, \n                _transfer.lockedMonths, \n                amount\n            );\n            tokensLeft -= amount;\n        }\n        // Transfer\n        if (tokensLeft > 0) {\n            VIP180(_tokenContractAddress).transferFrom(msg.sender, _to, tokensLeft);\n        }\n    }   \n}\n\n\n//-----------------------------------------------------------------------------\n/// @title AAC Colored Token Contract\n/// @notice defines colored token registration, creation, and spending\n///  functionality.\n//-----------------------------------------------------------------------------\ncontract AacColoredTokens is SegmentedTransfer {\n    //-------------------------------------------------------------------------\n    /// @dev Emits when a new colored token is created.\n    //-------------------------------------------------------------------------\n    event NewColor(address indexed _creator, string _name);\n\n    //-------------------------------------------------------------------------\n    /// @dev Emits when colored tokens are deposited into AACs.\n    //-------------------------------------------------------------------------\n    event DepositColor(uint indexed _to, uint indexed _colorIndex, uint _tokens);\n\n    //-------------------------------------------------------------------------\n    /// @dev Emits when colored tokens are spent by any mechanism.\n    //-------------------------------------------------------------------------\n    event SpendColor(\n        uint indexed _from, \n        uint indexed _color, \n        uint _amount\n    );\n\n    // Colored token data\n    struct ColoredToken {\n        address creator;\n        string name;\n        mapping (uint => uint) balances;\n        mapping (address => uint) depositAllowances;\n    }\n\n    // array containing all colored token data\n    ColoredToken[] coloredTokens;\n    // required locked tokens needed to register a color\n    uint public priceToRegisterColor = 100000 * 10**18;\n    // AAC contract to interface with\n    VIP181 public aacContract;\n    // Contract address whose tokens we accept\n    address public ehrtAddress;\n    // transfer percentages for colored token registration\n    TransferSettings public colorRegistrationTransfer = TransferSettings({\n        burnedPercent: 50,\n        lockedPercent: 0,\n        transferredThenLockedPercent: 0,\n        lockedMonths: 24\n    });\n    // transfer percentages for colored token minting/depositing\n    TransferSettings public colorDepositTransfer = TransferSettings({\n        burnedPercent: 50,\n        lockedPercent: 0,\n        transferredThenLockedPercent: 0,\n        lockedMonths: 24\n    });\n    uint constant UID_MAX = 0xFFFFFFFFFFFFFF;\n\n    //-------------------------------------------------------------------------\n    /// @notice Set the address of the AAC interface to `_aacAddress`.\n    /// @dev Throws if aacAddress is the zero address.\n    /// @param _aacAddress The address of the AAC interface.\n    //-------------------------------------------------------------------------\n    function setAacContract (address _aacAddress) \n        external \n        notZero(uint(_aacAddress)) \n        onlyOwner\n    {\n        // initialize contract to aacAddress\n        aacContract = VIP181(_aacAddress);\n    }\n    \n    //-------------------------------------------------------------------------\n    /// @notice Set the address of the VIP180 to `_newAddress`.\n    /// @dev Throws if ehrtAddress is the zero address.\n    /// @param _newAddress The address of the Eight Hours Token.\n    //-------------------------------------------------------------------------\n    function setEhrtContractAddress (address _newAddress) \n        external \n        notZero(uint(_newAddress)) \n        onlyOwner\n    {\n        // initialize ehrtAddress to new address\n        ehrtAddress = _newAddress;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Set required total locked tokens to \n    ///  `(newAmount/1000000000000000000).fixed(0,18)`.\n    /// @dev Throws if the sender is not the contract owner. Throws if new\n    ///  amount is zero.\n    /// @param _newAmount The new required locked token amount.\n    //-------------------------------------------------------------------------\n    function setPriceToRegisterColor(uint _newAmount) \n        external \n        onlyOwner\n        notZero(_newAmount)\n    {\n        priceToRegisterColor = _newAmount;\n    }\n    \n    function setTransferSettingsForColoredTokenCreation(\n        uint _burnPercent,\n        uint _lockPercent,\n        uint _transferLockPercent,\n        uint _lockedMonths\n    ) external onlyOwner {\n        require(_burnPercent + _lockPercent + _transferLockPercent <= 100);\n        colorRegistrationTransfer = TransferSettings(\n            _burnPercent, \n            _lockPercent, \n            _transferLockPercent,\n            _lockedMonths\n        );\n    }\n    \n    function setTransferSettingsForColoredTokenDeposits(\n        uint _burnPercent,\n        uint _lockPercent,\n        uint _transferLockPercent,\n        uint _lockedMonths\n    ) external onlyOwner {\n        require(_burnPercent + _lockPercent + _transferLockPercent <= 100);\n        colorDepositTransfer = TransferSettings(\n            _burnPercent, \n            _lockPercent, \n            _transferLockPercent,\n            _lockedMonths\n        );\n    }\n    \n    //-------------------------------------------------------------------------\n    /// @notice Registers `_colorName` as a new colored token. Costs \n    ///  `priceToRegisterColor` tokens.\n    /// @dev Throws if `msg.sender` has insufficient tokens. Throws if colorName\n    ///  is empty or is longer than 32 characters.\n    /// @param _colorName The name for the new colored token.\n    /// @return Index number for the new colored token.\n    //-------------------------------------------------------------------------\n    function registerNewColor(string calldata _colorName) external returns (uint) {\n        // colorName must be a valid length\n        require (\n            bytes(_colorName).length > 0 && bytes(_colorName).length < 32,\n            \"Invalid color name length\"\n        );\n        // send Eight Hours tokens\n        segmentedTransfer(ehrtAddress, owner, priceToRegisterColor, colorRegistrationTransfer);\n        // push new colored token to colored token array and store the index\n        uint index = coloredTokens.push(ColoredToken(msg.sender, _colorName));\n        return index;\n    }\n    \n    //-------------------------------------------------------------------------\n    /// @notice Allow `_spender` to deposit colored token #`_colorIndex`\n    ///  multiple times, up to `(_tokens/1000000000000000000).fixed(0,18)`. \n    ///  Calling this function overwrites the previous allowance of spender.\n    /// @param _colorIndex The index of the color to approve.\n    /// @param _spender The address to authorize as a spender\n    /// @param _tokens The new token allowance of spender (in wei).\n    //-------------------------------------------------------------------------\n    function approve(uint _colorIndex, address _spender, uint _tokens) external {\n        require(msg.sender == coloredTokens[_colorIndex].creator);\n        // set the spender's allowance to token amount\n        coloredTokens[_colorIndex].depositAllowances[_spender] = _tokens;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Deposits colored tokens with index `colorIndex` into AAC #`uid`.\n    ///  Costs `_tokens` tokens.\n    /// @dev Throws if tokens to deposit is zero. Throws if colorIndex is\n    ///  greater than number of colored tokens. Throws if `msg.sender` has\n    ///  insufficient balance. Throws if AAC does not have an owner. Throws if\n    ///  sender does not have enough deposit allowance (creator has unlimited).\n    /// @param _to The Unique Identifier of the AAC receiving tokens.\n    /// @param _colorIndex The index of the color to deposit.\n    /// @param _tokens The number of colored tokens to deposit.\n    //-------------------------------------------------------------------------\n    function deposit (uint _colorIndex, uint _to, uint _tokens)\n        external \n        notZero(_tokens)\n    {\n        // colorIndex must be valid color\n        require (_colorIndex < coloredTokens.length, \"Invalid color index\");\n        // sender must be colored token creator\n        require (\n            msg.sender == coloredTokens[_colorIndex].creator ||\n            coloredTokens[_colorIndex].depositAllowances[msg.sender] >= _tokens,\n            \"Not authorized to deposit this color\"\n        );\n        // If AAC #uid is not owned, it does not exist yet.\n        require(aacContract.ownerOf(_to) != address(0), \"AAC does not exist\");\n        \n        // Initiate spending. Fails if sender's balance is too low.\n        segmentedTransfer(ehrtAddress, owner, _tokens, colorDepositTransfer);\n\n        // add tokens to AAC #UID\n        coloredTokens[_colorIndex].balances[_to] += _tokens;\n        \n        // subtract tokens from allowance\n        if (msg.sender != coloredTokens[_colorIndex].creator) {\n            coloredTokens[_colorIndex].depositAllowances[msg.sender] -= _tokens;\n        }\n        \n        // emit color transfer event\n        emit DepositColor(_to, _colorIndex, _tokens);\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Deposits colored tokens with index `colorIndex` into multiple \n    ///  AACs. Costs (`_tokens` * number of AACs) tokens.\n    /// @dev Throws if tokens to deposit is zero. Throws if colorIndex is\n    ///  greater than number of colored tokens. Throws if sender has\n    ///  insufficient balance. Throws if any AAC does not have an owner. Throws\n    ///  if sender does not have enough deposit allowance (creator has unlimited).\n    /// @param _to The Unique Identifier of the AAC receiving tokens.\n    /// @param _colorIndex The index of the color to deposit.\n    /// @param _tokens The number of colored tokens to deposit for each AAC.\n    //-------------------------------------------------------------------------\n    function depositBulk (uint _colorIndex, uint[] calldata _to, uint _tokens)\n        external \n        notZero(_tokens)\n    {\n        // colorIndex must be valid color\n        require (_colorIndex < coloredTokens.length, \"Invalid color index\");\n        // sender must be colored token creator\n        require (\n            msg.sender == coloredTokens[_colorIndex].creator ||\n            coloredTokens[_colorIndex].depositAllowances[msg.sender] > _tokens * _to.length,\n            \"Not authorized to deposit this color\"\n        );\n\n        // Initiate lock. Fails if sender's balance is too low.\n        segmentedTransfer(ehrtAddress, owner, _tokens * _to.length, colorDepositTransfer);\n\n        for(uint i = 0; i < _to.length; ++i){\n            // If AAC #uid is not owned, it does not exist yet.\n            require(aacContract.ownerOf(_to[i]) != address(0), \"AAC does not exist\");\n\n            // add tokens to AAC #UID\n            coloredTokens[_colorIndex].balances[_to[i]] += _tokens;\n            // emit color transfer event\n            emit DepositColor(_to[i], _colorIndex, _tokens);\n        }\n        \n        // subtract tokens from allowance\n        if (msg.sender != coloredTokens[_colorIndex].creator) {\n            coloredTokens[_colorIndex].depositAllowances[msg.sender] -= _tokens * _to.length;\n        }\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Spend `(tokens/1000000000000000000).fixed(0,18)` colored \n    ///  tokens with index `_colorIndex`.\n    /// @dev Throws if tokens to spend is zero. Throws if colorIndex is\n    ///  greater than number of colored tokens. Throws if AAC with uid#`_from`\n    ///  has insufficient balance to spend.\n    /// @param _colorIndex The index of the color to spend.\n    /// @param _from The UID of the AAC to spend from.\n    /// @param _tokens The number of colored tokens to spend.\n    /// @return True if spend successful. Throw if unsuccessful.\n    //-------------------------------------------------------------------------\n    function spend (uint _colorIndex, uint _from, uint _tokens) \n        external \n        notZero(_tokens)\n        returns(bool) \n    {\n        // colorIndex must be valid color\n        require (_colorIndex < coloredTokens.length, \"Invalid color index\");\n        // sender must own AAC\n        require (\n            msg.sender == aacContract.ownerOf(_from), \n            \"Sender is not owner of AAC\"\n        );\n        // token owner's balance must be enough to spend tokens\n        require (\n            coloredTokens[_colorIndex].balances[_from] >= _tokens,\n            \"Insufficient tokens to spend\"\n        );\n        // deduct the tokens from the sender's balance\n        coloredTokens[_colorIndex].balances[_from] -= _tokens;\n        // emit spend event\n        emit SpendColor(_from, _colorIndex, _tokens);\n        return true;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Spend `(tokens/1000000000000000000).fixed(0,18)` colored\n    ///  tokens with color index `_colorIndex` from AAC with uid#`_from`.\n    /// @dev Throws if tokens to spend is zero. Throws if colorIndex is \n    ///  greater than number of colored tokens. Throws if sender is not\n    ///  an authorized operator of AAC. Throws if `from` has insufficient\n    ///  balance to spend.\n    /// @param _colorIndex The index of the color to spend.\n    /// @param _from The address whose colored tokens are being spent.\n    /// @param _tokens The number of tokens to send.\n    /// @return True if spend successful. Throw if unsuccessful.\n    //-------------------------------------------------------------------------\n    function spendFrom(uint _colorIndex, uint _from, uint _tokens)\n        external \n        notZero(_tokens)\n        returns (bool) \n    {\n        // colorIndex must be valid color\n        require (_colorIndex < coloredTokens.length, \"Invalid color index\");\n        // sender must be authorized address or operator for AAC\n        require (\n            msg.sender == aacContract.getApproved(_from) ||\n            aacContract.isApprovedForAll(aacContract.ownerOf(_from), msg.sender), \n            \"Sender is not authorized operator for AAC\"\n        );\n        // token owner's balance must be enough to spend tokens\n        require (\n            coloredTokens[_colorIndex].balances[_from] >= _tokens,\n            \"Insufficient balance to spend\"\n        );\n        // deduct the tokens from token owner's balance\n        coloredTokens[_colorIndex].balances[_from] -= _tokens;\n        // emit spend event\n        emit SpendColor(_from, _colorIndex, _tokens);\n        return true;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Transfer balances of colored tokens to new uid. AAC contract\n    ///  only.\n    /// @dev throws unless sent by AAC contract\n    //-------------------------------------------------------------------------\n    function onLink(uint _oldUid, uint _newUid) external {\n        require (msg.sender == address(aacContract), \"Unauthorized transaction\");\n        require (_oldUid > UID_MAX && _newUid <= UID_MAX);\n        for(uint i = 0; i < coloredTokens.length; ++i) {\n            coloredTokens[i].balances[_newUid] = coloredTokens[i].balances[_oldUid];\n        }\n    }\n    \n    //-------------------------------------------------------------------------\n    /// @notice Get the number of colored tokens with color index `_colorIndex`\n    ///  owned by AAC #`_uid`.\n    /// @param _uid The AAC with deposited color tokens.\n    /// @param _colorIndex Index of the colored token to query.\n    /// @return The number of colored tokens with color index `_colorIndex`\n    ///  owned by AAC #`_uid`.\n    //-------------------------------------------------------------------------\n    function getColoredTokenBalance(uint _uid, uint _colorIndex) \n        external \n        view \n        returns(uint) \n    {\n        return coloredTokens[_colorIndex].balances[_uid];\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Count the number of colored token types\n    /// @return Number of colored token types\n    //-------------------------------------------------------------------------\n    function coloredTokenCount() external view returns (uint) {\n        return coloredTokens.length;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Get the name and creator address of colored token with index\n    ///  `_colorIndex`\n    /// @param _colorIndex Index of the colored token to query.\n    /// @return The creator address and name of colored token.\n    //-------------------------------------------------------------------------\n    function getColoredToken(uint _colorIndex) \n        external \n        view \n        returns(address, string memory)\n    {\n        return (\n            coloredTokens[_colorIndex].creator, \n            coloredTokens[_colorIndex].name\n        );\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_colorIndex\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_colorIndex\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"spend\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ehrtAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldUid\",\"type\":\"uint256\"},{\"name\":\"_newUid\",\"type\":\"uint256\"}],\"name\":\"onLink\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aacContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setEhrtContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"colorRegistrationTransfer\",\"outputs\":[{\"name\":\"burnedPercent\",\"type\":\"uint256\"},{\"name\":\"lockedPercent\",\"type\":\"uint256\"},{\"name\":\"transferredThenLockedPercent\",\"type\":\"uint256\"},{\"name\":\"lockedMonths\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnPercent\",\"type\":\"uint256\"},{\"name\":\"_lockPercent\",\"type\":\"uint256\"},{\"name\":\"_transferLockPercent\",\"type\":\"uint256\"},{\"name\":\"_lockedMonths\",\"type\":\"uint256\"}],\"name\":\"setTransferSettingsForColoredTokenCreation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_colorIndex\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"spendFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceToRegisterColor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_colorIndex\",\"type\":\"uint256\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnPercent\",\"type\":\"uint256\"},{\"name\":\"_lockPercent\",\"type\":\"uint256\"},{\"name\":\"_transferLockPercent\",\"type\":\"uint256\"},{\"name\":\"_lockedMonths\",\"type\":\"uint256\"}],\"name\":\"setTransferSettingsForColoredTokenDeposits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"setPriceToRegisterColor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_colorIndex\",\"type\":\"uint256\"}],\"name\":\"getColoredToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockAddress\",\"type\":\"address\"}],\"name\":\"setLockContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coloredTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_uid\",\"type\":\"uint256\"},{\"name\":\"_colorIndex\",\"type\":\"uint256\"}],\"name\":\"getColoredTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aacAddress\",\"type\":\"address\"}],\"name\":\"setAacContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"colorDepositTransfer\",\"outputs\":[{\"name\":\"burnedPercent\",\"type\":\"uint256\"},{\"name\":\"lockedPercent\",\"type\":\"uint256\"},{\"name\":\"transferredThenLockedPercent\",\"type\":\"uint256\"},{\"name\":\"lockedMonths\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_colorName\",\"type\":\"string\"}],\"name\":\"registerNewColor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_colorIndex\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256[]\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"depositBulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"NewColor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_colorIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"DepositColor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_color\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SpendColor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"type\":\"event\"}]",
  "bytecode": "608060405269152d02c7e14af6800000600355608060405190810160405280603281526020016000815260200160008152602001601881525060066000820151816000015560208201518160010155604082015181600201556060820151816003015550506080604051908101604052806032815260200160008152602001600081526020016018815250600a600082015181600001556020820151816001015560408201518160020155606082015181600301555050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f22500af037c600dd7b720644ab6e358635085601d9ac508ad83eb2d6b2d729ca60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1613696806101be6000396000f3fe60806040526004361061012c576000357c010000000000000000000000000000000000000000000000000000000090048062aeef8a1461013157806319ca523b146101805780631f125f70146101e757806323d523ef1461023e57806325fe15051461028357806328fd46ec146102da57806352f9e3c41461032b578063566369e71461036b57806358e9f7d9146103c457806359c7b89c1461042b578063753868e3146104565780638cb0a511146104ad5780639a2d0cfa146105125780639b6bfda11461056b578063a26dd06f146105a6578063acd487c21461068d578063b3549265146106de578063bc9f51b814610709578063d367355114610762578063db2f978b146107b3578063eed1ff4e146107f3578063f2fde38b1461088d578063fcae033b146108de575b600080fd5b34801561013d57600080fd5b5061017e6004803603606081101561015457600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050610978565b005b34801561018c57600080fd5b506101cd600480360360608110156101a357600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050610efc565b604051808215151515815260200191505060405180910390f35b3480156101f357600080fd5b506101fc61128d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561024a57600080fd5b506102816004803603604081101561026157600080fd5b8101908080359060200190929190803590602001909291905050506112b3565b005b34801561028f57600080fd5b5061029861142a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102e657600080fd5b50610329600480360360208110156102fd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611450565b005b34801561033757600080fd5b5061034061160f565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b34801561037757600080fd5b506103c26004803603608081101561038e57600080fd5b810190808035906020019092919080359060200190929190803590602001909291908035906020019092919050505061162d565b005b3480156103d057600080fd5b50610411600480360360608110156103e757600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050611780565b604051808215151515815260200191505060405180910390f35b34801561043757600080fd5b50610440611d31565b6040518082815260200191505060405180910390f35b34801561046257600080fd5b5061046b611d37565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104b957600080fd5b50610510600480360360608110156104d057600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611d5d565b005b34801561051e57600080fd5b506105696004803603608081101561053557600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190505050611e3e565b005b34801561057757600080fd5b506105a46004803603602081101561058e57600080fd5b8101908080359060200190929190505050611f91565b005b3480156105b257600080fd5b506105df600480360360208110156105c957600080fd5b8101908080359060200190929190505050612100565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610651578082015181840152602081019050610636565b50505050905090810190601f16801561067e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561069957600080fd5b506106dc600480360360208110156106b057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061220a565b005b3480156106ea57600080fd5b506106f36123c9565b6040518082815260200191505060405180910390f35b34801561071557600080fd5b5061074c6004803603604081101561072c57600080fd5b8101908080359060200190929190803590602001909291905050506123d6565b6040518082815260200191505060405180910390f35b34801561076e57600080fd5b506107b16004803603602081101561078557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612412565b005b3480156107bf57600080fd5b506107c86125d1565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b3480156107ff57600080fd5b506108776004803603602081101561081657600080fd5b810190808035906020019064010000000081111561083357600080fd5b82018360208201111561084557600080fd5b8035906020019184600183028401116401000000008311171561086757600080fd5b90919293919293905050506125ef565b6040518082815260200191505060405180910390f35b34801561089957600080fd5b506108dc600480360360208110156108b057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506127dc565b005b3480156108ea57600080fd5b506109766004803603606081101561090157600080fd5b81019080803590602001909291908035906020019064010000000081111561092857600080fd5b82018360208201111561093a57600080fd5b8035906020019184602083028401116401000000008311171561095c57600080fd5b909192939192939080359060200190929190505050612a6c565b005b80600081141515156109f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f506172616d657465722063616e6e6f74206265207a65726f000000000000000081525060200191505060405180910390fd5b60028054905084101515610a6e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f496e76616c696420636f6c6f7220696e6465780000000000000000000000000081525060200191505060405180910390fd5b600284815481101515610a7d57fe5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610b45575081600285815481101515610af357fe5b906000526020600020906004020160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b1515610bdf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f4e6f7420617574686f72697a656420746f206465706f7369742074686973206381526020017f6f6c6f720000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610c8657600080fd5b505afa158015610c9a573d6000803e3d6000fd5b505050506040513d6020811015610cb057600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614151515610d4d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f41414320646f6573206e6f74206578697374000000000000000000000000000081525060200191505060405180910390fd5b610d9d600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600a613058565b81600285815481101515610dad57fe5b9060005260206000209060040201600201600085815260200190815260200160002060008282540192505081905550600284815481101515610deb57fe5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ebd5781600285815481101515610e6157fe5b906000526020600020906004020160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b83837fb02defe943439e66b28200d7f333e6cbff61934f5f8728e7f5fe8c50cc896b19846040518082815260200191505060405180910390a350505050565b60008160008114151515610f78576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f506172616d657465722063616e6e6f74206265207a65726f000000000000000081525060200191505060405180910390fd5b60028054905085101515610ff4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f496e76616c696420636f6c6f7220696e6465780000000000000000000000000081525060200191505060405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561108357600080fd5b505afa158015611097573d6000803e3d6000fd5b505050506040513d60208110156110ad57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611160576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f53656e646572206973206e6f74206f776e6572206f662041414300000000000081525060200191505060405180910390fd5b8260028681548110151561117057fe5b906000526020600020906004020160020160008681526020019081526020016000205410151515611209576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f496e73756666696369656e7420746f6b656e7320746f207370656e640000000081525060200191505060405180910390fd5b8260028681548110151561121957fe5b906000526020600020906004020160020160008681526020019081526020016000206000828254039250508190555084847ff65acda3c070e6374735218589b820fbc9d3aa5cd42bffc8da471695d48a7ad1856040518082815260200191505060405180910390a360019150509392505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611378576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f556e617574686f72697a6564207472616e73616374696f6e000000000000000081525060200191505060405180910390fd5b66ffffffffffffff82118015611395575066ffffffffffffff8111155b15156113a057600080fd5b60008090505b600280549050811015611425576002818154811015156113c257fe5b90600052602060002090600402016002016000848152602001908152602001600020546002828154811015156113f457fe5b90600052602060002090600402016002016000848152602001908152602001600020819055508060010190506113a6565b505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8073ffffffffffffffffffffffffffffffffffffffff16600081141515156114e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f506172616d657465722063616e6e6f74206265207a65726f000000000000000081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f46756e6374696f6e2063616e206f6e6c792062652063616c6c6564206279206381526020017f6f6e7472616374206f776e65720000000000000000000000000000000000000081525060400191505060405180910390fd5b81600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60068060000154908060010154908060020154908060030154905084565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611717576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f46756e6374696f6e2063616e206f6e6c792062652063616c6c6564206279206381526020017f6f6e7472616374206f776e65720000000000000000000000000000000000000081525060400191505060405180910390fd5b606482848601011115151561172b57600080fd5b6080604051908101604052808581526020018481526020018381526020018281525060066000820151816000015560208201518160010155604082015181600201556060820151816003015590505050505050565b600081600081141515156117fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f506172616d657465722063616e6e6f74206265207a65726f000000000000000081525060200191505060405180910390fd5b60028054905085101515611878576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f496e76616c696420636f6c6f7220696e6465780000000000000000000000000081525060200191505060405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663081812fc856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561190757600080fd5b505afa15801561191b573d6000803e3d6000fd5b505050506040513d602081101561193157600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611b6a5750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e985e9c5600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015611a4357600080fd5b505afa158015611a57573d6000803e3d6000fd5b505050506040513d6020811015611a6d57600080fd5b8101908080519060200190929190505050336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015611b2e57600080fd5b505afa158015611b42573d6000803e3d6000fd5b505050506040513d6020811015611b5857600080fd5b81019080805190602001909291905050505b1515611c04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f53656e646572206973206e6f7420617574686f72697a6564206f70657261746f81526020017f7220666f7220414143000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b82600286815481101515611c1457fe5b906000526020600020906004020160020160008681526020019081526020016000205410151515611cad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f496e73756666696369656e742062616c616e636520746f207370656e6400000081525060200191505060405180910390fd5b82600286815481101515611cbd57fe5b906000526020600020906004020160020160008681526020019081526020016000206000828254039250508190555084847ff65acda3c070e6374735218589b820fbc9d3aa5cd42bffc8da471695d48a7ad1856040518082815260200191505060405180910390a360019150509392505050565b60035481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600283815481101515611d6c57fe5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611dd757600080fd5b80600284815481101515611de757fe5b906000526020600020906004020160030160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f28576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f46756e6374696f6e2063616e206f6e6c792062652063616c6c6564206279206381526020017f6f6e7472616374206f776e65720000000000000000000000000000000000000081525060400191505060405180910390fd5b6064828486010111151515611f3c57600080fd5b60806040519081016040528085815260200184815260200183815260200182815250600a6000820151816000015560208201518160010155604082015181600201556060820151816003015590505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561207b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f46756e6374696f6e2063616e206f6e6c792062652063616c6c6564206279206381526020017f6f6e7472616374206f776e65720000000000000000000000000000000000000081525060400191505060405180910390fd5b80600081141515156120f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f506172616d657465722063616e6e6f74206265207a65726f000000000000000081525060200191505060405180910390fd5b816003819055505050565b6000606060028381548110151561211357fe5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028481548110151561215457fe5b9060005260206000209060040201600101808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121fa5780601f106121cf576101008083540402835291602001916121fa565b820191906000526020600020905b8154815290600101906020018083116121dd57829003601f168201915b5050505050905091509150915091565b8073ffffffffffffffffffffffffffffffffffffffff166000811415151561229a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f506172616d657465722063616e6e6f74206265207a65726f000000000000000081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612384576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f46756e6374696f6e2063616e206f6e6c792062652063616c6c6564206279206381526020017f6f6e7472616374206f776e65720000000000000000000000000000000000000081525060400191505060405180910390fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000600280549050905090565b60006002828154811015156123e757fe5b9060005260206000209060040201600201600084815260200190815260200160002054905092915050565b8073ffffffffffffffffffffffffffffffffffffffff16600081141515156124a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f506172616d657465722063616e6e6f74206265207a65726f000000000000000081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561258c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f46756e6374696f6e2063616e206f6e6c792062652063616c6c6564206279206381526020017f6f6e7472616374206f776e65720000000000000000000000000000000000000081525060400191505060405180910390fd5b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600a8060000154908060010154908060020154908060030154905084565b600080838390501180156126065750602083839050105b151561267a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f496e76616c696420636f6c6f72206e616d65206c656e6774680000000000000081525060200191505060405180910390fd5b6126cc600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166003546006613058565b6000600260408051908101604052803373ffffffffffffffffffffffffffffffffffffffff16815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152509080600181540180825580915050906001820390600052602060002090600402016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906127cd9291906135c5565b50505090508091505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156128c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f46756e6374696f6e2063616e206f6e6c792062652063616c6c6564206279206381526020017f6f6e7472616374206f776e65720000000000000000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561296b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4e6577206f776e657220616464726573732063616e6e6f74206265207a65726f81525060200191505060405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f22500af037c600dd7b720644ab6e358635085601d9ac508ad83eb2d6b2d729ca8183604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15050565b8060008114151515612ae6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f506172616d657465722063616e6e6f74206265207a65726f000000000000000081525060200191505060405180910390fd5b60028054905085101515612b62576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f496e76616c696420636f6c6f7220696e6465780000000000000000000000000081525060200191505060405180910390fd5b600285815481101515612b7157fe5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612c3d5750838390508202600286815481101515612bec57fe5b906000526020600020906004020160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b1515612cd7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f4e6f7420617574686f72697a656420746f206465706f7369742074686973206381526020017f6f6c6f720000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b612d2c600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868690508502600a613058565b60008090505b84849050811015612f6a57600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8787858181101515612da157fe5b905060200201356040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015612df857600080fd5b505afa158015612e0c573d6000803e3d6000fd5b505050506040513d6020811015612e2257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614151515612ebf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f41414320646f6573206e6f74206578697374000000000000000000000000000081525060200191505060405180910390fd5b82600287815481101515612ecf57fe5b906000526020600020906004020160020160008787858181101515612ef057fe5b90506020020135815260200190815260200160002060008282540192505081905550858585838181101515612f2157fe5b905060200201357fb02defe943439e66b28200d7f333e6cbff61934f5f8728e7f5fe8c50cc896b19856040518082815260200191505060405180910390a3806001019050612d32565b50600285815481101515612f7a57fe5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561305157838390508202600286815481101515612ff557fe5b906000526020600020906004020160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b5050505050565b60008290506000808360000154111561319a5760648360000154850281151561307d57fe5b0490508573ffffffffffffffffffffffffffffffffffffffff166323b872dd336000846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561315857600080fd5b505af115801561316c573d6000803e3d6000fd5b505050506040513d602081101561318257600080fd5b81019080805190602001909291905050505080820391505b600083600101541115613303576064836001015485028115156131b957fe5b049050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcef06bf33888660030154856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001945050505050602060405180830381600087803b1580156132c157600080fd5b505af11580156132d5573d6000803e3d6000fd5b505050506040513d60208110156132eb57600080fd5b81019080805190602001909291905050505080820391505b6000836002015411156134a05760648360020154850281151561332257fe5b049050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cda092d03387898760030154866040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200195505050505050602060405180830381600087803b15801561345e57600080fd5b505af1158015613472573d6000803e3d6000fd5b505050506040513d602081101561348857600080fd5b81019080805190602001909291905050505080820391505b60008211156135bd578573ffffffffffffffffffffffffffffffffffffffff166323b872dd3387856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561358057600080fd5b505af1158015613594573d6000803e3d6000fd5b505050506040513d60208110156135aa57600080fd5b8101908080519060200190929190505050505b505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061360657805160ff1916838001178555613634565b82800160010185558215613634579182015b82811115613633578251825591602001919060010190613618565b5b5090506136419190613645565b5090565b61366791905b8082111561366357600081600090555060010161364b565b5090565b9056fea165627a7a723058204ad6ce70e3e926798055029f44a8e1ebb60d2eed78d0eb16108e47727f3d97d50029"
}