{
  "address": "0xebf6245689194a6e43096551567827c6726ede0b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BatchedPayments",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-20\n*/\n\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    if (msg.sender != owner) {\n      throw;\n    }\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n\ncontract ERC20Basic {\n  uint public totalSupply;\n  function balanceOf(address who) constant returns (uint);\n  function transfer(address to, uint value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint);\n  function transferFrom(address from, address to, uint value) returns (bool);\n  function approve(address spender, uint value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n/*\nThe owner (or anyone) will deposit tokens in here\nThe owner calls the multisend method to send out payments\n*/\ncontract BatchedPayments is Ownable {\n\n    mapping(bytes32 => bool) successfulPayments;\n\n\n    function paymentSuccessful(bytes32 paymentId) public constant returns (bool){\n        return (successfulPayments[paymentId] == true);\n    }\n\n    //withdraw any eth inside\n    function withdraw() public onlyOwner {\n        msg.sender.transfer(this.balance);\n    }\n\n    function send(address _tokenAddr, address dest, uint value)\n    public onlyOwner\n    returns (bool)\n    {\n     return ERC20(_tokenAddr).transfer(dest, value);\n    }\n\n    function multisend(address _tokenAddr, bytes32 paymentId, address[] dests, uint256[] values)\n    public onlyOwner\n    returns (uint256)\n     {\n\n        require(dests.length > 0);\n        require(values.length >= dests.length);\n        require(successfulPayments[paymentId] != true);\n\n        uint256 i = 0;\n        while (i < dests.length) {\n           require(ERC20(_tokenAddr).transfer(dests[i], values[i]));\n           i += 1;\n        }\n\n        successfulPayments[paymentId] = true;\n\n        return (i);\n\n    }\n\n\n\n}",
  "bytecode": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061086f806100536000396000f300608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063066b31361461007d5780630779afe6146100c6578063206ec7a11461014b5780633ccfd60b146102365780638da5cb5b1461024d578063f2fde38b146102a4575b600080fd5b34801561008957600080fd5b506100ac60048036038101908080356000191690602001909291905050506102e7565b604051808215151515815260200191505060405180910390f35b3480156100d257600080fd5b50610131600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610320565b604051808215151515815260200191505060405180910390f35b34801561015757600080fd5b50610220600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080356000191690602001909291908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610464565b6040518082815260200191505060405180910390f35b34801561024257600080fd5b5061024b61068e565b005b34801561025957600080fd5b50610262610749565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102b057600080fd5b506102e5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061076e565b005b60006001151560016000846000191660001916815260200190815260200160002060009054906101000a900460ff161515149050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561037d57600080fd5b8373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561042057600080fd5b505af1158015610434573d6000803e3d6000fd5b505050506040513d602081101561044a57600080fd5b810190808051906020019092919050505090509392505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104c257600080fd5b600084511115156104d257600080fd5b83518351101515156104e357600080fd5b6001151560016000876000191660001916815260200190815260200160002060009054906101000a900460ff1615151415151561051f57600080fd5b600090505b835181101561064f578573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb858381518110151561055757fe5b90602001906020020151858481518110151561056f57fe5b906020019060200201516040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156105fe57600080fd5b505af1158015610612573d6000803e3d6000fd5b505050506040513d602081101561062857600080fd5b8101908080519060200190929190505050151561064457600080fd5b600181019050610524565b6001806000876000191660001916815260200190815260200160002060006101000a81548160ff02191690831515021790555080915050949350505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106e957600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610746573d6000803e3d6000fd5b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107c957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561084057806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505600a165627a7a72305820d884a9f1fb9dbdd9ed0ad8ecb78382ed46a67597555ea0cf75d99d481f1899770029"
}