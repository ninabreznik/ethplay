{
  "address": "0xcee7eea7e58434997a59049f7da4d0ad46f1f141",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KulapDex",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-25\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n      require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n\n/**\n * @title ERC20\n * @dev The ERC20 interface has an standard functions and event\n * for erc20 compatible token on Ethereum blockchain.\n */\ninterface ERC20 {\n    function totalSupply() external view returns (uint supply);\n    function balanceOf(address _owner) external view returns (uint balance);\n    function transfer(address _to, uint _value) external; // Some ERC20 doesn't have return\n    function transferFrom(address _from, address _to, uint _value) external; // Some ERC20 doesn't have return\n    function approve(address _spender, uint _value) external; // Some ERC20 doesn't have return\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\n    function decimals() external view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n\n/**\n * @title KULAP Trading Proxy\n * @dev The KULAP trading proxy interface has an standard functions and event\n * for other smart contract to implement to join KULAP Dex as Market Maker. \n */\ninterface KULAPTradingProxy {\n    // Trade event\n    /// @dev when new trade occure (and success), this event will be boardcast. \n    /// @param src Source token\n    /// @param srcAmount amount of source tokens\n    /// @param dest   Destination token\n    /// @return amount of actual destination tokens\n    event Trade( ERC20 src, uint256 srcAmount, ERC20 dest, uint256 destAmount);\n\n    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n    /// @dev makes a trade between src and dest token and send dest token to destAddress\n    /// @param src Source token\n    /// @param dest   Destination token\n    /// @param srcAmount amount of source tokens\n    /// @return amount of actual destination tokens\n    function trade(\n        ERC20 src,\n        ERC20 dest,\n        uint256 srcAmount\n    )\n        external\n        payable\n        returns(uint256);\n    \n    /// @dev provite current rate between source and destination token \n    ///      for given source amount\n    /// @param src Source token\n    /// @param dest   Destination token\n    /// @param srcAmount amount of source tokens\n    /// @return current reserve and rate\n    function rate(\n        ERC20 src, \n        ERC20 dest, \n        uint256 srcAmount\n    ) \n        external \n        view \n        returns(uint256, uint256);\n}\n\ncontract KulapDex is Ownable {\n    event Trade(\n        // Source\n        address indexed _srcAsset,\n        uint256         _srcAmount,\n\n        // Destination\n        address indexed _destAsset,\n        uint256         _destAmount,\n\n        // User\n        address indexed _trader, \n\n        // System\n        uint256          fee\n    );\n\n    using SafeMath for uint256;\n    ERC20 public etherERC20 = ERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    // address public dexWallet = 0x7ff0F1919424F0D2B6A109E3139ae0f1d836D468; // To receive fee of the KULAP Dex network\n\n    // list of trading proxies\n    KULAPTradingProxy[] public tradingProxies;\n\n    function _tradeEtherToToken(\n        uint256 tradingProxyIndex, \n        uint256 srcAmount, \n        ERC20 dest\n        ) \n        private \n        returns(uint256)  {\n        // Load trading proxy\n        KULAPTradingProxy tradingProxy = tradingProxies[tradingProxyIndex];\n\n        // Trade to proxy\n        uint256 destAmount = tradingProxy.trade.value(srcAmount)(\n            etherERC20,\n            dest,\n            srcAmount\n        );\n\n        return destAmount;\n    }\n\n    // Receive ETH in case of trade Token -> ETH, will get ETH back from trading proxy\n    function () public payable {\n\n    }\n\n    function _tradeTokenToEther(\n        uint256 tradingProxyIndex,\n        ERC20 src,\n        uint256 srcAmount\n        ) \n        private \n        returns(uint256)  {\n        // Load trading proxy\n        KULAPTradingProxy tradingProxy = tradingProxies[tradingProxyIndex];\n\n        // Approve to TradingProxy\n        src.approve(tradingProxy, srcAmount);\n\n        // Trande to proxy\n        uint256 destAmount = tradingProxy.trade(\n            src, \n            etherERC20,\n            srcAmount\n        );\n        \n        return destAmount;\n    }\n\n    function _tradeTokenToToken(\n        uint256 tradingProxyIndex,\n        ERC20 src,\n        uint256 srcAmount,\n        ERC20 dest\n        ) \n        private \n        returns(uint256)  {\n        // Load trading proxy\n        KULAPTradingProxy tradingProxy = tradingProxies[tradingProxyIndex];\n\n        // Approve to TradingProxy\n        src.approve(tradingProxy, srcAmount);\n\n        // Trande to proxy\n        uint256 destAmount = tradingProxy.trade(\n            src, \n            dest,\n            srcAmount\n        );\n        \n        return destAmount;\n    }\n\n    // Ex1: trade 0.5 ETH -> EOS\n    // 0, \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"500000000000000000\", \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"21003850000000000000\"\n    //\n    // Ex2: trade 30 EOS -> ETH\n    // 0, \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"30000000000000000000\", \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"740825000000000000\"\n    function _trade(\n        uint256             _tradingProxyIndex, \n        ERC20               _src, \n        uint256             _srcAmount, \n        ERC20               _dest, \n        uint256             _minDestAmount\n    ) private returns(uint256)  {\n        // Destination amount\n        uint256 destAmount;\n\n        // Record src/dest asset for later consistency check.\n        uint256 srcAmountBefore;\n        uint256 destAmountBefore;\n        // Source\n        if (etherERC20 == _src) {\n            srcAmountBefore = address(this).balance;\n        } else {\n            srcAmountBefore = _src.balanceOf(this);\n        }\n        // Dest\n        if (etherERC20 == _dest) {\n            destAmountBefore = address(this).balance;\n        } else {\n            destAmountBefore = _dest.balanceOf(this);\n        }\n\n        // Trade ETH -> Token\n        if (etherERC20 == _src) {\n            destAmount = _tradeEtherToToken(_tradingProxyIndex, _srcAmount, _dest);\n        \n        // Trade Token -> ETH\n        } else if (etherERC20 == _dest) {\n            destAmount = _tradeTokenToEther(_tradingProxyIndex, _src, _srcAmount);\n\n        // Trade Token -> Token\n        } else {\n            destAmount = _tradeTokenToToken(_tradingProxyIndex, _src, _srcAmount, _dest);\n        }\n\n        // Recheck if src/dest amount correct\n        // Source\n        if (etherERC20 == _src) {\n            require(address(this).balance == srcAmountBefore.sub(_srcAmount), \"source amount mismatch after trade\");\n        } else {\n            require(_src.balanceOf(this) == srcAmountBefore.sub(_srcAmount), \"source amount mismatch after trade\");\n        }\n        // Dest\n        if (etherERC20 == _dest) {\n            require(address(this).balance == destAmountBefore.add(destAmount), \"destination amount mismatch after trade\");\n        } else {\n            require(_dest.balanceOf(this) == destAmountBefore.add(destAmount), \"destination amount mismatch after trade\");\n        }\n\n        // Throw exception if destination amount doesn't meet user requirement.\n        require(destAmount >= _minDestAmount, \"destination amount is too low.\");\n\n        return destAmount;\n    }\n\n    // Ex1: trade 0.5 ETH -> EOS\n    // 0, \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"500000000000000000\", \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"21003850000000000000\"\n    //\n    // Ex2: trade 30 EOS -> ETH\n    // 0, \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"30000000000000000000\", \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"740825000000000000\"\n    function trade(uint256 tradingProxyIndex, ERC20 src, uint256 srcAmount, ERC20 dest, uint256 minDestAmount) payable public returns(uint256)  {\n        uint256 destAmount;\n\n        // Prepare source's asset\n        if (etherERC20 != src) {\n            // Transfer token to This address\n            src.transferFrom(msg.sender, address(this), srcAmount);\n        }\n\n        // Trade with proxy\n        destAmount = _trade(tradingProxyIndex, src, srcAmount, dest, 1);\n\n        // Throw exception if destination amount doesn't meet user requirement.\n        require(destAmount >= minDestAmount, \"destination amount is too low.\");\n\n        // Send back ether to sender\n        if (etherERC20 == dest) {\n            // Send back ether to sender\n            // Throws on failure\n            msg.sender.transfer(destAmount);\n        \n        // Send back token to sender\n        } else {\n            // Some ERC20 Smart contract not return Bool, so we can't check here\n            // require(dest.transfer(msg.sender, destAmount));\n            dest.transfer(msg.sender, destAmount);\n        }\n\n        emit Trade(src, srcAmount, dest, destAmount, msg.sender, 0);\n        \n\n        return destAmount;\n    }\n\n    // Ex1: trade 50 OMG -> ETH -> EOS\n    // Step1: trade 50 OMG -> ETH\n    // Step2: trade xx ETH -> EOS\n    // \"0x5b9a857e0C3F2acc5b94f6693536d3Adf5D6e6Be\", \"30000000000000000000\", \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"1\", [\"0x0000000000000000000000000000000000000000\", \"0x5b9a857e0C3F2acc5b94f6693536d3Adf5D6e6Be\", \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"0x0000000000000000000000000000000000000000\", \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\"]\n    //\n    // Ex2: trade 50 OMG -> ETH -> DAI\n    // Step1: trade 50 OMG -> ETH\n    // Step2: trade xx ETH -> DAI\n    // \"0x5b9a857e0C3F2acc5b94f6693536d3Adf5D6e6Be\", \"30000000000000000000\", \"0x45ad02b30930cad22ff7921c111d22943c6c822f\", \"1\", [\"0x0000000000000000000000000000000000000000\", \"0x5b9a857e0C3F2acc5b94f6693536d3Adf5D6e6Be\", \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"0x0000000000000000000000000000000000000001\", \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"0x45ad02b30930cad22ff7921c111d22943c6c822f\"]\n    function tradeRoutes(\n        ERC20 src,\n        uint256 srcAmount,\n        ERC20 dest,\n        uint256 minDestAmount,\n        address[] _tradingPaths)\n\n        public payable returns(uint256)  {\n        uint256 destAmount;\n\n        if (etherERC20 != src) {\n            // Transfer token to This address\n            src.transferFrom(msg.sender, address(this), srcAmount);\n        }\n\n        uint256 pathSrcAmount = srcAmount;\n        for (uint i = 0; i < _tradingPaths.length; i += 3) {\n            uint256 tradingProxyIndex =         uint256(_tradingPaths[i]);\n            ERC20 pathSrc =                     ERC20(_tradingPaths[i+1]);\n            ERC20 pathDest =                    ERC20(_tradingPaths[i+2]);\n\n            destAmount = _trade(tradingProxyIndex, pathSrc, pathSrcAmount, pathDest, 1);\n            pathSrcAmount = destAmount;\n        }\n\n        // Throw exception if destination amount doesn't meet user requirement.\n        require(destAmount >= minDestAmount, \"destination amount is too low.\");\n\n        // Trade Any -> ETH\n        if (etherERC20 == dest) {\n            // Send back ether to sender\n            // Throws on failure\n            msg.sender.transfer(destAmount);\n        \n        // Trade Any -> Token\n        } else {\n            // Send back token to sender\n            // Some ERC20 Smart contract not return Bool, so we can't check here\n            // require(dest.transfer(msg.sender, destAmount));\n            dest.transfer(msg.sender, destAmount);\n        }\n\n        emit Trade(src, srcAmount, dest, destAmount, msg.sender, 0);\n\n        return destAmount;\n    }\n\n    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n    /// @dev best conversion rate for a pair of tokens, if number of reserves have small differences. randomize\n    /// @param tradingProxyIndex index of trading proxy\n    /// @param src Source token\n    /// @param dest Destination token\n    /// @param srcAmount Srouce amount\n    /* solhint-disable code-complexity */\n    function rate(uint256 tradingProxyIndex, ERC20 src, ERC20 dest, uint srcAmount) public view returns(uint, uint) {\n        // Load trading proxy\n        KULAPTradingProxy tradingProxy = tradingProxies[tradingProxyIndex];\n\n        return tradingProxy.rate(src, dest, srcAmount);\n    }\n\n    /**\n    * @dev Function for adding new trading proxy\n    * @param _proxyAddress The address of trading proxy.\n    * @return index of this proxy.\n    */\n    function addTradingProxy(\n        KULAPTradingProxy _proxyAddress\n    ) public onlyOwner returns (uint256) {\n\n        tradingProxies.push(_proxyAddress);\n\n        return tradingProxies.length;\n    }\n}",
  "bytecode": "608060405260018054600160a060020a031990811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1790915560008054909116331790556111f8806100476000396000f30060806040526004361061008d5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630e8a47b5811461008f578063242d184b146100c55780632ad5e73a1461012d5780633b32a26814610161578063554452491461018257806385113156146101c85780638da5cb5b146101dd578063f2fde38b146101f2575b005b6100b3600435600160a060020a036024358116906044359060643516608435610213565b60408051918252519081900360200190f35b60408051608435600481810135602081810285810182019096528185526100b395600160a060020a038435811696602480359760443590931696606435963696919560a495909301929091829190850190849080828437509497506104419650505050505050565b34801561013957600080fd5b5061014560043561070e565b60408051600160a060020a039092168252519081900360200190f35b34801561016d57600080fd5b506100b3600160a060020a0360043516610736565b34801561018e57600080fd5b506101af600435600160a060020a03602435811690604435166064356107ae565b6040805192835260208301919091528051918290030190f35b3480156101d457600080fd5b50610145610882565b3480156101e957600080fd5b50610145610891565b3480156101fe57600080fd5b5061008d600160a060020a03600435166108a0565b6001546000908190600160a060020a038781169116146102b357604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790529051600160a060020a038816916323b872dd91606480830192600092919082900301818387803b15801561029a57600080fd5b505af11580156102ae573d6000803e3d6000fd5b505050505b6102c18787878760016108f2565b90508281101561031b576040805160e560020a62461bcd02815260206004820152601e60248201527f64657374696e6174696f6e20616d6f756e7420697320746f6f206c6f772e0000604482015290519081900360640190fd5b600154600160a060020a038581169116141561036457604051339082156108fc029083906000818181858888f1935050505015801561035e573d6000803e3d6000fd5b506103e4565b604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018390529051600160a060020a0386169163a9059cbb91604480830192600092919082900301818387803b1580156103cb57600080fd5b505af11580156103df573d6000803e3d6000fd5b505050505b604080518681526020810183905260008183015290513391600160a060020a0387811692908a16917f0222ed78e99d4a95324d4ec3100dbbf57d46aa05b76d1fec28b2db234e4857cf919081900360600190a49695505050505050565b600154600090819081908190819081908190600160a060020a038d81169116146104eb57604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018d90529051600160a060020a038e16916323b872dd91606480830192600092919082900301818387803b1580156104d257600080fd5b505af11580156104e6573d6000803e3d6000fd5b505050505b8a9450600093505b875184101561057757878481518110151561050a57fe5b90602001906020020151600160a060020a03169250878460010181518110151561053057fe5b906020019060200201519150878460020181518110151561054d57fe5b9060200190602002015190506105678383878460016108f2565b95508594506003840193506104f3565b888610156105cf576040805160e560020a62461bcd02815260206004820152601e60248201527f64657374696e6174696f6e20616d6f756e7420697320746f6f206c6f772e0000604482015290519081900360640190fd5b600154600160a060020a038b81169116141561061857604051339087156108fc029088906000818181858888f19350505050158015610612573d6000803e3d6000fd5b50610698565b604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018890529051600160a060020a038c169163a9059cbb91604480830192600092919082900301818387803b15801561067f57600080fd5b505af1158015610693573d6000803e3d6000fd5b505050505b33600160a060020a03168a600160a060020a03168d600160a060020a03167f0222ed78e99d4a95324d4ec3100dbbf57d46aa05b76d1fec28b2db234e4857cf8e8a600060405180848152602001838152602001828152602001935050505060405180910390a450939a9950505050505050505050565b600280548290811061071c57fe5b600091825260209091200154600160a060020a0316905081565b60008054600160a060020a0316331461074e57600080fd5b506002805460018101825560008290527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018054600160a060020a03841673ffffffffffffffffffffffffffffffffffffffff1990911617905554919050565b60008060006002878154811015156107c257fe5b6000918252602082200154604080517f8df8e17c000000000000000000000000000000000000000000000000000000008152600160a060020a038a811660048301528981166024830152604482018990528251931694508493638df8e17c93606480840194939192918390030190829087803b15801561084157600080fd5b505af1158015610855573d6000803e3d6000fd5b505050506040513d604081101561086b57600080fd5b508051602090910151909890975095505050505050565b600154600160a060020a031681565b600054600160a060020a031681565b600054600160a060020a031633146108b757600080fd5b600160a060020a038116156108ef576000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b600154600090819081908190600160a060020a038981169116141561091a5730319150610994565b6040805160e060020a6370a082310281523060048201529051600160a060020a038a16916370a082319160248083019260209291908290030181600087803b15801561096557600080fd5b505af1158015610979573d6000803e3d6000fd5b505050506040513d602081101561098f57600080fd5b505191505b600154600160a060020a03878116911614156109b257503031610a2c565b6040805160e060020a6370a082310281523060048201529051600160a060020a038816916370a082319160248083019260209291908290030181600087803b1580156109fd57600080fd5b505af1158015610a11573d6000803e3d6000fd5b505050506040513d6020811015610a2757600080fd5b505190505b600154600160a060020a0389811691161415610a5457610a4d898888610e3d565b9250610a84565b600154600160a060020a0387811691161415610a7557610a4d898989610f0c565b610a818989898961104f565b92505b600154600160a060020a0389811691161415610b2c57610aaa828863ffffffff61119c16565b303114610b27576040805160e560020a62461bcd02815260206004820152602260248201527f736f7572636520616d6f756e74206d69736d617463682061667465722074726160448201527f6465000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b610c2e565b610b3c828863ffffffff61119c16565b6040805160e060020a6370a082310281523060048201529051600160a060020a038b16916370a082319160248083019260209291908290030181600087803b158015610b8757600080fd5b505af1158015610b9b573d6000803e3d6000fd5b505050506040513d6020811015610bb157600080fd5b505114610c2e576040805160e560020a62461bcd02815260206004820152602260248201527f736f7572636520616d6f756e74206d69736d617463682061667465722074726160448201527f6465000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600154600160a060020a0387811691161415610cd657610c54818463ffffffff6111b316565b303114610cd1576040805160e560020a62461bcd02815260206004820152602760248201527f64657374696e6174696f6e20616d6f756e74206d69736d61746368206166746560448201527f7220747261646500000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b610dd8565b610ce6818463ffffffff6111b316565b6040805160e060020a6370a082310281523060048201529051600160a060020a038916916370a082319160248083019260209291908290030181600087803b158015610d3157600080fd5b505af1158015610d45573d6000803e3d6000fd5b505050506040513d6020811015610d5b57600080fd5b505114610dd8576040805160e560020a62461bcd02815260206004820152602760248201527f64657374696e6174696f6e20616d6f756e74206d69736d61746368206166746560448201527f7220747261646500000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b84831015610e30576040805160e560020a62461bcd02815260206004820152601e60248201527f64657374696e6174696f6e20616d6f756e7420697320746f6f206c6f772e0000604482015290519081900360640190fd5b5090979650505050505050565b6000806000600286815481101515610e5157fe5b60009182526020918290200154600154604080517f5253baae000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201528883166024820152604481018a905290519190921694508492635253baae9289926064808301939282900301818588803b158015610ed557600080fd5b505af1158015610ee9573d6000803e3d6000fd5b50505050506040513d6020811015610f0057600080fd5b50519695505050505050565b6000806000600286815481101515610f2057fe5b6000918252602082200154604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482018190526024820189905291519195509188169263095ea7b3926044808201939182900301818387803b158015610f9657600080fd5b505af1158015610faa573d6000803e3d6000fd5b5050600154604080517f5253baae000000000000000000000000000000000000000000000000000000008152600160a060020a038a8116600483015292831660248201526044810189905290519186169350635253baae92506064808201926020929091908290030181600087803b15801561102557600080fd5b505af1158015611039573d6000803e3d6000fd5b505050506040513d6020811015610f0057600080fd5b600080600060028781548110151561106357fe5b6000918252602082200154604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201819052602482018a905291519195509189169263095ea7b3926044808201939182900301818387803b1580156110d957600080fd5b505af11580156110ed573d6000803e3d6000fd5b5050604080517f5253baae000000000000000000000000000000000000000000000000000000008152600160a060020a038a811660048301528881166024830152604482018a905291519186169350635253baae92506064808201926020929091908290030181600087803b15801561116557600080fd5b505af1158015611179573d6000803e3d6000fd5b505050506040513d602081101561118f57600080fd5b5051979650505050505050565b600080838311156111ac57600080fd5b5050900390565b6000828201838110156111c557600080fd5b93925050505600a165627a7a7230582004141c457de6afe8c4f3769ff5c1ec4c605635ff42473d608a6f2ca73b8ea5aa0029"
}