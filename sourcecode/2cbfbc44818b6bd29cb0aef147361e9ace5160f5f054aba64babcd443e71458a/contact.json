{
  "address": "0x849919acec8627dde44da59e1a9737985d022b9d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Chatbit Token",
  "contractName": "ChatBitToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-27\n*/\n\npragma solidity ^0.4.16;\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract TokenERC20 {\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constructor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount -- wei\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        Burn(_from, _value);\n        return true;\n    }\n}\n\n/*************************************************/\n/**  Author   : Stryper                         **/\n/**  Contents : ChatBit Custom Crypto Currency  **/\n/**  Date     : 2018. 12 ~                      **/\n/*************************************************/\n\ncontract ChatBitToken is owned, TokenERC20 {\n\n    uint256 public sellPrice = 20180418134311;        // Initialization with default value\n    uint256 public buyPrice = 1000000000000000000;    // Initialization with default value\n\tuint256 public limitAMT = 0;\n\tbool public isPreSales = false;\n\n    mapping (address => bool) public frozenAccount;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function ChatBitToken(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                           // Add the same to the recipient\n        Transfer(_from, _to, _value);\n    }\n\n    /// @notice Create `mintedAmount` tokens and send it to `target`\n    /// @param target Address to receive the tokens\n    /// @param mintedAmount the amount of tokens it will receive\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balanceOf[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        Transfer(0, this, mintedAmount);\n        Transfer(this, target, mintedAmount);\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n    /// @param newSellPrice Price the users can sell to the contract\n    /// @param newBuyPrice Price users can buy from the contract\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n\t/// @notice Start presales with initializing presales amount\n\t/// @param amtPreSales The amount of presales\n    function startPreSales(uint256 amtPreSales) onlyOwner public returns (uint256) {\n\t    require (balanceOf[owner] - amtPreSales > 0);\n        limitAMT = balanceOf[owner] - amtPreSales;\n\t\tisPreSales = true;\n\t\treturn limitAMT;\n\t}\n\n\t/// @notice Stop presales with setting state variable\n    function stopPreSales() onlyOwner public {\n\t    isPreSales = false;\n\t}\n\n    /// @notice Buy tokens from contract by sending ether\n/*************************************************************\n//////////////////////////////////////////////////////////////\n///    function buy() payable public {\n///        uint amount = msg.value / buyPrice;               // calculates the amount\n///        _transfer(this, msg.sender, amount);              // makes the transfers\n///    }\n//////////////////////////////////////////////////////////////\n*************************************************************/\n\n    /// @notice Sell `amount` tokens to contract\n    /// @param amount amount of tokens to be sold\n/*************************************************************\n//////////////////////////////////////////////////////////////\n///    function sell(uint256 amount) public {\n///        require(this.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\n///        _transfer(msg.sender, this, amount);              // makes the transfers\n///        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n///    }\n//////////////////////////////////////////////////////////////\n*************************************************************/\n\n    /// @notice Get taitoss transaction amount\n\t/// @param amtETH The amount of ether to convert with taitoss\n\tfunction getTaiAMT(uint256 amtETH) public constant returns (uint256) {\n        uint256 amount = amtETH / buyPrice;                    \n        amount = amount * 10 ** uint256(decimals);             \n\t\treturn amount;\n\t}\n\n\t/// @notice Get the balance of taitoss\n\tfunction getBalanceTAI() public constant returns (uint256) {\n\t    uint256 balTAI;\n\t\tbalTAI = balanceOf[msg.sender];\n\t\treturn balTAI;\n\t}\n\n\tfunction getSalesPrice() public constant returns (uint256) {\n\t\treturn buyPrice;\n\t}\n\n\tfunction getLeftPreSalesAMT() public constant returns (uint256) {\n\t    uint256 leftPSAMT;\n\t\tleftPSAMT = balanceOf[owner] - limitAMT;\n\t\treturn leftPSAMT;\n\t}\n\n    /// @notice Process presales transactions\n    function procPreSales() payable public returns (uint256) {\n        require (isPreSales == true);\n        uint256 amount = msg.value / buyPrice;                 // calculates the amount\n        amount = amount * 10 ** uint256(decimals);             // calculates the amount\n\t    if ( balanceOf[owner] - amount <= limitAMT ){\n\t\t    isPreSales = false;\n\t\t}\n        _transfer(owner, msg.sender, amount);\n\t\towner.transfer(msg.value);\n\t\treturn amount;\n    }\n\n\t/// @notice Process normal sales transactions\n    function procNormalSales() payable public returns (uint256) {\n        uint256 amount = msg.value / buyPrice;                 // calculates the amount\n        amount = amount * 10 ** uint256(decimals);             // calculates the amount\n        _transfer(owner, msg.sender, amount);\n\t\towner.transfer(msg.value);\n\t\treturn amount;\n    }\n\n\t/// @notice Process owner's buyback\n\t/// @param seller Seller's EOA account address\n    function procNormalBuyBack(address seller) onlyOwner payable public returns (uint256) {\n        uint256 amount = msg.value / buyPrice;                 // calculates the amount\n        amount = amount * 10 ** uint256(decimals);             // calculates the amount\n        _transfer(seller, msg.sender, amount);\n\t\tseller.transfer(msg.value);\n\t\treturn amount;\n    }\n\n}",
  "bytecode": "60606040526003805460ff1990811660121790915565125a9ea78127600755670de0b6b3a76400006008556000600955600a8054909116905534156200004457600080fd5b6040516200117438038062001174833981016040528080519190602001805182019190602001805160008054600160a060020a033316600160a060020a03199091168117825560035460ff16600a0a87026004819055908252600560205260409091205590910190508282826001828051620000c5929160200190620000e8565b506002818051620000db929160200190620000e8565b505050505050506200018d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200012b57805160ff19168380011785556200015b565b828001600101855582156200015b579182015b828111156200015b5782518255916020019190600101906200013e565b50620001699291506200016d565b5090565b6200018a91905b8082111562000169576000815560010162000174565b90565b610fd7806200019d6000396000f3006060604052600436106101895763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662fd6a61811461018e57806305fefda7146101b357806306fdde03146101ce578063095ea7b3146102585780630a8b5d081461028e57806318160ddd146102a4578063190fea6c146102b757806323b872dd146102ca5780632853b760146102f25780632b1ab8f914610305578063313ce5671461031b57806342966c68146103445780634b7503341461035a578063513896261461036d5780635ba845a21461038157806370a082311461039457806379c65068146103b357806379cc6790146103d55780638620410b146103f75780638da5cb5b1461040a5780638dc61dbe1461043957806395d89b411461044c578063a9059cbb1461045f578063b414d4b614610481578063c0c566f0146104a0578063c2b848e8146104b3578063c4f25f10146104bb578063cae9ca51146104c3578063dd62ed3e14610528578063e724529c1461054d578063f2fde38b14610571575b600080fd5b341561019957600080fd5b6101a1610590565b60405190815260200160405180910390f35b34156101be57600080fd5b6101cc6004356024356105ac565b005b34156101d957600080fd5b6101e16105d2565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561021d578082015183820152602001610205565b50505050905090810190601f16801561024a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561026357600080fd5b61027a600160a060020a0360043516602435610670565b604051901515815260200160405180910390f35b341561029957600080fd5b6101a16004356106a0565b34156102af57600080fd5b6101a1610712565b34156102c257600080fd5b61027a610718565b34156102d557600080fd5b61027a600160a060020a0360043581169060243516604435610721565b34156102fd57600080fd5b6101cc610798565b341561031057600080fd5b6101a16004356107bf565b341561032657600080fd5b61032e6107e3565b60405160ff909116815260200160405180910390f35b341561034f57600080fd5b61027a6004356107ec565b341561036557600080fd5b6101a1610877565b6101a1600160a060020a036004351661087d565b341561038c57600080fd5b6101a16108fa565b341561039f57600080fd5b6101a1600160a060020a0360043516610900565b34156103be57600080fd5b6101cc600160a060020a0360043516602435610912565b34156103e057600080fd5b61027a600160a060020a03600435166024356109d8565b341561040257600080fd5b6101a1610ab4565b341561041557600080fd5b61041d610aba565b604051600160a060020a03909116815260200160405180910390f35b341561044457600080fd5b6101a1610ac9565b341561045757600080fd5b6101e1610ae9565b341561046a57600080fd5b6101cc600160a060020a0360043516602435610b54565b341561048c57600080fd5b61027a600160a060020a0360043516610b63565b34156104ab57600080fd5b6101a1610b78565b6101a1610b7e565b6101a1610c36565b34156104ce57600080fd5b61027a60048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610c6f95505050505050565b341561053357600080fd5b6101a1600160a060020a0360043581169060243516610da1565b341561055857600080fd5b6101cc600160a060020a03600435166024351515610dbe565b341561057c57600080fd5b6101cc600160a060020a0360043516610e4a565b600160a060020a03331660009081526005602052604090205490565b60005433600160a060020a039081169116146105c757600080fd5b600791909155600855565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106685780601f1061063d57610100808354040283529160200191610668565b820191906000526020600020905b81548152906001019060200180831161064b57829003601f168201915b505050505081565b600160a060020a033381166000908152600660209081526040808320938616835292905220819055600192915050565b6000805433600160a060020a039081169116146106bc57600080fd5b60008054600160a060020a0316815260056020526040812054839003116106e257600080fd5b5060008054600160a060020a0316815260056020526040902054036009819055600a805460ff1916600117905590565b60045481565b600a5460ff1681565b600160a060020a0380841660009081526006602090815260408083203390941683529290529081205482111561075657600080fd5b600160a060020a038085166000908152600660209081526040808320339094168352929052208054839003905561078e848484610e94565b5060019392505050565b60005433600160a060020a039081169116146107b357600080fd5b600a805460ff19169055565b600080600854838115156107cf57fe5b60035460ff16600a0a919004029392505050565b60035460ff1681565b600160a060020a0333166000908152600560205260408120548290101561081257600080fd5b600160a060020a03331660008181526005602052604090819020805485900390556004805485900390557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a2506001919050565b60075481565b60008054819033600160a060020a0390811691161461089b57600080fd5b600854348115156108a857fe5b60035460ff16600a0a9190040290506108c2833383610e94565b600160a060020a0383163480156108fc0290604051600060405180830381858888f1935050505015156108f457600080fd5b92915050565b60095481565b60056020526000908152604090205481565b60005433600160a060020a0390811691161461092d57600080fd5b600160a060020a03808316600090815260056020526040808220805485019055600480548501905530909216917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a381600160a060020a031630600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35050565b600160a060020a038216600090815260056020526040812054829010156109fe57600080fd5b600160a060020a0380841660009081526006602090815260408083203390941683529290522054821115610a3157600080fd5b600160a060020a038084166000818152600560209081526040808320805488900390556006825280832033909516835293905282902080548590039055600480548590039055907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a250600192915050565b60085481565b600054600160a060020a031681565b60095460008054600160a060020a03168152600560205260409020540390565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106685780601f1061063d57610100808354040283529160200191610668565b610b5f338383610e94565b5050565b600b6020526000908152604090205460ff1681565b60085490565b600a54600090819060ff161515600114610b9757600080fd5b60085434811515610ba457fe5b60035460095460008054600160a060020a03168152600560205260409020549390920460ff909116600a0a0292509082900311610be657600a805460ff191690555b600054610bfd90600160a060020a03163383610e94565b600054600160a060020a03163480156108fc0290604051600060405180830381858888f193505050501515610c3157600080fd5b919050565b60008060085434811515610c4657fe5b6003546000549290910460ff909116600a0a029150610bfd90600160a060020a03163383610e94565b600083610c7c8185610670565b15610d995780600160a060020a0316638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610d32578082015183820152602001610d1a565b50505050905090810190601f168015610d5f5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610d8057600080fd5b6102c65a03f11515610d9157600080fd5b505050600191505b509392505050565b600660209081526000928352604080842090915290825290205481565b60005433600160a060020a03908116911614610dd957600080fd5b600160a060020a0382166000908152600b602052604090819020805460ff19168315151790557f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b60005433600160a060020a03908116911614610e6557600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0382161515610ea957600080fd5b600160a060020a03831660009081526005602052604090205481901015610ecf57600080fd5b600160a060020a03821660009081526005602052604090205481810111610ef557600080fd5b600160a060020a0383166000908152600b602052604090205460ff1615610f1b57600080fd5b600160a060020a0382166000908152600b602052604090205460ff1615610f4157600080fd5b600160a060020a038084166000818152600560205260408082208054869003905592851680825290839020805485019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35050505600a165627a7a723058203938b21f2e98cc9b1b61d16a974ac80a05935bcb351fa5851f12af1f7aebb4df002900000000000000000000000000000000000000000000000000000002cb417800000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000007436861744269740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034342540000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000002cb417800000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000007436861744269740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034342540000000000000000000000000000000000000000000000000000000000"
}