{
  "address": "0xcf5b3f6d55e30486fcd9b8e908d31a656e92b71d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthGods",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-16\n*/\n\npragma solidity ^0.4.24;\n\ncontract EthGods {\n\n    // imported contracts\n    \n    EthGodsName private eth_gods_name;\n    function set_eth_gods_name_contract_address(address eth_gods_name_contract_address) public returns (bool) {\n        require(msg.sender == admin);\n        eth_gods_name = EthGodsName(eth_gods_name_contract_address);\n        return true;\n    }\n\n    EthGodsDice private eth_gods_dice;\n    function set_eth_gods_dice_contract_address(address eth_gods_dice_contract_address) public returns (bool) {\n        require(msg.sender == admin);\n        eth_gods_dice = EthGodsDice(eth_gods_dice_contract_address);\n        return true;\n    }\n    \n    // end of imported contracts\n \n \n     // start of database\n    \n    //contract information & administration\n    bool private contract_created; // in case constructor logic change in the future\n    address private contract_address; //shown at the top of the home page\n    string private contact_email = \"[emailÂ protected]\";\n    string private official_url = \"swarm-gateways.net/bzz:/ethgods.eth\";\n\n    address private  admin; // public when testing\n    address private controller1 = 0xcA5A9Db0EF9a0Bf5C38Fc86fdE6CB897d9d86adD; // controller can change admin at once; \n    address private controller2 = 0x8396D94046a099113E5fe5CBad7eC95e96c2B796; // controller can change admin at once; \n\n    address private v_god = 0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359;\n    uint private block_hash_duration = 255; // can't get block hash, after 256 blocks, adjustable\n    \n\n    // god\n    struct god {\n        uint god_id;\n        uint level;\n        uint exp;\n        uint pet_type;// 12 animals or zodiacs\n        uint pet_level;   \n        uint listed; // 0 not a god, 1 - ... rank_score in god list\n        uint invite_price;\n        uint free_rounds; // to check if has used free dice in this round\n        uint paid_rounds; // to check if has paid for extra dice in this round\n        bool hosted_pray; // auto waitlist, when enlisted. others can invite, once hosted pray\n        uint bid_eth; // bid to host pray\n        \n        uint credit; // gained from the amulet invitation spending of invited fellows\n        uint count_amulets_generated;\n        uint first_amulet_generated;\n        uint count_amulets_at_hand;\n        uint count_amulets_selling;\n        uint amulets_start_id;\n        uint amulets_end_id;\n        \n        uint count_token_orders;\n        uint first_active_token_order;\n\n        uint last_ticket_number;\n        uint count_tickets;\n\n        uint inviter_id; // who invited this fellow to this world\n        uint count_gods_invited; // gods invited to this game by this god.\n        \n        \n    }\n    uint private count_gods = 0; // Used when generating id for a new player, \n    mapping(address => god) private gods; // everyone is a god\n    mapping(uint => address) private gods_address; // gods' address => god_id\n\n    uint [] private listed_gods; // id of listed gods\n    uint private max_listed_gods = 10000; // adjustable\n\n    uint private initial_invite_price = 0.02 ether; // grows with each invitation for this god\n    uint private invite_price_increase = 0.02 ether; // grows by this amount with each invitation\n    uint private max_invite_price = 1000 ether; // adjustable\n    uint private max_extra_eth = 0.001 ether; // adjustable\n\n    uint private list_level = 10; // start from level 10\n    uint private max_gas_price = 100000000000; // 100 gwei for invite and pray, adjustable\n    \n    // amulet\n    struct amulet {\n        uint god_id;\n        address owner;\n        uint level;\n        uint bound_start_block;// can't sell, if just got\n        uint start_selling_block; // can't bind & use in pk, if selling\n        uint price; // set to 0, when withdraw from selling or bought\n    }\n    uint private count_amulets = 0; \n    mapping(uint => amulet) private amulets; // public when testing\n    uint private bound_duration = 9000; // once bought, wait a while before sell it again, adjustable\n    uint private order_duration = 20000; // valid for about 3 days, then not to show to public in selling amulets/token orders, but still show in my_selling amulets/token orders. adjustable\n\n    // pray\n    address private pray_host_god; // public when testing\n    bool private pray_reward_top100; // if hosted by new god, reward top 100 gods egst\n    uint private pray_start_block; // public when testing\n    bool private rewarded_pray_winners = false;\n\n    uint private count_hosted_gods; // gods hosted pray (event started). If less than bidding gods, there are new gods waiting to host pray, \n    mapping (uint => address) private bidding_gods; // every listed god and bid to host pray\n    uint private initializer_reward = 60; // reward the god who burned gas to send pray rewards to community, adjustable\n    uint private double_egst_fee = 0.006 ether; // adjustable\n    \n    mapping(uint => uint) private max_winners;  // max winners for each prize  \n    uint private round_duration = 6666; // 6000, 600 in CBT, 60 in dev, adjustable\n\n    // ticket\n    struct ticket {\n        address owner;\n        uint block_number;\n        bytes32 block_hash;\n        uint new_ticket_number;\n        uint dice_result;\n    }\n    uint private count_tickets;\n    mapping (uint => ticket) private tickets;\n    uint private used_tickets;\n\n    uint private max_show_tickets = 20; //  public when testing\n\n    mapping(uint => uint) private pk_positions; // public when testing\n    mapping(uint => uint) private count_listed_winners; // count for 5 prizes, public in testing\n    mapping (uint => mapping(uint => address)) private listed_winners; // winners for 5 prizes\n\n    bool private reEntrancyMutex = false; // for sendnig eth to msg.sender\n    \n    uint private pray_egses = 0; // lottery treasury\n    uint private pray_egst = 0;  // lottery treasury\n    uint private reward_pool_egses = 0; // 10% of pray_egses, for top 3 winners\n    uint private reward_pool_egst = 0; // 10% of pray_egst, for EGST floor winners\n\n    mapping(address => uint) egses_balances;\n        \n\n    // eth_gods_token (EGST)\n    string public name = \"EthGodsToken\";\n    string public symbol = \"EGST\";\n    uint8 public constant decimals = 18; //same as ethereum\n    uint private _totalSupply;\n    mapping(address => uint) balances; // bought or gained from pray or revenue share\n    mapping(address => mapping(address => uint)) allowed;\n  \n\n    struct token_order {\n        uint id;\n        uint start_selling_block;\n        address seller;\n        uint unit_price;\n        uint egst_amount;\n    }\n    uint private count_token_orders = 0;\n    mapping (uint => token_order) token_orders;\n    uint private first_active_token_order = 0;\n\n    uint private min_unit_price = 20; // 1 egst min value is 0.0002 ether, adjustable\n    uint private max_unit_price = 200; // 1 egst max value is 0.002 ether, adjustable\n    uint private max_egst_amount = 1000000 ether; // for create_token_order, adjustable\n    uint private min_egst_amount = 0.00001 ether; // for create_token_order, adjustable\n \n \n    //logs\n    uint private count_rounds = 0;\n    \n    struct winner_log { // win a prize and if pk\n        address previous_winner;\n        uint prize;\n        bool pk_result;\n        uint ticket_number;\n    }\n    mapping (uint => uint) private count_rounds_winner_logs;\n    mapping(uint => mapping(uint => winner_log)) private winner_logs;\n    \n    struct change_log {\n        uint block_number;\n        uint asset_type; // 1 egst, 2 eth_surplus\n        \n        // egses change reasons:  \n            // 1 pray_reward, 2 god_reward for being invited, 3 inviter_reward,\n            // 4 admin_deposit to reward_pool, 5 withdraw egses\n            // 6 sell amulet, 7 sell egst, 8 withdraw bid\n        \n        // egst_change reasons: \n            // 1 pray_reward, 2 top_gods_reward, \n            // 3 create_token_order, 4 withdraw token_order, 5 buy token,  \n            // 6 upgrade pet, 7 upgrade amulet, 8 admin_reward\n        \n        uint reason; // > 10 is buy token unit_price\n        uint change_amount;\n        uint after_amount;\n        address _from;\n        address _to;\n    }\n    mapping (uint => uint) private count_rounds_change_logs;\n    mapping(uint => mapping(uint => change_log)) private change_logs;\n\n    // end of database\n  \n    \n    // start of constructor\n    constructor () public {\n        require (contract_created == false);\n        contract_created = true;\n        contract_address = address(this);\n        admin = msg.sender;\n\n        create_god(admin, 0);\n        create_god(v_god, 0);\n        gods[v_god].level = 10;\n        enlist_god(v_god);\n        \n        max_winners[1] = 1; // 1\n        max_winners[2] = 2; // 2\n        max_winners[3] = 6; // 6\n\n        _totalSupply = 6000000 ether;\n        pray_egst = 2000 ether;\n        balances[admin] = sub(_totalSupply, pray_egst);\n  \n        initialize_pray();\n    }\n    \n    // destruct for testing contracts. can't destruct since round 3\n    function finalize() public {\n        require(msg.sender == admin && count_rounds <= 3);\n        selfdestruct(admin); \n    }\n    \n\n    function () public payable {\n        revert ();\n    }   \n    // end of constructor\n     \n         \n    //start of contract information & administration\n    \n    function get_controller () public view returns (address, address){\n        require (msg.sender == admin || msg.sender == controller1  || msg.sender == controller2);\n        return (controller1, controller2);\n    }\n    \n    function set_controller (uint controller_index, address new_controller_address) public returns (bool){\n        if (controller_index == 1){\n            require(msg.sender == controller2);\n            controller1 = new_controller_address;\n        } else {\n            require(msg.sender == controller1);\n            controller2 = new_controller_address;            \n        }\n        return true;\n    }\n     \n    function set_admin (address new_admin_address) public returns (bool) {\n        require (msg.sender == controller1 || msg.sender == controller2);\n        // admin don't have game attributes, such as level'\n        // no need to transfer egses and egst to new_admin_address\n        delete gods[admin];\n        delete gods_address[0];\n        admin = new_admin_address;\n        gods_address[0] = admin;\n        gods[admin].god_id = 0;\n        return true;\n    }  \n    \n    // update system parameters\n    function set_parameters (uint parameter_type, uint new_parameter) public returns (bool){\n        require (msg.sender == admin);\n        if (parameter_type == 1) {\n            // max_pray_duration = new_parameter;\n        } else if (parameter_type == 2) {\n            // min_pray_duration = new_parameter;\n            round_duration = new_parameter;\n        } else if (parameter_type == 3) {\n            block_hash_duration = new_parameter;\n        } else if (parameter_type == 4) {\n            double_egst_fee = new_parameter;\n        } else if (parameter_type == 5) {\n            order_duration = new_parameter;\n        } else if (parameter_type == 6) {\n            bound_duration = new_parameter;\n        } else if (parameter_type == 7) {\n            initializer_reward = new_parameter;\n        } else if (parameter_type == 8) {\n            max_extra_eth = new_parameter;\n        } else if (parameter_type == 9) {\n            min_unit_price = new_parameter;\n        } else if (parameter_type == 10) {\n            max_unit_price = new_parameter;\n        } else if (parameter_type == 11) {\n            max_listed_gods = new_parameter;\n        } else if (parameter_type == 12) {\n            max_gas_price = new_parameter;\n        } else if (parameter_type == 13) {\n            max_invite_price = new_parameter;\n        } else if (parameter_type == 14) {\n            min_egst_amount = new_parameter;\n        } else if (parameter_type == 15) {\n            max_egst_amount = new_parameter;\n        } else if (parameter_type == 16) {\n            max_show_tickets = new_parameter;\n        } \n        return true;\n    }  \n        \n    function set_strings (uint string_type, string new_string) public returns (bool){\n        require (msg.sender == admin);\n        \n        if (string_type == 1){\n            official_url = new_string;\n        } else if (string_type == 2){\n            name = new_string; // egst name\n        } else if (string_type == 3){\n            symbol = new_string; // egst symbol\n        } else if (string_type == 4){\n            contact_email = new_string; // egst symbol\n        } else if (string_type == 5){\n            reEntrancyMutex = false; // repair contract, if blocked somehow in longlong future\n        }\n        return true;\n    } \n    \n    // reset lottery event, if it's blocked \n    function admin_reset_pray() public returns (bool){\n        require (msg.sender == admin);\n        \n        if (pray_start_block > block.number){\n            pray_start_block = block.number;\n        }  else if (check_event_completed() == true) {\n            if (rewarded_pray_winners == false){\n                reward_pray_winners();\n            } else {\n                initialize_pray();\n            }\n        }\n    }\n    \n    //end of contract information & administration\n    \n\n    function query_contract () public view returns(address, address, address, uint, uint, bool, bool){\n        (uint highest_bid, address highest_bidder) = compare_bid_eth(); \n        return (admin,\n                pray_host_god,\n                highest_bidder,\n                highest_bid,\n                block_hash_duration,\n                pray_reward_top100,\n                rewarded_pray_winners\n               );\n    }\n    \n    function query_contract2 () public view returns (string, string, address, bool){\n        return (official_url, contact_email, v_god, reEntrancyMutex);\n    }    \n                    \n    function query_uints () public view returns (uint[32] uints){\n        uints[0] = max_invite_price;\n        uints[1] = list_level;\n        uints[2] = _totalSupply;\n        uints[3] = round_duration;\n        uints[4] = initializer_reward;\n        uints[5] = min_unit_price;\n        uints[6] = max_unit_price;\n        uints[7] = max_listed_gods;\n        uints[8] = max_gas_price;\n        uints[9] = min_egst_amount;\n        uints[10] = max_egst_amount;\n        uints[11] = max_extra_eth;\n        uints[12] = pray_start_block;\n        uints[13] = pray_egses;\n        uints[14] = pray_egst;\n        uints[15] = count_rounds;\n        uints[16] = count_gods;\n        uints[17] = listed_gods.length;\n        uints[18] = order_duration;\n        uints[19] = bound_duration;\n        uints[20] = initial_invite_price;\n        uints[21] = invite_price_increase;\n        uints[22] = max_invite_price;\n        uints[23] = count_amulets;\n        uints[24] = count_hosted_gods;\n        uints[25] = used_tickets;\n        uints[26] = double_egst_fee;\n        uints[27] = count_tickets;\n        uints[28] = reward_pool_egses;\n        uints[29] = reward_pool_egst;\n        uints[30] = block.number;\n        uints[31] = contract_address.balance;\n\n        return uints;\n    }\n    \n  \n    //end of contract information & administration\n\n    \n    // god related functions: create_god, upgrade_pet, add_exp, invite, enlist\n    \n    function create_god (address god_address, uint inviter_id) private returns(uint god_id){ // created by the contract // public when testing\n        // check if the god is already created\n        if (gods[god_address].credit == 0) { // create admin as god[0]\n\n            god_id = count_gods; // 1st god's id is admin 0\n            count_gods = add(count_gods, 1) ;\n            gods_address[god_id] = god_address;\n            gods[god_address].god_id = god_id;\n            gods[god_address].credit = 0.001 ether; // give 0.001 ether credit, so we know this address has a god\n                       \n            if (god_id > 0 && inviter_id > 0 && inviter_id < count_gods){ // not admin\n                set_inviter(inviter_id);\n            }\n            \n            return god_id;\n        }\n    }\n    \n    function set_inviter (uint inviter_id) private returns (bool){\n        if (inviter_id > 0 && gods_address[inviter_id] != address(0)\n        && gods[msg.sender].inviter_id == 0\n        && gods[gods_address[inviter_id]].inviter_id != gods[msg.sender].god_id){\n            gods[msg.sender].inviter_id = inviter_id;\n            address inviter_address = gods_address[inviter_id];\n            gods[inviter_address].count_gods_invited = add(gods[inviter_address].count_gods_invited, 1);\n            return true;\n        }\n    }\n\n    function add_exp (address god_address, uint exp_up) private returns(uint new_level, uint new_exp) { // public when testing\n        if (god_address == admin){\n            return (0,0);\n        }\n        if (gods[god_address].god_id == 0){\n            create_god(god_address, 0);\n        }\n        new_exp = add(gods[god_address].exp, exp_up);\n        uint current_god_level = gods[god_address].level;\n        uint level_up_exp;\n        new_level = current_god_level;\n\n        for (uint i=0;i<10;i++){ // if still have extra exp, level up next time\n            if (current_god_level < 99){\n                level_up_exp = mul(10, add(new_level, 1));\n            } else {\n                level_up_exp = 1000;\n            }\n            if (new_exp >= level_up_exp){\n                new_exp = sub(new_exp, level_up_exp);\n                new_level = add(new_level, 1);\n            } else {\n                break;\n            }\n        }\n\n        gods[god_address].exp = new_exp;\n\n        if(new_level > current_god_level) {\n            gods[god_address].level = new_level;\n            if (gods[god_address].listed > 0) {\n                if (listed_gods.length > 1) {\n                    sort_gods(gods[god_address].god_id);\n                }\n            } else if (new_level >= list_level && listed_gods.length < max_listed_gods) {\n                enlist_god(god_address);\n            }\n        }\n        \n        return (new_level, new_exp);\n    }\n\n   \n    function enlist_god (address god_address) private returns (uint) { // public when testing\n        require(gods[god_address].level >= list_level && god_address != admin);\n                \n        // if the god is not listed yet, enlist and add level requirement for the next enlist\n        if (gods[god_address].listed == 0) {\n            uint god_id = gods[god_address].god_id;\n            if (god_id == 0){\n                god_id = create_god(god_address, 0); // get a god_id and set inviter as v god\n            }\n            gods[god_address].listed = listed_gods.push(god_id); // start from 1, 0 is not listed\n            gods[god_address].invite_price = initial_invite_price;\n\n            list_level = add(list_level, 1);\n            bidding_gods[listed_gods.length] = god_address;\n            \n        }\n        return list_level;\n    }\n    \n    function sort_gods_admin(uint god_id) public returns (bool){\n        require (msg.sender == admin);\n        sort_gods(god_id);\n        return true;\n    }\n\n\n    // when a listed god level up and is not top 1 of the list, compare power with higher god, if higher than the higher god, swap position\n    function sort_gods (uint god_id) private returns (uint){ \n        require (god_id > 0);\n        uint list_length = listed_gods.length;\n        if (list_length > 1) {\n            address god_address = gods_address[god_id];\n            uint this_god_listed = gods[god_address].listed;\n            if (this_god_listed < list_length) {\n                uint higher_god_listed = add(this_god_listed, 1);\n                uint higher_god_id = listed_gods[sub(higher_god_listed, 1)];\n                address higher_god = gods_address[higher_god_id];\n                if(gods[god_address].level > gods[higher_god].level\n                || (gods[god_address].level == gods[higher_god].level\n                    && gods[god_address].exp > gods[higher_god].exp)){\n                        listed_gods[sub(this_god_listed, 1)] = higher_god_id;\n                        listed_gods[sub(higher_god_listed, 1)] = god_id;\n                        gods[higher_god].listed = this_god_listed;\n                        gods[god_address].listed = higher_god_listed;\n                }\n            }\n        }\n        return gods[god_address].listed;\n    }\n\n\n    function invite (uint god_id) public payable returns (uint new_invite_price)  {\n        address god_address = gods_address[god_id];\n        require(god_id > 0 \n                && god_id <= count_gods\n                && gods[god_address].hosted_pray == true\n                && tx.gasprice <= max_gas_price\n                );\n\n        uint invite_price = gods[god_address].invite_price;\n\n        require(msg.value >= invite_price); \n\n        if (add(invite_price, invite_price_increase) <= max_invite_price) {\n            gods[god_address].invite_price = add(invite_price, invite_price_increase);\n        }\n        \n        uint exp_up = div(invite_price, (10 ** 15)); // 1000 exp for each eth\n        add_exp(god_address, exp_up);\n        add_exp(msg.sender, exp_up);\n       \n        //generate a new amulet of this god for the inviter\n        count_amulets = add(count_amulets, 1);\n        amulets[count_amulets].god_id = god_id;\n        amulets[count_amulets].owner = msg.sender;\n\n        gods[god_address].count_amulets_generated = add(gods[god_address].count_amulets_generated, 1);\n        if (gods[god_address].count_amulets_generated == 1){\n            gods[god_address].first_amulet_generated = count_amulets;\n        }\n        gods[msg.sender].count_amulets_at_hand = add(gods[msg.sender].count_amulets_at_hand, 1);\n        update_amulets_count(msg.sender, count_amulets, true);\n\n        // invite_price to egses: 60% to pray_egses, 20% to god, 20 to promoter/admin\n        pray_egses = add(pray_egses, div(mul(60, invite_price), 100)); \n        egses_from_contract(god_address, div(mul(20, invite_price), 100), 2); //2 reward god for being invited\n\n        reward_inviter(msg.sender, invite_price);\n        emit invited_god (msg.sender, god_id);\n\n        return gods[god_address].invite_price;\n    }\n    event invited_god (address msg_sender, uint god_id);\n    \n\n    function reward_inviter (address inviter_address, uint invite_price) private returns (bool){\n        // the player spending eth also get credit and share\n        uint previous_share = 0;\n        uint inviter_share = 0;\n        uint share_diff;\n        address rewarding_inviter = inviter_address;\n        \n        for (uint i = 0; i < 9; i++){ // max trace 9 layers of inviter\n            if (rewarding_inviter != address(0) && rewarding_inviter != admin){ // admin doesn't get reward or credit\n                share_diff = 0;\n                gods[rewarding_inviter].credit = add(gods[rewarding_inviter].credit, invite_price);\n                inviter_share = get_vip_level(rewarding_inviter);\n\n                if (inviter_share > previous_share) {\n                    share_diff = sub(inviter_share, previous_share);\n                    if (share_diff > 18) {\n                        share_diff = 18;\n                    }\n                    previous_share = inviter_share;\n                }\n                \n                if (share_diff > 0) {\n                    egses_from_contract(rewarding_inviter, div(mul(share_diff, invite_price), 100), 3); // 3 inviter_reward\n                }\n                \n                rewarding_inviter = gods_address[gods[rewarding_inviter].inviter_id]; // get the address of inviter's inviter'\n            } else{\n                break;\n            }\n        }\n        // invite_price to egses: sub(20%, previous_share) to admin\n        share_diff = sub(20, inviter_share); \n        egses_from_contract(admin, div(mul(share_diff, invite_price), 100), 2); // remaining goes to admin, 2 god_reward for being invited\n        \n        return true;\n    }\n    \n\n    function upgrade_pet () public returns(bool){\n        //use egst to level up pet;\n        uint egst_cost = mul(add(gods[msg.sender].pet_level, 1), 10 ether);\n        egst_to_contract(msg.sender, egst_cost, 6);// 6 upgrade_pet\n        gods[msg.sender].pet_level = add(gods[msg.sender].pet_level, 1);\n        add_exp(msg.sender, div(egst_cost, 1 ether));\n        pray_egst = add(pray_egst, egst_cost);\n\n        emit upgradeAmulet(msg.sender, 0, gods[msg.sender].pet_level);\n        \n        return true;\n    }\n    event upgradeAmulet (address owner, uint amulet_id, uint new_level);\n\n    function set_pet_type (uint new_type) public returns (bool){\n        if (gods[msg.sender].pet_type != new_type) {\n            gods[msg.sender].pet_type = new_type;\n            return true;\n        }\n    }\n  \n      \n    function get_vip_level (address god_address) public view returns (uint vip_level){\n        uint inviter_credit = gods[god_address].credit;\n        \n        if (inviter_credit > 500 ether){\n            vip_level = 18;\n        } else if (inviter_credit > 200 ether){\n            vip_level = 15;\n        } else if (inviter_credit > 100 ether){\n            vip_level = 12;\n        } else if (inviter_credit > 50 ether){\n            vip_level = 10;\n        } else if (inviter_credit > 20 ether){\n            vip_level = 8;\n        } else if (inviter_credit > 10 ether){\n            vip_level = 6;\n        } else if (inviter_credit > 5 ether){\n            vip_level = 5;\n        } else if (inviter_credit > 2 ether){\n            vip_level = 4;\n        } else if (inviter_credit > 1 ether){\n            vip_level = 3;\n        } else if (inviter_credit > 0.5 ether){\n            vip_level = 2;\n        } else {\n            vip_level = 1;\n        }\n        return vip_level;\n    }\n\n\n    // view god's information\n    \n    function get_god_id (address god_address) public view returns (uint god_id){\n        return gods[god_address].god_id;\n    }\n    \n    \n    function get_god_address(uint god_id) public view returns (address){\n        return gods_address[god_id];\n    }\n\n\n    function get_god (uint god_id) public view returns(uint, string, uint, uint, uint, uint, bool) {\n        address god_address = gods_address[god_id];\n        string memory god_name;\n\n        god_name = eth_gods_name.get_god_name(god_address);\n        if (bytes(god_name).length == 0){\n            god_name = \"Unknown\";\n        }\n\n        return (gods[god_address].god_id,\n                god_name,\n                gods[god_address].level,\n                gods[god_address].exp,\n                gods[god_address].invite_price,\n                gods[god_address].listed,\n                gods[god_address].hosted_pray\n                );\n    }\n\n    function get_god_info (address god_address) public view returns (uint, uint, uint, uint, uint, uint, uint){\n        return (gods[god_address].last_ticket_number,\n                gods[god_address].free_rounds,\n                gods[god_address].paid_rounds,\n                gods[god_address].pet_type,\n                gods[god_address].pet_level,\n                gods[god_address].bid_eth,\n                gods[god_address].count_tickets\n                );\n    }    \n    \n    \n    function get_my_info () public view returns(uint, uint, uint, uint, uint, uint, uint) { //private information\n\n        return (gods[msg.sender].god_id,\n                egses_balances[msg.sender], //egses\n                balances[msg.sender], //egst\n                get_vip_level(msg.sender),\n                gods[msg.sender].credit, // inviter_credit\n                gods[msg.sender].inviter_id,\n                gods[msg.sender].count_gods_invited\n                );\n    }   \n\n\n    function get_my_invited () public view returns (uint[]){\n        uint count_elements = 0;\n        uint count_gods_invited = gods[msg.sender].count_gods_invited;\n\n        uint my_id = gods[msg.sender].god_id;\n        uint [] memory invited_players = new uint[](count_gods_invited);\n        if (count_gods_invited > 0) {\n            for (uint i = 1; i <= count_gods; i++){\n                if (gods[gods_address[i]].inviter_id == my_id) {\n                    invited_players[count_elements] = i;\n                    count_elements ++;\n                    \n                    if (count_elements >= count_gods_invited){\n                        break;\n                    }\n                }\n            }\n        }\n        return invited_players;\n    }\n\n\n    function get_listed_gods (uint page_number) public view returns (uint[]){\n        \n        uint count_listed_gods = listed_gods.length;\n        require(count_listed_gods <= mul(page_number, 20));\n        \n        uint[] memory tempArray = new uint[] (20);\n\n        if (page_number < 1) {\n            page_number = 1;\n        } \n\n        for (uint i = 0; i < 20; i++){\n            if(count_listed_gods > add(i, mul(20, sub(page_number, 1)))) {\n                tempArray[i] = listed_gods[sub(sub(sub(count_listed_gods, i), 1), mul(20, sub(page_number, 1)))];\n            } else {\n                break;\n            }\n        }\n        \n        return tempArray;\n    }\n\n\n    // amulets\n   \n    function upgrade_amulet (uint amulet_id) public returns(uint){\n        require(amulets[amulet_id].owner == msg.sender);\n        uint egst_cost = mul(add(amulets[amulet_id].level, 1), 10 ether);\n        egst_to_contract(msg.sender, egst_cost, 7);// reason 7, upgrade_amulet\n        pray_egst = add(pray_egst, egst_cost);\n        \n        amulets[amulet_id].level = add(amulets[amulet_id].level, 1);\n        add_exp(msg.sender, div(egst_cost, 1 ether));\n        emit upgradeAmulet(msg.sender, amulet_id, amulets[amulet_id].level);\n        \n        return amulets[amulet_id].level;\n    }\n    \n    \n    function create_amulet_order (uint amulet_id, uint price) public returns (uint) {\n        require(msg.sender == amulets[amulet_id].owner\n                && amulet_id >= 1 && amulet_id <= count_amulets\n                && amulets[amulet_id].start_selling_block == 0\n                && add(amulets[amulet_id].bound_start_block, bound_duration) < block.number\n                && price > 0);\n\n        amulets[amulet_id].start_selling_block = block.number;\n        amulets[amulet_id].price = price;\n        gods[msg.sender].count_amulets_at_hand = sub(gods[msg.sender].count_amulets_at_hand, 1);\n        gods[msg.sender].count_amulets_selling = add(gods[msg.sender].count_amulets_selling, 1);\n        \n        return gods[msg.sender].count_amulets_selling;\n\n    }\n\n    function buy_amulet (uint amulet_id) public payable returns (bool) {\n        uint price = amulets[amulet_id].price;\n        require(msg.value >= price && msg.value < add(price, max_extra_eth)\n        && amulets[amulet_id].start_selling_block > 0\n        && amulets[amulet_id].owner != msg.sender\n        && price > 0);\n        \n        address seller = amulets[amulet_id].owner;\n        amulets[amulet_id].owner = msg.sender;\n        amulets[amulet_id].bound_start_block = block.number;\n        amulets[amulet_id].start_selling_block = 0;\n\n        gods[msg.sender].count_amulets_at_hand = add(gods[msg.sender].count_amulets_at_hand, 1);\n        update_amulets_count(msg.sender, amulet_id, true);\n        gods[seller].count_amulets_selling = sub(gods[seller].count_amulets_selling, 1);\n        update_amulets_count(seller, amulet_id, false);\n\n        egses_from_contract(seller, price, 6); // 6 sell amulet\n\n        return true;\n    }\n\n    function withdraw_amulet_order (uint amulet_id) public returns (uint){\n        // an amulet can only have one order_id, so withdraw amulet_id instead of withdraw order_id, since only amulet_id is shown in amulets_at_hand\n        require(msg.sender == amulets[amulet_id].owner\n                && amulet_id >= 1 && amulet_id <= count_amulets\n                && amulets[amulet_id].start_selling_block > 0);\n                \n        amulets[amulet_id].start_selling_block = 0;\n        gods[msg.sender].count_amulets_at_hand = add(gods[msg.sender].count_amulets_at_hand, 1);\n        gods[msg.sender].count_amulets_selling = sub(gods[msg.sender].count_amulets_selling, 1);\n\n        return gods[msg.sender].count_amulets_selling;\n    }\n    \n    function update_amulets_count (address god_address, uint amulet_id, bool obtained) private returns (uint){\n        if (obtained == true){\n            if (amulet_id < gods[god_address].amulets_start_id) {\n                gods[god_address].amulets_start_id = amulet_id;\n            }\n        } else {\n            if (amulet_id == gods[god_address].amulets_start_id){\n                for (uint i = amulet_id; i <= count_amulets; i++){\n                    if (amulets[i].owner == god_address && i > amulet_id){\n                        gods[god_address].amulets_start_id = i;\n                        break;\n                    }\n                }\n            }\n        }\n        return gods[god_address].amulets_start_id;\n    }\n    \n\n    function get_amulets_generated (uint god_id) public view returns (uint[]) {\n        address god_address = gods_address[god_id];\n        uint count_amulets_generated = gods[god_address].count_amulets_generated;\n        \n        uint [] memory temp_list = new uint[](count_amulets_generated);\n        if (count_amulets_generated > 0) {\n            uint count_elements = 0;\n            for (uint i = gods[god_address].first_amulet_generated; i <= count_amulets; i++){\n                if (amulets[i].god_id == god_id){\n                    temp_list [count_elements] = i;\n                    count_elements++;\n                    \n                    if (count_elements >= count_amulets_generated){\n                        break;\n                    }\n                }\n            }\n        }\n        return temp_list;\n    }\n\n    \n    function get_amulets_at_hand (address god_address) public view returns (uint[]) {\n        uint count_amulets_at_hand = gods[god_address].count_amulets_at_hand;\n        uint [] memory temp_list = new uint[] (count_amulets_at_hand);\n        if (count_amulets_at_hand > 0) {\n            uint count_elements = 0;\n            for (uint i = gods[god_address].amulets_start_id; i <= count_amulets; i++){\n                if (amulets[i].owner == god_address && amulets[i].start_selling_block == 0){\n                    temp_list[count_elements] = i;\n                    count_elements++;\n                    \n                    if (count_elements >= count_amulets_at_hand){\n                        break;\n                    }\n                }\n            }\n        }\n\n        return temp_list;\n    }\n    \n    \n    function get_my_amulets_selling () public view returns (uint[]){\n\n        uint count_amulets_selling = gods[msg.sender].count_amulets_selling;\n        uint [] memory temp_list = new uint[] (count_amulets_selling);\n        if (count_amulets_selling > 0) {\n            uint count_elements = 0;\n            for (uint i = gods[msg.sender].amulets_start_id; i <= count_amulets; i++){\n                if (amulets[i].owner == msg.sender \n                && amulets[i].start_selling_block > 0){\n                    temp_list[count_elements] = i;\n                    count_elements++;\n                    \n                    if (count_elements >= count_amulets_selling){\n                        break;\n                    }\n                }\n            }\n        }\n\n        return temp_list;\n    }\n\n    // to calculate how many pages\n    function get_amulet_orders_overview () public view returns(uint){\n        uint count_amulets_selling = 0;\n        for (uint i = 1; i <= count_amulets; i++){\n            if (add(amulets[i].start_selling_block, order_duration) > block.number && amulets[i].owner != msg.sender){\n                count_amulets_selling = add(count_amulets_selling, 1);\n            }\n        }        \n        \n        return count_amulets_selling; // to show page numbers when getting amulet_orders\n    }\n\n    function get_amulet_orders (uint page_number) public view returns (uint[]){\n        uint[] memory temp_list = new uint[] (20);\n        uint count_amulets_selling = 0;\n        uint count_list_elements = 0;\n\n        if ((page_number < 1)\n            || count_amulets  <= 20) {\n            page_number = 1; // chose a page out of range\n        }\n        uint start_amulets_count = mul(sub(page_number, 1), 20);\n\n        for (uint i = 1; i <= count_amulets; i++){\n            if (add(amulets[i].start_selling_block, order_duration) > block.number && amulets[i].owner != msg.sender){\n                \n                if (count_amulets_selling <= start_amulets_count) {\n                    count_amulets_selling ++;\n                }\n                if (count_amulets_selling > start_amulets_count){\n                    \n                    temp_list[count_list_elements] = i;\n                    count_list_elements ++;\n                    \n                    if (count_list_elements >= 20){\n                        break;\n                    }\n                }\n                \n            }\n        }\n        \n        return temp_list;\n    }\n    \n    \n    function get_amulet (uint amulet_id) public view returns(address, string, uint, uint, uint, uint, uint){\n        uint god_id = amulets[amulet_id].god_id;\n        // address god_address = gods_address[god_id];\n        string memory god_name = eth_gods_name.get_god_name(gods_address[god_id]);\n        uint god_level = gods[gods_address[god_id]].level;\n        uint amulet_level = amulets[amulet_id].level;\n        uint start_selling_block = amulets[amulet_id].start_selling_block;\n        uint price = amulets[amulet_id].price;\n\n        return(amulets[amulet_id].owner,\n                god_name,\n                god_id,\n                god_level,\n                amulet_level,\n                start_selling_block,\n                price\n              );\n    }\n\n    function get_amulet2 (uint amulet_id) public view returns(uint){\n        return amulets[amulet_id].bound_start_block;\n    }\n\n    // end of amulet\n    \n    // start of pray\n    function admin_deposit (uint egst_amount) public payable returns (bool) {\n        require (msg.sender == admin);\n        if (msg.value > 0){\n            pray_egses = add(pray_egses, msg.value);\n            egses_from_contract(admin, msg.value, 4); // 4 admin_deposit to reward_pool\n        }\n        if (egst_amount > 0){\n            pray_egst = add(pray_egst, egst_amount);\n            egst_to_contract(admin, egst_amount, 4); // 4 admin_deposit to reward_pool            \n        }\n        return true;\n    }\n        \n    function initialize_pray () private returns (bool){\n        if (pray_start_block > 0) { // double safeguard\n            require (check_event_completed() == true\n            && rewarded_pray_winners == true);\n        }\n        \n        count_rounds = add(count_rounds, 1);\n        count_rounds_winner_logs[count_rounds] = 0;\n        pray_start_block = block.number;\n        rewarded_pray_winners = false;\n\n        for (uint i = 1; i <= 3; i++){\n            pk_positions[i] = max_winners[i]; // pk start from the last slot\n\t\t\tcount_listed_winners[i] = 0;\n        }\n        if (listed_gods.length > count_hosted_gods) {\n            // a new god's turn\n            count_hosted_gods = add(count_hosted_gods, 1);\n            pray_host_god = bidding_gods[count_hosted_gods];\n            gods[pray_host_god].hosted_pray = true;\n            pray_reward_top100 = true;\n        } else {\n            //choose highest bidder\n            (uint highest_bid, address highest_bidder) = compare_bid_eth();\n\n            gods[highest_bidder].bid_eth = 0;\n            pray_host_god = highest_bidder;\n            pray_egses = add(pray_egses, highest_bid);\n            pray_reward_top100 = false;\n\n        }\n        \n        // set_up reward pool\n        reward_pool_egses = div(pray_egses, 10);\n        // pray_egses = sub(pray_egses, reward_pool_egses);\n\n        reward_pool_egst = div(pray_egst, 10);\n        pray_egst = sub(pray_egst, reward_pool_egst); // reduce sum for less calculation, burn, if not used\n                \n        return true;\n\n    }\n\n\n    function bid_host () public payable returns (bool) {\n        require (msg.value > 0 && gods[msg.sender].listed > 0);\n        gods[msg.sender].bid_eth = add (gods[msg.sender].bid_eth, msg.value);\n\n        return true;\n    }\n    \n\n    function withdraw_bid () public returns (bool) {\n        uint bid_eth = gods[msg.sender].bid_eth;\n        require(bid_eth > 0);\n        gods[msg.sender].bid_eth = 0;\n        egses_from_contract(msg.sender, bid_eth, 8); // 8  withdraw bid\n        return true;\n    }\n    \n    \n    function create_ticket(address owner_address) private returns (uint) {\n        count_tickets = add(count_tickets, 1);\n        tickets[count_tickets].block_number = add(block.number, 1);\n        tickets[count_tickets].owner = owner_address;\n        gods[owner_address].last_ticket_number = count_tickets;\n        gods[owner_address].count_tickets = add(gods[owner_address].count_tickets, 1);\n        \n        return count_tickets;\n    }\n    \n    \n    function pray (uint inviter_id) public payable returns (bool){\n        require (tx.gasprice <= max_gas_price);\n  \n        if (gods[msg.sender].credit == 0) {\n            create_god(msg.sender, inviter_id);\n        }\n        \n        if (gods[msg.sender].free_rounds >= count_rounds){\n            require (msg.value == double_egst_fee);\n            \n            if (gods[msg.sender].paid_rounds != count_rounds){\n                gods[msg.sender].paid_rounds = count_rounds;\n            }\n            add_exp(msg.sender, 6);\n            pray_egses = add(pray_egses, double_egst_fee);\n        } else {\n            require (msg.value == 0);\n            gods[msg.sender].free_rounds = count_rounds; // 1 free dice in each round\n        }\n        \n        create_ticket(msg.sender);\n        \n        if (used_tickets < count_tickets) {\n\n            ticket storage using_ticket = tickets[add(used_tickets, 1)];\n            uint block_number = using_ticket.block_number;\n\n            if (block_number < block.number) {// can only get previous block hash\n                used_tickets = add(used_tickets, 1);\n                address waiting_prayer = using_ticket.owner;\n                \n                if (add(block_number, block_hash_duration) <= block.number) {// this ticket should have a valid block_number to generate block hash\n                    using_ticket.new_ticket_number = create_ticket(waiting_prayer); //void this ticket and create a new ticket\n                } else {// throw dice\n                    bytes32 block_hash = keccak256(abi.encodePacked(blockhash(block_number)));\n                    using_ticket.block_hash = block_hash;\n    \n                    uint dice_result = eth_gods_dice.throw_dice (block_hash)[0];\n                    using_ticket.dice_result = dice_result;\n\n                    if (dice_result >= 1 && dice_result <= 3){\n                        set_winner(dice_result, used_tickets);\n                    } else {\n                        add_exp(waiting_prayer, 6); // add 6 exp and no pk for lucky stars\n                    }\n\n                }\n            }\n        }\n        \n   \n        add_exp(pray_host_god, 1);\n\n        if (check_event_completed() == true && rewarded_pray_winners == false) {\n            reward_pray_winners();\n        }\n\n        return true;\n    }\n    \n\n    function set_winner (uint prize, uint ticket_number) private returns (uint){\n\n        count_rounds_winner_logs[count_rounds] = add(count_rounds_winner_logs[count_rounds], 1);\n        winner_logs[count_rounds][count_rounds_winner_logs[count_rounds]].ticket_number = ticket_number;\n        winner_logs[count_rounds][count_rounds_winner_logs[count_rounds]].prize = prize;\n        address waiting_prayer =  tickets[ticket_number].owner;\n        bytes32 block_hash = tickets[ticket_number].block_hash;\n\n        if (count_listed_winners[prize] >= max_winners[prize]){ // winner_list maxed, so the new prayer challenge previous winners\n           \tuint pk_position = pk_positions[prize];\n        \taddress previous_winner = listed_winners[prize][pk_position];  \n\n            bool pk_result = pk(waiting_prayer, previous_winner, block_hash);\n\n\t\t\twinner_logs[count_rounds][count_rounds_winner_logs[count_rounds]].pk_result = pk_result;\n\t\t\twinner_logs[count_rounds][count_rounds_winner_logs[count_rounds]].previous_winner = previous_winner;\n            \n            if (pk_result == true) {\n                listed_winners[prize][pk_position] = waiting_prayer; // attacker defeat defender\n            }\n            if (prize > 1) { // no need to change pk_pos for champion\n                if (pk_positions[prize] > 1){\n                    pk_positions[prize] = sub(pk_positions[prize], 1);\n                } else {\n                    pk_positions[prize] = max_winners[prize];\n                }               \n            }\n        } else {\n            count_listed_winners[prize] = add(count_listed_winners[prize], 1);\n            listed_winners[prize][count_listed_winners[prize]] = waiting_prayer;\n        }\n     \n        return count_listed_winners[prize];\n    }\n\n    function reward_pray_winners () private returns (bool){\n        require (check_event_completed() == true && rewarded_pray_winners == false);\n\n        egst_from_contract(pray_host_god, mul(div(reward_pool_egst, 100), 50), 1); // 1 pray_reward for hosting event\n\n        uint this_reward_egses = 0; // this reward for a specific winner\n        uint this_reward_egst = 0;  // this reward for a specific winner\n        \n        for (uint i = 1; i<=3; i++){\n            if (i == 1) {\n                this_reward_egses = mul(div(reward_pool_egses, 100), 60);\n            } else if (i == 2){\n                this_reward_egses = mul(div(reward_pool_egses, 100), 20);\n            } else if (i == 3){\n                this_reward_egst = mul(div(reward_pool_egst, 100), 8);\n            } \n            \n            for (uint reward_i = 1; reward_i <= count_listed_winners[i]; reward_i++){\n                address rewarding_winner = listed_winners[i][reward_i];\n\n                if (this_reward_egses > 0 ) {\n                    egses_from_contract(rewarding_winner, this_reward_egses, 1); // 1 pray_reward\n                    pray_egses = sub(pray_egses, this_reward_egses);\n                } else if (this_reward_egst > 0) {\n                    if (gods[rewarding_winner].paid_rounds < count_rounds){\n                        egst_from_contract(rewarding_winner, this_reward_egst, 1); // 1 pray_reward\n                    } else { \n                        egst_from_contract(rewarding_winner, mul(this_reward_egst, 2), 1); // 1 pray_reward\n                        _totalSupply = add(_totalSupply, this_reward_egst);\n\n                        if (gods[rewarding_winner].paid_rounds > count_rounds){// just in case of any error\n                            gods[rewarding_winner].paid_rounds = count_rounds;\n                        } \n                    }\n                }  \n\n            }\n\n        }\n\n        // burn egst, 2% fixed amount, plus wasted EGST floor prizes\n        uint burn_egst = div(reward_pool_egst, 50);\n        if (count_listed_winners[3] < max_winners[3]) {\n            burn_egst = add(burn_egst,  mul(this_reward_egst, sub(max_winners[3], count_listed_winners[3]))); \n        }\n        _totalSupply = sub(_totalSupply, burn_egst);\n                    \n        if(pray_reward_top100 == true) {\n            reward_top_gods();\n        }\n            \n        // a small gift of exp & egst to the god who burned gas to send rewards to the community\n        egst_from_contract(msg.sender, mul(initializer_reward, 1 ether), 1); // 1 pray_reward\n        _totalSupply = add(_totalSupply, mul(initializer_reward, 1 ether));  \n        add_exp(msg.sender, initializer_reward);\n\n        rewarded_pray_winners = true;\n        initialize_pray();\n        return true;\n    }\n\n\n    // more listed gods, more reward to the top gods, highest reward 600 egst\n    function reward_top_gods () private returns (bool){ // public when testing\n        \n        uint count_listed_gods = listed_gods.length;\n        uint last_god_index;\n        \n        if (count_listed_gods > 100) {\n            last_god_index = sub(count_listed_gods, 100);\n        } else {\n            last_god_index = 0;\n        }\n        \n        uint reward_egst = 0;\n        uint base_reward = 6 ether;\n        if (count_rounds == 6){\n            base_reward = mul(base_reward, 6);\n        }\n        for (uint i = last_god_index; i < count_listed_gods; i++) {\n            reward_egst = mul(base_reward, sub(add(i, 1), last_god_index));\n            egst_from_contract(gods_address[listed_gods[i]], reward_egst, 2);// 2 top_gods_reward\n            _totalSupply = add(_totalSupply, reward_egst);   \n        }\n        \n        return true;\n    }\n\n\n    function compare_bid_eth () private view returns (uint, address) {\n        uint highest_bid = 0;\n        address highest_bidder = v_god; // if no one bid, v god host this event\n\n        for (uint j = 1; j <= listed_gods.length; j++){\n            if (gods[bidding_gods[j]].bid_eth > highest_bid){\n                highest_bid = gods[bidding_gods[j]].bid_eth;\n                highest_bidder = bidding_gods[j];\n            }\n        }\n        return (highest_bid, highest_bidder);\n    }\n\n\n    function check_event_completed () public view returns (bool){\n        if (add(pray_start_block, round_duration) < block.number){\n            return true;   \n        } else {\n            return false;   \n        }\n    }\n\n\n    function pk (address attacker, address defender, bytes32 block_hash) public view returns (bool pk_result){// make it public, view only, other contract may use it\n\n        (uint attacker_sum_god_levels, uint attacker_sum_amulet_levels) = get_sum_levels_pk(attacker);\n        (uint defender_sum_god_levels, uint defender_sum_amulet_levels) = get_sum_levels_pk(defender);\n    \n        pk_result = eth_gods_dice.pk(block_hash, attacker_sum_god_levels, attacker_sum_amulet_levels, defender_sum_god_levels, defender_sum_amulet_levels);\n        \n        return pk_result;\n    }\n    \n    \n    function get_sum_levels_pk (address god_address) public view returns (uint sum_gods_level, uint sum_amulets_level){\n             \n        sum_gods_level =  gods[god_address].level;\n        sum_amulets_level = gods[god_address].pet_level; // add pet level to the sum\n\t\tuint amulet_god_id;\n        uint amulet_god_level;\n        for (uint i = 1; i <= count_amulets; i++){\n            if (amulets[i].owner == god_address && amulets[i].start_selling_block == 0){\n                amulet_god_id = amulets[i].god_id;\n                amulet_god_level = gods[gods_address[amulet_god_id]].level;\n                sum_gods_level = add(sum_gods_level, amulet_god_level);\n                sum_amulets_level = add(sum_amulets_level, amulets[i].level);\n            }\n        }\n                \n        return (sum_gods_level, sum_amulets_level);\n    }\n        \n    //admin need this function\n    function get_listed_winners (uint prize) public view returns (address[]){\n        address [] memory temp_list = new address[] (count_listed_winners[prize]);\n        if (count_listed_winners[prize] > 0) {\n            for (uint i = 0; i < count_listed_winners[prize]; i++){\n                temp_list[i] = listed_winners[prize][add(i,1)];\n            }\n        }\n        return temp_list;\n    }\n    \n    function get_ticket (uint ticket_number) public view returns (uint, bytes32, address, uint, uint){\n        return (tickets[ticket_number].block_number,\n            tickets[ticket_number].block_hash,\n            tickets[ticket_number].owner,\n            tickets[ticket_number].new_ticket_number,\n            tickets[ticket_number].dice_result);\n    }\n    \n    function get_my_tickets() public view returns (uint[]) {\n        uint count_my_tickets = gods[msg.sender].count_tickets;\n        if (count_my_tickets > max_show_tickets) {\n            count_my_tickets = max_show_tickets;\n        }\n        uint [] memory temp_list = new uint[] (count_my_tickets);\n        if (count_my_tickets > 0) {\n            uint count_elements = 0;\n            for (uint i = gods[msg.sender].last_ticket_number; i > 0; i--){\n                if (tickets[i].owner == msg.sender){\n                    temp_list[count_elements] = i;\n                    count_elements++;\n                    \n                    if (count_elements >= count_my_tickets){\n                        break;\n                    }\n                }\n            }\n        }\n\n        return temp_list;       \n    }\n\n \n    // end of pray\n\n    // start of egses\n\n    function egses_from_contract (address to, uint tokens, uint reason) private returns (bool) { // public when testing\n        if (reason == 1) {\n            require (pray_egses > tokens); // >, pool never be zero\n            pray_egses = sub(pray_egses, tokens);\n        }\n\n        egses_balances[to] = add(egses_balances[to], tokens);\n\n        create_change_log(1, reason, tokens, egses_balances[to], contract_address, to);\n        return true;\n    } \n    \n    function egses_withdraw () public returns (uint tokens){\n        tokens = egses_balances[msg.sender];\n        require (tokens > 0 && contract_address.balance >= tokens && reEntrancyMutex == false);\n\n        reEntrancyMutex = true; // if met problem, it will use up gas from msg.sender and roll back to false\n        egses_balances[msg.sender] = 0;\n        msg.sender.transfer(tokens);\n        reEntrancyMutex = false;\n        \n        emit withdraw_egses(msg.sender, tokens);\n        create_change_log(1, 5, tokens, 0, contract_address, msg.sender); // 5 withdraw egses\n\n        return tokens;\n    }\n    event withdraw_egses (address receiver, uint tokens);\n\n   // end of egses\n   \n\n    // start of erc20 for egst\n    function totalSupply () public view returns (uint){\n        return _totalSupply;\n    }\n\n\n    function balanceOf (address tokenOwner) public view returns (uint){\n        return balances[tokenOwner]; // will return 0 if doesn't exist\n    }\n\n    function allowance (address tokenOwner, address spender) public view returns (uint) {\n        return allowed[tokenOwner][spender];\n    }\n\n    function transfer (address to, uint tokens) public returns (bool success){\n        require (balances[msg.sender] >= tokens);\n        balances[msg.sender] = sub(balances[msg.sender], tokens);\n        balances[to] = add(balances[to], tokens);\n        emit Transfer(msg.sender, to, tokens);\n        create_change_log(2, 9, tokens, balances[to], msg.sender, to);\n        \n        return true;    \n    }\n    event Transfer (address indexed from, address indexed to, uint tokens);\n\n\n    function approve (address spender, uint tokens) public returns (bool success) {\n\n        require (balances[msg.sender] >= tokens);\n        allowed[msg.sender][spender] = tokens;\n        \n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n    event Approval (address indexed tokenOwner, address indexed spender, uint tokens);\n\n\n    function transferFrom (address from, address to, uint tokens) public returns (bool success) {\n        require (balances[from] >= tokens);\n        allowed[from][msg.sender] = sub(allowed[from][msg.sender], tokens);\n        balances[from] = sub(balances[from], tokens);\n        balances[to] = add(balances[to], tokens);\n        \n        emit Transfer(from, to, tokens);\n        create_change_log(2, 10, tokens, balances[to], from, to);\n        return true;    \n    }\n\n    // end of erc20 for egst\n    \n    \n    // egst\n  \n    function egst_from_contract (address to, uint tokens, uint reason) private returns (bool) { // public when testing\n        balances[to] = add(balances[to], tokens);\n\n        create_change_log(2, reason, tokens, balances[to], contract_address, to); \n        return true;\n    }\n\n    function egst_to_contract (address from, uint tokens, uint reason) private returns (bool) { // public when testing\n        require (balances[from] >= tokens);\n        balances[from] = sub(balances[from], tokens);\n        \n\n        emit spend_egst(from, tokens, reason);\n        create_change_log(2, reason, tokens, balances[from], from, contract_address);\n        return true;\n    }\n    event spend_egst (address from, uint tokens, uint reason);\n\n\n    function create_token_order (uint unit_price, uint egst_amount) public returns (uint) {      \n        require(unit_price >= min_unit_price && unit_price <= max_unit_price \n        && balances[msg.sender] >= egst_amount\n        && egst_amount <= max_egst_amount\n        && egst_amount >= min_egst_amount);\n\n        count_token_orders = add(count_token_orders, 1);\n\n        egst_to_contract(msg.sender, egst_amount, 3); // 3 create_token_order\n        \n        token_orders[count_token_orders].start_selling_block = block.number;    \n        token_orders[count_token_orders].seller = msg.sender;\n        token_orders[count_token_orders].unit_price = unit_price;\n        token_orders[count_token_orders].egst_amount = egst_amount;\n        gods[msg.sender].count_token_orders = add(gods[msg.sender].count_token_orders, 1);\n        \n        update_first_active_token_order(msg.sender);\n\n        return gods[msg.sender].count_token_orders;\n    }\n\n\n    function withdraw_token_order (uint order_id) public returns (bool) { \n        require (msg.sender == token_orders[order_id].seller\n                && token_orders[order_id].egst_amount > 0);\n\n        uint egst_amount = token_orders[order_id].egst_amount;\n        token_orders[order_id].start_selling_block = 0;\n        token_orders[order_id].egst_amount = 0;\n        egst_from_contract(msg.sender, egst_amount, 4); // 4  withdraw token_order\n        gods[msg.sender].count_token_orders = sub(gods[msg.sender].count_token_orders, 1);\n        \n        update_first_active_token_order(msg.sender);\n        emit WithdrawTokenOrder(msg.sender, order_id);\n\n        return true;\n    }\n    event WithdrawTokenOrder (address seller, uint order_id);\n\n    function buy_token (uint order_id, uint egst_amount) public payable returns (uint) { \n\n        require(order_id >= first_active_token_order \n                && order_id <= count_token_orders\n                && egst_amount <= token_orders[order_id].egst_amount\n                && token_orders[order_id].egst_amount > 0\n                && token_orders[order_id].seller != msg.sender);\n        \n        // unit_price 100 means 1 egst = 0.001 ether\n        uint eth_cost = div(mul(token_orders[order_id].unit_price, egst_amount), 100000);\n        require(msg.value >= eth_cost && msg.value < add(eth_cost, max_extra_eth) );\n\n        token_orders[order_id].egst_amount = sub(token_orders[order_id].egst_amount, egst_amount);\n        egst_from_contract(msg.sender, egst_amount, token_orders[order_id].unit_price); // uint price (> 10) will be recorded as reason in change log and translated by front end as buy token & unit_price\n\n        address seller = token_orders[order_id].seller;\n        egses_from_contract(seller, eth_cost, 7); // 7 sell egst\n        \n        \n        if (token_orders[order_id].egst_amount <= 0){\n            token_orders[order_id].start_selling_block = 0;\n            gods[seller].count_token_orders = sub(gods[seller].count_token_orders, 1);\n            update_first_active_token_order(seller);\n        }\n        \n        emit BuyToken(msg.sender, order_id, egst_amount);\n\n        return token_orders[order_id].egst_amount;\n    }\n    event BuyToken (address buyer, uint order_id, uint egst_amount);\n\n  \n    function update_first_active_token_order (address god_address) private returns (uint, uint){ // public when testing\n        if (count_token_orders > 0 \n        && first_active_token_order == 0){\n            first_active_token_order = 1;\n        } else {\n            for (uint i = first_active_token_order; i <= count_token_orders; i++) {\n                if (add(token_orders[i].start_selling_block, order_duration) > block.number){\n                    // find the first active order and compare with the currect index\n                    if (i > first_active_token_order){\n                        first_active_token_order = i;\n                    }\n                    break;\n                }\n            }    \n        }\n            \n        if (gods[god_address].count_token_orders > 0\n        && gods[god_address].first_active_token_order == 0){\n            gods[god_address].first_active_token_order = 1; // may not be 1, but it will correct next time\n        } else {\n            for (uint j = gods[god_address].first_active_token_order; j < count_token_orders; j++){\n                if (token_orders[j].seller == god_address \n                && token_orders[j].start_selling_block > 0){ // don't check duration, show it to selling, even if expired\n                    // find the first active order and compare with the currect index\n                    if(j > gods[god_address].first_active_token_order){\n                        gods[god_address].first_active_token_order = j;\n                    }\n                    break;\n                }\n            }\n        }\n        \n        return (first_active_token_order, gods[msg.sender].first_active_token_order);\n    }\n\n\n    function get_token_order (uint order_id) public view returns(uint, address, uint, uint){\n        require(order_id >= 1 && order_id <= count_token_orders);\n\n        return(token_orders[order_id].start_selling_block,\n               token_orders[order_id].seller,\n               token_orders[order_id].unit_price,\n               token_orders[order_id].egst_amount);\n    }\n\n    // return total orders and lowest price to browser, browser query each active order and show at most three orders of lowest price\n    function get_token_orders () public view returns(uint, uint, uint, uint, uint) {\n        uint lowest_price = max_unit_price;\n        for (uint i = first_active_token_order; i <= count_token_orders; i++){\n            if (token_orders[i].unit_price < lowest_price \n            && token_orders[i].egst_amount > 0\n            && add(token_orders[i].start_selling_block, order_duration) > block.number){\n                lowest_price = token_orders[i].unit_price;\n            }\n        }\n        return (count_token_orders, first_active_token_order, order_duration, max_unit_price, lowest_price);\n    }\n    \n\n    function get_my_token_orders () public view returns(uint []) {\n        uint my_count_token_orders = gods[msg.sender].count_token_orders;\n        uint [] memory temp_list = new uint[] (my_count_token_orders);\n        if (my_count_token_orders > 0) {\n            uint count_list_elements = 0;\n            for (uint i = gods[msg.sender].first_active_token_order; i <= count_token_orders; i++){\n                if (token_orders[i].seller == msg.sender\n                && token_orders[i].start_selling_block > 0){\n                    temp_list[count_list_elements] = i;\n                    count_list_elements++;\n                    \n                    if (count_list_elements >= my_count_token_orders){\n                        break;\n                    }\n                }\n            }\n        }\n\n        return temp_list;\n    }\n\n\n    // end of egst\n    \n   \n    // logs\n    function get_winner_log (uint pray_round, uint log_id) public view returns (uint, bytes32, address, address, uint, bool, uint){\n        require(log_id >= 1 && log_id <= count_rounds_winner_logs[pray_round]);\n        winner_log storage this_winner_log = winner_logs[pray_round][log_id];\n        \n        uint ticket_number = this_winner_log.ticket_number;\n        \n        return (tickets[ticket_number].block_number,\n                tickets[ticket_number].block_hash,\n                tickets[ticket_number].owner,\n                this_winner_log.previous_winner,\n                this_winner_log.prize,\n                this_winner_log.pk_result,\n                this_winner_log.ticket_number);\n    }    \n\n    function get_count_rounds_winner_logs (uint pray_round) public view returns (uint){\n        return count_rounds_winner_logs[pray_round];\n    }\n\n\n    // egses change reasons:  \n        // 1 pray_reward, 2 god_reward for being invited, 3 inviter_reward,\n        // 4 admin_deposit to reward_pool, 5 withdraw egses\n        // 6 sell amulet, 7 sell egst, 8 withdraw bid\n    \n    // egst_change reasons: \n        // 1 pray_reward, 2 top_gods_reward, \n        // 3 create_token_order, 4 withdraw token_order, 5 buy token (> 10),  \n        // 6 upgrade pet, 7 upgrade amulet, 8 admin_reward, \n        // 9 transfer, 10 transferFrom(owner & receiver)\n\n        \n    function create_change_log (uint asset_type, uint reason, uint change_amount, uint after_amount, address _from, address _to) private returns (uint) {\n        count_rounds_change_logs[count_rounds] = add(count_rounds_change_logs[count_rounds], 1);\n        uint log_id = count_rounds_change_logs[count_rounds];\n \n        change_logs[count_rounds][log_id].block_number = block.number;\n        change_logs[count_rounds][log_id].asset_type = asset_type;\n        change_logs[count_rounds][log_id].reason = reason;\n        change_logs[count_rounds][log_id].change_amount = change_amount;\n        change_logs[count_rounds][log_id].after_amount = after_amount; \n        change_logs[count_rounds][log_id]._from = _from;\n        change_logs[count_rounds][log_id]._to = _to;\n        \n        return log_id;\n    }\n          \n    function get_change_log (uint pray_round, uint log_id) public view returns (uint, uint, uint, uint, uint, address, address){ // public\n        change_log storage this_log = change_logs[pray_round][log_id];\n        return (this_log.block_number,\n                this_log.asset_type,\n                this_log.reason, // reason > 10 is buy_token unit_price\n                this_log.change_amount,\n                this_log.after_amount, // god's after amount. transfer or transferFrom doesn't record log\n                this_log._from,\n                this_log._to);\n        \n    }\n    \n    function get_count_rounds_change_logs (uint pray_round) public view returns(uint){\n        return count_rounds_change_logs[pray_round];\n    }\n    \n    // end of logs\n\n\n    // common functions\n\n     function add (uint a, uint b) internal pure returns (uint c) {\n         c = a + b;\n         require(c >= a);\n     }\n     function sub (uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n         c = a - b;\n     }\n     function mul (uint a, uint b) internal pure returns (uint c) {\n         c = a * b;\n         require(a == 0 || c / a == b);\n     }\n     function div (uint a, uint b) internal pure returns (uint c) {\n         require(b > 0);\n         c = a / b;\n     }\n\n}\n\n\ncontract EthGodsName {\n\n    // EthGods\n    EthGods private eth_gods;\n    address private ethgods_contract_address;   \n    function set_eth_gods_contract_address (address eth_gods_contract_address) public returns (bool){\n        require (msg.sender == admin);\n        \n        ethgods_contract_address = eth_gods_contract_address;\n        eth_gods = EthGods(ethgods_contract_address); \n        return true;\n    }\n  \n    address private admin; // manually update to ethgods' admin\n    function update_admin () public returns (bool){\n        (address new_admin,,,,,,) = eth_gods.query_contract();\n        require (msg.sender == new_admin);\n        admin = new_admin;\n        return true;\n    }\n\n    //contract information & administration\n    bool private contract_created; // in case constructor logic change in the future\n    address private contract_address; //shown at the top of the home page   \n    \n    string private invalid_chars = \"\\\\\\\"\";\n    bytes private invalid_bytes = bytes(invalid_chars);\n    function set_invalid_chars (string new_invalid_chars) public returns (bool) {\n        require(msg.sender == admin);\n        invalid_chars = new_invalid_chars;\n        invalid_bytes = bytes(invalid_chars);\n        return true;\n    }\n    \n    uint private valid_length = 16;    \n    function set_valid_length (uint new_valid_length) public returns (bool) {\n        require(msg.sender == admin);\n        valid_length = new_valid_length;\n        return true;\n    }\n    \n    struct god_name {\n        string god_name;\n        uint block_number;\n        uint block_duration;\n    }\n    mapping (address => god_name) private gods_name;\n\n    // start of constructor and destructor\n    \n    constructor () public {    \n        require (contract_created == false);\n        contract_created = true;\n        contract_address = address(this);\n        admin = msg.sender;     \n        address v_god = 0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359;\n        gods_name[v_god].god_name = \"V\";\n    }\n\n    function () public payable {\n        revert();  // if received eth for no reason, reject\n    }\n\n    function finalize() public {\n        require (msg.sender == admin);\n        selfdestruct(msg.sender); \n    }\n    \n    // end of constructor and destructor\n    \n    \n    function set_god_name (string new_name) public returns (bool){\n        address god_address = msg.sender;\n        require (add(gods_name[god_address].block_number, gods_name[god_address].block_duration) < block.number );\n\n        bytes memory bs = bytes(new_name);\n        require (bs.length <= valid_length);\n        \n        for (uint i = 0; i < bs.length; i++){\n            for (uint j = 0; j < invalid_bytes.length; j++) {\n                if (bs[i] == invalid_bytes[j]){\n                    return false;\n                } \n            }\n        }\n\n        gods_name[god_address].god_name = new_name;\n        emit set_name(god_address, new_name);\n        return true;\n    }\n    event set_name (address indexed god_address, string new_name);\n\n\n    function get_god_name (address god_address) public view returns (string) {\n        return gods_name[god_address].god_name;\n    }\n\n    function block_god_name (address god_address, uint block_duration) public {\n        require (msg.sender == admin);\n        gods_name[god_address].god_name = \"Unkown\";\n        gods_name[god_address].block_number = block.number;\n        gods_name[god_address].block_duration = block_duration;\n    }\n    \n    function add (uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n}\n\n\ncontract EthGodsDice {\n    \n    //contract information & administration\n    bool private contract_created; // in case constructor logic change in the future\n    address private contract_address; //shown at the top of the home page\n    address private admin;\n    \n    // start of constructor and destructor\n    constructor () public {\n        require (contract_created == false);\n        contract_created = true;\n        contract_address = address(this);\n        admin = msg.sender;\n\n    }\n\n    function finalize () public {\n        require (msg.sender == admin);\n        selfdestruct(msg.sender); \n    }\n    \n    function () public payable {\n        revert();  // if received eth for no reason, reject\n    }\n    \n    // end of constructor and destructor\n\n\n    function throw_dice (bytes32 block_hash) public pure returns (uint[]) {// 0 for prize, 1-6 for 6 numbers should be pure\n        uint[] memory dice_numbers = new uint[](7);\n        uint hash_number;\n        uint[] memory count_dice_numbers = new uint[](7);\n        uint i; // for loop\n  \n        for (i = 1; i <= 6; i++) {\n            hash_number = uint(block_hash[i]);\n            if (hash_number >= 214) { // 214\n                dice_numbers[i] = 6;\n            } else if (hash_number >= 172) { // 172\n                dice_numbers[i] = 5;\n            } else if (hash_number >= 129) { // 129\n                dice_numbers[i] = 4;\n            } else if (hash_number >= 86) { // 86\n                dice_numbers[i] = 3;\n            } else if (hash_number >= 43) { // 43\n                dice_numbers[i] = 2;\n            } else {\n                dice_numbers[i] = 1;\n            }\n            count_dice_numbers[dice_numbers[i]] ++;\n        }\n\n        bool won_super_prize = false;\n        uint count_super_eth = 0;\n        for (i = 1; i <= 6; i++) {\n            if (count_dice_numbers[i] >= 5) {\n                dice_numbers[0] = 1; //champion_eth\n                won_super_prize = true;\n                break;\n            }else if (count_dice_numbers[i] >= 3) {\n                dice_numbers[0] = 3; // super_egst\n                won_super_prize = true;\n                break;\n            }else if (count_dice_numbers[i] == 1) {\n                count_super_eth ++;\n                if (count_super_eth == 6) {\n                    dice_numbers[0] = 2; // super_eth\n                    won_super_prize = true;\n                }\n            } \n        }\n\n        if (won_super_prize == false) {\n            dice_numbers[0] = 4;\n        }\n        \n        return dice_numbers;\n    }\n    \n    function pk (bytes32 block_hash, uint attacker_sum_god_levels, uint attacker_sum_amulet_levels, uint defender_sum_god_levels, uint defender_sum_amulet_levels) public pure returns (bool){\n     \n        uint god_win_chance;\n        attacker_sum_god_levels = add(attacker_sum_god_levels, 10);\n        if (attacker_sum_god_levels < defender_sum_god_levels){\n            god_win_chance = 0;\n        } else {\n            god_win_chance = sub(attacker_sum_god_levels, defender_sum_god_levels);\n            if (god_win_chance > 20) {\n                god_win_chance = 100;\n            } else { // equal level, 50% chance to win\n                god_win_chance = mul(god_win_chance, 5);\n            }\n        }        \n        \n        \n        uint amulet_win_chance;\n        attacker_sum_amulet_levels = add(attacker_sum_amulet_levels, 10);\n        if (attacker_sum_amulet_levels < defender_sum_amulet_levels){\n            amulet_win_chance = 0;\n        } else {\n            amulet_win_chance = sub(attacker_sum_amulet_levels, defender_sum_amulet_levels);\n            if (amulet_win_chance > 20) {\n                amulet_win_chance = 100;\n            } else { // equal level, 50% chance to win\n                amulet_win_chance = mul(amulet_win_chance, 5);\n            }\n        }\n\n        \n        uint attacker_win_chance = div(add(god_win_chance, amulet_win_chance), 2);\n        if (attacker_win_chance >= div(mul(uint(block_hash[3]),2),5)){\n            return true;\n        } else {\n            return false;\n        }\n        \n    }\n    \n    \n    // common functions\n\n     function add (uint a, uint b) internal pure returns (uint c) {\n         c = a + b;\n         require(c >= a);\n     }\n     function sub (uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n         c = a - b;\n     }\n     function mul (uint a, uint b) internal pure returns (uint c) {\n         c = a * b;\n         require(a == 0 || c / a == b);\n     }\n     function div (uint a, uint b) internal pure returns (uint c) {\n         require(b > 0);\n         c = a / b;\n     }\n        \n}",
  "bytecode": "60c0604052601160808190527f657468676f647340676d61696c2e636f6d00000000000000000000000000000060a090815262000040916003919062000ace565b506040805160608101825260238082527f737761726d2d67617465776179732e6e65742f627a7a3a2f657468676f64732e602083019081527f65746800000000000000000000000000000000000000000000000000000000009290930191909152620000af9160049162000ace565b5060068054600160a060020a031990811673ca5a9db0ef9a0bf5c38fc86fde6cb897d9d86add17909155600780548216738396d94046a099113e5fe5cbad7ec95e96c2b7961790556008805490911673fb6916095ca1df60bb79ce92ce3ea74c37c5d35917905560ff6009556000600a818155612710600e5566470de4df820000600f819055601055683635c9adc5dea0000060115566038d7ea4c6800060125560135564174876e80060149081556015829055612328601755614e20601855601b805460ff19908116909155603c601e55661550f7dca70000601f55611a0a602155602591909155602980549091169055602a819055602b819055602c819055602d5560408051808201909152600c8082527f457468476f6473546f6b656e00000000000000000000000000000000000000006020909201918252620001f991602f9162000ace565b506040805180820190915260048082527f45475354000000000000000000000000000000000000000000000000000000006020909201918252620002409160309162000ace565b5060006034556000603655601460375560c860385569d3c21bcecceda10000006039556509184e72a000603a556000603b553480156200027f57600080fd5b5060015474010000000000000000000000000000000000000000900460ff1615620002a957600080fd5b6001805460a060020a60ff0219167401000000000000000000000000000000000000000017905560028054600160a060020a03199081163017909155600580549091163317908190556200031190600160a060020a0316600064010000000062000451810204565b506008546200033490600160a060020a0316600064010000000062000451810204565b5060088054600160a060020a039081166000908152600b60205260409020600a600190910155905462000371911664010000000062000515810204565b506020805260017f156774b33c8bc7cb83eda4cbc43b36c7c9490ff8913c488ccd5132cfc71344ea5560027f2c5f9a2e204d4db70ad0f9037679e33061b4c51a386497019bee969e16be28d755600360005260067f1ae1eab41a4db68d73559dd6c8b7ac16a4bc819634768486d35edbff05543abf556a04f68ca6d8cd91c60000006031819055686c6b935b8bbd400000602b8190556200041c919064010000000062000670810204565b600554600160a060020a03166000908152603260205260409020556200044a64010000000062000686810204565b5062000b70565b600160a060020a0382166000908152600b602081905260408220015415156200050f5750600a546200048e816001640100000000620008c5810204565b600a556000818152600c602090815260408083208054600160a060020a031916600160a060020a0388169081179091558352600b91829052822083815566038d7ea4c6800091015581118015620004e55750600082115b8015620004f35750600a5482105b156200050f576200050d82640100000000620008d6810204565b505b92915050565b601354600160a060020a0382166000908152600b60205260408120600101549091829110801590620005555750600554600160a060020a03848116911614155b15156200056157600080fd5b600160a060020a0383166000908152600b60205260409020600501541515620006645750600160a060020a0382166000908152600b6020526040902054801515620005bf57620005bc83600064010000000062000451810204565b90505b600d80546001818101928390557fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5909101839055600160a060020a0385166000908152600b602052604090206005810192909255600f546006909201919091556013546200063691640100000000620008c5810204565b601355600d546000908152601d602052604090208054600160a060020a031916600160a060020a0385161790555b60135491505b50919050565b6000828211156200068057600080fd5b50900390565b6000806000806000601a541115620006d057620006ab640100000000620009d9810204565b15156001148015620006c45750601b5460ff1615156001145b1515620006d057600080fd5b620006ee603b546001620008c5640100000000026401000000009004565b603b8190556000908152603c602052604081205543601a55601b805460ff19169055600192505b600383116200074a57600083815260208080526040808320546026835281842055602790915281205560019092019162000715565b601c54600d541115620007ef5762000775601c546001620008c5640100000000026401000000009004565b601c8190556000908152601d602090815260408083205460198054600160a060020a031916600160a060020a03928316178082559091168452600b909252909120600901805460ff19166001179055805460a060020a60ff0219167401000000000000000000000000000000000000000017905562000862565b6200080264010000000062000a12810204565b600160a060020a0381166000818152600b60205260408120600a015560198054600160a060020a0319169091179055602a5491935091506200084e9083640100000000620008c5810204565b602a556019805460a060020a60ff02191690555b62000880602a54600a62000aab640100000000026401000000009004565b602c55602b546200089c90600a64010000000062000aab810204565b602d819055602b54620008b89164010000000062000670810204565b602b556001935050505090565b818101828110156200050f57600080fd5b6000806000831180156200090057506000838152600c6020526040902054600160a060020a031615155b80156200091d5750336000908152600b6020526040902060160154155b80156200095c5750336000908152600b6020818152604080842054878552600c835281852054600160a060020a03168552929091529091206016015414155b156200066a5750336000908152600b60208181526040808420601601869055858452600c825280842054600160a060020a03168085529290915290912060170154620009b3906001640100000000620008c5810204565b600160a060020a0382166000908152600b6020526040902060170155600191506200066a565b600043620009fb601a54602154620008c5640100000000026401000000009004565b101562000a0b5750600162000a0f565b5060005b90565b60085460009081908190600160a060020a031660015b600d54811162000aa1576000818152601d6020908152604080832054600160a060020a03168352600b9091529020600a015483101562000a98576000818152601d6020818152604080842054600160a060020a0316808552600b8352908420600a01549385905291905290935091505b60010162000a28565b5090939092509050565b600080821162000aba57600080fd5b818381151562000ac657fe5b049392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000b1157805160ff191683800117855562000b41565b8280016001018555821562000b41579182015b8281111562000b4157825182559160200191906001019062000b24565b5062000b4f92915062000b53565b5090565b62000a0f91905b8082111562000b4f576000815560010162000b5a565b6158258062000b806000396000f3006080604052600436106103005763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663061d1af4811461030557806306fdde031461036d578063087809de146103f7578063095ea7b3146104265780630c035b1e1461044a578063141350681461045557806318160ddd1461046d5780631dbf009814610494578063219a0fbd146104c85780632299df0e146104dd5780632300a0ad146104f557806323b872dd14610519578063247e47501461054357806326bca0f81461060157806330d772c51461064e578063313ce5671461075a5780633694e432146107855780633ee054c2146107d0578063467ade48146107eb5780634b0177e9146108035780634bad2104146108115780634bb278f3146108295780634eac646f146108405780634ef4dcdb14610848578063515f067714610872578063534242921461088a5780635db7d4f4146108a2578063658248a6146108b757806368d33699146109155780636e9958761461092d57806370a082311461098c57806370e4e1b2146109ad57806373674ecc14610a37578063774d5a3314610a425780637e0c743c14610a575780637ecc149914610a7857806380f3eb8f14610a90578063837cd9d414610ad057806384ff57c114610b2f57806392851aee14610b47578063952fb36f14610b5c57806395d89b4114610b74578063977e550914610b895780639a735ef114610b945780639c32917e14610bce578063a5b7584214610c09578063a9059cbb14610c57578063ab8602ac14610c7b578063ad5b3e7714610cc1578063ae820b8814610cdc578063b2146c9014610cf4578063bb9d054b14610d09578063bf8823ae14610d2a578063c525bca114610d3f578063c5916bfd14610d60578063cbc25e9814610d6b578063cfc928df14610d80578063dd17179214610da1578063dd62ed3e14610db6578063e3f1ab5014610ddd578063e679683914610dfe578063e730f89314610e13578063e9333fab14610e28578063ebf852ab14610e49578063f135f9fd14610e6a575b600080fd5b34801561031157600080fd5b5061031d600435610ec8565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610359578181015183820152602001610341565b505050509050019250505060405180910390f35b34801561037957600080fd5b50610382610fe9565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103bc5781810151838201526020016103a4565b50505050905090810190601f1680156103e95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561040357600080fd5b50610412600435602435611077565b604080519115158252519081900360200190f35b34801561043257600080fd5b50610412600160a060020a03600435166024356111c2565b610412600435611245565b34801561046157600080fd5b5061031d6004356113b2565b34801561047957600080fd5b506104826114aa565b60408051918252519081900360200190f35b3480156104a057600080fd5b506104ac6004356114b1565b60408051600160a060020a039092168252519081900360200190f35b3480156104d457600080fd5b5061031d6114cf565b3480156104e957600080fd5b5061031d60043561159e565b34801561050157600080fd5b50610412600435600160a060020a0360243516611680565b34801561052557600080fd5b50610412600160a060020a03600435811690602435166044356116ff565b34801561054f57600080fd5b5061055b60043561183f565b604051808881526020018060200187815260200186815260200185815260200184815260200183151515158152602001828103825288818151815260200191508051906020019080838360005b838110156105c05781810151838201526020016105a8565b50505050905090810190601f1680156105ed5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b34801561060d57600080fd5b506106166119da565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b34801561065a57600080fd5b50610663611a4e565b60408051600160a060020a03841691810191909152811515606082015260808082528551908201528451819060208083019160a084019189019080838360005b838110156106bb5781810151838201526020016106a3565b50505050905090810190601f1680156106e85780820380516001836020036101000a031916815260200191505b50838103825286518152865160209182019188019080838360005b8381101561071b578181015183820152602001610703565b50505050905090810190601f1680156107485780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34801561076657600080fd5b5061076f611ba0565b6040805160ff9092168252519081900360200190f35b34801561079157600080fd5b5061079d600435611ba5565b604080519586526020860194909452600160a060020a039092168484015260608401526080830152519081900360a00190f35b3480156107dc57600080fd5b50610482600435602435611bde565b3480156107f757600080fd5b50610482600435611ce9565b610482600435602435611cfe565b34801561081d57600080fd5b50610482600435611f0f565b34801561083557600080fd5b5061083e61203c565b005b610412612072565b34801561085457600080fd5b50610412600160a060020a03600435811690602435166044356120d4565b34801561087e57600080fd5b506104826004356121b1565b34801561089657600080fd5b5061031d6004356121c3565b3480156108ae57600080fd5b506104126122a3565b3480156108c357600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261041295833595369560449491939091019190819084018382808284375094975061238b9650505050505050565b34801561092157600080fd5b50610412600435612436565b34801561093957600080fd5b5061094860043560243561246c565b604080519788526020880196909652600160a060020a0394851687870152929093166060860152608085015290151560a084015260c0830152519081900360e00190f35b34801561099857600080fd5b50610482600160a060020a036004351661250d565b3480156109b957600080fd5b506109c5600435612528565b6040518088600160a060020a0316600160a060020a031681526020018060200187815260200186815260200185815260200184815260200183815260200182810382528881815181526020019150805190602001908083836000838110156105c05781810151838201526020016105a8565b610412600435612739565b348015610a4e57600080fd5b506104826127bf565b348015610a6357600080fd5b50610616600160a060020a03600435166128b3565b348015610a8457600080fd5b506104126004356128fc565b348015610a9c57600080fd5b50610aa56129f5565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b348015610adc57600080fd5b50610aeb600435602435612aac565b6040805197885260208801969096528686019490945260608601929092526080850152600160a060020a0390811660a08501521660c0830152519081900360e00190f35b348015610b3b57600080fd5b50610482600435612b00565b348015610b5357600080fd5b5061031d612b12565b348015610b6857600080fd5b50610482600435612bed565b348015610b8057600080fd5b50610382612cbc565b610482600435612d17565b348015610ba057600080fd5b50610bb5600160a060020a0360043516612fa7565b6040805192835260208301919091528051918290030190f35b348015610bda57600080fd5b50610be3613090565b60408051600160a060020a03938416815291909216602082015281519081900390910190f35b348015610c1557600080fd5b50610c1e6130f1565b604051808261040080838360005b83811015610c44578181015183820152602001610c2c565b5050505090500191505060405180910390f35b348015610c6357600080fd5b50610412600160a060020a0360043516602435613217565b348015610c8757600080fd5b50610c93600435613304565b60408051948552600160a060020a039093166020850152838301919091526060830152519081900360800190f35b348015610ccd57600080fd5b50610482600435602435613361565b348015610ce857600080fd5b5061041260043561347b565b348015610d0057600080fd5b5061041261349e565b348015610d1557600080fd5b50610482600160a060020a03600435166134c5565b348015610d3657600080fd5b5061031d6135e0565b348015610d4b57600080fd5b50610412600160a060020a03600435166136c2565b610412600435613701565b348015610d7757600080fd5b5061031d613a87565b348015610d8c57600080fd5b50610482600160a060020a0360043516613b69565b348015610dad57600080fd5b50610482613b84565b348015610dc257600080fd5b50610482600160a060020a0360043581169060243516613bf5565b348015610de957600080fd5b5061031d600160a060020a0360043516613c20565b348015610e0a57600080fd5b50610412613d2f565b348015610e1f57600080fd5b50610412613d76565b348015610e3457600080fd5b50610412600160a060020a0360043516613dd7565b348015610e5557600080fd5b50610412600160a060020a0360043516613f23565b348015610e7657600080fd5b50610e7f613f60565b60408051600160a060020a0398891681529688166020880152949096168585015260608501929092526080840152151560a083015291151560c082015290519081900360e00190f35b6060806000806000806014604051908082528060200260200182016040528015610efc578160200160208202803883390190505b50945060009350600092506001871080610f195750601460155411155b15610f2357600196505b610f38610f31886001613fc5565b6014613fda565b9150600190505b6015548111610fde576000818152601660205260409020600401546018544391610f6891613fff565b118015610f8f5750600081815260166020526040902060010154600160a060020a03163314155b15610fd657818411610fa2576001909301925b81841115610fd657808584815181101515610fb957fe5b6020908102909101015260019092019160148310610fd657610fde565b600101610f3f565b509295945050505050565b602f805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561106f5780601f106110445761010080835404028352916020019161106f565b820191906000526020600020905b81548152906001019060200180831161105257829003601f168201915b505050505081565b600554600090600160a060020a0316331461109157600080fd5b826001141561109f576111b8565b82600214156110b25760218290556111b8565b82600314156110c55760098290556111b8565b82600414156110d857601f8290556111b8565b82600514156110eb5760188290556111b8565b82600614156110fe5760178290556111b8565b826007141561111157601e8290556111b8565b82600814156111245760128290556111b8565b82600914156111375760378290556111b8565b82600a141561114a5760388290556111b8565b82600b141561115d57600e8290556111b8565b82600c14156111705760148290556111b8565b82600d14156111835760118290556111b8565b82600e141561119657603a8290556111b8565b82600f14156111a95760398290556111b8565b82601014156111b85760258290555b5060015b92915050565b336000908152603260205260408120548211156111de57600080fd5b336000818152603360209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60008181526016602052604081206005015481348211801590611272575061126f82601254613fff565b34105b801561128d5750600084815260166020526040812060040154115b80156112b35750600084815260166020526040902060010154600160a060020a03163314155b80156112bf5750600082115b15156112ca57600080fd5b5060008381526016602090815260408083206001808201805433600160a060020a03198216811790925543600385015560049093018690558552600b9093529220600e0154600160a060020a039092169161132491613fff565b336000818152600b60205260409020600e01919091556113469085600161400f565b50600160a060020a0381166000908152600b60205260409020600f015461136e906001613fc5565b600160a060020a0382166000908152600b60205260408120600f019190915561139a908290869061400f565b506113a781836006614110565b506001949350505050565b600d546060908160006113c6856014613fda565b8311156113d257600080fd5b6040805160148082526102a08201909252906020820161028080388339019050509150600185101561140357600194505b5060005b60148110156114a25761142e816114296014611424896001613fc5565b613fda565b613fff565b83111561149557600d61146361144e6114478685613fc5565b6001613fc5565b61145e60146114248a6001613fc5565b613fc5565b8154811061146d57fe5b9060005260206000200154828281518110151561148657fe5b6020908102909101015261149a565b6114a2565b600101611407565b509392505050565b6031545b90565b6000818152600c6020526040902054600160a060020a03165b919050565b336000908152600b602090815260408083206017810154905482518281528285028101909401909252606093929091908490849084801561151a578160200160208202803883390190505b5091506000841115611595575060015b600a548111611595576000818152600c6020908152604080832054600160a060020a03168352600b90915290206016015483141561158d5780828681518110151561157157fe5b6020908102909101015260019094019383851061158d57611595565b60010161152a565b50949350505050565b6000818152600c6020818152604080842054600160a060020a0316808552600b83528185209093015481518181528184028101909301909152606093909184919081908480156115f8578160200160208202803883390190505b5092506000841115611675575050600160a060020a0383166000908152600b60205260408120600d01545b60155481116116755760008181526016602052604090205487141561166d5780838381518110151561165157fe5b6020908102909101015260019091019083821061166d57611675565b600101611623565b509095945050505050565b600082600114156116c257600754600160a060020a031633146116a257600080fd5b60068054600160a060020a031916600160a060020a0384161790556111b8565b600654600160a060020a031633146116d957600080fd5b60078054600160a060020a038416600160a060020a031990911617905550600192915050565b600160a060020a03831660009081526032602052604081205482111561172457600080fd5b600160a060020a03841660009081526033602090815260408083203384529091529020546117529083613fc5565b600160a060020a03851660008181526033602090815260408083203384528252808320949094559181526032909152205461178d9083613fc5565b600160a060020a0380861660009081526032602052604080822093909355908516815220546117bc9083613fff565b600160a060020a0380851660008181526032602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3600160a060020a0383166000908152603260205260409020546113a790600290600a908590888861418a565b6000818152600c602052604080822054825482517fbd7c1079000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201819052935160609486948594859485948594938a93169163bd7c1079916024808301928892919082900301818387803b1580156118c157600080fd5b505af11580156118d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156118fe57600080fd5b81019080805164010000000081111561191657600080fd5b8201602081018481111561192957600080fd5b815164010000000081118282018710171561194357600080fd5b505080519094501515925061198b915050575060408051808201909152600781527f556e6b6e6f776e0000000000000000000000000000000000000000000000000060208201525b600160a060020a03919091166000908152600b6020526040902080546001820154600283015460068401546005850154600990950154939e959d50919b509950975090955060ff169350915050565b336000818152600b6020908152604080832054602e835281842054603290935290832054929384938493849384938493849391611a16906134c5565b336000908152600b60208190526040909120908101546016820154601790920154959d949c50929a5090985090965094509092509050565b60085460295460048054604080516020601f60026000196001871615610100020190951694909404938401819004810282018101909252828152606095869560009586959094600394600160a060020a039094169360ff90931692918691830182828015611afd5780601f10611ad257610100808354040283529160200191611afd565b820191906000526020600020905b815481529060010190602001808311611ae057829003601f168201915b5050865460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295995088945092508401905082828015611b8b5780601f10611b6057610100808354040283529160200191611b8b565b820191906000526020600020905b815481529060010190602001808311611b6e57829003601f168201915b50505050509250935093509350935090919293565b601281565b6000908152602360205260409020600181015460028201548254600384015460049094015492949193600160a060020a03909116929091565b600082815260166020526040812060010154600160a060020a031633148015611c08575060018310155b8015611c1657506015548311155b8015611c315750600083815260166020526040902060040154155b8015611c5a57506000838152601660205260409020600301546017544391611c5891613fff565b105b8015611c665750600082115b1515611c7157600080fd5b6000838152601660209081526040808320436004820155600501859055338352600b9091529020600e0154611ca7906001613fc5565b336000908152600b60205260409020600e810191909155600f0154611ccd906001613fff565b336000908152600b60205260409020600f018190559392505050565b60009081526016602052604090206003015490565b60008060006036548510158015611d1757506034548511155b8015611d3457506000858152603560205260409020600401548411155b8015611d4f5750600085815260356020526040812060040154115b8015611d755750600085815260356020526040902060020154600160a060020a03163314155b1515611d8057600080fd5b600085815260356020526040902060030154611da990611da09086613fda565b620186a061429a565b9150813410158015611dc55750611dc282601254613fff565b34105b1515611dd057600080fd5b600085815260356020526040902060040154611dec9085613fc5565b6000868152603560205260409020600481019190915560030154611e1390339086906142bb565b5050600084815260356020526040902060020154600160a060020a0316611e3c81836007614110565b5060008581526035602052604081206004015411611eb65760008581526035602090815260408083206001908101849055600160a060020a0385168452600b90925290912060120154611e8e91613fc5565b600160a060020a0382166000908152600b6020526040902060120155611eb381614311565b50505b604080513381526020810187905280820186905290517ff6f342132c7de5e5a1e99c8efae544c94731f3ff093f5c3c97c6973d9415cdfb9181900360600190a15050506000918252506035602052604090206004015490565b6000818152601660205260408120600101548190600160a060020a03163314611f3757600080fd5b600083815260166020526040902060020154611f6690611f58906001613fff565b678ac7230489e80000613fda565b9050611f74338260076144d2565b50611f81602b5482613fff565b602b55600083815260166020526040902060020154611fa1906001613fff565b600084815260166020526040902060020155611fce33611fc983670de0b6b3a764000061429a565b6145a7565b50506000838152601660209081526040918290206002015482513381529182018690528183015290517f8fe29af14fd45f84669c73d11b5e474cc122d12cb6a4cdc711e4f406cecff2059181900360600190a160008381526016602052604090206002015491505b50919050565b600554600160a060020a03163314801561205957506003603b5411155b151561206457600080fd5b600554600160a060020a0316ff5b600080341180156120935750336000908152600b6020526040812060050154115b151561209e57600080fd5b336000908152600b60205260409020600a01546120bb9034613fff565b336000908152600b60205260409020600a015550600190565b60008060008060006120e588612fa7565b935093506120f287612fa7565b600154604080517fd5ce8de2000000000000000000000000000000000000000000000000000000008152600481018b9052602481018990526044810188905260648101859052608481018490529051939550919350600160a060020a03169163d5ce8de29160a4808201926020929091908290030181600087803b15801561217957600080fd5b505af115801561218d573d6000803e3d6000fd5b505050506040513d60208110156121a357600080fd5b505198975050505050505050565b6000908152603c602052604090205490565b60608060006027600085815260200190815260200160002054604051908082528060200260200182016040528015612205578160200160208202803883390190505b50600085815260276020526040812054919350101561229c575060005b60008481526027602052604090205481101561229c57600084815260286020526040812090612252836001613fff565b81526020810191909152604001600020548251600160a060020a039091169083908390811061227d57fe5b600160a060020a03909216602092830290910190910152600101612222565b5092915050565b336000908152600b602052604081206004015481906122c790611f58906001613fff565b90506122d5338260066144d2565b50336000908152600b60205260409020600401546122f4906001613fff565b336000818152600b602052604090206004019190915561232090611fc983670de0b6b3a764000061429a565b505061232e602b5482613fff565b602b55336000818152600b602090815260408083206004015481519485529184019290925282820152517f8fe29af14fd45f84669c73d11b5e474cc122d12cb6a4cdc711e4f406cecff2059181900360600190a1600191505b5090565b600554600090600160a060020a031633146123a557600080fd5b82600114156123c75781516123c1906004906020850190615745565b506111b8565b82600214156123e35781516123c190602f906020850190615745565b82600314156123ff5781516123c1906030906020850190615745565b826004141561241b5781516123c1906003906020850190615745565b82600514156111b85750506029805460ff1916905550600190565b336000908152600b602052604081206003015482146114ca5750336000908152600b6020526040902060030181905560016114ca565b600080600080600080600080600060018a10158015612499575060008b8152603c60205260409020548a11155b15156124a457600080fd5b50505060009788525050603d60209081526040808820968852958152858720600381015480895260239092529590962060018082015460028084015493548954938a01549190990154919a9399600160a060020a03998a16999093169750955060ff1693509150565b600160a060020a031660009081526032602052604090205490565b6000818152601660209081526040808320548354818552600c9093528184205482517fbd7c1079000000000000000000000000000000000000000000000000000000008152600160a060020a03918216600482015292516060948694859485948594859492938a938693849384938493929092169163bd7c1079916024808301928692919082900301818387803b1580156125c257600080fd5b505af11580156125d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156125ff57600080fd5b81019080805164010000000081111561261757600080fd5b8201602081018481111561262a57600080fd5b815164010000000081118282018710171561264457600080fd5b50509291905050509450600b6000600c600089815260200190815260200160002060009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a03168152602001908152602001600020600101549350601660008f8152602001908152602001600020600201549250601660008f8152602001908152602001600020600401549150601660008f8152602001908152602001600020600501549050601660008f815260200190815260200160002060010160009054906101000a9004600160a060020a03168587868686869c509c509c509c509c509c509c50505050505050919395979092949650565b600554600090600160a060020a0316331461275357600080fd5b600034111561278557612768602a5434613fff565b602a5560055461278390600160a060020a0316346004614110565b505b60008211156127b75761279a602b5483613fff565b602b556005546127b590600160a060020a03168360046144d2565b505b506001919050565b336000908152602e602052604081205490811180156127ea5750600254600160a060020a0316318111155b80156127f9575060295460ff16155b151561280457600080fd5b6029805460ff19166001179055336000818152602e60205260408082208290555183156108fc0291849190818181858888f1935050505015801561284c573d6000803e3d6000fd5b506029805460ff19169055604080513381526020810183905281517f851bc759236ac045f19398e7a0a79abe56f03d15d830af41f06cd056fd6afb01929181900390910190a1600254612387906001906005908490600090600160a060020a03163361418a565b600160a060020a03166000908152600b6020526040902060148101546007820154600883015460038401546004850154600a860154601590960154949693959294919390929190565b6000818152603560205260408120600201548190600160a060020a0316331480156129365750600083815260356020526040812060040154115b151561294157600080fd5b506000828152603560205260408120600480820180546001909301849055929092559061297190339083906142bb565b50336000908152600b6020526040902060120154612990906001613fc5565b336000818152600b60205260409020601201919091556129af90614311565b5050604080513381526020810185905281517fbbfb1c98cb2bb5a5d1cb9d7a0b38578039025901e68a8812acf9de47c6f34609929181900390910190a150600192915050565b6000806000806000806000603854915060365490505b6034548111612a8e5760008181526035602052604090206003015482118015612a435750600081815260356020526040812060040154115b8015612a6c57506000818152603560205260409020600101546018544391612a6a91613fff565b115b15612a865760008181526035602052604090206003015491505b600101612a0b565b50603454603654601854603854929991985096509094509092509050565b6000918252603f60209081526040808420928452919052902080546001820154600283015460038401546004850154600586015460069096015494969395929491939092600160a060020a03908116921690565b6000908152603e602052604090205490565b336000908152600b602052604081206015015460255460609283918190841115612b3c5760255493505b83604051908082528060200260200182016040528015612b66578160200160208202803883390190505b5092506000841115612be4575050336000908152600b60205260408120601401545b6000811115612be457600081815260236020526040902054600160a060020a0316331415612bdb57808383815181101515612bbf57fe5b60209081029091010152600190910190838210612bdb57612be4565b60001901612b88565b50909392505050565b600081815260166020526040812060010154600160a060020a031633148015612c17575060018210155b8015612c2557506015548211155b8015612c405750600082815260166020526040812060040154115b1515612c4b57600080fd5b6000828152601660209081526040808320600401839055338352600b9091529020600e0154612c7b906001613fff565b336000908152600b60205260409020600e810191909155600f0154612ca1906001613fc5565b336000908152600b60205260409020600f0181905592915050565b6030805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561106f5780601f106110445761010080835404028352916020019161106f565b6000818152600c6020526040812054600160a060020a031681808085118015612d425750600a548511155b8015612d6e5750600160a060020a0383166000908152600b602052604090206009015460ff1615156001145b8015612d7c57506014543a11155b1515612d8757600080fd5b600160a060020a0383166000908152600b6020526040902060060154915034821115612db257600080fd5b601154612dc183601054613fff565b11612def57612dd282601054613fff565b600160a060020a0384166000908152600b60205260409020600601555b612e008266038d7ea4c6800061429a565b9050612e0c83826145a7565b5050612e1833826145a7565b5050612e276015546001613fff565b601581815560009182526016602090815260408084208990559154835281832060019081018054600160a060020a03191633179055600160a060020a0387168452600b9091529120600c0154612e7c91613fff565b600160a060020a0384166000908152600b60205260409020600c0181905560011415612ec257601554600160a060020a0384166000908152600b60205260409020600d01555b336000908152600b60205260409020600e0154612ee0906001613fff565b336000818152600b60205260409020600e0191909155601554612f059190600161400f565b50612f21602a54611429612f1a603c86613fda565b606461429a565b602a55612f3d83612f36612f1a601486613fda565b6002614110565b50612f483383614760565b50604080513381526020810187905281517f8e65048ab2c8d5bef2e2e966d769169e6672c6e9de1f76658fa0f1664fd3a314929181900390910190a15050600160a060020a03166000908152600b602052604090206006015492915050565b600160a060020a0381166000908152600b6020526040812060018082015460049092015491929081905b601554811161308857600081815260166020526040902060010154600160a060020a0387811691161480156130155750600081815260166020526040902060040154155b1561308057600081815260166020908152604080832054808452600c835281842054600160a060020a03168452600b90925290912060010154909350915061305d8583613fff565b60008281526016602052604090206002015490955061307d908590613fff565b93505b600101612fd1565b505050915091565b6005546000908190600160a060020a03163314806130b85750600654600160a060020a031633145b806130cd5750600754600160a060020a031633145b15156130d857600080fd5b5050600654600754600160a060020a0391821691169091565b6130f96157bf565b601154808252601354602083015260315460408301526021546060830152601e54608083015260375460a083015260385460c0830152600e5460e0830152601454610100830152603a54610120830152603954610140830152601254610160830152601a54610180830152602a546101a0830152602b546101c0830152603b546101e0830152600a54610200830152600d54610220830152601854610240830152601754610260830152600f546102808301526010546102a08301526102c08201526015546102e0820152601c54610300820152602454610320820152601f54610340820152602254610360820152602c54610380820152602d546103a0820152436103c0820152600254600160a060020a0316316103e082015290565b3360009081526032602052604081205482111561323357600080fd5b3360009081526032602052604090205461324d9083613fc5565b3360009081526032602052604080822092909255600160a060020a038516815220546132799083613fff565b600160a060020a0384166000818152603260209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3600160a060020a0383166000908152603260205260409020546132fa906002906009908590338861418a565b5060019392505050565b6000806000806001851015801561331d57506034548511155b151561332857600080fd5b5050506000918252506035602052604090206001810154600282015460038301546004909301549193600160a060020a03909116929190565b6000603754831015801561337757506038548311155b80156133925750336000908152603260205260409020548211155b80156133a057506039548211155b80156133ae5750603a548210155b15156133b957600080fd5b6133c66034546001613fff565b6034556133d5338360036144d2565b5060348054600090815260356020908152604080832043600191820155845484528184206002018054600160a060020a031916339081179091558554855282852060030189905594548452818420600401879055938352600b90915290206012015461344091613fff565b336000818152600b602052604090206012019190915561345f90614311565b5050336000908152600b60205260409020601201549392505050565b600554600090600160a060020a0316331461349557600080fd5b6127b5826148b0565b6000436134af601a54602154613fff565b10156134bd575060016114ae565b5060006114ae565b600160a060020a0381166000908152600b6020819052604082200154681b1ae4d6e2ef5000008111156134fb5760129150612036565b680ad78ebc5ac620000081111561351557600f9150612036565b68056bc75e2d6310000081111561352f57600c9150612036565b6802b5e3af16b188000081111561354957600a9150612036565b6801158e460913d000008111156135635760089150612036565b678ac7230489e8000081111561357c5760069150612036565b674563918244f400008111156135955760059150612036565b671bc16d674ec800008111156135ae5760049150612036565b670de0b6b3a76400008111156135c75760039150612036565b6706f05b59d3b200008111156111b85760029150612036565b336000908152600b60209081526040808320600f01548151818152818402810190930190915260609290918391908190848015613627578160200160208202803883390190505b5092506000841115612be4575050336000908152600b60205260408120601001545b6015548111612be457600081815260166020526040902060010154600160a060020a03163314801561368a5750600081815260166020526040812060040154115b156136ba5780838381518110151561369e57fe5b602090810290910101526001909101908382106136ba57612be4565b600101613649565b600554600090600160a060020a031633146136dc57600080fd5b5060008054600160a060020a038316600160a060020a03199091161790556001919050565b6000806000806000806014543a1115151561371b57600080fd5b336000908152600b60208190526040909120015415156137415761373f3388614a7b565b505b603b54336000908152600b6020526040902060070154106137bf57601f54341461376a57600080fd5b603b54336000908152600b60205260409020600801541461379c57603b54336000908152600b60205260409020600801555b6137a73360066145a7565b50506137b7602a54601f54613fff565b602a556137e1565b34156137ca57600080fd5b603b54336000908152600b60205260409020600701555b6137ea33614b24565b506022546024541015613a3657602360006138086024546001613fff565b815260200190815260200160002094508460010154935043841015613a36576138346024546001613fff565b6024558454600954600160a060020a0390911693504390613856908690613fff565b1161386e5761386483614b24565b6003860155613a36565b60408051854060208083019190915282518083038201815291830192839052815191929182918401908083835b602083106138ba5780518252601f19909201916020918201910161389b565b5181516020939093036101000a60001901801990911692169190911790526040805191909301819003812060028b018190556001547f49c6dfb0000000000000000000000000000000000000000000000000000000008352600483018290529351909750600160a060020a0390931694506349c6dfb09350602480820193600093509182900301818387803b15801561395257600080fd5b505af1158015613966573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561398f57600080fd5b8101908080516401000000008111156139a757600080fd5b820160208101848111156139ba57600080fd5b81518560208202830111640100000000821117156139d757600080fd5b5050805190935060009250821090506139ec57fe5b6020908102909101015160048601819055905060018110801590613a11575060038111155b15613a2857613a2281602454614bc8565b50613a36565b613a338360066145a7565b50505b601954613a4d90600160a060020a031660016145a7565b5050613a5761349e565b15156001148015613a6b5750601b5460ff16155b15613a7a57613a78614e43565b505b5060019695505050505050565b336000908152600b60209081526040808320601201548151818152818402810190930190915260609290918391908190848015613ace578160200160208202803883390190505b5092506000841115612be4575050336000908152600b60205260408120601301545b6034548111612be457600081815260356020526040902060020154600160a060020a031633148015613b315750600081815260356020526040812060010154115b15613b6157808383815181101515613b4557fe5b60209081029091010152600190910190838210613b6157612be4565b600101613af0565b600160a060020a03166000908152600b602052604090205490565b60008060015b6015548111612036576000818152601660205260409020600401546018544391613bb391613fff565b118015613bda5750600081815260166020526040902060010154600160a060020a03163314155b15613bed57613bea826001613fff565b91505b600101613b8a565b600160a060020a03918216600090815260336020908152604080832093909416825291909152205490565b606060006060600080600b600087600160a060020a0316600160a060020a03168152602001908152602001600020600e0154935083604051908082528060200260200182016040528015613c7e578160200160208202803883390190505b5092506000841115613d25575050600160a060020a0384166000908152600b60205260408120601001545b6015548111613d2557600081815260166020526040902060010154600160a060020a038781169116148015613ced5750600081815260166020526040902060040154155b15613d1d57808383815181101515613d0157fe5b60209081029091010152600190910190838210613d1d57613d25565b600101613ca9565b5090949350505050565b336000908152600b60205260408120600a0154818111613d4e57600080fd5b336000818152600b60205260408120600a0155613d6d90826008614110565b50600191505090565b600554600090600160a060020a03163314613d9057600080fd5b43601a541115613da35743601a556114ae565b613dab61349e565b1515600114156114ae57601b5460ff161515613dcf57613dc9614e43565b506114ae565b6123876151b5565b600654600090600160a060020a0316331480613dfd5750600754600160a060020a031633145b1515613e0857600080fd5b5060058054600160a060020a039081166000908152600b60208190526040808320838155600180820185905560028201859055600382018590556004820185905581870185905560068201859055600782018590556008820185905560098201805460ff19169055600a8201859055928101849055600c8101849055600d8101849055600e8101849055600f8101849055601081018490556011810184905560128101849055601381018490556014810184905560158101849055601681018490556017018390557f13649b2456f1b42fef0f0040b3aaeabcd21a76a0f3f5defd4f583839455116e880548654600160a060020a03199081169887169890981796879055969096169490931693841790945591825281205590565b600554600090600160a060020a03163314613f3d57600080fd5b5060018054600160a060020a038316600160a060020a0319909116178155919050565b6000806000806000806000806000613f7661539f565b600554601954600954601b54600160a060020a039384169f9383169e50939c50939a509298507401000000000000000000000000000000000000000090920460ff908116975016945092505050565b600082821115613fd457600080fd5b50900390565b818102821580613ff45750818382811515613ff157fe5b04145b15156111bc57600080fd5b818101828110156111bc57600080fd5b6000806001831515141561406457600160a060020a0385166000908152600b602052604090206010015484101561405f57600160a060020a0385166000908152600b602052604090206010018490555b6140ee565b600160a060020a0385166000908152600b60205260409020601001548414156140ee5750825b60155481116140ee57600081815260166020526040902060010154600160a060020a0386811691161480156140be57508381115b156140e657600160a060020a0385166000908152600b602052604090206010018190556140ee565b60010161408a565b50505050600160a060020a03166000908152600b602052604090206010015490565b6000816001141561413957602a54831061412957600080fd5b614135602a5484613fc5565b602a555b600160a060020a0384166000908152602e602052604090205461415c9084613fff565b600160a060020a038086166000908152602e602052604090208290556002546113a792600192869288929116895b603b546000908152603e602052604081205481906141a9906001613fff565b603b80546000908152603e60209081526040808320949094558254825283822054603f80835285842082855283528584204390558454845280835285842082855283528584206001019d909d55835483528c825284832081845282528483206002019b909b55825482528b81528382208b8352815283822060030199909955815481528a89528281208a82528952828120600401979097558054875289885281872089885288528187206005018054600160a060020a0319908116600160a060020a039889161790915590548752988752808620888752909652505092909120600601805490941691161790915590565b60008082116142a857600080fd5b81838115156142b357fe5b049392505050565b600160a060020a0383166000908152603260205260408120546142de9084613fff565b600160a060020a038086166000908152603260205260409020829055600280546113a7939192869288929091168961418a565b60008060008060006034541180156143295750603654155b1561433857600160365561438d565b60365491505b603454821161438d57600082815260356020526040902060010154601854439161436791613fff565b11156143825760365482111561437d5760368290555b61438d565b60019091019061433e565b600160a060020a0385166000908152600b60205260408120601201541180156143cf5750600160a060020a0385166000908152600b6020526040902060130154155b156143f957600160a060020a0385166000908152600b6020526040902060016013909101556144b0565b50600160a060020a0384166000908152600b60205260409020601301545b6034548110156144b057600081815260356020526040902060020154600160a060020a03868116911614801561445c5750600081815260356020526040812060010154115b156144a857600160a060020a0385166000908152600b60205260409020601301548111156144a357600160a060020a0385166000908152600b602052604090206013018190555b6144b0565b600101614417565b603654336000908152600b602052604090206013015490945092505050915091565b600160a060020a0383166000908152603260205260408120548311156144f757600080fd5b600160a060020a03841660009081526032602052604090205461451a9084613fc5565b600160a060020a03851660008181526032602090815260409182902093909355805191825291810185905280820184905290517feab0f47e94ed11537031ef47fb6cf505965fd5d49840e5c10db942c2dd994b099181900360600190a1600160a060020a03808516600090815260326020526040902054600280546113a7939192869288928a911661418a565b6005546000908190819081908190600160a060020a03888116911614156145d45760009450849350614756565b600160a060020a0387166000908152600b60205260409020541515614600576145fe876000614a7b565b505b600160a060020a0387166000908152600b60205260409020600201546146269087613fff565b600160a060020a0388166000908152600b6020526040812060010154965090945085935090505b600a8110156146ae5760638310156146765761466f600a611424876001613fff565b915061467c565b6103e891505b8184106146a15761468d8483613fc5565b935061469a856001613fff565b94506146a6565b6146ae565b60010161464d565b600160a060020a0387166000908152600b602052604090206002018490558285111561475657600160a060020a0387166000908152600b602052604081206001810187905560050154111561473157600d546001101561472c57600160a060020a0387166000908152600b602052604090205461472a906148b0565b505b614756565b60135485101580156147465750600e54600d54105b156147565761475487615435565b505b5050509250929050565b600080808085815b600981101561487657600160a060020a038216158015906147975750600554600160a060020a03838116911614155b1561486957600160a060020a0382166000908152600b60208190526040822001549093506147c59088613fff565b600160a060020a0383166000908152600b6020819052604090912001556147eb826134c5565b935084841115614813576147ff8486613fc5565b9250601283111561480f57601292505b8394505b6000831115614836576148348261482d612f1a868b613fda565b6003614110565b505b600160a060020a039182166000908152600b60209081526040808320601601548352600c9091529020549091169061486e565b614876565b600101614768565b614881601485613fc5565b6005549093506148a190600160a060020a0316612f36612f1a868b613fda565b50600198975050505050505050565b60008080808080808088116148c457600080fd5b600d5495506001861115614a55576000888152600c6020908152604080832054600160a060020a0316808452600b90925290912060050154909550935085841015614a5557614914846001613fff565b9250600d614923846001613fc5565b8154811061492d57fe5b6000918252602080832090910154808352600c8252604080842054600160a060020a03908116808652600b909452818520600190810154918b16865291909420015490945090925011806149d85750600160a060020a038082166000908152600b60205260408082206001908101549389168352912001541480156149d85750600160a060020a038082166000908152600b6020526040808220600290810154938916835291200154115b15614a555781600d6149eb866001613fc5565b815481106149f557fe5b60009182526020909120015587600d614a0f856001613fc5565b81548110614a1957fe5b6000918252602080832090910192909255600160a060020a038084168252600b9092526040808220600590810188905592881682529020018390555b50505050600160a060020a03166000908152600b60205260409020600501549392505050565b600160a060020a0382166000908152600b602081905260408220015415156111bc5750600a54614aac816001613fff565b600a556000818152600c602090815260408083208054600160a060020a031916600160a060020a0388169081179091558352600b91829052822083815566038d7ea4c6800091015581118015614b025750600082115b8015614b0f5750600a5482105b15614b1f57614b1d82615574565b505b6111bc565b6000614b336022546001613fff565b602255614b41436001613fff565b602280546000908152602360209081526040808320600190810195909555835483528083208054600160a060020a031916600160a060020a0389169081179091559354938352600b9091529020601481019190915560150154614ba391613fff565b600160a060020a0383166000908152600b602052604090206015015550602254919050565b600080600080600080614bf1603c6000603b548152602001908152602001600020546001613fff565b603b80546000908152603c602081815260408084209590955583548352603d80825285842083835286852054855282528584206003018d90559354835292835283822090835283822054825282528281206001018b9055898152602382528281208054600291909101548c83528380528483205460279094529390912054600160a060020a03909116975091955011614dd4576000888152602660209081526040808320546028835281842081855290925290912054909350600160a060020a03169150614cc08583866120d4565b603b80546000908152603d60208181526040808420603c808452828620548652908352818520600201805460ff19168815159081179091559554855292825280842092825280842054845291905290208054600160a060020a031916600160a060020a03861617905590915060011415614d6757600088815260286020908152604080832086845290915290208054600160a060020a031916600160a060020a0387161790555b6001881115614dcf5760008881526026602052604090205460011015614db557600088815260266020526040902054614da1906001613fc5565b600089815260266020526040902055614dcf565b600088815260208080526040808320546026909252909120555b614e2a565b600088815260276020526040902054614dee906001613fff565b600089815260276020908152604080832084905560288252808320938352929052208054600160a060020a031916600160a060020a0387161790555b5050506000948552505060276020525050604090205490565b6000806000806000806000614e5661349e565b15156001148015614e6a5750601b5460ff16155b1515614e7557600080fd5b601954602d54614ea691600160a060020a031690614e9f90614e9890606461429a565b6032613fda565b60016142bb565b506000955060009450600193505b60038411615040578360011415614ee357614edc614ed5602c54606461429a565b603c613fda565b9550614f1f565b8360021415614efc57614edc610f31602c54606461429a565b8360031415614f1f57614f1c614f15602d54606461429a565b6008613fda565b94505b600192505b6000848152602760205260409020548311615035576000848152602860209081526040808320868452909152812054600160a060020a03169250861115614f8657614f7182876001614110565b50614f7e602a5487613fc5565b602a5561502a565b600085111561502a57603b54600160a060020a0383166000908152600b60205260409020600801541015614fc657614fc0828660016142bb565b5061502a565b614fd582614e9f876002613fda565b50614fe260315486613fff565b603155603b54600160a060020a0383166000908152600b6020526040902060080154111561502a57603b54600160a060020a0383166000908152600b60205260409020600801555b600190920191614f24565b600190930192614eb4565b61504d602d54603261429a565b60036000527f1ae1eab41a4db68d73559dd6c8b7ac16a4bc819634768486d35edbff05543abf5460276020527f0b1843e9f5a3e45bb9eb94296e57754a517a20dc29130885a7a8f19cf8c79ab854919250111561510b5760036000527f1ae1eab41a4db68d73559dd6c8b7ac16a4bc819634768486d35edbff05543abf5460276020527f0b1843e9f5a3e45bb9eb94296e57754a517a20dc29130885a7a8f19cf8c79ab8546151089183916114299189916114249190613fc5565b90505b61511760315482613fc5565b60315560195474010000000000000000000000000000000000000000900460ff1615156001141561514c5761514a615667565b505b61516433614e9f601e54670de0b6b3a7640000613fda565b5061517f603154611429601e54670de0b6b3a7640000613fda565b603155601e546151909033906145a7565b5050601b805460ff191660011790556151a76151b5565b506001965050505050505090565b6000806000806000601a5411156151f1576151ce61349e565b151560011480156151e65750601b5460ff1615156001145b15156151f157600080fd5b6151fe603b546001613fff565b603b8190556000908152603c602052604081205543601a55601b805460ff19169055600192505b60038311615258576000838152602080805260408083205460268352818420556027909152812055600190920191615225565b601c54600d5411156152f857615271601c546001613fff565b601c8190556000908152601d602090815260408083205460198054600160a060020a031916600160a060020a03928316178082559091168452600b909252909120600901805460ff19166001179055805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055615363565b61530061539f565b600160a060020a0381166000818152600b60205260408120600a015560198054600160a060020a0319169091179055602a5491935091506153419083613fff565b602a556019805474ff0000000000000000000000000000000000000000191690555b615370602a54600a61429a565b602c55602b5461538190600a61429a565b602d819055602b5461539291613fc5565b602b556001935050505090565b60085460009081908190600160a060020a031660015b600d54811161542b576000818152601d6020908152604080832054600160a060020a03168352600b9091529020600a0154831015615423576000818152601d6020818152604080842054600160a060020a0316808552600b8352908420600a01549385905291905290935091505b6001016153b5565b5090939092509050565b601354600160a060020a0382166000908152600b602052604081206001015490918291108015906154745750600554600160a060020a03848116911614155b151561547f57600080fd5b600160a060020a0383166000908152600b6020526040902060050154151561556a5750600160a060020a0382166000908152600b60205260409020548015156154d0576154cd836000614a7b565b90505b600d80546001818101928390557fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5909101839055600160a060020a0385166000908152600b602052604090206005810192909255600f5460069092019190915560135461553c91613fff565b601355600d546000908152601d602052604090208054600160a060020a031916600160a060020a0385161790555b5050601354919050565b60008060008311801561559d57506000838152600c6020526040902054600160a060020a031615155b80156155b95750336000908152600b6020526040902060160154155b80156155f75750336000908152600b6020818152604080842054878552600c835281852054600160a060020a03168552929091529091206016015414155b156120365750336000908152600b60208181526040808420601601869055858452600c825280842054600160a060020a03168085529290915290912060170154615642906001613fff565b600160a060020a0382166000908152600b602052604090206017015560019150612036565b600d5460009081808080606485111561568c57615685856064613fc5565b9350615691565b600093505b600092506753444835ec5800009150603b54600614156156b9576156b6826006613fda565b91505b50825b84811015615739576156dc826114246156d6846001613fff565b87613fc5565b9250615721600c6000600d848154811015156156f457fe5b60009182526020808320909101548352820192909252604001902054600160a060020a03168460026142bb565b5061572e60315484613fff565b6031556001016156bc565b60019550505050505090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061578657805160ff19168380011785556157b3565b828001600101855582156157b3579182015b828111156157b3578251825591602001919060010190615798565b506123879291506157df565b610400604051908101604052806020906020820280388339509192915050565b6114ae91905b8082111561238757600081556001016157e55600a165627a7a72305820fef8416678954743b3737f6c7973fc9953476f0aa639eb60278496eb66545c4c0029"
}