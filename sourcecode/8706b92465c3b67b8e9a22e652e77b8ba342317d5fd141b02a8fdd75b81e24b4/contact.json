{
  "address": "0x61d0407edb149dc453c47fe31139fae9c1472da6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "GodzillionToken",
  "contractName": "Token",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-25\n*/\n\npragma solidity ^ 0.4.15;\n\n/**\n*library name : SafeMath\n*purpose : be the library for the smart contract for the swap between the godz and ether\n*goal : to achieve the secure basic math operations\n*/\nlibrary SafeMath {\n\n  /*function name : mul*/\n  /*purpose : be the funcion for safe multiplicate*/\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    /*assert(a == 0 || c / a == b);*/\n    return c;\n  }\n\n  /*function name : div*/\n  /*purpose : be the funcion for safe division*/\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  /*function name : sub*/\n  /*purpose : be the funcion for safe substract*/\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    /*assert(b <= a);*/\n    return a - b;\n  }\n\n  /*function name : add*/\n  /*purpose : be the funcion for safe sum*/\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    /*assert(c >= a);*/\n    return c;\n  }\n}\n\n/**\n*contract name : tokenRecipient\n*/\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n\n/**\n*contract name : Token\n*/\ncontract Token {\n    /*using the secure math library for basic math operations*/\n    using SafeMath for uint256;\n\n    /* Public variables of the token */\n    string public standard = 'DSCS.GODZ.TOKEN';\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function Token(\n        uint256 initialSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol\n        ) {\n        balanceOf[msg.sender] = initialSupply;                  /* Give the creator all initial tokens*/\n        totalSupply = initialSupply;                            /* Update total supply*/\n        name = tokenName;                                       /* Set the name for display purposes*/\n        symbol = tokenSymbol;                                   /* Set the symbol for display purposes*/\n        decimals = decimalUnits;                                /* Amount of decimals for display purposes*/\n    }\n\n    /* Send coins */\n    function transfer(address _to, uint256 _value) {\n        if (_to == 0x0) revert();                               /* Prevent transfer to 0x0 address. Use burn() instead*/\n        if (balanceOf[msg.sender] < _value) revert();           /* Check if the sender has enough*/\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); /* Check for overflows*/\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);                        /* Subtract from the sender*/\n        balanceOf[_to] = balanceOf[_to].add(_value);                               /* Add the same to the recipient*/\n        Transfer(msg.sender, _to, _value);                      /* Notify anyone listening that this transfer took place*/\n    }\n\n    /* Allow another contract to spend some tokens in your behalf */\n    function approve(address _spender, uint256 _value)\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /* Approve and then communicate the approved contract in a single tx */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /* A contract attempts to get the coins but transfer from the origin*/\n    function transferFromOrigin(address _to, uint256 _value)  returns (bool success) {\n        address origin = tx.origin;\n        if (origin == 0x0) revert();\n        if (_to == 0x0) revert();                                /* Prevent transfer to 0x0 address.*/\n        if (balanceOf[origin] < _value) revert();                /* Check if the sender has enough*/\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  /* Check for overflows*/\n        balanceOf[origin] = balanceOf[origin].sub(_value);       /* Subtract from the sender*/\n        balanceOf[_to] = balanceOf[_to].add(_value);             /* Add the same to the recipient*/\n        return true;\n    }\n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (_to == 0x0) revert();                                /* Prevent transfer to 0x0 address.*/\n        if (balanceOf[_from] < _value) revert();                 /* Check if the sender has enough*/\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  /* Check for overflows*/\n        if (_value > allowance[_from][msg.sender]) revert();     /* Check allowance*/\n        balanceOf[_from] = balanceOf[_from].sub(_value);                              /* Subtract from the sender*/\n        balanceOf[_to] = balanceOf[_to].add(_value);                                /* Add the same to the recipient*/\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromOrigin\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "606060405260408051908101604052600f81527f445343532e474f445a2e544f4b454e00000000000000000000000000000000006020820152600090805161004b9291602001906100eb565b50341561005757600080fd5b604051610d76380380610d7683398101604052808051919060200180518201919060200180519190602001805190910190505b600160a060020a0333166000908152600560205260409020849055600484905560018380516100bd9291602001906100eb565b5060028180516100d19291602001906100eb565b506003805460ff191660ff84161790555b5050505061018b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012c57805160ff1916838001178555610159565b82800160010185558215610159579182015b8281111561015957825182559160200191906001019061013e565b5b5061016692915061016a565b5090565b61018891905b808211156101665760008155600101610170565b5090565b90565b610bdc8061019a6000396000f300606060405236156100b75763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100bc578063095ea7b31461014757806318160ddd1461017d57806323b872dd146101a2578063313ce567146101de5780635a3b7e42146102075780635c6bcad41461029257806370a08231146102c857806395d89b41146102f9578063a9059cbb14610384578063cae9ca51146103a8578063dd62ed3e14610421575b600080fd5b34156100c757600080fd5b6100cf610458565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561010c5780820151818401525b6020016100f3565b50505050905090810190601f1680156101395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015257600080fd5b610169600160a060020a03600435166024356104f6565b604051901515815260200160405180910390f35b341561018857600080fd5b610190610527565b60405190815260200160405180910390f35b34156101ad57600080fd5b610169600160a060020a036004358116906024351660443561052d565b604051901515815260200160405180910390f35b34156101e957600080fd5b6101f16106d8565b60405160ff909116815260200160405180910390f35b341561021257600080fd5b6100cf6106e1565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561010c5780820151818401525b6020016100f3565b50505050905090810190601f1680156101395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561029d57600080fd5b610169600160a060020a036004351660243561077f565b604051901515815260200160405180910390f35b34156102d357600080fd5b610190600160a060020a036004351661087c565b60405190815260200160405180910390f35b341561030457600080fd5b6100cf61088e565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561010c5780820151818401525b6020016100f3565b50505050905090810190601f1680156101395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561038f57600080fd5b6103a6600160a060020a036004351660243561092c565b005b34156103b357600080fd5b61016960048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610a4995505050505050565b604051901515815260200160405180910390f35b341561042c57600080fd5b610190600160a060020a0360043581169060243516610b7d565b60405190815260200160405180910390f35b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104ee5780601f106104c3576101008083540402835291602001916104ee565b820191906000526020600020905b8154815290600101906020018083116104d157829003601f168201915b505050505081565b600160a060020a03338116600090815260066020908152604080832093861683529290522081905560015b92915050565b60045481565b6000600160a060020a038316151561054457600080fd5b600160a060020a0384166000908152600560205260409020548290101561056a57600080fd5b600160a060020a038316600090815260056020526040902054828101101561059157600080fd5b600160a060020a03808516600090815260066020908152604080832033909416835292905220548211156105c457600080fd5b600160a060020a0384166000908152600560205260409020546105ed908363ffffffff610b9a16565b600160a060020a038086166000908152600560205260408082209390935590851681522054610622908363ffffffff610ba416565b600160a060020a0380851660009081526005602090815260408083209490945587831682526006815283822033909316825291909152205461066a908363ffffffff610b9a16565b600160a060020a03808616600081815260066020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b9392505050565b60035460ff1681565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104ee5780601f106104c3576101008083540402835291602001916104ee565b820191906000526020600020905b8154815290600101906020018083116104d157829003601f168201915b505050505081565b600032600160a060020a038116151561079757600080fd5b600160a060020a03841615156107ac57600080fd5b600160a060020a038116600090815260056020526040902054839010156107d257600080fd5b600160a060020a03841660009081526005602052604090205483810110156107f957600080fd5b600160a060020a038116600090815260056020526040902054610822908463ffffffff610b9a16565b600160a060020a038083166000908152600560205260408082209390935590861681522054610857908463ffffffff610ba416565b600160a060020a038516600090815260056020526040902055600191505b5092915050565b60056020526000908152604090205481565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104ee5780601f106104c3576101008083540402835291602001916104ee565b820191906000526020600020905b8154815290600101906020018083116104d157829003601f168201915b505050505081565b600160a060020a038216151561094157600080fd5b600160a060020a0333166000908152600560205260409020548190101561096757600080fd5b600160a060020a038216600090815260056020526040902054818101101561098e57600080fd5b600160a060020a0333166000908152600560205260409020546109b7908263ffffffff610b9a16565b600160a060020a0333811660009081526005602052604080822093909355908416815220546109ec908263ffffffff610ba416565b600160a060020a0380841660008181526005602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35b5050565b600083610a5681856104f6565b15610b745780600160a060020a0316638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610b0d5780820151818401525b602001610af4565b50505050905090810190601f168015610b3a5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610b5b57600080fd5b6102c65a03f11515610b6c57600080fd5b505050600191505b5b509392505050565b600660209081526000928352604080842090915290825290205481565b8082035b92915050565b818101805b50929150505600a165627a7a72305820ceb4051e4d94c689094b1e58409625352a7595ab653cff1262c41ea5547fb2ed0029000000000000000000000000000000000000000000f8277896582678ac0000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000a474f445a494c4c494f4e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004474f445a00000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000f8277896582678ac0000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000a474f445a494c4c494f4e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004474f445a00000000000000000000000000000000000000000000000000000000"
}