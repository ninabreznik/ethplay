{
  "address": "0x03b267325193fd0c15ca0d2a693e54213c2afcb6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ERC20Token",
  "compilerVersion": "v0.4.26+commit.4563c3fc",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-07\n*/\n\npragma solidity ^0.4.26;\n\ncontract ERC20Token {\n\tmapping (address => uint256) balances;\n\taddress public owner;\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n\t// total amount of tokens\n    uint256 public totalSupply;\n\t// `allowed` tracks any extra transfer rights as in all ERC20 tokens\n    mapping (address => mapping (address => uint256)) allowed;\n\n    constructor() public {\n        uint256 initialSupply = 10000000000;\n        totalSupply = initialSupply * 10 ** uint256(decimals);\n        balances[msg.sender] = totalSupply;\n        name = \"Game Chain\";\n        symbol = \"GMI\";\n    }\n\t\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n\t\t return balances[_owner];\n\t}\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n\t    require(_value > 0 );                                      // Check send token value > 0;\n\t\trequire(balances[msg.sender] >= _value);                   // Check if the sender has enough\n        require(balances[_to] + _value > balances[_to]);           // Check for overflows\t\t\t\t\t\t\t\t\t\t\t\n\t\tbalances[msg.sender] -= _value;                            // Subtract from the sender\n\t\tbalances[_to] += _value;                                   // Add the same to the recipient                       \n\t\t \n\t\temit Transfer(msg.sender, _to, _value); \t\t\t       // Notify anyone listening that this transfer took place\n\t\treturn true;      \n\t}\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t  \n\t    require(balances[_from] >= _value);                 // Check if the sender has enough\n        require(balances[_to] + _value >= balances[_to]);   // Check for overflows\n        require(_value <= allowed[_from][msg.sender]);      // Check allowance\n        balances[_from] -= _value;                         // Subtract from the sender\n        balances[_to] += _value;                           // Add the same to the recipient\n        allowed[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n\t}\n\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of tokens to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n\t\trequire(balances[msg.sender] >= _value);\n\t\tallowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t\n\t}\n\t\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n\t}\n\t\n\t/* This unnamed function is called whenever someone tries to send ether to it */\n    function () private {\n        revert();     // Prevents accidental sending of ether\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
  "bytecode": "60806040526004805460ff1916601217905534801561001d57600080fd5b5060045460ff16600a90810a6402540be400908102600581905533600090815260208181526040918290209290925580518082019091528381527f47616d6520436861696e000000000000000000000000000000000000000000009101908152909161008b916002916100d5565b506040805180820190915260038082527f474d49000000000000000000000000000000000000000000000000000000000060209092019182526100ce91816100d5565b5050610170565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011657805160ff1916838001178555610143565b82800160010185558215610143579182015b82811115610143578251825591602001919060010190610128565b5061014f929150610153565b5090565b61016d91905b8082111561014f5760008155600101610159565b90565b61065e8061017f6000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100b5578063095ea7b31461013f57806318160ddd1461017757806323b872dd1461019e578063313ce567146101c857806370a08231146101f35780638da5cb5b1461021457806395d89b4114610245578063a9059cbb1461025a578063dd62ed3e1461027e575b3480156100af57600080fd5b50600080fd5b3480156100c157600080fd5b506100ca6102a5565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101045781810151838201526020016100ec565b50505050905090810190601f1680156101315780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014b57600080fd5b50610163600160a060020a0360043516602435610330565b604080519115158252519081900360200190f35b34801561018357600080fd5b5061018c6103b3565b60408051918252519081900360200190f35b3480156101aa57600080fd5b50610163600160a060020a03600435811690602435166044356103b9565b3480156101d457600080fd5b506101dd6104bd565b6040805160ff9092168252519081900360200190f35b3480156101ff57600080fd5b5061018c600160a060020a03600435166104c6565b34801561022057600080fd5b506102296104e1565b60408051600160a060020a039092168252519081900360200190f35b34801561025157600080fd5b506100ca6104f0565b34801561026657600080fd5b50610163600160a060020a036004351660243561054b565b34801561028a57600080fd5b5061018c600160a060020a0360043581169060243516610607565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156103285780601f106102fd57610100808354040283529160200191610328565b820191906000526020600020905b81548152906001019060200180831161030b57829003601f168201915b505050505081565b3360009081526020819052604081205482111561034c57600080fd5b336000818152600660209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60055481565b600160a060020a0383166000908152602081905260408120548211156103de57600080fd5b600160a060020a038316600090815260208190526040902054828101101561040557600080fd5b600160a060020a038416600090815260066020908152604080832033845290915290205482111561043557600080fd5b600160a060020a038085166000818152602081815260408083208054889003905593871680835284832080548801905583835260068252848320338452825291849020805487900390558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060019392505050565b60045460ff1681565b600160a060020a031660009081526020819052604090205490565b600154600160a060020a031681565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103285780601f106102fd57610100808354040283529160200191610328565b600080821161055957600080fd5b3360009081526020819052604090205482111561057557600080fd5b600160a060020a0383166000908152602081905260409020548281011161059b57600080fd5b3360008181526020818152604080832080548790039055600160a060020a03871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600192915050565b600160a060020a039182166000908152600660209081526040808320939094168252919091522054905600a165627a7a72305820636cad031cb2b59dfc1d8606fe89d8b5ff2c933bcf00e9e1cdc392f750f055b70029"
}