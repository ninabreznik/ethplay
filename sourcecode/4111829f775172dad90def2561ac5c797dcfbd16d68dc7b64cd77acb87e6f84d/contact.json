{
  "address": "0xc61fdDD0ADc21F99b6A05d830E2Ca996c25EE089",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ERC20RupiahToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "5000000",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-11\n*/\n\n// File: contracts/token/IERC20.sol\n\n/**\n * The MIT License (MIT)\n *\n * OpenZeppelin <https://github.com/OpenZeppelin/openzeppelin-solidity/>     \n * Copyright (c) 2016 Smart Contract Solutions, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy \n * of this software and associated documentation files (the \"Software\"), to deal \n * in the Software without restriction, including without limitation the rights \n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell \n * copies of the Software, and to permit persons to whom the Software is furnished to \n * do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all \n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\npragma solidity 0.4.25;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/math/SafeMath.sol\n\n/**\n * The MIT License (MIT)\n *\n * OpenZeppelin <https://github.com/OpenZeppelin/openzeppelin-solidity/>     \n * Copyright (c) 2016 Smart Contract Solutions, Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy \n * of this software and associated documentation files (the \"Software\"), to deal \n * in the Software without restriction, including without limitation the rights \n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell \n * copies of the Software, and to permit persons to whom the Software is furnished to \n * do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all \n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\npragma solidity 0.4.25;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: contracts/ownership/Ownable.sol\n\n/**\n * The MIT License (MIT)\n *\n * OpenZeppelin <https://github.com/OpenZeppelin/openzeppelin-solidity/>     \n * Copyright (c) 2016 Smart Contract Solutions, Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy \n * of this software and associated documentation files (the \"Software\"), to deal \n * in the Software without restriction, including without limitation the rights \n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell \n * copies of the Software, and to permit persons to whom the Software is furnished to \n * do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all \n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\npragma solidity 0.4.25;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    owner = address(0);\n    emit OwnershipTransferred(msg.sender, owner);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    owner = _newOwner;\n    emit OwnershipTransferred(owner, _newOwner);\n  }\n}\n\n// File: contracts/lifecycle/Pausable.sol\n\n/**\n * The MIT License (MIT)\n *\n * OpenZeppelin <https://github.com/OpenZeppelin/openzeppelin-solidity/>     \n * Copyright (c) 2016 Smart Contract Solutions, Inc.\n * Modified for Rupiah Token by FengkieJ 2019.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy \n * of this software and associated documentation files (the \"Software\"), to deal \n * in the Software without restriction, including without limitation the rights \n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell \n * copies of the Software, and to permit persons to whom the Software is furnished to \n * do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all \n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\npragma solidity 0.4.25;\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyOwner {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyOwner {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n// File: contracts/governance/Blacklistable.sol\n\n/**\n * Rupiah Token Smart Contract\n * Copyright (C) 2019 PT. Rupiah Token Indonesia <https://www.rupiahtoken.com/>. \n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * This file incorporates work covered byt the following copyright and\n * permission notice:\n *\n *     OpenZeppelin <https://github.com/OpenZeppelin/openzeppelin-solidity/>     \n *     Copyright (c) 2016 Smart Contract Solutions, Inc.\n *     Modified for Rupiah Token by FengkieJ 2019.\n * \n *     centre-tokens <https://github.com/centrehq/centre-tokens>\n *     Copyright CENTRE SECZ 2018.\n *     Modified for Rupiah Token by FengkieJ 2019.\n *\n *     The MIT License (MIT)\n *\n *     Permission is hereby granted, free of charge, to any person obtaining a copy \n *     of this software and associated documentation files (the \"Software\"), to deal \n *     in the Software without restriction, including without limitation the rights \n *     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell \n *     copies of the Software, and to permit persons to whom the Software is furnished to \n *     do so, subject to the following conditions:\n *\n *     The above copyright notice and this permission notice shall be included in all \n *     copies or substantial portions of the Software.\n *\n *     THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n *     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \n *     CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\npragma solidity 0.4.25;\n\n\n/**\n * @title Blacklistable \n * @dev Allows accounts to be blacklisted by a \"blacklister\" role\n*/\ncontract Blacklistable is Pausable {\n    mapping(address => bool) internal blacklisted;\n\n    event Blacklisted(address indexed _account);\n    event Unblacklisted(address indexed _account);\n\n    /**\n     * @dev Throws if argument account is blacklisted\n     * @param _account The address to check\n    */\n    modifier notBlacklisted(address _account) {\n        require(blacklisted[_account] == false);\n        _;\n    }\n\n    /**\n     * @dev Checks if account is blacklisted\n     * @param _account The address to check    \n    */\n    function isBlacklisted(address _account) public view returns (bool) {\n        return blacklisted[_account];\n    }\n\n    /**\n     * @dev Adds account to blacklist\n     * @param _account The address to blacklist\n    */\n    function blacklist(address _account) public onlyOwner whenNotPaused {\n        blacklisted[_account] = true;\n        emit Blacklisted(_account);\n    }\n\n    /**\n     * @dev Removes account from blacklist\n     * @param _account The address to remove from the blacklist\n    */\n    function unblacklist(address _account) public onlyOwner whenNotPaused {\n        blacklisted[_account] = false;\n        emit Unblacklisted(_account);\n    }\n}\n\n// File: contracts/zos/Initializable.sol\n\n/**\n * The MIT License (MIT)\n *\n * ZeppelinOS (zos) <https://github.com/zeppelinos/zos>\n * Copyright (c) 2018 ZeppelinOS Global Limited.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy \n * of this software and associated documentation files (the \"Software\"), to deal \n * in the Software without restriction, including without limitation the rights \n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell \n * copies of the Software, and to permit persons to whom the Software is furnished to \n * do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all \n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\npragma solidity >=0.4.24 <0.6.0;\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool wasInitializing = initializing;\n    initializing = true;\n    initialized = true;\n\n    _;\n\n    initializing = wasInitializing;\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    uint256 cs;\n    assembly { cs := extcodesize(address) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: contracts/token/ERC20RupiahTokenV1.sol\n\n/**\n * Rupiah Token Smart Contract\n * Copyright (C) 2019 PT. Rupiah Token Indonesia <https://www.rupiahtoken.com/>. \n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * This file incorporates work covered byt the following copyright and\n * permission notice:\n *\n *     OpenZeppelin <https://github.com/OpenZeppelin/openzeppelin-solidity/>     \n *     Copyright (c) 2016 Smart Contract Solutions, Inc.\n *     Modified for Rupiah Token by FengkieJ 2019.\n * \n *     centre-tokens <https://github.com/centrehq/centre-tokens>\n *     Copyright CENTRE SECZ 2018.\n *     Modified for Rupiah Token by FengkieJ 2019.\n *\n *     ZeppelinOS (zos) <https://github.com/zeppelinos/zos>\n *     Copyright (c) 2018 ZeppelinOS Global Limited.\n *\n *     The MIT License (MIT)\n *\n *     Permission is hereby granted, free of charge, to any person obtaining a copy \n *     of this software and associated documentation files (the \"Software\"), to deal \n *     in the Software without restriction, including without limitation the rights \n *     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell \n *     copies of the Software, and to permit persons to whom the Software is furnished to \n *     do so, subject to the following conditions:\n *\n *     The above copyright notice and this permission notice shall be included in all \n *     copies or substantial portions of the Software.\n *\n *     THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n *     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \n *     CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\npragma solidity 0.4.25;\n\n\n\n\n\n\n\n/**\n * @title ERC20RupiahToken\n * @dev ERC20 compliant fiat token that is backed by Indonesian Rupiah 1:1\n */\ncontract ERC20RupiahToken is IERC20, Blacklistable, Initializable {\n    using SafeMath for uint256;\n    \n    string internal _name;\n    string internal _symbol;\n    string internal _currency;\n    uint8 internal _decimals;\n    \n    mapping (address => uint256) internal _balances;\n    mapping (address => mapping (address => uint256)) internal _allowed;\n    uint256 internal _totalSupply;\n    \n    /**\n     * @dev Initialize the smart contract to work with ZeppelinOS, can only be called once.\n     * @param name describes the name of the token.\n     * @param symbol describes the symbol of the token.\n     * @param currency describes the currency of the token.\n     * @param decimals describes the number of decimals of the token.\n     */\n    function initialize(string name, string symbol, string currency, uint8 decimals) initializer public {\n\towner = msg.sender;\n        _name = name;\n        _symbol = symbol;\n        _currency = currency;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n    \n    /**\n     * @return the currency of the token.\n     */\n    function currency() public view returns (string memory) {\n        return _currency;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @return the total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public whenNotPaused notBlacklisted(msg.sender) notBlacklisted(to) returns (bool) {\n        require(to != address(0));\n\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(msg.sender, to, value);\n        \n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public whenNotPaused notBlacklisted(msg.sender) notBlacklisted(spender) returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused notBlacklisted(msg.sender) notBlacklisted(from) notBlacklisted(to) returns (bool) {\n        require(to != address(0));\n\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);                \n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused notBlacklisted(msg.sender) notBlacklisted(spender) returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused notBlacklisted(msg.sender) notBlacklisted(spender) returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function mint(address account, uint256 value) public whenNotPaused notBlacklisted(account) onlyOwner {\n        require(account != address(0));\n        \n        value = value.mul(10**_decimals);\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Function that burns an amount of the token.\n     * @param value The amount that will be burnt.\n     */\n    function burn(uint256 value) public whenNotPaused onlyOwner {\n        value = value.mul(10**_decimals);\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\n        emit Transfer(msg.sender, address(0), value);\n    }\n\n    /**\n     * @dev Function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function burnFrom(address account, uint256 value) public whenNotPaused notBlacklisted(account) onlyOwner {\n        require(account != address(0));\n        \n        value = value.mul(10**_decimals);\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n    \n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unblacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"currency\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"Unblacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "608060405260008054600160a060020a03191633179055611a40806100256000396000f3006080604052600436106101485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461014d578063095ea7b3146101d757806318160ddd1461021c57806323b872dd14610243578063313ce5671461027a57806339509351146102a55780633f4ba83a146102d657806340c10f19146102ed57806342966c681461031e5780635c975abb1461033657806370a082311461034b578063715018a61461037957806375e3661e1461038e57806379cc6790146103bc5780638456cb59146103ed5780638da5cb5b1461040257806395d89b4114610440578063a457c2d714610455578063a9059cbb14610486578063dd62ed3e146104b7578063e5a6b10f146104eb578063ed5c475b14610500578063f2fde38b146105da578063f9f92be414610608578063fe575a8714610636575b600080fd5b34801561015957600080fd5b50610162610664565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019c578181015183820152602001610184565b50505050905090810190601f1680156101c95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e357600080fd5b5061020873ffffffffffffffffffffffffffffffffffffffff60043516602435610719565b604080519115158252519081900360200190f35b34801561022857600080fd5b506102316107aa565b60408051918252519081900360200190f35b34801561024f57600080fd5b5061020873ffffffffffffffffffffffffffffffffffffffff600435811690602435166044356107b0565b34801561028657600080fd5b5061028f6109b8565b6040805160ff9092168252519081900360200190f35b3480156102b157600080fd5b5061020873ffffffffffffffffffffffffffffffffffffffff600435166024356109c1565b3480156102e257600080fd5b506102eb610a84565b005b3480156102f957600080fd5b506102eb73ffffffffffffffffffffffffffffffffffffffff60043516602435610b05565b34801561032a57600080fd5b506102eb600435610c7a565b34801561034257600080fd5b50610208610d69565b34801561035757600080fd5b5061023173ffffffffffffffffffffffffffffffffffffffff60043516610d8a565b34801561038557600080fd5b506102eb610db2565b34801561039a57600080fd5b506102eb73ffffffffffffffffffffffffffffffffffffffff60043516610e2a565b3480156103c857600080fd5b506102eb73ffffffffffffffffffffffffffffffffffffffff60043516602435610eea565b3480156103f957600080fd5b506102eb6110a6565b34801561040e57600080fd5b5061041761113e565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561044c57600080fd5b5061016261115a565b34801561046157600080fd5b5061020873ffffffffffffffffffffffffffffffffffffffff600435166024356111d9565b34801561049257600080fd5b5061020873ffffffffffffffffffffffffffffffffffffffff6004351660243561129c565b3480156104c357600080fd5b5061023173ffffffffffffffffffffffffffffffffffffffff60043581169060243516611405565b3480156104f757600080fd5b5061016261143d565b34801561050c57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102eb94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497505050923560ff1693506114bc92505050565b3480156105e657600080fd5b506102eb73ffffffffffffffffffffffffffffffffffffffff600435166116ae565b34801561061457600080fd5b506102eb73ffffffffffffffffffffffffffffffffffffffff600435166116de565b34801561064257600080fd5b5061020873ffffffffffffffffffffffffffffffffffffffff600435166117a4565b60358054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561070e5780601f106106e35761010080835404028352916020019161070e565b820191906000526020600020905b8154815290600101906020018083116106f157829003601f168201915b505050505090505b90565b6000805474010000000000000000000000000000000000000000900460ff161561074257600080fd5b3360008181526001602052604090205460ff161561075f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8416600090815260016020526040902054849060ff161561079457600080fd5b61079f3386866117cf565b506001949350505050565b603b5490565b6000805474010000000000000000000000000000000000000000900460ff16156107d957600080fd5b3360008181526001602052604090205460ff16156107f657600080fd5b73ffffffffffffffffffffffffffffffffffffffff8516600090815260016020526040902054859060ff161561082b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8516600090815260016020526040902054859060ff161561086057600080fd5b73ffffffffffffffffffffffffffffffffffffffff8616151561088257600080fd5b73ffffffffffffffffffffffffffffffffffffffff87166000908152603a60209081526040808320338085529252909120546108cf9189916108ca908963ffffffff61188216565b6117cf565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260396020526040902054610905908663ffffffff61188216565b73ffffffffffffffffffffffffffffffffffffffff8089166000908152603960205260408082209390935590881681522054610947908663ffffffff6118a016565b73ffffffffffffffffffffffffffffffffffffffff80881660008181526039602090815260409182902094909455805189815290519193928b16927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019695505050505050565b60385460ff1690565b6000805474010000000000000000000000000000000000000000900460ff16156109ea57600080fd5b3360008181526001602052604090205460ff1615610a0757600080fd5b73ffffffffffffffffffffffffffffffffffffffff8416600090815260016020526040902054849060ff1615610a3c57600080fd5b336000818152603a6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8a16845290915290205461079f919087906108ca908863ffffffff6118a016565b60005473ffffffffffffffffffffffffffffffffffffffff163314610aa857600080fd5b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b60005474010000000000000000000000000000000000000000900460ff1615610b2d57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902054829060ff1615610b6257600080fd5b60005473ffffffffffffffffffffffffffffffffffffffff163314610b8657600080fd5b73ffffffffffffffffffffffffffffffffffffffff83161515610ba857600080fd5b603854610bc590839060ff908116600a0a1663ffffffff6118b916565b603b54909250610bdb908363ffffffff6118a016565b603b5573ffffffffffffffffffffffffffffffffffffffff8316600090815260396020526040902054610c14908363ffffffff6118a016565b73ffffffffffffffffffffffffffffffffffffffff841660008181526039602090815260408083209490945583518681529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3505050565b60005474010000000000000000000000000000000000000000900460ff1615610ca257600080fd5b60005473ffffffffffffffffffffffffffffffffffffffff163314610cc657600080fd5b603854610ce390829060ff908116600a0a1663ffffffff6118b916565b603b54909150610cf9908263ffffffff61188216565b603b5533600090815260396020526040902054610d1c908263ffffffff61188216565b336000818152603960209081526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a350565b60005474010000000000000000000000000000000000000000900460ff1690565b73ffffffffffffffffffffffffffffffffffffffff1660009081526039602052604090205490565b60005473ffffffffffffffffffffffffffffffffffffffff163314610dd657600080fd5b600080547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e4e57600080fd5b60005474010000000000000000000000000000000000000000900460ff1615610e7657600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526001602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055517f7534c63860313c46c473e4e98328f37017e9674e2162faf1a3ad7a96236c3b7b9190a250565b60005474010000000000000000000000000000000000000000900460ff1615610f1257600080fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902054829060ff1615610f4757600080fd5b60005473ffffffffffffffffffffffffffffffffffffffff163314610f6b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff83161515610f8d57600080fd5b603854610faa90839060ff908116600a0a1663ffffffff6118b916565b603b54909250610fc0908363ffffffff61188216565b603b5573ffffffffffffffffffffffffffffffffffffffff8316600090815260396020526040902054610ff9908363ffffffff61188216565b73ffffffffffffffffffffffffffffffffffffffff84166000818152603960209081526040808320949094558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a373ffffffffffffffffffffffffffffffffffffffff83166000908152603a60209081526040808320338085529252909120546110a19185916108ca908663ffffffff61188216565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146110ca57600080fd5b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60368054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561070e5780601f106106e35761010080835404028352916020019161070e565b6000805474010000000000000000000000000000000000000000900460ff161561120257600080fd5b3360008181526001602052604090205460ff161561121f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8416600090815260016020526040902054849060ff161561125457600080fd5b336000818152603a6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8a16845290915290205461079f919087906108ca908863ffffffff61188216565b6000805474010000000000000000000000000000000000000000900460ff16156112c557600080fd5b3360008181526001602052604090205460ff16156112e257600080fd5b73ffffffffffffffffffffffffffffffffffffffff8416600090815260016020526040902054849060ff161561131757600080fd5b73ffffffffffffffffffffffffffffffffffffffff8516151561133957600080fd5b33600090815260396020526040902054611359908563ffffffff61188216565b336000908152603960205260408082209290925573ffffffffffffffffffffffffffffffffffffffff871681522054611398908563ffffffff6118a016565b73ffffffffffffffffffffffffffffffffffffffff86166000818152603960209081526040918290209390935580518781529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3506001949350505050565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152603a6020908152604080832093909416825291909152205490565b60378054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561070e5780601f106106e35761010080835404028352916020019161070e565b600254600090610100900460ff16806114d857506114d86118e7565b806114e6575060025460ff16155b151561157957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201527f656e20696e697469616c697a6564000000000000000000000000000000000000606482015290519081900360840190fd5b506002805460016101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff831681177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169190911790925560008054337fffffffffffffffffffffffff0000000000000000000000000000000000000000909116179055855191900460ff1690611617906035906020880190611986565b50835161162b906036906020870190611986565b50825161163f906037906020860190611986565b506038805460ff9093167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009093169290921790915560028054911515610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909216919091179055505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146116d257600080fd5b6116db816118f1565b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331461170257600080fd5b60005474010000000000000000000000000000000000000000900460ff161561172a57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116600081815260016020819052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016909217909155517fffa4e6181777692565cf28528fc88fd1516ea86b56da075235fa575af6a4b8559190a250565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b73ffffffffffffffffffffffffffffffffffffffff821615156117f157600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316151561181357600080fd5b73ffffffffffffffffffffffffffffffffffffffff8084166000818152603a6020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000808383111561189257600080fd5b5050808203805b5092915050565b6000828201838110156118b257600080fd5b9392505050565b6000808315156118cc5760009150611899565b508282028284828115156118dc57fe5b04146118b257600080fd5b303b8015905b5090565b73ffffffffffffffffffffffffffffffffffffffff8116151561191357600080fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821780845560405192939116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106119c757805160ff19168380011785556119f4565b828001600101855582156119f4579182015b828111156119f45782518255916020019190600101906119d9565b506118ed926107169250905b808211156118ed5760008155600101611a005600a165627a7a72305820a8653069fefa30585aa5bc0527bc0f3854db3575c1afe3662bc00cf12d29a8f40029"
}