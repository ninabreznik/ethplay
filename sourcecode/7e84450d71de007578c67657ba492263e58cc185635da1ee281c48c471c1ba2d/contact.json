{
  "address": "0xa5fd9078ab76f6f56b5f69435f0f008e5a7bddc7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RougeTGE",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-04\n*/\n\ncontract RGX {\n    function balanceOf(address _owner) public view returns (uint256 balance);\n}\n\ncontract RGE {\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n}\n\ncontract RougeTGE {\n    \n    string public version = 'v1.1';\n    \n    address owner; \n\n    modifier onlyBy(address _account) {\n        require(msg.sender == _account);\n        _;\n    }\n\n    bool public fundingActive = true;\n\n    function toggleFunding(bool _flag) onlyBy(owner) public {\n        fundingActive = _flag;\n    }\n\n    uint public fundingStart;\n    uint public fundingEnd;\n\n    modifier beforeTGE() {\n        require(fundingStart > now);\n        _;\n    }\n\n    modifier TGEOpen() {\n        require(fundingStart <= now && now < fundingEnd);\n        require(fundingActive);\n        _;\n    }\n    \n    modifier afterTGE() {\n        require(now >= fundingEnd);\n        _;\n    }\n\n    function isFundingOpen() constant public returns (bool yes) {\n        return(fundingStart <= now && now < fundingEnd && fundingActive);\n    }\n\n    mapping (address => bool) public kyc;\n    mapping (address => uint256) public tokens;\n    mapping (address => mapping (address => uint256)) public used;\n\n    function tokensOf(address _who) public view returns (uint256 balance) {\n        return tokens[_who];\n    }\n\n    uint8 public minFunding = 1; /* in finney */\n    uint8 public decimals = 6;\n    uint256 public total_distribution = 500000000 * 10**uint(decimals); /* Total RGE tokens to distribute during TGE (500m with 6 decimals) */\n\n    struct Sale {\n        uint256 funding; // original contribution in finney\n        uint256 used;    // already used with bonus contribution in finney\n        uint256 tokens;  // RGE tokens distribution\n        bool presale;\n    }\n\n    uint256 public tokenPrice; /* in wei */\n\n    constructor(\n                uint _fundingStart,\n                uint _fundingEnd,\n                uint _tokenPrice\n                ) public {\n        owner = msg.sender;\n        fundingStart = _fundingStart;\n        fundingEnd = _fundingEnd;\n        tokenPrice = _tokenPrice;\n    }\n    \n    address rge; \n\n    address rgxa; \n    address rgxb; \n    address rgxd; \n\n    address rgx20; \n    address rgx15; \n    address rgx12; \n    address rgx9; \n    address rgx8; \n    address rgx7; \n    address rgx6; \n    address rgx5; \n    address rgx4; \n    address rgx3; \n\n    function init (\n                   address _rge,\n                   address _rgxa, address _rgxb, address _rgxd,\n                   address _rgx20, address _rgx15, address _rgx12,\n                   address _rgx9, address _rgx8, address _rgx7, address _rgx6, address _rgx5, address _rgx4, address _rgx3\n                   ) onlyBy(owner) public {\n        rge = _rge;\n        rgxa = _rgxa; rgxb = _rgxb; rgxd = _rgxd; \n        rgx20 = _rgx20; rgx15 = _rgx15; rgx12 = _rgx12;\n        rgx9 = _rgx9; rgx8 = _rgx8; rgx7 = _rgx7; rgx6 = _rgx6; rgx5 = _rgx5; rgx4 = _rgx4; rgx3 = _rgx3;\n    }\n    \n    event Distribute(address indexed buyer, uint256 value);\n\n    function () payable TGEOpen() public { \n\n        require(msg.sender != owner);\n\n        Sale memory _sale = Sale({\n            funding: msg.value / 1 finney, used: 0, tokens: 0, presale: false\n        });\n\n        require(_sale.funding >= minFunding);\n\n        /* distribution with RGX discounts */\n        \n        _sale = _with_RGXBonus(_sale, rgxa, 20, 1);\n        _sale = _with_RGXBonus(_sale, rgxb, 11, 1);\n        _sale = _with_RGXBonus(_sale, rgxd, 5, 4);\n\n        _sale = _with_RGXToken(_sale, rgx20, 20, 1);\n        _sale = _with_RGXToken(_sale, rgx15, 15, 1);\n        _sale = _with_RGXToken(_sale, rgx12, 12, 1);\n        _sale = _with_RGXToken(_sale, rgx9, 9, 1);\n        _sale = _with_RGXToken(_sale, rgx8, 8, 1);\n        _sale = _with_RGXToken(_sale, rgx7, 7, 1);\n        _sale = _with_RGXToken(_sale, rgx6, 6, 1);\n        _sale = _with_RGXToken(_sale, rgx5, 5, 1);\n        _sale = _with_RGXToken(_sale, rgx4, 4, 1);\n        _sale = _with_RGXToken(_sale, rgx3, 3, 1);\n\n        /* standard tokens distribution */\n        \n        if ( _sale.funding > _sale.used ) {\n\n            uint256 _available = _sale.funding - _sale.used;\n            _sale.used += _available;\n            _sale.tokens += _available * 1 finney * 10**uint(decimals) / tokenPrice;\n            \n        }\n        \n        /* check if enough tokens and distribute tokens to buyer */\n        \n        require(total_distribution >= _sale.tokens); \n\n        total_distribution -= _sale.tokens;\n        tokens[msg.sender] += _sale.tokens;\n        emit Distribute(msg.sender, _sale.tokens);\n\n    }\n    \n    function _with_RGXBonus(Sale _sale, address _a, uint8 _multiplier, uint8 _divisor) internal returns (Sale _result) {\n\n        RGX _rgx = RGX(_a);\n\n        uint256 rgxBalance = _rgx.balanceOf(msg.sender);\n\n        if ( used[_a][msg.sender] < rgxBalance && _sale.funding > _sale.used ) {\n\n            uint256 _available = rgxBalance - used[_a][msg.sender];\n\n            if ( _available > _sale.funding - _sale.used ) {\n                _available = _sale.funding - _sale.used;\n            }\n\n            _sale.used += _available;\n            _sale.tokens += _available * 1 finney * 10**uint(decimals) / tokenPrice * _multiplier / _divisor;\n            used[_a][msg.sender] += _available;\n        }\n\n        return _sale;\n    }\n\n    function _with_RGXToken(Sale _sale, address _a, uint8 _multiplier, uint8 _divisor) internal returns (Sale _result) {\n\n        if ( _sale.presale ) {\n            return _sale;\n        }\n        \n        RGX _rgx = RGX(_a);\n\n        uint256 rgxBalance = _rgx.balanceOf(msg.sender);\n\n        if ( used[_a][msg.sender] < rgxBalance ) {\n\n            uint256 _available = rgxBalance - used[_a][msg.sender];\n\n            _sale.tokens += _available * 1 finney * 10**uint(decimals) / tokenPrice * (_multiplier - 1) / _divisor;\n            used[_a][msg.sender] += _available;\n            _sale.presale = true;\n        }\n\n        return _sale;\n    }\n\n    function toggleKYC(address _who, bool _flag) onlyBy(owner) public {\n        kyc[_who]= _flag;\n    }\n    \n    function revertAML(address _who) onlyBy(owner) public {\n        total_distribution += tokens[_who];\n        tokens[_who] = 0;\n    }\n\n    function withdraw() public returns (bool success) {\n\n        require(msg.sender != owner); \n        \n        // no verification if enough tokens => done in payable already\n        \n        require(tokens[msg.sender] > 0);\n        require(kyc[msg.sender]); \n        \n        RGE _rge = RGE(rge);\n        \n        if ( _rge.transfer(msg.sender, tokens[msg.sender]) ) {\n            tokens[msg.sender] = 0;\n            return true;\n        } \n        \n        return false;\n        \n    }\n    \n    function withdrawFunding() onlyBy(owner) public {\n        msg.sender.transfer(address(this).balance);\n    }\n    \n    function kill() onlyBy(owner) public {\n        selfdestruct(owner);\n    }\n\n}",
  "bytecode": "60806040526040805190810160405280600481526020017f76312e3100000000000000000000000000000000000000000000000000000000815250600090805190602001906200005192919062000167565b5060018060146101000a81548160ff0219169083151502179055506001600760006101000a81548160ff021916908360ff1602179055506006600760016101000a81548160ff021916908360ff160217905550600760019054906101000a900460ff1660ff16600a0a631dcd650002600855348015620000d057600080fd5b50604051606080620020cd83398101806040528101908080519060200190929190805190602001909291908051906020019092919050505033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600281905550816003819055508060098190555050505062000216565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001aa57805160ff1916838001178555620001db565b82800160010185558215620001db579182015b82811115620001da578251825591602001919060010190620001bd565b5b509050620001ea9190620001ee565b5090565b6200021391905b808211156200020f576000816000905550600101620001f5565b5090565b90565b611ea780620002266000396000f300608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630d37ac7f146105d7578063126262a31461060657806313e7323e146107e9578063193a4249146108145780632e0474ed1461084557806330b9af98146108a0578063313ce567146108b75780633152dd00146108e85780633ccfd60b1461091757806341c0e1b5146109465780635195afa51461095d57806354fd4d50146109d45780635a3f267214610a645780637ff9b59614610abb57806398ec909514610ae6578063bcde18f114610b11578063c541a5bd14610b3c578063d3d864f514610b7f578063dee6e5a414610bae578063e486033914610bfd575b61011a611e50565b6000426002541115801561012f575060035442105b151561013a57600080fd5b600160149054906101000a900460ff16151561015557600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515156101b257600080fd5b60806040519081016040528066038d7ea4c68000348115156101d057fe5b0481526020016000815260200160008152602001600015158152509150600760009054906101000a900460ff1660ff1682600001511015151561021257600080fd5b61024282600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660146001610c54565b915061027482600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600b6001610c54565b91506102a682600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660056004610c54565b91506102d882600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660146001610f6d565b915061030a82600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600f6001610f6d565b915061033c82601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600c6001610f6d565b915061036e82601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660096001610f6d565b91506103a082601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660086001610f6d565b91506103d282601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660076001610f6d565b915061040482601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660066001610f6d565b915061043682601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660056001610f6d565b915061046882601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660046001610f6d565b915061049a82601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660036001610f6d565b9150816020015182600001511115610507578160200151826000015103905080826020018181510191508181525050600954600760019054906101000a900460ff1660ff16600a0a66038d7ea4c680008302028115156104f657fe5b048260400181815101915081815250505b81604001516008541015151561051c57600080fd5b81604001516008600082825403925050819055508160400151600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167fc1d32ad5cca423e7dda2123dbf8c482f8e77d00b631c06e903a47f2cec1334df83604001516040518082815260200191505060405180910390a25050005b3480156105e357600080fd5b5061060460048036038101908080351515906020019092919050505061126a565b005b34801561061257600080fd5b506107e7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112e5565b005b3480156107f557600080fd5b506107fe6116e1565b6040518082815260200191505060405180910390f35b34801561082057600080fd5b506108296116e7565b604051808260ff1660ff16815260200191505060405180910390f35b34801561085157600080fd5b50610886600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116fa565b604051808215151515815260200191505060405180910390f35b3480156108ac57600080fd5b506108b561171a565b005b3480156108c357600080fd5b506108cc6117d8565b604051808260ff1660ff16815260200191505060405180910390f35b3480156108f457600080fd5b506108fd6117eb565b604051808215151515815260200191505060405180910390f35b34801561092357600080fd5b5061092c6117fe565b604051808215151515815260200191505060405180910390f35b34801561095257600080fd5b5061095b611aa2565b005b34801561096957600080fd5b506109be600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b3a565b6040518082815260200191505060405180910390f35b3480156109e057600080fd5b506109e9611b5f565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a29578082015181840152602081019050610a0e565b50505050905090810190601f168015610a565780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610a7057600080fd5b50610aa5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bfd565b6040518082815260200191505060405180910390f35b348015610ac757600080fd5b50610ad0611c46565b6040518082815260200191505060405180910390f35b348015610af257600080fd5b50610afb611c4c565b6040518082815260200191505060405180910390f35b348015610b1d57600080fd5b50610b26611c52565b6040518082815260200191505060405180910390f35b348015610b4857600080fd5b50610b7d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c58565b005b348015610b8b57600080fd5b50610b94611d4d565b604051808215151515815260200191505060405180910390f35b348015610bba57600080fd5b50610bfb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611d7f565b005b348015610c0957600080fd5b50610c3e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e38565b6040518082815260200191505060405180910390f35b610c5c611e50565b60008060008692508273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610cff57600080fd5b505af1158015610d13573d6000803e3d6000fd5b505050506040513d6020811015610d2957600080fd5b8101908080519060200190929190505050915081600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054108015610dce575087602001518860000151115b15610f5f57600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054820390508760200151886000015103811115610e7457876020015188600001510390505b808860200181815101915081815250508460ff168660ff16600954600760019054906101000a900460ff1660ff16600a0a66038d7ea4c68000850202811515610eb957fe5b0402811515610ec457fe5b0488604001818151019150818152505080600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b879350505050949350505050565b610f75611e50565b6000806000876060015115610f8c5787935061125f565b8692508273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561102a57600080fd5b505af115801561103e573d6000803e3d6000fd5b505050506040513d602081101561105457600080fd5b8101908080519060200190929190505050915081600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561125b57600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054820390508460ff166001870360ff16600954600760019054906101000a900460ff1660ff16600a0a66038d7ea4c680008502028115156111a457fe5b04028115156111af57fe5b0488604001818151019150818152505080600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555060018860600190151590811515815250505b8793505b505050949350505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c757600080fd5b81600160146101000a81548160ff0219169083151502179055505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561134257600080fd5b8e600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508d600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508c600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508b600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508a600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555089600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555088601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085601360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084601460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083601560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082601660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081601760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050505050505050505050565b60035481565b600760009054906101000a900460ff1681565b60046020528060005260406000206000915054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561177757600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501580156117d4573d6000803e3d6000fd5b5050565b600760019054906101000a900460ff1681565b600160149054906101000a900460ff1681565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415151561185e57600080fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115156118ac57600080fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561190457600080fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611a0b57600080fd5b505af1158015611a1f573d6000803e3d6000fd5b505050506040513d6020811015611a3557600080fd5b810190808051906020019092919050505015611a99576000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060019150611a9e565b600091505b5090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611aff57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6006602052816000526040600020602052806000526040600020600091509150505481565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bf55780601f10611bca57610100808354040283529160200191611bf5565b820191906000526020600020905b815481529060010190602001808311611bd857829003601f168201915b505050505081565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60095481565b60085481565b60025481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cb557600080fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546008600082825401925050819055506000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60004260025411158015611d62575060035442105b8015611d7a5750600160149054906101000a900460ff165b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ddc57600080fd5b81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b60056020528060005260406000206000915090505481565b60806040519081016040528060008152602001600081526020016000815260200160001515815250905600a165627a7a723058207d0ad695527fed1457503adc8dd7c1c3b28b9838bd9471001ca74001744096e60029000000000000000000000000000000000000000000000000000000005b157e20000000000000000000000000000000000000000000000000000000005b425120000000000000000000000000000000000000000000000000000073c9132f44ee",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000005b157e20000000000000000000000000000000000000000000000000000000005b425120000000000000000000000000000000000000000000000000000073c9132f44ee"
}