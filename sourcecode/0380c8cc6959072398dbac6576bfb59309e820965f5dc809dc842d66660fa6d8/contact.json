{
  "address": "0x12d5b7c26dd8dc6e2f71f5bf240d5e76452b2fe5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DirectCryptTokenPreSale",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-16\n*/\n\npragma solidity ^0.4.11;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/*\n * Haltable\n *\n * Abstract contract that allows children to implement an\n * emergency stop mechanism. Differs from Pausable by requiring a state.\n *\n *\n * Originally envisioned in FirstBlood ICO contract.\n */\ncontract Haltable is Ownable {\n  bool public halted = false;\n\n  modifier inNormalState {\n    require(!halted);\n    _;\n  }\n\n  modifier inEmergencyState {\n    require(halted);\n    _;\n  }\n\n  // called by the owner on emergency, triggers stopped state\n  function halt() external onlyOwner inNormalState {\n    halted = true;\n  }\n\n  // called by the owner on end of emergency, returns to normal state\n  function unhalt() external onlyOwner inEmergencyState {\n    halted = false;\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Burnable\n *\n * @dev Standard ERC20 token\n */\ncontract Burnable is StandardToken {\n  using SafeMath for uint;\n\n  /* This notifies clients about the amount burnt */\n  event Burn(address indexed from, uint value);\n\n  function burn(uint _value) returns (bool success) {\n    require(_value > 0 && balances[msg.sender] >= _value);\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    Burn(msg.sender, _value);\n    return true;\n  }\n\n  function burnFrom(address _from, uint _value) returns (bool success) {\n    require(_from != 0x0 && _value > 0 && balances[_from] >= _value);\n    require(_value <= allowed[_from][msg.sender]);\n    balances[_from] = balances[_from].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Burn(_from, _value);\n    return true;\n  }\n\n  function transfer(address _to, uint _value) returns (bool success) {\n    require(_to != 0x0); //use burn\n\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n    require(_to != 0x0); //use burn\n\n    return super.transferFrom(_from, _to, _value);\n  }\n}\n\n/**\n * @title DirectCryptToken\n *\n * @dev Burnable Ownable ERC20 token\n */\ncontract DirectCryptToken is Burnable, Ownable {\n\n  string public constant name = \"Direct Crypt Token\";\n  string public constant symbol = \"DRCT\";\n  uint8 public constant decimals = 18;\n  uint public constant INITIAL_SUPPLY = 500000000 * 1 ether;\n\n  /* The finalizer contract that allows unlift the transfer limits on this token */\n  address public releaseAgent;\n\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n  bool public released = false;\n\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n  mapping (address => bool) public transferAgents;\n\n  /**\n   * Limit token transfer until the crowdsale is over.\n   *\n   */\n  modifier canTransfer(address _sender) {\n    require(released || transferAgents[_sender]);\n    _;\n  }\n\n  /** The function can be called only before or after the tokens have been released */\n  modifier inReleaseState(bool releaseState) {\n    require(releaseState == released);\n    _;\n  }\n\n  /** The function can be called only by a whitelisted release agent. */\n  modifier onlyReleaseAgent() {\n    require(msg.sender == releaseAgent);\n    _;\n  }\n\n\n  /**\n   * @dev Constructor that gives msg.sender all of existing tokens.\n   */\n  function DirectCryptToken() {\n    totalSupply_ = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n  }\n\n\n  /**\n   * Set the contract that can call release and make the token transferable.\n   *\n   * Design choice. Allow reset the release agent to fix fat finger mistakes.\n   */\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n    require(addr != 0x0);\n\n    // We don't do interface check here as we might want to a normal wallet address to act as a release agent\n    releaseAgent = addr;\n  }\n\n  function release() onlyReleaseAgent inReleaseState(false) public {\n    released = true;\n  }\n\n  /**\n   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\n   */\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n    require(addr != 0x0);\n    transferAgents[addr] = state;\n  }\n\n  function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) {\n    // Call Burnable.transfer()\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {\n    // Call Burnable.transferForm()\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function burn(uint _value) onlyOwner returns (bool success) {\n    return super.burn(_value);\n  }\n\n  function burnFrom(address _from, uint _value) onlyOwner returns (bool success) {\n    return super.burnFrom(_from, _value);\n  }\n}\n\ncontract InvestorWhiteList is Ownable {\n  mapping (address => bool) public investorWhiteList;\n\n  mapping (address => address) public referralList;\n\n  function InvestorWhiteList() {\n\n  }\n\n  function addInvestorToWhiteList(address investor) external onlyOwner {\n    require(investor != 0x0 && !investorWhiteList[investor]);\n    investorWhiteList[investor] = true;\n  }\n\n  function removeInvestorFromWhiteList(address investor) external onlyOwner {\n    require(investor != 0x0 && investorWhiteList[investor]);\n    investorWhiteList[investor] = false;\n  }\n\n  //when new user will contribute ICO contract will automatically send bonus to referral\n  function addReferralOf(address investor, address referral) external onlyOwner {\n    require(investor != 0x0 && referral != 0x0 && referralList[investor] == 0x0 && investor != referral);\n    referralList[investor] = referral;\n  }\n\n  function isAllowed(address investor) constant external returns (bool result) {\n    return investorWhiteList[investor];\n  }\n\n  function getReferralOf(address investor) constant external returns (address result) {\n    return referralList[investor];\n  }\n}\n\ncontract PriceReceiver {\n  address public ethPriceProvider;\n\n  modifier onlyEthPriceProvider() {\n    require(msg.sender == ethPriceProvider);\n    _;\n  }\n\n  function receiveEthPrice(uint ethUsdPrice) external;\n\n  function setEthPriceProvider(address provider) external;\n}\n\ncontract DirectCryptTokenPreSale is Haltable, PriceReceiver {\n  using SafeMath for uint;\n\n  string public constant name = \"Direct Crypt Token PreSale\";\n\n  uint public constant REFERRAL_MIN_LIMIT = 2 ether;\n\n  DirectCryptToken public token;\n  InvestorWhiteList public investorWhiteList;\n\n  address public beneficiary;\n\n  uint public hardCap;\n  uint public softCap;\n\n  uint public ethUsdRate;\n\n  uint public tokenPriceUsd;\n  uint public totalTokens;//in wei\n\n  uint public collected = 0;\n  uint public tokensSold = 0;\n  uint public investorCount = 0;\n  uint public weiRefunded = 0;\n\n  uint public startTime;\n  uint public endTime;\n\n  bool public softCapReached = false;\n  bool public crowdsaleFinished = false;\n\n  mapping (address => bool) refunded;\n  mapping (address => uint) public deposited;\n\n  event SoftCapReached(uint softCap);\n  event NewContribution(address indexed holder, uint tokenAmount, uint etherAmount);\n  event NewReferralTransfer(address indexed investor, address indexed referral, uint tokenAmount);\n  event Refunded(address indexed holder, uint amount);\n  event Deposited(address indexed holder, uint amount);\n\n  modifier preSaleActive() {\n    require(now >= startTime && now < endTime);\n    _;\n  }\n\n  modifier preSaleEnded() {\n    require(now >= endTime);\n    _;\n  }\n\n  modifier inWhiteList() {\n    require(investorWhiteList.isAllowed(msg.sender));\n    _;\n  }\n\n  function DirectCryptTokenPreSale(\n    uint _hardCapETH,\n    uint _softCapETH,\n\n    address _token,\n    address _beneficiary,\n    address _investorWhiteList,\n\n    uint _totalTokens,\n    uint _tokenPriceUsd,\n\n    uint _baseEthUsdPrice,\n\n    uint _startTime,\n    uint _endTime\n  ) {\n    ethUsdRate = _baseEthUsdPrice;\n    tokenPriceUsd = _tokenPriceUsd;\n\n    totalTokens = _totalTokens.mul(1 ether);\n\n    hardCap = _hardCapETH.mul(1 ether);\n    softCap = _softCapETH.mul(1 ether);\n\n    token = DirectCryptToken(_token);\n    investorWhiteList = InvestorWhiteList(_investorWhiteList);\n    beneficiary = _beneficiary;\n\n    startTime = _startTime;\n    endTime = _endTime;\n  }\n\n  function() payable inWhiteList {\n    doPurchase(msg.sender);\n  }\n\n  function refund() external preSaleEnded inNormalState {\n    require(softCapReached == false);\n    require(refunded[msg.sender] == false);\n\n    uint refund = deposited[msg.sender];\n    require(refund > 0);\n\n    msg.sender.transfer(refund);\n    deposited[msg.sender] = 0;\n    refunded[msg.sender] = true;\n    weiRefunded = weiRefunded.add(refund);\n    Refunded(msg.sender, refund);\n  }\n\n  function withdraw() external onlyOwner {\n    require(softCapReached);\n    beneficiary.transfer(collected);\n    token.transfer(beneficiary, token.balanceOf(this));\n    crowdsaleFinished = true;\n  }\n\n  function receiveEthPrice(uint ethUsdPrice) external onlyEthPriceProvider {\n    require(ethUsdPrice > 0);\n    ethUsdRate = ethUsdPrice;\n  }\n\n  function setEthPriceProvider(address provider) external onlyOwner {\n    require(provider != 0x0);\n    ethPriceProvider = provider;\n  }\n\n  function setNewWhiteList(address newWhiteList) external onlyOwner {\n    require(newWhiteList != 0x0);\n    investorWhiteList = InvestorWhiteList(newWhiteList);\n  }\n\n  function doPurchase(address _owner) private preSaleActive inNormalState {\n    require(!crowdsaleFinished);\n    require(collected.add(msg.value) <= hardCap);\n    require(totalTokens >= tokensSold + msg.value.mul(ethUsdRate).div(tokenPriceUsd));\n\n    if (!softCapReached && collected < softCap && collected.add(msg.value) >= softCap) {\n      softCapReached = true;\n      SoftCapReached(softCap);\n    }\n\n    uint tokens = msg.value.mul(ethUsdRate).div(tokenPriceUsd);\n\n    if (token.balanceOf(msg.sender) == 0) investorCount++;\n\n    address referral = investorWhiteList.getReferralOf(msg.sender);\n    uint referralBonus = 0;\n    if (msg.value >= REFERRAL_MIN_LIMIT) {\n      referralBonus = calculateReferralBonus(tokens);\n    }\n\n    collected = collected.add(msg.value);\n\n    token.transfer(msg.sender, tokens);\n\n    uint newTokensSold = tokensSold.add(tokens);\n\n    if (referralBonus > 0 && referral != 0x0) {\n      newTokensSold = newTokensSold.add(referralBonus);\n    }\n\n    tokensSold = newTokensSold;\n\n    deposited[msg.sender] = deposited[msg.sender].add(msg.value);\n    \n    NewContribution(_owner, tokens, msg.value);\n\n    if (referralBonus > 0 && referral != 0x0) {\n      token.transfer(referral, referralBonus);\n      NewReferralTransfer(msg.sender, referral, referralBonus);\n    }\n  }\n\n  function calculateReferralBonus(uint tokens) private returns (uint) {\n    return tokens.mul(5).div(100);\n  }\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000002160ec000000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000225a2c80dfe366139d560042282a50334bdff6ee000000000000000000000000b2fd26d832217e57d4b80708fd70aba4286368e7000000000000000000000000bdc3f19226b31b9f34589c491a8adc691991403a0000000000000000000000000000000000000000000000000000000003938700000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000044c0000000000000000000000000000000000000000000000000000000005becfd50000000000000000000000000000000000000000000000000000000005c148a4f"
}