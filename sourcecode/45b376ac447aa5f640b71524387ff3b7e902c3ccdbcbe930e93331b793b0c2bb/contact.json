{
  "address": "0xd3e44ea9246f282e0aefcb28d9ee45f7f6629ce5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DSG_Turntable",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-13\n*/\n\npragma solidity ^0.4.25;\n\ninterface DSG {\n    function gamingDividendsReception() payable external;\n}\n\ncontract DSG_Turntable{\n    using SafeMath for uint256;\n    \n    address constant public DSG_ADDRESS = 0x696826C18A6Bc9Be4BBfe3c3A6BB9f5a69388687;\n    uint256 public totalDividends;\n    uint256 public totalWinnings;\n    uint256 public totalTurnover;\n    uint256 public totalPlayed;\n    uint256 public maxBet;\n    uint256 public minBet;\n    uint256 public minContractBalance;\n    uint256 public minBetForJackpot;\n    uint256 public jackpotBalance;\n    uint256 public nextPayout;\n    uint256 public ownerDeposit;\n    address[2] public owners;\n    address[2] public candidates;\n    bool public paused;\n    \n    mapping (address => Bet) private usersBets;\n    \n    struct Bet {\n        uint256 blockNumber;\n        uint256 bet;\n    }\n    \n    modifier onlyOwners(){\n        require(msg.sender == owners[0] || msg.sender == owners[1]);\n        _;\n    }\n    modifier onlyUsers(){\n        require(tx.origin == msg.sender);\n        _;\n    }\n    modifier checkBlockNumber(){\n        uint256 blockNumber = usersBets[msg.sender].blockNumber;\n        if(block.number.sub(blockNumber) >= 250 && blockNumber > 0){\n            emit Result(msg.sender, 1000, 0, jackpotBalance, usersBets[msg.sender].bet, 0);\n            delete usersBets[msg.sender];\n        }\n        else{\n            _;\n        }\n    }\n    constructor(address secondOwner) public payable{\n        owners[0]   = msg.sender;\n        owners[1]   = secondOwner;\n        ownerDeposit   = msg.value;\n        jackpotBalance = jackpotBalance.add(ownerDeposit.div(1000));\n    }\n    function play() public payable checkBlockNumber onlyUsers{\n        uint256 bet = msg.value;\n        require(checkSolvency(bet), \"Not enough ETH in contract\");\n        require(paused == false, \"Game was stopped\");\n        require(bet >= minBet && bet <= maxBet, \"Amount should be within range\");\n        require(usersBets[msg.sender].bet == 0, \"You have already bet\");\n        usersBets[msg.sender].bet = bet;\n        usersBets[msg.sender].blockNumber = block.number;\n        totalTurnover = totalTurnover.add(bet);\n        totalPlayed = totalPlayed.add(1);\n        emit PlaceBet(msg.sender, bet, now);\n    }\n    function result() public checkBlockNumber onlyUsers{\n        require(blockhash(usersBets[msg.sender].blockNumber) != 0, \"Your time to determine the result has come out or not yet come\");\n        uint256 bet = usersBets[msg.sender].bet;\n        uint256 totalWinAmount;\n        uint256 r = _random(1000);\n        uint256 winRate = 0;\n        if(_winChanceJ(r, bet)){\n\t\t    winRate = 1000;\n            totalWinAmount = totalWinAmount.add(jackpotBalance).add(bet);\n            emit Jackpot(msg.sender, jackpotBalance, now);\n            delete jackpotBalance;\n\t\t}\n\t\tif(_winChance1x(r)){\n\t\t    winRate = 100;\n\t\t    totalWinAmount = totalWinAmount.add(bet);\n\t\t}\n\t\tif(_winChance1_5x(r)){\n\t\t    winRate = 150;\n\t\t    totalWinAmount = totalWinAmount.add(bet.mul(winRate).div(100));\n\t\t}\n\t\tif(_winChance2x(r)){\n\t\t    winRate = 200;\n\t\t    totalWinAmount = totalWinAmount.add(bet.mul(winRate).div(100));\n\t\t}\n\t\tif(_winChance2_5x(r)){\n\t\t    winRate = 250;\n\t\t    totalWinAmount = totalWinAmount.add(bet.mul(winRate).div(100));\n\t\t}\n\t\tif(_winChance3x(r)){\n\t\t    winRate = 300;\n\t\t    totalWinAmount = totalWinAmount.add(bet.mul(winRate).div(100));\n\t\t}\n\t\tif(_winChance5x(r)){\n\t\t    winRate = 500;\n\t\t    totalWinAmount = totalWinAmount.add(bet.mul(winRate).div(100));\n\t\t}\n\t\tif(totalWinAmount > 0){\n            msg.sender.transfer(totalWinAmount);\n            totalWinnings = totalWinnings.add(totalWinAmount);\n        }\n        jackpotBalance = jackpotBalance.add(bet.div(1000));\n        delete usersBets[msg.sender];\n        emit Result(msg.sender, r, totalWinAmount, jackpotBalance, bet, winRate);\n    }\n    function _winChanceJ(uint r, uint bet) private view returns(bool){\n\t\tif(bet >= minBetForJackpot && r == 999 && jackpotBalance > 0) return true;\n\t\telse return false;\n\t}\n    function _winChance5x(uint r) private pure returns(bool){\n\t\tif(r == 12 || r == 22 || r == 32 || r == 42 || r == 52) return true;\n\t\telse return false;\n\t}\n\tfunction _winChance3x(uint r) private pure returns(bool){\n\t\tif( (r >= 80 && r < 83)   ||\n\t\t\t(r >= 180 && r < 183) ||\n\t\t\t(r >= 280 && r < 283) ||\n\t\t\t(r >= 380 && r < 383) ||\n\t\t\t(r >= 480 && r < 483) ||\n\t\t\t(r >= 580 && r < 583) ||\n\t\t\t(r >= 680 && r < 683) ||\n\t\t\t(r >= 780 && r < 783))\n\t\treturn true;\n\t\telse return false;\n\t}\n\tfunction _winChance2_5x(uint r) private pure returns(bool){\n\t\tif( (r >= 75 && r < 80)   ||\n\t\t\t(r >= 175 && r < 180) ||\n\t\t\t(r >= 275 && r < 280) ||\n\t\t\t(r >= 375 && r < 380) ||\n\t\t\t(r >= 475 && r < 480) ||\n\t\t\t(r >= 575 && r < 580) ||\n\t\t\t(r >= 675 && r < 680) ||\n\t\t\t(r >= 775 && r < 780))\n\t    return true;\n\t\telse return false;\n\t}\n\tfunction _winChance2x(uint r) private pure returns(bool){\n\t\tif((r >= 50 && r < 75) || (r >= 350 && r < 375) || (r >= 650 && r < 675) || (r >= 950 && r < 975)) return true;\n\t\telse return false;\n\t}\n\tfunction _winChance1_5x(uint r) private pure returns(bool){\n\t\tif((r >= 25 && r < 50) || (r >= 125 && r < 150)) return true;\n\t\telse if((r >= 425 && r < 450) || (r >= 525 && r < 550)) return true;\n\t\telse if((r >= 625 && r < 650) || (r >= 725 && r < 750)) return true;\n\t\telse return false;\n\t}\n\tfunction _winChance1x(uint r) private pure returns(bool){\n\t\tif((r >= 0 && r < 25) || (r >= 100 && r < 125)) return true;\n\t\telse if((r >= 400 && r < 425) || (r >= 500 && r < 525)) return true;\n\t\telse if((r >= 600 && r < 625) || (r >= 700 && r < 725)) return true;\n\t\telse return false;\n\t}\n    function checkSolvency(uint bet) view public returns(bool){\n        if(getContractBalance() > bet.mul(500).div(100).add(jackpotBalance)) return true;\n        else return false;\n    }\n    function sendDividends() public {\n        require(getContractBalance() > minContractBalance && now > nextPayout, \"You cannot send dividends\");\n        DSG DSG0 = DSG(DSG_ADDRESS);\n        uint256 balance = getContractBalance();\n        uint256 dividends = balance.sub(minContractBalance);\n        nextPayout = now.add(7 days);\n        totalDividends = totalDividends.add(dividends);\n        DSG0.gamingDividendsReception.value(dividends)();\n        emit Dividends(balance, dividends, now);\n    }\n     function getContractBalance() public view returns (uint256){\n        return address(this).balance;\n    }\n    function _random(uint256 max) private view returns(uint256){\n        bytes32 hash = blockhash(usersBets[msg.sender].blockNumber);\n        return uint256(keccak256(abi.encode(hash, msg.sender))) % max;\n    }\n    function deposit() public payable onlyOwners{\n        ownerDeposit = ownerDeposit.add(msg.value);\n    }\n    function sendOwnerDeposit(address recipient) public onlyOwners{\n        require(paused == true, 'Game was not stopped');\n        uint256 contractBalance = getContractBalance();\n        if(contractBalance >= ownerDeposit){\n            recipient.transfer(ownerDeposit);\n        }\n        else{\n            recipient.transfer(contractBalance);\n        }\n        delete jackpotBalance;\n        delete ownerDeposit;\n    }\n    function pauseGame(bool option) public onlyOwners{\n        paused = option;\n    }\n    function setMinBet(uint256 eth) public onlyOwners{\n        minBet = eth;\n    }\n    function setMaxBet(uint256 eth) public onlyOwners{\n        maxBet = eth;\n    }\n    function setMinBetForJackpot(uint256 eth) public onlyOwners{\n        minBetForJackpot = eth;\n    }\n    function setMinContractBalance(uint256 eth) public onlyOwners{\n        minContractBalance = eth;\n    }\n    function transferOwnership(address newOwnerAddress, uint8 k) public onlyOwners{\n        candidates[k] = newOwnerAddress;\n    }\n    function confirmOwner(uint8 k) public{\n        require(msg.sender == candidates[k]);\n        owners[k] = candidates[k];\n    }\n    event Dividends(\n        uint256 balance,\n        uint256 dividends,\n        uint256 timestamp\n    );\n    event Jackpot(\n        address indexed player,\n        uint256 jackpot,\n        uint256 timestamp\n    );\n    event PlaceBet(\n        address indexed player,\n        uint256 bet,\n        uint256 timestamp\n    );\n    event Result(\n        address indexed player,\n        uint256 indexed random,\n        uint256 totalWinAmount,\n        uint256 jackpotBalance,\n        uint256 bet,\n        uint256 winRate\n    );\n}\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {  return 0; }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"setMinContractBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"setMinBetForJackpot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBetForJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidates\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"option\",\"type\":\"bool\"}],\"name\":\"pauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTurnover\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"result\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwnerAddress\",\"type\":\"address\"},{\"name\":\"k\",\"type\":\"uint8\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sendOwnerDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"setMaxBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"setMinBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"play\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bet\",\"type\":\"uint256\"}],\"name\":\"checkSolvency\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPlayed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWinnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DSG_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"k\",\"type\":\"uint8\"}],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"secondOwner\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dividends\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Dividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"jackpot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Jackpot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PlaceBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"random\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalWinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackpotBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winRate\",\"type\":\"uint256\"}],\"name\":\"Result\",\"type\":\"event\"}]",
  "bytecode": "6080604052604051602080620016fe8339810160405251600b805433600160a060020a031991821617909155600c8054909116600160a060020a03831617905534600a81905561007890610062906103e864010000000061008181026113a21704565b6008549064010000000061120b6100a482021704565b600855506100bd565b60008080831161009057600080fd5b828481151561009b57fe5b04949350505050565b6000828201838110156100b657600080fd5b9392505050565b61163180620000cd6000396000f3006080604052600436106101745763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663025e7c278114610179578063040da8f4146101ad5780630d9332e2146101d45780631ec8d4ef146101ee5780632e5b21681461020657806330b1b62c1461021b5780633477ee2e146102305780634f53126a146102485780635c975abb14610262578063618e9f7c1461028b57806365372147146102a057806369d54554146102b55780636c9740c1146102ca5780636f9fb98a146102f15780637b1aa45f146103065780637f55d0d21461031b5780638608e58b14610330578063881eff1e1461035157806388ea41b91461036957806393e84cd9146103815780639619367d14610389578063997664d71461039e5780639e20b71c146103b3578063a06594d3146103cb578063a8fc32de146103e0578063b72481f8146103f5578063c1e1e5a91461040a578063d0e30db01461041f578063fb48625014610427575b600080fd5b34801561018557600080fd5b50610191600435610442565b60408051600160a060020a039092168252519081900360200190f35b3480156101b957600080fd5b506101c261045f565b60408051918252519081900360200190f35b3480156101e057600080fd5b506101ec600435610465565b005b3480156101fa57600080fd5b506101ec60043561049e565b34801561021257600080fd5b506101c26104d7565b34801561022757600080fd5b506101c26104dd565b34801561023c57600080fd5b506101916004356104e3565b34801561025457600080fd5b506101ec60043515156104f0565b34801561026e57600080fd5b50610277610537565b604080519115158252519081900360200190f35b34801561029757600080fd5b506101c2610540565b3480156102ac57600080fd5b506101ec610546565b3480156102c157600080fd5b506101c2610942565b3480156102d657600080fd5b506101ec600160a060020a036004351660ff60243516610948565b3480156102fd57600080fd5b506101c26109bd565b34801561031257600080fd5b506101c26109c2565b34801561032757600080fd5b506101c26109c8565b34801561033c57600080fd5b506101ec600160a060020a03600435166109ce565b34801561035d57600080fd5b506101ec600435610af9565b34801561037557600080fd5b506101ec600435610b32565b6101ec610b6b565b34801561039557600080fd5b506101c2610e3f565b3480156103aa57600080fd5b506101c2610e45565b3480156103bf57600080fd5b50610277600435610e4b565b3480156103d757600080fd5b506101c2610e8b565b3480156103ec57600080fd5b506101ec610e91565b34801561040157600080fd5b506101c2611022565b34801561041657600080fd5b50610191611028565b6101ec611040565b34801561043357600080fd5b506101ec60ff6004351661108c565b600b816002811061044f57fe5b0154600160a060020a0316905081565b60085481565b600b60000154600160a060020a031633148061048e5750600b60010154600160a060020a031633145b151561049957600080fd5b600655565b600b60000154600160a060020a03163314806104c75750600b60010154600160a060020a031633145b15156104d257600080fd5b600755565b60045481565b60075481565b600d816002811061044f57fe5b600b60000154600160a060020a03163314806105195750600b60010154600160a060020a031633145b151561052457600080fd5b600f805460ff1916911515919091179055565b600f5460ff1681565b60025481565b3360009081526010602052604081205481908190819060fa61056e438363ffffffff61110c16565b1015801561057c5750600081115b15610601576008543360008181526010602090815260408083206001015481518481529283019590955281810194909452606081019190915291516103e8927f2aa6b609655f46244355baf578242b92c0c4257df7e2b92964ce9fc133149c9c919081900360800190a33360009081526010602052604081208181556001015561093b565b32331461060d57600080fd5b3360009081526010602052604090205440151561069a576040805160e560020a62461bcd02815260206004820152603e60248201527f596f75722074696d6520746f2064657465726d696e652074686520726573756c60448201527f742068617320636f6d65206f7574206f72206e6f742079657420636f6d650000606482015290519081900360840190fd5b3360009081526010602052604090206001015494506106ba6103e861112a565b9250600091506106ca83866111d1565b15610740576103e891506106f9856106ed6008548761120b90919063ffffffff16565b9063ffffffff61120b16565b60085460408051918252426020830152805192965033927f256609b3631a3103eba398fc72e575f7cc48472c00621c0a8d3dc8611cddd5fb9281900390910190a260006008555b61074983611224565b156107655760649150610762848663ffffffff61120b16565b93505b61076e836112cc565b156107ab57609691506107a861079b606461078f888663ffffffff61137416565b9063ffffffff6113a216565b859063ffffffff61120b16565b93505b6107b4836113c5565b156107d85760c891506107d561079b606461078f888663ffffffff61137416565b93505b6107e18361142f565b156108055760fa915061080261079b606461078f888663ffffffff61137416565b93505b61080e836114fb565b156108335761012c915061083061079b606461078f888663ffffffff61137416565b93505b61083c836115c7565b15610861576101f4915061085e61079b606461078f888663ffffffff61137416565b93505b60008411156108af57604051339085156108fc029086906000818181858888f19350505050158015610897573d6000803e3d6000fd5b506001546108ab908563ffffffff61120b16565b6001555b6108d36108c4866103e863ffffffff6113a216565b6008549063ffffffff61120b16565b6008908155336000818152601060209081526040808320838155600101929092559254815188815293840152828101889052606083018590525185927f2aa6b609655f46244355baf578242b92c0c4257df7e2b92964ce9fc133149c9c919081900360800190a35b5050505050565b60065481565b600b60000154600160a060020a03163314806109715750600b60010154600160a060020a031633145b151561097c57600080fd5b81600d60ff83166002811061098d57fe5b01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555050565b303190565b600a5481565b60095481565b6000600b810154600160a060020a03163314806109f85750600b60010154600160a060020a031633145b1515610a0357600080fd5b600f5460ff161515600114610a62576040805160e560020a62461bcd02815260206004820152601460248201527f47616d6520776173206e6f742073746f70706564000000000000000000000000604482015290519081900360640190fd5b610a6a6109bd565b600a549091508110610ab357600a54604051600160a060020a0384169180156108fc02916000818181858888f19350505050158015610aad573d6000803e3d6000fd5b50610aeb565b604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610ae9573d6000803e3d6000fd5b505b505060006008819055600a55565b600b60000154600160a060020a0316331480610b225750600b60010154600160a060020a031633145b1515610b2d57600080fd5b600455565b600b60000154600160a060020a0316331480610b5b5750600b60010154600160a060020a031633145b1515610b6657600080fd5b600555565b3360009081526010602052604081205460fa610b8d438363ffffffff61110c16565b10158015610b9b5750600081115b15610c20576008543360008181526010602090815260408083206001015481518481529283019590955281810194909452606081019190915291516103e8927f2aa6b609655f46244355baf578242b92c0c4257df7e2b92964ce9fc133149c9c919081900360800190a333600090815260106020526040812081815560010155610e3b565b323314610c2c57600080fd5b349150610c3882610e4b565b1515610c8e576040805160e560020a62461bcd02815260206004820152601a60248201527f4e6f7420656e6f7567682045544820696e20636f6e7472616374000000000000604482015290519081900360640190fd5b600f5460ff1615610ce9576040805160e560020a62461bcd02815260206004820152601060248201527f47616d65207761732073746f7070656400000000000000000000000000000000604482015290519081900360640190fd5b6005548210158015610cfd57506004548211155b1515610d53576040805160e560020a62461bcd02815260206004820152601d60248201527f416d6f756e742073686f756c642062652077697468696e2072616e6765000000604482015290519081900360640190fd5b3360009081526010602052604090206001015415610dbb576040805160e560020a62461bcd02815260206004820152601460248201527f596f75206861766520616c726561647920626574000000000000000000000000604482015290519081900360640190fd5b33600090815260106020526040902060018101839055439055600254610de7908363ffffffff61120b16565b600255600354610dfe90600163ffffffff61120b16565b60035560408051838152426020820152815133927f474ad2f1ae3429f099ca4a1e5ed47134dfda2a7edfdd5eae37873d086667a912928290030190a25b5050565b60055481565b60005481565b600854600090610e6c906106ed606461078f866101f463ffffffff61137416565b610e746109bd565b1115610e8257506001610e86565b5060005b919050565b60035481565b6000806000600654610ea16109bd565b118015610eaf575060095442115b1515610f05576040805160e560020a62461bcd02815260206004820152601960248201527f596f752063616e6e6f742073656e64206469766964656e647300000000000000604482015290519081900360640190fd5b73696826c18a6bc9be4bbfe3c3a6bb9f5a693886879250610f246109bd565b9150610f3b6006548361110c90919063ffffffff16565b9050610f504262093a8063ffffffff61120b16565b600955600054610f66908263ffffffff61120b16565b60008190555082600160a060020a0316639e0bb35e826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b158015610fc357600080fd5b505af1158015610fd7573d6000803e3d6000fd5b50506040805186815260208101869052428183015290517ffac2f03c5230c97844f840b003856f39a2fc5a931281a1a4344bfc99986055e094509081900360600192509050a1505050565b60015481565b73696826c18a6bc9be4bbfe3c3a6bb9f5a6938868781565b600b60000154600160a060020a03163314806110695750600b60010154600160a060020a031633145b151561107457600080fd5b600a54611087903463ffffffff61120b16565b600a55565b600d60ff82166002811061109c57fe5b0154600160a060020a031633146110b257600080fd5b600d60ff8216600281106110c257fe5b0154600160a060020a0316600b60ff8316600281106110dd57fe5b01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905550565b6000808383111561111c57600080fd5b5050808203805b5092915050565b336000818152601060209081526040808320548151904081840181905281830195909552815180820383018152606090910191829052805193949386939192918291908401908083835b602083106111935780518252601f199092019160209182019101611174565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120925050508115156111c957fe5b069392505050565b600060075482101580156111e65750826103e7145b80156111f457506000600854115b1561120157506001611205565b5060005b92915050565b60008282018381101561121d57600080fd5b9392505050565b60008082101580156112365750601982105b8061124d57506064821015801561124d5750607d82105b1561125a57506001610e86565b610190821015801561126d57506101a982105b8061128657506101f48210158015611286575061020d82105b1561129357506001610e86565b61025882101580156112a6575061027182105b806112bf57506102bc82101580156112bf57506102d582105b15610e8257506001610e86565b6000601982101580156112df5750603282105b806112f65750607d82101580156112f65750609682105b1561130357506001610e86565b6101a9821015801561131657506101c282105b8061132f575061020d821015801561132f575061022682105b1561133c57506001610e86565b610271821015801561134f575061028a82105b806112bf57506102d582101580156112bf57506102ee821015610e8257506001610e86565b6000808315156113875760009150611123565b5082820282848281151561139757fe5b041461121d57600080fd5b6000808083116113b157600080fd5b82848115156113bc57fe5b04949350505050565b6000603282101580156113d85750604b82105b806113f1575061015e82101580156113f1575061017782105b8061140a575061028a821015801561140a57506102a382105b806112bf57506103b682101580156112bf57506103cf821015610e8257506001610e86565b6000604b82101580156114425750605082105b80611459575060af8210158015611459575060b482105b8061147257506101138210158015611472575061011882105b8061148b5750610177821015801561148b575061017c82105b806114a457506101db82101580156114a457506101e082105b806114bd575061023f82101580156114bd575061024482105b806114d657506102a382101580156114d657506102a882105b806112bf575061030782101580156112bf575061030c821015610e8257506001610e86565b60006050821015801561150e5750605382105b80611525575060b48210158015611525575060b782105b8061153e5750610118821015801561153e575061011b82105b80611557575061017c8210158015611557575061017f82105b8061157057506101e0821015801561157057506101e382105b8061158957506102448210158015611589575061024782105b806115a257506102a882101580156115a257506102ab82105b806112bf575061030c82101580156112bf575061030f821015610e8257506001610e86565b600081600c14806115d85750816016145b806115e35750816020145b806115ee575081602a145b806112bf57508160341415610e8257506001610e865600a165627a7a72305820a941666a80b1135e78093323ac51ef1ccd4e5dccf830bfca7239b723923b50080029000000000000000000000000cf768464a08cd22b698758b5fe0de6b6216a886b",
  "constructorArguments": "000000000000000000000000cf768464a08cd22b698758b5fe0de6b6216a886b"
}