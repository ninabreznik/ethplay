{
  "address": "0x096d7ce60278e623c0b5763a0d04fde844d2c537",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Billiontix",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-02\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\n \nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\n \ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n   \n  function transferOwnership(address newOwner) onlyOwner public{\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n\n\n\n/**\n * Interface for required functionality in the ERC721 standard\n * for non-fungible tokens.\n * Borrowed from Token Standard discussion board\n *\n * \n */\n \ncontract ERC721 {\n    // Function\n    function totalSupply() public view returns (uint256 _totalSupply);\n    function balanceOf(address _owner) public view returns (uint256 _balance);\n    function ownerOf(uint _tokenId) public view returns (address _owner);\n    function transfer(address _to, uint _tokenId) internal;\n    function implementsERC721() public view returns (bool _implementsERC721);\n\n  \n    function approve(address _to, uint _tokenId) internal;\n    function transferFrom(address _from, address _to, uint _tokenId) internal;\n\n   \n    // Events\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n}\n\n/**\n * Interface for optional functionality in the ERC721 standard\n * for non-fungible tokens.\n *\n *  \n * Borrowed in part from Token Standard discussion board\n */\n \ncontract DetailedERC721 is ERC721 {\n    function name() public view returns (string _name);\n    function symbol() public view returns (string _symbol);\n   // function tokenMetadata(uint _tokenId) public view returns (string _infoUrl);\n    function tokenOfOwnerByIndex(address _owner, uint _index) public view returns (uint _tokenId);\n}\n\n/**\n * @title NonFungibleToken\n *\n * Generic implementation for both required and optional functionality in\n * the ERC721 standard for non-fungible tokens.\n *\n * Borrowed in part from Token Standard discussion board\n */\n \ncontract NonFungibleToken is DetailedERC721 {\n    string public name;\n    string public symbol;\n\n    uint public numTokensTotal;\n    uint public currentTokenIdNumber;\n\n    mapping(uint => address) internal tokenIdToOwner;\n    mapping(uint => address) internal tokenIdNumber;\n    mapping(uint => address) internal tokenIdToApprovedAddress;\n   // mapping(uint => string) internal tokenIdToMetadata;\n    mapping(address => uint[]) internal ownerToTokensOwned;\n    mapping(uint => uint) internal tokenIdToOwnerArrayIndex;\n\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _tokenId\n    );\n\n    event Approval(\n        address indexed _owner,\n        address indexed _approved,\n        uint256 _tokenId\n    );\n\n    modifier onlyExtantToken(uint _tokenId) {\n        require(ownerOf(_tokenId) != address(0));\n        _;\n    }\n\n    function name()\n        public\n        view\n        returns (string _name)\n    {\n        return name;\n    }\n\n    function symbol()\n        public\n        view\n        returns (string _symbol)\n    {\n        return symbol;\n    }\n\n    function totalSupply()\n        public\n        view\n        returns (uint256 _totalSupply)\n    {\n        return numTokensTotal;\n    }\n    \n    function currentIDnumber()\n        public\n        view\n        returns (uint256 _tokenId)\n    {\n        return currentTokenIdNumber;\n    }\n\n    function balanceOf(address _owner)\n        public\n        view\n        returns (uint _balance)\n    {\n        return ownerToTokensOwned[_owner].length;\n    }\n\n    function ownerOf(uint _tokenId)\n        public\n        view\n        returns (address _owner)\n    {\n        return _ownerOf(_tokenId);\n    }\n    \n   /*  NOT USED\n    function tokenMetadata(uint _tokenId)\n        public\n        view\n        returns (string _infoUrl)\n    {\n        return tokenIdToMetadata[_tokenId];\n    }\n */\n    function approve(address _to, uint _tokenId)\n        internal\n        onlyExtantToken(_tokenId)\n    {\n        require(msg.sender == ownerOf(_tokenId));\n        require(msg.sender != _to);\n\n        if (_getApproved(_tokenId) != address(0) ||\n                _to != address(0)) {\n            _approve(_to, _tokenId);\n            Approval(msg.sender, _to, _tokenId);\n        }\n    }\n\n  \n    function transferFrom(address _from, address _to, uint _tokenId)\n        internal\n        onlyExtantToken(_tokenId)\n    {\n        require(getApproved(_tokenId) == msg.sender);\n        require(ownerOf(_tokenId) == _from);\n        require(_to != address(0));\n\n        _clearApprovalAndTransfer(_from, _to, _tokenId);\n\n        Approval(_from, 0, _tokenId);\n        Transfer(_from, _to, _tokenId);\n    }\n\n    function auctiontransfer(address _currentowner, address _to, uint _tokenId)\n        internal\n        onlyExtantToken(_tokenId)\n    {\n        require(ownerOf(_tokenId) == _currentowner);\n        require(_to != address(0));\n\n        _clearApprovalAndTransfer(_currentowner, _to, _tokenId);\n\n        Approval(_currentowner, 0, _tokenId);\n        Transfer(_currentowner, _to, _tokenId);\n    }\n   \n\n    function transfer(address _to, uint _tokenId)\n        internal \n        onlyExtantToken(_tokenId)\n    {\n        require(ownerOf(_tokenId) == msg.sender);\n        require(_to != address(0));\n\n        _clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n\n        Approval(msg.sender, 0, _tokenId);\n        Transfer(msg.sender, _to, _tokenId);\n    }\n\n    function tokenOfOwnerByIndex(address _owner, uint _index)\n        public\n        view\n        returns (uint _tokenId)\n    {\n        return _getOwnerTokenByIndex(_owner, _index);\n    }\n\n    function getOwnerTokens(address _owner)\n        public\n        view\n        returns (uint[] _tokenIds)\n    {\n        return _getOwnerTokens(_owner);\n    }\n\n    function implementsERC721()\n        public\n        view\n        returns (bool _implementsERC721)\n    {\n        return true;\n    }\n\n    function getApproved(uint _tokenId)\n        public\n        view\n        returns (address _approved)\n    {\n        return _getApproved(_tokenId);\n    }\n\n    function _clearApprovalAndTransfer(address _from, address _to, uint _tokenId)\n        internal\n    {\n        _clearTokenApproval(_tokenId);\n        _removeTokenFromOwnersList(_from, _tokenId);\n        _setTokenOwner(_tokenId, _to);\n        _addTokenToOwnersList(_to, _tokenId);\n    }\n\n    function _ownerOf(uint _tokenId)\n        internal\n        view\n        returns (address _owner)\n    {\n        return tokenIdToOwner[_tokenId];\n    }\n\n   \n    function _approve(address _to, uint _tokenId)\n        internal\n    {\n        tokenIdToApprovedAddress[_tokenId] = _to;\n    }\n\n    function _getApproved(uint _tokenId)\n        internal\n        view\n        returns (address _approved)\n    {\n        return tokenIdToApprovedAddress[_tokenId];\n    }\n\n    function _getOwnerTokens(address _owner)\n        internal\n        view\n        returns (uint[] _tokens)\n    {\n        return ownerToTokensOwned[_owner];\n    }\n\n    function _getOwnerTokenByIndex(address _owner, uint _index)\n        internal\n        view\n        returns (uint _tokens)\n    {\n        return ownerToTokensOwned[_owner][_index];\n    }\n\n\n    function _clearTokenApproval(uint _tokenId)\n        internal\n    {\n        tokenIdToApprovedAddress[_tokenId] = address(0);\n    }\n\n\n    function _setTokenOwner(uint _tokenId, address _owner)\n        internal\n    {\n        tokenIdToOwner[_tokenId] = _owner;\n    }\n\n    function _addTokenToOwnersList(address _owner, uint _tokenId)\n        internal\n    {\n        ownerToTokensOwned[_owner].push(_tokenId);\n        tokenIdToOwnerArrayIndex[_tokenId] =\n            ownerToTokensOwned[_owner].length - 1;\n    }\n\n    function _removeTokenFromOwnersList(address _owner, uint _tokenId)\n        internal\n    {\n        uint length = ownerToTokensOwned[_owner].length;\n        uint index = tokenIdToOwnerArrayIndex[_tokenId];\n        uint swapToken = ownerToTokensOwned[_owner][length - 1];\n\n        ownerToTokensOwned[_owner][index] = swapToken;\n        tokenIdToOwnerArrayIndex[swapToken] = index;\n\n        delete ownerToTokensOwned[_owner][length - 1];\n        ownerToTokensOwned[_owner].length--;\n    }\n\n/* Not Used\n    function _insertTokenMetadata(uint _tokenId, string _metadata)\n        internal\n    {\n        tokenIdToMetadata[_tokenId] = _metadata;\n    }\n   \n */  \n}\n\n/**\n * @title MintableNonFungibleToken\n *\n * Superset of the ERC721 standard that allows for the minting\n * of non-fungible tokens.\n * Borrowed from Token Standard discussion board\n */\n \ncontract MintableNonFungibleToken is NonFungibleToken {\n    using SafeMath for uint;\n\n    event Mint(address indexed _to, uint256 indexed _tokenId);\n\n    modifier onlyNonexistentToken(uint _tokenId) {\n        require(tokenIdToOwner[_tokenId] == address(0));\n        _;\n    }\n\n    function mint(address _owner, uint256 _tokenId)\n        internal\n        onlyNonexistentToken(_tokenId)\n    {\n        _setTokenOwner(_tokenId, _owner);\n        _addTokenToOwnersList(_owner, _tokenId);\n        //_insertTokenMetadata(_tokenId, _metadata);\n\n        numTokensTotal = numTokensTotal.add(1);\n\n        Mint(_owner, _tokenId);\n    }\n   \n    \n}\n\n/**\n * @title Auction\n *\n * BillionTix proprietary Auction \n * of BillionTix\n * Developed Exclusively for and by BillionTix Jan 31 2018\n */\n \ncontract Auction is NonFungibleToken, Ownable {\n            using SafeMath for uint256;\n\n    \n    struct ActiveAuctionsStruct {\n    address auctionOwner;\n    uint isBeingAuctioned; \n    //1=Being Auctioned 0=Not Being Auctioned\n    uint startingPrice;\n    uint buynowPrice;\n    uint highestBid;\n    uint numberofBids;\n    uint auctionEnd;\n    uint lastSellingPrice;\n    address winningBidder;\n    \n  }\n  \n  struct ActiveAuctionsByAddressStruct {\n      \n      uint tixNumberforSale;\n      \n  }\n  \n \n    mapping(uint => ActiveAuctionsStruct) private activeAuctionsStructs;\n    mapping(address => uint[]) private activeAuctionsByAddressStructs;\n\n    event LiveAuctionEvent (address auctionowner, uint indexed tixNumberforSale, uint indexed startingPrice, uint indexed buynowPrice, uint auctionLength);\n    event RunningAuctionsEvent (address auctionowner, uint indexed tixNumberforSale, uint indexed isBeingAuctioned, uint auctionLength);\n    event SuccessAuctionEvent (address auctionowner, address auctionwinner, uint indexed tixNumberforSale, uint indexed winningPrice);\n    event CanceledAuctionEvent (address auctionowner, address highestbidder, uint indexed tixNumberforSale, uint indexed highestbid);\n    event BuyNowEvent (address auctionowner, address ticketbuyer, uint indexed tixNumberforSale, uint indexed purchaseprice);\n    event LogBid (address auctionowner, address highestbidder, uint indexed tixNumberforSale, uint indexed highestbid, uint indexed bidnumber);\n    event LogRefund (address losingbidder, uint indexed tixNumberforSale, uint indexed refundedamount);\n    event CreationFailedEvent (address auctionrequestedby, uint indexed tixNumberforSale, string approvalstatus);\n    event BidFailedEvent (address bidder, uint tixNumberforSale, string bidfailure);\n\n    \n    address ticketownwer;\n    address public auctionleader;\n\n    string public approval = \"Auction Approved\";\n    string public notapproved = \"You Do Not Own This Ticket or Ticket is Already For Sale\";\n    string public bidfailure =\"Bid Failure\";\n   \n    uint public tixNumberforSale;\n    uint public leadingBid;\n    uint public startingPrice;\n    uint public winningPrice;\n    uint public buynowPrice;\n    uint public auctionLength;\n    uint256 public ownerCut;\n    uint256 public cancelCost;\n    \n    uint[] public runningauctions;\n \n    function Auction() public {\n        //Only called once when contract created.  Put initialization constructs here if needed\n    }\n    \n\n    function createAuction (uint _startprice, uint _buynowprice, uint _tixforsale, uint _auctiontime) public  {\n        \n        require (_startprice >= 0);\n        require (_buynowprice >= 0);\n        require (_tixforsale > 0);\n        require (_auctiontime > 0);\n        \n        address auctionowner = msg.sender;\n        tixNumberforSale = _tixforsale;\n        ticketownwer = ownerOf(tixNumberforSale);\n        auctionLength = _auctiontime;\n         \n        var auctionDetails = activeAuctionsStructs[tixNumberforSale];\n\n        uint auctionstatus = auctionDetails.isBeingAuctioned;\n\n\n        if (auctionowner == ticketownwer && auctionstatus != 1) {\n         \n         startingPrice = _startprice;\n         buynowPrice = _buynowprice;\n         auctionDetails.auctionOwner = auctionowner;\n         auctionDetails.startingPrice = startingPrice;\n         auctionDetails.buynowPrice = buynowPrice;\n         auctionDetails.highestBid = startingPrice;\n         auctionDetails.isBeingAuctioned = 1;\n         auctionDetails.numberofBids = 0;\n         auctionDetails.auctionEnd = now + auctionLength;\n         runningauctions.push(tixNumberforSale);\n\n     \n         activeAuctionsByAddressStructs[auctionowner].push(tixNumberforSale);\n         LiveAuctionEvent(auctionowner, tixNumberforSale, startingPrice, buynowPrice, auctionDetails.auctionEnd);\n\n       \n        } else {\n            \n        CreationFailedEvent(msg.sender, tixNumberforSale, notapproved);\n        revert();\n\n        }\n    \n    }\n   \n    function placeBid(uint _tixforsale) payable public{\n       \n\n      var auctionDetails = activeAuctionsStructs[_tixforsale];\n      uint auctionavailable = auctionDetails.isBeingAuctioned;\n      uint leadbid = auctionDetails.highestBid;\n      uint bidtotal = auctionDetails.numberofBids;\n      address auctionowner = auctionDetails.auctionOwner;\n      address leadingbidder = auctionDetails.winningBidder;\n      uint endofauction = auctionDetails.auctionEnd;\n      \n      require (now <= endofauction);\n      require (auctionavailable == 1);\n      require (msg.value > leadbid);\n      \n        if (msg.value > leadbid) {\n           \n            auctionDetails.winningBidder = msg.sender;\n            auctionDetails.highestBid = msg.value;\n            auctionDetails.numberofBids++;\n            uint bidnumber = auctionDetails.numberofBids;\n            \n             if (bidtotal > 0) {\n            returnPrevBid(leadingbidder, leadbid, _tixforsale);\n           }\n            LogBid(auctionowner, auctionDetails.winningBidder, _tixforsale, auctionDetails.highestBid, bidnumber);\n        }\n        else {\n            \n            BidFailedEvent(msg.sender, _tixforsale, bidfailure);\n            revert();\n            \n        }\n    \n    \n        \n    }\n   \n    function returnPrevBid(address _highestbidder, uint _leadbid, uint _tixnumberforsale) internal {\n      \n        if (_highestbidder != 0 && _leadbid > 0) {\n           \n            _highestbidder.transfer(_leadbid);\n            \n            LogRefund(_highestbidder, _tixnumberforsale, _leadbid);\n        \n        }\n    }\n    \n    function setOwnerCut(uint256 _ownercut) onlyOwner public {\n       \n       ownerCut = _ownercut;\n       \n       \n   }\n   \n   function setCostToCancel(uint256 _cancelcost) onlyOwner public {\n       \n       cancelCost = _cancelcost;\n       \n       \n   }\n   \n    function getCostToCancel() view public returns (uint256) {\n       \n       return cancelCost;\n       \n       \n   }\n    \n\n    //END AUCTION FUNCTION CAN BE CALLED AFTER AUCTION TIME IS UP BY EITHER SELLER OR WINNING PARTY\n    \n    function endAuction(uint _tixnumberforsale) public {\n        \n\n      var auctionDetails = activeAuctionsStructs[_tixnumberforsale];\n      uint auctionEnd = auctionDetails.auctionEnd;\n      address auctionowner = auctionDetails.auctionOwner;\n      address auctionwinner = auctionDetails.winningBidder;\n      uint256 winningBid = auctionDetails.highestBid;\n      uint numberofBids = auctionDetails.numberofBids;\n\n        require (now > auctionEnd);\n\n       if ((msg.sender == auctionowner || msg.sender == auctionwinner) && numberofBids > 0 && winningBid > 0) {\n          \n\n           uint256 ownersCut = winningBid * ownerCut / 10000;\n        \n           owner.transfer(ownersCut);\n           auctionowner.transfer(auctionDetails.highestBid - ownersCut);\n           auctiontransfer(auctionowner, auctionwinner, _tixnumberforsale);\n           auctionDetails.isBeingAuctioned = 0;\n           auctionDetails.auctionEnd = 0;\n           auctionDetails.numberofBids = 0;\n           auctionDetails.highestBid = 0;\n           auctionDetails.buynowPrice = 0;\n           auctionDetails.startingPrice = 0;\n           removeByValue(_tixnumberforsale);\n           SuccessAuctionEvent(auctionowner, auctionwinner, _tixnumberforsale, winningBid);\n           \n       }\n       \n       if (msg.sender == auctionowner && numberofBids == 0) {\n          \n\n           auctionDetails.isBeingAuctioned = 0;\n           auctionDetails.auctionEnd = 0;\n           auctionDetails.numberofBids = 0;\n           auctionDetails.highestBid = 0;\n           auctionDetails.buynowPrice = 0;\n           auctionDetails.startingPrice = 0;\n\n           removeByValue(_tixnumberforsale);\n\n           SuccessAuctionEvent(auctionowner, auctionwinner, _tixnumberforsale, winningBid);\n           \n       }\n       \n       \n       \n       \n   }\n   \n   \n  \n\n   //CANCEL AUCTION CAN ONLY BE CALLED BY AUCTION OWNER - ALL MONEY RETURNED TO HIGHEST BIDDER. COSTS ETHER\n   \n   function cancelAuction(uint _tixnumberforsale) payable public {\n       \n            \n        var auctionDetails = activeAuctionsStructs[_tixnumberforsale];\n        uint auctionEnd = auctionDetails.auctionEnd;\n        uint numberofBids = auctionDetails.numberofBids;\n\n        require (now < auctionEnd);\n        \n        \n        \n         uint256 highestBid = auctionDetails.highestBid;\n         address auctionwinner = auctionDetails.winningBidder;\n         address auctionowner = auctionDetails.auctionOwner;\n         \n                if (msg.sender == auctionowner && msg.value >= cancelCost && numberofBids > 0) {\n\n        \n                        auctionwinner.transfer(highestBid);\n                        LogRefund(auctionwinner, _tixnumberforsale, highestBid);\n\n                        owner.transfer(cancelCost);\n                        \n                        auctionDetails.isBeingAuctioned = 0;\n                        auctionDetails.auctionEnd = 0;\n                        auctionDetails.numberofBids = 0;\n                        auctionDetails.highestBid = 0;\n                        auctionDetails.buynowPrice = 0;\n                        auctionDetails.startingPrice = 0;\n\n                        removeByValue(_tixnumberforsale);\n\n\n              CanceledAuctionEvent(auctionowner, auctionwinner, _tixnumberforsale, highestBid);\n\n                } \n                \n                if (msg.sender == auctionowner && msg.value >= cancelCost && numberofBids == 0) {\n\n                        owner.transfer(cancelCost);\n                        \n                        auctionDetails.isBeingAuctioned = 0;\n                        auctionDetails.auctionEnd = 0;\n                        auctionDetails.numberofBids = 0;\n                        auctionDetails.highestBid = 0;\n                        auctionDetails.buynowPrice = 0;\n                        auctionDetails.startingPrice = 0;\n\n                        removeByValue(_tixnumberforsale);\n\n\n              CanceledAuctionEvent(auctionowner, auctionwinner, _tixnumberforsale, highestBid);\n\n                }\n\n       \n   }\n   \n\n   //Buy Now Cancels Auction with no Penalty and returns all placed bids.  Contract takes cut of buy now price\n\n   function buyNow(uint _tixnumberforsale) payable public {\n       \n\n     var auctionDetails = activeAuctionsStructs[_tixnumberforsale];\n      uint auctionEnd = auctionDetails.auctionEnd;\n      address auctionowner = auctionDetails.auctionOwner;\n      address auctionlead = auctionDetails.winningBidder;\n      uint256 highestBid = auctionDetails.highestBid;\n      uint256 buynowprice = auctionDetails.buynowPrice;\n      \n      uint256 buynowcut = ownerCut;\n    \n      uint256 buynowownersCut = buynowPrice * buynowcut / 10000;\n\n\n      require(buynowprice > 0);\n      require(now < auctionEnd);\n        \n      if (msg.value == buynowPrice) {\n          \n\n          auctionowner.transfer(buynowPrice - buynowownersCut);\n          owner.transfer(buynowownersCut);\n         \n         \n          auctiontransfer(auctionowner, msg.sender, _tixnumberforsale);\n          auctionDetails.isBeingAuctioned = 0;\n          auctionDetails.auctionEnd = 0;\n          auctionDetails.numberofBids = 0;\n          auctionDetails.highestBid = 0;\n          auctionDetails.buynowPrice = 0;\n          auctionDetails.startingPrice = 0;\n\n          removeByValue(_tixnumberforsale);\n\n\n          BuyNowEvent(auctionowner, msg.sender, _tixnumberforsale, msg.value);\n          \n           if (auctionDetails.numberofBids > 0) {\n         \n          returnPrevBid(auctionlead, highestBid, _tixnumberforsale);\n\n         }\n          \n          \n      } else {\n          \n          revert();\n      }\n       \n   }\n   \n    function withdraw(address forwardAddress, uint amount) public onlyOwner {\n\n        forwardAddress.transfer(amount);\n\n}\n   \n \n    function getAuctionDetails(uint tixnumberforsale)\n        public\n        view\n        returns (uint _startingprice, uint _buynowprice, uint _numberofBids, uint _highestBid, uint _auctionEnd, address winningBidder, address _auctionOwner)\n    {\n        return (\n         activeAuctionsStructs[tixnumberforsale].startingPrice,\n         activeAuctionsStructs[tixnumberforsale].buynowPrice,\n         activeAuctionsStructs[tixnumberforsale].numberofBids,\n         activeAuctionsStructs[tixnumberforsale].highestBid,\n         activeAuctionsStructs[tixnumberforsale].auctionEnd,\n         activeAuctionsStructs[tixnumberforsale].winningBidder,\n         activeAuctionsStructs[tixnumberforsale].auctionOwner);\n         \n\n    }\n    \n    //Had to split due to stack limitations of Solidity - Pull back together in UI\n    \n    function getMoreAuctionDetails(uint tixnumberforsale) public view returns (uint _auctionstatus, uint _auctionEnd, address _auctionOwner) {\n        \n     return (\n                    \n                    activeAuctionsStructs[tixnumberforsale].isBeingAuctioned,\n                    activeAuctionsStructs[tixnumberforsale].auctionEnd,\n                    activeAuctionsStructs[tixnumberforsale].auctionOwner);\n        \n    }\n   \n    \n     function getOwnerAuctions(address _auctionowner)\n        public\n        view\n        returns (uint[] _auctions)\n    {\n       \n        return activeAuctionsByAddressStructs[_auctionowner];\n    }\n  \n    \n  //FUNCTIONS USED TO KEEP ACCURATE ARRAY OF LIVE AUCTIONS\n  \n  function find(uint value) view public returns(uint) {\n        uint i = 0;\n        while (runningauctions[i] != value) {\n            i++;\n        }\n        return i;\n    }\n\n    function removeByValue(uint value) internal {\n        uint i = find(value);\n        removeByIndex(i);\n    }\n\n    function removeByIndex(uint i) internal {\n        while (i<runningauctions.length-1) {\n            runningauctions[i] = runningauctions[i+1];\n            i++;\n        }\n        runningauctions.length--;\n    }\n\n    function getRunningAuctions() constant public returns(uint[]) {\n        return runningauctions;\n    }\n\n\n     function() payable public {}\n\n   \n}\n\n\n/**\n * @title BillionTix\n *\n * Main BillionTix Contract. Controls creation of BillionTix and  \n * selecting and Paying Giveaway Winners\n * Developed Exclusively for and by BillionTix Jan 31 2018\n */\n \ncontract Billiontix is MintableNonFungibleToken, Auction {\n   address owner;\n\n    string public name = 'BillionTix';\n    string public symbol = 'BTIX';\n   \n    string internal TenTimesEther = \"0.005 Ether\";\n    string internal OneHundredTimesEther = \"0.05 Ether\";\n    string internal OneThousandTimesEther = \"0.5 Ether\";\n    string internal TenThousandTimesEther = \"5 Ether\";\n    string internal OneHundredThousandTimesEther = \"50 Ether\";\n    string internal OneMillionTimesEther = \"500 Ether\";\n    string internal TenMillionTimesEther = \"5,000 Ether\";\n    string internal OneHundredMillionTimesEther = \"50,000 Ether\";\n    string internal OneBillionTimesEther = \"500,000 Ether\";\n   \n   \n    //SET THESE PRICES IN WEI\n    \n    uint256 public buyPrice =      500000000000000;\n    uint256 public buy5Price =    2500000000000000;\n    uint256 public buy10Price =   5000000000000000;\n    uint256 public buy20Price =  10000000000000000;\n    uint256 public buy50Price =  25000000000000000;\n    uint256 public buy100Price = 50000000000000000;\n\n    address public winner;\n  \n   //These are the supertix numbers. They will NOT CHANGE\n   \n    uint[] supertixarray = [10000,100000,500000,1000000,5000000,10000000,50000000,100000000,500000000,750000000];\n\n \n    mapping(address => uint256) public balanceOf; \n    \n    event PayoutEvent (uint indexed WinningNumber, address indexed _to, uint indexed value);\n    event WinningNumbersEvent (uint256 indexed WinningNumber, string AmountWon); \n    event WinnerPaidEvent (address indexed Winner, string AmountWon);\n    \n\n\n  function buy () payable public \n   onlyNonexistentToken(_tokenId)\n    {\n       \n       if ((msg.value) == buyPrice) {\n           \n           \n        uint256 _tokenId = numTokensTotal +1;\n        _setTokenOwner(_tokenId, msg.sender);\n        _addTokenToOwnersList(msg.sender, _tokenId);\n       // _insertTokenMetadata(_tokenId, _metadata);\n\n       numTokensTotal = numTokensTotal.add(1);\n\n        Mint(msg.sender, _tokenId);          \n\n       if (numTokensTotal > 1 && numTokensTotal < 10000000002) {\n       playDraw();\n       playDraw2();\n       supertixdraw();\n       } else { }\n\n\n       }\n       else {\n          \n       }\n       \n   }\n   \n   \n     function buy5 () payable public \n   onlyNonexistentToken(_tokenId)\n    {\n       for (uint i = 0; i < 5; i++) {\n       if ((msg.value) == buy5Price) {\n           \n        uint256 _tokenId = numTokensTotal +1;\n        _setTokenOwner(_tokenId, msg.sender);\n        _addTokenToOwnersList(msg.sender, _tokenId);\n       // _insertTokenMetadata(_tokenId, _metadata);\n\n       numTokensTotal = numTokensTotal.add(1);\n\n        Mint(msg.sender, _tokenId);          \n\n       if (numTokensTotal > 1 && numTokensTotal < 10000000002) {\n       playDraw();\n       playDraw2();\n       supertixdraw();\n\n       } else { \n       }\n       \n       }\n       else {\n       }\n       }\n   }\n\n\n  function buy10 () payable public \n   onlyNonexistentToken(_tokenId)\n    {\n       for (uint i = 0; i < 10; i++) {\n       if ((msg.value) == buy10Price) {\n           \n        uint256 _tokenId = numTokensTotal +1;\n        _setTokenOwner(_tokenId, msg.sender);\n        _addTokenToOwnersList(msg.sender, _tokenId);\n       // _insertTokenMetadata(_tokenId, _metadata);\n\n       numTokensTotal = numTokensTotal.add(1);\n\n        Mint(msg.sender, _tokenId);          \n\n       if (numTokensTotal > 1 && numTokensTotal < 10000000002) {\n       playDraw();\n       playDraw2();\n       supertixdraw();\n\n       } else { }\n       }\n       else {\n          \n       }\n       }\n   }\n      \n    function buy20 () payable public \n   onlyNonexistentToken(_tokenId)\n    {\n       for (uint i = 0; i < 20; i++) {\n       if ((msg.value) == buy20Price) {\n           \n        uint256 _tokenId = numTokensTotal +1;\n        _setTokenOwner(_tokenId, msg.sender);\n        _addTokenToOwnersList(msg.sender, _tokenId);\n       // _insertTokenMetadata(_tokenId, _metadata);\n\n       numTokensTotal = numTokensTotal.add(1);\n\n        Mint(msg.sender, _tokenId);          \n\n       if (numTokensTotal > 1 && numTokensTotal < 10000000002) {\n       playDraw();\n       playDraw2();\n        supertixdraw();\n        \n      } else { }\n       }\n       else {\n          \n       }\n       }\n   }\n   \n    function buy50 () payable public \n   onlyNonexistentToken(_tokenId)\n    {\n       for (uint i = 0; i < 50; i++) {\n       if ((msg.value) == buy50Price) {\n           \n         uint256 _tokenId = numTokensTotal +1;\n        _setTokenOwner(_tokenId, msg.sender);\n        _addTokenToOwnersList(msg.sender, _tokenId);\n       // _insertTokenMetadata(_tokenId, _metadata);\n\n       numTokensTotal = numTokensTotal.add(1);\n\n        Mint(msg.sender, _tokenId);          \n\n       if (numTokensTotal > 1 && numTokensTotal < 10000000002) {\n       playDraw();\n       playDraw2();\n        supertixdraw();\n   \n       } else { }\n       }\n       else {\n          \n       }\n       }\n   }\n   \n    function buy100 () payable public \n   onlyNonexistentToken(_tokenId)\n    {\n       for (uint i = 0; i < 100; i++) {\n       if ((msg.value) == buy100Price) {\n           \n        uint256 _tokenId = numTokensTotal +1;\n        _setTokenOwner(_tokenId, msg.sender);\n        _addTokenToOwnersList(msg.sender, _tokenId);\n       // _insertTokenMetadata(_tokenId, _metadata);\n\n       numTokensTotal = numTokensTotal.add(1);\n\n        Mint(msg.sender, _tokenId);          \n\n       if (numTokensTotal > 1 && numTokensTotal < 10000000002) {\n       playDraw();\n       playDraw2();\n       supertixdraw();\n\n       } else { }\n       }\n       else {\n          \n       }\n       }\n   }\n\n   \n function playDraw() internal returns (uint winningrandomNumber1, \n uint winningrandomNumber2, \n uint winningrandomNumber3, \n uint winningrandomNumber4, \n uint winningrandomNumber5)  {\n     \n\n     uint A = ((numTokensTotal / 1) % 10);\n     uint B = ((numTokensTotal / 10) % 10);\n     uint C = ((numTokensTotal / 100) % 10);\n     uint D = ((numTokensTotal / 1000) % 10);\n     uint E = ((numTokensTotal / 10000) % 10);\n     uint F = ((numTokensTotal / 100000) % 10);\n     uint G = ((numTokensTotal / 1000000) % 10);\n     uint H = ((numTokensTotal / 10000000) % 10);\n     uint I = ((numTokensTotal / 100000000) % 10);\n     uint J = ((numTokensTotal / 1000000000) % 10);\n\n  \n     \n       if (A == 1 && B == 0) {\n         \n         winningrandomNumber1 = (uint(keccak256(block.blockhash(block.number-1), numTokensTotal + 1))%100 + (1000000000 * J) + (100000000 * I) + (10000000 * H) + (1000000 * G) + (100000 * F) + (10000 * E) + (1000 * D) + (100 * (C - 1)));\n        \n         WinningNumbersEvent(winningrandomNumber1, TenTimesEther);\n         \n\n        // PAY OUT THE WINNER HERE AFTER LOGGING WINNING NUMBER IN EVENT Pays 10x Ether - 0.005\n\n         winner = ownerOf(winningrandomNumber1);\n         payWinner(winner, 5000000000000000); \n         \n         WinnerPaidEvent(winner, TenTimesEther);\n\n        \n     } else {\n         //Do stuff here with non winning ticket if needed\n     }\n\n if (A == 1 && B == 0 && C == 0) {\n         \n         winningrandomNumber2 = (uint(keccak256(block.blockhash(block.number-1), numTokensTotal + 2))%1000 + (1000000000 * J) + (100000000 * I) + (10000000 * H) + (1000000 * G) + (100000 * F) + (10000 * E) + (1000 * (D - 1)));\n             \n         WinningNumbersEvent(winningrandomNumber2, OneHundredTimesEther);\n\n\n        // PAY OUT THE WINNER HERE AFTER LOGGING WINNING NUMBER IN EVENT\n        // PAYS 100x Ether\n\n         winner = ownerOf(winningrandomNumber2);\n         payWinner(winner, 50000000000000000); \n         payBilliontixOwner();\n\n         WinnerPaidEvent(winner, OneHundredTimesEther);\n  \n     \n     } else {\n         //Do stuff here with non winning ticket if needed\n     }\n \n if (A == 1 && B == 0 && C == 0 && D == 0) {\n         \n          winningrandomNumber3 = (uint(keccak256(block.blockhash(block.number-1), numTokensTotal + 3))%10000 + (1000000000 * J) + (100000000 * I) + (10000000 * H) + (1000000 * G) + (100000 * F) + (10000 * (E - 1)));\n          WinningNumbersEvent(winningrandomNumber3, OneThousandTimesEther);\n\n\n      // PAY OUT THE WINNER HERE AFTER LOGGING WINNING NUMBER IN EVENT\n      // PAYS 1,000x Ether   \n      \n        winner = ownerOf(winningrandomNumber3);\n        payWinner(winner, 500000000000000000); \n        WinnerPaidEvent(winner, OneThousandTimesEther);\n\n\n     } else {\n         //Do stuff here with non winning ticket if needed\n     }\n\n     if (A == 1 && B == 0 && C == 0 && D == 0 && E == 0) {\n         \n          winningrandomNumber4 = (uint(keccak256(block.blockhash(block.number-1), numTokensTotal + 4))%100000 + (1000000000 * J) + (100000000 * I) + (10000000 * H) + (1000000 * G) + (100000 * (F - 1)));\n          WinningNumbersEvent(winningrandomNumber4, TenThousandTimesEther);\n\n\n      // PAY OUT THE WINNER HERE AFTER LOGGING WINNING NUMBER IN EVENT\n      // PAYS 10,000x Ether\n         \n         winner = ownerOf(winningrandomNumber4);\n         payWinner(winner, 5000000000000000000); \n         \n         WinnerPaidEvent(winner, TenThousandTimesEther);\n\n         \n     } else {\n         //Do stuff here with non winning ticket if needed\n     }\n     \n  if (A == 1 && B == 0 && C == 0 && D == 0 && E == 0 && F == 0) {\n         \n          winningrandomNumber5 = (uint(keccak256(block.blockhash(block.number-1), numTokensTotal + 5))%1000000 + (1000000000 * J) + (100000000 * I) + (10000000 * H) + (1000000 * (G - 1)));\n          WinningNumbersEvent(winningrandomNumber5, OneHundredThousandTimesEther);\n\n        // PAY OUT THE WINNER HERE AFTER LOGGING WINNING NUMBER IN EVENT\n        // PAYS 100,000x Ether\n\n         winner = ownerOf(winningrandomNumber5);\n         payWinner(winner, 50000000000000000000); \n         \n        WinnerPaidEvent(winner, OneHundredThousandTimesEther);\n\n         \n     } else {\n         //Do stuff here with non winning ticket if needed\n     }\n  \n     \n }\n \n function playDraw2() internal returns (\n uint winningrandomNumber6,\n uint winningrandomNumber7,\n uint winningrandomNumber8,\n uint billiondollarwinningNumber) {\n     \n\n     uint A = ((numTokensTotal / 1) % 10);\n     uint B = ((numTokensTotal / 10) % 10);\n     uint C = ((numTokensTotal / 100) % 10);\n     uint D = ((numTokensTotal / 1000) % 10);\n     uint E = ((numTokensTotal / 10000) % 10);\n     uint F = ((numTokensTotal / 100000) % 10);\n     uint G = ((numTokensTotal / 1000000) % 10);\n     uint H = ((numTokensTotal / 10000000) % 10);\n     uint I = ((numTokensTotal / 100000000) % 10);\n     uint J = ((numTokensTotal / 1000000000) % 10);\n     uint K = ((numTokensTotal / 10000000000) % 10);\n\n   \n  \n  if (A == 1 && B == 0 && C == 0 && D == 0 && E == 0 && F == 0 && G == 0) {\n         \n          winningrandomNumber6 = (uint(keccak256(block.blockhash(block.number-1), numTokensTotal + 6))%10000000 + (1000000000 * J) + (100000000 * I) + (10000000 * (H - 1)));\n          WinningNumbersEvent(winningrandomNumber6, OneMillionTimesEther);\n\n\n        // PAY OUT THE WINNER HERE AFTER LOGGING WINNING NUMBER IN EVENT\n        // PAYS 1,000,000x Ether\n\n         winner = ownerOf(winningrandomNumber6);\n         payWinner(winner, 500000000000000000000); \n         \n         WinnerPaidEvent(winner, OneMillionTimesEther);\n\n\n     } else {\n         //Do stuff here with non winning ticket if needed\n     }\n     \n      if (A == 1 && B == 0 && C == 0 && D == 0 && E == 0 && F == 0 && G == 0 && H == 0) {\n         \n         winningrandomNumber7 = (uint(keccak256(block.blockhash(block.number-1), numTokensTotal + 7))%100000000 + (1000000000 * J) + (100000000 * (I - 1)));\n         WinningNumbersEvent(winningrandomNumber7, TenMillionTimesEther);\n\n\n       // PAY OUT THE WINNER HERE AFTER LOGGING WINNING NUMBER IN EVENT\n       // PAYS 10,000,000x Ether\n        \n         winner = ownerOf(winningrandomNumber7);\n         payWinner(winner, 5000000000000000000000);\n         \n         WinnerPaidEvent(winner, TenMillionTimesEther);\n\n\n     \n     } else {\n         //Do stuff here with non winning ticket if needed\n     }\n \n     if (A == 1 && B == 0 && C == 0 && D == 0 && E == 0 && F == 0 && G == 0 && H == 0 && I == 0) {\n         \n          winningrandomNumber8 = (uint(keccak256(block.blockhash(block.number-1), numTokensTotal + 8))%1000000000 + (1000000000 * (J - 1)));\n          WinningNumbersEvent(winningrandomNumber8, OneHundredMillionTimesEther);\n\n        // PAY OUT THE WINNER HERE AFTER LOGGING WINNING NUMBER IN ARRAY\n        // PAYS 100,000,000x Ether\n        \n         winner = ownerOf(winningrandomNumber8);\n         payWinner(winner, 50000000000000000000000);\n         \n         WinnerPaidEvent(winner, OneHundredMillionTimesEther);\n\n        \n     } else {\n         //Do stuff here with non winning ticket if needed\n     }\n     \n     if (A == 1 && B == 0 && C == 0 && D == 0 && E == 0 && F == 0 && G == 0 && H == 0 && I == 0 && J == 0 && K == 1) {\n         \n         billiondollarwinningNumber = (uint(keccak256(block.blockhash(block.number-1), numTokensTotal + 9))%10000000000);\n         WinningNumbersEvent(billiondollarwinningNumber, OneBillionTimesEther);\n\n\n        //PAY OUT THE WINNER HERE AFTER LOGGING WINNING NUMBER IN EVENT\n        // PAYS 1,000,000,000x Ether\n    \n         winner = ownerOf(billiondollarwinningNumber);\n         payWinner(winner, 500000000000000000000000);\n         \n         WinnerPaidEvent(winner, OneBillionTimesEther);\n\n\n     } else {\n         //Do stuff here with non winning ticket if needed\n     }\n\n   \n     \n }\n \n function supertixdraw()  internal returns (uint winningsupertixnumber) {\n\n     uint A = ((numTokensTotal / 1) % 10);\n     uint B = ((numTokensTotal / 10) % 10);\n     uint C = ((numTokensTotal / 100) % 10);\n     uint D = ((numTokensTotal / 1000) % 10);\n     uint E = ((numTokensTotal / 10000) % 10);\n     uint F = ((numTokensTotal / 100000) % 10);\n     uint G = ((numTokensTotal / 1000000) % 10);\n     uint H = ((numTokensTotal / 10000000) % 10);\n     uint I = ((numTokensTotal / 100000000) % 10);\n     uint J = ((numTokensTotal / 1000000000) % 10);\n     \n   \n     \n      if (A == 1 && B == 0 && C == 0 && D == 0 && E == 0 && F == 0 && G == 0 && H == 0 && I == 0 && J==1) {\n          \n          //AT TICKET 1Billion and 1 Sold - Give Away 10Million times Ether to SuperTix holder\n          \n           uint randomsupertixnumber = (uint(keccak256(block.blockhash(block.number-1), numTokensTotal + 2))%10);\n\n           winningsupertixnumber = supertixarray[randomsupertixnumber];\n       \n           WinningNumbersEvent(winningsupertixnumber, TenMillionTimesEther);\n\n         winner = ownerOf(winningsupertixnumber);\n         payWinner(winner, 5000000000000000000000);\n         \n         WinnerPaidEvent(winner, TenMillionTimesEther);\n\n        \n     } else {\n         //Do stuff here with non winning ticket if needed\n     }\n     \n     \n }\n\n function Billiontix() public {\n      owner = msg.sender;\n   }\n  \n function transferEther(address forwardAddress, uint amount) public onlyOwner {\n\n        forwardAddress.transfer(amount);\n\n}\n \n\n  function payWinner(address winnerAddress, uint amount) internal {\n      \n        winnerAddress.transfer(amount);\n\n}\n \n function payBilliontixOwner () internal {\n     \n     //This is Called at Every 1000 Level Giveaway to Give BillionTix Their Cut in Wei\n     \n      owner.transfer(50000000000000000);\n     \n }\n \n\n   function kill() public onlyOwner {\n      if(msg.sender == owner)\n         selfdestruct(owner);\n   }\n   \n      function() payable public {}\n      \n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"buy20\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"forwardAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leadingBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"_approved\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tixnumberforsale\",\"type\":\"uint256\"}],\"name\":\"buyNow\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy10\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"_implementsERC721\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRunningAuctions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approval\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"find\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startprice\",\"type\":\"uint256\"},{\"name\":\"_buynowprice\",\"type\":\"uint256\"},{\"name\":\"_tixforsale\",\"type\":\"uint256\"},{\"name\":\"_auctiontime\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buy50Price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buy5Price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tixnumberforsale\",\"type\":\"uint256\"}],\"name\":\"getMoreAuctionDetails\",\"outputs\":[{\"name\":\"_auctionstatus\",\"type\":\"uint256\"},{\"name\":\"_auctionEnd\",\"type\":\"uint256\"},{\"name\":\"_auctionOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownercut\",\"type\":\"uint256\"}],\"name\":\"setOwnerCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buy100Price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCostToCancel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tixNumberforSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cancelCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tixnumberforsale\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tixforsale\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"notapproved\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cancelcost\",\"type\":\"uint256\"}],\"name\":\"setCostToCancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buynowPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numTokensTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tixnumberforsale\",\"type\":\"uint256\"}],\"name\":\"endAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buy20Price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentIDnumber\",\"outputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winningPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTokenIdNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy100\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnerTokens\",\"outputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy5\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy50\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buy10Price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_auctionowner\",\"type\":\"address\"}],\"name\":\"getOwnerAuctions\",\"outputs\":[{\"name\":\"_auctions\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionleader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bidfailure\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"runningauctions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tixnumberforsale\",\"type\":\"uint256\"}],\"name\":\"getAuctionDetails\",\"outputs\":[{\"name\":\"_startingprice\",\"type\":\"uint256\"},{\"name\":\"_buynowprice\",\"type\":\"uint256\"},{\"name\":\"_numberofBids\",\"type\":\"uint256\"},{\"name\":\"_highestBid\",\"type\":\"uint256\"},{\"name\":\"_auctionEnd\",\"type\":\"uint256\"},{\"name\":\"winningBidder\",\"type\":\"address\"},{\"name\":\"_auctionOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"forwardAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"WinningNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PayoutEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"WinningNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"AmountWon\",\"type\":\"string\"}],\"name\":\"WinningNumbersEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"Winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"AmountWon\",\"type\":\"string\"}],\"name\":\"WinnerPaidEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auctionowner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tixNumberforSale\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buynowPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"auctionLength\",\"type\":\"uint256\"}],\"name\":\"LiveAuctionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auctionowner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tixNumberforSale\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"isBeingAuctioned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"auctionLength\",\"type\":\"uint256\"}],\"name\":\"RunningAuctionsEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auctionowner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"auctionwinner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tixNumberforSale\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"winningPrice\",\"type\":\"uint256\"}],\"name\":\"SuccessAuctionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auctionowner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"highestbidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tixNumberforSale\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"highestbid\",\"type\":\"uint256\"}],\"name\":\"CanceledAuctionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auctionowner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ticketbuyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tixNumberforSale\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"purchaseprice\",\"type\":\"uint256\"}],\"name\":\"BuyNowEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auctionowner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"highestbidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tixNumberforSale\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"highestbid\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"bidnumber\",\"type\":\"uint256\"}],\"name\":\"LogBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"losingbidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tixNumberforSale\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"refundedamount\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auctionrequestedby\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tixNumberforSale\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"approvalstatus\",\"type\":\"string\"}],\"name\":\"CreationFailedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tixNumberforSale\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bidfailure\",\"type\":\"string\"}],\"name\":\"BidFailedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": ""
}