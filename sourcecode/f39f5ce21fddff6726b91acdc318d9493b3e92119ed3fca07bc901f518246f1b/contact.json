{
  "address": "0xd05d6f1656182da717fad7e4eeabab4ffd49f609",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EcosystemVesting",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-17\n*/\n\npragma solidity ^0.5.0;\n\n\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract EcosystemVesting is Ownable {\n    using SafeMath for uint256;\n\n    mapping (address => Holding) public holdings;\n\n    uint256 constant public Interval = 90 days;\n    uint256 constant public MaximumHoldingPeriod = 630 days;\n\n    uint256 constant public EcosystemCap = 54100000 ether; // 54.1 million tokens\n\n    uint256 public totalEcosystemTokensCommitted;\n\n    struct Holding {\n        uint256 tokensCommitted;\n        uint256 tokensRemaining;\n        uint256 startTime;\n    }\n\n    event EcosystemVestingInitialized(address _to, uint256 _tokens, uint256 _startTime);\n    event EcosystemVestingUpdated(address _to, uint256 _totalTokens, uint256 _startTime);\n\n    function claimTokens(address beneficiary)\n        external\n        onlyOwner\n        returns (uint256 tokensToClaim)\n    {\n        uint256 tokensRemaining = holdings[beneficiary].tokensRemaining;\n        uint256 startTime = holdings[beneficiary].startTime;\n        require(tokensRemaining > 0, \"All tokens claimed\");\n\n        if (now.sub(startTime) >= MaximumHoldingPeriod) {\n\n            tokensToClaim = tokensRemaining;\n            delete holdings[beneficiary];\n\n        } else {\n\n            uint256 permill = calculatePermillToRelease(startTime);\n\n            uint256 tokensNotToClaim = (holdings[beneficiary].tokensCommitted.mul(1000 - permill)).div(1000);\n            tokensToClaim = tokensRemaining.sub(tokensNotToClaim);\n            tokensRemaining = tokensNotToClaim;\n            holdings[beneficiary].tokensRemaining = tokensRemaining;\n\n        }\n    }\n\n    function calculatePermillToRelease(uint256 _startTime) internal view returns (uint256 permill) {\n        // how many 90 day periods have passed\n        uint periodsPassed = ((now.sub(_startTime)).div(Interval)).add(1);\n        permill = periodsPassed.mul(125); // 125 per thousand to be released every 90 days\n    }\n\n    function initializeVesting(\n        address _beneficiary,\n        uint256 _tokens,\n        uint256 _startTime\n    )\n        external\n        onlyOwner\n    {\n        totalEcosystemTokensCommitted = totalEcosystemTokensCommitted.add(_tokens);\n        require(totalEcosystemTokensCommitted <= EcosystemCap);\n\n        if (holdings[_beneficiary].tokensCommitted != 0) {\n            holdings[_beneficiary].tokensCommitted = holdings[_beneficiary].tokensCommitted.add(_tokens);\n            holdings[_beneficiary].tokensRemaining = holdings[_beneficiary].tokensRemaining.add(_tokens);\n\n            emit EcosystemVestingUpdated(\n                _beneficiary,\n                holdings[_beneficiary].tokensRemaining,\n                holdings[_beneficiary].startTime\n            );\n\n        } else {\n            holdings[_beneficiary] = Holding(\n                _tokens,\n                _tokens,\n                _startTime\n            );\n\n            emit EcosystemVestingInitialized(_beneficiary, _tokens, _startTime);\n        }\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"MaximumHoldingPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEcosystemTokensCommitted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EcosystemCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Interval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"initializeVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holdings\",\"outputs\":[{\"name\":\"tokensCommitted\",\"type\":\"uint256\"},{\"name\":\"tokensRemaining\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[{\"name\":\"tokensToClaim\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"EcosystemVestingInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"EcosystemVestingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "6080604081905260008054600160a060020a0319163317808255600160a060020a0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36107f6806100576000396000f3fe6080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166311be2d6881146100b3578063165e3250146100da578063297855a8146100ef5780632b2ab7801461010457806348cdb45114610119578063715018a61461015a5780638da5cb5b1461016f5780638f32d59b146101a0578063dd3ced63146101c9578063df8de3e71461021a578063f2fde38b1461024d575b600080fd5b3480156100bf57600080fd5b506100c8610280565b60408051918252519081900360200190f35b3480156100e657600080fd5b506100c8610288565b3480156100fb57600080fd5b506100c861028e565b34801561011057600080fd5b506100c861029d565b34801561012557600080fd5b506101586004803603606081101561013c57600080fd5b50600160a060020a0381351690602081013590604001356102a4565b005b34801561016657600080fd5b50610158610457565b34801561017b57600080fd5b506101846104c1565b60408051600160a060020a039092168252519081900360200190f35b3480156101ac57600080fd5b506101b56104d0565b604080519115158252519081900360200190f35b3480156101d557600080fd5b506101fc600480360360208110156101ec57600080fd5b5035600160a060020a03166104e1565b60408051938452602084019290925282820152519081900360600190f35b34801561022657600080fd5b506100c86004803603602081101561023d57600080fd5b5035600160a060020a0316610501565b34801561025957600080fd5b506101586004803603602081101561027057600080fd5b5035600160a060020a0316610680565b63033e910081565b60025481565b6a2cc01ee0671b6aec80000081565b6276a70081565b6102ac6104d0565b15156102b757600080fd5b6002546102ca908363ffffffff61069f16565b60028190556a2cc01ee0671b6aec80000010156102e657600080fd5b600160a060020a038316600090815260016020526040902054156103c957600160a060020a03831660009081526001602052604090205461032d908363ffffffff61069f16565b600160a060020a0384166000908152600160208190526040909120918255015461035d908363ffffffff61069f16565b600160a060020a0384166000818152600160208181526040928390209182018590556002909101548251938452908301939093528181019290925290517f7de2c67df24adbe7bcc318c2a9474247889d37c1b67c68932f0d5ff7101bf6979181900360600190a1610452565b60408051606081810183528482526020808301868152838501868152600160a060020a038916600081815260018086529088902096518755925192860192909255516002909401939093558351928352820185905281830184905291517f5c209a1ca10f840f261d548a332e2ec343d1888bc4dc6ccd8cf1ef62073543f8929181900390910190a15b505050565b61045f6104d0565b151561046a57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031690565b600054600160a060020a0316331490565b600160208190526000918252604090912080549181015460029091015483565b600061050b6104d0565b151561051657600080fd5b600160a060020a0382166000908152600160208190526040822090810154600290910154909182116105a957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f416c6c20746f6b656e7320636c61696d65640000000000000000000000000000604482015290519081900360640190fd5b63033e91006105be428363ffffffff6106b716565b106105f457600160a060020a03841660009081526001602081905260408220828155908101829055600201559091508190610679565b60006105ff826106c9565b600160a060020a03861660009081526001602052604081205491925090610642906103e8906106369085830363ffffffff61070e16565b9063ffffffff61073616565b9050610654848263ffffffff6106b716565b600160a060020a03871660009081526001602081905260409091200182905594509250505b5050919050565b6106886104d0565b151561069357600080fd5b61069c8161074d565b50565b6000828201838110156106ae57fe5b90505b92915050565b6000828211156106c357fe5b50900390565b6000806106f460016106e86276a700610636428863ffffffff6106b716565b9063ffffffff61069f16565b905061070781607d63ffffffff61070e16565b9392505050565b600082151561071f575060006106b1565b82820282848281151561072e57fe5b04146106ae57fe5b600080828481151561074457fe5b04949350505050565b600160a060020a038116151561076257600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a72305820f20a7d75c8cccb643a0ef628003a2f5a1f81dee33de3d9504427e3531fdb09400029"
}