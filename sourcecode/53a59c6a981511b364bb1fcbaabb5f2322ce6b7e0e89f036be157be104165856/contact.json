{
  "address": "0x749aba9e082ccb185d1ef88fa514339e3c3368d3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NokuConsumptionPlan",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-24\n*/\n\npragma solidity ^0.4.23;\n\n// File: contracts/NokuPricingPlan.sol\n\n/**\n* @dev The NokuPricingPlan contract defines the responsibilities of a Noku pricing plan.\n*/\ncontract NokuPricingPlan {\n    /**\n    * @dev Pay the fee for the service identified by the specified name.\n    * The fee amount shall already be approved by the client.\n    * @param serviceName The name of the target service.\n    * @param multiplier The multiplier of the base service fee to apply.\n    * @param client The client of the target service.\n    * @return true if fee has been paid.\n    */\n    function payFee(bytes32 serviceName, uint256 multiplier, address client) public returns(bool paid);\n\n    /**\n    * @dev Get the usage fee for the service identified by the specified name.\n    * The returned fee amount shall be approved before using #payFee method.\n    * @param serviceName The name of the target service.\n    * @param multiplier The multiplier of the base service fee to apply.\n    * @return The amount to approve before really paying such fee.\n    */\n    function usageFee(bytes32 serviceName, uint256 multiplier) public view returns(uint fee);\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: contracts/NokuTokenBurner.sol\n\ncontract BurnableERC20 is ERC20 {\n    function burn(uint256 amount) public returns (bool burned);\n}\n\n/**\n* @dev The NokuTokenBurner contract has the responsibility to burn the configured fraction of received\n* ERC20-compliant tokens and distribute the remainder to the configured wallet.\n*/\ncontract NokuTokenBurner is Pausable {\n    using SafeMath for uint256;\n\n    event LogNokuTokenBurnerCreated(address indexed caller, address indexed wallet);\n    event LogBurningPercentageChanged(address indexed caller, uint256 indexed burningPercentage);\n\n    // The wallet receiving the unburnt tokens.\n    address public wallet;\n\n    // The percentage of tokens to burn after being received (range [0, 100])\n    uint256 public burningPercentage;\n\n    // The cumulative amount of burnt tokens.\n    uint256 public burnedTokens;\n\n    // The cumulative amount of tokens transferred back to the wallet.\n    uint256 public transferredTokens;\n\n    /**\n    * @dev Create a new NokuTokenBurner with predefined burning fraction.\n    * @param _wallet The wallet receiving the unburnt tokens.\n    */\n    constructor(address _wallet) public {\n        require(_wallet != address(0), \"_wallet is zero\");\n        \n        wallet = _wallet;\n        burningPercentage = 100;\n\n        emit LogNokuTokenBurnerCreated(msg.sender, _wallet);\n    }\n\n    /**\n    * @dev Change the percentage of tokens to burn after being received.\n    * @param _burningPercentage The percentage of tokens to be burnt.\n    */\n    function setBurningPercentage(uint256 _burningPercentage) public onlyOwner {\n        require(0 <= _burningPercentage && _burningPercentage <= 100, \"_burningPercentage not in [0, 100]\");\n        require(_burningPercentage != burningPercentage, \"_burningPercentage equal to current one\");\n        \n        burningPercentage = _burningPercentage;\n\n        emit LogBurningPercentageChanged(msg.sender, _burningPercentage);\n    }\n\n    /**\n    * @dev Called after burnable tokens has been transferred for burning.\n    * @param _token THe extended ERC20 interface supported by the sent tokens.\n    * @param _amount The amount of burnable tokens just arrived ready for burning.\n    */\n    function tokenReceived(address _token, uint256 _amount) public whenNotPaused {\n        require(_token != address(0), \"_token is zero\");\n        require(_amount > 0, \"_amount is zero\");\n\n        uint256 amountToBurn = _amount.mul(burningPercentage).div(100);\n        if (amountToBurn > 0) {\n            assert(BurnableERC20(_token).burn(amountToBurn));\n            \n            burnedTokens = burnedTokens.add(amountToBurn);\n        }\n\n        uint256 amountToTransfer = _amount.sub(amountToBurn);\n        if (amountToTransfer > 0) {\n            assert(BurnableERC20(_token).transfer(wallet, amountToTransfer));\n\n            transferredTokens = transferredTokens.add(amountToTransfer);\n        }\n    }\n}\n\n// File: contracts/NokuConsumptionPlan.sol\n\n/**\n* @dev The NokuConsumptionPlan contract implements a flexible pricing plan, manageable by the contract owner, which can be:\n* - extended by inserting a new service with its associated fee\n* - modified by updating an existing service fee\n* - reduced by removing an existing service with its associated fee\n* - queried to obtain the count of services\n* The service [name, fee] association is maintained using an index in order to make the data traversable.\n*/\ncontract NokuConsumptionPlan is NokuPricingPlan, Ownable {\n    using SafeMath for uint256;\n\n    event LogNokuConsumptionPlanCreated(address indexed caller, address indexed nokuMasterToken, address indexed tokenBurner);\n    event LogServiceAdded(bytes32 indexed serviceName, uint indexed index, uint indexed serviceFee);\n    event LogServiceChanged(bytes32 indexed serviceName, uint indexed index, uint indexed serviceFee);\n    event LogServiceRemoved(bytes32 indexed serviceName, uint indexed index);\n    \n    struct NokuService {\n        uint serviceFee;\n        uint index;\n    }\n\n    bytes32[] private serviceIndex;\n\n    mapping(bytes32 => NokuService) private services;\n\n    // The NOKU utility token used for paying fee\n    address public nokuMasterToken;\n\n    // The contract responsible for burning the NOKU tokens paid as service fee\n    address public tokenBurner;\n\n    constructor(address _nokuMasterToken, address _tokenBurner) public {\n        require(_nokuMasterToken != 0, \"_nokuMasterToken is zero\");\n        require(_tokenBurner != 0, \"_tokenBurner is zero\");\n\n        nokuMasterToken = _nokuMasterToken;\n        tokenBurner = _tokenBurner;\n\n        emit LogNokuConsumptionPlanCreated(msg.sender, _nokuMasterToken, _tokenBurner);\n    }\n\n    function isService(bytes32 _serviceName) public view returns(bool isIndeed) {\n        if (serviceIndex.length == 0)\n            return false;\n        else\n            return (serviceIndex[services[_serviceName].index] == _serviceName);\n    }\n\n    function addService(bytes32 _serviceName, uint _serviceFee) public onlyOwner returns(uint index) {\n        require(!isService(_serviceName), \"_serviceName already present\");\n\n        services[_serviceName].serviceFee = _serviceFee;\n        services[_serviceName].index = serviceIndex.push(_serviceName)-1;\n\n        emit LogServiceAdded(_serviceName, serviceIndex.length-1, _serviceFee);\n\n        return serviceIndex.length-1;\n    }\n\n    function removeService(bytes32 _serviceName) public onlyOwner returns(uint index) {\n        require(isService(_serviceName), \"_serviceName not present\");\n\n        uint rowToDelete = services[_serviceName].index;\n        bytes32 keyToMove = serviceIndex[serviceIndex.length-1];\n        serviceIndex[rowToDelete] = keyToMove;\n        services[keyToMove].index = rowToDelete; \n        serviceIndex.length--;\n\n        emit LogServiceRemoved(_serviceName,  rowToDelete);\n        emit LogServiceChanged(keyToMove, rowToDelete, services[keyToMove].serviceFee);\n\n        return rowToDelete;\n    }\n\n    function updateServiceFee(bytes32 _serviceName, uint _serviceFee) public onlyOwner returns(bool success) {\n        require(isService(_serviceName), \"_serviceName not present\");\n\n        services[_serviceName].serviceFee = _serviceFee;\n\n        emit LogServiceChanged(_serviceName, services[_serviceName].index, _serviceFee);\n\n        return true;\n    }\n\n    function payFee(bytes32 _serviceName, uint256 _amount, address _client) public returns(bool paid) {\n        require(isService(_serviceName), \"_serviceName not present\");\n        require(_amount != 0, \"_amount is zero\");\n        require(_client != 0, \"_client is zero\");\n\n        uint256 fee = usageFee(_serviceName, _amount);\n        if (fee == 0) return true;\n\n        require(ERC20(nokuMasterToken).transferFrom(_client, tokenBurner, fee), \"NOKU fee payment failed\");\n\n        NokuTokenBurner(tokenBurner).tokenReceived(nokuMasterToken, fee);\n\n        return true;\n    }\n\n    function usageFee(bytes32 _serviceName, uint256 _amount) public view returns(uint fee) {\n        // Assume fee are represented in 18-decimals notation\n        return _amount.mul(services[_serviceName].serviceFee).div(10**18);\n    }\n\n    function serviceCount() public view returns(uint count) {\n        return serviceIndex.length;\n    }\n\n    function serviceAtIndex(uint _index) public view returns(bytes32 serviceName) {\n        return serviceIndex[_index];\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051604080610c7b83398101604052805160209091015160008054600160a060020a03191633179055600160a060020a03821615156100b257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5f6e6f6b754d6173746572546f6b656e206973207a65726f0000000000000000604482015290519081900360640190fd5b600160a060020a038116151561012957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5f746f6b656e4275726e6572206973207a65726f000000000000000000000000604482015290519081900360640190fd5b60038054600160a060020a0319908116600160a060020a038581169182179093556004805490921692841692831790915560405133907f6a7704354035fa349b530710eb704c187fdc1726af102cb3c659fad28ca5f33a90600090a45050610ae5806101966000396000f3006080604052600436106100c45763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630623752681146100c95780632576a779146100f05780632996f9721461011f5780632b708fc914610150578063715018a61461016b5780638544023a146101825780638da5cb5b1461019757806399d80ed9146101ac5780639fc8ed76146101c7578063d30b5386146101df578063d3884c3f14610206578063f2fde38b1461021e578063fd2773991461023f575b600080fd5b3480156100d557600080fd5b506100de610257565b60408051918252519081900360200190f35b3480156100fc57600080fd5b5061010b60043560243561025e565b604080519115158252519081900360200190f35b34801561012b57600080fd5b5061013461031f565b60408051600160a060020a039092168252519081900360200190f35b34801561015c57600080fd5b506100de60043560243561032e565b34801561017757600080fd5b5061018061036f565b005b34801561018e57600080fd5b506101346103db565b3480156101a357600080fd5b506101346103ea565b3480156101b857600080fd5b506100de6004356024356103f9565b3480156101d357600080fd5b506100de6004356104f8565b3480156101eb57600080fd5b5061010b600435602435600160a060020a036044351661051c565b34801561021257600080fd5b506100de6004356107e5565b34801561022a57600080fd5b50610180600160a060020a036004351661094a565b34801561024b57600080fd5b5061010b60043561096d565b6001545b90565b60008054600160a060020a0316331461027657600080fd5b61027f8361096d565b15156102d5576040805160e560020a62461bcd02815260206004820152601860248201527f5f736572766963654e616d65206e6f742070726573656e740000000000000000604482015290519081900360640190fd5b600083815260026020526040808220848155600101549051849286917f6a74e1fc6de647ad5f190eee99b78cea5c6ad597bca1f3f1781b6d326a0d90189190a45060015b92915050565b600454600160a060020a031681565b60008281526002602052604081205461036890670de0b6b3a76400009061035c90859063ffffffff6109b716565b9063ffffffff6109e016565b9392505050565b600054600160a060020a0316331461038657600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600160a060020a031681565b600054600160a060020a031681565b60008054600160a060020a0316331461041157600080fd5b61041a8361096d565b1561046f576040805160e560020a62461bcd02815260206004820152601c60248201527f5f736572766963654e616d6520616c72656164792070726573656e7400000000604482015290519081900360640190fd5b6000838152600260205260408082208481556001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf68101889055918101919091555490518492600019929092019186917fd4d39b38c5a56bd29d76a3f1bc67f8a4a4f36f8b625e47ca00f9fe635686d0919190a4506001546000190192915050565b600060018281548110151561050957fe5b906000526020600020015490505b919050565b6000806105288561096d565b151561057e576040805160e560020a62461bcd02815260206004820152601860248201527f5f736572766963654e616d65206e6f742070726573656e740000000000000000604482015290519081900360640190fd5b8315156105d5576040805160e560020a62461bcd02815260206004820152600f60248201527f5f616d6f756e74206973207a65726f0000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a0383161515610635576040805160e560020a62461bcd02815260206004820152600f60248201527f5f636c69656e74206973207a65726f0000000000000000000000000000000000604482015290519081900360640190fd5b61063f858561032e565b905080151561065157600191506107dd565b60035460048054604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a03888116948201949094529183166024830152604482018590525191909216916323b872dd9160648083019260209291908290030181600087803b1580156106cd57600080fd5b505af11580156106e1573d6000803e3d6000fd5b505050506040513d60208110156106f757600080fd5b5051151561074f576040805160e560020a62461bcd02815260206004820152601760248201527f4e4f4b5520666565207061796d656e74206661696c6564000000000000000000604482015290519081900360640190fd5b60048054600354604080517fcae15051000000000000000000000000000000000000000000000000000000008152600160a060020a0392831694810194909452602484018590525191169163cae1505191604480830192600092919082900301818387803b1580156107c057600080fd5b505af11580156107d4573d6000803e3d6000fd5b50505050600191505b509392505050565b6000805481908190600160a060020a0316331461080157600080fd5b61080a8461096d565b1515610860576040805160e560020a62461bcd02815260206004820152601860248201527f5f736572766963654e616d65206e6f742070726573656e740000000000000000604482015290519081900360640190fd5b60008481526002602052604090206001908101548154909350600019810190811061088757fe5b90600052602060002001549050806001838154811015156108a457fe5b600091825260208083209091019290925582815260029091526040902060019081018390558054906108da906000198301610a72565b50604051829085907f5b151f1e60671500836e9aac474b06132793b3d7ed3643ad614324b0103d08b690600090a36000818152600260205260408082205490519091849184917f6a74e1fc6de647ad5f190eee99b78cea5c6ad597bca1f3f1781b6d326a0d901891a45092915050565b600054600160a060020a0316331461096157600080fd5b61096a816109f5565b50565b600154600090151561098157506000610517565b600082815260026020526040902060019081015481548492919081106109a357fe5b600091825260209091200154149050610517565b60008215156109c857506000610319565b508181028183828115156109d857fe5b041461031957fe5b600081838115156109ed57fe5b049392505050565b600160a060020a0381161515610a0a57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b815481835581811115610a9657600083815260209020610a96918101908301610a9b565b505050565b61025b91905b80821115610ab55760008155600101610aa1565b50905600a165627a7a723058206af1ed384b6c2f4158363cd1b269fb7c50b31ef9b382a108c39a2aec73eb67db00290000000000000000000000001fc52f1abade452dd4674477d4711951700b3d27000000000000000000000000faa48ba271b9324bef463b983593ad92f01250d9",
  "constructorArguments": "0000000000000000000000001fc52f1abade452dd4674477d4711951700b3d27000000000000000000000000faa48ba271b9324bef463b983593ad92f01250d9"
}