{
  "address": "0x73f9ea69ff02eec82ccb7e4226cbd4b25a14acf4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ARTIDDigitalSign",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-20\n*/\n\n//File: node_modules\\openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\npragma solidity ^0.4.21;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n//File: contracts\\ARTIDDigitalSign.sol\npragma solidity ^0.4.18;\n\n\n\ncontract ARTIDDigitalSign is Ownable{\n    \n    //archive of digital certificates, every certificate combine signer \n    //address and arts guid \n    mapping(bytes32 => Version[]) digitalCertificateArchive;\n    \n    \n    struct Version {\n        uint8 version;\n        bytes32 sign;\n        uint256 timestamp;\n    }\n\n    function Sign(string guid, string hash) public onlyWhitelisted {\n        address _signer = msg.sender;\n        string memory addressString = toString(_signer);\n        //combine signer with guid of arts to create an archive managed by the signer\n        string memory concatenatedData = strConcat(addressString,guid);\n        bytes32 hashed = keccak256(concatenatedData);\n        \n        uint8 version = 1;\n        Version[] memory versions = digitalCertificateArchive[hashed];\n        uint length =  versions.length;\n        for(uint8 i = 0; i < length; i++)\n        {\n            version = i+2;\n        }\n\n        bytes32 hashedSign = keccak256(hash); \n        Version memory v = Version(version,hashedSign,now);\n        digitalCertificateArchive[hashed].push(v);\n        \n    }\n\n    function GetSign(string guid, address signer) public view returns(bytes32 sign, uint8 signedVersion,uint256 timestamp){\n        address _signer = signer;\n        string memory addressString = toString(_signer);\n        //combine signer with guid of arts to create an archive managed by the signer\n        string memory concatenatedData = strConcat(addressString,guid);\n        bytes32 hashed = keccak256(concatenatedData);\n        uint length =  digitalCertificateArchive[hashed].length;\n        Version memory v = digitalCertificateArchive[hashed][length-1];\n        return (v.sign, v.version, v.timestamp);\n    }\n\n    function GetSignVersion(string guid, address signer, uint version) public view returns(bytes32 sign, uint8 signedVersion,uint256 timestamp){\n        address _signer = signer;\n        string memory addressString = toString(_signer);\n        //combine signer with guid of arts to create an archive managed by the signer\n        string memory concatenatedData = strConcat(addressString,guid);\n        bytes32 hashed = keccak256(concatenatedData);\n        Version memory v = digitalCertificateArchive[hashed][version-1];\n        return (v.sign, v.version, v.timestamp);\n    }\n\n    \n    \n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string){\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n        return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n    \n    function strConcat(string _a, string _b, string _c) internal returns (string) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n    \n    function strConcat(string _a, string _b) internal returns (string) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n    \n    function toString(address x) returns (string) {\n        bytes memory b = new bytes(20);\n        for (uint i = 0; i < 20; i++)\n            b[i] = byte(uint8(uint(x) / (2**(8*(19 - i)))));\n        return string(b);\n    }\n    \n    function bytes32ToString(bytes32 x) constant returns (string) {\n        bytes memory bytesString = new bytes(32);\n        uint charCount = 0;\n        for (uint j = 0; j < 32; j++) {\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n            if (char != 0) {\n                bytesString[charCount] = char;\n                charCount++;\n            }\n        }\n        bytes memory bytesStringTrimmed = new bytes(charCount);\n        for (j = 0; j < charCount; j++) {\n            bytesStringTrimmed[j] = bytesString[j];\n        }\n    return string(bytesStringTrimmed);\n}\n\n    mapping (address => bool) whitelist;\n\n  event WhitelistedAddressAdded(address addr);\n  event WhitelistedAddressRemoved(address addr);\n\n  /**\n   * @dev Throws if called by any account that's not whitelisted.\n   */\n  modifier onlyWhitelisted() {\n    whitelist[msg.sender] == true;\n    _;\n  }\n\n  /**\n   * @dev add an address to the whitelist\n   * @param addr address\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address addr)\n    onlyOwner\n    public\n  {\n    whitelist[addr] = true;\n    emit WhitelistedAddressAdded(addr);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function isInWhitelist(address addr)\n    public\n    view\n    returns (bool)\n  {\n    return whitelist[addr] == true;\n  }\n\n  /**\n   * @dev add addresses to the whitelist\n   * @param addrs addresses\n   * @return true if at least one address was added to the whitelist,\n   * false if all addresses were already in the whitelist\n   */\n  function addAddressesToWhitelist(address[] addrs)\n    onlyOwner\n    public\n  {\n    for (uint256 i = 0; i < addrs.length; i++) {\n      addAddressToWhitelist(addrs[i]);\n    }\n  }\n\n  /**\n   * @dev remove an address from the whitelist\n   * @param addr address\n   * @return true if the address was removed from the whitelist,\n   * false if the address wasn't in the whitelist in the first place\n   */\n  function removeAddressFromWhitelist(address addr)\n    onlyOwner\n    public\n  {\n    whitelist[addr] = false;\n    emit WhitelistedAddressRemoved(addr);\n  }\n\n  /**\n   * @dev remove addresses from the whitelist\n   * @param addrs addresses\n   * @return true if at least one address was removed from the whitelist,\n   * false if all addresses weren't in the whitelist in the first place\n   */\n  function removeAddressesFromWhitelist(address[] addrs)\n    onlyOwner\n    public\n  {\n    for (uint256 i = 0; i < addrs.length; i++) {\n      removeAddressFromWhitelist(addrs[i]);\n    }\n  }\n    \n}",
  "bytecode": "608060405260008054600160a060020a03191633179055610f63806100256000396000f3006080604052600436106100b95763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630350d08581146100be57806309fd82121461015757806324953eaa1461018c578063286dd3f5146101e15780635187a7d71461020257806356ca623e146102865780637b9417c81461031c5780638da5cb5b1461033d5780639201de551461036e578063e2ec6ec314610386578063e3f38dd6146103db578063f2fde38b14610445575b600080fd5b3480156100ca57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261015594369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506104669650505050505050565b005b34801561016357600080fd5b50610178600160a060020a03600435166106b5565b604080519115158252519081900360200190f35b34801561019857600080fd5b5060408051602060048035808201358381028086018501909652808552610155953695939460249493850192918291850190849080828437509497506106d89650505050505050565b3480156101ed57600080fd5b50610155600160a060020a0360043516610729565b34801561020e57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261026694369492936024939284019190819084018382808284375094975050509235600160a060020a0316935061079892505050565b6040805193845260ff909216602084015282820152519081900360600190f35b34801561029257600080fd5b506102a7600160a060020a0360043516610898565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102e15781810151838201526020016102c9565b50505050905090810190601f16801561030e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561032857600080fd5b50610155600160a060020a0360043516610927565b34801561034957600080fd5b50610352610999565b60408051600160a060020a039092168252519081900360200190f35b34801561037a57600080fd5b506102a76004356109a8565b34801561039257600080fd5b506040805160206004803580820135838102808601850190965280855261015595369593946024949385019291829185019084908082843750949750610aee9650505050505050565b3480156103e757600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261026694369492936024939284019190819084018382808284375094975050508335600160a060020a0316945050506020909101359050610b3b565b34801561045157600080fd5b50610155600160a060020a0360043516610be6565b60006060806000806060600080600061047d610f17565b336000819052600260205299506104938a610898565b985061049f898d610c7a565b9750876040518082805190602001908083835b602083106104d15780518252601f1990920191602091820191016104b2565b51815160209384036101000a60001901801990921691161790526040805192909401829003822060008181526001808452868220805480860287018601909852878652929f509d50929650945090915084015b828210156105735760008481526020908190206040805160608101825260038602909201805460ff16835260018082015484860152600290910154918301919091529083529092019101610524565b50505050945084519350600092505b838360ff16101561059e57600283019550600190920191610582565b8a6040518082805190602001908083835b602083106105ce5780518252601f1990920191602091820191016105af565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902091506060604051908101604052808760ff16815260200183600019168152602001428152509050600160008860001916600019168152602001908152602001600020819080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000160006101000a81548160ff021916908360ff1602179055506020820151816001019060001916905560408201518160020155505050505050505050505050505050565b600160a060020a031660009081526002602052604090205460ff16151560011490565b60008054600160a060020a031633146106f057600080fd5b5060005b81518110156107255761071d828281518110151561070e57fe5b90602001906020020151610729565b6001016106f4565b5050565b600054600160a060020a0316331461074057600080fd5b600160a060020a038116600081815260026020908152604091829020805460ff19169055815192835290517ff1abf01a1043b7c244d128e8595cf0c1d10743b022b03a02dffd8ca3bf729f5a9281900390910190a150565b6000806000806060806000806107ac610f17565b8995506107b886610898565b94506107c4858c610c7a565b9350836040518082805190602001908083835b602083106107f65780518252601f1990920191602091820191016107d7565b51815160001960209485036101000a81019182169119929092161790915260408051959093018590039094206000818152600190925291902080549198509096509350508401905083811061084757fe5b600091825260209182902060408051606081018252600393909302909101805460ff16808452600182015494840185905260029091015492909101829052919d919c509a5098505050505050505050565b60408051601480825281830190925260609182916000916020820161028080388339019050509150600090505b6014811015610920578060130360080260020a84600160a060020a03168115156108eb57fe5b0460f860020a02828281518110151561090057fe5b906020010190600160f860020a031916908160001a9053506001016108c5565b5092915050565b600054600160a060020a0316331461093e57600080fd5b600160a060020a038116600081815260026020908152604091829020805460ff19166001179055815192835290517fd1bba68c128cc3f427e5831b3c6f99f480b6efa6b9e80c757768f6124158cc3f9281900390910190a150565b600054600160a060020a031681565b6040805160208082528183019092526060918291600091829182918591908082016104008038833901905050945060009350600092505b6020831015610a54576008830260020a870291507fff00000000000000000000000000000000000000000000000000000000000000821615610a4957818585815181101515610a2a57fe5b906020010190600160f860020a031916908160001a9053506001909301925b6001909201916109df565b836040519080825280601f01601f191660200182016040528015610a82578160200160208202803883390190505b509050600092505b83831015610ae4578483815181101515610aa057fe5b90602001015160f860020a900460f860020a028184815181101515610ac157fe5b906020010190600160f860020a031916908160001a905350600190920191610a8a565b9695505050505050565b60008054600160a060020a03163314610b0657600080fd5b5060005b815181101561072557610b338282815181101515610b2457fe5b90602001906020020151610927565b600101610b0a565b6000806000806060806000610b4e610f17565b899450610b5a85610898565b9350610b66848c610c7a565b9250826040518082805190602001908083835b60208310610b985780518252601f199092019160209182019101610b79565b51815160001960209485036101000a81019182169119929092161790915260408051959093018590039094206000818152600190925291902080549197509450918d01925050811061084757fe5b600054600160a060020a03163314610bfd57600080fd5b600160a060020a0381161515610c1257600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b604080516020818101835260008083528351808301855281815284519283019094528152606092610caf928692869290610cb6565b9392505050565b6060806060806060806060806000808e98508d97508c96508b95508a94508451865188518a518c51010101016040519080825280601f01601f191660200182016040528015610d0f578160200160208202803883390190505b50935083925060009150600090505b8851811015610d7c578881815181101515610d3557fe5b90602001015160f860020a900460f860020a028383806001019450815181101515610d5c57fe5b906020010190600160f860020a031916908160001a905350600101610d1e565b5060005b8751811015610dde578781815181101515610d9757fe5b90602001015160f860020a900460f860020a028383806001019450815181101515610dbe57fe5b906020010190600160f860020a031916908160001a905350600101610d80565b5060005b8651811015610e40578681815181101515610df957fe5b90602001015160f860020a900460f860020a028383806001019450815181101515610e2057fe5b906020010190600160f860020a031916908160001a905350600101610de2565b5060005b8551811015610ea2578581815181101515610e5b57fe5b90602001015160f860020a900460f860020a028383806001019450815181101515610e8257fe5b906020010190600160f860020a031916908160001a905350600101610e44565b5060005b8451811015610f04578481815181101515610ebd57fe5b90602001015160f860020a900460f860020a028383806001019450815181101515610ee457fe5b906020010190600160f860020a031916908160001a905350600101610ea6565b50909d9c50505050505050505050505050565b6040805160608101825260008082526020820181905291810191909152905600a165627a7a723058208bf62c3f16255f78c3c15f3effdd01ea3cf5255bf2dbb8493b3918b2ad007e940029"
}