{
  "address": "0xf333b2ace992ac2bbd8798bf57bc65a06184afba",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "SandCoin Token",
  "contractName": "SNDToken",
  "compilerVersion": "v0.4.12+commit.194ff033",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-07-21\n*/\n\n/*\n * ERC20 interface\n * see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n  uint public totalSupply;\n  function balanceOf(address who) constant returns (uint);\n  function allowance(address owner, address spender) constant returns (uint);\n\n  function transfer(address to, uint value) returns (bool ok);\n  function transferFrom(address from, address to, uint value) returns (bool ok);\n  function approve(address spender, uint value) returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n  function safeMul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint a, uint b) internal returns (uint) {\n    assert(b > 0);\n    uint c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\n\n\n\n/**\n * Standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\n *\n * Based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, SafeMath {\n\n  /* Token supply got increased and a new owner received these tokens */\n  event Minted(address receiver, uint amount);\n\n  /* Actual balances of token holders */\n  mapping(address => uint) balances;\n\n  /* approve() allowances */\n  mapping (address => mapping (address => uint)) allowed;\n\n  /**\n   *\n   * Fix for the ERC20 short address attack\n   *\n   * http://vessenes.com/the-erc20-short-address-attack-explained/\n   */\n  modifier onlyPayloadSize(uint size) {\n     if(msg.data.length != size + 4) {\n       throw;\n     }\n     _;\n  }\n\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) returns (bool success) {\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n    balances[_to] = safeAdd(balances[_to], _value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n    uint _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because safeSub(_allowance, _value) will already throw if this condition is not met\n    // if (_value > _allowance) throw;\n\n    balances[_to] = safeAdd(balances[_to], _value);\n    balances[_from] = safeSub(balances[_from], _value);\n    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) constant returns (uint balance) {\n    return balances[_owner];\n  }\n\n  function approve(address _spender, uint _value) returns (bool success) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * Atomic increment of approved spending\n   *\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   */\n  function addApproval(address _spender, uint _addedValue)\n  onlyPayloadSize(2 * 32)\n  returns (bool success) {\n      uint oldValue = allowed[msg.sender][_spender];\n      allowed[msg.sender][_spender] = safeAdd(oldValue, _addedValue);\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n      return true;\n  }\n\n  /**\n   * Atomic decrement of approved spending.\n   *\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   */\n  function subApproval(address _spender, uint _subtractedValue)\n  onlyPayloadSize(2 * 32)\n  returns (bool success) {\n\n      uint oldVal = allowed[msg.sender][_spender];\n\n      if (_subtractedValue > oldVal) {\n          allowed[msg.sender][_spender] = 0;\n      } else {\n          allowed[msg.sender][_spender] = safeSub(oldVal, _subtractedValue);\n      }\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n      return true;\n  }\n\n}\n\n\n\ncontract BurnableToken is StandardToken {\n\n  address public constant BURN_ADDRESS = 0;\n\n  /** How many tokens we burned */\n  event Burned(address burner, uint burnedAmount);\n\n  /**\n   * Burn extra tokens from a balance.\n   *\n   */\n  function burn(uint burnAmount) {\n    address burner = msg.sender;\n    balances[burner] = safeSub(balances[burner], burnAmount);\n    totalSupply = safeSub(totalSupply, burnAmount);\n    Burned(burner, burnAmount);\n  }\n}\n\n\n\n\n\n/**\n * Upgrade agent interface inspired by Lunyr.\n *\n * Upgrade agent transfers tokens to a new contract.\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\n */\ncontract UpgradeAgent {\n\n  uint public originalSupply;\n\n  /** Interface marker */\n  function isUpgradeAgent() public constant returns (bool) {\n    return true;\n  }\n\n  function upgradeFrom(address _from, uint256 _value) public;\n\n}\n\n\n/**\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n *\n * First envisioned by Golem and Lunyr projects.\n */\ncontract UpgradeableToken is StandardToken {\n\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n  address public upgradeMaster;\n\n  /** The next contract where the tokens will be migrated. */\n  UpgradeAgent public upgradeAgent;\n\n  /** How many tokens we have upgraded by now. */\n  uint256 public totalUpgraded;\n\n  /**\n   * Upgrade states.\n   *\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\n   *\n   */\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n\n  /**\n   * Somebody has upgraded some of his tokens.\n   */\n  event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n\n  /**\n   * New upgrade agent available.\n   */\n  event UpgradeAgentSet(address agent);\n\n  /**\n   * Do not allow construction without upgrade master set.\n   */\n  function UpgradeableToken(address _upgradeMaster) {\n    upgradeMaster = _upgradeMaster;\n  }\n\n  /**\n   * Allow the token holder to upgrade some of their tokens to a new contract.\n   */\n  function upgrade(uint256 value) public {\n\n      UpgradeState state = getUpgradeState();\n      if(!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)) {\n        // Called in a bad state\n        throw;\n      }\n\n      // Validate input value.\n      if (value == 0) throw;\n\n      balances[msg.sender] = safeSub(balances[msg.sender], value);\n\n      // Take tokens out from circulation\n      totalSupply = safeSub(totalSupply, value);\n      totalUpgraded = safeAdd(totalUpgraded, value);\n\n      // Upgrade agent reissues the tokens\n      upgradeAgent.upgradeFrom(msg.sender, value);\n      Upgrade(msg.sender, upgradeAgent, value);\n  }\n\n  /**\n   * Set an upgrade agent that handles\n   */\n  function setUpgradeAgent(address agent) external {\n\n      if(!canUpgrade()) {\n        // The token is not yet in a state that we could think upgrading\n        throw;\n      }\n\n      if (agent == 0x0) throw;\n      // Only a master can designate the next agent\n      if (msg.sender != upgradeMaster) throw;\n      // Upgrade has already begun for an agent\n      if (getUpgradeState() == UpgradeState.Upgrading) throw;\n\n      upgradeAgent = UpgradeAgent(agent);\n\n      // Bad interface\n      if(!upgradeAgent.isUpgradeAgent()) throw;\n      // Make sure that token supplies match in source and target\n      if (upgradeAgent.originalSupply() != totalSupply) throw;\n\n      UpgradeAgentSet(upgradeAgent);\n  }\n\n  /**\n   * Get the state of the token upgrade.\n   */\n  function getUpgradeState() public constant returns(UpgradeState) {\n    if(!canUpgrade()) return UpgradeState.NotAllowed;\n    else if(address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n    else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n    else return UpgradeState.Upgrading;\n  }\n\n  /**\n   * Change the upgrade master.\n   *\n   * This allows us to set a new owner for the upgrade mechanism.\n   */\n  function setUpgradeMaster(address master) public {\n      if (master == 0x0) throw;\n      if (msg.sender != upgradeMaster) throw;\n      upgradeMaster = master;\n  }\n\n  /**\n   * Child contract can enable to provide the condition when the upgrade can begun.\n   */\n  function canUpgrade() public constant returns(bool) {\n     return true;\n  }\n\n}\n\n\ncontract SNDToken is BurnableToken, UpgradeableToken {\n\n  string public name;\n  string public symbol;\n  uint public decimals;\n  address public owner;\n\n  mapping(address => uint) previligedBalances;\n\n  function SNDToken(address _owner, string _name, string _symbol, uint _totalSupply, uint _decimals)  UpgradeableToken(_owner) {\n    name = _name;\n    symbol = _symbol;\n    totalSupply = _totalSupply;\n    decimals = _decimals;\n\n    // Allocate initial balance to the owner\n    balances[_owner] = _totalSupply;\n\n    // save the owner\n    owner = _owner;\n  }\n\n  // privileged transfer\n  function transferPrivileged(address _to, uint _value) onlyPayloadSize(2 * 32) returns (bool success) {\n    if (msg.sender != owner) throw;\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n    balances[_to] = safeAdd(balances[_to], _value);\n    previligedBalances[_to] = safeAdd(previligedBalances[_to], _value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  // get priveleged balance\n  function getPrivilegedBalance(address _owner) constant returns (uint balance) {\n    return previligedBalances[_owner];\n  }\n\n  // admin only can transfer from the privileged accounts\n  function transferFromPrivileged(address _from, address _to, uint _value) returns (bool success) {\n    if (msg.sender != owner) throw;\n\n    uint availablePrevilegedBalance = previligedBalances[_from];\n\n    balances[_from] = safeSub(balances[_from], _value);\n    balances[_to] = safeAdd(balances[_to], _value);\n    previligedBalances[_from] = safeSub(availablePrevilegedBalance, _value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferPrivileged\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromPrivileged\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpgradeState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getPrivilegedBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"addApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setUpgradeAgent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"subApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"master\",\"type\":\"address\"}],\"name\":\"setUpgradeMaster\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"burnedAmount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "606060405234156200001057600080fd5b604051620014d9380380620014d98339810160405280805191906020018051820191906020018051820191906020018051919060200180519150505b845b60038054600160a060020a031916600160a060020a0383161790555b50600684805162000080929160200190620000da565b50600783805162000096929160200190620000da565b5060008281556008829055600160a060020a0386168082526001602052604090912083905560098054600160a060020a03191690911790555b505050505062000184565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200011d57805160ff19168380011785556200014d565b828001600101855582156200014d579182015b828111156200014d57825182559160200191906001019062000130565b5b506200015c92915062000160565b5090565b6200018191905b808211156200015c576000815560010162000167565b5090565b90565b61134580620001946000396000f3006060604052361561012d5763ffffffff60e060020a60003504166306fdde038114610132578063095ea7b3146101bd57806318160ddd146101f35780631a017f3f1461021857806323b872dd1461024e578063313ce5671461028a57806342966c68146102af57806345977d03146102c75780635d3171d9146102df5780635de4ccb01461031b578063600440cb1461034a57806370a08231146103795780638444b391146103aa5780638da5cb5b146103e157806395d89b41146104105780639738968c1461049b578063a9059cbb146104c2578063ab7e9dca146104f8578063ac3cb72c14610529578063c752ff621461055f578063d7e7088a14610584578063dd62ed3e146105a5578063e2301d02146105dc578063fccc281314610612578063ffeb7d7514610641575b600080fd5b341561013d57600080fd5b610145610662565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101825780820151818401525b602001610169565b50505050905090810190601f1680156101af5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101c857600080fd5b6101df600160a060020a0360043516602435610700565b604051901515815260200160405180910390f35b34156101fe57600080fd5b6102066107a9565b60405190815260200160405180910390f35b341561022357600080fd5b6101df600160a060020a03600435166024356107af565b604051901515815260200160405180910390f35b341561025957600080fd5b6101df600160a060020a03600435811690602435166044356108af565b604051901515815260200160405180910390f35b341561029557600080fd5b6102066109a0565b60405190815260200160405180910390f35b34156102ba57600080fd5b6102c56004356109a6565b005b34156102d257600080fd5b6102c5600435610a3d565b005b34156102ea57600080fd5b6101df600160a060020a0360043581169060243516604435610b97565b604051901515815260200160405180910390f35b341561032657600080fd5b61032e610c8a565b604051600160a060020a03909116815260200160405180910390f35b341561035557600080fd5b61032e610c99565b604051600160a060020a03909116815260200160405180910390f35b341561038457600080fd5b610206600160a060020a0360043516610ca8565b60405190815260200160405180910390f35b34156103b557600080fd5b6103bd610cc7565b604051808260048111156103cd57fe5b60ff16815260200191505060405180910390f35b34156103ec57600080fd5b61032e610d14565b604051600160a060020a03909116815260200160405180910390f35b341561041b57600080fd5b610145610d23565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101825780820151818401525b602001610169565b50505050905090810190601f1680156101af5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104a657600080fd5b6101df610dc1565b604051901515815260200160405180910390f35b34156104cd57600080fd5b6101df600160a060020a0360043516602435610dc7565b604051901515815260200160405180910390f35b341561050357600080fd5b610206600160a060020a0360043516610e7d565b60405190815260200160405180910390f35b341561053457600080fd5b6101df600160a060020a0360043516602435610e9c565b604051901515815260200160405180910390f35b341561056a57600080fd5b610206610f51565b60405190815260200160405180910390f35b341561058f57600080fd5b6102c5600160a060020a0360043516610f57565b005b34156105b057600080fd5b610206600160a060020a0360043581169060243516611110565b60405190815260200160405180910390f35b34156105e757600080fd5b6101df600160a060020a036004351660243561113d565b604051901515815260200160405180910390f35b341561061d57600080fd5b61032e611247565b604051600160a060020a03909116815260200160405180910390f35b341561064c57600080fd5b6102c5600160a060020a036004351661124c565b005b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106f85780601f106106cd576101008083540402835291602001916106f8565b820191906000526020600020905b8154815290600101906020018083116106db57829003601f168201915b505050505081565b600081158015906107355750600160a060020a0333811660009081526002602090815260408083209387168352929052205415155b1561073f57600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b60006040366044146107c057600080fd5b60095433600160a060020a039081169116146107db57600080fd5b600160a060020a0333166000908152600160205260409020546107fe90846112a8565b600160a060020a03338116600090815260016020526040808220939093559086168152205461082d90846112c1565b600160a060020a038516600090815260016020908152604080832093909355600a9052205461085c90846112c1565b600160a060020a038086166000818152600a602052604090819020939093559133909116906000805160206112fa8339815191529086905190815260200160405180910390a3600191505b5b5092915050565b600160a060020a0380841660009081526002602090815260408083203385168452825280832054938616835260019091528120549091906108f090846112c1565b600160a060020a03808616600090815260016020526040808220939093559087168152205461091f90846112a8565b600160a060020a03861660009081526001602052604090205561094281846112a8565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616916000805160206112fa8339815191529086905190815260200160405180910390a3600191505b509392505050565b60085481565b33600160a060020a0381166000908152600160205260409020546109ca90836112a8565b600160a060020a038216600090815260016020526040812091909155546109f190836112a8565b6000557f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df78183604051600160a060020a03909216825260208201526040908101905180910390a15b5050565b6000610a47610cc7565b905060035b816004811115610a5857fe5b1480610a70575060045b816004811115610a6e57fe5b145b1515610a7b57600080fd5b811515610a8757600080fd5b600160a060020a033316600090815260016020526040902054610aaa90836112a8565b600160a060020a03331660009081526001602052604081209190915554610ad190836112a8565b600055600554610ae190836112c1565b600555600454600160a060020a031663753e88e5338460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610b3a57600080fd5b6102c65a03f11515610b4b57600080fd5b5050600454600160a060020a03908116915033167f7e5c344a8141a805725cb476f76c6953b842222b967edd1f78ddb6e8b3f397ac8460405190815260200160405180910390a35b5050565b600954600090819033600160a060020a03908116911614610bb757600080fd5b50600160a060020a0384166000908152600a6020908152604080832054600190925290912054610be790846112a8565b600160a060020a038087166000908152600160205260408082209390935590861681522054610c1690846112c1565b600160a060020a038516600090815260016020526040902055610c3981846112a8565b600160a060020a038087166000818152600a60205260409081902093909355908616916000805160206112fa8339815191529086905190815260200160405180910390a3600191505b509392505050565b600454600160a060020a031681565b600354600160a060020a031681565b600160a060020a0381166000908152600160205260409020545b919050565b6000610cd1610dc1565b1515610cdf57506001610d0e565b600454600160a060020a03161515610cf957506002610d0e565b6005541515610d0a57506003610d0e565b5060045b5b5b5b90565b600954600160a060020a031681565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106f85780601f106106cd576101008083540402835291602001916106f8565b820191906000526020600020905b8154815290600101906020018083116106db57829003601f168201915b505050505081565b60015b90565b6000604036604414610dd857600080fd5b600160a060020a033316600090815260016020526040902054610dfb90846112a8565b600160a060020a033381166000908152600160205260408082209390935590861681522054610e2a90846112c1565b600160a060020a0380861660008181526001602052604090819020939093559133909116906000805160206112fa8339815191529086905190815260200160405180910390a3600191505b5b5092915050565b600160a060020a0381166000908152600a60205260409020545b919050565b600080604036604414610eae57600080fd5b600160a060020a033381166000908152600260209081526040808320938916835292905220549150610ee082856112c1565b600160a060020a033381166000818152600260209081526040808320948b168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a3600192505b5b505092915050565b60055481565b610f5f610dc1565b1515610f6a57600080fd5b600160a060020a0381161515610f7f57600080fd5b60035433600160a060020a03908116911614610f9a57600080fd5b60045b610fa5610cc7565b6004811115610fb057fe5b1415610fbb57600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038381169190911791829055166361d3d7a66000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561102657600080fd5b6102c65a03f1151561103757600080fd5b50505060405180519050151561104c57600080fd5b600080546004549091600160a060020a0390911690634b2ba0dd90604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561109c57600080fd5b6102c65a03f115156110ad57600080fd5b505050604051805190501415156110c357600080fd5b6004547f7845d5aa74cc410e35571258d954f23b82276e160fe8c188fa80566580f279cc90600160a060020a0316604051600160a060020a03909116815260200160405180910390a15b50565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60008060403660441461114f57600080fd5b600160a060020a033381166000908152600260209081526040808320938916835292905220549150818411156111ac57600160a060020a0333811660009081526002602090815260408083209389168352929052908120556111dd565b610ee082856112a8565b600160a060020a033381166000908152600260209081526040808320938a16835292905220555b600160a060020a033381166000818152600260209081526040808320948a168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600192505b5b505092915050565b600081565b600160a060020a038116151561126157600080fd5b60035433600160a060020a0390811691161461127c57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b60006112b6838311156112e9565b508082035b92915050565b60008282016112de8482108015906112d95750838210155b6112e9565b8091505b5092915050565b80151561110d57600080fd5b5b505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582006eae4b92071804db942d13623d67a39ccc2606f874490da212b6a3feb0cc6b5002900000000000000000000000001949a773de41cb4ee6f632588ca18203e9d4dcd00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000033e1400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d534e4420546f6b656e20312e30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003534e440000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000001949a773de41cb4ee6f632588ca18203e9d4dcd00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000033e1400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d534e4420546f6b656e20312e30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003534e440000000000000000000000000000000000000000000000000000000000"
}