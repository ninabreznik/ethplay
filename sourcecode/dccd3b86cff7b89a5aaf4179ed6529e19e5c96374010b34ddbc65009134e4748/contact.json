{
  "address": "0xaa44a4443d095a8064104ed680ef5070fa72399c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LTLNN",
  "compilerVersion": "v0.5.6+commit.b259423e",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-26\n*/\n\npragma solidity ^0.5.6;\n\n\n/**\n * @title ERC20 interface\n */\ninterface ERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address payable private _owner;\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        _owner = msg.sender;\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns(address payable) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == msg.sender);\n        _;\n    }\n}\n\ncontract LTLNN is ERC20, Ownable {\n    using SafeMath for uint256;\n\n    string public name = \"Lawtest Token\";\n    string public symbol =\"LTLNN\";\n    uint256 public decimals = 2;\n\n    uint256 initialSupply = 5000000;    // 50000.00\n    uint256 saleBeginTime = 1553558400; // 26 March 2019 г., 0:00:00 GMT\n    uint256 saleEndTime = 1553644800;   // 26 March 2019 г., 0:00:00 GMT\n    uint256 tokensDestructTime = 1554076799;  // 31 March 2024 г., 23:59:59 GMT\n    mapping (address => uint256) private _balances;\n    uint256 private _totalSupply;\n    uint256 private _amountForSale;\n\n    event Mint(address indexed to, uint256 amount, uint256 amountForSale);\n    event TokensDestroyed();\n\n    constructor() public {\n        _balances[address(this)] = initialSupply;\n        _amountForSale = initialSupply;\n        _totalSupply = initialSupply;\n    }\n\n    /**\n\t\t* @dev Total number of tokens in existence\n\t\t*/\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function amountForSale() public view returns (uint256) {\n        return _amountForSale;\n    }\n\n    /**\n\t\t* @dev Gets the balance of the specified address.\n\t\t* @param owner The address to query the balance of.\n\t\t* @return An uint256 representing the amount owned by the passed address.\n\t\t*/\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n\t\t* @dev Transfer token for a specified address\n\t\t* @param to The address to transfer to.\n\t\t* @param amount The amount to be transferred.\n\t\t*/\n    function transfer(address to, uint256 amount) external returns (bool) {\n        require(block.timestamp < tokensDestructTime);\n        require(block.timestamp > saleEndTime);\n        _transfer(msg.sender, to, amount);\n        emit Transfer(msg.sender, to, amount);\n        return true;\n    }\n\n    /**\n\t\t * @dev External function that mints an amount of the token and assigns it to\n\t\t * an account. This encapsulates the modification of balances such that the\n\t\t * proper events are emitted.\n\t\t * @param account The account that will receive the created tokens.\n\t\t * @param amount The amount that will be created.\n\t\t */\n    function mint(address account, uint256 amount) external onlyOwner {\n        require(saleBeginTime < block.timestamp);\n        require(saleEndTime > block.timestamp);\n        _transfer(address(this),  account, amount);\n        emit Mint(account, amount, _amountForSale);\n    }\n\n    /**\n        *@dev This sends all the funds to owner's address and destroys the contract.\n    **/\n\n    function destructContract() external onlyOwner {\n        selfdestruct(owner());\n    }\n\n    /**\n        * @dev Internal function that transfers an amount of the token\n        * from `from` to `to`\n        * This encapsulates the modification of balances such that the\n        * proper events are emitted.\n        * @param from The account tokens are transferred from.\n        * @param to The account tokens are transferred to.\n        * @param amount The amount that will be created.\n    */\n    function _transfer(address from, address to, uint256 amount) internal {\n        require(amount <= _balances[from]);\n        require(to != address(0));\n        _balances[from] = _balances[from].sub(amount);\n        _balances[to] = _balances[to].add(amount);\n        if(saleEndTime > block.timestamp)\n            _amountForSale = _balances[address(this)];\n    }\n\n    function hasSaleBeginTimeCome() public view returns(bool) {\n        return (block.timestamp > saleBeginTime);\n    }\n\n    function hasSaleEndTimeCome() public view returns(bool) {\n        return (block.timestamp > saleEndTime);\n    }\n\n    function hasTokensDestructTimeCome() public view returns(bool) {\n        return (block.timestamp > tokensDestructTime);\n    }\n\n}",
  "bytecode": "60c0604052600d60808190527f4c61777465737420546f6b656e0000000000000000000000000000000000000060a090815261003e91600191906100e7565b506040805180820190915260058082527f4c544c4e4e0000000000000000000000000000000000000000000000000000006020909201918252610083916002916100e7565b506002600355624c4b40600455635c996b80600555635c9abd00600655635ca1547f6007553480156100b457600080fd5b50600080546001600160a01b0319163317815560045430825260086020526040909120819055600a819055600955610182565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012857805160ff1916838001178555610155565b82800160010185558215610155579182015b8281111561015557825182559160200191906001019061013a565b50610161929150610165565b5090565b61017f91905b80821115610161576000815560010161016b565b90565b6105e6806101916000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637d67092f1161008c5780639499e018116100665780639499e0181461021757806395d89b411461021f578063a9059cbb14610227578063be7a544c14610253576100cf565b80637d67092f146101e35780638473e55f146101eb5780638da5cb5b146101f3576100cf565b806306fdde03146100d457806318160ddd14610151578063313ce5671461016b57806340c10f191461017357806344480275146101a157806370a08231146101bd575b600080fd5b6100dc61025b565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101596102e8565b60408051918252519081900360200190f35b6101596102ee565b61019f6004803603604081101561018957600080fd5b506001600160a01b0381351690602001356102f4565b005b6101a961037e565b604080519115158252519081900360200190f35b610159600480360360208110156101d357600080fd5b50356001600160a01b0316610386565b6101a96103a1565b6101596103a9565b6101fb6103af565b604080516001600160a01b039092168252519081900360200190f35b61019f6103be565b6100dc6103e8565b6101a96004803603604081101561023d57600080fd5b506001600160a01b038135169060200135610440565b6101a96104b2565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102e05780601f106102b5576101008083540402835291602001916102e0565b820191906000526020600020905b8154815290600101906020018083116102c357829003601f168201915b505050505081565b60095490565b60035481565b6000546001600160a01b0316331461030b57600080fd5b426005541061031957600080fd5b426006541161032757600080fd5b6103323083836104ba565b600a5460408051838152602081019290925280516001600160a01b038516927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f92908290030190a25050565b600654421190565b6001600160a01b031660009081526008602052604090205490565b600554421190565b600a5490565b6000546001600160a01b031690565b6000546001600160a01b031633146103d557600080fd5b6103dd6103af565b6001600160a01b0316ff5b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156102e05780601f106102b5576101008083540402835291602001916102e0565b6000600754421061045057600080fd5b600654421161045e57600080fd5b6104693384846104ba565b6040805183815290516001600160a01b0385169133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b600754421190565b6001600160a01b0383166000908152600860205260409020548111156104df57600080fd5b6001600160a01b0382166104f257600080fd5b6001600160a01b03831660009081526008602052604090205461051b908263ffffffff61058c16565b6001600160a01b038085166000908152600860205260408082209390935590841681522054610550908263ffffffff6105a116565b6001600160a01b0383166000908152600860205260409020556006544210156105875730600090815260086020526040902054600a555b505050565b60008282111561059b57600080fd5b50900390565b6000828201838110156105b357600080fd5b939250505056fea165627a7a72305820bc329e6aace8a11fae5b383853dbda74b127d020b9e51c9e3f71a30706721f160029"
}