{
  "address": "0x67a9099f0008c35c61c00042cd9fb03684451097",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "GameStars",
  "contractName": "erc20GST",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-30\n*/\n\ncontract Token {\n\n    /// @return total amount of tokens\n    function totalSupply() constant returns (uint256 supply) {}\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) returns (bool success) {}\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokensНу \n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) returns (bool success) {}\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\n\n\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\ncontract StandardToken is Token {\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n            if (balances[msg.sender] >= _value && _value > 0) {\n                balances[msg.sender] -= _value;\n                balances[_to] += _value;\n                Transfer(msg.sender, _to, _value);\n            return true;\n        } \n        else\n         { return false; }\n\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    uint256 public totalSupply;\n}\n \n\n\ncontract erc20GST is StandardToken {\n    using SafeMath for uint256;\n    \n    uint startPreICO =1525338000;\n    uint stopPreICO =1525942800;\n    uint start1Week =1525942800;\n    uint stop1Week =1527411600;\n    uint start2Week =1527411600;\n    uint stop2Week =1528880400;\n    uint start3Week =1528880400;\n    uint stop3Week =1530349200;\n    address storeETH = 0xcaAc6e94dAEFC3BB81CA692a8AE9d5C73f54A024;\n    address admin =0x4eebcc25cD79CDA7845B6aDD99885348bcbFd04A;\n    address tokenSaleStore = 0x02d105f68AbF0Cb98416fD018a25230e80974AbF;\n    address tokenPreIcoStore = 0x1714bA62AEcD1D0fdc8c3b10e1d6076A97BA4CBc;\n    address tokenStore = 0x58258A4cF4514f6379D320ddC5BcB24A315df0d8;\n    uint256 public exchangeRates = 19657;\n    uint256 BonusPercent=0;\n    address storeAddress;\n    \n    \n    \n    function() external payable {\n        if(msg.value>=10000000000000000)\n        {\n            \n            if(now < stopPreICO  && now > startPreICO){\n                if(msg.value<1000000000000000000){\n                     throw;\n                }\n                if(msg.value>1000000000000000000 && msg.value <= 10000000000000000000){\n                    BonusPercent =  35;\n                }\n                if(msg.value>10000000000000000000 && msg.value <= 50000000000000000000){\n                    BonusPercent =  40;\n                }\n                 if(msg.value>50000000000000000000){\n                    BonusPercent = 50; \n                }\n                storeAddress = tokenPreIcoStore;\n            }\n            if(now > start1Week && now < stop1Week)\n            {\n                BonusPercent = 30; \n                storeAddress = tokenSaleStore;\n            }\n            if(now > start2Week && now < stop2Week)\n            {\n                BonusPercent = 20; \n                 storeAddress = tokenSaleStore;\n            }\n            if(now > start3Week && now < stop3Week)\n            {\n                BonusPercent = 10; \n                 storeAddress = tokenSaleStore;\n            }\n                uint256 value = msg.value.mul(exchangeRates);\n                uint256 bonus = value.div(100).mul(BonusPercent);\n                value = value.add(bonus);\n            if(balances[storeAddress] >= value && value > 0) {\n                storeETH.transfer(msg.value);\n                if(balances[storeAddress] >= value && value > 0) {\n                    balances[storeAddress] -= value;\n                    balances[msg.sender] += value;\n                    Transfer(storeAddress, msg.sender,  value);\n                }\n            }\n            else {\n                throw;\n            }\n            \n        }\n        else {\n              throw;\n        }\n    }\n    function setExchangeRates(uint256 _value){\n        if(msg.sender==admin){\n            if(_value >0){\n            exchangeRates = _value;\n            }\n        }\n    }\n\n\n    string public name;                   \n    uint8 public decimals;                \n    string public symbol;                 \n    string public version = 'gst.01';  \n\n    function erc20GST(\n        uint8 _decimalUnits \n        ) {\n        balances[tokenSaleStore] = 300000000000000000000000000;               // Give the creator all initial tokens\n        balances[tokenPreIcoStore] = 25000000000000000000000000;  \n        balances[tokenStore] = 175000000000000000000000000;     \n        totalSupply = 500000000000000000000000000;                        // Update total supply\n        name = \"GAMESTARS TOKEN\";                                   // Set the name for display purposes\n        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n        symbol = \"GST\";                               // Set the symbol for display purposes\n    }\n\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setExchangeRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_decimalUnits\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052635aeacf90600355635af40a10600455635af40a10600555635b0a7390600655635b0a7390600755635b20dd10600855635b20dd10600955635b374690600a5573caac6e94daefc3bb81ca692a8ae9d5c73f54a024600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550734eebcc25cd79cda7845b6add99885348bcbfd04a600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507302d105f68abf0cb98416fd018a25230e80974abf600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550731714ba62aecd1d0fdc8c3b10e1d6076a97ba4cbc600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507358258a4cf4514f6379d320ddc5bcb24a315df0d8600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614cc960105560006011556040805190810160405280600681526020017f6773742e30310000000000000000000000000000000000000000000000000000815250601690805190602001906200024592919062000490565b5034156200025257600080fd5b60405160208062001bbb833981016040528080519060200190919050506af8277896582678ac000000600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506a14adf4b7320334b9000000600080600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506a90c1b1025e16710f000000600080600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506b019d971e4fe8401e740000006002819055506040805190810160405280600f81526020017f47414d45535441525320544f4b454e0000000000000000000000000000000000815250601390805190602001906200041f92919062000490565b5080601460006101000a81548160ff021916908360ff1602179055506040805190810160405280600381526020017f4753540000000000000000000000000000000000000000000000000000000000815250601590805190602001906200048892919062000490565b50506200053f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620004d357805160ff191683800117855562000504565b8280016001018555821562000504579182015b8281111562000503578251825591602001919060010190620004e6565b5b50905062000513919062000517565b5090565b6200053c91905b80821115620005385760008160009055506001016200051e565b5090565b90565b61166c806200054f6000396000f3006060604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610662578063095ea7b3146106f05780631040762d1461074a57806318160ddd1461076d57806323b872dd14610796578063313ce5671461080f5780634ffcd9df1461083e57806354fd4d501461086757806370a08231146108f557806395d89b4114610942578063a9059cbb146109d0578063cae9ca5114610a2a578063dd62ed3e14610ac7575b600080662386f26fc100003410151561065957600454421080156100ea575060035442115b156101dd57670de0b6b3a764000034101561010457600080fd5b670de0b6b3a7640000341180156101235750678ac7230489e800003411155b156101315760236011819055505b678ac7230489e800003411801561015157506802b5e3af16b18800003411155b1561015f5760286011819055505b6802b5e3af16b18800003411156101795760326011819055505b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600554421180156101ef575060065442105b1561026057601e601181905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b60075442118015610272575060085442105b156102e3576014601181905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600954421180156102f55750600a5442105b1561036657600a601181905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b61037b60105434610b3390919063ffffffff16565b91506103a5601154610397606485610b6690919063ffffffff16565b610b3390919063ffffffff16565b90506103ba8183610b8190919063ffffffff16565b915081600080601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561042c5750600082115b1561064f57600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050151561049357600080fd5b81600080601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156105035750600082115b1561064a5781600080601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff16601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b610654565b600080fd5b61065e565b600080fd5b5050005b341561066d57600080fd5b610675610b9f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106b557808201518184015260208101905061069a565b50505050905090810190601f1680156106e25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156106fb57600080fd5b610730600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c3d565b604051808215151515815260200191505060405180910390f35b341561075557600080fd5b61076b6004808035906020019091905050610d2f565b005b341561077857600080fd5b610780610d9a565b6040518082815260200191505060405180910390f35b34156107a157600080fd5b6107f5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610da0565b604051808215151515815260200191505060405180910390f35b341561081a57600080fd5b610822611019565b604051808260ff1660ff16815260200191505060405180910390f35b341561084957600080fd5b61085161102c565b6040518082815260200191505060405180910390f35b341561087257600080fd5b61087a611032565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108ba57808201518184015260208101905061089f565b50505050905090810190601f1680156108e75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561090057600080fd5b61092c600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506110d0565b6040518082815260200191505060405180910390f35b341561094d57600080fd5b610955611118565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561099557808201518184015260208101905061097a565b50505050905090810190601f1680156109c25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156109db57600080fd5b610a10600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506111b6565b604051808215151515815260200191505060405180910390f35b3415610a3557600080fd5b610aad600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061131c565b604051808215151515815260200191505060405180910390f35b3415610ad257600080fd5b610b1d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506115b9565b6040518082815260200191505060405180910390f35b60008082840290506000841480610b545750828482811515610b5157fe5b04145b1515610b5c57fe5b8091505092915050565b6000808284811515610b7457fe5b0490508091505092915050565b6000808284019050838110151515610b9557fe5b8091505092915050565b60138054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c355780601f10610c0a57610100808354040283529160200191610c35565b820191906000526020600020905b815481529060010190602001808311610c1857829003601f168201915b505050505081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610d97576000811115610d9657806010819055505b5b50565b60025481565b6000816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610e6c575081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610e785750600082115b1561100d57816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611012565b600090505b9392505050565b601460009054906101000a900460ff1681565b60105481565b60168054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110c85780601f1061109d576101008083540402835291602001916110c8565b820191906000526020600020905b8154815290600101906020018083116110ab57829003601f168201915b505050505081565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60158054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111ae5780601f10611183576101008083540402835291602001916111ae565b820191906000526020600020905b81548152906001019060200180831161119157829003601f168201915b505050505081565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156112065750600082115b1561131157816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611316565b600090505b92915050565b600082600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff1660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e01905060405180910390207c01000000000000000000000000000000000000000000000000000000009004338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828051906020019080838360005b8381101561155d578082015181840152602081019050611542565b50505050905090810190601f16801561158a5780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000875af19250505015156115ae57600080fd5b600190509392505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050929150505600a165627a7a7230582005574a01370baeb1e8317ec73b47f0301afbfa91f7cf49bb12959db07800130d00290000000000000000000000000000000000000000000000000000000000000012",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000012"
}