{
  "address": "0x1a93e984005bc494b73b63ff223478d8af07950b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AOKPAY",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-11\n*/\n\npragma solidity ^0.4.16;\n/**\n * Copyright 2018 AOKPAY.\n */\n\ncontract SafeMath {\n  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b > 0);\n    uint256 c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\n\ninterface TokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n}\n\ncontract TokenERC20 is SafeMath{\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\taddress public owner;\n\n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOf;\n\tmapping (address => uint256) public freezeOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* This notifies clients about the amount burnt */\n    event Burn(address indexed from, uint256 value);\n\t\n\t/* This notifies clients about the amount frozen */\n    event Freeze(address indexed from, uint256 value);\n\t\n\t/* This notifies clients about the amount unfrozen */\n    event Unfreeze(address indexed from, uint256 value);\n    \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol\n        ) {\n        totalSupply = initialSupply * 10 ** uint256(decimalUnits);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;              // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n        decimals = decimalUnits;                            // Amount of decimals for display purposes\n\t\towner = msg.sender;\n    }\n\n    /* Send coins */\n    function transfer(address _to, uint256 _value) {\n        if (_to == 0x0) throw;                               // Prevent transfer to 0x0 address. Use burn() instead\n\t\tif (_value <= 0) throw; \n        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                     // Subtract from the sender\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n    }\n\n    /* Allow another contract to spend some tokens in your behalf */\n    function approve(address _spender, uint256 _value)\n        returns (bool success) {\n\t\tif (_value <= 0) throw; \n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n    \n    \n        /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns(bool) {\n        if (approve(_spender, _value)) {\n            TokenRecipient spender = TokenRecipient(_spender);\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n        return false;\n    }\n    \n    \n        /**\n     * approve should be called when allowances[_spender] == 0. To increment\n     * allowances value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        if (_addedValue <= 0) throw;\n        allowance[msg.sender][_spender] = SafeMath.safeAdd(allowance[msg.sender][_spender], _addedValue); \n        Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowance[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowance[msg.sender][_spender] = 0;\n        } else {\n            allowance[msg.sender][_spender] = oldValue - _subtractedValue;\n        }\n        Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n        return true;\n    }\n       \n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (_to == 0x0) throw;                                // Prevent transfer to 0x0 address. Use burn() instead\n\t\tif (_value <= 0) throw; \n        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n        if (_value > allowance[_from][msg.sender]) throw;     // Check allowance\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           // Subtract from the sender\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function burn(uint256 _value) returns (bool success) {\n        if (balanceOf[msg.sender] < _value) throw;            // Check if the sender has enough\n\t\tif (_value <= 0) throw; \n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n        totalSupply = SafeMath.safeSub(totalSupply,_value);                                // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n    \n        /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns(bool) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from]  = SafeMath.safeSub(balanceOf[_from],_value);     // Subtract from the targeted balance\n        \n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender],_value);             // Subtract from the sender's allowance\n        totalSupply = SafeMath.safeSub(totalSupply,_value);                            // Update totalSupply\n        Burn(_from, _value);\n        return true;\n    }\n\t\n\tfunction freeze(uint256 _value) returns (bool success) {\n        if (balanceOf[msg.sender] < _value) throw;            // Check if the sender has enough\n\t\tif (_value <= 0) throw; \n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);                                // Updates totalSupply\n        Freeze(msg.sender, _value);\n        return true;\n    }\n\t\n\tfunction unfreeze(uint256 _value) returns (bool success) {\n        if (freezeOf[msg.sender] < _value) throw;            // Check if the sender has enough\n\t\tif (_value <= 0) throw; \n        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);                      // Subtract from the sender\n\t\tbalanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\n        Unfreeze(msg.sender, _value);\n        return true;\n    }\n\t\n}\n\ncontract AOKPAY is TokenERC20 {\n\n    function AOKPAY() TokenERC20(10*10**8, \"AOKPAY\", 18 , \"AOK\") public {\n\n    }\n}",
  "bytecode": "606060405234156200001057600080fd5b5b633b9aca006040805190810160405280600681526020017f414f4b5041590000000000000000000000000000000000000000000000000000815250601260408051908101604052600381527f414f4b000000000000000000000000000000000000000000000000000000000060208201525b60ff8216600a0a84026003819055600160a060020a033316600090815260056020526040812091909155838051620000c09291602001906200010d565b506001818051620000d69291602001906200010d565b506002805460ff191660ff841617905560048054600160a060020a03191633600160a060020a03161790555b505050505b620001b7565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200015057805160ff191683800117855562000180565b8280016001018555821562000180579182015b828111156200018057825182559160200191906001019062000163565b5b506200018f92915062000193565b5090565b620001b491905b808211156200018f57600081556001016200019a565b5090565b90565b61110a80620001c76000396000f300606060405236156100f95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100fe578063095ea7b31461018957806318160ddd146101bf57806323b872dd146101e4578063313ce5671461022057806342966c681461024957806366188463146102735780636623fc46146102a957806370a08231146102d357806379cc6790146103045780638da5cb5b1461033a57806395d89b4114610369578063a9059cbb146103f4578063cae9ca5114610418578063cd4217c114610491578063d73dd623146104c2578063d7a78db8146104f8578063dd62ed3e14610522575b600080fd5b341561010957600080fd5b610111610559565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561014e5780820151818401525b602001610135565b50505050905090810190601f16801561017b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019457600080fd5b6101ab600160a060020a03600435166024356105f7565b604051901515815260200160405180910390f35b34156101ca57600080fd5b6101d2610637565b60405190815260200160405180910390f35b34156101ef57600080fd5b6101ab600160a060020a036004358116906024351660443561063d565b604051901515815260200160405180910390f35b341561022b57600080fd5b6102336107e3565b60405160ff909116815260200160405180910390f35b341561025457600080fd5b6101ab6004356107ec565b604051901515815260200160405180910390f35b341561027e57600080fd5b6101ab600160a060020a03600435166024356108b1565b604051901515815260200160405180910390f35b34156102b457600080fd5b6101ab6004356109a1565b604051901515815260200160405180910390f35b34156102de57600080fd5b6101d2600160a060020a0360043516610a81565b60405190815260200160405180910390f35b341561030f57600080fd5b6101ab600160a060020a0360043516602435610a93565b604051901515815260200160405180910390f35b341561034557600080fd5b61034d610bca565b604051600160a060020a03909116815260200160405180910390f35b341561037457600080fd5b610111610bd9565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561014e5780820151818401525b602001610135565b50505050905090810190601f16801561017b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103ff57600080fd5b610416600160a060020a0360043516602435610c77565b005b341561042357600080fd5b6101ab60048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610d9595505050505050565b604051901515815260200160405180910390f35b341561049c57600080fd5b6101d2600160a060020a0360043516610ed3565b60405190815260200160405180910390f35b34156104cd57600080fd5b6101ab600160a060020a0360043516602435610ee5565b604051901515815260200160405180910390f35b341561050357600080fd5b6101ab600435610f90565b604051901515815260200160405180910390f35b341561052d57600080fd5b6101d2600160a060020a0360043581169060243516611070565b60405190815260200160405180910390f35b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105ef5780601f106105c4576101008083540402835291602001916105ef565b820191906000526020600020905b8154815290600101906020018083116105d257829003601f168201915b505050505081565b600080821161060557600080fd5b50600160a060020a03338116600090815260076020908152604080832093861683529290522081905560015b92915050565b60035481565b6000600160a060020a038316151561065457600080fd5b6000821161066157600080fd5b600160a060020a0384166000908152600560205260409020548290101561068757600080fd5b600160a060020a03831660009081526005602052604090205482810110156106ae57600080fd5b600160a060020a03808516600090815260076020908152604080832033909416835292905220548211156106e157600080fd5b600160a060020a038416600090815260056020526040902054610704908361108d565b600160a060020a03808616600090815260056020526040808220939093559085168152205461073390836110a6565b600160a060020a03808516600090815260056020908152604080832094909455878316825260078152838220339093168252919091522054610775908361108d565b600160a060020a03808616600081815260076020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b9392505050565b60025460ff1681565b600160a060020a0333166000908152600560205260408120548290101561081257600080fd5b6000821161081f57600080fd5b600160a060020a033316600090815260056020526040902054610842908361108d565b600160a060020a033316600090815260056020526040902055600354610868908361108d565b600355600160a060020a0333167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25060015b919050565b600160a060020a0333811660009081526007602090815260408083209386168352929052908120548083111561090e57600160a060020a033381166000908152600760209081526040808320938816835292905290812055610939565b600160a060020a03338116600090815260076020908152604080832093881683529290522083820390555b600160a060020a0333811660008181526007602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b600160a060020a033316600090815260066020526040812054829010156109c757600080fd5b600082116109d457600080fd5b600160a060020a0333166000908152600660205260409020546109f7908361108d565b600160a060020a033316600090815260066020908152604080832093909355600590522054610a2690836110a6565b600160a060020a0333166000818152600560205260409081902092909255907f2cfce4af01bcb9d6cf6c84ee1b7c491100b8695368264146a94d71e10a63083f9084905190815260200160405180910390a25060015b919050565b60056020526000908152604090205481565b600160a060020a03821660009081526005602052604081205482901015610ab957600080fd5b600160a060020a0380841660009081526007602090815260408083203390941683529290522054821115610aec57600080fd5b600160a060020a038316600090815260056020526040902054610b0f908361108d565b600160a060020a0380851660009081526005602090815260408083209490945560078152838220339093168252919091522054610b4c908361108d565b600160a060020a0380851660009081526007602090815260408083203390941683529290522055600354610b80908361108d565b600355600160a060020a0383167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25060015b92915050565b600454600160a060020a031681565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105ef5780601f106105c4576101008083540402835291602001916105ef565b820191906000526020600020905b8154815290600101906020018083116105d257829003601f168201915b505050505081565b600160a060020a0382161515610c8c57600080fd5b60008111610c9957600080fd5b600160a060020a03331660009081526005602052604090205481901015610cbf57600080fd5b600160a060020a0382166000908152600560205260409020548181011015610ce657600080fd5b600160a060020a033316600090815260056020526040902054610d09908261108d565b600160a060020a033381166000908152600560205260408082209390935590841681522054610d3890826110a6565b600160a060020a0380841660008181526005602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35b5050565b600080610da285856105f7565b15610ec6575083600160a060020a038116638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610e5b5780820151818401525b602001610e42565b50505050905090810190601f168015610e885780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610ea957600080fd5b6102c65a03f11515610eba57600080fd5b50505060019150610ecb565b600091505b509392505050565b60066020526000908152604090205481565b6000808211610ef357600080fd5b600160a060020a03338116600090815260076020908152604080832093871683529290522054610f2390836110a6565b600160a060020a0333811660008181526007602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a35060015b92915050565b600160a060020a03331660009081526005602052604081205482901015610fb657600080fd5b60008211610fc357600080fd5b600160a060020a033316600090815260056020526040902054610fe6908361108d565b600160a060020a03331660009081526005602090815260408083209390935560069052205461101590836110a6565b600160a060020a0333166000818152600660205260409081902092909255907ff97a274face0b5517365ad396b1fdba6f68bd3135ef603e44272adba3af5a1e09084905190815260200160405180910390a25060015b919050565b600760209081526000928352604080842090915290825290205481565b600061109b838311156110ce565b508082035b92915050565b60008282016110c38482108015906110be5750838210155b6110ce565b8091505b5092915050565b8015156110da57600080fd5b5b505600a165627a7a7230582055de9593a696298cf9e2592032714767518d8312491fce6546176e5851952c250029"
}