{
  "address": "0x80bc5512561c7f85a3a9508c7df7901b370fa1df",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Trade.io: Old Token",
  "contractName": "TIOToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-25\n*/\n\npragma solidity ^0.4.15;\n\n/**\n * Standard ERC20 token\n *\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This is the token contract for trade.io, join the trading revolution.\n * It utilizes Majoolr's TokenLib library to reduce custom source code surface\n * area and increase overall security. Majoolr provides smart contract services\n * and security reviews for contract deployments in addition to working on open\n * source projects in the Ethereum community.\n * For further information: trade.io, majoolr.io\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\ncontract TIOToken {\n  using TokenLib for TokenLib.TokenStorage;\n\n  TokenLib.TokenStorage token;\n\n  function TIOToken(address owner,\n                    string name, //TradeToken\n                    string symbol, //TIO\n                    uint8 decimals, //18\n                    uint256 initialSupply, // 555000000000000000000000000\n                    bool allowMinting) //false\n  {\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n  }\n\n  function owner() constant returns (address) {\n    return token.owner;\n  }\n\n  function name() constant returns (string) {\n    return token.name;\n  }\n\n  function symbol() constant returns (string) {\n    return token.symbol;\n  }\n\n  function decimals() constant returns (uint8) {\n    return token.decimals;\n  }\n\n  function initialSupply() constant returns (uint256) {\n    return token.INITIAL_SUPPLY;\n  }\n\n  function totalSupply() constant returns (uint256) {\n    return token.totalSupply;\n  }\n\n  function balanceOf(address who) constant returns (uint256) {\n    return token.balanceOf(who);\n  }\n\n  function allowance(address owner, address spender) constant returns (uint256) {\n    return token.allowance(owner, spender);\n  }\n\n  function transfer(address to, uint value) returns (bool ok) {\n    return token.transfer(to, value);\n  }\n\n  function transferFrom(address from, address to, uint value) returns (bool ok) {\n    return token.transferFrom(from, to, value);\n  }\n\n  function approve(address spender, uint value) returns (bool ok) {\n    return token.approve(spender, value);\n  }\n\n  function changeOwner(address newOwner) returns (bool ok) {\n    return token.changeOwner(newOwner);\n  }\n\n  function burnToken(uint256 amount) returns (bool ok) {\n    return token.burnToken(amount);\n  }\n}\n\nlibrary TokenLib {\n  using BasicMathLib for uint256;\n\n  struct TokenStorage {\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    string name;\n    string symbol;\n    uint256 totalSupply;\n    uint256 INITIAL_SUPPLY;\n    address owner;\n    uint8 decimals;\n    bool stillMinting;\n  }\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  event OwnerChange(address from, address to);\n  event Burn(address indexed burner, uint256 value);\n  event MintingClosed(bool mintingClosed);\n\n  /// @dev Called by the Standard Token upon creation.\n  /// @param self Stored token from token contract\n  /// @param _name Name of the new token\n  /// @param _symbol Symbol of the new token\n  /// @param _decimals Decimal places for the token represented\n  /// @param _initial_supply The initial token supply\n  /// @param _allowMinting True if additional tokens can be created, false otherwise\n  function init(TokenStorage storage self,\n                address _owner,\n                string _name,\n                string _symbol,\n                uint8 _decimals,\n                uint256 _initial_supply,\n                bool _allowMinting)\n  {\n    require(self.INITIAL_SUPPLY == 0);\n    self.name = _name;\n    self.symbol = _symbol;\n    self.totalSupply = _initial_supply;\n    self.INITIAL_SUPPLY = _initial_supply;\n    self.decimals = _decimals;\n    self.owner = _owner;\n    self.stillMinting = _allowMinting;\n    self.balances[_owner] = _initial_supply;\n  }\n\n  /// @dev Transfer tokens from caller's account to another account.\n  /// @param self Stored token from token contract\n  /// @param _to Address to send tokens\n  /// @param _value Number of tokens to send\n  /// @return True if completed\n  function transfer(TokenStorage storage self, address _to, uint256 _value) returns (bool) {\n    bool err;\n    uint256 balance;\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n    require(!err);\n    self.balances[msg.sender] = balance;\n    //It's not possible to overflow token supply\n    self.balances[_to] = self.balances[_to] + _value;\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /// @dev Authorized caller transfers tokens from one account to another\n  /// @param self Stored token from token contract\n  /// @param _from Address to send tokens from\n  /// @param _to Address to send tokens to\n  /// @param _value Number of tokens to send\n  /// @return True if completed\n  function transferFrom(TokenStorage storage self,\n                        address _from,\n                        address _to,\n                        uint256 _value)\n                        returns (bool)\n  {\n    var _allowance = self.allowed[_from][msg.sender];\n    bool err;\n    uint256 balanceOwner;\n    uint256 balanceSpender;\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n    require(!err);\n\n    (err,balanceSpender) = _allowance.minus(_value);\n    require(!err);\n\n    self.balances[_from] = balanceOwner;\n    self.allowed[_from][msg.sender] = balanceSpender;\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /// @dev Retrieve token balance for an account\n  /// @param self Stored token from token contract\n  /// @param _owner Address to retrieve balance of\n  /// @return balance The number of tokens in the subject account\n  function balanceOf(TokenStorage storage self, address _owner) constant returns (uint256 balance) {\n    return self.balances[_owner];\n  }\n\n  /// @dev Authorize an account to send tokens on caller's behalf\n  /// @param self Stored token from token contract\n  /// @param _spender Address to authorize\n  /// @param _value Number of tokens authorized account may send\n  /// @return True if completed\n  function approve(TokenStorage storage self, address _spender, uint256 _value) returns (bool) {\n    self.allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /// @dev Remaining tokens third party spender has to send\n  /// @param self Stored token from token contract\n  /// @param _owner Address of token holder\n  /// @param _spender Address of authorized spender\n  /// @return remaining Number of tokens spender has left in owner's account\n  function allowance(TokenStorage storage self, address _owner, address _spender) constant returns (uint256 remaining) {\n    return self.allowed[_owner][_spender];\n  }\n\n  /// @dev Authorize third party transfer by increasing/decreasing allowed rather than setting it\n  /// @param self Stored token from token contract\n  /// @param _spender Address to authorize\n  /// @param _valueChange Increase or decrease in number of tokens authorized account may send\n  /// @param _increase True if increasing allowance, false if decreasing allowance\n  /// @return True if completed\n  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n                          returns (bool)\n  {\n    uint256 _newAllowed;\n    bool err;\n\n    if(_increase) {\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n      require(!err);\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n    } else {\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n        self.allowed[msg.sender][_spender] = 0;\n      } else {\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n        self.allowed[msg.sender][_spender] = _newAllowed;\n      }\n    }\n\n    Approval(msg.sender, _spender, _newAllowed);\n    return true;\n  }\n\n  /// @dev Change owning address of the token contract, specifically for minting\n  /// @param self Stored token from token contract\n  /// @param _newOwner Address for the new owner\n  /// @return True if completed\n  function changeOwner(TokenStorage storage self, address _newOwner) returns (bool) {\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n    self.owner = _newOwner;\n    OwnerChange(msg.sender, _newOwner);\n    return true;\n  }\n\n  /// @dev Mints additional tokens, new tokens go to owner\n  /// @param self Stored token from token contract\n  /// @param _amount Number of tokens to mint\n  /// @return True if completed\n  function mintToken(TokenStorage storage self, uint256 _amount) returns (bool) {\n    require((self.owner == msg.sender) && self.stillMinting);\n    uint256 _newAmount;\n    bool err;\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n    require(!err);\n\n    self.totalSupply =  _newAmount;\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n    Transfer(0x0, self.owner, _amount);\n    return true;\n  }\n\n  /// @dev Permanent stops minting\n  /// @param self Stored token from token contract\n  /// @return True if completed\n  function closeMint(TokenStorage storage self) returns (bool) {\n    require(self.owner == msg.sender);\n\n    self.stillMinting = false;\n    MintingClosed(true);\n    return true;\n  }\n\n  /// @dev Permanently burn tokens\n  /// @param self Stored token from token contract\n  /// @param _amount Amount of tokens to burn\n  /// @return True if completed\n  function burnToken(TokenStorage storage self, uint256 _amount) returns (bool) {\n      uint256 _newBalance;\n      bool err;\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n      require(!err);\n\n      self.balances[msg.sender] = _newBalance;\n      self.totalSupply = self.totalSupply - _amount;\n      Burn(msg.sender, _amount);\n      Transfer(msg.sender, 0x0, _amount);\n      return true;\n  }\n}\n\nlibrary BasicMathLib {\n  event Err(string typeErr);\n\n  /// @dev Multiplies two numbers and checks for overflow before returning.\n  /// Does not throw but rather logs an Err event if there is overflow.\n  /// @param a First number\n  /// @param b Second number\n  /// @return err False normally, or true if there is overflow\n  /// @return res The product of a and b, or 0 if there is overflow\n  function times(uint256 a, uint256 b) constant returns (bool err,uint256 res) {\n    assembly{\n      res := mul(a,b)\n      switch or(iszero(b), eq(div(res,b), a))\n      case 0 {\n        err := 1\n        res := 0\n      }\n    }\n    if (err)\n      Err(\"times func overflow\");\n  }\n\n  /// @dev Divides two numbers but checks for 0 in the divisor first.\n  /// Does not throw but rather logs an Err event if 0 is in the divisor.\n  /// @param a First number\n  /// @param b Second number\n  /// @return err False normally, or true if `b` is 0\n  /// @return res The quotient of a and b, or 0 if `b` is 0\n  function dividedBy(uint256 a, uint256 b) constant returns (bool err,uint256 res) {\n    assembly{\n      switch iszero(b)\n      case 0 {\n        res := div(a,b)\n        mstore(add(mload(0x40),0x20),res)\n        return(mload(0x40),0x40)\n      }\n    }\n    Err(\"tried to divide by zero\");\n    return (true, 0);\n  }\n\n  /// @dev Adds two numbers and checks for overflow before returning.\n  /// Does not throw but rather logs an Err event if there is overflow.\n  /// @param a First number\n  /// @param b Second number\n  /// @return err False normally, or true if there is overflow\n  /// @return res The sum of a and b, or 0 if there is overflow\n  function plus(uint256 a, uint256 b) constant returns (bool err, uint256 res) {\n    assembly{\n      res := add(a,b)\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n      case 0 {\n        err := 1\n        res := 0\n      }\n    }\n    if (err)\n      Err(\"plus func overflow\");\n  }\n\n  /// @dev Subtracts two numbers and checks for underflow before returning.\n  /// Does not throw but rather logs an Err event if there is underflow.\n  /// @param a First number\n  /// @param b Second number\n  /// @return err False normally, or true if there is underflow\n  /// @return res The difference between a and b, or 0 if there is underflow\n  function minus(uint256 a, uint256 b) constant returns (bool err,uint256 res) {\n    assembly{\n      res := sub(a,b)\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n      case 0 {\n        err := 1\n        res := 0\n      }\n    }\n    if (err)\n      Err(\"minus func underflow\");\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"allowMinting\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"constructor\"}]",
  "bytecode": "6060604052341561000f57600080fd5b604051610b7c380380610b7c833981016040528080519190602001805182019190602001805182019190602001805191906020018051919060200180519150505b7302d509d0af485c8da54d8aeb42c624e7d9e2eeb6639329297260008888888888886040517c010000000000000000000000000000000000000000000000000000000063ffffffff8a1602815260048101888152600160a060020a038816602483015260ff8516608483015260a4820184905282151560c483015260e0604483019081529091606481019060e40188818151815260200191508051906020019080838360005b8381101561010f5780820151818401525b6020016100f6565b50505050905090810190601f16801561013c5780820380516001836020036101000a031916815260200191505b50838103825287818151815260200191508051906020019080838360005b838110156101735780820151818401525b60200161015a565b50505050905090810190601f1680156101a05780820380516001836020036101000a031916815260200191505b50995050505050505050505060006040518083038186803b15156101c357600080fd5b6102c65a03f415156101d457600080fd5b5050505b5050505050505b61098e806101ee6000396000f300606060405236156100a95763ffffffff60e060020a60003504166306fdde0381146100ae578063095ea7b31461013957806318160ddd1461016f57806323b872dd14610194578063313ce567146101d0578063378dc3dc146101f957806370a082311461021e5780637b47ec1a1461024f5780638da5cb5b1461027957806395d89b41146102a8578063a6f9dae114610333578063a9059cbb14610366578063dd62ed3e1461039c575b600080fd5b34156100b957600080fd5b6100c16103d3565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100fe5780820151818401525b6020016100e5565b50505050905090810190601f16801561012b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014457600080fd5b61015b600160a060020a036004351660243561047b565b604051901515815260200160405180910390f35b341561017a57600080fd5b61018261050e565b60405190815260200160405180910390f35b341561019f57600080fd5b61015b600160a060020a0360043581169060243516604435610515565b604051901515815260200160405180910390f35b34156101db57600080fd5b6101e36105b1565b60405160ff909116815260200160405180910390f35b341561020457600080fd5b6101826105d3565b60405190815260200160405180910390f35b341561022957600080fd5b610182600160a060020a03600435166105da565b60405190815260200160405180910390f35b341561025a57600080fd5b61015b600435610664565b604051901515815260200160405180910390f35b341561028457600080fd5b61028c6106e5565b604051600160a060020a03909116815260200160405180910390f35b34156102b357600080fd5b6100c16106f5565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100fe5780820151818401525b6020016100e5565b50505050905090810190601f16801561012b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561033e57600080fd5b61015b600160a060020a036004351661079f565b604051901515815260200160405180910390f35b341561037157600080fd5b61015b600160a060020a0360043516602435610829565b604051901515815260200160405180910390f35b34156103a757600080fd5b610182600160a060020a03600435811690602435166108bc565b60405190815260200160405180910390f35b6103db610950565b6002805460001961010060018316150201168190046020601f820181900481020160405190810160405280929190818152602001828054600181600116156101000203166002900480156104705780601f1061044557610100808354040283529160200191610470565b820191906000526020600020905b81548152906001019060200180831161045357829003601f168201915b505050505090505b90565b60007302d509d0af485c8da54d8aeb42c624e7d9e2eeb6638ca979ca828585826040516020015260405160e060020a63ffffffff86160281526004810193909352600160a060020a039091166024830152604482015260640160206040518083038186803b15156104eb57600080fd5b6102c65a03f415156104fc57600080fd5b50505060405180519150505b92915050565b6004545b90565b60007302d509d0af485c8da54d8aeb42c624e7d9e2eeb66321a6a23d82868686836040516020015260405160e060020a63ffffffff87160281526004810194909452600160a060020a03928316602485015291166044830152606482015260840160206040518083038186803b151561058d57600080fd5b6102c65a03f4151561059e57600080fd5b50505060405180519150505b9392505050565b60065474010000000000000000000000000000000000000000900460ff165b90565b6005545b90565b60007302d509d0af485c8da54d8aeb42c624e7d9e2eeb6633af00d0f8284816040516020015260405160e060020a63ffffffff85160281526004810192909252600160a060020a0316602482015260440160206040518083038186803b151561064257600080fd5b6102c65a03f4151561065357600080fd5b50505060405180519150505b919050565b60007302d509d0af485c8da54d8aeb42c624e7d9e2eeb6636269321c8284816040516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b151561064257600080fd5b6102c65a03f4151561065357600080fd5b50505060405180519150505b919050565b600654600160a060020a03165b90565b6106fd610950565b60038054600260001961010060018416150201909116046020601f820181900481020160405190810160405280929190818152602001828054600181600116156101000203166002900480156104705780601f1061044557610100808354040283529160200191610470565b820191906000526020600020905b81548152906001019060200180831161045357829003601f168201915b505050505090505b90565b60007302d509d0af485c8da54d8aeb42c624e7d9e2eeb6636f71ca3c8284816040516020015260405160e060020a63ffffffff85160281526004810192909252600160a060020a0316602482015260440160206040518083038186803b151561064257600080fd5b6102c65a03f4151561065357600080fd5b50505060405180519150505b919050565b60007302d509d0af485c8da54d8aeb42c624e7d9e2eeb663d4b1770a828585826040516020015260405160e060020a63ffffffff86160281526004810193909352600160a060020a039091166024830152604482015260640160206040518083038186803b15156104eb57600080fd5b6102c65a03f415156104fc57600080fd5b50505060405180519150505b92915050565b60007302d509d0af485c8da54d8aeb42c624e7d9e2eeb663ac9b44f7828585826040516020015260405160e060020a63ffffffff86160281526004810193909352600160a060020a03918216602484015216604482015260640160206040518083038186803b15156104eb57600080fd5b6102c65a03f415156104fc57600080fd5b50505060405180519150505b92915050565b602060405190810160405260008152905600a165627a7a72305820c70195bae37bf8c2ee4de38d725c612844956da342158b0bf73b8d614d8c8875002900000000000000000000000058f75ddacffb183a30f69fe58a67a0d0985fce0f00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000001cb15d24956472c0b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a5472616465546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000354494f0000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000058f75ddacffb183a30f69fe58a67a0d0985fce0f00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000001cb15d24956472c0b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a5472616465546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000354494f0000000000000000000000000000000000000000000000000000000000",
  "libraries": [
    {
      "name": "TokenLib",
      "address": "0x02d509d0af485c8da54d8aeb42c624e7d9e2eeb6"
    }
  ]
}