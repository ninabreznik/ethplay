{
  "address": "0x02c1ffd832143973fcec0cf3cac020ecb43dfb1a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SmartLotto",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-18\n*/\n\npragma solidity ^0.5.4;\n\n/**\n *\tLottery 5 of 36 (Weekly)\n */\n \ncontract SmartLotto {\n    \n\t// For safe math operations\n    using SafeMath for uint;\n\t\n\t// Drawing time\n    uint8 private constant DRAW_DOW = 4;            // Day of week\n    uint8 private constant DRAW_HOUR = 11;          // Hour\n    \n    uint private constant DAY_IN_SECONDS = 86400;\n    \n\t// Member struct\n\tstruct Member {\n\t\taddress addr;\t\t\t\t\t\t\t\t// Address\n\t\tuint ticket;\t\t\t\t\t\t\t\t// Ticket number\n\t\tuint8[5] numbers;                           // Selected numbers\n\t\tuint prize;                                 // Winning prize\n\t\tuint8 payout;\t\t\t\t\t\t\t\t// Payout prize\n\t}\n\t\n\t// Game struct\n\tstruct Game {\n\t\tuint datetime;\t\t\t\t\t\t\t\t// Game timestamp\n\t\tuint8[5] win_numbers;\t\t\t\t\t\t// Winning numbers\n\t\tuint membersCounter;\t\t\t\t\t\t// Members count\n\t\tuint totalFund;                             // Total prize fund\n\t\tuint p2;\t\t\t\t\t\t\t\t\t// Prize for 2 guessed numbers\n\t\tuint p3;\t\t\t\t\t\t\t\t\t// Prize for 3 guessed numbers\n\t\tuint p4;\t\t\t\t\t\t\t\t\t// Prize for 4 guessed numbers\n\t\tuint p5;\t\t\t\t\t\t\t\t\t// Prize for 5 guessed numbers\n\t\tuint8 status;                               // Game status: 0 - created, 1 - active\n\t\tmapping(uint => Member) members;\t\t    // Members list\n\t}\n\t\n\tmapping(uint => Game) public games;\n\t\n\tuint private CONTRACT_STARTED_DATE = 0;\n\tuint private constant TICKET_PRICE = 0.01 ether;\n\tuint private constant MAX_NUMBER = 36;\t\t\t\t\t\t            // Максимально возможное число -> 36\n\t\n\tuint private constant PERCENT_FUND_JACKPOT = 15;                        // (%) Increase Jackpot\n\tuint private constant PERCENT_FUND_4 = 35;                              // (%) Fund 4 of 5\n\tuint private constant PERCENT_FUND_3 = 30;                              // (%) Fund 3 of 5\n    uint private constant PERCENT_FUND_2 = 20;                              // (%) Fund 2 of 5\n    \n\tuint public JACKPOT = 0;\n\t\n\t// Init params\n\tuint public GAME_NUM = 0;\n\tuint private constant return_jackpot_period = 25 weeks;\n\tuint private start_jackpot_amount = 0;\n\t\n\tuint private constant PERCENT_FUND_PR = 15;                             // (%) PR & ADV\n\tuint private FUND_PR = 0;                                               // Fund PR & ADV\n\n\t// Addresses\n\taddress private constant ADDRESS_SERVICE = 0x203bF6B46508eD917c085F50F194F36b0a62EB02;\n\taddress payable private constant ADDRESS_START_JACKPOT = 0x531d3Bd0400Ae601f26B335EfbD787415Aa5CB81;\n\taddress payable private constant ADDRESS_PR = 0xCD66911b6f38FaAF5BFeE427b3Ceb7D18Dd09F78;\n\t\n\t// Events\n\tevent NewMember(uint _gamenum, uint _ticket, address _addr, uint8 _n1, uint8 _n2, uint8 _n3, uint8 _n4, uint8 _n5);\n\tevent NewGame(uint _gamenum);\n\tevent UpdateFund(uint _fund);\n\tevent UpdateJackpot(uint _jackpot);\n\tevent WinNumbers(uint _gamenum, uint8 _n1, uint8 _n2, uint8 _n3, uint8 _n4, uint8 _n5);\n\tevent PayOut(uint _gamenum, uint _ticket, uint _prize, uint8 _payout);\n\t\n\t// For many processing transactions\n\tuint private constant POOL_SIZE = 30;\t\t\t\t\t\t\t\t\t\t// MAX processing tickets by transaction\n\tuint private POOL_COUNTER = 0;\n\t\n\tuint private w2 = 0;\n\tuint private w3 = 0;\n\tuint private w4 = 0;\n\tuint private w5 = 0;\n\t\n\t// Entry point\n\tfunction() external payable {\n\t    \n        // Select action\n\t\tif(msg.sender == ADDRESS_START_JACKPOT) {\n\t\t\tprocessStartingJackpot();\n\t\t} else {\n\t\t\tif(msg.sender == ADDRESS_SERVICE) {\n\t\t\t\tstartGame();\n\t\t\t} else {\n\t\t\t\tprocessUserTicket();\n\t\t\t}\n\t\t}\n\t\t\n    }\n\t\n\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// Starting Jackpot action\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////\n\tfunction processStartingJackpot() private {\n\t\t// If value > 0, increase starting Jackpot\n\t\tif(msg.value > 0) {\n\t\t\tJACKPOT += msg.value;\n\t\t\tstart_jackpot_amount += msg.value;\n\t\t\temit UpdateJackpot(JACKPOT);\n\t\t// Else, return starting Jackpot\n\t\t} else {\n\t\t\tif(start_jackpot_amount > 0){\n\t\t\t\t_returnStartJackpot();\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\t// Return starting Jackpot after 6 months\n\tfunction _returnStartJackpot() private { \n\t\t\n\t\tif(JACKPOT > start_jackpot_amount * 2 || (now - CONTRACT_STARTED_DATE) > return_jackpot_period) {\n\t\t\t\n\t\t\tif(JACKPOT > start_jackpot_amount) {\n\t\t\t\tADDRESS_START_JACKPOT.transfer(start_jackpot_amount);\n\t\t\t\tJACKPOT = JACKPOT - start_jackpot_amount;\n\t\t\t\tstart_jackpot_amount = 0;\n\t\t\t} else {\n\t\t\t\tADDRESS_START_JACKPOT.transfer(JACKPOT);\n\t\t\t\tstart_jackpot_amount = 0;\n\t\t\t\tJACKPOT = 0;\n\t\t\t}\n\t\t\temit UpdateJackpot(JACKPOT);\n\t\t\t\n\t\t} \n\t\t\n\t}\n\t\n\t\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// Running a Game\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////\n\tfunction startGame() private {\n\t    \n\t\tif(GAME_NUM == 0) {\n\t\t    GAME_NUM = 1;\n\t\t    games[GAME_NUM].datetime = now;\n\t\t    games[GAME_NUM].status = 1;\n\t\t    CONTRACT_STARTED_DATE = now;\n\t\t} else {\n\t\t    \n\t        if(games[GAME_NUM].status == 1) {\n\t            processGame();\n\t\t    } else {\n\t\t        games[GAME_NUM].status = 1;\n\t\t    }\n\t\t    \n\t\t}\n        \n\t}\n\t\n\tfunction processGame() private {\n\t    \n\t\tuint8[5] memory win_numbers;\n\t\tuint8 mn = 0;\n\t\t\n\t    // 1-st time generate winning numbers\n\t\tif(POOL_COUNTER == 0) {\n\t\t\t\n\t\t\tw2 = 0;\n\t\t\tw3 = 0;\n\t\t\tw4 = 0;\n\t\t\tw5 = 0;\n\t\t\n\t\t\t// Generate winning numbers\n\t\t\tfor(uint8 i = 0; i < 5; i++) {\n\t\t\t\twin_numbers[i] = random(i);\n\t\t\t}\n\n\t\t\t// Sort winning numbers array\n\t\t\twin_numbers = sortNumbers(win_numbers);\n\t    \n\t\t\t// Change dublicate numbers\n\t\t\tfor(uint8 i = 0; i < 4; i++) {\n\t\t\t\tfor(uint8 j = i + 1; j < 5; j++) {\n\t\t\t\t\tif(win_numbers[i] == win_numbers[j]) {\n\t\t\t\t\t\twin_numbers[j]++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t    \n\t\t\tgames[GAME_NUM].win_numbers = win_numbers;\n\t\t\temit WinNumbers(GAME_NUM, win_numbers[0], win_numbers[1], win_numbers[2], win_numbers[3], win_numbers[4]);\n\t\t\n\t\t} else {\n\t\t    \n\t\t    win_numbers = games[GAME_NUM].win_numbers;\n\t\t    \n\t\t}\n\t\t\n\n\t\t// Process tickets list\n\t\tuint start \t= POOL_SIZE * POOL_COUNTER + 1;\n\t\tuint end \t= POOL_SIZE * POOL_COUNTER + POOL_SIZE;\n\t\t\n\t\tif(end > games[GAME_NUM].membersCounter) end = games[GAME_NUM].membersCounter;\n\t\t\n\t\tuint _w2 = 0;\n\t\tuint _w3 = 0;\n\t\tuint _w4 = 0;\n\t\tuint _w5 = 0;\n\t\t\n\t    for(uint i = start; i <= end; i++) {\n\t       \n\t        mn = findMatch(win_numbers, games[GAME_NUM].members[i].numbers);\n\t\t\t\t\n\t\t\tif(mn == 2) { _w2++; continue; }\n\t\t\tif(mn == 3) { _w3++; continue; }\n\t\t\tif(mn == 4) { _w4++; continue; }\n\t\t\tif(mn == 5) { _w5++; }\n\t\t\t\t\n\t    }\n\t\t\n\t\tif(_w2 != 0) { w2 += _w2; }\n\t\tif(_w3 != 0) { w3 += _w3; }\n\t\tif(_w4 != 0) { w4 += _w4; }\n\t\tif(_w5 != 0) { w2 += _w5; }\n\t\t\n\t\tif(end == games[GAME_NUM].membersCounter) {\n\t\t\n\t\t\t// Fund calculate\n\t\t\tuint totalFund = games[GAME_NUM].totalFund;\n\t\t\t\n\t\t\tuint fund2 = totalFund * PERCENT_FUND_2 / 100;\n\t\t\tuint fund3 = totalFund * PERCENT_FUND_3 / 100;\n\t\t\tuint fund4 = totalFund * PERCENT_FUND_4 / 100;\n\t\t\tuint _jackpot = JACKPOT + totalFund * PERCENT_FUND_JACKPOT / 100;\n\n\t\t\t// If exist tickets 2/5\n\t\t\tif(w2 != 0) { \n\t\t\t\tgames[GAME_NUM].p2 = fund2 / w2; \n\t\t\t} else { \n\t\t\t\t_jackpot += fund2; \n\t\t\t}\n\t\t\t\n\t\t\t// If exist tickets 3/5\n\t\t\tif(w3 != 0) { \n\t\t\t\tgames[GAME_NUM].p3 = fund3 / w3; \n\t\t\t} else {\n\t\t\t\t_jackpot += fund3;\n\t\t\t}\n\t\t\t\n\t\t\t// If exist tickets 4/5\n\t\t\tif(w4 != 0) { \n\t\t\t\tgames[GAME_NUM].p4 = fund4 / w4; \n\t\t\t} else {\n\t\t\t\t_jackpot += fund4;\n\t\t\t}\n\t\t\t\n\t\t\t// If exist tickets 5/5\n\t\t\tif(w5 != 0) { \n\t\t\t\tgames[GAME_NUM].p5 = _jackpot / w5; \n\t\t\t\tJACKPOT = 0;\n\t\t\t\tstart_jackpot_amount = 0;\n\t\t\t} else {\n\t\t\t\tJACKPOT = _jackpot;\n\t\t\t}\n\n\t\t\temit UpdateJackpot(JACKPOT);\n\t    \n\t\t\t// Init next Game /////////////////////////////////////////////////\n\t\t\tGAME_NUM++;\n\t\t\tgames[GAME_NUM].datetime = now;\n\t\t\temit NewGame(GAME_NUM);\n\t\t\t\n\t\t\tPOOL_COUNTER = 0;\n\n\t\t\t// Transfer PR \n\t\t\tADDRESS_PR.transfer(FUND_PR);\n\t\t\tFUND_PR = 0;\n\t    \n\t\t} else {\n\t\t\t\n\t\t\tPOOL_COUNTER++;\n\n\t\t}\n\t\t\n\t}\n\t\n\t// Find match numbers function\n\tfunction findMatch(uint8[5] memory arr1, uint8[5] memory arr2) private pure returns (uint8) {\n\t    \n\t    uint8 cnt = 0;\n\t    \n\t    for(uint8 i = 0; i < 5; i++) {\n\t        for(uint8 j = 0; j < 5; j++) {\n\t            if(arr1[i] == arr2[j]) {\n\t                cnt++;\n\t                break;\n\t            }\n\t        }\n\t    }\n\t    \n\t    return cnt;\n\n\t}\n\t\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// Buy ticket process (if msg.value != 0.0 ETH) or payout winnings (if msg.value == 0.0 ETH)\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////\n\tfunction processUserTicket() private {\n\t\t\n\t\t// Payout\n\t\tif(msg.value == 0) {\n\t\t\t\n\t\t\tif(games[GAME_NUM].status != 1 || POOL_COUNTER > 0) return;\n\t\t\t\n\t\t\tuint payoutAmount = 0;\n\t\t\tfor(uint i = 1; i <= GAME_NUM; i++) {\n\t\t\t\t\n\t\t\t\tGame memory game = games[i];\n\t\t\t\tif(game.win_numbers[0] == 0) { continue; }\n\t\t\t\t\n\t\t\t\tfor(uint j = 1; j <= game.membersCounter; j++) {\n\t\t\t\t    \n\t\t\t\t    Member memory member = games[i].members[j];\n\t\t\t\t\t\n\t\t\t\t\tif(member.payout == 1) { continue; }\n\t\t\t\t\t\n\t\t\t\t\tuint8 mn = findMatch(game.win_numbers, member.numbers);\n\t\t\t\t\t\n\t\t\t\t\tif(mn == 2) {\n\t\t\t\t\t\tgames[i].members[j].prize = game.p2;\n\t\t\t\t\t\tpayoutAmount += game.p2;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(mn == 3) {\n\t\t\t\t\t\tgames[i].members[j].prize = game.p3;\n\t\t\t\t\t\tpayoutAmount += game.p3;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(mn == 4) {\n\t\t\t\t\t\tgames[i].members[j].prize = game.p4;\n\t\t\t\t\t\tpayoutAmount += game.p4;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(mn == 5) {\n\t\t\t\t\t\tgames[i].members[j].prize = game.p5;\n\t\t\t\t\t\tpayoutAmount += game.p5;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tgames[i].members[j].payout = 1;\n\t\t\t\t\t\n\t\t\t\t\temit PayOut(i, j, games[i].members[j].prize, 1);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif(payoutAmount != 0) msg.sender.transfer(payoutAmount);\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Buy ticket\n\t\tuint8 weekday = getWeekday(now);\n\t\tuint8 hour = getHour(now);\n\t\t\n\t\tif( GAME_NUM > 0 && games[GAME_NUM].status == 1 && POOL_COUNTER == 0 && \n\t\t  (weekday != DRAW_DOW || (weekday == DRAW_DOW && (hour < (DRAW_HOUR - 1) || hour > (DRAW_HOUR + 2)))) ) {\n\n\t\t    if(msg.value == TICKET_PRICE) {\n\t\t\t    createTicket();\n\t\t    } else {\n\t\t\t    if(msg.value < TICKET_PRICE) {\n\t\t\t\t    FUND_PR = FUND_PR + msg.value.mul(PERCENT_FUND_PR).div(100);\n\t\t\t\t    games[GAME_NUM].totalFund = games[GAME_NUM].totalFund + msg.value.mul(100 - PERCENT_FUND_PR).div(100);\n\t\t\t\t    emit UpdateFund(games[GAME_NUM].totalFund);\n\t\t\t    } else {\n\t\t\t\t    msg.sender.transfer(msg.value.sub(TICKET_PRICE));\n\t\t\t\t    createTicket();\n\t\t\t    }\n\t\t    }\n\t\t\n\t\t} else {\n\t\t     msg.sender.transfer(msg.value);\n\t\t}\n\t\t\n\t}\n\t\n\tfunction createTicket() private {\n\t\t\n\t\tbool err = false;\n\t\tuint8[5] memory numbers;\n\t\t\n\t\t// Calculate funds\n\t\tFUND_PR = FUND_PR + TICKET_PRICE.mul(PERCENT_FUND_PR).div(100);\n\t\tgames[GAME_NUM].totalFund = games[GAME_NUM].totalFund + TICKET_PRICE.mul(100 - PERCENT_FUND_PR).div(100);\n\t\temit UpdateFund(games[GAME_NUM].totalFund);\n\t\t\n\t\t// Parse and check msg.DATA\n\t\t(err, numbers) = ParseCheckData();\n\t\t\n\t\tuint mbrCnt;\n\t\t\n\t\t// If error DATA, generate random ticket numbers\n\t\tif(err) {\n\t\t    \n\t\t    // Generate numbers\n\t        for(uint8 i = 0; i < 5; i++) {\n\t            numbers[i] = random(i);\n\t        }\n\n\t        // Change dublicate numbers\n\t        for(uint8 i = 0; i < 4; i++) {\n\t            for(uint8 j = i + 1; j < 5; j++) {\n\t                if(numbers[i] == numbers[j]) {\n\t                    numbers[j]++;\n\t                }\n\t            }\n\t        }\n\t        \n\t\t}\n\t\t\n\t\t// Sort ticket numbers array\n\t    numbers = sortNumbers(numbers);\n\n\t    // Increase member counter\n\t    games[GAME_NUM].membersCounter++;\n\t    mbrCnt = games[GAME_NUM].membersCounter;\n\n\t    // Save member\n\t    games[GAME_NUM].members[mbrCnt].addr = msg.sender;\n\t    games[GAME_NUM].members[mbrCnt].ticket = mbrCnt;\n\t    games[GAME_NUM].members[mbrCnt].numbers = numbers;\n\t\t    \n\t    emit NewMember(GAME_NUM, mbrCnt, msg.sender, numbers[0], numbers[1], numbers[2], numbers[3], numbers[4]);\n\n\t}\n\t\n\t\n\t// Parse and check msg.DATA function\n\tfunction ParseCheckData() private view returns (bool, uint8[5] memory) {\n\t    \n\t    bool err = false;\n\t    uint8[5] memory numbers;\n\t    \n\t    // Check 5 numbers entered\n\t    if(msg.data.length == 5) {\n\t        \n\t        // Parse DATA string\n\t\t    for(uint8 i = 0; i < msg.data.length; i++) {\n\t\t        numbers[i] = uint8(msg.data[i]);\n\t\t    }\n\t\t    \n\t\t    // Check range: 1 - MAX_NUMBER\n\t\t    for(uint8 i = 0; i < numbers.length; i++) {\n\t\t        if(numbers[i] < 1 || numbers[i] > MAX_NUMBER) {\n\t\t            err = true;\n\t\t            break;\n\t\t        }\n\t\t    }\n\t\t    \n\t\t    // Check dublicate numbers\n\t\t    if(!err) {\n\t\t    \n\t\t        for(uint8 i = 0; i < numbers.length - 1; i++) {\n\t\t            for(uint8 j = i + 1; j < numbers.length; j++) {\n\t\t                if(numbers[i] == numbers[j]) {\n\t\t                    err = true;\n\t\t                    break;\n\t\t                }\n\t\t            }\n\t\t            if(err) {\n\t\t                break;\n\t\t            }\n\t\t        }\n\t\t        \n\t\t    }\n\t\t    \n\t    } else {\n\t        err = true;\n\t    }\n\n\t    return (err, numbers);\n\n\t}\n\t\n\t// Sort array of number function\n\tfunction sortNumbers(uint8[5] memory arrNumbers) private pure returns (uint8[5] memory) {\n\t    \n\t    uint8 temp;\n\t    \n\t    for(uint8 i = 0; i < arrNumbers.length - 1; i++) {\n            for(uint j = 0; j < arrNumbers.length - i - 1; j++)\n                if (arrNumbers[j] > arrNumbers[j + 1]) {\n                    temp = arrNumbers[j];\n                    arrNumbers[j] = arrNumbers[j + 1];\n                    arrNumbers[j + 1] = temp;\n                }    \n\t    }\n        \n        return arrNumbers;\n        \n\t}\n\t\n\t// Contract address balance\n    function getBalance() public view returns(uint) {\n        uint balance = address(this).balance;\n\t\treturn balance;\n\t}\n\t\n\t// Generate random number\n\tfunction random(uint8 num) internal view returns (uint8) {\n        return uint8((uint(blockhash(block.number - 1 - num*2)) + now) % MAX_NUMBER + 1);\n    }\n\t\n\tfunction getHour(uint timestamp) private pure returns (uint8) {\n        return uint8((timestamp / 60 / 60) % 24);\n    }\n    \n    function getWeekday(uint timestamp) private pure returns (uint8) {\n        return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\n    }\n    \n\t\n\t//  API  //\n\t\n\t// i - Game number\n\tfunction getGameInfo(uint i) public view returns (uint, uint, uint8, uint8, uint8, uint8, uint8, uint8, uint, uint, uint, uint) {\n\t    Game memory game = games[i];\n\t    return (game.totalFund, game.membersCounter, game.win_numbers[0], game.win_numbers[1], game.win_numbers[2], game.win_numbers[3], game.win_numbers[4], game.status, game.p2, game.p3, game.p4, game.p5);\n\t}\n\t\n\t// i - Game number, j - Ticket number\n\tfunction getMemberInfo(uint i, uint j) public view returns (address, uint, uint8, uint8, uint8, uint8, uint8, uint, uint8) {\n\t    Member memory mbr = games[i].members[j];\n\t    return (mbr.addr, mbr.ticket, mbr.numbers[0], mbr.numbers[1], mbr.numbers[2], mbr.numbers[3], mbr.numbers[4], mbr.prize, mbr.payout);\n\t}\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"datetime\",\"type\":\"uint256\"},{\"name\":\"membersCounter\",\"type\":\"uint256\"},{\"name\":\"totalFund\",\"type\":\"uint256\"},{\"name\":\"p2\",\"type\":\"uint256\"},{\"name\":\"p3\",\"type\":\"uint256\"},{\"name\":\"p4\",\"type\":\"uint256\"},{\"name\":\"p5\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JACKPOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getGameInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"},{\"name\":\"j\",\"type\":\"uint256\"}],\"name\":\"getMemberInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAME_NUM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_gamenum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ticket\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_n1\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_n2\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_n3\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_n4\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_n5\",\"type\":\"uint8\"}],\"name\":\"NewMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_gamenum\",\"type\":\"uint256\"}],\"name\":\"NewGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_fund\",\"type\":\"uint256\"}],\"name\":\"UpdateFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_jackpot\",\"type\":\"uint256\"}],\"name\":\"UpdateJackpot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_gamenum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_n1\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_n2\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_n3\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_n4\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_n5\",\"type\":\"uint8\"}],\"name\":\"WinNumbers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_gamenum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ticket\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_prize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_payout\",\"type\":\"uint8\"}],\"name\":\"PayOut\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600155600060025560006003556000600455600060055560006006556000600755600060085560006009556000600a5534801561004257600080fd5b50611ae0806100526000396000f3fe608060405260043610610071577c01000000000000000000000000000000000000000000000000000000006000350463117a5b9081146100c857806312065fe01461013657806343c5cd741461015d57806347e1d5501461017257806396ff55d914610209578063d960e8de1461029f575b3373531d3bd0400ae601f26b335efbd787415aa5cb81141561009a576100956102b4565b6100c6565b3373203bf6b46508ed917c085f50f194f36b0a62eb0214156100be5761009561031e565b6100c66103db565b005b3480156100d457600080fd5b506100f2600480360360208110156100eb57600080fd5b5035610980565b604080519889526020890197909752878701959095526060870193909352608086019190915260a085015260c084015260ff1660e083015251908190036101000190f35b34801561014257600080fd5b5061014b6109c6565b60408051918252519081900360200190f35b34801561016957600080fd5b5061014b6109cc565b34801561017e57600080fd5b5061019c6004803603602081101561019557600080fd5b50356109d2565b604080519c8d5260208d019b909b5260ff998a168c8c015297891660608c015295881660808b015293871660a08a015291861660c089015290941660e087015261010086019390935261012085019290925261014084019190915261016083015251908190036101800190f35b34801561021557600080fd5b506102396004803603604081101561022c57600080fd5b5080359060200135610b7d565b6040805173ffffffffffffffffffffffffffffffffffffffff909a168a5260208a019890985260ff968716898901529486166060890152928516608088015290841660a0870152831660c086015260e08501521661010083015251908190036101200190f35b3480156102ab57600080fd5b5061014b610cbb565b60003411156103095760028054349081019182905560048054909101905560408051918252517f601efe556d14016ab9dd3b187316aecdc411a1ca4820c23b35bb54d42f9fba1f9181900360200190a161031c565b6000600454111561031c5761031c610cc1565b565b600354151561038d57600160038190556000818152602052427fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d8190557fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e85805460ff191683179055905561031c565b60035460009081526020819052604090206008015460ff16600114156103ba576103b5610dcc565b61031c565b6003546000908152602081905260409020600801805460ff19166001179055565b3415156107a45760035460009081526020819052604090206008015460ff16600114158061040b57506000600654115b156104155761031c565b600060015b60035481116107685761042b61195a565b60008281526020818152604080832081516101208101835281548152825160a081019384905290949193850192909160018501916005918390855b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610466575050509284525050506002820154602080830191909152600383015460408301526004830154606083015260058301546080830152600683015460a0830152600783015460c083015260089092015460ff1660e0909101528101519091506000602002015160ff1615156105065750610760565b60015b6040820151811161075d5761051c6119b0565b6000848152602081815260408083208584526009018252808320815160a08082018452825473ffffffffffffffffffffffffffffffffffffffff168252600183015494820194909452825193840180845290949193928501929160028501916005918390855b825461010083900a900460ff1681526020600192830181810494850194909303909202910180841161058257905050505091835250506003820154602082015260049091015460ff908116604090920191909152608082015191925016600114156105ed5750610755565b600061060184602001518360400151611356565b90508060ff166002141561063a576080840180516000878152602081815260408083208884526009019091529020600301555195909501945b8060ff16600314156106715760a0840180516000878152602081815260408083208884526009019091529020600301555195909501945b8060ff16600414156106a85760c0840180516000878152602081815260408083208884526009019091529020600301555195909501945b8060ff16600514156106df5760e0840180516000878152602081815260408083208884526009019091529020600301555195909501945b60008581526020818152604080832086845260090182529182902060048101805460ff19166001908117909155600390910154835189815292830187905282840152606082015290517f2919b4937991da109a5cfb25ff8316f1332b33a59db5c81744014fe1c46172009181900360800190a150505b600101610509565b50505b60010161041a565b50801561079e57604051339082156108fc029083906000818181858888f1935050505015801561079c573d6000803e3d6000fd5b505b5061031c565b60006107af426113d0565b905060006107bc426113e5565b905060006003541180156107e7575060035460009081526020819052604090206008015460ff166001145b80156107f35750600654155b801561082b575060ff8216600414158061082b575060ff8216600414801561082b5750600a60ff8216108061082b5750600d60ff8216115b1561094e57662386f26fc1000034141561084c576108476113f4565b610949565b662386f26fc100003410156108fd5761087d606461087134600f63ffffffff6116a116565b9063ffffffff6116cc16565b6005805491909101905561089d606461087134605563ffffffff6116a116565b600380546000908152602081815260408083208401805495909501909455825482529083902090910154825190815291517f0e2a6acbc0dc775e1a3fc98b37b3108afaccbd752b4d8b91979b28c3d1abdea69281900390910190a1610949565b336108fc61091834662386f26fc1000063ffffffff6116e316565b6040518115909202916000818181858888f19350505050158015610940573d6000803e3d6000fd5b506109496113f4565b61097c565b60405133903480156108fc02916000818181858888f1935050505015801561097a573d6000803e3d6000fd5b505b5050565b6000602081905290815260409020805460028201546003830154600484015460058501546006860154600787015460089097015495969495939492939192909160ff1688565b30315b90565b60025481565b6000806000806000806000806000806000806109ec61195a565b60008e81526020818152604080832081516101208101835281548152825160a081019384905290949193850192909160018501916005918390855b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610a27579050505050505081526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820160009054906101000a900460ff1660ff1660ff168152505090508060600151816040015182602001516000600581101515610ad657fe5b602002015183602001516001600581101515610aee57fe5b602002015184602001516002600581101515610b0657fe5b602002015185602001516003600581101515610b1e57fe5b602002015186602001516004600581101515610b3657fe5b602002015187610100015188608001518960a001518a60c001518b60e001519c509c509c509c509c509c509c509c509c509c509c509c505091939597999b5091939597999b565b6000806000806000806000806000610b936119b0565b60008c8152602081815260408083208e84526009018252808320815160a08082018452825473ffffffffffffffffffffffffffffffffffffffff168252600183015494820194909452825193840180845290949193928501929160028501916005918390855b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610bf957505050928452505050600382015460208083019190915260049092015460ff166040918201528251918301519083015192935090916000602002015160408401516001602002015160408501516002602002015160408601516003602002015160408701516004602002015187606001518860800151995099509950995099509950995099509950509295985092959850929598565b60035481565b6004546002026002541180610cdc575062e6b6806001544203115b1561031c576004546002541115610d475760045460405173531d3bd0400ae601f26b335efbd787415aa5cb819180156108fc02916000818181858888f19350505050158015610d2f573d6000803e3d6000fd5b50600480546002805491909103905560009055610d95565b60025460405173531d3bd0400ae601f26b335efbd787415aa5cb819180156108fc02916000818181858888f19350505050158015610d89573d6000803e3d6000fd5b50600060048190556002555b60025460408051918252517f601efe556d14016ab9dd3b187316aecdc411a1ca4820c23b35bb54d42f9fba1f9181900360200190a1565b610dd46119e4565b6006546000901515610f5f576000600781905560088190556009819055600a8190555b60058160ff161015610e3057610e0c816116f5565b8360ff831660058110610e1b57fe5b60ff9092166020929092020152600101610df7565b50610e3a82611714565b915060005b60048160ff161015610ec157600181015b60058160ff161015610eb8578360ff821660058110610e6b57fe5b602002015160ff16848360ff16600581101515610e8457fe5b602002015160ff161415610eb0578360ff821660058110610ea157fe5b60200201805160010160ff1690525b600101610e50565b50600101610e3f565b506003546000908152602081905260409020610ee290600101836005611a03565b5060035482516020808501516040808701516060808901516080808b01518551998a5260ff988916978a01979097529487168885015291861690870152841691850191909152911660a0830152517fb8590059f31f0d90ded1b66fd092c3f35a5ee01f932f0c6f9969364d12d345f19181900360c00190a1610fbf565b600354600090815260208190526040808220815160a0810192839052926001909101916005918390855b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610f89579050505050505091505b600654600354600090815260208190526040902060020154601e9182026001810192019081111561100157506003546000908152602081905260409020600201545b6000808080855b8581116110e457600354600090815260208181526040808320848452600901909152808220815160a0810192839052611082938d939192600201916005918390855b825461010083900a900460ff1681526020600192830181810494850194909303909202910180841161104a5790505050505050611356565b97508760ff166002141561109b576001909401936110dc565b8760ff16600314156110b2576001909301926110dc565b8760ff16600414156110c9576001909201916110dc565b8760ff16600514156110dc576001909101905b600101611008565b5083156110f45760078054850190555b82156111035760088054840190555b81156111125760098054830190555b80156111215760078054820190555b60035460009081526020819052604090206002015485141561134257600380546000908152602081905260409020015460025460075460646014840281900492601e8502829004926023860283900492600f87020490910190156111ab576007548481151561118c57fe5b60035460009081526020819052604090209190046004909101556111ae565b83015b600854156111e257600854838115156111c357fe5b60035460009081526020819052604090209190046005909101556111e5565b82015b6009541561121957600954828115156111fa57fe5b600354600090815260208190526040902091900460069091015561121c565b81015b600a541561125c57600a548181151561123157fe5b6003546000908152602081905260408120929091046007909201919091556002819055600455611262565b60028190555b60025460408051918252517f601efe556d14016ab9dd3b187316aecdc411a1ca4820c23b35bb54d42f9fba1f9181900360200190a160038054600101808255600090815260208181526040918290204290559154815190815290517fa0b7f6f22bb4f69adc52dd16ffe2a964ab8b577be274247fa9a1547b03ce3e55929181900390910190a16000600681905560055460405173cd66911b6f38faaf5bfee427b3ceb7d18dd09f789282156108fc02929190818181858888f19350505050158015611331573d6000803e3d6000fd5b505060006005555061134c92505050565b6006805460010190555b5050505050505050565b600080805b60058160ff1610156113c85760005b60058160ff1610156113bf578460ff82166005811061138557fe5b602002015160ff16868360ff1660058110151561139e57fe5b602002015160ff1614156113b7576001909201916113bf565b60010161136a565b5060010161135b565b509392505050565b600060076004620151808404015b0692915050565b60006018603c808404046113de565b60006113fe6119e4565b61141b6064610871662386f26fc10000600f63ffffffff6116a116565b600580549190910190556114426064610871662386f26fc10000605563ffffffff6116a116565b600380546000908152602081815260408083208401805495909501909455825482529083902090910154825190815291517f0e2a6acbc0dc775e1a3fc98b37b3108afaccbd752b4d8b91979b28c3d1abdea69281900390910190a16114a56117e8565b9092509050600082156115765760005b60058160ff1610156114ee576114ca816116f5565b8360ff8316600581106114d957fe5b60ff90921660209290920201526001016114b5565b5060005b60048160ff16101561157457600181015b60058160ff16101561156b578360ff82166005811061151e57fe5b602002015160ff16848360ff1660058110151561153757fe5b602002015160ff161415611563578360ff82166005811061155457fe5b60200201805160010160ff1690525b600101611503565b506001016114f2565b505b61157f82611714565b60038054600090815260208181526040808320600290810180546001908101909155855485528285208083015480875260099182018652848720805473ffffffffffffffffffffffffffffffffffffffff1916331790558754875286865284872081885282018652848720909201829055955485528484528285208186529095019092529091209294509092506116199101836005611a03565b5060035482516020808501516040808701516060808901516080808b01518551998a529689018a9052338986015260ff9788169289019290925293861690870152841660a086015290831660c0850152911660e0830152517f90f48102eedb2c730d927626422cf5f8682e7bb86f1823247be82777f3b6ff29918190036101000190a1505050565b60008282028315806116bd57508284828115156116ba57fe5b04145b15156116c557fe5b9392505050565b60008082848115156116da57fe5b04949350505050565b6000828211156116ef57fe5b50900390565b6000602460ff6002840216430360001901404201066001019050919050565b61171c6119e4565b6000805b600460ff821610156117e05760005b60018260ff16600503038110156117d75784600182016005811061174f57fe5b602002015160ff1685826005811061176357fe5b602002015160ff1611156117cf5784816005811061177d57fe5b6020020151925084600182016005811061179357fe5b60200201518582600581106117a457fe5b60ff9092166020929092020152828560018301600581106117c157fe5b60ff90921660209290920201525b60010161172f565b50600101611720565b509192915050565b60006117f26119e4565b60006117fc6119e4565b600536141561194c5760005b3660ff821610156118615760003660ff831681811061182357fe5b9050013560f860020a900460f860020a0260f860020a9004828260ff1660058110151561184c57fe5b60ff9092166020929092020152600101611808565b5060005b60058160ff1610156118c25760018260ff83166005811061188257fe5b602002015160ff1610806118ac575060248260ff8316600581106118a257fe5b602002015160ff16115b156118ba57600192506118c2565b600101611865565b508115156119475760005b600460ff8216101561194557600181015b60058160ff161015611931578260ff8216600581106118f957fe5b602002015160ff16838360ff1660058110151561191257fe5b602002015160ff1614156119295760019350611931565b6001016118de565b50821561193d57611945565b6001016118cd565b505b611951565b600191505b90925090509091565b6101a060405190810160405280600081526020016119766119e4565b8152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600060ff1681525090565b6040805161012081018252600080825260208201529081016119d06119e4565b815260006020820181905260409091015290565b60a0604051908101604052806005906020820280388339509192915050565b600183019183908215611a865791602002820160005b83821115611a5757835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302611a19565b8015611a845782816101000a81549060ff0219169055600101602081600001049283019260010302611a57565b505b50611a92929150611a96565b5090565b6109c991905b80821115611a9257805460ff19168155600101611a9c56fea165627a7a723058202678bd26ccbe439886a099eddddfbd6aad067158b30ff77a7588711b9b2c3e290029"
}