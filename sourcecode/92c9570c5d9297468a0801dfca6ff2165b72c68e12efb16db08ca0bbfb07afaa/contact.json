{
  "address": "0x878d7ed5c194349f37b18688964e8db1eb0fcca1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MultiSigWallet",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "0",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-08\n*/\n\npragma solidity 0.4.15;\n\n\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\n/// @author Stefan George - <[emailÂ protected]>\ncontract MultiSigWallet {\n\n    /*\n     *  Events\n     */\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Revocation(address indexed sender, uint indexed transactionId);\n    event Submission(uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event Deposit(address indexed sender, uint value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint required);\n\n    /*\n     *  Constants\n     */\n    uint constant public MAX_OWNER_COUNT = 50;\n\n    /*\n     *  Storage\n     */\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] public owners;\n    uint public required;\n    uint public transactionCount;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n\n    /*\n     *  Modifiers\n     */\n    modifier onlyWallet() {\n        if (msg.sender != address(this))\n            throw;\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        if (isOwner[owner])\n            throw;\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        if (!isOwner[owner])\n            throw;\n        _;\n    }\n\n    modifier transactionExists(uint transactionId) {\n        if (transactions[transactionId].destination == 0)\n            throw;\n        _;\n    }\n\n    modifier confirmed(uint transactionId, address owner) {\n        if (!confirmations[transactionId][owner])\n            throw;\n        _;\n    }\n\n    modifier notConfirmed(uint transactionId, address owner) {\n        if (confirmations[transactionId][owner])\n            throw;\n        _;\n    }\n\n    modifier notExecuted(uint transactionId) {\n        if (transactions[transactionId].executed)\n            throw;\n        _;\n    }\n\n    modifier notNull(address _address) {\n        if (_address == 0)\n            throw;\n        _;\n    }\n\n    modifier validRequirement(uint ownerCount, uint _required) {\n        if (   ownerCount > MAX_OWNER_COUNT\n            || _required > ownerCount\n            || _required == 0\n            || ownerCount == 0)\n            throw;\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function()\n        payable\n    {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    /*\n     * Public functions\n     */\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function MultiSigWallet(address[] _owners, uint _required)\n        public\n        validRequirement(_owners.length, _required)\n    {\n        for (uint i=0; i<_owners.length; i++) {\n            if (isOwner[_owners[i]] || _owners[i] == 0)\n                throw;\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param newOwner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyWallet\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        OwnerRemoval(owner);\n        OwnerAddition(newOwner);\n    }\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        RequirementChange(_required);\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes data)\n        public\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction tx = transactions[transactionId];\n            tx.executed = true;\n            if (tx.destination.call.value(tx.value)(tx.data))\n                Execution(transactionId);\n            else {\n                ExecutionFailure(transactionId);\n                tx.executed = false;\n            }\n        }\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n    }\n\n    /*\n     * Internal functions\n     */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes data)\n        internal\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        Submission(transactionId);\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n    }\n\n    /// @dev Returns total number of transactions after filers are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n                count += 1;\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        constant\n        returns (address[])\n    {\n        return owners;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n        public\n        constant\n        returns (address[] _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        _confirmations = new address[](count);\n        for (i=0; i<count; i++)\n            _confirmations[i] = confirmationsTemp[i];\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n        public\n        constant\n        returns (uint[] _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n            {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        _transactionIds = new uint[](to - from);\n        for (i=from; i<to; i++)\n            _transactionIds[i - from] = transactionIdsTemp[i];\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"},{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"name\":\"_transactionIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_required\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"}]",
  "bytecode": "606060405234156200001057600080fd5b6040516200188838038062001888833981016040528080518201919060200180519150505b600082518260328211806200004957508181115b8062000053575080155b806200005d575081155b156200006857600080fd5b600092505b84518310156200013557600260008685815181106200008857fe5b90602001906020020151600160a060020a0316815260208101919091526040016000205460ff1680620000d85750848381518110620000c357fe5b90602001906020020151600160a060020a0316155b15620000e357600080fd5b600160026000878681518110620000f657fe5b90602001906020020151600160a060020a031681526020810191909152604001600020805460ff19169115159190911790555b6001909201916200006d565b60038580516200014a9291602001906200015d565b5060048490555b5b5050505050620001f8565b828054828255906000526020600020908101928215620001b7579160200282015b82811115620001b75782518254600160a060020a031916600160a060020a0391909116178255602092909201916001909101906200017e565b5b50620001c6929150620001ca565b5090565b620001f591905b80821115620001c6578054600160a060020a0319168155600101620001d1565b5090565b90565b61168080620002086000396000f300606060405236156101015763ffffffff60e060020a600035041663025e7c27811461014c578063173825d91461017e57806320ea8d861461019f5780632f54bf6e146101b75780633411c81c146101ea57806354741525146102205780637065cb481461024f578063784547a7146102705780638b51d13f1461029a5780639ace38c2146102c2578063a0e67e2b14610381578063a8abe69a146103e8578063b5dc40c31461045f578063b77bf600146104c9578063ba51a6df146104ee578063c01a8c8414610506578063c64274741461051e578063d74f8edd14610595578063dc8452cd146105ba578063e20056e6146105df578063ee22610b14610606575b5b60003411156101495733600160a060020a03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c3460405190815260200160405180910390a25b5b005b341561015757600080fd5b61016260043561061e565b604051600160a060020a03909116815260200160405180910390f35b341561018957600080fd5b610149600160a060020a0360043516610650565b005b34156101aa57600080fd5b6101496004356107ef565b005b34156101c257600080fd5b6101d6600160a060020a03600435166108d1565b604051901515815260200160405180910390f35b34156101f557600080fd5b6101d6600435600160a060020a03602435166108e6565b604051901515815260200160405180910390f35b341561022b57600080fd5b61023d60043515156024351515610906565b60405190815260200160405180910390f35b341561025a57600080fd5b610149600160a060020a0360043516610975565b005b341561027b57600080fd5b6101d6600435610a98565b604051901515815260200160405180910390f35b34156102a557600080fd5b61023d600435610b2c565b60405190815260200160405180910390f35b34156102cd57600080fd5b6102d8600435610bab565b604051600160a060020a03851681526020810184905281151560608201526080604082018181528454600260001961010060018416150201909116049183018290529060a08301908590801561036f5780601f106103445761010080835404028352916020019161036f565b820191906000526020600020905b81548152906001019060200180831161035257829003601f168201915b50509550505050505060405180910390f35b341561038c57600080fd5b610394610bdf565b60405160208082528190810183818151815260200191508051906020019060200280838360005b838110156103d45780820151818401525b6020016103bb565b505050509050019250505060405180910390f35b34156103f357600080fd5b61039460043560243560443515156064351515610c48565b60405160208082528190810183818151815260200191508051906020019060200280838360005b838110156103d45780820151818401525b6020016103bb565b505050509050019250505060405180910390f35b341561046a57600080fd5b610394600435610d76565b60405160208082528190810183818151815260200191508051906020019060200280838360005b838110156103d45780820151818401525b6020016103bb565b505050509050019250505060405180910390f35b34156104d457600080fd5b61023d610ef8565b60405190815260200160405180910390f35b34156104f957600080fd5b610149600435610efe565b005b341561051157600080fd5b610149600435610f8c565b005b341561052957600080fd5b61023d60048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061107e95505050505050565b60405190815260200160405180910390f35b34156105a057600080fd5b61023d61109e565b60405190815260200160405180910390f35b34156105c557600080fd5b61023d6110a3565b60405190815260200160405180910390f35b34156105ea57600080fd5b610149600160a060020a03600435811690602435166110a9565b005b341561061157600080fd5b610149600435611246565b005b600380548290811061062c57fe5b906000526020600020900160005b915054906101000a9004600160a060020a031681565b600030600160a060020a031633600160a060020a031614151561067257600080fd5b600160a060020a038216600090815260026020526040902054829060ff16151561069b57600080fd5b600160a060020a0383166000908152600260205260408120805460ff1916905591505b600354600019018210156107965782600160a060020a03166003838154811015156106e557fe5b906000526020600020900160005b9054906101000a9004600160a060020a0316600160a060020a0316141561078a5760038054600019810190811061072657fe5b906000526020600020900160005b9054906101000a9004600160a060020a031660038381548110151561075557fe5b906000526020600020900160005b6101000a815481600160a060020a030219169083600160a060020a03160217905550610796565b5b6001909101906106be565b6003805460001901906107a990826114fc565b5060035460045411156107c2576003546107c290610efe565b5b82600160a060020a031660008051602061163583398151915260405160405180910390a25b5b505b5050565b33600160a060020a03811660009081526002602052604090205460ff16151561081757600080fd5b600082815260016020908152604080832033600160a060020a038116855292529091205483919060ff16151561084c57600080fd5b600084815260208190526040902060030154849060ff161561086d57600080fd5b6000858152600160209081526040808320600160a060020a033316808552925291829020805460ff1916905586917ff6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9905160405180910390a35b5b505b50505b5050565b60026020526000908152604090205460ff1681565b600160209081526000928352604080842090915290825290205460ff1681565b6000805b60055481101561096d57838015610933575060008181526020819052604090206003015460ff16155b806109575750828015610957575060008181526020819052604090206003015460ff165b5b15610964576001820191505b5b60010161090a565b5b5092915050565b30600160a060020a031633600160a060020a031614151561099557600080fd5b600160a060020a038116600090815260026020526040902054819060ff16156109bd57600080fd5b81600160a060020a03811615156109d357600080fd5b60038054905060010160045460328211806109ed57508181115b806109f6575080155b806109ff575081155b15610a0957600080fd5b600160a060020a0385166000908152600260205260409020805460ff191660019081179091556003805490918101610a4183826114fc565b916000526020600020900160005b8154600160a060020a03808a166101009390930a83810291021990911617909155905060008051602061161583398151915260405160405180910390a25b5b50505b505b505b50565b600080805b600354811015610b245760008481526001602052604081206003805491929184908110610ac657fe5b906000526020600020900160005b9054600160a060020a036101009290920a900416815260208101919091526040016000205460ff1615610b08576001820191505b600454821415610b1b5760019250610b24565b5b600101610a9d565b5b5050919050565b6000805b600354811015610ba45760008381526001602052604081206003805491929184908110610b5957fe5b906000526020600020900160005b9054600160a060020a036101009290920a900416815260208101919091526040016000205460ff1615610b9b576001820191505b5b600101610b30565b5b50919050565b6000602081905290815260409020805460018201546003830154600160a060020a0390921692909160029091019060ff1684565b610be7611550565b6003805480602002602001604051908101604052809291908181526020018280548015610c3d57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610c1f575b505050505090505b90565b610c50611550565b610c58611550565b600080600554604051805910610c6b5750595b908082528060200260200182016040525b50925060009150600090505b600554811015610d0357858015610cb1575060008181526020819052604090206003015460ff16155b80610cd55750848015610cd5575060008181526020819052604090206003015460ff165b5b15610cfa5780838381518110610ce857fe5b60209081029091010152600191909101905b5b600101610c88565b878703604051805910610d135750595b908082528060200260200182016040525b5093508790505b86811015610d6a57828181518110610d3f57fe5b906020019060200201518489830381518110610d5757fe5b602090810290910101525b600101610d2b565b5b505050949350505050565b610d7e611550565b610d86611550565b6003546000908190604051805910610d9b5750595b908082528060200260200182016040525b50925060009150600090505b600354811015610e7e5760008581526001602052604081206003805491929184908110610de157fe5b906000526020600020900160005b9054600160a060020a036101009290920a900416815260208101919091526040016000205460ff1615610e75576003805482908110610e2a57fe5b906000526020600020900160005b9054906101000a9004600160a060020a0316838381518110610e5657fe5b600160a060020a03909216602092830290910190910152600191909101905b5b600101610db8565b81604051805910610e8c5750595b908082528060200260200182016040525b509350600090505b81811015610eef57828181518110610eb957fe5b90602001906020020151848281518110610ecf57fe5b600160a060020a039092166020928302909101909101525b600101610ea5565b5b505050919050565b60055481565b30600160a060020a031633600160a060020a0316141515610f1e57600080fd5b600354816032821180610f3057508181115b80610f39575080155b80610f42575081155b15610f4c57600080fd5b60048390557fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a8360405190815260200160405180910390a15b5b50505b50565b33600160a060020a03811660009081526002602052604090205460ff161515610fb457600080fd5b6000828152602081905260409020548290600160a060020a03161515610fd957600080fd5b600083815260016020908152604080832033600160a060020a038116855292529091205484919060ff161561100d57600080fd5b6000858152600160208181526040808420600160a060020a033316808652925292839020805460ff191690921790915586917f4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef905160405180910390a36108c785611246565b5b5b50505b505b5050565b600061108b84848461140a565b905061109681610f8c565b5b9392505050565b603281565b60045481565b600030600160a060020a031633600160a060020a03161415156110cb57600080fd5b600160a060020a038316600090815260026020526040902054839060ff1615156110f457600080fd5b600160a060020a038316600090815260026020526040902054839060ff161561111c57600080fd5b600092505b6003548310156111c45784600160a060020a031660038481548110151561114457fe5b906000526020600020900160005b9054906101000a9004600160a060020a0316600160a060020a031614156111b8578360038481548110151561118357fe5b906000526020600020900160005b6101000a815481600160a060020a030219169083600160a060020a031602179055506111c4565b5b600190920191611121565b600160a060020a03808616600081815260026020526040808220805460ff19908116909155938816825290819020805490931660011790925590600080516020611635833981519152905160405180910390a283600160a060020a031660008051602061161583398151915260405160405180910390a25b5b505b505b505050565b33600160a060020a03811660009081526002602052604081205490919060ff16151561127157600080fd5b600083815260016020908152604080832033600160a060020a038116855292529091205484919060ff1615156112a657600080fd5b600085815260208190526040902060030154859060ff16156112c757600080fd5b6112d086610a98565b156113fd576000868152602081905260409081902060038101805460ff19166001908117909155815490820154919750600160a060020a03169160028801905180828054600181600116156101000203166002900480156113725780601f1061134757610100808354040283529160200191611372565b820191906000526020600020905b81548152906001019060200180831161135557829003601f168201915b505091505060006040518083038185876187965a03f192505050156113c357857f33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed7560405160405180910390a26113fd565b857f526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b7923660405160405180910390a260038501805460ff191690555b5b5b5b505b50505b505050565b600083600160a060020a038116151561142257600080fd5b600554915060806040519081016040908152600160a060020a03871682526020808301879052818301869052600060608401819052858152908190522081518154600160a060020a031916600160a060020a0391909116178155602082015181600101556040820151816002019080516114a0929160200190611574565b506060820151600391909101805460ff191691151591909117905550600580546001019055817fc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e5160405160405180910390a25b5b509392505050565b8154818355818115116107e8576000838152602090206107e89181019083016115f3565b5b505050565b8154818355818115116107e8576000838152602090206107e89181019083016115f3565b5b505050565b60206040519081016040526000815290565b60206040519081016040526000815290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106115b557805160ff19168380011785556115e2565b828001600101855582156115e2579182015b828111156115e25782518255916020019190600101906115c7565b5b506115ef9291506115f3565b5090565b610c4591905b808211156115ef57600081556001016115f9565b5090565b905600f39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90a165627a7a72305820ea0b6c3c01737c35e67abe79bd77b3aaa166922650db61a4d8ce4591c81d075a002900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000054d9249c776c56520a62faecb87a00e105e8c9dc0000000000000000000000003edf8f72ae06694be8f1b86d8c92902f8fdd1285",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000054d9249c776c56520a62faecb87a00e105e8c9dc0000000000000000000000003EDf8F72ae06694BE8F1B86D8C92902f8fDD1285"
}