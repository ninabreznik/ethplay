{
  "address": "0xc9ca68b489706cd31fb888bd771e3c4dd84251ae",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ProofBox",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-20\n*/\n\npragma solidity ^0.5.2;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n/** @title ProofBox. */\ncontract ProofBox is Ownable, Pausable {\n\n    struct Device {\n      uint index;\n      address deviceOwner;\n      address txOriginator;\n\n    }\n\n    mapping (bytes32 => Device) private deviceMap;\n    mapping (address => bool) public authorized;\n    bytes32[] public deviceIds;\n\n\n\n    event deviceCreated(bytes32 indexed deviceId, address indexed deviceOwner);\n    event txnCreated(bytes32 indexed deviceId, address indexed txnOriginator);\n    event deviceProof(bytes32 indexed deviceId, address indexed deviceOwner);\n    event deviceTransfer(bytes32 indexed deviceId, address indexed fromOwner, address indexed toOwner);\n    event deviceMessage(bytes32 indexed deviceId, address indexed deviceOwner, address indexed txnOriginator, string messageToWrite);\n    event deviceDestruct(bytes32 indexed deviceId, address indexed deviceOwner);\n    event ipfsHashtoAddress(bytes32 indexed deviceId, address indexed ownerAddress, string ipfskey);\n\n\n\n    /** @dev Checks to see if device exist\n      * @param _deviceId ID of the device.\n      * @return isIndeed True if the device ID exists.\n      */\n    function isDeviceId(bytes32 _deviceId)\n       public\n       view\n       returns(bool isIndeed)\n     {\n       if(deviceIds.length == 0) return false;\n       return (deviceIds[deviceMap[_deviceId].index] == _deviceId);\n     }\n\n    /** @dev returns the index of stored deviceID\n      * @param _deviceId ID of the device.\n      * @return _index index of the device.\n      */\n    function getDeviceId(bytes32 _deviceId)\n       public\n       view\n       deviceIdExist(_deviceId)\n       returns(uint _index)\n     {\n       return deviceMap[_deviceId].index;\n     }\n\n     /** @dev returns address of device owner\n       * @param _deviceId ID of the device.\n       * @return deviceOwner device owner's address\n       */\n      function getOwnerByDevice(bytes32 _deviceId)\n           public\n           view\n           returns (address deviceOwner){\n\n               return deviceMap[_deviceId].deviceOwner;\n\n      }\n\n      /** @dev returns up to 10 devices for the device owner\n        * @return _deviceIds device ID's of the owner\n        */\n      function getDevicesByOwner(bytes32 _message, uint8 _v, bytes32 _r, bytes32 _s)\n              public\n              view\n              returns(bytes32[10] memory _deviceIds) {\n\n          address signer = ecrecover(_message, _v, _r, _s);\n          uint numDevices;\n          bytes32[10] memory devicesByOwner;\n\n          for(uint i = 0; i < deviceIds.length; i++) {\n\n              if(addressEqual(deviceMap[deviceIds[i]].deviceOwner,signer)) {\n\n                  devicesByOwner[numDevices] = deviceIds[i];\n                  if (numDevices == 10) {\n                    break;\n                  }\n                  numDevices++;\n\n              }\n\n          }\n\n          return devicesByOwner;\n      }\n\n      /** @dev returns up to 10 transactions of device owner\n        * @return _deviceIds device ID's of the msg.sender transactions\n        */\n      function getDevicesByTxn(bytes32 _message, uint8 _v, bytes32 _r, bytes32 _s)\n              public\n              view\n              returns(bytes32[10] memory _deviceIds) {\n\n          address signer = ecrecover(_message, _v, _r, _s);\n          uint numDevices;\n          bytes32[10] memory devicesByTxOriginator;\n\n          for(uint i = 0; i < deviceIds.length; i++) {\n\n              if(addressEqual(deviceMap[deviceIds[i]].txOriginator,signer)) {\n\n                  devicesByTxOriginator[numDevices] = deviceIds[i];\n                  if (numDevices == 10) {\n                    break;\n                  }\n                  numDevices++;\n\n              }\n\n          }\n\n          return devicesByTxOriginator;\n      }\n\n\n      modifier deviceIdExist(bytes32 _deviceId){\n          require(isDeviceId(_deviceId));\n          _;\n      }\n\n      modifier deviceIdNotExist(bytes32 _deviceId){\n          require(!isDeviceId(_deviceId));\n          _;\n      }\n\n      modifier authorizedUser() {\n          require(authorized[msg.sender] == true);\n          _;\n      }\n\n      constructor() public {\n\n          authorized[msg.sender]=true;\n      }\n\n\n    /** @dev when a new device ID is registered by a proxy owner by sending device owner signature\n      * @param _deviceId ID of the device.\n      * @return index of stored device\n      */\n    function registerProof (bytes32 _deviceId, bytes32 _message, uint8 _v, bytes32 _r, bytes32 _s)\n         public\n         whenNotPaused()\n         authorizedUser()\n         deviceIdNotExist(_deviceId)\n         returns(uint index) {\n\n            address signer = ecrecover(_message, _v, _r, _s);\n\n            deviceMap[_deviceId].deviceOwner = signer;\n            deviceMap[_deviceId].txOriginator = signer;\n            deviceMap[_deviceId].index = deviceIds.push(_deviceId)-1;\n\n            emit deviceCreated(_deviceId, signer);\n\n            return deviceIds.length-1;\n\n    }\n\n    /** @dev returns true if delete is successful\n      * @param _deviceId ID of the device.\n      * @return bool delete\n      */\n    function destructProof(bytes32 _deviceId, bytes32 _message, uint8 _v, bytes32 _r, bytes32 _s)\n            public\n            whenNotPaused()\n            authorizedUser()\n            deviceIdExist(_deviceId)\n            returns(bool success) {\n\n                address signer = ecrecover(_message, _v, _r, _s);\n\n                require(deviceMap[_deviceId].deviceOwner == signer);\n\n                uint rowToDelete = deviceMap[_deviceId].index;\n                bytes32 keyToMove = deviceIds[deviceIds.length-1];\n                deviceIds[rowToDelete] = keyToMove;\n                deviceMap[keyToMove].index = rowToDelete;\n                deviceIds.length--;\n\n                emit deviceDestruct(_deviceId, signer);\n                return true;\n\n    }\n\n    /** @dev returns request transfer of device\n      * @param _deviceId ID of the device.\n      * @return index of stored device\n      */\n    function requestTransfer(bytes32 _deviceId, bytes32 _message, uint8 _v, bytes32 _r, bytes32 _s)\n          public\n          whenNotPaused()\n          deviceIdExist(_deviceId)\n          authorizedUser()\n          returns(uint index) {\n\n            address signer = ecrecover(_message, _v, _r, _s);\n\n            deviceMap[_deviceId].txOriginator=signer;\n\n            emit txnCreated(_deviceId, signer);\n\n            return deviceMap[_deviceId].index;\n\n    }\n\n    /** @dev returns approve transfer of device\n      * @param _deviceId ID of the device.\n      * @return bool approval\n      */\n    function approveTransfer (bytes32 _deviceId, address newOwner, bytes32 _message, uint8 _v, bytes32 _r, bytes32 _s)\n            public\n            whenNotPaused()\n            deviceIdExist(_deviceId)\n            authorizedUser()\n            returns(bool) {\n\n                address signer = ecrecover(_message, _v, _r, _s);\n\n                require(deviceMap[_deviceId].deviceOwner == signer);\n                require(deviceMap[_deviceId].txOriginator == newOwner);\n\n                deviceMap[_deviceId].deviceOwner=newOwner;\n\n                emit deviceTransfer(_deviceId, signer, deviceMap[_deviceId].deviceOwner);\n\n                return true;\n\n    }\n\n    /** @dev returns write message success\n      * @param _deviceId ID of the device.\n      * @return bool true when write message is successful\n      */\n    function writeMessage (bytes32 _deviceId, string memory messageToWrite, bytes32 _message, uint8 _v, bytes32 _r, bytes32 _s)\n            public\n            whenNotPaused()\n            deviceIdExist(_deviceId)\n            authorizedUser()\n            returns(bool) {\n                address signer = ecrecover(_message, _v, _r, _s);\n                require(deviceMap[_deviceId].deviceOwner == signer);\n                emit deviceMessage(_deviceId, deviceMap[_deviceId].deviceOwner, signer, messageToWrite);\n\n                return true;\n\n    }\n\n    /** @dev returns request proof of device\n      * @param _deviceId ID of the device.\n      * @return _index info of that device\n      */\n     function requestProof(bytes32 _deviceId, bytes32 _message, uint8 _v, bytes32 _r, bytes32 _s)\n         public\n         whenNotPaused()\n         deviceIdExist(_deviceId)\n         authorizedUser()\n         returns(uint _index) {\n\n             address signer = ecrecover(_message, _v, _r, _s);\n\n             deviceMap[_deviceId].txOriginator=signer;\n\n             emit txnCreated(_deviceId, signer);\n\n             return deviceMap[_deviceId].index;\n     }\n\n\n     /** @dev returns approve proof of device\n       * @param _deviceId ID of the device.\n       * @return bool  - approval\n       */\n     function approveProof(bytes32 _deviceId, bytes32 _message, uint8 _v, bytes32 _r, bytes32 _s)\n             public\n             whenNotPaused()\n             deviceIdExist(_deviceId)\n             authorizedUser()\n             returns(bool) {\n\n                  address signer = ecrecover(_message, _v, _r, _s);\n                  deviceMap[_deviceId].txOriginator=signer;\n                  require(deviceMap[_deviceId].deviceOwner == signer);\n\n                  emit deviceProof(_deviceId, signer);\n                  return true;\n     }\n\n     /** @dev updates IPFS hash into device owner public address\n       * @param ipfskey -  ipfs hash for attachment.\n       */\n     function emitipfskey(bytes32 _deviceId, address ownerAddress, string memory ipfskey)\n              public\n              whenNotPaused()\n              deviceIdExist(_deviceId)\n              authorizedUser() {\n        emit ipfsHashtoAddress(_deviceId, ownerAddress, ipfskey);\n    }\n\n    /** @dev Updates Authorization status of an address for executing functions\n    * on this contract\n    * @param target Address that will be authorized or not authorized\n    * @param isAuthorized New authorization status of address\n    */\n    function changeAuthStatus(address target, bool isAuthorized)\n            public\n            whenNotPaused()\n            onlyOwner() {\n\n              authorized[target] = isAuthorized;\n    }\n\n    /** @dev Updates Authorization status of an address for executing functions\n    * on this contract\n    * @param targets Address that will be authorized or not authorized in bulk\n    * @param isAuthorized New registration status of address\n    */\n    function changeAuthStatuses(address[] memory targets, bool isAuthorized)\n            public\n            whenNotPaused()\n            onlyOwner() {\n              for (uint i = 0; i < targets.length; i++) {\n                changeAuthStatus(targets[i], isAuthorized);\n              }\n    }\n\n    /*\n        NOTE: We explicitly do not define a fallback function, because there are\n        no ethers received by any funtion on this contract\n\n    */\n\n    //Helper Functions\n\n    /** @dev compares two String equal or not\n      * @param a first string, b second string.\n      * @return bool true if match\n      */\n    function bytesEqual(bytes32 a, bytes32 b) private pure returns (bool) {\n       return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\n     }\n\n   /** @dev compares two address equal or not\n     * @param a first address, b second address.\n     * @return bool true if match\n     */\n   function addressEqual(address a, address b) private pure returns (bool) {\n      return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_deviceId\",\"type\":\"bytes32\"}],\"name\":\"getDeviceId\",\"outputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targets\",\"type\":\"address[]\"},{\"name\":\"isAuthorized\",\"type\":\"bool\"}],\"name\":\"changeAuthStatuses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"isAuthorized\",\"type\":\"bool\"}],\"name\":\"changeAuthStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deviceId\",\"type\":\"bytes32\"},{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"ipfskey\",\"type\":\"string\"}],\"name\":\"emitipfskey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_deviceId\",\"type\":\"bytes32\"}],\"name\":\"isDeviceId\",\"outputs\":[{\"name\":\"isIndeed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deviceId\",\"type\":\"bytes32\"},{\"name\":\"_message\",\"type\":\"bytes32\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"approveProof\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_deviceId\",\"type\":\"bytes32\"}],\"name\":\"getOwnerByDevice\",\"outputs\":[{\"name\":\"deviceOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_message\",\"type\":\"bytes32\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"getDevicesByOwner\",\"outputs\":[{\"name\":\"_deviceIds\",\"type\":\"bytes32[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deviceId\",\"type\":\"bytes32\"},{\"name\":\"_message\",\"type\":\"bytes32\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"requestTransfer\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_message\",\"type\":\"bytes32\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"getDevicesByTxn\",\"outputs\":[{\"name\":\"_deviceIds\",\"type\":\"bytes32[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deviceId\",\"type\":\"bytes32\"},{\"name\":\"messageToWrite\",\"type\":\"string\"},{\"name\":\"_message\",\"type\":\"bytes32\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"writeMessage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deviceId\",\"type\":\"bytes32\"},{\"name\":\"_message\",\"type\":\"bytes32\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"requestProof\",\"outputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deviceIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deviceId\",\"type\":\"bytes32\"},{\"name\":\"newOwner\",\"type\":\"address\"},{\"name\":\"_message\",\"type\":\"bytes32\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"approveTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deviceId\",\"type\":\"bytes32\"},{\"name\":\"_message\",\"type\":\"bytes32\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"registerProof\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deviceId\",\"type\":\"bytes32\"},{\"name\":\"_message\",\"type\":\"bytes32\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"destructProof\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"deviceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"deviceOwner\",\"type\":\"address\"}],\"name\":\"deviceCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"deviceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"txnOriginator\",\"type\":\"address\"}],\"name\":\"txnCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"deviceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"deviceOwner\",\"type\":\"address\"}],\"name\":\"deviceProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"deviceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"fromOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toOwner\",\"type\":\"address\"}],\"name\":\"deviceTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"deviceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"deviceOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"txnOriginator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"messageToWrite\",\"type\":\"string\"}],\"name\":\"deviceMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"deviceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"deviceOwner\",\"type\":\"address\"}],\"name\":\"deviceDestruct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"deviceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ipfskey\",\"type\":\"string\"}],\"name\":\"ipfsHashtoAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3620000e83362000161640100000000026401000000009004565b6000600260006101000a81548160ff0219169083151502179055506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555062000323565b62000185816001620001cb6401000000000262002823179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156200020857600080fd5b6200022382826200028e640100000000026401000000009004565b1515156200023057600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515620002cc57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61297480620003336000396000f3fe608060405234801561001057600080fd5b50600436106101c6576000357c0100000000000000000000000000000000000000000000000000000000900480638f32d59b11610116578063cc033168116100b4578063dfc4199a1161008e578063dfc4199a14610a17578063e48f686514610aa8578063f2fde38b14610b15578063ff01339414610b59576101c6565b8063cc03316814610860578063cefabc2a14610968578063d4ad82fe146109d5576101c6565b8063b1422f73116100f0578063b1422f7314610681578063b47249bc1461070c578063b918161114610779578063c8ed6705146107d5576101c6565b80638f32d59b1461058057806396e3807d146105a25780639763b67914610613576101c6565b80636ef8d66d1161018357806382dc1ec41161015d57806382dc1ec4146104a2578063838e8364146104e65780638456cb591461052c5780638da5cb5b14610536576101c6565b80636ef8d66d146103a9578063715018a6146103b35780637191451e146103bd576101c6565b806304c696d3146101cb5780633f4ba83a1461020d57806346fbf68e146102175780635143c51c146102735780635c975abb146103375780635d3579ba14610359575b600080fd5b6101f7600480360360208110156101e157600080fd5b8101908080359060200190929190505050610bca565b6040518082815260200191505060405180910390f35b610215610c00565b005b6102596004803603602081101561022d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610caf565b604051808215151515815260200191505060405180910390f35b6103356004803603604081101561028957600080fd5b81019080803590602001906401000000008111156102a657600080fd5b8201836020820111156102b857600080fd5b803590602001918460208302840111640100000000831117156102da57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803515159060200190929190505050610ccc565b005b61033f610d3d565b604051808215151515815260200191505060405180910390f35b6103a76004803603604081101561036f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610d54565b005b6103b1610dde565b005b6103bb610de9565b005b6104a0600480360360608110156103d357600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561041a57600080fd5b82018360208201111561042c57600080fd5b8035906020019184600183028401116401000000008311171561044e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610ebb565b005b6104e4600480360360208110156104b857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611005565b005b610512600480360360208110156104fc57600080fd5b8101908080359060200190929190505050611025565b604051808215151515815260200191505060405180910390f35b610534611077565b005b61053e611127565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610588611150565b604051808215151515815260200191505060405180910390f35b6105f9600480360360a08110156105b857600080fd5b810190808035906020019092919080359060200190929190803560ff16906020019092919080359060200190929190803590602001909291905050506111a7565b604051808215151515815260200191505060405180910390f35b61063f6004803603602081101561062957600080fd5b81019080803590602001909291905050506113bc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106ce6004803603608081101561069757600080fd5b8101908080359060200190929190803560ff16906020019092919080359060200190929190803590602001909291905050506113fc565b6040518082600a60200280838360005b838110156106f95780820151818401526020810190506106de565b5050505090500191505060405180910390f35b610763600480360360a081101561072257600080fd5b810190808035906020019092919080359060200190929190803560ff169060200190929190803590602001909291908035906020019092919050505061154e565b6040518082815260200191505060405180910390f35b6107bb6004803603602081101561078f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611708565b604051808215151515815260200191505060405180910390f35b610822600480360360808110156107eb57600080fd5b8101908080359060200190929190803560ff1690602001909291908035906020019092919080359060200190929190505050611728565b6040518082600a60200280838360005b8381101561084d578082015181840152602081019050610832565b5050505090500191505060405180910390f35b61094e600480360360c081101561087657600080fd5b81019080803590602001909291908035906020019064010000000081111561089d57600080fd5b8201836020820111156108af57600080fd5b803590602001918460018302840111640100000000831117156108d157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190803560ff169060200190929190803590602001909291908035906020019092919050505061187a565b604051808215151515815260200191505060405180910390f35b6109bf600480360360a081101561097e57600080fd5b810190808035906020019092919080359060200190929190803560ff1690602001909291908035906020019092919080359060200190929190505050611af8565b6040518082815260200191505060405180910390f35b610a01600480360360208110156109eb57600080fd5b8101908080359060200190929190505050611cb2565b6040518082815260200191505060405180910390f35b610a8e600480360360c0811015610a2d57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803560ff1690602001909291908035906020019092919080359060200190929190505050611cd5565b604051808215151515815260200191505060405180910390f35b610aff600480360360a0811015610abe57600080fd5b810190808035906020019092919080359060200190929190803560ff1690602001909291908035906020019092919080359060200190929190505050611fa8565b6040518082815260200191505060405180910390f35b610b5760048036036020811015610b2b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506121f2565b005b610bb0600480360360a0811015610b6f57600080fd5b810190808035906020019092919080359060200190929190803560ff1690602001909291908035906020019092919080359060200190929190505050612211565b604051808215151515815260200191505060405180910390f35b600081610bd681611025565b1515610be157600080fd5b6003600084815260200190815260200160002060000154915050919050565b610c0933610caf565b1515610c1457600080fd5b600260009054906101000a900460ff161515610c2f57600080fd5b6000600260006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000610cc582600161246390919063ffffffff16565b9050919050565b600260009054906101000a900460ff16151515610ce857600080fd5b610cf0611150565b1515610cfb57600080fd5b60008090505b8251811015610d3857610d2b8382815181101515610d1b57fe5b9060200190602002015183610d54565b8080600101915050610d01565b505050565b6000600260009054906101000a900460ff16905090565b600260009054906101000a900460ff16151515610d7057600080fd5b610d78611150565b1515610d8357600080fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b610de7336124f7565b565b610df1611150565b1515610dfc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900460ff16151515610ed757600080fd5b82610ee181611025565b1515610eec57600080fd5b60011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610f4b57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff16847f8072b64dde2ab03669a77f6b67b184668e551474e1837a5811e509ee487ed9b6846040518080602001828103825283818151815260200191508051906020019080838360005b83811015610fc5578082015181840152602081019050610faa565b50505050905090810190601f168015610ff25780820380516001836020036101000a031916815260200191505b509250505060405180910390a350505050565b61100e33610caf565b151561101957600080fd5b61102281612551565b50565b600080600580549050141561103d5760009050611072565b816005600360008581526020019081526020016000206000015481548110151561106357fe5b90600052602060002001541490505b919050565b61108033610caf565b151561108b57600080fd5b600260009054906101000a900460ff161515156110a757600080fd5b6001600260006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6000600260009054906101000a900460ff161515156111c557600080fd5b856111cf81611025565b15156111da57600080fd5b60011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561123957600080fd5b600060018787878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611298573d6000803e3d6000fd5b50505060206040510351905080600360008a815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600360008a815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561136957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16887fd1bf83d9903a29ef5c9bc17c68b9557c1ffa43130a825671673df082f95b61ab60405160405180910390a360019250505095945050505050565b60006003600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6114046128d3565b600060018686868660405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611463573d6000803e3d6000fd5b50505060206040510351905060006114796128d3565b60008090505b60058054905081101561153f576114e5600360006005848154811015156114a257fe5b9060005260206000200154815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856125ab565b15611532576005818154811015156114f957fe5b90600052602060002001548284600a8110151561151257fe5b602002018181525050600a8314156115295761153f565b82806001019350505b808060010191505061147f565b50809350505050949350505050565b6000600260009054906101000a900460ff1615151561156c57600080fd5b8561157681611025565b151561158157600080fd5b60011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156115e057600080fd5b600060018787878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561163f573d6000803e3d6000fd5b50505060206040510351905080600360008a815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16887fa66b6bd48543614fba2ba0d84e2aa2beddfbedb83a73731e9822be6bbe57386c60405160405180910390a360036000898152602001908152602001600020600001549250505095945050505050565b60046020528060005260406000206000915054906101000a900460ff1681565b6117306128d3565b600060018686868660405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561178f573d6000803e3d6000fd5b50505060206040510351905060006117a56128d3565b60008090505b60058054905081101561186b57611811600360006005848154811015156117ce57fe5b9060005260206000200154815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856125ab565b1561185e5760058181548110151561182557fe5b90600052602060002001548284600a8110151561183e57fe5b602002018181525050600a8314156118555761186b565b82806001019350505b80806001019150506117ab565b50809350505050949350505050565b6000600260009054906101000a900460ff1615151561189857600080fd5b866118a281611025565b15156118ad57600080fd5b60011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561190c57600080fd5b600060018787878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561196b573d6000803e3d6000fd5b5050506020604051035190508073ffffffffffffffffffffffffffffffffffffffff16600360008b815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156119e757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360008b815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168a7f76d2d1b3eb6f635b457d105d529da913a8f2fd85111bd41a19b196b8e51778988b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015611aae578082015181840152602081019050611a93565b50505050905090810190601f168015611adb5780820380516001836020036101000a031916815260200191505b509250505060405180910390a46001925050509695505050505050565b6000600260009054906101000a900460ff16151515611b1657600080fd5b85611b2081611025565b1515611b2b57600080fd5b60011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611b8a57600080fd5b600060018787878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611be9573d6000803e3d6000fd5b50505060206040510351905080600360008a815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16887fa66b6bd48543614fba2ba0d84e2aa2beddfbedb83a73731e9822be6bbe57386c60405160405180910390a360036000898152602001908152602001600020600001549250505095945050505050565b600581815481101515611cc157fe5b906000526020600020016000915090505481565b6000600260009054906101000a900460ff16151515611cf357600080fd5b86611cfd81611025565b1515611d0857600080fd5b60011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611d6757600080fd5b600060018787878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611dc6573d6000803e3d6000fd5b5050506020604051035190508073ffffffffffffffffffffffffffffffffffffffff16600360008b815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611e4257600080fd5b8773ffffffffffffffffffffffffffffffffffffffff16600360008b815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611eb257600080fd5b87600360008b815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360008a815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff168a7f238e4a5fb8c8ff40169885c38af8c7e56955571f96d6a8dcdfcb543f7a1effe160405160405180910390a46001925050509695505050505050565b6000600260009054906101000a900460ff16151515611fc657600080fd5b60011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561202557600080fd5b8561202f81611025565b15151561203b57600080fd5b600060018787878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561209a573d6000803e3d6000fd5b50505060206040510351905080600360008a815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360008a815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016005899080600181540180825580915050906001820390600052602060002001600090919290919091505503600360008a8152602001908152602001600020600001819055508073ffffffffffffffffffffffffffffffffffffffff16887f638ba8e15de669b2e50eb0eb530f5dadecf3f694d059eb864fe984edd173a98f60405160405180910390a36001600580549050039250505095945050505050565b6121fa611150565b151561220557600080fd5b61220e8161267a565b50565b6000600260009054906101000a900460ff1615151561222f57600080fd5b60011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561228e57600080fd5b8561229881611025565b15156122a357600080fd5b600060018787878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015612302573d6000803e3d6000fd5b5050506020604051035190508073ffffffffffffffffffffffffffffffffffffffff16600360008a815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561237e57600080fd5b6000600360008a8152602001908152602001600020600001549050600060056001600580549050038154811015156123b257fe5b90600052602060002001549050806005838154811015156123cf57fe5b9060005260206000200181905550816003600083815260200190815260200160002060000181905550600580548091906001900361240d91906128f7565b508273ffffffffffffffffffffffffffffffffffffffff168a7f54a15ff4397713106f7231f647e7f8d5bb8ce85e08bbd0a659112ca7d417781b60405160405180910390a3600194505050505095945050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156124a057600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61250b81600161277490919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b61256581600161282390919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b600081604051602001808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019150506040516020818303038152906040528051906020012083604051602001808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019150506040516020818303038152906040528051906020012014905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156126b657600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156127b057600080fd5b6127ba8282612463565b15156127c557600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561285f57600080fd5b6128698282612463565b15151561287557600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b61014060405190810160405280600a90602082028038833980820191505090505090565b81548183558181111561291e5781836000526020600020918201910161291d9190612923565b5b505050565b61294591905b80821115612941576000816000905550600101612929565b5090565b9056fea165627a7a723058203ce487d1fd3cb9a0486af6808f689c5baf6c742d940e6cfcc5be00df74516a630029"
}