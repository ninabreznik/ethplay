{
  "address": "0x5b9d3126353e3d4a2fc2a0fdd7c131cb0faeb17b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PermanentTeamVesting",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-20\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * Math operations with safety checks that throw on overflows.\n */\nlibrary SafeMath {\n\n    function mul (uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b);\n        return c;\n    }\n    \n    function div (uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n    \n    function sub (uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add (uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n}\n\ncontract ERC20TokenInterface {\n\n    function totalSupply () external constant returns (uint);\n    function balanceOf (address tokenOwner) external constant returns (uint balance);\n    function transfer (address to, uint tokens) external returns (bool success);\n    function transferFrom (address from, address to, uint tokens) external returns (bool success);\n\n}\n\n/**\n * @title Team Vesting\n * You can check how many tokens you can withdraw from this smart contract by calling\n * `releasableAmount` function. If you want to withdraw these tokens, create a transaction\n * to a `release` function, specifying your account address as an argument.\n */\ncontract PermanentTeamVesting {\n\n    using SafeMath for uint256;\n\n    event Released(address beneficiary, uint256 amount);\n\n    struct Beneficiary {\n        uint256 start;\n        uint256 duration;\n        uint256 cliff;\n        uint256 totalAmount;\n        uint256 releasedAmount;\n    }\n\n    mapping (address => Beneficiary) public beneficiary;\n    ERC20TokenInterface public token;\n\n    modifier isVestedAccount (address account) { require(beneficiary[account].start != 0); _; }\n    modifier isNotVestedAccount (address account) { require(beneficiary[account].start == 0); _; }\n\n    /**\n    * Token vesting.\n    */\n    constructor (ERC20TokenInterface tokenAddress) public {\n        require(tokenAddress != address(0));\n        token = tokenAddress;\n    }\n\n    /**\n    * Calculates the releaseable amount of tokens at the current time.\n    * @param account Vested account\n    * @return Amount in decimals\n    */\n    function releasableAmount (address account) public view returns (uint256) {\n        return vestedAmount(account).sub(beneficiary[account].releasedAmount);\n    }\n\n    /**\n    * @notice Transfers available vested tokens to the beneficiary.\n    * @param account Beneficiary account.\n    */\n    function release (address account) public isVestedAccount(account) {\n        uint256 unreleased = releasableAmount(account);\n        require(unreleased > 0);\n        beneficiary[account].releasedAmount = beneficiary[account].releasedAmount.add(unreleased);\n        token.transfer(account, unreleased);\n        emit Released(account, unreleased);\n        if (beneficiary[account].releasedAmount == beneficiary[account].totalAmount) { // When done, clean beneficiary info\n            delete beneficiary[account];\n        }\n    }\n\n    /**\n     * Allows to vest tokens for beneficiary.\n     */\n    function addBeneficiary (\n        address account,\n        uint256 start,\n        uint256 duration,\n        uint256 cliff,\n        uint256 amount\n    ) public isNotVestedAccount(account) {\n        require(amount != 0 && account != 0x0 && cliff < duration && beneficiary[account].start == 0);\n        require(token.transferFrom(msg.sender, address(this), amount));\n        beneficiary[account] = Beneficiary({\n            start: start,\n            duration: duration,\n            cliff: start.add(cliff),\n            totalAmount: amount,\n            releasedAmount: 0\n        });\n    }\n\n    /**\n    * @dev Calculates the amount that has already vested.\n    * @param account Vested account\n    * @return Amount in decimals\n    */\n    function vestedAmount (address account) private view returns (uint256) {\n        if (block.timestamp < beneficiary[account].cliff) {\n            return 0;\n        } else if (block.timestamp >= beneficiary[account].start.add(beneficiary[account].duration)) {\n            return beneficiary[account].totalAmount;\n        } else {\n            return beneficiary[account].totalAmount.mul(\n                block.timestamp.sub(beneficiary[account].start)\n            ).div(beneficiary[account].duration);\n        }\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516020806107438339810160405251600160a060020a038116151561003757600080fd5b60018054600160a060020a031916600160a060020a03929092169190911790556106dd806100666000396000f30060806040526004361061006c5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631726cbc8811461007157806319165587146100a457806355119b1a146100c757806381008568146100f4578063fc0c546a14610140575b600080fd5b34801561007d57600080fd5b50610092600160a060020a0360043516610171565b60408051918252519081900360200190f35b3480156100b057600080fd5b506100c5600160a060020a03600435166101ae565b005b3480156100d357600080fd5b506100c5600160a060020a0360043516602435604435606435608435610370565b34801561010057600080fd5b50610115600160a060020a0360043516610513565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561014c57600080fd5b50610155610542565b60408051600160a060020a039092168252519081900360200190f35b600160a060020a0381166000908152602081905260408120600401546101a69061019a84610551565b9063ffffffff61064616565b90505b919050565b600160a060020a038116600090815260208190526040812054829015156101d457600080fd5b6101dd83610171565b9150600082116101ec57600080fd5b600160a060020a038316600090815260208190526040902060040154610218908363ffffffff61066016565b600160a060020a0380851660008181526020818152604080832060049081019690965560015481517fa9059cbb000000000000000000000000000000000000000000000000000000008152968701949094526024860188905251929093169363a9059cbb93604480830194919391928390030190829087803b15801561029d57600080fd5b505af11580156102b1573d6000803e3d6000fd5b505050506040513d60208110156102c757600080fd5b505060408051600160a060020a03851681526020810184905281517fb21fb52d5749b80f3182f8c6992236b5e5576681880914484d7f4c9b062e619e929181900390910190a1600160a060020a03831660009081526020819052604090206003810154600490910154141561036b57600160a060020a0383166000908152602081905260408120818155600181018290556002810182905560038101829055600401555b505050565b600160a060020a03851660009081526020819052604090205485901561039557600080fd5b81158015906103ac5750600160a060020a03861615155b80156103b757508383105b80156103d95750600160a060020a038616600090815260208190526040902054155b15156103e457600080fd5b600154604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018590529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b15801561045757600080fd5b505af115801561046b573d6000803e3d6000fd5b505050506040513d602081101561048157600080fd5b5051151561048e57600080fd5b6040805160a081018252868152602081018690529081016104b5878663ffffffff61066016565b815260208082019490945260006040918201819052600160a060020a03909816885287845296879020815181559281015160018401559586015160028301555060608501516003820155608090940151600490940193909355505050565b600060208190529081526040902080546001820154600283015460038401546004909401549293919290919085565b600154600160a060020a031681565b600160a060020a03811660009081526020819052604081206002015442101561057c575060006101a9565b600160a060020a0382166000908152602081905260409020600181015490546105aa9163ffffffff61066016565b42106105d25750600160a060020a0381166000908152602081905260409020600301546101a9565b600160a060020a03821660009081526020819052604090206001810154905461063f91906106339061060b90429063ffffffff61064616565b600160a060020a0386166000908152602081905260409020600301549063ffffffff61067016565b9063ffffffff61069c16565b90506101a9565b60008282111561065557600080fd5b508082035b92915050565b8181018281101561065a57600080fd5b60008215156106815750600061065a565b5081810281838281151561069157fe5b041461065a57600080fd5b600081838115156106a957fe5b0493925050505600a165627a7a7230582099984f29b12d2d2803a3465155f03e0ec1b3210397d0e51e22a4651658f7ffa8002900000000000000000000000082f4ded9cec9b5750fbff5c2185aee35afc16587",
  "constructorArguments": "00000000000000000000000082f4ded9cec9b5750fbff5c2185aee35afc16587"
}