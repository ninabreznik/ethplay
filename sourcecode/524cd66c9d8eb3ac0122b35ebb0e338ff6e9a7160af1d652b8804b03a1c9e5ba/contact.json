{
  "address": "0xa485bd50228440797abb4d4595161d7546811160",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DebtToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-08\n*/\n\npragma solidity ^0.4.23;\n\n\ncontract AntiERC20Sink {\n    address public deployer;\n    constructor() public { deployer = msg.sender; }\n    function transferERC20Token(IERC20Token _token, address _to, uint256 _amount) public {\n        require(msg.sender == deployer);\n        _token.transfer(_to, _amount);\n    }\n}\n\n\nlibrary SafeMath {\n    function plus(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        assert(c >= _a);\n        return c;\n    }\n\n    function plus(int256 _a, int256 _b) internal pure returns (int256) {\n        int256 c = _a + _b;\n        assert((_b >= 0 && c >= _a) || (_b < 0 && c < _a));\n        return c;\n    }\n\n    function minus(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        assert(_a >= _b);\n        return _a - _b;\n    }\n\n    function minus(int256 _a, int256 _b) internal pure returns (int256) {\n        int256 c = _a - _b;\n        assert((_b >= 0 && c <= _a) || (_b < 0 && c > _a));\n        return c;\n    }\n\n    function times(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        if (_a == 0) {\n            return 0;\n        }\n        uint256 c = _a * _b;\n        assert(c / _a == _b);\n        return c;\n    }\n\n    function times(int256 _a, int256 _b) internal pure returns (int256) {\n        if (_a == 0) {\n            return 0;\n        }\n        int256 c = _a * _b;\n        assert(c / _a == _b);\n        return c;\n    }\n\n    function toInt256(uint256 _a) internal pure returns (int256) {\n        assert(_a <= 2 ** 255);\n        return int256(_a);\n    }\n\n    function toUint256(int256 _a) internal pure returns (uint256) {\n        assert(_a >= 0);\n        return uint256(_a);\n    }\n\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        return _a / _b;\n    }\n\n    function div(int256 _a, int256 _b) internal pure returns (int256) {\n        return _a / _b;\n    }\n}\n\n\n/*\n    ERC20 Standard Token interface\n*/\ncontract IERC20Token {\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\n    function name() public constant returns (string) {}\n    function symbol() public constant returns (string) {}\n    function decimals() public constant returns (uint8) {}\n    function totalSupply() public constant returns (uint256) {}\n    function balanceOf(address _owner) public constant returns (uint256) { _owner; }\n    function allowance(address _owner, address _spender) public constant returns (uint256) { _owner; _spender; }\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n}\n\n\n/*\n    Owned contract interface\n*/\ncontract IOwned {\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\n    function owner() public constant returns (address) {}\n\n    function transferOwnership(address _newOwner) public;\n    function acceptOwnership() public;\n    function setOwner(address _newOwner) public;\n}\n\n\n\n\n\ncontract Vault {\n    PegInstance public pegInstance;\n    address public owner;\n    uint256 public totalBorrowed;\n    uint256 public rawDebt;\n    uint256 public timestamp;\n\n    constructor(PegInstance _pegInstance, address _owner) public {\n        pegInstance = _pegInstance;\n        owner = _owner;\n    }\n\n    modifier authOnly() {\n        require(pegInstance.authorized(msg.sender));\n        _;\n    }\n\n    function setOwner(address _newOwner) public authOnly {\n        owner = _newOwner;\n    }\n\n    function setRawDebt(uint _newRawDebt) public authOnly {\n        rawDebt = _newRawDebt;\n    }\n\n    function setTotalBorrowed(uint _totalBorrowed) public authOnly {\n        totalBorrowed = _totalBorrowed;\n    }\n\n    function setTimestamp(uint256 _timestamp) public authOnly {\n        timestamp = _timestamp;\n    }\n\n    function payoutPEG(address _to, uint _amount) public authOnly {\n        pegInstance.pegNetworkToken().transfer(_to, _amount);\n    }\n\n    function burnPEG(uint _amount) public authOnly {\n        pegInstance.pegNetworkToken().destroy(address(this), _amount);\n    }\n\n    function transferERC20Token(IERC20Token _token, address _to, uint256 _amount) public authOnly {\n        _token.transfer(_to, _amount);\n    }\n}\n\ncontract IPegOracle {\n    function getValue() public view returns (uint256);\n}\n\n\n\n\n\n\n\n/*\n    Smart Token interface\n*/\ncontract ISmartToken is IOwned, IERC20Token {\n    function disableTransfers(bool _disable) public;\n    function issue(address _to, uint256 _amount) public;\n    function destroy(address _from, uint256 _amount) public;\n}\n\n\n\n\n\n\n\n\n\ncontract PegLogic is AntiERC20Sink {\n\n    using SafeMath for uint256;\n    using SafeMath for int256;\n    ISmartToken public pegNetworkToken;\n    PegInstance public pegInstance;\n\n    constructor(ISmartToken _pegNetworkToken, PegInstance _pegInstance) public {\n        pegNetworkToken = _pegNetworkToken;\n        pegInstance = _pegInstance;\n    }\n\n    modifier vaultExists(Vault _vault) {\n        require(pegInstance.vaultExists(_vault));\n        _;\n    }\n\n    modifier authOnly() {\n        require(pegInstance.authorized(msg.sender));\n        _;\n    }\n\n    function newVault() public returns (Vault) {\n        // pegNetworkToken.destroy(msg.sender, 1e18); charge a fee?\n        Vault vault = new Vault(pegInstance, msg.sender);\n        pegInstance.addNewVault(vault, msg.sender);\n        return vault;\n    }\n\n    function getTotalCredit(Vault _vault) public view vaultExists(_vault) returns (int256) {\n        uint256 oraclePrice = pegInstance.oracle().getValue();\n        return (pegNetworkToken.balanceOf(_vault).times(oraclePrice).times(pegInstance.maxBorrowLTV()) / 1e12).toInt256();\n    }\n\n    function getAvailableCredit(Vault _vault) public view returns (int256) {\n        return getTotalCredit(_vault).minus(actualDebt(_vault).toInt256());\n    }\n\n    function borrow(Vault _vault, uint256 _amount) public vaultExists(_vault) {\n        require(_vault.owner() == msg.sender && _amount.toInt256() <= getAvailableCredit(_vault));\n        _vault.setRawDebt(_vault.rawDebt().plus(debtActualToRaw(_amount)));\n        _vault.setTotalBorrowed(_vault.totalBorrowed().plus(_amount));\n        pegInstance.debtToken().issue(msg.sender, _amount);\n        pegInstance.emitBorrow(_vault, _amount);\n    }\n\n    function repay(Vault _vault, uint256 _amount) public vaultExists(_vault) {\n        uint amountToRepay = _amount;\n        if (actualDebt(_vault) < _amount) amountToRepay = actualDebt(_vault);\n        pegInstance.debtToken().destroy(msg.sender, amountToRepay);\n        _vault.setRawDebt(_vault.rawDebt().minus(debtActualToRaw(amountToRepay)));\n        _vault.setTotalBorrowed(_vault.totalBorrowed().minus(amountToRepay));\n        pegInstance.emitRepay(_vault, amountToRepay);\n    }\n\n    function requiredCollateral(Vault _vault) public view vaultExists(_vault) returns (uint256) {\n        return actualDebt(_vault).times(1e12) / pegInstance.oracle().getValue() / pegInstance.maxBorrowLTV();\n    }\n\n    function getExcessCollateral(Vault _vault) public view returns (int256) {\n        return int(pegNetworkToken.balanceOf(_vault)).minus(int(requiredCollateral(_vault)));\n    }\n\n    function liquidate(Vault _vault) public {\n        require(actualDebt(_vault) > 0);\n        uint requiredPEG = actualDebt(_vault).times(1e12) / pegInstance.oracle().getValue() / pegInstance.liquidationRatio();\n        require(pegNetworkToken.balanceOf(_vault) < requiredPEG);\n        require(pegInstance.debtToken().balanceOf(msg.sender) >= actualDebt(_vault));\n        pegInstance.debtToken().destroy(msg.sender, actualDebt(_vault));\n        _vault.setRawDebt(0);\n        _vault.setOwner(msg.sender);\n    }\n\n    function reportPriceToTargetValue(bool _aboveValue) public authOnly {\n        if(_aboveValue) {\n            pegInstance.setDebtScalingRate(pegInstance.debtScalingPerBlock().plus(1e8));\n            pegInstance.setDebtTokenScalingRate(pegInstance.debtTokenScalingPerBlock().plus(1e8));\n        }else{\n            pegInstance.setDebtScalingRate(pegInstance.debtScalingPerBlock().minus(1e8));\n            pegInstance.setDebtTokenScalingRate(pegInstance.debtTokenScalingPerBlock().minus(1e8));\n        }\n    }\n\n    function debtRawToActual(uint256 _raw) public view returns(uint256) {\n        return _raw.times(1e18) / pegInstance.debtScalingFactor();\n    }\n\n    function debtActualToRaw(uint256 _actual) public view returns(uint256) {\n        return _actual.times(pegInstance.debtScalingFactor()) / 1e18;\n    }\n\n    function withdrawExcessCollateral(Vault _vault, address _to, uint256 _amount) public {\n        require(msg.sender == _vault.owner());\n        require(_amount.toInt256() <= getExcessCollateral(_vault));\n        _vault.payoutPEG(_to, _amount);\n        pegInstance.emitWithdraw(_vault, _amount);\n    }\n\n    function actualDebt(Vault _vault) public view returns(uint) {\n        return debtRawToActual(_vault.rawDebt());\n    }\n}\n\n\ncontract PegInstance {\n\n    using SafeMath for uint256;\n    using SafeMath for int256;\n\n    ISmartToken public pegNetworkToken;\n    uint8 public constant version = 0;\n    IPegOracle public oracle;\n    DebtToken public debtToken;\n    PegLogic public pegLogic;\n    address[] public vaults;\n    mapping (address => bool) public vaultExists;\n    mapping (address => bool) public authorized;\n    uint32 public liquidationRatio = 850000;\n    uint32 public maxBorrowLTV = 100000;\n\n    uint256 public lastDebtTokenScalingFactor = 1e18;\n    uint256 public lastDebtTokenScalingRetarget;\n    int256 public debtTokenScalingPerBlock;\n\n    uint256 public lastDebtScalingFactor = 1e18;\n    uint256 public lastDebtScalingRetarget;\n    int256 public debtScalingPerBlock;\n\n    uint256 public amountMinted;\n\n    event LiquidateVault(address indexed _vault);\n    event Borrow(address indexed _vault, uint256 amount);\n    event Repay(address indexed _vault, uint256 amount);\n    event Withdraw(address indexed _vault, uint256 amount);\n    event LiquidationRatioUpdate(int _old, int _new);\n    event MaxBorrowUpdate(uint32 _old, uint32 _new);\n    event DebtTokenScalingRateUpdate(int _old, int _new);\n    event DebtScalingRateUpdate(int _old, int _new);\n    event NewVault(address indexed _vault, address indexed _vaultOwner);\n    event LogicUpgrade(address _old, address _new);\n    event DebtTokenUpgrade(address _old, address _new);\n    event OracleUpgrade(address _old, address _new);\n    event Authorize(address _address, bool _auth);\n\n    constructor(ISmartToken _pegNetworkToken) public {\n        pegNetworkToken = _pegNetworkToken;\n        authorized[msg.sender] = true;\n    }\n\n    modifier authOnly() {\n        require(authorized[msg.sender] == true);\n        _;\n    }\n\n    function setDebtToken(DebtToken _debtToken) public authOnly {\n        emit DebtTokenUpgrade(address(debtToken), address(_debtToken));\n        debtToken = _debtToken;\n    }\n\n    function setOracle(IPegOracle _oracle) public authOnly {\n        emit OracleUpgrade(address(oracle), address(_oracle));\n        oracle = _oracle;\n    }\n\n    function setPegLogic(PegLogic _pegLogic) public authOnly {\n        emit LogicUpgrade(address(pegLogic), address(_pegLogic));\n        authorized[address(_pegLogic)] = true;\n        authorized[address(pegLogic)] = false;\n        pegLogic = _pegLogic;\n    }\n\n    function authorize(address _address, bool _auth) public authOnly {\n        emit Authorize(_address, _auth);\n        authorized[_address] = _auth;\n    }\n\n    function setLiquidationRatio(uint32 _liquidationRatio) public authOnly {\n        emit LiquidationRatioUpdate(liquidationRatio, _liquidationRatio);\n        liquidationRatio = _liquidationRatio;\n    }\n\n    function setMaxBorrowLTV(uint32 _maxBorrowLTV) public authOnly {\n        emit MaxBorrowUpdate(maxBorrowLTV, _maxBorrowLTV);\n        maxBorrowLTV = _maxBorrowLTV;\n    }\n\n    function setDebtTokenScalingRate(int256 _debtTokenScalingPerBlock) public authOnly {\n        emit DebtTokenScalingRateUpdate(debtTokenScalingPerBlock, _debtTokenScalingPerBlock);\n        lastDebtTokenScalingFactor = debtTokenScalingFactor();\n        lastDebtTokenScalingRetarget = block.number;\n        debtTokenScalingPerBlock = _debtTokenScalingPerBlock;\n    }\n\n    function setDebtScalingRate(int256 _debtScalingPerBlock) public authOnly {\n        emit DebtScalingRateUpdate(debtScalingPerBlock, _debtScalingPerBlock);\n        lastDebtScalingFactor = debtScalingFactor();\n        lastDebtScalingRetarget = block.number;\n        debtScalingPerBlock = _debtScalingPerBlock;\n    }\n\n    function setAmountMinted(uint _amountMinted) public authOnly {\n        amountMinted = _amountMinted;\n    }\n\n    function addNewVault(Vault _vault, address _vaultOwner) public authOnly {\n        emit NewVault(address(_vault), _vaultOwner);\n        vaults.push(_vault);\n        vaultExists[_vault] = true;\n    }\n\n    function emitBorrow(Vault _vault, uint256 _amount) public authOnly {\n        emit Borrow(address(_vault), _amount);\n    }\n\n    function emitRepay(Vault _vault, uint256 _amount) public authOnly {\n        emit Repay(address(_vault), _amount);\n    }\n\n    function emitWithdraw(Vault _vault, uint256 _amount) public authOnly {\n        emit Withdraw(address(_vault), _amount);\n    }\n\n    function emitLiquidateVault(Vault _vault) public authOnly {\n        emit LiquidateVault(address(_vault));\n    }\n\n    function getVaults() public view returns (address[]) {\n        return vaults;\n    }\n\n    function debtTokenScalingFactor() public view returns (uint) {\n        return uint(int(lastDebtTokenScalingFactor).plus(debtTokenScalingPerBlock.times(int(block.number.minus(lastDebtTokenScalingRetarget)))));\n    }\n\n    function debtScalingFactor() public view returns (uint) {\n        return uint(int(lastDebtScalingFactor).plus(debtScalingPerBlock.times(int(block.number.minus(lastDebtScalingRetarget)))));\n    }\n\n    function transferERC20Token(IERC20Token _token, address _to, uint256 _amount) public authOnly {\n        _token.transfer(_to, _amount);\n    }\n}\n\n\n\n\n\ncontract DebtToken is IERC20Token {\n\n    using SafeMath for uint256;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n\n    PegInstance public pegInstance;\n\n    uint256 public rawTotalSupply;\n    mapping (address => uint256) public rawBalance;\n    mapping (address => mapping (address => uint256)) public rawAllowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n    event Issuance(uint256 amount);\n    event Destruction(uint256 amount);\n\n    constructor(string _name, string _symbol, PegInstance _pegInstance) public {\n        require(bytes(_name).length > 0 && bytes(_symbol).length > 0);\n        name = _name;\n        symbol = _symbol;\n        pegInstance = _pegInstance;\n    }\n\n    modifier validAddress(address _address) {\n        require(_address != address(0));\n        _;\n    }\n\n    modifier authOnly() {\n        require(pegInstance.authorized(msg.sender));\n        _;\n    }\n\n    function rawToActual(uint256 _raw) public view returns(uint256) {\n        return _raw.times(1e18) / pegInstance.debtTokenScalingFactor();\n    }\n\n    function actualToRaw(uint256 _actual) public view returns(uint256) {\n        return _actual.times(pegInstance.debtTokenScalingFactor()) / 1e18;\n    }\n\n    function balanceOf(address _address) public view returns(uint256) {\n        return rawToActual(rawBalance[_address]);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return rawToActual(rawTotalSupply);\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return rawToActual(rawAllowance[_owner][_spender]);\n    }\n\n    function transfer(address _to, uint256 _amount) public validAddress(_to) returns (bool) {\n        rawBalance[msg.sender] = rawBalance[msg.sender].minus(actualToRaw(_amount));\n        rawBalance[_to] = rawBalance[_to].plus(actualToRaw(_amount));\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _amount) public validAddress(_from) validAddress(_to) returns (bool) {\n        rawAllowance[_from][msg.sender] = rawAllowance[_from][msg.sender].minus(actualToRaw(_amount));\n        rawBalance[_from] = rawBalance[_from].minus(actualToRaw(_amount));\n        rawBalance[_to] = rawBalance[_to].plus(actualToRaw(_amount));\n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _amount) public validAddress(_spender) returns (bool) {\n        require(_amount == 0 || rawAllowance[msg.sender][_spender] == 0);\n        rawAllowance[msg.sender][_spender] = actualToRaw(_amount);\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    function issue(address _to, uint256 _amount) public validAddress(_to) authOnly {\n        rawTotalSupply = rawTotalSupply.plus(actualToRaw(_amount));\n        rawBalance[_to] = rawBalance[_to].plus(actualToRaw(_amount));\n        emit Issuance(_amount);\n        emit Transfer(this, _to, _amount);\n    }\n\n    function destroy(address _from, uint256 _amount) public validAddress(_from) authOnly {\n        rawBalance[_from] = rawBalance[_from].minus(actualToRaw(_amount));\n        rawTotalSupply = rawTotalSupply.minus(actualToRaw(_amount));\n        emit Transfer(_from, this, _amount);\n        emit Destruction(_amount);\n    }\n\n    function setName(string _name) public authOnly {\n        name = _name;\n    }\n\n    function setSymbol(string _symbol) public authOnly {\n        symbol = _symbol;\n    }\n\n    function transferERC20Token(IERC20Token _token, address _to, uint256 _amount) validAddress(_to) public {\n        require(pegInstance.authorized(msg.sender));\n        _token.transfer(_to, _amount);\n    }\n}",
  "bytecode": "60806040526012600260006101000a81548160ff021916908360ff1602179055503480156200002d57600080fd5b506040516200208038038062002080833981018060405281019080805182019291906020018051820192919060200180519060200190929190505050600083511180156200007c575060008251115b15156200008857600080fd5b8260009080519060200190620000a092919062000104565b508160019080519060200190620000b992919062000104565b5080600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620001b3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200014757805160ff191683800117855562000178565b8280016001018555821562000178579182015b82811115620001775782518255916020019190600101906200015a565b5b5090506200018791906200018b565b5090565b620001b091905b80821115620001ac57600081600090555060010162000192565b5090565b90565b611ebd80620001c36000396000f300608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610117578063095ea7b3146101a757806318160ddd1461020c5780631d1b6e541461023757806323b872dd14610278578063313ce567146102fd57806370a082311461032e578063867904b4146103855780638a0effd2146103d257806392940bf91461042957806395d89b4114610496578063a24835d114610526578063a592d9ec14610573578063a9059cbb1461059e578063af894d3814610603578063b76e76b11461065a578063b84c8246146106d1578063c47f00271461073a578063dd62ed3e146107a3578063ee5ba13b1461081a575b600080fd5b34801561012357600080fd5b5061012c61085b565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561016c578082015181840152602081019050610151565b50505050905090810190601f1680156101995780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b357600080fd5b506101f2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108f9565b604051808215151515815260200191505060405180910390f35b34801561021857600080fd5b50610221610ac7565b6040518082815260200191505060405180910390f35b34801561024357600080fd5b5061026260048036038101908080359060200190929190505050610ad9565b6040518082815260200191505060405180910390f35b34801561028457600080fd5b506102e3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bc8565b604051808215151515815260200191505060405180910390f35b34801561030957600080fd5b50610312610f07565b604051808260ff1660ff16815260200191505060405180910390f35b34801561033a57600080fd5b5061036f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f1a565b6040518082815260200191505060405180910390f35b34801561039157600080fd5b506103d0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f6b565b005b3480156103de57600080fd5b50610413600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061120c565b6040518082815260200191505060405180910390f35b34801561043557600080fd5b50610494600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611224565b005b3480156104a257600080fd5b506104ab611449565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104eb5780820151818401526020810190506104d0565b50505050905090810190601f1680156105185780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561053257600080fd5b50610571600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114e7565b005b34801561057f57600080fd5b50610588611788565b6040518082815260200191505060405180910390f35b3480156105aa57600080fd5b506105e9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061178e565b604051808215151515815260200191505060405180910390f35b34801561060f57600080fd5b50610618611977565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561066657600080fd5b506106bb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061199d565b6040518082815260200191505060405180910390f35b3480156106dd57600080fd5b50610738600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506119c2565b005b34801561074657600080fd5b506107a1600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611adf565b005b3480156107af57600080fd5b50610804600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bfc565b6040518082815260200191505060405180910390f35b34801561082657600080fd5b5061084560048036038101908080359060200190929190505050611c8b565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108f15780601f106108c6576101008083540402835291602001916108f1565b820191906000526020600020905b8154815290600101906020018083116108d457829003601f168201915b505050505081565b600082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561093857600080fd5b60008314806109c357506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156109ce57600080fd5b6109d783610ad9565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505092915050565b6000610ad4600354611c8b565b905090565b6000670de0b6b3a7640000610bb7600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e31626516040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610b6d57600080fd5b505af1158015610b81573d6000803e3d6000fd5b505050506040513d6020811015610b9757600080fd5b810190808051906020019092919050505084611d7a90919063ffffffff16565b811515610bc057fe5b049050919050565b600083600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610c0757600080fd5b83600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610c4457600080fd5b610cdb610c5085610ad9565b600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611db590919063ffffffff16565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610db5610d6785610ad9565b600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611db590919063ffffffff16565b600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e52610e0485610ad9565b600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dce90919063ffffffff16565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a36001925050509392505050565b600260009054906101000a900460ff1681565b6000610f64600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c8b565b9050919050565b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610fa857600080fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b9181611336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561106557600080fd5b505af1158015611079573d6000803e3d6000fd5b505050506040513d602081101561108f57600080fd5b810190808051906020019092919050505015156110ab57600080fd5b6110c86110b783610ad9565b600354611dce90919063ffffffff16565b6003819055506111286110da83610ad9565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dce90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f9386c90217c323f58030f9dadcbc938f807a940f4ff41cd4cead9562f5da7dc3826040518082815260200191505060405180910390a18273ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3505050565b60046020528060005260406000206000915090505481565b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561126157600080fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b9181611336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561131e57600080fd5b505af1158015611332573d6000803e3d6000fd5b505050506040513d602081101561134857600080fd5b8101908080519060200190929190505050151561136457600080fd5b8373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561140757600080fd5b505af115801561141b573d6000803e3d6000fd5b505050506040513d602081101561143157600080fd5b81019080805190602001909291905050505050505050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114df5780601f106114b4576101008083540402835291602001916114df565b820191906000526020600020905b8154815290600101906020018083116114c257829003601f168201915b505050505081565b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561152457600080fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b9181611336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156115e157600080fd5b505af11580156115f5573d6000803e3d6000fd5b505050506040513d602081101561160b57600080fd5b8101908080519060200190929190505050151561162757600080fd5b61168161163383610ad9565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611db590919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116e16116d083610ad9565b600354611db590919063ffffffff16565b6003819055503073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a37f9a1b418bc061a5d80270261562e6986a35d995f8051145f277be16103abd3453826040518082815260200191505060405180910390a1505050565b60035481565b600082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156117cd57600080fd5b6118276117d984610ad9565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611db590919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118c461187684610ad9565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dce90919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6005602052816000526040600020602052806000526040600020600091509150505481565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b9181611336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611a7f57600080fd5b505af1158015611a93573d6000803e3d6000fd5b505050506040513d6020811015611aa957600080fd5b81019080805190602001909291905050501515611ac557600080fd5b8060019080519060200190611adb929190611dec565b5050565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b9181611336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611b9c57600080fd5b505af1158015611bb0573d6000803e3d6000fd5b505050506040513d6020811015611bc657600080fd5b81019080805190602001909291905050501515611be257600080fd5b8060009080519060200190611bf8929190611dec565b5050565b6000611c83600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c8b565b905092915050565b6000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e31626516040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611d1357600080fd5b505af1158015611d27573d6000803e3d6000fd5b505050506040513d6020811015611d3d57600080fd5b8101908080519060200190929190505050611d69670de0b6b3a764000084611d7a90919063ffffffff16565b811515611d7257fe5b049050919050565b6000806000841415611d8f5760009150611dae565b8284029050828482811515611da057fe5b04141515611daa57fe5b8091505b5092915050565b6000818310151515611dc357fe5b818303905092915050565b6000808284019050838110151515611de257fe5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611e2d57805160ff1916838001178555611e5b565b82800160010185558215611e5b579182015b82811115611e5a578251825591602001919060010190611e3f565b5b509050611e689190611e6c565b5090565b611e8e91905b80821115611e8a576000816000905550600101611e72565b5090565b905600a165627a7a7230582042490077827efb1d2e18d063ee25eeae043d42d756a41b8e08d5b68542d7d78e0029000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000003d6a8a3d37feca3f8e988a25d267312d35fe3879000000000000000000000000000000000000000000000000000000000000000d5045473a555320446f6c6c61720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000075045473a55534400000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000003d6a8a3d37feca3f8e988a25d267312d35fe3879000000000000000000000000000000000000000000000000000000000000000d5045473a555320446f6c6c61720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000075045473a55534400000000000000000000000000000000000000000000000000"
}