{
  "address": "0xf4c13de243a7716fb7351736228c8337f460d760",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WishListToken",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-27\n*/\n\npragma solidity ^0.5.5;\n\n//WLC VERSION 11\n\ncontract DreamCarToken {\n    function getForWLC(address _owner) public {}\n}\n\ncontract WishListToken {\n    string internal constant tokenName   = 'WishListCoin';\n    string internal constant tokenSymbol = 'WLC';\n    \n    uint256 public constant decimals = 0;\n    \n    //the total count of wishes\n    uint256 public totalTokenSupply;\n    \n    //this address is the CEO\n    address payable public CEO;\n    \n    // Mapping from owner to ids of owned tokens\n    mapping (address => uint256[]) internal tokensOwnedBy;\n    \n    // Mapping from owner to ids of exchanged tokens\n    mapping (address => uint256[]) internal tokensExchangedBy;\n    \n    //Token price in WEI\n    uint256 public tokenPrice;\n    \n    //A list of price admins; they can change price, in addition to the CEO\n    address[] public priceAdmins;\n    \n    //Next id that will be assigned to token\n    uint256 internal nextTokenId = 1;\n    \n    //DCC INTERACTION VARIABLES\n    \n    //A DreamCarToken contract address, which will be used to allow the exchange of WLC tokens for DCC tokens\n    DreamCarToken public dreamCarCoinExchanger;\n    \n    /**\n     * Gets the total amount of tokens stored by the contract\n     * @return uint256 representing the total amount of tokens\n     */\n    function totalSupply() public view returns (uint256 total) {\n        return totalTokenSupply;\n    }\n    \n    /**\n     * Gets the balance of the specified address\n     * @param _owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return tokensOwnedBy[_owner].length;\n    }\n    \n    /**\n     * Returns a list of the tokens ids, owned by the passed address\n     * @param _owner address the address to check\n     * @return the list of token ids\n     */\n    function tokensOfOwner(address _owner) external view returns (uint256[] memory tokenIds) {\n        return tokensOwnedBy[_owner];\n    }\n    \n    /**\n     * Checks if the provided token is owned by the provided address\n     * @param _tokenId uint256 the number of the token\n     * @param _owner address the address to check\n     * @return the token is owned or not\n     */\n    function tokenIsOwnedBy(uint256 _tokenId, address _owner) external view returns (bool isTokenOwner) {\n        for (uint256 i = 0; i < balanceOf(_owner); i++) {\n            if (tokensOwnedBy[_owner][i] == _tokenId) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n    \n    /**\n     * Transfers the specified token to the specified address\n     * @param _to address the receiver\n     * @param _tokenId uint256 the id of the token\n     */\n    function transfer(address _to, uint256 _tokenId) external {\n        require(_to != address(0));\n        \n        uint256 tokenIndex = getTokenIndex(msg.sender, _tokenId);\n        \n        //swap token for the last one in the list\n        tokensOwnedBy[msg.sender][tokenIndex] = tokensOwnedBy[msg.sender][tokensOwnedBy[msg.sender].length - 1];\n        tokensOwnedBy[msg.sender].pop();\n        \n        tokensOwnedBy[_to].push(_tokenId);\n\n        emit Transfer(msg.sender, _to, _tokenId);\n    }\n   \n    /**\n     * Gets the token name\n     * @return string representing the token name\n     */\n    function name() external pure returns (string memory _name) {\n        return tokenName;\n    }\n    \n    /**\n     * Gets the token symbol\n     * @return string representing the token symbol\n     */\n    function symbol() external pure returns (string memory _symbol) {\n        return tokenSymbol;\n    }\n    \n    event Transfer(address from, address to, uint256 tokenId);\n    \n    event Buy(address indexed from, uint256 amount, uint256 fromTokenId, uint256 toTokenId, uint256 timestamp);\n    \n    event Exchange(address indexed from, uint256 tokenId);\n    \n    event ExchangeForDCC(address indexed from, uint256 tokenId);\n    \n    /**\n     * Ensures that the caller of the function is the CEO of contract\n     */\n    modifier onlyCEO {\n        require(msg.sender == CEO, 'You need to be the CEO to do that!');\n        _;\n    }\n    \n    /**\n     * Constructor of the contract\n     * @param _ceo address the CEO (owner) of the contract\n     */\n    constructor (address payable _ceo) public {\n        CEO = _ceo;\n        \n        totalTokenSupply = 1000000;\n        \n        tokenPrice = 22250000000000000; // (if eth = 269USD, 6 USD for token)\n    }\n\n    /**\n     * Gets an array of all tokens ids, exchanged by the specified address\n     * @param _owner address The exchanger of the tokens\n     * @return uint256[] The list of exchanged tokens ids\n     */\n    function exchangedBy(address _owner) external view returns (uint256[] memory tokenIds) {\n        return tokensExchangedBy[_owner];\n    }\n    \n    /**\n     * Gets the last existing token ids\n     * @return uint256 the id of the token\n     */\n    function lastTokenId() public view returns (uint256 tokenId) {\n        return nextTokenId - 1;\n    }\n    \n    /**\n     * Sets a new price for the tokensExchangedBy\n     * @param _newPrice uint256 the new price in WEI\n     */\n    function setTokenPriceInWEI(uint256 _newPrice) public {\n        bool transactionAllowed = false;\n        \n        if (msg.sender == CEO) {\n            transactionAllowed = true;\n        } else {\n            for (uint256 i = 0; i < priceAdmins.length; i++) {\n                if (msg.sender == priceAdmins[i]) {\n                    transactionAllowed = true;\n                    break;\n                }\n            }\n        }\n        \n        require((transactionAllowed == true), 'You cannot do that!');\n        tokenPrice = _newPrice;\n    }\n    \n    /**\n     * Add a new price admin address to the list\n     * @param _newPriceAdmin address the address of the new price admin\n     */\n    function addPriceAdmin(address _newPriceAdmin) onlyCEO public {\n        priceAdmins.push(_newPriceAdmin);\n    }\n    \n    /**\n     * Remove existing price admin address from the list\n     * @param _existingPriceAdmin address the address of the existing price admin\n     */\n    function removePriceAdmin(address _existingPriceAdmin) onlyCEO public {\n        for (uint256 i = 0; i < priceAdmins.length; i++) {\n            if (_existingPriceAdmin == priceAdmins[i]) {\n                delete priceAdmins[i];\n                break;\n            }\n        }\n    }\n    \n    /**\n     * Gets the index of the specified token from the owner's collection\n     * @param _owner address the address to check\n     * @param _tokenId uint256 the number of the token\n     * @return the token index\n     */\n    function getTokenIndex(address _owner, uint256 _tokenId) internal view returns (uint256 _index) {\n        for (uint256 i = 0; i < balanceOf(_owner); i++) {\n            if (tokensOwnedBy[_owner][i] == _tokenId) {\n                return i;\n            }\n        }\n        \n        require(false, 'You do not own this token!');\n    }\n    \n    /**\n     * Adds the specified number of tokens to the specified address\n     * Internal method, used when creating new tokens\n     * @param _to address The address, which is going to own the tokens\n     * @param _amount uint256 The number of tokens\n     */\n    function _addTokensToAddress(address _to, uint256 _amount) internal {\n        for (uint256 i = 0; i < _amount; i++) {\n            tokensOwnedBy[_to].push(nextTokenId + i);\n        }\n        \n        nextTokenId += _amount;\n    }\n    \n    /**\n     * Scales the amount of tokens in a purchase, to ensure it will be less or equal to the amount of unsold tokens\n     * If there are no tokens left, it will return 0\n     * @param _amount uint256 the amount of tokens in the purchase attempt\n     * @return _exactAmount uint256\n     */\n    function scalePurchaseTokenAmountToMatchRemainingTokens(uint256 _amount) internal view returns (uint256 _exactAmount) {\n        if (nextTokenId + _amount - 1 > totalTokenSupply) {\n            _amount = totalTokenSupply - nextTokenId + 1;\n        }\n        \n        return _amount;\n    }\n    \n    /**\n    * Buy new tokens with ETH\n    * Calculates the number of tokens for the given ETH amount\n    * Creates the new tokens when they are purchased\n    * Returns the excessive ETH (if any) to the transaction sender\n    */\n    function buy() payable public {\n        require(msg.value >= tokenPrice, \"You did't send enough ETH\");\n        \n        uint256 amount = scalePurchaseTokenAmountToMatchRemainingTokens(msg.value / tokenPrice);\n        \n        require(amount > 0, \"Not enough tokens are available for purchase!\");\n        \n        _addTokensToAddress(msg.sender, amount);\n        \n        emit Buy(msg.sender, amount, nextTokenId - amount, nextTokenId - 1, now);\n        \n        //transfer ETH to CEO\n        CEO.transfer((amount * tokenPrice));\n        \n        //returns excessive ETH\n        msg.sender.transfer(msg.value - (amount * tokenPrice));\n    }\n    \n    /**\n     * Removes a token from the provided address balance and puts it in the tokensExchangedBy mapping\n     * @param _owner address the address of the token owner\n     * @param _tokenId uint256 the id of the token\n     */\n    function exchangeToken(address _owner, uint256 _tokenId) internal {\n        uint256 tokenIndex = getTokenIndex(_owner, _tokenId);\n        \n        //swap token for the last one in the list\n        tokensOwnedBy[msg.sender][tokenIndex] = tokensOwnedBy[msg.sender][tokensOwnedBy[msg.sender].length - 1];\n        tokensOwnedBy[msg.sender].pop();\n\n        tokensExchangedBy[_owner].push(_tokenId);\n    }\n    \n    /**\n    * Allows user to destroy a specified token in order to claim his prize for it\n    * @param _tokenId uint256 ID of the token\n    */\n    function exchange(uint256 _tokenId) public {\n        exchangeToken(msg.sender, _tokenId);\n        \n        emit Exchange(msg.sender, _tokenId);\n    }\n    \n    /**\n     * Allows the CEO to increase the totalTokenSupply\n     * @param _amount uint256 the number of tokens to create\n     */\n    function mint(uint256 _amount) onlyCEO public {\n        require (_amount > 0, 'Amount must be bigger than 0!');\n        totalTokenSupply += _amount;\n    }\n    \n    //DCC INTERACTION FUNCTIONS\n    \n    /**\n     * Allows the CEO to set an address of DreamCarToken contract, which will be used to exchanger\n     * WLCs for DCCs\n     * @param _address address the address of the DreamCarToken contract\n     */\n    function setDreamCarCoinExchanger(address _address) public onlyCEO {\n        require (_address != address(0));\n        dreamCarCoinExchanger = DreamCarToken(_address);\n    }\n    \n    /**\n     * Allows the CEO to remove the address of DreamCarToken contract, which will be used to exchanger\n     * WLCs for DCCs\n     */\n    function removeDreamCarCoinExchanger() public onlyCEO {\n        dreamCarCoinExchanger = DreamCarToken(address(0));\n    }\n    \n    /**\n     * Allows a user to exchange any WLC coin token a DCC token\n     * @param _tokenId uint256 the id of the owned token\n     */\n    function exchangeForDCC(uint256 _tokenId) public {\n        require (address(dreamCarCoinExchanger) != address(0));\n        \n        dreamCarCoinExchanger.getForWLC(msg.sender);\n        \n        exchangeToken(msg.sender, _tokenId);\n        \n        emit ExchangeForDCC(msg.sender, _tokenId);\n    }\n}",
  "bytecode": "6080604052600160065534801561001557600080fd5b506040516020806111e08339810180604052602081101561003557600080fd5b5051600180546001600160a01b039092166001600160a01b0319909216919091179055620f4240600055664f0c41d240a000600455611167806100796000396000f3fe60806040526004361061014b5760003560e01c80638462151c116100b6578063a9059cbb1161006f578063a9059cbb146104b6578063aadb29f8146104ef578063bda4ee5b14610522578063c121c4321461054c578063e775998814610561578063f84ddf0b146105945761014b565b80638462151c146103ad57806395d89b41146104305780639869821714610445578063a0712d681461046f578063a108857114610499578063a6f2ae3a146104ae5761014b565b8063303dace511610108578063303dace5146102a8578063313ce567146102d957806353556559146102ee5780636e39b21c1461031857806370a08231146103655780637ff9b596146103985761014b565b806306fdde03146101505780631768aa94146101da57806318160ddd146102065780631ca8b6cb1461022d57806324759ef7146102425780632bdb70e314610275575b600080fd5b34801561015c57600080fd5b506101656105a9565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019f578181015183820152602001610187565b50505050905090810190601f1680156101cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e657600080fd5b50610204600480360360208110156101fd57600080fd5b50356105e0565b005b34801561021257600080fd5b5061021b61069f565b60408051918252519081900360200190f35b34801561023957600080fd5b5061021b6106a5565b34801561024e57600080fd5b506102046004803603602081101561026557600080fd5b50356001600160a01b03166106ab565b34801561028157600080fd5b506102046004803603602081101561029857600080fd5b50356001600160a01b0316610767565b3480156102b457600080fd5b506102bd610805565b604080516001600160a01b039092168252519081900360200190f35b3480156102e557600080fd5b5061021b610814565b3480156102fa57600080fd5b506102046004803603602081101561031157600080fd5b5035610819565b34801561032457600080fd5b506103516004803603604081101561033b57600080fd5b50803590602001356001600160a01b031661085c565b604080519115158252519081900360200190f35b34801561037157600080fd5b5061021b6004803603602081101561038857600080fd5b50356001600160a01b03166108c6565b3480156103a457600080fd5b5061021b6108e1565b3480156103b957600080fd5b506103e0600480360360208110156103d057600080fd5b50356001600160a01b03166108e7565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561041c578181015183820152602001610404565b505050509050019250505060405180910390f35b34801561043c57600080fd5b50610165610953565b34801561045157600080fd5b506102046004803603602081101561046857600080fd5b5035610973565b34801561047b57600080fd5b506102046004803603602081101561049257600080fd5b5035610a3a565b3480156104a557600080fd5b506102bd610ae9565b610204610af8565b3480156104c257600080fd5b50610204600480360360408110156104d957600080fd5b506001600160a01b038135169060200135610c77565b3480156104fb57600080fd5b506103e06004803603602081101561051257600080fd5b50356001600160a01b0316610d8c565b34801561052e57600080fd5b506102bd6004803603602081101561054557600080fd5b5035610df6565b34801561055857600080fd5b50610204610e1d565b34801561056d57600080fd5b506102046004803603602081101561058457600080fd5b50356001600160a01b0316610e7b565b3480156105a057600080fd5b5061021b610efc565b60408051808201909152600c81527f576973684c697374436f696e0000000000000000000000000000000000000000602082015290565b6007546001600160a01b03166105f557600080fd5b60075460408051600160e01b6347ccf56502815233600482015290516001600160a01b03909216916347ccf5659160248082019260009290919082900301818387803b15801561064457600080fd5b505af1158015610658573d6000803e3d6000fd5b505050506106663382610f06565b60408051828152905133917f028381bfa96119de6214d4a47d1a7569011654faf247fe273343923763a24881919081900360200190a250565b60005490565b60005481565b6001546001600160a01b031633146106f757604051600160e51b62461bcd02815260040180806020018281038252602281526020018061111a6022913960400191505060405180910390fd5b60005b600554811015610763576005818154811061071157fe5b6000918252602090912001546001600160a01b038381169116141561075b576005818154811061073d57fe5b600091825260209091200180546001600160a01b0319169055610763565b6001016106fa565b5050565b6001546001600160a01b031633146107b357604051600160e51b62461bcd02815260040180806020018281038252602281526020018061111a6022913960400191505060405180910390fd5b600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b0392909216919091179055565b6007546001600160a01b031681565b600081565b6108233382610f06565b60408051828152905133917f5988e4c12f4844b895de0739f562558435dca9602fd8b970720ee3cf8dff39be919081900360200190a250565b6000805b610869836108c6565b8110156108ba576001600160a01b038316600090815260026020526040902080548591908390811061089757fe5b906000526020600020015414156108b25760019150506108c0565b600101610860565b50600090505b92915050565b6001600160a01b031660009081526002602052604090205490565b60045481565b6001600160a01b03811660009081526002602090815260409182902080548351818402810184019094528084526060939283018282801561094757602002820191906000526020600020905b815481526020019060010190808311610933575b50505050509050919050565b6040805180820190915260038152600160e81b62574c4302602082015290565b6001546000906001600160a01b0316331415610991575060016109da565b60005b6005548110156109d857600581815481106109ab57fe5b6000918252602090912001546001600160a01b03163314156109d057600191506109d8565b600101610994565b505b600181151514610a345760408051600160e51b62461bcd02815260206004820152601360248201527f596f752063616e6e6f7420646f20746861742100000000000000000000000000604482015290519081900360640190fd5b50600455565b6001546001600160a01b03163314610a8657604051600160e51b62461bcd02815260040180806020018281038252602281526020018061111a6022913960400191505060405180910390fd5b60008111610ade5760408051600160e51b62461bcd02815260206004820152601d60248201527f416d6f756e74206d75737420626520626967676572207468616e203021000000604482015290519081900360640190fd5b600080549091019055565b6001546001600160a01b031681565b600454341015610b525760408051600160e51b62461bcd02815260206004820152601960248201527f596f752064696427742073656e6420656e6f7567682045544800000000000000604482015290519081900360640190fd5b6000610b686004543481610b6257fe5b04610fc7565b905060008111610bac57604051600160e51b62461bcd02815260040180806020018281038252602d8152602001806110ed602d913960400191505060405180910390fd5b610bb63382610fea565b600654604080518381528383036020820152600019909201828201524260608301525133917f064fb1933e186be0b289a87e98518dc18cc9856ecbc9f1353d1a138ddf733ec5919081900360800190a26001546004546040516001600160a01b039092169190830280156108fc02916000818181858888f19350505050158015610c44573d6000803e3d6000fd5b5060045460405133918302340380156108fc02916000818181858888f19350505050158015610763573d6000803e3d6000fd5b6001600160a01b038216610c8a57600080fd5b6000610c963383611040565b3360009081526002602052604090208054919250906000198101908110610cb957fe5b600091825260208083209091015433835260029091526040909120805483908110610ce057fe5b6000918252602080832090910192909255338152600290915260409020805480610d0657fe5b6000828152602080822083016000199081018390559092019092556001600160a01b03851680835260028252604080842080546001810182559085529383902090930185905582513381529182015280820184905290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360600190a1505050565b6001600160a01b03811660009081526003602090815260409182902080548351818402810184019094528084526060939283018282801561094757602002820191906000526020600020908154815260200190600101908083116109335750505050509050919050565b60058181548110610e0357fe5b6000918252602090912001546001600160a01b0316905081565b6001546001600160a01b03163314610e6957604051600160e51b62461bcd02815260040180806020018281038252602281526020018061111a6022913960400191505060405180910390fd5b600780546001600160a01b0319169055565b6001546001600160a01b03163314610ec757604051600160e51b62461bcd02815260040180806020018281038252602281526020018061111a6022913960400191505060405180910390fd5b6001600160a01b038116610eda57600080fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6006546000190190565b6000610f128383611040565b3360009081526002602052604090208054919250906000198101908110610f3557fe5b600091825260208083209091015433835260029091526040909120805483908110610f5c57fe5b6000918252602080832090910192909255338152600290915260409020805480610f8257fe5b6000828152602080822083016000199081018390559092019092556001600160a01b039094168152600384526040812080546001810182559082529390209092015550565b6000805460018360065401031115610fe6576006546000540360010191505b5090565b60005b81811015611033576001600160a01b0383166000908152600260209081526040822060065481546001818101845592855292909320928401929091019190915501610fed565b5060068054909101905550565b6000805b61104d846108c6565b81101561109b576001600160a01b038416600090815260026020526040902080548491908390811061107b57fe5b906000526020600020015414156110935790506108c0565b600101611044565b5060408051600160e51b62461bcd02815260206004820152601a60248201527f596f7520646f206e6f74206f776e207468697320746f6b656e21000000000000604482015290519081900360640190fdfe4e6f7420656e6f75676820746f6b656e732061726520617661696c61626c6520666f7220707572636861736521596f75206e65656420746f206265207468652043454f20746f20646f207468617421a165627a7a72305820bdd2782d5cd012740f1dff17318b74f201c681095e15bd20dcf2912e3f674b2c0029000000000000000000000000d8e0ed6a36d93bb791f3ba9fa2567bfe36f4a061",
  "constructorArguments": "000000000000000000000000d8e0ed6a36d93bb791f3ba9fa2567bfe36f4a061"
}