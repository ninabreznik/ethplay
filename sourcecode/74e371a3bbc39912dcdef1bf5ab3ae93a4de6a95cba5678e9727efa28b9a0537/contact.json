{
  "address": "0x8993db1795b9a7b317b98ebfa4c971f225bf1248",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ENKToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-23\n*/\n\npragma solidity ^0.4.20;\n\n/**\n *  Standard Interface for ERC20 Contract\n */\ncontract IERC20 {\n    function totalSupply() public constant returns (uint _totalSupply);\n    function balanceOf(address _owner) public constant returns (uint balance);\n    function transfer(address _to, uint _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n    function approve(address _spender, uint _value) public returns (bool success);\n    function allowance(address _owner, address _spender) constant public returns (uint remaining);\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n\n/**\n * Checking overflows for various operations\n */\nlibrary SafeMathLib {\n\n/**\n* Issue: Change to internal constant\n**/\n  function minus(uint a, uint b) internal constant returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n/**\n* Issue: Change to internal constant\n**/\n  function plus(uint a, uint b) internal constant returns (uint) {\n    uint c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n}\n\n/**\n * @title Ownable\n * @notice The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\n  address public owner;\n\n  /**\n   * @notice The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @notice Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @notice Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    owner = newOwner;\n  }\n    \n}\n\ncontract HasAddresses {\n    address teamAddress = 0xb72D3a827c7a7267C0c8E14A1F4729bF38950887;\n    address advisoryPoolAddress = 0x83a330c4A0f7b2bBe1B463F7a5a5eb6EA429E981;\n    address companyReserveAddress = 0x6F221CFDdac264146DEBaF88DaaE7Bb811C29fB5;\n    address freePoolAddress = 0x108102b4e6F92a7A140C38F3529c7bfFc950081B;\n}\n\n\ncontract VestingPeriods{\n    uint teamVestingTime = 1557360000;            // GMT: Thursday, 9 May 2019 00:00:00 \n    uint advisoryPoolVestingTime = 1541721600;    // Human time (GMT): Friday, 9 November 2018 00:00:00\n    uint companyReserveAmountVestingTime = 1541721600;    // Human time (GMT): Friday, 9 November 2018 00:00:00\n\n}\n\n\ncontract Vestable {\n\n    uint defaultVestingDate = 1526428800;  // timestamp after which transfers will be enabled,  Wednesday, 16 May 2018 00:00:00\n\n    mapping(address => uint) vestedAddresses ;    // Addresses vested till date\n    bool isVestingOver = false;\n\n    function addVestingAddress(address vestingAddress, uint maturityTimestamp) internal{\n        vestedAddresses[vestingAddress] = maturityTimestamp;\n    }\n\n    function checkVestingTimestamp(address testAddress) public constant returns(uint){\n        return vestedAddresses[testAddress];\n\n    }\n\n    function checkVestingCondition(address sender) internal returns(bool) {\n        uint vestingTimestamp = vestedAddresses[sender];\n        if(vestingTimestamp == 0){\n            vestingTimestamp = defaultVestingDate;\n        }\n        return now > vestingTimestamp;\n    }\n}\n\n/**\n * @title ENKToken Token\n * @notice The ERC20 Token.\n */\ncontract ENKToken is IERC20, Ownable, Vestable, HasAddresses, VestingPeriods {\n    \n    using SafeMathLib for uint256;\n    \n    uint256 public constant totalTokenSupply = 1500000000 * 10**18;\n\n    uint256 public burntTokens;\n\n    string public constant name = \"Enkidu\";    // Enkidu\n    string public constant symbol = \"ENK\";  // ENK\n    uint8 public constant decimals = 18;\n            \n    mapping (address => uint256) public balances;\n    //approved[owner][spender]\n    mapping(address => mapping(address => uint256)) approved;\n    \n    function ENKToken() public {\n        \n        uint256 teamPoolAmount = 420 * 10**6 * 10**18;         // 420 million ENK\n        uint256 advisoryPoolAmount = 19 * 10**5 * 10**18;      // 1.9 million ENK\n        uint256 companyReserveAmount = 135 * 10**6 * 10**18;   // 135 million ENK\n        \n        uint256 freePoolAmmount = totalTokenSupply - teamPoolAmount - advisoryPoolAmount;     //   1.5 billion - ( 556.9 million )\n        balances[teamAddress] = teamPoolAmount;\n        balances[freePoolAddress] = freePoolAmmount;\n        balances[advisoryPoolAddress] = advisoryPoolAmount;    \n        balances[companyReserveAddress] = companyReserveAmount;\n        emit Transfer(address(this), teamAddress, teamPoolAmount);\n        emit Transfer(address(this), freePoolAddress, freePoolAmmount);\n        emit Transfer(address(this), advisoryPoolAddress, advisoryPoolAmount);\n        emit Transfer(address(this), companyReserveAddress, companyReserveAmount);\n        addVestingAddress(teamAddress, teamVestingTime);            // GMT: Thursday, 9 May 2019 00:00:00 \n        addVestingAddress(advisoryPoolAddress, advisoryPoolVestingTime);    // Human time (GMT): Friday, 9 November 2018 00:00:00\n        addVestingAddress(companyReserveAddress, companyReserveAmountVestingTime);    // Human time (GMT): Friday, 9 November 2018 00:00:00\n    }\n\n    function burn(uint256 _value) public {\n        require (balances[msg.sender] >= _value);                 // Check if the sender has enough\n        balances[msg.sender] = balances[msg.sender].minus(_value);\n        burntTokens += _value;\n        emit BurnToken(msg.sender, _value);\n    } \n\n    \n    function totalSupply() constant public returns (uint256 _totalSupply) {\n        return totalTokenSupply - burntTokens;\n    }\n    \n    function balanceOf(address _owner) constant public returns (uint256 balance) {\n        return balances[_owner];\n    }\n    \n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint256 _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balances[_from] >= _value);                 // Check if the sender has enough\n        require (balances[_to] + _value > balances[_to]);   // Check for overflows\n        balances[_from] = balances[_from].minus(_value);    // Subtract from the sender\n        balances[_to] = balances[_to].plus(_value);         // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n    }\n\n    /**\n     * @notice Send `_value` tokens to `_to` from your account\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success){\n        require(checkVestingCondition(msg.sender));\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    /**\n     * @notice Send `_value` tokens to `_to` on behalf of `_from`\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(checkVestingCondition(_from));\n        require (_value <= approved[_from][msg.sender]);     // Check allowance\n        approved[_from][msg.sender] = approved[_from][msg.sender].minus(_value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n    \n    /**\n     * @notice Approve `_value` tokens for `_spender`\n     * @param _spender The address of the sender\n     * @param _value the amount to send\n     */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        require(checkVestingCondition(_spender));\n        if(balances[msg.sender] >= _value) {\n            approved[msg.sender][_spender] = _value;\n            emit Approval(msg.sender, _spender, _value);\n            return true;\n        }\n        return false;\n    }\n        \n    /**\n     * @notice Check `_value` tokens allowed to `_spender` by `_owner`\n     * @param _owner The address of the Owner\n     * @param _spender The address of the Spender\n     */\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n        return approved[_owner][_spender];\n    }\n        \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    event BurnToken(address _owner, uint256 _value);\n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"testAddress\",\"type\":\"address\"}],\"name\":\"checkVestingTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burntTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"BurnToken\",\"type\":\"event\"}]",
  "bytecode": "6060604052635afb74806001556000600360006101000a81548160ff02191690831515021790555073b72d3a827c7a7267c0c8e14a1f4729bf38950887600360016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507383a330c4a0f7b2bbe1b463f7a5a5eb6ea429e981600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550736f221cfddac264146debaf88daae7bb811c29fb5600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073108102b4e6f92a7a140c38f3529c7bffc950081b600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550635cd36d80600755635be4ce00600855635be4ce00600955341561019e57600080fd5b600080600080336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506b015b6a759f4835dc2400000093506a01925734d5b8904b80000092506a6fab5caa0e114fe7000000915082846b04d8c55aefb8c05b5c0000000303905083600b6000600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3610617600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007546106a264010000000002611099176401000000009004565b610658600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166008546106a264010000000002611099176401000000009004565b610699600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166009546106a264010000000002611099176401000000009004565b505050506106ea565b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b61110d806106f96000396000f3006060604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100eb578063095ea7b31461017957806318160ddd146101d35780631ca8b6cb146101fc57806323b872dd1461022557806327e235e31461029e578063313ce567146102eb57806342966c681461031a5780636f64ccf51461033d57806370a082311461038a5780638da5cb5b146103d757806395d89b411461042c578063a9059cbb146104ba578063dd62ed3e14610514578063f2fde38b14610580578063fa20e77d146105b9575b600080fd5b34156100f657600080fd5b6100fe6105e2565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013e578082015181840152602081019050610123565b50505050905090810190601f16801561016b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018457600080fd5b6101b9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061061b565b604051808215151515815260200191505060405180910390f35b34156101de57600080fd5b6101e6610773565b6040518082815260200191505060405180910390f35b341561020757600080fd5b61020f61078b565b6040518082815260200191505060405180910390f35b341561023057600080fd5b610284600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061079b565b604051808215151515815260200191505060405180910390f35b34156102a957600080fd5b6102d5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610961565b6040518082815260200191505060405180910390f35b34156102f657600080fd5b6102fe610979565b604051808260ff1660ff16815260200191505060405180910390f35b341561032557600080fd5b61033b600480803590602001909190505061097e565b005b341561034857600080fd5b610374600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610adf565b6040518082815260200191505060405180910390f35b341561039557600080fd5b6103c1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b28565b6040518082815260200191505060405180910390f35b34156103e257600080fd5b6103ea610b71565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561043757600080fd5b61043f610b96565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561047f578082015181840152602081019050610464565b50505050905090810190601f1680156104ac5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104c557600080fd5b6104fa600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bcf565b604051808215151515815260200191505060405180910390f35b341561051f57600080fd5b61056a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610bfa565b6040518082815260200191505060405180910390f35b341561058b57600080fd5b6105b7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c81565b005b34156105c457600080fd5b6105cc610d5b565b6040518082815260200191505060405180910390f35b6040805190810160405280600681526020017f456e6b696475000000000000000000000000000000000000000000000000000081525081565b600061062683610d61565b151561063157600080fd5b81600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015156107685781600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905061076d565b600090505b92915050565b6000600a546b04d8c55aefb8c05b5c00000003905090565b6b04d8c55aefb8c05b5c00000081565b60006107a684610d61565b15156107b157600080fd5b600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561083c57600080fd5b6108cb82600c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dc090919063ffffffff16565b600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610956848484610dd9565b600190509392505050565b600b6020528060005260406000206000915090505481565b601281565b80600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156109cc57600080fd5b610a1e81600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dc090919063ffffffff16565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600a600082825401925050819055507fe12923b90d8a6ca7dc57994322d2afba0be75f98e97e2b892fd34c0d7c6229693382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f454e4b000000000000000000000000000000000000000000000000000000000081525081565b6000610bda33610d61565b1515610be557600080fd5b610bf0338484610dd9565b6001905092915050565b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610cdc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610d1857600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600a5481565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811415610db55760015490505b804211915050919050565b6000828211151515610dce57fe5b818303905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff1614151515610dff57600080fd5b80600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610e4d57600080fd5b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401111515610edb57600080fd5b610f2d81600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dc090919063ffffffff16565b600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fc281600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461106f90919063ffffffff16565b600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60008082840190508381101580156110875750828110155b151561108f57fe5b8091505092915050565b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505600a165627a7a72305820ce2d266753ac57a19758df671ab1971c67039b13d02bf330586e6eb34dd7373e0029"
}