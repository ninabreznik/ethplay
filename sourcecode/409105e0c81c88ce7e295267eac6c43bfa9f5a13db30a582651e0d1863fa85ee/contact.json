{
  "address": "0x4ccd910ade7ec212a94cb7390513423898ee0429",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NokuCustomERC20Service",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-25\n*/\n\npragma solidity ^0.4.23;\n\n// File: contracts/NokuPricingPlan.sol\n\n/**\n* @dev The NokuPricingPlan contract defines the responsibilities of a Noku pricing plan.\n*/\ncontract NokuPricingPlan {\n    /**\n    * @dev Pay the fee for the service identified by the specified name.\n    * The fee amount shall already be approved by the client.\n    * @param serviceName The name of the target service.\n    * @param multiplier The multiplier of the base service fee to apply.\n    * @param client The client of the target service.\n    * @return true if fee has been paid.\n    */\n    function payFee(bytes32 serviceName, uint256 multiplier, address client) public returns(bool paid);\n\n    /**\n    * @dev Get the usage fee for the service identified by the specified name.\n    * The returned fee amount shall be approved before using #payFee method.\n    * @param serviceName The name of the target service.\n    * @param multiplier The multiplier of the base service fee to apply.\n    * @return The amount to approve before really paying such fee.\n    */\n    function usageFee(bytes32 serviceName, uint256 multiplier) public view returns(uint fee);\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts/NokuCustomToken.sol\n\ncontract NokuCustomToken is Ownable {\n\n    event LogBurnFinished();\n    event LogPricingPlanChanged(address indexed caller, address indexed pricingPlan);\n\n    // The pricing plan determining the fee to be paid in NOKU tokens by customers for using Noku services\n    NokuPricingPlan public pricingPlan;\n\n    // The entity acting as Custom Token service provider i.e. Noku\n    address public serviceProvider;\n\n    // Flag indicating if Custom Token burning has been permanently finished or not.\n    bool public burningFinished;\n\n    /**\n    * @dev Modifier to make a function callable only by service provider i.e. Noku.\n    */\n    modifier onlyServiceProvider() {\n        require(msg.sender == serviceProvider, \"caller is not service provider\");\n        _;\n    }\n\n    modifier canBurn() {\n        require(!burningFinished, \"burning finished\");\n        _;\n    }\n\n    constructor(address _pricingPlan, address _serviceProvider) internal {\n        require(_pricingPlan != 0, \"_pricingPlan is zero\");\n        require(_serviceProvider != 0, \"_serviceProvider is zero\");\n\n        pricingPlan = NokuPricingPlan(_pricingPlan);\n        serviceProvider = _serviceProvider;\n    }\n\n    /**\n    * @dev Presence of this function indicates the contract is a Custom Token.\n    */\n    function isCustomToken() public pure returns(bool isCustom) {\n        return true;\n    }\n\n    /**\n    * @dev Stop burning new tokens.\n    * @return true if the operation was successful.\n    */\n    function finishBurning() public onlyOwner canBurn returns(bool finished) {\n        burningFinished = true;\n\n        emit LogBurnFinished();\n\n        return true;\n    }\n\n    /**\n    * @dev Change the pricing plan of service fee to be paid in NOKU tokens.\n    * @param _pricingPlan The pricing plan of NOKU token to be paid, zero means flat subscription.\n    */\n    function setPricingPlan(address _pricingPlan) public onlyServiceProvider {\n        require(_pricingPlan != 0, \"_pricingPlan is 0\");\n        require(_pricingPlan != address(pricingPlan), \"_pricingPlan == pricingPlan\");\n\n        pricingPlan = NokuPricingPlan(_pricingPlan);\n\n        emit LogPricingPlanChanged(msg.sender, _pricingPlan);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: contracts/NokuTokenBurner.sol\n\ncontract BurnableERC20 is ERC20 {\n    function burn(uint256 amount) public returns (bool burned);\n}\n\n/**\n* @dev The NokuTokenBurner contract has the responsibility to burn the configured fraction of received\n* ERC20-compliant tokens and distribute the remainder to the configured wallet.\n*/\ncontract NokuTokenBurner is Pausable {\n    using SafeMath for uint256;\n\n    event LogNokuTokenBurnerCreated(address indexed caller, address indexed wallet);\n    event LogBurningPercentageChanged(address indexed caller, uint256 indexed burningPercentage);\n\n    // The wallet receiving the unburnt tokens.\n    address public wallet;\n\n    // The percentage of tokens to burn after being received (range [0, 100])\n    uint256 public burningPercentage;\n\n    // The cumulative amount of burnt tokens.\n    uint256 public burnedTokens;\n\n    // The cumulative amount of tokens transferred back to the wallet.\n    uint256 public transferredTokens;\n\n    /**\n    * @dev Create a new NokuTokenBurner with predefined burning fraction.\n    * @param _wallet The wallet receiving the unburnt tokens.\n    */\n    constructor(address _wallet) public {\n        require(_wallet != address(0), \"_wallet is zero\");\n        \n        wallet = _wallet;\n        burningPercentage = 100;\n\n        emit LogNokuTokenBurnerCreated(msg.sender, _wallet);\n    }\n\n    /**\n    * @dev Change the percentage of tokens to burn after being received.\n    * @param _burningPercentage The percentage of tokens to be burnt.\n    */\n    function setBurningPercentage(uint256 _burningPercentage) public onlyOwner {\n        require(0 <= _burningPercentage && _burningPercentage <= 100, \"_burningPercentage not in [0, 100]\");\n        require(_burningPercentage != burningPercentage, \"_burningPercentage equal to current one\");\n        \n        burningPercentage = _burningPercentage;\n\n        emit LogBurningPercentageChanged(msg.sender, _burningPercentage);\n    }\n\n    /**\n    * @dev Called after burnable tokens has been transferred for burning.\n    * @param _token THe extended ERC20 interface supported by the sent tokens.\n    * @param _amount The amount of burnable tokens just arrived ready for burning.\n    */\n    function tokenReceived(address _token, uint256 _amount) public whenNotPaused {\n        require(_token != address(0), \"_token is zero\");\n        require(_amount > 0, \"_amount is zero\");\n\n        uint256 amountToBurn = _amount.mul(burningPercentage).div(100);\n        if (amountToBurn > 0) {\n            assert(BurnableERC20(_token).burn(amountToBurn));\n            \n            burnedTokens = burnedTokens.add(amountToBurn);\n        }\n\n        uint256 amountToTransfer = _amount.sub(amountToBurn);\n        if (amountToTransfer > 0) {\n            assert(BurnableERC20(_token).transfer(wallet, amountToTransfer));\n\n            transferredTokens = transferredTokens.add(amountToTransfer);\n        }\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    hasMintPermission\n    canMint\n    public\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    require(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    ERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    require(token.approve(spender, value));\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/TokenTimelock.sol\n\n/**\n * @title TokenTimelock\n * @dev TokenTimelock is a token holder contract that will allow a\n * beneficiary to extract the tokens after a given release time\n */\ncontract TokenTimelock {\n  using SafeERC20 for ERC20Basic;\n\n  // ERC20 basic token contract being held\n  ERC20Basic public token;\n\n  // beneficiary of tokens after they are released\n  address public beneficiary;\n\n  // timestamp when token release is enabled\n  uint256 public releaseTime;\n\n  constructor(\n    ERC20Basic _token,\n    address _beneficiary,\n    uint256 _releaseTime\n  )\n    public\n  {\n    // solium-disable-next-line security/no-block-members\n    require(_releaseTime > block.timestamp);\n    token = _token;\n    beneficiary = _beneficiary;\n    releaseTime = _releaseTime;\n  }\n\n  /**\n   * @notice Transfers tokens held by timelock to beneficiary.\n   */\n  function release() public {\n    // solium-disable-next-line security/no-block-members\n    require(block.timestamp >= releaseTime);\n\n    uint256 amount = token.balanceOf(this);\n    require(amount > 0);\n\n    token.safeTransfer(beneficiary, amount);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/TokenVesting.sol\n\n/* solium-disable security/no-block-members */\n\npragma solidity ^0.4.23;\n\n\n\n\n\n\n/**\n * @title TokenVesting\n * @dev A token holder contract that can release its token balance gradually like a\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n * owner.\n */\ncontract TokenVesting is Ownable {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20Basic;\n\n  event Released(uint256 amount);\n  event Revoked();\n\n  // beneficiary of tokens after they are released\n  address public beneficiary;\n\n  uint256 public cliff;\n  uint256 public start;\n  uint256 public duration;\n\n  bool public revocable;\n\n  mapping (address => uint256) public released;\n  mapping (address => bool) public revoked;\n\n  /**\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n   * of the balance will have vested.\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n   * @param _start the time (as Unix time) at which point vesting starts \n   * @param _duration duration in seconds of the period in which the tokens will vest\n   * @param _revocable whether the vesting is revocable or not\n   */\n  constructor(\n    address _beneficiary,\n    uint256 _start,\n    uint256 _cliff,\n    uint256 _duration,\n    bool _revocable\n  )\n    public\n  {\n    require(_beneficiary != address(0));\n    require(_cliff <= _duration);\n\n    beneficiary = _beneficiary;\n    revocable = _revocable;\n    duration = _duration;\n    cliff = _start.add(_cliff);\n    start = _start;\n  }\n\n  /**\n   * @notice Transfers vested tokens to beneficiary.\n   * @param token ERC20 token which is being vested\n   */\n  function release(ERC20Basic token) public {\n    uint256 unreleased = releasableAmount(token);\n\n    require(unreleased > 0);\n\n    released[token] = released[token].add(unreleased);\n\n    token.safeTransfer(beneficiary, unreleased);\n\n    emit Released(unreleased);\n  }\n\n  /**\n   * @notice Allows the owner to revoke the vesting. Tokens already vested\n   * remain in the contract, the rest are returned to the owner.\n   * @param token ERC20 token which is being vested\n   */\n  function revoke(ERC20Basic token) public onlyOwner {\n    require(revocable);\n    require(!revoked[token]);\n\n    uint256 balance = token.balanceOf(this);\n\n    uint256 unreleased = releasableAmount(token);\n    uint256 refund = balance.sub(unreleased);\n\n    revoked[token] = true;\n\n    token.safeTransfer(owner, refund);\n\n    emit Revoked();\n  }\n\n  /**\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\n   * @param token ERC20 token which is being vested\n   */\n  function releasableAmount(ERC20Basic token) public view returns (uint256) {\n    return vestedAmount(token).sub(released[token]);\n  }\n\n  /**\n   * @dev Calculates the amount that has already vested.\n   * @param token ERC20 token which is being vested\n   */\n  function vestedAmount(ERC20Basic token) public view returns (uint256) {\n    uint256 currentBalance = token.balanceOf(this);\n    uint256 totalBalance = currentBalance.add(released[token]);\n\n    if (block.timestamp < cliff) {\n      return 0;\n    } else if (block.timestamp >= start.add(duration) || revoked[token]) {\n      return totalBalance;\n    } else {\n      return totalBalance.mul(block.timestamp.sub(start)).div(duration);\n    }\n  }\n}\n\n// File: contracts/NokuCustomERC20.sol\n\n/**\n* @dev The NokuCustomERC20Token contract is a custom ERC20-compliant token available in the Noku Service Platform (NSP).\n* The Noku customer is able to choose the token name, symbol, decimals, initial supply and to administer its lifecycle\n* by minting or burning tokens in order to increase or decrease the token supply.\n*/\ncontract NokuCustomERC20 is NokuCustomToken, DetailedERC20, MintableToken, BurnableToken {\n    using SafeMath for uint256;\n\n    event LogNokuCustomERC20Created(\n        address indexed caller,\n        string indexed name,\n        string indexed symbol,\n        uint8 decimals,\n        uint256 transferableFromBlock,\n        uint256 lockEndBlock,\n        address pricingPlan,\n        address serviceProvider\n    );\n    event LogMintingFeeEnabledChanged(address indexed caller, bool indexed mintingFeeEnabled);\n    event LogInformationChanged(address indexed caller, string name, string symbol);\n    event LogTransferFeePaymentFinished(address indexed caller);\n    event LogTransferFeePercentageChanged(address indexed caller, uint256 indexed transferFeePercentage);\n\n    // Flag indicating if minting fees are enabled or disabled\n    bool public mintingFeeEnabled;\n\n    // Block number from which tokens are initially transferable\n    uint256 public transferableFromBlock;\n\n    // Block number from which initial lock ends\n    uint256 public lockEndBlock;\n\n    // The initially locked balances by address\n    mapping (address => uint256) public initiallyLockedBalanceOf;\n\n    // The fee percentage for Custom Token transfer or zero if transfer is free of charge\n    uint256 public transferFeePercentage;\n\n    // Flag indicating if fee payment in Custom Token transfer has been permanently finished or not. \n    bool public transferFeePaymentFinished;\n\n    // Address of optional Timelock smart contract, otherwise 0x0\n    TokenTimelock public timelock;\n\n    // Address of optional Vesting smart contract, otherwise 0x0\n    TokenVesting public vesting;\n\n    bytes32 public constant BURN_SERVICE_NAME     = \"NokuCustomERC20.burn\";\n    bytes32 public constant MINT_SERVICE_NAME     = \"NokuCustomERC20.mint\";\n    bytes32 public constant TIMELOCK_SERVICE_NAME = \"NokuCustomERC20.timelock\";\n    bytes32 public constant VESTING_SERVICE_NAME  = \"NokuCustomERC20.vesting\";\n\n    modifier canTransfer(address _from, uint _value) {\n        require(block.number >= transferableFromBlock, \"token not transferable\");\n\n        if (block.number < lockEndBlock) {\n            uint256 locked = lockedBalanceOf(_from);\n            if (locked > 0) {\n                uint256 newBalance = balanceOf(_from).sub(_value);\n                require(newBalance >= locked, \"_value exceeds locked amount\");\n            }\n        }\n        _;\n    }\n\n    constructor(\n        string _name,\n        string _symbol,\n        uint8 _decimals,\n        uint256 _transferableFromBlock,\n        uint256 _lockEndBlock,\n        address _pricingPlan,\n        address _serviceProvider\n    )\n    NokuCustomToken(_pricingPlan, _serviceProvider)\n    DetailedERC20(_name, _symbol, _decimals) public\n    {\n        require(bytes(_name).length > 0, \"_name is empty\");\n        require(bytes(_symbol).length > 0, \"_symbol is empty\");\n        require(_lockEndBlock >= _transferableFromBlock, \"_lockEndBlock lower than _transferableFromBlock\");\n\n        transferableFromBlock = _transferableFromBlock;\n        lockEndBlock = _lockEndBlock;\n        mintingFeeEnabled = true;\n\n        emit LogNokuCustomERC20Created(\n            msg.sender,\n            _name,\n            _symbol,\n            _decimals,\n            _transferableFromBlock,\n            _lockEndBlock,\n            _pricingPlan,\n            _serviceProvider\n        );\n    }\n\n    function setMintingFeeEnabled(bool _mintingFeeEnabled) public onlyOwner returns(bool successful) {\n        require(_mintingFeeEnabled != mintingFeeEnabled, \"_mintingFeeEnabled == mintingFeeEnabled\");\n\n        mintingFeeEnabled = _mintingFeeEnabled;\n\n        emit LogMintingFeeEnabledChanged(msg.sender, _mintingFeeEnabled);\n\n        return true;\n    }\n\n    /**\n    * @dev Change the Custom Token detailed information after creation.\n    * @param _name The name to assign to the Custom Token.\n    * @param _symbol The symbol to assign to the Custom Token.\n    */\n    function setInformation(string _name, string _symbol) public onlyOwner returns(bool successful) {\n        require(bytes(_name).length > 0, \"_name is empty\");\n        require(bytes(_symbol).length > 0, \"_symbol is empty\");\n\n        name = _name;\n        symbol = _symbol;\n\n        emit LogInformationChanged(msg.sender, _name, _symbol);\n\n        return true;\n    }\n\n    /**\n    * @dev Stop trasfer fee payment for tokens.\n    * @return true if the operation was successful.\n    */\n    function finishTransferFeePayment() public onlyOwner returns(bool finished) {\n        require(!transferFeePaymentFinished, \"transfer fee finished\");\n\n        transferFeePaymentFinished = true;\n\n        emit LogTransferFeePaymentFinished(msg.sender);\n\n        return true;\n    }\n\n    /**\n    * @dev Change the transfer fee percentage to be paid in Custom tokens.\n    * @param _transferFeePercentage The fee percentage to be paid for transfer in range [0, 100].\n    */\n    function setTransferFeePercentage(uint256 _transferFeePercentage) public onlyOwner {\n        require(0 <= _transferFeePercentage && _transferFeePercentage <= 100, \"_transferFeePercentage not in [0, 100]\");\n        require(_transferFeePercentage != transferFeePercentage, \"_transferFeePercentage equal to current value\");\n\n        transferFeePercentage = _transferFeePercentage;\n\n        emit LogTransferFeePercentageChanged(msg.sender, _transferFeePercentage);\n    }\n\n    function lockedBalanceOf(address _to) public view returns(uint256 locked) {\n        uint256 initiallyLocked = initiallyLockedBalanceOf[_to];\n        if (block.number >= lockEndBlock) return 0;\n        else if (block.number <= transferableFromBlock) return initiallyLocked;\n\n        uint256 releaseForBlock = initiallyLocked.div(lockEndBlock.sub(transferableFromBlock));\n        uint256 released = block.number.sub(transferableFromBlock).mul(releaseForBlock);\n        return initiallyLocked.sub(released);\n    }\n\n    /**\n    * @dev Get the fee to be paid for the transfer of NOKU tokens.\n    * @param _value The amount of NOKU tokens to be transferred.\n    */\n    function transferFee(uint256 _value) public view returns(uint256 usageFee) {\n        return _value.mul(transferFeePercentage).div(100);\n    }\n\n    /**\n    * @dev Check if token transfer is free of any charge or not.\n    * @return true if transfer is free of any charge.\n    */\n    function freeTransfer() public view returns (bool isTransferFree) {\n        return transferFeePaymentFinished || transferFeePercentage == 0;\n    }\n\n    /**\n    * @dev Override #transfer for optionally paying fee to Custom token owner.\n    */\n    function transfer(address _to, uint256 _value) canTransfer(msg.sender, _value) public returns(bool transferred) {\n        if (freeTransfer()) {\n            return super.transfer(_to, _value);\n        }\n        else {\n            uint256 usageFee = transferFee(_value);\n            uint256 netValue = _value.sub(usageFee);\n\n            bool feeTransferred = super.transfer(owner, usageFee);\n            bool netValueTransferred = super.transfer(_to, netValue);\n\n            return feeTransferred && netValueTransferred;\n        }\n    }\n\n    /**\n    * @dev Override #transferFrom for optionally paying fee to Custom token owner.\n    */\n    function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from, _value) public returns(bool transferred) {\n        if (freeTransfer()) {\n            return super.transferFrom(_from, _to, _value);\n        }\n        else {\n            uint256 usageFee = transferFee(_value);\n            uint256 netValue = _value.sub(usageFee);\n\n            bool feeTransferred = super.transferFrom(_from, owner, usageFee);\n            bool netValueTransferred = super.transferFrom(_from, _to, netValue);\n\n            return feeTransferred && netValueTransferred;\n        }\n    }\n\n    /**\n    * @dev Burn a specific amount of tokens, paying the service fee.\n    * @param _amount The amount of token to be burned.\n    */\n    function burn(uint256 _amount) public canBurn {\n        require(_amount > 0, \"_amount is zero\");\n\n        super.burn(_amount);\n\n        require(pricingPlan.payFee(BURN_SERVICE_NAME, _amount, msg.sender), \"burn fee failed\");\n    }\n\n    /**\n    * @dev Mint a specific amount of tokens, paying the service fee.\n    * @param _to The address that will receive the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns(bool minted) {\n        require(_to != 0, \"_to is zero\");\n        require(_amount > 0, \"_amount is zero\");\n\n        super.mint(_to, _amount);\n\n        if (mintingFeeEnabled) {\n            require(pricingPlan.payFee(MINT_SERVICE_NAME, _amount, msg.sender), \"mint fee failed\");\n        }\n\n        return true;\n    }\n\n    /**\n    * @dev Mint new locked tokens, which will unlock progressively.\n    * @param _to The address that will receieve the minted locked tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mintLocked(address _to, uint256 _amount) public onlyOwner canMint returns(bool minted) {\n        initiallyLockedBalanceOf[_to] = initiallyLockedBalanceOf[_to].add(_amount);\n\n        return mint(_to, _amount);\n    }\n\n    /**\n     * @dev Mint the specified amount of timelocked tokens.\n     * @param _to The address that will receieve the minted locked tokens.\n     * @param _amount The amount of tokens to mint.\n     * @param _releaseTime The token release time as timestamp from Unix epoch.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mintTimelocked(address _to, uint256 _amount, uint256 _releaseTime) public onlyOwner canMint\n    returns(bool minted)\n    {\n        require(timelock == address(0), \"TokenTimelock already activated\");\n\n        timelock = new TokenTimelock(this, _to, _releaseTime);\n\n        minted = mint(timelock, _amount);\n\n        require(pricingPlan.payFee(TIMELOCK_SERVICE_NAME, _amount, msg.sender), \"timelock fee failed\");\n    }\n\n    /**\n    * @dev Mint the specified amount of vested tokens.\n    * @param _to The address that will receieve the minted vested tokens.\n    * @param _amount The amount of tokens to mint.\n    * @param _startTime When the vesting starts as timestamp in seconds from Unix epoch.\n    * @param _duration The duration in seconds of the period in which the tokens will vest.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mintVested(address _to, uint256 _amount, uint256 _startTime, uint256 _duration) public onlyOwner canMint\n    returns(bool minted)\n    {\n        require(vesting == address(0), \"TokenVesting already activated\");\n\n        vesting = new TokenVesting(_to, _startTime, 0, _duration, true);\n\n        minted = mint(vesting, _amount);\n\n        require(pricingPlan.payFee(VESTING_SERVICE_NAME, _amount, msg.sender), \"vesting fee failed\");\n    }\n\n    /**\n     * @dev Release vested tokens to the beneficiary. Anyone can release vested tokens.\n    * @return A boolean that indicates if the operation was successful.\n     */\n    function releaseVested() public returns(bool released) {\n        require(vesting != address(0), \"TokenVesting not activated\");\n\n        vesting.release(this);\n\n        return true;\n    }\n\n    /**\n     * @dev Revoke vested tokens. Just the token can revoke because it is the vesting owner.\n    * @return A boolean that indicates if the operation was successful.\n     */\n    function revokeVested() public onlyOwner returns(bool revoked) {\n        require(vesting != address(0), \"TokenVesting not activated\");\n\n        vesting.revoke(this);\n\n        return true;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   *  as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(addr) }\n    return size > 0;\n  }\n\n}\n\n// File: contracts/NokuCustomService.sol\n\ncontract NokuCustomService is Pausable {\n    using AddressUtils for address;\n\n    event LogPricingPlanChanged(address indexed caller, address indexed pricingPlan);\n\n    // The pricing plan determining the fee to be paid in NOKU tokens by customers\n    NokuPricingPlan public pricingPlan;\n\n    constructor(address _pricingPlan) internal {\n        require(_pricingPlan.isContract(), \"_pricingPlan is not contract\");\n\n        pricingPlan = NokuPricingPlan(_pricingPlan);\n    }\n\n    function setPricingPlan(address _pricingPlan) public onlyOwner {\n        require(_pricingPlan.isContract(), \"_pricingPlan is not contract\");\n        require(NokuPricingPlan(_pricingPlan) != pricingPlan, \"_pricingPlan equal to current\");\n        \n        pricingPlan = NokuPricingPlan(_pricingPlan);\n\n        emit LogPricingPlanChanged(msg.sender, _pricingPlan);\n    }\n}\n\n// File: contracts/NokuCustomERC20Service.sol\n\n/**\n* @dev The NokuCustomERC2Service contract .\n*/\ncontract NokuCustomERC20Service is NokuCustomService {\n    event LogNokuCustomERC20ServiceCreated(address caller, address indexed pricingPlan);\n\n    uint256 public constant CREATE_AMOUNT = 1 * 10**18;\n\n    uint8 public constant DECIMALS = 18;\n\n    bytes32 public constant CUSTOM_ERC20_CREATE_SERVICE_NAME = \"NokuCustomERC20.create\";\n\n    constructor(address _pricingPlan) NokuCustomService(_pricingPlan) public {\n        emit LogNokuCustomERC20ServiceCreated(msg.sender, _pricingPlan);\n    }\n\n    // TODO: REMOVE\n    function createCustomToken(string _name, string _symbol, uint8 /*_decimals*/) public returns(NokuCustomERC20 customToken) {\n        customToken = new NokuCustomERC20(\n            _name,\n            _symbol,\n            DECIMALS,\n            block.number,\n            block.number,\n            pricingPlan,\n            owner\n        );\n\n        // Transfer NokuCustomERC20 ownership to the client\n        customToken.transferOwnership(msg.sender);\n\n        require(pricingPlan.payFee(CUSTOM_ERC20_CREATE_SERVICE_NAME, CREATE_AMOUNT, msg.sender), \"fee payment failed\");\n    }\n\n    function createCustomToken(\n        string _name,\n        string _symbol,\n        uint8 /*_decimals*/,\n        uint256 transferableFromBlock,\n        uint256 lockEndBlock\n    )\n    public returns(NokuCustomERC20 customToken)\n    {\n        customToken = new NokuCustomERC20(\n            _name,\n            _symbol,\n            DECIMALS,\n            transferableFromBlock,\n            lockEndBlock,\n            pricingPlan,\n            owner\n        );\n\n        // Transfer NokuCustomERC20 ownership to the client\n        customToken.transferOwnership(msg.sender);\n\n        require(pricingPlan.payFee(CUSTOM_ERC20_CREATE_SERVICE_NAME, CREATE_AMOUNT, msg.sender), \"fee payment failed\");\n    }\n}",
  "bytecode": "60806040526000805460a060020a60ff021916905534801561002057600080fd5b50604051602080614c7a833981016040525160008054600160a060020a0319163317905580610064600160a060020a038216640100000000610cfb61012b82021704565b15156100d157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5f70726963696e67506c616e206973206e6f7420636f6e747261637400000000604482015290519081900360640190fd5b60018054600160a060020a031916600160a060020a03928316179055604080513381529051918316917f969d3a9602100fd0b18133972bf64c865ed3dac412fe4c18c6a69b4ac0cae99d916020908290030190a250610133565b6000903b1190565b614b38806101426000396000f300608060405260043610620000d25763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632372996a8114620000d75780632e0f262514620001015780633f4ba83a146200012f57806345fc916c14620001495780635c975abb146200016d57806362308b761462000199578063715018a6146200025e5780638456cb5914620002765780638da5cb5b146200028e578063a178788014620002a6578063d6c12f881462000345578063f2fde38b146200035d578063f97944e01462000381575b600080fd5b348015620000e457600080fd5b50620000ef62000399565b60408051918252519081900360200190f35b3480156200010e57600080fd5b5062000119620003bd565b6040805160ff9092168252519081900360200190f35b3480156200013c57600080fd5b5062000147620003c2565b005b3480156200015657600080fd5b5062000147600160a060020a03600435166200044b565b3480156200017a57600080fd5b50620001856200058e565b604080519115158252519081900360200190f35b348015620001a657600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526200024294369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497505050833560ff1694505050602082013591604001359050620005af565b60408051600160a060020a039092168252519081900360200190f35b3480156200026b57600080fd5b5062000147620008a8565b3480156200028357600080fd5b506200014762000915565b3480156200029b57600080fd5b5062000242620009b4565b348015620002b357600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526200024294369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497505050923560ff169350620009c392505050565b3480156200035257600080fd5b506200024262000cba565b3480156200036a57600080fd5b5062000147600160a060020a036004351662000cc9565b3480156200038e57600080fd5b50620000ef62000cef565b7f4e6f6b75437573746f6d45524332302e6372656174650000000000000000000081565b601281565b600054600160a060020a03163314620003da57600080fd5b60005474010000000000000000000000000000000000000000900460ff1615156200040457600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b600054600160a060020a031633146200046357600080fd5b6200047781600160a060020a031662000cfb565b1515620004ce576040805160e560020a62461bcd02815260206004820152601c60248201527f5f70726963696e67506c616e206973206e6f7420636f6e747261637400000000604482015290519081900360640190fd5b600154600160a060020a038281169116141562000535576040805160e560020a62461bcd02815260206004820152601d60248201527f5f70726963696e67506c616e20657175616c20746f2063757272656e74000000604482015290519081900360640190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03831690811790915560405133907f9c9a71911f32ca6a40ea2146f75e1c43335f2862b3c1c9696d22cd10e86311c290600090a350565b60005474010000000000000000000000000000000000000000900460ff1681565b6001546000805490918791879160129187918791600160a060020a039182169116620005da62000d81565b60ff861660408201526060810185905260808101849052600160a060020a0380841660a0830152821660c082015260e0808252885190820152875181906020808301916101008401918c019080838360005b83811015620006465781810151838201526020016200062c565b50505050905090810190601f168015620006745780820380516001836020036101000a031916815260200191505b5083810382528951815289516020918201918b019080838360005b83811015620006a95781810151838201526020016200068f565b50505050905090810190601f168015620006d75780820380516001836020036101000a031916815260200191505b509950505050505050505050604051809103906000f08015801562000700573d6000803e3d6000fd5b50604080517ff2fde38b0000000000000000000000000000000000000000000000000000000081523360048201529051919250600160a060020a0383169163f2fde38b9160248082019260009290919082900301818387803b1580156200076657600080fd5b505af11580156200077b573d6000803e3d6000fd5b5050600154604080517fd30b53860000000000000000000000000000000000000000000000000000000081527f4e6f6b75437573746f6d45524332302e637265617465000000000000000000006004820152670de0b6b3a764000060248201523360448201529051600160a060020a03909216935063d30b538692506064808201926020929091908290030181600087803b1580156200081a57600080fd5b505af11580156200082f573d6000803e3d6000fd5b505050506040513d60208110156200084657600080fd5b505115156200089f576040805160e560020a62461bcd02815260206004820152601260248201527f666565207061796d656e74206661696c65640000000000000000000000000000604482015290519081900360640190fd5b95945050505050565b600054600160a060020a03163314620008c057600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031633146200092d57600080fd5b60005474010000000000000000000000000000000000000000900460ff16156200095657600080fd5b6000805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b600054600160a060020a031681565b6001546000805490918591859160129143918291600160a060020a039182169116620009ee62000d81565b60ff861660408201526060810185905260808101849052600160a060020a0380841660a0830152821660c082015260e0808252885190820152875181906020808301916101008401918c019080838360005b8381101562000a5a57818101518382015260200162000a40565b50505050905090810190601f16801562000a885780820380516001836020036101000a031916815260200191505b5083810382528951815289516020918201918b019080838360005b8381101562000abd57818101518382015260200162000aa3565b50505050905090810190601f16801562000aeb5780820380516001836020036101000a031916815260200191505b509950505050505050505050604051809103906000f08015801562000b14573d6000803e3d6000fd5b50604080517ff2fde38b0000000000000000000000000000000000000000000000000000000081523360048201529051919250600160a060020a0383169163f2fde38b9160248082019260009290919082900301818387803b15801562000b7a57600080fd5b505af115801562000b8f573d6000803e3d6000fd5b5050600154604080517fd30b53860000000000000000000000000000000000000000000000000000000081527f4e6f6b75437573746f6d45524332302e637265617465000000000000000000006004820152670de0b6b3a764000060248201523360448201529051600160a060020a03909216935063d30b538692506064808201926020929091908290030181600087803b15801562000c2e57600080fd5b505af115801562000c43573d6000803e3d6000fd5b505050506040513d602081101562000c5a57600080fd5b5051151562000cb3576040805160e560020a62461bcd02815260206004820152601260248201527f666565207061796d656e74206661696c65640000000000000000000000000000604482015290519081900360640190fd5b9392505050565b600154600160a060020a031681565b600054600160a060020a0316331462000ce157600080fd5b62000cec8162000d03565b50565b670de0b6b3a764000081565b6000903b1190565b600160a060020a038116151562000d1957600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b604051613d7a8062000d9383390190560060806040526008805461ff00191690553480156200001c57600080fd5b5060405162003d7a38038062003d7a83398101604090815281516020830151918301516060840151608085015160a086015160c087015160038054600160a060020a031916331790559487019695909501949293919290918686868484600160a060020a0382161515620000f157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5f70726963696e67506c616e206973207a65726f000000000000000000000000604482015290519081900360640190fd5b600160a060020a03811615156200016957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5f7365727669636550726f7669646572206973207a65726f0000000000000000604482015290519081900360640190fd5b60048054600160a060020a03938416600160a060020a031991821617909155600580549290931691161790558251620001aa9060069060208601906200048b565b508151620001c09060079060208501906200048b565b506008805460ff191660ff92909216919091179055505086516000106200024857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f5f6e616d6520697320656d707479000000000000000000000000000000000000604482015290519081900360640190fd5b8551600010620002b957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5f73796d626f6c20697320656d70747900000000000000000000000000000000604482015290519081900360640190fd5b838310156200034f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f5f6c6f636b456e64426c6f636b206c6f776572207468616e205f7472616e736660448201527f657261626c6546726f6d426c6f636b0000000000000000000000000000000000606482015290519081900360840190fd5b6009849055600a8390556008805462ff00001916620100001790556040518651879190819060208401908083835b602083106200039e5780518252601f1990920191602091820191016200037d565b51815160209384036101000a60001901801990921691161790526040519190930181900381208c519095508c945090928392508401908083835b60208310620003f95780518252601f199092019160209182019101620003d8565b51815160001960209485036101000a019081169019919091161790526040805194909201849003842060ff8d1685529084018b90528382018a9052600160a060020a0389811660608601528816608085015290519094503393507fffac283a0bc347ff4213d7f3193ac2f974f5f3fcb29268473805b324469e09929281900360a0019150a45050505050505062000530565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620004ce57805160ff1916838001178555620004fe565b82800160010185558215620004fe579182015b82811115620004fe578251825591602001919060010190620004e1565b506200050c92915062000510565b5090565b6200052d91905b808211156200050c576000815560010162000517565b90565b61383a80620005406000396000f300608060405260043610620002765763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d1a94681146200027b57806305d2035b14620002a757806306fdde0314620002bf578063095ea7b3146200034f57806318160ddd14620003765780631f800e8e14620003a0578063211ed6c114620003b857806323b872dd14620003d0578063313ce56714620003fd57806334fb11ed146200042b57806339e613d914620004485780633a4a921e146200047557806340c10f19146200048d57806342966c6814620004b457806343f1b29914620004d157806344c63eec14620004e957806345fc916c146200051d5780635143e246146200054157806354111f3414620005685780635546a12c146200058057806359355736146200061a57806366188463146200063e578063695a4cad146200066557806370a08231146200067d578063715018a614620006a15780637a14c9fa14620006b95780637d64bcb414620006dd57806383b5832314620006f55780638587edbb14620007105780638d69e95e14620007285780638da5cb5b146200074057806393ed382b146200075857806395d89b4114620007705780639d11aaaa1462000788578063a0138f3414620007a0578063a40ac7f914620007b8578063a9059cbb14620007d0578063c14a3b8c14620007f7578063c1688c3e1462000821578063c78b200c1462000839578063d33219b41462000851578063d42035611462000869578063d6c12f881462000884578063d73dd623146200089c578063d8bf0ef814620008c3578063dd62ed3e14620008db578063e6f1a1891462000905578063f2fde38b146200091d575b600080fd5b3480156200028857600080fd5b506200029362000941565b604080519115158252519081900360200190f35b348015620002b457600080fd5b506200029362000962565b348015620002cc57600080fd5b50620002d762000970565b6040805160208082528351818301528351919283929083019185019080838360005b8381101562000313578181015183820152602001620002f9565b50505050905090810190601f168015620003415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156200035c57600080fd5b5062000293600160a060020a036004351660243562000a02565b3480156200038357600080fd5b506200038e62000a69565b60408051918252519081900360200190f35b348015620003ad57600080fd5b506200029362000a70565b348015620003c557600080fd5b506200029362000b5c565b348015620003dd57600080fd5b5062000293600160a060020a036004358116906024351660443562000b76565b3480156200040a57600080fd5b506200041562000d08565b6040805160ff9092168252519081900360200190f35b3480156200043857600080fd5b5062000293600435151562000d11565b3480156200045557600080fd5b5062000293600160a060020a036004351660243560443560643562000e08565b3480156200048257600080fd5b50620002936200103d565b3480156200049a57600080fd5b5062000293600160a060020a036004351660243562001121565b348015620004c157600080fd5b50620004cf60043562001338565b005b348015620004de57600080fd5b506200029362001517565b348015620004f657600080fd5b506200050162001526565b60408051600160a060020a039092168252519081900360200190f35b3480156200052a57600080fd5b50620004cf600160a060020a036004351662001535565b3480156200054e57600080fd5b5062000293600160a060020a0360043516602435620016b9565b3480156200057557600080fd5b506200038e62001741565b3480156200058d57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526200029394369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750620017659650505050505050565b3480156200062757600080fd5b506200038e600160a060020a036004351662001979565b3480156200064b57600080fd5b5062000293600160a060020a036004351660243562001a32565b3480156200067257600080fd5b506200029362001b26565b3480156200068a57600080fd5b506200038e600160a060020a036004351662001bdb565b348015620006ae57600080fd5b50620004cf62001bf6565b348015620006c657600080fd5b506200038e600160a060020a036004351662001c65565b348015620006ea57600080fd5b506200029362001c77565b3480156200070257600080fd5b50620004cf60043562001ce6565b3480156200071d57600080fd5b506200038e62001e44565b3480156200073557600080fd5b506200050162001e4a565b3480156200074d57600080fd5b506200050162001e59565b3480156200076557600080fd5b506200029362001e68565b3480156200077d57600080fd5b50620002d762001e71565b3480156200079557600080fd5b506200038e62001ecf565b348015620007ad57600080fd5b506200038e62001ed5565b348015620007c557600080fd5b506200038e62001ef9565b348015620007dd57600080fd5b5062000293600160a060020a036004351660243562001f1d565b3480156200080457600080fd5b5062000293600160a060020a03600435166024356044356200209d565b3480156200082e57600080fd5b506200038e620022cb565b3480156200084657600080fd5b506200038e620022ef565b3480156200085e57600080fd5b5062000501620022f5565b3480156200087657600080fd5b506200038e60043562002309565b3480156200089157600080fd5b506200050162002335565b348015620008a957600080fd5b5062000293600160a060020a036004351660243562002344565b348015620008d057600080fd5b5062000293620023df565b348015620008e857600080fd5b506200038e600160a060020a0360043581169060243516620024d2565b3480156200091257600080fd5b5062000293620024fd565b3480156200092a57600080fd5b50620004cf600160a060020a036004351662002502565b60055474010000000000000000000000000000000000000000900460ff1681565b600854610100900460ff1681565b6006805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015620009fa5780601f10620009ce57610100808354040283529160200191620009fa565b820191906000526020600020905b815481529060010190602001808311620009dc57829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b6001545b90565b600e54600090600160a060020a0316151562000ad6576040805160e560020a62461bcd02815260206004820152601a60248201527f546f6b656e56657374696e67206e6f7420616374697661746564000000000000604482015290519081900360640190fd5b600e54604080517f191655870000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a039092169163191655879160248082019260009290919082900301818387803b15801562000b3c57600080fd5b505af115801562000b51573d6000803e3d6000fd5b505050506001905090565b600d5460009060ff168062000b715750600c54155b905090565b60008060008060008786600080600954431015151562000be0576040805160e560020a62461bcd02815260206004820152601660248201527f746f6b656e206e6f74207472616e7366657261626c6500000000000000000000604482015290519081900360640190fd5b600a5443101562000c7a5762000bf68462001979565b9150600082111562000c7a5762000c1f8362000c128662001bdb565b9063ffffffff6200252516565b90508181101562000c7a576040805160e560020a62461bcd02815260206004820152601c60248201527f5f76616c75652065786365656473206c6f636b656420616d6f756e7400000000604482015290519081900360640190fd5b62000c8462000b5c565b1562000c9f5762000c978c8c8c62002538565b985062000cf9565b62000caa8a62002309565b975062000cbe8a8963ffffffff6200252516565b60035490975062000cdb908d90600160a060020a03168a62002538565b955062000cea8c8c8962002538565b945085801562000c9757508498505b50505050505050509392505050565b60085460ff1681565b600354600090600160a060020a0316331462000d2c57600080fd5b60085462010000900460ff161515821515141562000dba576040805160e560020a62461bcd02815260206004820152602760248201527f5f6d696e74696e67466565456e61626c6564203d3d206d696e74696e6746656560448201527f456e61626c656400000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6008805462ff00001916620100008415159081029190911790915560405133907f821fbee541cea2b5df335d1b36016da2ce6c1c1e0fbcd4910b3256f647278a4190600090a3506001919050565b600354600090600160a060020a0316331462000e2357600080fd5b600854610100900460ff161562000e3957600080fd5b600e54600160a060020a03161562000e9b576040805160e560020a62461bcd02815260206004820152601e60248201527f546f6b656e56657374696e6720616c7265616479206163746976617465640000604482015290519081900360640190fd5b8483600084600162000eac62002a4b565b600160a060020a039095168552602085019390935260408085019290925260608401529015156080830152519081900360a001906000f08015801562000ef6573d6000803e3d6000fd5b50600e805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03928316179081905562000f2f91168562001121565b600480546040805160e160020a636985a9c30281527f4e6f6b75437573746f6d45524332302e76657374696e67000000000000000000938101939093526024830188905233604484015251929350600160a060020a03169163d30b5386916064808201926020929091908290030181600087803b15801562000fb057600080fd5b505af115801562000fc5573d6000803e3d6000fd5b505050506040513d602081101562000fdc57600080fd5b5051151562001035576040805160e560020a62461bcd02815260206004820152601260248201527f76657374696e6720666565206661696c65640000000000000000000000000000604482015290519081900360640190fd5b949350505050565b600354600090600160a060020a031633146200105857600080fd5b600e54600160a060020a03161515620010bb576040805160e560020a62461bcd02815260206004820152601a60248201527f546f6b656e56657374696e67206e6f7420616374697661746564000000000000604482015290519081900360640190fd5b600e54604080517f74a8f1030000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916374a8f1039160248082019260009290919082900301818387803b15801562000b3c57600080fd5b600354600090600160a060020a031633146200113c57600080fd5b600854610100900460ff16156200115257600080fd5b600160a060020a0383161515620011b3576040805160e560020a62461bcd02815260206004820152600b60248201527f5f746f206973207a65726f000000000000000000000000000000000000000000604482015290519081900360640190fd5b600082116200120c576040805160e560020a62461bcd02815260206004820152600f60248201527f5f616d6f756e74206973207a65726f0000000000000000000000000000000000604482015290519081900360640190fd5b620012188383620026a7565b5060085462010000900460ff16156200132f57600480546040805160e160020a636985a9c30281527f4e6f6b75437573746f6d45524332302e6d696e74000000000000000000000000938101939093526024830185905233604484015251600160a060020a039091169163d30b53869160648083019260209291908290030181600087803b158015620012aa57600080fd5b505af1158015620012bf573d6000803e3d6000fd5b505050506040513d6020811015620012d657600080fd5b505115156200132f576040805160e560020a62461bcd02815260206004820152600f60248201527f6d696e7420666565206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b50600192915050565b60055474010000000000000000000000000000000000000000900460ff1615620013ac576040805160e560020a62461bcd02815260206004820152601060248201527f6275726e696e672066696e697368656400000000000000000000000000000000604482015290519081900360640190fd5b6000811162001405576040805160e560020a62461bcd02815260206004820152600f60248201527f5f616d6f756e74206973207a65726f0000000000000000000000000000000000604482015290519081900360640190fd5b6200141081620027a4565b600480546040805160e160020a636985a9c30281527f4e6f6b75437573746f6d45524332302e6275726e000000000000000000000000938101939093526024830184905233604484015251600160a060020a039091169163d30b53869160648083019260209291908290030181600087803b1580156200148f57600080fd5b505af1158015620014a4573d6000803e3d6000fd5b505050506040513d6020811015620014bb57600080fd5b5051151562001514576040805160e560020a62461bcd02815260206004820152600f60248201527f6275726e20666565206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b50565b60085462010000900460ff1681565b600e54600160a060020a031681565b600554600160a060020a0316331462001598576040805160e560020a62461bcd02815260206004820152601e60248201527f63616c6c6572206973206e6f7420736572766963652070726f76696465720000604482015290519081900360640190fd5b600160a060020a0381161515620015f9576040805160e560020a62461bcd02815260206004820152601160248201527f5f70726963696e67506c616e2069732030000000000000000000000000000000604482015290519081900360640190fd5b600454600160a060020a038281169116141562001660576040805160e560020a62461bcd02815260206004820152601b60248201527f5f70726963696e67506c616e203d3d2070726963696e67506c616e0000000000604482015290519081900360640190fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03831690811790915560405133907f9c9a71911f32ca6a40ea2146f75e1c43335f2862b3c1c9696d22cd10e86311c290600090a350565b600354600090600160a060020a03163314620016d457600080fd5b600854610100900460ff1615620016ea57600080fd5b600160a060020a0383166000908152600b602052604090205462001715908363ffffffff620027b016565b600160a060020a0384166000908152600b60205260409020556200173a838362001121565b9392505050565b7f4e6f6b75437573746f6d45524332302e76657374696e6700000000000000000081565b600354600090600160a060020a031633146200178057600080fd5b8251600010620017da576040805160e560020a62461bcd02815260206004820152600e60248201527f5f6e616d6520697320656d707479000000000000000000000000000000000000604482015290519081900360640190fd5b815160001062001834576040805160e560020a62461bcd02815260206004820152601060248201527f5f73796d626f6c20697320656d70747900000000000000000000000000000000604482015290519081900360640190fd5b82516200184990600690602086019062002a5c565b5081516200185f90600790602085019062002a5c565b5033600160a060020a03167f4fb2719cda24ae06a6afbb0dc809a85e90179958f115a961b9267b32ebd2bcf18484604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015620018d0578181015183820152602001620018b6565b50505050905090810190601f168015620018fe5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156200193357818101518382015260200162001919565b50505050905090810190601f168015620019615780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a250600192915050565b600160a060020a0381166000908152600b6020526040812054600a54829081904310620019aa576000935062001a2a565b6009544311620019bd5782935062001a2a565b620019e8620019da600954600a546200252590919063ffffffff16565b849063ffffffff620027be16565b915062001a138262001a06600954436200252590919063ffffffff16565b9063ffffffff620027d416565b905062001a27838263ffffffff6200252516565b93505b505050919050565b336000908152600260209081526040808320600160a060020a03861684529091528120548083111562001a8957336000908152600260209081526040808320600160a060020a038816845290915281205562001ac0565b62001a9b818463ffffffff6200252516565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600354600090600160a060020a0316331462001b4157600080fd5b600d5460ff161562001b9d576040805160e560020a62461bcd02815260206004820152601560248201527f7472616e73666572206665652066696e69736865640000000000000000000000604482015290519081900360640190fd5b600d805460ff1916600117905560405133907f765560b1633a2e84e2f70e9a170eadabd88016d06521fdbd96173b76397921fc90600090a250600190565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a0316331462001c0e57600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600b6020526000908152604090205481565b600354600090600160a060020a0316331462001c9257600080fd5b600854610100900460ff161562001ca857600080fd5b6008805461ff0019166101001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a0316331462001cfe57600080fd5b8060001115801562001d11575060648111155b151562001d8e576040805160e560020a62461bcd02815260206004820152602660248201527f5f7472616e7366657246656550657263656e74616765206e6f7420696e205b3060448201527f2c203130305d0000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600c5481141562001e0f576040805160e560020a62461bcd02815260206004820152602d60248201527f5f7472616e7366657246656550657263656e7461676520657175616c20746f2060448201527f63757272656e742076616c756500000000000000000000000000000000000000606482015290519081900360840190fd5b600c819055604051819033907f19bf068d9fe12625fe44e47e65489a1c664e2c130ecd26b0a51a3f79853b723790600090a350565b600a5481565b600554600160a060020a031681565b600354600160a060020a031681565b600d5460ff1681565b6007805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015620009fa5780601f10620009ce57610100808354040283529160200191620009fa565b600c5481565b7f4e6f6b75437573746f6d45524332302e74696d656c6f636b000000000000000081565b7f4e6f6b75437573746f6d45524332302e6d696e7400000000000000000000000081565b60008060008060003386600080600954431015151562001f87576040805160e560020a62461bcd02815260206004820152601660248201527f746f6b656e206e6f74207472616e7366657261626c6500000000000000000000604482015290519081900360640190fd5b600a54431015620020145762001f9d8462001979565b91506000821115620020145762001fb98362000c128662001bdb565b90508181101562002014576040805160e560020a62461bcd02815260206004820152601c60248201527f5f76616c75652065786365656473206c6f636b656420616d6f756e7400000000604482015290519081900360640190fd5b6200201e62000b5c565b156200203857620020308b8b62002801565b98506200208f565b620020438a62002309565b9750620020578a8963ffffffff6200252516565b6003549097506200207290600160a060020a03168962002801565b9550620020808b8862002801565b94508580156200203057508498505b505050505050505092915050565b600354600090600160a060020a03163314620020b857600080fd5b600854610100900460ff1615620020ce57600080fd5b600d546101009004600160a060020a03161562002135576040805160e560020a62461bcd02815260206004820152601f60248201527f546f6b656e54696d656c6f636b20616c72656164792061637469766174656400604482015290519081900360640190fd5b3084836200214262002ae1565b600160a060020a039384168152919092166020820152604080820192909252905190819003606001906000f08015801562002181573d6000803e3d6000fd5b50600d805474ffffffffffffffffffffffffffffffffffffffff001916610100600160a060020a0393841681029190911791829055620021c5929104168462001121565b600480546040805160e160020a636985a9c30281527f4e6f6b75437573746f6d45524332302e74696d656c6f636b0000000000000000938101939093526024830187905233604484015251929350600160a060020a03169163d30b5386916064808201926020929091908290030181600087803b1580156200224657600080fd5b505af11580156200225b573d6000803e3d6000fd5b505050506040513d60208110156200227257600080fd5b505115156200173a576040805160e560020a62461bcd02815260206004820152601360248201527f74696d656c6f636b20666565206661696c656400000000000000000000000000604482015290519081900360640190fd5b7f4e6f6b75437573746f6d45524332302e6275726e00000000000000000000000081565b60095481565b600d546101009004600160a060020a031681565b600062000a63606462002328600c5485620027d490919063ffffffff16565b9063ffffffff620027be16565b600454600160a060020a031681565b336000908152600260209081526040808320600160a060020a03861684529091528120546200237a908363ffffffff620027b016565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600354600090600160a060020a03163314620023fa57600080fd5b60055474010000000000000000000000000000000000000000900460ff16156200246e576040805160e560020a62461bcd02815260206004820152601060248201527f6275726e696e672066696e697368656400000000000000000000000000000000604482015290519081900360640190fd5b6005805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517f568cefe030b2537eb3dba37e9ebf22cfc3e51ae8aca52125c6053a0c16ca730a90600090a150600190565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600190565b600354600160a060020a031633146200251a57600080fd5b6200151481620028d7565b6000828211156200253257fe5b50900390565b6000600160a060020a03831615156200255057600080fd5b600160a060020a0384166000908152602081905260409020548211156200257657600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115620025a757600080fd5b600160a060020a038416600090815260208190526040902054620025d2908363ffffffff6200252516565b600160a060020a03808616600090815260208190526040808220939093559085168152205462002609908363ffffffff620027b016565b600160a060020a038085166000908152602081815260408083209490945591871681526002825282812033825290915220546200264d908363ffffffff6200252516565b600160a060020a0380861660008181526002602090815260408083203384528252918290209490945580518681529051928716939192600080516020620037ef833981519152929181900390910190a35060019392505050565b600354600090600160a060020a03163314620026c257600080fd5b600854610100900460ff1615620026d857600080fd5b600154620026ed908363ffffffff620027b016565b600155600160a060020a0383166000908152602081905260409020546200271b908363ffffffff620027b016565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a03851691600091600080516020620037ef8339815191529181900360200190a350600192915050565b62001514338262002956565b8181018281101562000a6357fe5b60008183811515620027cc57fe5b049392505050565b6000821515620027e75750600062000a63565b50818102818382811515620027f857fe5b041462000a6357fe5b6000600160a060020a03831615156200281957600080fd5b336000908152602081905260409020548211156200283657600080fd5b3360009081526020819052604090205462002858908363ffffffff6200252516565b3360009081526020819052604080822092909255600160a060020a038516815220546200288c908363ffffffff620027b016565b600160a060020a03841660008181526020818152604091829020939093558051858152905191923392600080516020620037ef8339815191529281900390910190a350600192915050565b600160a060020a0381161515620028ed57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0382166000908152602081905260409020548111156200297c57600080fd5b600160a060020a038216600090815260208190526040902054620029a7908263ffffffff6200252516565b600160a060020a038316600090815260208190526040902055600154620029d5908263ffffffff6200252516565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a03851691600080516020620037ef8339815191529181900360200190a35050565b6040516109968062002b1083390190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062002a9f57805160ff191683800117855562002acf565b8280016001018555821562002acf579182015b8281111562002acf57825182559160200191906001019062002ab2565b5062002add92915062002af2565b5090565b60405161034980620034a683390190565b62000a6d91905b8082111562002add576000815560010162002af95600608060405234801561001057600080fd5b5060405160a0806109968339810160409081528151602083015191830151606084015160809094015160008054600160a060020a0319163317905591939091600160a060020a038516151561006457600080fd5b8183111561007157600080fd5b60018054600160a060020a031916600160a060020a0387161790556005805460ff191682151517905560048290556100b684846401000000006100c5810261071c1704565b600255505050600355506100d8565b818101828110156100d257fe5b92915050565b6108af806100e76000396000f3006080604052600436106100b65763ffffffff60e060020a6000350416630fb5a6b481146100bb57806313d033c0146100e25780631726cbc8146100f75780631916558714610118578063384711cc1461013b57806338af3eed1461015c578063715018a61461018d57806374a8f103146101a2578063872a7810146101c35780638da5cb5b146101ec5780639852595c14610201578063be9a655514610222578063f2fde38b14610237578063fa01dc0614610258575b600080fd5b3480156100c757600080fd5b506100d0610279565b60408051918252519081900360200190f35b3480156100ee57600080fd5b506100d061027f565b34801561010357600080fd5b506100d0600160a060020a0360043516610285565b34801561012457600080fd5b50610139600160a060020a03600435166102bd565b005b34801561014757600080fd5b506100d0600160a060020a0360043516610369565b34801561016857600080fd5b506101716104c0565b60408051600160a060020a039092168252519081900360200190f35b34801561019957600080fd5b506101396104cf565b3480156101ae57600080fd5b50610139600160a060020a036004351661053b565b3480156101cf57600080fd5b506101d86106a2565b604080519115158252519081900360200190f35b3480156101f857600080fd5b506101716106ab565b34801561020d57600080fd5b506100d0600160a060020a03600435166106ba565b34801561022e57600080fd5b506100d06106cc565b34801561024357600080fd5b50610139600160a060020a03600435166106d2565b34801561026457600080fd5b506101d8600160a060020a03600435166106f5565b60045481565b60025481565b600160a060020a0381166000908152600660205260408120546102b7906102ab84610369565b9063ffffffff61070a16565b92915050565b60006102c882610285565b9050600081116102d757600080fd5b600160a060020a038216600090815260066020526040902054610300908263ffffffff61071c16565b600160a060020a038084166000818152600660205260409020929092556001546103329291168363ffffffff61072916565b6040805182815290517ffb81f9b30d73d830c3544b34d827c08142579ee75710b490bab0b3995468c5659181900360200190a15050565b600080600083600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156103c957600080fd5b505af11580156103dd573d6000803e3d6000fd5b505050506040513d60208110156103f357600080fd5b5051600160a060020a03851660009081526006602052604090205490925061042290839063ffffffff61071c16565b905060025442101561043757600092506104b9565b60045460035461044c9163ffffffff61071c16565b421015806104725750600160a060020a03841660009081526007602052604090205460ff165b1561047f578092506104b9565b6104b66004546104aa61049d6003544261070a90919063ffffffff16565b849063ffffffff6107c816565b9063ffffffff6107f116565b92505b5050919050565b600154600160a060020a031681565b600054600160a060020a031633146104e657600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000805481908190600160a060020a0316331461055757600080fd5b60055460ff16151561056857600080fd5b600160a060020a03841660009081526007602052604090205460ff161561058e57600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038616916370a082319160248083019260209291908290030181600087803b1580156105ef57600080fd5b505af1158015610603573d6000803e3d6000fd5b505050506040513d602081101561061957600080fd5b5051925061062684610285565b9150610638838363ffffffff61070a16565b600160a060020a038086166000818152600760205260408120805460ff1916600117905554929350610673929091168363ffffffff61072916565b6040517f44825a4b2df8acb19ce4e1afba9aa850c8b65cdb7942e2078f27d0b0960efee690600090a150505050565b60055460ff1681565b600054600160a060020a031681565b60066020526000908152604090205481565b60035481565b600054600160a060020a031633146106e957600080fd5b6106f281610806565b50565b60076020526000908152604090205460ff1681565b60008282111561071657fe5b50900390565b818101828110156102b757fe5b82600160a060020a031663a9059cbb83836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561078c57600080fd5b505af11580156107a0573d6000803e3d6000fd5b505050506040513d60208110156107b657600080fd5b505115156107c357600080fd5b505050565b60008215156107d9575060006102b7565b508181028183828115156107e957fe5b04146102b757fe5b600081838115156107fe57fe5b049392505050565b600160a060020a038116151561081b57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058209b0ebc180c2e7a475cfe80170ef151f98ef3c1e4fc8918d75f6b55fbca0a14ba0029608060405234801561001057600080fd5b5060405160608061034983398101604090815281516020830151919092015142811161003b57600080fd5b60008054600160a060020a03948516600160a060020a03199182161790915560018054939094169216919091179091556002556102cc8061007d6000396000f3006080604052600436106100615763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166338af3eed811461006657806386d1a69f14610097578063b91d4001146100ae578063fc0c546a146100d5575b600080fd5b34801561007257600080fd5b5061007b6100ea565b60408051600160a060020a039092168252519081900360200190f35b3480156100a357600080fd5b506100ac6100f9565b005b3480156100ba57600080fd5b506100c36101d3565b60408051918252519081900360200190f35b3480156100e157600080fd5b5061007b6101d9565b600154600160a060020a031681565b60025460009042101561010b57600080fd5b60008054604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216926370a08231926024808401936020939083900390910190829087803b15801561017257600080fd5b505af1158015610186573d6000803e3d6000fd5b505050506040513d602081101561019c57600080fd5b50519050600081116101ad57600080fd5b6001546000546101d091600160a060020a0391821691168363ffffffff6101e816565b50565b60025481565b600054600160a060020a031681565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561026457600080fd5b505af1158015610278573d6000803e3d6000fd5b505050506040513d602081101561028e57600080fd5b5051151561029b57600080fd5b5050505600a165627a7a72305820f4e455169fface34304b52b0decc8716cb482fbd78e008e423bb77c6f773cc780029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820fa491b531042218bebe61269753fd4208edf114ea77bdc24f17c1c410f3026e00029a165627a7a72305820d5023ac2d92712fdb80ca7bdb739551801d8cbf33383f6a1f867d8222b11bf850029000000000000000000000000749aba9e082ccb185d1ef88fa514339e3c3368d3",
  "constructorArguments": "000000000000000000000000749aba9e082ccb185d1ef88fa514339e3c3368d3"
}