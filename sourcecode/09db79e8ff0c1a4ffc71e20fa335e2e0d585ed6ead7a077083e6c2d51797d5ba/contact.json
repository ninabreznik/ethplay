{
  "address": "0xf9b540d1104e46e22bde406f422cd152f205e523",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenDAA",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-06\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\ninterface tokenRecipient { \n    function receiveApproval(address _from, uint256 _value, address _token, bytes  _extraData) external; \n}\n\ninterface CitizenInterface {\n    function pushGametRefIncome(address _sender) external payable;\n    function pushGametRefIncomeToken(address _sender, uint256 _amount) external;\n    function addGameWinIncome(address _citizen, uint256 _value, bool _enough) external;\n    function addGameEthSpendWin(address _citizen, uint256 _value, uint256 _valuewin, bool _enough) external;\n}\n\nlibrary SafeMath {\n    int256 constant private INT256_MIN = -2**255;\n\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Multiplies two signed integers, reverts on overflow.\n    */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\n\n        int256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n    */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\n        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two signed integers, reverts on overflow.\n    */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two signed integers, reverts on overflow.\n    */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract TokenDAA {\n    \n    modifier onlyCoreContract() {\n        require(isCoreContract[msg.sender], \"admin required\");\n        _;\n    }\n    \n    modifier onlyAdmin() {\n        require(msg.sender == devTeam1, \"admin required\");\n        _;\n    }\n    \n    using SafeMath for *;\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 10;\n    uint256 public totalSupply;\n    uint256 public totalSupplyBurned;\n    uint256 public unitRate;\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => uint256) public totalSupplyByAddress;\n    mapping (address => mapping (address => uint256)) public allowance;\n    \n    // Mining Token\n    uint256 public HARD_TOTAL_SUPPLY = 20000000;\n    uint256 public HARD_TOTAL_SUPPLY_BY_LEVEL = 200000;\n    uint8 public MAX_LEVEL = 9;\n    uint8 public MAX_ROUND = 10;\n    uint256[10] public ETH_WIN = [uint(55),60,65,70,75,80,85,90,95,100]; // take 3 demical rest is 15\n    uint256[10] public ETH_LOSE = [uint(50),55,60,65,70,75,80,85,90,95]; // take 3 demical rest is 15\n    uint8 public currentRound = 1;\n    uint8 public currentLevel = 0;\n    mapping (uint256 => mapping(uint256 =>uint256)) public totalSupplyByLevel;\n\n    // Event\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Burn(address indexed from, uint256 value, uint256 creationDate);\n    \n    // Contract\n    mapping (address => bool) public isCoreContract;\n    uint256 public coreContractSum;\n    address[] public coreContracts;\n    CitizenInterface CitizenContract;\n    address devTeam1;\n    address devTeam2;\n    address devTeam3;\n    address devTeam4;\n    \n    // Freeze Tokens\n    uint256 LIMIT_FREEZE_TOKEN = 10;\n \n\n    struct Profile{\n        uint256 citizenBalanceToken;\n        uint256 citizenBalanceEth;\n        mapping(uint256=>uint256) citizenFrozenBalance;\n        uint256 lastDividendPulledRound;\n    }\n\n    uint256 public currentRoundDividend=1;\n    struct DividendRound{\n        uint256 totalEth;\n        uint256 totalEthCredit;\n        uint256 totalToken;\n        uint256 totalTokenCredit;\n        uint256 totalFrozenBalance;\n        uint256 endRoundTime;\n    }\n    uint8 public BURN_TOKEN_PERCENT = 50;\n    uint8 public DIVIDEND_FOR_CURRENT_PERCENT = 70;\n    uint8 public DIVIDEND_KEEP_NEXT_PERCENT = 30;\n    uint256 public NEXT_DEVIDEND_ROUND= 1209600; // 2 week = 1209600 seconds\n    uint256 public clockDevidend;\n    \n    mapping (uint256 => DividendRound) public dividendRound;\n    mapping (address => Profile) public citizen;\n    \n\n    /**\n     * Constructor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n     \n    constructor(address[4] _devTeam) public {\n        // totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        totalSupply = 0;\n        unitRate = 10 ** uint256(decimals);\n        HARD_TOTAL_SUPPLY = HARD_TOTAL_SUPPLY.mul(unitRate);\n        HARD_TOTAL_SUPPLY_BY_LEVEL = HARD_TOTAL_SUPPLY_BY_LEVEL.mul(unitRate);\n        LIMIT_FREEZE_TOKEN = LIMIT_FREEZE_TOKEN.mul(unitRate);\n        \n        for (uint i = 0; i < ETH_WIN.length; i++){\n            ETH_WIN[i] = ETH_WIN[i].mul(10 ** uint256(15));\n            ETH_LOSE[i]= ETH_LOSE[i].mul(10 ** uint256(15));\n        }\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"DABANKING\";                                   // Set the name for display purposes\n        symbol = \"DAA\";                               // Set the symbol for display purposes\n        clockDevidend = 1561899600;\n        \n        devTeam1 = _devTeam[0];\n        devTeam2 = _devTeam[1];\n        devTeam3 = _devTeam[2];\n        devTeam4 = _devTeam[3];\n    }\n    \n\n    // DAAContract, TicketContract, CitizenContract \n    function joinNetwork(address[3] _contract)\n        public\n    {\n        require(address(CitizenContract) == 0x0,\"already setup\");\n        CitizenContract = CitizenInterface(_contract[2]);\n        for(uint256 i =0; i<3; i++){\n            isCoreContract[_contract[i]]=true;\n            coreContracts.push(_contract[i]);\n        }\n        coreContractSum = 3;\n    }\n    \n    function changeDev4(address _address) public onlyAdmin(){\n        require(_address!=0x0,\"Invalid address\");\n        devTeam4 = _address;\n    }\n\n    function addCoreContract(address _address) public  // [dev1]\n        onlyAdmin()\n    {\n        require(_address!=0x0,\"Invalid address\");\n        isCoreContract[_address] = true;\n        coreContracts.push(_address);\n        coreContractSum+=1;\n    }\n    \n    function balanceOf(address _sender) public view returns(uint256) {\n        return balanceOf[_sender] - citizen[_sender].citizenFrozenBalance[currentRoundDividend];\n    }  \n    \n    function getBalanceOf(address _sender) public view returns(uint256) {\n        return balanceOf[_sender] - citizen[_sender].citizenFrozenBalance[currentRoundDividend];\n    } \n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != address(0x0));\n        // Check if the sender has enough\n        require(getBalanceOf(_from) >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        if (_to == address(this)){\n            citizen[msg.sender].citizenBalanceToken += _value;\n        }\n\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    function citizenFreeze(uint _value) public returns (bool success) {\n        require(balanceOf[msg.sender]-citizen[msg.sender].citizenFrozenBalance[currentRoundDividend]>= _value);\n        require(citizen[msg.sender].citizenFrozenBalance[currentRoundDividend] + _value >= LIMIT_FREEZE_TOKEN,\"Must over than limit\");\n        citizen[msg.sender].citizenFrozenBalance[currentRoundDividend] += _value;\n        dividendRound[currentRoundDividend].totalFrozenBalance += _value;\n        return true;\n    }\n    \n    function citizenUnfreeze() public returns (bool success) {\n        require(citizen[msg.sender].citizenFrozenBalance[currentRoundDividend]>0);\n        dividendRound[currentRoundDividend].totalFrozenBalance -= citizen[msg.sender].citizenFrozenBalance[currentRoundDividend];\n        citizen[msg.sender].citizenFrozenBalance[currentRoundDividend]=0;\n        return true;\n    }\n    \n    function getCitizenFreezing(address _sender) public view returns(uint256){\n        return citizen[_sender].citizenFrozenBalance[currentRoundDividend];\n    }    \n    \n    function getCitizenFreezingBuyRound(address _sender, uint256 _round) public view returns(uint256){\n        return citizen[_sender].citizenFrozenBalance[_round];\n    } \n    \n    function getCitizenDevidendBuyRound(address _sender, uint256 _round) public view returns(uint256){\n        uint256 _totalEth = dividendRound[_round].totalEth;\n        if (dividendRound[_round].totalEthCredit==0&&dividendRound[_round].totalFrozenBalance>0){\n            return _totalEth*citizen[_sender].citizenFrozenBalance[_round]/dividendRound[_round].totalFrozenBalance;\n        }\n        return 0;\n    }\n    \n    function getDividendView(address _sender) public view returns(uint256){\n        uint256 _last_round = citizen[_sender].lastDividendPulledRound;\n        if (_last_round + 100 < currentRoundDividend) _last_round = currentRoundDividend - 100;\n        uint256 _sum;\n        uint256 _citizen_fronzen;\n        uint256 _totalEth;\n        for (uint256 i = _last_round;i<currentRoundDividend;i++){\n            _totalEth = dividendRound[i].totalEth;\n            if (dividendRound[i].totalEthCredit==0&&dividendRound[i].totalFrozenBalance>0){\n                _citizen_fronzen = citizen[_sender].citizenFrozenBalance[i];\n                _sum = _sum.add(_totalEth.mul(_citizen_fronzen).div(dividendRound[i].totalFrozenBalance));\n            }\n        }\n        return _sum;\n    }\n    \n    function getDividendPull(address _sender, uint256 _value) public returns(uint256){\n        uint256 _last_round = citizen[_sender].lastDividendPulledRound;\n        if (_last_round + 100 < currentRoundDividend) _last_round = currentRoundDividend - 100;\n        uint256 _sum;\n        uint256 _citizen_fronzen;\n        uint256 _totalEth;\n        for (uint256 i = _last_round;i<currentRoundDividend;i++){\n            _totalEth = dividendRound[i].totalEth;\n            if (dividendRound[i].totalEthCredit==0&&dividendRound[i].totalFrozenBalance>0){\n                _citizen_fronzen = citizen[_sender].citizenFrozenBalance[i];\n                _sum = _sum.add(_totalEth.mul(_citizen_fronzen).div(dividendRound[i].totalFrozenBalance));\n            }\n        }\n        if (_value.add(_sum)==0){\n            require(dividendRound[currentRoundDividend].totalEthCredit==0);   \n        }\n        if (citizen[_sender].citizenBalanceEth>0&&dividendRound[currentRoundDividend].totalEthCredit==0){\n            _sum = _sum.add(citizen[_sender].citizenBalanceEth);\n            citizen[_sender].citizenBalanceEth = 0;\n        }\n        _sender.transfer(_sum);\n        citizen[_sender].lastDividendPulledRound = currentRoundDividend;\n        return _sum;\n    }\n    \n    // automatic after 2 share 70% weeks keep 30% next round [dev4]\n    function endDividendRound() public {\n        require(msg.sender==devTeam4);\n        require(now>clockDevidend);\n        dividendRound[currentRoundDividend].endRoundTime = now;\n        uint256 _for_next_round;\n        if (dividendRound[currentRoundDividend].totalEthCredit>0){\n            // mean totalEth is <0\n            _for_next_round = dividendRound[currentRoundDividend].totalEth;\n           dividendRound[currentRoundDividend+1].totalEth = _for_next_round;\n           dividendRound[currentRoundDividend+1].totalEthCredit = dividendRound[currentRoundDividend].totalEthCredit;\n        }\n        else{\n            _for_next_round = dividendRound[currentRoundDividend].totalEth*DIVIDEND_KEEP_NEXT_PERCENT/100;\n            dividendRound[currentRoundDividend].totalEth = dividendRound[currentRoundDividend].totalEth*DIVIDEND_FOR_CURRENT_PERCENT/100;\n            dividendRound[currentRoundDividend+1].totalEth = _for_next_round;\n        }\n        if (dividendRound[currentRoundDividend].totalTokenCredit>0){\n            dividendRound[currentRoundDividend+1].totalToken = dividendRound[currentRoundDividend].totalToken;\n            dividendRound[currentRoundDividend+1].totalTokenCredit = dividendRound[currentRoundDividend].totalTokenCredit;\n        }\n        else{\n            // Burn 50% token\n            _for_next_round = dividendRound[currentRoundDividend].totalToken*BURN_TOKEN_PERCENT/100;\n            dividendRound[currentRoundDividend+1].totalToken = _for_next_round;\n            burnFrom(address(this),_for_next_round);\n            burnFrom(devTeam2,_for_next_round*4/6);\n            // balanceOf[address(this)] = balanceOf[address(this)].sub(_for_next_round);\n            // balanceOf[devTeam2] = balanceOf[devTeam2].sub();\n            // totalSupply = totalSupply.sub(_for_next_round*10/6);\n        }\n        currentRoundDividend+=1;\n        clockDevidend= clockDevidend.add(NEXT_DEVIDEND_ROUND);\n    }\n    \n    // share 100% dividen [dev 1]\n    function nextDividendRound() onlyAdmin() public {\n        require(dividendRound[currentRoundDividend].totalEth>0);\n        dividendRound[currentRoundDividend].endRoundTime = now;\n        currentRoundDividend+=1;\n        // clockDevidend = clockDevidend.add(NEXT_DEVIDEND_ROUND);\n    }\n    \n    \n    function citizenDeposit(uint _value) public returns (bool success) {\n        require(getBalanceOf(msg.sender)>=_value);\n        _transfer(msg.sender, address(this), _value);\n        return true;\n    }\n    \n    function citizenUseDeposit(address _citizen, uint _value) onlyCoreContract() public{\n        require(citizen[_citizen].citizenBalanceToken >= _value,\"Not enough Token\");\n        dividendRound[currentRoundDividend].totalToken += _value;\n        if (dividendRound[currentRoundDividend].totalToken>dividendRound[currentRoundDividend].totalTokenCredit&&dividendRound[currentRoundDividend].totalTokenCredit>0){\n            dividendRound[currentRoundDividend].totalToken = dividendRound[currentRoundDividend].totalToken.sub(dividendRound[currentRoundDividend].totalTokenCredit);\n            dividendRound[currentRoundDividend].totalTokenCredit=0;\n        }\n        citizen[_citizen].citizenBalanceToken-=_value;\n    }\n    \n    function pushDividend() public payable{\n        uint256 _value = msg.value;\n        dividendRound[currentRoundDividend].totalEth = dividendRound[currentRoundDividend].totalEth.add(_value);\n        if (dividendRound[currentRoundDividend].totalEth>dividendRound[currentRoundDividend].totalEthCredit&&dividendRound[currentRoundDividend].totalEthCredit>0){\n            dividendRound[currentRoundDividend].totalEth = dividendRound[currentRoundDividend].totalEth.sub(dividendRound[currentRoundDividend].totalEthCredit);\n            dividendRound[currentRoundDividend].totalEthCredit=0;\n        }\n    }\n    \n    function payOut(address _winner, uint256 _unit, uint256 _value, uint256 _valuebet) onlyCoreContract() public{\n        if (_unit==0){\n            citizenMintToken(_winner,_valuebet,1);\n            if (dividendRound[currentRoundDividend].totalEth<_value){\n                // ghi no citizen \n                citizen[_winner].citizenBalanceEth+=_value;\n                CitizenContract.addGameEthSpendWin(_winner, _valuebet, _value, false);\n                dividendRound[currentRoundDividend].totalEthCredit+=_value;\n            }\n            else{\n                _winner.transfer(_value);\n                CitizenContract.addGameEthSpendWin(_winner, _valuebet, _value, true);\n                dividendRound[currentRoundDividend].totalEth = dividendRound[currentRoundDividend].totalEth.sub(_value);\n            }\n        }\n        else{\n            if (dividendRound[currentRoundDividend].totalToken<_value){\n                dividendRound[currentRoundDividend].totalTokenCredit += _value;\n                citizen[_winner].citizenBalanceToken+=_value;\n            }\n            else {\n                dividendRound[currentRoundDividend].totalToken -= _value;\n                citizen[_winner].citizenBalanceToken+=_value;\n            }\n        }\n    }\n    \n    // Tomorrow\n    function pushGameRefIncome(address _sender,uint256 _unit, uint256 _value) public onlyCoreContract(){\n        if (_unit==1){\n            dividendRound[currentRoundDividend].totalEth = dividendRound[currentRoundDividend].totalEth.sub(_value);\n            CitizenContract.pushGametRefIncome.value(_value)(_sender);\n        }else{\n            CitizenContract.pushGametRefIncomeToken(_sender,_value);\n        }\n        \n    }\n\n    function citizenWithdrawDeposit(uint _value) public returns (bool success){\n        require(citizen[msg.sender].citizenBalanceToken >=_value);\n        _transfer(address(this),msg.sender,_value);\n        citizen[msg.sender].citizenBalanceToken-=_value;\n        return true;\n    }\n    \n    function ethToToken(uint256 _ethAmount, int8 _is_win) private view returns(uint256){\n        if (_is_win==1) {\n            return uint256(_ethAmount) * unitRate / uint256(ETH_WIN[currentLevel]);}\n        return _ethAmount * unitRate / uint256(ETH_LOSE[currentLevel]) ;\n    }    \n\n    function citizenMintToken(address _buyer, uint256 _buyPrice, int8 _is_win) public onlyCoreContract() returns(uint256) {\n        uint256 revTokens = ethToToken( _buyPrice, _is_win);\n\n        if (revTokens*10/6 + totalSupplyByLevel[currentRound][currentLevel] > HARD_TOTAL_SUPPLY_BY_LEVEL){\n            uint256 revTokenCurrentLevel = HARD_TOTAL_SUPPLY_BY_LEVEL.sub(totalSupplyByLevel[currentRound][currentLevel]);\n            revTokenCurrentLevel = revTokenCurrentLevel*6/10;\n            balanceOf[_buyer]= balanceOf[_buyer].add(revTokenCurrentLevel);\n            emit Transfer(0x0, _buyer, revTokenCurrentLevel);\n            totalSupplyByAddress[_buyer] = totalSupplyByAddress[_buyer].add(revTokenCurrentLevel);\n            balanceOf[devTeam2] = balanceOf[devTeam2].add(revTokenCurrentLevel*4/6);\n            emit Transfer(0x0, devTeam2, revTokenCurrentLevel*4/6);\n            \n            totalSupply = totalSupply.add(revTokenCurrentLevel*10/6);\n            totalSupplyByLevel[currentRound][currentLevel] = HARD_TOTAL_SUPPLY_BY_LEVEL;\n            \n            // End round uplevel\n            if (currentLevel+1>MAX_LEVEL){\n                if(currentRound+1>MAX_ROUND){\n                    return revTokenCurrentLevel;\n                }\n                currentRound+=1;\n                currentLevel=0;\n            } else {\n                currentLevel+=1;\n            }\n            \n            // Push pushDividend change to each 2 weeks\n            return revTokenCurrentLevel;\n        } else {\n            balanceOf[_buyer]= balanceOf[_buyer].add(revTokens);\n            emit Transfer(0x0, _buyer, revTokens);\n            totalSupplyByAddress[_buyer] = totalSupplyByAddress[_buyer].add(revTokens);\n            balanceOf[devTeam2] = balanceOf[devTeam2].add(revTokens*4/6);\n            emit Transfer(0x0, devTeam2, revTokens*4/6);\n            \n            totalSupply = totalSupply.add(revTokens*10/6);\n            totalSupplyByLevel[currentRound][currentLevel] = totalSupplyByLevel[currentRound][currentLevel].add(revTokens*10/6);\n            return revTokens;\n        }\n    }\n    \n    function getCitizenBalanceEth(address _sender) view public returns(uint256){\n        return citizen[_sender].citizenBalanceEth;\n    } \n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` on behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        // emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value, now);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        // require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        // allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        totalSupplyBurned += _value;\n        emit Burn(_from, _value, now);\n        return true;\n    }\n}",
  "bytecode": "6080604052600a600260006101000a81548160ff021916908360ff1602179055506301312d0060095562030d40600a556009600b60006101000a81548160ff021916908360ff160217905550600a600b60016101000a81548160ff021916908360ff1602179055506101406040519081016040528060378152602001603c81526020016041815260200160468152602001604b81526020016050815260200160558152602001605a8152602001605f81526020016064815250600c90600a620000ca929190620005e2565b50610140604051908101604052806032815260200160378152602001603c81526020016041815260200160468152602001604b81526020016050815260200160558152602001605a8152602001605f815250601690600a6200012e929190620005e2565b506001602060006101000a81548160ff021916908360ff1602179055506000602060016101000a81548160ff021916908360ff160217905550600a602a556001602b556032602c60006101000a81548160ff021916908360ff1602179055506046602c60016101000a81548160ff021916908360ff160217905550601e602c60026101000a81548160ff021916908360ff16021790555062127500602d55348015620001d957600080fd5b506040516080806200539983398101806040528101908091905050600080600381905550600260009054906101000a900460ff1660ff16600a0a60058190555062000240600554600954620005a06401000000000262004801179091906401000000009004565b6009819055506200026d600554600a54620005a06401000000000262004801179091906401000000009004565b600a819055506200029a600554602a54620005a06401000000000262004801179091906401000000009004565b602a81905550600090505b600a8110156200035757620002e7600f600a0a600c83600a81101515620002c857fe5b0154620005a06401000000000262004801179091906401000000009004565b600c82600a81101515620002f757fe5b018190555062000334600f600a0a601683600a811015156200031557fe5b0154620005a06401000000000262004801179091906401000000009004565b601682600a811015156200034457fe5b01819055508080600101915050620002a5565b600354600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506040805190810160405280600981526020017f444142414e4b494e47000000000000000000000000000000000000000000000081525060009080519060200190620003ea92919062000627565b506040805190810160405280600381526020017f4441410000000000000000000000000000000000000000000000000000000000815250600190805190602001906200043892919062000627565b50635d18b250602e819055508160006004811015156200045457fe5b6020020151602660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816001600481101515620004a957fe5b6020020151602760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816002600481101515620004fe57fe5b6020020151602860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160036004811015156200055357fe5b6020020151602960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620006d6565b6000806000841415620005b75760009150620005db565b8284029050828482811515620005c957fe5b04141515620005d757600080fd5b8091505b5092915050565b82600a810192821562000614579160200282015b8281111562000613578251825591602001919060010190620005f6565b5b509050620006239190620006ae565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200066a57805160ff19168380011785556200069b565b828001600101855582156200069b579182015b828111156200069a5782518255916020019190600101906200067d565b5b509050620006aa9190620006ae565b5090565b620006d391905b80821115620006cf576000816000905550600101620006b5565b5090565b90565b614cb380620006e66000396000f30060806040526004361061029e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063012c56cc146102a357806306fdde0314610304578063095ea7b314610394578063096024e4146103f9578063159fb08a1461044657806318160ddd146104a757806318af295f146104d257806323b872dd14610540578063291603f4146105c5578063292a01c8146106105780632e8c9026146106675780632eb684c9146106925780632f9dfc99146106d7578063313ce5671461072e5780633187b8711461075f578063381c5f92146107b157806339c846d5146107e2578063418751ea1461082757806342966c68146108685780634cf13f5c146108ad57806352a8f201146108f257806359012e8e14610909578063647ca4b2146109605780636a227a491461098b5780636b2192a2146109ec5780637021c15d14610a2d57806370a0823114610a9a57806370b0d06614610af157806379cc679014610b085780637a7d974d14610b6d5780637b71b38414610b9e578063859f6d8a14610be15780638a19c8bc14610c0c57806395d89b4114610c3d5780639b86a6db14610ccd5780639b96eece14610d325780639dc4b9c914610d89578063a49062d414610dba578063a8b5d65414610deb578063a9059cbb14610e16578063b462554714610e7b578063b4ac62c514610ed2578063b94e5c6814610f03578063ba604da614610f2e578063bbe9628a14610f38578063c620356914610f8f578063c6ee602914610fd2578063cae9ca5114611001578063d22a20cd146110ac578063dd62ed3e14611107578063e06a37da1461117e578063e6dd5155146111df578063e936694f1461120a578063ee5023e51461126e578063f52a00ca14611299578063f6710bf6146112c4575b600080fd5b3480156102af57600080fd5b506102ee600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112f5565b6040518082815260200191505060405180910390f35b34801561031057600080fd5b50610319611353565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035957808201518184015260208101905061033e565b50505050905090810190601f1680156103865780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103a057600080fd5b506103df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113f1565b604051808215151515815260200191505060405180910390f35b34801561040557600080fd5b50610444600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061147e565b005b34801561045257600080fd5b50610491600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061174d565b6040518082815260200191505060405180910390f35b3480156104b357600080fd5b506104bc611abc565b6040518082815260200191505060405180910390f35b3480156104de57600080fd5b5061052a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803560000b9060200190929190505050611ac2565b6040518082815260200191505060405180910390f35b34801561054c57600080fd5b506105ab600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612480565b604051808215151515815260200191505060405180910390f35b3480156105d157600080fd5b506105fa60048036038101908080359060200190929190803590602001909291905050506125ad565b6040518082815260200191505060405180910390f35b34801561061c57600080fd5b50610651600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506125d2565b6040518082815260200191505060405180910390f35b34801561067357600080fd5b5061067c61275e565b6040518082815260200191505060405180910390f35b34801561069e57600080fd5b506106bd60048036038101908080359060200190929190505050612764565b604051808215151515815260200191505060405180910390f35b3480156106e357600080fd5b50610718600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612791565b6040518082815260200191505060405180910390f35b34801561073a57600080fd5b506107436127dd565b604051808260ff1660ff16815260200191505060405180910390f35b34801561076b57600080fd5b506107af60048036038101908080606001906003806020026040519081016040528092919082600360200280828437820191505050505091929192905050506127f0565b005b3480156107bd57600080fd5b506107c66129fe565b604051808260ff1660ff16815260200191505060405180910390f35b3480156107ee57600080fd5b5061080d60048036038101908080359060200190929190505050612a11565b604051808215151515815260200191505060405180910390f35b34801561083357600080fd5b5061085260048036038101908080359060200190929190505050612c1b565b6040518082815260200191505060405180910390f35b34801561087457600080fd5b5061089360048036038101908080359060200190929190505050612c35565b604051808215151515815260200191505060405180910390f35b3480156108b957600080fd5b506108d860048036038101908080359060200190929190505050612d41565b604051808215151515815260200191505060405180910390f35b3480156108fe57600080fd5b50610907612df8565b005b34801561091557600080fd5b5061094a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612f14565b6040518082815260200191505060405180910390f35b34801561096c57600080fd5b50610975612f73565b6040518082815260200191505060405180910390f35b34801561099757600080fd5b506109d6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612f79565b6040518082815260200191505060405180910390f35b3480156109f857600080fd5b50610a1760048036038101908080359060200190929190505050613060565b6040518082815260200191505060405180910390f35b348015610a3957600080fd5b50610a586004803603810190808035906020019092919050505061307a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610aa657600080fd5b50610adb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506130b8565b6040518082815260200191505060405180910390f35b348015610afd57600080fd5b50610b06613158565b005b348015610b1457600080fd5b50610b53600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613497565b604051808215151515815260200191505060405180910390f35b348015610b7957600080fd5b50610b826135b4565b604051808260ff1660ff16815260200191505060405180910390f35b348015610baa57600080fd5b50610bdf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506135c7565b005b348015610bed57600080fd5b50610bf66137ed565b6040518082815260200191505060405180910390f35b348015610c1857600080fd5b50610c216137f3565b604051808260ff1660ff16815260200191505060405180910390f35b348015610c4957600080fd5b50610c52613806565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c92578082015181840152602081019050610c77565b50505050905090810190601f168015610cbf5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610cd957600080fd5b50610d0e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506138a4565b60405180848152602001838152602001828152602001935050505060405180910390f35b348015610d3e57600080fd5b50610d73600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506138ce565b6040518082815260200191505060405180910390f35b348015610d9557600080fd5b50610d9e61396e565b604051808260ff1660ff16815260200191505060405180910390f35b348015610dc657600080fd5b50610dcf613981565b604051808260ff1660ff16815260200191505060405180910390f35b348015610df757600080fd5b50610e00613994565b6040518082815260200191505060405180910390f35b348015610e2257600080fd5b50610e61600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061399a565b604051808215151515815260200191505060405180910390f35b348015610e8757600080fd5b50610ed0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506139b1565b005b348015610ede57600080fd5b50610ee7613c80565b604051808260ff1660ff16815260200191505060405180910390f35b348015610f0f57600080fd5b50610f18613c93565b6040518082815260200191505060405180910390f35b610f36613c99565b005b348015610f4457600080fd5b50610f79600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613dc2565b6040518082815260200191505060405180910390f35b348015610f9b57600080fd5b50610fd0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613dda565b005b348015610fde57600080fd5b50610fe7613f72565b604051808215151515815260200191505060405180910390f35b34801561100d57600080fd5b50611092600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506140b4565b604051808215151515815260200191505060405180910390f35b3480156110b857600080fd5b506110ed600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614237565b604051808215151515815260200191505060405180910390f35b34801561111357600080fd5b50611168600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614257565b6040518082815260200191505060405180910390f35b34801561118a57600080fd5b506111dd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919050505061427c565b005b3480156111eb57600080fd5b506111f461477f565b6040518082815260200191505060405180910390f35b34801561121657600080fd5b5061123560048036038101908080359060200190929190505050614785565b60405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390f35b34801561127a57600080fd5b506112836147c1565b6040518082815260200191505060405180910390f35b3480156112a557600080fd5b506112ae6147c7565b6040518082815260200191505060405180910390f35b3480156112d057600080fd5b506112d96147cd565b604051808260ff1660ff16815260200191505060405180910390f35b6000603060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600083815260200190815260200160002054905092915050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113e95780601f106113be576101008083540402835291602001916113e9565b820191906000526020600020905b8154815290600101906020018083116113cc57829003601f168201915b505050505081565b600081600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b602260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561153f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f61646d696e20726571756972656400000000000000000000000000000000000081525060200191505060405180910390fd5b80603060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154101515156115f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4e6f7420656e6f75676820546f6b656e0000000000000000000000000000000081525060200191505060405180910390fd5b80602f6000602b54815260200190815260200160002060020160008282540192505081905550602f6000602b54815260200190815260200160002060030154602f6000602b5481526020019081526020016000206002015411801561167657506000602f6000602b54815260200190815260200160002060030154115b156116f9576116be602f6000602b54815260200190815260200160002060030154602f6000602b548152602001908152602001600020600201546147e090919063ffffffff16565b602f6000602b548152602001908152602001600020600201819055506000602f6000602b548152602001908152602001600020600301819055505b80603060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825403925050819055505050565b600080600080600080603060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549450602b546064860110156117b1576064602b540394505b8490505b602b548110156118cc57602f60008281526020019081526020016000206000015491506000602f60008381526020019081526020016000206001015414801561181457506000602f600083815260200190815260200160002060040154115b156118bf57603060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008281526020019081526020016000205492506118bc6118ad602f60008481526020019081526020016000206004015461189f868661480190919063ffffffff16565b61483f90919063ffffffff16565b8561486990919063ffffffff16565b93505b80806001019150506117b5565b60006118e1858961486990919063ffffffff16565b141561190f576000602f6000602b5481526020019081526020016000206001015414151561190e57600080fd5b5b6000603060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015411801561197957506000602f6000602b54815260200190815260200160002060010154145b15611a1e576119d3603060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101548561486990919063ffffffff16565b93506000603060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505b8773ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f19350505050158015611a64573d6000803e3d6000fd5b50602b54603060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030181905550839550505050505092915050565b60035481565b6000806000602260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611b88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f61646d696e20726571756972656400000000000000000000000000000000000081525060200191505060405180910390fd5b611b92858561488a565b9150600a5460216000602060009054906101000a900460ff1660ff1681526020019081526020016000206000602060019054906101000a900460ff1660ff168152602001908152602001600020546006600a8502811515611bef57fe5b040111156120b057611c5460216000602060009054906101000a900460ff1660ff1681526020019081526020016000206000602060019054906101000a900460ff1660ff16815260200190815260200160002054600a546147e090919063ffffffff16565b9050600a60068202811515611c6557fe5b049050611cba81600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461486990919063ffffffff16565b600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3611d9f81600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461486990919063ffffffff16565b600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e65600660048302811515611df457fe5b0460066000602760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461486990919063ffffffff16565b60066000602760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550602760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600660048502811515611f3557fe5b046040518082815260200191505060405180910390a3611f6f6006600a8302811515611f5d57fe5b0460035461486990919063ffffffff16565b600381905550600a5460216000602060009054906101000a900460ff1660ff1681526020019081526020016000206000602060019054906101000a900460ff1660ff16815260200190815260200160002081905550600b60009054906101000a900460ff1660ff166001602060019054906101000a900460ff160160ff16111561207957600b60019054906101000a900460ff1660ff166001602060009054906101000a900460ff160160ff16111561202a57809250612477565b6001602060008282829054906101000a900460ff160192506101000a81548160ff021916908360ff1602179055506000602060016101000a81548160ff021916908360ff1602179055506120a8565b6001602060018282829054906101000a900460ff160192506101000a81548160ff021916908360ff1602179055505b809250612477565b61210282600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461486990919063ffffffff16565b600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36121e782600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461486990919063ffffffff16565b600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506122ad60066004840281151561223c57fe5b0460066000602760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461486990919063ffffffff16565b60066000602760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550602760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60066004860281151561237d57fe5b046040518082815260200191505060405180910390a36123b76006600a84028115156123a557fe5b0460035461486990919063ffffffff16565b6003819055506124276006600a84028115156123cf57fe5b0460216000602060009054906101000a900460ff1660ff1681526020019081526020016000206000602060019054906101000a900460ff1660ff1681526020019081526020016000205461486990919063ffffffff16565b60216000602060009054906101000a900460ff1660ff1681526020019081526020016000206000602060019054906101000a900460ff1660ff168152602001908152602001600020819055508192505b50509392505050565b6000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561250d57600080fd5b81600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506125a284848461490c565b600190509392505050565b6021602052816000526040600020602052806000526040600020600091509150505481565b600080600080600080603060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549450602b54606486011015612636576064602b540394505b8490505b602b5481101561275157602f60008281526020019081526020016000206000015491506000602f60008381526020019081526020016000206001015414801561269957506000602f600083815260200190815260200160002060040154115b1561274457603060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000828152602001908152602001600020549250612741612732602f600084815260200190815260200160002060040154612724868661480190919063ffffffff16565b61483f90919063ffffffff16565b8561486990919063ffffffff16565b93505b808060010191505061263a565b8395505050505050919050565b60055481565b600081612770336138ce565b1015151561277d57600080fd5b61278833308461490c565b60019050919050565b6000603060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b600260009054906101000a900460ff1681565b600080602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156128a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f616c72656164792073657475700000000000000000000000000000000000000081525060200191505060405180910390fd5b8160026003811015156128b057fe5b6020020151602560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600090505b60038110156129f257600160226000848460038110151561291757fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506024828260038110151561297d57fe5b602002015190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080806001019150506128fa565b60036023819055505050565b602c60029054906101000a900460ff1681565b600081603060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000602b54815260200190815260200160002054600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540310151515612ab857600080fd5b602a5482603060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000602b548152602001908152602001600020540110151515612b89576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4d757374206f766572207468616e206c696d697400000000000000000000000081525060200191505060405180910390fd5b81603060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000602b5481526020019081526020016000206000828254019250508190555081602f6000602b5481526020019081526020016000206004016000828254019250508190555060019050919050565b601681600a81101515612c2a57fe5b016000915090505481565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515612c8557600080fd5b81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816003600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff167f49995e5dd6158cf69ad3e9777c46755a1a826a446c6416992167462dad033b2a8342604051808381526020018281526020019250505060405180910390a260019050919050565b600081603060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015410151515612d9457600080fd5b612d9f30338461490c565b81603060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254039250508190555060019050919050565b602660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612ebd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f61646d696e20726571756972656400000000000000000000000000000000000081525060200191505060405180910390fd5b6000602f6000602b54815260200190815260200160002060000154111515612ee457600080fd5b42602f6000602b548152602001908152602001600020600501819055506001602b60008282540192505081905550565b6000603060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000602b548152602001908152602001600020549050919050565b600a5481565b600080602f60008481526020019081526020016000206000015490506000602f600085815260200190815260200160002060010154148015612fd157506000602f600085815260200190815260200160002060040154115b1561305457602f600084815260200190815260200160002060040154603060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600085815260200190815260200160002054820281151561304c57fe5b049150613059565b600091505b5092915050565b600c81600a8110151561306f57fe5b016000915090505481565b60248181548110151561308957fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000602b54815260200190815260200160002054600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054039050919050565b6000602960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156131b657600080fd5b602e54421115156131c657600080fd5b42602f6000602b548152602001908152602001600020600501819055506000602f6000602b54815260200190815260200160002060010154111561327c57602f6000602b54815260200190815260200160002060000154905080602f60006001602b5401815260200190815260200160002060000181905550602f6000602b54815260200190815260200160002060010154602f60006001602b540181526020019081526020016000206001018190555061332d565b6064602c60029054906101000a900460ff1660ff16602f6000602b54815260200190815260200160002060000154028115156132b457fe5b0490506064602c60019054906101000a900460ff1660ff16602f6000602b54815260200190815260200160002060000154028115156132ef57fe5b04602f6000602b5481526020019081526020016000206000018190555080602f60006001602b54018152602001908152602001600020600001819055505b6000602f6000602b5481526020019081526020016000206003015411156133c357602f6000602b54815260200190815260200160002060020154602f60006001602b5401815260200190815260200160002060020181905550602f6000602b54815260200190815260200160002060030154602f60006001602b5401815260200190815260200160002060030181905550613466565b6064602c60009054906101000a900460ff1660ff16602f6000602b54815260200190815260200160002060020154028115156133fb57fe5b04905080602f60006001602b54018152602001908152602001600020600201819055506134283082613497565b50613464602760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660066004840281151561345e57fe5b04613497565b505b6001602b6000828254019250508190555061348e602d54602e5461486990919063ffffffff16565b602e8190555050565b600081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156134e757600080fd5b81600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600360008282540392505081905550816004600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff167f49995e5dd6158cf69ad3e9777c46755a1a826a446c6416992167462dad033b2a8342604051808381526020018281526020019250505060405180910390a26001905092915050565b602c60009054906101000a900460ff1681565b602660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561368c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f61646d696e20726571756972656400000000000000000000000000000000000081525060200191505060405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff161415151561371b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b6001602260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060248190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600160236000828254019250508190555050565b60045481565b602060009054906101000a900460ff1681565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561389c5780601f106138715761010080835404028352916020019161389c565b820191906000526020600020905b81548152906001019060200180831161387f57829003601f168201915b505050505081565b60306020528060005260406000206000915090508060000154908060010154908060030154905083565b6000603060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000602b54815260200190815260200160002054600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054039050919050565b602060019054906101000a900460ff1681565b600b60009054906101000a900460ff1681565b602d5481565b60006139a733848461490c565b6001905092915050565b602260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515613a72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f61646d696e20726571756972656400000000000000000000000000000000000081525060200191505060405180910390fd5b6001821415613b9d57613aa681602f6000602b548152602001908152602001600020600001546147e090919063ffffffff16565b602f6000602b54815260200190815260200160002060000181905550602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637b42c8ef82856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506000604051808303818588803b158015613b7f57600080fd5b505af1158015613b93573d6000803e3d6000fd5b5050505050613c7b565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f2be88484836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015613c6257600080fd5b505af1158015613c76573d6000803e3d6000fd5b505050505b505050565b600b60019054906101000a900460ff1681565b602b5481565b6000349050613cc981602f6000602b5481526020019081526020016000206000015461486990919063ffffffff16565b602f6000602b54815260200190815260200160002060000181905550602f6000602b54815260200190815260200160002060010154602f6000602b54815260200190815260200160002060000154118015613d3c57506000602f6000602b54815260200190815260200160002060010154115b15613dbf57613d84602f6000602b54815260200190815260200160002060010154602f6000602b548152602001908152602001600020600001546147e090919063ffffffff16565b602f6000602b548152602001908152602001600020600001819055506000602f6000602b548152602001908152602001600020600101819055505b50565b60076020528060005260406000206000915090505481565b602660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613e9f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f61646d696e20726571756972656400000000000000000000000000000000000081525060200191505060405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff1614151515613f2e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b80602960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080603060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000602b54815260200190815260200160002054111515613fd757600080fd5b603060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000602b54815260200190815260200160002054602f6000602b548152602001908152602001600020600401600082825403925050819055506000603060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000602b548152602001908152602001600020819055506001905090565b6000808490506140c485856113f1565b1561422e578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156141be5780820151818401526020810190506141a3565b50505050905090810190601f1680156141eb5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561420d57600080fd5b505af1158015614221573d6000803e3d6000fd5b505050506001915061422f565b5b509392505050565b60226020528060005260406000206000915054906101000a900460ff1681565b6008602052816000526040600020602052806000526040600020600091509150505481565b602260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561433d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f61646d696e20726571756972656400000000000000000000000000000000000081525060200191505060405180910390fd5b60008314156146665761435284826001611ac2565b5081602f6000602b5481526020019081526020016000206000015410156144e05781603060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282540192505081905550602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663964dc97b85838560006040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182151515158152602001945050505050600060405180830381600087803b15801561449d57600080fd5b505af11580156144b1573d6000803e3d6000fd5b5050505081602f6000602b54815260200190815260200160002060010160008282540192505081905550614661565b8373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015614526573d6000803e3d6000fd5b50602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663964dc97b85838560016040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182151515158152602001945050505050600060405180830381600087803b15801561460157600080fd5b505af1158015614615573d6000803e3d6000fd5b5050505061464482602f6000602b548152602001908152602001600020600001546147e090919063ffffffff16565b602f6000602b548152602001908152602001600020600001819055505b614779565b81602f6000602b5481526020019081526020016000206002015410156147015781602f6000602b5481526020019081526020016000206003016000828254019250508190555081603060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282540192505081905550614778565b81602f6000602b5481526020019081526020016000206002016000828254039250508190555081603060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825401925050819055505b5b50505050565b60095481565b602f6020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050154905086565b60235481565b602e5481565b602c60019054906101000a900460ff1681565b6000808383111515156147f257600080fd5b82840390508091505092915050565b60008060008414156148165760009150614838565b828402905082848281151561482757fe5b0414151561483457600080fd5b8091505b5092915050565b60008060008311151561485157600080fd5b828481151561485c57fe5b0490508091505092915050565b600080828401905083811015151561488057600080fd5b8091505092915050565b600060018260000b14156148d157600c602060019054906101000a900460ff1660ff16600a811015156148b957fe5b015460055484028115156148c957fe5b049050614906565b6016602060019054906101000a900460ff1660ff16600a811015156148f257fe5b0154600554840281151561490257fe5b0490505b92915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561494957600080fd5b81614953856138ce565b1015151561496057600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401101515156149ef57600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905081600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415614b915781603060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825401925050819055505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a380600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401141515614c8157fe5b505050505600a165627a7a72305820888857fe053e5a0a849974af050165542193b42c1007fb451c5cf4baae80d9c8002900000000000000000000000062dcd99f4a4439223e1735f4290f55852e1ab78500000000000000000000000062dcd99f4a4439223e1735f4290f55852e1ab785000000000000000000000000a06cd23aa37c39095d8cfe3a0fd2654331e631230000000000000000000000001bdf504b2ecf7a43c3ec5847ae950292ca2883c1",
  "constructorArguments": "00000000000000000000000062dcd99f4a4439223e1735f4290f55852e1ab78500000000000000000000000062dcd99f4a4439223e1735f4290f55852e1ab785000000000000000000000000a06cd23aa37c39095d8cfe3a0fd2654331e631230000000000000000000000001bdf504b2ecf7a43c3ec5847ae950292ca2883c1"
}