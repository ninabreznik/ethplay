{
  "address": "0x8b6dd2144a3cc6677600735d0e62134839bb85d0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Phoneum Token",
  "contractName": "Phoneum",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-13\n*/\n\npragma solidity 0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    uint256 totalSupply_;\n\n    /**\n    * @dev total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n        assert(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n        assert(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n        assert(token.approve(spender, value));\n    }\n}\n\ncontract Owned {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n}\n\n/**\n * @title TokenVesting\n * @dev A token holder contract that can release its token balance gradually like a\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n * owner.\n */\ncontract TokenVesting is Owned {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20Basic;\n\n  event Released(uint256 amount);\n  event Revoked();\n\n  // beneficiary of tokens after they are released\n  address public beneficiary;\n\n  uint256 public cliff;\n  uint256 public start;\n  uint256 public duration;\n\n  bool public revocable;\n\n  mapping (address => uint256) public released;\n  mapping (address => bool) public revoked;\n\n  /**\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n   * of the balance will have vested.\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n   * @param _start the time (as Unix time) at which point vesting starts\n   * @param _duration duration in seconds of the period in which the tokens will vest\n   * @param _revocable whether the vesting is revocable or not\n   */\n  constructor(\n    address _beneficiary,\n    uint256 _start,\n    uint256 _cliff,\n    uint256 _duration,\n    bool _revocable\n  )\n    public\n  {\n    require(_beneficiary != address(0));\n    require(_cliff <= _duration);\n\n    beneficiary = _beneficiary;\n    revocable = _revocable;\n    duration = _duration;\n    cliff = _start.add(_cliff);\n    start = _start;\n  }\n\n  /**\n   * @notice Transfers vested tokens to beneficiary.\n   * @param token ERC20 token which is being vested\n   */\n  function release(ERC20Basic token) public {\n    uint256 unreleased = releasableAmount(token);\n\n    require(unreleased > 0);\n\n    released[token] = released[token].add(unreleased);\n\n    token.safeTransfer(beneficiary, unreleased);\n\n    emit Released(unreleased);\n  }\n\n  /**\n   * @notice Allows the owner to revoke the vesting. Tokens already vested\n   * remain in the contract, the rest are returned to the owner.\n   * @param token ERC20 token which is being vested\n   */\n  function revoke(ERC20Basic token) public onlyOwner {\n    require(revocable);\n    require(!revoked[token]);\n\n    uint256 balance = token.balanceOf(this);\n\n    uint256 unreleased = releasableAmount(token);\n    uint256 refund = balance.sub(unreleased);\n\n    revoked[token] = true;\n\n    token.safeTransfer(owner, refund);\n\n    emit Revoked();\n  }\n\n  /**\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\n   * @param token ERC20 token which is being vested\n   */\n  function releasableAmount(ERC20Basic token) public view returns (uint256) {\n    return vestedAmount(token).sub(released[token]);\n  }\n\n  /**\n   * @dev Calculates the amount that has already vested.\n   * @param token ERC20 token which is being vested\n   */\n  function vestedAmount(ERC20Basic token) public view returns (uint256) {\n    uint256 currentBalance = token.balanceOf(this);\n    uint256 totalBalance = currentBalance.add(released[token]);\n\n    if (block.timestamp < cliff) {\n      return 0;\n    } else if (block.timestamp >= start.add(duration) || revoked[token]) {\n      return totalBalance;\n    } else {\n      return totalBalance.mul(block.timestamp.sub(start)).div(duration);\n    }\n  }\n}\n\n/**\n * @title TokenVault\n * @dev TokenVault is a token holder contract that will allow a\n * beneficiary to spend the tokens from some function of a specified ERC20 token\n */\ncontract TokenVault {\n    using SafeERC20 for ERC20;\n\n    // ERC20 token contract being held\n    ERC20 public token;\n\n    constructor(ERC20 _token) public {\n        token = _token;\n    }\n\n    /**\n     * @notice Allow the token itself to send tokens\n     * using transferFrom().\n     */\n    function fillUpAllowance() public {\n        uint256 amount = token.balanceOf(this);\n        require(amount > 0);\n\n        token.approve(token, amount);\n    }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value > 0);\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(burner, _value);\n    }\n}\n\ncontract Phoneum is BurnableToken, Owned {\n    string public constant name = \"Phoneum\";\n    string public constant symbol = \"PHM\";\n    uint8 public constant decimals = 2;\n\n    /// Maximum tokens to be allocated (3.5 billion PHM)\n    uint256 public constant HARD_CAP = 3500000000 * 10**uint256(decimals);\n\n    /// This address will be used to distribute the team, advisors and reserve tokens\n    address public teamAdvisorsReserveTokensAddress;\n\n    /// This vault is used to keep the Founders, Advisors and Partners tokens\n    TokenVault public saleTokensVault;\n\n    /// Date when the vesting for regular users starts\n    uint64 public date01Oct2018 = 1538352000;\n\n    /// Store the vesting contract addresses for each sale contributor\n    mapping(address => address) public vestingOf;\n\n    constructor(address _teamAdvisorsReserveTokensAddress) public {\n        require(_teamAdvisorsReserveTokensAddress != address(0));\n\n        teamAdvisorsReserveTokensAddress = _teamAdvisorsReserveTokensAddress;\n\n        /// Maximum tokens to be sold - 1,564,265,000 PHM\n        uint256 teamAdvisorsReserveTokens = 1564265000;\n        createTokens(teamAdvisorsReserveTokens, teamAdvisorsReserveTokensAddress);\n\n        require(totalSupply_ <= HARD_CAP);\n    }\n\n    function createSaleTokensVault() external onlyOwner {\n        require(saleTokensVault == address(0));\n\n        /// Sale tokens - 1,935,735,000 PHM\n        uint256 saleTokens = 1935735000;\n        saleTokensVault = createTokenVault(saleTokens);\n\n        require(totalSupply_ <= HARD_CAP);\n    }\n\n    /// @dev Create a TokenVault and fill with the specified newly minted tokens\n    function createTokenVault(uint256 tokens) internal onlyOwner returns (TokenVault) {\n        TokenVault tokenVault = new TokenVault(ERC20(this));\n        createTokens(tokens, tokenVault);\n        tokenVault.fillUpAllowance();\n        return tokenVault;\n    }\n\n    // @dev create specified number of tokens and transfer to destination\n    function createTokens(uint256 _tokens, address _destination) internal onlyOwner {\n        uint256 tokens = _tokens * 10**uint256(decimals);\n        totalSupply_ = totalSupply_.add(tokens);\n        balances[_destination] = tokens;\n        emit Transfer(0x0, _destination, tokens);\n\n        require(totalSupply_ <= HARD_CAP);\n   }\n\n    /// @dev vest the sale contributor tokens for 10 months, 10% gradual release with 1 month cliff\n    function vestTokens(address _beneficiary, uint256 _tokensAmount) external onlyOwner {\n        require(_beneficiary != address(0));\n\n        if(vestingOf[_beneficiary] == 0x0) {\n            TokenVesting vesting = new TokenVesting(_beneficiary, date01Oct2018, 31 days, 304 days, false);\n            vestingOf[_beneficiary] = address(vesting);\n        }\n\n        require(this.transferFrom(saleTokensVault, vestingOf[_beneficiary], _tokensAmount));\n    }\n\n    /// @dev releases vested tokens for the caller's own address\n    function releaseVestedTokens() external {\n        releaseVestedTokensFor(msg.sender);\n    }\n\n    /// @dev releases vested tokens for the specified address.\n    /// Can be called by anyone for any address.\n    function releaseVestedTokensFor(address _owner) public {\n        TokenVesting(vestingOf[_owner]).release(this);\n    }\n\n    /// @dev check the vested balance for an address\n    function lockedBalanceOf(address _owner) public view returns (uint256) {\n        return balances[vestingOf[_owner]];\n    }\n\n    /// @dev check the locked but releaseable balance of an owner\n    function releaseableBalanceOf(address _owner) public view returns (uint256) {\n        return TokenVesting(vestingOf[_owner]).releasableAmount(this);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"date01Oct2018\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createSaleTokensVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAdvisorsReserveTokensAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseVestedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokensAmount\",\"type\":\"uint256\"}],\"name\":\"vestTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleTokensVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"releaseableBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"releaseVestedTokensFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_teamAdvisorsReserveTokensAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526005805460a060020a60e060020a031916775bb16380000000000000000000000000000000000000000017905534801561003d57600080fd5b50604051602080611d38833981016040525160038054600160a060020a031916331790556000600160a060020a038216151561007857600080fd5b5060048054600160a060020a031916600160a060020a038381169190911791829055635d3cca28916100b5918391166401000000006100d0810204565b60015464517da02c0010156100c957600080fd5b505061018a565b600354600090600160a060020a031633146100ea57600080fd5b50600154606483029061010a9082640100000000610fbc61017482021704565b600155600160a060020a038216600081815260208181526040808320859055805185815290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a360015464517da02c00101561016f57600080fd5b505050565b60008282018381101561018357fe5b9392505050565b611b9f806101996000396000f30060806040526004361061013d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610142578063095ea7b3146101cc578063174533581461020457806318160ddd146102365780632025e52c1461025d57806323b872dd14610274578063296d84d51461029e578063313ce567146102cf5780633a03171c146102fa57806342966c681461030f57806354dd1da414610327578063593557361461033c578063632a3e521461035d5780636618846314610381578063709cf8c0146103a557806370a08231146103ba5780638da5cb5b146103db57806395d89b41146103f0578063a9059cbb14610405578063b8c7839114610429578063c26fe7ce1461044a578063c47cfca11461046b578063d73dd6231461048c578063dd62ed3e146104b0575b600080fd5b34801561014e57600080fd5b506101576104d7565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610191578181015183820152602001610179565b50505050905090810190601f1680156101be5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101d857600080fd5b506101f0600160a060020a036004351660243561050e565b604080519115158252519081900360200190f35b34801561021057600080fd5b50610219610574565b6040805167ffffffffffffffff9092168252519081900360200190f35b34801561024257600080fd5b5061024b61059c565b60408051918252519081900360200190f35b34801561026957600080fd5b506102726105a2565b005b34801561028057600080fd5b506101f0600160a060020a0360043581169060243516604435610625565b3480156102aa57600080fd5b506102b361079c565b60408051600160a060020a039092168252519081900360200190f35b3480156102db57600080fd5b506102e46107ab565b6040805160ff9092168252519081900360200190f35b34801561030657600080fd5b5061024b6107b0565b34801561031b57600080fd5b506102726004356107b9565b34801561033357600080fd5b50610272610876565b34801561034857600080fd5b5061024b600160a060020a0360043516610881565b34801561036957600080fd5b50610272600160a060020a03600435166024356108ab565b34801561038d57600080fd5b506101f0600160a060020a0360043516602435610a87565b3480156103b157600080fd5b506102b3610b77565b3480156103c657600080fd5b5061024b600160a060020a0360043516610b86565b3480156103e757600080fd5b506102b3610ba1565b3480156103fc57600080fd5b50610157610bb0565b34801561041157600080fd5b506101f0600160a060020a0360043516602435610be7565b34801561043557600080fd5b5061024b600160a060020a0360043516610cc8565b34801561045657600080fd5b50610272600160a060020a0360043516610d6c565b34801561047757600080fd5b506102b3600160a060020a0360043516610df6565b34801561049857600080fd5b506101f0600160a060020a0360043516602435610e11565b3480156104bc57600080fd5b5061024b600160a060020a0360043581169060243516610eaa565b60408051808201909152600781527f50686f6e65756d00000000000000000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60055474010000000000000000000000000000000000000000900467ffffffffffffffff1681565b60015490565b600354600090600160a060020a031633146105bc57600080fd5b600554600160a060020a0316156105d257600080fd5b50637360f8d86105e181610ed5565b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905560015464517da02c00101561062257600080fd5b50565b6000600160a060020a038316151561063c57600080fd5b600160a060020a03841660009081526020819052604090205482111561066157600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561069157600080fd5b600160a060020a0384166000908152602081905260409020546106ba908363ffffffff610faa16565b600160a060020a0380861660009081526020819052604080822093909355908516815220546106ef908363ffffffff610fbc16565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610731908363ffffffff610faa16565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600454600160a060020a031681565b600281565b64517da02c0081565b60008082116107c757600080fd5b336000908152602081905260409020548211156107e357600080fd5b5033600081815260208190526040902054610804908363ffffffff610faa16565b600160a060020a038216600090815260208190526040902055600154610830908363ffffffff610faa16565b600155604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b61087f33610d6c565b565b600160a060020a039081166000908152600660209081526040808320549093168252819052205490565b600354600090600160a060020a031633146108c557600080fd5b600160a060020a03831615156108da57600080fd5b600160a060020a038084166000908152600660205260409020541615156109c657600554839074010000000000000000000000000000000000000000900467ffffffffffffffff166228de80630190c800600061093561106a565b600160a060020a03909516855267ffffffffffffffff909316602085015260408085019290925260608401529015156080830152519081900360a001906000f080158015610987573d6000803e3d6000fd5b50600160a060020a038481166000908152600660205260409020805473ffffffffffffffffffffffffffffffffffffffff191691831691909117905590505b600554600160a060020a0384811660009081526006602090815260408083205481517f23b872dd0000000000000000000000000000000000000000000000000000000081529585166004870152909316602485015260448401869052915130936323b872dd936064808301949193928390030190829087803b158015610a4b57600080fd5b505af1158015610a5f573d6000803e3d6000fd5b505050506040513d6020811015610a7557600080fd5b50511515610a8257600080fd5b505050565b336000908152600260209081526040808320600160a060020a038616845290915281205480831115610adc57336000908152600260209081526040808320600160a060020a0388168452909152812055610b11565b610aec818463ffffffff610faa16565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600554600160a060020a031681565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a031681565b60408051808201909152600381527f50484d0000000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a0383161515610bfe57600080fd5b33600090815260208190526040902054821115610c1a57600080fd5b33600090815260208190526040902054610c3a908363ffffffff610faa16565b3360009081526020819052604080822092909255600160a060020a03851681522054610c6c908363ffffffff610fbc16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600160a060020a0380821660009081526006602090815260408083205481517f1726cbc8000000000000000000000000000000000000000000000000000000008152306004820152915193941692631726cbc89260248084019391929182900301818787803b158015610d3a57600080fd5b505af1158015610d4e573d6000803e3d6000fd5b505050506040513d6020811015610d6457600080fd5b505192915050565b600160a060020a038082166000908152600660205260408082205481517f19165587000000000000000000000000000000000000000000000000000000008152306004820152915193169263191655879260248084019391929182900301818387803b158015610ddb57600080fd5b505af1158015610def573d6000803e3d6000fd5b5050505050565b600660205260009081526040902054600160a060020a031681565b336000908152600260209081526040808320600160a060020a0386168452909152812054610e45908363ffffffff610fbc16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6003546000908190600160a060020a03163314610ef157600080fd5b30610efa61107a565b600160a060020a03909116815260405190819003602001906000f080158015610f27573d6000803e3d6000fd5b509050610f348382610fd2565b80600160a060020a03166312d60f866040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015610f8b57600080fd5b505af1158015610f9f573d6000803e3d6000fd5b509295945050505050565b600082821115610fb657fe5b50900390565b600082820183811015610fcb57fe5b9392505050565b600354600090600160a060020a03163314610fec57600080fd5b506001546064830290611005908263ffffffff610fbc16565b600155600160a060020a038216600081815260208181526040808320859055805185815290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a360015464517da02c001015610a8257600080fd5b60405161084f8061108b83390190565b60405161029a806118da833901905600608060405234801561001057600080fd5b5060405160a08061084f8339810160409081528151602083015191830151606084015160809094015160008054600160a060020a0319163317905591939091600160a060020a038516151561006457600080fd5b8183111561007157600080fd5b60018054600160a060020a031916600160a060020a0387161790556005805460ff191682151517905560048290556100b684846401000000006100c581026106411704565b600255505050600355506100db565b6000828201838110156100d457fe5b9392505050565b610765806100ea6000396000f3006080604052600436106100a05763ffffffff60e060020a6000350416630fb5a6b481146100a557806313d033c0146100cc5780631726cbc8146100e15780631916558714610102578063384711cc1461012557806338af3eed1461014657806374a8f10314610177578063872a7810146101985780638da5cb5b146101c15780639852595c146101d6578063be9a6555146101f7578063fa01dc061461020c575b600080fd5b3480156100b157600080fd5b506100ba61022d565b60408051918252519081900360200190f35b3480156100d857600080fd5b506100ba610233565b3480156100ed57600080fd5b506100ba600160a060020a0360043516610239565b34801561010e57600080fd5b50610123600160a060020a0360043516610271565b005b34801561013157600080fd5b506100ba600160a060020a036004351661031d565b34801561015257600080fd5b5061015b610474565b60408051600160a060020a039092168252519081900360200190f35b34801561018357600080fd5b50610123600160a060020a0360043516610483565b3480156101a457600080fd5b506101ad6105ea565b604080519115158252519081900360200190f35b3480156101cd57600080fd5b5061015b6105f3565b3480156101e257600080fd5b506100ba600160a060020a0360043516610602565b34801561020357600080fd5b506100ba610614565b34801561021857600080fd5b506101ad600160a060020a036004351661061a565b60045481565b60025481565b600160a060020a03811660009081526006602052604081205461026b9061025f8461031d565b9063ffffffff61062f16565b92915050565b600061027c82610239565b90506000811161028b57600080fd5b600160a060020a0382166000908152600660205260409020546102b4908263ffffffff61064116565b600160a060020a038084166000818152600660205260409020929092556001546102e69291168363ffffffff61065b16565b6040805182815290517ffb81f9b30d73d830c3544b34d827c08142579ee75710b490bab0b3995468c5659181900360200190a15050565b600080600083600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561037d57600080fd5b505af1158015610391573d6000803e3d6000fd5b505050506040513d60208110156103a757600080fd5b5051600160a060020a0385166000908152600660205260409020549092506103d690839063ffffffff61064116565b90506002544210156103eb576000925061046d565b6004546003546104009163ffffffff61064116565b421015806104265750600160a060020a03841660009081526007602052604090205460ff165b156104335780925061046d565b61046a60045461045e6104516003544261062f90919063ffffffff16565b849063ffffffff6106f716565b9063ffffffff61072216565b92505b5050919050565b600154600160a060020a031681565b6000805481908190600160a060020a0316331461049f57600080fd5b60055460ff1615156104b057600080fd5b600160a060020a03841660009081526007602052604090205460ff16156104d657600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038616916370a082319160248083019260209291908290030181600087803b15801561053757600080fd5b505af115801561054b573d6000803e3d6000fd5b505050506040513d602081101561056157600080fd5b5051925061056e84610239565b9150610580838363ffffffff61062f16565b600160a060020a038086166000818152600760205260408120805460ff19166001179055549293506105bb929091168363ffffffff61065b16565b6040517f44825a4b2df8acb19ce4e1afba9aa850c8b65cdb7942e2078f27d0b0960efee690600090a150505050565b60055460ff1681565b600054600160a060020a031681565b60066020526000908152604090205481565b60035481565b60076020526000908152604090205460ff1681565b60008282111561063b57fe5b50900390565b60008282018381101561065057fe5b8091505b5092915050565b82600160a060020a031663a9059cbb83836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156106be57600080fd5b505af11580156106d2573d6000803e3d6000fd5b505050506040513d60208110156106e857600080fd5b505115156106f257fe5b505050565b60008083151561070a5760009150610654565b5082820282848281151561071a57fe5b041461065057fe5b600080828481151561073057fe5b049493505050505600a165627a7a72305820bbc2e2f04c3b5283c9f4449bfe5aa1c74b2ed290d0886a02305e57a2dccdac800029608060405234801561001057600080fd5b5060405160208061029a833981016040525160008054600160a060020a03909216600160a060020a0319909216919091179055610248806100526000396000f30060806040526004361061004b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166312d60f868114610050578063fc0c546a14610067575b600080fd5b34801561005c57600080fd5b506100656100a5565b005b34801561007357600080fd5b5061007c610200565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60008054604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a082319160248082019260209290919082900301818787803b15801561011857600080fd5b505af115801561012c573d6000803e3d6000fd5b505050506040513d602081101561014257600080fd5b505190506000811161015357600080fd5b60008054604080517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90921660048301819052602483018590529051909263095ea7b392604480820193602093909283900390910190829087803b1580156101d157600080fd5b505af11580156101e5573d6000803e3d6000fd5b505050506040513d60208110156101fb57600080fd5b505050565b60005473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058201a415bf6786755fea9c112bd83dd3320c98504e3eb5d25f52a327730bd9367a20029a165627a7a72305820c185bbcf1e7f42740ebe7d2f598a3643bc74d3dcb69f103a4c0f39903013f186002900000000000000000000000087e28228c2d4514207a925962aead6464e8717a6",
  "constructorArguments": "00000000000000000000000087e28228c2d4514207a925962aead6464e8717a6"
}