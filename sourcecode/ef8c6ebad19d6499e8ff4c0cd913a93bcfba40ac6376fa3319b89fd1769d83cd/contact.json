{
  "address": "0xb8a88034bcf46e26c6bae1269ff2d051e2dee65c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MintableToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-15\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n    mapping (address => Snapshot[]) balances;\n    mapping (address => uint256) userWithdrawalBlocks;\n\t\n    /**\n     * @dev 'Snapshot' is the structure that attaches a block number to a\n     * given value, the block number attached is the one that last changed the value\n     * 'fromBlock' - is the block number that the value was generated from\n     * 'value' - is the amount of tokens at a specific block number\n     */\n    struct Snapshot {\n      uint128 fromBlock;\n      uint128 value;\n    }\n\t\n\t/**\n\t * @dev tracks history of totalSupply\n\t */\n    Snapshot[] totalSupplyHistory;\n    \n    /**\n     * @dev track history of 'ETH balance' for dividends\n     */\n    Snapshot[] balanceForDividendsHistory;\n\t\n\t/**\n\t* @dev transfer token for a specified address\n\t* @param to - the address to transfer to.\n\t* @param value - the amount to be transferred.\n\t*/\n\tfunction transfer(address to, uint256 value) public returns (bool) {\n        return doTransfer(msg.sender, to, value);\n\t}\n\t\n\t/**\n\t * @dev internal function for transfers handling\n\t */\n\tfunction doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\n\t   if (_amount == 0) {\n\t\t   return true;\n\t   }\n     \n\t   // Do not allow transfer to 0x0 or the token contract itself\n\t   require((_to != 0) && (_to != address(this)));\n\n\t   // If the amount being transfered is more than the balance of the\n\t   //  account the transfer returns false\n\t   var previousBalanceFrom = balanceOfAt(_from, block.number);\n\t   if (previousBalanceFrom < _amount) {\n\t\t   return false;\n\t   }\n\n\t   // First update the balance array with the new value for the address\n\t   //  sending the tokens\n\t   updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n\n\t   // Then update the balance array with the new value for the address\n\t   //  receiving the tokens\n\t   var previousBalanceTo = balanceOfAt(_to, block.number);\n\t   require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n\t   updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n\n\t   // An event to make the transfer easy to find on the blockchain\n\t   Transfer(_from, _to, _amount);\n\n\t   return true;\n    }\n    \n\t/**\n\t* @dev Gets the balance of the specified address.\n\t* @param _owner The address to query the the balance of. \n\t* @return An uint256 representing the amount owned by the passed address.\n\t*/\n\tfunction balanceOf(address _owner) public constant returns (uint256 balance) {\n\t\treturn balanceOfAt(_owner, block.number);\n\t}\n\n    /**\n     * @dev Queries the balance of `_owner` at a specific `_blockNumber`\n     * @param _owner The address from which the balance will be retrieved\n     * @param _blockNumber The block number when the balance is queried\n     * @return The balance at `_blockNumber`\n     */\n    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint) {\n        //  These next few lines are used when the balance of the token is\n        //  requested before a check point was ever created for this token\n        if ((balances[_owner].length == 0)|| (balances[_owner][0].fromBlock > _blockNumber)) {\n\t\t\treturn 0; \n        } else {\n            return getValueAt(balances[_owner], _blockNumber);\n        }\n    }\n\n    /**\n     * @dev Total amount of tokens at a specific `_blockNumber`.\n     * @param _blockNumber The block number when the totalSupply is queried\n     * @return The total amount of tokens at `_blockNumber`\n     */\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\n        // These next few lines are used when the totalSupply of the token is\n        // requested before a check point was ever created for this token\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n\t\t\treturn 0;\n        } else {\n            return getValueAt(totalSupplyHistory, _blockNumber);\n        }\n    }\n\n    /**\n     * @dev `getValueAt` retrieves the number of tokens at a given block number\n     * @param checkpoints The history of values being queried\n     * @param _block The block number to retrieve the value at\n     * @return The number of tokens being queried\n     */\n    function getValueAt(Snapshot[] storage checkpoints, uint _block) constant internal returns (uint) {\n        if (checkpoints.length == 0) return 0;\n\n        // Shortcut for the actual value\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n            return checkpoints[checkpoints.length-1].value;\n        if (_block < checkpoints[0].fromBlock) return 0;\n\n        // Binary search of the value in the array\n        uint min = 0;\n        uint max = checkpoints.length-1;\n        while (max > min) {\n            uint mid = (max + min + 1)/ 2;\n            if (checkpoints[mid].fromBlock<=_block) {\n                min = mid;\n            } else {\n                max = mid-1;\n            }\n        }\n        return checkpoints[min].value;\n    }\n\n    /**\n     * @dev `updateValueAtNow` used to update the `balances` map and the `totalSupplyHistory`\n     * @param checkpoints The history of data being updated\n     * @param _value The new number of tokens\n     */ \n    function updateValueAtNow(Snapshot[] storage checkpoints, uint _value) internal  {\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n           Snapshot storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n           newCheckPoint.fromBlock =  uint128(block.number);\n           newCheckPoint.value = uint128(_value);\n        } else {\n           Snapshot storage oldCheckPoint = checkpoints[checkpoints.length-1];\n           oldCheckPoint.value = uint128(_value);\n        }\n    }\n\t\n    /**\n     * @dev This function makes it easy to get the total number of tokens\n     * @return The total number of tokens\n     */\n    function redeemedSupply() public constant returns (uint) {\n        return totalSupplyAt(block.number);\n    }\n}\n\ncontract Ownable {\n  address public owner;\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));      \n    owner = newOwner;\n  }\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\t  return doTransfer(_from, _to, _value);\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\ncontract MintableToken is StandardToken {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n  \n  bool public mintingFinished = false;\n\n  string public name = \"Honey Mining Token\";\t\t\n  string public symbol = \"HMT\";\t\t\n  uint8 public decimals = 8;\t\t\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) public canMint returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n\tuint curTotalSupply = redeemedSupply();\n\trequire(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n\tuint previousBalanceTo = balanceOf(_to);\n\trequire(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n\tupdateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n    updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n    Mint(_to, _amount);\n    Transfer(0x0, _to, _amount);\n    return true;\n  }\n  \n  /**\n   * @dev Function to record snapshot block and amount\n   */\n  function recordDeposit(uint256 _amount) public {\n\t updateValueAtNow(balanceForDividendsHistory, _amount);\n  }\n  \n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n  \n  /**\n   * @dev Function to calculate dividends\n   * @return awailable for withdrawal ethere (wei value)\n   */\n  function awailableDividends(address userAddress) public view returns (uint256) {\n      uint256 userLastWithdrawalBlock = userWithdrawalBlocks[userAddress];\n      uint256 amountForWithdraw = 0;\n      for(uint i = 0; i<=balanceForDividendsHistory.length-1; i++){\n          Snapshot storage snapshot = balanceForDividendsHistory[i];\n          if(userLastWithdrawalBlock < snapshot.fromBlock)\n            amountForWithdraw = amountForWithdraw.add(balanceOfAt(userAddress, snapshot.fromBlock).mul(snapshot.value).div(totalSupplyAt(snapshot.fromBlock)));\n      }\n      return amountForWithdraw;\n  }\n  \n  /**\n   * @dev Function to record user withdrawal \n   */\n  function recordWithdraw(address userAddress) public {\n    userWithdrawalBlocks[userAddress] = balanceForDividendsHistory[balanceForDividendsHistory.length-1].fromBlock;\n  }\n}\n\ncontract HoneyMiningToken is Ownable {\n    \n  using SafeMath for uint256;\n\n  MintableToken public token;\n  /**\n   * @dev Info of max supply\n   */\n  uint256 public maxSupply = 300000000000000;\n  \n  /**\n   * event for token purchase logging\n   * @param purchaser who paid for the tokens, basically - 0x0, but could be user address on refferal case\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount - of tokens purchased\n   */\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n  \n  /**\n   * event for referral comission logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the bonus tokens\n   * @param amount - of tokens as ref reward\n   */\n  event ReferralBonus(address indexed purchaser, address indexed beneficiary, uint amount);\n  \n   /**\n   * event for token dividends deposit logging\n   * @param amount - amount of ETH deposited\n   */\n  event DepositForDividends(uint256 indexed amount);\n  \n  /**\n   * event for dividends withdrawal logging \n   * @param holder - who has the tokens\n   * @param amount - amount of ETH which was withdraw\n  */\n  event WithdrawDividends(address indexed holder, uint256 amount);\n\n  /**\n   * event for dev rewards logging\n   * @param purchaser - who paid for the tokens\n   * @param amount  - representation of dev reward\n   */\n  event DevReward(address purchaser, uint amount);\n\n  function HoneyMiningToken() public {\n    token = new MintableToken();\n  }\n\n  /**\n   * @dev fallback function can be used to buy tokens\n   */\n  function () public payable {buyTokens(0x0);}\n\n  /**\n   * @dev low level token purchase function\n   * @param referrer - optional parameter for ref bonus\n   */\n  function buyTokens(address referrer) public payable {\n    require(msg.sender != 0x0);\n    require(msg.sender != referrer);\n    require(validPurchase());\n    \n    //we dont need 18 decimals - and will use only 8\n    uint256 amount = msg.value.div(10000000000);\n    \n    // calculate token amount to be created\n    uint256 tokens = amount.mul(rate());\n    require(tokens >= 100000000);\n    uint256 devTokens = tokens.mul(30).div(100);\n    if(referrer != 0x0){\n       require(token.balanceOf(referrer) >= 100000000);\n       // 2.5% for referral and referrer\n       uint256 refTokens = tokens.mul(25).div(1000);\n       //tokens = tokens+refTokens;\n       require(maxSupply.sub(redeemedSupply()) >= tokens.add(refTokens.mul(2)).add(devTokens));\n       \n       //generate tokens for purchser\n       token.mint(msg.sender, tokens.add(refTokens));\n       TokenPurchase(msg.sender, msg.sender, amount, tokens.add(refTokens));\n       token.mint(referrer, refTokens);\n       ReferralBonus(msg.sender, referrer, refTokens);\n       \n    } else{\n        require(maxSupply.sub(redeemedSupply())>=tokens.add(devTokens));\n        //updatedReddemedSupply = redeemedSupply().add(tokens.add(devTokens));\n        \n        //generate tokens for purchser\n        token.mint(msg.sender, tokens);\n    \n        // log purchase\n        TokenPurchase(msg.sender, msg.sender, amount, tokens);\n    }\n    token.mint(owner, devTokens);\n    DevReward(msg.sender, devTokens);\n    forwardFunds();\n  }\n\n  /**\n   * @return true if the transaction can buy tokens\n   */\n  function validPurchase() internal constant returns (bool) {\n    return !hasEnded() && msg.value != 0;\n  }\n\n  /**\n   * @return true if sale is over\n   */\n  function hasEnded() public constant returns (bool) {\n    return maxSupply <= redeemedSupply();\n  }\n  \n  /**\n   * @dev get current user balance\n   * @param userAddress - address of user\n   * @return current balance of tokens\n   */\n  function checkBalance(address userAddress) public constant returns (uint){\n      return token.balanceOf(userAddress);\n  }\n  \n  /**\n   * @dev get user balance of tokens on specific block\n   * @param userAddress - address of user\n   * @param targetBlock - block number\n   * @return address balance on block\n   */\n  function checkBalanceAt(address userAddress, uint256 targetBlock) public constant returns (uint){\n      return token.balanceOfAt(userAddress, targetBlock);\n  }\n  \n  /**\n   * @dev get awailable dividends for withdrawal\n   * @param userAddress - target \n   * @return amount of ether (wei value) for current user\n   */\n  function awailableDividends(address userAddress) public constant returns (uint){\n    return token.awailableDividends(userAddress);\n  }\n  \n  /**\n   * @return total purchased tokens value\n   */\n  function redeemedSupply() public view returns (uint){\n    return token.totalSupply();\n  }\n  \n  /**\n   * @dev user-related method for withdrawal dividends\n   */\n  function withdrawDividends() public {\n    uint _amount = awailableDividends(msg.sender);\n    require(_amount > 0);\n    msg.sender.transfer(_amount);\n    token.recordWithdraw(msg.sender);\n    WithdrawDividends(msg.sender, _amount);\n  }\n  \n  /**\n   * @dev function for deposit ether to token address as/for dividends\n   */\n  function depositForDividends() public payable onlyOwner {\n      require(msg.value > 0);\n      token.recordDeposit(msg.value);\n      DepositForDividends(msg.value);\n  }\n  \n  function stopSales() public onlyOwner{\n   maxSupply = token.totalSupply();\n  }\n   \n  function forwardFunds() internal {\n    owner.transfer(msg.value);\n  }\n  \n  function rate() internal constant returns (uint) {\n    if(redeemedSupply() < 1000000000000)\n        return 675;\n    else if (redeemedSupply() < 5000000000000)\n        return 563;\n    else\n        return 450;\n  }\n}",
  "bytecode": "60606040526000600660006101000a81548160ff0219169083151502179055506040805190810160405280601281526020017f486f6e6579204d696e696e6720546f6b656e0000000000000000000000000000815250600790805190602001906200006c929190620000e9565b506040805190810160405280600381526020017f484d54000000000000000000000000000000000000000000000000000000000081525060089080519060200190620000ba929190620000e9565b506008600960006101000a81548160ff021916908360ff1602179055503415620000e357600080fd5b62000198565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200012c57805160ff19168380011785556200015d565b828001600101855582156200015d579182015b828111156200015c5782518255916020019190600101906200013f565b5b5090506200016c919062000170565b5090565b6200019591905b808211156200019157600081600090555060010162000177565b5090565b90565b61167580620001a86000396000f3006060604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b1461010157806306fdde031461012e578063095ea7b3146101bc5780631424c1821461021657806318160ddd1461023957806323b872dd14610262578063313ce567146102db5780633edc65d31461030a57806340c10f19146103435780634ee2cd7e1461039d5780635db2a233146103f357806370a08231146104405780637d64bcb41461048d57806395d89b41146104ba578063981b24d014610548578063a9059cbb1461057f578063c86039da146105d9578063dd62ed3e14610602575b600080fd5b341561010c57600080fd5b61011461066e565b604051808215151515815260200191505060405180910390f35b341561013957600080fd5b610141610681565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610181578082015181840152602081019050610166565b50505050905090810190601f1680156101ae5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101c757600080fd5b6101fc600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061071f565b604051808215151515815260200191505060405180910390f35b341561022157600080fd5b61023760048080359060200190919050506108a6565b005b341561024457600080fd5b61024c6108b4565b6040518082815260200191505060405180910390f35b341561026d57600080fd5b6102c1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108ba565b604051808215151515815260200191505060405180910390f35b34156102e657600080fd5b6102ee6108d0565b604051808260ff1660ff16815260200191505060405180910390f35b341561031557600080fd5b610341600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108e3565b005b341561034e57600080fd5b610383600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061097d565b604051808215151515815260200191505060405180910390f35b34156103a857600080fd5b6103dd600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610af1565b6040518082815260200191505060405180910390f35b34156103fe57600080fd5b61042a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c2a565b6040518082815260200191505060405180910390f35b341561044b57600080fd5b610477600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dde565b6040518082815260200191505060405180910390f35b341561049857600080fd5b6104a0610df1565b604051808215151515815260200191505060405180910390f35b34156104c557600080fd5b6104cd610e41565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561050d5780820151818401526020810190506104f2565b50505050905090810190601f16801561053a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561055357600080fd5b6105696004808035906020019091905050610edf565b6040518082815260200191505060405180910390f35b341561058a57600080fd5b6105bf600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f60565b604051808215151515815260200191505060405180910390f35b34156105e457600080fd5b6105ec610f75565b6040518082815260200191505060405180910390f35b341561060d57600080fd5b610658600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f85565b6040518082815260200191505060405180910390f35b600660009054906101000a900460ff1681565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107175780601f106106ec57610100808354040283529160200191610717565b820191906000526020600020905b8154815290600101906020018083116106fa57829003601f168201915b505050505081565b6000808214806107ab57506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156107b657600080fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6108b160048261100c565b50565b60005481565b60006108c7848484611183565b90509392505050565b600960009054906101000a900460ff1681565b60046001600480549050038154811015156108fa57fe5b906000526020600020900160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b6000806000600660009054906101000a900460ff1615151561099e57600080fd5b6109b38460005461133890919063ffffffff16565b6000819055506109c1610f75565b915081848301101515156109d457600080fd5b6109dd85610dde565b905080848201101515156109f057600080fd5b6109fd600385840161100c565b610a47600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002085830161100c565b8473ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885856040518082815260200191505060405180910390a28473ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b600080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490501480610bcb575081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815481101515610b8c57fe5b906000526020600020900160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b15610bd95760009050610c24565b610c21600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083611356565b90505b92915050565b6000806000806000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054935060009250600091505b60016004805490500382111515610dd257600482815481101515610c9d57fe5b906000526020600020900190508060000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16841015610dc557610dc2610db3610d258360000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16610edf565b610da58460000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16610d978b8760000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16610af1565b61156a90919063ffffffff16565b61159d90919063ffffffff16565b8461133890919063ffffffff16565b92505b8180600101925050610c7d565b82945050505050919050565b6000610dea8243610af1565b9050919050565b60006001600660006101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b60088054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ed75780601f10610eac57610100808354040283529160200191610ed7565b820191906000526020600020905b815481529060010190602001808311610eba57829003601f168201915b505050505081565b6000806003805490501480610f3f57508160036000815481101515610f0057fe5b906000526020600020900160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b15610f4d5760009050610f5b565b610f58600383611356565b90505b919050565b6000610f6d338484611183565b905092915050565b6000610f8043610edf565b905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008060008480549050148061107257504384600186805490500381548110151561103357fe5b906000526020600020900160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16105b1561111f578384805480919060010161108b91906115b8565b81548110151561109757fe5b90600052602060002090019150438260000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550828260000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555061117d565b83600185805490500381548110151561113457fe5b90600052602060002090019050828160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b50505050565b600080600080841415611199576001925061132f565b60008573ffffffffffffffffffffffffffffffffffffffff16141580156111ec57503073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b15156111f757600080fd5b6112018643610af1565b915083821015611214576000925061132f565b61125e600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002085840361100c565b6112688543610af1565b9050808482011015151561127b57600080fd5b6112c5600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002085830161100c565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3600192505b50509392505050565b600080828401905083811015151561134c57fe5b8091505092915050565b6000806000806000868054905014156113725760009350611561565b85600187805490500381548110151561138757fe5b906000526020600020900160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1685101515611425578560018780549050038154811015156113e157fe5b906000526020600020900160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff169350611561565b85600081548110151561143457fe5b906000526020600020900160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168510156114815760009350611561565b60009250600186805490500391505b828211156115135760026001848401018115156114a957fe5b0490508486828154811015156114bb57fe5b906000526020600020900160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff161115156115075780925061150e565b6001810391505b611490565b858381548110151561152157fe5b906000526020600020900160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1693505b50505092915050565b6000808284029050600084148061158b575082848281151561158857fe5b04145b151561159357fe5b8091505092915050565b60008082848115156115ab57fe5b0490508091505092915050565b8154818355818115116115df578183600052602060002091820191016115de91906115e4565b5b505050565b61164691905b8082111561164257600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556000820160106101000a8154906fffffffffffffffffffffffffffffffff0219169055506001016115ea565b5090565b905600a165627a7a7230582003dff0794d040fcfa6fac5b018e8d8970ef1d5d94c491467d0ea8459c40f6f1d0029"
}