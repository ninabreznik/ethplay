{
  "address": "0x46940639ff7122539b71e836eccb08e53b08045d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MyToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-25\n*/\n\npragma solidity ^0.4.18;\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n}\n\ncontract tokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n}\n\ncontract MyToken is owned {\n    /* Public variables of the token */\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* This notifies clients about the amount burnt */\n    event Burn(address indexed from, uint256 value);\n\n    mapping (address => bool) public frozenAccount;\n    event FrozenFunds(address target, bool frozen);\n\n    function freezeAccount(address target, bool freeze) public onlyOwner {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function MyToken(\n        uint256 initialSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol,\n        address centralMinter\n        ) public {\n        if (centralMinter != 0) owner = centralMinter;      // 设置所有者\n        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n        totalSupply = initialSupply;                        // Update total supply\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n        decimals = decimalUnits;                            // Amount of decimals for display purposes\n    }\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balanceOf[_from] >= _value);                // Check if the sender has enough\n        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n        require(!frozenAccount[_from]);\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                            // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n    }\n\n    /// @notice Send `_value` tokens to `_to` from your account\n    /// @param _to The address of the recipient\n    /// @param _value the amount to send\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /// @notice Send `_value` tokens to `_to` in behalf of `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value the amount to send\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require (_value < allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf\n    /// @param _spender The address authorized to spend\n    /// @param _value the max amount they can spend\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n    /// @param _spender The address authorized to spend\n    /// @param _value the max amount they can spend\n    /// @param _extraData some extra information to send to the approved contract\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /// @notice Remove `_value` tokens from the system irreversibly\n    /// @param _value the amount of money to burn\n    function burn(uint256 _value) public returns (bool success) {\n        require (balanceOf[msg.sender] > _value);            // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;                      // Subtract from the sender\n        totalSupply -= _value;                                // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b604051610c0f380380610c0f83398101604052808051919060200180518201919060200180519190602001805182019190602001805160008054600160a060020a03191633600160a060020a0390811691909117909155909250821615905061008e5760008054600160a060020a031916600160a060020a0383161790555b600160a060020a0333166000908152600560205260409020859055600485905560018480516100c19291602001906100f5565b5060028280516100d59291602001906100f5565b50506003805460ff191660ff939093169290921790915550610190915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061013657805160ff1916838001178555610163565b82800160010185558215610163579182015b82811115610163578251825591602001919060010190610148565b5061016f929150610173565b5090565b61018d91905b8082111561016f5760008155600101610179565b90565b610a708061019f6000396000f3006060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ea578063095ea7b31461017457806318160ddd146101aa57806323b872dd146101cf578063313ce567146101f757806342966c681461022057806370a082311461023657806379cc6790146102555780638da5cb5b1461027757806395d89b41146102a6578063a9059cbb146102b9578063b414d4b6146102dd578063cae9ca51146102fc578063dd62ed3e14610361578063e724529c14610386578063f2fde38b146103aa575b600080fd5b34156100f557600080fd5b6100fd6103c9565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610139578082015183820152602001610121565b50505050905090810190601f1680156101665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017f57600080fd5b610196600160a060020a0360043516602435610467565b604051901515815260200160405180910390f35b34156101b557600080fd5b6101bd610497565b60405190815260200160405180910390f35b34156101da57600080fd5b610196600160a060020a036004358116906024351660443561049d565b341561020257600080fd5b61020a610513565b60405160ff909116815260200160405180910390f35b341561022b57600080fd5b61019660043561051c565b341561024157600080fd5b6101bd600160a060020a03600435166105a6565b341561026057600080fd5b610196600160a060020a03600435166024356105b8565b341561028257600080fd5b61028a610694565b604051600160a060020a03909116815260200160405180910390f35b34156102b157600080fd5b6100fd6106a3565b34156102c457600080fd5b6102db600160a060020a036004351660243561070e565b005b34156102e857600080fd5b610196600160a060020a036004351661071d565b341561030757600080fd5b61019660048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061073295505050505050565b341561036c57600080fd5b6101bd600160a060020a0360043581169060243516610860565b341561039157600080fd5b6102db600160a060020a0360043516602435151561087d565b34156103b557600080fd5b6102db600160a060020a0360043516610909565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561045f5780601f106104345761010080835404028352916020019161045f565b820191906000526020600020905b81548152906001019060200180831161044257829003601f168201915b505050505081565b600160a060020a033381166000908152600660209081526040808320938616835292905220819055600192915050565b60045481565b600160a060020a0380841660009081526006602090815260408083203390941683529290529081205482106104d157600080fd5b600160a060020a0380851660009081526006602090815260408083203390941683529290522080548390039055610509848484610953565b5060019392505050565b60035460ff1681565b600160a060020a03331660009081526005602052604081205482901161054157600080fd5b600160a060020a03331660008181526005602052604090819020805485900390556004805485900390557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a2506001919050565b60056020526000908152604090205481565b600160a060020a038216600090815260056020526040812054829010156105de57600080fd5b600160a060020a038084166000908152600660209081526040808320339094168352929052205482111561061157600080fd5b600160a060020a038084166000818152600560209081526040808320805488900390556006825280832033909516835293905282902080548590039055600480548590039055907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a250600192915050565b600054600160a060020a031681565b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561045f5780601f106104345761010080835404028352916020019161045f565b610719338383610953565b5050565b60076020526000908152604090205460ff1681565b60008361073f8185610467565b156108585780600160a060020a0316638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156107f55780820151838201526020016107dd565b50505050905090810190601f1680156108225780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561084357600080fd5b5af1151561085057600080fd5b505050600191505b509392505050565b600660209081526000928352604080842090915290825290205481565b60005433600160a060020a0390811691161461089857600080fd5b600160a060020a03821660009081526007602052604090819020805460ff19168315151790557f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b60005433600160a060020a0390811691161461092457600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038216151561096857600080fd5b600160a060020a0383166000908152600560205260409020548190101561098e57600080fd5b600160a060020a038216600090815260056020526040902054818101116109b457600080fd5b600160a060020a03831660009081526007602052604090205460ff16156109da57600080fd5b600160a060020a038084166000818152600560205260408082208054869003905592851680825290839020805485019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35050505600a165627a7a72305820a6f421f9d6c31bf1a2792f9d11a29f49285d44c1c854d8ed9b23acb82710f3e100290000000000000000000000000000000000000000033b2e3c9fd0803ce800000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000f3ede629fbe0325a443989b0ee0c244ce8240d150000000000000000000000000000000000000000000000000000000000000006524a636f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003524a430000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000033b2e3c9fd0803ce800000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000f3ede629fbe0325a443989b0ee0c244ce8240d150000000000000000000000000000000000000000000000000000000000000006524a636f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003524a430000000000000000000000000000000000000000000000000000000000"
}