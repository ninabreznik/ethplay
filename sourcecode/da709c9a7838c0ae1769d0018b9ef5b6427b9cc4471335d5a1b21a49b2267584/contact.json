{
  "address": "0x5906db495c9f27f73a9c46790cc79d860a6e9b5d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MultipleArbitrableTransaction",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-08\n*/\n\npragma solidity ^0.4.24;\n\ninterface IArbitrable {\n\n    event MetaEvidence(uint indexed _metaEvidenceID, string _evidence);\n\n    event Dispute(Arbitrator indexed _arbitrator, uint indexed _disputeID, uint _metaEvidenceID, uint _evidenceGroupID);\n\n    event Evidence(Arbitrator indexed _arbitrator, uint indexed _evidenceGroupID, address indexed _party, string _evidence);\n\n    event Ruling(Arbitrator indexed _arbitrator, uint indexed _disputeID, uint _ruling);\n\n    function rule(uint _disputeID, uint _ruling) external;\n}\n\ncontract Arbitrable is IArbitrable {\n    Arbitrator public arbitrator;\n    bytes public arbitratorExtraData;\n\n    modifier onlyArbitrator {require(msg.sender == address(arbitrator), \"Can only be called by the arbitrator.\"); _;}\n\n    constructor(Arbitrator _arbitrator, bytes memory _arbitratorExtraData) public {\n        arbitrator = _arbitrator;\n        arbitratorExtraData = _arbitratorExtraData;\n    }\n\n    function rule(uint _disputeID, uint _ruling) public onlyArbitrator {\n        emit Ruling(Arbitrator(msg.sender),_disputeID,_ruling);\n\n        executeRuling(_disputeID,_ruling);\n    }\n\n    function executeRuling(uint _disputeID, uint _ruling) internal;\n}\n\ncontract Arbitrator {\n\n    enum DisputeStatus {Waiting, Appealable, Solved}\n\n    modifier requireArbitrationFee(bytes memory _extraData) {\n        require(msg.value >= arbitrationCost(_extraData), \"Not enough ETH to cover arbitration costs.\");\n        _;\n    }\n    modifier requireAppealFee(uint _disputeID, bytes memory _extraData) {\n        require(msg.value >= appealCost(_disputeID, _extraData), \"Not enough ETH to cover appeal costs.\");\n        _;\n    }\n\n    event DisputeCreation(uint indexed _disputeID, Arbitrable indexed _arbitrable);\n\n    event AppealPossible(uint indexed _disputeID, Arbitrable indexed _arbitrable);\n\n    event AppealDecision(uint indexed _disputeID, Arbitrable indexed _arbitrable);\n\n    function createDispute(uint _choices, bytes memory _extraData) public requireArbitrationFee(_extraData) payable returns(uint disputeID) {}\n\n    function arbitrationCost(bytes memory _extraData) public view returns(uint fee);\n\n    function appeal(uint _disputeID, bytes memory _extraData) public requireAppealFee(_disputeID,_extraData) payable {\n        emit AppealDecision(_disputeID, Arbitrable(msg.sender));\n    }\n\n    function appealCost(uint _disputeID, bytes memory _extraData) public view returns(uint fee);\n\n    function appealPeriod(uint _disputeID) public view returns(uint start, uint end) {}\n\n    function disputeStatus(uint _disputeID) public view returns(DisputeStatus status);\n\n    function currentRuling(uint _disputeID) public view returns(uint ruling);\n}\n\n/**\n *  @authors: [@clesaege, @n1c01a5, @epiqueras, @ferittuncer]\n *  @reviewers: [@clesaege*, @unknownunknown1*]\n *  @auditors: []\n *  @bounties: []\n *  @deployments: []\n */\n\n\n/** @title Centralized Arbitrator\n *  @dev This is a centralized arbitrator deciding alone on the result of disputes. No appeals are possible.\n */\ncontract CentralizedArbitrator is Arbitrator {\n\n    address public owner = msg.sender;\n    uint arbitrationPrice; // Not public because arbitrationCost already acts as an accessor.\n    uint constant NOT_PAYABLE_VALUE = (2**256-2)/2; // High value to be sure that the appeal is too expensive.\n\n    struct DisputeStruct {\n        Arbitrable arbitrated;\n        uint choices;\n        uint fee;\n        uint ruling;\n        DisputeStatus status;\n    }\n\n    modifier onlyOwner {require(msg.sender==owner, \"Can only be called by the owner.\"); _;}\n\n    DisputeStruct[] public disputes;\n\n    /** @dev Constructor. Set the initial arbitration price.\n     *  @param _arbitrationPrice Amount to be paid for arbitration.\n     */\n    constructor(uint _arbitrationPrice) public {\n        arbitrationPrice = _arbitrationPrice;\n    }\n\n    /** @dev Set the arbitration price. Only callable by the owner.\n     *  @param _arbitrationPrice Amount to be paid for arbitration.\n     */\n    function setArbitrationPrice(uint _arbitrationPrice) public onlyOwner {\n        arbitrationPrice = _arbitrationPrice;\n    }\n\n    /** @dev Cost of arbitration. Accessor to arbitrationPrice.\n     *  @param _extraData Not used by this contract.\n     *  @return fee Amount to be paid.\n     */\n    function arbitrationCost(bytes _extraData) public view returns(uint fee) {\n        return arbitrationPrice;\n    }\n\n    /** @dev Cost of appeal. Since it is not possible, it's a high value which can never be paid.\n     *  @param _disputeID ID of the dispute to be appealed. Not used by this contract.\n     *  @param _extraData Not used by this contract.\n     *  @return fee Amount to be paid.\n     */\n    function appealCost(uint _disputeID, bytes _extraData) public view returns(uint fee) {\n        return NOT_PAYABLE_VALUE;\n    }\n\n    /** @dev Create a dispute. Must be called by the arbitrable contract.\n     *  Must be paid at least arbitrationCost().\n     *  @param _choices Amount of choices the arbitrator can make in this dispute. When ruling ruling<=choices.\n     *  @param _extraData Can be used to give additional info on the dispute to be created.\n     *  @return disputeID ID of the dispute created.\n     */\n    function createDispute(uint _choices, bytes _extraData) public payable returns(uint disputeID)  {\n        super.createDispute(_choices, _extraData);\n        disputeID = disputes.push(DisputeStruct({\n            arbitrated: Arbitrable(msg.sender),\n            choices: _choices,\n            fee: msg.value,\n            ruling: 0,\n            status: DisputeStatus.Waiting\n            })) - 1; // Create the dispute and return its number.\n        emit DisputeCreation(disputeID, Arbitrable(msg.sender));\n    }\n\n    /** @dev Give a ruling. UNTRUSTED.\n     *  @param _disputeID ID of the dispute to rule.\n     *  @param _ruling Ruling given by the arbitrator. Note that 0 means \"Not able/wanting to make a decision\".\n     */\n    function _giveRuling(uint _disputeID, uint _ruling) internal {\n        DisputeStruct storage dispute = disputes[_disputeID];\n        require(_ruling <= dispute.choices, \"Invalid ruling.\");\n        require(dispute.status != DisputeStatus.Solved, \"The dispute must not be solved already.\");\n\n        dispute.ruling = _ruling;\n        dispute.status = DisputeStatus.Solved;\n\n        msg.sender.send(dispute.fee); // Avoid blocking.\n        dispute.arbitrated.rule(_disputeID,_ruling);\n    }\n\n    /** @dev Give a ruling. UNTRUSTED.\n     *  @param _disputeID ID of the dispute to rule.\n     *  @param _ruling Ruling given by the arbitrator. Note that 0 means \"Not able/wanting to make a decision\".\n     */\n    function giveRuling(uint _disputeID, uint _ruling) public onlyOwner {\n        return _giveRuling(_disputeID, _ruling);\n    }\n\n    /** @dev Return the status of a dispute.\n     *  @param _disputeID ID of the dispute to rule.\n     *  @return status The status of the dispute.\n     */\n    function disputeStatus(uint _disputeID) public view returns(DisputeStatus status) {\n        return disputes[_disputeID].status;\n    }\n\n    /** @dev Return the ruling of a dispute.\n     *  @param _disputeID ID of the dispute to rule.\n     *  @return ruling The ruling which would or has been given.\n     */\n    function currentRuling(uint _disputeID) public view returns(uint ruling) {\n        return disputes[_disputeID].ruling;\n    }\n}\n\n\n/**\n *  @title AppealableArbitrator\n *  @author Enrique Piqueras - <[emailÂ protected]>\n *  @dev A centralized arbitrator that can be appealed.\n */\ncontract AppealableArbitrator is CentralizedArbitrator, Arbitrable {\n    /* Structs */\n\n    struct AppealDispute {\n        uint rulingTime;\n        Arbitrator arbitrator;\n        uint appealDisputeID;\n    }\n\n    /* Storage */\n\n    uint public timeOut;\n    mapping(uint => AppealDispute) public appealDisputes;\n    mapping(uint => uint) public appealDisputeIDsToDisputeIDs;\n\n    /* Constructor */\n\n    /** @dev Constructs the `AppealableArbitrator` contract.\n     *  @param _arbitrationPrice The amount to be paid for arbitration.\n     *  @param _arbitrator The back up arbitrator.\n     *  @param _arbitratorExtraData Not used by this contract.\n     *  @param _timeOut The time out for the appeal period.\n     */\n    constructor(\n        uint _arbitrationPrice,\n        Arbitrator _arbitrator,\n        bytes _arbitratorExtraData,\n        uint _timeOut\n    ) public CentralizedArbitrator(_arbitrationPrice) Arbitrable(_arbitrator, _arbitratorExtraData) {\n        timeOut = _timeOut;\n    }\n\n    /* External */\n\n    /** @dev Changes the back up arbitrator.\n     *  @param _arbitrator The new back up arbitrator.\n     */\n    function changeArbitrator(Arbitrator _arbitrator) external onlyOwner {\n        arbitrator = _arbitrator;\n    }\n\n    /** @dev Changes the time out.\n     *  @param _timeOut The new time out.\n     */\n    function changeTimeOut(uint _timeOut) external onlyOwner {\n        timeOut = _timeOut;\n    }\n\n    /* External Views */\n\n    /** @dev Gets the specified dispute's latest appeal ID.\n     *  @param _disputeID The ID of the dispute.\n     */\n    function getAppealDisputeID(uint _disputeID) external view returns(uint disputeID) {\n        if (appealDisputes[_disputeID].arbitrator != Arbitrator(address(0)))\n            disputeID = AppealableArbitrator(appealDisputes[_disputeID].arbitrator).getAppealDisputeID(appealDisputes[_disputeID].appealDisputeID);\n        else disputeID = _disputeID;\n    }\n\n    /* Public */\n\n    /** @dev Appeals a ruling.\n     *  @param _disputeID The ID of the dispute.\n     *  @param _extraData Additional info about the appeal.\n     */\n    function appeal(uint _disputeID, bytes _extraData) public payable requireAppealFee(_disputeID, _extraData) {\n        super.appeal(_disputeID, _extraData);\n        if (appealDisputes[_disputeID].arbitrator != Arbitrator(address(0)))\n            appealDisputes[_disputeID].arbitrator.appeal.value(msg.value)(appealDisputes[_disputeID].appealDisputeID, _extraData);\n        else {\n            appealDisputes[_disputeID].arbitrator = arbitrator;\n            appealDisputes[_disputeID].appealDisputeID = arbitrator.createDispute.value(msg.value)(disputes[_disputeID].choices, _extraData);\n            appealDisputeIDsToDisputeIDs[appealDisputes[_disputeID].appealDisputeID] = _disputeID;\n        }\n    }\n\n    /** @dev Gives a ruling.\n     *  @param _disputeID The ID of the dispute.\n     *  @param _ruling The ruling.\n     */\n    function giveRuling(uint _disputeID, uint _ruling) public {\n        require(disputes[_disputeID].status != DisputeStatus.Solved, \"The specified dispute is already resolved.\");\n        if (appealDisputes[_disputeID].arbitrator != Arbitrator(address(0))) {\n            require(Arbitrator(msg.sender) == appealDisputes[_disputeID].arbitrator, \"Appealed disputes must be ruled by their back up arbitrator.\");\n            super._giveRuling(_disputeID, _ruling);\n        } else {\n            require(msg.sender == owner, \"Not appealed disputes must be ruled by the owner.\");\n            if (disputes[_disputeID].status == DisputeStatus.Appealable) {\n                if (now - appealDisputes[_disputeID].rulingTime > timeOut)\n                    super._giveRuling(_disputeID, disputes[_disputeID].ruling);\n                else revert(\"Time out time has not passed yet.\");\n            } else {\n                disputes[_disputeID].ruling = _ruling;\n                disputes[_disputeID].status = DisputeStatus.Appealable;\n                appealDisputes[_disputeID].rulingTime = now;\n                emit AppealPossible(_disputeID, disputes[_disputeID].arbitrated);\n            }\n        }\n    }\n\n    /* Public Views */\n\n    /** @dev Gets the cost of appeal for the specified dispute.\n     *  @param _disputeID The ID of the dispute.\n     *  @param _extraData Additional info about the appeal.\n     *  @return The cost of the appeal.\n     */\n    function appealCost(uint _disputeID, bytes _extraData) public view returns(uint cost) {\n        if (appealDisputes[_disputeID].arbitrator != Arbitrator(address(0)))\n            cost = appealDisputes[_disputeID].arbitrator.appealCost(appealDisputes[_disputeID].appealDisputeID, _extraData);\n        else if (disputes[_disputeID].status == DisputeStatus.Appealable) cost = arbitrator.arbitrationCost(_extraData);\n        else cost = NOT_PAYABLE_VALUE;\n    }\n\n    /** @dev Gets the status of the specified dispute.\n     *  @param _disputeID The ID of the dispute.\n     *  @return The status.\n     */\n    function disputeStatus(uint _disputeID) public view returns(DisputeStatus status) {\n        if (appealDisputes[_disputeID].arbitrator != Arbitrator(address(0)))\n            status = appealDisputes[_disputeID].arbitrator.disputeStatus(appealDisputes[_disputeID].appealDisputeID);\n        else status = disputes[_disputeID].status;\n    }\n\n    /* Internal */\n\n    /** @dev Executes the ruling of the specified dispute.\n     *  @param _disputeID The ID of the dispute.\n     *  @param _ruling The ruling.\n     */\n    function executeRuling(uint _disputeID, uint _ruling) internal {\n        require(\n            appealDisputes[appealDisputeIDsToDisputeIDs[_disputeID]].arbitrator != Arbitrator(address(0)),\n            \"The dispute must have been appealed.\"\n        );\n        giveRuling(appealDisputeIDsToDisputeIDs[_disputeID], _ruling);\n    }\n}\n\ncontract MultipleArbitrableTransaction is IArbitrable {\n\n    // **************************** //\n    // *    Contract variables    * //\n    // **************************** //\n\n    uint8 constant AMOUNT_OF_CHOICES = 2;\n    uint8 constant SENDER_WINS = 1;\n    uint8 constant RECEIVER_WINS = 2;\n\n    enum Party {Sender, Receiver}\n    enum Status {NoDispute, WaitingSender, WaitingReceiver, DisputeCreated, Resolved}\n\n    struct Transaction {\n        address sender;\n        address receiver;\n        uint amount;\n        uint timeoutPayment; // Time in seconds after which the transaction can be automatically executed if not disputed.\n        uint disputeId; // If dispute exists, the ID of the dispute.\n        uint senderFee; // Total fees paid by the sender.\n        uint receiverFee; // Total fees paid by the receiver.\n        uint lastInteraction; // Last interaction for the dispute procedure.\n        Status status;\n    }\n\n    Transaction[] public transactions;\n    bytes public arbitratorExtraData; // Extra data to set up the arbitration.\n    Arbitrator public arbitrator; // Address of the arbitrator contract.\n    uint public feeTimeout; // Time in seconds a party can take to pay arbitration fees before being considered unresponding and lose the dispute.\n\n\n    mapping (uint => uint) public disputeIDtoTransactionID; // One-to-one relationship between the dispute and the transaction.\n\n    // **************************** //\n    // *          Events          * //\n    // **************************** //\n\n    /** @dev To be emitted when meta-evidence is submitted.\n     *  @param _metaEvidenceID Unique identifier of meta-evidence. Should be the `transactionID`.\n     *  @param _evidence A link to the meta-evidence JSON that follows the ERC 1497 Evidence standard (https://github.com/ethereum/EIPs/issues/1497).\n     */\n    event MetaEvidence(uint indexed _metaEvidenceID, string _evidence);\n\n    /** @dev To be emitted when a party pays or reimburses the other.\n     *  @param _transactionID The index of the transaction.\n     *  @param _amount The amount paid.\n     *  @param _party The party that paid.\n     */\n    event Payment(uint _transactionID, uint _amount, address _party);\n\n    /** @dev Indicate that a party has to pay a fee or would otherwise be considered as losing.\n     *  @param _transactionID The index of the transaction.\n     *  @param _party The party who has to pay.\n     */\n    event HasToPayFee(uint indexed _transactionID, Party _party);\n\n    /** @dev To be raised when evidence is submitted. Should point to the resource (evidences are not to be stored on chain due to gas considerations).\n     *  @param _arbitrator The arbitrator of the contract.\n     *  @param _evidenceGroupID Unique identifier of the evidence group the evidence belongs to.\n     *  @param _party The address of the party submitting the evidence. Note that 0 is kept for evidences not submitted by any party.\n     *  @param _evidence A link to an evidence JSON that follows the ERC 1497 Evidence standard (https://github.com/ethereum/EIPs/issues/1497).\n     */\n    event Evidence(Arbitrator indexed _arbitrator, uint indexed _evidenceGroupID, address indexed _party, string _evidence);\n\n    /** @dev To be emitted when a dispute is created to link the correct meta-evidence to the disputeID.\n     *  @param _arbitrator The arbitrator of the contract.\n     *  @param _disputeID ID of the dispute in the Arbitrator contract.\n     *  @param _metaEvidenceID Unique identifier of meta-evidence. Should be the transactionID.\n     *  @param _evidenceGroupID Unique identifier of the evidence group that is linked to this dispute.\n     */\n    event Dispute(Arbitrator indexed _arbitrator, uint indexed _disputeID, uint _metaEvidenceID, uint _evidenceGroupID);\n\n    /** @dev To be raised when a ruling is given.\n     *  @param _arbitrator The arbitrator giving the ruling.\n     *  @param _disputeID ID of the dispute in the Arbitrator contract.\n     *  @param _ruling The ruling which was given.\n     */\n    event Ruling(Arbitrator indexed _arbitrator, uint indexed _disputeID, uint _ruling);\n\n    // **************************** //\n    // *    Arbitrable functions  * //\n    // *    Modifying the state   * //\n    // **************************** //\n\n    /** @dev Constructor.\n     *  @param _arbitrator The arbitrator of the contract.\n     *  @param _arbitratorExtraData Extra data for the arbitrator.\n     *  @param _feeTimeout Arbitration fee timeout for the parties.\n     */\n    constructor (\n        Arbitrator _arbitrator,\n        bytes _arbitratorExtraData,\n        uint _feeTimeout\n    ) public {\n        arbitrator = _arbitrator;\n        arbitratorExtraData = _arbitratorExtraData;\n        feeTimeout = _feeTimeout;\n    }\n\n    /** @dev Create a transaction.\n     *  @param _timeoutPayment Time after which a party can automatically execute the arbitrable transaction.\n     *  @param _receiver The recipient of the transaction.\n     *  @param _metaEvidence Link to the meta-evidence.\n     *  @return transactionID The index of the transaction.\n     */\n    function createTransaction(\n        uint _timeoutPayment,\n        address _receiver,\n        string _metaEvidence\n    ) public payable returns (uint transactionID) {\n        transactions.push(Transaction({\n            sender: msg.sender,\n            receiver: _receiver,\n            amount: msg.value,\n            timeoutPayment: _timeoutPayment,\n            disputeId: 0,\n            senderFee: 0,\n            receiverFee: 0,\n            lastInteraction: now,\n            status: Status.NoDispute\n        }));\n        emit MetaEvidence(transactions.length - 1, _metaEvidence);\n\n        return transactions.length - 1;\n    }\n\n    /** @dev Pay receiver. To be called if the good or service is provided.\n     *  @param _transactionID The index of the transaction.\n     *  @param _amount Amount to pay in wei.\n     */\n    function pay(uint _transactionID, uint _amount) public {\n        Transaction storage transaction = transactions[_transactionID];\n        require(transaction.sender == msg.sender, \"The caller must be the sender.\");\n        require(transaction.status == Status.NoDispute, \"The transaction shouldn't be disputed.\");\n        require(_amount <= transaction.amount, \"The amount paid has to be less than or equal to the transaction.\");\n\n        transaction.receiver.transfer(_amount);\n        transaction.amount -= _amount;\n        emit Payment(_transactionID, _amount, msg.sender);\n    }\n\n    /** @dev Reimburse sender. To be called if the good or service can't be fully provided.\n     *  @param _transactionID The index of the transaction.\n     *  @param _amountReimbursed Amount to reimburse in wei.\n     */\n    function reimburse(uint _transactionID, uint _amountReimbursed) public {\n        Transaction storage transaction = transactions[_transactionID];\n        require(transaction.receiver == msg.sender, \"The caller must be the receiver.\");\n        require(transaction.status == Status.NoDispute, \"The transaction shouldn't be disputed.\");\n        require(_amountReimbursed <= transaction.amount, \"The amount reimbursed has to be less or equal than the transaction.\");\n\n        transaction.sender.transfer(_amountReimbursed);\n        transaction.amount -= _amountReimbursed;\n        emit Payment(_transactionID, _amountReimbursed, msg.sender);\n    }\n\n    /** @dev Transfer the transaction's amount to the receiver if the timeout has passed.\n     *  @param _transactionID The index of the transaction.\n     */\n    function executeTransaction(uint _transactionID) public {\n        Transaction storage transaction = transactions[_transactionID];\n        require(now - transaction.lastInteraction >= transaction.timeoutPayment, \"The timeout has not passed yet.\");\n        require(transaction.status == Status.NoDispute, \"The transaction shouldn't be disputed.\");\n\n        transaction.receiver.transfer(transaction.amount);\n        transaction.amount = 0;\n\n        transaction.status = Status.Resolved;\n    }\n\n    /** @dev Reimburse sender if receiver fails to pay the fee.\n     *  @param _transactionID The index of the transaction.\n     */\n    function timeOutBySender(uint _transactionID) public {\n        Transaction storage transaction = transactions[_transactionID];\n\n        require(transaction.status == Status.WaitingReceiver, \"The transaction is not waiting on the receiver.\");\n        require(now - transaction.lastInteraction >= feeTimeout, \"Timeout time has not passed yet.\");\n\n        executeRuling(_transactionID, SENDER_WINS);\n    }\n\n    /** @dev Pay receiver if sender fails to pay the fee.\n     *  @param _transactionID The index of the transaction.\n     */\n    function timeOutByReceiver(uint _transactionID) public {\n        Transaction storage transaction = transactions[_transactionID];\n\n        require(transaction.status == Status.WaitingSender, \"The transaction is not waiting on the sender.\");\n        require(now - transaction.lastInteraction >= feeTimeout, \"Timeout time has not passed yet.\");\n\n        executeRuling(_transactionID, RECEIVER_WINS);\n    }\n\n    /** @dev Pay the arbitration fee to raise a dispute. To be called by the sender. UNTRUSTED.\n     *  Note that the arbitrator can have createDispute throw, which will make this function throw and therefore lead to a party being timed-out.\n     *  This is not a vulnerability as the arbitrator can rule in favor of one party anyway.\n     *  @param _transactionID The index of the transaction.\n     */\n    function payArbitrationFeeBySender(uint _transactionID) public payable {\n        Transaction storage transaction = transactions[_transactionID];\n        uint arbitrationCost = arbitrator.arbitrationCost(arbitratorExtraData);\n\n        require(transaction.status < Status.DisputeCreated, \"Dispute has already been created or because the transaction has been executed.\");\n        require(msg.sender == transaction.sender, \"The caller must be the sender.\");\n\n        transaction.senderFee += msg.value;\n        // Require that the total pay at least the arbitration cost.\n        require(transaction.senderFee >= arbitrationCost, \"The sender fee must cover arbitration costs.\");\n\n        transaction.lastInteraction = now;\n\n        // The receiver still has to pay. This can also happen if he has paid, but arbitrationCost has increased.\n        if (transaction.receiverFee < arbitrationCost) {\n            transaction.status = Status.WaitingReceiver;\n            emit HasToPayFee(_transactionID, Party.Receiver);\n        } else { // The receiver has also paid the fee. We create the dispute.\n            raiseDispute(_transactionID, arbitrationCost);\n        }\n    }\n\n    /** @dev Pay the arbitration fee to raise a dispute. To be called by the receiver. UNTRUSTED.\n     *  Note that this function mirrors payArbitrationFeeBySender.\n     *  @param _transactionID The index of the transaction.\n     */\n    function payArbitrationFeeByReceiver(uint _transactionID) public payable {\n        Transaction storage transaction = transactions[_transactionID];\n        uint arbitrationCost = arbitrator.arbitrationCost(arbitratorExtraData);\n\n        require(transaction.status < Status.DisputeCreated, \"Dispute has already been created or because the transaction has been executed.\");\n        require(msg.sender == transaction.receiver, \"The caller must be the receiver.\");\n\n        transaction.receiverFee += msg.value;\n        // Require that the total paid to be at least the arbitration cost.\n        require(transaction.receiverFee >= arbitrationCost, \"The receiver fee must cover arbitration costs.\");\n\n        transaction.lastInteraction = now;\n        // The sender still has to pay. This can also happen if he has paid, but arbitrationCost has increased.\n        if (transaction.senderFee < arbitrationCost) {\n            transaction.status = Status.WaitingSender;\n            emit HasToPayFee(_transactionID, Party.Sender);\n        } else { // The sender has also paid the fee. We create the dispute.\n            raiseDispute(_transactionID, arbitrationCost);\n        }\n    }\n\n    /** @dev Create a dispute. UNTRUSTED.\n     *  @param _transactionID The index of the transaction.\n     *  @param _arbitrationCost Amount to pay the arbitrator.\n     */\n    function raiseDispute(uint _transactionID, uint _arbitrationCost) internal {\n        Transaction storage transaction = transactions[_transactionID];\n        transaction.status = Status.DisputeCreated;\n        transaction.disputeId = arbitrator.createDispute.value(_arbitrationCost)(AMOUNT_OF_CHOICES, arbitratorExtraData);\n        disputeIDtoTransactionID[transaction.disputeId] = _transactionID;\n        emit Dispute(arbitrator, transaction.disputeId, _transactionID, _transactionID);\n\n        // Refund sender if it overpaid.\n        if (transaction.senderFee > _arbitrationCost) {\n            uint extraFeeSender = transaction.senderFee - _arbitrationCost;\n            transaction.senderFee = _arbitrationCost;\n            transaction.sender.send(extraFeeSender);\n        }\n\n        // Refund receiver if it overpaid.\n        if (transaction.receiverFee > _arbitrationCost) {\n            uint extraFeeReceiver = transaction.receiverFee - _arbitrationCost;\n            transaction.receiverFee = _arbitrationCost;\n            transaction.receiver.send(extraFeeReceiver);\n        }\n    }\n\n    /** @dev Submit a reference to evidence. EVENT.\n     *  @param _transactionID The index of the transaction.\n     *  @param _evidence A link to an evidence using its URI.\n     */\n    function submitEvidence(uint _transactionID, string _evidence) public {\n        Transaction storage transaction = transactions[_transactionID];\n        require(\n            msg.sender == transaction.sender || msg.sender == transaction.receiver,\n            \"The caller must be the sender or the receiver.\"\n        );\n        require(\n            transaction.status < Status.Resolved,\n            \"Must not send evidence if the dispute is resolved.\"\n        );\n\n        emit Evidence(arbitrator, _transactionID, msg.sender, _evidence);\n    }\n\n    /** @dev Appeal an appealable ruling.\n     *  Transfer the funds to the arbitrator.\n     *  Note that no checks are required as the checks are done by the arbitrator.\n     *  @param _transactionID The index of the transaction.\n     */\n    function appeal(uint _transactionID) public payable {\n        Transaction storage transaction = transactions[_transactionID];\n\n        arbitrator.appeal.value(msg.value)(transaction.disputeId, arbitratorExtraData);\n    }\n\n    /** @dev Give a ruling for a dispute. Must be called by the arbitrator.\n     *  The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\n     *  @param _disputeID ID of the dispute in the Arbitrator contract.\n     *  @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for \"Not able/wanting to make a decision\".\n     */\n    function rule(uint _disputeID, uint _ruling) public {\n        uint transactionID = disputeIDtoTransactionID[_disputeID];\n        Transaction storage transaction = transactions[transactionID];\n        require(msg.sender == address(arbitrator), \"The caller must be the arbitrator.\");\n        require(transaction.status == Status.DisputeCreated, \"The dispute has already been resolved.\");\n\n        emit Ruling(Arbitrator(msg.sender), _disputeID, _ruling);\n\n        executeRuling(transactionID, _ruling);\n    }\n\n    /** @dev Execute a ruling of a dispute. It reimburses the fee to the winning party.\n     *  @param _transactionID The index of the transaction.\n     *  @param _ruling Ruling given by the arbitrator. 1 : Reimburse the receiver. 2 : Pay the sender.\n     */\n    function executeRuling(uint _transactionID, uint _ruling) internal {\n        Transaction storage transaction = transactions[_transactionID];\n        require(_ruling <= AMOUNT_OF_CHOICES, \"Invalid ruling.\");\n\n        // Give the arbitration fee back.\n        // Note that we use send to prevent a party from blocking the execution.\n        if (_ruling == SENDER_WINS) {\n            transaction.sender.send(transaction.senderFee + transaction.amount);\n        } else if (_ruling == RECEIVER_WINS) {\n            transaction.receiver.send(transaction.receiverFee + transaction.amount);\n        } else {\n            uint split_amount = (transaction.senderFee + transaction.amount) / 2;\n            transaction.sender.send(split_amount);\n            transaction.receiver.send(split_amount);\n        }\n\n        transaction.amount = 0;\n        transaction.senderFee = 0;\n        transaction.receiverFee = 0;\n        transaction.status = Status.Resolved;\n    }\n\n    // **************************** //\n    // *     Constant getters     * //\n    // **************************** //\n\n    /** @dev Getter to know the count of transactions.\n     *  @return countTransactions The count of transactions.\n     */\n    function getCountTransactions() public view returns (uint countTransactions) {\n        return transactions.length;\n    }\n\n    /** @dev Get IDs for transactions where the specified address is the receiver and/or the sender.\n     *  This function must be used by the UI and not by other smart contracts.\n     *  Note that the complexity is O(t), where t is amount of arbitrable transactions.\n     *  @param _address The specified address.\n     *  @return transactionIDs The transaction IDs.\n     */\n    function getTransactionIDsByAddress(address _address) public view returns (uint[] transactionIDs) {\n        uint count = 0;\n        for (uint i = 0; i < transactions.length; i++) {\n            if (transactions[i].sender == _address || transactions[i].receiver == _address)\n                count++;\n        }\n\n        transactionIDs = new uint[](count);\n\n        count = 0;\n\n        for (uint j = 0; j < transactions.length; j++) {\n            if (transactions[j].sender == _address || transactions[j].receiver == _address)\n                transactionIDs[count++] = j;\n        }\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"arbitratorExtraData\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputeIDtoTransactionID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"rule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionID\",\"type\":\"uint256\"}],\"name\":\"timeOutByReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionID\",\"type\":\"uint256\"}],\"name\":\"payArbitrationFeeByReceiver\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionID\",\"type\":\"uint256\"}],\"name\":\"payArbitrationFeeBySender\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionID\",\"type\":\"uint256\"}],\"name\":\"appeal\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"timeoutPayment\",\"type\":\"uint256\"},{\"name\":\"disputeId\",\"type\":\"uint256\"},{\"name\":\"senderFee\",\"type\":\"uint256\"},{\"name\":\"receiverFee\",\"type\":\"uint256\"},{\"name\":\"lastInteraction\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCountTransactions\",\"outputs\":[{\"name\":\"countTransactions\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionID\",\"type\":\"uint256\"},{\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"submitEvidence\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timeoutPayment\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_metaEvidence\",\"type\":\"string\"}],\"name\":\"createTransaction\",\"outputs\":[{\"name\":\"transactionID\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionID\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionID\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionID\",\"type\":\"uint256\"}],\"name\":\"timeOutBySender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTransactionIDsByAddress\",\"outputs\":[{\"name\":\"transactionIDs\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionID\",\"type\":\"uint256\"},{\"name\":\"_amountReimbursed\",\"type\":\"uint256\"}],\"name\":\"reimburse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_arbitrator\",\"type\":\"address\"},{\"name\":\"_arbitratorExtraData\",\"type\":\"bytes\"},{\"name\":\"_feeTimeout\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_metaEvidenceID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"MetaEvidence\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_transactionID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_party\",\"type\":\"address\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_transactionID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_party\",\"type\":\"uint8\"}],\"name\":\"HasToPayFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_evidenceGroupID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_party\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"Evidence\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_metaEvidenceID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_evidenceGroupID\",\"type\":\"uint256\"}],\"name\":\"Dispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"Ruling\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b50604051620021133803806200211383398101604090815281516020808401519284015160028054600160a060020a031916600160a060020a03851617905592909301805191939092916200006d91600191908501906200007a565b50600355506200011f9050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000bd57805160ff1916838001178555620000ed565b82800160010185558215620000ed579182015b82811115620000ed578251825591602001919060010190620000d0565b50620000fb929150620000ff565b5090565b6200011c91905b80821115620000fb576000815560010162000106565b90565b611fe4806200012f6000396000f3006080604052600436106100fb5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630c7ac7b681146101005780632fbe3b031461018a578063311a6c56146101b45780633de0c7ef146101d15780636cc6cde1146101e95780636e72b4521461021a5780637b44cdb5146102255780637e69b7b0146102305780639ace38c21461023b578063a527aa6a146102d3578063a6a7f0eb146102e8578063b329036b14610346578063da8c3eac1461035b578063ee22610b146103b7578063ef48eee6146103cf578063f42cadc1146103ea578063f94cdf9614610402578063fe43a99214610473575b600080fd5b34801561010c57600080fd5b5061011561048e565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014f578181015183820152602001610137565b50505050905090810190601f16801561017c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019657600080fd5b506101a260043561051b565b60408051918252519081900360200190f35b3480156101c057600080fd5b506101cf60043560243561052d565b005b3480156101dd57600080fd5b506101cf6004356106be565b3480156101f557600080fd5b506101fe6107df565b60408051600160a060020a039092168252519081900360200190f35b6101cf6004356107ee565b6101cf600435610b31565b6101cf600435610e4e565b34801561024757600080fd5b50610253600435610f76565b604051808a600160a060020a0316600160a060020a0316815260200189600160a060020a0316600160a060020a031681526020018881526020018781526020018681526020018581526020018481526020018381526020018260048111156102b757fe5b60ff168152602001995050505050505050505060405180910390f35b3480156102df57600080fd5b506101a2610fdf565b3480156102f457600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101cf958335953695604494919390910191908190840183828082843750949750610fe59650505050505050565b34801561035257600080fd5b506101a26111e8565b604080516020600460443581810135601f81018490048402850184019095528484526101a29482359460248035600160a060020a0316953695946064949201919081908401838280828437509497506111ee9650505050505050565b3480156103c357600080fd5b506101cf6004356113c8565b3480156103db57600080fd5b506101cf600435602435611535565b3480156103f657600080fd5b506101cf600435611757565b34801561040e57600080fd5b50610423600160a060020a0360043516611874565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561045f578181015183820152602001610447565b505050509050019250505060405180910390f35b34801561047f57600080fd5b506101cf6004356024356119f4565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105135780601f106104e857610100808354040283529160200191610513565b820191906000526020600020905b8154815290600101906020018083116104f657829003601f168201915b505050505081565b60046020526000908152604090205481565b600082815260046020526040812054815490919081908390811061054d57fe5b600091825260209091206002546009909202019150600160a060020a031633146105e7576040805160e560020a62461bcd02815260206004820152602260248201527f5468652063616c6c6572206d757374206265207468652061726269747261746f60448201527f722e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6003600882015460ff1660048111156105fc57fe5b14610677576040805160e560020a62461bcd02815260206004820152602660248201527f54686520646973707574652068617320616c7265616479206265656e2072657360448201527f6f6c7665642e0000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b604080518481529051859133917f394027a5fa6e098a1191094d1719d6929b9abc535fcc0c8f448d6a4e756222769181900360200190a36106b88284611bed565b50505050565b600080828154811015156106ce57fe5b6000918252602090912060099091020190506001600882015460ff1660048111156106f557fe5b14610770576040805160e560020a62461bcd02815260206004820152602d60248201527f546865207472616e73616374696f6e206973206e6f742077616974696e67206f60448201527f6e207468652073656e6465722e00000000000000000000000000000000000000606482015290519081900360840190fd5b6003546007820154420310156107d0576040805160e560020a62461bcd02815260206004820181905260248201527f54696d656f75742074696d6520686173206e6f7420706173736564207965742e604482015290519081900360640190fd5b6107db826002611bed565b5050565b600254600160a060020a031681565b60008060008381548110151561080057fe5b6000918252602091829020600280546040517ff7434ea9000000000000000000000000000000000000000000000000000000008152600481019586526001805460001981831615610100020116939093046024820181905260099095029093019650600160a060020a03169363f7434ea99391929091829160440190849080156108cb5780601f106108a0576101008083540402835291602001916108cb565b820191906000526020600020905b8154815290600101906020018083116108ae57829003601f168201915b505092505050602060405180830381600087803b1580156108eb57600080fd5b505af11580156108ff573d6000803e3d6000fd5b505050506040513d602081101561091557600080fd5b505190506003600883015460ff16600481111561092e57fe5b106109cf576040805160e560020a62461bcd02815260206004820152604e60248201527f446973707574652068617320616c7265616479206265656e206372656174656460448201527f206f72206265636175736520746865207472616e73616374696f6e206861732060648201527f6265656e2065786563757465642e000000000000000000000000000000000000608482015290519081900360a40190fd5b6001820154600160a060020a03163314610a33576040805160e560020a62461bcd02815260206004820181905260248201527f5468652063616c6c6572206d757374206265207468652072656365697665722e604482015290519081900360640190fd5b600682018054340190819055811115610abc576040805160e560020a62461bcd02815260206004820152602e60248201527f54686520726563656976657220666565206d75737420636f766572206172626960448201527f74726174696f6e20636f7374732e000000000000000000000000000000000000606482015290519081900360840190fd5b4260078301556005820154811115610b225760088201805460ff1916600117905560405183907fc74b9f7dedf2887cd3c113b6d8da9cea19e55c1116e25f1f0e1b72d7543179b59060009080825b60ff16815260200191505060405180910390a2610b2c565b610b2c8382611d7b565b505050565b600080600083815481101515610b4357fe5b6000918252602091829020600280546040517ff7434ea9000000000000000000000000000000000000000000000000000000008152600481019586526001805460001981831615610100020116939093046024820181905260099095029093019650600160a060020a03169363f7434ea9939192909182916044019084908015610c0e5780601f10610be357610100808354040283529160200191610c0e565b820191906000526020600020905b815481529060010190602001808311610bf157829003601f168201915b505092505050602060405180830381600087803b158015610c2e57600080fd5b505af1158015610c42573d6000803e3d6000fd5b505050506040513d6020811015610c5857600080fd5b505190506003600883015460ff166004811115610c7157fe5b10610d12576040805160e560020a62461bcd02815260206004820152604e60248201527f446973707574652068617320616c7265616479206265656e206372656174656460448201527f206f72206265636175736520746865207472616e73616374696f6e206861732060648201527f6265656e2065786563757465642e000000000000000000000000000000000000608482015290519081900360a40190fd5b8154600160a060020a03163314610d73576040805160e560020a62461bcd02815260206004820152601e60248201527f5468652063616c6c6572206d757374206265207468652073656e6465722e0000604482015290519081900360640190fd5b600582018054340190819055811115610dfc576040805160e560020a62461bcd02815260206004820152602c60248201527f5468652073656e64657220666565206d75737420636f7665722061726269747260448201527f6174696f6e20636f7374732e0000000000000000000000000000000000000000606482015290519081900360840190fd5b4260078301556006820154811115610b225760088201805460ff1916600217905560405183907fc74b9f7dedf2887cd3c113b6d8da9cea19e55c1116e25f1f0e1b72d7543179b5906001908082610b0a565b60008082815481101515610e5e57fe5b60009182526020909120600280546004600990940290920183810154604080517f49912f880000000000000000000000000000000000000000000000000000000081529586018281526024870191825260018054600019818316156101000201169590950460448801819052939750600160a060020a03909516956349912f8895349593949092916064019084908015610f395780601f10610f0e57610100808354040283529160200191610f39565b820191906000526020600020905b815481529060010190602001808311610f1c57829003601f168201915b505093505050506000604051808303818588803b158015610f5957600080fd5b505af1158015610f6d573d6000803e3d6000fd5b50505050505050565b6000805482908110610f8457fe5b6000918252602090912060099091020180546001820154600283015460038401546004850154600586015460068701546007880154600890980154600160a060020a0397881699509690951696939592949193909260ff1689565b60005490565b60008083815481101515610ff557fe5b600091825260209091206009909102018054909150600160a060020a031633148061102c57506001810154600160a060020a031633145b15156110a8576040805160e560020a62461bcd02815260206004820152602e60248201527f5468652063616c6c6572206d757374206265207468652073656e646572206f7260448201527f207468652072656365697665722e000000000000000000000000000000000000606482015290519081900360840190fd5b6004600882015460ff1660048111156110bd57fe5b10611138576040805160e560020a62461bcd02815260206004820152603260248201527f4d757374206e6f742073656e642065766964656e63652069662074686520646960448201527f7370757465206973207265736f6c7665642e0000000000000000000000000000606482015290519081900360840190fd5b600254604080516020808252855181830152855133948894600160a060020a03909116937fdccf2f8b2cc26eafcd61905cba744cff4b81d14740725f6376390dc6298a6a3c938993919283929083019185019080838360005b838110156111a9578181015183820152602001611191565b50505050905090810190601f1680156111d65780820380516001836020036101000a031916815260200191505b509250505060405180910390a4505050565b60035481565b6000806101206040519081016040528033600160a060020a0316815260200185600160a060020a031681526020013481526020018681526020016000815260200160008152602001600081526020014281526020016000600481111561125057fe5b90528154600180820180855560009485526020948590208451600990940201805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a039586161782559585015181840180549097169416939093179094556040830151600283015560608301516003830155608083015160048084019190915560a0840151600584015560c0840151600684015560e084015160078401556101008401516008840180549193909260ff1990921691849081111561130f57fe5b02179055505050506001600080549050037f61606860eb6c87306811e2695215385101daab53bd6ab4e9f9049aead9363c7d836040518080602001828103825283818151815260200191508051906020019080838360005b8381101561137f578181015183820152602001611367565b50505050905090810190601f1680156113ac5780820380516001836020036101000a031916815260200191505b509250505060405180910390a250600054600019019392505050565b600080828154811015156113d857fe5b906000526020600020906009020190508060030154816007015442031015151561144c576040805160e560020a62461bcd02815260206004820152601f60248201527f5468652074696d656f757420686173206e6f7420706173736564207965742e00604482015290519081900360640190fd5b6000600882015460ff16600481111561146157fe5b146114dc576040805160e560020a62461bcd02815260206004820152602660248201527f546865207472616e73616374696f6e2073686f756c646e27742062652064697360448201527f70757465642e0000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60018101546002820154604051600160a060020a039092169181156108fc0291906000818181858888f1935050505015801561151c573d6000803e3d6000fd5b5060006002820155600801805460ff1916600417905550565b6000808381548110151561154557fe5b600091825260209091206009909102018054909150600160a060020a031633146115b9576040805160e560020a62461bcd02815260206004820152601e60248201527f5468652063616c6c6572206d757374206265207468652073656e6465722e0000604482015290519081900360640190fd5b6000600882015460ff1660048111156115ce57fe5b14611649576040805160e560020a62461bcd02815260206004820152602660248201527f546865207472616e73616374696f6e2073686f756c646e27742062652064697360448201527f70757465642e0000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60028101548211156116cb576040805160e560020a62461bcd02815260206004820152602481018290527f54686520616d6f756e7420706169642068617320746f206265206c657373207460448201527f68616e206f7220657175616c20746f20746865207472616e73616374696f6e2e606482015290519081900360840190fd5b6001810154604051600160a060020a039091169083156108fc029084906000818181858888f19350505050158015611707573d6000803e3d6000fd5b5060028101805483900390556040805184815260208101849052338183015290517fd1432ca9a38d944f01b256a411861b109bc4bfe200c40d7144e919a16b86a8a89181900360600190a1505050565b6000808281548110151561176757fe5b6000918252602090912060099091020190506002600882015460ff16600481111561178e57fe5b14611809576040805160e560020a62461bcd02815260206004820152602f60248201527f546865207472616e73616374696f6e206973206e6f742077616974696e67206f60448201527f6e207468652072656365697665722e0000000000000000000000000000000000606482015290519081900360840190fd5b600354600782015442031015611869576040805160e560020a62461bcd02815260206004820181905260248201527f54696d656f75742074696d6520686173206e6f7420706173736564207965742e604482015290519081900360640190fd5b6107db826001611bed565b6060600080805b60005482101561190e5784600160a060020a031660008381548110151561189e57fe5b6000918252602090912060099091020154600160a060020a031614806118f7575084600160a060020a03166000838154811015156118d857fe5b6000918252602090912060016009909202010154600160a060020a0316145b15611903576001909201915b60019091019061187b565b82604051908082528060200260200182016040528015611938578160200160208202803883390190505b50935060009250600090505b6000548110156119ec5784600160a060020a031660008281548110151561196757fe5b6000918252602090912060099091020154600160a060020a031614806119c0575084600160a060020a03166000828154811015156119a157fe5b6000918252602090912060016009909202010154600160a060020a0316145b156119e45783516001840193829186919081106119d957fe5b602090810290910101525b600101611944565b505050919050565b60008083815481101515611a0457fe5b60009182526020909120600160099092020190810154909150600160a060020a03163314611a7c576040805160e560020a62461bcd02815260206004820181905260248201527f5468652063616c6c6572206d757374206265207468652072656365697665722e604482015290519081900360640190fd5b6000600882015460ff166004811115611a9157fe5b14611b0c576040805160e560020a62461bcd02815260206004820152602660248201527f546865207472616e73616374696f6e2073686f756c646e27742062652064697360448201527f70757465642e0000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6002810154821115611bb4576040805160e560020a62461bcd02815260206004820152604360248201527f54686520616d6f756e74207265696d6275727365642068617320746f2062652060448201527f6c657373206f7220657175616c207468616e20746865207472616e736163746960648201527f6f6e2e0000000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b8054604051600160a060020a039091169083156108fc029084906000818181858888f19350505050158015611707573d6000803e3d6000fd5b600080600084815481101515611bff57fe5b6000918252602090912060099091020191506002831115611c6a576040805160e560020a62461bcd02815260206004820152600f60248201527f496e76616c69642072756c696e672e0000000000000000000000000000000000604482015290519081900360640190fd5b6001831415611cab57815460028301546005840154604051600160a060020a0390931692910180156108fc02916000818181858888f1935050505050611d53565b6002831415611cef57600182015460028301546006840154604051600160a060020a0390931692910180156108fc02916000818181858888f1935050505050611d53565b6002828101546005840154018354604051929091049250600160a060020a03169082156108fc029083906000818181858888f15050506001840154604051600160a060020a03909116925083156108fc02915083906000818181858888f150505050505b50600060028201819055600582018190556006820155600801805460ff191660041790555050565b60008060008085815481101515611d8e57fe5b600091825260209091206008600990920201908101805460ff1916600317905560028054604080517fc13517e10000000000000000000000000000000000000000000000000000000081526004810184815260248201928352600180546101008183161502600019011686900460448401819052969950600160a060020a039094169563c13517e1958b9590949093909160649091019084908015611e745780601f10611e4957610100808354040283529160200191611e74565b820191906000526020600020905b815481529060010190602001808311611e5757829003601f168201915b505093505050506020604051808303818588803b158015611e9457600080fd5b505af1158015611ea8573d6000803e3d6000fd5b50505050506040513d6020811015611ebf57600080fd5b505160048085018281556000928352602091825260409283902088905554600254835189815292830189905283519193600160a060020a03909116927f74baab670a4015ab2f1b467c5252a96141a2573f2908e58a92081e80d3cfde3d929081900390910190a38383600501541115611f6957600583018054908590558354604051918690039350600160a060020a03169083156108fc029084906000818181858888f150505050505b8383600601541115611fb157506006820180549084905560018301546040519185900391600160a060020a039091169082156108fc029083906000818181858888f150505050505b50505050505600a165627a7a72305820e93b9cf4319a1bc1aa87a8a6e5e84dbcc67d32b93b54f1b0c003d0eeac47859c0029000000000000000000000000988b3a538b618c7a603e1c11ab82cd16dbe2806900000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003",
  "constructorArguments": "000000000000000000000000988b3a538b618c7a603e1c11ab82cd16dbe2806900000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003"
}