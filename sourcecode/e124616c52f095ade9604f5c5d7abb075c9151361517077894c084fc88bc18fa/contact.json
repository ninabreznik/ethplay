{
  "address": "0xc2e5fc244be9094ced98d3ec3a844e51876fe178",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CompliantTokenSwitch",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-29\n*/\n\npragma solidity 0.4.24;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    constructor(address _owner) public {\n        owner = _owner;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\n\n\ncontract DetailedERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n\n\n/**\n * @title Validator\n * @dev The Validator contract has a validator address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Validator {\n    address public validator;\n\n    event NewValidatorSet(address indexed previousOwner, address indexed newValidator);\n\n    /**\n    * @dev The Validator constructor sets the original `validator` of the contract to the sender\n    * account.\n    */\n    constructor() public {\n        validator = msg.sender;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the validator.\n    */\n    modifier onlyValidator() {\n        require(msg.sender == validator);\n        _;\n    }\n\n    /**\n    * @dev Allows the current validator to transfer control of the contract to a newValidator.\n    * @param newValidator The address to become next validator.\n    */\n    function setNewValidator(address newValidator) public onlyValidator {\n        require(newValidator != address(0));\n        emit NewValidatorSet(validator, newValidator);\n        validator = newValidator;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    constructor(address _owner) \n        public \n        Ownable(_owner) \n    {\n\n    }\n\n    /**\n    * @dev Function to mint tokens\n    * @param _to The address that will receive the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    /**\n    * @dev Function to stop minting new tokens.\n    * @return True if the operation was successful.\n    */\n    function finishMinting() onlyOwner canMint public returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n}\n\n\n\n\n\n\n\ncontract Whitelist is Ownable {\n    mapping(address => bool) internal investorMap;\n\n    /**\n    * event for investor approval logging\n    * @param investor approved investor\n    */\n    event Approved(address indexed investor);\n\n    /**\n    * event for investor disapproval logging\n    * @param investor disapproved investor\n    */\n    event Disapproved(address indexed investor);\n\n    constructor(address _owner) \n        public \n        Ownable(_owner) \n    {\n        \n    }\n\n    /** @param _investor the address of investor to be checked\n      * @return true if investor is approved\n      */\n    function isInvestorApproved(address _investor) external view returns (bool) {\n        require(_investor != address(0));\n        return investorMap[_investor];\n    }\n\n    /** @dev approve an investor\n      * @param toApprove investor to be approved\n      */\n    function approveInvestor(address toApprove) external onlyOwner {\n        investorMap[toApprove] = true;\n        emit Approved(toApprove);\n    }\n\n    /** @dev approve investors in bulk\n      * @param toApprove array of investors to be approved\n      */\n    function approveInvestorsInBulk(address[] toApprove) external onlyOwner {\n        for (uint i = 0; i < toApprove.length; i++) {\n            investorMap[toApprove[i]] = true;\n            emit Approved(toApprove[i]);\n        }\n    }\n\n    /** @dev disapprove an investor\n      * @param toDisapprove investor to be disapproved\n      */\n    function disapproveInvestor(address toDisapprove) external onlyOwner {\n        delete investorMap[toDisapprove];\n        emit Disapproved(toDisapprove);\n    }\n\n    /** @dev disapprove investors in bulk\n      * @param toDisapprove array of investors to be disapproved\n      */\n    function disapproveInvestorsInBulk(address[] toDisapprove) external onlyOwner {\n        for (uint i = 0; i < toDisapprove.length; i++) {\n            delete investorMap[toDisapprove[i]];\n            emit Disapproved(toDisapprove[i]);\n        }\n    }\n}\n\n\n\n\n/** @title Compliant Token */\ncontract CompliantTokenSwitch is Validator, DetailedERC20, MintableToken {\n    Whitelist public whiteListingContract;\n\n    struct TransactionStruct {\n        address from;\n        address to;\n        uint256 value;\n        uint256 fee;\n        address spender;\n    }\n\n    mapping (uint => TransactionStruct) public pendingTransactions;\n    mapping (address => mapping (address => uint256)) public pendingApprovalAmount;\n    uint256 public currentNonce = 0;\n    uint256 public transferFee;\n    address public feeRecipient;\n    bool public tokenSwitch;\n\n    modifier checkIsInvestorApproved(address _account) {\n        require(whiteListingContract.isInvestorApproved(_account));\n        _;\n    }\n\n    modifier checkIsAddressValid(address _account) {\n        require(_account != address(0));\n        _;\n    }\n\n    modifier checkIsValueValid(uint256 _value) {\n        require(_value > 0);\n        _;\n    }\n\n    /**\n    * event for rejected transfer logging\n    * @param from address from which tokens have to be transferred\n    * @param to address to tokens have to be transferred\n    * @param value number of tokens\n    * @param nonce request recorded at this particular nonce\n    * @param reason reason for rejection\n    */\n    event TransferRejected(\n        address indexed from,\n        address indexed to,\n        uint256 value,\n        uint256 indexed nonce,\n        uint256 reason\n    );\n\n    /**\n    * event for transfer tokens logging\n    * @param from address from which tokens have to be transferred\n    * @param to address to tokens have to be transferred\n    * @param value number of tokens\n    * @param fee fee in tokens\n    */\n    event TransferWithFee(\n        address indexed from,\n        address indexed to,\n        uint256 value,\n        uint256 fee\n    );\n\n    /**\n    * event for transfer/transferFrom request logging\n    * @param from address from which tokens have to be transferred\n    * @param to address to tokens have to be transferred\n    * @param value number of tokens\n    * @param fee fee in tokens\n    * @param spender The address which will spend the tokens\n    * @param nonce request recorded at this particular nonce\n    */\n    event RecordedPendingTransaction(\n        address indexed from,\n        address indexed to,\n        uint256 value,\n        uint256 fee,\n        address indexed spender,\n        uint256 nonce\n    );\n\n    /**\n    * event for token switch activate logging\n    */\n    event TokenSwitchActivated();\n\n    /**\n    * event for token switch deactivate logging\n    */\n    event TokenSwitchDeactivated();\n\n    /**\n    * event for whitelist contract update logging\n    * @param _whiteListingContract address of the new whitelist contract\n    */\n    event WhiteListingContractSet(address indexed _whiteListingContract);\n\n    /**\n    * event for fee update logging\n    * @param previousFee previous fee\n    * @param newFee new fee\n    */\n    event FeeSet(uint256 indexed previousFee, uint256 indexed newFee);\n\n    /**\n    * event for fee recipient update logging\n    * @param previousRecipient address of the old fee recipient\n    * @param newRecipient address of the new fee recipient\n    */\n    event FeeRecipientSet(address indexed previousRecipient, address indexed newRecipient);\n\n    /** @dev Constructor\n      * @param _owner Token contract owner\n      * @param _name Token name\n      * @param _symbol Token symbol\n      * @param _decimals number of decimals in the token(usually 18)\n      * @param whitelistAddress Ethereum address of the whitelist contract\n      * @param recipient Ethereum address of the fee recipient\n      * @param fee token fee for approving a transfer\n      */\n    constructor(\n        address _owner,\n        string _name, \n        string _symbol, \n        uint8 _decimals,\n        address whitelistAddress,\n        address recipient,\n        uint256 fee\n    )\n        public\n        MintableToken(_owner)\n        DetailedERC20(_name, _symbol, _decimals)\n        Validator()\n    {\n        setWhitelistContract(whitelistAddress);\n        setFeeRecipient(recipient);\n        setFee(fee);\n    }\n\n    /** @dev Updates whitelist contract address\n      * @param whitelistAddress New whitelist contract address\n      */\n    function setWhitelistContract(address whitelistAddress)\n        public\n        onlyValidator\n        checkIsAddressValid(whitelistAddress)\n    {\n        whiteListingContract = Whitelist(whitelistAddress);\n        emit WhiteListingContractSet(whiteListingContract);\n    }\n\n    /** @dev Updates token fee for approving a transfer\n      * @param fee New token fee\n      */\n    function setFee(uint256 fee)\n        public\n        onlyValidator\n    {\n        emit FeeSet(transferFee, fee);\n        transferFee = fee;\n    }\n\n    /** @dev Updates fee recipient address\n      * @param recipient New whitelist contract address\n      */\n    function setFeeRecipient(address recipient)\n        public\n        onlyValidator\n        checkIsAddressValid(recipient)\n    {\n        emit FeeRecipientSet(feeRecipient, recipient);\n        feeRecipient = recipient;\n    }\n\n    /** @dev activates token switch after which no validator approval is required for transfer */\n    function activateTokenSwitch() public onlyValidator {\n        tokenSwitch = true;\n        emit TokenSwitchActivated();\n    }\n\n    /** @dev deactivates token switch after which validator approval is required for transfer */ \n    function deactivateTokenSwitch() public onlyValidator {\n        tokenSwitch = false;\n        emit TokenSwitchDeactivated();\n    }\n\n    /** @dev Updates token name\n      * @param _name New token name\n      */\n    function updateName(string _name) public onlyOwner {\n        require(bytes(_name).length != 0);\n        name = _name;\n    }\n\n    /** @dev Updates token symbol\n      * @param _symbol New token name\n      */\n    function updateSymbol(string _symbol) public onlyOwner {\n        require(bytes(_symbol).length != 0);\n        symbol = _symbol;\n    }\n\n    /** @dev transfer\n      * @param _to address to which the tokens have to be transferred\n      * @param _value amount of tokens to be transferred\n      */\n    function transfer(address _to, uint256 _value)\n        public\n        checkIsInvestorApproved(msg.sender)\n        checkIsInvestorApproved(_to)\n        checkIsValueValid(_value)\n        returns (bool)\n    {\n        if (tokenSwitch) {\n            super.transfer(_to, _value);\n        } else {\n            uint256 pendingAmount = pendingApprovalAmount[msg.sender][address(0)];\n            uint256 fee = 0;\n\n            if (msg.sender == feeRecipient) {\n                require(_value.add(pendingAmount) <= balances[msg.sender]);\n                pendingApprovalAmount[msg.sender][address(0)] = pendingAmount.add(_value);\n            } else {\n                fee = transferFee;\n                require(_value.add(pendingAmount).add(transferFee) <= balances[msg.sender]);\n                pendingApprovalAmount[msg.sender][address(0)] = pendingAmount.add(_value).add(transferFee);\n            }\n\n            pendingTransactions[currentNonce] = TransactionStruct(\n                msg.sender,\n                _to,\n                _value,\n                fee,\n                address(0)\n            );\n\n            emit RecordedPendingTransaction(msg.sender, _to, _value, fee, address(0), currentNonce);\n            currentNonce++;\n        }\n\n        return true;\n    }\n\n    /** @dev transferFrom\n      * @param _from address from which the tokens have to be transferred\n      * @param _to address to which the tokens have to be transferred\n      * @param _value amount of tokens to be transferred\n      */\n    function transferFrom(address _from, address _to, uint256 _value)\n        public \n        checkIsInvestorApproved(_from)\n        checkIsInvestorApproved(_to)\n        checkIsValueValid(_value)\n        returns (bool)\n    {\n        if (tokenSwitch) {\n            super.transferFrom(_from, _to, _value);\n        } else {\n            uint256 allowedTransferAmount = allowed[_from][msg.sender];\n            uint256 pendingAmount = pendingApprovalAmount[_from][msg.sender];\n            uint256 fee = 0;\n            \n            if (_from == feeRecipient) {\n                require(_value.add(pendingAmount) <= balances[_from]);\n                require(_value.add(pendingAmount) <= allowedTransferAmount);\n                pendingApprovalAmount[_from][msg.sender] = pendingAmount.add(_value);\n            } else {\n                fee = transferFee;\n                require(_value.add(pendingAmount).add(transferFee) <= balances[_from]);\n                require(_value.add(pendingAmount).add(transferFee) <= allowedTransferAmount);\n                pendingApprovalAmount[_from][msg.sender] = pendingAmount.add(_value).add(transferFee);\n            }\n\n            pendingTransactions[currentNonce] = TransactionStruct(\n                _from,\n                _to,\n                _value,\n                fee,\n                msg.sender\n            );\n\n            emit RecordedPendingTransaction(_from, _to, _value, fee, msg.sender, currentNonce);\n            currentNonce++;\n        }\n\n        return true;\n    }\n\n    /** @dev approve transfer/transferFrom request\n      * @param nonce request recorded at this particular nonce\n      */\n    function approveTransfer(uint256 nonce)\n        external \n        onlyValidator\n    {   \n        require(_approveTransfer(nonce));\n    }    \n\n    /** @dev reject transfer/transferFrom request\n      * @param nonce request recorded at this particular nonce\n      * @param reason reason for rejection\n      */\n    function rejectTransfer(uint256 nonce, uint256 reason)\n        external \n        onlyValidator\n    {        \n        _rejectTransfer(nonce, reason);\n    }\n\n    /** @dev approve transfer/transferFrom requests\n      * @param nonces request recorded at these nonces\n      */\n    function bulkApproveTransfers(uint256[] nonces)\n        external \n        onlyValidator\n        returns (bool)\n    {\n        for (uint i = 0; i < nonces.length; i++) {\n            require(_approveTransfer(nonces[i]));\n        }\n    }\n\n    /** @dev reject transfer/transferFrom request\n      * @param nonces requests recorded at these nonces\n      * @param reasons reasons for rejection\n      */\n    function bulkRejectTransfers(uint256[] nonces, uint256[] reasons)\n        external \n        onlyValidator\n    {\n        require(nonces.length == reasons.length);\n        for (uint i = 0; i < nonces.length; i++) {\n            _rejectTransfer(nonces[i], reasons[i]);\n        }\n    }\n\n    /** @dev approve transfer/transferFrom request called internally in the approveTransfer and bulkApproveTransfers functions\n      * @param nonce request recorded at this particular nonce\n      */\n    function _approveTransfer(uint256 nonce)\n        private\n        checkIsInvestorApproved(pendingTransactions[nonce].from)\n        checkIsInvestorApproved(pendingTransactions[nonce].to)\n        returns (bool)\n    {   \n        address from = pendingTransactions[nonce].from;\n        address to = pendingTransactions[nonce].to;\n        address spender = pendingTransactions[nonce].spender;\n        uint256 value = pendingTransactions[nonce].value;\n        uint256 fee = pendingTransactions[nonce].fee;\n\n        delete pendingTransactions[nonce];\n\n        if (fee == 0) {\n\n            balances[from] = balances[from].sub(value);\n            balances[to] = balances[to].add(value);\n\n            if (spender != address(0)) {\n                allowed[from][spender] = allowed[from][spender].sub(value);\n            }\n\n            pendingApprovalAmount[from][spender] = pendingApprovalAmount[from][spender].sub(value);\n\n            emit Transfer(\n                from,\n                to,\n                value\n            );\n\n        } else {\n\n            balances[from] = balances[from].sub(value.add(fee));\n            balances[to] = balances[to].add(value);\n            balances[feeRecipient] = balances[feeRecipient].add(fee);\n\n            if (spender != address(0)) {\n                allowed[from][spender] = allowed[from][spender].sub(value).sub(fee);\n            }\n\n            pendingApprovalAmount[from][spender] = pendingApprovalAmount[from][spender].sub(value).sub(fee);\n            \n            emit TransferWithFee(\n                from,\n                to,\n                value,\n                fee\n            );\n\n        }\n\n        return true;\n    }    \n\n    /** @dev reject transfer/transferFrom request called internally in the rejectTransfer and bulkRejectTransfers functions\n      * @param nonce request recorded at this particular nonce\n      * @param reason reason for rejection\n      */\n    function _rejectTransfer(uint256 nonce, uint256 reason)\n        private\n        checkIsAddressValid(pendingTransactions[nonce].from)\n    {        \n        address from = pendingTransactions[nonce].from;\n        address spender = pendingTransactions[nonce].spender;\n        uint256 value = pendingTransactions[nonce].value;\n\n        if (pendingTransactions[nonce].fee == 0) {\n            pendingApprovalAmount[from][spender] = pendingApprovalAmount[from][spender]\n                .sub(value);\n        } else {\n            pendingApprovalAmount[from][spender] = pendingApprovalAmount[from][spender]\n                .sub(value).sub(pendingTransactions[nonce].fee);\n        }\n        \n        emit TransferRejected(\n            from,\n            pendingTransactions[nonce].to,\n            value,\n            nonce,\n            reason\n        );\n        \n        delete pendingTransactions[nonce];\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"whitelistAddress\",\"type\":\"address\"}],\"name\":\"setWhitelistContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValidator\",\"type\":\"address\"}],\"name\":\"setNewValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingApprovalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"name\":\"reasons\",\"type\":\"uint256[]\"}],\"name\":\"bulkRejectTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"updateSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingTransactions\",\"outputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"spender\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"updateName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deactivateTokenSwitch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteListingContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSwitch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"approveTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateTokenSwitch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"reason\",\"type\":\"uint256\"}],\"name\":\"rejectTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonces\",\"type\":\"uint256[]\"}],\"name\":\"bulkApproveTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"whitelistAddress\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reason\",\"type\":\"uint256\"}],\"name\":\"TransferRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TransferWithFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"RecordedPendingTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokenSwitchActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokenSwitchDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_whiteListingContract\",\"type\":\"address\"}],\"name\":\"WhiteListingContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousFee\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousRecipient\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValidator\",\"type\":\"address\"}],\"name\":\"NewValidatorSet\",\"type\":\"event\"}]",
  "bytecode": "60806040526007805460a060020a60ff02191690556000600b553480156200002657600080fd5b50604051620025b4380380620025b48339810160409081528151602080840151928401516060850151608086015160a087015160c088015160008054600160a060020a03191633179055968801805196989097940195929491939092909188918291899189918991620000a091600191908601906200028f565b508151620000b69060029060208501906200028f565b506003805460ff191660ff92909216919091179055505060078054600160a060020a031916600160a060020a039290921691909117905550620001028364010000000062000137810204565b6200011682640100000000620001b7810204565b6200012a8164010000000062000243810204565b5050505050505062000334565b600054600160a060020a031633146200014f57600080fd5b80600160a060020a03811615156200016657600080fd5b60088054600160a060020a031916600160a060020a0384811691909117918290556040519116907f770a556255467946acb4da5df8ae3bd252346205b8191641a036b89f441f975d90600090a25050565b600054600160a060020a03163314620001cf57600080fd5b80600160a060020a0381161515620001e657600080fd5b600d54604051600160a060020a038085169216907f15d80a013f22151bc7246e3bc132e12828cde19de98870475e3fa7084015272190600090a350600d8054600160a060020a031916600160a060020a0392909216919091179055565b600054600160a060020a031633146200025b57600080fd5b600c546040518291907f74dbbbe280ef27b79a8a0c449d5ae2ba7a31849103241d0f98df70bbc9d03e3790600090a3600c55565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002d257805160ff191683800117855562000302565b8280016001018555821562000302579182015b8281111562000302578251825591602001919060010190620002e5565b506200031092915062000314565b5090565b6200033191905b808211156200031057600081556001016200031b565b90565b61227080620003446000396000f3006080604052600436106101c15763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146101c657806306fdde03146101ef578063095ea7b31461027957806312f261401461029d5780631456979f146102c057806318160ddd146102e157806318fb9dad1461030857806323b872dd1461032f578063313ce567146103595780633a5381b51461038457806340c10f19146103b557806346904840146103d95780635218c37d146103ee578063537f53121461041a57806363a8374d1461047357806366188463146104c757806369fe0e2d146104eb57806370a08231146105035780637d64bcb41461052457806384da92a7146105395780638da5cb5b1461059257806395d89b41146105a7578063a13d3832146105bc578063a9059cbb146105d1578063acb2ad6f146105f5578063adb610a31461060a578063b0e1f5531461061f578063b3a5829d14610634578063cacca4a014610649578063d52b9e4014610661578063d73dd62314610676578063dd62ed3e1461069a578063e5c31ddc146106c1578063e74b981b146106dc578063f2fde38b146106fd578063f3fa1e7b1461071e575b600080fd5b3480156101d257600080fd5b506101db61073e565b604080519115158252519081900360200190f35b3480156101fb57600080fd5b5061020461074e565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561023e578181015183820152602001610226565b50505050905090810190601f16801561026b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561028557600080fd5b506101db600160a060020a03600435166024356107db565b3480156102a957600080fd5b506102be600160a060020a0360043516610841565b005b3480156102cc57600080fd5b506102be600160a060020a03600435166108bf565b3480156102ed57600080fd5b506102f6610946565b60408051918252519081900360200190f35b34801561031457600080fd5b506102f6600160a060020a036004358116906024351661094d565b34801561033b57600080fd5b506101db600160a060020a036004358116906024351660443561096a565b34801561036557600080fd5b5061036e610d32565b6040805160ff9092168252519081900360200190f35b34801561039057600080fd5b50610399610d3b565b60408051600160a060020a039092168252519081900360200190f35b3480156103c157600080fd5b506101db600160a060020a0360043516602435610d4a565b3480156103e557600080fd5b50610399610e44565b3480156103fa57600080fd5b506102be6024600480358281019290820135918135918201910135610e53565b34801561042657600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102be943694929360249392840191908190840183828082843750949750610ec29650505050505050565b34801561047f57600080fd5b5061048b600435610efd565b60408051600160a060020a0396871681529486166020860152848101939093526060840191909152909216608082015290519081900360a00190f35b3480156104d357600080fd5b506101db600160a060020a0360043516602435610f39565b3480156104f757600080fd5b506102be60043561102b565b34801561050f57600080fd5b506102f6600160a060020a0360043516611076565b34801561053057600080fd5b506101db611091565b34801561054557600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102be9436949293602493928401919081908401838280828437509497506111159650505050505050565b34801561059e57600080fd5b5061039961114c565b3480156105b357600080fd5b5061020461115b565b3480156105c857600080fd5b506102be6111b3565b3480156105dd57600080fd5b506101db600160a060020a0360043516602435611213565b34801561060157600080fd5b506102f6611543565b34801561061657600080fd5b506102f6611549565b34801561062b57600080fd5b5061039961154f565b34801561064057600080fd5b506101db61155e565b34801561065557600080fd5b506102be60043561156e565b34801561066d57600080fd5b506102be61159c565b34801561068257600080fd5b506101db600160a060020a0360043516602435611602565b3480156106a657600080fd5b506102f6600160a060020a036004358116906024351661169b565b3480156106cd57600080fd5b506102be6004356024356116c6565b3480156106e857600080fd5b506102be600160a060020a03600435166116e7565b34801561070957600080fd5b506102be600160a060020a0360043516611771565b34801561072a57600080fd5b506101db60048035602481019101356117f9565b60075460a060020a900460ff1681565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107d35780601f106107a8576101008083540402835291602001916107d3565b820191906000526020600020905b8154815290600101906020018083116107b657829003601f168201915b505050505081565b336000818152600660209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600054600160a060020a0316331461085857600080fd5b80600160a060020a038116151561086e57600080fd5b60088054600160a060020a031916600160a060020a0384811691909117918290556040519116907f770a556255467946acb4da5df8ae3bd252346205b8191641a036b89f441f975d90600090a25050565b600054600160a060020a031633146108d657600080fd5b600160a060020a03811615156108eb57600080fd5b60008054604051600160a060020a03808516939216917fb845aa14512b0a33bc681ec85e8670ad87301081c1a11343e30d5851ca5d206b91a360008054600160a060020a031916600160a060020a0392909216919091179055565b6005545b90565b600a60209081526000928352604080842090915290825290205481565b6008546040805160e660020a6302966bcd028152600160a060020a03808716600483015291516000938493849384938a93929092169163a59af3409160248082019260209290919082900301818887803b1580156109c757600080fd5b505af11580156109db573d6000803e3d6000fd5b505050506040513d60208110156109f157600080fd5b505115156109fe57600080fd5b6008546040805160e660020a6302966bcd028152600160a060020a03808b16600483015291518a93929092169163a59af340916024808201926020929091908290030181600087803b158015610a5357600080fd5b505af1158015610a67573d6000803e3d6000fd5b505050506040513d6020811015610a7d57600080fd5b50511515610a8a57600080fd5b8660008111610a9857600080fd5b600d5460a060020a900460ff1615610abb57610ab58a8a8a61184d565b50610d22565b600160a060020a03808b1660008181526006602090815260408083203380855290835281842054858552600a84528285209185529252822054600d54919a5098509096509091161415610b9157600160a060020a038a16600090815260046020526040902054610b31898763ffffffff6119b416565b1115610b3c57600080fd5b85610b4d898763ffffffff6119b416565b1115610b5857600080fd5b610b68858963ffffffff6119b416565b600160a060020a038b166000908152600a60209081526040808320338452909152902055610c3b565b600c54600160a060020a038b16600090815260046020526040902054909450610bd085610bc48b8963ffffffff6119b416565b9063ffffffff6119b416565b1115610bdb57600080fd5b600c548690610bf490610bc48b8963ffffffff6119b416565b1115610bff57600080fd5b600c54610c1690610bc4878b63ffffffff6119b416565b600160a060020a038b166000908152600a602090815260408083203384529091529020555b6040805160a081018252600160a060020a03808d168083528c821660208085018281528587018f815260608088018d81523360808a01818152600b80546000908152600989528d90209b518c54908c16600160a060020a0319918216178d55965160018d018054918d16918916919091179055945160028c0155915160038b0155905160049099018054999098169890931697909717909555935486518f81529182018b90528187015294519294909391927f051080ef385336ad7dea56b4137c66aadefabec2339600af01bb610f5311c128929181900390910190a4600b805460010190555b5060019998505050505050505050565b60035460ff1681565b600054600160a060020a031681565b600754600090600160a060020a03163314610d6457600080fd5b60075460a060020a900460ff1615610d7b57600080fd5b600554610d8e908363ffffffff6119b416565b600555600160a060020a038316600090815260046020526040902054610dba908363ffffffff6119b416565b600160a060020a038416600081815260046020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000916000805160206122258339815191529181900360200190a350600192915050565b600d54600160a060020a031681565b60008054600160a060020a03163314610e6b57600080fd5b838214610e7757600080fd5b5060005b83811015610ebb57610eb3858583818110610e9257fe5b905060200201358484848181101515610ea757fe5b905060200201356119ca565b600101610e7b565b5050505050565b600754600160a060020a03163314610ed957600080fd5b80511515610ee657600080fd5b8051610ef990600290602084019061218c565b5050565b60096020526000908152604090208054600182015460028301546003840154600490940154600160a060020a0393841694928416939192911685565b336000908152600660209081526040808320600160a060020a038616845290915281205480831115610f8e57336000908152600660209081526040808320600160a060020a0388168452909152812055610fc3565b610f9e818463ffffffff611bb216565b336000908152600660209081526040808320600160a060020a03891684529091529020555b336000818152600660209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a3600191505b5092915050565b600054600160a060020a0316331461104257600080fd5b600c546040518291907f74dbbbe280ef27b79a8a0c449d5ae2ba7a31849103241d0f98df70bbc9d03e3790600090a3600c55565b600160a060020a031660009081526004602052604090205490565b600754600090600160a060020a031633146110ab57600080fd5b60075460a060020a900460ff16156110c257600080fd5b6007805474ff0000000000000000000000000000000000000000191660a060020a1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600754600160a060020a0316331461112c57600080fd5b8051151561113957600080fd5b8051610ef990600190602084019061218c565b600754600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156107d35780601f106107a8576101008083540402835291602001916107d3565b600054600160a060020a031633146111ca57600080fd5b600d805474ff0000000000000000000000000000000000000000191690556040517ffa3d1b499c58f8ecddeb2f9d98f943a28e5a89263178aa90831ef6fc5bc5578790600090a1565b6008546040805160e660020a6302966bcd02815233600482018190529151600093849384939092600160a060020a039092169163a59af3409160248082019260209290919082900301818887803b15801561126d57600080fd5b505af1158015611281573d6000803e3d6000fd5b505050506040513d602081101561129757600080fd5b505115156112a457600080fd5b6008546040805160e660020a6302966bcd028152600160a060020a03808a16600483015291518993929092169163a59af340916024808201926020929091908290030181600087803b1580156112f957600080fd5b505af115801561130d573d6000803e3d6000fd5b505050506040513d602081101561132357600080fd5b5051151561133057600080fd5b856000811161133e57600080fd5b600d5460a060020a900460ff16156113605761135a8888611bc4565b50611535565b336000818152600a60209081526040808320838052909152812054600d54909750909550600160a060020a031614156113ee57336000908152600460205260409020546113b3888763ffffffff6119b416565b11156113be57600080fd5b6113ce858863ffffffff6119b416565b336000908152600a60209081526040808320838052909152902055611456565b600c543360009081526004602052604090205490945061141885610bc48a8963ffffffff6119b416565b111561142357600080fd5b600c5461143a90610bc4878a63ffffffff6119b416565b336000908152600a602090815260408083208380529091529020555b6040805160a08101825233808252600160a060020a038b811660208085018281528587018e815260608088018d8152600060808a01818152600b80548352600988528c83209b518c54908b16600160a060020a0319918216178d55965160018d018054918c16918916919091179055945160028c0155915160038b0155905160049099018054999097169890931697909717909455925486518e81529182018b9052818701529451919490937f051080ef385336ad7dea56b4137c66aadefabec2339600af01bb610f5311c12892918290030190a4600b805460010190555b506001979650505050505050565b600c5481565b600b5481565b600854600160a060020a031681565b600d5460a060020a900460ff1681565b600054600160a060020a0316331461158557600080fd5b61158e81611c95565b151561159957600080fd5b50565b600054600160a060020a031633146115b357600080fd5b600d805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f0c2037480a3eb636da19eb0eb06de706135ac909da3e614e8197679786aa0b7090600090a1565b336000908152600660209081526040808320600160a060020a0386168452909152812054611636908363ffffffff6119b416565b336000818152600660209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260066020908152604080832093909416825291909152205490565b600054600160a060020a031633146116dd57600080fd5b610ef982826119ca565b600054600160a060020a031633146116fe57600080fd5b80600160a060020a038116151561171457600080fd5b600d54604051600160a060020a038085169216907f15d80a013f22151bc7246e3bc132e12828cde19de98870475e3fa7084015272190600090a350600d8054600160a060020a031916600160a060020a0392909216919091179055565b600754600160a060020a0316331461178857600080fd5b600160a060020a038116151561179d57600080fd5b600754604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360078054600160a060020a031916600160a060020a0392909216919091179055565b600080548190600160a060020a0316331461181357600080fd5b5060005b828110156110245761183a84848381811061182e57fe5b90506020020135611c95565b151561184557600080fd5b600101611817565b6000600160a060020a038316151561186457600080fd5b600160a060020a03841660009081526004602052604090205482111561188957600080fd5b600160a060020a03841660009081526006602090815260408083203384529091529020548211156118b957600080fd5b600160a060020a0384166000908152600460205260409020546118e2908363ffffffff611bb216565b600160a060020a038086166000908152600460205260408082209390935590851681522054611917908363ffffffff6119b416565b600160a060020a03808516600090815260046020908152604080832094909455918716815260068252828120338252909152205461195b908363ffffffff611bb216565b600160a060020a0380861660008181526006602090815260408083203384528252918290209490945580518681529051928716939192600080516020612225833981519152929181900390910190a35060019392505050565b6000828201838110156119c357fe5b9392505050565b60008281526009602052604081205481908190600160a060020a03168015156119f257600080fd5b6000868152600960205260409020805460048201546002830154600390930154600160a060020a039283169750911694509092501515611a8d57600160a060020a038085166000908152600a6020908152604080832093871683529290522054611a62908363ffffffff611bb216565b600160a060020a038086166000908152600a6020908152604080832093881683529290522055611b0a565b600086815260096020908152604080832060030154600160a060020a038089168552600a8452828520908816855290925290912054611ae39190611ad7908563ffffffff611bb216565b9063ffffffff611bb216565b600160a060020a038086166000908152600a60209081526040808320938816835292905220555b60008681526009602090815260409182902060010154825185815291820188905282518993600160a060020a0392831693928916927f3a202fd4817e60ce3e0fb658303787ceba257ea7b3c4cff9f2033345473479a4929081900390910190a4505050600092835250506009602052604081208054600160a060020a031990811682556001820180548216905560028201839055600382019290925560040180549091169055565b600082821115611bbe57fe5b50900390565b6000600160a060020a0383161515611bdb57600080fd5b33600090815260046020526040902054821115611bf757600080fd5b33600090815260046020526040902054611c17908363ffffffff611bb216565b3360009081526004602052604080822092909255600160a060020a03851681522054611c49908363ffffffff6119b416565b600160a060020a0384166000818152600460209081526040918290209390935580518581529051919233926000805160206122258339815191529281900390910190a350600192915050565b600081815260096020908152604080832054600854825160e660020a6302966bcd028152600160a060020a0392831660048201819052935186958695869586958695929491169263a59af340926024808201939182900301818887803b158015611cfe57600080fd5b505af1158015611d12573d6000803e3d6000fd5b505050506040513d6020811015611d2857600080fd5b50511515611d3557600080fd5b600088815260096020908152604080832060010154600854825160e660020a6302966bcd028152600160a060020a039283166004820181905293519395919092169363a59af34093602480850194929391928390030190829087803b158015611d9d57600080fd5b505af1158015611db1573d6000803e3d6000fd5b505050506040513d6020811015611dc757600080fd5b50511515611dd457600080fd5b60008981526009602052604081208054600182018054600484018054600286018054600388018054600160a060020a0319808a16909a55898716909755918990559790559485169055600160a060020a039283169b5082169950911696509094509250821515611fa957600160a060020a038716600090815260046020526040902054611e67908563ffffffff611bb216565b600160a060020a038089166000908152600460205260408082209390935590881681522054611e9c908563ffffffff6119b416565b600160a060020a03808816600090815260046020526040902091909155851615611f1d57600160a060020a03808816600090815260066020908152604080832093891683529290522054611ef6908563ffffffff611bb216565b600160a060020a038089166000908152600660209081526040808320938a16835292905220555b600160a060020a038088166000908152600a6020908152604080832093891683529290522054611f53908563ffffffff611bb216565b600160a060020a038089166000818152600a602090815260408083208b861684528252918290209490945580518881529051928a16939192600080516020612225833981519152929181900390910190a361217d565b611fe1611fbc858563ffffffff6119b416565b600160a060020a0389166000908152600460205260409020549063ffffffff611bb216565b600160a060020a038089166000908152600460205260408082209390935590881681522054612016908563ffffffff6119b416565b600160a060020a0380881660009081526004602052604080822093909355600d549091168152205461204e908463ffffffff6119b416565b600d54600160a060020a039081166000908152600460205260409020919091558516156120d857600160a060020a038088166000908152600660209081526040808320938916835292905220546120b1908490611ad7908763ffffffff611bb216565b600160a060020a038089166000908152600660209081526040808320938a16835292905220555b600160a060020a038088166000908152600a6020908152604080832093891683529290522054612114908490611ad7908763ffffffff611bb216565b600160a060020a038089166000818152600a602090815260408083208b861684528252918290209490945580518881529384018790528051928a169391927f98bc3fe7d138931a49691b623c256b8812f2a3d7f9b25ba7098c82538977a5d09281900390910190a35b50600198975050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106121cd57805160ff19168380011785556121fa565b828001600101855582156121fa579182015b828111156121fa5782518255916020019190600101906121df565b5061220692915061220a565b5090565b61094a91905b8082111561220657600081556001016122105600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058204d7294ad28cc39a6965f126dfb0315437c931f7cb17df35f81dcea3af322e47c0029000000000000000000000000522061b8dea1e4852a0cdc9ffeffe72ea82b313400000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000012000000000000000000000000e849977f05b004fb920cb1e4a64a47e7bcb4aee9000000000000000000000000522061b8dea1e4852a0cdc9ffeffe72ea82b3134000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000184861726443617053776974636846696e616c697a61626c65000000000000000000000000000000000000000000000000000000000000000000000000000000024846000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000522061b8dea1e4852a0cdc9ffeffe72ea82b313400000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000012000000000000000000000000e849977f05b004fb920cb1e4a64a47e7bcb4aee9000000000000000000000000522061b8dea1e4852a0cdc9ffeffe72ea82b3134000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000184861726443617053776974636846696e616c697a61626c65000000000000000000000000000000000000000000000000000000000000000000000000000000024846000000000000000000000000000000000000000000000000000000000000"
}