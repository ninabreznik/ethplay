{
  "address": "0x758d26cb421d1fefad0f85698718bc7b0a31eb6a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AvatarNetworkToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-14\n*/\n\npragma solidity ^0.4.11;\n\ncontract AvatarNetworkToken {\n\n    // Token name\n    string public name = \"Avatar_Network_Token\";\n    \n    // Token symbol\n    string public constant symbol = \"ATT\";\n    \n    // Token decimals\n    uint256 public constant decimals = 6;\n    \n    // INIT SUPPLY\n    uint256 public constant INITIAL_SUPPLY = 6000000000 * (10 ** uint256(decimals));\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // Totle supply of Avatar Network Token\n    uint256 public totalSupply = 0;\n    \n    // Is Running\n    bool public stopped = false;\n\n    address owner = 0x0;\n\n    modifier isOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n\n    modifier isRunning {\n        assert (!stopped);\n        _;\n    }\n\n    modifier validAddress {\n        assert(0x0 != msg.sender);\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n        totalSupply = INITIAL_SUPPLY;\n        balanceOf[msg.sender] = INITIAL_SUPPLY;\n        Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n    }\n\n    /**\n     * @dev Transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) isRunning validAddress public returns (bool success) {\n        // ATT token can't be burned\n        require(_to != address(0));\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) isRunning validAddress public returns (bool success) {\n        // ATT token can't be burned\n        require(_to != address(0));\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(allowance[_from][msg.sender] >= _value);\n        balanceOf[_to] += _value;\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) isRunning validAddress public returns (bool success) {\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n        return allowance[_owner][_spender];\n    }\n\n    function stop() isOwner public {\n        stopped = true;\n    }\n\n    function start() isOwner public {\n        stopped = false;\n    }\n\n    function setName(string _name) isOwner public {\n        name = _name;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
  "bytecode": "60c0604052601460808190527f4176617461725f4e6574776f726b5f546f6b656e00000000000000000000000060a090815261003e91600091906100d6565b50600060035560048054600160a860020a031916905534801561006057600080fd5b506004805461010060a860020a03191633610100810291909117909155661550f7dca700006003819055600082815260016020908152604080832084905580519384525191927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3610171565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011757805160ff1916838001178555610144565b82800160010185558215610144579182015b82811115610144578251825591602001919060010190610129565b50610150929150610154565b5090565b61016e91905b80821115610150576000815560010161015a565b90565b61085b806101806000396000f3006080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d457806307da68f51461015e578063095ea7b31461017557806318160ddd146101ad57806323b872dd146101d45780632ff2e9dc146101fe578063313ce5671461021357806370a082311461022857806375f12b211461024957806395d89b411461025e578063a9059cbb14610273578063be9a655514610297578063c47f0027146102ac578063dd62ed3e14610305575b600080fd5b3480156100e057600080fd5b506100e961032c565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012357818101518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016a57600080fd5b506101736103ba565b005b34801561018157600080fd5b50610199600160a060020a03600435166024356103e2565b604080519115158252519081900360200190f35b3480156101b957600080fd5b506101c261049b565b60408051918252519081900360200190f35b3480156101e057600080fd5b50610199600160a060020a03600435811690602435166044356104a1565b34801561020a57600080fd5b506101c26105d3565b34801561021f57600080fd5b506101c26105de565b34801561023457600080fd5b506101c2600160a060020a03600435166105e3565b34801561025557600080fd5b506101996105f5565b34801561026a57600080fd5b506100e96105fe565b34801561027f57600080fd5b50610199600160a060020a0360043516602435610635565b3480156102a357600080fd5b50610173610714565b3480156102b857600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101739436949293602493928401919081908401838280828437509497506107399650505050505050565b34801561031157600080fd5b506101c2600160a060020a0360043581169060243516610769565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103b25780601f10610387576101008083540402835291602001916103b2565b820191906000526020600020905b81548152906001019060200180831161039557829003601f168201915b505050505081565b6004546101009004600160a060020a031633146103d357fe5b6004805460ff19166001179055565b60045460009060ff16156103f257fe5b3315156103fb57fe5b8115806104295750336000908152600260209081526040808320600160a060020a0387168452909152902054155b151561043457600080fd5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60035481565b60045460009060ff16156104b157fe5b3315156104ba57fe5b600160a060020a03831615156104cf57600080fd5b600160a060020a0384166000908152600160205260409020548211156104f457600080fd5b600160a060020a038316600090815260016020526040902054828101101561051b57600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561054b57600080fd5b600160a060020a03808416600081815260016020908152604080832080548801905593881680835284832080548890039055600282528483203384528252918490208054879003905583518681529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b661550f7dca7000081565b600681565b60016020526000908152604090205481565b60045460ff1681565b60408051808201909152600381527f4154540000000000000000000000000000000000000000000000000000000000602082015281565b60045460009060ff161561064557fe5b33151561064e57fe5b600160a060020a038316151561066357600080fd5b3360009081526001602052604090205482111561067f57600080fd5b600160a060020a03831660009081526001602052604090205482810110156106a657600080fd5b33600081815260016020908152604080832080548790039055600160a060020a03871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600192915050565b6004546101009004600160a060020a0316331461072d57fe5b6004805460ff19169055565b6004546101009004600160a060020a0316331461075257fe5b8051610765906000906020840190610794565b5050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106107d557805160ff1916838001178555610802565b82800160010185558215610802579182015b828111156108025782518255916020019190600101906107e7565b5061080e929150610812565b5090565b61082c91905b8082111561080e5760008155600101610818565b905600a165627a7a7230582086d4a94b13196a8e6c38d820769906c4d8ccca2471b15aaf20ce0378d122b4a30029"
}