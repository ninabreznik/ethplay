{
  "address": "0x9742fa8cb51d294c8267ddfead8582e16f18e421",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "InvestmentToken",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-28\n*/\n\npragma solidity ^0.4.16;\n\n/* \n   High value, community controlled token.\n   */\n   contract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) constant returns (uint256);\n    function transfer(address to, uint256 value) returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n  }\n\n/*\n   ERC20 interface\n  see https://github.com/ethereum/EIPs/issues/20\n  */\n  contract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) returns (bool);\n    function approve(address spender, uint256 value) returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n  }\n\n/*  SafeMath - the lowest gas library\n  Math operations with safety checks that throw on error\n  */\n  library SafeMath {\n\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n      uint256 c = a * b;\n      assert(a == 0 || c / a == b);\n      return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\n      uint256 c = a / b;\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n      return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n      assert(b <= a);\n      return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n      uint256 c = a + b;\n      assert(c >= a);\n      return c;\n    }\n\n  }\n\n/*\nBasic token\n Basic version of StandardToken, with no allowances. \n */\n contract BasicToken is ERC20Basic {\n\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /*\n  Gets the balance of the specified address.\n   param _owner The address to query the the balance of. \n   return An uint256 representing the amount owned by the passed address.\n   */\n   function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/* Implementation of the basic standard token.\n  https://github.com/ethereum/EIPs/issues/20\n  */\n  contract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) allowed;\n\n  /*\n    Transfer tokens from one address to another\n    param _from address The address which you want to send tokens from\n    param _to address The address which you want to transfer to\n    param _value uint256 the amout of tokens to be transfered\n    */\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n      var _allowance = allowed[_from][msg.sender];\n\n      // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n      // require (_value <= _allowance);\n\n      balances[_to] = balances[_to].add(_value);\n      balances[_from] = balances[_from].sub(_value);\n      allowed[_from][msg.sender] = _allowance.sub(_value);\n      Transfer(_from, _to, _value);\n      return true;\n    }\n\n  /*\n  Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   param _spender The address which will spend the funds.\n   param _value The amount of Roman Lanskoj's tokens to be spent.\n   */\n   function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /*\n  Function to check the amount of tokens that an owner allowed to a spender.\n  param _owner address The address which owns the funds.\n  param _spender address The address which will spend the funds.\n  return A uint256 specifing the amount of tokens still available for the spender.\n  */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n\n/*\nThe Ownable contract has an owner address, and provides basic authorization control\n functions, this simplifies the implementation of \"user permissions\".\n */\n contract Ownable {\n\n  address public owner;\n\n\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n  /*\n  Throws if called by any account other than the owner.\n  */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /*\n  Allows the current owner to transfer control of the contract to a newOwner.\n  param newOwner The address to transfer ownership to.\n  */\n  function transferOwnership(address newOwner) onlyOwner {\n    require(newOwner != address(0));      \n    owner = newOwner;\n  }\n\n}\n\ncontract InvestmentToken is StandardToken, Ownable {\n  string public constant name = \"10MT Investment token\";\n  string public constant symbol = \"10MTI\";\n  uint public constant decimals = 10;\n  uint256 public initialSupply;\n\n  function MToken () { \n   totalSupply = 50000000 * 10 ** decimals;\n   balances[msg.sender] = totalSupply;\n   initialSupply = totalSupply; \n   Transfer(0, this, totalSupply);\n   Transfer(this, msg.sender, totalSupply);\n  }\n\n  function distribute10MTI(address[] addresses) onlyOwner {\n    // totalSupply = 50M\n    // distributing: 45% = 22.5M\n    // to 3431 shares (3376 in the list and 11 5x off the list): (22.5M * 10**10) / 3389 = 65578548528125\n    for (uint i = 0; i < addresses.length; i++) {\n      balances[owner] -= 65578548528125;\n      balances[addresses[i]] += 65578548528125;\n      Transfer(owner, addresses[i], 65578548528125);\n    }\n  }\n}",
  "bytecode": "60606040525b60038054600160a060020a03191633600160a060020a03161790555b5b6109a2806100316000396000f300606060405236156100cd5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166304d0c98a81146100d257806306fdde0314610123578063095ea7b3146101ae57806318160ddd146101e457806323b872dd14610209578063313ce56714610245578063378dc3dc1461026a57806345461e781461028f57806370a08231146102a45780638da5cb5b146102d557806395d89b4114610304578063a9059cbb1461038f578063dd62ed3e146103c5578063f2fde38b146103fc575b600080fd5b34156100dd57600080fd5b610121600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965061041d95505050505050565b005b341561012e57600080fd5b61013661050b565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101735780820151818401525b60200161015a565b50505050905090810190601f1680156101a05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101b957600080fd5b6101d0600160a060020a0360043516602435610542565b604051901515815260200160405180910390f35b34156101ef57600080fd5b6101f76105e9565b60405190815260200160405180910390f35b341561021457600080fd5b6101d0600160a060020a03600435811690602435166044356105ef565b604051901515815260200160405180910390f35b341561025057600080fd5b6101f76106f2565b60405190815260200160405180910390f35b341561027557600080fd5b6101f76106f7565b60405190815260200160405180910390f35b341561029a57600080fd5b6101216106fd565b005b34156102af57600080fd5b6101f7600160a060020a0360043516610788565b60405190815260200160405180910390f35b34156102e057600080fd5b6102e86107a7565b604051600160a060020a03909116815260200160405180910390f35b341561030f57600080fd5b6101366107b6565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101735780820151818401525b60200161015a565b50505050905090810190601f1680156101a05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561039a57600080fd5b6101d0600160a060020a03600435166024356107ed565b604051901515815260200160405180910390f35b34156103d057600080fd5b6101f7600160a060020a036004358116906024351661089b565b60405190815260200160405180910390f35b341561040757600080fd5b610121600160a060020a03600435166108c8565b005b60035460009033600160a060020a0390811691161461043b57600080fd5b5060005b815181101561050557600354600160a060020a0316600090815260016020819052604082208054653ba4b21703fc19019055653ba4b21703fd9184848151811061048557fe5b90602001906020020151600160a060020a031681526020810191909152604001600020805490910190558181815181106104bb57fe5b90602001906020020151600354600160a060020a039182169116600080516020610957833981519152653ba4b21703fd60405190815260200160405180910390a35b60010161043f565b5b5b5050565b60408051908101604052601581527f31304d5420496e766573746d656e7420746f6b656e0000000000000000000000602082015281565b60008115806105745750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561057f57600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b600160a060020a038084166000908152600260209081526040808320338516845282528083205493861683526001909152812054909190610636908463ffffffff61092516565b600160a060020a03808616600090815260016020526040808220939093559087168152205461066b908463ffffffff61093f16565b600160a060020a038616600090815260016020526040902055610694818463ffffffff61093f16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616916000805160206109578339815191529086905190815260200160405180910390a3600191505b509392505050565b600a81565b60045481565b6706f05b59d3b200006000818155600160a060020a0333811682526001602052604080832084905560048490553090911692600080516020610957833981519152915190815260200160405180910390a333600160a060020a031630600160a060020a031660008051602061095783398151915260005460405190815260200160405180910390a35b565b600160a060020a0381166000908152600160205260409020545b919050565b600354600160a060020a031681565b60408051908101604052600581527f31304d5449000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a033316600090815260016020526040812054610816908363ffffffff61093f16565b600160a060020a03338116600090815260016020526040808220939093559085168152205461084b908363ffffffff61092516565b600160a060020a0380851660008181526001602052604090819020939093559133909116906000805160206109578339815191529085905190815260200160405180910390a35060015b92915050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a039081169116146108e357600080fd5b600160a060020a03811615156108f857600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b60008282018381101561093457fe5b8091505b5092915050565b60008282111561094b57fe5b508082035b929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582011a0fee9db8fcc54c4dc93c371285464fc0d0a9d7653fd9b0e9e99e6cc8c0fbc0029"
}