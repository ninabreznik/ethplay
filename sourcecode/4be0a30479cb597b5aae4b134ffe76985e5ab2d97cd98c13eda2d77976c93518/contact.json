{
  "address": "0xccda5213d453388fb5fb43054bc261c8636b1e51",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "game",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-03\n*/\n\npragma solidity ^0.4.25;\n\n//2018.12.03\n\n/////設定管理者/////\n\ncontract owned {\n    address public owner;\n\n    constructor() public{\n        owner = msg.sender;\n    }\n    modifier onlyOwner{\n        require(msg.sender == owner);\n        _;\n    }\n    function transferOwnership(address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns(bool);\n}\n\n/////遊戲合約/////\n\ncontract game is owned{\n\n//初始設定\n    \n    bool public stop = false;\n    \n    address public tokenAddress_GIC = 0x340e85491c5F581360811d0cE5CC7476c72900Ba;\n    address public tokenAddress_Arina = 0xE6987CD613Dfda0995A95b3E6acBAbECecd41376;\n    \n    address public address_A = 0xcC22f3Bd8c684463c0Ed6659a001AA62e0a7A146;\n    address public address_B = 0xb0D63Fcfb2101C8a1B9b2f0Ff96A13CfEA1A2E65;\n\n    mapping (address => uint) readyTime;\n    uint public airdrop_GIC = 25*10**18 ;  //酷紅幣為18位小數\n    uint public airdrop_Arina = 500*10**8 ;  //Arina幣為6位小數\n    \n    uint public total_airdrop_GIC = 21000000*10**18; //酷紅幣發送上限為2100萬顆 (小數點18位)\n    uint public total_airdrop_Arina = 84000000*10**8; //Arina發送上限為8400萬顆 (小數點6位)\n    \n    uint public sent_times = 0; //發送次數(初始為零)\n    uint public sent_limit = total_airdrop_GIC/airdrop_GIC; //發送幣上限次數\n\n    uint public cooldown = 600;  //////冷卻時間(秒)600秒\n    uint24 public Probability = 1000000;  /////中獎機率1/1000000\n    \n    uint random_source = uint(keccak256(msg.sender, block.difficulty, now));\n    \n    event Play_game(address indexed from, uint8 player, uint8 comp, uint8 record);\n    //紀錄遊戲結果\n    event Random(address indexed from, uint24 random_player, uint24 random_lottery);\n    //記錄兩個亂數\n    \n\n//管理權限\n    \n\n    function stop_game()onlyOwner public{\n        stop = true ;\n    }\n    \n    function start_game()onlyOwner public{\n        stop = false ;\n    }\n\n    function set_address_GIC(address new_address)onlyOwner public{\n        tokenAddress_GIC = new_address;\n    }\n    \n    function set_address_Arina(address new_address)onlyOwner public{\n        tokenAddress_Arina = new_address;\n    }\n    \n    function set_address_A(address new_address)onlyOwner public{\n        address_A = new_address;\n    }\n    \n    function set_address_B(address new_address)onlyOwner public{\n        address_B = new_address;\n    }\n\n    function set_cooldown(uint new_cooldown)onlyOwner public{\n        cooldown = new_cooldown;\n    }\n\n    function withdraw_GIC(uint _amount)onlyOwner public{\n        require(ERC20Basic(tokenAddress_GIC).transfer(owner, _amount*10**18));\n    }\n    \n    function withdraw_Arina(uint _amount)onlyOwner public{\n        require(ERC20Basic(tokenAddress_Arina).transfer(owner, _amount*10**8));\n    }\n    \n    function withdraw_eth()onlyOwner public{\n        owner.transfer(address(this).balance);\n    }\n\n//來猜拳!!!\n    function () payable public{\n        if (msg.value == 0){\n        play_game(0);\n        }\n    }\n\n    function play_paper()public{\n        play_game(0);\n    }\n\n    function play_scissors()public{\n        play_game(1);\n    }\n\n    function play_stone()public{\n        play_game(2);\n    }\n\n    function play_game(uint8 player) internal{\n        require(stop == false);\n        \n        require(readyTime[msg.sender] < block.timestamp);\n        require(player <= 2);\n        \n        require(sent_times <= sent_limit);\n        //檢查遊戲次數未小於限制次數\n        \n        random_source += 1;\n\n        uint8 comp=uint8(uint(keccak256(random_source, block.difficulty, block.timestamp))%3);\n        uint8 result = compare(player, comp);\n        \n\n        if (result == 2){ //玩家贏\n            sent_times +=1 ;\n            require(ERC20Basic(tokenAddress_GIC).transfer(msg.sender, airdrop_GIC));\n            \n            (uint _player_amount,uint addressA_amount, uint addressB_amount)\n             = Arina_amount();\n             \n            require(ERC20Basic(tokenAddress_Arina).transfer(msg.sender, _player_amount));\n            require(ERC20Basic(tokenAddress_Arina).transfer(address_A , addressA_amount));\n            require(ERC20Basic(tokenAddress_Arina).transfer(address_B, addressB_amount));\n        }\n        \n        else if(result == 1){ //平手\n        }\n        \n        else if(result == 0){ //玩家輸\n            readyTime[msg.sender] = block.timestamp + cooldown;\n        }\n        \n        else revert();\n        \n        uint bal = ERC20Basic(tokenAddress_GIC).balanceOf(this) + ERC20Basic(tokenAddress_Arina).balanceOf(this);\n        \n        uint24 random_player = uint24(keccak256(msg.sender, now, random_source))%Probability;\n        uint24 random_lottery = uint24(keccak256(random_source, block.difficulty, bal))%Probability;\n        \n        emit Play_game(msg.sender, player, comp, result);\n        emit Random(msg.sender, random_player, random_lottery);\n        \n        //0-999999的亂數\n        \n        if (random_player == random_lottery){\n            uint8 _level = level_judgment(msg.sender);\n            uint _eth = eth_amount_judgment(_level);\n            if (address(this).balance >= _eth){\n                msg.sender.transfer(_eth);\n            }\n            else{\n                msg.sender.transfer(address(this).balance);\n            }\n            \n            //中獎的話傳送eth\n        }\n        \n    }\n\n//判斷用function\n\n    function compare(uint8 _player,uint _comp) pure internal returns(uint8 result){\n        // input     0 => 布   1 => 剪刀   2 => 石頭\n        // output    0 => 輸   1 => 平手   2 => 贏\n        uint8 _result;\n\n        if (_player==0 && _comp==2){  //布贏石頭 (玩家贏)\n            _result = 2;\n        }\n\n        else if(_player==2 && _comp==0){ //石頭輸布(玩家輸)\n            _result = 0;\n        }\n\n        else if(_player == _comp){ //平手\n            _result = 1;\n        }\n\n        else{\n            if (_player > _comp){ //玩家贏 (玩家贏)\n                _result = 2;\n            }\n            else{ //玩家輸\n                _result = 0;\n            }\n        }\n        return _result;\n    }\n\n\n    function Arina_judgment() view public returns(uint _amount){\n        uint Arina_totBalance = ERC20Basic(tokenAddress_Arina).balanceOf(this);\n        if (Arina_totBalance >= total_airdrop_Arina/2){\n            return airdrop_Arina;\n        }\n        else if(total_airdrop_Arina/2 > Arina_totBalance\n        && Arina_totBalance >= total_airdrop_Arina/4){\n            return airdrop_Arina/2;\n        }\n        else if(total_airdrop_Arina/4 > Arina_totBalance\n        && Arina_totBalance >= total_airdrop_Arina/8){\n            return airdrop_Arina/4;\n        }\n        else if(total_airdrop_Arina/8 > Arina_totBalance\n        && Arina_totBalance >= total_airdrop_Arina/16){\n            return airdrop_Arina/8;\n        }\n        else if(total_airdrop_Arina/16 > Arina_totBalance\n        && Arina_totBalance >= total_airdrop_Arina/32){\n            return airdrop_Arina/16;\n        }\n        else if(total_airdrop_Arina/32 > Arina_totBalance\n        && Arina_totBalance >= total_airdrop_Arina/64){\n            return airdrop_Arina/32;\n        }\n        else if(total_airdrop_Arina/64 > Arina_totBalance\n        && Arina_totBalance >= total_airdrop_Arina/128){\n            return airdrop_Arina/64;\n        }\n        else if(total_airdrop_Arina/128 > Arina_totBalance\n        && Arina_totBalance >= total_airdrop_Arina/256){\n            return airdrop_Arina/128;\n        }\n        else if(total_airdrop_Arina/256 > Arina_totBalance\n        && Arina_totBalance >= total_airdrop_Arina/512){\n            return airdrop_Arina/256;\n        }\n        else if(total_airdrop_Arina/512 > Arina_totBalance){\n            return airdrop_Arina/512;\n        }\n        else revert();\n    }\n    \n    function level_judgment(address _address) view public returns(uint8 _level){\n        uint GIC_balance = ERC20Basic(tokenAddress_GIC).balanceOf(_address);\n        if (GIC_balance <= 1000*10**18){\n            return 1;\n        }\n        else if(1000*10**18 < GIC_balance && GIC_balance <=10000*10**18){\n            return 2;\n        }\n        else if(10000*10**18 < GIC_balance && GIC_balance <=100000*10**18){\n            return 3;\n        }\n        else if(100000*10**18 < GIC_balance && GIC_balance <=500000*10**18){\n            return 4;\n        }\n        else if(500000*10**18 < GIC_balance){\n            return 5;\n        }\n        else revert();\n    }\n    \n    function eth_amount_judgment(uint8 _level) pure public returns(uint _eth){\n        if (_level == 1){\n            return 1 ether;\n        }\n        else if (_level == 2){\n            return 3 ether;\n        }\n        else if (_level == 3){\n            return 5 ether;\n        }\n        else if (_level == 4){\n            return 10 ether;\n        }\n        else if (_level == 5){\n            return 20 ether;\n        }\n        else revert();\n    }\n    \n    function Arina_amount_judgment(uint8 _level, uint _Arina) \n    pure public returns(uint _player, uint _addressA, uint _addressB){\n        if (_level == 1){\n            return (_Arina*5/10, _Arina*1/10, _Arina*4/10);\n        }\n        else if (_level == 2){\n            return (_Arina*6/10, _Arina*1/10, _Arina*3/10);\n        }\n        else if (_level == 3){\n            return (_Arina*7/10, _Arina*1/10, _Arina*2/10);\n        }\n        else if (_level == 4){\n            return (_Arina*8/10, _Arina*1/10, _Arina*1/10);\n        }\n        else if (_level == 5){\n            return (_Arina*9/10, _Arina*1/10, 0);\n        }\n        else revert();\n    }\n    \n    function Arina_amount() view public returns(uint _player, uint _addressA, uint _addressB){\n        uint8 _level = level_judgment(msg.sender);\n        uint _amount = Arina_judgment();\n        return Arina_amount_judgment(_level, _amount);\n    }\n    \n    function Arina_balance() view public returns(uint _balance){\n        return ERC20Basic(tokenAddress_Arina).balanceOf(this);\n    }\n\n\n//查詢\n    \n    function view_readyTime(address _address) view public returns(uint _readyTime){\n        if (block.timestamp >= readyTime[_address]){\n            return 0 ;\n        }\n        else{\n            return readyTime[_address] - block.timestamp ;\n        }\n    }\n    function self_readyTime() view public returns(uint _readyTime){\n        return view_readyTime(msg.sender);\n    }\n\n}",
  "bytecode": "608060408190526000805460018054600160a060020a031990811673340e85491c5f581360811d0ce5cc7476c72900ba1790915560028054821673e6987cd613dfda0995a95b3e6acbabececd4137617905560038054821673cc22f3bd8c684463c0ed6659a001aa62e0a7a1461790556004805490911673b0d63fcfb2101c8a1b9b2f0ff96a13cfea1a2e6517905568015af1d78b58c40000600655640ba43b74006007556a115eec47f6cf7e35000000600855661dd7c1681d0000600955600a829055620cd140600b55610258600c55600d805462ffffff1916620f42401790556c01000000000000000000000000339081028452446094524260b4526054909320600e55600160a860020a031916909117815561168590819061012490396000f3006080604052600436106101c15763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630210a98d81146101d457806307da68f5146102055780630ef762431461022e578063244967b31461024657806327fdf9c01461025b5780633327057c146102825780634deb4d781461029757806353bc7399146102ac578063540b42ea146102c157806356de9219146102d65780635784a902146103095780637031b122146103365780637591783b1461035757806376fcfb2a14610378578063787a08a61461039957806379abb2f5146103ae5780637c8a9a49146103c35780637d4e1eb0146103d85780638da5cb5b146103ed57806392b388b21461040257806393e90d8c1461041757806399878d5b1461042c5780639b88ffe314610441578063a521d45314610456578063b93371771461046b578063c14437cd14610480578063c9a6a90b146104b7578063d6798645146104d8578063d6f8560d146104f0578063d8174ba014610505578063dfefa76e1461051a578063e44171b11461053b578063e4e790b814610559578063ef9e7f9514610571578063f2fde38b14610586578063f9500927146105a7575b3415156101d2576101d260006105c2565b005b3480156101e057600080fd5b506101e9610be7565b60408051600160a060020a039092168252519081900360200190f35b34801561021157600080fd5b5061021a610bf6565b604080519115158252519081900360200190f35b34801561023a57600080fd5b506101d2600435610c17565b34801561025257600080fd5b506101d2610ccd565b34801561026757600080fd5b50610270610d04565b60408051918252519081900360200190f35b34801561028e57600080fd5b50610270610d0a565b3480156102a357600080fd5b506101e9610f2c565b3480156102b857600080fd5b506101d2610f3b565b3480156102cd57600080fd5b50610270610f47565b3480156102e257600080fd5b506102eb610f4d565b60408051938452602084019290925282820152519081900360600190f35b34801561031557600080fd5b5061031e610f81565b6040805162ffffff9092168252519081900360200190f35b34801561034257600080fd5b506101d2600160a060020a0360043516610f8c565b34801561036357600080fd5b506101d2600160a060020a0360043516610fd2565b34801561038457600080fd5b50610270600160a060020a0360043516611018565b3480156103a557600080fd5b50610270611062565b3480156103ba57600080fd5b506101d2611068565b3480156103cf57600080fd5b506101e9611072565b3480156103e457600080fd5b506101d2611081565b3480156103f957600080fd5b506101e96110cf565b34801561040e57600080fd5b506102706110de565b34801561042357600080fd5b506102706110e4565b34801561043857600080fd5b506101d26110ea565b34801561044d57600080fd5b506102706110f4565b34801561046257600080fd5b506101e96110fa565b34801561047757600080fd5b50610270611109565b34801561048c57600080fd5b506104a1600160a060020a036004351661110f565b6040805160ff9092168252519081900360200190f35b3480156104c357600080fd5b506101d2600160a060020a0360043516611258565b3480156104e457600080fd5b506101d260043561129e565b3480156104fc57600080fd5b506101d26112ba565b34801561051157600080fd5b5061027061130c565b34801561052657600080fd5b506101d2600160a060020a036004351661138c565b34801561054757600080fd5b506102eb60ff600435166024356113d2565b34801561056557600080fd5b506101d2600435611489565b34801561057d57600080fd5b50610270611509565b34801561059257600080fd5b506101d2600160a060020a0360043516611519565b3480156105b357600080fd5b5061027060ff6004351661155f565b6000805481908190819081908190819081908190819074010000000000000000000000000000000000000000900460ff16156105fd57600080fd5b33600090815260056020526040902054421161061857600080fd5b600260ff8c16111561062957600080fd5b600b54600a54111561063a57600080fd5b600e805460010190819055604080519182524460208301524282820152519081900360600190206003900699506106748b8b60ff166115e9565b98508860ff16600214156108e657600a80546001908101909155546006546040805160e060020a63a9059cbb028152336004820152602481019290925251600160a060020a039092169163a9059cbb916044808201926020929091908290030181600087803b1580156106e657600080fd5b505af11580156106fa573d6000803e3d6000fd5b505050506040513d602081101561071057600080fd5b5051151561071d57600080fd5b610725610f4d565b6002546040805160e060020a63a9059cbb028152336004820152602481018690529051949c50929a50909850600160a060020a03169163a9059cbb916044808201926020929091908290030181600087803b15801561078357600080fd5b505af1158015610797573d6000803e3d6000fd5b505050506040513d60208110156107ad57600080fd5b505115156107ba57600080fd5b6002546003546040805160e060020a63a9059cbb028152600160a060020a039283166004820152602481018b90529051919092169163a9059cbb9160448083019260209291908290030181600087803b15801561081657600080fd5b505af115801561082a573d6000803e3d6000fd5b505050506040513d602081101561084057600080fd5b5051151561084d57600080fd5b600254600480546040805160e060020a63a9059cbb028152600160a060020a0392831693810193909352602483018a90525192169163a9059cbb916044808201926020929091908290030181600087803b1580156108aa57600080fd5b505af11580156108be573d6000803e3d6000fd5b505050506040513d60208110156108d457600080fd5b505115156108e157600080fd5b610923565b8860ff16600114156108f757610923565b60ff8916151561091e57600c54336000908152600560205260409020429091019055610923565b600080fd5b6002546040805160e060020a6370a082310281523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b15801561097357600080fd5b505af1158015610987573d6000803e3d6000fd5b505050506040513d602081101561099d57600080fd5b50516001546040805160e060020a6370a082310281523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b1580156109ef57600080fd5b505af1158015610a03573d6000803e3d6000fd5b505050506040513d6020811015610a1957600080fd5b5051600d54600e54604080516c010000000000000000000000003302815242601482015260348101929092525190819003605401902092909101965062ffffff9081169116811515610a6757fe5b600d54600e54604080519182524460208301528181018a90525190819003606001902092909106955062ffffff9081169116811515610aa257fe5b06925033600160a060020a03167fefd2b05dcfbbb780a0fbbcdfc4862c4abce7b67e08b8634402f0b8b11189c02e8c8c8c604051808460ff1660ff1681526020018360ff1660ff1681526020018260ff1660ff168152602001935050505060405180910390a26040805162ffffff808716825285166020820152815133927f23237813eb7f4a38c33f47472eebb58e3b5ea62e0169d8c8f15c4c9a7e86c929928290030190a28262ffffff168462ffffff161415610bda57610b633361110f565b9150610b6e8261155f565b905030318111610bab57604051339082156108fc029083906000818181858888f19350505050158015610ba5573d6000803e3d6000fd5b50610bda565b6040513390303180156108fc02916000818181858888f19350505050158015610bd8573d6000803e3d6000fd5b505b5050505050505050505050565b600354600160a060020a031681565b60005474010000000000000000000000000000000000000000900460ff1681565b600054600160a060020a03163314610c2e57600080fd5b600254600080546040805160e060020a63a9059cbb028152600160a060020a0392831660048201526305f5e100860260248201529051919093169263a9059cbb9260448083019360209390929083900390910190829087803b158015610c9357600080fd5b505af1158015610ca7573d6000803e3d6000fd5b505050506040513d6020811015610cbd57600080fd5b50511515610cca57600080fd5b50565b600054600160a060020a03163314610ce457600080fd5b6000805474ff000000000000000000000000000000000000000019169055565b60075481565b6002546040805160e060020a6370a0823102815230600482015290516000928392600160a060020a03909116916370a082319160248082019260209290919082900301818787803b158015610d5e57600080fd5b505af1158015610d72573d6000803e3d6000fd5b505050506040513d6020811015610d8857600080fd5b5051600954909150600290048110610da4576007549150610f28565b600954819060029004118015610dc05750600954600490048110155b15610dd4576007546002905b049150610f28565b600954819060049004118015610df05750600954600890048110155b15610e0057600754600490610dcc565b600954819060089004118015610e1c5750600954601090048110155b15610e2c57600754600890610dcc565b600954819060109004118015610e485750600954602090048110155b15610e5857600754601090610dcc565b600954819060209004118015610e745750600954604090048110155b15610e8457600754602090610dcc565b600954819060409004118015610ea05750600954608090048110155b15610eb057600754604090610dcc565b600954819060809004118015610ecd575060095461010090048110155b15610edd57600754608090610dcc565b60095481906101009004118015610efb575060095461020090048110155b15610f0c5760075461010090610dcc565b60095481906102009004111561091e5760075461020090610dcc565b5090565b600454600160a060020a031681565b610f4560026105c2565b565b600a5481565b6000806000806000610f5e3361110f565b9150610f68610d0a565b9050610f7482826113d2565b9450945094505050909192565b600d5462ffffff1681565b600054600160a060020a03163314610fa357600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a03163314610fe957600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038116600090815260056020526040812054421061103f5750600061105d565b50600160a060020a0381166000908152600560205260409020544290035b919050565b600c5481565b610f4560006105c2565b600154600160a060020a031681565b600054600160a060020a0316331461109857600080fd5b6000805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055565b600054600160a060020a031681565b60085481565b600b5481565b610f4560016105c2565b60095481565b600254600160a060020a031681565b60065481565b6001546040805160e060020a6370a08231028152600160a060020a0384811660048301529151600093849316916370a0823191602480830192602092919082900301818787803b15801561116257600080fd5b505af1158015611176573d6000803e3d6000fd5b505050506040513d602081101561118c57600080fd5b50519050683635c9adc5dea0000081116111a95760019150611252565b80683635c9adc5dea000001080156111cb575069021e19e0c9bab24000008111155b156111d95760029150611252565b8069021e19e0c9bab24000001080156111fc575069152d02c7e14af68000008111155b1561120a5760039150611252565b8069152d02c7e14af680000010801561122d57506969e10de76676d08000008111155b1561123b5760049150611252565b806969e10de76676d0800000101561091e57600591505b50919050565b600054600160a060020a0316331461126f57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031633146112b557600080fd5b600c55565b600054600160a060020a031633146112d157600080fd5b60008054604051600160a060020a0390911691303180156108fc02929091818181858888f19350505050158015610cca573d6000803e3d6000fd5b6002546040805160e060020a6370a082310281523060048201529051600092600160a060020a0316916370a0823191602480830192602092919082900301818787803b15801561135b57600080fd5b505af115801561136f573d6000803e3d6000fd5b505050506040513d602081101561138557600080fd5b5051905090565b600054600160a060020a031633146113a357600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008060008460ff166001141561140157600a6005850204600a8504600a600487025b04925092509250611482565b8460ff166002141561142357600a6006850204600a8504600a600387026113f5565b8460ff166003141561144557600a6007850204600a8504600a600287026113f5565b8460ff166004141561146457600a6008850204600a8504600a866113f5565b8460ff166005141561091e575050600a600983028190049150820460005b9250925092565b600054600160a060020a031633146114a057600080fd5b600154600080546040805160e060020a63a9059cbb028152600160a060020a039283166004820152670de0b6b3a7640000860260248201529051919093169263a9059cbb9260448083019360209390929083900390910190829087803b158015610c9357600080fd5b600061151433611018565b905090565b600054600160a060020a0316331461153057600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008160ff166001141561157c5750670de0b6b3a764000061105d565b8160ff166002141561159757506729a2241af62c000061105d565b8160ff16600314156115b25750674563918244f4000061105d565b8160ff16600414156115cd5750678ac7230489e8000061105d565b8160ff166005141561091e57506801158e460913d0000061105d565b60008060ff84161580156115fd5750826002145b1561160a57506002611652565b8360ff16600214801561161b575082155b1561162857506000611652565b828460ff16141561163b57506001611652565b828460ff16111561164e57506002611652565b5060005b93925050505600a165627a7a723058208b8dec8e88217b38c7a1454f8e9980b6f3195d9cc7f5b17ec8c61e8ef94e177a0029"
}