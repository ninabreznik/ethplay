{
  "address": "0x8d5a69dc82a47594881256f2eef81770274fa30f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Natcoin",
  "contractName": "NatCoin",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "0",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-04\n*/\n\npragma solidity ^0.4.11;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n  uint256 _totalSupply;\n  function totalSupply() constant returns (uint256 totalSupply);\n  function balanceOf(address _owner) constant returns (uint balance);\n  function transfer(address _to, uint _value) returns (bool success);\n  function transferFrom(address _from, address _to, uint _value) returns (bool success);\n  function approve(address _spender, uint _value) returns (bool success);\n  function allowance(address _owner, address _spender) constant returns (uint remaining);\n  event Transfer(address indexed _from, address indexed _to, uint _value);\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20 {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  // Owner of account approves the transfer of an amount to another account\n  mapping(address => mapping (address => uint256)) allowed;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool success) {\n    if (balances[msg.sender] >= _value\n    && _value > 0\n    && balances[_to] + _value > balances[_to]) {\n      balances[msg.sender] -= _value;\n      balances[_to] += _value;\n      Transfer(msg.sender, _to, _value);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Send _value amount of tokens from address _from to address _to\n  // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n  // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n  // fees in sub-currencies; the command should fail unless the _from account has\n  // deliberately authorized the sender of the message via some mechanism; we propose\n  // these standardized APIs for approval:\n  function transferFrom(address _from,address _to, uint256 _amount) returns (bool success) {\n    if (balances[_from] >= _amount\n    && allowed[_from][msg.sender] >= _amount\n    && _amount > 0\n    && balances[_to] + _amount > balances[_to]) {\n      balances[_from] -= _amount;\n      allowed[_from][msg.sender] -= _amount;\n      balances[_to] += _amount;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n  function totalSupply() constant returns (uint256 totalSupply) {\n    totalSupply = _totalSupply;\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool success) {\n    allowed[msg.sender][_spender] = _value;\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  // Functions with this modifier can only be executed by the owner\n\n  modifier onlyOwner() {\n    if (msg.sender != owner) {\n      revert();\n    }\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will recieve the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n    _totalSupply = _totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\ncontract NatCoin is MintableToken {\n  string public constant name = \"NATCOIN\";\n  string public constant symbol = \"NTC\";\n  uint256 public constant decimals = 18;\n}",
  "bytecode": "60606040526004805460a060020a60ff02191690555b60048054600160a060020a03191633600160a060020a03161790555b5b610890806100416000396000f300606060405236156100b45763ffffffff60e060020a60003504166305d2035b81146100b657806306fdde03146100da578063095ea7b31461016a57806318160ddd1461019d57806323b872dd146101bf578063313ce567146101f857806340c10f191461021a57806370a082311461024d5780637d64bcb41461027b5780638da5cb5b1461029f57806395d89b41146102cb578063a9059cbb1461035b578063dd62ed3e1461038e578063f2fde38b146103c2575bfe5b34156100be57fe5b6100c66103e0565b604080519115158252519081900360200190f35b34156100e257fe5b6100ea6103f0565b604080516020808252835181830152835191928392908301918501908083838215610130575b80518252602083111561013057601f199092019160209182019101610110565b505050905090810190601f16801561015c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017257fe5b6100c6600160a060020a0360043516602435610414565b604080519115158252519081900360200190f35b34156101a557fe5b6101ad610445565b60408051918252519081900360200190f35b34156101c757fe5b6100c6600160a060020a036004358116906024351660443561044c565b604080519115158252519081900360200190f35b341561020057fe5b6101ad61054f565b60408051918252519081900360200190f35b341561022257fe5b6100c6600160a060020a0360043516602435610554565b604080519115158252519081900360200190f35b341561025557fe5b6101ad600160a060020a0360043516610627565b60408051918252519081900360200190f35b341561028357fe5b6100c6610646565b604080519115158252519081900360200190f35b34156102a757fe5b6102af6106ac565b60408051600160a060020a039092168252519081900360200190f35b34156102d357fe5b6100ea6106bb565b604080516020808252835181830152835191928392908301918501908083838215610130575b80518252602083111561013057601f199092019160209182019101610110565b505050905090810190601f16801561015c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561036357fe5b6100c6600160a060020a03600435166024356106db565b604080519115158252519081900360200190f35b341561039657fe5b6101ad600160a060020a036004358116906024351661079a565b60408051918252519081900360200190f35b34156103ca57fe5b6103de600160a060020a03600435166107c7565b005b60045460a060020a900460ff1681565b604080518082019091526007815260c960020a662720aa21a7a4a702602082015281565b600160a060020a03338116600090815260036020908152604080832093861683529290522081905560015b92915050565b6000545b90565b600160a060020a038084166000908152600360209081526040808320338516845282528083205493861683526001909152812054909190610493908463ffffffff61081316565b600160a060020a0380861660009081526001602052604080822093909355908716815220546104c8908463ffffffff61082d16565b600160a060020a0386166000908152600160205260409020556104f1818463ffffffff61082d16565b600160a060020a03808716600081815260036020908152604080832033861684528252918290209490945580518781529051928816939192600080516020610845833981519152929181900390910190a3600191505b509392505050565b601281565b60045460009033600160a060020a039081169116146105735760006000fd5b60045460a060020a900460ff161561058b5760006000fd5b60005461059e908363ffffffff61081316565b6000908155600160a060020a0384168152600160205260409020546105c9908363ffffffff61081316565b600160a060020a038416600081815260016020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a25060015b5b5b92915050565b600160a060020a0381166000908152600160205260409020545b919050565b60045460009033600160a060020a039081169116146106655760006000fd5b6004805460a060020a60ff02191660a060020a1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a15060015b5b90565b600454600160a060020a031681565b604080518082019091526003815260e860020a624e544302602082015281565b600160a060020a0333166000908152600160205260408120548290108015906107045750600082115b80156107295750600160a060020a038316600090815260016020526040902054828101115b1561078b57600160a060020a0333811660008181526001602090815260408083208054889003905593871680835291849020805487019055835186815293519193600080516020610845833981519152929081900390910190a350600161043f565b50600061043f565b5b92915050565b600160a060020a038083166000908152600360209081526040808320938516835292905220545b92915050565b60045433600160a060020a039081169116146107e35760006000fd5b600160a060020a0381161561080e5760048054600160a060020a031916600160a060020a0383161790555b5b5b50565b60008282018381101561082257fe5b8091505b5092915050565b60008282111561083957fe5b508082035b929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058203de204ea5eb943ffceed674dba40e5aa3a1d583f22d1cee0bf338663c3b7202d0029"
}