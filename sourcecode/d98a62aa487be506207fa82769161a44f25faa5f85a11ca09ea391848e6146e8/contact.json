{
  "address": "0xf2a25ea7b8c600a56bc4bf46a70390aea1dc0315",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "InterestOnlyWithdrawingSafe",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-18\n*/\n\npragma solidity ^0.5.2;\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract CERC20NoBorrowInterface {\n    function mint(uint mintAmount) external returns (uint);\n    address public underlying;\n}\n\ncontract CEtherNoBorrowInterface {\n    function mint() external payable;\n}\n\ncontract CTokenNoBorrowInterface {\n    function redeem(uint redeemTokens) external returns (uint);\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n    function balanceOfUnderlying(address owner) external returns (uint);\n    function exchangeRateStored() public view returns (uint);\n}\n\ncontract UniswapExchangeInterface {\n    // Address of ERC20 token sold on this exchange\n    function tokenAddress() external view returns (address token);\n    // Address of Uniswap Factory\n    function factoryAddress() external view returns (address factory);\n    // Provide Liquidity\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\n    // Get Prices\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\n    // Trade ETH to ERC20\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\n    // Trade ERC20 to ETH\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_tokens, uint256 deadline, address recipient) external returns (uint256  eth_bought);\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\n    // Trade ERC20 to ERC20\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\n    // Trade ERC20 to Custom Pool\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\n    // ERC20 comaptibility for liquidity tokens\n    bytes32 public name;\n    bytes32 public symbol;\n    uint256 public decimals;\n    function transfer(address _to, uint256 _value) external returns (bool);\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\n    function approve(address _spender, uint256 _value) external returns (bool);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256);\n    // Never use\n    function setup(address token_addr) external;\n}\n\ncontract UniswapFactoryInterface {\n    // Public Variables\n    address public exchangeTemplate;\n    uint256 public tokenCount;\n    // Create Exchange\n    function createExchange(address token) external returns (address exchange);\n    // Get Exchange and Token Info\n    function getExchange(address token) external view returns (address exchange);\n    function getToken(address exchange) external view returns (address token);\n    function getTokenWithId(uint256 tokenId) external view returns (address token);\n    // Never use\n    function initializeFactory(address template) external;\n}\n\ncontract MyEIP20NonStandardInterface {\n    function transfer(address _to, uint256 _value) public;\n    function transferFrom(address _from, address _to, uint256 _value) public;\n}\n\ncontract MySafeToken {\n    function doTransferIn(address asset, address from, uint amount) internal {\n        MyEIP20NonStandardInterface token = MyEIP20NonStandardInterface(asset);\n        bool result;\n        token.transferFrom(from, address(this), amount);\n        assembly {\n            switch returndatasize()\n            case 0 {\n                result := not(0)\n            }\n            case 32 {\n                returndatacopy(0, 0, 32)\n                result := mload(0)\n            }\n            default {\n                revert(0, 0)\n            }\n        }\n        require(result);\n    }\n\n    function doTransferOut(address asset, address to, uint amount) internal {\n        MyEIP20NonStandardInterface token = MyEIP20NonStandardInterface(asset);\n        bool result;\n        token.transfer(to, amount);\n        assembly {\n            switch returndatasize()\n            case 0 {\n                result := not(0)\n            }\n            case 32 {\n                returndatacopy(0, 0, 32)\n                result := mload(0)\n            }\n            default {\n                revert(0, 0)\n            }\n        }\n        require(result);\n    }\n}\n\ncontract ProxyData {\n    address internal proxied;\n}\n\ncontract FundHeader {\n    address constant internal cEth = address(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);\n    UniswapFactoryInterface constant internal uniswapFactory = UniswapFactoryInterface(0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95);\n}\n\ncontract FundData is ProxyData, FundHeader {\n    address public collateralOwner;\n    address public interestWithdrawer;\n    mapping(address => uint) public initialDepositCollateral;\n    address[] public markets;\n}\n\ncontract InterestOnlyWithdrawingSafe is FundData, MySafeToken {\n\n    // deposits\n    function depositEth() external payable {\n        require(msg.sender == collateralOwner && msg.value > 0);\n        CEtherNoBorrowInterface(cEth).mint.value(msg.value)();\n        initialDepositCollateral[cEth] = initialDepositCollateral[cEth] + msg.value;\n    }\n    function depositToken(CERC20NoBorrowInterface cErc20Depositing, uint amount) external payable {\n        require(msg.sender == collateralOwner && amount > 0);\n        doTransferIn(cErc20Depositing.underlying(), msg.sender, amount);\n        cErc20Depositing.mint(amount);\n        initialDepositCollateral[address(cErc20Depositing)] = initialDepositCollateral[address(cErc20Depositing)] + amount;\n    }\n\n    // interest receiver\n    // withdraw interest from each collateral type, sends each individually\n    function withdrawInterestEach() external {\n        require(msg.sender == interestWithdrawer);\n        for (uint i=0; i < markets.length; i++) {\n            address cTokenAddress = markets[i];\n            if (initialDepositCollateral[cTokenAddress] > 0) {\n                uint balanceInterestAvailable = CTokenNoBorrowInterface(cTokenAddress).balanceOfUnderlying(address(this)) - initialDepositCollateral[cTokenAddress];\n                CTokenNoBorrowInterface(cTokenAddress).redeemUnderlying(balanceInterestAvailable);\n                if (cTokenAddress != cEth) {\n                    doTransferOut(CERC20NoBorrowInterface(cTokenAddress).underlying(), msg.sender, balanceInterestAvailable);\n                } else {\n                    address(msg.sender).send(balanceInterestAvailable);\n                }\n            }\n        }\n    }\n    // uniswap each token interest to eth, withdraw eth\n    function withdrawInterestAsEth() external {\n        require(msg.sender == interestWithdrawer);\n        for (uint i=0; i < markets.length; i++) {\n            address cTokenAddress = markets[i];\n            if (initialDepositCollateral[cTokenAddress] > 0) {\n                uint balanceInterestAvailable = CTokenNoBorrowInterface(cTokenAddress).balanceOfUnderlying(address(this)) - initialDepositCollateral[cTokenAddress];\n                CTokenNoBorrowInterface(cTokenAddress).redeemUnderlying(balanceInterestAvailable);\n                if (cTokenAddress != cEth) {\n                    UniswapExchangeInterface(uniswapFactory.getExchange(CERC20NoBorrowInterface(cTokenAddress).underlying())).tokenToEthSwapInput(balanceInterestAvailable, 1, block.timestamp+1);\n                }\n            }\n        }\n        address(msg.sender).send(address(this).balance);\n    }\n    // uniswap each token interest to eth, uniswap sum eth to withdraw-token\n    function withdrawInterestAsToken(address withdrawTokenAddress) external {\n        require(msg.sender == interestWithdrawer);\n        for (uint i=0; i < markets.length; i++) {\n            address cTokenAddress = markets[i];\n            if (initialDepositCollateral[cTokenAddress] > 0) {\n                uint balanceInterestAvailable = CTokenNoBorrowInterface(cTokenAddress).balanceOfUnderlying(address(this)) - initialDepositCollateral[cTokenAddress];\n                CTokenNoBorrowInterface(cTokenAddress).redeemUnderlying(balanceInterestAvailable);\n                if (cTokenAddress != cEth) {\n                    UniswapExchangeInterface(uniswapFactory.getExchange(CERC20NoBorrowInterface(cTokenAddress).underlying())).tokenToEthSwapInput(balanceInterestAvailable, 1, block.timestamp+1);\n                }\n            }\n        }\n        UniswapExchangeInterface(uniswapFactory.getExchange(withdrawTokenAddress)).ethToTokenTransferInput.value(address(this).balance)(1, block.timestamp+1, msg.sender);\n    }\n\n    // owner\n    function withdrawAll() external {\n        require(msg.sender == collateralOwner);\n        for (uint i=0; i < markets.length; i++) {\n            address cTokenAddress = markets[i];\n            if (initialDepositCollateral[cTokenAddress] > 0) {\n                initialDepositCollateral[cTokenAddress] = 0;\n                CTokenNoBorrowInterface(cTokenAddress).redeem(IERC20(cTokenAddress).balanceOf(address(this)));\n                if (markets[i] != cEth) {\n                    address underlying = CERC20NoBorrowInterface(cTokenAddress).underlying();\n                    doTransferOut(underlying, msg.sender, IERC20(underlying).balanceOf(address(this)));\n                } else {\n                    address(msg.sender).send(address(this).balance);\n                }\n            }\n        }\n    }\n    function withdrawAllAsEth() external {\n        require(msg.sender == collateralOwner);\n        for (uint i=0; i < markets.length; i++) {\n            address cTokenAddress = markets[i];\n            if (initialDepositCollateral[cTokenAddress] > 0) {\n                initialDepositCollateral[cTokenAddress] = 0;\n                CTokenNoBorrowInterface(cTokenAddress).redeem(IERC20(cTokenAddress).balanceOf(address(this)));\n                if (markets[i] != cEth) {\n                    address underlying = CERC20NoBorrowInterface(cTokenAddress).underlying();\n                    UniswapExchangeInterface(uniswapFactory.getExchange(underlying)).tokenToEthSwapInput(IERC20(underlying).balanceOf(address(this)), 1, block.timestamp+1);\n                }\n            }\n        }\n        address(msg.sender).send(address(this).balance);\n    }\n    function withdrawAllAsToken(address withdrawTokenAddress) external {\n        require(msg.sender == collateralOwner);\n        for (uint i=0; i < markets.length; i++) {\n            address cTokenAddress = markets[i];\n            if (initialDepositCollateral[cTokenAddress] > 0) {\n                initialDepositCollateral[cTokenAddress] = 0;\n                CTokenNoBorrowInterface(cTokenAddress).redeem(IERC20(cTokenAddress).balanceOf(address(this)));\n                if (markets[i] != cEth) {\n                    address underlying = CERC20NoBorrowInterface(cTokenAddress).underlying();\n                    UniswapExchangeInterface(uniswapFactory.getExchange(underlying)).tokenToEthSwapInput(IERC20(underlying).balanceOf(address(this)), 1, block.timestamp+1);\n                }\n            }\n        }\n        UniswapExchangeInterface(uniswapFactory.getExchange(withdrawTokenAddress)).ethToTokenTransferInput.value(address(this).balance)(1, block.timestamp+1, msg.sender);\n    }\n\n    // views\n    function interestAvailableFromSingleToken(address cTokenAddress) public returns (uint) {\n        uint ethCanWithdraw = 0;\n        if (initialDepositCollateral[cTokenAddress] > 0) {\n            uint underlyingBalance = CTokenNoBorrowInterface(cTokenAddress).balanceOfUnderlying(address(this));\n            if (underlyingBalance < initialDepositCollateral[cTokenAddress]) {\n                return 0;\n            } else {\n                return underlyingBalance - initialDepositCollateral[cTokenAddress];\n            }\n        }\n        return 0;\n    }\n    function interestAvailableAllTokensAsEth() public returns (uint) {\n        uint ethCanWithdraw = 0;\n        for (uint i=0; i < markets.length; i++) {\n            address cTokenAddress = markets[i];\n            uint interestAvailable = interestAvailableFromSingleToken(cTokenAddress);\n            if (interestAvailable == 0) {\n                continue;\n            }\n            if (cTokenAddress == cEth) {\n                ethCanWithdraw = ethCanWithdraw + interestAvailable;\n            } else {\n                ethCanWithdraw = ethCanWithdraw + UniswapExchangeInterface(uniswapFactory.getExchange(CERC20NoBorrowInterface(cTokenAddress).underlying())).getTokenToEthInputPrice(interestAvailable);\n            }\n        }\n        return ethCanWithdraw;\n    }\n    function interestAvailableAsToken(address withdrawTokenAddress) external returns (uint) {\n        uint ethCanWithdraw = interestAvailableAllTokensAsEth();\n        if (ethCanWithdraw == 0) {\n            return 0;\n        } else {\n            return UniswapExchangeInterface(uniswapFactory.getExchange(withdrawTokenAddress)).getEthToTokenInputPrice(ethCanWithdraw);\n        }\n    }\n    function marketCount() external view returns (uint) {\n        return markets.length;\n    }\n\n    // owner backup/safty functions.\n    // TODO: dont allow duplicate markets.\n    // TODO: adding invalid markets can break recipient withdraw loop.\n    function enterNewMarkets(address[] calldata cTokens) external {\n        require(msg.sender == collateralOwner);\n        for (uint i=0; i < cTokens.length; i++) {\n            markets.push(cTokens[i]);\n            address underlying = CERC20NoBorrowInterface(cTokens[i]).underlying();\n            tokenAllowAll(underlying, cTokens[i]);\n            tokenAllowAll(underlying, uniswapFactory.getExchange(underlying));\n        }\n    }\n    function withdrawEth() external {\n        require(msg.sender == collateralOwner);\n        msg.sender.transfer(address(this).balance);\n    }\n    function returnTokenAmount(address asset, uint amount) external {\n        require(msg.sender == collateralOwner);\n        doTransferOut(asset, msg.sender, amount);\n    }\n    function transferCollateralOwner(address newOwner) external {\n        require(msg.sender == collateralOwner);\n        require(newOwner != address(0));\n        collateralOwner = newOwner;\n    }\n    function transferInterestWithdrawer(address newOwner) external {\n        require(msg.sender == interestWithdrawer || msg.sender == collateralOwner);\n        require(newOwner != address(0));\n        interestWithdrawer = newOwner;\n    }\n\n    // allow receive eth\n    function() external payable { }\n\n    // internal\n    function tokenAllowAll(address asset, address allowee) internal {\n        require(IERC20(asset).approve(allowee, uint(-1)));\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b506122c2806100206000396000f3fe60806040526004361061012a5760003560e01c806399752860116100ab578063b1283e771161006f578063b1283e77146103a3578063bc37acd7146103cd578063ec2c510414610400578063ec97908214610433578063efceaf7e14610448578063f53352bd1461045d5761012a565b806399752860146102965780639ef214fa146102ab578063a0ef91df146102de578063a5c113b0146102f3578063ac96a7e2146103265761012a565b8063439370b1116100f2578063439370b11461021c5780635e35a4f314610224578063611d1c0f14610257578063853828b61461026c578063906e45d7146102815761012a565b806303b5c3641461012c578063338b5dea1461015d57806339835c5c146101895780633d26b11a146101c257806340e1e69214610207575b005b34801561013857600080fd5b50610141610490565b604080516001600160a01b039092168252519081900360200190f35b61012a6004803603604081101561017357600080fd5b506001600160a01b03813516906020013561049f565b34801561019557600080fd5b5061012a600480360360408110156101ac57600080fd5b506001600160a01b0381351690602001356105c5565b3480156101ce57600080fd5b506101f5600480360360208110156101e557600080fd5b50356001600160a01b03166105eb565b60408051918252519081900360200190f35b34801561021357600080fd5b50610141610716565b61012a610725565b34801561023057600080fd5b5061012a6004803603602081101561024757600080fd5b50356001600160a01b03166107f6565b34801561026357600080fd5b5061012a610842565b34801561027857600080fd5b5061012a610b75565b34801561028d57600080fd5b5061012a610e1f565b3480156102a257600080fd5b506101f56111a4565b3480156102b757600080fd5b5061012a600480360360208110156102ce57600080fd5b50356001600160a01b03166113a0565b3480156102ea57600080fd5b5061012a6117cc565b3480156102ff57600080fd5b5061012a6004803603602081101561031657600080fd5b50356001600160a01b0316611810565b34801561033257600080fd5b5061012a6004803603602081101561034957600080fd5b81019060208101813564010000000081111561036457600080fd5b82018360208201111561037657600080fd5b8035906020019184602083028401116401000000008311171561039857600080fd5b509092509050611b95565b3480156103af57600080fd5b50610141600480360360208110156103c657600080fd5b5035611d41565b3480156103d957600080fd5b5061012a600480360360208110156103f057600080fd5b50356001600160a01b0316611d68565b34801561040c57600080fd5b506101f56004803603602081101561042357600080fd5b50356001600160a01b0316611dc9565b34801561043f57600080fd5b506101f5611ddb565b34801561045457600080fd5b5061012a611de1565b34801561046957600080fd5b506101f56004803603602081101561048057600080fd5b50356001600160a01b0316612007565b6002546001600160a01b031681565b6001546001600160a01b0316331480156104b95750600081115b6104c257600080fd5b610531826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156104fe57600080fd5b505afa158015610512573d6000803e3d6000fd5b505050506040513d602081101561052857600080fd5b505133836120fc565b816001600160a01b031663a0712d68826040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561057757600080fd5b505af115801561058b573d6000803e3d6000fd5b505050506040513d60208110156105a157600080fd5b50506001600160a01b03909116600090815260036020526040902080549091019055565b6001546001600160a01b031633146105dc57600080fd5b6105e78233836121b1565b5050565b6000806105f66111a4565b905080610607576000915050610711565b60408051600160e11b6303795fb10281526001600160a01b0385166004820152905173c0a47dfe034b400b47bdad5fecda2621de6c4d95916306f2bf62916024808301926020929190829003018186803b15801561066457600080fd5b505afa158015610678573d6000803e3d6000fd5b505050506040513d602081101561068e57600080fd5b505160408051600160e01b63cd7724c30281526004810184905290516001600160a01b039092169163cd7724c391602480820192602092909190829003018186803b1580156106dc57600080fd5b505afa1580156106f0573d6000803e3d6000fd5b505050506040513d602081101561070657600080fd5b505191506107119050565b919050565b6001546001600160a01b031681565b6001546001600160a01b03163314801561073f5750600034115b61074857600080fd5b734ddc2d193948926d02f9b1fe9e1daa0718270ed56001600160a01b0316631249c58b346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561079757600080fd5b505af11580156107ab573d6000803e3d6000fd5b5050734ddc2d193948926d02f9b1fe9e1daa0718270ed560005250506003602052507f37fe843eb08f81ed1fdf7f609a15ddcff99897860e38d0ac14ad80a021ab820f805434019055565b6001546001600160a01b0316331461080d57600080fd5b6001600160a01b03811661082057600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b0316331461085957600080fd5b60005b600454811015610b565760006004828154811061087557fe5b60009182526020808320909101546001600160a01b0316808352600390915260409091205490915015610b4d576001600160a01b0381166000818152600360209081526040808320548151600160e01b633af9e6690281523060048201529151939490939092633af9e669926024808201939182900301818887803b1580156108fd57600080fd5b505af1158015610911573d6000803e3d6000fd5b505050506040513d602081101561092757600080fd5b505160408051600160e01b63852a12e3028152929091036004830181905290519092506001600160a01b0384169163852a12e39160248083019260209291908290030181600087803b15801561097c57600080fd5b505af1158015610990573d6000803e3d6000fd5b505050506040513d60208110156109a657600080fd5b50506001600160a01b038216734ddc2d193948926d02f9b1fe9e1daa0718270ed514610b4b5773c0a47dfe034b400b47bdad5fecda2621de6c4d956001600160a01b03166306f2bf62836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610a2857600080fd5b505afa158015610a3c573d6000803e3d6000fd5b505050506040513d6020811015610a5257600080fd5b50516040805163ffffffff841660e01b81526001600160a01b039092166004830152516024808301926020929190829003018186803b158015610a9457600080fd5b505afa158015610aa8573d6000803e3d6000fd5b505050506040513d6020811015610abe57600080fd5b505160408051600160e01b6395e3c50b028152600481018490526001602482018190524201604482015290516001600160a01b03909216916395e3c50b916064808201926020929091908290030181600087803b158015610b1e57600080fd5b505af1158015610b32573d6000803e3d6000fd5b505050506040513d6020811015610b4857600080fd5b50505b505b5060010161085c565b506040513390303180156108fc02916000818181858888f15050505050565b6001546001600160a01b03163314610b8c57600080fd5b60005b600454811015610e1c57600060048281548110610ba857fe5b60009182526020808320909101546001600160a01b0316808352600390915260409091205490915015610e13576001600160a01b0381166000818152600360209081526040808320929092558151600160e01b6370a08231028152306004820152915163db006a759284926370a0823192602480840193829003018186803b158015610c3357600080fd5b505afa158015610c47573d6000803e3d6000fd5b505050506040513d6020811015610c5d57600080fd5b50516040805163ffffffff841660e01b815260048101929092525160248083019260209291908290030181600087803b158015610c9957600080fd5b505af1158015610cad573d6000803e3d6000fd5b505050506040513d6020811015610cc357600080fd5b505060048054734ddc2d193948926d02f9b1fe9e1daa0718270ed5919084908110610cea57fe5b6000918252602090912001546001600160a01b031614610df6576000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3f57600080fd5b505afa158015610d53573d6000803e3d6000fd5b505050506040513d6020811015610d6957600080fd5b505160408051600160e01b6370a082310281523060048201529051919250610df091839133916001600160a01b038416916370a08231916024808301926020929190829003018186803b158015610dbf57600080fd5b505afa158015610dd3573d6000803e3d6000fd5b505050506040513d6020811015610de957600080fd5b50516121b1565b50610e13565b6040513390303180156108fc02916000818181858888f150505050505b50600101610b8f565b50565b6001546001600160a01b03163314610e3657600080fd5b60005b600454811015610b5657600060048281548110610e5257fe5b60009182526020808320909101546001600160a01b031680835260039091526040909120549091501561119b576001600160a01b0381166000818152600360209081526040808320929092558151600160e01b6370a08231028152306004820152915163db006a759284926370a0823192602480840193829003018186803b158015610edd57600080fd5b505afa158015610ef1573d6000803e3d6000fd5b505050506040513d6020811015610f0757600080fd5b50516040805163ffffffff841660e01b815260048101929092525160248083019260209291908290030181600087803b158015610f4357600080fd5b505af1158015610f57573d6000803e3d6000fd5b505050506040513d6020811015610f6d57600080fd5b505060048054734ddc2d193948926d02f9b1fe9e1daa0718270ed5919084908110610f9457fe5b6000918252602090912001546001600160a01b03161461119b576000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610fe957600080fd5b505afa158015610ffd573d6000803e3d6000fd5b505050506040513d602081101561101357600080fd5b505160408051600160e11b6303795fb10281526001600160a01b0383166004820152905191925073c0a47dfe034b400b47bdad5fecda2621de6c4d95916306f2bf6291602480820192602092909190829003018186803b15801561107657600080fd5b505afa15801561108a573d6000803e3d6000fd5b505050506040513d60208110156110a057600080fd5b505160408051600160e01b6370a0823102815230600482015290516001600160a01b03928316926395e3c50b92908516916370a0823191602480820192602092909190829003018186803b1580156110f757600080fd5b505afa15801561110b573d6000803e3d6000fd5b505050506040513d602081101561112157600080fd5b50516040805163ffffffff841660e01b81526004810192909252600160248301819052420160448301525160648083019260209291908290030181600087803b15801561116d57600080fd5b505af1158015611181573d6000803e3d6000fd5b505050506040513d602081101561119757600080fd5b5050505b50600101610e39565b600080805b60045481101561139a576000600482815481106111c257fe5b60009182526020822001546001600160a01b031691506111e182612007565b9050806111ef575050611392565b6001600160a01b038216734ddc2d193948926d02f9b1fe9e1daa0718270ed5141561121d579283019261138f565b73c0a47dfe034b400b47bdad5fecda2621de6c4d956001600160a01b03166306f2bf62836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561127957600080fd5b505afa15801561128d573d6000803e3d6000fd5b505050506040513d60208110156112a357600080fd5b50516040805163ffffffff841660e01b81526001600160a01b039092166004830152516024808301926020929190829003018186803b1580156112e557600080fd5b505afa1580156112f9573d6000803e3d6000fd5b505050506040513d602081101561130f57600080fd5b505160408051600160e01b6395b68fe70281526004810184905290516001600160a01b03909216916395b68fe791602480820192602092909190829003018186803b15801561135d57600080fd5b505afa158015611371573d6000803e3d6000fd5b505050506040513d602081101561138757600080fd5b505193909301925b50505b6001016111a9565b50905090565b6002546001600160a01b031633146113b757600080fd5b60005b6004548110156116b4576000600482815481106113d357fe5b60009182526020808320909101546001600160a01b03168083526003909152604090912054909150156116ab576001600160a01b0381166000818152600360209081526040808320548151600160e01b633af9e6690281523060048201529151939490939092633af9e669926024808201939182900301818887803b15801561145b57600080fd5b505af115801561146f573d6000803e3d6000fd5b505050506040513d602081101561148557600080fd5b505160408051600160e01b63852a12e3028152929091036004830181905290519092506001600160a01b0384169163852a12e39160248083019260209291908290030181600087803b1580156114da57600080fd5b505af11580156114ee573d6000803e3d6000fd5b505050506040513d602081101561150457600080fd5b50506001600160a01b038216734ddc2d193948926d02f9b1fe9e1daa0718270ed5146116a95773c0a47dfe034b400b47bdad5fecda2621de6c4d956001600160a01b03166306f2bf62836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561158657600080fd5b505afa15801561159a573d6000803e3d6000fd5b505050506040513d60208110156115b057600080fd5b50516040805163ffffffff841660e01b81526001600160a01b039092166004830152516024808301926020929190829003018186803b1580156115f257600080fd5b505afa158015611606573d6000803e3d6000fd5b505050506040513d602081101561161c57600080fd5b505160408051600160e01b6395e3c50b028152600481018490526001602482018190524201604482015290516001600160a01b03909216916395e3c50b916064808201926020929091908290030181600087803b15801561167c57600080fd5b505af1158015611690573d6000803e3d6000fd5b505050506040513d60208110156116a657600080fd5b50505b505b506001016113ba565b5060408051600160e11b6303795fb10281526001600160a01b0383166004820152905173c0a47dfe034b400b47bdad5fecda2621de6c4d95916306f2bf62916024808301926020929190829003018186803b15801561171257600080fd5b505afa158015611726573d6000803e3d6000fd5b505050506040513d602081101561173c57600080fd5b505160408051600160e01b63ad65d76d0281526001600482018190524201602482015233604482015290516001600160a01b039092169163ad65d76d91303191606480830192602092919082900301818588803b15801561179c57600080fd5b505af11580156117b0573d6000803e3d6000fd5b50505050506040513d60208110156117c757600080fd5b505050565b6001546001600160a01b031633146117e357600080fd5b6040513390303180156108fc02916000818181858888f19350505050158015610e1c573d6000803e3d6000fd5b6001546001600160a01b0316331461182757600080fd5b60005b6004548110156116b45760006004828154811061184357fe5b60009182526020808320909101546001600160a01b0316808352600390915260409091205490915015611b8c576001600160a01b0381166000818152600360209081526040808320929092558151600160e01b6370a08231028152306004820152915163db006a759284926370a0823192602480840193829003018186803b1580156118ce57600080fd5b505afa1580156118e2573d6000803e3d6000fd5b505050506040513d60208110156118f857600080fd5b50516040805163ffffffff841660e01b815260048101929092525160248083019260209291908290030181600087803b15801561193457600080fd5b505af1158015611948573d6000803e3d6000fd5b505050506040513d602081101561195e57600080fd5b505060048054734ddc2d193948926d02f9b1fe9e1daa0718270ed591908490811061198557fe5b6000918252602090912001546001600160a01b031614611b8c576000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156119da57600080fd5b505afa1580156119ee573d6000803e3d6000fd5b505050506040513d6020811015611a0457600080fd5b505160408051600160e11b6303795fb10281526001600160a01b0383166004820152905191925073c0a47dfe034b400b47bdad5fecda2621de6c4d95916306f2bf6291602480820192602092909190829003018186803b158015611a6757600080fd5b505afa158015611a7b573d6000803e3d6000fd5b505050506040513d6020811015611a9157600080fd5b505160408051600160e01b6370a0823102815230600482015290516001600160a01b03928316926395e3c50b92908516916370a0823191602480820192602092909190829003018186803b158015611ae857600080fd5b505afa158015611afc573d6000803e3d6000fd5b505050506040513d6020811015611b1257600080fd5b50516040805163ffffffff841660e01b81526004810192909252600160248301819052420160448301525160648083019260209291908290030181600087803b158015611b5e57600080fd5b505af1158015611b72573d6000803e3d6000fd5b505050506040513d6020811015611b8857600080fd5b5050505b5060010161182a565b6001546001600160a01b03163314611bac57600080fd5b60005b818110156117c7576004838383818110611bc557fe5b83546001810185556000948552602080862090910180546001600160a01b0319166001600160a01b03929093029490940135161790915550838383818110611c0957fe5b905060200201356001600160a01b03166001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015611c5157600080fd5b505afa158015611c65573d6000803e3d6000fd5b505050506040513d6020811015611c7b57600080fd5b50519050611ca481858585818110611c8f57fe5b905060200201356001600160a01b031661220a565b60408051600160e11b6303795fb10281526001600160a01b03831660048201529051611d3891839173c0a47dfe034b400b47bdad5fecda2621de6c4d95916306f2bf62916024808301926020929190829003018186803b158015611d0757600080fd5b505afa158015611d1b573d6000803e3d6000fd5b505050506040513d6020811015611d3157600080fd5b505161220a565b50600101611baf565b60048181548110611d4e57fe5b6000918252602090912001546001600160a01b0316905081565b6002546001600160a01b0316331480611d8b57506001546001600160a01b031633145b611d9457600080fd5b6001600160a01b038116611da757600080fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60036020526000908152604090205481565b60045490565b6002546001600160a01b03163314611df857600080fd5b60005b600454811015610e1c57600060048281548110611e1457fe5b60009182526020808320909101546001600160a01b0316808352600390915260409091205490915015611ffe576001600160a01b0381166000818152600360209081526040808320548151600160e01b633af9e6690281523060048201529151939490939092633af9e669926024808201939182900301818887803b158015611e9c57600080fd5b505af1158015611eb0573d6000803e3d6000fd5b505050506040513d6020811015611ec657600080fd5b505160408051600160e01b63852a12e3028152929091036004830181905290519092506001600160a01b0384169163852a12e39160248083019260209291908290030181600087803b158015611f1b57600080fd5b505af1158015611f2f573d6000803e3d6000fd5b505050506040513d6020811015611f4557600080fd5b50506001600160a01b038216734ddc2d193948926d02f9b1fe9e1daa0718270ed514611fdf57611fda826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015611fa757600080fd5b505afa158015611fbb573d6000803e3d6000fd5b505050506040513d6020811015611fd157600080fd5b505133836121b1565b611ffc565b604051339082156108fc029083906000818181858888f150505050505b505b50600101611dfb565b6001600160a01b0381166000908152600360205260408120548190156120f35760408051600160e01b633af9e66902815230600482015290516000916001600160a01b03861691633af9e6699160248082019260209290919082900301818787803b15801561207557600080fd5b505af1158015612089573d6000803e3d6000fd5b505050506040513d602081101561209f57600080fd5b50516001600160a01b0385166000908152600360205260409020549091508110156120cf57600092505050610711565b6001600160a01b038416600090815260036020526040902054900391506107119050565b50600092915050565b60408051600160e01b6323b872dd0281526001600160a01b0384811660048301523060248301526044820184905291518592600092908416916323b872dd91606480820192869290919082900301818387803b15801561215b57600080fd5b505af115801561216f573d6000803e3d6000fd5b505050503d60008114612189576020811461219357600080fd5b600019915061219f565b60206000803e60005191505b50806121aa57600080fd5b5050505050565b60408051600160e01b63a9059cbb0281526001600160a01b03848116600483015260248201849052915185926000929084169163a9059cbb91604480820192869290919082900301818387803b15801561215b57600080fd5b60408051600160e01b63095ea7b30281526001600160a01b038381166004830152600019602483015291519184169163095ea7b3916044808201926020929091908290030181600087803b15801561226157600080fd5b505af1158015612275573d6000803e3d6000fd5b505050506040513d602081101561228b57600080fd5b50516105e757600080fdfea165627a7a7230582061d7a4bce370515faecbb632a4f54c3f19a36903eb601a3848e63f0967724f3c0029"
}