{
  "address": "0x9c2d9be4bb7352d2eca65675067f9e6194e597b5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BarbarossaContract",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-14\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract Ownable {\n    address public owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n\ncontract TokenERC20 is Ownable {\n    using SafeMath for uint;\n\n    string public name;\n    string public symbol;\n    uint256 public decimals = 18;\n    uint256 DEC = 10 ** uint256(decimals); \n    address public owner;\n\n    uint256 public totalSupply;\n    uint256 public avaliableSupply;\n    uint256 public buyPrice = 12000 szabo;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed from, uint256 value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    constructor(uint256 initialSupply, string tokenName, string tokenSymbol) public {\n        totalSupply = initialSupply * DEC;  // Update total supply with the decimal amount\n        balanceOf[this] = totalSupply;                // Give the creator all initial tokens\n        avaliableSupply = balanceOf[this];            // Show how much tokens on contract\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n        owner = msg.sender;\n    }\n\n\n    function _transfer(address _from, address _to, uint256 _value) internal {\n        require(_to != 0x0);\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n\n        emit Transfer(_from, _to, _value);\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public\n        returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);    \n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n   \n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n        allowance[msg.sender][_spender] = allowance[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n        return true;\n    }\n\n\n    function decreaseApproval (address _spender, uint _subtractedValue) public\n        returns (bool success) {\n        uint oldValue = allowance[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowance[msg.sender][_spender] = 0;\n        } else {\n            allowance[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n        return true;\n    }\n    \n    \n    function burn(uint256 _value) public onlyOwner returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        avaliableSupply -= _value;\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n    \n    \n    function burnFrom(address _from, uint256 _value) public onlyOwner returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        avaliableSupply -= _value;\n        emit Burn(_from, _value);\n        return true;\n    }\n}\n\n\ncontract Pauseble is TokenERC20 {\n    event EPause();\n    event EUnpause();\n\n    bool public paused = true;\n  \n    modifier whenNotPaused() {\n      require(!paused);\n      _;\n    }\n\n\n    modifier whenPaused() {\n          require(paused);\n        _;\n    }\n\n\n    function pause() public onlyOwner {\n        paused = true;\n        emit EPause();\n    }\n\n\n    function pauseInternal() internal {\n        paused = true;\n        emit EPause();\n    }\n\n\n    function unpause() public onlyOwner {\n        paused = false;\n        emit EUnpause();\n    }\n}\n\n\ncontract BarbarossaContract is Pauseble {\n\n    using SafeMath for uint;\n  \n    uint public weisRaised; \n\n    constructor() public TokenERC20(50000000, \"Barbarossa Invest Token\", \"BIT\") {} \n\n\n    function () public payable {\n        require(paused == false);\n        owner.transfer(msg.value); \n        sell(msg.sender, msg.value);\n        weisRaised = weisRaised.add(msg.value);  \n    }\n    \n    \n    function sell(address _investor, uint256 amount) internal {\n        uint256 _amount = amount.mul(DEC).div(buyPrice);\n        avaliableSupply -= _amount;\n        _transfer(this, _investor, _amount);\n    }\n    \n    \n     function transferTokensFromContract(address _to, uint256 _value) public onlyOwner {   \n        avaliableSupply -= _value;\n        _value = _value*DEC; \n        _transfer(this, _to, _value);\n    }\n\n\n    function setPrices(uint256 newPrice) public onlyOwner {\n        buyPrice = newPrice;\n    }\n}",
  "bytecode": "60806040526012600355600354600a0a600455662aa1efb94e00006008556001600b60006101000a81548160ff0219169083151502179055503480156200004557600080fd5b506302faf0806040805190810160405280601781526020017f4261726261726f73736120496e7665737420546f6b656e0000000000000000008152506040805190810160405280600381526020017f4249540000000000000000000000000000000000000000000000000000000000815250336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506004548302600681905550600654600960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546007819055508160019080519060200190620001a69291906200020a565b508060029080519060200190620001bf9291906200020a565b5033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620002b9565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024d57805160ff19168380011785556200027e565b828001600101855582156200027e579182015b828111156200027d57825182559160200191906001019062000260565b5b5090506200028d919062000291565b5090565b620002b691905b80821115620002b257600081600090555060010162000298565b5090565b90565b611c7780620002c96000396000f300608060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806304a84938146101e557806306fdde0314610210578063095ea7b3146102a057806318160ddd1461030557806323b872dd14610330578063313ce567146103b55780633f4ba83a146103e057806342966c68146103f75780635c975abb1461043c578063661884631461046b57806370a08231146104d057806379cc6790146105275780638456cb591461058c5780638620410b146105a35780638da5cb5b146105ce57806395d89b4114610625578063a3201daa146106b5578063a9059cbb146106e2578063d0973af81461072f578063d73dd6231461077c578063da5f838d146107e1578063dd62ed3e1461080c578063f2fde38b14610883575b60001515600b60009054906101000a900460ff16151514151561015557600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156101bd573d6000803e3d6000fd5b506101c833346108c6565b6101dd34600c5461091390919063ffffffff16565b600c81905550005b3480156101f157600080fd5b506101fa610931565b6040518082815260200191505060405180910390f35b34801561021c57600080fd5b50610225610937565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561026557808201518184015260208101905061024a565b50505050905090810190601f1680156102925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102ac57600080fd5b506102eb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109d5565b604051808215151515815260200191505060405180910390f35b34801561031157600080fd5b5061031a610a62565b6040518082815260200191505060405180910390f35b34801561033c57600080fd5b5061039b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a68565b604051808215151515815260200191505060405180910390f35b3480156103c157600080fd5b506103ca610b95565b6040518082815260200191505060405180910390f35b3480156103ec57600080fd5b506103f5610b9b565b005b34801561040357600080fd5b5061042260048036038101908080359060200190929190505050610c3f565b604051808215151515815260200191505060405180910390f35b34801561044857600080fd5b50610451610dae565b604051808215151515815260200191505060405180910390f35b34801561047757600080fd5b506104b6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610dc1565b604051808215151515815260200191505060405180910390f35b3480156104dc57600080fd5b50610511600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611052565b6040518082815260200191505060405180910390f35b34801561053357600080fd5b50610572600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061106a565b604051808215151515815260200191505060405180910390f35b34801561059857600080fd5b506105a16112ef565b005b3480156105af57600080fd5b506105b8611393565b6040518082815260200191505060405180910390f35b3480156105da57600080fd5b506105e3611399565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561063157600080fd5b5061063a6113bf565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561067a57808201518184015260208101905061065f565b50505050905090810190601f1680156106a75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106c157600080fd5b506106e06004803603810190808035906020019092919050505061145d565b005b3480156106ee57600080fd5b5061072d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114c2565b005b34801561073b57600080fd5b5061077a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114d1565b005b34801561078857600080fd5b506107c7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611552565b604051808215151515815260200191505060405180910390f35b3480156107ed57600080fd5b506107f661174e565b6040518082815260200191505060405180910390f35b34801561081857600080fd5b5061086d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611754565b6040518082815260200191505060405180910390f35b34801561088f57600080fd5b506108c4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611779565b005b60006108f16008546108e3600454856118ce90919063ffffffff16565b61190190919063ffffffff16565b90508060076000828254039250508190555061090e30848361191c565b505050565b600080828401905083811015151561092757fe5b8091505092915050565b60075481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109cd5780601f106109a2576101008083540402835291602001916109cd565b820191906000526020600020905b8154815290600101906020018083116109b057829003601f168201915b505050505081565b600081600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b60065481565b6000600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610af557600080fd5b81600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610b8a84848461191c565b600190509392505050565b60035481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bf657600080fd5b6000600b60006101000a81548160ff0219169083151502179055507f9b1d6b460eaa8350c2f15712231e94c803e08e072db0737a0efb84745848694060405160405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c9c57600080fd5b81600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610cea57600080fd5b81600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600660008282540392505081905550816007600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a260019050919050565b600b60009054906101000a900460ff1681565b600080600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610ed2576000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f66565b610ee58382611c3290919063ffffffff16565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60096020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110c757600080fd5b81600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561111557600080fd5b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156111a057600080fd5b81600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600660008282540392505081905550816007600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a26001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561134a57600080fd5b6001600b60006101000a81548160ff0219169083151502179055507fd2ef4ae6592c2a8f5d1c602eaa8a0685727b41b23509703db861621a9614813a60405160405180910390a1565b60085481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114555780601f1061142a57610100808354040283529160200191611455565b820191906000526020600020905b81548152906001019060200180831161143857829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114b857600080fd5b8060088190555050565b6114cd33838361191c565b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561152c57600080fd5b806007600082825403925050819055506004548102905061154e30838361191c565b5050565b60006115e382600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461091390919063ffffffff16565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600c5481565b600a602052816000526040600020602052806000526040600020600091509150505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117d457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561181057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080828402905060008414806118ef57508284828115156118ec57fe5b04145b15156118f757fe5b8091505092915050565b600080828481151561190f57fe5b0490508091505092915050565b6000808373ffffffffffffffffffffffffffffffffffffffff161415151561194357600080fd5b81600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561199157600080fd5b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401111515611a1f57600080fd5b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905081600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a380600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401141515611c2c57fe5b50505050565b6000828211151515611c4057fe5b8183039050929150505600a165627a7a72305820606f8d46a286b9757e32102742b4dc1089d60d97910ef4c47b5cec3a8bfe27420029"
}