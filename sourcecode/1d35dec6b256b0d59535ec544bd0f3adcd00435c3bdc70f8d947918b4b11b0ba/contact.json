{
  "address": "0x9b2b16f9a9a65425ee9a117aa6ba9f0603d973f7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ProofOfStableCoin",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-09\n*/\n\npragma solidity ^0.4.21;\n\ncontract ProofOfStableCoin {\n    using SafeMath for uint256;\n\n    event Deposit(address user, uint amount);\n    event Withdraw(address user, uint amount);\n    event Claim(address user, uint dividends);\n    event Reinvest(address user, uint dividends);\n\n    address owner;\n    mapping(address => bool) preauthorized;\n    bool gameStarted;\n\n    uint constant depositTaxDivisor = 3;\n    uint constant withdrawalTaxDivisor = 3;\n\n    mapping(address => uint) public investment;\n\n    mapping(address => uint) public stake;\n    uint public totalStake;\n    uint stakeValue;\n\n    mapping(address => uint) dividendCredit;\n    mapping(address => uint) dividendDebit;\n\n    function ProofOfStableCoin() public {\n        owner = msg.sender;\n        preauthorized[owner] = true;\n    }\n\n    function preauthorize(address _user) public {\n        require(msg.sender == owner);\n        preauthorized[_user] = true;\n    }\n\n    function startGame() public {\n        require(msg.sender == owner);\n        gameStarted = true;\n    }\n\n    function depositHelper(uint _amount) private {\n        uint _tax = _amount.div(depositTaxDivisor);\n        uint _amountAfterTax = _amount.sub(_tax);\n        if (totalStake > 0)\n            stakeValue = stakeValue.add(_tax.div(totalStake));\n        uint _stakeIncrement = sqrt(totalStake.mul(totalStake).add(_amountAfterTax)).sub(totalStake);\n        investment[msg.sender] = investment[msg.sender].add(_amountAfterTax);\n        stake[msg.sender] = stake[msg.sender].add(_stakeIncrement);\n        totalStake = totalStake.add(_stakeIncrement);\n        dividendDebit[msg.sender] = dividendDebit[msg.sender].add(_stakeIncrement.mul(stakeValue));\n    }\n\n    function deposit() public payable {\n        require(preauthorized[msg.sender] || gameStarted);\n        depositHelper(msg.value);\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint _amount) public {\n        require(_amount > 0);\n        require(_amount <= investment[msg.sender]);\n        uint _tax = _amount.div(withdrawalTaxDivisor);\n        uint _amountAfterTax = _amount.sub(_tax);\n        uint _stakeDecrement = stake[msg.sender].mul(_amount).div(investment[msg.sender]);\n        uint _dividendCredit = _stakeDecrement.mul(stakeValue);\n        investment[msg.sender] = investment[msg.sender].sub(_amount);\n        stake[msg.sender] = stake[msg.sender].sub(_stakeDecrement);\n        totalStake = totalStake.sub(_stakeDecrement);\n        if (totalStake > 0)\n            stakeValue = stakeValue.add(_tax.div(totalStake));\n        dividendCredit[msg.sender] = dividendCredit[msg.sender].add(_dividendCredit);\n        uint _creditDebitCancellation = min(dividendCredit[msg.sender], dividendDebit[msg.sender]);\n        dividendCredit[msg.sender] = dividendCredit[msg.sender].sub(_creditDebitCancellation);\n        dividendDebit[msg.sender] = dividendDebit[msg.sender].sub(_creditDebitCancellation);\n        msg.sender.transfer(_amountAfterTax);\n        emit Withdraw(msg.sender, _amount);\n    }\n\n    function claimHelper() private returns(uint) {\n        uint _dividendsForStake = stake[msg.sender].mul(stakeValue);\n        uint _dividends = _dividendsForStake.add(dividendCredit[msg.sender]).sub(dividendDebit[msg.sender]);\n        dividendCredit[msg.sender] = 0;\n        dividendDebit[msg.sender] = _dividendsForStake;\n        return _dividends;\n    }\n\n    function claim() public {\n        uint _dividends = claimHelper();\n        msg.sender.transfer(_dividends);\n        emit Claim(msg.sender, _dividends);\n    }\n\n    function reinvest() public {\n        uint _dividends = claimHelper();\n        depositHelper(_dividends);\n        emit Reinvest(msg.sender, _dividends);\n    }\n\n    function dividendsForUser(address _user) public view returns (uint) {\n        return stake[_user].mul(stakeValue).add(dividendCredit[_user]).sub(dividendDebit[_user]);\n    }\n\n    function min(uint x, uint y) private pure returns (uint) {\n        return x <= y ? x : y;\n    }\n\n    function sqrt(uint x) private pure returns (uint y) {\n        uint z = (x + 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;                                                                                                                                                                                       \n        }\n        uint256 c = a * b;                                                                                                                                                                                  \n        assert(c / a == b);                                                                                                                                                                                 \n        return c;                                                                                                                                                                                           \n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0                                                                                                                               \n        // uint256 c = a / b;                                                                                                                                                                               \n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold                                                                                                                       \n        return a / b;                                                                                                                                                                                       \n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);                                                                                                                                                                                     \n        return a - b;                                                                                                                                                                                       \n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;                                                                                                                                                                                  \n        assert(c >= a);                                                                                                                                                                                     \n        return c;                                                                                                                                                                                           \n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506111f9806100d66000396000f3006060604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630bd18d7a146100a957806326476204146100f65780632e1a7d4d146101435780634e71d92d1461016657806355e2305e1461017b57806386be3981146101b45780638b0e9f3f14610201578063d0e30db01461022a578063d65ab5f214610234578063fdb5a03e14610249575b600080fd5b34156100b457600080fd5b6100e0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061025e565b6040518082815260200191505060405180910390f35b341561010157600080fd5b61012d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610276565b6040518082815260200191505060405180910390f35b341561014e57600080fd5b610164600480803590602001909190505061028e565b005b341561017157600080fd5b610179610855565b005b341561018657600080fd5b6101b2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061090f565b005b34156101bf57600080fd5b6101eb600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506109c4565b6040518082815260200191505060405180910390f35b341561020c57600080fd5b610214610ac3565b6040518082815260200191505060405180910390f35b610232610ac9565b005b341561023f57600080fd5b610247610bae565b005b341561025457600080fd5b61025c610c26565b005b60036020528060005260406000206000915090505481565b60046020528060005260406000206000915090505481565b600080600080600080861115156102a457600080fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486111515156102f257600080fd5b610306600387610ca990919063ffffffff16565b945061031b8587610cbf90919063ffffffff16565b93506103c0600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546103b288600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610cd890919063ffffffff16565b610ca990919063ffffffff16565b92506103d760065484610cd890919063ffffffff16565b915061042b86600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610cbf90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506104c083600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610cbf90919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061051883600554610cbf90919063ffffffff16565b600581905550600060055411156105595761055261054160055487610ca990919063ffffffff16565b600654610d1390919063ffffffff16565b6006819055505b6105ab82600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d1390919063ffffffff16565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610676600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d31565b90506106ca81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610cbf90919063ffffffff16565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061075f81600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610cbf90919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f1935050505015156107e257600080fd5b7f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243643387604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1505050505050565b600061085f610d4b565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015156108a157600080fd5b7f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d43382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561096a57600080fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000610abc600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610aae600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610aa0600654600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610cd890919063ffffffff16565b610d1390919063ffffffff16565b610cbf90919063ffffffff16565b9050919050565b60055481565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680610b2d5750600260009054906101000a900460ff165b1515610b3857600080fd5b610b4134610edc565b7fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c3334604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c0957600080fd5b6001600260006101000a81548160ff021916908315150217905550565b6000610c30610d4b565b9050610c3b81610edc565b7fbd654390d0d973e8c8376ed6053be8658870df892687852cc5c914d700291b873382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150565b60008183811515610cb657fe5b04905092915050565b6000828211151515610ccd57fe5b818303905092915050565b6000806000841415610ced5760009150610d0c565b8284029050828482811515610cfe57fe5b04141515610d0857fe5b8091505b5092915050565b6000808284019050838110151515610d2757fe5b8091505092915050565b600081831115610d415781610d43565b825b905092915050565b6000806000610da4600654600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610cd890919063ffffffff16565b9150610e49600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e3b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485610d1390919063ffffffff16565b610cbf90919063ffffffff16565b90506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550809250505090565b6000806000610ef5600385610ca990919063ffffffff16565b9250610f0a8385610cbf90919063ffffffff16565b915060006005541115610f4757610f40610f2f60055485610ca990919063ffffffff16565b600654610d1390919063ffffffff16565b6006819055505b610f8c600554610f7e610f7985610f6b600554600554610cd890919063ffffffff16565b610d1390919063ffffffff16565b611182565b610cbf90919063ffffffff16565b9050610fe082600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d1390919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061107581600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d1390919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110cd81600554610d1390919063ffffffff16565b6005819055506111396110eb60065483610cd890919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d1390919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505050565b60008060026001840181151561119457fe5b0490508291505b818110156111c75780915060028182858115156111b457fe5b04018115156111bf57fe5b04905061119b565b509190505600a165627a7a7230582025a4a378e6067b42cc41e6494f7e04d2d776f0f6652715ac14cf5f69564406e20029"
}