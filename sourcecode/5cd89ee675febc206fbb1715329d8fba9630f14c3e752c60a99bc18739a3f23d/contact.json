{
  "address": "0xe89c2c77554aea3185821a00f1c43831d0e22d2c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MultiSender",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-18\n*/\n\npragma solidity ^0.4.0;\n\nlibrary SafeMath {\n  function mul(uint a, uint b) internal pure  returns (uint) {\n    uint c = a * b;\n    require(a == 0 || c / a == b);\n    return c;\n  }\n  function div(uint a, uint b) internal pure returns (uint) {\n    require(b > 0);\n    uint c = a / b;\n    require(a == b * c + a % b);\n    return c;\n  }\n  function sub(uint a, uint b) internal pure returns (uint) {\n    require(b <= a);\n    return a - b;\n  }\n  function add(uint a, uint b) internal pure returns (uint) {\n    uint c = a + b;\n    require(c >= a);\n    return c;\n  }\n  function max64(uint64 a, uint64 b) internal  pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n  function min64(uint64 a, uint64 b) internal  pure returns (uint64) {\n    return a < b ? a : b;\n  }\n  function max256(uint256 a, uint256 b) internal  pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n  function min256(uint256 a, uint256 b) internal  pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\ncontract ERC20Basic {\n  uint public totalSupply;\n  function balanceOf(address who) public constant returns (uint);\n  function transfer(address to, uint value) public;\n  event Transfer(address indexed from, address indexed to, uint value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint);\n  function transferFrom(address from, address to, uint value) public;\n  function approve(address spender, uint value) public;\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\ncontract BasicToken is ERC20Basic {\n\n  using SafeMath for uint;\n\n  mapping(address => uint) balances;\n\n  function transfer(address _to, uint _value) public{\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n  }\n\n  function balanceOf(address _owner) public constant returns (uint balance) {\n    return balances[_owner];\n  }\n}\n\n\ncontract StandardToken is BasicToken, ERC20 {\n  mapping (address => mapping (address => uint)) allowed;\n\n  function transferFrom(address _from, address _to, uint _value) public {\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint _value) public{\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0)) ;\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n  }\n\n  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n\ncontract Ownable {\n    address public owner;\n\n    function Ownable() public{\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    function transferOwnership(address newOwner) onlyOwner public{\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n\ncontract MultiSender is Ownable{\n\n    using SafeMath for uint;\n\n\n    event LogTokenMultiSent(address token,uint256 total);\n    event LogGetToken(address token, address receiver, uint256 balance);\n    address public receiverAddress;\n    uint public txFee = 0.01 ether;\n    uint public VIPFee = 1 ether;\n\n    /* VIP List */\n    mapping(address => bool) public vipList;\n\n    /*\n  *  get balance\n  */\n  function getBalance(address _tokenAddress) onlyOwner public {\n      address _receiverAddress = getReceiverAddress();\n      if(_tokenAddress == address(0)){\n          require(_receiverAddress.send(address(this).balance));\n          return;\n      }\n      StandardToken token = StandardToken(_tokenAddress);\n      uint256 balance = token.balanceOf(this);\n      token.transfer(_receiverAddress, balance);\n      emit LogGetToken(_tokenAddress,_receiverAddress,balance);\n  }\n\n\n   /*\n  *  Register VIP\n  */\n  function registerVIP() payable public {\n      require(msg.value >= VIPFee);\n      address _receiverAddress = getReceiverAddress();\n      require(_receiverAddress.send(msg.value));\n      vipList[msg.sender] = true;\n  }\n\n  /*\n  *  VIP list\n  */\n  function addToVIPList(address[] _vipList) onlyOwner public {\n    for (uint i =0;i<_vipList.length;i++){\n      vipList[_vipList[i]] = true;\n    }\n  }\n\n  /*\n    * Remove address from VIP List by Owner\n  */\n  function removeFromVIPList(address[] _vipList) onlyOwner public {\n    for (uint i =0;i<_vipList.length;i++){\n      vipList[_vipList[i]] = false;\n    }\n   }\n\n    /*\n        * Check isVIP\n    */\n    function isVIP(address _addr) public view returns (bool) {\n        return _addr == owner || vipList[_addr];\n    }\n\n    /*\n        * set receiver address\n    */\n    function setReceiverAddress(address _addr) onlyOwner public {\n        require(_addr != address(0));\n        receiverAddress = _addr;\n    }\n\n\n    /*\n        * get receiver address\n    */\n    function getReceiverAddress() public view returns  (address){\n        if(receiverAddress == address(0)){\n            return owner;\n        }\n\n        return receiverAddress;\n    }\n\n     /*\n        * set vip fee\n    */\n    function setVIPFee(uint _fee) onlyOwner public {\n        VIPFee = _fee;\n    }\n\n    /*\n        * set tx fee\n    */\n    function setTxFee(uint _fee) onlyOwner public {\n        txFee = _fee;\n    }\n\n\n   function ethSendSameValue(address[] _to, uint _value) internal {\n\n        uint sendAmount = _to.length.sub(1).mul(_value);\n        uint remainingValue = msg.value;\n\n        bool vip = isVIP(msg.sender);\n        if(vip){\n            require(remainingValue >= sendAmount);\n        }else{\n            require(remainingValue >= sendAmount.add(txFee)) ;\n        }\n\t\trequire(_to.length <= 255);\n\n\t\tfor (uint8 i = 1; i < _to.length; i++) {\n\t\t\tremainingValue = remainingValue.sub(_value);\n\t\t\trequire(_to[i].send(_value));\n\t\t}\n\n\t    emit LogTokenMultiSent(0x000000000000000000000000000000000000bEEF,msg.value);\n    }\n\n    function ethSendDifferentValue(address[] _to, uint[] _value) internal {\n\n        uint sendAmount = _value[0];\n\t\tuint remainingValue = msg.value;\n\n\t    bool vip = isVIP(msg.sender);\n        if(vip){\n            require(remainingValue >= sendAmount);\n        }else{\n            require(remainingValue >= sendAmount.add(txFee)) ;\n        }\n\n\t\trequire(_to.length == _value.length);\n\t\trequire(_to.length <= 255);\n\n\t\tfor (uint8 i = 1; i < _to.length; i++) {\n\t\t\tremainingValue = remainingValue.sub(_value[i]);\n\t\t\trequire(_to[i].send(_value[i]));\n\t\t}\n\t    emit LogTokenMultiSent(0x000000000000000000000000000000000000bEEF,msg.value);\n\n    }\n\n    function coinSendSameValue(address _tokenAddress, address[] _to, uint _value)  internal {\n\n\t\tuint sendValue = msg.value;\n\t    bool vip = isVIP(msg.sender);\n        if(!vip){\n\t\t    require(sendValue >= txFee);\n        }\n\t\trequire(_to.length <= 255);\n\t\t\n\t\taddress from = msg.sender;\n\t\tuint256 sendAmount = _to.length.sub(1).mul(_value);\n\n        StandardToken token = StandardToken(_tokenAddress);\t\t\n\t\tfor (uint8 i = 1; i < _to.length; i++) {\n\t\t\ttoken.transferFrom(from, _to[i], _value);\n\t\t}\n\n\t    emit LogTokenMultiSent(_tokenAddress,sendAmount);\n\n\t}\n\n\tfunction coinSendDifferentValue(address _tokenAddress, address[] _to, uint[] _value)  internal  {\n\t\tuint sendValue = msg.value;\n\t    bool vip = isVIP(msg.sender);\n        if(!vip){\n\t\t    require(sendValue >= txFee);\n        }\n\n\t\trequire(_to.length == _value.length);\n\t\trequire(_to.length <= 255);\n\n        uint256 sendAmount = _value[0];\n        StandardToken token = StandardToken(_tokenAddress);\n        \n\t\tfor (uint8 i = 1; i < _to.length; i++) {\n\t\t\ttoken.transferFrom(msg.sender, _to[i], _value[i]);\n\t\t}\n        emit LogTokenMultiSent(_tokenAddress,sendAmount);\n\n\t}\n\n    /*\n        Send ether with the same value by a explicit call method\n    */\n\n    function sendEth(address[] _to, uint _value) payable public {\n\t\tethSendSameValue(_to,_value);\n\t}\n\n    /*\n        Send ether with the different value by a explicit call method\n    */\n    function multisend(address[] _to, uint[] _value) payable public {\n\t\t ethSendDifferentValue(_to,_value);\n\t}\n\n\t/*\n        Send ether with the different value by a implicit call method\n    */\n\n\tfunction mutiSendETHWithDifferentValue(address[] _to, uint[] _value) payable public {\n        ethSendDifferentValue(_to,_value);\n\t}\n\n\t/*\n        Send ether with the same value by a implicit call method\n    */\n\n    function mutiSendETHWithSameValue(address[] _to, uint _value) payable public {\n\t\tethSendSameValue(_to,_value);\n\t}\n\n\n    /*\n        Send coin with the same value by a implicit call method\n    */\n\n\tfunction mutiSendCoinWithSameValue(address _tokenAddress, address[] _to, uint _value)  payable public {\n\t    coinSendSameValue(_tokenAddress, _to, _value);\n\t}\n\n    /*\n        Send coin with the different value by a implicit call method, this method can save some fee.\n    */\n\tfunction mutiSendCoinWithDifferentValue(address _tokenAddress, address[] _to, uint[] _value) payable public {\n\t    coinSendDifferentValue(_tokenAddress, _to, _value);\n\t}\n\n    /*\n        Send coin with the different value by a explicit call method\n    */\n    function multisendToken(address _tokenAddress, address[] _to, uint[] _value) payable public {\n\t    coinSendDifferentValue(_tokenAddress, _to, _value);\n    }\n    /*\n        Send coin with the same value by a explicit call method\n    */\n    function drop(address _tokenAddress, address[] _to, uint _value)  payable public {\n\t\tcoinSendSameValue(_tokenAddress, _to, _value);\n\t}\n\n\n\n}",
  "bytecode": "6080604052662386f26fc10000600255670de0b6b3a7640000600355336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611c658061006a6000396000f300608060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630b66f3f51461013857806316fed3e2146101f45780631d833aae1461024b5780632949b11d146102ce5780632e14ef921461036a5780633a11aa20146103ed5780633d06242a14610450578063531ebce51461047d578063665de19b146104d45780638279c7db146105905780638da5cb5b146105d35780639c1f61331461062a578063aa168b4714610634578063aad41a411461068f578063c8813ffd1461072b578063cf82046114610791578063f05d16f7146107bc578063f0a0a299146107e9578063f2fde38b14610814578063f4201c3c14610857578063f48d11af146108b2578063f8b2cb4f14610918578063feaf653d1461095b575b600080fd5b6101f2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506109be565b005b34801561020057600080fd5b506102096109ce565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102cc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001909291905050506109f4565b005b6103686004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610a04565b005b6103eb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190929190505050610a12565b005b61044e6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190929190505050610a22565b005b34801561045c57600080fd5b5061047b60048036038101908080359060200190929190505050610a30565b005b34801561048957600080fd5b50610492610a95565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61058e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610b3f565b005b34801561059c57600080fd5b506105d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b4f565b005b3480156105df57600080fd5b506105e8610c2a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610632610c4f565b005b34801561064057600080fd5b50610675600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d07565b604051808215151515815260200191505060405180910390f35b6107296004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610d27565b005b34801561073757600080fd5b5061078f60048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610d35565b005b34801561079d57600080fd5b506107a6610e20565b6040518082815260200191505060405180910390f35b3480156107c857600080fd5b506107e760048036038101908080359060200190929190505050610e26565b005b3480156107f557600080fd5b506107fe610e8b565b6040518082815260200191505060405180910390f35b34801561082057600080fd5b50610855600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e91565b005b34801561086357600080fd5b50610898600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f66565b604051808215151515815260200191505060405180910390f35b3480156108be57600080fd5b5061091660048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050611013565b005b34801561092457600080fd5b50610959600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110fe565b005b6109bc6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190929190505050611435565b005b6109c9838383611443565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109ff838383611667565b505050565b610a0e8282611874565b5050565b610a1d838383611667565b505050565b610a2c8282611a38565b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a8b57600080fd5b8060038190555050565b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610b16576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610b3c565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b90565b610b4a838383611443565b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610baa57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610be657600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006003543410151515610c6257600080fd5b610c6a610a95565b90508073ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501515610cac57600080fd5b6001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60046020528060005260406000206000915054906101000a900460ff1681565b610d318282611874565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d9257600080fd5b600090505b8151811015610e1c576001600460008484815181101515610db457fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050610d97565b5050565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e8157600080fd5b8060028190555050565b60035481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610eec57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610f6357806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148061100c5750600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b9050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561107057600080fd5b600090505b81518110156110fa57600060046000848481518110151561109257fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050611075565b5050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561115e57600080fd5b611166610a95565b9250600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156111f9578273ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015156111f457600080fd5b61142f565b8391508173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561129757600080fd5b505af11580156112ab573d6000803e3d6000fd5b505050506040513d60208110156112c157600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561137757600080fd5b505af115801561138b573d6000803e3d6000fd5b505050507fc9076fc68f7c8242d2eeb2e0c02b8cafae31bb4fcbe2b89ef1f27846ac6facaf848483604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15b50505050565b61143f8282611a38565b5050565b600080600080600034945061145733610f66565b935083151561147257600254851015151561147157600080fd5b5b8551875114151561148257600080fd5b60ff87511115151561149357600080fd5b8560008151811015156114a257fe5b906020019060200201519250879150600190505b86518160ff1610156115f2578173ffffffffffffffffffffffffffffffffffffffff166323b872dd33898460ff168151811015156114f057fe5b90602001906020020151898560ff1681518110151561150b57fe5b906020019060200201516040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156115cd57600080fd5b505af11580156115e1573d6000803e3d6000fd5b5050505080806001019150506114b6565b7fed5764a1b8be605b492a928d158c22b5e031d1d054b31e8ff6d3211a4dacb7308884604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050505050505050565b60008060008060008034955061167c33610f66565b945084151561169757600254861015151561169657600080fd5b5b60ff8851111515156116a857600080fd5b3393506116d2876116c460018b51611bc690919063ffffffff16565b611be290919063ffffffff16565b9250889150600190505b87518160ff1610156117fe578173ffffffffffffffffffffffffffffffffffffffff166323b872dd858a8460ff1681518110151561171657fe5b906020019060200201518a6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156117d957600080fd5b505af11580156117ed573d6000803e3d6000fd5b5050505080806001019150506116dc565b7fed5764a1b8be605b492a928d158c22b5e031d1d054b31e8ff6d3211a4dacb7308984604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1505050505050505050565b60008060008084600081518110151561188957fe5b9060200190602002015193503492506118a133610f66565b915081156118bd578383101515156118b857600080fd5b6118e1565b6118d260025485611c1890919063ffffffff16565b83101515156118e057600080fd5b5b845186511415156118f157600080fd5b60ff86511115151561190257600080fd5b600190505b85518160ff1610156119c357611940858260ff1681518110151561192757fe5b9060200190602002015184611bc690919063ffffffff16565b9250858160ff1681518110151561195357fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff166108fc868360ff1681518110151561198757fe5b906020019060200201519081150290604051600060405180830381858888f1935050505015156119b657600080fd5b8080600101915050611907565b7fed5764a1b8be605b492a928d158c22b5e031d1d054b31e8ff6d3211a4dacb73061beef34604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1505050505050565b600080600080611a6585611a5760018951611bc690919063ffffffff16565b611be290919063ffffffff16565b9350349250611a7333610f66565b91508115611a8f57838310151515611a8a57600080fd5b611ab3565b611aa460025485611c1890919063ffffffff16565b8310151515611ab257600080fd5b5b60ff865111151515611ac457600080fd5b600190505b85518160ff161015611b5157611ae88584611bc690919063ffffffff16565b9250858160ff16815181101515611afb57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f193505050501515611b4457600080fd5b8080600101915050611ac9565b7fed5764a1b8be605b492a928d158c22b5e031d1d054b31e8ff6d3211a4dacb73061beef34604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1505050505050565b6000828211151515611bd757600080fd5b818303905092915050565b60008082840290506000841480611c035750828482811515611c0057fe5b04145b1515611c0e57600080fd5b8091505092915050565b6000808284019050838110151515611c2f57600080fd5b80915050929150505600a165627a7a72305820ac1a44818e2ae2aad324e2f43c59d795be6581920d3ec46093401067ab8e98470029"
}