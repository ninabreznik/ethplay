{
  "address": "0x9b0774d09bab5d76dd2947024dde6febde28cb4f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ElpisToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-16\n*/\n\npragma solidity ^0.4.24;\n\ncontract ERC20 {\n  function totalSupply() public view returns (uint256);\n\n  function balanceOf(address _who) public view returns (uint256);\n\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transfer(address _to, uint256 _value) public returns (bool);\n\n  function approve(address _spender, uint256 _value)\n    public returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\ncontract Ownable {\n\n  // Owner's address\n  address public owner;\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    require(_newOwner != address(0));\n    emit OwnerChanged(owner, _newOwner);\n    owner = _newOwner;\n  }\n\n  event OwnerChanged(address indexed previousOwner,address indexed newOwner);\n\n}\n\ncontract Pausable is Ownable {\n\n    bool public paused = false;\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused, \"Contract is paused.\");\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n\n    event Pause();\n    event Unpause();\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\ncontract StandardToken is ERC20 {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\ncontract ElpisToken is PausableToken {\n\n    // token name\n    string public constant name = \"Elpis AI Trading Token\";\n    \n    // token symbol\n    string public constant symbol = \"ELP\";\n\n    // token decimals\n    uint8 public constant decimals = 18;\n    \n    // contract deployment block\n    uint256 public deploymentBlock;\n\n    constructor() public {\n        deploymentBlock = block.number;\n        totalSupply_ = 250000000 ether;\n        balances[msg.sender] = totalSupply_;\n        \n        // special contributors\n        transfer(0x6467704b5CD5a5A380656886AE0284133825D378, 7000000000000000000000000);\n        transfer(0x7EF7F9104867454f0E3cd8B4aE99045a01f605c0, 1000000000000000000000000);\n\n        // transfer to existing contributors\n        transfer(0x1499493fd2fdb2c6d536569322fe37f5da24a5c9, 4672955120000000000000000);\n        transfer(0x22a5c82364faa085394b6e82d8d39643d0ad38e7, 2500000000000000000000000);\n        transfer(0xdc64259785a9dbae1b40fee4dfe2055af4fefd6b, 2000000000000000000000000);\n        transfer(0xbd14c21b0ed5fefee65d9c0609136fff8aafb1e8, 1500000000000000000000000);\n        transfer(0x4aca633f98559bb7e6025c629e1789537b9ee72f, 1000000000000000000000000);\n        transfer(0x4aeac209d18151f79ff5dc320619a554872b099d, 1000000000000000000000000);\n        transfer(0x9d3b6f11c9f17bf98e1bc8618a17bb1e9928e1c1, 1000000000000000000000000);\n        transfer(0xffdfb7ef8e05b02a6bc024c15ce5e89f0561a6f7, 646900270000000000000000);\n        transfer(0x6d91062c251eb5042a71312e704c297fb924409c, 379937110000000000000000);\n        transfer(0x5182531e3ebeb35af19e00fa5de03a12d46eba72, 379200360000000000000000);\n        transfer(0x8b751c5d881ab355a0b5109ea1a1a7e0a7c0ea36, 125000000000000000000000);\n        transfer(0x6a877aa35ef434186985d07270ba50685d1b7ada, 60000000000000000000000);\n        transfer(0x9ecedc01e9fde532a5f30f398cbc0261e88136a1, 28264000000000000000000);\n        transfer(0xd24400ae8bfebb18ca49be86258a3c749cf46853, 22641509433000000000000);\n        transfer(0x964fcf14cbbd03b89caab136050cc02e6949d5e7, 15094339622000000000000);\n        transfer(0xdc8ce4f0278968f48c059461abbc59c27c08b6f0, 10062893081000000000000);\n        transfer(0x2c06c71e718ca02435804b0ce313a1333cb06d02, 9811320754000000000000);\n        transfer(0x9cca8e43a9a37c3969bfd0d3e0cdf60e732c0cee, 8050314464000000000000);\n        transfer(0xa48f71410d01ec4ca59c36af3a2e2602c28d8fc2, 7547169811000000000000);\n        transfer(0xeb5e9a1469da277b056a4bc250af4489eda36621, 5031446540000000000000);\n        transfer(0xbb5c14e2a821c0bada4ae7217d23c919472f7f77, 3773584905000000000000);\n        transfer(0x46b5c439228015e2596c7b2da8e81a705990c6ac, 3773584905000000000000);\n        transfer(0x3e7a3fb0976556aaf12484de68350ac3b6ae4c40, 2515723270000000000000);\n        transfer(0xe14362f83a0625e57f1ca92d515c3c060d7d5659, 2264150943000000000000);\n        transfer(0x795df9a9699b399ffc512732d2c797c781c22bc7, 1509433962000000000000);\n        transfer(0xaca9fd46bfa5e903a75fb604f977792bd349a1af, 1396226415000000000000);\n        transfer(0xe2cdffd7b906cdd7ae74d8eb8553328a66d12b84, 1368887886000000000000);\n        transfer(0xee76d34d75ee0a72540abca5b26270b975f6adb6, 1320754716000000000000);\n        transfer(0xc44aa2d68d51fa5195b3d03af14a3706feeb29fc, 1320754716000000000000);\n        transfer(0xe694d8dd4b01bb12cb44568ebed792bd45a3f2cf, 1257861635000000000000);\n        transfer(0x9484e40deff4c6b4a475fe7625d3c70c71f54db7, 1207547169000000000000);\n        transfer(0x15ae5afd84c15f740a28a45fe166e161e3ed9251, 1132075471000000000000);\n        transfer(0x7fd9138acbcf9b1600eea70befe87729cc30968b, 1006289308000000000000);\n        transfer(0xfd3c389d724a230b4d086a77c83013ef6b4afdf1, 766037735000000000000);\n        transfer(0x774c988ec49df627093b6755c3baebb0d9a9d0b3, 758650475000000000000);\n        transfer(0x7a0702d58d6a4b6f06a9d275dc027555148e81c7, 754716981000000000000);\n        transfer(0x4b1b467a6a80af7ebc53051015e089b20588f1e7, 566037735000000000000);\n        transfer(0x0f6e5559ba758638d0931528967a54b9b5182b93, 566037735000000000000);\n        transfer(0xc1ec7ea396923d1a866a4f3798a87d1a92b9e37a, 556345720000000000000);\n        transfer(0x64bea49dd8d3a328a4aa4c739d776b0bfdda6128, 503144654000000000000);\n        transfer(0x472745526b7f72f7a9eb117e738f309d2abcc1a2, 503144654000000000000);\n        transfer(0xe3f68a6b6b39534a975eb9605dd71c8e36989e52, 490566037000000000000);\n        transfer(0x0caef953d12a24680c821d6e292a74634351d5a6, 452830188000000000000);\n        transfer(0x3f5d8a83b470b9d51b9c5a9ac1928e4e77a37842, 427942513000000000000);\n        transfer(0xfbb1b73c4f0bda4f67dca266ce6ef42f520fbb98, 422382641000000000000);\n        transfer(0x0b9fe4475e6a5ecbfb1fefc56c4c28fe97064dc1, 415094339000000000000);\n        transfer(0x83658d1d001092cabf33502cd1c66c91c16a18a6, 377358490000000000000);\n        transfer(0x236bea162cc2115b20309c632619ac876682becc, 94339622000000000000);\n        transfer(0xdfb2b0210081bd17bc30bd163c415ba8a0f3e316, 60314465000000000000);\n        transfer(0x92df16e27d3147cf05e190e633bf934e654eec86, 50314465000000000000);\n        transfer(0x6dd451c3f06a24da0b37d90e709f0e9f08987673, 40314465000000000000);\n        transfer(0x550c6de28d89d876ca5b45e3b87e5ae4374aa770, 1000000000000000000);\n    }\n\n    /**\n    * @dev Revertible fallback function\n    */\n    function() external payable {\n        revert();\n    }\n\n    /**\n    * @dev This method can be used by the owner to extract mistakenly sent tokens\n    * or Ether sent to this contract.\n    * @param _token address The address of the token contract that you want to\n    * recover set to 0 in case you want to extract ether.\n    */\n    function claimTokens(address _token) public onlyOwner {\n        if (_token == address(0)) {\n            owner.transfer(address(this).balance);\n            return;\n        }\n\n        ERC20 token = ERC20(_token);\n        uint balance = token.balanceOf(address(this));\n        token.transfer(owner, balance);\n        emit ClaimedTokens(_token, owner, balance);\n    }\n\n    /**\n    * @dev Owner can burn a specific amount of tokens from the target address.\n    * @param _target address The address which you want to burn tokens from\n    * @param _value uint256 The amount of token to be burned\n    */\n    function burn(address _target, uint256 _value) public onlyOwner {\n        require(_value <= balances[_target]);\n        balances[_target] = balances[_target].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(_target, _value);\n        emit Transfer(_target, address(0), _value);\n    }\n\n    /** \n    * Event for logging burning tokens\n    * @param burner whose tokens are burned\n    * @param value value of burned tokens\n    */\n    event Burn(address indexed burner, uint256 value);\n\n    /** \n    * Event for logging when tokens are claimed\n    * @param token claimed token\n    * @param owner who owns the contract\n    * @param amount amount of the claimed token\n    */\n    event ClaimedTokens(address indexed token, address indexed owner, uint256 amount);\n\n}",
  "bytecode": "60806040526003805460a060020a60ff02191690553480156200002157600080fd5b5060038054600160a060020a03191633908117909155436004556acecb8f27f4200f3a00000060028190556000918252602082905260409091205562000090736467704b5cd5a5a380656886ae0284133825d3786a05ca4ec2a79a7f6700000064010000000062000b3e810204565b50620000c4737ef7f9104867454f0e3cd8b4ae99045a01f605c069d3c21bcecceda100000064010000000062000b3e810204565b50620000f9731499493fd2fdb2c6d536569322fe37f5da24a5c96a03dd8967973ead9718000064010000000062000b3e810204565b506200012e7322a5c82364faa085394b6e82d8d39643d0ad38e76a021165458500521280000064010000000062000b3e810204565b506200016373dc64259785a9dbae1b40fee4dfe2055af4fefd6b6a01a784379d99db4200000064010000000062000b3e810204565b506200019873bd14c21b0ed5fefee65d9c0609136fff8aafb1e86a013da329b633647180000064010000000062000b3e810204565b50620001cc734aca633f98559bb7e6025c629e1789537b9ee72f69d3c21bcecceda100000064010000000062000b3e810204565b5062000200734aeac209d18151f79ff5dc320619a554872b099d69d3c21bcecceda100000064010000000062000b3e810204565b5062000234739d3b6f11c9f17bf98e1bc8618a17bb1e9928e1c169d3c21bcecceda100000064010000000062000b3e810204565b506200026873ffdfb7ef8e05b02a6bc024c15ce5e89f0561a6f76988fc88ae0c7a0cab000064010000000062000b3e810204565b506200029c736d91062c251eb5042a71312e704c297fb924409c6950746e97c7eb112f000064010000000062000b3e810204565b50620002d0735182531e3ebeb35af19e00fa5de03a12d46eba7269504c7e21fa631424000064010000000062000b3e810204565b5062000304738b751c5d881ab355a0b5109ea1a1a7e0a7c0ea36691a784379d99db420000064010000000062000b3e810204565b5062000338736a877aa35ef434186985d07270ba50685d1b7ada690cb49b44ba602d80000064010000000062000b3e810204565b506200036c739ecedc01e9fde532a5f30f398cbc0261e88136a16905fc31cb6ae8f8a0000064010000000062000b3e810204565b50620003a073d24400ae8bfebb18ca49be86258a3c749cf468536904cb661045748d00900064010000000062000b3e810204565b50620003d473964fcf14cbbd03b89caab136050cc02e6949d5e7690332440ad8f85e00600064010000000062000b3e810204565b506200040873dc8ce4f0278968f48c059461abbc59c27c08b6f069022182b1e5ad4d1e900064010000000062000b3e810204565b506200043c732c06c71e718ca02435804b0ce313a1333cb06d02690213df6d732863b5200064010000000062000b3e810204565b5062000470739cca8e43a9a37c3969bfd0d3e0cdf60e732c0cee6901b4688e509d2d2e000064010000000062000b3e810204565b50620004a473a48f71410d01ec4ca59c36af3a2e2602c28d8fc269019922056c7c2f00300064010000000062000b3e810204565b50620004d873eb5e9a1469da277b056a4bc250af4489eda36621690110c158f2623c3cc00064010000000062000b3e810204565b506200050b73bb5c14e2a821c0bada4ae7217d23c919472f7f7768cc9102b5c9ad2d900064010000000062000b3e810204565b506200053e7346b5c439228015e2596c7b2da8e81a705990c6ac68cc9102b5c9ad2d900064010000000062000b3e810204565b5062000571733e7a3fb0976556aaf12484de68350ac3b6ae4c40688860ac79311e1e600064010000000062000b3e810204565b50620005a473e14362f83a0625e57f1ca92d515c3c060d7d5659687abd6806ac34b4f00064010000000062000b3e810204565b50620005d773795df9a9699b399ffc512732d2c797c781c22bc76851d39aaf1d7878a00064010000000062000b3e810204565b506200060a73aca9fd46bfa5e903a75fb604f977792bd349a1af684bb088aeeafc21f00064010000000062000b3e810204565b506200063d73e2cdffd7b906cdd7ae74d8eb8553328a66d12b84684a3522b7a35d6ae00064010000000062000b3e810204565b506200067073ee76d34d75ee0a72540abca5b26270b975f6adb668479927588b29edc00064010000000062000b3e810204565b50620006a373c44aa2d68d51fa5195b3d03af14a3706feeb29fc68479927588b29edc00064010000000062000b3e810204565b50620006d673e694d8dd4b01bb12cb44568ebed792bd45a3f2cf684430563c988f0f300064010000000062000b3e810204565b5062000709739484e40deff4c6b4a475fe7625d3c70c71f54db7684176155858ad97100064010000000062000b3e810204565b506200073c7315ae5afd84c15f740a28a45fe166e161e3ed9251683d5eb402e1b007f00064010000000062000b3e810204565b506200076f737fd9138acbcf9b1600eea70befe87729cc30968b68368d11ca13a5a5c00064010000000062000b3e810204565b50620007a273fd3c389d724a230b4d086a77c83013ef6b4afdf1682986e8bd5733d1700064010000000062000b3e810204565b50620007d573774c988ec49df627093b6755c3baebb0d9a9d0b368292063eb82905db00064010000000062000b3e810204565b5062000808737a0702d58d6a4b6f06a9d275dc027555148e81c76828e9cd578ebc3c500064010000000062000b3e810204565b506200083b734b1b467a6a80af7ebc53051015e089b20588f1e7681eaf5a00fc6db1700064010000000062000b3e810204565b506200086e730f6e5559ba758638d0931528967a54b9b5182b93681eaf5a00fc6db1700064010000000062000b3e810204565b50620008a173c1ec7ea396923d1a866a4f3798a87d1a92b9e37a681e28d90cb1acef800064010000000062000b3e810204565b50620008d47364bea49dd8d3a328a4aa4c739d776b0bfdda6128681b4688e509d2d2e00064010000000062000b3e810204565b506200090773472745526b7f72f7a9eb117e738f309d2abcc1a2681b4688e509d2d2e00064010000000062000b3e810204565b506200093a73e3f68a6b6b39534a975eb9605dd71c8e36989e52681a97f8ab857022500064010000000062000b3e810204565b506200096d730caef953d12a24680c821d6e292a74634351d5a668188c4800c9f15ac00064010000000062000b3e810204565b50620009a0733f5d8a83b470b9d51b9c5a9ac1928e4e77a37842681732e5383ca4fc100064010000000062000b3e810204565b50620009d373fbb1b73c4f0bda4f67dca266ce6ef42f520fbb986816e5bc961c4058100064010000000062000b3e810204565b5062000a06730b9fe4475e6a5ecbfb1fefc56c4c28fe97064dc168168097560e7293300064010000000062000b3e810204565b5062000a397383658d1d001092cabf33502cd1c66c91c16a18a6681474e6ab52f3cba00064010000000062000b3e810204565b5062000a6c73236bea162cc2115b20309c632619ac876682becc68051d39aa6052a0600064010000000062000b3e810204565b5062000a9f73dfb2b0210081bd17bc30bd163c415ba8a0f3e31668034508065b96bb100064010000000062000b3e810204565b5062000ad27392df16e27d3147cf05e190e633bf934e654eec866802ba40e3570cd3100064010000000062000b3e810204565b5062000b05736dd451c3f06a24da0b37d90e709f0e9f0898767368022f79c05282eb100064010000000062000b3e810204565b5062000b3773550c6de28d89d876ca5b45e3b87e5ae4374aa770670de0b6b3a764000064010000000062000b3e810204565b5062000d09565b60035460009074010000000000000000000000000000000000000000900460ff161562000bcc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f436f6e7472616374206973207061757365642e00000000000000000000000000604482015290519081900360640190fd5b62000be6838364010000000062000e6162000bed82021704565b9392505050565b3360009081526020819052604081205482111562000c0a57600080fd5b600160a060020a038316151562000c2057600080fd5b3360009081526020819052604090205462000c4a908364010000000062000e4f62000ce282021704565b3360009081526020819052604080822092909255600160a060020a0385168152205462000c86908364010000000062000fd962000cf582021704565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b60008282111562000cef57fe5b50900390565b8181018281101562000d0357fe5b92915050565b6110388062000d196000396000f3006080604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461010b578063095ea7b31461019557806318160ddd146101cd57806323b872dd146101f4578063313ce5671461021e5780633f4ba83a146102495780635c975abb14610260578063661884631461027557806370a082311461029957806382100e3f146102ba5780638456cb59146102cf5780638da5cb5b146102e457806395d89b41146103155780639dc29fac1461032a578063a9059cbb1461034e578063d73dd62314610372578063dd62ed3e14610396578063df8de3e7146103bd578063f2fde38b146103de575b600080fd5b34801561011757600080fd5b506101206103ff565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015a578181015183820152602001610142565b50505050905090810190601f1680156101875780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a157600080fd5b506101b9600160a060020a0360043516602435610436565b604080519115158252519081900360200190f35b3480156101d957600080fd5b506101e261049a565b60408051918252519081900360200190f35b34801561020057600080fd5b506101b9600160a060020a03600435811690602435166044356104a0565b34801561022a57600080fd5b50610233610506565b6040805160ff9092168252519081900360200190f35b34801561025557600080fd5b5061025e61050b565b005b34801561026c57600080fd5b506101b9610583565b34801561028157600080fd5b506101b9600160a060020a0360043516602435610593565b3480156102a557600080fd5b506101e2600160a060020a03600435166105f0565b3480156102c657600080fd5b506101e261060b565b3480156102db57600080fd5b5061025e610611565b3480156102f057600080fd5b506102f96106c7565b60408051600160a060020a039092168252519081900360200190f35b34801561032157600080fd5b506101206106d6565b34801561033657600080fd5b5061025e600160a060020a036004351660243561070d565b34801561035a57600080fd5b506101b9600160a060020a0360043516602435610825565b34801561037e57600080fd5b506101b9600160a060020a0360043516602435610882565b3480156103a257600080fd5b506101e2600160a060020a03600435811690602435166108df565b3480156103c957600080fd5b5061025e600160a060020a036004351661090a565b3480156103ea57600080fd5b5061025e600160a060020a0360043516610af0565b60408051808201909152601681527f456c7069732041492054726164696e6720546f6b656e00000000000000000000602082015281565b60035460009060a060020a900460ff1615610489576040805160e560020a62461bcd0281526020600482015260136024820152600080516020610fed833981519152604482015290519081900360640190fd5b6104938383610b85565b9392505050565b60025490565b60035460009060a060020a900460ff16156104f3576040805160e560020a62461bcd0281526020600482015260136024820152600080516020610fed833981519152604482015290519081900360640190fd5b6104fe848484610beb565b949350505050565b601281565b600354600160a060020a0316331461052257600080fd5b60035460a060020a900460ff16151561053a57600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60035460a060020a900460ff1681565b60035460009060a060020a900460ff16156105e6576040805160e560020a62461bcd0281526020600482015260136024820152600080516020610fed833981519152604482015290519081900360640190fd5b6104938383610d60565b600160a060020a031660009081526020819052604090205490565b60045481565b600354600160a060020a0316331461062857600080fd5b60035460a060020a900460ff1615610678576040805160e560020a62461bcd0281526020600482015260136024820152600080516020610fed833981519152604482015290519081900360640190fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b60408051808201909152600381527f454c500000000000000000000000000000000000000000000000000000000000602082015281565b600354600160a060020a0316331461072457600080fd5b600160a060020a03821660009081526020819052604090205481111561074957600080fd5b600160a060020a038216600090815260208190526040902054610772908263ffffffff610e4f16565b600160a060020a03831660009081526020819052604090205560025461079e908263ffffffff610e4f16565b600255604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60035460009060a060020a900460ff1615610878576040805160e560020a62461bcd0281526020600482015260136024820152600080516020610fed833981519152604482015290519081900360640190fd5b6104938383610e61565b60035460009060a060020a900460ff16156108d5576040805160e560020a62461bcd0281526020600482015260136024820152600080516020610fed833981519152604482015290519081900360640190fd5b6104938383610f40565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6003546000908190600160a060020a0316331461092657600080fd5b600160a060020a038316151561097657600354604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015610970573d6000803e3d6000fd5b50610aeb565b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051849350600160a060020a038416916370a082319160248083019260209291908290030181600087803b1580156109da57600080fd5b505af11580156109ee573d6000803e3d6000fd5b505050506040513d6020811015610a0457600080fd5b5051600354604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810184905290519293509084169163a9059cbb916044808201926020929091908290030181600087803b158015610a7857600080fd5b505af1158015610a8c573d6000803e3d6000fd5b505050506040513d6020811015610aa257600080fd5b5050600354604080518381529051600160a060020a03928316928616917ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c919081900360200190a35b505050565b600354600160a060020a03163314610b0757600080fd5b600160a060020a0381161515610b1c57600080fd5b600354604051600160a060020a038084169216907fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c90600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b336000818152600160209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600160a060020a038316600090815260208190526040812054821115610c1057600080fd5b600160a060020a0384166000908152600160209081526040808320338452909152902054821115610c4057600080fd5b600160a060020a0383161515610c5557600080fd5b600160a060020a038416600090815260208190526040902054610c7e908363ffffffff610e4f16565b600160a060020a038086166000908152602081905260408082209390935590851681522054610cb3908363ffffffff610fd916565b600160a060020a03808516600090815260208181526040808320949094559187168152600182528281203382529091522054610cf5908363ffffffff610e4f16565b600160a060020a03808616600081815260016020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b336000908152600160209081526040808320600160a060020a0386168452909152812054808310610db457336000908152600160209081526040808320600160a060020a0388168452909152812055610de9565b610dc4818463ffffffff610e4f16565b336000908152600160209081526040808320600160a060020a03891684529091529020555b336000818152600160209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600082821115610e5b57fe5b50900390565b33600090815260208190526040812054821115610e7d57600080fd5b600160a060020a0383161515610e9257600080fd5b33600090815260208190526040902054610eb2908363ffffffff610e4f16565b3360009081526020819052604080822092909255600160a060020a03851681522054610ee4908363ffffffff610fd916565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600160209081526040808320600160a060020a0386168452909152812054610f74908363ffffffff610fd916565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b81810182811015610fe657fe5b929150505600436f6e7472616374206973207061757365642e00000000000000000000000000a165627a7a723058208620775a4a33cc7265757c8c7641d82d3007019a7700a4c0b9efe50845f3d9b20029"
}