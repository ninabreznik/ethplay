{
  "address": "0x5790f7a45b365579a9de0ef90c0d78e10280a426",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Crowdsale",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-09\n*/\n\npragma solidity ^0.5.1;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        require(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n        require(token.approve(spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        require(token.approve(spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        require(token.approve(spender, newAllowance));\n    }\n}\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <[email protected]?.com>, Eenae <[email protected]>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n    /// @dev counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n\n    constructor () internal {\n        // The counter starts at one to prevent changing it from zero to a non-zero\n        // value, which is a more expensive operation.\n        _guardCounter = 1;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter);\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale,\n * allowing investors to purchase tokens with ether. This contract implements\n * such functionality in its most fundamental form and can be extended to provide additional\n * functionality and/or custom behavior.\n * The external interface represents the basic interface for purchasing tokens, and conform\n * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\n * behavior.\n */\ncontract Crowdsale is ReentrancyGuard, Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    \n    // The token being sold\n    IERC20 private _token;\n    // start ICO\n    uint256 public _startStage1;\n    uint256 public _startStage2;\n    // Address where funds are collected\n    address payable private _wallet;\n    uint256 public _maxPay;\n    uint256 public _minPay;\n\n    // How many token units a buyer gets per wei.\n    // The rate is the conversion between wei and the smallest and indivisible token unit.\n    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\n    // 1 wei will give you 1 unit, or 0.001 TOK.\n    // token - EUR\n    uint256 private _rate; // 6 decimals\n\n    // Amount of wei raised\n    uint256 private _weiRaised;     \n    //whitelist\n    mapping (address => uint32) public whitelist;\n    //for startStage2\n    uint256   _totalNumberPayments = 0;\n    uint256   _numberPaidPayments = 0;\n    mapping(uint256 => address)  _paymentAddress;\n    mapping(uint256 => uint256)  _paymentDay;\n    mapping(uint256 => uint256)   _paymentValue;\n    mapping(uint256 => uint256)   _totalAmountDay;\n    mapping(uint256 => uint8)   _paymentFlag;\n    uint256 public  _amountTokensPerDay;\n    /**\n     * Event for token purchase logging\n     * @param purchaser who paid for the tokens\n     * @param beneficiary who got the tokens\n     * @param value weis paid for purchase\n     * @param amount amount of tokens purchased\n     */\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    constructor () public {\n        _startStage1 = 1554737400;\n        _startStage2 = 1555601401;\n        _rate = 224;\n        _wallet = 0x68A924EA85c96e74A05cf12465cB53702a560811;\n        _token = IERC20(0xC0D766017141dd4866738C1e704Be6feDc97B904);\n        _amountTokensPerDay = 1000000000000000000;\n        _maxPay = 1 * 280 ether;\n        _minPay = 1 * 5.6 ether;\n\n        require(_rate > 0);\n        require(_wallet != address(0));\n        require(address(_token) != address(0));\n        require(_startStage2 > _startStage1 + 1 * 10 days);\n    }\n    //  1 - allow, 0 - denied \n    function setWhiteList(address _address, uint32 _flag) public onlyOwner  {\n      whitelist[_address] = _flag;\n    }\n    // 1 - allow\n    function addAddressToWhiteList(address[] memory _addr) public onlyOwner {\n      for(uint256 i = 0; i < _addr.length; i++) {\n       whitelist[_addr[i]] = 1;\n      }\n    }\n    // 0 - denied \n    function subAddressToWhiteList(address[] memory _addr) public onlyOwner {\n      for(uint256 i = 0; i < _addr.length; i++) {\n        whitelist[_addr[i]] = 0;\n      }\n    } \n    \n    function setRate(uint256 rate) public onlyOwner  {\n        _rate = rate;\n    } \n    function setMaxPay(uint256 maxPay) public onlyOwner  {\n        _maxPay = maxPay;\n    }     \n    function setMinPay(uint256 minPay) public onlyOwner  {\n        _minPay = minPay;\n    }      \n    function _returnTokens(address wallet, uint256 value) public onlyOwner {\n        _token.transfer(wallet, value);\n    }  \n    /**\n     * @dev fallback function ***DO NOT OVERRIDE***\n     * Note that other contracts will transfer fund with a base gas stipend\n     * of 2300, which is not enough to call buyTokens. Consider calling\n     * buyTokens directly when purchasing tokens from a contract.\n     */\n    function () external payable {\n        buyTokens(msg.sender);\n    }\n\n    /**\n     * @return the token being sold.\n     */\n    function token() public view returns (IERC20) {\n        return _token;\n    }\n\n    /**\n     * @return the address where funds are collected.\n     */\n    function wallet() public view returns (address payable) {\n        return _wallet;\n    }\n\n    /**\n     * @return the number of token units a buyer gets per wei.\n     */\n    function rate() public view returns (uint256) {\n        return _rate;\n    }\n\n    /**\n     * @return the amount of wei raised.\n     */\n    function weiRaised() public view returns (uint256) {\n        return _weiRaised;\n    }\n\n    /**\n     * @dev low level token purchase ***DO NOT OVERRIDE***\n     * This function has a non-reentrancy guard, so it shouldn't be called by\n     * another `nonReentrant` function.\n     * @param beneficiary Recipient of the token purchase\n     */\n    function buyTokens(address beneficiary) public nonReentrant payable {\n        uint256 weiAmount;\n        uint256 tokens;\n        \n        weiAmount = msg.value;\n        \n        _preValidatePurchase(beneficiary, weiAmount);   \n      \n        if (now >= _startStage1 && now < _startStage2){\n          require(whitelist[msg.sender] == 1);\n          // calculate token amount to be created\n          tokens = _getTokenAmount(weiAmount);\n\n          // update state\n          _weiRaised = _weiRaised.add(weiAmount);\n\n          _processPurchase(beneficiary, tokens);\n          emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\n\n          _forwardFunds();\n        }\n        if (now >= _startStage2 && now < _startStage2 + 1 * 1 seconds){\n          _totalNumberPayments = _totalNumberPayments + 1; \n          _paymentAddress[_totalNumberPayments] = msg.sender;\n          _paymentValue[_totalNumberPayments] = msg.value;\n          _paymentDay[_totalNumberPayments] = _getDayNumber();\n          _totalAmountDay[_getDayNumber()] = _totalAmountDay[_getDayNumber()] + msg.value;\n          _forwardFunds();\n        }\n        \n    }\n    function makePayment(uint256 numberPayments) public onlyOwner{\n        address addressParticipant;\n        uint256 paymentValue;\n        uint256 dayNumber; \n        uint256 totalPaymentValue;\n        uint256 tokensAmount;\n        if (numberPayments > _totalNumberPayments.sub(_numberPaidPayments)){\n          numberPayments = _totalNumberPayments.sub(_numberPaidPayments);  \n        }\n        uint256 startNumber = _numberPaidPayments.add(1);\n        uint256 endNumber = _numberPaidPayments.add(numberPayments);\n        for (uint256 i = startNumber; i <= endNumber; ++i) {\n          if (_paymentFlag[i] != 1){\n            dayNumber = _paymentDay[i];\n            if (_getDayNumber() > dayNumber){   \n              addressParticipant = _paymentAddress[i];\n              paymentValue = _paymentValue[i];\n              totalPaymentValue = _totalAmountDay[dayNumber];\n              tokensAmount = _amountTokensPerDay.mul(paymentValue).div(totalPaymentValue);\n              _token.safeTransfer(addressParticipant, tokensAmount);\n              _paymentFlag[i] = 1;\n              _numberPaidPayments = _numberPaidPayments + 1;\n            }\n          }\n        }    \n    }\n    /**\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\n     * Use `super` in contracts that inherit from Crowdsale to extend their validations.\n     * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n     *     super._preValidatePurchase(beneficiary, weiAmount);\n     *     require(weiRaised().add(weiAmount) <= cap);\n     * @param beneficiary Address performing the token purchase\n     * @param weiAmount Value in wei involved in the purchase\n     */ \n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n        require(beneficiary != address(0));\n        require(weiAmount != 0);\n        require(weiAmount >= _minPay); \n        require(weiAmount <= _maxPay);\n        require(now >= _startStage1 && now <= _startStage2 + 1 * 1 seconds);\n        \n    }\n    function _getAmountUnpaidPayments() public view returns (uint256){\n        return _totalNumberPayments.sub(_numberPaidPayments);\n    }    \n    function _getDayNumber() internal view returns (uint256){\n        return ((now.add(1 seconds)).sub(_startStage2)).div(1 seconds);\n    }\n\n    /**\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\n     * its tokens.\n     * @param beneficiary Address performing the token purchase\n     * @param tokenAmount Number of tokens to be emitted\n     */\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n        _token.safeTransfer(beneficiary, tokenAmount);\n    }\n\n    /**\n     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\n     * tokens.\n     * @param beneficiary Address receiving the tokens\n     * @param tokenAmount Number of tokens to be purchased\n     */\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\n        _deliverTokens(beneficiary, tokenAmount);\n    }\n\n    /**\n     * @dev Override to extend the way in which ether is converted to tokens.\n     * @param weiAmount Value in wei to be converted into tokens\n     * @return Number of tokens that can be purchased with the specified _weiAmount\n     */\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n        // tokensAmount = weiAmount.mul(_rateETHEUR).mul(10000).div(_rate);\n       // return weiAmount.mul(_rate);\n           uint256 bonus;\n    if (now >= _startStage1 && now < _startStage1 + 1 * 10 days){\n      bonus = 40;    \n    }\n      return weiAmount.mul(1000000).div(_rate) + (weiAmount.mul(1000000).mul(bonus).div(_rate)).div(100);\n    }\n\n    /**\n     * @dev Determines how ETH is stored/forwarded on purchases.\n     */\n    function _forwardFunds() internal {\n        _wallet.transfer(msg.value);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"_getAmountUnpaidPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"subAddressToWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_amountTokensPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numberPayments\",\"type\":\"uint256\"}],\"name\":\"makePayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_maxPay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxPay\",\"type\":\"uint256\"}],\"name\":\"setMaxPay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_returnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minPay\",\"type\":\"uint256\"}],\"name\":\"setMinPay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_minPay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"addAddressToWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_startStage1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_flag\",\"type\":\"uint32\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_startStage2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600b556000600c5534801561001a57600080fd5b50600160008190555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3635cab68f8600381905550635cb897f960048190555060e06008819055507368a924ea85c96e74a05cf12465cb53702a560811600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073c0d766017141dd4866738c1e704be6fedc97b904600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550670de0b6b3a7640000601281905550680f2dc7d47f15600000600681905550674db732547630000060078190555060006008541115156101e857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561024657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156102a457600080fd5b620d2f00600354016004541115156102bb57600080fd5b611700806102ca6000396000f3fe608060405260043610610138576000357c01000000000000000000000000000000000000000000000000000000009004806315ee121e146101435780631d7ca2be1461016e5780632c4e722e1461023357806334fcf4371461025e5780634042b66f14610299578063411c7b69146102c45780635114cb52146102ef578063521eb2731461032a578063571858b714610381578063669a2448146103ac578063715018a6146103e75780638da5cb5b146103fe5780638f32d59b14610455578063936d02f3146104845780639b19251a146104df5780639e3b3ed814610550578063b33dda6f1461058b578063dfa9b440146105b6578063ec8ac4d81461067b578063f05d72cd146106bf578063f2fde38b146106ea578063f677b4251461073b578063fc0c546a1461079c578063ff099c0e146107f3575b6101413361081e565b005b34801561014f57600080fd5b50610158610a76565b6040518082815260200191505060405180910390f35b34801561017a57600080fd5b506102316004803603602081101561019157600080fd5b81019080803590602001906401000000008111156101ae57600080fd5b8201836020820111156101c057600080fd5b803590602001918460208302840111640100000000831117156101e257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610a94565b005b34801561023f57600080fd5b50610248610b3d565b6040518082815260200191505060405180910390f35b34801561026a57600080fd5b506102976004803603602081101561028157600080fd5b8101908080359060200190929190505050610b47565b005b3480156102a557600080fd5b506102ae610b64565b6040518082815260200191505060405180910390f35b3480156102d057600080fd5b506102d9610b6e565b6040518082815260200191505060405180910390f35b3480156102fb57600080fd5b506103286004803603602081101561031257600080fd5b8101908080359060200190929190505050610b74565b005b34801561033657600080fd5b5061033f610d84565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561038d57600080fd5b50610396610dae565b6040518082815260200191505060405180910390f35b3480156103b857600080fd5b506103e5600480360360208110156103cf57600080fd5b8101908080359060200190929190505050610db4565b005b3480156103f357600080fd5b506103fc610dd1565b005b34801561040a57600080fd5b50610413610ea5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561046157600080fd5b5061046a610ecf565b604051808215151515815260200191505060405180910390f35b34801561049057600080fd5b506104dd600480360360408110156104a757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f27565b005b3480156104eb57600080fd5b5061052e6004803603602081101561050257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061103f565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b34801561055c57600080fd5b506105896004803603602081101561057357600080fd5b8101908080359060200190929190505050611062565b005b34801561059757600080fd5b506105a061107f565b6040518082815260200191505060405180910390f35b3480156105c257600080fd5b50610679600480360360208110156105d957600080fd5b81019080803590602001906401000000008111156105f657600080fd5b82018360208201111561060857600080fd5b8035906020019184602083028401116401000000008311171561062a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050611085565b005b6106bd6004803603602081101561069157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061081e565b005b3480156106cb57600080fd5b506106d461112e565b6040518082815260200191505060405180910390f35b3480156106f657600080fd5b506107396004803603602081101561070d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611134565b005b34801561074757600080fd5b5061079a6004803603604081101561075e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803563ffffffff169060200190929190505050611153565b005b3480156107a857600080fd5b506107b16111c8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107ff57600080fd5b506108086111f2565b6040518082815260200191505060405180910390f35b6001600080828254019250508190555060008054905060008034915061084484836111f8565b6003544210158015610857575060045442105b15610966576001600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff1663ffffffff161415156108c057600080fd5b6108c98261128c565b90506108e08260095461133390919063ffffffff16565b6009819055506108f08482611354565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b8484604051808381526020018281526020019250505060405180910390a3610965611362565b5b600454421015801561097c575060016004540142105b15610a60576001600b5401600b8190555033600d6000600b54815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600f6000600b54815260200190815260200160002081905550610a036113cd565b600e6000600b548152602001908152602001600020819055503460106000610a296113cd565b8152602001908152602001600020540160106000610a456113cd565b815260200190815260200160002081905550610a5f611362565b5b505060005481141515610a7257600080fd5b5050565b6000610a8f600c54600b5461140f90919063ffffffff16565b905090565b610a9c610ecf565b1515610aa757600080fd5b60008090505b8151811015610b39576000600a60008484815181101515610aca57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055508080600101915050610aad565b5050565b6000600854905090565b610b4f610ecf565b1515610b5a57600080fd5b8060088190555050565b6000600954905090565b60125481565b610b7c610ecf565b1515610b8757600080fd5b6000806000806000610ba6600c54600b5461140f90919063ffffffff16565b861115610bc757610bc4600c54600b5461140f90919063ffffffff16565b95505b6000610bdf6001600c5461133390919063ffffffff16565b90506000610bf888600c5461133390919063ffffffff16565b905060008290505b8181111515610d795760016011600083815260200190815260200160002060009054906101000a900460ff1660ff16141515610d6e57600e600082815260200190815260200160002054955085610c556113cd565b1115610d6d57600d600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169750600f600082815260200190815260200160002054965060106000878152602001908152602001600020549450610ce485610cd68960125461143190919063ffffffff16565b61146f90919063ffffffff16565b9350610d338885600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166114999092919063ffffffff16565b60016011600083815260200190815260200160002060006101000a81548160ff021916908360ff1602179055506001600c5401600c819055505b5b806001019050610c00565b505050505050505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60065481565b610dbc610ecf565b1515610dc757600080fd5b8060068190555050565b610dd9610ecf565b1515610de457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b610f2f610ecf565b1515610f3a57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610fff57600080fd5b505af1158015611013573d6000803e3d6000fd5b505050506040513d602081101561102957600080fd5b8101908080519060200190929190505050505050565b600a6020528060005260406000206000915054906101000a900463ffffffff1681565b61106a610ecf565b151561107557600080fd5b8060078190555050565b60075481565b61108d610ecf565b151561109857600080fd5b60008090505b815181101561112a576001600a600084848151811015156110bb57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff160217905550808060010191505061109e565b5050565b60035481565b61113c610ecf565b151561114757600080fd5b61115081611587565b50565b61115b610ecf565b151561116657600080fd5b80600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60045481565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561123457600080fd5b6000811415151561124457600080fd5b600754811015151561125557600080fd5b600654811115151561126657600080fd5b600354421015801561127d57506001600454014211155b151561128857600080fd5b5050565b60008060035442101580156112a75750620d2f006003540142105b156112b157602890505b61130060646112f26008546112e4856112d6620f42408a61143190919063ffffffff16565b61143190919063ffffffff16565b61146f90919063ffffffff16565b61146f90919063ffffffff16565b61132a60085461131c620f42408761143190919063ffffffff16565b61146f90919063ffffffff16565b01915050919050565b600080828401905083811015151561134a57600080fd5b8091505092915050565b61135e8282611683565b5050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156113ca573d6000803e3d6000fd5b50565b600061140a60016113fc6004546113ee60014261133390919063ffffffff16565b61140f90919063ffffffff16565b61146f90919063ffffffff16565b905090565b600082821115151561142057600080fd5b600082840390508091505092915050565b6000808314156114445760009050611469565b6000828402905082848281151561145757fe5b0414151561146457600080fd5b809150505b92915050565b6000808211151561147f57600080fd5b6000828481151561148c57fe5b0490508091505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561153c57600080fd5b505af1158015611550573d6000803e3d6000fd5b505050506040513d602081101561156657600080fd5b8101908080519060200190929190505050151561158257600080fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156115c357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6116d08282600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166114999092919063ffffffff16565b505056fea165627a7a72305820befcee7a438d74ce21db4929d8dcf0a3c3435dc0bb347a8725b63ea8092c65940029"
}