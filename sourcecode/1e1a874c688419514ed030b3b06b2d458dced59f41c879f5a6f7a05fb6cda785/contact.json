{
  "address": "0x44f70b3f2938dee203360f6fa2c11e7b59cf4c71",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LBSCToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-18\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n        if (_a == 0) {\n            return 0;\n        }\n\n        c = _a * _b;\n        assert(c / _a == _b);\n        return c;\n    }\n\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        return _a / _b;\n    }\n\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        assert(_b <= _a);\n        return _a - _b;\n    }\n\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n        c = _a + _b;\n        assert(c >= _a);\n        return c;\n    }\n}\n\n\n\n\n\ncontract BaseLBSCToken {\n    using SafeMath for uint256;\n\n    // Globals\n    address public owner;\n    mapping(address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n    uint256 internal totalSupply_;\n\n    // Events\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Burn(address indexed burner, uint256 value);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event Mint(address indexed to, uint256 amount);\n\n    // Modifiers\n    modifier onlyOwner() {\n        require(msg.sender == owner,\"Only the owner is allowed to call this.\"); \n        _; \n    }\n\n    constructor() public{\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_value <= balances[msg.sender], \"You do not have sufficient balance.\");\n        require(_to != address(0), \"You cannot send tokens to 0 address\");\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\n        require(_value <= balances[_from], \"You do not have sufficient balance.\");\n        require(_value <= allowed[_from][msg.sender], \"You do not have allowance.\");\n        require(_to != address(0), \"You cannot send tokens to 0 address\");\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(address _owner, address _spender) public view returns (uint256){\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _addedValue The amount of tokens to increase the allowance by.\n    */\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool){\n        allowed[msg.sender][_spender] = (\n        allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n    */\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool){\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue >= oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n    * @dev Burns a specific amount of tokens.\n    * @param _value The amount of token to be burned.\n    */\n    function burn(uint256 _value) public {\n        _burn(msg.sender, _value);\n    }\n\n    function _burn(address _who, uint256 _value) internal {\n        require(_value <= balances[_who], \"Insufficient balance of tokens\");\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        balances[_who] = balances[_who].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(_who, _value);\n        emit Transfer(_who, address(0), _value);\n    }\n\n    /**\n    * @dev Burns a specific amount of tokens from the target address and decrements allowance\n    * @param _from address The address which you want to send tokens from\n    * @param _value uint256 The amount of token to be burned\n    */\n    function burnFrom(address _from, uint256 _value) public {\n        require(_value <= allowed[_from][msg.sender], \"Insufficient allowance to burn tokens.\");\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        _burn(_from, _value);\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param _newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n    * @dev Transfers control of the contract to a newOwner.\n    * @param _newOwner The address to transfer ownership to.\n    */\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0), \"Owner cannot be 0 address.\");\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n\n}\n\ncontract LBSCToken is BaseLBSCToken {\n    \n    // Constants\n    string  public constant name = \"LabelsCoin\";\n    string  public constant symbol = \"LBSC\";\n    uint8   public constant decimals = 18;\n\n    uint256 public constant INITIAL_SUPPLY      =  30000000 * (10 ** uint256(decimals));\n    //uint256 public constant CROWDSALE_ALLOWANCE =  1000000000 * (10 ** uint256(decimals));\n    uint256 public constant ADMIN_ALLOWANCE     =  30000000 * (10 ** uint256(decimals));\n    \n    // Properties\n    //uint256 public totalSupply;\n    //uint256 public crowdSaleAllowance;      // the number of tokens available for crowdsales\n    uint256 public adminAllowance;          // the number of tokens available for the administrator\n    //address public crowdSaleAddr;           // the address of a crowdsale currently selling this token\n    address public adminAddr;               // the address of a crowdsale currently selling this token\n    //bool    public transferEnabled = false; // indicates if transferring tokens is enabled or not\n    bool    public transferEnabled = true;  // Enables everyone to transfer tokens\n\n    /**\n     * The listed addresses are not valid recipients of tokens.\n     *\n     * 0x0           - the zero address is not valid\n     * this          - the contract itself should not receive tokens\n     * owner         - the owner has all the initial tokens, but cannot receive any back\n     * adminAddr     - the admin has an allowance of tokens to transfer, but does not receive any\n     * crowdSaleAddr - the crowdsale has an allowance of tokens to transfer, but does not receive any\n     */\n    modifier validDestination(address _to) {\n        require(_to != address(0x0), \"Cannot send to 0 address\");\n        require(_to != address(this), \"Cannot send to contract address\");\n        //require(_to != owner, \"Cannot send to the owner\");\n        //require(_to != address(adminAddr), \"Cannot send to admin address\");\n        //require(_to != address(crowdSaleAddr), \"Cannot send to crowdsale address\");\n        _;\n    }\n\n    constructor(address _admin) public {\n        require(msg.sender != _admin, \"Owner and admin cannot be the same\");\n\n        totalSupply_ = INITIAL_SUPPLY;\n        adminAllowance = ADMIN_ALLOWANCE;\n\n        // mint all tokens\n        //balances[msg.sender] = totalSupply_.sub(adminAllowance);\n        //emit Transfer(address(0x0), msg.sender, totalSupply_.sub(adminAllowance));\n\n        balances[_admin] = adminAllowance;\n        emit Transfer(address(0x0), _admin, adminAllowance);\n\n        adminAddr = _admin;\n        approve(adminAddr, adminAllowance);\n    }\n\n    /**\n     * Overrides ERC20 transfer function with modifier that prevents the\n     * ability to transfer tokens until after transfers have been enabled.\n     */\n    function transfer(address _to, uint256 _value) public validDestination(_to) returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * Overrides ERC20 transferFrom function with modifier that prevents the\n     * ability to transfer tokens until after transfers have been enabled.\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public validDestination(_to) returns (bool) {\n        bool result = super.transferFrom(_from, _to, _value);\n        if (result) {\n            if (msg.sender == adminAddr)\n                adminAllowance = adminAllowance.sub(_value);\n        }\n        return result;\n    }\n}",
  "bytecode": "60806040526001600560146101000a81548160ff02191690831515021790555034801561002b57600080fd5b5060405160208061258583398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610158576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f4f776e657220616e642061646d696e2063616e6e6f742062652074686520736181526020017f6d6500000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b601260ff16600a0a6301c9c38002600381905550601260ff16600a0a6301c9c38002600481905550600454600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6004546040518082815260200191505060405180910390a380600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506102ac600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166004546102b3640100000000026401000000009004565b50506103a5565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6121d1806103b46000396000f300608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610117578063095ea7b3146101a757806318160ddd1461020c57806323b872dd146102375780632ff2e9dc146102bc578063313ce567146102e757806342966c68146103185780634cd412d514610345578063661884631461037457806370a08231146103d957806379cc679014610430578063818305931461047d5780638da5cb5b146104d457806395d89b411461052b578063a9059cbb146105bb578063d56de6ed14610620578063d73dd6231461064b578063dd62ed3e146106b0578063f2fde38b14610727578063fc53f9581461076a575b600080fd5b34801561012357600080fd5b5061012c610795565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561016c578082015181840152602081019050610151565b50505050905090810190601f1680156101995780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b357600080fd5b506101f2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107ce565b604051808215151515815260200191505060405180910390f35b34801561021857600080fd5b506102216108c0565b6040518082815260200191505060405180910390f35b34801561024357600080fd5b506102a2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108ca565b604051808215151515815260200191505060405180910390f35b3480156102c857600080fd5b506102d1610aa9565b6040518082815260200191505060405180910390f35b3480156102f357600080fd5b506102fc610aba565b604051808260ff1660ff16815260200191505060405180910390f35b34801561032457600080fd5b5061034360048036038101908080359060200190929190505050610abf565b005b34801561035157600080fd5b5061035a610acc565b604051808215151515815260200191505060405180910390f35b34801561038057600080fd5b506103bf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610adf565b604051808215151515815260200191505060405180910390f35b3480156103e557600080fd5b5061041a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d71565b6040518082815260200191505060405180910390f35b34801561043c57600080fd5b5061047b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610dba565b005b34801561048957600080fd5b50610492610ff1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104e057600080fd5b506104e9611017565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561053757600080fd5b5061054061103c565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610580578082015181840152602081019050610565565b50505050905090810190601f1680156105ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105c757600080fd5b50610606600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611075565b604051808215151515815260200191505060405180910390f35b34801561062c57600080fd5b506106356111d4565b6040518082815260200191505060405180910390f35b34801561065757600080fd5b50610696600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111da565b604051808215151515815260200191505060405180910390f35b3480156106bc57600080fd5b50610711600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113d6565b6040518082815260200191505060405180910390f35b34801561073357600080fd5b50610768600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061145d565b005b34801561077657600080fd5b5061077f611553565b6040518082815260200191505060405180910390f35b6040805190810160405280600a81526020017f4c6162656c73436f696e0000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600354905090565b60008083600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610973576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f43616e6e6f742073656e6420746f20302061646472657373000000000000000081525060200191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610a17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f43616e6e6f742073656e6420746f20636f6e747261637420616464726573730081525060200191505060405180910390fd5b610a22868686611564565b91508115610a9d57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610a9c57610a9584600454611aab90919063ffffffff16565b6004819055505b5b81925050509392505050565b601260ff16600a0a6301c9c3800281565b601281565b610ac93382611ac4565b50565b600560149054906101000a900460ff1681565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083101515610bf1576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c85565b610c048382611aab90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515610ed4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f496e73756666696369656e7420616c6c6f77616e636520746f206275726e207481526020017f6f6b656e732e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b610f6381600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611aab90919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fed8282611ac4565b5050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600481526020017f4c4253430000000000000000000000000000000000000000000000000000000081525081565b600082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561111d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f43616e6e6f742073656e6420746f20302061646472657373000000000000000081525060200191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156111c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f43616e6e6f742073656e6420746f20636f6e747261637420616464726573730081525060200191505060405180910390fd5b6111cb8484611ce3565b91505092915050565b60045481565b600061126b82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461202690919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611547576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f4f6e6c7920746865206f776e657220697320616c6c6f77656420746f2063616c81526020017f6c20746869732e0000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61155081612042565b50565b601260ff16600a0a6301c9c3800281565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611643576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f596f7520646f206e6f7420686176652073756666696369656e742062616c616e81526020017f63652e000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611737576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f596f7520646f206e6f74206861766520616c6c6f77616e63652e00000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611802576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f596f752063616e6e6f742073656e6420746f6b656e7320746f2030206164647281526020017f657373000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61185482600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611aab90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118e982600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461202690919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506119bb82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611aab90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000828211151515611ab957fe5b818303905092915050565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515611b7b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f496e73756666696369656e742062616c616e6365206f6620746f6b656e73000081525060200191505060405180910390fd5b611bcd81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611aab90919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c2581600354611aab90919063ffffffff16565b6003819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611dc2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f596f7520646f206e6f7420686176652073756666696369656e742062616c616e81526020017f63652e000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611e8d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f596f752063616e6e6f742073656e6420746f6b656e7320746f2030206164647281526020017f657373000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b611edf82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611aab90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611f7482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461202690919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000818301905082811015151561203957fe5b80905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156120e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4f776e65722063616e6e6f74206265203020616464726573732e00000000000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820eec269d245c7a5ac6c878062d6759cb03fc3c9d25f428256c4c0e72c5a86df2c0029000000000000000000000000164d4534eb059f2674af408e62ee745381df7929",
  "constructorArguments": "000000000000000000000000164d4534eb059f2674af408e62ee745381df7929"
}