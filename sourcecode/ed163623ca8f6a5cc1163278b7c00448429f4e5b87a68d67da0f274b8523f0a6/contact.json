{
  "address": "0x11468d142559f6ab61e69b47f30fa6a36c93ee92",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "CombiCoin",
  "contractName": "CombiCoin_v2",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-26\n*/\n\npragma solidity ^0.4.11;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\n library SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/*\nfile:   ReentryProtection.sol\nver:    0.3.0\nupdated:6-April-2016\nauthor: Darryl Morris\nemail:  o0ragman0o AT gmail.com\n\nMutex based reentry protection protect.\n\nThis software is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU lesser General Public License for more details.\n<http://www.gnu.org/licenses/>.\n*/\n\ncontract ReentryProtected\n{\n  // The reentry protection state mutex.\n  bool __reMutex;\n\n  // This modifier can be used on functions with external calls to\n  // prevent reentry attacks.\n  // Constraints:\n  //   Protected functions must have only one point of exit.\n  //   Protected functions cannot use the `return` keyword\n  //   Protected functions return values must be through return parameters.\n  modifier preventReentry() {\n    require(!__reMutex);\n    __reMutex = true;\n    _;\n    delete __reMutex;\n    return;\n  }\n\n  // This modifier can be applied to public access state mutation functions\n  // to protect against reentry if a `preventReentry` function has already\n  // set the mutex. This prevents the contract from being reenter under a\n  // different memory context which can break state variable integrity.\n  modifier noReentry() {\n    require(!__reMutex);\n    _;\n  }\n}\n\n/*\nfile:   ERC20.sol\nver:    0.4.4-o0ragman0o\nupdated:26-July-2017\nauthor: Darryl Morris\nemail:  o0ragman0o AT gmail.com\n\nAn ERC20 compliant token with reentry protection and safe math.\n\nThis software is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \nSee MIT Licence for further details.\n<https://opensource.org/licenses/MIT>.\n\nRelease Notes\n-------------\n0.4.4-o0ragman0o\n* removed state from interface\n* added abstract functions of public state to interface.\n* included state into contract implimentation\n*/\n\n\n// ERC20 Standard Token Interface with safe maths and reentry protection\ncontract ERC20Interface\n{\n  /* Structs */\n\n  /* State Valiables */\n\n  /* Events */\n  // Triggered when tokens are transferred.\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 _value);\n\n  // Triggered whenever approve(address _spender, uint256 _value) is called.\n  event Approval(\n    address indexed _owner,\n    address indexed _spender,\n    uint256 _value);\n\n  /* Modifiers */\n\n  /* Function Abstracts */\n\n  /// @return The total supply of tokens\n  function totalSupply() public constant returns (uint256);\n\n  /// @param _addr The address of a token holder\n  /// @return The amount of tokens held by `_addr`\n  function balanceOf(address _addr) public constant returns (uint256);\n\n  /// @param _owner The address of a token holder\n  /// @param _spender the address of a third-party\n  /// @return The amount of tokens the `_spender` is allowed to transfer\n  function allowance(address _owner, address _spender) public constant\n  returns (uint256);\n\n  /// @notice Send `_amount` of tokens from `msg.sender` to `_to`\n  /// @param _to The address of the recipient\n  /// @param _amount The amount of tokens to transfer\n  function transfer(address _to, uint256 _amount) public returns (bool);\n\n  /// @notice Send `_amount` of tokens from `_from` to `_to` on the condition\n  /// it is approved by `_from`\n  /// @param _from The address of the sender\n  /// @param _to The address of the recipient\n  /// @param _amount The amount of tokens to transfer\n  function transferFrom(address _from, address _to, uint256 _amount)\n  public returns (bool);\n\n  /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n  /// its behalf\n  /// @param _spender The address of the approved spender\n  /// @param _amount The amount of tokens to transfer\n  function approve(address _spender, uint256 _amount) public returns (bool);\n}\n\ncontract ERC20Token is ReentryProtected, ERC20Interface\n{\n\n  using SafeMath for uint256;\n\n  /* State */\n  // The Total supply of tokens\n  uint256 totSupply;\n\n \n  // Token ownership mapping\n  mapping (address => uint256) balance;\n\n  // Allowances mapping\n  mapping (address => mapping (address => uint256)) allowed;\n\n  /* Funtions Public */\n\n  function ERC20Token()\n  {\n    // Supply limited to 2^128 rather than 2^256 to prevent potential \n    // multiplication overflow\n    \n    totSupply = 0;\n      balance[msg.sender] = totSupply;\n  }\n\n  // Using an explicit getter allows for function overloading    \n  function totalSupply()\n  public\n  constant\n  returns (uint256)\n  {\n    return totSupply;\n  }\n\n\n  // Using an explicit getter allows for function overloading    \n  function balanceOf(address _addr)\n  public\n  constant\n  returns (uint256)\n  {\n    return balance[_addr];\n  }\n\n  // Using an explicit getter allows for function overloading    \n  function allowance(address _owner, address _spender)\n  public\n  constant\n  returns (uint256 remaining_)\n  {\n    return allowed[_owner][_spender];\n  }\n\n\n  // Send _value amount of tokens to address _to\n  // Reentry protection prevents attacks upon the state\n  function transfer(address _to, uint256 _value)\n  public\n  noReentry\n  returns (bool)\n  {\n    return xfer(msg.sender, _to, _value);\n  }\n\n  // Send _value amount of tokens from address _from to address _to\n  // Reentry protection prevents attacks upon the state\n  function transferFrom(address _from, address _to, uint256 _value)\n  public\n  noReentry\n  returns (bool)\n  {\n    require(_value <= allowed[_from][msg.sender]);\n    allowed[_from][msg.sender] -= _value;\n    return xfer(_from, _to, _value);\n  }\n\n  // Process a transfer internally.\n  function xfer(address _from, address _to, uint256 _value)\n  internal\n  returns (bool)\n  {\n    require(_value > 0 && _value <= balance[_from]);\n    balance[_from] -= _value;\n    balance[_to] += _value;\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  // Approves a third-party spender\n  // Reentry protection prevents attacks upon the state\n  function approve(address _spender, uint256 _value)\n  public\n  noReentry\n  returns (bool)\n  {\n    require(balance[msg.sender] != 0);\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n}\n\n  /**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\n contract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n   function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n   modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n   function transferOwnership(address newOwner) onlyOwner {\n    require(newOwner != address(0));      \n    owner = newOwner;\n  }\n\n}\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\n contract MintableBurnableToken is ERC20Token, Ownable {\n  using SafeMath for uint256;\n  event Mint(address indexed to, uint256 amount);\n  event Burn(address indexed burner, uint256 indexed value);\n  //event MintFinished();\n\n  //bool public mintingFinished = false;\n\n  // modifier canMint() {\n    //   require(!mintingFinished);\n    //   _;\n    // }\n\n /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n     function burn(uint256 _value) onlyOwner returns (bool) {\n      require(_value > 0);\n\n      address burner = msg.sender;\n      balance[burner] = balance[burner].sub(_value);\n      totSupply = totSupply.sub(_value);\n      Burn(burner, _value);\n    }\n\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will recieve the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n   function mint(address _to, uint256 _amount) onlyOwner returns (bool) {\n    totSupply = totSupply.add(_amount);\n    balance[_to] = balance[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(0x0, _to, _amount);\n    return true;\n  }\n}\n/**\n * @title SimpleToken\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator. \n * Note they can later distribute these tokens as they wish using `transfer` and other\n * `StandardToken` functions.\n */\n contract CombiCoin_v2 is MintableBurnableToken {\n\n  string public constant name = \"CombiCoin\";\n  string public constant symbol = \"COMBI\";\n  uint256 public constant decimals = 10;\n}",
  "bytecode": "60606040525b5b60006001819055600160a060020a0333168152600260205260408120555b60048054600160a060020a03191633600160a060020a03161790555b5b610912806100506000396000f300606060405236156100c25763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100c4578063095ea7b31461015457806318160ddd1461018757806323b872dd146101a9578063313ce567146101e257806340c10f191461020457806342966c681461023757806370a082311461025e5780638da5cb5b1461028c57806395d89b41146102b8578063a9059cbb14610348578063dd62ed3e1461037b578063f2fde38b146103af575bfe5b34156100cc57fe5b6100d46103cd565b60408051602080825283518183015283519192839290830191850190808383821561011a575b80518252602083111561011a57601f1990920191602091820191016100fa565b505050905090810190601f1680156101465780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015c57fe5b610173600160a060020a0360043516602435610404565b604080519115158252519081900360200190f35b341561018f57fe5b6101976104a3565b60408051918252519081900360200190f35b34156101b157fe5b610173600160a060020a03600435811690602435166044356104aa565b604080519115158252519081900360200190f35b34156101ea57fe5b610197610533565b60408051918252519081900360200190f35b341561020c57fe5b610173600160a060020a0360043516602435610538565b604080519115158252519081900360200190f35b341561023f57fe5b610173600435610634565b604080519115158252519081900360200190f35b341561026657fe5b610197600160a060020a03600435166106f5565b60408051918252519081900360200190f35b341561029457fe5b61029c610714565b60408051600160a060020a039092168252519081900360200190f35b34156102c057fe5b6100d4610723565b60408051602080825283518183015283519192839290830191850190808383821561011a575b80518252602083111561011a57601f1990920191602091820191016100fa565b505050905090810190601f1680156101465780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561035057fe5b610173600160a060020a036004351660243561075a565b604080519115158252519081900360200190f35b341561038357fe5b610197600160a060020a0360043581169060243516610781565b60408051918252519081900360200190f35b34156103b757fe5b6103cb600160a060020a03600435166107ae565b005b60408051808201909152600981527f436f6d6269436f696e0000000000000000000000000000000000000000000000602082015281565b6000805460ff16156104165760006000fd5b600160a060020a033316600090815260026020526040902054151561043b5760006000fd5b600160a060020a03338116600081815260036020908152604080832094881680845294825291829020869055815186815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060015b5b92915050565b6001545b90565b6000805460ff16156104bc5760006000fd5b600160a060020a03808516600090815260036020908152604080832033909416835292905220548211156104f05760006000fd5b600160a060020a038085166000908152600360209081526040808320339094168352929052208054839003905561052884848461080d565b90505b5b9392505050565b600a81565b60045460009033600160a060020a039081169116146105575760006000fd5b60015461056a908363ffffffff6108b516565b600155600160a060020a038316600090815260026020526040902054610596908363ffffffff6108b516565b600160a060020a038416600081815260026020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35060015b5b92915050565b600454600090819033600160a060020a039081169116146106555760006000fd5b600083116106635760006000fd5b5033600160a060020a03811660009081526002602052604090205461068890846108cf565b600160a060020a0382166000908152600260205260409020556001546106b4908463ffffffff6108cf16565b6001556040518390600160a060020a038316907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca590600090a35b5b50919050565b600160a060020a0381166000908152600260205260409020545b919050565b600454600160a060020a031681565b60408051808201909152600581527f434f4d4249000000000000000000000000000000000000000000000000000000602082015281565b6000805460ff161561076c5760006000fd5b61077733848461080d565b90505b5b92915050565b600160a060020a038083166000908152600360209081526040808320938516835292905220545b92915050565b60045433600160a060020a039081169116146107ca5760006000fd5b600160a060020a03811615156107e05760006000fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b60006000821180156108375750600160a060020a0384166000908152600260205260409020548211155b15156108435760006000fd5b600160a060020a03808516600081815260026020908152604080832080548890039055938716808352918490208054870190558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060015b9392505050565b6000828201838110156108c457fe5b8091505b5092915050565b6000828211156108db57fe5b508082035b929150505600a165627a7a723058208ef9eab43e1f4634d1f2734232cb17f5680735e82296b469b8825bea769f71ec0029"
}