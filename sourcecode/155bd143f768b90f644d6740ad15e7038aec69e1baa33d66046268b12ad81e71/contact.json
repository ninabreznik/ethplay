{
  "address": "0x4cade551cbca8bdef947922577bf76e6940df26c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ERC223Token",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-24\n*/\n\n// compiler: 0.4.21+commit.dfe3193c.Emscripten.clang\npragma solidity ^0.4.21;\n\n// https://www.ethereum.org/token\ninterface tokenRecipient {\n  function receiveApproval( address from, uint256 value, bytes data ) external;\n}\n\n// ERC223 - LLT Luxury Lifestyle Token Intel-wise Edition - RS\n// ERC20 token with added ERC223 and Ethereum-Token support\n\n// Combination of multiple interfaces:\n// https://theethereum.wiki/w/index.php/ERC20_Token_Standard\n// https://www.ethereum.org/token (uncontrolled, non-standard)\n// https://github.com/Dexaran/ERC23-tokens/blob/Recommended/ERC223_Token.sol\n\ninterface ContractReceiver {\n  function tokenFallback( address from, uint value, bytes data ) external;\n}\n\ncontract ERC223Token\n{\n  string  public name;\n  string  public symbol;\n  uint8   public decimals;\n  uint256 public totalSupply;\n\n  mapping( address => uint256 ) balances_;\n  mapping( address => mapping(address => uint256) ) allowances_;\n\n  // ERC20\n  event Approval( address indexed owner,\n                  address indexed spender,\n                  uint value );\n\n  event Transfer( address indexed from,\n                  address indexed to,\n                  uint256 value );\n               // bytes    data ); use ERC20 version instead\n\n  // Ethereum Token\n  event Burn( address indexed from, uint256 value );\n\n  constructor( uint256 initialSupply,\n                        string tokenName,\n                        uint8 decimalUnits,\n                        string tokenSymbol ) public\n  {\n    totalSupply = initialSupply * 10 ** uint256(decimalUnits);\n    balances_[msg.sender] = totalSupply;\n    name = tokenName;\n    decimals = decimalUnits;\n    symbol = tokenSymbol;\n    emit Transfer( address(0), msg.sender, totalSupply );\n  }\n\n  function() public payable { revert(); } // does not accept money\n\n  // ERC20\n  function balanceOf( address owner ) public constant returns (uint) {\n    return balances_[owner];\n  }\n\n  // ERC20\n  //\n  // WARNING! When changing the approval amount, first set it back to zero\n  // AND wait until the transaction is mined. Only afterwards set the new\n  // amount. Otherwise you may be prone to a race condition attack.\n  // See: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n  function approve( address spender, uint256 value ) public\n  returns (bool success)\n  {\n    allowances_[msg.sender][spender] = value;\n    emit Approval( msg.sender, spender, value );\n    return true;\n  }\n \n  // recommended fix for known attack on any ERC20\n  function safeApprove( address _spender,\n                        uint256 _currentValue,\n                        uint256 _value ) public\n                        returns (bool success) {\n\n    // If current allowance for _spender is equal to _currentValue, then\n    // overwrite it with _value and return true, otherwise return false.\n\n    if (allowances_[msg.sender][_spender] == _currentValue)\n      return approve(_spender, _value);\n\n    return false;\n  }\n\n  // ERC20\n  function allowance( address owner, address spender ) public constant\n  returns (uint256 remaining)\n  {\n    return allowances_[owner][spender];\n  }\n\n  // ERC20\n  function transfer(address to, uint256 value) public returns (bool success)\n  {\n    bytes memory empty; // null\n    _transfer( msg.sender, to, value, empty );\n    return true;\n  }\n\n  // ERC20\n  function transferFrom( address from, address to, uint256 value ) public\n  returns (bool success)\n  {\n    require( value <= allowances_[from][msg.sender] );\n\n    allowances_[from][msg.sender] -= value;\n    bytes memory empty;\n    _transfer( from, to, value, empty );\n\n    return true;\n  }\n\n  // Ethereum Token Definition\n  function approveAndCall( address spender,\n                           uint256 value,\n                           bytes context ) public\n  returns (bool success)\n  {\n    if ( approve(spender, value) )\n    {\n      tokenRecipient recip = tokenRecipient( spender );\n      recip.receiveApproval( msg.sender, value, context );\n      return true;\n    }\n    return false;\n  }        \n\n  // Ethereum Token\n  function burn( uint256 value ) public\n  returns (bool success)\n  {\n    require( balances_[msg.sender] >= value );\n    balances_[msg.sender] -= value;\n    totalSupply -= value;\n\n    emit Burn( msg.sender, value );\n    return true;\n  }\n\n  // Ethereum Token\n  function burnFrom( address from, uint256 value ) public\n  returns (bool success)\n  {\n    require( balances_[from] >= value );\n    require( value <= allowances_[from][msg.sender] );\n\n    balances_[from] -= value;\n    allowances_[from][msg.sender] -= value;\n    totalSupply -= value;\n\n    emit Burn( from, value );\n    return true;\n  }\n\n  // ERC223 Transfer and invoke specified callback\n  function transfer( address to,\n                     uint value,\n                     bytes data,\n                     string custom_fallback ) public returns (bool success)\n  {\n    _transfer( msg.sender, to, value, data );\n\n    if ( isContract(to) )\n    {\n      ContractReceiver rx = ContractReceiver( to );\n      require( address(rx).call.value(0)(bytes4(keccak256(abi.encodePacked(custom_fallback))),\n               msg.sender,\n               value,\n               data) );\n    }\n\n    return true;\n  }\n\n  // ERC223 Transfer to a contract or externally-owned account\n  function transfer( address to, uint value, bytes data ) public\n  returns (bool success)\n  {\n    if (isContract(to)) {\n      return transferToContract( to, value, data );\n    }\n\n    _transfer( msg.sender, to, value, data );\n    return true;\n  }\n\n  // ERC223 Transfer to contract and invoke tokenFallback() method\n  function transferToContract( address to, uint value, bytes data ) private\n  returns (bool success)\n  {\n    _transfer( msg.sender, to, value, data );\n\n    ContractReceiver rx = ContractReceiver(to);\n    rx.tokenFallback( msg.sender, value, data );\n\n    return true;\n  }\n\n  // ERC223 Fetch contract size (This must be non-zero to be a contract)\n  function isContract( address _addr ) private constant returns (bool)\n  {\n    uint length;\n    assembly { length := extcodesize(_addr) }\n    return (length > 0);\n  }\n\n  function _transfer( address from,\n                      address to,\n                      uint value,\n                      bytes data ) internal\n  {\n    require( to != 0x0 );\n    require( balances_[from] >= value );\n    require( balances_[to] + value > balances_[to] ); // catch overflow\n\n    balances_[from] -= value;\n    balances_[to] += value;\n\n    //Transfer( from, to, value, data ); This is the ERC223 compatible version\n    bytes memory empty;\n    empty = data;\n    emit Transfer( from, to, value ); // This is the ERC20 compatible version\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051610ea2380380610ea2833981016040908152815160208084015183850151606086015160ff8216600a0a850260038190553360009081526004865296872055918601805194969095919492019261006e92908601906100d5565b506002805460ff191660ff841617905580516100919060019060208401906100d5565b50600354604080519182525133916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350505050610170565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011657805160ff1916838001178555610143565b82800160010185558215610143579182015b82811115610143578251825591602001919060010190610128565b5061014f929150610153565b5090565b61016d91905b8082111561014f5760008155600101610159565b90565b610d238061017f6000396000f3006080604052600436106100c15763ffffffff60e060020a60003504166306fdde0381146100c6578063095ea7b31461015057806318160ddd1461018857806323b872dd146101af578063313ce567146101d957806342966c681461020457806370a082311461021c57806379cc67901461023d57806395d89b4114610261578063a9059cbb14610276578063be45fd621461029a578063cae9ca5114610303578063dd62ed3e1461036c578063f6368f8a14610393578063f65036621461043a575b600080fd5b3480156100d257600080fd5b506100db610461565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101155781810151838201526020016100fd565b50505050905090810190601f1680156101425780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015c57600080fd5b50610174600160a060020a03600435166024356104ef565b604080519115158252519081900360200190f35b34801561019457600080fd5b5061019d610555565b60408051918252519081900360200190f35b3480156101bb57600080fd5b50610174600160a060020a036004358116906024351660443561055b565b3480156101e557600080fd5b506101ee6105d1565b6040805160ff9092168252519081900360200190f35b34801561021057600080fd5b506101746004356105da565b34801561022857600080fd5b5061019d600160a060020a0360043516610652565b34801561024957600080fd5b50610174600160a060020a036004351660243561066d565b34801561026d57600080fd5b506100db61073e565b34801561028257600080fd5b50610174600160a060020a0360043516602435610798565b3480156102a657600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610174948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506107b29650505050505050565b34801561030f57600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610174948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506107e79650505050505050565b34801561037857600080fd5b5061019d600160a060020a03600435811690602435166108fb565b34801561039f57600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610174948235600160a060020a031694602480359536959460649492019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506109269650505050505050565b34801561044657600080fd5b50610174600160a060020a0360043516602435604435610ad6565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104e75780601f106104bc576101008083540402835291602001916104e7565b820191906000526020600020905b8154815290600101906020018083116104ca57829003601f168201915b505050505081565b336000818152600560209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60035481565b600160a060020a038316600090815260056020908152604080832033845290915281205460609083111561058e57600080fd5b600160a060020a03851660009081526005602090815260408083203384529091529020805484900390556105c485858584610b15565b600191505b509392505050565b60025460ff1681565b336000908152600460205260408120548211156105f657600080fd5b3360008181526004602090815260409182902080548690039055600380548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b600160a060020a031660009081526004602052604090205490565b600160a060020a03821660009081526004602052604081205482111561069257600080fd5b600160a060020a03831660009081526005602090815260408083203384529091529020548211156106c257600080fd5b600160a060020a0383166000818152600460209081526040808320805487900390556005825280832033845282529182902080548690039055600380548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a250600192915050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104e75780601f106104bc576101008083540402835291602001916104e7565b600060606107a833858584610b15565b5060019392505050565b60006107bd84610be7565b156107d4576107cd848484610bef565b90506107e0565b6107a833858585610b15565b9392505050565b6000806107f485856104ef565b156108f057506040517fa2d578530000000000000000000000000000000000000000000000000000000081523360048201818152602483018690526060604484019081528551606485015285518894600160a060020a0386169463a2d578539490938a938a9360840190602085019080838360005b83811015610881578181015183820152602001610869565b50505050905090810190601f1680156108ae5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156108cf57600080fd5b505af11580156108e3573d6000803e3d6000fd5b50505050600191506105c9565b506000949350505050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b60008061093533878787610b15565b61093e86610be7565b15610aca5785905080600160a060020a03166000846040516020018082805190602001908083835b602083106109855780518252601f199092019160209182019101610966565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106109e85780518252601f1990920191602091820191016109c9565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060e060020a9004903388886040518563ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a03168152602001838152602001828051906020019080838360005b83811015610a7a578181015183820152602001610a62565b50505050905090810190601f168015610aa75780820380516001836020036101000a031916815260200191505b50935050505060006040518083038185885af193505050501515610aca57600080fd5b50600195945050505050565b336000908152600560209081526040808320600160a060020a0387168452909152812054831415610b0b576107cd84836104ef565b5060009392505050565b6060600160a060020a0384161515610b2c57600080fd5b600160a060020a038516600090815260046020526040902054831115610b5157600080fd5b600160a060020a03841660009081526004602052604090205483810111610b7757600080fd5b50600160a060020a03808516600081815260046020908152604080832080548890039055938716808352918490208054870190558351868152935185949293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92908290030190a35050505050565b6000903b1190565b600080610bfe33868686610b15565b506040517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081523360048201818152602483018690526060604484019081528551606485015285518894600160a060020a0386169463c0ee0b8a9490938a938a9360840190602085019080838360005b83811015610c86578181015183820152602001610c6e565b50505050905090810190601f168015610cb35780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610cd457600080fd5b505af1158015610ce8573d6000803e3d6000fd5b506001989750505050505050505600a165627a7a723058208189450c1d264b42e11cca519e897fb88cff1fddd7c0d123c3e83d1a408dbabc0029000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000164c7578757279204c6966657374796c6520546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000034c4c540000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000164c7578757279204c6966657374796c6520546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000034c4c540000000000000000000000000000000000000000000000000000000000"
}