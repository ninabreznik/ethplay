{
  "address": "0x7a7b224d100c9034567ef95b8f095f4839abbcc2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KMBToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-31\n*/\n\npragma solidity ^0.4.24;\n\ncontract IMigrationContract {\n    function migrate(address addr, uint256 nas) public returns (bool success);\n}\n\n/* 灵感来自于NAS  coin*/\ncontract SafeMath {\n    function safeAdd(uint256 x, uint256 y) internal pure returns(uint256) {\n        uint256 z = x + y;\n        assert((z >= x) && (z >= y));\n        return z;\n    }\n\n    function safeSubtract(uint256 x, uint256 y) internal pure returns(uint256) {\n        assert(x >= y);\n        uint256 z = x - y;\n        return z;\n    }\n\n    function safeMult(uint256 x, uint256 y) internal pure returns(uint256) {\n        uint256 z = x * y;\n        assert((x == 0)||(z/x == y));\n        return z;\n    }\n\n}\n\ncontract Token {\n    uint256 public totalSupply;\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n/*  ERC 20 token */\ncontract StandardToken is Token {\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            emit Transfer(msg.sender, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            emit Transfer(_from, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n}\n\ncontract KMBToken is StandardToken, SafeMath {\n    \n    // metadata\n    string  public constant name = \"KMB\";\n    string  public constant symbol = \"KMB\";\n    uint256 public constant decimals = 18;\n    string  public version = \"1.0\";\n\n    // contracts\n    address public ethFundDeposit;          // ETH存放地址\n    address public newContractAddr;         // token更新地址\n\n    // crowdsale parameters\n    bool    public isFunding;                // 状态切换到true\n    uint256 public fundingStartBlock;\n    uint256 public fundingStopBlock;\n\n    uint256 public currentSupply;           // 正在售卖中的tokens数量\n    uint256 public tokenRaised = 0;         // 总的售卖数量token\n    uint256 public tokenMigrated = 0;     // 总的已经交易的 token\n    uint256 public tokenExchangeRate = 300;             // 代币兑换比例 N代币 兑换 1 ETH\n\n    // events\n    event AllocateToken(address indexed _to, uint256 _value);   // allocate token for private sale;\n    event IssueToken(address indexed _to, uint256 _value);      // issue token for public sale;\n    event IncreaseSupply(uint256 _value);\n    event DecreaseSupply(uint256 _value);\n    event Migrate(address indexed _to, uint256 _value);\n\n    // 转换\n    function formatDecimals(uint256 _value) internal pure returns (uint256 ) {\n        return _value * 10 ** decimals;\n    }\n\n    // constructor\n    constructor(\n        address _ethFundDeposit,\n        uint256 _currentSupply) public\n    {\n        ethFundDeposit = _ethFundDeposit;\n\n        isFunding = false;                           //通过控制预CrowdS ale状态\n        fundingStartBlock = 0;\n        fundingStopBlock = 0;\n\n        currentSupply = formatDecimals(_currentSupply);\n        totalSupply = formatDecimals(1000000000);\n        balances[msg.sender] = totalSupply;\n        require(currentSupply <= totalSupply);\n    }\n\n    modifier isOwner()  { require(msg.sender == ethFundDeposit); _; }\n\n    ///  设置token汇率\n    function setTokenExchangeRate(uint256 _tokenExchangeRate) isOwner external {\n        require(_tokenExchangeRate != 0);\n        require(_tokenExchangeRate != tokenExchangeRate);\n\n        tokenExchangeRate = _tokenExchangeRate;\n    }\n\n    ///增发代币\n    function increaseSupply (uint256 _value) isOwner external {\n        uint256 value = formatDecimals(_value);\n        require(value + currentSupply <= totalSupply);\n        currentSupply = safeAdd(currentSupply, value);\n        emit IncreaseSupply(value);\n    }\n\n    ///减少代币\n    function decreaseSupply (uint256 _value) isOwner external {\n        uint256 value = formatDecimals(_value);\n        require(value + tokenRaised <= currentSupply);\n\n        currentSupply = safeSubtract(currentSupply, value);\n        emit DecreaseSupply(value);\n    }\n\n    ///开启\n    function startFunding (uint256 _fundingStartBlock, uint256 _fundingStopBlock) isOwner external {\n        require(!isFunding);\n        require(_fundingStartBlock < _fundingStopBlock);\n        require(block.number < _fundingStartBlock);\n\n        fundingStartBlock = _fundingStartBlock;\n        fundingStopBlock = _fundingStopBlock;\n        isFunding = true;\n    }\n\n    ///关闭\n    function stopFunding() isOwner external {\n        require(isFunding);\n        isFunding = false;\n    }\n\n    ///set a new contract for recieve the tokens (for update contract)\n    function setMigrateContract(address _newContractAddr) isOwner external {\n        require(_newContractAddr != newContractAddr);\n        newContractAddr = _newContractAddr;\n    }\n\n    ///set a new owner.\n    function changeOwner(address _newFundDeposit) isOwner() external {\n        require(_newFundDeposit != address(0x0));\n        ethFundDeposit = _newFundDeposit;\n    }\n\n    ///sends the tokens to new contract\n    function migrate() external {\n        require(!isFunding);\n        require(newContractAddr != address(0x0));\n\n        uint256 tokens = balances[msg.sender];\n        require(tokens != 0);\n\n        balances[msg.sender] = 0;\n        tokenMigrated = safeAdd(tokenMigrated, tokens);\n\n        IMigrationContract newContract = IMigrationContract(newContractAddr);\n        require(newContract.migrate(msg.sender, tokens));\n\n        emit Migrate(msg.sender, tokens);               // log it\n    }\n\n    /// 转账ETH 到团队\n    function transferETH() isOwner external {\n        require(address(this).balance != 0);\n        require(ethFundDeposit.send(address(this).balance));\n    }\n\n    ///  将token分配到预处理地址。\n    function allocateToken (address _addr, uint256 _eth) isOwner external {\n        require(_eth != 0);\n        require(_addr != address(0x0));\n\n        uint256 tokens = safeMult(formatDecimals(_eth), tokenExchangeRate);\n        require(tokens + tokenRaised <= currentSupply);\n\n        tokenRaised = safeAdd(tokenRaised, tokens);\n        balances[_addr] += tokens;\n\n        emit AllocateToken(_addr, tokens);  // 记录token日志\n    }\n\n    /// 购买token\n    function () public payable {\n        require(isFunding);\n        require(msg.value != 0);\n\n        require(block.number >= fundingStartBlock);\n        require(block.number <= fundingStopBlock);\n\n        uint256 tokens = safeMult(msg.value, tokenExchangeRate);\n        require(tokens + tokenRaised <= currentSupply);\n\n        tokenRaised = safeAdd(tokenRaised, tokens);\n        balances[msg.sender] += tokens;\n\n        emit IssueToken(msg.sender, tokens);  //记录日志\n    }\n}",
  "bytecode": "60806040526040805190810160405280600381526020017f312e3000000000000000000000000000000000000000000000000000000000008152506003908051906020019062000051929190620001bf565b5060006009556000600a5561012c600b553480156200006f57600080fd5b5060405160408062001f3f833981018060405281019080805190602001909291908051906020019092919050505081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600560146101000a81548160ff021916908315150217905550600060068190555060006007819055506200012381620001af640100000000026401000000009004565b60088190555062000147633b9aca00620001af640100000000026401000000009004565b600081905550600054600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060005460085411151515620001a757600080fd5b50506200026e565b60006012600a0a82029050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020257805160ff191683800117855562000233565b8280016001018555821562000233579182015b828111156200023257825182559160200191906001019062000215565b5b50905062000242919062000246565b5090565b6200026b91905b80821115620002675760008160009055506001016200024d565b5090565b90565b611cc1806200027e6000396000f300608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610297578063095ea7b3146103275780630a9ffdb71461038c57806313b53153146103d957806318160ddd1461040857806323b872dd1461043357806326a21575146104b8578063313ce567146104e357806332513ce51461050e5780634172d080146105655780634477c5da146105905780634a36df25146105a757806354fd4d50146105ea5780636fe3a5671461067a57806370a08231146106a5578063771282f6146106fc578063775c46cd146107275780638fd3ab801461075e57806395d89b411461077557806398e52f9a14610805578063a6f9dae114610832578063a81c3bdf14610875578063a9059cbb146108cc578063b921e16314610931578063cb7b86731461095e578063d648a6471461098b578063dd62ed3e146109b6578063e28d717b14610a2d578063ff29507d14610a44575b6000600560149054906101000a900460ff16151561019257600080fd5b600034141515156101a257600080fd5b60065443101515156101b357600080fd5b60075443111515156101c457600080fd5b6101d034600b54610a6f565b90506008546009548201111515156101e757600080fd5b6101f360095482610aa2565b60098190555080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167f7ba26a0f068612fb882b3272004674d21fed286c2c8c795cf653044690b32db4826040518082815260200191505060405180910390a250005b3480156102a357600080fd5b506102ac610acc565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102ec5780820151818401526020810190506102d1565b50505050905090810190601f1680156103195780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561033357600080fd5b50610372600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b05565b604051808215151515815260200191505060405180910390f35b34801561039857600080fd5b506103d7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bf7565b005b3480156103e557600080fd5b506103ee610d7e565b604051808215151515815260200191505060405180910390f35b34801561041457600080fd5b5061041d610d91565b6040518082815260200191505060405180910390f35b34801561043f57600080fd5b5061049e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d97565b604051808215151515815260200191505060405180910390f35b3480156104c457600080fd5b506104cd611013565b6040518082815260200191505060405180910390f35b3480156104ef57600080fd5b506104f8611019565b6040518082815260200191505060405180910390f35b34801561051a57600080fd5b5061052361101e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561057157600080fd5b5061057a611044565b6040518082815260200191505060405180910390f35b34801561059c57600080fd5b506105a561104a565b005b3480156105b357600080fd5b506105e8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110de565b005b3480156105f657600080fd5b506105ff6111db565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561063f578082015181840152602081019050610624565b50505050905090810190601f16801561066c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561068657600080fd5b5061068f611279565b6040518082815260200191505060405180910390f35b3480156106b157600080fd5b506106e6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061127f565b6040518082815260200191505060405180910390f35b34801561070857600080fd5b506107116112c8565b6040518082815260200191505060405180910390f35b34801561073357600080fd5b5061075c60048036038101908080359060200190929190803590602001909291905050506112ce565b005b34801561076a57600080fd5b5061077361138f565b005b34801561078157600080fd5b5061078a611615565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107ca5780820151818401526020810190506107af565b50505050905090810190601f1680156107f75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561081157600080fd5b506108306004803603810190808035906020019092919050505061164e565b005b34801561083e57600080fd5b50610873600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611719565b005b34801561088157600080fd5b5061088a6117f5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108d857600080fd5b50610917600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061181b565b604051808215151515815260200191505060405180910390f35b34801561093d57600080fd5b5061095c60048036038101908080359060200190929190505050611984565b005b34801561096a57600080fd5b5061098960048036038101908080359060200190929190505050611a4f565b005b34801561099757600080fd5b506109a0611ad6565b6040518082815260200191505060405180910390f35b3480156109c257600080fd5b50610a17600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611adc565b6040518082815260200191505060405180910390f35b348015610a3957600080fd5b50610a42611b63565b005b348015610a5057600080fd5b50610a59611c61565b6040518082815260200191505060405180910390f35b60008082840290506000841480610a905750828482811515610a8d57fe5b04145b1515610a9857fe5b8091505092915050565b6000808284019050838110158015610aba5750828110155b1515610ac257fe5b8091505092915050565b6040805190810160405280600381526020017f4b4d42000000000000000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c5557600080fd5b60008214151515610c6557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610ca157600080fd5b610cb5610cad83611c67565b600b54610a6f565b9050600854600954820111151515610ccc57600080fd5b610cd860095482610aa2565b60098190555080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff167f1aee3ddc9eba03c98b273cd914e999b78162e1ddd1c022045394f635a469e105826040518082815260200191505060405180910390a2505050565b600560149054906101000a900460ff1681565b60005481565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610e64575081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610e705750600082115b156110075781600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905061100c565b600090505b9392505050565b60095481565b601281565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b5481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110a657600080fd5b600560149054906101000a900460ff1615156110c157600080fd5b6000600560146101000a81548160ff021916908315150217905550565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561113a57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561119757600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112715780601f1061124657610100808354040283529160200191611271565b820191906000526020600020905b81548152906001019060200180831161125457829003601f168201915b505050505081565b600a5481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60085481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561132a57600080fd5b600560149054906101000a900460ff1615151561134657600080fd5b808210151561135457600080fd5b814310151561136257600080fd5b81600681905550806007819055506001600560146101000a81548160ff0219169083151502179055505050565b600080600560149054906101000a900460ff161515156113ae57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561140c57600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506000821415151561145e57600080fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506114af600a5483610aa2565b600a81905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663ad68ebf733846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561157d57600080fd5b505af1158015611591573d6000803e3d6000fd5b505050506040513d60208110156115a757600080fd5b810190808051906020019092919050505015156115c357600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167fa59785389b00cbd19745afbe8d59b28e3161395c6b1e3525861a2b0dede0b90d836040518082815260200191505060405180910390a25050565b6040805190810160405280600381526020017f4b4d42000000000000000000000000000000000000000000000000000000000081525081565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116ac57600080fd5b6116b582611c67565b90506008546009548201111515156116cc57600080fd5b6116d860085482611c77565b6008819055507f9ecdebfa921d6ab8cecf7259ef30327664ad0d45d32fa3641089b00b533f2eee816040518082815260200191505060405180910390a15050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561177557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156117b157600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561186c5750600082115b156119795781600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905061197e565b600090505b92915050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119e257600080fd5b6119eb82611c67565b9050600054600854820111151515611a0257600080fd5b611a0e60085482610aa2565b6008819055507ffaabf704b783af9e21c676de8e3e6e0c9c2260dce2ee299437ec9b70151ddaeb816040518082815260200191505060405180910390a15050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611aab57600080fd5b60008114151515611abb57600080fd5b600b548114151515611acc57600080fd5b80600b8190555050565b60065481565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bbf57600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff163114151515611be657600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515611c5f57600080fd5b565b60075481565b60006012600a0a82029050919050565b600080828410151515611c8657fe5b828403905080915050929150505600a165627a7a72305820efaa11538a426d178ddd604b1b71eafb34720bb55699b60463cf5f9b4c20bbce002900000000000000000000000016dc60b242e301c40541fe89ca4065471de12ba3000000000000000000000000000000000000000000000000000000003b9aca00",
  "constructorArguments": "00000000000000000000000016dc60b242e301c40541fe89ca4065471de12ba3000000000000000000000000000000000000000000000000000000003b9aca00"
}