{
  "address": "0x8815dfae43dd8f6e772cb700b4721d1deab0fac0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Lescovex",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-12\n*/\n\npragma solidity ^0.4.19;\n\n// Vicent Nos & Enrique Santos\n\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function Ownable() internal {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n\n//////////////////////////////////////////////////////////////\n//                                                          //\n//  Lescovex, Shareholder's ERC20                           //\n//                                                          //\n//////////////////////////////////////////////////////////////\n\ncontract LescovexERC20 is Ownable {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) holded;\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    uint256 public constant blockEndICO = 1524182460;\n\n    /* Public variables for the ERC20 token */\n    string public constant standard = \"ERC20 Lescovex\";\n    uint8 public constant decimals = 8; // hardcoded to be a constant\n    uint256 public totalSupply;\n    string public name;\n    string public symbol;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function holdedOf(address _owner) public view returns (uint256 balance) {\n        return holded[_owner];\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(block.timestamp > blockEndICO || msg.sender == owner);\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        holded[_to] = block.number;\n        balances[_to] = balances[_to].add(_value);\n\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_value);\n        holded[_to] = block.number;\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n\n    function approve(address _spender, uint256 _value) public onlyOwner returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public onlyOwner returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public onlyOwner returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /* Approve and then communicate the approved contract in a single tx */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public onlyOwner returns (bool success) {    \n        tokenRecipient spender = tokenRecipient(_spender);\n\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n}\n\n\ninterface tokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public ; \n}\n\n    \ncontract Lescovex is LescovexERC20 {\n\n    // Contract variables and constants\n    uint256 constant initialSupply = 0;\n    string constant tokenName = \"Lescovex Shareholder's\";\n    string constant tokenSymbol = \"LCX\";\n\n    address public LescovexAddr = 0xD26286eb9E6E623dba88Ed504b628F648ADF7a0E;\n    uint256 public constant minPrice = 7500000000000000;\n    uint256 public buyPrice = minPrice;\n    uint256 public tokenReward = 0;\n    // constant to simplify conversion of token amounts into integer form\n    uint256 public tokenUnit = uint256(10)**decimals;\n\n    //Declare logging events\n    event LogDeposit(address sender, uint amount);\n    event LogWithdrawal(address receiver, uint amount);\n  \n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function Lescovex() public {\n        totalSupply = initialSupply;  // Update total supply\n        name = tokenName;             // Set the name for display purposes\n        symbol = tokenSymbol;         // Set the symbol for display purposes\n    }\n\n    function () public payable {\n        buy();   // Allow to buy tokens sending ether directly to contract\n    }\n\n    modifier status() {\n        _;  // modified function code should go before prices update\n\n        if (block.timestamp < 1519862460){          //until 1 march 2018\n            if (totalSupply < 50000000000000){\n                buyPrice = 7500000000000000;\n\n            } else {\n                buyPrice = 8000000000000000;\n            }\n        } else if (block.timestamp < 1520640060){   // until 10 march 2018\n          buyPrice = 8000000000000000;\n\n        } else if (block.timestamp<1521504060){     //until 20 march 2018\n          buyPrice = 8500000000000000;\n\n        } else if (block.timestamp < 1522368060){   //until 30 march 2018\n\n          buyPrice = 9000000000000000;\n\n        } else if (block.timestamp < 1523232060){   //until 9 april 2018\n          buyPrice = 9500000000000000;\n\n        } else {\n\n          buyPrice = 10000000000000000;\n        }\n    }\n\n    function deposit() public payable onlyOwner returns(bool success) {\n        // Check for overflows;\n\n        assert (this.balance + msg.value >= this.balance); // Check for overflows\n        tokenReward = this.balance / totalSupply;\n\n        //executes event to reflect the changes\n        LogDeposit(msg.sender, msg.value);\n        \n        return true;\n    }\n\n    function withdrawReward() public status {\n        require (block.number - holded[msg.sender] > 172800); //1 month\n\n        holded[msg.sender] = block.number;\n        uint256 ethAmount = tokenReward * balances[msg.sender];\n\n        //send eth to owner address\n        msg.sender.transfer(ethAmount);\n          \n        //executes event to register the changes\n        LogWithdrawal(msg.sender, ethAmount);\n    }\n\n    function withdraw(uint value) public onlyOwner {\n        //send eth to owner address\n        msg.sender.transfer(value);\n\n        //executes event to register the changes\n        LogWithdrawal(msg.sender, value);\n    }\n\n    function buy() public payable status {\n        require (totalSupply <= 1000000000000000);\n        require(block.timestamp < blockEndICO);\n\n        uint256 tokenAmount = (msg.value / buyPrice)*tokenUnit ;  // calculates the amount\n\n        transferBuy(msg.sender, tokenAmount);\n        LescovexAddr.transfer(msg.value);\n    }\n\n    function transferBuy(address _to, uint256 _value) internal returns (bool) {\n        require(_to != address(0));\n\n        // SafeMath.add will throw if there is not enough balance.\n        totalSupply = totalSupply.add(_value*2);\n        holded[_to] = block.number;\n        balances[LescovexAddr] = balances[LescovexAddr].add(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        Transfer(this, _to, _value);\n        Transfer(this, LescovexAddr, _value);\n        return true;\n    }\n\n  function burn(address addr) public onlyOwner{\n    totalSupply=totalSupply.sub(balances[addr]);\n    balances[addr]=0;\n\n  }\n\n}",
  "bytecode": "606060405273d26286eb9e6e623dba88ed504b628f648adf7a0e600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550661aa535d3d0c0006008556000600955600860ff16600a0a600a5534156200008057600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006004819055506040805190810160405280601681526020017f4c6573636f766578205368617265686f6c64657227730000000000000000000081525060059080519060200190620001159291906200016a565b506040805190810160405280600381526020017f4c4358000000000000000000000000000000000000000000000000000000000081525060069080519060200190620001639291906200016a565b5062000219565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001ad57805160ff1916838001178555620001de565b82800160010185558215620001de579182015b82811115620001dd578251825591602001919060010190620001c0565b5b509050620001ed9190620001f1565b5090565b6200021691905b8082111562000212576000816000905550600101620001f8565b5090565b90565b61275a80620002296000396000f30060606040526004361061015f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610169578063095ea7b3146101f757806318160ddd1461025157806323b872dd1461027a5780632e1a7d4d146102f3578063313ce567146103165780635a3b7e421461034557806366188463146103d35780636e66f6e91461042d57806370a08231146104565780638620410b146104a357806389afcb44146104cc5780638da5cb5b1461050557806395d89b411461055a578063a6f2ae3a146105e8578063a9059cbb146105f2578063c885bc581461064c578063cae9ca5114610661578063d0e30db0146106fe578063d73dd62314610720578063dd62ed3e1461077a578063e2a3382f146107e6578063e45be8eb14610833578063e93c980d1461085c578063f15f2bf014610885578063f2fde38b146108ae578063f309782b146108e7575b61016761093c565b005b341561017457600080fd5b61017c610abe565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101bc5780820151818401526020810190506101a1565b50505050905090810190601f1680156101e95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561020257600080fd5b610237600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b5c565b604051808215151515815260200191505060405180910390f35b341561025c57600080fd5b610264610ca9565b6040518082815260200191505060405180910390f35b341561028557600080fd5b6102d9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610caf565b604051808215151515815260200191505060405180910390f35b34156102fe57600080fd5b61031460048080359060200190919050506110b2565b005b341561032157600080fd5b6103296111bb565b604051808260ff1660ff16815260200191505060405180910390f35b341561035057600080fd5b6103586111c0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561039857808201518184015260208101905061037d565b50505050905090810190601f1680156103c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103de57600080fd5b610413600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506111f9565b604051808215151515815260200191505060405180910390f35b341561043857600080fd5b6104406114e5565b6040518082815260200191505060405180910390f35b341561046157600080fd5b61048d600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506114eb565b6040518082815260200191505060405180910390f35b34156104ae57600080fd5b6104b6611534565b6040518082815260200191505060405180910390f35b34156104d757600080fd5b610503600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061153a565b005b341561051057600080fd5b610518611637565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561056557600080fd5b61056d61165c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105ad578082015181840152602081019050610592565b50505050905090810190601f1680156105da5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6105f061093c565b005b34156105fd57600080fd5b610632600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506116fa565b604051808215151515815260200191505060405180910390f35b341561065757600080fd5b61065f6119cc565b005b341561066c57600080fd5b6106e4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611c2a565b604051808215151515815260200191505060405180910390f35b610706611e03565b604051808215151515815260200191505060405180910390f35b341561072b57600080fd5b610760600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611f39565b604051808215151515815260200191505060405180910390f35b341561078557600080fd5b6107d0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612190565b6040518082815260200191505060405180910390f35b34156107f157600080fd5b61081d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612217565b6040518082815260200191505060405180910390f35b341561083e57600080fd5b610846612260565b6040518082815260200191505060405180910390f35b341561086757600080fd5b61086f61226b565b6040518082815260200191505060405180910390f35b341561089057600080fd5b610898612271565b6040518082815260200191505060405180910390f35b34156108b957600080fd5b6108e5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612279565b005b34156108f257600080fd5b6108fa6123ce565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600066038d7ea4c680006004541115151561095657600080fd5b635ad92dbc4210151561096857600080fd5b600a546008543481151561097857fe5b0402905061098633826123f4565b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015156109e957600080fd5b635a9742bc421015610a2c57652d79883d20006004541015610a1857661aa535d3d0c000600881905550610a27565b661c6bf5263400006008819055505b610abb565b635aa3203c421015610a4b57661c6bf526340000600881905550610aba565b635ab04f3c421015610a6a57661e32b478974000600881905550610ab9565b635abd7e3c421015610a8957661ff973cafa8000600881905550610ab8565b635acaad3c421015610aa8576621c0331d5dc000600881905550610ab7565b662386f26fc100006008819055505b5b5b5b5b50565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b545780601f10610b2957610100808354040283529160200191610b54565b820191906000526020600020905b815481529060010190602001808311610b3757829003601f168201915b505050505081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bb957600080fd5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60045481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610cec57600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610d3a57600080fd5b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610dc557600080fd5b610e1782600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546126f790919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555043600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ef082600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461271090919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fc282600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546126f790919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561110d57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561114d57600080fd5b7fb4214c8c54fc7442f36d3682f59aebaf09358a4431835b30efb29d52cf9e1e913382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150565b600881565b6040805190810160405280600e81526020017f4552433230204c6573636f76657800000000000000000000000000000000000081525081565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561125757600080fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115611365576000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113f9565b61137883826126f790919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60095481565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60085481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561159557600080fd5b6115e9600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546004546126f790919063ffffffff16565b6004819055506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116f25780601f106116c7576101008083540402835291602001916116f2565b820191906000526020600020905b8154815290600101906020018083116116d557829003601f168201915b505050505081565b6000635ad92dbc42118061175a57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561176557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156117a157600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156117ef57600080fd5b61184182600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546126f790919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555043600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061191a82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461271090919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60006202a300600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544303111515611a2057600080fd5b43600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546009540290503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515611aea57600080fd5b7fb4214c8c54fc7442f36d3682f59aebaf09358a4431835b30efb29d52cf9e1e913382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1635a9742bc421015611b9857652d79883d20006004541015611b8457661aa535d3d0c000600881905550611b93565b661c6bf5263400006008819055505b611c27565b635aa3203c421015611bb757661c6bf526340000600881905550611c26565b635ab04f3c421015611bd657661e32b478974000600881905550611c25565b635abd7e3c421015611bf557661ff973cafa8000600881905550611c24565b635acaad3c421015611c14576621c0331d5dc000600881905550611c23565b662386f26fc100006008819055505b5b5b5b5b50565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c8857600080fd5b849050611c958585610b5c565b15611dfa578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611d8f578082015181840152602081019050611d74565b50505050905090810190601f168015611dbc5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515611ddd57600080fd5b6102c65a03f11515611dee57600080fd5b50505060019150611dfb565b5b509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e6057600080fd5b3073ffffffffffffffffffffffffffffffffffffffff1631343073ffffffffffffffffffffffffffffffffffffffff16310110151515611e9c57fe5b6004543073ffffffffffffffffffffffffffffffffffffffff1631811515611ec057fe5b046009819055507f1b851e1031ef35a238e6c67d0c7991162390df915f70eaf9098dbf0b175a61983334604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a16001905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f9657600080fd5b61202582600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461271090919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b661aa535d3d0c00081565b600a5481565b635ad92dbc81565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156122d457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561231057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561243157600080fd5b6124496002830260045461271090919063ffffffff16565b60048190555043600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506125078260026000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461271090919063ffffffff16565b60026000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506125be82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461271090919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600082821115151561270557fe5b818303905092915050565b600080828401905083811015151561272457fe5b80915050929150505600a165627a7a723058205cb94759dbf8d003dac8744691d3bc46a55daacfeacf7ecbc98fb529b6964d420029"
}