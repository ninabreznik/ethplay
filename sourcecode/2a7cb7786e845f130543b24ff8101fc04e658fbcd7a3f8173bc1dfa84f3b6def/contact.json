{
  "address": "0xabc50c1de6ffdef945cef9d71f2f2c44c84702b1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FintechChain",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-15\n*/\n\npragma solidity ^0.4.13;\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n\ncontract FintechChain {\n    /* Public variables of the token */\n    string public standard = 'FintechChain 0.1';\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* This notifies clients about the amount burnt */\n    event Burn(address indexed from, uint256 value);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function FintechChain() {\n        balanceOf[msg.sender] = 1000000000 * 1000000000000000000;              // Give the creator all initial tokens\n        totalSupply = 1000000000 * 1000000000000000000;                        // Update total supply\n        name = \"FintechChain\";                                   // Set the name for display purposes\n        symbol = \"FTL\";                               // Set the symbol for display purposes\n        decimals = 18;                            // Amount of decimals for display purposes\n    }\n\n    /* Send coins */\n    function transfer(address _to, uint256 _value) {\n        if (_to == 0x0) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\n        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n        balanceOf[_to] += _value;                            // Add the same to the recipient\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n    }\n\n    /* Allow another contract to spend some tokens in your behalf */\n    function approve(address _spender, uint256 _value)\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /* Approve and then communicate the approved contract in a single tx */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }        \n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (_to == 0x0) revert();                                // Prevent transfer to 0x0 address. Use burn() instead\n        if (balanceOf[_from] < _value) revert();                 // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  // Check for overflows\n        if (_value > allowance[_from][msg.sender]) revert();     // Check allowance\n        balanceOf[_from] -= _value;                           // Subtract from the sender\n        balanceOf[_to] += _value;                             // Add the same to the recipient\n        allowance[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function burn(uint256 _value) returns (bool success) {\n        if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;                      // Subtract from the sender\n        totalSupply -= _value;                                // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) returns (bool success) {\n        if (balanceOf[_from] < _value) revert();                // Check if the sender has enough\n        if (_value > allowance[_from][msg.sender]) revert();    // Check allowance\n        balanceOf[_from] -= _value;                          // Subtract from the sender\n        totalSupply -= _value;                               // Updates totalSupply\n        Burn(_from, _value);\n        return true;\n    }\n}",
  "bytecode": "606060405260408051908101604052601081527f46696e74656368436861696e20302e31000000000000000000000000000000006020820152600090805161004b929160200190610127565b50341561005757600080fd5b5b600160a060020a033316600090815260056020526040908190206b033b2e3c9fd0803ce8000000908190556004558051908101604052600c81527f46696e74656368436861696e0000000000000000000000000000000000000000602082015260019080516100cb929160200190610127565b5060408051908101604052600381527f46544c000000000000000000000000000000000000000000000000000000000060208201526002908051610113929160200190610127565b506003805460ff191660121790555b6101c7565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061016857805160ff1916838001178555610195565b82800160010185558215610195579182015b8281111561019557825182559160200191906001019061017a565b5b506101a29291506101a6565b5090565b6101c491905b808211156101a257600081556001016101ac565b5090565b90565b610b74806101d66000396000f300606060405236156100c25763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100c7578063095ea7b31461015257806318160ddd1461018857806323b872dd146101ad578063313ce567146101e957806342966c68146102125780635a3b7e421461023c57806370a08231146102c757806379cc6790146102f857806395d89b411461032e578063a9059cbb146103b9578063cae9ca51146103dd578063dd62ed3e14610456575b600080fd5b34156100d257600080fd5b6100da61048d565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101175780820151818401525b6020016100fe565b50505050905090810190601f1680156101445780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015d57600080fd5b610174600160a060020a036004351660243561052b565b604051901515815260200160405180910390f35b341561019357600080fd5b61019b61055c565b60405190815260200160405180910390f35b34156101b857600080fd5b610174600160a060020a0360043581169060243516604435610562565b604051901515815260200160405180910390f35b34156101f457600080fd5b6101fc610688565b60405160ff909116815260200160405180910390f35b341561021d57600080fd5b610174600435610691565b604051901515815260200160405180910390f35b341561024757600080fd5b6100da61071d565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101175780820151818401525b6020016100fe565b50505050905090810190601f1680156101445780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102d257600080fd5b61019b600160a060020a03600435166107bb565b60405190815260200160405180910390f35b341561030357600080fd5b610174600160a060020a03600435166024356107cd565b604051901515815260200160405180910390f35b341561033957600080fd5b6100da61088d565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101175780820151818401525b6020016100fe565b50505050905090810190601f1680156101445780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103c457600080fd5b6103db600160a060020a036004351660243561092b565b005b34156103e857600080fd5b61017460048035600160a060020a03169060248035919060649060443590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506109f795505050505050565b604051901515815260200160405180910390f35b341561046157600080fd5b61019b600160a060020a0360043581169060243516610b2b565b60405190815260200160405180910390f35b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105235780601f106104f857610100808354040283529160200191610523565b820191906000526020600020905b81548152906001019060200180831161050657829003601f168201915b505050505081565b600160a060020a03338116600090815260066020908152604080832093861683529290522081905560015b92915050565b60045481565b6000600160a060020a038316151561057957600080fd5b600160a060020a0384166000908152600560205260409020548290101561059f57600080fd5b600160a060020a03831660009081526005602052604090205482810110156105c657600080fd5b600160a060020a03808516600090815260066020908152604080832033909416835292905220548211156105f957600080fd5b600160a060020a03808516600081815260056020908152604080832080548890039055878516808452818420805489019055848452600683528184203390961684529490915290819020805486900390557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b9392505050565b60035460ff1681565b600160a060020a033316600090815260056020526040812054829010156106b757600080fd5b600160a060020a03331660008181526005602052604090819020805485900390556004805485900390557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a25060015b919050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105235780601f106104f857610100808354040283529160200191610523565b820191906000526020600020905b81548152906001019060200180831161050657829003601f168201915b505050505081565b60056020526000908152604090205481565b600160a060020a038216600090815260056020526040812054829010156107f357600080fd5b600160a060020a038084166000908152600660209081526040808320339094168352929052205482111561082657600080fd5b600160a060020a03831660008181526005602052604090819020805485900390556004805485900390557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a25060015b92915050565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105235780601f106104f857610100808354040283529160200191610523565b820191906000526020600020905b81548152906001019060200180831161050657829003601f168201915b505050505081565b600160a060020a038216151561094057600080fd5b600160a060020a0333166000908152600560205260409020548190101561096657600080fd5b600160a060020a038216600090815260056020526040902054818101101561098d57600080fd5b600160a060020a033381166000818152600560205260408082208054869003905592851680825290839020805485019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35b5050565b600083610a04818561052b565b15610b225780600160a060020a0316638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610abb5780820151818401525b602001610aa2565b50505050905090810190601f168015610ae85780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610b0957600080fd5b6102c65a03f11515610b1a57600080fd5b505050600191505b5b509392505050565b6006602090815260009283526040808420909152908252902054815600a165627a7a723058202545dd3fb740737a1e539579ee2b485ef48097a09139b490b49a81da658c0ed60029"
}