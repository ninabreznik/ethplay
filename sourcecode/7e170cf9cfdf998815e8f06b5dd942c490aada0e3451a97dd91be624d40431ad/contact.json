{
  "address": "0xd01534f4564234a4579b1bc1f3413873b7b3d9d7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ATCPLUS",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-26\n*/\n\npragma solidity ^0.4.21;\n/**\n* Math operations with safety checks\n*/\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        //assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c>=a && c>=b);\n        return c;\n    }\n}\n\n\ncontract Ownable {\n    address public owner;\n\n    /**\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n      * account.\n      */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n      * @dev Throws if called by any account other than the owner.\n      */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    /**\n    * @dev Fix for the ERC20 short address attack.\n    */    \n    modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n}\n\n\ncontract ATCPLUS is Ownable{\n    using SafeMath for uint;\n    string public name;     \n    string public symbol;\n    uint8 public decimals;  \n    uint private _totalSupply;\n    uint public basisPointsRate = 0;\n    uint public minimumFee = 0;\n    uint public maximumFee = 0;\n\n    \n    /* This creates an array with all balances */\n    mapping (address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n    \n    /* This generates a public event on the blockchain that will notify clients */\n    /* notify about transfer to client*/\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n    \n    /* notify about approval to client*/\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n    \n    /* notify about basisPointsRate to client*/\n    event Params(\n        uint feeBasisPoints,\n        uint maximumFee,\n        uint minimumFee\n    );\n    \n    // Called when new token are issued\n    event Issue(\n        uint amount\n    );\n\n    // Called when tokens are redeemed\n    event Redeem(\n        uint amount\n    );\n    \n    /*\n        The contract can be initialized with a number of tokens\n        All the tokens are deposited to the owner address\n        @param _balance Initial supply of the contract\n        @param _name Token Name\n        @param _symbol Token symbol\n        @param _decimals Token decimals\n    */\n    constructor() public {\n        name = 'ATC PLUS'; // Set the name for display purposes\n        symbol = 'ATCP'; // Set the symbol for display purposes\n        decimals = 18; // Amount of decimals for display purposes\n        _totalSupply = 410000000 * 10**uint(decimals); // Update total supply\n        balances[msg.sender] = _totalSupply; // Give the creator all initial tokens\n    }\n    \n    /*\n        @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n   \n    /*\n    @dev Gets the balance of the specified address.\n    @param owner The address to query the balance of.\n    @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return balances[owner];\n    }\n    /*\n        @dev transfer token for a specified address\n        @param _to The address to transfer to.\n        @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256  _value) public onlyPayloadSize(2 * 32){\n        //Calculate Fees from basis point rate \n        uint fee = (_value.mul(basisPointsRate)).div(1000);\n        if (fee > maximumFee) {\n            fee = maximumFee;\n        }\n        if (fee < minimumFee) {\n            fee = minimumFee;\n        }\n        // Prevent transfer to 0x0 address.\n        require (_to != 0x0);\n        //check receiver is not owner\n        require(_to != address(0));\n        //Check transfer value is > 0;\n        require (_value > 0); \n        // Check if the sender has enough\n        require (balances[msg.sender] > _value);\n        // Check for overflows\n        require (balances[_to].add(_value) > balances[_to]);\n        //sendAmount to receiver after deducted fee\n        uint sendAmount = _value.sub(fee);\n        // Subtract from the sender\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        // Add the same to the recipient\n        balances[_to] = balances[_to].add(sendAmount); \n        //Add fee to owner Account\n        if (fee > 0) {\n            balances[owner] = balances[owner].add(fee);\n            emit Transfer(msg.sender, owner, fee);\n        }\n        // Notify anyone listening that this transfer took place\n        emit Transfer(msg.sender, _to, _value);\n    }\n    \n    /*\n        @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n        @param _spender The address which will spend the funds.\n        @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool success) {\n        //Check approve value is > 0;\n        require (_value > 0);\n        //Check balance of owner is greater than\n        require (balances[owner] > _value);\n        //check _spender is not itself\n        require (_spender != msg.sender);\n        //Allowed token to _spender\n        allowed[msg.sender][_spender] = _value;\n        //Notify anyone listening that this Approval took place\n        emit Approval(msg.sender,_spender, _value);\n        return true;\n    }\n    \n    /*\n        @dev Transfer tokens from one address to another\n        @param _from address The address which you want to send tokens from\n        @param _to address The address which you want to transfer to\n        @param _value uint the amount of tokens to be transferred\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool success) {\n        //Calculate Fees from basis point rate \n        uint fee = (_value.mul(basisPointsRate)).div(1000);\n        if (fee > maximumFee) {\n                fee = maximumFee;\n        }\n        if (fee < minimumFee) {\n            fee = minimumFee;\n        }\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require (_to != 0x0);\n        //check receiver is not owner\n        require(_to != address(0));\n        //Check transfer value is > 0;\n        require (_value > 0); \n        // Check if the sender has enough\n        require(_value < balances[_from]);\n        // Check for overflows\n        require (balances[_to].add(_value) > balances[_to]);\n        // Check allowance\n        require (_value <= allowed[_from][msg.sender]);\n        uint sendAmount = _value.sub(fee);\n        balances[_from] = balances[_from].sub(_value);// Subtract from the sender\n        balances[_to] = balances[_to].add(sendAmount); // Add the same to the recipient\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        if (fee > 0) {\n            balances[owner] = balances[owner].add(fee);\n            emit Transfer(_from, owner, fee);\n        }\n        emit Transfer(_from, _to, sendAmount);\n        return true;\n    }\n    \n    /*\n        @dev Function to check the amount of tokens than an owner allowed to a spender.\n        @param _owner address The address which owns the funds.\n        @param _spender address The address which will spend the funds.\n        @return A uint specifying the amount of tokens still available for the spender.\n    */\n    function allowance(address _from, address _spender) public view returns (uint remaining) {\n        return allowed[_from][_spender];\n    }\n    \n    /*\n        @dev Function to set the basis point rate .\n        @param newBasisPoints uint which is <= 9.\n    */\n    function setParams(uint newBasisPoints,uint newMaxFee,uint newMinFee) public onlyOwner {\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\n        require(newBasisPoints <= 9);\n        require(newMaxFee <= 100);\n        require(newMinFee <= 5);\n        basisPointsRate = newBasisPoints;\n        maximumFee = newMaxFee.mul(10**uint(decimals));\n        minimumFee = newMinFee.mul(10**uint(decimals));\n        emit Params(basisPointsRate, maximumFee, minimumFee);\n    }\n    /*\n    Issue a new amount of tokens\n    these tokens are deposited into the owner address\n    @param _amount Number of tokens to be issued\n    */\n    function increaseSupply(uint amount) public onlyOwner {\n        require(amount <= 10000000);\n        amount = amount.mul(10**uint(decimals));\n        require(_totalSupply.add(amount) > _totalSupply);\n        require(balances[owner].add(amount) > balances[owner]);\n        balances[owner] = balances[owner].add(amount);\n        _totalSupply = _totalSupply.add(amount);\n        emit Issue(amount);\n    }\n    /*\n    Redeem tokens.\n    These tokens are withdrawn from the owner address\n    if the balance must be enough to cover the redeem\n    or the call will fail.\n    @param _amount Number of tokens to be issued\n    */\n    function decreaseSupply(uint amount) public onlyOwner {\n        require(amount <= 10000000);\n        amount = amount.mul(10**uint(decimals));\n        require(_totalSupply >= amount);\n        require(balances[owner] >= amount);\n        _totalSupply = _totalSupply.sub(amount);\n        balances[owner] = balances[owner].sub(amount);\n        emit Redeem(amount);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBasisPoints\",\"type\":\"uint256\"},{\"name\":\"newMaxFee\",\"type\":\"uint256\"},{\"name\":\"newMinFee\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basisPointsRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maximumFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minimumFee\",\"type\":\"uint256\"}],\"name\":\"Params\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"}]",
  "bytecode": "608060405260006005556000600655600060075534801561001f57600080fd5b5060008054600160a060020a031916331790556040805180820190915260088082527f41544320504c55530000000000000000000000000000000000000000000000006020909201918252610076916001916100f3565b506040805180820190915260048082527f415443500000000000000000000000000000000000000000000000000000000060209092019182526100bb916002916100f3565b5060038054601260ff19909116179081905560ff16600a0a6318701a800260048190553360009081526008602052604090205561018e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061013457805160ff1916838001178555610161565b82800160010185558215610161579182015b82811115610161578251825591602001919060010190610146565b5061016d929150610171565b5090565b61018b91905b8082111561016d5760008155600101610177565b90565b610df88061019d6000396000f3006080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ea578063095ea7b31461017457806318160ddd146101ac5780631a7626e7146101d357806323b872dd146101e8578063313ce56714610212578063353907141461023d5780635a0ce6761461025257806370a08231146102725780638da5cb5b1461029357806395d89b41146102c457806398e52f9a146102d9578063a9059cbb146102f1578063b921e16314610315578063dd62ed3e1461032d578063dd644f7214610354575b600080fd5b3480156100f657600080fd5b506100ff610369565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610139578181015183820152602001610121565b50505050905090810190601f1680156101665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018057600080fd5b50610198600160a060020a03600435166024356103f6565b604080519115158252519081900360200190f35b3480156101b857600080fd5b506101c16104b6565b60408051918252519081900360200190f35b3480156101df57600080fd5b506101c16104bc565b3480156101f457600080fd5b50610198600160a060020a03600435811690602435166044356104c2565b34801561021e57600080fd5b50610227610775565b6040805160ff9092168252519081900360200190f35b34801561024957600080fd5b506101c161077e565b34801561025e57600080fd5b50610270600435602435604435610784565b005b34801561027e57600080fd5b506101c1600160a060020a0360043516610853565b34801561029f57600080fd5b506102a861086e565b60408051600160a060020a039092168252519081900360200190f35b3480156102d057600080fd5b506100ff61087d565b3480156102e557600080fd5b506102706004356108d5565b3480156102fd57600080fd5b50610270600160a060020a03600435166024356109e2565b34801561032157600080fd5b50610270600435610be1565b34801561033957600080fd5b506101c1600160a060020a0360043581169060243516610d03565b34801561036057600080fd5b506101c1610d2e565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103ee5780601f106103c3576101008083540402835291602001916103ee565b820191906000526020600020905b8154815290600101906020018083116103d157829003601f168201915b505050505081565b60006040604436101561040557fe5b6000831161041257600080fd5b60008054600160a060020a0316815260086020526040902054831061043657600080fd5b600160a060020a03841633141561044c57600080fd5b336000818152600960209081526040808320600160a060020a03891680855290835292819020879055805187815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a3600191505b5092915050565b60045490565b60065481565b60008080604060443610156104d357fe5b6104fa6103e86104ee60055488610d3490919063ffffffff16565b9063ffffffff610d6616565b925060075483111561050c5760075492505b60065483101561051c5760065492505b600160a060020a038616151561053157600080fd5b600160a060020a038616151561054657600080fd5b6000851161055357600080fd5b600160a060020a038716600090815260086020526040902054851061057757600080fd5b600160a060020a0386166000908152600860205260409020546105a0818763ffffffff610d7d16565b116105aa57600080fd5b600160a060020a03871660009081526009602090815260408083203384529091529020548511156105da57600080fd5b6105ea858463ffffffff610d9a16565b600160a060020a038816600090815260086020526040902054909250610616908663ffffffff610d9a16565b600160a060020a03808916600090815260086020526040808220939093559088168152205461064b908363ffffffff610d7d16565b600160a060020a03808816600090815260086020908152604080832094909455918a16815260098252828120338252909152205461068f908663ffffffff610d9a16565b600160a060020a038816600090815260096020908152604080832033845290915281209190915583111561072f5760008054600160a060020a03168152600860205260409020546106e6908463ffffffff610d7d16565b60008054600160a060020a0390811682526008602090815260408084209490945591548351878152935190821693918b1692600080516020610dad833981519152928290030190a35b85600160a060020a031687600160a060020a0316600080516020610dad833981519152846040518082815260200191505060405180910390a35060019695505050505050565b60035460ff1681565b60075481565b600054600160a060020a0316331461079b57600080fd5b60098311156107a957600080fd5b60648211156107b757600080fd5b60058111156107c557600080fd5b60058390556003546107e490839060ff16600a0a63ffffffff610d3416565b60075560035461080190829060ff16600a0a63ffffffff610d3416565b60068190556005546007546040805192835260208301919091528181019290925290517fd16858b87f79d06c5d7f4cdf7f0943a3b343a9eb149c10ec26e7bcaae7f19bc59181900360600190a1505050565b600160a060020a031660009081526008602052604090205490565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156103ee5780601f106103c3576101008083540402835291602001916103ee565b600054600160a060020a031633146108ec57600080fd5b629896808111156108fc57600080fd5b60035461091690829060ff16600a0a63ffffffff610d3416565b9050806004541015151561092957600080fd5b60008054600160a060020a031681526008602052604090205481111561094e57600080fd5b600454610961908263ffffffff610d9a16565b60045560008054600160a060020a031681526008602052604090205461098d908263ffffffff610d9a16565b60008054600160a060020a031681526008602090815260409182902092909255805183815290517f702d5967f45f6513a38ffc42d6ba9bf230bd40e8f53b16363c7eb4fd2deb9a44929181900390910190a150565b600080604060443610156109f257fe5b610a0d6103e86104ee60055487610d3490919063ffffffff16565b9250600754831115610a1f5760075492505b600654831015610a2f5760065492505b600160a060020a0385161515610a4457600080fd5b600160a060020a0385161515610a5957600080fd5b60008411610a6657600080fd5b336000908152600860205260409020548410610a8157600080fd5b600160a060020a038516600090815260086020526040902054610aaa818663ffffffff610d7d16565b11610ab457600080fd5b610ac4848463ffffffff610d9a16565b33600090815260086020526040902054909250610ae7908563ffffffff610d9a16565b3360009081526008602052604080822092909255600160a060020a03871681522054610b19908363ffffffff610d7d16565b600160a060020a038616600090815260086020526040812091909155831115610bac5760008054600160a060020a0316815260086020526040902054610b65908463ffffffff610d7d16565b60008054600160a060020a039081168252600860209081526040808420949094559154835187815293519116923392600080516020610dad83398151915292918290030190a35b604080518581529051600160a060020a038716913391600080516020610dad8339815191529181900360200190a35050505050565b600054600160a060020a03163314610bf857600080fd5b62989680811115610c0857600080fd5b600354610c2290829060ff16600a0a63ffffffff610d3416565b600454909150610c38818363ffffffff610d7d16565b11610c4257600080fd5b60008054600160a060020a0316815260086020526040902054610c6b818363ffffffff610d7d16565b11610c7557600080fd5b60008054600160a060020a0316815260086020526040902054610c9e908263ffffffff610d7d16565b60008054600160a060020a0316815260086020526040902055600454610cca908263ffffffff610d7d16565b6004556040805182815290517fcb8241adb0c3fdb35b70c24ce35c5eb0c17af7431c99f827d44a445ca624176a9181900360200190a150565b600160a060020a03918216600090815260096020908152604080832093909416825291909152205490565b60055481565b600080831515610d4757600091506104af565b50828202828482811515610d5757fe5b0414610d5f57fe5b9392505050565b6000808284811515610d7457fe5b04949350505050565b6000828201838110801590610d925750828110155b1515610d5f57fe5b600082821115610da657fe5b509003905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058205863eba41ab845f86e0e1c809d1a755673ee45d5e25302d9a2031156049d70dc0029"
}