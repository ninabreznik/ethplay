{
  "address": "0x7c77a79fb47a72cf9af51c5a7dcdd8bd71cfdff4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DAIHardFactory",
  "compilerVersion": "v0.5.6+commit.b259423e",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-22\n*/\n\npragma solidity 0.5.6;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n * Code yanked from https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract ERC20Interface {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    uint8 public decimals;\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract DAIHardFactory {\n    using SafeMath for uint;\n\n    event NewTrade(uint id, address tradeAddress, bool indexed initiatorIsCustodian);\n\n    ERC20Interface public daiContract;\n    address public founderFeeAddress;\n\n    constructor(ERC20Interface _daiContract, address _founderFeeAddress)\n    public {\n        daiContract = _daiContract;\n        founderFeeAddress = _founderFeeAddress;\n    }\n\n    struct CreationInfo {\n        address address_;\n        uint blocknum;\n    }\n\n    CreationInfo[] public createdTrades;\n\n    function getFounderFee(uint tradeAmount)\n    public\n    pure\n    returns (uint founderFee) {\n        return tradeAmount / 200;\n    }\n\n    /*\n    The Solidity compiler can't handle much stack depth,\n    so we have to pack some args together in annoying ways...\n    Hence 'uintArgs' and 'addressArgs'.\n\n    Here are the layouts for createOpenTrade:\n\n    uintArgs:\n    0 - tradeAmount\n    1 - beneficiaryDeposit\n    2 - abortPunishment\n    3 - pokeReward\n    4 - autorecallInterval\n    5 - autoabortInterval\n    6 - autoreleaseInterval\n    7 - devFee\n\n    addressArgs:\n    0 - initiator\n    1 - devFeeAddress\n    */\n\n    function createOpenTrade(address[2] calldata addressArgs,\n                             bool initiatorIsCustodian,\n                             uint[8] calldata uintArgs,\n                             string calldata terms,\n                             string calldata _commPubkey\n                             )\n    external\n    returns (DAIHardTrade) {\n        uint initialTransfer;\n        uint[8] memory newUintArgs; // Note that this structure is not the same as the above comment describes. See below in DAIHardTrade.open.\n\n        if (initiatorIsCustodian) {\n            initialTransfer = uintArgs[0].add(uintArgs[3]).add(getFounderFee(uintArgs[0])).add(uintArgs[7]);\n            // tradeAmount + pokeReward + getFounderFee(tradeAmount) + devFee\n\n            newUintArgs = [uintArgs[1], uintArgs[2], uintArgs[3], uintArgs[4], uintArgs[5], uintArgs[6], getFounderFee(uintArgs[0]), uintArgs[7]];\n            // see uintArgs comment above DAIHardTrade.beginInOpenPhase\n        }\n        else {\n            initialTransfer = uintArgs[1].add(uintArgs[3]).add(getFounderFee(uintArgs[0])).add(uintArgs[7]);\n            // beneficiaryDeposit + pokeReward + getFounderFee(tradeAmount) + devFee\n\n            newUintArgs = [uintArgs[0], uintArgs[2], uintArgs[3], uintArgs[4], uintArgs[5], uintArgs[6], getFounderFee(uintArgs[0]), uintArgs[7]];\n            // see uintArgs comment above DAIHardTrade.beginInOpenPhase\n        }\n\n        // Create the new trade and add its creationInfo to createdTrades, and emit an event.\n        // This provides a DAIHard interface two options to find all created trades:\n        // scan for NewTrade events or read the createdTrades array.\n        DAIHardTrade newTrade = new DAIHardTrade(daiContract, founderFeeAddress, addressArgs[1]);\n        createdTrades.push(CreationInfo(address(newTrade), block.number));\n        emit NewTrade(createdTrades.length - 1, address(newTrade), initiatorIsCustodian);\n\n        //transfer DAI to the trade and open it\n        require(daiContract.transferFrom(msg.sender, address(newTrade), initialTransfer),\n                \"Token transfer failed. Did you call approve() on the DAI contract?\"\n                );\n        newTrade.beginInOpenPhase(addressArgs[0], initiatorIsCustodian, newUintArgs, terms, _commPubkey);\n\n        return newTrade;\n    }\n\n    /*\n    Array layouts for createCommittedTrade:\n\n    uintArgs:\n    0 - tradeAmount\n    1 - beneficiaryDeposit\n    2 - abortPunishment\n    3 - pokeReward\n    4 - autoabortInterval\n    5 - autoreleaseInterval\n    6 - devFee\n\n    addressArgs:\n    0 - custodian\n    1 - beneficiary\n    2 - devFeeAddress\n    */\n\n    function createCommittedTrade(address[3] calldata addressArgs,\n                                  bool initiatorIsCustodian,\n                                  uint[7] calldata uintArgs,\n                                  string calldata _terms,\n                                  string calldata _initiatorCommPubkey,\n                                  string calldata _responderCommPubkey\n                                  )\n    external\n    returns (DAIHardTrade) {\n        uint initialTransfer = uintArgs[0].add(uintArgs[1]).add(uintArgs[3]).add(getFounderFee(uintArgs[0]).add(uintArgs[6]));\n        // initialTransfer = tradeAmount + beneficiaryDeposit + pokeReward + getFounderFee(tradeAmount) + devFee\n\n        uint[7] memory newUintArgs = [uintArgs[1], uintArgs[2], uintArgs[3], uintArgs[4], uintArgs[5], getFounderFee(uintArgs[0]), uintArgs[6]];\n        // see uintArgs comment above DAIHardTrade.beginInCommittedPhase\n\n        DAIHardTrade newTrade = new DAIHardTrade(daiContract, founderFeeAddress, addressArgs[2]);\n        createdTrades.push(CreationInfo(address(newTrade), block.number));\n        emit NewTrade(createdTrades.length - 1, address(newTrade), initiatorIsCustodian);\n\n        require(daiContract.transferFrom(msg.sender, address(newTrade), initialTransfer),\n                                         \"Token transfer failed. Did you call approve() on the DAI contract?\"\n                                         );\n        newTrade.beginInCommittedPhase(addressArgs[0],\n                                       addressArgs[1],\n                                       initiatorIsCustodian,\n                                       newUintArgs,\n                                       _terms,\n                                       _initiatorCommPubkey,\n                                       _responderCommPubkey\n                                       );\n\n        return newTrade;\n    }\n\n    function numTrades()\n    external\n    view\n    returns (uint num) {\n        return createdTrades.length;\n    }\n}\n\ncontract DAIHardTrade {\n    using SafeMath for uint;\n\n    enum Phase {Creating, Open, Committed, Claimed, Closed}\n    Phase public phase;\n\n    modifier inPhase(Phase p) {\n        require(phase == p, \"inPhase check failed.\");\n        _;\n    }\n\n    enum ClosedReason {NotClosed, Recalled, Aborted, Released, Burned}\n    ClosedReason public closedReason;\n\n    uint[5] public phaseStartTimestamps;\n    uint[5] public phaseStartBlocknums;\n\n    function changePhase(Phase p)\n    internal {\n        phase = p;\n        phaseStartTimestamps[uint(p)] = block.timestamp;\n        phaseStartBlocknums[uint(p)] = block.number;\n    }\n\n\n    address public initiator;\n    address public responder;\n\n    // The contract only has two parties, but depending on how it's opened,\n    // the initiator for example might be either the custodian OR the beneficiary,\n    // so we need four 'role' variables to capture each possible combination.\n\n    bool public initiatorIsCustodian;\n    address public custodian;\n    address public beneficiary;\n\n    modifier onlyInitiator() {\n        require(msg.sender == initiator, \"msg.sender is not Initiator.\");\n        _;\n    }\n    modifier onlyResponder() {\n        require(msg.sender == responder, \"msg.sender is not Responder.\");\n        _;\n    }\n    modifier onlyCustodian() {\n        require (msg.sender == custodian, \"msg.sender is not Custodian.\");\n        _;\n    }\n    modifier onlyBeneficiary() {\n        require (msg.sender == beneficiary, \"msg.sender is not Beneficiary.\");\n        _;\n    }\n    modifier onlyContractParty() { // Must be one of the two parties involved in the contract\n        // Note this still covers the case in which responder still is 0x0, as msg.sender can never be 0x0,\n        // in which case this will revert if msg.sender != initiator.\n        require(msg.sender == initiator || msg.sender == responder, \"msg.sender is not a party in this contract.\");\n        _;\n    }\n\n    ERC20Interface public daiContract;\n    address public founderFeeAddress;\n    address public devFeeAddress;\n\n    bool public pokeRewardSent;\n\n    constructor(ERC20Interface _daiContract, address _founderFeeAddress, address _devFeeAddress)\n    public {\n        // If gas was not an issue we would leave the next three lines in for explicit clarity,\n        // but technically they are a waste of gas, because we're simply setting them to the null values\n        // (which happens automatically anyway when the contract is instantiated)\n\n        // changePhase(Phase.Creating);\n        // closedReason = ClosedReason.NotClosed;\n        // pokeRewardSent = false;\n\n        daiContract = _daiContract;\n        founderFeeAddress = _founderFeeAddress;\n        devFeeAddress = _devFeeAddress;\n    }\n\n    uint public tradeAmount;\n    uint public beneficiaryDeposit;\n    uint public abortPunishment;\n\n    uint public autorecallInterval;\n    uint public autoabortInterval;\n    uint public autoreleaseInterval;\n\n    uint public pokeReward;\n    uint public founderFee;\n    uint public devFee;\n\n    /* ---------------------- CREATED PHASE -----------------------\n\n    The only reason for this phase is so the Factory can have\n    somewhere to send the DAI before the Trade is initiated with\n    all the settings, and moved to the Open phase.\n\n    The Factory creates the DAIHardTrade and moves it past this state\n    in a single call, so any DAIHardTrade made by the factory should\n    never be \"seen\" in this state.\n\n    ------------------------------------------------------------ */\n\n    event Initiated(string terms, string commPubkey);\n\n    /*\n    uintArgs:\n    0 - responderDeposit\n    1 - abortPunishment\n    2 - pokeReward\n    3 - autorecallInterval\n    4 - autoabortInterval\n    5 - autoreleaseInterval\n    6 - founderFee\n    7 - devFee\n    */\n\n    function beginInOpenPhase(address _initiator,\n                              bool _initiatorIsCustodian,\n                              uint[8] memory uintArgs,\n                              string memory terms,\n                              string memory commPubkey\n                              )\n    public\n    inPhase(Phase.Creating) {\n        uint responderDeposit = uintArgs[0];\n        abortPunishment = uintArgs[1];\n        pokeReward = uintArgs[2];\n\n        autorecallInterval = uintArgs[3];\n        autoabortInterval = uintArgs[4];\n        autoreleaseInterval = uintArgs[5];\n\n        founderFee = uintArgs[6];\n        devFee = uintArgs[7];\n\n        initiator = _initiator;\n        initiatorIsCustodian = _initiatorIsCustodian;\n        if (initiatorIsCustodian) {\n            custodian = initiator;\n            tradeAmount = getBalance().sub(pokeReward.add(founderFee).add(devFee));\n            beneficiaryDeposit = responderDeposit;\n        }\n        else {\n            beneficiary = initiator;\n            tradeAmount = responderDeposit;\n            beneficiaryDeposit = getBalance().sub(pokeReward.add(founderFee).add(devFee));\n        }\n\n        require(beneficiaryDeposit <= tradeAmount, \"A beneficiaryDeposit greater than tradeAmount is not allowed.\");\n        require(abortPunishment <= beneficiaryDeposit, \"An abortPunishment greater than beneficiaryDeposit is not allowed.\");\n\n        changePhase(Phase.Open);\n        emit Initiated(terms, commPubkey);\n    }\n\n    /*\n    uintArgs:\n    0 - beneficiaryDeposit\n    1 - abortPunishment\n    2 - pokeReward\n    3 - autoabortInterval\n    4 - autoreleaseInterval\n    5 - founderFee\n    6 - devFee\n    */\n\n    function beginInCommittedPhase(address _custodian,\n                                   address _beneficiary,\n                                   bool _initiatorIsCustodian,\n                                   uint[7] memory uintArgs,\n                                   string memory terms,\n                                   string memory initiatorCommPubkey,\n                                   string memory responderCommPubkey\n                                   )\n    public\n    inPhase(Phase.Creating) {\n        beneficiaryDeposit = uintArgs[0];\n        abortPunishment = uintArgs[1];\n        pokeReward = uintArgs[2];\n\n        autoabortInterval = uintArgs[3];\n        autoreleaseInterval = uintArgs[4];\n\n        founderFee = uintArgs[5];\n        devFee = uintArgs[6];\n\n        custodian = _custodian;\n        beneficiary = _beneficiary;\n        initiatorIsCustodian = _initiatorIsCustodian;\n\n        if (initiatorIsCustodian) {\n            initiator = custodian;\n            responder = beneficiary;\n        }\n        else {\n            initiator = beneficiary;\n            responder = custodian;\n        }\n\n        tradeAmount = getBalance().sub(beneficiaryDeposit.add(pokeReward).add(founderFee).add(devFee));\n\n\n        changePhase(Phase.Committed);\n\n        emit Initiated(terms, initiatorCommPubkey);\n        emit Committed(responder, responderCommPubkey);\n    }\n\n    /* ---------------------- OPEN PHASE --------------------------\n\n    In the Open phase, the Initiator waits for a Responder.\n    We move to the Commited phase once someone becomes the Responder\n    by executing commit() and including msg.value = getResponderDeposit.\n\n    At any time, the Initiator can cancel the whole thing by calling recall().\n\n    After autorecallInterval has passed, the only state change allowed is to recall(),\n    which can be triggered by anyone via poke().\n\n    ------------------------------------------------------------ */\n\n    event Recalled();\n    event Committed(address responder, string commPubkey);\n\n    function recall()\n    external\n    inPhase(Phase.Open)\n    onlyInitiator() {\n       internalRecall();\n    }\n\n    function internalRecall()\n    internal {\n        require(daiContract.transfer(initiator, getBalance()), \"Recall of DAI to initiator failed!\");\n        // Note that this will also return the founderFee and devFee to the intiator,\n        // as well as the pokeReward if it hasn't yet been sent.\n\n        changePhase(Phase.Closed);\n        closedReason = ClosedReason.Recalled;\n\n        emit Recalled();\n    }\n\n    function autorecallAvailable()\n    public\n    view\n    inPhase(Phase.Open)\n    returns(bool available) {\n        return (block.timestamp >= phaseStartTimestamps[uint(Phase.Open)].add(autorecallInterval));\n    }\n\n    function commit(address _responder, string calldata commPubkey)\n    external\n    inPhase(Phase.Open) {\n        require(daiContract.transferFrom(msg.sender, address(this), getResponderDeposit()),\n                                         \"Can't transfer the required deposit from the DAI contract. Did you call approve first?\"\n                                         );\n        require(!autorecallAvailable(), \"autorecallInterval has passed; this offer has expired.\");\n\n        responder = _responder;\n\n        if (initiatorIsCustodian) {\n            beneficiary = responder;\n        }\n        else {\n            custodian = responder;\n        }\n\n        changePhase(Phase.Committed);\n        emit Committed(responder, commPubkey);\n    }\n\n    /* ---------------------- COMMITTED PHASE ---------------------\n\n    In the Committed phase, the Beneficiary is expected to deposit fiat for the DAI,\n    then call claim().\n\n    Otherwise, the Beneficiary can call abort(), which cancels the contract,\n    incurs a small penalty on both parties, and returns the remainder to each party.\n\n    After autoabortInterval has passed, the only state change allowed is to abort(),\n    which can be triggered by anyone via poke().\n\n    ------------------------------------------------------------ */\n\n    event Claimed();\n    event Aborted();\n\n    function abort()\n    external\n    inPhase(Phase.Committed)\n    onlyBeneficiary() {\n        internalAbort();\n    }\n\n    function internalAbort()\n    internal {\n        // Punish both parties equally by burning abortPunishment.\n        // Instead of burning abortPunishment twice, just burn it all in one call (saves gas).\n        require(daiContract.transfer(address(0x0), abortPunishment*2), \"Token burn failed!\");\n        // Security note: The above line risks overflow, but only if abortPunishment >= (maxUint/2).\n        // This should never happen, as abortPunishment <= beneficiaryDeposit <= tradeAmount (as required in both beginIn*Phase functions),\n        // which is ultimately limited by the amount of DAI the user deposited (which must be far less than maxUint/2).\n        // See the note below about avoiding assert() or require() to test this.\n\n        // Send back deposits minus burned amounts.\n        require(daiContract.transfer(beneficiary, beneficiaryDeposit.sub(abortPunishment)), \"Token transfer to Beneficiary failed!\");\n        require(daiContract.transfer(custodian, tradeAmount.sub(abortPunishment)), \"Token transfer to Custodian failed!\");\n\n        // Refund to initiator should include founderFee and devFee\n        uint sendBackToInitiator = founderFee.add(devFee);\n        // If there was a pokeReward left, it should also be sent back to the initiator\n        if (!pokeRewardSent) {\n            sendBackToInitiator = sendBackToInitiator.add(pokeReward);\n        }\n\n        require(daiContract.transfer(initiator, sendBackToInitiator), \"Token refund of founderFee+devFee+pokeReward to Initiator failed!\");\n        \n        changePhase(Phase.Closed);\n        closedReason = ClosedReason.Aborted;\n\n        emit Aborted();\n    }\n\n    function autoabortAvailable()\n    public\n    view\n    inPhase(Phase.Committed)\n    returns(bool passed) {\n        return (block.timestamp >= phaseStartTimestamps[uint(Phase.Committed)].add(autoabortInterval));\n    }\n\n    function claim()\n    external\n    inPhase(Phase.Committed)\n    onlyBeneficiary() {\n        require(!autoabortAvailable(), \"The deposit deadline has passed!\");\n\n        changePhase(Phase.Claimed);\n        emit Claimed();\n    }\n\n    /* ---------------------- CLAIMED PHASE -----------------------\n\n    In the Claimed phase, the Custodian can call release() or burn(),\n    and is expected to call burn() only if the Beneficiary did meet the terms\n    described in the 'terms' value logged with the Initiated event.\n\n    After autoreleaseInterval has passed, the only state change allowed is to release,\n    which can be triggered by anyone via poke().\n\n    ------------------------------------------------------------ */\n\n    event Released();\n    event Burned();\n\n    function release()\n    external\n    inPhase(Phase.Claimed)\n    onlyCustodian() {\n        internalRelease();\n    }\n\n    function internalRelease()\n    internal {\n        //If the pokeReward has not been sent, refund it to the initiator\n        if (!pokeRewardSent) {\n            require(daiContract.transfer(initiator, pokeReward), \"Refund of pokeReward to Initiator failed!\");\n        }\n\n        // Upon successful resolution of trade, the founderFee is sent to the founders of DAIHard,\n        // and the devFee is sent to wherever the original Factory creation call specified.\n        require(daiContract.transfer(founderFeeAddress, founderFee), \"Token transfer to founderFeeAddress failed!\");\n        require(daiContract.transfer(devFeeAddress, devFee), \"Token transfer to devFeeAddress failed!\");\n\n        //Release the remaining balance to the beneficiary.\n        require(daiContract.transfer(beneficiary, getBalance()), \"Final release transfer to beneficiary failed!\");\n\n        changePhase(Phase.Closed);\n        closedReason = ClosedReason.Released;\n\n        emit Released();\n    }\n\n    function autoreleaseAvailable()\n    public\n    view\n    inPhase(Phase.Claimed)\n    returns(bool available) {\n        return (block.timestamp >= phaseStartTimestamps[uint(Phase.Claimed)].add(autoreleaseInterval));\n    }\n\n    function burn()\n    external\n    inPhase(Phase.Claimed)\n    onlyCustodian() {\n        require(!autoreleaseAvailable(), \"autorelease has passed; you can no longer call burn.\");\n\n        internalBurn();\n    }\n\n    function internalBurn()\n    internal {\n        require(daiContract.transfer(address(0x0), getBalance()), \"Final DAI burn failed!\");\n        // Note that this also burns founderFee and devFee.\n\n        changePhase(Phase.Closed);\n        closedReason = ClosedReason.Burned;\n\n        emit Burned();\n    }\n\n    /* ---------------------- OTHER METHODS ----------------------- */\n\n\n\n    function getResponderDeposit()\n    public\n    view\n    returns(uint responderDeposit) {\n        if (initiatorIsCustodian) {\n            return beneficiaryDeposit;\n        }\n        else {\n            return tradeAmount;\n        }\n    }\n\n    function getState()\n    external\n    view\n    returns(uint balance, Phase phase, uint phaseStartTimestamp, address responder, ClosedReason closedReason) {\n        return (getBalance(), this.phase(), phaseStartTimestamps[uint(this.phase())], this.responder(), this.closedReason());\n    }\n\n    function getBalance()\n    public\n    view\n    returns(uint) {\n        return daiContract.balanceOf(address(this));\n    }\n\n    function getParameters()\n    external\n    view\n    returns (address initiator,\n             bool initiatorIsCustodian,\n             uint tradeAmount,\n             uint beneficiaryDeposit,\n             uint autorecallInterval,\n             uint autoabortInterval,\n             uint autoreleaseInterval,\n             uint pokeReward\n             )\n    {\n        return (this.initiator(),\n                this.initiatorIsCustodian(),\n                this.tradeAmount(),\n                this.beneficiaryDeposit(),\n                this.autorecallInterval(),\n                this.autoabortInterval(),\n                this.autoreleaseInterval(),\n                this.pokeReward()\n                );\n    }\n\n    function getPhaseStartInfo()\n    external\n    view\n    returns (uint, uint, uint, uint, uint, uint, uint, uint, uint, uint)\n    {\n        return (phaseStartBlocknums[0],\n                phaseStartBlocknums[1],\n                phaseStartBlocknums[2],\n                phaseStartBlocknums[3],\n                phaseStartBlocknums[4],\n                phaseStartTimestamps[0],\n                phaseStartTimestamps[1],\n                phaseStartTimestamps[2],\n                phaseStartTimestamps[3],\n                phaseStartTimestamps[4]\n                );\n    }\n\n    // Poke function lets anyone move the contract along,\n    // if it's due for some state transition.\n\n    event Poke();\n\n    function pokeNeeded()\n    public\n    view\n    returns (bool needed) {\n        return (  (phase == Phase.Open      && autorecallAvailable() )\n               || (phase == Phase.Committed && autoabortAvailable()  )\n               || (phase == Phase.Claimed   && autoreleaseAvailable())\n               );\n    }\n\n    function poke()\n    external\n    returns (bool moved) {\n        if (pokeNeeded()) {\n            daiContract.transfer(msg.sender, pokeReward);\n            pokeRewardSent = true;\n            emit Poke();\n        }\n        else return false;\n\n        if (phase == Phase.Open && autorecallAvailable()) {\n            internalRecall();\n            return true;\n        }\n        else if (phase == Phase.Committed && autoabortAvailable()) {\n            internalAbort();\n            return true;\n        }\n        else if (phase == Phase.Claimed && autoreleaseAvailable()) {\n            internalRelease();\n            return true;\n        }\n    }\n\n    // StatementLogs allow a starting point for any necessary communication,\n    // and can be used anytime by either party after a Responder commits (even in the Closed phase).\n\n\n    event InitiatorStatementLog(string encryptedForInitiator, string encryptedForResponder);\n    event ResponderStatementLog(string encryptedForInitiator, string encryptedForResponder);\n\n    function initiatorStatement(string memory encryptedForInitiator, string memory encryptedForResponder)\n    public\n    onlyInitiator() {\n        require(phase >= Phase.Committed, \"You can only communicate once the trade contains two parties.\");\n        emit InitiatorStatementLog(encryptedForInitiator, encryptedForResponder);\n    }\n\n    function responderStatement(string memory encryptedForInitiator, string memory encryptedForResponder)\n    public\n    onlyResponder() {\n        require(phase >= Phase.Committed, \"You can only communicate once the trade contains two parties.\");\n        emit ResponderStatementLog(encryptedForInitiator, encryptedForResponder);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516040806141d28339810180604052604081101561003057600080fd5b508051602090910151600080546001600160a01b039384166001600160a01b0319918216179091556001805493909216921691909117905561415b806100776000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063771f4def1161005b578063771f4def1461017f578063840633bb146102a0578063a1e2c105146102cf578063e12f1746146102d75761007d565b8063298fa887146100825780632ce8b913146100a657806332ae15d4146100ae575b600080fd5b61008a610317565b604080516001600160a01b039092168252519081900360200190f35b61008a610326565b61008a60048036036101a08110156100c557600080fd5b604082013515159060608301908301836101808101610160820135600160201b8111156100f157600080fd5b82018360208201111561010357600080fd5b803590602001918460018302840111600160201b8311171561012457600080fd5b919390929091602081019035600160201b81111561014157600080fd5b82018360208201111561015357600080fd5b803590602001918460018302840111600160201b8311171561017457600080fd5b509092509050610335565b61008a60048036036101c081101561019657600080fd5b606082013515159060808301908301836101808101610160820135600160201b8111156101c257600080fd5b8201836020820111156101d457600080fd5b803590602001918460018302840111600160201b831117156101f557600080fd5b919390929091602081019035600160201b81111561021257600080fd5b82018360208201111561022457600080fd5b803590602001918460018302840111600160201b8311171561024557600080fd5b919390929091602081019035600160201b81111561026257600080fd5b82018360208201111561027457600080fd5b803590602001918460018302840111600160201b8311171561029557600080fd5b509092509050610846565b6102bd600480360360208110156102b657600080fd5b5035610c6e565b60408051918252519081900360200190f35b6102bd610c75565b6102f4600480360360208110156102ed57600080fd5b5035610c7b565b604080516001600160a01b03909316835260208301919091528051918290030190f35b6001546001600160a01b031681565b6000546001600160a01b031681565b600080610340610cc9565b88156104475761038b60e089013561037f6103628b60005b6020020135610c6e565b61037f60608d01358d60005b60200201359063ffffffff610cb016565b9063ffffffff610cb016565b9150604051806101000160405280896001600881106103a657fe5b60200201358152602001896002600881106103bd57fe5b60200201358152602001896003600881106103d457fe5b60200201358152602001896004600881106103eb57fe5b602002013581526020018960056008811061040257fe5b602002013581526020018960066008811061041957fe5b602002013581526020016104338a60006008811061035857fe5b815260e08a01356020909101529050610525565b61046d60e089013561037f61045d8b6000610358565b61037f60608d01358d600161036e565b91506040518061010001604052808960006008811061048857fe5b602002013581526020018960026008811061049f57fe5b60200201358152602001896003600881106104b657fe5b60200201358152602001896004600881106104cd57fe5b60200201358152602001896005600881106104e457fe5b60200201358152602001896006600881106104fb57fe5b602002013581526020016105158a60006008811061035857fe5b815260e08a013560209091015290505b600080546001546040516001600160a01b03928316929182169160208f0135169061054f90610ce8565b6001600160a01b03938416815291831660208301529091166040808301919091525190819003606001906000f08015801561058e573d6000803e3d6000fd5b506040805180820182526001600160a01b0383811680835243602080850191825260028054600181018255600082905295517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace96820296870180546001600160a01b031916919096161790945590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf90940193909355905483516000199190910181529182015281519293508c1515927ff7859a666c6b9a314ad037d6183cd3ce2c05ced8e6138b525002f72d9b040dd1929181900390910190a26000805460408051600160e01b6323b872dd0281523360048201526001600160a01b03858116602483015260448201889052915191909216926323b872dd92606480820193602093909283900390910190829087803b1580156106cc57600080fd5b505af11580156106e0573d6000803e3d6000fd5b505050506040513d60208110156106f657600080fd5b505161073657604051600160e51b62461bcd0281526004018080602001828103825260428152602001806140ee6042913960600191505060405180910390fd5b604051600160e01b63b780e3310281526001600160a01b038c358116600483018181528d151560248501529184169263b780e331928e9187918e918e918e918e91906044018661010080838360005b8381101561079d578181015183820152602001610785565b5050505090500180602001806020018381038352878782818152602001925080828437600083820152601f01601f191690910184810383528581526020019050858580828437600081840152601f19601f8201169050808301925050509950505050505050505050600060405180830381600087803b15801561081f57600080fd5b505af1158015610833573d6000803e3d6000fd5b50929d9c50505050505050505050505050565b60008061087461085e60c08b013561037f8c85610358565b61037f60608c01358160208e01358e600061036e565b905061087e610cf5565b6040805160e08101825260208c81013582528c830135908201526060808d0135928201929092526080808d01359282019290925260a0808d0135928201929092529081016108cd8c6000610358565b81526020018b6006602002013590526000805460015492935090916001600160a01b0391821691168e600260200201356001600160a01b031660405161091290610ce8565b6001600160a01b03938416815291831660208301529091166040808301919091525190819003606001906000f080158015610951573d6000803e3d6000fd5b506040805180820182526001600160a01b0383811680835243602080850191825260028054600181018255600082905295517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace96820296870180546001600160a01b031916919096161790945590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf90940193909355905483516000199190910181529182015281519293508e1515927ff7859a666c6b9a314ad037d6183cd3ce2c05ced8e6138b525002f72d9b040dd1929181900390910190a26000805460408051600160e01b6323b872dd0281523360048201526001600160a01b03858116602483015260448201889052915191909216926323b872dd92606480820193602093909283900390910190829087803b158015610a8f57600080fd5b505af1158015610aa3573d6000803e3d6000fd5b505050506040513d6020811015610ab957600080fd5b5051610af957604051600160e51b62461bcd0281526004018080602001828103825260428152602001806140ee6042913960600191505060405180910390fd5b6001600160a01b03818116906395425bff908f35168f600160200201356001600160a01b03168f868f8f8f8f8f8f6040518b63ffffffff1660e01b8152600401808b6001600160a01b03166001600160a01b031681526020018a6001600160a01b03166001600160a01b031681526020018915151515815260200188600760200280838360005b83811015610b98578181015183820152602001610b80565b5050505090500180602001806020018060200184810384528a8a82818152602001925080828437600083820152601f01601f191690910185810384528881526020019050888880828437600083820152601f01601f191690910185810383528681526020019050868680828437600081840152601f19601f8201169050808301925050509d5050505050505050505050505050600060405180830381600087803b158015610c4557600080fd5b505af1158015610c59573d6000803e3d6000fd5b50929f9e505050505050505050505050505050565b60c8900490565b60025490565b60028181548110610c8857fe5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b600082820183811015610cc257600080fd5b9392505050565b6040518061010001604052806008906020820280388339509192915050565b6133da80610d1483390190565b6040518060e00160405280600790602082028038833950919291505056fe608060405234801561001057600080fd5b506040516060806133da8339810180604052606081101561003057600080fd5b5080516020820151604090920151600f80546001600160a01b03199081166001600160a01b039485161790915560108054821694841694909417909355601180549093169116179055613352806100886000396000f3fe608060405234801561001057600080fd5b506004361061025e5760003560e01c8063694133bd11610146578063a5ea11da116100c3578063c090709911610087578063c090709914610a01578063c8ec1b2a14610a09578063d4270d6014610a11578063e788635914610a19578063efe322ff14610b42578063f7b58fc214610b4a5761025e565b8063a5ea11da14610824578063aedd647414610877578063b1c9fe6e1461087f578063b780e33114610887578063bbcc62f7146109f95761025e565b8063913a7de51161010a578063913a7de5146104bf57806395425bff146104eb5780639f8a836e146106eb578063a18afc6614610814578063a4dc89ca1461081c5761025e565b8063694133bd14610482578063716a33881461048a578063804242c714610492578063862ccdc5146104af57806386d1a69f146104b75761025e565b8063375b74c3116101df5780634e71d92d116101a35780634e71d92d146103dc57806351106e78146103e45780635c39fcc11461046257806360c8b8711461046a57806367aff919146104725780636827e7641461047a5761025e565b8063375b74c3146103b457806338af3eed146103bc57806338bbcb11146103c457806344df8e70146103cc5780634d02405c146103d45761025e565b8063298fa88711610226578063298fa887146103255780632ce8b9131461032d57806332fb125f1461033557806334e0d4981461038d57806335a063b4146103aa5761025e565b80630920ec891461026357806312065fe01461027f57806318178358146102995780631865c57d146102a157806325efc91d14610301575b600080fd5b61026b610b52565b604080519115158252519081900360200190f35b610287610b62565b60408051918252519081900360200190f35b61026b610be2565b6102a9610d5b565b604051808681526020018560048111156102bf57fe5b60ff168152602081018590526001600160a01b03841660408201526060018260048111156102e957fe5b60ff1681526020019550505050505060405180910390f35b610309610f2d565b604080516001600160a01b039092168252519081900360200190f35b610309610f3c565b610309610f4b565b61033d610f5a565b604080519a8b5260208b0199909952898901979097526060890195909552608088019390935260a087019190915260c086015260e085015261010084015261012083015251908190036101400190f35b610287600480360360208110156103a357600080fd5b5035610f8c565b6103b2610fa0565b005b610309611064565b610309611073565b610287611082565b6103b2611088565b610287611190565b6103b26111b7565b6103b2600480360360408110156103fa57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561042457600080fd5b82018360208201111561043657600080fd5b803590602001918460018302840111600160201b8311171561045757600080fd5b509092509050611303565b610309611573565b61026b611582565b610287611592565b610287611598565b61028761159e565b61026b6115a4565b610287600480360360208110156104a857600080fd5b503561162a565b61026b611637565b6103b26116b3565b6104c7611774565b604051808260048111156104d757fe5b60ff16815260200191505060405180910390f35b6103b260048036036101a081101561050257600080fd5b6040805160e081810183526001600160a01b038535811695602081013590911694938101351515938101929091610140830191906060840190600790839083908082843760009201919091525091949392602081019250359050600160201b81111561056d57600080fd5b82018360208201111561057f57600080fd5b803590602001918460018302840111600160201b831117156105a057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156105f257600080fd5b82018360208201111561060457600080fd5b803590602001918460018302840111600160201b8311171561062557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561067757600080fd5b82018360208201111561068957600080fd5b803590602001918460018302840111600160201b831117156106aa57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611782945050505050565b6103b26004803603604081101561070157600080fd5b810190602081018135600160201b81111561071b57600080fd5b82018360208201111561072d57600080fd5b803590602001918460018302840111600160201b8311171561074e57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156107a057600080fd5b8201836020820111156107b257600080fd5b803590602001918460018302840111600160201b831117156107d357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611ae3945050505050565b610287611c9c565b610287611ca2565b61082c611ca8565b604080516001600160a01b0390991689529615156020890152878701959095526060870193909352608086019190915260a085015260c084015260e083015251908190036101000190f35b61026b611ffb565b6104c7612064565b6103b2600480360361018081101561089e57600080fd5b6040805161010081810183526001600160a01b0385351694602081013515159481019390926101408401929091840190600890839083908082843760009201919091525091949392602081019250359050600160201b81111561090057600080fd5b82018360208201111561091257600080fd5b803590602001918460018302840111600160201b8311171561093357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561098557600080fd5b82018360208201111561099757600080fd5b803590602001918460018302840111600160201b831117156109b857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061206d945050505050565b610287612380565b610309612386565b610287612395565b6103b261239b565b6103b260048036036040811015610a2f57600080fd5b810190602081018135600160201b811115610a4957600080fd5b820183602082011115610a5b57600080fd5b803590602001918460018302840111600160201b83111715610a7c57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b811115610ace57600080fd5b820183602082011115610ae057600080fd5b803590602001918460018302840111600160201b83111715610b0157600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061245c945050505050565b61026b612574565b6102876125dc565b601154600160a01b900460ff1681565b600f5460408051600160e01b6370a0823102815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610bb057600080fd5b505afa158015610bc4573d6000803e3d6000fd5b505050506040513d6020811015610bda57600080fd5b505190505b90565b6000610bec611637565b15610cbb57600f5460185460408051600160e01b63a9059cbb0281523360048201526024810192909252516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b158015610c4b57600080fd5b505af1158015610c5f573d6000803e3d6000fd5b505050506040513d6020811015610c7557600080fd5b505060118054600160a01b60ff021916600160a01b1790556040517f70c450b08ec8cf2d7c1eb4f12a4608924ea60d4e30e4e202d9b9513806092b0890600090a1610cc3565b506000610bdf565b600160005460ff166004811115610cd657fe5b148015610ce65750610ce6612574565b15610cfb57610cf36125e2565b506001610bdf565b600260005460ff166004811115610d0e57fe5b148015610d1e5750610d1e611ffb565b15610d2b57610cf36126fe565b600360005460ff166004811115610d3e57fe5b148015610d4e5750610d4e6115a4565b15610bdf57610cf3612afe565b6000806000806000610d6b610b62565b306001600160a01b031663b1c9fe6e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610da457600080fd5b505afa158015610db8573d6000803e3d6000fd5b505050506040513d6020811015610dce57600080fd5b505160408051600160e11b6358e4ff370281529051600191309163b1c9fe6e91600480820192602092909190829003018186803b158015610e0e57600080fd5b505afa158015610e22573d6000803e3d6000fd5b505050506040513d6020811015610e3857600080fd5b50516004811115610e4557fe5b60058110610e4f57fe5b0154306001600160a01b03166325efc91d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e8a57600080fd5b505afa158015610e9e573d6000803e3d6000fd5b505050506040513d6020811015610eb457600080fd5b505160408051600160e01b63913a7de50281529051309163913a7de5916004808301926020929190829003018186803b158015610ef057600080fd5b505afa158015610f04573d6000803e3d6000fd5b505050506040513d6020811015610f1a57600080fd5b5051939992985090965094509092509050565b600c546001600160a01b031681565b6010546001600160a01b031681565b600f546001600160a01b031681565b600654600754600854600954600a54600154600254600354600454600554989997989697959694959394929391929091565b60018160058110610f9957fe5b0154905081565b60028060005460ff166004811115610fb457fe5b14610ff75760408051600160e51b62461bcd0281526020600482015260156024820152600080516020613038833981519152604482015290519081900360640190fd5b600e546001600160a01b031633146110595760408051600160e51b62461bcd02815260206004820152601e60248201527f6d73672e73656e646572206973206e6f742042656e65666963696172792e0000604482015290519081900360640190fd5b6110616126fe565b50565b600d546001600160a01b031681565b600e546001600160a01b031681565b60155481565b60038060005460ff16600481111561109c57fe5b146110df5760408051600160e51b62461bcd0281526020600482015260156024820152600080516020613038833981519152604482015290519081900360640190fd5b600d546001600160a01b031633146111415760408051600160e51b62461bcd02815260206004820152601c60248201527f6d73672e73656e646572206973206e6f7420437573746f6469616e2e00000000604482015290519081900360640190fd5b6111496115a4565b1561118857604051600160e51b62461bcd0281526004018080602001828103825260348152602001806132b16034913960400191505060405180910390fd5b611061612e86565b600c54600090600160a01b900460ff16156111ae5750601354610bdf565b50601254610bdf565b60028060005460ff1660048111156111cb57fe5b1461120e5760408051600160e51b62461bcd0281526020600482015260156024820152600080516020613038833981519152604482015290519081900360640190fd5b600e546001600160a01b031633146112705760408051600160e51b62461bcd02815260206004820152601e60248201527f6d73672e73656e646572206973206e6f742042656e65666963696172792e0000604482015290519081900360640190fd5b611278611ffb565b156112cd5760408051600160e51b62461bcd02815260206004820181905260248201527f546865206465706f73697420646561646c696e65206861732070617373656421604482015290519081900360640190fd5b6112d76003612fb2565b6040517fbcb472984264b16baa8cde752f2af002ea8ce06f35d81caee36625234edd2a4690600090a150565b60018060005460ff16600481111561131757fe5b1461135a5760408051600160e51b62461bcd0281526020600482015260156024820152600080516020613038833981519152604482015290519081900360640190fd5b600f546001600160a01b03166323b872dd3330611375611190565b6040805163ffffffff861660e01b81526001600160a01b0394851660048201529290931660248301526044820152905160648083019260209291908290030181600087803b1580156113c657600080fd5b505af11580156113da573d6000803e3d6000fd5b505050506040513d60208110156113f057600080fd5b505161143057604051600160e51b62461bcd02815260040180806020018281038252605681526020018061318d6056913960600191505060405180910390fd5b611438612574565b1561147757604051600160e51b62461bcd0281526004018080602001828103825260368152602001806130c06036913960400191505060405180910390fd5b600c80546001600160a01b0319166001600160a01b0386161790819055600160a01b900460ff16156114ca57600c54600e80546001600160a01b0319166001600160a01b039092169190911790556114ed565b600c54600d80546001600160a01b0319166001600160a01b039092169190911790555b6114f76002612fb2565b600c54604080516001600160a01b03909216808352602083018281529183018590527feb379d64b95802a98f964dccea086b5403ea8ed23be6e53754f352aafe3d77bf9290918691869160608201848480828437600083820152604051601f909101601f1916909201829003965090945050505050a150505050565b600b546001600160a01b031681565b600c54600160a01b900460ff1681565b60175481565b601a5481565b60185481565b600060038060005460ff1660048111156115ba57fe5b146115fd5760408051600160e51b62461bcd0281526020600482015260156024820152600080516020613038833981519152604482015290519081900360640190fd5b60175461162190600160035b6005811061161357fe5b01549063ffffffff61300916565b42101591505090565b60068160058110610f9957fe5b6000600160005460ff16600481111561164c57fe5b14801561165c575061165c612574565b806116855750600260005460ff16600481111561167557fe5b1480156116855750611685611ffb565b806116ae5750600360005460ff16600481111561169e57fe5b1480156116ae57506116ae6115a4565b905090565b60038060005460ff1660048111156116c757fe5b1461170a5760408051600160e51b62461bcd0281526020600482015260156024820152600080516020613038833981519152604482015290519081900360640190fd5b600d546001600160a01b0316331461176c5760408051600160e51b62461bcd02815260206004820152601c60248201527f6d73672e73656e646572206973206e6f7420437573746f6469616e2e00000000604482015290519081900360640190fd5b611061612afe565b600054610100900460ff1681565b60008060005460ff16600481111561179657fe5b146117d95760408051600160e51b62461bcd0281526020600482015260156024820152600080516020613038833981519152604482015290519081900360640190fd5b8451601355602085015160145560408501516018556060850151601655608085015160175560a085015160195560c0850151601a55600d80546001600160a01b03199081166001600160a01b038b811691909117909255600e8054909116918916919091179055600c8054600160a01b60ff021916600160a01b8815158102919091179182905560ff910416156118a157600d54600b80546001600160a01b039283166001600160a01b031991821617909155600e54600c80549190931691161790556118d4565b600e54600b80546001600160a01b039283166001600160a01b031991821617909155600d54600c80549190931691161790555b61191a611906601a546118fa6019546118fa60185460135461300990919063ffffffff16565b9063ffffffff61300916565b61190e610b62565b9063ffffffff61302216565b6012556119276002612fb2565b7fd4f371cb3187dbb4cd61679e0388380cd243ab4d7b40422403aa392779c453628484604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561198b578181015183820152602001611973565b50505050905090810190601f1680156119b85780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156119eb5781810151838201526020016119d3565b50505050905090810190601f168015611a185780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600c54604080516001600160a01b03909216808352602080840183815286519385019390935285517feb379d64b95802a98f964dccea086b5403ea8ed23be6e53754f352aafe3d77bf9492938793929091606084019185019080838360005b83811015611a9e578181015183820152602001611a86565b50505050905090810190601f168015611acb5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050505050505050565b600c546001600160a01b03163314611b455760408051600160e51b62461bcd02815260206004820152601c60248201527f6d73672e73656e646572206973206e6f7420526573706f6e6465722e00000000604482015290519081900360640190fd5b600260005460ff166004811115611b5857fe5b1015611b9857604051600160e51b62461bcd02815260040180806020018281038252603d815260200180613274603d913960400191505060405180910390fd5b7f154bf834d27f59ffeae6f48788956f81f0abf02c144153b5f2a177f75a26faf78282604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015611bfc578181015183820152602001611be4565b50505050905090810190601f168015611c295780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015611c5c578181015183820152602001611c44565b50505050905090810190601f168015611c895780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15050565b60145481565b60165481565b600080600080600080600080306001600160a01b0316635c39fcc16040518163ffffffff1660e01b815260040160206040518083038186803b158015611ced57600080fd5b505afa158015611d01573d6000803e3d6000fd5b505050506040513d6020811015611d1757600080fd5b505160408051600160e01b6360c8b871028152905130916360c8b871916004808301926020929190829003018186803b158015611d5357600080fd5b505afa158015611d67573d6000803e3d6000fd5b505050506040513d6020811015611d7d57600080fd5b505160408051600160e01b63bbcc62f70281529051309163bbcc62f7916004808301926020929190829003018186803b158015611db957600080fd5b505afa158015611dcd573d6000803e3d6000fd5b505050506040513d6020811015611de357600080fd5b505160408051600160e11b637bdac7e10281529051309163f7b58fc2916004808301926020929190829003018186803b158015611e1f57600080fd5b505afa158015611e33573d6000803e3d6000fd5b505050506040513d6020811015611e4957600080fd5b505160408051600160e01b6338bbcb11028152905130916338bbcb11916004808301926020929190829003018186803b158015611e8557600080fd5b505afa158015611e99573d6000803e3d6000fd5b505050506040513d6020811015611eaf57600080fd5b505160408051600160e11b63526e44e50281529051309163a4dc89ca916004808301926020929190829003018186803b158015611eeb57600080fd5b505afa158015611eff573d6000803e3d6000fd5b505050506040513d6020811015611f1557600080fd5b505160408051600160e01b6367aff919028152905130916367aff919916004808301926020929190829003018186803b158015611f5157600080fd5b505afa158015611f65573d6000803e3d6000fd5b505050506040513d6020811015611f7b57600080fd5b505160408051600160e01b63694133bd0281529051309163694133bd916004808301926020929190829003018186803b158015611fb757600080fd5b505afa158015611fcb573d6000803e3d6000fd5b505050506040513d6020811015611fe157600080fd5b5051969f959e50939c50919a509850965094509092509050565b600060028060005460ff16600481111561201157fe5b146120545760408051600160e51b62461bcd0281526020600482015260156024820152600080516020613038833981519152604482015290519081900360640190fd5b6016546116219060016002611609565b60005460ff1681565b60008060005460ff16600481111561208157fe5b146120c45760408051600160e51b62461bcd0281526020600482015260156024820152600080516020613038833981519152604482015290519081900360640190fd5b8351602085015160145560408501516018556060850151601555608085015160165560a085015160175560c085015160195560e0850151601a55600b80546001600160a01b0319166001600160a01b038916179055600c8054600160a01b60ff021916600160a01b8815158102919091179182905560ff9104161561219457600b54600d80546001600160a01b0319166001600160a01b03909216919091179055601a54601954601854612187926119069290916118fa9163ffffffff61300916565b60125560138190556121e1565b600b54600e80546001600160a01b0319166001600160a01b039092169190911790556012819055601a546019546018546121dd926119069290916118fa9163ffffffff61300916565b6013555b601254601354111561222757604051600160e51b62461bcd02815260040180806020018281038252603d8152602001806131e3603d913960400191505060405180910390fd5b601354601454111561226d57604051600160e51b62461bcd0281526004018080602001828103825260428152602001806132e56042913960600191505060405180910390fd5b6122776001612fb2565b7fd4f371cb3187dbb4cd61679e0388380cd243ab4d7b40422403aa392779c453628484604051808060200180602001838103835285818151815260200191508051906020019080838360005b838110156122db5781810151838201526020016122c3565b50505050905090810190601f1680156123085780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561233b578181015183820152602001612323565b50505050905090810190601f1680156123685780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a150505050505050565b60125481565b6011546001600160a01b031681565b60195481565b60018060005460ff1660048111156123af57fe5b146123f25760408051600160e51b62461bcd0281526020600482015260156024820152600080516020613038833981519152604482015290519081900360640190fd5b600b546001600160a01b031633146124545760408051600160e51b62461bcd02815260206004820152601c60248201527f6d73672e73656e646572206973206e6f7420496e69746961746f722e00000000604482015290519081900360640190fd5b6110616125e2565b600b546001600160a01b031633146124be5760408051600160e51b62461bcd02815260206004820152601c60248201527f6d73672e73656e646572206973206e6f7420496e69746961746f722e00000000604482015290519081900360640190fd5b600260005460ff1660048111156124d157fe5b101561251157604051600160e51b62461bcd02815260040180806020018281038252603d815260200180613274603d913960400191505060405180910390fd5b7fa55c4a64f3082af488fd001c7b24fee257712c1f2bae9d40cefaf963fe2f69a682826040518080602001806020018381038352858181518152602001915080519060200190808383600083811015611bfc578181015183820152602001611be4565b600060018060005460ff16600481111561258a57fe5b146125cd5760408051600160e51b62461bcd0281526020600482015260156024820152600080516020613038833981519152604482015290519081900360640190fd5b60155461162190600180611609565b60135481565b600f54600b546001600160a01b039182169163a9059cbb9116612603610b62565b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561265257600080fd5b505af1158015612666573d6000803e3d6000fd5b505050506040513d602081101561267c57600080fd5b50516126bc57604051600160e51b62461bcd0281526004018080602001828103825260228152602001806131486022913960400191505060405180910390fd5b6126c66004612fb2565b6000805461ff0019166101001781556040517fd515c18d0b3569e4adf82872111a30ef1a9ab9ebff7925e588dc25471982153b9190a1565b600f5460145460408051600160e01b63a9059cbb0281526000600482018190526002909302602482015290516001600160a01b039093169263a9059cbb92604480840193602093929083900390910190829087803b15801561275f57600080fd5b505af1158015612773573d6000803e3d6000fd5b505050506040513d602081101561278957600080fd5b50516127df5760408051600160e51b62461bcd02815260206004820152601260248201527f546f6b656e206275726e206661696c6564210000000000000000000000000000604482015290519081900360640190fd5b600f54600e546014546013546001600160a01b039384169363a9059cbb93169161280f919063ffffffff61302216565b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561285e57600080fd5b505af1158015612872573d6000803e3d6000fd5b505050506040513d602081101561288857600080fd5b50516128c857604051600160e51b62461bcd0281526004018080602001828103825260258152602001806130f66025913960400191505060405180910390fd5b600f54600d546014546012546001600160a01b039384169363a9059cbb9316916128f8919063ffffffff61302216565b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561294757600080fd5b505af115801561295b573d6000803e3d6000fd5b505050506040513d602081101561297157600080fd5b50516129b157604051600160e51b62461bcd02815260040180806020018281038252602381526020018061316a6023913960400191505060405180910390fd5b60006129ca601a5460195461300990919063ffffffff16565b601154909150600160a01b900460ff166129f5576018546129f290829063ffffffff61300916565b90505b600f54600b5460408051600160e01b63a9059cbb0281526001600160a01b039283166004820152602481018590529051919092169163a9059cbb9160448083019260209291908290030181600087803b158015612a5157600080fd5b505af1158015612a65573d6000803e3d6000fd5b505050506040513d6020811015612a7b57600080fd5b5051612abb57604051600160e51b62461bcd02815260040180806020018281038252604181526020018061307f6041913960600191505060405180910390fd5b612ac56004612fb2565b6000805461ff0019166102001781556040517f72c874aeff0b183a56e2b79c71b46e1aed4dee5e09862134b8821ba2fddbf8bf9190a150565b601154600160a01b900460ff16612bd857600f54600b5460185460408051600160e01b63a9059cbb0281526001600160a01b039384166004820152602481019290925251919092169163a9059cbb9160448083019260209291908290030181600087803b158015612b6e57600080fd5b505af1158015612b82573d6000803e3d6000fd5b505050506040513d6020811015612b9857600080fd5b5051612bd857604051600160e51b62461bcd0281526004018080602001828103825260298152602001806132206029913960400191505060405180910390fd5b600f5460105460195460408051600160e01b63a9059cbb0281526001600160a01b039384166004820152602481019290925251919092169163a9059cbb9160448083019260209291908290030181600087803b158015612c3757600080fd5b505af1158015612c4b573d6000803e3d6000fd5b505050506040513d6020811015612c6157600080fd5b5051612ca157604051600160e51b62461bcd02815260040180806020018281038252602b815260200180613249602b913960400191505060405180910390fd5b600f54601154601a5460408051600160e01b63a9059cbb0281526001600160a01b039384166004820152602481019290925251919092169163a9059cbb9160448083019260209291908290030181600087803b158015612d0057600080fd5b505af1158015612d14573d6000803e3d6000fd5b505050506040513d6020811015612d2a57600080fd5b5051612d6a57604051600160e51b62461bcd0281526004018080602001828103825260278152602001806130586027913960400191505060405180910390fd5b600f54600e546001600160a01b039182169163a9059cbb9116612d8b610b62565b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015612dda57600080fd5b505af1158015612dee573d6000803e3d6000fd5b505050506040513d6020811015612e0457600080fd5b5051612e4457604051600160e51b62461bcd02815260040180806020018281038252602d81526020018061311b602d913960400191505060405180910390fd5b612e4e6004612fb2565b6000805461ff0019166103001781556040517f20d29efe076941f73e5574acb023c424d63cd6d3d12eb5ac3108a5eaf177daed9190a1565b600f546001600160a01b031663a9059cbb6000612ea1610b62565b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015612ef057600080fd5b505af1158015612f04573d6000803e3d6000fd5b505050506040513d6020811015612f1a57600080fd5b5051612f705760408051600160e51b62461bcd02815260206004820152601660248201527f46696e616c20444149206275726e206661696c65642100000000000000000000604482015290519081900360640190fd5b612f7a6004612fb2565b6000805461ff0019166104001781556040517f6fb11f548e193d40bc036b46ccce56486575c38194e47b5202010c73020c181a9190a1565b6000805482919060ff19166001836004811115612fcb57fe5b0217905550426001826004811115612fdf57fe5b60058110612fe957fe5b0155436006826004811115612ffa57fe5b6005811061300457fe5b015550565b60008282018381101561301b57600080fd5b9392505050565b60008282111561303157600080fd5b5090039056fe696e506861736520636865636b206661696c65642e0000000000000000000000546f6b656e207472616e7366657220746f2064657646656541646472657373206661696c656421546f6b656e20726566756e64206f6620666f756e6465724665652b6465764665652b706f6b6552657761726420746f20496e69746961746f72206661696c6564216175746f726563616c6c496e74657276616c20686173207061737365643b2074686973206f666665722068617320657870697265642e546f6b656e207472616e7366657220746f2042656e6566696369617279206661696c65642146696e616c2072656c65617365207472616e7366657220746f2062656e6566696369617279206661696c656421526563616c6c206f662044414920746f20696e69746961746f72206661696c656421546f6b656e207472616e7366657220746f20437573746f6469616e206661696c65642143616e2774207472616e7366657220746865207265717569726564206465706f7369742066726f6d207468652044414920636f6e74726163742e2044696420796f752063616c6c20617070726f76652066697273743f412062656e65666963696172794465706f7369742067726561746572207468616e207472616465416d6f756e74206973206e6f7420616c6c6f7765642e526566756e64206f6620706f6b6552657761726420746f20496e69746961746f72206661696c656421546f6b656e207472616e7366657220746f20666f756e64657246656541646472657373206661696c656421596f752063616e206f6e6c7920636f6d6d756e6963617465206f6e63652074686520747261646520636f6e7461696e732074776f20706172746965732e6175746f72656c6561736520686173207061737365643b20796f752063616e206e6f206c6f6e6765722063616c6c206275726e2e416e2061626f727450756e6973686d656e742067726561746572207468616e2062656e65666963696172794465706f736974206973206e6f7420616c6c6f7765642ea165627a7a7230582000a402aa753f3e6649f7d22875106ae184b4c70cc1bc65984cb0deae12f8866e0029546f6b656e207472616e73666572206661696c65642e2044696420796f752063616c6c20617070726f76652829206f6e207468652044414920636f6e74726163743fa165627a7a72305820b9af836e1c76ded20c74a92269a7baee0616b9aac6ff5575bbd954e2860e14bf002900000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a232603590000000000000000000000002b518987f8c21937b4d0b700b1224736a28fca23",
  "constructorArguments": "00000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a232603590000000000000000000000002b518987f8c21937b4d0b700b1224736a28fca23"
}