{
  "address": "0x9411186d7c6bf0cd965608433c3ed7005ee6026e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ZlotsMulti",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-03\n*/\n\npragma solidity ^0.4.24;\n\n/*\n* ZETHR PRESENTS: SLOTS\n*\n* Written August 2018 by the Zethr team for zethr.game.\n*\n* Code framework written by Norsefire.\n* EV calculations written by TropicalRogue.\n* Audit and edits written by Klob.\n* Multiroll framework written by Etherguy.\n*\n* Rolling Odds:\n*   49.31%  Lose / 50.69% Win  \n*   35.64%  Two Matching Icons\n*       - 10.00% : 2.50x    Multiplier [Two Rockets]\n*       - 15.00% : 1.33x    Multiplier [Two Gold  Pyramids]\n*       - 15.00% : 1.00x    Multiplier [Two 'Z' Symbols]\n*       - 15.00% : 1.00x    Multiplier [Two 'T' Symbols]\n*       - 15.00% : 1.00x    Multiplier [Two 'H' Symbols]\n*       - 15.00% : 1.25x    Multiplier [Two Purple Pyramids]\n*       - 15.00% : 2.00x    Multiplier [Two Ether Icons]\n*   6.79%   One Of Each Pyramid\n*       - 1.50x  Multiplier\n*   2.94%   One Moon Icon\n*       - 2.50x Multiplier\n*   5.00%   Three Matching Icons\n*       - 03.00% : 13.00x   Multiplier [Three Rockets]\n*       - 05.00% : 09.00x   Multiplier [Three Gold  Pyramids]\n*       - 27.67% : 03.00x   Multiplier [Three 'Z' Symbols]\n*       - 27.67% : 03.00x   Multiplier [Three 'T' Symbols]\n*       - 27.67% : 03.00x   Multiplier [Three 'H' Symbols]\n*       - 05.00% : 07.50x   Multiplier [Three Purple Pyramids]\n*       - 04.00% : 11.00x   Multiplier [Three Ether Icons]\n*   0.28%   Z T H Prize\n*       - 20x Multiplier\n*   0.03%   Two Moon Icons\n*       - 50x  Multiplier\n*   0.0001% Three Moon Grand Jackpot\n*       - Jackpot Amount (variable)\n*\n*   From all of us at Zethr, thank you for playing!    \n*\n*/\n\n// Zethr Token Bankroll interface\ncontract ZethrTokenBankroll{\n  // Game request token transfer to player \n  function gameRequestTokens(address target, uint tokens) public;\n  function gameTokenAmount(address what) public returns (uint);\n}\n\n// Zether Main Bankroll interface\ncontract ZethrMainBankroll{\n  function gameGetTokenBankrollList() public view returns (address[7]);\n}\n\n// Zethr main contract interface\ncontract ZethrInterface{\n  function withdraw() public;\n}\n\n// Library for figuring out the \"tier\" (1-7) of a dividend rate\nlibrary ZethrTierLibrary{\n\n  function getTier(uint divRate) \n    internal \n    pure \n    returns (uint)\n  {\n    // Tier logic \n    // Returns the index of the UsedBankrollAddresses which should be used to call into to withdraw tokens \n        \n    // We can divide by magnitude\n    // Remainder is removed so we only get the actual number we want\n    uint actualDiv = divRate; \n    if (actualDiv >= 30){\n      return 6;\n    } else if (actualDiv >= 25){\n      return 5;\n    } else if (actualDiv >= 20){\n      return 4;\n    } else if (actualDiv >= 15){\n      return 3;\n    } else if (actualDiv >= 10){\n      return 2; \n    } else if (actualDiv >= 5){\n      return 1;\n    } else if (actualDiv >= 2){\n      return 0;\n    } else{\n      // Impossible\n      revert(); \n    }\n  }\n}\n\n// Contract that contains the functions to interact with the ZlotsJackpotHoldingContract\ncontract ZlotsJackpotHoldingContract {\n  function payOutWinner(address winner) public; \n  function getJackpot() public view returns (uint);\n}\n \n// Contract that contains the functions to interact with the bankroll system\ncontract ZethrBankrollBridge {\n  // Must have an interface with the main Zethr token contract \n  ZethrInterface Zethr;\n   \n  // Store the bankroll addresses \n  // address[0] is tier1: 2-5% \n  // address[1] is tier2: 5-10, etc\n  address[7] UsedBankrollAddresses; \n\n  // Mapping for easy checking\n  mapping(address => bool) ValidBankrollAddress;\n    \n  // Set up the tokenbankroll stuff \n  function setupBankrollInterface(address ZethrMainBankrollAddress) \n    internal \n  {\n    // Instantiate Zethr\n    Zethr = ZethrInterface(0xb9ab8eed48852de901c13543042204c6c569b811);\n\n    // Get the bankroll addresses from the main bankroll\n    UsedBankrollAddresses = ZethrMainBankroll(ZethrMainBankrollAddress).gameGetTokenBankrollList();\n    for(uint i=0; i<7; i++){\n      ValidBankrollAddress[UsedBankrollAddresses[i]] = true;\n    }\n  }\n    \n  // Require a function to be called from a *token* bankroll \n  modifier fromBankroll() {\n    require(ValidBankrollAddress[msg.sender], \"msg.sender should be a valid bankroll\");\n    _;\n  }\n    \n  // Request a payment in tokens to a user FROM the appropriate tokenBankroll \n  // Figure out the right bankroll via divRate \n  function RequestBankrollPayment(address to, uint tokens, uint tier) \n    internal \n  {\n    address tokenBankrollAddress = UsedBankrollAddresses[tier];\n    ZethrTokenBankroll(tokenBankrollAddress).gameRequestTokens(to, tokens);\n  }\n    \n  function getZethrTokenBankroll(uint divRate) \n    public \n    view \n    returns (ZethrTokenBankroll)\n  {\n    return ZethrTokenBankroll(UsedBankrollAddresses[ZethrTierLibrary.getTier(divRate)]);\n  }\n}\n\n// Contract that contains functions to move divs to the main bankroll\ncontract ZethrShell is ZethrBankrollBridge {\n\n  // Dump ETH balance to main bankroll\n  function WithdrawToBankroll() \n    public \n  {\n    address(UsedBankrollAddresses[0]).transfer(address(this).balance);\n  }\n\n  // Dump divs and dump ETH into bankroll\n  function WithdrawAndTransferToBankroll() \n    public \n  {\n    Zethr.withdraw();\n    WithdrawToBankroll();\n  }\n}\n\n// Zethr game data setup\n// Includes all necessary to run with Zethr\ncontract ZlotsMulti is ZethrShell {\n  using SafeMath for uint;\n\n  // ---------------------- Events\n\n  // Might as well notify everyone when the house takes its cut out.\n  event HouseRetrievedTake(\n    uint timeTaken,\n    uint tokensWithdrawn\n  );\n\n  // Fire an event whenever someone places a bet.\n  event TokensWagered(\n    address _wagerer,\n    uint _wagered\n  );\n\n  event LogResult(\n    address _wagerer,\n    uint _result,\n    uint _profit,\n    uint _wagered,\n    uint _category,\n    bool _win\n  );\n\n  // Result announcement events (to dictate UI output!)\n  event Loss(address _wagerer, uint _block);                  // Category 0\n  event ThreeMoonJackpot(address _wagerer, uint _block);      // Category 1\n  event TwoMoonPrize(address _wagerer, uint _block);          // Category 2\n  event ZTHPrize(address _wagerer, uint _block);              // Category 3\n  event ThreeZSymbols(address _wagerer, uint _block);         // Category 4\n  event ThreeTSymbols(address _wagerer, uint _block);         // Category 5\n  event ThreeHSymbols(address _wagerer, uint _block);         // Category 6\n  event ThreeEtherIcons(address _wagerer, uint _block);       // Category 7\n  event ThreePurplePyramids(address _wagerer, uint _block);   // Category 8\n  event ThreeGoldPyramids(address _wagerer, uint _block);     // Category 9\n  event ThreeRockets(address _wagerer, uint _block);          // Category 10\n  event OneMoonPrize(address _wagerer, uint _block);          // Category 11\n  event OneOfEachPyramidPrize(address _wagerer, uint _block); // Category 12\n  event TwoZSymbols(address _wagerer, uint _block);           // Category 13\n  event TwoTSymbols(address _wagerer, uint _block);           // Category 14\n  event TwoHSymbols(address _wagerer, uint _block);           // Category 15\n  event TwoEtherIcons(address _wagerer, uint _block);         // Category 16\n  event TwoPurplePyramids(address _wagerer, uint _block);     // Category 17\n  event TwoGoldPyramids(address _wagerer, uint _block);       // Category 18\n  event TwoRockets(address _wagerer, uint _block);            // Category 19    \n  event SpinConcluded(address _wagerer, uint _block);         // Debug event\n\n  // ---------------------- Modifiers\n\n  // Makes sure that player porfit can't exceed a maximum amount\n  // We use the max win here - 50x\n  modifier betIsValid(uint _betSize, uint divRate, uint8 spins) {\n    require(_betSize.div(spins).mul(50) <= getMaxProfit(divRate));\n    require(_betSize.div(spins) >= minBet);\n    _;\n  }\n\n  // Requires the game to be currently active\n  modifier gameIsActive {\n    require(gamePaused == false);\n    _;\n  }\n\n  // Require msg.sender to be owner\n  modifier onlyOwner {\n    require(msg.sender == owner); \n    _;\n  }\n\n  // Requires msg.sender to be bankroll\n  modifier onlyBankroll {\n    require(msg.sender == bankroll);\n    _;\n  }\n\n  // Requires msg.sender to be owner or bankroll\n  modifier onlyOwnerOrBankroll {\n    require(msg.sender == owner || msg.sender == bankroll);\n    _;\n  }\n\n  // ---------------------- Variables\n\n  // Configurables\n  uint constant public maxProfitDivisor = 1000000;\n  uint constant public houseEdgeDivisor = 1000;\n  mapping (uint => uint) public maxProfit;\n  uint public maxProfitAsPercentOfHouse;\n  uint public minBet = 1e18;\n  address public zlotsJackpot;\n  address private owner;\n  address private bankroll;\n  bool public gamePaused;\n  bool public canMining = true;\n  uint public miningProfit = 100;\n  uint public minBetMining = 1e18;\n  // Trackers\n  uint  public totalSpins;\n  uint  public totalZTHWagered;\n  mapping (uint => uint) public contractBalance;\n    \n  // Is betting allowed? (Administrative function, in the event of unforeseen bugs)\n  //bool public gameActive;\n\n  // Bankroll & token addresses\n  address private ZTHTKNADDR;\n  address private ZTHBANKROLL;\n\n  // ---------------------- Functions \n\n  // Constructor; must supply bankroll address\n  constructor(address BankrollAddress) \n    public \n  {\n    // Set up the bankroll interface\n    setupBankrollInterface(BankrollAddress); \n\n    // Owner is deployer\n    owner = msg.sender;\n\n    // Default max profit to 5% of contract balance\n    ownerSetMaxProfitAsPercentOfHouse(500000);\n\n    // Set starting variables\n    bankroll      = ZTHBANKROLL;\n    //gameActive  = true;\n\n    // Init min bet (1 ZTH)\n    ownerSetMinBet(1e18);\n    \n    canMining = false;\n    miningProfit = 100;\n    minBetMining = 1e18;\n  }\n\n  // Zethr dividends gained are accumulated and sent to bankroll manually\n  function() public payable {  }\n\n  // If the contract receives tokens, bundle them up in a struct and fire them over to _spinTokens for validation.\n  struct TKN { address sender; uint value; }\n  function execute(address _from, uint _value, uint divRate, bytes _data) \n    public \n    fromBankroll gameIsActive\n    returns (bool)\n  {\n      TKN memory _tkn;\n      _tkn.sender = _from;\n      _tkn.value = _value;\n      _spinTokens(_tkn, divRate, uint8(_data[0]));\n      return true;\n  }\n\n  struct playerSpin {\n    uint192 tokenValue; // Token value in uint\n    uint48 blockn;      // Block number 48 bits\n    uint8 tier;\n    uint8 spins;\n    uint divRate;\n  }\n\n  // Mapping because a player can do one spin at a time\n  mapping(address => playerSpin) public playerSpins;\n\n  // Execute spin.\n  function _spinTokens(TKN _tkn, uint divRate, uint8 spins) \n    private gameIsActive\n    betIsValid(_tkn.value, divRate, spins)\n  {\n    //require(gameActive);\n    require(block.number <= ((2 ** 48) - 1));  // Current block number smaller than storage of 1 uint56\n    require(_tkn.value <= ((2 ** 192) - 1));\n    require(divRate < (2 ** 8 - 1)); // This should never throw \n    address _customerAddress = _tkn.sender;\n    uint    _wagered         = _tkn.value;\n\n    playerSpin memory spin = playerSpins[_tkn.sender];\n \n    // We update the contract balance *before* the spin is over, not after\n    // This means that we don't have to worry about unresolved rolls never resolving\n    // (we also update it when a player wins)\n    addContractBalance(divRate, _wagered);\n\n    // Cannot spin twice in one block\n    require(block.number != spin.blockn);\n\n    // If there exists a spin, finish it\n    if (spin.blockn != 0) {\n      _finishSpin(_tkn.sender);\n    }\n\n    // Set struct block number and token value\n    spin.blockn = uint48(block.number);\n    spin.tokenValue = uint192(_wagered.div(spins));\n    spin.tier = uint8(ZethrTierLibrary.getTier(divRate));\n    spin.divRate = divRate;\n    spin.spins = spins;\n\n    // Store the roll struct - 40k gas.\n    playerSpins[_tkn.sender] = spin;\n\n    // Increment total number of spins\n    totalSpins += spins;\n\n    // Total wagered\n    totalZTHWagered += _wagered;\n\n    // game mining\n    if(canMining && spin.tokenValue >= minBetMining){\n        uint miningAmout = SafeMath.div(SafeMath.mul(_wagered, miningProfit) , 10000);\n        RequestBankrollPayment(_tkn.sender, miningAmout, spin.divRate);\n    }\n\n    emit TokensWagered(_customerAddress, _wagered);\n  }\n\n  // Finish the current spin of a player, if they have one\n  function finishSpin() \n    public\n    gameIsActive\n    returns (uint[])\n  {\n    return _finishSpin(msg.sender);\n  }\n\n  // Stores the data for the roll (spin)\n  struct rollData {\n    uint win;\n    uint loss; \n    uint jp;\n  }\n\n  // Pay winners, update contract balance, send rewards where applicable.\n  function _finishSpin(address target)\n    private \n    returns (uint[])\n  {\n    playerSpin memory spin = playerSpins[target];\n\n    require(spin.tokenValue > 0); // No re-entrancy\n    require(spin.blockn != block.number);\n        \n    uint[] memory output = new uint[](spin.spins);\n    rollData memory outcomeTrack = rollData(0,0,0);\n    uint category = 0;\n    uint profit;\n    uint playerDivrate = spin.divRate;\n        \n    for(uint i=0; i<spin.spins; i++) {\n        \n      // If the block is more than 255 blocks old, we can't get the result\n      // Also, if the result has already happened, fail as well\n      uint result;\n      if (block.number - spin.blockn > 255) {\n        result = 1000000; // Can't win: default to largest number\n        output[i] = 1000000;\n      } else {\n        // Generate a result - random based ONLY on a past block (future when submitted).\n        // Case statement barrier numbers defined by the current payment schema at the top of the contract.\n        result = random(1000000, spin.blockn, target, i) + 1;\n        output[i] = result;\n      }\n\n      if (result > 506856) {\n        // Player has lost. Womp womp.\n\n        // Add one percent of player loss to the jackpot\n        // (do this by requesting a payout to the jackpot)\n        outcomeTrack.loss += spin.tokenValue/100;\n\n        emit Loss(target, spin.blockn);\n        emit LogResult(target, result, profit, spin.tokenValue, category, false);\n      } else if (result < 2) {\n        // Player has won the three-moon mega jackpot!\n      \n        // Get profit amount via jackpot\n        profit = ZlotsJackpotHoldingContract(zlotsJackpot).getJackpot();\n        category = 1;\n    \n        // Emit events\n        emit ThreeMoonJackpot(target, spin.blockn);\n        emit LogResult(target, result, profit, spin.tokenValue, category, true);\n\n        outcomeTrack.jp += 1;\n\n      } else {\n        if (result < 299) {\n          // Player has won a two-moon prize!\n          profit = SafeMath.mul(spin.tokenValue, 50);\n          category = 2;\n          emit TwoMoonPrize(target, spin.blockn);\n        } else if (result < 3128) {\n          // Player has won the Z T H prize!\n          profit = SafeMath.mul(spin.tokenValue, 20);\n          category = 3;\n          emit ZTHPrize(target, spin.blockn);\n        } else if (result < 16961) {\n          // Player has won a three Z symbol prize!\n          profit = SafeMath.div(SafeMath.mul(spin.tokenValue, 30), 10);\n          category = 4;\n          emit ThreeZSymbols(target, spin.blockn);\n        } else if (result < 30794) {\n          // Player has won a three T symbol prize!\n          profit = SafeMath.div(SafeMath.mul(spin.tokenValue, 30), 10);\n          category = 5;\n          emit ThreeTSymbols(target, spin.blockn);\n        } else if (result < 44627) {\n          // Player has won a three H symbol prize!\n          profit = SafeMath.div(SafeMath.mul(spin.tokenValue, 30), 10);\n          category = 6;\n          emit ThreeHSymbols(target, spin.blockn);\n        } else if (result < 46627) {\n          // Player has won a three Ether icon prize!\n          profit = SafeMath.mul(spin.tokenValue, 11);\n          category = 7;\n          emit ThreeEtherIcons(target, spin.blockn);\n        } else if (result < 49127) {\n          // Player has won a three purple pyramid prize!\n          profit = SafeMath.div(SafeMath.mul(spin.tokenValue, 75), 10);\n          category = 8;\n          emit ThreePurplePyramids(target, spin.blockn);\n        } else if (result < 51627) {\n          // Player has won a three gold pyramid prize!\n          profit = SafeMath.mul(spin.tokenValue, 9);\n          category = 9;\n          emit ThreeGoldPyramids(target, spin.blockn);\n        } else if (result < 53127) {\n          // Player has won a three rocket prize!\n          profit = SafeMath.mul(spin.tokenValue, 13);\n          category = 10;\n          emit ThreeRockets(target, spin.blockn);\n        } else if (result < 82530) {\n          // Player has won a one moon prize!\n          profit = SafeMath.div(SafeMath.mul(spin.tokenValue, 25),10);\n          category = 11;\n          emit OneMoonPrize(target, spin.blockn);\n        } else if (result < 150423) {\n          // Player has won a each-coloured-pyramid prize!\n          profit = SafeMath.div(SafeMath.mul(spin.tokenValue, 15),10);\n          category = 12;\n          emit OneOfEachPyramidPrize(target, spin.blockn);\n        } else if (result < 203888) {\n          // Player has won a two Z symbol prize!\n          profit = spin.tokenValue;\n          category = 13;\n          emit TwoZSymbols(target, spin.blockn);\n        } else if (result < 257353) {\n          // Player has won a two T symbol prize!\n          profit = spin.tokenValue;\n          category = 14;\n          emit TwoTSymbols(target, spin.blockn);\n        } else if (result < 310818) {\n          // Player has won a two H symbol prize!\n          profit = spin.tokenValue;\n          category = 15;\n          emit TwoHSymbols(target, spin.blockn);\n        } else if (result < 364283) {\n          // Player has won a two Ether icon prize!\n          profit = SafeMath.mul(spin.tokenValue, 2);\n          category = 16;\n          emit TwoEtherIcons(target, spin.blockn);\n        } else if (result < 417748) {\n          // Player has won a two purple pyramid prize!\n          profit = SafeMath.div(SafeMath.mul(spin.tokenValue, 125), 100);\n          category = 17;\n          emit TwoPurplePyramids(target, spin.blockn);\n        } else if (result < 471213) {\n          // Player has won a two gold pyramid prize!\n          profit = SafeMath.div(SafeMath.mul(spin.tokenValue, 133), 100);\n          category = 18;\n          emit TwoGoldPyramids(target, spin.blockn);\n        } else {\n          // Player has won a two rocket prize!\n          profit = SafeMath.div(SafeMath.mul(spin.tokenValue, 25), 10);\n          category = 19;\n          emit TwoRockets(target, spin.blockn);\n        }\n\n        uint newMaxProfit = getNewMaxProfit(playerDivrate, outcomeTrack.win);\n        if (profit > newMaxProfit){\n          profit = newMaxProfit;\n        }\n\n        emit LogResult(target, result, profit, spin.tokenValue, category, true);\n        outcomeTrack.win += profit;\n      }\n    }\n\n    playerSpins[target] = playerSpin(uint192(0), uint48(0), uint8(0), uint8(0),  uint(0));\n    if (outcomeTrack.jp > 0) {\n      for (i = 0; i < outcomeTrack.jp; i++) {\n        // In the weird case a player wins two jackpots, we of course pay them twice \n        ZlotsJackpotHoldingContract(zlotsJackpot).payOutWinner(target);\n      }\n    }\n\n    if (outcomeTrack.win > 0) {\n      RequestBankrollPayment(target, outcomeTrack.win, spin.tier);\n    }\n\n    if (outcomeTrack.loss > 0) {\n      // This loss is the loss to pay to the jackpot account \n      // The delta in contractBalance is already updated in a pending bet.\n      RequestBankrollPayment(zlotsJackpot, outcomeTrack.loss, spin.tier);\n    }\n            \n    emit SpinConcluded(target, spin.blockn);\n    return output;\n  }   \n\n  // Returns a random number using a specified block number\n  // Always use a FUTURE block number.\n  function maxRandom(uint blockn, address entropy, uint index) \n    private \n    view\n    returns (uint256 randomNumber) \n  {\n    return uint256(keccak256(\n        abi.encodePacked(\n          blockhash(blockn),\n          entropy,\n          index\n    )));\n  }\n\n  // Random helper\n  function random(uint256 upper, uint256 blockn, address entropy, uint index)\n    internal \n    view \n    returns (uint256 randomNumber)\n  {\n    return maxRandom(blockn, entropy, index) % upper;\n  }\n\n  // Sets max profit (internal)\n  function setMaxProfit(uint divRate) \n    internal \n  {\n    maxProfit[divRate] = (contractBalance[divRate] * maxProfitAsPercentOfHouse) / maxProfitDivisor; \n  } \n\n  // Gets max profit  \n  function getMaxProfit(uint divRate) \n    public \n    view \n    returns (uint) \n  {\n    return (contractBalance[divRate] * maxProfitAsPercentOfHouse) / maxProfitDivisor;\n  }\n\n  function getNewMaxProfit(uint divRate, uint currentWin) \n    public \n    view \n    returns (uint) \n  {\n    return ((contractBalance[divRate] - currentWin) * maxProfitAsPercentOfHouse) / maxProfitDivisor;\n  }\n\n  // Subtracts from the contract balance tracking var\n  function subContractBalance(uint divRate, uint sub) \n    internal \n  {\n    contractBalance[divRate] = contractBalance[divRate].sub(sub);\n  }\n\n  // Adds to the contract balance tracking var\n  function addContractBalance(uint divRate, uint add) \n    internal \n  {\n    contractBalance[divRate] = contractBalance[divRate].add(add);\n  }\n  // Only owner adjust contract balance variable (only used for max profit calc)\n  function ownerUpdateContractBalance(uint newContractBalance, uint divRate) public\n  onlyOwner\n  {\n    contractBalance[divRate] = newContractBalance;\n  }\n  \n  function updateContractBalance(uint newContractBalance) public\n  onlyOwner\n  {\n    contractBalance[2] = newContractBalance;\n    setMaxProfit(2);\n    contractBalance[5] = newContractBalance;\n    setMaxProfit(5);\n    contractBalance[10] = newContractBalance;\n    setMaxProfit(10);\n    contractBalance[15] = newContractBalance;\n    setMaxProfit(15);\n    contractBalance[20] = newContractBalance;\n    setMaxProfit(20);\n    contractBalance[25] = newContractBalance;\n    setMaxProfit(25);\n    contractBalance[33] = newContractBalance;\n    setMaxProfit(33);\n  }  \n  // An EXTERNAL update of tokens should be handled here\n  // This is due to token allocation\n  // The game should handle internal updates itself (e.g. tokens are betted)\n  function bankrollExternalUpdateTokens(uint divRate, uint newBalance) \n    public \n    fromBankroll \n  {\n    contractBalance[divRate] = newBalance;\n    setMaxProfit(divRate);\n  }\n\n  // Set the new max profit as percent of house - can be as high as 20%\n  // (1,000,000 = 100%)\n  function ownerSetMaxProfitAsPercentOfHouse(uint newMaxProfitAsPercent) \n    public\n    onlyOwner\n  {\n    // Restricts each bet to a maximum profit of 50% contractBalance\n    require(newMaxProfitAsPercent <= 500000);\n    maxProfitAsPercentOfHouse = newMaxProfitAsPercent;\n    setMaxProfit(2);\n    setMaxProfit(5);\n    setMaxProfit(10);\n    setMaxProfit(15); \n    setMaxProfit(20);\n    setMaxProfit(25);\n    setMaxProfit(33);\n  }\n\n  // Only owner can set minBet\n  function ownerSetupBankrollInterface(address ZethrMainBankrollAddress) public\n  onlyOwner\n  {\n    setupBankrollInterface(ZethrMainBankrollAddress);\n  }  \n  function ownerSetMinBet(uint newMinimumBet) \n    public\n    onlyOwner\n  {\n    minBet = newMinimumBet;\n  }\n  function ownerPauseGame(bool newStatus) public\n  onlyOwner\n  {\n    gamePaused = newStatus;\n  }\n  function ownerSetCanMining(bool newStatus) public\n  onlyOwner\n  {\n    canMining = newStatus;\n  }\n  function ownerSetMiningProfit(uint newProfit) public\n  onlyOwner\n  {\n    miningProfit = newProfit;\n  }\n  function ownerSetMinBetMining(uint newMinBetMining) public\n  onlyOwner\n  {\n    minBetMining = newMinBetMining;\n  }    \n  // Only owner can set zlotsJackpot address\n  function ownerSetZlotsAddress(address zlotsAddress) \n    public\n    onlyOwner\n  {\n    zlotsJackpot = zlotsAddress;\n  }\n\n  // If, for any reason, betting needs to be paused (very unlikely), this will freeze all bets.\n  /*function pauseGame() \n    public \n    onlyOwnerOrBankroll \n  {\n    gameActive = false;\n  }\n\n  // The converse of the above, resuming betting if a freeze had been put in place.\n  function resumeGame() \n    public \n    onlyOwnerOrBankroll \n  {\n    gameActive = true;\n  }*/\n\n  // Administrative function to change the owner of the contract.\n  function changeOwner(address _newOwner) \n    public \n    onlyOwnerOrBankroll \n  {\n    owner = _newOwner;\n  }\n\n  // Administrative function to change the Zethr bankroll contract, should the need arise.\n  function changeBankroll(address _newBankroll) \n    public \n    onlyOwnerOrBankroll \n  {\n    bankroll = _newBankroll;\n  }\n\n  // Is the address that the token has come from actually ZTH?\n  function _zthToken(address _tokenContract) \n    private \n    view \n    returns (bool) \n  {\n    return _tokenContract == ZTHTKNADDR;\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint a, uint b) \n    internal \n    pure \n    returns (uint) \n  {\n    if (a == 0) {\n      return 0;\n    }\n    uint c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint a, uint b) \n    internal \n    pure \n    returns (uint) \n  {\n    uint c = a / b;\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint a, uint b) \n    internal \n    pure \n    returns (uint) \n  {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint a, uint b) \n    internal \n    pure returns (uint) \n  {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": "6080604052670de0b6b3a7640000600b819055600e805460a860020a60ff02191675010000000000000000000000000000000000000000001790556064600f556010553480156200004f57600080fd5b5060405160208062002ba58339810160405251620000768164010000000062000105810204565b600d8054600160a060020a031916331790556200009f6207a1206401000000006200022c810204565b601554600e8054600160a060020a031916600160a060020a03909216919091179055620000dd670de0b6b3a7640000640100000000620002f0810204565b50600e805460a860020a60ff02191690556064600f55670de0b6b3a7640000601055620003c1565b60008054600160a060020a03191673b9ab8eed48852de901c13543042204c6c569b811178155604080517fb1db1cac0000000000000000000000000000000000000000000000000000000081529051600160a060020a0384169163b1db1cac9160048083019260e092919082900301818787803b1580156200018657600080fd5b505af11580156200019b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060e0811015620001c157600080fd5b50620001d29060019060076200033a565b50600090505b60078110156200022857600160086000828460078110620001f557fe5b0154600160a060020a031681526020810191909152604001600020805460ff1916911515919091179055600101620001d8565b5050565b600d54600160a060020a031633146200024457600080fd5b6207a1208111156200025557600080fd5b600a8190556200026f60026401000000006200030d810204565b6200028460056401000000006200030d810204565b62000299600a6401000000006200030d810204565b620002ae600f6401000000006200030d810204565b620002c360146401000000006200030d810204565b620002d860196401000000006200030d810204565b620002ed60216401000000006200030d810204565b50565b600d54600160a060020a031633146200030857600080fd5b600b55565b600a54600082815260136020526040902054620f4240910260009283526009602052604090922091049055565b826007810192821562000385579160200282015b82811115620003855782518254600160a060020a031916600160a060020a039091161782556020909201916001909101906200034e565b506200039392915062000397565b5090565b620003be91905b8082111562000393578054600160a060020a03191681556001016200039e565b90565b6127d480620003d16000396000f3006080604052600436106101ab5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166304fcadf181146101ad5780630bb954c9146101d45780630d425559146101e9578063172ff8d6146102015780631fc9cee81461022a57806323214fab1461028b5780633ba06452146102a057806343c1598d146102b857806343db5324146102cd5780635a9e91df146102e75780635e968a491461031857806361fda640146103305780636aafb8871461034b5780636cdf4c90146103665780636eacd48a1461037e578063714490ab1461039857806377a28461146103ad57806382004053146103ce57806382916381146103ef578063901b20361461045b578063934354e7146104705780639619367d146104d557806397c6824f146104ea578063a3531f6c146104ff578063a6f9dae114610514578063a78bcf6e14610535578063b3472edb14610556578063bd71e4761461056e578063c3de1ab914610586578063e5c774de1461059b578063e9f6af47146105b0578063ee4eabce146105c8578063ef4ef103146105e0578063f17715ef146105fb575b005b3480156101b957600080fd5b506101c2610613565b60408051918252519081900360200190f35b3480156101e057600080fd5b506101ab610619565b3480156101f557600080fd5b506101ab600435610695565b34801561020d57600080fd5b506102166106b1565b604080519115158252519081900360200190f35b34801561023657600080fd5b5061024b600160a060020a03600435166106d3565b60408051600160c060020a03909616865265ffffffffffff909416602086015260ff92831685850152911660608401526080830152519081900360a00190f35b34801561029757600080fd5b506101c261071c565b3480156102ac57600080fd5b506101c2600435610722565b3480156102c457600080fd5b506101c2610734565b3480156102d957600080fd5b506101ab600435151561073b565b3480156102f357600080fd5b506102fc610794565b60408051600160a060020a039092168252519081900360200190f35b34801561032457600080fd5b506101ab6004356107a3565b34801561033c57600080fd5b506101ab600435602435610818565b34801561035757600080fd5b506101c2600435602435610840565b34801561037257600080fd5b506101ab600435610861565b34801561038a57600080fd5b506101ab600435151561087d565b3480156103a457600080fd5b506101ab6108c3565b3480156103b957600080fd5b506101ab600160a060020a0360043516610900565b3480156103da57600080fd5b506101ab600160a060020a0360043516610920565b3480156103fb57600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261021694600160a060020a0381351694602480359560443595369560849493019181908401838280828437509497506109669650505050505050565b34801561046757600080fd5b506101c2610a79565b34801561047c57600080fd5b50610485610a7f565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104c15781810151838201526020016104a9565b505050509050019250505060405180910390f35b3480156104e157600080fd5b506101c2610aa8565b3480156104f657600080fd5b506101c2610aae565b34801561050b57600080fd5b506101c2610ab4565b34801561052057600080fd5b506101ab600160a060020a0360043516610aba565b34801561054157600080fd5b506101ab600160a060020a0360043516610b17565b34801561056257600080fd5b506101c2600435610b74565b34801561057a57600080fd5b506101ab600435610b91565b34801561059257600080fd5b50610216610bad565b3480156105a757600080fd5b506101c2610bbd565b3480156105bc57600080fd5b506102fc600435610bc3565b3480156105d457600080fd5b506101ab600435610beb565b3480156105ec57600080fd5b506101ab600435602435610d91565b34801561060757600080fd5b506101c2600435610e55565b60125481565b60008054604080517f3ccfd60b0000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921692633ccfd60b9260048084019382900301818387803b15801561067357600080fd5b505af1158015610687573d6000803e3d6000fd5b505050506106936108c3565b565b600d54600160a060020a031633146106ac57600080fd5b600f55565b600e547501000000000000000000000000000000000000000000900460ff1681565b60166020526000908152604090208054600190910154600160c060020a0382169165ffffffffffff60c060020a8204169160ff60f060020a830481169260f860020a9004169085565b600a5481565b60096020526000908152604090205481565b620f424081565b600d54600160a060020a0316331461075257600080fd5b600e805491151575010000000000000000000000000000000000000000000275ff00000000000000000000000000000000000000000019909216919091179055565b600c54600160a060020a031681565b600d54600160a060020a031633146107ba57600080fd5b6207a1208111156107ca57600080fd5b600a8190556107d96002610e67565b6107e36005610e67565b6107ed600a610e67565b6107f7600f610e67565b6108016014610e67565b61080b6019610e67565b6108156021610e67565b50565b600d54600160a060020a0316331461082f57600080fd5b600090815260136020526040902055565b600a5460009283526013602052604090922054620f42409190039091020490565b600d54600160a060020a0316331461087857600080fd5b600b55565b600d54600160a060020a0316331461089457600080fd5b600e805491151560a060020a0274ff000000000000000000000000000000000000000019909216919091179055565b600160000154604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015610815573d6000803e3d6000fd5b600d54600160a060020a0316331461091757600080fd5b61081581610e94565b600d54600160a060020a0316331461093757600080fd5b600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60006109706126ab565b3360009081526008602052604090205460ff161515610a1657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f6d73672e73656e6465722073686f756c6420626520612076616c69642062616e60448201527f6b726f6c6c000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600e5460a060020a900460ff1615610a2d57600080fd5b600160a060020a0386168152602081018590528251610a6d908290869086906000908110610a5757fe5b016020015160f860020a90819004810204610fbc565b50600195945050505050565b60115481565b600e5460609060a060020a900460ff1615610a9957600080fd5b610aa23361134b565b90505b90565b600b5481565b60105481565b600f5481565b600d54600160a060020a0316331480610add5750600e54600160a060020a031633145b1515610ae857600080fd5b600d805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600d54600160a060020a0316331480610b3a5750600e54600160a060020a031633145b1515610b4557600080fd5b600e805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600a5460009182526013602052604090912054620f424091020490565b600d54600160a060020a03163314610ba857600080fd5b601055565b600e5460a060020a900460ff1681565b6103e881565b60006001610bd08361242c565b60078110610bda57fe5b0154600160a060020a031692915050565b600d54600160a060020a03163314610c0257600080fd5b6002600081905260136020527f0b9d2c0c271bb30544eb78c59bdaebdae2728e5f65814c07768a0abe90ed1923829055610c3b90610e67565b6005600081905260136020527ff4b2859895858d6aa26d656e4999d552f6a869b74c43bba7d2a941c4d22c3559829055610c7490610e67565b600a600081905260136020527f522e87d3d671f2915034f38e0229384befcd14fcb6842a4a7158cb5222bace8f829055610cad90610e67565b600f600081905260136020527fea3598560a9bf02d80b97a08938925140b6320f14c1458a4e11acb962d6ca70a829055610ce690610e67565b6014600081905260136020527f6759aee28a1e27f96db48dd13fe412311d635680c93408acd764c50a218587ab829055610d1f90610e67565b6019600081905260136020527f4bcd68674523b5f4891b67ddc301a547619369f37baccb410bff576fd7ed7d33829055610d5890610e67565b6021600081905260136020527fe48877a746e7798540c5553613ce07ab742dc8f4a65fb27fdebf690ce0d759f382905561081590610e67565b3360009081526008602052604090205460ff161515610e3757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f6d73672e73656e6465722073686f756c6420626520612076616c69642062616e60448201527f6b726f6c6c000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000828152601360205260409020819055610e5182610e67565b5050565b60136020526000908152604090205481565b600a54600082815260136020526040902054620f4240910260009283526009602052604090922091049055565b6000805473ffffffffffffffffffffffffffffffffffffffff191673b9ab8eed48852de901c13543042204c6c569b811178155604080517fb1db1cac0000000000000000000000000000000000000000000000000000000081529051600160a060020a0384169163b1db1cac9160048083019260e092919082900301818787803b158015610f2157600080fd5b505af1158015610f35573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060e0811015610f5a57600080fd5b50610f699060019060076126c2565b50600090505b6007811015610e5157600160086000828460078110610f8a57fe5b0154600160a060020a031681526020810191909152604001600020805460ff1916911515919091179055600101610f6f565b600080610fc7612727565b600e5460009060a060020a900460ff1615610fe157600080fd5b86602001518686610ff182610b74565b61101560326110098660ff861663ffffffff6124b116565b9063ffffffff6124cd16565b111561102057600080fd5b600b546110368460ff841663ffffffff6124b116565b101561104157600080fd5b65ffffffffffff43111561105457600080fd5b60208a0151600160c060020a03101561106c57600080fd5b60ff891061107957600080fd5b89516020808c0151600160a060020a038316600090815260168352604090819020815160a0810183528154600160c060020a038116825265ffffffffffff60c060020a8204169582019590955260ff60f060020a860481169382019390935260f860020a9094049091166060840152600101546080830152919850909650945061110389876124ff565b846020015165ffffffffffff16431415151561111e57600080fd5b602085015165ffffffffffff161561113d57895161113b9061134b565b505b65ffffffffffff4316602086015261115e8660ff8a1663ffffffff6124b116565b600160c060020a031685526111728961242c565b60ff9081166040878101918252608088018c81528b841660608a018181528f51600160a060020a03166000908152601660209081529490208b518154958d01519651925177ffffffffffffffffffffffffffffffffffffffffffffffff19909616600160c060020a03909116177fffff000000000000ffffffffffffffffffffffffffffffffffffffffffffffff1660c060020a65ffffffffffff90971696909602959095177fff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1660f060020a91871691909102177effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1660f860020a93861693909302929092178355516001909201919091556011805490910190556012805488019055600e54750100000000000000000000000000000000000000000090041680156112ca57506010548551600160c060020a031610155b156112fb576112e66112de87600f546124cd565b6127106124b1565b93506112fb8a60000151858760800151612534565b60408051600160a060020a03891681526020810188905281517fffec332ee2fd2582418c268a644e2f4b7a2f50cd3b4cf74e4adc3a524e0af502929181900390910190a150505050505050505050565b6060611355612727565b606061135f612755565b600160a060020a0385166000908152601660209081526040808320815160a0810183528154600160c060020a03811680835265ffffffffffff60c060020a8304169583019590955260ff60f060020a820481169483019490945260f860020a9004909216606083015260010154608082015294508190819081908190819081106113e857600080fd5b602089015165ffffffffffff1643141561140157600080fd5b886060015160ff16604051908082528060200260200182016040528015611432578160200160208202803883390190505b5097506060604051908101604052806000815260200160008152602001600081525096506000955088608001519350600092505b886060015160ff168310156121b65760ff896020015165ffffffffffff16430311156114b357620f42409150620f424088848151811015156114a457fe5b602090810290910101526114ed565b6114ce620f42408a6020015165ffffffffffff168d866125d1565b60010191508188848151811015156114e257fe5b602090810290910101525b6207bbe88211156115e9578851606490600160c060020a031604600160c060020a03168760200181815101915081815250507f72fba0ba07d937c660a3130fca36005c0e476cb97b6f00de413976e37eba95018b8a602001516040518083600160a060020a0316600160a060020a031681526020018265ffffffffffff1681526020019250505060405180910390a1885160408051600160a060020a038e16815260208101859052808201889052600160c060020a03909216606083015260808201889052600060a0830152517f34079d79bb31b852e172198518083b845886d3d6366fcff691718d392250a9899181900360c00190a16121ab565b600282101561177357600c60009054906101000a9004600160a060020a0316600160a060020a0316639329066c6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561165e57600080fd5b505af1158015611672573d6000803e3d6000fd5b505050506040513d602081101561168857600080fd5b81019080805190602001909291905050509450600195507e6dfe96d9492b530998024eaa8dfa88814220be04005cc06c97e36c439a612a8b8a602001516040518083600160a060020a0316600160a060020a031681526020018265ffffffffffff1681526020019250505060405180910390a1885160408051600160a060020a038e16815260208101859052808201889052600160c060020a03909216606083015260808201889052600160a0830152517f34079d79bb31b852e172198518083b845886d3d6366fcff691718d392250a9899181900360c00190a160408701805160010190526121ab565b61012b8210156117fb57885161179390600160c060020a031660326124cd565b9450600295507f091aada767450b746c9187511b7b2c03ceb688aeb6699e718f26e48c220eca888b8a602001516040518083600160a060020a0316600160a060020a031681526020018265ffffffffffff1681526020019250505060405180910390a1612120565b610c3882101561188357885161181b90600160c060020a031660146124cd565b9450600395507f83bb8ca97f43d9b91363322bf3e86772623139424929ca01e129f542fd5165cc8b8a602001516040518083600160a060020a0316600160a060020a031681526020018265ffffffffffff1681526020019250505060405180910390a1612120565b614241821015611917576118af6118a88a60000151600160c060020a0316601e6124cd565b600a6124b1565b9450600495507f940960867f63b7b4f5b58eca73797a80f8db1ba090bee183de722d15ae02e5968b8a602001516040518083600160a060020a0316600160a060020a031681526020018265ffffffffffff1681526020019250505060405180910390a1612120565b61784a8210156119a45761193c6118a88a60000151600160c060020a0316601e6124cd565b9450600595507f8549d53aa188d1f4e53f1de61b9b48b8dc7c220554cb184904aeeaceb1cc567f8b8a602001516040518083600160a060020a0316600160a060020a031681526020018265ffffffffffff1681526020019250505060405180910390a1612120565b61ae53821015611a31576119c96118a88a60000151600160c060020a0316601e6124cd565b9450600695507f17f69ae1a143d1d349762c1ed02d000c4534900416ea7813c72811907f552aee8b8a602001516040518083600160a060020a0316600160a060020a031681526020018265ffffffffffff1681526020019250505060405180910390a1612120565b61b623821015611ab9578851611a5190600160c060020a0316600b6124cd565b9450600795507f965155f1732a0739378c1647bfa68819c5317f717bb0bc3e40c9d3eed4c7a4218b8a602001516040518083600160a060020a0316600160a060020a031681526020018265ffffffffffff1681526020019250505060405180910390a1612120565b61bfe7821015611b4657611ade6118a88a60000151600160c060020a0316604b6124cd565b9450600895507f98f9438ed685b6ee12b829935922056824bc06e2530f0b4967838ca1dc34ff758b8a602001516040518083600160a060020a0316600160a060020a031681526020018265ffffffffffff1681526020019250505060405180910390a1612120565b61c9ab821015611bce578851611b6690600160c060020a031660096124cd565b9450600995507f4af9b244e4c4f64f3e87e26c8241c524b5626c2ffae55839549b89c6f9c4c6b88b8a602001516040518083600160a060020a0316600160a060020a031681526020018265ffffffffffff1681526020019250505060405180910390a1612120565b61cf87821015611c56578851611bee90600160c060020a0316600d6124cd565b9450600a95507f5e1a324308468767b16c3fbf511d20b1dc9b1a43ddedf274044d4c3f345db25c8b8a602001516040518083600160a060020a0316600160a060020a031681526020018265ffffffffffff1681526020019250505060405180910390a1612120565b62014262821015611ce457611c7c6118a88a60000151600160c060020a031660196124cd565b9450600b95507f752f57082fcd2d0094ecf805f1abfb580b144388a01617a0b99cee4c12d9b67b8b8a602001516040518083600160a060020a0316600160a060020a031681526020018265ffffffffffff1681526020019250505060405180910390a1612120565b62024b97821015611d7257611d0a6118a88a60000151600160c060020a0316600f6124cd565b9450600c95507fbaa70a1d9b36833afea91cfa13ab92b0f63514a979ad9317d733088a05e344b08b8a602001516040518083600160a060020a0316600160a060020a031681526020018265ffffffffffff1681526020019250505060405180910390a1612120565b62031c70821015611df3578860000151600160c060020a03169450600d95507f119d4792efaba82c79f5eb243259698c2dee4adf9d4cf7f1b36419ace919b2a68b8a602001516040518083600160a060020a0316600160a060020a031681526020018265ffffffffffff1681526020019250505060405180910390a1612120565b6203ed49821015611e74578860000151600160c060020a03169450600e95507f92f223680c21768e746d0debe14f41d9608970823d25f4281dfe2e2fff22c0108b8a602001516040518083600160a060020a0316600160a060020a031681526020018265ffffffffffff1681526020019250505060405180910390a1612120565b6204be22821015611ef5578860000151600160c060020a03169450600f95507f36fcc464be83267bb1108464e14bee60753357aa52cd028d29592ea37302eafd8b8a602001516040518083600160a060020a0316600160a060020a031681526020018265ffffffffffff1681526020019250505060405180910390a1612120565b62058efb821015611f7e578851611f1690600160c060020a031660026124cd565b9450601095507fdabfaef56cb4ef0f11129848c60628e243a4d639be2b8cf219f139a2db469c8e8b8a602001516040518083600160a060020a0316600160a060020a031681526020018265ffffffffffff1681526020019250505060405180910390a1612120565b62065fd482101561201357611fab611fa48a60000151600160c060020a0316607d6124cd565b60646124b1565b9450601195507f29aae6e136971f970a8e3615220f92707ed982a5c94e920793ebdbc9c78806008b8a602001516040518083600160a060020a0316600160a060020a031681526020018265ffffffffffff1681526020019250505060405180910390a1612120565b620730ad8210156120a157612039611fa48a60000151600160c060020a031660856124cd565b9450601295507f9747d9379b0e077f6e4bcc4d77f3d0be0f7b763a9d1171b33c0077f7069685be8b8a602001516040518083600160a060020a0316600160a060020a031681526020018265ffffffffffff1681526020019250505060405180910390a1612120565b6120bc6118a88a60000151600160c060020a031660196124cd565b9450601395507fb2dc6fa6945d9d21eb57119c7e2a69669feec3eaf034f5ef48095bb126f210bd8b8a602001516040518083600160a060020a0316600160a060020a031681526020018265ffffffffffff1681526020019250505060405180910390a15b61212e848860000151610840565b90508085111561213c578094505b885160408051600160a060020a038e16815260208101859052808201889052600160c060020a03909216606083015260808201889052600160a0830152517f34079d79bb31b852e172198518083b845886d3d6366fcff691718d392250a9899181900360c00190a18651850187525b600190920191611466565b60a0604051908101604052806000600160c060020a03168152602001600065ffffffffffff168152602001600060ff168152602001600060ff1681526020016000815250601660008d600160a060020a0316600160a060020a0316815260200190815260200160002060008201518160000160006101000a815481600160c060020a030219169083600160c060020a0316021790555060208201518160000160186101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001601e6101000a81548160ff021916908360ff160217905550606082015181600001601f6101000a81548160ff021916908360ff1602179055506080820151816001015590505060008760400151111561236f57600092505b866040015183101561236f57600c54604080517fb36c973e000000000000000000000000000000000000000000000000000000008152600160a060020a038e811660048301529151919092169163b36c973e91602480830192600092919082900301818387803b15801561234b57600080fd5b505af115801561235f573d6000803e3d6000fd5b5050600190940193506122d89050565b86516000101561238f5761238f8b88600001518b6040015160ff16612534565b6000876020015111156123c057600c54602088015160408b01516123c092600160a060020a0316919060ff16612534565b7f25092d6a2d6fe1a5cb6436ed4776b7bf977ed02b912f909d568100acf93a85498b8a602001516040518083600160a060020a0316600160a060020a031681526020018265ffffffffffff1681526020019250505060405180910390a150959998505050505050505050565b600081601e811061244057600691506124ab565b6019811061245157600591506124ab565b6014811061246257600491506124ab565b600f811061247357600391506124ab565b600a811061248457600291506124ab565b6005811061249557600191506124ab565b600281106124a657600091506124ab565b600080fd5b50919050565b60008082848115156124bf57fe5b0490508091505b5092915050565b6000808315156124e057600091506124c6565b508282028284828115156124f057fe5b04146124f857fe5b9392505050565b60008281526013602052604090205461251e908263ffffffff6125f216565b6000928352601360205260409092209190915550565b60006001826007811061254357fe5b0154604080517f8ccd227c000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301526024820187905291519190921692508291638ccd227c91604480830192600092919082900301818387803b1580156125b357600080fd5b505af11580156125c7573d6000803e3d6000fd5b5050505050505050565b6000846125df858585612601565b8115156125e857fe5b0695945050505050565b6000828201838110156124f857fe5b6040805184406020808301919091526c01000000000000000000000000600160a060020a03861602828401526054808301859052835180840390910181526074909201928390528151600093918291908401908083835b602083106126775780518252601f199092019160209182019101612658565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120979650505050505050565b604080518082019091526000808252602082015290565b8260078101928215612717579160200282015b82811115612717578251825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039091161782556020909201916001909101906126d5565b50612723929150612777565b5090565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b6060604051908101604052806000815260200160008152602001600081525090565b610aa591905b8082111561272357805473ffffffffffffffffffffffffffffffffffffffff1916815560010161277d5600a165627a7a7230582006b49e83d394ab17b9c590b0dab9bcb99155fb29d159a21ba4a1ad4d76d7a21e00290000000000000000000000008481ff17c388ac87c5fa390e5c745677c6d99552",
  "constructorArguments": "0000000000000000000000008481ff17c388ac87c5fa390e5c745677c6d99552"
}