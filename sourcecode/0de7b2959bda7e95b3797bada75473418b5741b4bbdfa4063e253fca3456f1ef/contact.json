{
  "address": "0x88f7ae69f99c4642c6ffb7ca917142aa8dcbf5a9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "INNT",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-22\n*/\n\npragma solidity >= 0.4.24 < 0.6.0;\n\n\n/**\n * @title Inning token (INNT) - Issued by co2ining.com\n */\n\n\n/**\n * @title ERC20 Standard Interface\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title Token implementation\n */\ncontract INNT is IERC20 {\n    string public name = \"Inning Token\";\n    string public symbol = \"INNT\";\n    uint8 public decimals = 18;\n    \n    uint256 exAmount;\n    uint256 reserveAmount;\n    \n    uint256 _totalSupply;\n    mapping(address => uint256) balances;\n\n    address public owner;\n    address public reserve;\n\n    modifier isOwner {\n        require(owner == msg.sender);\n        _;\n    }\n    \n    constructor() public {\n        owner = msg.sender;\n        reserve   = 0x80EB19c0dD70Db1b5aA836879Ea683c5818CF52f;\n\n        exAmount        = toWei(4700000000);   // 4,700,000,000\n        reserveAmount   = toWei(300000000);    //   300,000,000\n        _totalSupply    = toWei(5000000000);   // 5,000,000,000\n\n        require(_totalSupply == exAmount + reserveAmount );\n        \n        balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, balances[owner]);\n        \n        transfer(reserve, reserveAmount);\n        require(balances[owner] == exAmount);\n    }\n    \n    function totalSupply() public constant returns (uint) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address who) public view returns (uint256) {\n        return balances[who];\n    }\n    \n    function transfer(address to, uint256 value) public returns (bool success) {\n        require(msg.sender != to);\n\n        require(to != owner);\n        require(value > 0);\n        \n        require( balances[msg.sender] >= value );\n        require( balances[to] + value >= balances[to] );    // prevent overflow\n\n        if(msg.sender == reserve) {\n            require(now >= 1587600000);     // 300M lock to 2020-04-23\n        }\n\n        if (to == address(0) || to == address(0x1) || to == address(0xdead)) {\n             _totalSupply -= value;\n        }\n\n\n        balances[msg.sender] -= value;\n        balances[to] += value;\n\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n    \n    function burnCoins(uint256 value) public {\n        require(msg.sender != owner);   // owner can't burn any coin\n        require(balances[msg.sender] >= value);\n        require(_totalSupply >= value);\n        \n        balances[msg.sender] -= value;\n        _totalSupply -= value;\n\n        emit Transfer(msg.sender, address(0), value);\n    }\n\n    function balanceOfOwner() public view returns (uint256) {\n        return balances[owner];\n    }\n    \n    function toWei(uint256 value) private constant returns (uint256) {\n        return value * (10 ** uint256(decimals));\n    }\n}",
  "bytecode": ""
}