{
  "address": "0xd0a87c106c3cb3be6662f0bc02d3e86f2bc7c170",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "XcertUpdateProxy",
  "compilerVersion": "v0.5.6+commit.b259423e",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-03\n*/\n\npragma solidity 0.5.6;\n\n/**\n * @dev Xcert nutable interface.\n */\ninterface XcertMutable // is Xcert\n{\n  \n  /**\n   * @dev Updates Xcert imprint.\n   * @param _tokenId Id of the Xcert.\n   * @param _imprint New imprint.\n   */\n  function updateTokenImprint(\n    uint256 _tokenId,\n    bytes32 _imprint\n  )\n    external;\n\n}\n\n/**\n * @dev Math operations with safety checks that throw on error. This contract is based on the \n * source code at: \n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol.\n */\nlibrary SafeMath\n{\n\n  /**\n   * @dev Error constants.\n   */\n  string constant OVERFLOW = \"008001\";\n  string constant SUBTRAHEND_GREATER_THEN_MINUEND = \"008002\";\n  string constant DIVISION_BY_ZERO = \"008003\";\n\n  /**\n   * @dev Multiplies two numbers, reverts on overflow.\n   * @param _factor1 Factor number.\n   * @param _factor2 Factor number.\n   * @return The product of the two factors.\n   */\n  function mul(\n    uint256 _factor1,\n    uint256 _factor2\n  )\n    internal\n    pure\n    returns (uint256 product)\n  {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_factor1 == 0)\n    {\n      return 0;\n    }\n\n    product = _factor1 * _factor2;\n    require(product / _factor1 == _factor2, OVERFLOW);\n  }\n\n  /**\n   * @dev Integer division of two numbers, truncating the quotient, reverts on division by zero.\n   * @param _dividend Dividend number.\n   * @param _divisor Divisor number.\n   * @return The quotient.\n   */\n  function div(\n    uint256 _dividend,\n    uint256 _divisor\n  )\n    internal\n    pure\n    returns (uint256 quotient)\n  {\n    // Solidity automatically asserts when dividing by 0, using all gas.\n    require(_divisor > 0, DIVISION_BY_ZERO);\n    quotient = _dividend / _divisor;\n    // assert(_dividend == _divisor * quotient + _dividend % _divisor); // There is no case in which this doesn't hold.\n  }\n\n  /**\n   * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n   * @param _minuend Minuend number.\n   * @param _subtrahend Subtrahend number.\n   * @return Difference.\n   */\n  function sub(\n    uint256 _minuend,\n    uint256 _subtrahend\n  )\n    internal\n    pure\n    returns (uint256 difference)\n  {\n    require(_subtrahend <= _minuend, SUBTRAHEND_GREATER_THEN_MINUEND);\n    difference = _minuend - _subtrahend;\n  }\n\n  /**\n   * @dev Adds two numbers, reverts on overflow.\n   * @param _addend1 Number.\n   * @param _addend2 Number.\n   * @return Sum.\n   */\n  function add(\n    uint256 _addend1,\n    uint256 _addend2\n  )\n    internal\n    pure\n    returns (uint256 sum)\n  {\n    sum = _addend1 + _addend2;\n    require(sum >= _addend1, OVERFLOW);\n  }\n\n  /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo), reverts when\n    * dividing by zero.\n    * @param _dividend Number.\n    * @param _divisor Number.\n    * @return Remainder.\n    */\n  function mod(\n    uint256 _dividend,\n    uint256 _divisor\n  )\n    internal\n    pure\n    returns (uint256 remainder) \n  {\n    require(_divisor != 0, DIVISION_BY_ZERO);\n    remainder = _dividend % _divisor;\n  }\n\n}\n\n/**\n * @title Contract for setting abilities.\n * @dev For optimization purposes the abilities are represented as a bitfield. Maximum number of\n * abilities is therefore 256. This is an example(for simplicity is made for max 8 abilities) of how\n * this works. \n * 00000001 Ability A - number representation 1\n * 00000010 Ability B - number representation 2\n * 00000100 Ability C - number representation 4\n * 00001000 Ability D - number representation 8\n * 00010000 Ability E - number representation 16\n * etc ... \n * To grant abilities B and C, we would need a bitfield of 00000110 which is represented by number\n * 6, in other words, the sum of abilities B and C. The same concept works for revoking abilities\n * and checking if someone has multiple abilities.\n */\ncontract Abilitable\n{\n  using SafeMath for uint;\n\n  /**\n   * @dev Error constants.\n   */\n  string constant NOT_AUTHORIZED = \"017001\";\n  string constant CANNOT_REVOKE_OWN_SUPER_ABILITY = \"017002\";\n  string constant INVALID_INPUT = \"017003\";\n\n  /**\n   * @dev Ability 1 (00000001) is a reserved ability called super ability. It is an\n   * ability to grant or revoke abilities of other accounts. Other abilities are determined by the\n   * implementing contract.\n   */\n  uint8 constant SUPER_ABILITY = 1;\n\n  /**\n   * @dev Maps address to ability ids.\n   */\n  mapping(address => uint256) public addressToAbility;\n\n  /**\n   * @dev Emits when an address is granted an ability.\n   * @param _target Address to which we are granting abilities.\n   * @param _abilities Number representing bitfield of abilities we are granting.\n   */\n  event GrantAbilities(\n    address indexed _target,\n    uint256 indexed _abilities\n  );\n\n  /**\n   * @dev Emits when an address gets an ability revoked.\n   * @param _target Address of which we are revoking an ability.\n   * @param _abilities Number representing bitfield of abilities we are revoking.\n   */\n  event RevokeAbilities(\n    address indexed _target,\n    uint256 indexed _abilities\n  );\n\n  /**\n   * @dev Guarantees that msg.sender has certain abilities.\n   */\n  modifier hasAbilities(\n    uint256 _abilities\n  ) \n  {\n    require(_abilities > 0, INVALID_INPUT);\n    require(\n      addressToAbility[msg.sender] & _abilities == _abilities,\n      NOT_AUTHORIZED\n    );\n    _;\n  }\n\n  /**\n   * @dev Contract constructor.\n   * Sets SUPER_ABILITY ability to the sender account.\n   */\n  constructor()\n    public\n  {\n    addressToAbility[msg.sender] = SUPER_ABILITY;\n    emit GrantAbilities(msg.sender, SUPER_ABILITY);\n  }\n\n  /**\n   * @dev Grants specific abilities to specified address.\n   * @param _target Address to grant abilities to.\n   * @param _abilities Number representing bitfield of abilities we are granting.\n   */\n  function grantAbilities(\n    address _target,\n    uint256 _abilities\n  )\n    external\n    hasAbilities(SUPER_ABILITY)\n  {\n    addressToAbility[_target] |= _abilities;\n    emit GrantAbilities(_target, _abilities);\n  }\n\n  /**\n   * @dev Unassigns specific abilities from specified address.\n   * @param _target Address of which we revoke abilites.\n   * @param _abilities Number representing bitfield of abilities we are revoking.\n   * @param _allowSuperRevoke Additional check that prevents you from removing your own super\n   * ability by mistake.\n   */\n  function revokeAbilities(\n    address _target,\n    uint256 _abilities,\n    bool _allowSuperRevoke\n  )\n    external\n    hasAbilities(SUPER_ABILITY)\n  {\n    if (!_allowSuperRevoke && msg.sender == _target)\n    {\n      require((_abilities & 1) == 0, CANNOT_REVOKE_OWN_SUPER_ABILITY);\n    }\n    addressToAbility[_target] &= ~_abilities;\n    emit RevokeAbilities(_target, _abilities);\n  }\n\n  /**\n   * @dev Check if an address has a specific ability. Throws if checking for 0.\n   * @param _target Address for which we want to check if it has a specific abilities.\n   * @param _abilities Number representing bitfield of abilities we are checking.\n   */\n  function isAble(\n    address _target,\n    uint256 _abilities\n  )\n    external\n    view\n    returns (bool)\n  {\n    require(_abilities > 0, INVALID_INPUT);\n    return (addressToAbility[_target] & _abilities) == _abilities;\n  }\n  \n}\n\n/**\n * @title XcertUpdateProxy - updates a token on behalf of contracts that have been approved via\n * decentralized governance.\n * @notice There is a possibility of unintentional behavior when token imprint can be overwritten\n * if more than one claim is active. Be aware of this when implementing.\n */\ncontract XcertUpdateProxy is\n  Abilitable\n{\n\n  /**\n   * @dev List of abilities:\n   * 2 - Ability to execute create.\n   */\n  uint8 constant ABILITY_TO_EXECUTE = 2;\n\n  /**\n   * @dev Updates imprint of an existing Xcert.\n   * @param _xcert Address of the Xcert contract on which the update will be perfomed.\n   * @param _id The Xcert we will update.\n   * @param _imprint Cryptographic asset imprint.\n   */\n  function update(\n    address _xcert,\n    uint256 _id,\n    bytes32 _imprint\n  )\n    external\n    hasAbilities(ABILITY_TO_EXECUTE)\n  {\n    XcertMutable(_xcert).updateTokenImprint(_id, _imprint);\n  }\n\n}",
  "bytecode": "6080604081815233600081815260208190529182206001908190559290917fc4adfc5f00262a1ab9b2241c7e98408a91e58dc5777d786164bba34a7652f62f91a361061c8061004f6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630ab319e81461005c57806345a32c861461008a578063760f9d86146100c2578063aca910e7146100f4578063ba00a33014610128575b600080fd5b6100886004803603604081101561007257600080fd5b506001600160a01b038135169060200135610168565b005b6100b0600480360360208110156100a057600080fd5b50356001600160a01b03166102b4565b60408051918252519081900360200190f35b610088600480360360608110156100d857600080fd5b506001600160a01b0381351690602081013590604001356102c6565b6100886004803603606081101561010a57600080fd5b506001600160a01b03813516906020810135906040013515156103d6565b6101546004803603604081101561013e57600080fd5b506001600160a01b038135169060200135610557565b604080519115158252519081900360200190f35b6040805180820190915260068152600160d01b653031373030330260208201526001906101e3565b838110156101a8578181015183820152602001610190565b50505050905090810190601f1680156101d55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50336000908152602081815260409182902054825180840190935260068352600160d01b6530313730303102918301919091528216821461026857604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156101a8578181015183820152602001610190565b506001600160a01b038316600081815260208190526040808220805486179055518492917fc4adfc5f00262a1ab9b2241c7e98408a91e58dc5777d786164bba34a7652f62f91a3505050565b60006020819052908152604090205481565b6040805180820182526006808252600160d01b6530313730303302602092830152336000908152808352839020548351808501909452908352600160d01b653031373030310291830191909152600291908216821461036957604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156101a8578181015183820152602001610190565b50836001600160a01b031663bda0e85284846040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b1580156103b857600080fd5b505af11580156103cc573d6000803e3d6000fd5b5050505050505050565b6040805180820182526006808252600160d01b6530313730303302602092830152336000908152808352839020548351808501909452908352600160d01b653031373030310291830191909152600191908216821461047957604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156101a8578181015183820152602001610190565b50811580156104905750336001600160a01b038516145b1561050a576040805180820190915260068152600160d11b6518189b981819026020820152600184161561050857604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156101a8578181015183820152602001610190565b505b6001600160a01b03841660008181526020819052604080822080548719169055518592917fbb71944f65b9a48cc7d835179fb5e874f29b60aa0195785fb54968d8dddef08a91a350505050565b6000808211604051806040016040528060068152602001600160d01b6530313730303302815250906105cd57604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156101a8578181015183820152602001610190565b50506001600160a01b03919091166000908152602081905260409020548116149056fea165627a7a72305820bfc47d081301ded74257b8e9e0e52bf2b2d858fdd07fba0e7384047c58a7bba30029"
}