{
  "address": "0x83e401afd7438ec2b2827874eba920eb6a345cbb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MinosCoin",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-16\n*/\n\npragma solidity >=0.5.0 <0.7.0;\n\n/*\n                                              N     .N      \n                                            .ONN.   NN      \n                                          ..NNDN  :NNNN     \n                                         .8NN  NNNN. NN     \n                                        NNN. .NNN....NN     \n                                    ..NNN ~NNNO     .N:     \n                                 .,NNNDNNNN?.       NN      \n                    ..?NNNNNNNNNNNNNNND..          NN       \n               ..$NNNNN$.    .=NNN=             ..NN        \n             .NNNN,         .NNON               NNN         \n           NNN+.           NN~.NN           ..NNN           \n         NNN..            NN.  ON          .NNN             \n      .:NN.              ,N=    NN.    .,NNNN               \n      NNI.              .NN     .NNNNNNNN$.,N?              \n    ,NN.                .NI     .NNN,.   .  NN.             \n    NN .                ?N.       ?NNNNNN... NN             \n    NN.                 NN=       ..NN .NNNN NN             \n     NN                 NNN.         NN..NN.  NN            \n     IN.                NNN.          :NNN=   :N,           \n      NN.               N$NN..         .NN.   .NN           \n      .NN.              N7 NN .               .NNI          \n        NN.             NO  DNN  .          .ZNNNN.         \n        .NN             NN .  NNN:..     ..NNN. .NN         \n         .NN.           NN .  . INNNNNNNNNNNN:. .ZN         \n           NNI.         NN       . NNNN+   .ONNN8 NN        \n             NN.        .N.     .NN, $NN?   . .INNN         \n              NN?       .NN    NNO     :NNNNNNNN+           \n               ~NN      .NN   NN,                           \n                .NNN.     NI..NI.                           \n                   NNN    NN.NN                             \n                    .NND.. NNNI                             \n                       NNN.$NN.                             \n                         ONNNN?                             \n                            NNN                             \n\n   ,        ,     II   N        NN     OOOOOO       SSSS    \n   M        M     II   NN       NN   OOOOOOOOOO    SSSSSSS  \n   MM      MM     II   NNN      NN  OOO      OOO  SS     SS   \n   MMM    MMM     II   NNNN     NN OO?        OO  SS        \n  MM~MM  MMMMM    II   NN NNN   NN OO         OO$  SSSSSS   \n  MM MM  MM MM    II   NN  NNN  NN OO         OO=     SSSS  \n  MM  MMMM  MM    II   NN   NNN:NN .OOO      OOO        SS  \n MM    MM    MM   II   NN    NNNNN  =OOO    OOO   SS    SS  \n MM    MM    MM   II   NN     NNNN    OOOOOOO      SSSSSS   \n*/\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  /**\n   * Event that notifies clients about the ownership transference\n   * @param previousOwner Address registered as the former owner\n   * @param newOwner Address that is registered as the new owner\n   */\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner(), \"Ownable: Caller is not the owner\");\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0), \"Ownable: New owner is the zero address\");\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n */\ninterface IERC20 {\n\n  function balanceOf(address account) external view returns (uint256);\n \n  function transfer(address to, uint256 value) external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  /**\n   * Event that notifies clients about the amount transferred\n   * @param from Address owner of the transferred funds\n   * @param to Destination address\n   * @param value Amount of tokens transferred\n   */\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  /**\n   * Event that notifies clients about the amount approved to be spent\n   * @param owner Address owner of the approved funds\n   * @param spender The address authorized to spend the funds\n   * @param value Amount of tokens approved\n   */\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title ERC20\n * @dev Implements the functions declared in the IERC20 interface\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) internal balances;\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  uint256 public totalSupply;\n  \n  constructor(uint256 initialSupply) internal {\n    require(msg.sender != address(0));\n    totalSupply = initialSupply;\n    balances[msg.sender] = initialSupply;\n    emit Transfer(address(0), msg.sender, initialSupply);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address.\n   * @param account The address to query the balance of.\n   * @return An uint256 representing the amount owned by the passed address.\n   */\n  function balanceOf(address account) external view returns (uint256) {\n    return balances[account];\n  }\n\n  /**\n   * @dev Transfer token for a specified address\n   * @param to The address to transfer to.\n   * @param value The amount to be transferred.\n   */\n  function transfer(address to, uint256 value) public returns (bool) {\n    require(value <= balances[msg.sender]);\n    require(to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(value);\n    balances[to] = balances[to].add(value);\n    emit Transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= balances[from]);\n    require(value <= allowed[from][msg.sender]);\n    require(to != address(0));\n\n    balances[from] = balances[from].sub(value);\n    balances[to] = balances[to].add(value);\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n    emit Transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    external\n    view\n    returns (uint256)\n  {\n    return allowed[owner][spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    allowed[msg.sender][spender] = (\n      allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    allowed[msg.sender][spender] = (\n      allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n    return true;\n  }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract Burnable is ERC20 {\n\n  /**\n   * Event that notifies clients about the amount burnt\n   * @param from Address owner of the burnt funds\n   * @param value Amount of tokens burnt\n   */\n  event Burn(\n    address indexed from,\n    uint256 value\n  );\n  \n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param value The amount of token to be burned.\n   */\n  function burn(uint256 value) public {\n    _burn(msg.sender, value);\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param from address The address which you want to send tokens from\n   * @param value uint256 The amount of token to be burned\n   */\n  function burnFrom(address from, uint256 value) public {\n    require(value <= allowed[from][msg.sender], \"Burnable: Amount to be burnt exceeds the account balance\");\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n    _burn(from, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param amount The amount that will be burnt.\n   */\n  function _burn(address account, uint256 amount) internal {\n    require(account != address(0), \"Burnable: Burn from the zero address\");\n    require(amount > 0, \"Burnable: Can not burn negative amount\");\n    require(amount <= balances[account], \"Burnable: Amount to be burnt exceeds the account balance\");\n\n    totalSupply = totalSupply.sub(amount);\n    balances[account] = balances[account].sub(amount);\n    emit Burn(account, amount);\n  }\n}\n\n/**\n * @title Freezable Token\n * @dev Token that can be frozen.\n */\ncontract Freezable is ERC20 {\n\n  mapping (address => uint256) private _freeze;\n\n  /**\n   * Event that notifies clients about the amount frozen\n   * @param from Address owner of the frozen funds\n   * @param value Amount of tokens frozen\n   */\n  event Freeze(\n    address indexed from,\n    uint256 value\n  );\n\n  /**\n   * Event that notifies clients about the amount unfrozen\n   * @param from Address owner of the unfrozen funds\n   * @param value Amount of tokens unfrozen\n   */\n  event Unfreeze(\n    address indexed from,\n    uint256 value\n  );\n\n  /**\n   * @dev Gets the frozen balance of the specified address.\n   * @param account The address to query the frozen balance of.\n   * @return An uint256 representing the amount frozen by the passed address.\n   */\n  function freezeOf(address account) public view returns (uint256) {\n    return _freeze[account];\n  }\n\n  /**\n   * @dev Freezes a specific amount of tokens\n   * @param amount uint256 The amount of token to be frozen\n   */\n  function freeze(uint256 amount) public {\n    require(balances[msg.sender] >= amount, \"Freezable: Amount to be frozen exceeds the account balance\");\n    require(amount > 0, \"Freezable: Can not freeze negative amount\");\n    balances[msg.sender] = balances[msg.sender].sub(amount);\n    _freeze[msg.sender] = _freeze[msg.sender].add(amount);\n    emit Freeze(msg.sender, amount);\n  }\n\n  /**\n   * @dev Unfreezes a specific amount of tokens\n   * @param amount uint256 The amount of token to be unfrozen\n   */\n  function unfreeze(uint256 amount) public {\n    require(_freeze[msg.sender] >= amount, \"Freezable: Amount to be unfrozen exceeds the account balance\");\n    require(amount > 0, \"Freezable: Can not unfreeze negative amount\");\n    _freeze[msg.sender] = _freeze[msg.sender].sub(amount);\n    balances[msg.sender] = balances[msg.sender].add(amount);\n    emit Unfreeze(msg.sender, amount);\n  }\n}\n\n/**\n * @title MinosCoin \n * @dev Contract for MinosCoin token\n **/\ncontract MinosCoin is ERC20, Burnable, Freezable, Ownable {\n\n  string public constant name = \"MinosCoin\";\n  string public constant symbol = \"MNS\";\n  uint8 public constant decimals = 18;\n\n  // Initial supply is the balance assigned to the owner\n  uint256 private constant _initialSupply = 300000000 * (10 ** uint256(decimals));\n\n  /**\n   * @dev Constructor\n   */\n  constructor() \n    public \n    ERC20(_initialSupply)\n  {\n    require(msg.sender != address(0), \"MinosCoin: Create contract from the zero address\");\n  }\n  \n  /**\n   * @dev Allows to transfer out the ether balance that was sent into this contract\n   */\n  function withdrawEther() public onlyOwner {\n    uint256 totalBalance = address(this).balance;\n    require(totalBalance > 0, \"MinosCoin: No ether available to be withdrawn\");\n    msg.sender.transfer(totalBalance);\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b50601260ff16600a0a6311e1a30002600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561005957600080fd5b80600281905550806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561024e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806125766030913960400191505060405180910390fd5b6123198061025d6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806379cc6790116100ad578063a9059cbb11610071578063a9059cbb146105a9578063cd4217c11461060f578063d7a78db814610667578063dd62ed3e14610695578063f2fde38b1461070d5761012c565b806379cc6790146104065780638da5cb5b146104545780638f32d59b1461049e57806395d89b41146104c0578063a457c2d7146105435761012c565b806339509351116100f457806339509351146102e257806342966c68146103485780636623fc461461037657806370a08231146103a45780637362377b146103fc5761012c565b806306fdde0314610131578063095ea7b3146101b457806318160ddd1461021a57806323b872dd14610238578063313ce567146102be575b600080fd5b610139610751565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017957808201518184015260208101905061015e565b50505050905090810190601f1680156101a65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610200600480360360408110156101ca57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061078a565b604051808215151515815260200191505060405180910390f35b6102226108b5565b6040518082815260200191505060405180910390f35b6102a46004803603606081101561024e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108bb565b604051808215151515815260200191505060405180910390f35b6102c6610c70565b604051808260ff1660ff16815260200191505060405180910390f35b61032e600480360360408110156102f857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c75565b604051808215151515815260200191505060405180910390f35b6103746004803603602081101561035e57600080fd5b8101908080359060200190929190505050610eaa565b005b6103a26004803603602081101561038c57600080fd5b8101908080359060200190929190505050610eb7565b005b6103e6600480360360208110156103ba57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611121565b6040518082815260200191505060405180910390f35b610404611169565b005b6104526004803603604081101561041c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112a2565b005b61045c611494565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104a66114be565b604051808215151515815260200191505060405180910390f35b6104c8611516565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105085780820151818401526020810190506104ed565b50505050905090810190601f1680156105355780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61058f6004803603604081101561055957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061154f565b604051808215151515815260200191505060405180910390f35b6105f5600480360360408110156105bf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611784565b604051808215151515815260200191505060405180910390f35b6106516004803603602081101561062557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506119a0565b6040518082815260200191505060405180910390f35b6106936004803603602081101561067d57600080fd5b81019080803590602001909291905050506119e9565b005b6106f7600480360360408110156106ab57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c52565b6040518082815260200191505060405180910390f35b61074f6004803603602081101561072357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cd9565b005b6040518060400160405280600981526020017f4d696e6f73436f696e000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107c557600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60025481565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561090857600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561099157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109cb57600080fd5b610a1c826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e9990919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610aaf826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611eb990919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b8082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e9990919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610cb057600080fd5b610d3f82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611eb990919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b610eb43382611ed8565b50565b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610f4f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603c815260200180612187603c913960400191505060405180910390fd5b60008111610fa8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806122c3602b913960400191505060405180910390fd5b610ffa81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e9990919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061108e816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611eb990919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f2cfce4af01bcb9d6cf6c84ee1b7c491100b8695368264146a94d71e10a63083f826040518082815260200191505060405180910390a250565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6111716114be565b6111e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60003073ffffffffffffffffffffffffffffffffffffffff1631905060008111611258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d815260200180612236602d913960400191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561129e573d6000803e3d6000fd5b5050565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115611377576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603881526020018061214f6038913960400191505060405180910390fd5b61140681600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e9990919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506114908282611ed8565b5050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6040518060400160405280600381526020017f4d4e53000000000000000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561158a57600080fd5b61161982600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e9990919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156117d157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561180b57600080fd5b61185c826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e9990919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118ef826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611eb990919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611a80576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a815260200180612263603a913960400191505060405180910390fd5b60008111611ad9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806121c36029913960400191505060405180910390fd5b611b2a816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e9990919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611bbe81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611eb990919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167ff97a274face0b5517365ad396b1fdba6f68bd3135ef603e44272adba3af5a1e0826040518082815260200191505060405180910390a250565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b611ce16114be565b611d53576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611dd9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806122106026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600082821115611ea857600080fd5b600082840390508091505092915050565b600080828401905083811015611ece57600080fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f5e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806121ec6024913960400191505060405180910390fd5b60008111611fb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061229d6026913960400191505060405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111561204e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603881526020018061214f6038913960400191505060405180910390fd5b61206381600254611e9990919063ffffffff16565b6002819055506120ba816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e9990919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a2505056fe4275726e61626c653a20416d6f756e7420746f206265206275726e74206578636565647320746865206163636f756e742062616c616e6365467265657a61626c653a20416d6f756e7420746f20626520756e66726f7a656e206578636565647320746865206163636f756e742062616c616e6365467265657a61626c653a2043616e206e6f7420667265657a65206e6567617469766520616d6f756e744275726e61626c653a204275726e2066726f6d20746865207a65726f20616464726573734f776e61626c653a204e6577206f776e657220697320746865207a65726f20616464726573734d696e6f73436f696e3a204e6f20657468657220617661696c61626c6520746f2062652077697468647261776e467265657a61626c653a20416d6f756e7420746f2062652066726f7a656e206578636565647320746865206163636f756e742062616c616e63654275726e61626c653a2043616e206e6f74206275726e206e6567617469766520616d6f756e74467265657a61626c653a2043616e206e6f7420756e667265657a65206e6567617469766520616d6f756e74a165627a7a72305820ff21e93571d9abae2e026f682084576a586b40645ec37a6f6c9d9e30745c1af700294d696e6f73436f696e3a2043726561746520636f6e74726163742066726f6d20746865207a65726f2061646472657373",
  "constructorArguments": "4d696e6f73436f696e3a2043726561746520636f6e74726163742066726f6d20746865207a65726f2061646472657373"
}