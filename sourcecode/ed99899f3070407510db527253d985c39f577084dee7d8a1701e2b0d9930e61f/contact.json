{
  "address": "0x92a06f3ed11af181d832bb474d017906acb8c299",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ZeePinToken",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-01\n*/\n\n/**\n * Overflow aware uint math functions.\n *\n * Inspired by https://github.com/MakerDAO/maker-otc/blob/master/contracts/simple_market.sol\n */\npragma solidity ^0.4.11;\n\n/**\n * ERC 20 token\n *\n * https://github.com/ethereum/EIPs/issues/20\n */\ncontract ZeePinToken  {\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n    mapping(address => uint256) balances;\n\n    mapping (address => mapping (address => uint256)) allowed;\n\n    uint256 public totalSupply;\n\n\n    string public name = \"ZeePin Token\";\n    string public symbol = \"ZPT\";\n    uint public decimals = 18;\n\n    uint public startTime; //crowdsale start time (set in constructor)\n    uint public endTime; //crowdsale end time (set in constructor)\n    uint public startEarlyBird;  //crowdsale end time (set in constructor)\n    uint public endEarlyBird;  //crowdsale end time (set in constructor)\n    uint public startPeTime;  //pe start time (set in constructor)\n    uint public endPeTime; //pe end time (set in constructor)\n    uint public endFirstWeek;\n    uint public endSecondWeek;\n    uint public endThirdWeek;\n    uint public endFourthWeek;\n    uint public endFifthWeek;\n\n\n    // Initial founder address (set in constructor)\n    // All deposited ETH will be instantly forwarded to this address.\n    address public founder = 0x0;\n\n    // signer address (for clickwrap agreement)\n    // see function() {} for comments\n    address public signer = 0x0;\n\n    // price is defined by time\n    uint256 public pePrice = 6160;\n    uint256 public earlyBirdPrice = 5720;\n    uint256 public firstWeekTokenPrice = 4840;\n    uint256 public secondWeekTokenPrice = 4752;\n    uint256 public thirdWeekTokenPrice = 4620;\n    uint256 public fourthWeekTokenPrice = 4532;\n    uint256 public fifthWeekTokenPrice = 4400;\n\n    uint256 public etherCap = 90909 * 10**decimals; //max amount raised during crowdsale, which represents 5,100,000,000 ZPTs\n    uint256 public totalMintedToken = 1000000000;\n    uint256 public etherLowLimit = 16500 * 10**decimals;\n    uint256 public earlyBirdCap = 6119 * 10**decimals;\n    uint256 public earlyBirdMinPerPerson = 5 * 10**decimals;\n    uint256 public earlyBirdMaxPerPerson = 200 * 10**decimals;\n    uint256 public peCap = 2700 * 10**decimals;\n    uint256 public peMinPerPerson = 150 * 10**decimals;\n    uint256 public peMaxPerPerson = 450 * 10**decimals;\n    uint256 public regularMinPerPerson = 1 * 10**17;\n    uint256 public regularMaxPerPerson = 200 * 10**decimals;\n\n    uint public transferLockup = 15 days ; //transfers are locked for this time period after\n\n    uint public founderLockup = 2 weeks; //founder allocation cannot be created until this time period after endTime\n    \n\n    uint256 public founderAllocation = 100 * 10**16; //100% of token supply allocated post-crowdsale for the founder/operation allocation\n\n\n    bool public founderAllocated = false; //this will change to true when the founder fund is allocated\n\n    uint256 public saleTokenSupply = 0; //this will keep track of the token supply created during the crowdsale\n    uint256 public saleEtherRaised = 0; //this will keep track of the Ether raised during the crowdsale\n    bool public halted = false; //the founder address can set this to true to halt the crowdsale due to emergency\n\n    event Buy(uint256 eth, uint256 fbt);\n    event AllocateFounderTokens(address indexed sender);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event print(bytes32 msg);\n\n    //constructor\n    function ZeePinToken(address founderInput, address signerInput, uint startTimeInput, uint endTimeInput, uint startEarlyBirdInput, uint endEarlyBirdInput, uint startPeInput, uint endPeInput) {\n        founder = founderInput;\n        signer = signerInput;\n        startTime = startTimeInput;\n        endTime = endTimeInput;\n        startEarlyBird = startEarlyBirdInput;\n        endEarlyBird = endEarlyBirdInput;\n        startPeTime = startPeInput;\n        endPeTime = endPeInput;\n        \n        endFirstWeek = startTime + 1 weeks;\n        endSecondWeek = startTime + 2 weeks;\n        endThirdWeek = startTime + 3 weeks;\n        endFourthWeek = startTime + 4 weeks;\n        endFifthWeek = startTime + 5 weeks;\n    }\n\n    //price based on current token supply\n    function price() constant returns(uint256) {\n        if (now <= endEarlyBird && now >= startEarlyBird) return earlyBirdPrice;\n        if (now <= endFirstWeek) return firstWeekTokenPrice;\n        if (now <= endSecondWeek) return secondWeekTokenPrice;\n        if (now <= endThirdWeek) return thirdWeekTokenPrice;\n        if (now <= endFourthWeek) return fourthWeekTokenPrice;\n        if (now <= endFifthWeek) return fifthWeekTokenPrice;\n        return fifthWeekTokenPrice;\n    }\n\n    // price() exposed for unit tests\n    function testPrice(uint256 currentTime) constant returns(uint256) {\n        if (currentTime < endEarlyBird && currentTime >= startEarlyBird) return earlyBirdPrice;\n        if (currentTime < endFirstWeek && currentTime >= startTime) return firstWeekTokenPrice;\n        if (currentTime < endSecondWeek && currentTime >= endFirstWeek) return secondWeekTokenPrice;\n        if (currentTime < endThirdWeek && currentTime >= endSecondWeek) return thirdWeekTokenPrice;\n        if (currentTime < endFourthWeek && currentTime >= endThirdWeek) return fourthWeekTokenPrice;\n        if (currentTime < endFifthWeek && currentTime >= endFourthWeek) return fifthWeekTokenPrice;\n        return fifthWeekTokenPrice;\n    }\n\n\n    // Buy entry point\n    function buy( bytes32 hash) payable {\n        print(hash);\n        if (((now < startTime || now >= endTime) && (now < startEarlyBird || now >= endEarlyBird)) || halted) revert();\n        if (now>=startEarlyBird && now<endEarlyBird) {\n            if (msg.value < earlyBirdMinPerPerson || msg.value > earlyBirdMaxPerPerson || (saleEtherRaised + msg.value) > (peCap + earlyBirdCap)) {\n                revert();\n            }\n        }\n        if (now>=startTime && now<endTime) {\n            if (msg.value < regularMinPerPerson || msg.value > regularMaxPerPerson || (saleEtherRaised + msg.value) > etherCap ) {\n                revert();\n            }\n        }\n        uint256 tokens = (msg.value * price());\n        balances[msg.sender] = (balances[msg.sender] + tokens);\n        totalSupply = (totalSupply + tokens);\n        saleEtherRaised = (saleEtherRaised + msg.value);\n\n        if (!founder.call.value(msg.value)()) revert(); //immediately send Ether to founder address\n\n        Buy(msg.value, tokens);\n    }\n\n    /**\n     * Set up founder address token balance.\n     *\n     * Security review\n     *\n     * - Integer math: ok - only called once with fixed parameters\n     *\n     * Applicable tests:\n     *\n     *\n     */\n    function allocateFounderTokens() {\n        if (msg.sender!=founder) revert();\n        if (now <= endTime + founderLockup) revert();\n        if (founderAllocated) revert();\n        balances[founder] = (balances[founder] + totalSupply * founderAllocation / (1 ether));\n        totalSupply = (totalSupply + totalSupply * founderAllocation / (1 ether));\n        founderAllocated = true;\n        AllocateFounderTokens(msg.sender);\n    }\n\n    /**\n     * Set up founder address token balance.\n     *\n     * Security review\n     *\n     * - Integer math: ok - only called once with fixed parameters\n     *\n     * Applicable tests:\n     *\n     *\n     */\n    function offlineSales(uint256 offlineNum, uint256 offlineEther) {\n        if (msg.sender!=founder) revert();\n        // if (now >= startEarlyBird && now <= endEarlyBird) revert(); //offline sales can be done only during early bird time \n        if (saleEtherRaised + offlineEther > etherCap) revert();\n        totalSupply = (totalSupply + offlineNum);\n        balances[founder] = (balances[founder] + offlineNum );\n        saleEtherRaised = (saleEtherRaised + offlineEther);\n    }\n\n    /**\n     * Emergency Stop ICO.\n     *\n     *  Applicable tests:\n     *\n     * - Test unhalting, buying, and succeeding\n     */\n    function halt() {\n        if (msg.sender!=founder) revert();\n        halted = true;\n    }\n\n    function unhalt() {\n        if (msg.sender!=founder) revert();\n        halted = false;\n    }\n\n    /**\n     * Change founder address (where ICO ETH is being forwarded).\n     *\n     * Applicable tests:\n     *\n     * - Test founder change by hacker\n     * - Test founder change\n     * - Test founder token allocation twice\n     */\n    function changeFounder(address newFounder) {\n        if (msg.sender!=founder) revert();\n        founder = newFounder;\n    }\n\n    /**\n     * ERC 20 Standard Token interface transfer function\n     *\n     * Prevent transfers until freeze period is over.\n     *\n     * Applicable tests:\n     *\n     * - Test restricted early transfer\n     * - Test transfer after restricted period\n     */\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        if (now <= endTime + transferLockup) revert();\n\n        //Default assumes totalSupply can't be over max (2^256 - 1).\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n        //Replace the if with this one instead.\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n        //if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else { return false; }\n\n    }\n    /**\n     * ERC 20 Standard Token interface transfer function\n     *\n     * Prevent transfers until freeze period is over.\n     */\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (msg.sender != founder) revert();\n\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    /**\n     * Do not allow direct deposits.\n     *\n     * All crowdsale depositors must have read the legal agreement.\n     * This is confirmed by having them signing the terms of service on the website.\n     * The give their crowdsale Ethereum source address on the website.\n     * Website signs this address using crowdsale private key (different from founders key).\n     * buy() takes this signature as input and rejects all deposits that do not have\n     * signature you receive after reading terms of service.\n     *\n     */\n    function() payable {\n        buy(0x33);\n    }\n\n    // only owner can kill\n    function kill() { \n        if (msg.sender == founder) suicide(founder); \n    }\n\n}",
  "bytecode": "60606040526040805190810160405280600c81526020017f5a656550696e20546f6b656e000000000000000000000000000000000000000081525060039080519060200190620000519291906200039e565b506040805190810160405280600381526020017f5a50540000000000000000000000000000000000000000000000000000000000815250600490805190602001906200009f9291906200039e565b5060126005556000601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506118106013556116586014556112e860155561129060165561120c6017556111b4601855611130601955600554600a0a6201631d02601a55633b9aca00601b55600554600a0a61407402601c55600554600a0a6117e702601d55600554600a0a600502601e55600554600a0a60c802601f55600554600a0a610a8c02602055600554600a0a609602602155600554600a0a6101c20260225567016345785d8a0000602355600554600a0a60c8026024556213c68060255562127500602655670de0b6b3a76400006027556000602860006101000a81548160ff02191690831515021790555060006029556000602a556000602b60006101000a81548160ff02191690831515021790555034156200023f57600080fd5b604051610100806200250d833981016040528080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919050505b87601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560068190555084600781905550836008819055508260098190555081600a8190555080600b8190555062093a8060065401600c819055506212750060065401600d81905550621baf8060065401600e819055506224ea0060065401600f81905550622e2480600654016010819055505b50505050505050506200044d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003e157805160ff191683800117855562000412565b8280016001018555821562000412579182015b8281111562000411578251825591602001919060010190620003f4565b5b50905062000421919062000425565b5090565b6200044a91905b80821115620004465760008160009055506001016200042c565b5090565b90565b6120b0806200045d6000396000f3006060604052361561029c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305c78929146102ad57806306fdde03146102d6578063095ea7b31461036557806311b546f6146103bf57806318160ddd146103e8578063238ac9331461041157806323b872dd1461046657806324884fc2146104df578063287ad3e5146105085780632898410b146105315780632af7ceff1461055a5780632dcbfdfa14610591578063313ce567146105ba5780633197cbb6146105e3578063392931131461060c5780633c1593ab146106355780633cdd92621461065e57806340ab48791461068757806341c0e1b5146106b05780634c05df98146106c55780634d853ee5146106ee57806354e30c37146107435780635ed7ca5b1461076c5780635f9a2c2314610781578063677bcb89146107aa5780636c8716d8146107d357806370a08231146107fc5780637228b9db1461084957806378e979251461087257806379c4264a1461089b578063824338bd146108c457806383e811a6146108ed5780638ef85e041461091657806393c32e061461093f57806395d89b411461097857806397dc4c6f14610a0757806399d22e4814610a305780639c9a106114610a5d578063a035b1fe14610a79578063a9059cbb14610aa2578063abfebfd914610afc578063b27f88fb14610b25578063b2db1d2314610b4e578063b88064ad14610b77578063b885acd814610ba0578063b99de11e14610bc9578063b9b8af0b14610bf2578063bcfcb03e14610c1f578063c0ad742714610c34578063c24fe21b14610c5d578063cb3e64fd14610c86578063cd37dcb814610c9b578063d10865a714610cc4578063d438fdbd14610ced578063d4c8fdae14610d19578063dd62ed3e14610d42575b5b6102aa6033600102610dae565b5b005b34156102b857600080fd5b6102c061100e565b6040518082815260200191505060405180910390f35b34156102e157600080fd5b6102e9611014565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561032a5780820151818401525b60208101905061030e565b50505050905090810190601f1680156103575780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561037057600080fd5b6103a5600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506110b2565b604051808215151515815260200191505060405180910390f35b34156103ca57600080fd5b6103d26111a5565b6040518082815260200191505060405180910390f35b34156103f357600080fd5b6103fb6111ab565b6040518082815260200191505060405180910390f35b341561041c57600080fd5b6104246111b1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561047157600080fd5b6104c5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506111d7565b604051808215151515815260200191505060405180910390f35b34156104ea57600080fd5b6104f261152e565b6040518082815260200191505060405180910390f35b341561051357600080fd5b61051b611534565b6040518082815260200191505060405180910390f35b341561053c57600080fd5b61054461153a565b6040518082815260200191505060405180910390f35b341561056557600080fd5b61057b6004808035906020019091905050611540565b6040518082815260200191505060405180910390f35b341561059c57600080fd5b6105a4611619565b6040518082815260200191505060405180910390f35b34156105c557600080fd5b6105cd61161f565b6040518082815260200191505060405180910390f35b34156105ee57600080fd5b6105f6611625565b6040518082815260200191505060405180910390f35b341561061757600080fd5b61061f61162b565b6040518082815260200191505060405180910390f35b341561064057600080fd5b610648611631565b6040518082815260200191505060405180910390f35b341561066957600080fd5b610671611637565b6040518082815260200191505060405180910390f35b341561069257600080fd5b61069a61163d565b6040518082815260200191505060405180910390f35b34156106bb57600080fd5b6106c3611643565b005b34156106d057600080fd5b6106d86116d7565b6040518082815260200191505060405180910390f35b34156106f957600080fd5b6107016116dd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561074e57600080fd5b610756611703565b6040518082815260200191505060405180910390f35b341561077757600080fd5b61077f611709565b005b341561078c57600080fd5b610794611783565b6040518082815260200191505060405180910390f35b34156107b557600080fd5b6107bd611789565b6040518082815260200191505060405180910390f35b34156107de57600080fd5b6107e661178f565b6040518082815260200191505060405180910390f35b341561080757600080fd5b610833600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611795565b6040518082815260200191505060405180910390f35b341561085457600080fd5b61085c6117de565b6040518082815260200191505060405180910390f35b341561087d57600080fd5b6108856117e4565b6040518082815260200191505060405180910390f35b34156108a657600080fd5b6108ae6117ea565b6040518082815260200191505060405180910390f35b34156108cf57600080fd5b6108d76117f0565b6040518082815260200191505060405180910390f35b34156108f857600080fd5b6109006117f6565b6040518082815260200191505060405180910390f35b341561092157600080fd5b6109296117fc565b6040518082815260200191505060405180910390f35b341561094a57600080fd5b610976600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611802565b005b341561098357600080fd5b61098b6118a3565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109cc5780820151818401525b6020810190506109b0565b50505050905090810190601f1680156109f95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610a1257600080fd5b610a1a611941565b6040518082815260200191505060405180910390f35b3415610a3b57600080fd5b610a43611947565b604051808215151515815260200191505060405180910390f35b610a77600480803560001916906020019091905050610dae565b005b3415610a8457600080fd5b610a8c61195a565b6040518082815260200191505060405180910390f35b3415610aad57600080fd5b610ae2600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506119f1565b604051808215151515815260200191505060405180910390f35b3415610b0757600080fd5b610b0f611bed565b6040518082815260200191505060405180910390f35b3415610b3057600080fd5b610b38611bf3565b6040518082815260200191505060405180910390f35b3415610b5957600080fd5b610b61611bf9565b6040518082815260200191505060405180910390f35b3415610b8257600080fd5b610b8a611bff565b6040518082815260200191505060405180910390f35b3415610bab57600080fd5b610bb3611c05565b6040518082815260200191505060405180910390f35b3415610bd457600080fd5b610bdc611c0b565b6040518082815260200191505060405180910390f35b3415610bfd57600080fd5b610c05611c11565b604051808215151515815260200191505060405180910390f35b3415610c2a57600080fd5b610c32611c24565b005b3415610c3f57600080fd5b610c47611e13565b6040518082815260200191505060405180910390f35b3415610c6857600080fd5b610c70611e19565b6040518082815260200191505060405180910390f35b3415610c9157600080fd5b610c99611e1f565b005b3415610ca657600080fd5b610cae611e99565b6040518082815260200191505060405180910390f35b3415610ccf57600080fd5b610cd7611e9f565b6040518082815260200191505060405180910390f35b3415610cf857600080fd5b610d176004808035906020019091908035906020019091905050611ea5565b005b3415610d2457600080fd5b610d2c611ff6565b6040518082815260200191505060405180910390f35b3415610d4d57600080fd5b610d98600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611ffc565b6040518082815260200191505060405180910390f35b60007f5ed2ad0c89ff6dff8d9d7c493c389eb3bfbaa663876fc1bbc2f0c5e945ecf9e98260405180826000191660001916815260200191505060405180910390a1600654421080610e0157506007544210155b8015610e1b5750600854421080610e1a57506009544210155b5b80610e325750602b60009054906101000a900460ff165b15610e3c57600080fd5b6008544210158015610e4f575060095442105b15610e8457601e54341080610e655750601f5434115b80610e795750601d546020540134602a5401115b15610e8357600080fd5b5b6006544210158015610e97575060075442105b15610ec857602354341080610ead575060245434115b80610ebd5750601a5434602a5401115b15610ec757600080fd5b5b610ed061195a565b34029050806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806002540160028190555034602a5401602a81905550601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163460405160006040518083038185876187965a03f1925050501515610fca57600080fd5b7f76911b5d8081a7d290dd15cdb0e39e9513ac7e8d1cce3275a7cf1380889abacc3482604051808381526020018281526020019250505060405180910390a15b5050565b60175481565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110aa5780601f1061107f576101008083540402835291602001916110aa565b820191906000526020600020905b81548152906001019060200180831161108d57829003601f168201915b505050505081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b60155481565b60025481565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561123557600080fd5b816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156112ff575081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b801561138857506000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b1561151d57816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611527565b60009050611527565b5b9392505050565b600a5481565b600b5481565b601b5481565b60006009548210801561155557506008548210155b15611564576014549050611614565b600c548210801561157757506006548210155b15611586576015549050611614565b600d54821080156115995750600c548210155b156115a8576016549050611614565b600e54821080156115bb5750600d548210155b156115ca576017549050611614565b600f54821080156115dd5750600e548210155b156115ec576018549050611614565b601054821080156115ff5750600f548210155b1561160e576019549050611614565b60195490505b919050565b60095481565b60055481565b60075481565b601d5481565b600c5481565b60225481565b60135481565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156116d457601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b60085481565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60145481565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561176557600080fd5b6001602b60006101000a81548160ff0219169083151502179055505b565b600f5481565b60235481565b601c5481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b601a5481565b60065481565b601e5481565b60275481565b60265481565b60165481565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561185e57600080fd5b80601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119395780601f1061190e57610100808354040283529160200191611939565b820191906000526020600020905b81548152906001019060200180831161191c57829003601f168201915b505050505081565b601f5481565b602860009054906101000a900460ff1681565b6000600954421115801561197057506008544210155b1561197f5760145490506119ee565b600c54421115156119945760155490506119ee565b600d54421115156119a95760165490506119ee565b600e54421115156119be5760175490506119ee565b600f54421115156119d35760185490506119ee565b601054421115156119e85760195490506119ee565b60195490505b90565b60006025546007540142111515611a0757600080fd5b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015611ad257506000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15611bdd57816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611be7565b60009050611be7565b5b92915050565b60195481565b60105481565b60245481565b60215481565b60185481565b600e5481565b602b60009054906101000a900460ff1681565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c8057600080fd5b6026546007540142111515611c9457600080fd5b602860009054906101000a900460ff1615611cae57600080fd5b670de0b6b3a764000060275460025402811515611cc757fe5b04600080601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401600080601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550670de0b6b3a764000060275460025402811515611da757fe5b04600254016002819055506001602860006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f1c8a3821e439862f28669f7fbc210e74e947ebf0e947b591cc5a02e41003026560405160405180910390a25b565b60295481565b60255481565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e7b57600080fd5b6000602b60006101000a81548160ff0219169083151502179055505b565b60205481565b600d5481565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f0157600080fd5b601a5481602a54011115611f1457600080fd5b816002540160028190555081600080601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401600080601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080602a5401602a819055505b5050565b602a5481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b929150505600a165627a7a72305820cc92c0ffe95ba16fa631d1d1f025dc47803112a611673d308150a1d797572f310029000000000000000000000000bef7fa019471b74baf041e1fbc6683b236a5f6fe000000000000000000000000bef7fa019471b74baf041e1fbc6683b236a5f6fe0000000000000000000000000000000000000000000000000000000059b561800000000000000000000000000000000000000000000000000000000059e234800000000000000000000000000000000000000000000000000000000059a94bc00000000000000000000000000000000000000000000000000000000059b5617f000000000000000000000000000000000000000000000000000000005992e2400000000000000000000000000000000000000000000000000000000059a7fa3f",
  "constructorArguments": "000000000000000000000000bef7fa019471b74baf041e1fbc6683b236a5f6fe000000000000000000000000bef7fa019471b74baf041e1fbc6683b236a5f6fe0000000000000000000000000000000000000000000000000000000059b561800000000000000000000000000000000000000000000000000000000059e234800000000000000000000000000000000000000000000000000000000059a94bc00000000000000000000000000000000000000000000000000000000059b5617f000000000000000000000000000000000000000000000000000000005992e2400000000000000000000000000000000000000000000000000000000059a7fa3f"
}