{
  "address": "0x297e4e5e59ad72b1b0a2fd446929e76117be0e0a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ValorToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-27\n*/\n\npragma solidity 0.4.25;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n\n\n\n\n\n\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n\n\n\n\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n/**\n * @title Standard Burnable Token\n * @dev Adds burnFrom method to ERC20 implementations\n */\ncontract StandardBurnableToken is BurnableToken, StandardToken {\n\n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param _from address The address which you want to send tokens from\n   * @param _value uint256 The amount of token to be burned\n   */\n  function burnFrom(address _from, uint256 _value) public {\n    require(_value <= allowed[_from][msg.sender]);\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    _burn(_from, _value);\n  }\n}\n\n/**\n * @title ValorToken\n */\ncontract ValorToken is StandardBurnableToken {\n\n    string public constant name    =   \"ValorToken\";\n    string public constant symbol  =   \"VALOR\";\n    uint8  public constant decimals =   18;\n\n    // initial supply addresses\n    address public employeePool;\n    address public futureDevFund;\n    address public companyWallet;\n\n    // initial supply and distribution of tokens\n    uint256 internal constant VALOR = 10 ** uint256(decimals);\n    uint256 public constant INITIAL_SUPPLY = 1e8 * VALOR; //100000000 VALOR.\n\n    // required distribution is:\n    // employeePool : 19%\n    // futureDevFund: 26%\n    // companyWallet: 55%\n    uint256 internal constant employeePoolSupply =  1.9e7 * VALOR; // 19 000 000 VALOR\n    uint256 internal constant futureDevFundSupply = 2.6e7 * VALOR; // 26 000 000 VALOR\n    uint256 internal constant companyWalletSupply = 5.5e7 * VALOR; // 55 000 000 VALOR\n\n    /**\n     * @dev Constructor that distributes at TGS the supply among three predefined wallets \n     * @param _employeePool the account of employees pool funds\n     * @param _futureDevFund the account of future development fund\n     * @param _companyWallet the account of company managed cold wallet\n     */\n    constructor(address _employeePool, address _futureDevFund, address _companyWallet) public {\n        require(_employeePool  != address(0),  \"0x0 address is not allowed\");\n        require(_futureDevFund != address(0),  \"0x0 address is not allowed\");\n        require(_companyWallet != address(0),  \"0x0 address is not allowed\");\n\n        employeePool  = _employeePool;\n        futureDevFund = _futureDevFund;\n        companyWallet = _companyWallet;\n\n        assert(INITIAL_SUPPLY == employeePoolSupply + futureDevFundSupply + companyWalletSupply);\n\n        totalSupply_ = INITIAL_SUPPLY;\n\n        // EmployeePool\n        balances[employeePool] += employeePoolSupply;\n        emit Transfer(address(0), employeePool, employeePoolSupply);\n\n        // FutureDevFund\n        balances[futureDevFund] += futureDevFundSupply;\n        emit Transfer(address(0), futureDevFund, futureDevFundSupply);\n\n        //CompanyWallet\n        balances[companyWallet] += companyWalletSupply;\n        emit Transfer(address(0), companyWallet, companyWalletSupply);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"employeePool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"futureDevFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_employeePool\",\"type\":\"address\"},{\"name\":\"_futureDevFund\",\"type\":\"address\"},{\"name\":\"_companyWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50604051606080610dd3833981016040908152815160208301519190920151600160a060020a038316151561009457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a6024820152600080516020610db3833981519152604482015290519081900360640190fd5b600160a060020a03821615156100f957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a6024820152600080516020610db3833981519152604482015290519081900360640190fd5b600160a060020a038116151561015e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a6024820152600080516020610db3833981519152604482015290519081900360640190fd5b60038054600160a060020a0319908116600160a060020a038681169190911780845560048054841687841617905560058054909316858316179092556a52b7d2dcc80cd2e400000060015590811660009081526020818152604080832080546a0fb768105935a2f30000009081019091559454815195865290519316939192600080516020610d938339815191529281900390910190a360048054600160a060020a0390811660009081526020818152604080832080546a1581b6d300d0225a0000009081019091559454815195865290519316939192600080516020610d938339815191529281900390910190a360058054600160a060020a0390811660009081526020818152604080832080546a2d7eb3f96e070d970000009081019091559454815195865290519316939192600080516020610d938339815191529281900390910190a3505050610adc806102b76000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f57806318160ddd146101b75780631ec32d15146101de57806323b872dd1461020f5780632ff2e9dc14610239578063313ce5671461024e57806342966c681461027957806366188463146102935780636a3f5489146102b757806370a08231146102cc57806379cc6790146102ed57806395d89b4114610311578063a9059cbb14610326578063d73dd6231461034a578063dd62ed3e1461036e578063f93159d214610395575b600080fd5b34801561010157600080fd5b5061010a6103aa565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014457818101518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018b57600080fd5b506101a3600160a060020a03600435166024356103e1565b604080519115158252519081900360200190f35b3480156101c357600080fd5b506101cc610447565b60408051918252519081900360200190f35b3480156101ea57600080fd5b506101f361044d565b60408051600160a060020a039092168252519081900360200190f35b34801561021b57600080fd5b506101a3600160a060020a036004358116906024351660443561045c565b34801561024557600080fd5b506101cc6105d1565b34801561025a57600080fd5b506102636105e0565b6040805160ff9092168252519081900360200190f35b34801561028557600080fd5b506102916004356105e5565b005b34801561029f57600080fd5b506101a3600160a060020a03600435166024356105f2565b3480156102c357600080fd5b506101f36106e1565b3480156102d857600080fd5b506101cc600160a060020a03600435166106f0565b3480156102f957600080fd5b50610291600160a060020a036004351660243561070b565b34801561031d57600080fd5b5061010a6107a1565b34801561033257600080fd5b506101a3600160a060020a03600435166024356107d8565b34801561035657600080fd5b506101a3600160a060020a03600435166024356108b7565b34801561037a57600080fd5b506101cc600160a060020a0360043581169060243516610950565b3480156103a157600080fd5b506101f361097b565b60408051808201909152600a81527f56616c6f72546f6b656e00000000000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b600554600160a060020a031681565b600160a060020a03831660009081526020819052604081205482111561048157600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156104b157600080fd5b600160a060020a03831615156104c657600080fd5b600160a060020a0384166000908152602081905260409020546104ef908363ffffffff61098a16565b600160a060020a038086166000908152602081905260408082209390935590851681522054610524908363ffffffff61099c16565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610566908363ffffffff61098a16565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b6a52b7d2dcc80cd2e400000081565b601281565b6105ef33826109af565b50565b336000908152600260209081526040808320600160a060020a038616845290915281205480831061064657336000908152600260209081526040808320600160a060020a038816845290915281205561067b565b610656818463ffffffff61098a16565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600354600160a060020a031681565b600160a060020a031660009081526020819052604090205490565b600160a060020a038216600090815260026020908152604080832033845290915290205481111561073b57600080fd5b600160a060020a038216600090815260026020908152604080832033845290915290205461076f908263ffffffff61098a16565b600160a060020a038316600090815260026020908152604080832033845290915290205561079d82826109af565b5050565b60408051808201909152600581527f56414c4f52000000000000000000000000000000000000000000000000000000602082015281565b336000908152602081905260408120548211156107f457600080fd5b600160a060020a038316151561080957600080fd5b33600090815260208190526040902054610829908363ffffffff61098a16565b3360009081526020819052604080822092909255600160a060020a0385168152205461085b908363ffffffff61099c16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a03861684529091528120546108eb908363ffffffff61099c16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600454600160a060020a031681565b60008282111561099657fe5b50900390565b818101828110156109a957fe5b92915050565b600160a060020a0382166000908152602081905260409020548111156109d457600080fd5b600160a060020a0382166000908152602081905260409020546109fd908263ffffffff61098a16565b600160a060020a038316600090815260208190526040902055600154610a29908263ffffffff61098a16565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350505600a165627a7a7230582006d7da0ff78ca6624cffbb928b724c47a7f6853f35c8703ee3a8d4faa94e96e20029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef3078302061646472657373206973206e6f7420616c6c6f776564000000000000000000000000000000000000a76ee55d63cc9ae431c1618bfeb953487c06c3c2000000000000000000000000f5d3e5586ef9ca8a18f137808ff7e162a638e621000000000000000000000000bedc09625d4233631bca1ee670b24e0651cfbe17",
  "constructorArguments": "000000000000000000000000a76ee55d63cc9ae431c1618bfeb953487c06c3c2000000000000000000000000f5d3e5586ef9ca8a18f137808ff7e162a638e621000000000000000000000000bedc09625d4233631bca1ee670b24e0651cfbe17"
}