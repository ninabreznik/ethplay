{
  "address": "0xbeb9ef514a379b997e0798fdcc901ee474b6d9a1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Melon: Old Token",
  "contractName": "MelonToken",
  "compilerVersion": "v0.4.8+commit.60cc1668",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-02-13\n*/\n\npragma solidity ^0.4.8;\n\n/// @title Assertive contract\n/// @author Melonport AG <[email protected]>\n/// @notice Asserts function\ncontract Assertive {\n\n  function assert(bool assertion) internal {\n      if (!assertion) throw;\n  }\n\n}\n\n/// @title Overflow aware uint math functions.\n/// @author Melonport AG <[email protected]>\n/// @notice Inspired by https://github.com/MakerDAO/maker-otc/blob/master/contracts/simple_market.sol\ncontract SafeMath is Assertive{\n\n    function safeMul(uint a, uint b) internal returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeSub(uint a, uint b) internal returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint a, uint b) internal returns (uint) {\n        uint c = a + b;\n        assert(c>=a && c>=b);\n        return c;\n    }\n\n}\n\n/// @title ERC20 Token Protocol\n/// @author Melonport AG <[email protected]>\n/// @notice See https://github.com/ethereum/EIPs/issues/20\ncontract ERC20Protocol {\n\n    function totalSupply() constant returns (uint256 totalSupply) {}\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\n    function transfer(address _to, uint256 _value) returns (bool success) {}\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n    function approve(address _spender, uint256 _value) returns (bool success) {}\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\n\n/// @title ERC20 Token\n/// @author Melonport AG <[email protected]>\n/// @notice Original taken from https://github.com/ethereum/EIPs/issues/20\n/// @notice Checked against integer overflow\ncontract ERC20 is ERC20Protocol {\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    mapping (address => uint256) balances;\n\n    mapping (address => mapping (address => uint256)) allowed;\n\n    uint256 public totalSupply;\n\n}\n\n\n/// @title Melon Token Contract\n/// @author Melonport AG <[email protected]>\ncontract MelonToken is ERC20, SafeMath {\n\n    // FIELDS\n\n    // Constant token specific fields\n    string public constant name = \"Melon Token\";\n    string public constant symbol = \"MLN\";\n    uint public constant decimals = 18;\n    uint public constant THAWING_DURATION = 2 years; // Time needed for iced tokens to thaw into liquid tokens\n    uint public constant MAX_TOTAL_TOKEN_AMOUNT_OFFERED_TO_PUBLIC = 1000000 * 10 ** decimals; // Max amount of tokens offered to the public\n    uint public constant MAX_TOTAL_TOKEN_AMOUNT = 1250000 * 10 ** decimals; // Max amount of total tokens raised during all contributions (includes stakes of patrons)\n\n    // Fields that are only changed in constructor\n    address public minter; // Contribution contract(s)\n    address public melonport; // Can change to other minting contribution contracts but only until total amount of token minted\n    uint public startTime; // Contribution start time in seconds\n    uint public endTime; // Contribution end time in seconds\n\n    // Fields that can be changed by functions\n    mapping (address => uint) lockedBalances;\n\n    // MODIFIERS\n\n    modifier only_minter {\n        assert(msg.sender == minter);\n        _;\n    }\n\n    modifier only_melonport {\n        assert(msg.sender == melonport);\n        _;\n    }\n\n    modifier is_later_than(uint x) {\n        assert(now > x);\n        _;\n    }\n\n    modifier max_total_token_amount_not_reached(uint amount) {\n        assert(safeAdd(totalSupply, amount) <= MAX_TOTAL_TOKEN_AMOUNT);\n        _;\n    }\n\n    // CONSTANT METHODS\n\n    function lockedBalanceOf(address _owner) constant returns (uint balance) {\n        return lockedBalances[_owner];\n    }\n\n    // METHODS\n\n    /// Pre: All fields, except { minter, melonport, startTime, endTime } are valid\n    /// Post: All fields, including { minter, melonport, startTime, endTime } are valid\n    function MelonToken(address setMinter, address setMelonport, uint setStartTime, uint setEndTime) {\n        minter = setMinter;\n        melonport = setMelonport;\n        startTime = setStartTime;\n        endTime = setEndTime;\n    }\n\n    /// Pre: Address of contribution contract (minter) is set\n    /// Post: Mints token into tradeable tranche\n    function mintLiquidToken(address recipient, uint amount)\n        external\n        only_minter\n        max_total_token_amount_not_reached(amount)\n    {\n        balances[recipient] = safeAdd(balances[recipient], amount);\n        totalSupply = safeAdd(totalSupply, amount);\n    }\n\n    /// Pre: Address of contribution contract (minter) is set\n    /// Post: Mints Token into iced tranche. Become liquid after completion of the melonproject or two years.\n    function mintIcedToken(address recipient, uint amount)\n        external\n        only_minter\n        max_total_token_amount_not_reached(amount)\n    {\n        lockedBalances[recipient] = safeAdd(lockedBalances[recipient], amount);\n        totalSupply = safeAdd(totalSupply, amount);\n    }\n\n    /// Pre: Thawing period has passed - iced funds have turned into liquid ones\n    /// Post: All funds available for trade\n    function unlockBalance(address recipient)\n        is_later_than(endTime + THAWING_DURATION)\n    {\n        balances[recipient] = safeAdd(balances[recipient], lockedBalances[recipient]);\n        lockedBalances[recipient] = 0;\n    }\n\n    /// Pre: Prevent transfers until contribution period is over.\n    /// Post: Transfer MLN from msg.sender\n    /// Note: ERC20 interface\n    function transfer(address recipient, uint amount)\n        is_later_than(endTime)\n        returns (bool success)\n    {\n        return super.transfer(recipient, amount);\n    }\n\n    /// Pre: Prevent transfers until contribution period is over.\n    /// Post: Transfer MLN from arbitrary address\n    /// Note: ERC20 interface\n    function transferFrom(address sender, address recipient, uint amount)\n        is_later_than(endTime)\n        returns (bool success)\n    {\n        return super.transferFrom(sender, recipient, amount);\n    }\n\n    /// Pre: Melonport address is set. Restricted to melonport.\n    /// Post: New minter can now create tokens up to MAX_TOTAL_TOKEN_AMOUNT.\n    /// Note: This allows additional contribution periods at a later stage, while still using the same ERC20 compliant contract.\n    function changeMintingAddress(address newAddress) only_melonport { minter = newAddress; }\n\n    /// Pre: Melonport address is set. Restricted to melonport.\n    /// Post: New address set. This address controls the setting of the minter address\n    function changeMelonportAddress(address newAddress) only_melonport { melonport = newAddress; }\n}\n\n\n/// @title Contribution Contract\n/// @author Melonport AG <[email protected]>\n/// @notice This follows Condition-Orientated Programming as outlined here:\n/// @notice   https://medium.com/@gavofyork/condition-orientated-programming-969f6ba0161a#.saav3bvva\ncontract Contribution is SafeMath {\n\n    // FIELDS\n\n    // Constant fields\n    uint public constant ETHER_CAP = 227000 ether; // Max amount raised during first contribution; targeted amount CHF 2.5MN\n    uint public constant MAX_CONTRIBUTION_DURATION = 4 weeks; // Max amount in seconds of contribution period\n    uint public constant BTCS_ETHER_CAP = ETHER_CAP * 25 / 100; // Max melon token allocation for btcs before contribution period starts\n    // Price Rates\n    uint public constant PRICE_RATE_FIRST = 2200; // Four price tiers, each valid for two weeks\n    uint public constant PRICE_RATE_SECOND = 2150;\n    uint public constant PRICE_RATE_THIRD = 2100;\n    uint public constant PRICE_RATE_FOURTH = 2050;\n    uint public constant DIVISOR_PRICE = 1000; // Price rates are divided by this number\n    // Addresses of Patrons\n    address public constant FOUNDER_ONE = 0x009beAE06B0c0C536ad1eA43D6f61DCCf0748B1f;\n    address public constant FOUNDER_TWO = 0xB1EFca62C555b49E67363B48aE5b8Af3C7E3e656;\n    address public constant EXT_COMPANY_ONE = 0x00779e0e4c6083cfd26dE77B4dbc107A7EbB99d2;\n    address public constant EXT_COMPANY_TWO = 0x1F06B976136e94704D328D4d23aae7259AaC12a2;\n    address public constant EXT_COMPANY_THREE = 0xDD91615Ea8De94bC48231c4ae9488891F1648dc5;\n    address public constant ADVISOR_ONE = 0x0001126FC94AE0be2B685b8dE434a99B2552AAc3;\n    address public constant ADVISOR_TWO = 0x4f2AF8d2614190Cc80c6E9772B0C367db8D9753C;\n    address public constant ADVISOR_THREE = 0x715a70a7c7d76acc8d5874862e381c1940c19cce;\n    address public constant ADVISOR_FOUR = 0x8615F13C12c24DFdca0ba32511E2861BE02b93b2;\n    address public constant AMBASSADOR_ONE = 0xd3841FB80CE408ca7d0b41D72aA91CA74652AF47;\n    address public constant AMBASSADOR_TWO = 0xDb775577538018a689E4Ad2e8eb5a7Ae7c34722B;\n    address public constant AMBASSADOR_THREE = 0xaa967e0ce6A1Ff5F9c124D15AD0412F137C99767;\n    address public constant AMBASSADOR_FOUR = 0x910B41a6568a645437bC286A5C733f3c501d8c88;\n    address public constant AMBASSADOR_FIVE = 0xb1d16BFE840E66E3c81785551832aAACB4cf69f3;\n    address public constant AMBASSADOR_SIX = 0x5F6ff16364BfEf546270325695B6e90cc89C497a;\n    address public constant AMBASSADOR_SEVEN = 0x58656e8872B0d266c2acCD276cD23F4C0B5fEfb9;\n    address public constant SPECIALIST_ONE = 0x8a815e818E617d1f93BE7477D179258aC2d25310;\n    address public constant SPECIALIST_TWO = 0x1eba6702ba21cfc1f6c87c726364b60a5e444901;\n    address public constant SPECIALIST_THREE = 0x82eae6c30ed9606e2b389ae65395648748c6a17f;\n    // Stakes of Patrons\n    uint public constant MELONPORT_COMPANY_STAKE = 1000; // 10% of all created melon token allocated to melonport company\n    uint public constant FOUNDER_STAKE = 445; // 4.45% of all created melon token allocated to founder\n    uint public constant EXT_COMPANY_STAKE_ONE = 150; // 1.5% of all created melon token allocated to external company\n    uint public constant EXT_COMPANY_STAKE_TWO = 100; // 1% of all created melon token allocated to external company\n    uint public constant EXT_COMPANY_STAKE_THREE = 50; // 0.5% of all created melon token allocated to external company\n    uint public constant ADVISOR_STAKE_ONE = 150; // 1.5% of all created melon token allocated to advisor\n    uint public constant ADVISOR_STAKE_TWO = 50; // 0.5% of all created melon token allocated to advisor\n    uint public constant ADVISOR_STAKE_THREE = 25; // 0.25% of all created melon token allocated to advisor\n    uint public constant ADVISOR_STAKE_FOUR = 10; // 0.1% of all created melon token allocated to advisor\n    uint public constant AMBASSADOR_STAKE = 5; // 0.05% of all created melon token allocated to ambassadors\n    uint public constant SPECIALIST_STAKE_ONE = 25; // 0.25% of all created melon token allocated to specialist\n    uint public constant SPECIALIST_STAKE_TWO = 10; // 0.1% of all created melon token allocated to specialist\n    uint public constant SPECIALIST_STAKE_THREE = 5; // 0.05% of all created melon token allocated to specialist\n    uint public constant DIVISOR_STAKE = 10000; // Stakes are divided by this number; Results to one basis point\n\n    // Fields that are only changed in constructor\n    address public melonport; // All deposited ETH will be instantly forwarded to this address.\n    address public btcs; // Bitcoin Suisse address for their allocation option\n    address public signer; // Signer address as on https://contribution.melonport.com\n    uint public startTime; // Contribution start time in seconds\n    uint public endTime; // Contribution end time in seconds\n    MelonToken public melonToken; // Contract of the ERC20 compliant melon token\n\n    // Fields that can be changed by functions\n    uint public etherRaised; // This will keep track of the Ether raised during the contribution\n    bool public halted; // The melonport address can set this to true to halt the contribution due to an emergency\n\n    // EVENTS\n\n    event TokensBought(address indexed sender, uint eth, uint amount);\n\n    // MODIFIERS\n\n    modifier is_signer_signature(uint8 v, bytes32 r, bytes32 s) {\n        bytes32 hash = sha256(msg.sender);\n        assert(ecrecover(hash, v, r, s) == signer);\n        _;\n    }\n\n    modifier only_melonport {\n        assert(msg.sender == melonport);\n        _;\n    }\n\n    modifier only_btcs {\n        assert(msg.sender == btcs);\n        _;\n    }\n\n    modifier is_not_halted {\n        assert(!halted);\n        _;\n    }\n\n    modifier ether_cap_not_reached {\n        assert(safeAdd(etherRaised, msg.value) <= ETHER_CAP);\n        _;\n    }\n\n    modifier btcs_ether_cap_not_reached {\n        assert(safeAdd(etherRaised, msg.value) <= BTCS_ETHER_CAP);\n        _;\n    }\n\n    modifier is_not_earlier_than(uint x) {\n        assert(now >= x);\n        _;\n    }\n\n    modifier is_earlier_than(uint x) {\n        assert(now < x);\n        _;\n    }\n\n    // CONSTANT METHODS\n\n    /// Pre: startTime, endTime specified in constructor,\n    /// Post: Price rate at given blockTime; One ether equals priceRate() / DIVISOR_PRICE of melon tokens\n    function priceRate() constant returns (uint) {\n        // Four price tiers\n        if (startTime <= now && now < startTime + 1 weeks)\n            return PRICE_RATE_FIRST;\n        if (startTime + 1 weeks <= now && now < startTime + 2 weeks)\n            return PRICE_RATE_SECOND;\n        if (startTime + 2 weeks <= now && now < startTime + 3 weeks)\n            return PRICE_RATE_THIRD;\n        if (startTime + 3 weeks <= now && now < endTime)\n            return PRICE_RATE_FOURTH;\n        // Should not be called before or after contribution period\n        assert(false);\n    }\n\n    // NON-CONSTANT METHODS\n\n    /// Pre: All fields, except { melonport, btcs, signer, startTime } are valid\n    /// Post: All fields, including { melonport, btcs, signer, startTime } are valid\n    function Contribution(address setMelonport, address setBTCS, address setSigner, uint setStartTime) {\n        melonport = setMelonport;\n        btcs = setBTCS;\n        signer = setSigner;\n        startTime = setStartTime;\n        endTime = startTime + MAX_CONTRIBUTION_DURATION;\n        melonToken = new MelonToken(this, melonport, startTime, endTime); // Create Melon Token Contract\n        var maxTotalTokenAmountOfferedToPublic = melonToken.MAX_TOTAL_TOKEN_AMOUNT_OFFERED_TO_PUBLIC();\n        uint stakeMultiplier = maxTotalTokenAmountOfferedToPublic / DIVISOR_STAKE;\n        // Mint liquid tokens for melonport company, liquid means tradeale\n        melonToken.mintLiquidToken(melonport,       MELONPORT_COMPANY_STAKE * stakeMultiplier);\n        // Mint iced tokens that are unable to trade for two years and allocate according to relevant stakes\n        melonToken.mintIcedToken(FOUNDER_ONE,       FOUNDER_STAKE *           stakeMultiplier);\n        melonToken.mintIcedToken(FOUNDER_TWO,       FOUNDER_STAKE *           stakeMultiplier);\n        melonToken.mintIcedToken(EXT_COMPANY_ONE,   EXT_COMPANY_STAKE_ONE *   stakeMultiplier);\n        melonToken.mintIcedToken(EXT_COMPANY_TWO,   EXT_COMPANY_STAKE_TWO *   stakeMultiplier);\n        melonToken.mintIcedToken(EXT_COMPANY_THREE, EXT_COMPANY_STAKE_THREE * stakeMultiplier);\n        melonToken.mintIcedToken(ADVISOR_ONE,       ADVISOR_STAKE_ONE *       stakeMultiplier);\n        melonToken.mintIcedToken(ADVISOR_TWO,       ADVISOR_STAKE_TWO *       stakeMultiplier);\n        melonToken.mintIcedToken(ADVISOR_THREE,     ADVISOR_STAKE_THREE *     stakeMultiplier);\n        melonToken.mintIcedToken(ADVISOR_FOUR,      ADVISOR_STAKE_FOUR *      stakeMultiplier);\n        melonToken.mintIcedToken(AMBASSADOR_ONE,    AMBASSADOR_STAKE *        stakeMultiplier);\n        melonToken.mintIcedToken(AMBASSADOR_TWO,    AMBASSADOR_STAKE *        stakeMultiplier);\n        melonToken.mintIcedToken(AMBASSADOR_THREE,  AMBASSADOR_STAKE *        stakeMultiplier);\n        melonToken.mintIcedToken(AMBASSADOR_FOUR,   AMBASSADOR_STAKE *        stakeMultiplier);\n        melonToken.mintIcedToken(AMBASSADOR_FIVE,   AMBASSADOR_STAKE *        stakeMultiplier);\n        melonToken.mintIcedToken(AMBASSADOR_SIX,    AMBASSADOR_STAKE *        stakeMultiplier);\n        melonToken.mintIcedToken(AMBASSADOR_SEVEN,  AMBASSADOR_STAKE *        stakeMultiplier);\n        melonToken.mintIcedToken(SPECIALIST_ONE,    SPECIALIST_STAKE_ONE *    stakeMultiplier);\n        melonToken.mintIcedToken(SPECIALIST_TWO,    SPECIALIST_STAKE_TWO *    stakeMultiplier);\n        melonToken.mintIcedToken(SPECIALIST_THREE,  SPECIALIST_STAKE_THREE *  stakeMultiplier);\n    }\n\n    /// Pre: Valid signature received from https://contribution.melonport.com\n    /// Post: Bought melon tokens according to priceRate() and msg.value\n    function buy(uint8 v, bytes32 r, bytes32 s) payable { buyRecipient(msg.sender, v, r, s); }\n\n    /// Pre: Valid signature received from https://contribution.melonport.com\n    /// Post: Bought melon tokens according to priceRate() and msg.value on behalf of recipient\n    function buyRecipient(address recipient, uint8 v, bytes32 r, bytes32 s)\n        payable\n        is_signer_signature(v, r, s)\n        is_not_earlier_than(startTime)\n        is_earlier_than(endTime)\n        is_not_halted\n        ether_cap_not_reached\n    {\n        uint amount = safeMul(msg.value, priceRate()) / DIVISOR_PRICE;\n        melonToken.mintLiquidToken(recipient, amount);\n        etherRaised = safeAdd(etherRaised, msg.value);\n        assert(melonport.send(msg.value));\n        TokensBought(recipient, msg.value, amount);\n    }\n\n    /// Pre: BTCS before contribution period, BTCS has exclusive right to buy up to 25% of all melon tokens\n    /// Post: Bought melon tokens according to PRICE_RATE_FIRST and msg.value on behalf of recipient\n    function btcsBuyRecipient(address recipient)\n        payable\n        only_btcs\n        is_earlier_than(startTime)\n        is_not_halted\n        btcs_ether_cap_not_reached\n    {\n        uint amount = safeMul(msg.value, PRICE_RATE_FIRST) / DIVISOR_PRICE;\n        melonToken.mintLiquidToken(recipient, amount);\n        etherRaised = safeAdd(etherRaised, msg.value);\n        assert(melonport.send(msg.value));\n        TokensBought(recipient, msg.value, amount);\n    }\n\n    /// Pre: Emergency situation that requires contribution period to stop.\n    /// Post: Contributing not possible anymore.\n    function halt() only_melonport { halted = true; }\n\n    /// Pre: Emergency situation resolved.\n    /// Post: Contributing becomes possible again withing the outlined restrictions.\n    function unhalt() only_melonport { halted = false; }\n\n    /// Pre: Restricted to melonport.\n    /// Post: New address set. To halt contribution and/or change minter in MelonToken contract.\n    function changeMelonportAddress(address newAddress) only_melonport { melonport = newAddress; }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeMelonportAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TOTAL_TOKEN_AMOUNT_OFFERED_TO_PUBLIC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeMintingAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintIcedToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintLiquidToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TOTAL_TOKEN_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unlockBalance\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"melonport\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"THAWING_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"setMinter\",\"type\":\"address\"},{\"name\":\"setMelonport\",\"type\":\"address\"},{\"name\":\"setStartTime\",\"type\":\"uint256\"},{\"name\":\"setEndTime\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040523461000057604051608080610bb983398101604090815281516020830151918301516060909301519092905b60038054600160a060020a03808716600160a060020a0319928316179092556004805492861692909116919091179055600582905560068190555b505050505b610b3a8061007f6000396000f3006060604052361561010c5763ffffffff60e060020a60003504166306fdde038114610111578063075461721461019e578063095ea7b3146101c757806318160ddd146101f7578063201453281461021657806323b872dd14610231578063313ce567146102675780633197cbb614610286578063336da059146102a557806351892f07146102c457806359355736146102df57806370a082311461030a57806378e979251461033557806381597d0c146103545780638cae711f1461037257806395d89b4114610390578063a89c5be01461041d578063a9059cbb1461043c578063ce7a60ab1461046c578063dd62ed3e14610487578063fd222745146104b8578063fdee5c22146104e1575b610000565b346100005761011e610500565b604080516020808252835181830152835191928392908301918501908083838215610164575b80518252602083111561016457601f199092019160209182019101610144565b505050905090810190601f1680156101905780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34610000576101ab610537565b60408051600160a060020a039092168252519081900360200190f35b34610000576101e3600160a060020a0360043516602435610546565b604080519115158252519081900360200190f35b34610000576102046105b1565b60408051918252519081900360200190f35b346100005761022f600160a060020a03600435166105b7565b005b34610000576101e3600160a060020a03600435811690602435166044356105ff565b604080519115158252519081900360200190f35b3461000057610204610626565b60408051918252519081900360200190f35b346100005761020461062b565b60408051918252519081900360200190f35b3461000057610204610631565b60408051918252519081900360200190f35b346100005761022f600160a060020a036004351661063f565b005b3461000057610204600160a060020a0360043516610687565b60408051918252519081900360200190f35b3461000057610204600160a060020a03600435166106a6565b60408051918252519081900360200190f35b34610000576102046106c5565b60408051918252519081900360200190f35b346100005761022f600160a060020a03600435166024356106cb565b005b346100005761022f600160a060020a036004351660243561075b565b005b346100005761011e6107eb565b604080516020808252835181830152835191928392908301918501908083838215610164575b80518252602083111561016457601f199092019160209182019101610144565b505050905090810190601f1680156101905780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3461000057610204610822565b60408051918252519081900360200190f35b34610000576101e3600160a060020a0360043516602435610831565b604080519115158252519081900360200190f35b346100005761022f600160a060020a0360043516610856565b005b3461000057610204600160a060020a03600435811690602435166108c2565b60408051918252519081900360200190f35b34610000576101ab6108ef565b60408051600160a060020a039092168252519081900360200190f35b34610000576102046108fe565b60408051918252519081900360200190f35b60408051808201909152600b81527f4d656c6f6e20546f6b656e000000000000000000000000000000000000000000602082015281565b600354600160a060020a031681565b600160a060020a03338116600081815260016020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60025481565b6004546105d29033600160a060020a03908116911614610906565b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600060065461060f814211610906565b61061a858585610916565b91505b5b509392505050565b601281565b60065481565b69d3c21bcecceda100000081565b60045461065a9033600160a060020a03908116911614610906565b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600160a060020a0381166000908152600760205260409020545b919050565b600160a060020a0381166000908152602081905260409020545b919050565b60055481565b6003546106e69033600160a060020a03908116911614610906565b806107076012600a0a621312d00261070060025484610a23565b1115610906565b600160a060020a03831660009081526007602052604090205461072a9083610a23565b600160a060020a0384166000908152600760205260409020556002546107509083610a23565b6002555b5b505b5050565b6003546107769033600160a060020a03908116911614610906565b806107976012600a0a621312d00261070060025484610a23565b1115610906565b600160a060020a0383166000908152602081905260409020546107ba9083610a23565b600160a060020a0384166000908152602081905260409020556002546107509083610a23565b6002555b5b505b5050565b60408051808201909152600381527f4d4c4e0000000000000000000000000000000000000000000000000000000000602082015281565b6a0108b2a2c280290940000081565b6000600654610841814211610906565b61084b8484610a4b565b91505b5b5092915050565b6303c267006006540161086a814211610906565b600160a060020a038216600090815260208181526040808320546007909252909120546108979190610a23565b600160a060020a0383166000908152602081815260408083209390935560079052908120555b5b5050565b600160a060020a038083166000908152600160209081526040808320938516835292905220545b92915050565b600454600160a060020a031681565b6303c2670081565b8015156105fb57610000565b5b50565b600160a060020a0383166000908152602081905260408120548290108015906109665750600160a060020a0380851660009081526001602090815260408083203390941683529290522054829010155b801561098b5750600160a060020a038316600090815260208190526040902054828101115b15610a1757600160a060020a0380841660008181526020818152604080832080548801905588851680845281842080548990039055600183528184203390961684529482529182902080548790039055815186815291519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3506001610a1b565b5060005b5b9392505050565b6000828201610a40848210801590610a3b5750838210155b610906565b8091505b5092915050565b600160a060020a033316600090815260208190526040812054829010801590610a8d5750600160a060020a038316600090815260208190526040902054828101115b15610aff57600160a060020a0333811660008181526020818152604080832080548890039055938716808352918490208054870190558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060016105ab565b5060006105ab565b5b929150505600a165627a7a7230582031ad327722684ad0754a3abefefa220e61d836c0a4f14bcb989ebd3a29f86d2500290000000000000000000000003bf541f87056d134e0109be1be92978b26cb09e000000000000000000000000000ec6379d7186193983e90ba58d3cf169f7e4af30000000000000000000000000000000000000000000000000000000058a434b00000000000000000000000000000000000000000000000000000000058c91eb0",
  "constructorArguments": "0000000000000000000000003bf541f87056d134e0109be1be92978b26cb09e000000000000000000000000000ec6379d7186193983e90ba58d3cf169f7e4af30000000000000000000000000000000000000000000000000000000058a434b00000000000000000000000000000000000000000000000000000000058c91eb0"
}