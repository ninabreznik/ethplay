{
  "address": "0x0dfaf19a15be6480b7831ba19e7ed877d5da40ee",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "XPOT",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-02\n*/\n\ncontract Owner {\n    address public owner;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function Owner(address _owner) public {\n        owner = _owner;\n    }\n\n    function changeOwner(address _newOwnerAddr) public onlyOwner {\n        require(_newOwnerAddr != address(0));\n        owner = _newOwnerAddr;\n    }\n}\n\ncontract XPOT is Owner {\n    \n    event Game(uint _game, uint indexed _time);\n\n    event Ticket(\n        address indexed _address,\n        uint indexed _game,\n        uint _number,\n        uint _time\n    );\n    \n    // Game fee.\n    uint8 public fee = 10;\n    // Current game number.\n    uint public game;\n    // Ticket price.\n    uint public ticketPrice = 0.01 ether;\n    // New ticket price.\n    uint public newPrice;\n    // All-time game jackpot.\n    uint public allTimeJackpot = 0;\n    // All-time game players count\n    uint public allTimePlayers = 0;\n    \n    // Game status.\n    bool public isActive = true;\n    // The variable that indicates game status switching.\n    bool public toogleStatus = false;\n    // The array of all games\n    uint[] public games;\n    \n    // Store game jackpot.\n    mapping(uint => uint) jackpot;\n    // Store game players.\n    mapping(uint => address[]) players;\n    \n    // Funds distributor address.\n    address public fundsDistributor;\n\n    /**\n    * @dev Check sender address and compare it to an owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    function XPOT(\n        address distributor\n    ) \n     public Owner(msg.sender)\n    {\n        fundsDistributor = distributor;\n        startGame();\n    }\n\n    function() public payable {\n        buyTicket(address(0));\n    }\n\n    function getPlayedGamePlayers() \n        public\n        view\n        returns (uint)\n    {\n        return getPlayersInGame(game);\n    }\n\n    function getPlayersInGame(uint playedGame) \n        public \n        view\n        returns (uint)\n    {\n        return players[playedGame].length;\n    }\n\n    function getPlayedGameJackpot() \n        public \n        view\n        returns (uint) \n    {\n        return getGameJackpot(game);\n    }\n    \n    function getGameJackpot(uint playedGame) \n        public \n        view \n        returns(uint)\n    {\n        return jackpot[playedGame];\n    }\n    \n    function toogleActive() public onlyOwner() {\n        if (!isActive) {\n            isActive = true;\n        } else {\n            toogleStatus = !toogleStatus;\n        }\n    }\n    \n    function start() public onlyOwner() {\n        if (players[game].length > 0) {\n            pickTheWinner();\n        }\n        startGame();\n    }\n\n    function changeTicketPrice(uint price) \n        public \n        onlyOwner() \n    {\n        newPrice = price;\n    }\n\n\n    /**\n    * @dev Get random number.\n    * @dev Random number calculation depends on block timestamp,\n    * @dev difficulty, number and hash.\n    *\n    * @param min Minimal number.\n    * @param max Maximum number.\n    * @param time Timestamp.\n    * @param difficulty Block difficulty.\n    * @param number Block number.\n    * @param bHash Block hash.\n    */\n    function randomNumber(\n        uint min,\n        uint max,\n        uint time,\n        uint difficulty,\n        uint number,\n        bytes32 bHash\n    ) \n        public \n        pure \n        returns (uint) \n    {\n        min ++;\n        max ++;\n\n        uint random = uint(keccak256(\n            time * \n            difficulty * \n            number *\n            uint(bHash)\n        ))%10 + 1;\n       \n        uint result = uint(keccak256(random))%(min+max)-min;\n        \n        if (result > max) {\n            result = max;\n        }\n        \n        if (result < min) {\n            result = min;\n        }\n        \n        result--;\n\n        return result;\n    }\n    \n    /**\n    * @dev The payable method that accepts ether and adds the player to the game.\n    */\n    function buyTicket(address partner) public payable {\n        require(isActive);\n        require(msg.value == ticketPrice);\n        \n        jackpot[game] += msg.value;\n        \n        uint playerNumber =  players[game].length;\n        players[game].push(msg.sender);\n\n        emit Ticket(msg.sender, game, playerNumber, now);\n    }\n\n    /**\n    * @dev Start the new game.\n    * @dev Checks ticket price changes, if exists new ticket price the price will be changed.\n    * @dev Checks game status changes, if exists request for changing game status game status \n    * @dev will be changed.\n    */\n    function startGame() internal {\n        require(isActive);\n\n        game = block.number;\n        if (newPrice != 0) {\n            ticketPrice = newPrice;\n            newPrice = 0;\n        }\n        if (toogleStatus) {\n            isActive = !isActive;\n            toogleStatus = false;\n        }\n        emit Game(game, now);\n    }\n\n    /**\n    * @dev Pick the winner.\n    * @dev Check game players, depends on player count provides next logic:\n    * @dev - if in the game is only one player, by game rules the whole jackpot \n    * @dev without commission returns to him.\n    * @dev - if more than one player smart contract randomly selects one player, \n    * @dev calculates commission and after that jackpot transfers to the winner,\n    * @dev commision to founders.\n    */\n    function pickTheWinner() internal {\n        uint winner;\n        uint toPlayer;\n        if (players[game].length == 1) {\n            toPlayer = jackpot[game];\n            players[game][0].transfer(jackpot[game]);\n            winner = 0;\n        } else {\n            winner = randomNumber(\n                0,\n                players[game].length - 1,\n                block.timestamp,\n                block.difficulty,\n                block.number,\n                blockhash(block.number - 1)\n            );\n        \n            uint distribute = jackpot[game] * fee / 100;\n            toPlayer = jackpot[game] - distribute;\n            players[game][winner].transfer(toPlayer);\n            fundsDistributor.transfer(distribute);\n        }\n        \n        allTimeJackpot += toPlayer;\n        allTimePlayers += players[game].length;\n    }\n}",
  "bytecode": "60806040526000805460a060020a60ff021916740a0000000000000000000000000000000000000000178155662386f26fc1000060025560048190556005556006805460ff191660011761ff001916905534801561005c57600080fd5b50604051602080610a4c83398101604052516000805433600160a060020a031991821617909155600a8054909116600160a060020a0383161790556100a86401000000006100ae810204565b50610139565b60065460ff1615156100bf57600080fd5b43600155600354156100d75760038054600255600090555b600654610100900460ff16156100ff576006805460ff81161560ff199091161761ff00191690555b600154604080519182525142917fc1e01725071603d5872b301174fe013f7471bd2a95a627a777cf5ad0df4df720919081900360200190a2565b610904806101486000396000f30060806040526004361061011c5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630d8c1a628114610128578063117a5b901461013d5780631209b1f61461016757806316521a2b1461017c57806322f3e2d4146101945780632ef5c784146101bd5780634630a0ee146101d257806347ddf87e146101ea57806351df9db9146101ff57806374796cc21461021457806374cb55fb1461022c57806385b75b1e1461025d5780638897c1f4146102725780638da5cb5b14610299578063a5f8cdbb146102ae578063a6f9dae1146102c2578063be9a6555146102e3578063c3a151de146102f8578063c3fe3e281461030d578063cf4e593a14610322578063ddca3f4314610337575b6101266000610362565b005b34801561013457600080fd5b5061012661041f565b34801561014957600080fd5b50610155600435610472565b60408051918252519081900360200190f35b34801561017357600080fd5b50610155610491565b34801561018857600080fd5b50610155600435610497565b3480156101a057600080fd5b506101a96104a9565b604080519115158252519081900360200190f35b3480156101c957600080fd5b506101556104b2565b3480156101de57600080fd5b506101266004356104b8565b3480156101f657600080fd5b506101556104d4565b34801561020b57600080fd5b506101556104da565b34801561022057600080fd5b506101556004356104e0565b34801561023857600080fd5b506102416104f2565b60408051600160a060020a039092168252519081900360200190f35b34801561026957600080fd5b506101a9610501565b34801561027e57600080fd5b5061015560043560243560443560643560843560a43561050f565b3480156102a557600080fd5b5061024161058b565b610126600160a060020a0360043516610362565b3480156102ce57600080fd5b50610126600160a060020a036004351661059a565b3480156102ef57600080fd5b506101266105f5565b34801561030457600080fd5b50610155610634565b34801561031957600080fd5b50610155610646565b34801561032e57600080fd5b5061015561064c565b34801561034357600080fd5b5061034c610659565b6040805160ff9092168252519081900360200190f35b60065460009060ff16151561037657600080fd5b600254341461038457600080fd5b50600180546000908152600860209081526040808320805434019055835483526009825280832080548086018255908452928290208301805473ffffffffffffffffffffffffffffffffffffffff19163390811790915593548151848152429381019390935281519394909390927fcc0ff04ae3b71c72a35f6f90c97e68b82f9e63de7c7738ff9155e41a1bd874c192908290030190a35050565b600054600160a060020a0316331461043657600080fd5b60065460ff161515610454576006805460ff19166001179055610470565b6006805461ff001981166101009182900460ff16159091021790555b565b600780548290811061048057fe5b600091825260209091200154905081565b60025481565b60009081526008602052604090205490565b60065460ff1681565b60055481565b600054600160a060020a031633146104cf57600080fd5b600355565b60045481565b60035481565b60009081526009602052604090205490565b600a54600160a060020a031681565b600654610100900460ff1681565b60408051848602840283028152815160209181900382018120600a90066001908101808352935191829003909201902088820198918801976000939284928b9260029201919091019081151561056157fe5b06039050878111156105705750865b8881101561057b5750875b6000190198975050505050505050565b600054600160a060020a031681565b600054600160a060020a031633146105b157600080fd5b600160a060020a03811615156105c657600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a0316331461060c57600080fd5b600154600090815260096020526040812054111561062c5761062c61067a565b61047061084d565b60006106416001546104e0565b905090565b60015481565b6000610641600154610497565b60005474010000000000000000000000000000000000000000900460ff1681565b60018054600090815260096020526040812054909182918291141561071f57600154600090815260086020908152604080832054600990925282208054919450919081106106c457fe5b6000918252602080832090910154600154835260089091526040808320549051600160a060020a039092169281156108fc029290818181858888f19350505050158015610715573d6000803e3d6000fd5b5060009250610825565b61074d600060016009600060015481526020019081526020016000208054905003424443600143034061050f565b600080546001548252600860209081526040808420546009909252909220805493965060647401000000000000000000000000000000000000000090920460ff1683029190910491829003945090925090849081106107a857fe5b6000918252602082200154604051600160a060020a039091169184156108fc02918591818181858888f193505050501580156107e8573d6000803e3d6000fd5b50600a54604051600160a060020a039091169082156108fc029083906000818181858888f19350505050158015610823573d6000803e3d6000fd5b505b5060048054909101905550600154600090815260096020526040902054600580549091019055565b60065460ff16151561085e57600080fd5b43600155600354156108765760038054600255600090555b600654610100900460ff161561089e576006805460ff81161560ff199091161761ff00191690555b600154604080519182525142917fc1e01725071603d5872b301174fe013f7471bd2a95a627a777cf5ad0df4df720919081900360200190a25600a165627a7a723058204bbeb8452b97e0565180589ed1f33ebc7bc71caf33638205c3c4937de5d3f8380029000000000000000000000000c675686bbf9f058b3bdf65df21220da47ff3a75d",
  "constructorArguments": "000000000000000000000000c675686bbf9f058b3bdf65df21220da47ff3a75d"
}