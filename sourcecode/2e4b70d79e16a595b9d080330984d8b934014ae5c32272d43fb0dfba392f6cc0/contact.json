{
  "address": "0xbed908dc39c34125314f2141079b5ffadb270300",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DroneTokenSale",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-30\n*/\n\npragma solidity 0.4.21;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ninterface Token {\n    function transfer(address _to, uint256 _amount) public returns (bool success);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function decimals()public view returns (uint8);\n    function burnAllTokens() public;\n}\n\n/**\n * @title Vault\n * @dev This contract is used for storing funds while a crowdsale\n * is in progress. Funds will be transferred to owner once sale ends\n */\ncontract Vault is Ownable {\n    using SafeMath for uint256;\n\n    enum State { Active, Refunding, Withdraw }\n\n    mapping (address => uint256) public deposited;\n    address public wallet;\n    State public state;\n\n    event Withdraw();\n    event RefundsEnabled();\n    event Withdrawn(address _wallet);\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\n      \n    function Vault(address _wallet) public {\n        require(_wallet != address(0));\n        wallet = _wallet;\n        state = State.Active;\n    }\n\n    function deposit(address investor) public onlyOwner  payable{\n        \n        require(state == State.Active || state == State.Withdraw);//allowing to deposit even in withdraw state since withdraw state will be started once totalFunding reaches 10,000 ether\n        deposited[investor] = deposited[investor].add(msg.value);\n        \n    }\n\n    function activateWithdrawal() public onlyOwner {\n        if(state == State.Active){\n          state = State.Withdraw;\n          emit Withdraw();\n        }\n    }\n    \n    function activateRefund()public onlyOwner {\n        require(state == State.Active);\n        state = State.Refunding;\n        emit RefundsEnabled();\n    }\n    \n    function withdrawToWallet() onlyOwner public{\n    require(state == State.Withdraw);\n    wallet.transfer(this.balance);\n    emit Withdrawn(wallet);\n  }\n  \n   function refund(address investor) public {\n    require(state == State.Refunding);\n    uint256 depositedValue = deposited[investor];\n    deposited[investor] = 0;\n    investor.transfer(depositedValue);\n    emit Refunded(investor, depositedValue);\n  }\n  \n function isRefunding()public onlyOwner view returns(bool) {\n     return (state == State.Refunding);\n }\n}\n\n\ncontract DroneTokenSale is Ownable{\n      using SafeMath for uint256;\n      \n      //Token to be used for this sale\n      Token public token;\n      \n      //All funds will go into this vault\n      Vault public vault;\n  \n      //rate of token in ether 1eth = 20000 DRONE\n      uint256 public rate = 20000;\n      /*\n      *There will be 4 phases\n      * 1. Pre-sale\n      * 2. ICO Phase 1\n      * 3. ICO Phase 2\n      * 4. ICO Phase 3\n      */\n      struct PhaseInfo{\n          uint256 hardcap;\n          uint256 startTime;\n          uint256 endTime;\n          uint8 [3] bonusPercentages;//3 type of bonuses above 100eth, 10-100ether, less than 10ether\n          uint256 weiRaised;\n      }\n      \n      //info of each phase\n      PhaseInfo[] public phases;\n      \n      //Total funding\n      uint256 public totalFunding;\n      \n      //total tokesn available for sale\n      uint256 tokensAvailableForSale = 3000000000;\n      \n      \n      uint8 public noOfPhases;\n      \n      \n      //Keep track of whether contract is up or not\n      bool public contractUp;\n      \n      //Keep track of whether the sale has ended or not\n      bool public saleEnded;\n      \n      //Event to trigger Sale stop\n      event SaleStopped(address _owner, uint256 time);\n      \n      //Event to trigger normal flow of sale end\n      event Finalized(address _owner, uint256 time);\n    \n     /**\n     * event for token purchase logging\n     * @param purchaser who paid for the tokens\n     * @param beneficiary who got the tokens\n     * @param value weis paid for purchase\n     * @param amount amount of tokens purchased\n     */\n     event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n    \n    //modifiers    \n    modifier _contractUp(){\n        require(contractUp);\n        _;\n    }\n  \n     modifier nonZeroAddress(address _to) {\n        require(_to != address(0));\n        _;\n    }\n    \n    modifier minEthContribution() {\n        require(msg.value >= 0.1 ether);\n        _;\n    }\n    \n    modifier _saleEnded() {\n        require(saleEnded);\n        _;\n    }\n    \n    modifier _saleNotEnded() {\n        require(!saleEnded);\n        _;\n    }\n  \n    \n    /**\n    *     @dev Check if sale contract has enough tokens on its account balance \n    *     to reward all possible participations within sale period\n    */\n    function powerUpContract() external onlyOwner {\n        // Contract should not be powered up previously\n        require(!contractUp);\n\n        // Contract should have enough DRONE credits\n        require(token.balanceOf(this) >= tokensAvailableForSale);\n        \n        \n      \n        //activate the sale process\n        contractUp = true;\n    }\n    \n    //for Emergency/Hard stop of the sale\n    function emergencyStop() external onlyOwner _contractUp _saleNotEnded{\n        saleEnded = true;    \n        \n     if(totalFunding < 10000 ether){\n            vault.activateRefund();\n        }\n        else{\n            vault.activateWithdrawal();\n        }\n        \n      emit SaleStopped(msg.sender, now);\n    }\n    \n    /**\n   * @dev Must be called after sale ends, to do some extra finalization\n   * work. Calls the contract's finalization function.\n   */\n    function finalize()public onlyOwner _contractUp _saleNotEnded{\n        require(saleTimeOver());\n        \n        saleEnded = true;\n        \n        if(totalFunding < 10000 ether){\n            vault.activateRefund();\n        }\n        else{\n            vault.activateWithdrawal();\n        }\n       \n       emit Finalized(msg.sender, now);\n    }\n    \n      // @return true if all the tiers has been ended\n  function saleTimeOver() public view returns (bool) {\n    \n    return now > phases[noOfPhases-1].endTime;\n  }\n  \n    //if crowdsales is over, the money rasied should be transferred to the wallet address\n  function withdrawFunds() public onlyOwner{\n  \n      vault.withdrawToWallet();\n  }\n  \n  //method to refund money\n  function getRefund()public {\n      \n      vault.refund(msg.sender);\n  }\n  \n  /**\n  * @dev Can be called only once. The method to allow owner to set tier information\n  * @param _noOfPhases The integer to set number of tiers\n  * @param _startTimes The array containing start time of each tier\n  * @param _endTimes The array containing end time of each tier\n  * @param _hardCaps The array containing hard cap for each tier\n  * @param _bonusPercentages The array containing bonus percentage for each tier\n  * The arrays should be in sync with each other. For each index 0 for each of the array should contain info about Tier 1, similarly for Tier2, 3 and 4 .\n  * Sales hard cap will be the hard cap of last tier\n  */\n  function setTiersInfo(uint8 _noOfPhases, uint256[] _startTimes, uint256[] _endTimes, uint256[] _hardCaps, uint8[3][4] _bonusPercentages)private {\n    \n    \n    require(_noOfPhases==4);\n    \n    //Each array should contain info about each tier\n    require(_startTimes.length == _noOfPhases);\n    require(_endTimes.length==_noOfPhases);\n    require(_hardCaps.length==_noOfPhases);\n    require(_bonusPercentages.length==_noOfPhases);\n    \n    noOfPhases = _noOfPhases;\n    \n    for(uint8 i=0;i<_noOfPhases;i++){\n        require(_hardCaps[i]>0);\n        require(_endTimes[i]>_startTimes[i]);\n        if(i>0){\n            \n        \n            \n            //start time of this tier should be greater than previous tier\n            require(_startTimes[i] > _endTimes[i-1]);\n            \n            phases.push(PhaseInfo({\n                hardcap:_hardCaps[i],\n                startTime:_startTimes[i],\n                endTime:_endTimes[i],\n                bonusPercentages:_bonusPercentages[i],\n                weiRaised:0\n            }));\n        }\n        else{\n            //start time of tier1 should be greater than current time\n            require(_startTimes[i]>now);\n          \n            phases.push(PhaseInfo({\n                hardcap:_hardCaps[i],\n                startTime:_startTimes[i],\n                endTime:_endTimes[i],\n                bonusPercentages:_bonusPercentages[i],\n                weiRaised:0\n            }));\n        }\n    }\n  }\n  \n  \n    /**\n    * @dev Constructor method\n    * @param _tokenToBeUsed Address of the token to be used for Sales\n    * @param _wallet Address of the wallet which will receive the collected funds\n    */  \n    function DroneTokenSale(address _tokenToBeUsed, address _wallet)public nonZeroAddress(_tokenToBeUsed) nonZeroAddress(_wallet){\n        \n        token = Token(_tokenToBeUsed);\n        vault = new Vault(_wallet);\n        \n        uint256[] memory startTimes = new uint256[](4);\n        uint256[] memory endTimes = new uint256[](4);\n        uint256[] memory hardCaps = new uint256[](4);\n        uint8[3] [4] memory bonusPercentages;\n        \n        //pre-sales\n        startTimes[0] = 1522321200; //MARCH 29, 2018 11:00 AM GMT\n        endTimes[0] = 1523790000; //APRIL 15, 2018 11:00 AM GMT\n        hardCaps[0] = 10000 ether;\n        bonusPercentages[0][0] = 35;\n        bonusPercentages[0][1] = 30;\n        bonusPercentages[0][2] = 25;\n        \n        //phase-1\n        startTimes[1] = 1525172460; //MAY 01, 2018 11:01 AM GMT \n        endTimes[1] = 1526382000; //MAY 15, 2018 11:00 AM GMT\n        hardCaps[1] = 20000 ether;\n        bonusPercentages[1][0] = 25;// above 100 ether\n        bonusPercentages[1][1] = 20;// 10<=x<=100\n        bonusPercentages[1][2] = 15;// less than 10 ether\n        \n        \n        //phase-2\n        startTimes[2] = 1526382060; //MAY 15, 2018 11:01 AM GMT\n        endTimes[2] = 1527850800; //JUNE 01, 2018 11:00 AM GMT\n        hardCaps[2] = 30000 ether;\n        bonusPercentages[2][0] = 15;\n        bonusPercentages[2][1] = 10;\n        bonusPercentages[2][2] = 5;\n        \n        //phase-3\n        startTimes[3] = 1527850860; //JUNE 01, 2018 11:01 AM GMT\n        endTimes[3] = 1533034800; //JULY 31, 2018 11:OO AM GMT\n        hardCaps[3] = 75000 ether;\n        bonusPercentages[3][0] = 0;\n        bonusPercentages[3][1] = 0;\n        bonusPercentages[3][2] = 0;\n\n        setTiersInfo(4, startTimes, endTimes, hardCaps, bonusPercentages);\n        \n    }\n    \n\n   //Fallback function used to buytokens\n   function()public payable{\n       buyTokens(msg.sender);\n   }\n   \n   /**\n   * @dev Low level token purchase function\n   * @param beneficiary The address who will receive the tokens for this transaction\n   */\n   function buyTokens(address beneficiary)public _contractUp _saleNotEnded minEthContribution nonZeroAddress(beneficiary) payable returns(bool){\n       \n       int8 currentPhaseIndex = getCurrentlyRunningPhase();\n       assert(currentPhaseIndex>=0);\n       \n        // recheck this for storage and memory\n       PhaseInfo storage currentlyRunningPhase = phases[uint256(currentPhaseIndex)];\n       \n       \n       uint256 weiAmount = msg.value;\n\n       //Check hard cap for this phase has not been reached\n       require(weiAmount.add(currentlyRunningPhase.weiRaised) <= currentlyRunningPhase.hardcap);\n       \n       \n       uint256 tokens = weiAmount.mul(rate).div(1000000000000000000);//considering decimal places to be zero for token\n       \n       uint256 bonusedTokens = applyBonus(tokens, currentlyRunningPhase.bonusPercentages, weiAmount);\n       \n      \n       \n      \n       totalFunding = totalFunding.add(weiAmount);\n       \n       currentlyRunningPhase.weiRaised = currentlyRunningPhase.weiRaised.add(weiAmount);\n       \n       vault.deposit.value(msg.value)(msg.sender);\n       \n       token.transfer(beneficiary, bonusedTokens);\n       \n       emit TokenPurchase(msg.sender, beneficiary, weiAmount, bonusedTokens);\n\n       return true;\n       \n   }\n   \n    /**\n    *@dev Method to calculate bonus for the user as per currently running phase and contribution by the user\n    * @param tokens Total tokens purchased by the user\n    * @param percentages Array of bonus percentages for the phase as per ethers sent\n    * @param weiSent Amount of ethers(in form of wei) sent by the user\n    */\n     function applyBonus(uint256 tokens, uint8 [3]percentages, uint256 weiSent) private pure returns  (uint256) {\n         \n         uint256 tokensToAdd = 0;\n         \n         if(weiSent<10 ether){\n             tokensToAdd = tokens.mul(percentages[2]).div(100);\n         }\n         else if(weiSent>=10 ether && weiSent<=100 ether){\n              tokensToAdd = tokens.mul(percentages[1]).div(100);\n         }\n         \n         else{\n              tokensToAdd = tokens.mul(percentages[0]).div(100);\n         }\n        \n        return tokens.add(tokensToAdd);\n    }\n    \n   /**\n    * @dev returns the currently running tier index as per time\n    * Return -1 if no tier is running currently\n    * */\n   function getCurrentlyRunningPhase()public view returns(int8){\n      for(uint8 i=0;i<noOfPhases;i++){\n          if(now>=phases[i].startTime && now<=phases[i].endTime){\n              return int8(i);\n          }\n      }   \n      return -1;\n   }\n   \n   \n   \n   /**\n   * @dev Get functing info of user/address. It will return how much funding the user has made in terms of wei\n   */\n   function getFundingInfoForUser(address _user)public view nonZeroAddress(_user) returns(uint256){\n       return vault.deposited(_user);\n   }\n   \n   /**\n   *@dev Method to check whether refund process has been initiated or not by the contract.\n   */\n   function isRefunding()public view returns(bool) {\n       return vault.isRefunding();\n   }\n   \n   /**\n   *@dev Method to burn all remanining tokens left with the sales contract after the sale has ended\n   */\n   function burnRemainingTokens()public onlyOwner _contractUp _saleEnded {\n       \n       token.burnAllTokens();\n   }\n   \n   /**\n   * @dev Method to activate withdrawal of funds even in between of sale. The WIthdrawal will only be activate iff totalFunding has reached 10,000 ether\n   */\n   function activateWithdrawal()public onlyOwner _saleNotEnded _contractUp {\n       \n       require(totalFunding >= 10000 ether);\n       vault.activateWithdrawal();\n       \n   }\n      \n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getFundingInfoForUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentlyRunningPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phases\",\"outputs\":[{\"name\":\"hardcap\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"weiRaised\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"powerUpContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyStop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnRemainingTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleTimeOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRefunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"noOfPhases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractUp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenToBeUsed\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SaleStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "6060604052614e2060035563b2d05e0060065534156200001e57600080fd5b60405160408062003858833981016040528080519060200190919080519060200190919050506200004e62000a88565b6200005862000a88565b6200006262000a88565b6200006c62000a9c565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515620000ea57600080fd5b85600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156200012857600080fd5b87600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550866200017462000ace565b808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604051809103906000f0801515620001c157600080fd5b600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506004604051805910620002115750595b908082528060200260200182016040525095506004604051805910620002345750595b908082528060200260200182016040525094506004604051805910620002575750595b90808252806020026020018201604052509350635abcc7308660008151811015156200027f57fe5b9060200190602002018181525050635ad330b0856000815181101515620002a257fe5b906020019060200201818152505069021e19e0c9bab2400000846000815181101515620002cb57fe5b90602001906020020181815250506023836000600481101515620002eb57fe5b60200201516000600381101515620002ff57fe5b602002019060ff16908160ff1681525050601e8360006004811015156200032257fe5b602002015160016003811015156200033657fe5b602002019060ff16908160ff168152505060198360006004811015156200035957fe5b602002015160026003811015156200036d57fe5b602002019060ff16908160ff1681525050635ae848ec8660018151811015156200039357fe5b9060200190602002018181525050635afabdb0856001815181101515620003b657fe5b906020019060200201818152505069043c33c1937564800000846001815181101515620003df57fe5b90602001906020020181815250506019836001600481101515620003ff57fe5b602002015160006003811015156200041357fe5b602002019060ff16908160ff168152505060148360016004811015156200043657fe5b602002015160016003811015156200044a57fe5b602002019060ff16908160ff1681525050600f8360016004811015156200046d57fe5b602002015160026003811015156200048157fe5b602002019060ff16908160ff1681525050635afabdec866002815181101515620004a757fe5b9060200190602002018181525050635b112730856002815181101515620004ca57fe5b906020019060200201818152505069065a4da25d3016c00000846002815181101515620004f357fe5b9060200190602002018181525050600f8360026004811015156200051357fe5b602002015160006003811015156200052757fe5b602002019060ff16908160ff1681525050600a8360026004811015156200054a57fe5b602002015160016003811015156200055e57fe5b602002019060ff16908160ff168152505060058360026004811015156200058157fe5b602002015160026003811015156200059557fe5b602002019060ff16908160ff1681525050635b11276c866003815181101515620005bb57fe5b9060200190602002018181525050635b604130856003815181101515620005de57fe5b9060200190602002018181525050690fe1c215e8f838e000008460038151811015156200060757fe5b906020019060200201818152505060008360036004811015156200062757fe5b602002015160006003811015156200063b57fe5b602002019060ff16908160ff168152505060008360036004811015156200065e57fe5b602002015160016003811015156200067257fe5b602002019060ff16908160ff168152505060008360036004811015156200069557fe5b60200201516002600381101515620006a957fe5b602002019060ff16908160ff1681525050620006de600487878787620006ec6401000000000262001a49176401000000009004565b505050505050505062000c6f565b600060048660ff161415156200070157600080fd5b8560ff1685511415156200071457600080fd5b8560ff1684511415156200072757600080fd5b8560ff1683511415156200073a57600080fd5b8560ff1660041415156200074d57600080fd5b85600760006101000a81548160ff021916908360ff160217905550600090505b8560ff168160ff16101562000a80576000838260ff168151811015156200079057fe5b90602001906020020151111515620007a757600080fd5b848160ff16815181101515620007b957fe5b90602001906020020151848260ff16815181101515620007d557fe5b90602001906020020151111515620007ec57600080fd5b60008160ff1611156200094757836001820360ff168151811015156200080e57fe5b90602001906020020151858260ff168151811015156200082a57fe5b906020019060200201511115156200084157600080fd5b6004805480600101828162000857919062000adf565b9160005260206000209060050201600060a060405190810160405280878660ff168151811015156200088557fe5b906020019060200201518152602001898660ff16815181101515620008a657fe5b906020019060200201518152602001888660ff16815181101515620008c757fe5b906020019060200201518152602001868660ff16600481101515620008e857fe5b60200201518152602001600081525090919091506000820151816000015560208201518160010155604082015181600201556060820151816003019060036200093392919062000b14565b506080820151816004015550505062000a72565b42858260ff168151811015156200095a57fe5b906020019060200201511115156200097157600080fd5b6004805480600101828162000987919062000adf565b9160005260206000209060050201600060a060405190810160405280878660ff16815181101515620009b557fe5b906020019060200201518152602001898660ff16815181101515620009d657fe5b906020019060200201518152602001888660ff16815181101515620009f757fe5b906020019060200201518152602001868660ff1660048110151562000a1857fe5b602002015181526020016000815250909190915060008201518160000155602082015181600101556040820151816002015560608201518160030190600362000a6392919062000b14565b50608082015181600401555050505b80806001019150506200076d565b505050505050565b602060405190810160405280600081525090565b610180604051908101604052806004905b62000ab762000bb5565b81526020019060019003908162000aad5790505090565b604051610c998062002bbf83390190565b81548183558181151162000b0f5760050281600502836000526020600020918201910162000b0e919062000be1565b5b505050565b826003601f0160209004810192821562000ba25791602002820160005b8382111562000b7157835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030262000b31565b801562000ba05782816101000a81549060ff021916905560010160208160000104928301926001030262000b71565b505b50905062000bb1919062000c35565b5090565b6060604051908101604052806003905b600060ff1681526020019060019003908162000bc55790505090565b62000c3291905b8082111562000c2e576000808201600090556001820160009055600282016000905560038201600062000c1c919062000c68565b60048201600090555060050162000be8565b5090565b90565b62000c6591905b8082111562000c6157600081816101000a81549060ff02191690555060010162000c3c565b5090565b90565b5060009055565b611f408062000c7f6000396000f300606060405260043610610128576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306d145c9146101345780631b35f56f1461018157806324600fc3146101b05780632c4e722e146101c55780632e37eef6146101ee5780634bb278f31461023a5780635b389dbb1461024f57806363a599a41461026457806383408d73146102795780638b6932f11461028e5780638da5cb5b146102bb5780638fe91976146103105780639b8906ae146103255780639d6fb02014610352578063a0edc2041461037f578063ac270c37146103ae578063b2d5ae44146103db578063ec8ac4d8146103f0578063f2fde38b14610436578063fbfa77cf1461046f578063fc0c546a146104c4578063fe47a8a714610519575b61013133610542565b50005b341561013f57600080fd5b61016b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610940565b6040518082815260200191505060405180910390f35b341561018c57600080fd5b610194610a5a565b604051808260000b60000b815260200191505060405180910390f35b34156101bb57600080fd5b6101c3610b17565b005b34156101d057600080fd5b6101d8610c09565b6040518082815260200191505060405180910390f35b34156101f957600080fd5b61020f6004808035906020019091905050610c0f565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b341561024557600080fd5b61024d610c4e565b005b341561025a57600080fd5b610262610ebf565b005b341561026f57600080fd5b610277611036565b005b341561028457600080fd5b61028c611294565b005b341561029957600080fd5b6102a16113bc565b604051808215151515815260200191505060405180910390f35b34156102c657600080fd5b6102ce6113fb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561031b57600080fd5b610323611420565b005b341561033057600080fd5b610338611564565b604051808215151515815260200191505060405180910390f35b341561035d57600080fd5b610365611577565b604051808215151515815260200191505060405180910390f35b341561038a57600080fd5b61039261161a565b604051808260ff1660ff16815260200191505060405180910390f35b34156103b957600080fd5b6103c161162d565b604051808215151515815260200191505060405180910390f35b34156103e657600080fd5b6103ee611640565b005b61041c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610542565b604051808215151515815260200191505060405180910390f35b341561044157600080fd5b61046d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061170e565b005b341561047a57600080fd5b610482611863565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104cf57600080fd5b6104d7611889565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561052457600080fd5b61052c6118af565b6040518082815260200191505060405180910390f35b600080600080600080600760019054906101000a900460ff16151561056657600080fd5b600760029054906101000a900460ff1615151561058257600080fd5b67016345785d8a0000341015151561059957600080fd5b86600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156105d657600080fd5b6105de610a5a565b955060008660000b121515156105f057fe5b60048660000b81548110151561060257fe5b9060005260206000209060050201945034935084600001546106318660040154866118b590919063ffffffff16565b1115151561063e57600080fd5b61066d670de0b6b3a764000061065f600354876118d390919063ffffffff16565b61190e90919063ffffffff16565b92506106df83866003016003806020026040519081016040528092919082600380156106d4576020028201916000905b82829054906101000a900460ff1660ff168152602001906001019060208260000104928301926001038202915080841161069d5790505b505050505086611929565b91506106f6846005546118b590919063ffffffff16565b6005819055506107138486600401546118b590919063ffffffff16565b8560040181905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f340fa0134336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506000604051808303818588803b15156107d757600080fd5b5af115156107e457600080fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156108ac57600080fd5b5af115156108b957600080fd5b50505060405180519050508773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188685604051808381526020018281526020019250505060405180910390a360019650505050505050919050565b600081600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561097f57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cb13cddb846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610a3b57600080fd5b5af11515610a4857600080fd5b50505060405180519050915050919050565b600080600090505b600760009054906101000a900460ff1660ff168160ff161015610aef5760048160ff16815481101515610a9157fe5b9060005260206000209060050201600101544210158015610ad5575060048160ff16815481101515610abf57fe5b9060005260206000209060050201600201544211155b15610ae257809150610b13565b8080600101915050610a62565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91505b5090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b7257600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166303ba27f66040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1515610bf757600080fd5b5af11515610c0457600080fd5b505050565b60035481565b600481815481101515610c1e57fe5b90600052602060002090600502016000915090508060000154908060010154908060020154908060040154905084565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ca957600080fd5b600760019054906101000a900460ff161515610cc457600080fd5b600760029054906101000a900460ff16151515610ce057600080fd5b610ce86113bc565b1515610cf357600080fd5b6001600760026101000a81548160ff02191690831515021790555069021e19e0c9bab24000006005541015610dbc57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633cdb3aa66040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1515610da757600080fd5b5af11515610db457600080fd5b505050610e52565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe919766040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1515610e4157600080fd5b5af11515610e4e57600080fd5b5050505b7f66b6851664a82efe6b871e434faba2b11421d2dad65eb71a344ae76cca8a2b863342604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f1a57600080fd5b600760019054906101000a900460ff16151515610f3657600080fd5b600654600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610ff557600080fd5b5af1151561100257600080fd5b505050604051805190501015151561101957600080fd5b6001600760016101000a81548160ff021916908315150217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561109157600080fd5b600760019054906101000a900460ff1615156110ac57600080fd5b600760029054906101000a900460ff161515156110c857600080fd5b6001600760026101000a81548160ff02191690831515021790555069021e19e0c9bab2400000600554101561119157600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633cdb3aa66040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b151561117c57600080fd5b5af1151561118957600080fd5b505050611227565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe919766040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b151561121657600080fd5b5af1151561122357600080fd5b5050505b7f4898556e3bd8b06263e50e938f30f736c1fd2030390474dd6bc0b28d8c5450373342604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112ef57600080fd5b600760019054906101000a900460ff16151561130a57600080fd5b600760029054906101000a900460ff16151561132557600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c17e2aa16040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15156113aa57600080fd5b5af115156113b757600080fd5b505050565b600060046001600760009054906101000a900460ff160360ff168154811015156113e257fe5b9060005260206000209060050201600201544211905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561147b57600080fd5b600760029054906101000a900460ff1615151561149757600080fd5b600760019054906101000a900460ff1615156114b257600080fd5b69021e19e0c9bab2400000600554101515156114cd57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe919766040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b151561155257600080fd5b5af1151561155f57600080fd5b505050565b600760029054906101000a900460ff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639d6fb0206040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156115fe57600080fd5b5af1151561160b57600080fd5b50505060405180519050905090565b600760009054906101000a900460ff1681565b600760019054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa89401a336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15156116fc57600080fd5b5af1151561170957600080fd5b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561176957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156117a557600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b60008082840190508381101515156118c957fe5b8091505092915050565b60008060008414156118e85760009150611907565b82840290508284828115156118f957fe5b0414151561190357fe5b8091505b5092915050565b600080828481151561191c57fe5b0490508091505092915050565b60008060009050678ac7230489e800008310156119835761197c606461196e86600260038110151561195757fe5b602002015160ff16886118d390919063ffffffff16565b61190e90919063ffffffff16565b9050611a2c565b678ac7230489e8000083101580156119a4575068056bc75e2d631000008311155b156119ec576119e560646119d78660016003811015156119c057fe5b602002015160ff16886118d390919063ffffffff16565b61190e90919063ffffffff16565b9050611a2b565b611a286064611a1a866000600381101515611a0357fe5b602002015160ff16886118d390919063ffffffff16565b61190e90919063ffffffff16565b90505b5b611a3f81866118b590919063ffffffff16565b9150509392505050565b600060048660ff16141515611a5d57600080fd5b8560ff168551141515611a6f57600080fd5b8560ff168451141515611a8157600080fd5b8560ff168351141515611a9357600080fd5b8560ff166004141515611aa557600080fd5b85600760006101000a81548160ff021916908360ff160217905550600090505b8560ff168160ff161015611dba576000838260ff16815181101515611ae657fe5b90602001906020020151111515611afc57600080fd5b848160ff16815181101515611b0d57fe5b90602001906020020151848260ff16815181101515611b2857fe5b90602001906020020151111515611b3e57600080fd5b60008160ff161115611c8c57836001820360ff16815181101515611b5e57fe5b90602001906020020151858260ff16815181101515611b7957fe5b90602001906020020151111515611b8f57600080fd5b60048054806001018281611ba39190611dc2565b9160005260206000209060050201600060a060405190810160405280878660ff16815181101515611bd057fe5b906020019060200201518152602001898660ff16815181101515611bf057fe5b906020019060200201518152602001888660ff16815181101515611c1057fe5b906020019060200201518152602001868660ff16600481101515611c3057fe5b6020020151815260200160008152509091909150600082015181600001556020820151816001015560408201518160020155606082015181600301906003611c79929190611df4565b5060808201518160040155505050611dad565b42858260ff16815181101515611c9e57fe5b90602001906020020151111515611cb457600080fd5b60048054806001018281611cc89190611dc2565b9160005260206000209060050201600060a060405190810160405280878660ff16815181101515611cf557fe5b906020019060200201518152602001898660ff16815181101515611d1557fe5b906020019060200201518152602001888660ff16815181101515611d3557fe5b906020019060200201518152602001868660ff16600481101515611d5557fe5b6020020151815260200160008152509091909150600082015181600001556020820151816001015560408201518160020155606082015181600301906003611d9e929190611df4565b50608082015181600401555050505b8080600101915050611ac5565b505050505050565b815481835581811511611def57600502816005028360005260206000209182019101611dee9190611e8e565b5b505050565b826003601f01602090048101928215611e7d5791602002820160005b83821115611e4e57835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302611e10565b8015611e7b5782816101000a81549060ff0219169055600101602081600001049283019260010302611e4e565b505b509050611e8a9190611edd565b5090565b611eda91905b80821115611ed65760008082016000905560018201600090556002820160009055600382016000611ec59190611f0d565b600482016000905550600501611e94565b5090565b90565b611f0a91905b80821115611f0657600081816101000a81549060ff021916905550600101611ee3565b5090565b90565b50600090555600a165627a7a72305820a5892db55aa1fe03e661bf119df13079329d9473697a874b15754480c42ca9e000296060604052341561000f57600080fd5b604051602080610c9983398101604052808051906020019091905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156100a757600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260146101000a81548160ff0219169083600281111561010757fe5b021790555050610b7d8061011c6000396000f3006060604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303ba27f6146100b45780633cdb3aa6146100c9578063521eb273146100de5780638da5cb5b146101335780638fe91976146101885780639d6fb0201461019d578063c19d93fb146101ca578063cb13cddb14610201578063f2fde38b1461024e578063f340fa0114610287578063fa89401a146102b5575b600080fd5b34156100bf57600080fd5b6100c76102ee565b005b34156100d457600080fd5b6100dc61047c565b005b34156100e957600080fd5b6100f161055d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561013e57600080fd5b610146610583565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561019357600080fd5b61019b6105a8565b005b34156101a857600080fd5b6101b0610683565b604051808215151515815260200191505060405180910390f35b34156101d557600080fd5b6101dd61070e565b604051808260028111156101ed57fe5b60ff16815260200191505060405180910390f35b341561020c57600080fd5b610238600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610721565b6040518082815260200191505060405180910390f35b341561025957600080fd5b610285600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610739565b005b6102b3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061088e565b005b34156102c057600080fd5b6102ec600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506109e4565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561034957600080fd5b60028081111561035557fe5b600260149054906101000a900460ff16600281111561037057fe5b14151561037c57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015156103f557600080fd5b7ff45a04d08a70caa7eb4b747571305559ad9fdf4a093afd41506b35c8a306fa94600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104d757600080fd5b600060028111156104e457fe5b600260149054906101000a900460ff1660028111156104ff57fe5b14151561050b57600080fd5b6001600260146101000a81548160ff0219169083600281111561052a57fe5b02179055507f599d8e5a83cffb867d051598c4d70e805d59802d8081c1c7d6dffc5b6aca2b8960405160405180910390a1565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561060357600080fd5b6000600281111561061057fe5b600260149054906101000a900460ff16600281111561062b57fe5b14156106815760028060146101000a81548160ff0219169083600281111561064f57fe5b02179055507f57ea89b6814fccbbe8728fa89cc8e6b5477e559b2a34e946e105b11112e94b5860405160405180910390a15b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106e057600080fd5b600160028111156106ed57fe5b600260149054906101000a900460ff16600281111561070857fe5b14905090565b600260149054906101000a900460ff1681565b60016020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561079457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156107d057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108e957600080fd5b600060028111156108f657fe5b600260149054906101000a900460ff16600281111561091157fe5b1480610941575060028081111561092457fe5b600260149054906101000a900460ff16600281111561093f57fe5b145b151561094c57600080fd5b61099e34600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b3390919063ffffffff16565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b6000600160028111156109f357fe5b600260149054906101000a900460ff166002811115610a0e57fe5b141515610a1a57600080fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515610ae157600080fd5b8173ffffffffffffffffffffffffffffffffffffffff167fd7dee2702d63ad89917b6a4da9981c90c4d24f8c2bdfd64c604ecae57d8d0651826040518082815260200191505060405180910390a25050565b6000808284019050838110151515610b4757fe5b80915050929150505600a165627a7a72305820fb9d05444ee352b17d378c8503b586f7d72e675f40961307df8163a6147cb1be0029000000000000000000000000131f193692b5cce8c87d12ff4f7aa1d4e1668f1e000000000000000000000000f4d3f4032db05fd863fa21edb1013b346392e9a5",
  "constructorArguments": "000000000000000000000000131f193692b5cce8c87d12ff4f7aa1d4e1668f1e000000000000000000000000f4d3f4032db05fd863fa21edb1013b346392e9a5"
}