{
  "address": "0xd7afbf5141a7f1d6b0473175f7a6b0a7954ed3d2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoEngineer",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-15\n*/\n\npragma solidity ^0.4.25;\n\n/*\n* CryptoMiningWar - Blockchain-based strategy game\n* Author: InspiGames\n* Website: https://cryptominingwar.github.io/\n*/\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\ncontract PullPayment {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) public payments;\n  uint256 public totalPayments;\n\n  /**\n  * @dev Withdraw accumulated balance, called by payee.\n  */\n  function withdrawPayments() public {\n    address payee = msg.sender;\n    uint256 payment = payments[payee];\n\n    require(payment != 0);\n    require(address(this).balance >= payment);\n\n    totalPayments = totalPayments.sub(payment);\n    payments[payee] = 0;\n\n    payee.transfer(payment);\n  }\n\n  /**\n  * @dev Called by the payer to store the sent amount as credit to be pulled.\n  * @param dest The destination address of the funds.\n  * @param amount The amount to transfer.\n  */\n  function asyncSend(address dest, uint256 amount) internal {\n    payments[dest] = payments[dest].add(amount);\n    totalPayments = totalPayments.add(amount);\n  }\n}\ninterface CryptoMiningWarInterface {\n    function calCurrentCrystals(address /*_addr*/) external view returns(uint256 /*_currentCrystals*/);\n    function subCrystal( address /*_addr*/, uint256 /*_value*/ ) external pure;\n    function fallback() external payable;\n    function isMiningWarContract() external pure returns(bool);\n}\ninterface MiniGameInterface {\n    function isContractMiniGame() external pure returns( bool _isContractMiniGame );\n    function fallback() external payable;\n}\ncontract CryptoEngineer is PullPayment{\n    // engineer info\n\taddress public administrator;\n    uint256 public prizePool = 0;\n    uint256 public numberOfEngineer = 8;\n    uint256 public numberOfBoosts = 5;\n    address public gameSponsor;\n    uint256 public gameSponsorPrice = 0.32 ether;\n    uint256 public VIRUS_MINING_PERIOD = 86400; \n    \n    // mining war game infomation\n    uint256 public CRTSTAL_MINING_PERIOD = 86400;\n    uint256 public BASE_PRICE = 0.01 ether;\n\n    address public miningWarAddress; \n    CryptoMiningWarInterface   public MiningWar;\n    \n    // engineer player information\n    mapping(address => Player) public players;\n    // engineer boost information\n    mapping(uint256 => BoostData) public boostData;\n    // engineer information\n    mapping(uint256 => EngineerData) public engineers;\n    \n    // minigame info\n    mapping(address => bool) public miniGames; \n    \n    struct Player {\n        mapping(uint256 => uint256) engineersCount;\n        uint256 virusNumber;\n        uint256 research;\n        uint256 lastUpdateTime;\n        bool endLoadOldData;\n    }\n    struct BoostData {\n        address owner;\n        uint256 boostRate;\n        uint256 basePrice;\n    }\n    struct EngineerData {\n        uint256 basePrice;\n        uint256 baseETH;\n        uint256 baseResearch;\n        uint256 limit;\n    }\n    modifier disableContract()\n    {\n        require(tx.origin == msg.sender);\n        _;\n    }\n    modifier isAdministrator()\n    {\n        require(msg.sender == administrator);\n        _;\n    }\n    modifier onlyContractsMiniGame() \n    {\n        require(miniGames[msg.sender] == true);\n        _;\n    }\n\n    event BuyEngineer(address _addr, uint256[8] engineerNumbers, uint256 _crytalsPrice, uint256 _ethPrice, uint256 _researchBuy);\n    event BuyBooster(address _addr, uint256 _boostIdx, address beneficiary);\n    event ChangeVirus(address _addr, uint256 _virus, uint256 _type); // 1: add, 2: sub\n    event BecomeGameSponsor(address _addr, uint256 _price);\n    event UpdateResearch(address _addr, uint256 _currentResearch);\n\n    //--------------------------------------------------------------------------\n    // INIT CONTRACT \n    //--------------------------------------------------------------------------\n    constructor() public {\n        administrator = msg.sender;\n\n        initBoostData();\n        initEngineer();\n        // set interface main contract\n        setMiningWarInterface(0x1b002cd1ba79dfad65e8abfbb3a97826e4960fe5);        \n    }\n    function initEngineer() private\n    {\n        //                          price crystals    price ETH         research  limit                         \n        engineers[0] = EngineerData(10,               BASE_PRICE * 0,   10,       10   );   //lv1 \n        engineers[1] = EngineerData(50,               BASE_PRICE * 1,   3356,     2    );   //lv2\n        engineers[2] = EngineerData(200,              BASE_PRICE * 2,   8390,     4    );   //lv3\n        engineers[3] = EngineerData(800,              BASE_PRICE * 4,   20972,    8    );   //lv4\n        engineers[4] = EngineerData(3200,             BASE_PRICE * 8,   52430,    16   );   //lv5\n        engineers[5] = EngineerData(12800,            BASE_PRICE * 16,  131072,   32   );   //lv6\n        engineers[6] = EngineerData(102400,           BASE_PRICE * 32,  327680,   64   );   //lv7\n        engineers[7] = EngineerData(819200,           BASE_PRICE * 64,  819200,   65536);   //lv8\n    }\n    function initBoostData() private \n    {\n        boostData[0] = BoostData(0x0, 150, BASE_PRICE * 1);\n        boostData[1] = BoostData(0x0, 175, BASE_PRICE * 2);\n        boostData[2] = BoostData(0x0, 200, BASE_PRICE * 4);\n        boostData[3] = BoostData(0x0, 225, BASE_PRICE * 8);\n        boostData[4] = BoostData(0x0, 250, BASE_PRICE * 16);\n    }\n    /** \n    * @dev MainContract used this function to verify game's contract\n    */\n    function isContractMiniGame() public pure returns(bool _isContractMiniGame)\n    {\n    \t_isContractMiniGame = true;\n    }\n    function isEngineerContract() public pure returns(bool)\n    {\n        return true;\n    }\n    function () public payable\n    {\n        addPrizePool(msg.value);\n    }\n    /** \n    * @dev Main Contract call this function to setup mini game.\n    */\n    function setupMiniGame( uint256 /*_miningWarRoundNumber*/, uint256 /*_miningWarDeadline*/ ) public\n    {\n        require(msg.sender == miningWarAddress);\n        MiningWar.fallback.value(SafeMath.div(SafeMath.mul(prizePool, 5), 100))();\n        prizePool = SafeMath.sub(prizePool, SafeMath.div(SafeMath.mul(prizePool, 5), 100));\n    }\n    //--------------------------------------------------------------------------\n    // SETTING CONTRACT MINI GAME \n    //--------------------------------------------------------------------------\n    function setMiningWarInterface(address _addr) public isAdministrator\n    {\n        CryptoMiningWarInterface miningWarInterface = CryptoMiningWarInterface(_addr);\n\n        require(miningWarInterface.isMiningWarContract() == true);\n        \n        miningWarAddress = _addr;\n        \n        MiningWar = miningWarInterface;\n    }\n    function setContractsMiniGame( address _addr ) public isAdministrator \n    {\n        MiniGameInterface MiniGame = MiniGameInterface( _addr );\n        \n        if( MiniGame.isContractMiniGame() == false ) { revert(); }\n\n        miniGames[_addr] = true;\n    }\n    /**\n    * @dev remove mini game contract from main contract\n    * @param _addr mini game contract address\n    */\n    function removeContractMiniGame(address _addr) public isAdministrator\n    {\n        miniGames[_addr] = false;\n    }\n    //@dev use this function in case of bug\n    function upgrade(address addr) public isAdministrator\n    {\n        selfdestruct(addr);\n    }\n    //--------------------------------------------------------------------------\n    // BOOSTER \n    //--------------------------------------------------------------------------\n    function buyBooster(uint256 idx) public payable \n    {\n        require(idx < numberOfBoosts);\n        BoostData storage b = boostData[idx];\n\n        if (msg.value < b.basePrice || msg.sender == b.owner) revert();\n        \n        address beneficiary = b.owner;\n        uint256 devFeePrize = devFee(b.basePrice);\n        \n        distributedToOwner(devFeePrize);\n        addMiningWarPrizePool(devFeePrize);\n        addPrizePool(SafeMath.sub(msg.value, SafeMath.mul(devFeePrize,3)));\n        \n        updateVirus(msg.sender);\n\n        if ( beneficiary != 0x0 ) updateVirus(beneficiary);\n        \n        // transfer ownership    \n        b.owner = msg.sender;\n\n        emit BuyBooster(msg.sender, idx, beneficiary );\n    }\n    function getBoosterData(uint256 idx) public view returns (address _owner,uint256 _boostRate, uint256 _basePrice)\n    {\n        require(idx < numberOfBoosts);\n        BoostData memory b = boostData[idx];\n        _owner = b.owner;\n        _boostRate = b.boostRate; \n        _basePrice = b.basePrice;\n    }\n    function hasBooster(address addr) public view returns (uint256 _boostIdx)\n    {         \n        _boostIdx = 999;\n        for(uint256 i = 0; i < numberOfBoosts; i++){\n            uint256 revert_i = numberOfBoosts - i - 1;\n            if(boostData[revert_i].owner == addr){\n                _boostIdx = revert_i;\n                break;\n            }\n        }\n    }\n    //--------------------------------------------------------------------------\n    // GAME SPONSOR\n    //--------------------------------------------------------------------------\n    /**\n    */\n    function becomeGameSponsor() public payable disableContract\n    {\n        uint256 gameSponsorPriceFee = SafeMath.div(SafeMath.mul(gameSponsorPrice, 150), 100);\n        require(msg.value >= gameSponsorPriceFee);\n        require(msg.sender != gameSponsor);\n        // \n        uint256 repayPrice = SafeMath.div(SafeMath.mul(gameSponsorPrice, 110), 100);\n        gameSponsor.transfer(repayPrice);\n        \n        // add to prize pool\n        addPrizePool(SafeMath.sub(msg.value, repayPrice));\n        // update game sponsor info\n        gameSponsor = msg.sender;\n        gameSponsorPrice = gameSponsorPriceFee;\n\n        emit BecomeGameSponsor(msg.sender, msg.value);\n    }\n\n\n    function addEngineer(address _addr, uint256 idx, uint256 _value) public isAdministrator\n    {\n        require(idx < numberOfEngineer);\n        require(_value != 0);\n\n        Player storage p = players[_addr];\n        EngineerData memory e = engineers[idx];\n\n        if (SafeMath.add(p.engineersCount[idx], _value) > e.limit) revert();\n\n        updateVirus(_addr);\n\n        p.engineersCount[idx] = SafeMath.add(p.engineersCount[idx], _value);\n\n        updateResearch(_addr, SafeMath.mul(_value, e.baseResearch));\n    }\n\n    // ----------------------------------------------------------------------------------------\n    // USING FOR MINI GAME CONTRACT\n    // ---------------------------------------------------------------------------------------\n    function setBoostData(uint256 idx, address owner, uint256 boostRate, uint256 basePrice)  public onlyContractsMiniGame\n    {\n        require(owner != 0x0);\n        BoostData storage b = boostData[idx];\n        b.owner     = owner;\n        b.boostRate = boostRate;\n        b.basePrice = basePrice;\n    }\n    function setGameSponsorInfo(address _addr, uint256 _value) public onlyContractsMiniGame\n    {\n        gameSponsor      = _addr;\n        gameSponsorPrice = _value;\n    }\n    function setPlayerLastUpdateTime(address _addr) public onlyContractsMiniGame\n    {\n        require(players[_addr].endLoadOldData == false);\n        players[_addr].lastUpdateTime = now;\n        players[_addr].endLoadOldData = true;\n    }\n    function setPlayerEngineersCount( address _addr, uint256 idx, uint256 _value) public onlyContractsMiniGame\n    {\n         players[_addr].engineersCount[idx] = _value;\n    }\n    function setPlayerResearch(address _addr, uint256 _value) public onlyContractsMiniGame\n    {        \n        players[_addr].research = _value;\n    }\n    function setPlayerVirusNumber(address _addr, uint256 _value) public onlyContractsMiniGame\n    {\n        players[_addr].virusNumber = _value;\n    }\n    function addResearch(address _addr, uint256 _value) public onlyContractsMiniGame\n    {\n        updateVirus(_addr);\n\n        Player storage p = players[_addr];\n\n        p.research = SafeMath.add(p.research, _value);\n\n        emit UpdateResearch(_addr, p.research);\n    }\n    function subResearch(address _addr, uint256 _value) public onlyContractsMiniGame\n    {\n        updateVirus(_addr);\n\n        Player storage p = players[_addr];\n        \n        if (p.research < _value) revert();\n        \n        p.research = SafeMath.sub(p.research, _value);\n\n        emit UpdateResearch(_addr, p.research);\n    }\n    /**\n    * @dev add virus for player\n    * @param _addr player address\n    * @param _value number of virus\n    */\n    function addVirus(address _addr, uint256 _value) public onlyContractsMiniGame\n    {\n        Player storage p = players[_addr];\n\n        uint256 additionalVirus = SafeMath.mul(_value,VIRUS_MINING_PERIOD);\n        \n        p.virusNumber = SafeMath.add(p.virusNumber, additionalVirus);\n\n        emit ChangeVirus(_addr, _value, 1);\n    }\n    /**\n    * @dev subtract virus of player\n    * @param _addr player address \n    * @param _value number virus subtract \n    */\n    function subVirus(address _addr, uint256 _value) public onlyContractsMiniGame\n    {\n        updateVirus(_addr);\n\n        Player storage p = players[_addr];\n        \n        uint256 subtractVirus = SafeMath.mul(_value,VIRUS_MINING_PERIOD);\n        \n        if ( p.virusNumber < subtractVirus ) { revert(); }\n\n        p.virusNumber = SafeMath.sub(p.virusNumber, subtractVirus);\n\n        emit ChangeVirus(_addr, _value, 2);\n    }\n    /**\n    * @dev claim price pool to next new game\n    * @param _addr mini game contract address\n    * @param _value eth claim;\n    */\n    function claimPrizePool(address _addr, uint256 _value) public onlyContractsMiniGame \n    {\n        require(prizePool > _value);\n\n        prizePool = SafeMath.sub(prizePool, _value);\n\n        MiniGameInterface MiniGame = MiniGameInterface( _addr );\n        \n        MiniGame.fallback.value(_value)();\n    }\n    //--------------------------------------------------------------------------\n    // PLAYERS\n    //--------------------------------------------------------------------------\n    /**\n    */\n    function buyEngineer(uint256[8] engineerNumbers) public payable disableContract\n    {        \n        updateVirus(msg.sender);\n\n        Player storage p = players[msg.sender];\n        \n        uint256 priceCrystals = 0;\n        uint256 priceEth = 0;\n        uint256 research = 0;\n        for (uint256 engineerIdx = 0; engineerIdx < numberOfEngineer; engineerIdx++) {\n            uint256 engineerNumber = engineerNumbers[engineerIdx];\n            EngineerData memory e = engineers[engineerIdx];\n            // require for engineerNumber \n            if(engineerNumber > e.limit || engineerNumber < 0) revert();\n            \n            // engineer you want buy\n            if (engineerNumber > 0) {\n                uint256 currentEngineerCount = p.engineersCount[engineerIdx];\n                // update player data\n                p.engineersCount[engineerIdx] = SafeMath.min(e.limit, SafeMath.add(p.engineersCount[engineerIdx], engineerNumber));\n                // calculate no research you want buy\n                research = SafeMath.add(research, SafeMath.mul(SafeMath.sub(p.engineersCount[engineerIdx],currentEngineerCount), e.baseResearch));\n                // calculate price crystals and eth you will pay\n                priceCrystals = SafeMath.add(priceCrystals, SafeMath.mul(e.basePrice, engineerNumber));\n                priceEth = SafeMath.add(priceEth, SafeMath.mul(e.baseETH, engineerNumber));\n            }\n        }\n        // check price eth\n        if (priceEth < msg.value) revert();\n\n        uint256 devFeePrize = devFee(priceEth);\n        distributedToOwner(devFeePrize);\n        addMiningWarPrizePool(devFeePrize);\n        addPrizePool(SafeMath.sub(msg.value, SafeMath.mul(devFeePrize,3)));        \n\n        // pay and update\n        MiningWar.subCrystal(msg.sender, priceCrystals);\n        updateResearch(msg.sender, research);\n\n        emit BuyEngineer(msg.sender, engineerNumbers, priceCrystals, priceEth, research);\n    }\n     /**\n    * @dev update virus for player \n    * @param _addr player address\n    */\n    function updateVirus(address _addr) private\n    {\n        Player storage p = players[_addr]; \n        p.virusNumber = calCurrentVirus(_addr);\n        p.lastUpdateTime = now;\n    }\n    function calCurrentVirus(address _addr) public view returns(uint256 _currentVirus)\n    {\n        Player memory p = players[_addr]; \n        uint256 secondsPassed = SafeMath.sub(now, p.lastUpdateTime);\n        uint256 researchPerDay = getResearchPerDay(_addr);   \n        _currentVirus = p.virusNumber;\n        if (researchPerDay > 0) {\n            _currentVirus = SafeMath.add(_currentVirus, SafeMath.mul(researchPerDay, secondsPassed));\n        }   \n    }\n    /**\n    * @dev update research for player\n    * @param _addr player address\n    * @param _research number research want to add\n    */\n    function updateResearch(address _addr, uint256 _research) private \n    {\n        Player storage p = players[_addr];\n        p.research = SafeMath.add(p.research, _research);\n\n        emit UpdateResearch(_addr, p.research);\n    }\n    function getResearchPerDay(address _addr) public view returns( uint256 _researchPerDay)\n    {\n        Player memory p = players[_addr];\n        _researchPerDay =  p.research;\n        uint256 boosterIdx = hasBooster(_addr);\n        if (boosterIdx != 999) {\n            BoostData memory b = boostData[boosterIdx];\n            _researchPerDay = SafeMath.div(SafeMath.mul(_researchPerDay, b.boostRate), 100);\n        } \n    }\n    /**\n    * @dev get player data\n    * @param _addr player address\n    */\n    function getPlayerData(address _addr) \n    public \n    view \n    returns(\n        uint256 _virusNumber, \n        uint256 _currentVirus,\n        uint256 _research, \n        uint256 _researchPerDay, \n        uint256 _lastUpdateTime, \n        uint256[8] _engineersCount\n    )\n    {\n        Player storage p = players[_addr];\n        for ( uint256 idx = 0; idx < numberOfEngineer; idx++ ) {\n            _engineersCount[idx] = p.engineersCount[idx];\n        }\n        _currentVirus= SafeMath.div(calCurrentVirus(_addr), VIRUS_MINING_PERIOD);\n        _virusNumber = SafeMath.div(p.virusNumber, VIRUS_MINING_PERIOD);\n        _lastUpdateTime = p.lastUpdateTime;\n        _research = p.research;\n        _researchPerDay = getResearchPerDay(_addr);\n    }\n    //--------------------------------------------------------------------------\n    // INTERNAL \n    //--------------------------------------------------------------------------\n    function addPrizePool(uint256 _value) private \n    {\n        prizePool = SafeMath.add(prizePool, _value);\n    }\n    /**\n    * @dev add 5% value of transaction payable\n    */\n    function addMiningWarPrizePool(uint256 _value) private\n    {\n        MiningWar.fallback.value(_value)();\n    }\n    /**\n    * @dev calculate current crystals of player\n    * @param _addr player address\n    */\n    function calCurrentCrystals(address _addr) public view returns(uint256 _currentCrystals)\n    {\n        _currentCrystals = SafeMath.div(MiningWar.calCurrentCrystals(_addr), CRTSTAL_MINING_PERIOD);\n    }\n    function devFee(uint256 _amount) private pure returns(uint256)\n    {\n        return SafeMath.div(SafeMath.mul(_amount, 5), 100);\n    }\n    /**\n    * @dev with transaction payable send 5% value for admin and sponsor\n    * @param _value fee \n    */\n    function distributedToOwner(uint256 _value) private\n    {\n        gameSponsor.transfer(_value);\n        administrator.transfer(_value);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"totalPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miningWarAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setPlayerLastUpdateTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getResearchPerDay\",\"outputs\":[{\"name\":\"_researchPerDay\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPlayerData\",\"outputs\":[{\"name\":\"_virusNumber\",\"type\":\"uint256\"},{\"name\":\"_currentVirus\",\"type\":\"uint256\"},{\"name\":\"_research\",\"type\":\"uint256\"},{\"name\":\"_researchPerDay\",\"type\":\"uint256\"},{\"name\":\"_lastUpdateTime\",\"type\":\"uint256\"},{\"name\":\"_engineersCount\",\"type\":\"uint256[8]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractMiniGame\",\"outputs\":[{\"name\":\"_isContractMiniGame\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"idx\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPlayerEngineersCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"boostRate\",\"type\":\"uint256\"},{\"name\":\"basePrice\",\"type\":\"uint256\"}],\"name\":\"setBoostData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getBoosterData\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_boostRate\",\"type\":\"uint256\"},{\"name\":\"_basePrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"engineers\",\"outputs\":[{\"name\":\"basePrice\",\"type\":\"uint256\"},{\"name\":\"baseETH\",\"type\":\"uint256\"},{\"name\":\"baseResearch\",\"type\":\"uint256\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"subResearch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"idx\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addEngineer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfEngineer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizePool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameSponsorPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"calCurrentVirus\",\"outputs\":[{\"name\":\"_currentVirus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"claimPrizePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setContractsMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPlayerVirusNumber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMiningWarInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"subVirus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"calCurrentCrystals\",\"outputs\":[{\"name\":\"_currentCrystals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeContractMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addResearch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boostData\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"boostRate\",\"type\":\"uint256\"},{\"name\":\"basePrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"hasBooster\",\"outputs\":[{\"name\":\"_boostIdx\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"miniGames\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameSponsor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEngineerContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPlayerResearch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setGameSponsorInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setupMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MiningWar\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"engineerNumbers\",\"type\":\"uint256[8]\"}],\"name\":\"buyEngineer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CRTSTAL_MINING_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"buyBooster\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"becomeGameSponsor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VIRUS_MINING_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"virusNumber\",\"type\":\"uint256\"},{\"name\":\"research\",\"type\":\"uint256\"},{\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"name\":\"endLoadOldData\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfBoosts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addVirus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"engineerNumbers\",\"type\":\"uint256[8]\"},{\"indexed\":false,\"name\":\"_crytalsPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ethPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_researchBuy\",\"type\":\"uint256\"}],\"name\":\"BuyEngineer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_boostIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"BuyBooster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_virus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"ChangeVirus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"BecomeGameSponsor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_currentResearch\",\"type\":\"uint256\"}],\"name\":\"UpdateResearch\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600355600860045560058055670470de4df82000006007556201518060085562015180600955662386f26fc10000600a553480156200004457600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200009f620000ec640100000000026401000000009004565b620000b862000444640100000000026401000000009004565b620000e6731b002cd1ba79dfad65e8abfbb3a97826e4960fe5620007a0640100000000026401000000009004565b6200093d565b606060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001609681526020016001600a5402815250600e600080815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155905050606060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160af81526020016002600a5402815250600e60006001815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155905050606060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160c881526020016004600a5402815250600e60006002815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155905050606060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160e181526020016008600a5402815250600e60006003815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155905050606060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160fa81526020016010600a5402815250600e60006004815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155905050565b608060405190810160405280600a81526020016000600a54028152602001600a8152602001600a815250600f600080815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155905050608060405190810160405280603281526020016001600a54028152602001610d1c81526020016002815250600f6000600181526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505060806040519081016040528060c881526020016002600a540281526020016120c681526020016004815250600f6000600281526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505060806040519081016040528061032081526020016004600a540281526020016151ec81526020016008815250600f60006003815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155905050608060405190810160405280610c8081526020016008600a5402815260200161ccce81526020016010815250600f6000600481526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505060806040519081016040528061320081526020016010600a540281526020016202000081526020016020815250600f600060058152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050506080604051908101604052806201900081526020016020600a540281526020016205000081526020016040815250600f60006006815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155905050608060405190810160405280620c800081526020016040600a54028152602001620c8000815260200162010000815250600f60006007815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155905050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515620007ff57600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff1663688b5c2b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200086b57600080fd5b505af115801562000880573d6000803e3d6000fd5b505050506040513d60208110156200089757600080fd5b81019080805190602001909291905050501515141515620008b757600080fd5b81600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b61367d806200094d6000396000f30060806040526004361061022f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680625b44871461023a5780630900f0101461026557806314017c3f146102a85780631e872f55146102ff5780632326faf9146103425780632aa531d9146103995780633281d5761461043b57806332e94e811461046a5780633928bc8b146104c157806339901be8146105225780633dc20fff1461059d57806346080a94146105f3578063571e4a6d146106405780636103d70b14610697578063691b6583146106ae578063719ce73e146106d9578063742609ce1461070457806378f556221461072f5780637baf71f91461078657806384ffcb5d146107d3578063859ccc72146108165780638a56b23014610863578063920775d4146108a657806395360a02146108f35780639ff12bba1461094a578063a71fa7961461098d578063ac5b876c146109da578063ad5b718914610a55578063b239dac614610aac578063b3140ac314610b07578063b9a59b8314610b5e578063bb005d4f14610b8d578063bcd3ff8914610bda578063be7ccd7e14610c27578063c3f656f114610c5e578063cc66d3c714610cb5578063cee0b4fe14610cfb578063d223926f14610d26578063da4a76c014610d46578063e12936d014610d50578063e2982c2114610d7b578063e2eb41ff14610dd2578063eafddc4114610e42578063ec6f772d14610e6d578063f53d0a8e14610eba578063f86325ed14610f11575b61023834610f3c565b005b34801561024657600080fd5b5061024f610f51565b6040518082815260200191505060405180910390f35b34801561027157600080fd5b506102a6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f57565b005b3480156102b457600080fd5b506102bd610fcc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561030b57600080fd5b50610340600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ff2565b005b34801561034e57600080fd5b50610383600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611158565b6040518082815260200191505060405180910390f35b3480156103a557600080fd5b506103da600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112bd565b6040518087815260200186815260200185815260200184815260200183815260200182600860200280838360005b83811015610423578082015181840152602081019050610408565b50505050905001965050505050505060405180910390f35b34801561044757600080fd5b506104506113a6565b604051808215151515815260200191505060405180910390f35b34801561047657600080fd5b506104bf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506113af565b005b3480156104cd57600080fd5b5061052060048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505061146b565b005b34801561052e57600080fd5b5061054d60048036038101908080359060200190929190505050611563565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b3480156105a957600080fd5b506105c860048036038101908080359060200190929190505050611628565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b3480156105ff57600080fd5b5061063e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611658565b005b34801561064c57600080fd5b50610695600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505061179e565b005b3480156106a357600080fd5b506106ac61193c565b005b3480156106ba57600080fd5b506106c3611a63565b6040518082815260200191505060405180910390f35b3480156106e557600080fd5b506106ee611a69565b6040518082815260200191505060405180910390f35b34801561071057600080fd5b50610719611a6f565b6040518082815260200191505060405180910390f35b34801561073b57600080fd5b50610770600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a75565b6040518082815260200191505060405180910390f35b34801561079257600080fd5b506107d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b51565b005b3480156107df57600080fd5b50610814600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c59565b005b34801561082257600080fd5b50610861600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611dc6565b005b34801561086f57600080fd5b506108a4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e70565b005b3480156108b257600080fd5b506108f1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612008565b005b3480156108ff57600080fd5b50610934600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612163565b6040518082815260200191505060405180910390f35b34801561095657600080fd5b5061098b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061226f565b005b34801561099957600080fd5b506109d8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612326565b005b3480156109e657600080fd5b50610a056004803603810190808035906020019092919050505061245b565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b348015610a6157600080fd5b50610a96600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124a5565b6040518082815260200191505060405180910390f35b348015610ab857600080fd5b50610aed600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061254e565b604051808215151515815260200191505060405180910390f35b348015610b1357600080fd5b50610b1c61256e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b6a57600080fd5b50610b73612594565b604051808215151515815260200191505060405180910390f35b348015610b9957600080fd5b50610bd8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061259d565b005b348015610be657600080fd5b50610c25600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612647565b005b348015610c3357600080fd5b50610c5c60048036038101908080359060200190929190803590602001909291905050506126f2565b005b348015610c6a57600080fd5b50610c7361282f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610cf9600480360381019080806101000190600880602002604051908101604052809291908260086020028082843782019150505050509192919290505050612855565b005b348015610d0757600080fd5b50610d10612c43565b6040518082815260200191505060405180910390f35b610d4460048036038101908080359060200190929190505050612c49565b005b610d4e612e5d565b005b348015610d5c57600080fd5b50610d6561306a565b6040518082815260200191505060405180910390f35b348015610d8757600080fd5b50610dbc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613070565b6040518082815260200191505060405180910390f35b348015610dde57600080fd5b50610e13600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613088565b604051808581526020018481526020018381526020018215151515815260200194505050505060405180910390f35b348015610e4e57600080fd5b50610e576130c5565b6040518082815260200191505060405180910390f35b348015610e7957600080fd5b50610eb8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506130cb565b005b348015610ec657600080fd5b50610ecf61320c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610f1d57600080fd5b50610f26613232565b6040518082815260200191505060405180910390f35b610f4860035482613238565b60038190555050565b60015481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fb357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16ff5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60011515601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561105157600080fd5b60001515600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff1615151415156110b357600080fd5b42600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055506001600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff02191690831515021790555050565b60006111626135a1565b600061116c6135cc565b600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020608060405190810160405290816001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff161515151581525050925082602001519350611202856124a5565b91506103e7821415156112b557600e6000838152602001908152602001600020606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505090506112b26112ab858360200151613256565b6064613291565b93505b505050919050565b60008060008060006112cd613604565b600080600d60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209150600090505b60045481101561135a5781600001600082815260200190815260200160002054838260088110151561134457fe5b6020020181815250508080600101915050611316565b61136e6113668a611a75565b600854613291565b96506113808260010154600854613291565b9750816003015493508160020154955061139989611158565b9450505091939550919395565b60006001905090565b60011515601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561140e57600080fd5b80600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600084815260200190815260200160002081905550505050565b600060011515601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156114cc57600080fd5b60008473ffffffffffffffffffffffffffffffffffffffff16141515156114f257600080fd5b600e60008681526020019081526020016000209050838160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508281600101819055508181600201819055505050505050565b60008060006115706135cc565b6005548510151561158057600080fd5b600e6000868152602001908152602001600020606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815250509050806000015193508060200151925080604001519150509193909250565b600f6020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b600060011515601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156116b957600080fd5b6116c2836132ac565b600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160020154101561171457600080fd5b61172281600201548361330d565b81600201819055507f49c6d128c3eabc38055132014e6d81cc9d16ea6e5264c025364a0364f6e0e0b5838260020154604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1505050565b60006117a8613628565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561180457600080fd5b6004548410151561181457600080fd5b6000831415151561182457600080fd5b600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209150600f600085815260200190815260200160002060806040519081016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905080606001516118d28360000160008781526020019081526020016000205485613238565b11156118dd57600080fd5b6118e6856132ac565b6119058260000160008681526020019081526020016000205484613238565b8260000160008681526020019081526020016000208190555061193585611930858460400151613256565b613326565b5050505050565b6000803391506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811415151561199357600080fd5b803073ffffffffffffffffffffffffffffffffffffffff1631101515156119b957600080fd5b6119ce8160015461330d90919063ffffffff16565b60018190555060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611a5e573d6000803e3d6000fd5b505050565b60045481565b60035481565b60075481565b6000611a7f6135a1565b600080600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020608060405190810160405290816001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509250611b1642846040015161330d565b9150611b2185611158565b9050826000015193506000811115611b4957611b4684611b418385613256565b613238565b93505b505050919050565b600060011515601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611bb257600080fd5b81600354111515611bc257600080fd5b611bce6003548361330d565b6003819055508290508073ffffffffffffffffffffffffffffffffffffffff1663552079dc836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b158015611c3b57600080fd5b505af1158015611c4f573d6000803e3d6000fd5b5050505050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cb757600080fd5b819050600015158173ffffffffffffffffffffffffffffffffffffffff16633281d5766040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611d2257600080fd5b505af1158015611d36573d6000803e3d6000fd5b505050506040513d6020811015611d4c57600080fd5b810190808051906020019092919050505015151415611d6a57600080fd5b6001601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60011515601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611e2557600080fd5b80600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ece57600080fd5b819050600115158173ffffffffffffffffffffffffffffffffffffffff1663688b5c2b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611f3957600080fd5b505af1158015611f4d573d6000803e3d6000fd5b505050506040513d6020811015611f6357600080fd5b81019080805190602001909291905050501515141515611f8257600080fd5b81600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060011515601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561206a57600080fd5b612073846132ac565b600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091506120c083600854613256565b905080826001015410156120d357600080fd5b6120e182600101548261330d565b82600101819055507fa5756f7c2358a76cfa31cb55434e0283e38422c566bb5c4c64e72b22e6c755b784846002604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a150505050565b6000612268600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395360a02846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561222557600080fd5b505af1158015612239573d6000803e3d6000fd5b505050506040513d602081101561224f57600080fd5b8101908080519060200190929190505050600954613291565b9050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156122cb57600080fd5b6000601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600060011515601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561238757600080fd5b612390836132ac565b600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506123df816002015483613238565b81600201819055507f49c6d128c3eabc38055132014e6d81cc9d16ea6e5264c025364a0364f6e0e0b5838260020154604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1505050565b600e6020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b60008060006103e79250600091505b60055482101561254757600182600554030390508373ffffffffffffffffffffffffffffffffffffffff16600e600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561253a57809250612547565b81806001019250506124b4565b5050919050565b60106020528060005260406000206000915054906101000a900460ff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001905090565b60011515601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156125fc57600080fd5b80600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055505050565b60011515601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156126a657600080fd5b81600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806007819055505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561274e57600080fd5b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663552079dc6127a361279c6003546005613256565b6064613291565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b1580156127ea57600080fd5b505af11580156127fe573d6000803e3d6000fd5b50505050506128256003546128206128196003546005613256565b6064613291565b61330d565b6003819055505050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080600080612866613628565b6000803373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161415156128a357600080fd5b6128ac336132ac565b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209850600097506000965060009550600094505b600454851015612a5f57898560088110151561291657fe5b60200201519350600f600086815260200190815260200160002060806040519081016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050925082606001518411806129785750600084105b1561298257600080fd5b6000841115612a52578860000160008681526020019081526020016000205491506129cf83606001516129ca8b60000160008981526020019081526020016000205487613238565b6133f3565b89600001600087815260200190815260200160002081905550612a1d86612a18612a0e8c60000160008a8152602001908152602001600020548661330d565b8660400151613256565b613238565b9550612a3688612a31856000015187613256565b613238565b9750612a4f87612a4a856020015187613256565b613238565b96505b84806001019550506128fe565b34871015612a6c57600080fd5b612a758761340c565b9050612a808161342a565b612a89816134ff565b612aa5612aa034612a9b846003613256565b61330d565b610f3c565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b04eb639338a6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015612b6a57600080fd5b505af1158015612b7e573d6000803e3d6000fd5b50505050612b8c3387613326565b7f02e9063fb7f9e6daa6e672992e8fe10bb5a0dca6e825c7c92bb3fd2399bd6a6f338b8a8a8a604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200185600860200280838360005b83811015612c0f578082015181840152602081019050612bf4565b505050509050018481526020018381526020018281526020019550505050505060405180910390a150505050505050505050565b60095481565b600080600060055484101515612c5e57600080fd5b600e600085815260200190815260200160002092508260020154341080612cd457508260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15612cde57600080fd5b8260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150612d12836002015461340c565b9050612d1d8161342a565b612d26816134ff565b612d42612d3d34612d38846003613256565b61330d565b610f3c565b612d4b336132ac565b60008273ffffffffffffffffffffffffffffffffffffffff16141515612d7557612d74826132ac565b5b338360000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fbcccef37dc5a9bc77287d6b8f4fbb05a180026ecd926d06874d3372529d42f05338584604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a150505050565b6000803373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16141515612e9a57600080fd5b612eb1612eaa6007546096613256565b6064613291565b9150813410151515612ec257600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515612f1f57600080fd5b612f36612f2f600754606e613256565b6064613291565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612fa0573d6000803e3d6000fd5b50612fb3612fae348361330d565b610f3c565b33600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816007819055507fc3cdf29aa3f75fce61cca7fc1980e6553c62bdfeb8f1843e23f42f13da833f3e3334604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b60085481565b60006020528060005260406000206000915090505481565b600d6020528060005260406000206000915090508060010154908060020154908060030154908060040160009054906101000a900460ff16905084565b60055481565b60008060011515601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561312d57600080fd5b600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020915061317a83600854613256565b905061318a826001015482613238565b82600101819055507fa5756f7c2358a76cfa31cb55434e0283e38422c566bb5c4c64e72b22e6c755b784846001604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a150505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a5481565b600080828401905083811015151561324c57fe5b8091505092915050565b600080600084141561326b576000915061328a565b828402905082848281151561327c57fe5b0414151561328657fe5b8091505b5092915050565b600080828481151561329f57fe5b0490508091505092915050565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506132f882611a75565b81600101819055504281600301819055505050565b600082821115151561331b57fe5b818303905092915050565b6000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050613377816002015483613238565b81600201819055507f49c6d128c3eabc38055132014e6d81cc9d16ea6e5264c025364a0364f6e0e0b5838260020154604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1505050565b60008183106134025781613404565b825b905092915050565b600061342361341c836005613256565b6064613291565b9050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015613492573d6000803e3d6000fd5b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156134fb573d6000803e3d6000fd5b5050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663552079dc826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561358557600080fd5b505af1158015613599573d6000803e3d6000fd5b505050505050565b6080604051908101604052806000815260200160008152602001600081526020016000151581525090565b606060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b61010060405190810160405280600890602082028038833980820191505090505090565b6080604051908101604052806000815260200160008152602001600081526020016000815250905600a165627a7a723058209b0286f5f89404c5332abd0ffdd1fcec70775cc8348cf7f1abe37bd4b72afa700029"
}