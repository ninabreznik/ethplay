{
  "address": "0xe316e83233cda8caacfba14570c96862a1dbbf70",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "exForward",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-01\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20 {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract exForward{\n    address public owner;\n    using SafeMath for uint256;\n    event eth_deposit(address sender, uint amount);\n    event erc_deposit(address from, address ctr, address to, uint amount);\n    constructor() public {\n        owner = 0x50D569aF6610C017ddE11A7F66dF3FE831f989fa;\n    }\n    function trToken(address tokenContract, uint tokens) public{\n        ERC20(tokenContract).transfer(owner, tokens);\n        emit erc_deposit(msg.sender, tokenContract, owner, tokens);\n    }\n    function() payable public {\n        uint256 ethAmount = msg.value.mul(20);\n        owner.transfer(ethAmount);\n        emit eth_deposit(msg.sender,msg.value);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a0319167350d569af6610c017dde11a7f66df3fe831f989fa1790556102e0806100466000396000f30060806040526004361061004b5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416638da5cb5b81146100e4578063ce7be2d614610122575b600061005e34601463ffffffff61015516565b6000805460405192935073ffffffffffffffffffffffffffffffffffffffff169183156108fc0291849190818181858888f193505050501580156100a6573d6000803e3d6000fd5b506040805133815234602082015281517f472bccb9396df361f6a549719bf654b921fe12fbf49168a6a314cf71ac2faf58929181900390910190a150005b3480156100f057600080fd5b506100f961018b565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561012e57600080fd5b5061015373ffffffffffffffffffffffffffffffffffffffff600435166024356101a7565b005b6000808315156101685760009150610184565b5082820282848281151561017857fe5b041461018057fe5b8091505b5092915050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60008054604080517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201526024810185905290519185169263a9059cbb926044808401936020939083900390910190829087803b15801561022457600080fd5b505af1158015610238573d6000803e3d6000fd5b505050506040513d602081101561024e57600080fd5b50506000546040805133815273ffffffffffffffffffffffffffffffffffffffff80861660208301529092168282015260608201839052517fa4a78035a9350286d6a0665d9bd4e141f41f3513d3fcdbcef369cef00bf0fb919181900360800190a150505600a165627a7a723058200206809a0a0468878956966d02c21a8d7aa7ed13fa6766664521369239c805030029"
}