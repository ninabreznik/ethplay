{
  "address": "0xd60d353610d9a5ca478769d371b53cefaa7b6e4c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Fomo3D: Contract 2",
  "contractName": "PlayerBook",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "50",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-05\n*/\n\npragma solidity ^0.4.24;\n/*\n * -PlayerBook - v0.3.14\n * ┌┬┐┌─┐┌─┐┌┬┐   ╦╦ ╦╔═╗╔╦╗  ┌─┐┬─┐┌─┐┌─┐┌─┐┌┐┌┌┬┐┌─┐\n *  │ ├┤ ├─┤│││   ║║ ║╚═╗ ║   ├─┘├┬┘├┤ └─┐├┤ │││ │ └─┐\n *  ┴ └─┘┴ ┴┴ ┴  ╚╝╚═╝╚═╝ ╩   ┴  ┴└─└─┘└─┘└─┘┘└┘ ┴ └─┘\n *                                  _____                      _____\n *                                 (, /     /)       /) /)    (, /      /)          /)\n *          ┌─┐                      /   _ (/_      // //       /  _   // _   __  _(/\n *          ├─┤                  ___/___(/_/(__(_/_(/_(/_   ___/__/_)_(/_(_(_/ (_(_(_\n *          ┴ ┴                /   /          .-/ _____   (__ /\n *                            (__ /          (_/ (, /                                      /)™\n *                                                 /  __  __ __ __  _   __ __  _  _/_ _  _(/\n * ┌─┐┬─┐┌─┐┌┬┐┬ ┬┌─┐┌┬┐                          /__/ (_(__(_)/ (_/_)_(_)/ (_(_(_(__(/_(_(_\n * ├─┘├┬┘│ │ │││ ││   │                      (__ /              .-/  © Jekyll Island Inc. 2018\n * ┴  ┴└─└─┘─┴┘└─┘└─┘ ┴                                        (_/\n *     ______   _                                 ______                 _          \n *====(_____ \\=| |===============================(____  \\===============| |=============*\n *     _____) )| |  _____  _   _  _____   ____    ____)  )  ___    ___  | |  _\n *    |  ____/ | | (____ || | | || ___ | / ___)  |  __  (  / _ \\  / _ \\ | |_/ )\n *    | |      | | / ___ || |_| || ____|| |      | |__)  )| |_| || |_| ||  _ (\n *====|_|=======\\_)\\_____|=\\__  ||_____)|_|======|______/==\\___/==\\___/=|_|=\\_)=========*\n *                        (____/\n * ╔═╗┌─┐┌┐┌┌┬┐┬─┐┌─┐┌─┐┌┬┐  ╔═╗┌─┐┌┬┐┌─┐ ┌──────────┐                       \n * ║  │ ││││ │ ├┬┘├─┤│   │   ║  │ │ ││├┤  │ Inventor │                      \n * ╚═╝└─┘┘└┘ ┴ ┴└─┴ ┴└─┘ ┴   ╚═╝└─┘─┴┘└─┘ └──────────┘    \n */\n\ninterface JIincForwarderInterface {\n    function deposit() external payable returns(bool);\n    function status() external view returns(address, address, bool);\n    function startMigration(address _newCorpBank) external returns(bool);\n    function cancelMigration() external returns(bool);\n    function finishMigration() external returns(bool);\n    function setup(address _firstCorpBank) external;\n}\n\ninterface PlayerBookReceiverInterface {\n    function receivePlayerInfo(uint256 _pID, address _addr, bytes32 _name, uint256 _laff) external;\n    function receivePlayerNameList(uint256 _pID, bytes32 _name) external;\n}\n\ninterface TeamJustInterface {\n    function requiredSignatures() external view returns(uint256);\n    function requiredDevSignatures() external view returns(uint256);\n    function adminCount() external view returns(uint256);\n    function devCount() external view returns(uint256);\n    function adminName(address _who) external view returns(bytes32);\n    function isAdmin(address _who) external view returns(bool);\n    function isDev(address _who) external view returns(bool);\n}\n\ncontract PlayerBook {\n    using NameFilter for string;\n    using SafeMath for uint256;\n    \n    JIincForwarderInterface constant private Jekyll_Island_Inc = JIincForwarderInterface(0xdd4950F977EE28D2C132f1353D1595035Db444EE);\n    TeamJustInterface constant private TeamJust = TeamJustInterface(0x464904238b5CdBdCE12722A7E6014EC1C0B66928);\n    \n    MSFun.Data private msData;\n    function multiSigDev(bytes32 _whatFunction) private returns (bool) {return(MSFun.multiSig(msData, TeamJust.requiredDevSignatures(), _whatFunction));}\n    function deleteProposal(bytes32 _whatFunction) private {MSFun.deleteProposal(msData, _whatFunction);}\n    function deleteAnyProposal(bytes32 _whatFunction) onlyDevs() public {MSFun.deleteProposal(msData, _whatFunction);}\n    function checkData(bytes32 _whatFunction) onlyDevs() public view returns(bytes32, uint256) {return(MSFun.checkMsgData(msData, _whatFunction), MSFun.checkCount(msData, _whatFunction));}\n    function checkSignersByAddress(bytes32 _whatFunction, uint256 _signerA, uint256 _signerB, uint256 _signerC) onlyDevs() public view returns(address, address, address) {return(MSFun.checkSigner(msData, _whatFunction, _signerA), MSFun.checkSigner(msData, _whatFunction, _signerB), MSFun.checkSigner(msData, _whatFunction, _signerC));}\n    function checkSignersByName(bytes32 _whatFunction, uint256 _signerA, uint256 _signerB, uint256 _signerC) onlyDevs() public view returns(bytes32, bytes32, bytes32) {return(TeamJust.adminName(MSFun.checkSigner(msData, _whatFunction, _signerA)), TeamJust.adminName(MSFun.checkSigner(msData, _whatFunction, _signerB)), TeamJust.adminName(MSFun.checkSigner(msData, _whatFunction, _signerC)));}\n//==============================================================================\n//     _| _ _|_ _    _ _ _|_    _   .\n//    (_|(_| | (_|  _\\(/_ | |_||_)  .\n//=============================|================================================    \n    uint256 public registrationFee_ = 10 finney;            // price to register a name\n    mapping(uint256 => PlayerBookReceiverInterface) public games_;  // mapping of our game interfaces for sending your account info to games\n    mapping(address => bytes32) public gameNames_;          // lookup a games name\n    mapping(address => uint256) public gameIDs_;            // lokup a games ID\n    uint256 public gID_;        // total number of games\n    uint256 public pID_;        // total number of players\n    mapping (address => uint256) public pIDxAddr_;          // (addr => pID) returns player id by address\n    mapping (bytes32 => uint256) public pIDxName_;          // (name => pID) returns player id by name\n    mapping (uint256 => Player) public plyr_;               // (pID => data) player data\n    mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; // (pID => name => bool) list of names a player owns.  (used so you can change your display name amoungst any name you own)\n    mapping (uint256 => mapping (uint256 => bytes32)) public plyrNameList_; // (pID => nameNum => name) list of names a player owns\n    struct Player {\n        address addr;\n        bytes32 name;\n        uint256 laff;\n        uint256 names;\n    }\n//==============================================================================\n//     _ _  _  __|_ _    __|_ _  _  .\n//    (_(_)| |_\\ | | |_|(_ | (_)|   .  (initial data setup upon contract deploy)\n//==============================================================================    \n    constructor()\n        public\n    {\n        // premine the dev names (sorry not sorry)\n            // No keys are purchased with this method, it's simply locking our addresses,\n            // PID's and names for referral codes.\n        plyr_[1].addr = 0x8e0d985f3Ec1857BEc39B76aAabDEa6B31B67d53;\n        plyr_[1].name = \"justo\";\n        plyr_[1].names = 1;\n        pIDxAddr_[0x8e0d985f3Ec1857BEc39B76aAabDEa6B31B67d53] = 1;\n        pIDxName_[\"justo\"] = 1;\n        plyrNames_[1][\"justo\"] = true;\n        plyrNameList_[1][1] = \"justo\";\n        \n        plyr_[2].addr = 0x8b4DA1827932D71759687f925D17F81Fc94e3A9D;\n        plyr_[2].name = \"mantso\";\n        plyr_[2].names = 1;\n        pIDxAddr_[0x8b4DA1827932D71759687f925D17F81Fc94e3A9D] = 2;\n        pIDxName_[\"mantso\"] = 2;\n        plyrNames_[2][\"mantso\"] = true;\n        plyrNameList_[2][1] = \"mantso\";\n        \n        plyr_[3].addr = 0x7ac74Fcc1a71b106F12c55ee8F802C9F672Ce40C;\n        plyr_[3].name = \"sumpunk\";\n        plyr_[3].names = 1;\n        pIDxAddr_[0x7ac74Fcc1a71b106F12c55ee8F802C9F672Ce40C] = 3;\n        pIDxName_[\"sumpunk\"] = 3;\n        plyrNames_[3][\"sumpunk\"] = true;\n        plyrNameList_[3][1] = \"sumpunk\";\n        \n        plyr_[4].addr = 0x18E90Fc6F70344f53EBd4f6070bf6Aa23e2D748C;\n        plyr_[4].name = \"inventor\";\n        plyr_[4].names = 1;\n        pIDxAddr_[0x18E90Fc6F70344f53EBd4f6070bf6Aa23e2D748C] = 4;\n        pIDxName_[\"inventor\"] = 4;\n        plyrNames_[4][\"inventor\"] = true;\n        plyrNameList_[4][1] = \"inventor\";\n        \n        pID_ = 4;\n    }\n//==============================================================================\n//     _ _  _  _|. |`. _  _ _  .\n//    | | |(_)(_||~|~|(/_| _\\  .  (these are safety checks)\n//==============================================================================    \n    /**\n     * @dev prevents contracts from interacting with fomo3d \n     */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n        \n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        _;\n    }\n    \n    modifier onlyDevs() \n    {\n        require(TeamJust.isDev(msg.sender) == true, \"msg sender is not a dev\");\n        _;\n    }\n    \n    modifier isRegisteredGame()\n    {\n        require(gameIDs_[msg.sender] != 0);\n        _;\n    }\n//==============================================================================\n//     _    _  _ _|_ _  .\n//    (/_\\/(/_| | | _\\  .\n//==============================================================================    \n    // fired whenever a player registers a name\n    event onNewName\n    (\n        uint256 indexed playerID,\n        address indexed playerAddress,\n        bytes32 indexed playerName,\n        bool isNewPlayer,\n        uint256 affiliateID,\n        address affiliateAddress,\n        bytes32 affiliateName,\n        uint256 amountPaid,\n        uint256 timeStamp\n    );\n//==============================================================================\n//     _  _ _|__|_ _  _ _  .\n//    (_|(/_ |  | (/_| _\\  . (for UI & viewing things on etherscan)\n//=====_|=======================================================================\n    function checkIfNameValid(string _nameStr)\n        public\n        view\n        returns(bool)\n    {\n        bytes32 _name = _nameStr.nameFilter();\n        if (pIDxName_[_name] == 0)\n            return (true);\n        else \n            return (false);\n    }\n//==============================================================================\n//     _    |_ |. _   |`    _  __|_. _  _  _  .\n//    |_)|_||_)||(_  ~|~|_|| |(_ | |(_)| |_\\  .  (use these to interact with contract)\n//====|=========================================================================    \n    /**\n     * @dev registers a name.  UI will always display the last name you registered.\n     * but you will still own all previously registered names to use as affiliate \n     * links.\n     * - must pay a registration fee.\n     * - name must be unique\n     * - names will be converted to lowercase\n     * - name cannot start or end with a space \n     * - cannot have more than 1 space in a row\n     * - cannot be only numbers\n     * - cannot start with 0x \n     * - name must be at least 1 char\n     * - max length of 32 characters long\n     * - allowed characters: a-z, 0-9, and space\n     * -functionhash- 0x921dec21 (using ID for affiliate)\n     * -functionhash- 0x3ddd4698 (using address for affiliate)\n     * -functionhash- 0x685ffd83 (using name for affiliate)\n     * @param _nameString players desired name\n     * @param _affCode affiliate ID, address, or name of who refered you\n     * @param _all set to true if you want this to push your info to all games \n     * (this might cost a lot of gas)\n     */\n    function registerNameXID(string _nameString, uint256 _affCode, bool _all)\n        isHuman()\n        public\n        payable \n    {\n        // make sure name fees paid\n        require (msg.value >= registrationFee_, \"umm.....  you have to pay the name fee\");\n        \n        // filter name + condition checks\n        bytes32 _name = NameFilter.nameFilter(_nameString);\n        \n        // set up address \n        address _addr = msg.sender;\n        \n        // set up our tx event data and determine if player is new or not\n        bool _isNewPlayer = determinePID(_addr);\n        \n        // fetch player id\n        uint256 _pID = pIDxAddr_[_addr];\n        \n        // manage affiliate residuals\n        // if no affiliate code was given, no new affiliate code was given, or the \n        // player tried to use their own pID as an affiliate code, lolz\n        if (_affCode != 0 && _affCode != plyr_[_pID].laff && _affCode != _pID) \n        {\n            // update last affiliate \n            plyr_[_pID].laff = _affCode;\n        } else if (_affCode == _pID) {\n            _affCode = 0;\n        }\n        \n        // register name \n        registerNameCore(_pID, _addr, _affCode, _name, _isNewPlayer, _all);\n    }\n    \n    function registerNameXaddr(string _nameString, address _affCode, bool _all)\n        isHuman()\n        public\n        payable \n    {\n        // make sure name fees paid\n        require (msg.value >= registrationFee_, \"umm.....  you have to pay the name fee\");\n        \n        // filter name + condition checks\n        bytes32 _name = NameFilter.nameFilter(_nameString);\n        \n        // set up address \n        address _addr = msg.sender;\n        \n        // set up our tx event data and determine if player is new or not\n        bool _isNewPlayer = determinePID(_addr);\n        \n        // fetch player id\n        uint256 _pID = pIDxAddr_[_addr];\n        \n        // manage affiliate residuals\n        // if no affiliate code was given or player tried to use their own, lolz\n        uint256 _affID;\n        if (_affCode != address(0) && _affCode != _addr)\n        {\n            // get affiliate ID from aff Code \n            _affID = pIDxAddr_[_affCode];\n            \n            // if affID is not the same as previously stored \n            if (_affID != plyr_[_pID].laff)\n            {\n                // update last affiliate\n                plyr_[_pID].laff = _affID;\n            }\n        }\n        \n        // register name \n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer, _all);\n    }\n    \n    function registerNameXname(string _nameString, bytes32 _affCode, bool _all)\n        isHuman()\n        public\n        payable \n    {\n        // make sure name fees paid\n        require (msg.value >= registrationFee_, \"umm.....  you have to pay the name fee\");\n        \n        // filter name + condition checks\n        bytes32 _name = NameFilter.nameFilter(_nameString);\n        \n        // set up address \n        address _addr = msg.sender;\n        \n        // set up our tx event data and determine if player is new or not\n        bool _isNewPlayer = determinePID(_addr);\n        \n        // fetch player id\n        uint256 _pID = pIDxAddr_[_addr];\n        \n        // manage affiliate residuals\n        // if no affiliate code was given or player tried to use their own, lolz\n        uint256 _affID;\n        if (_affCode != \"\" && _affCode != _name)\n        {\n            // get affiliate ID from aff Code \n            _affID = pIDxName_[_affCode];\n            \n            // if affID is not the same as previously stored \n            if (_affID != plyr_[_pID].laff)\n            {\n                // update last affiliate\n                plyr_[_pID].laff = _affID;\n            }\n        }\n        \n        // register name \n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer, _all);\n    }\n    \n    /**\n     * @dev players, if you registered a profile, before a game was released, or\n     * set the all bool to false when you registered, use this function to push\n     * your profile to a single game.  also, if you've  updated your name, you\n     * can use this to push your name to games of your choosing.\n     * -functionhash- 0x81c5b206\n     * @param _gameID game id \n     */\n    function addMeToGame(uint256 _gameID)\n        isHuman()\n        public\n    {\n        require(_gameID <= gID_, \"silly player, that game doesn't exist yet\");\n        address _addr = msg.sender;\n        uint256 _pID = pIDxAddr_[_addr];\n        require(_pID != 0, \"hey there buddy, you dont even have an account\");\n        uint256 _totalNames = plyr_[_pID].names;\n        \n        // add players profile and most recent name\n        games_[_gameID].receivePlayerInfo(_pID, _addr, plyr_[_pID].name, plyr_[_pID].laff);\n        \n        // add list of all names\n        if (_totalNames > 1)\n            for (uint256 ii = 1; ii <= _totalNames; ii++)\n                games_[_gameID].receivePlayerNameList(_pID, plyrNameList_[_pID][ii]);\n    }\n    \n    /**\n     * @dev players, use this to push your player profile to all registered games.\n     * -functionhash- 0x0c6940ea\n     */\n    function addMeToAllGames()\n        isHuman()\n        public\n    {\n        address _addr = msg.sender;\n        uint256 _pID = pIDxAddr_[_addr];\n        require(_pID != 0, \"hey there buddy, you dont even have an account\");\n        uint256 _laff = plyr_[_pID].laff;\n        uint256 _totalNames = plyr_[_pID].names;\n        bytes32 _name = plyr_[_pID].name;\n        \n        for (uint256 i = 1; i <= gID_; i++)\n        {\n            games_[i].receivePlayerInfo(_pID, _addr, _name, _laff);\n            if (_totalNames > 1)\n                for (uint256 ii = 1; ii <= _totalNames; ii++)\n                    games_[i].receivePlayerNameList(_pID, plyrNameList_[_pID][ii]);\n        }\n                \n    }\n    \n    /**\n     * @dev players use this to change back to one of your old names.  tip, you'll\n     * still need to push that info to existing games.\n     * -functionhash- 0xb9291296\n     * @param _nameString the name you want to use \n     */\n    function useMyOldName(string _nameString)\n        isHuman()\n        public \n    {\n        // filter name, and get pID\n        bytes32 _name = _nameString.nameFilter();\n        uint256 _pID = pIDxAddr_[msg.sender];\n        \n        // make sure they own the name \n        require(plyrNames_[_pID][_name] == true, \"umm... thats not a name you own\");\n        \n        // update their current name \n        plyr_[_pID].name = _name;\n    }\n    \n//==============================================================================\n//     _ _  _ _   | _  _ . _  .\n//    (_(_)| (/_  |(_)(_||(_  . \n//=====================_|=======================================================    \n    function registerNameCore(uint256 _pID, address _addr, uint256 _affID, bytes32 _name, bool _isNewPlayer, bool _all)\n        private\n    {\n        // if names already has been used, require that current msg sender owns the name\n        if (pIDxName_[_name] != 0)\n            require(plyrNames_[_pID][_name] == true, \"sorry that names already taken\");\n        \n        // add name to player profile, registry, and name book\n        plyr_[_pID].name = _name;\n        pIDxName_[_name] = _pID;\n        if (plyrNames_[_pID][_name] == false)\n        {\n            plyrNames_[_pID][_name] = true;\n            plyr_[_pID].names++;\n            plyrNameList_[_pID][plyr_[_pID].names] = _name;\n        }\n        \n        // registration fee goes directly to community rewards\n        Jekyll_Island_Inc.deposit.value(address(this).balance)();\n        \n        // push player info to games\n        if (_all == true)\n            for (uint256 i = 1; i <= gID_; i++)\n                games_[i].receivePlayerInfo(_pID, _addr, _name, _affID);\n        \n        // fire event\n        emit onNewName(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, msg.value, now);\n    }\n//==============================================================================\n//    _|_ _  _ | _  .\n//     | (_)(_)|_\\  .\n//==============================================================================    \n    function determinePID(address _addr)\n        private\n        returns (bool)\n    {\n        if (pIDxAddr_[_addr] == 0)\n        {\n            pID_++;\n            pIDxAddr_[_addr] = pID_;\n            plyr_[pID_].addr = _addr;\n            \n            // set the new player bool to true\n            return (true);\n        } else {\n            return (false);\n        }\n    }\n//==============================================================================\n//   _   _|_ _  _ _  _ |   _ _ || _  .\n//  (/_>< | (/_| | |(_||  (_(_|||_\\  .\n//==============================================================================\n    function getPlayerID(address _addr)\n        isRegisteredGame()\n        external\n        returns (uint256)\n    {\n        determinePID(_addr);\n        return (pIDxAddr_[_addr]);\n    }\n    function getPlayerName(uint256 _pID)\n        external\n        view\n        returns (bytes32)\n    {\n        return (plyr_[_pID].name);\n    }\n    function getPlayerLAff(uint256 _pID)\n        external\n        view\n        returns (uint256)\n    {\n        return (plyr_[_pID].laff);\n    }\n    function getPlayerAddr(uint256 _pID)\n        external\n        view\n        returns (address)\n    {\n        return (plyr_[_pID].addr);\n    }\n    function getNameFee()\n        external\n        view\n        returns (uint256)\n    {\n        return(registrationFee_);\n    }\n    function registerNameXIDFromDapp(address _addr, bytes32 _name, uint256 _affCode, bool _all)\n        isRegisteredGame()\n        external\n        payable\n        returns(bool, uint256)\n    {\n        // make sure name fees paid\n        require (msg.value >= registrationFee_, \"umm.....  you have to pay the name fee\");\n        \n        // set up our tx event data and determine if player is new or not\n        bool _isNewPlayer = determinePID(_addr);\n        \n        // fetch player id\n        uint256 _pID = pIDxAddr_[_addr];\n        \n        // manage affiliate residuals\n        // if no affiliate code was given, no new affiliate code was given, or the \n        // player tried to use their own pID as an affiliate code, lolz\n        uint256 _affID = _affCode;\n        if (_affID != 0 && _affID != plyr_[_pID].laff && _affID != _pID) \n        {\n            // update last affiliate \n            plyr_[_pID].laff = _affID;\n        } else if (_affID == _pID) {\n            _affID = 0;\n        }\n        \n        // register name \n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer, _all);\n        \n        return(_isNewPlayer, _affID);\n    }\n    function registerNameXaddrFromDapp(address _addr, bytes32 _name, address _affCode, bool _all)\n        isRegisteredGame()\n        external\n        payable\n        returns(bool, uint256)\n    {\n        // make sure name fees paid\n        require (msg.value >= registrationFee_, \"umm.....  you have to pay the name fee\");\n        \n        // set up our tx event data and determine if player is new or not\n        bool _isNewPlayer = determinePID(_addr);\n        \n        // fetch player id\n        uint256 _pID = pIDxAddr_[_addr];\n        \n        // manage affiliate residuals\n        // if no affiliate code was given or player tried to use their own, lolz\n        uint256 _affID;\n        if (_affCode != address(0) && _affCode != _addr)\n        {\n            // get affiliate ID from aff Code \n            _affID = pIDxAddr_[_affCode];\n            \n            // if affID is not the same as previously stored \n            if (_affID != plyr_[_pID].laff)\n            {\n                // update last affiliate\n                plyr_[_pID].laff = _affID;\n            }\n        }\n        \n        // register name \n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer, _all);\n        \n        return(_isNewPlayer, _affID);\n    }\n    function registerNameXnameFromDapp(address _addr, bytes32 _name, bytes32 _affCode, bool _all)\n        isRegisteredGame()\n        external\n        payable\n        returns(bool, uint256)\n    {\n        // make sure name fees paid\n        require (msg.value >= registrationFee_, \"umm.....  you have to pay the name fee\");\n        \n        // set up our tx event data and determine if player is new or not\n        bool _isNewPlayer = determinePID(_addr);\n        \n        // fetch player id\n        uint256 _pID = pIDxAddr_[_addr];\n        \n        // manage affiliate residuals\n        // if no affiliate code was given or player tried to use their own, lolz\n        uint256 _affID;\n        if (_affCode != \"\" && _affCode != _name)\n        {\n            // get affiliate ID from aff Code \n            _affID = pIDxName_[_affCode];\n            \n            // if affID is not the same as previously stored \n            if (_affID != plyr_[_pID].laff)\n            {\n                // update last affiliate\n                plyr_[_pID].laff = _affID;\n            }\n        }\n        \n        // register name \n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer, _all);\n        \n        return(_isNewPlayer, _affID);\n    }\n    \n//==============================================================================\n//   _ _ _|_    _   .\n//  _\\(/_ | |_||_)  .\n//=============|================================================================\n    function addGame(address _gameAddress, string _gameNameStr)\n        onlyDevs()\n        public\n    {\n        require(gameIDs_[_gameAddress] == 0, \"derp, that games already been registered\");\n        \n        if (multiSigDev(\"addGame\") == true)\n        {deleteProposal(\"addGame\");\n            gID_++;\n            bytes32 _name = _gameNameStr.nameFilter();\n            gameIDs_[_gameAddress] = gID_;\n            gameNames_[_gameAddress] = _name;\n            games_[gID_] = PlayerBookReceiverInterface(_gameAddress);\n        \n            games_[gID_].receivePlayerInfo(1, plyr_[1].addr, plyr_[1].name, 0);\n            games_[gID_].receivePlayerInfo(2, plyr_[2].addr, plyr_[2].name, 0);\n            games_[gID_].receivePlayerInfo(3, plyr_[3].addr, plyr_[3].name, 0);\n            games_[gID_].receivePlayerInfo(4, plyr_[4].addr, plyr_[4].name, 0);\n        }\n    }\n    \n    function setRegistrationFee(uint256 _fee)\n        onlyDevs()\n        public\n    {\n        if (multiSigDev(\"setRegistrationFee\") == true)\n        {deleteProposal(\"setRegistrationFee\");\n            registrationFee_ = _fee;\n        }\n    }\n        \n} \n\n/**\n* @title -Name Filter- v0.1.9\n* ┌┬┐┌─┐┌─┐┌┬┐   ╦╦ ╦╔═╗╔╦╗  ┌─┐┬─┐┌─┐┌─┐┌─┐┌┐┌┌┬┐┌─┐\n*  │ ├┤ ├─┤│││   ║║ ║╚═╗ ║   ├─┘├┬┘├┤ └─┐├┤ │││ │ └─┐\n*  ┴ └─┘┴ ┴┴ ┴  ╚╝╚═╝╚═╝ ╩   ┴  ┴└─└─┘└─┘└─┘┘└┘ ┴ └─┘\n*                                  _____                      _____\n*                                 (, /     /)       /) /)    (, /      /)          /)\n*          ┌─┐                      /   _ (/_      // //       /  _   // _   __  _(/\n*          ├─┤                  ___/___(/_/(__(_/_(/_(/_   ___/__/_)_(/_(_(_/ (_(_(_\n*          ┴ ┴                /   /          .-/ _____   (__ /                               \n*                            (__ /          (_/ (, /                                      /)™ \n*                                                 /  __  __ __ __  _   __ __  _  _/_ _  _(/\n* ┌─┐┬─┐┌─┐┌┬┐┬ ┬┌─┐┌┬┐                          /__/ (_(__(_)/ (_/_)_(_)/ (_(_(_(__(/_(_(_\n* ├─┘├┬┘│ │ │││ ││   │                      (__ /              .-/  © Jekyll Island Inc. 2018\n* ┴  ┴└─└─┘─┴┘└─┘└─┘ ┴                                        (_/\n*              _       __    _      ____      ____  _   _    _____  ____  ___  \n*=============| |\\ |  / /\\  | |\\/| | |_ =====| |_  | | | |    | |  | |_  | |_)==============*\n*=============|_| \\| /_/--\\ |_|  | |_|__=====|_|   |_| |_|__  |_|  |_|__ |_| \\==============*\n*\n* ╔═╗┌─┐┌┐┌┌┬┐┬─┐┌─┐┌─┐┌┬┐  ╔═╗┌─┐┌┬┐┌─┐ ┌──────────┐\n* ║  │ ││││ │ ├┬┘├─┤│   │   ║  │ │ ││├┤  │ Inventor │\n* ╚═╝└─┘┘└┘ ┴ ┴└─┴ ┴└─┘ ┴   ╚═╝└─┘─┴┘└─┘ └──────────┘\n*/\nlibrary NameFilter {\n    \n    /**\n     * @dev filters name strings\n     * -converts uppercase to lower case.  \n     * -makes sure it does not start/end with a space\n     * -makes sure it does not contain multiple spaces in a row\n     * -cannot be only numbers\n     * -cannot start with 0x \n     * -restricts characters to A-Z, a-z, 0-9, and space.\n     * @return reprocessed string in bytes32 format\n     */\n    function nameFilter(string _input)\n        internal\n        pure\n        returns(bytes32)\n    {\n        bytes memory _temp = bytes(_input);\n        uint256 _length = _temp.length;\n        \n        //sorry limited to 32 characters\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\n        // make sure it doesnt start with or end with space\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\n        // make sure first two characters are not 0x\n        if (_temp[0] == 0x30)\n        {\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\n        }\n        \n        // create a bool to track if we have a non number character\n        bool _hasNonNumber;\n        \n        // convert & check\n        for (uint256 i = 0; i < _length; i++)\n        {\n            // if its uppercase A-Z\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\n            {\n                // convert to lower case a-z\n                _temp[i] = byte(uint(_temp[i]) + 32);\n                \n                // we have a non number\n                if (_hasNonNumber == false)\n                    _hasNonNumber = true;\n            } else {\n                require\n                (\n                    // require character is a space\n                    _temp[i] == 0x20 || \n                    // OR lowercase a-z\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\n                    // or 0-9\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\n                    \"string contains invalid characters\"\n                );\n                // make sure theres not 2x spaces in a row\n                if (_temp[i] == 0x20)\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\n                \n                // see if we have a character other than a number\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\n                    _hasNonNumber = true;    \n            }\n        }\n        \n        require(_hasNonNumber == true, \"string cannot be only numbers\");\n        \n        bytes32 _ret;\n        assembly {\n            _ret := mload(add(_temp, 32))\n        }\n        return (_ret);\n    }\n}\n\n/**\n * @title SafeMath v0.1.9\n * @dev Math operations with safety checks that throw on error\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\n * - added sqrt\n * - added sq\n * - added pwr \n * - changed asserts to requires with error log outputs\n * - removed div, its useless\n */\nlibrary SafeMath {\n    \n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) \n        internal \n        pure \n        returns (uint256 c) \n    {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"SafeMath mul failed\");\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256) \n    {\n        require(b <= a, \"SafeMath sub failed\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c) \n    {\n        c = a + b;\n        require(c >= a, \"SafeMath add failed\");\n        return c;\n    }\n    \n    /**\n     * @dev gives square root of given x.\n     */\n    function sqrt(uint256 x)\n        internal\n        pure\n        returns (uint256 y) \n    {\n        uint256 z = ((add(x,1)) / 2);\n        y = x;\n        while (z < y) \n        {\n            y = z;\n            z = ((add((x / z),z)) / 2);\n        }\n    }\n    \n    /**\n     * @dev gives square. multiplies x by x\n     */\n    function sq(uint256 x)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (mul(x,x));\n    }\n    \n    /**\n     * @dev x to the power of y \n     */\n    function pwr(uint256 x, uint256 y)\n        internal \n        pure \n        returns (uint256)\n    {\n        if (x==0)\n            return (0);\n        else if (y==0)\n            return (1);\n        else \n        {\n            uint256 z = x;\n            for (uint256 i=1; i < y; i++)\n                z = mul(z,x);\n            return (z);\n        }\n    }\n}\n\n/** @title -MSFun- v0.2.4\n * ┌┬┐┌─┐┌─┐┌┬┐   ╦╦ ╦╔═╗╔╦╗  ┌─┐┬─┐┌─┐┌─┐┌─┐┌┐┌┌┬┐┌─┐\n *  │ ├┤ ├─┤│││   ║║ ║╚═╗ ║   ├─┘├┬┘├┤ └─┐├┤ │││ │ └─┐\n *  ┴ └─┘┴ ┴┴ ┴  ╚╝╚═╝╚═╝ ╩   ┴  ┴└─└─┘└─┘└─┘┘└┘ ┴ └─┘\n *                                  _____                      _____\n *                                 (, /     /)       /) /)    (, /      /)          /)\n *          ┌─┐                      /   _ (/_      // //       /  _   // _   __  _(/\n *          ├─┤                  ___/___(/_/(__(_/_(/_(/_   ___/__/_)_(/_(_(_/ (_(_(_\n *          ┴ ┴                /   /          .-/ _____   (__ /                               \n *                            (__ /          (_/ (, /                                      /)™ \n *                                                 /  __  __ __ __  _   __ __  _  _/_ _  _(/\n * ┌─┐┬─┐┌─┐┌┬┐┬ ┬┌─┐┌┬┐                          /__/ (_(__(_)/ (_/_)_(_)/ (_(_(_(__(/_(_(_\n * ├─┘├┬┘│ │ │││ ││   │                      (__ /              .-/  © Jekyll Island Inc. 2018\n * ┴  ┴└─└─┘─┴┘└─┘└─┘ ┴                                        (_/\n *  _           _             _  _  _  _             _  _  _  _  _                                      \n *=(_) _     _ (_)==========_(_)(_)(_)(_)_==========(_)(_)(_)(_)(_)================================*\n * (_)(_)   (_)(_)         (_)          (_)         (_)       _         _    _  _  _  _                 \n * (_) (_)_(_) (_)         (_)_  _  _  _            (_) _  _ (_)       (_)  (_)(_)(_)(_)_               \n * (_)   (_)   (_)           (_)(_)(_)(_)_          (_)(_)(_)(_)       (_)  (_)        (_)              \n * (_)         (_)  _  _    _           (_)  _  _   (_)      (_)       (_)  (_)        (_)  _  _        \n *=(_)=========(_)=(_)(_)==(_)_  _  _  _(_)=(_)(_)==(_)======(_)_  _  _(_)_ (_)========(_)=(_)(_)==*\n * (_)         (_) (_)(_)    (_)(_)(_)(_)   (_)(_)  (_)        (_)(_)(_) (_)(_)        (_) (_)(_)\n *\n * ╔═╗┌─┐┌┐┌┌┬┐┬─┐┌─┐┌─┐┌┬┐  ╔═╗┌─┐┌┬┐┌─┐ ┌──────────┐\n * ║  │ ││││ │ ├┬┘├─┤│   │   ║  │ │ ││├┤  │ Inventor │\n * ╚═╝└─┘┘└┘ ┴ ┴└─┴ ┴└─┘ ┴   ╚═╝└─┘─┴┘└─┘ └──────────┘\n *  \n *         ┌──────────────────────────────────────────────────────────────────────┐\n *         │ MSFun, is an importable library that gives your contract the ability │\n *         │ add multiSig requirement to functions.                               │\n *         └──────────────────────────────────────────────────────────────────────┘\n *                                ┌────────────────────┐\n *                                │ Setup Instructions │\n *                                └────────────────────┘\n * (Step 1) import the library into your contract\n * \n *    import \"./MSFun.sol\";\n *\n * (Step 2) set up the signature data for msFun\n * \n *     MSFun.Data private msData;\n *                                ┌────────────────────┐\n *                                │ Usage Instructions │\n *                                └────────────────────┘\n * at the beginning of a function\n * \n *     function functionName() \n *     {\n *         if (MSFun.multiSig(msData, required signatures, \"functionName\") == true)\n *         {\n *             MSFun.deleteProposal(msData, \"functionName\");\n * \n *             // put function body here \n *         }\n *     }\n *                           ┌────────────────────────────────┐\n *                           │ Optional Wrappers For TeamJust │\n *                           └────────────────────────────────┘\n * multiSig wrapper function (cuts down on inputs, improves readability)\n * this wrapper is HIGHLY recommended\n * \n *     function multiSig(bytes32 _whatFunction) private returns (bool) {return(MSFun.multiSig(msData, TeamJust.requiredSignatures(), _whatFunction));}\n *     function multiSigDev(bytes32 _whatFunction) private returns (bool) {return(MSFun.multiSig(msData, TeamJust.requiredDevSignatures(), _whatFunction));}\n *\n * wrapper for delete proposal (makes code cleaner)\n *     \n *     function deleteProposal(bytes32 _whatFunction) private {MSFun.deleteProposal(msData, _whatFunction);}\n *                             ┌────────────────────────────┐\n *                             │ Utility & Vanity Functions │\n *                             └────────────────────────────┘\n * delete any proposal is highly recommended.  without it, if an admin calls a multiSig\n * function, with argument inputs that the other admins do not agree upon, the function\n * can never be executed until the undesirable arguments are approved.\n * \n *     function deleteAnyProposal(bytes32 _whatFunction) onlyDevs() public {MSFun.deleteProposal(msData, _whatFunction);}\n * \n * for viewing who has signed a proposal & proposal data\n *     \n *     function checkData(bytes32 _whatFunction) onlyAdmins() public view returns(bytes32, uint256) {return(MSFun.checkMsgData(msData, _whatFunction), MSFun.checkCount(msData, _whatFunction));}\n *\n * lets you check address of up to 3 signers (address)\n * \n *     function checkSignersByAddress(bytes32 _whatFunction, uint256 _signerA, uint256 _signerB, uint256 _signerC) onlyAdmins() public view returns(address, address, address) {return(MSFun.checkSigner(msData, _whatFunction, _signerA), MSFun.checkSigner(msData, _whatFunction, _signerB), MSFun.checkSigner(msData, _whatFunction, _signerC));}\n *\n * same as above but will return names in string format.\n *\n *     function checkSignersByName(bytes32 _whatFunction, uint256 _signerA, uint256 _signerB, uint256 _signerC) onlyAdmins() public view returns(bytes32, bytes32, bytes32) {return(TeamJust.adminName(MSFun.checkSigner(msData, _whatFunction, _signerA)), TeamJust.adminName(MSFun.checkSigner(msData, _whatFunction, _signerB)), TeamJust.adminName(MSFun.checkSigner(msData, _whatFunction, _signerC)));}\n *                             ┌──────────────────────────┐\n *                             │ Functions In Depth Guide │\n *                             └──────────────────────────┘\n * In the following examples, the Data is the proposal set for this library.  And\n * the bytes32 is the name of the function.\n *\n * MSFun.multiSig(Data, uint256, bytes32) - Manages creating/updating multiSig \n *      proposal for the function being called.  The uint256 is the required \n *      number of signatures needed before the multiSig will return true.  \n *      Upon first call, multiSig will create a proposal and store the arguments \n *      passed with the function call as msgData.  Any admins trying to sign the \n *      function call will need to send the same argument values. Once required\n *      number of signatures is reached this will return a bool of true.\n * \n * MSFun.deleteProposal(Data, bytes32) - once multiSig unlocks the function body,\n *      you will want to delete the proposal data.  This does that.\n *\n * MSFun.checkMsgData(Data, bytes32) - checks the message data for any given proposal \n * \n * MSFun.checkCount(Data, bytes32) - checks the number of admins that have signed\n *      the proposal \n * \n * MSFun.checkSigners(data, bytes32, uint256) - checks the address of a given signer.\n *      the uint256, is the log number of the signer (ie 1st signer, 2nd signer)\n */\n\nlibrary MSFun {\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    // DATA SETS\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    // contact data setup\n    struct Data \n    {\n        mapping (bytes32 => ProposalData) proposal_;\n    }\n    struct ProposalData \n    {\n        // a hash of msg.data \n        bytes32 msgData;\n        // number of signers\n        uint256 count;\n        // tracking of wither admins have signed\n        mapping (address => bool) admin;\n        // list of admins who have signed\n        mapping (uint256 => address) log;\n    }\n    \n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    // MULTI SIG FUNCTIONS\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    function multiSig(Data storage self, uint256 _requiredSignatures, bytes32 _whatFunction)\n        internal\n        returns(bool) \n    {\n        // our proposal key will be a hash of our function name + our contracts address \n        // by adding our contracts address to this, we prevent anyone trying to circumvent\n        // the proposal's security via external calls.\n        bytes32 _whatProposal = whatProposal(_whatFunction);\n        \n        // this is just done to make the code more readable.  grabs the signature count\n        uint256 _currentCount = self.proposal_[_whatProposal].count;\n        \n        // store the address of the person sending the function call.  we use msg.sender \n        // here as a layer of security.  in case someone imports our contract and tries to \n        // circumvent function arguments.  still though, our contract that imports this\n        // library and calls multisig, needs to use onlyAdmin modifiers or anyone who\n        // calls the function will be a signer. \n        address _whichAdmin = msg.sender;\n        \n        // prepare our msg data.  by storing this we are able to verify that all admins\n        // are approving the same argument input to be executed for the function.  we hash \n        // it and store in bytes32 so its size is known and comparable\n        bytes32 _msgData = keccak256(msg.data);\n        \n        // check to see if this is a new execution of this proposal or not\n        if (_currentCount == 0)\n        {\n            // if it is, lets record the original signers data\n            self.proposal_[_whatProposal].msgData = _msgData;\n            \n            // record original senders signature\n            self.proposal_[_whatProposal].admin[_whichAdmin] = true;        \n            \n            // update log (used to delete records later, and easy way to view signers)\n            // also useful if the calling function wants to give something to a \n            // specific signer.  \n            self.proposal_[_whatProposal].log[_currentCount] = _whichAdmin;  \n            \n            // track number of signatures\n            self.proposal_[_whatProposal].count += 1;  \n            \n            // if we now have enough signatures to execute the function, lets\n            // return a bool of true.  we put this here in case the required signatures\n            // is set to 1.\n            if (self.proposal_[_whatProposal].count == _requiredSignatures) {\n                return(true);\n            }            \n        // if its not the first execution, lets make sure the msgData matches\n        } else if (self.proposal_[_whatProposal].msgData == _msgData) {\n            // msgData is a match\n            // make sure admin hasnt already signed\n            if (self.proposal_[_whatProposal].admin[_whichAdmin] == false) \n            {\n                // record their signature\n                self.proposal_[_whatProposal].admin[_whichAdmin] = true;        \n                \n                // update log (used to delete records later, and easy way to view signers)\n                self.proposal_[_whatProposal].log[_currentCount] = _whichAdmin;  \n                \n                // track number of signatures\n                self.proposal_[_whatProposal].count += 1;  \n            }\n            \n            // if we now have enough signatures to execute the function, lets\n            // return a bool of true.\n            // we put this here for a few reasons.  (1) in normal operation, if \n            // that last recorded signature got us to our required signatures.  we \n            // need to return bool of true.  (2) if we have a situation where the \n            // required number of signatures was adjusted to at or lower than our current \n            // signature count, by putting this here, an admin who has already signed,\n            // can call the function again to make it return a true bool.  but only if\n            // they submit the correct msg data\n            if (self.proposal_[_whatProposal].count == _requiredSignatures) {\n                return(true);\n            }\n        }\n    }\n    \n    \n    // deletes proposal signature data after successfully executing a multiSig function\n    function deleteProposal(Data storage self, bytes32 _whatFunction)\n        internal\n    {\n        //done for readability sake\n        bytes32 _whatProposal = whatProposal(_whatFunction);\n        address _whichAdmin;\n        \n        //delete the admins votes & log.   i know for loops are terrible.  but we have to do this \n        //for our data stored in mappings.  simply deleting the proposal itself wouldn't accomplish this.\n        for (uint256 i=0; i < self.proposal_[_whatProposal].count; i++) {\n            _whichAdmin = self.proposal_[_whatProposal].log[i];\n            delete self.proposal_[_whatProposal].admin[_whichAdmin];\n            delete self.proposal_[_whatProposal].log[i];\n        }\n        //delete the rest of the data in the record\n        delete self.proposal_[_whatProposal];\n    }\n    \n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    // HELPER FUNCTIONS\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n    function whatProposal(bytes32 _whatFunction)\n        private\n        view\n        returns(bytes32)\n    {\n        return(keccak256(abi.encodePacked(_whatFunction,this)));\n    }\n    \n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    // VANITY FUNCTIONS\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    // returns a hashed version of msg.data sent by original signer for any given function\n    function checkMsgData (Data storage self, bytes32 _whatFunction)\n        internal\n        view\n        returns (bytes32 msg_data)\n    {\n        bytes32 _whatProposal = whatProposal(_whatFunction);\n        return (self.proposal_[_whatProposal].msgData);\n    }\n    \n    // returns number of signers for any given function\n    function checkCount (Data storage self, bytes32 _whatFunction)\n        internal\n        view\n        returns (uint256 signature_count)\n    {\n        bytes32 _whatProposal = whatProposal(_whatFunction);\n        return (self.proposal_[_whatProposal].count);\n    }\n    \n    // returns address of an admin who signed for any given function\n    function checkSigner (Data storage self, bytes32 _whatFunction, uint256 _signer)\n        internal\n        view\n        returns (address signer)\n    {\n        require(_signer > 0, \"MSFun checkSigner failed - 0 not allowed\");\n        bytes32 _whatProposal = whatProposal(_whatFunction);\n        return (self.proposal_[_whatProposal].log[_signer - 1]);\n    }\n}",
  "bytecode": ""
}