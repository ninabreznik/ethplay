{
  "address": "0xfbf797e8cfa43ae5ec7b5ad2d7c2f18c2cb2cd0c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GMBCToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-01\n*/\n\npragma solidity ^0.4.18;\n\n// File: source\\zeppelin-solidity\\contracts\\math\\SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: source\\zeppelin-solidity\\contracts\\ownership\\Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));    \n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;    \n  }\n\n}\n\n// File: source\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: source\\zeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n// File: source\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: source\\zeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: source\\CappedMintableToken.sol\n\n/**\n * @title Mintable token with an end-of-mint date and token cap\n * Also transfer / transferFrom is available only after end-of-mint date\n * Based on zeppelin-solidity MintableToken & CappedToken\n */\ncontract CappedMintableToken is StandardToken, Ownable {\n  using SafeMath for uint256;\n\n  event Mint(address indexed to, uint256 amount);\n\n  modifier canMint() {\n    require(now <= publicSaleEnd);\n    _;\n  }\n\n  modifier onlyOwnerOrCrowdsale() {\n    require(msg.sender == owner || msg.sender == crowdsale);\n    _;\n  }\n\n  uint256 public publicSaleEnd;\n  uint256 public cap;\n  address public crowdsale;\n\n\tfunction setCrowdsale(address _crowdsale) public onlyOwner {\n\t\tcrowdsale = _crowdsale;\n\t}\n\n  \n\n  function CappedMintableToken(uint256 _cap, uint256 _publicSaleEnd) public {\n    require(_publicSaleEnd > now);\n    require(_cap > 0);\n\n    publicSaleEnd = _publicSaleEnd;\n    cap = _cap;\n  }\n\n  /* StartICO integration, lockTime is ignored (ignore the warning) */\n  function send(address target, uint256 mintedAmount, uint256 lockTime) public onlyOwnerOrCrowdsale {\n    mint(target, mintedAmount);\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwnerOrCrowdsale canMint public returns (bool) {\n    require(totalSupply_.add(_amount) <= cap);\n    require(_amount > 0);\n\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  \n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(now > publicSaleEnd);\n\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(now > publicSaleEnd);\n\n    return super.transferFrom(_from, _to, _value);\n  }\n  \n}\n\n// File: source\\zeppelin-solidity\\contracts\\ownership\\HasNoEther.sol\n\n/**\n * @title Contracts that should not own Ether\n * @author Remco Bloemen <[email protected]π.com>\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n * in the contract, it will allow the owner to reclaim this ether.\n * @notice Ether can still be send to this contract by:\n * calling functions labeled `payable`\n * `selfdestruct(contract_address)`\n * mining directly to the contract address\n*/\ncontract HasNoEther is Ownable {\n\n  /**\n  * @dev Constructor that rejects incoming Ether\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n  * we could use assembly to access msg.value.\n  */\n  function HasNoEther() public payable {\n    require(msg.value == 0);\n  }\n\n  /**\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\n   */\n  function() external {\n  }\n\n  /**\n   * @dev Transfer all Ether held by the contract to the owner.\n   */\n  function reclaimEther() external onlyOwner {\n    assert(owner.send(this.balance));\n  }\n}\n\n// File: source\\GMBCToken.sol\n\ncontract GMBCToken is HasNoEther, CappedMintableToken {\n\tusing SafeMath for uint256;\n\n\tstring public constant name = \"Gamblica Token\";\n\tstring public constant symbol = \"GMBC\";\n\tuint8 public constant decimals = 18;\n\n\tuint256 public TOKEN_SALE_CAP = 600000000 * (10 ** uint256(decimals));\t// 60%, 40% will be minted on finalize\n\tuint256 public END_OF_MINT_DATE = 1527811200;\t// Fri, 01 Jun 2018 00:00:00 +0000 in RFC 822, 1036, 1123, 2822\n\n\tbool public finalized = false;\n\n\t/**\n\t * GMBCToken\n\t * https://gamblica.com \n\t * Official Gamblica Coin (Token)\n\t */\n\tfunction GMBCToken() public \n\t\tCappedMintableToken(TOKEN_SALE_CAP, END_OF_MINT_DATE)\n\t{}\n\n\t/**\n\t\tPerforms the final stage of the token sale, \n\t\tmints additional 40% of token fund,\n\t\ttransfers minted tokens to an external fund\n\t\t(20% game fund, 10% team, 5% advisory board, 3% bounty, 2% founders)\n\t*/\n\tfunction finalize(address _fund) public onlyOwner returns (bool) {\n\t\trequire(!finalized && now > publicSaleEnd);\t\t\n\t\trequire(_fund != address(0));\n\n\t\tuint256 amount = totalSupply_.mul(4).div(6);\t// +40% \n\n\t\ttotalSupply_ = totalSupply_.add(amount);\n    \tbalances[_fund] = balances[_fund].add(amount);\n    \tMint(_fund, amount);\n    \tTransfer(address(0), _fund, amount);\n    \n\t\tfinalized = true;\n\n\t\treturn true;\n\t}\n\n\n\t\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsale\",\"type\":\"address\"}],\"name\":\"setCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fund\",\"type\":\"address\"}],\"name\":\"finalize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"END_OF_MINT_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SALE_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicSaleEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526b01f04ef12cb04cf158000000600755635b108c806008556009805460ff19169055341561003157600080fd5b60075460085460038054600160a060020a03191633600160a060020a0316179055341561005d57600080fd5b42811161006957600080fd5b6000821161007657600080fd5b600455600555610f118061008b6000396000f30060606040526004361061013d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461014a578063095ea7b3146101d457806318160ddd1461020a57806323b872dd1461022f578063313ce56714610257578063355274ea1461028057806340c10f1914610293578063483a20b2146102b55780634ef39b75146102d4578063568c2163146102f3578063661884631461030657806367df93f21461032857806370a082311461034d5780638da5cb5b1461036c57806390de9ed91461039b57806395d89b41146103ae5780639c1e03a0146103c15780639f727c27146103d4578063a9059cbb146103e7578063b3f05b9714610409578063d73dd6231461041c578063dd62ed3e1461043e578063ec9b5cb214610463578063f2fde38b14610476575b341561014857600080fd5b005b341561015557600080fd5b61015d610495565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610199578082015183820152602001610181565b50505050905090810190601f1680156101c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101df57600080fd5b6101f6600160a060020a03600435166024356104cc565b604051901515815260200160405180910390f35b341561021557600080fd5b61021d610538565b60405190815260200160405180910390f35b341561023a57600080fd5b6101f6600160a060020a036004358116906024351660443561053e565b341561026257600080fd5b61026a610562565b60405160ff909116815260200160405180910390f35b341561028b57600080fd5b61021d610567565b341561029e57600080fd5b6101f6600160a060020a036004351660243561056d565b34156102c057600080fd5b610148600160a060020a03600435166106aa565b34156102df57600080fd5b6101f6600160a060020a03600435166106f4565b34156102fe57600080fd5b61021d610848565b341561031157600080fd5b6101f6600160a060020a036004351660243561084e565b341561033357600080fd5b610148600160a060020a036004351660243560443561094a565b341561035857600080fd5b61021d600160a060020a0360043516610990565b341561037757600080fd5b61037f6109ab565b604051600160a060020a03909116815260200160405180910390f35b34156103a657600080fd5b61021d6109ba565b34156103b957600080fd5b61015d6109c0565b34156103cc57600080fd5b61037f6109f7565b34156103df57600080fd5b610148610a06565b34156103f257600080fd5b6101f6600160a060020a0360043516602435610a59565b341561041457600080fd5b6101f6610a7b565b341561042757600080fd5b6101f6600160a060020a0360043516602435610a84565b341561044957600080fd5b61021d600160a060020a0360043581169060243516610b28565b341561046e57600080fd5b61021d610b53565b341561048157600080fd5b610148600160a060020a0360043516610b59565b60408051908101604052600e81527f47616d626c69636120546f6b656e000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60015490565b600454600090421161054f57600080fd5b61055a848484610bf4565b949350505050565b601281565b60055481565b60035460009033600160a060020a039081169116148061059b575060065433600160a060020a039081169116145b15156105a657600080fd5b6004544211156105b557600080fd5b6005546001546105cb908463ffffffff610d6216565b11156105d657600080fd5b600082116105e357600080fd5b6001546105f6908363ffffffff610d6216565b600155600160a060020a038316600090815260208190526040902054610622908363ffffffff610d6216565b600160a060020a0384166000818152602081905260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a0383166000600080516020610ec68339815191528460405190815260200160405180910390a350600192915050565b60035433600160a060020a039081169116146106c557600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600090819033600160a060020a0390811691161461071457600080fd5b60095460ff16158015610728575060045442115b151561073357600080fd5b600160a060020a038316151561074857600080fd5b61076f60066107636004600154610d7190919063ffffffff16565b9063ffffffff610d9c16565b600154909150610785908263ffffffff610d6216565b600155600160a060020a0383166000908152602081905260409020546107b1908263ffffffff610d6216565b600160a060020a0384166000818152602081905260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859083905190815260200160405180910390a2600160a060020a0383166000600080516020610ec68339815191528360405190815260200160405180910390a36009805460ff19166001908117909155915050919050565b60085481565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156108ab57600160a060020a0333811660009081526002602090815260408083209388168352929052908120556108e2565b6108bb818463ffffffff610db316565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b60035433600160a060020a0390811691161480610975575060065433600160a060020a039081169116145b151561098057600080fd5b61098a838361056d565b50505050565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a031681565b60075481565b60408051908101604052600481527f474d424300000000000000000000000000000000000000000000000000000000602082015281565b600654600160a060020a031681565b60035433600160a060020a03908116911614610a2157600080fd5b600354600160a060020a039081169030163180156108fc0290604051600060405180830381858888f193505050501515610a5757fe5b565b6004546000904211610a6a57600080fd5b610a748383610dc5565b9392505050565b60095460ff1681565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610abc908363ffffffff610d6216565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60045481565b60035433600160a060020a03908116911614610b7457600080fd5b600160a060020a0381161515610b8957600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a0383161515610c0b57600080fd5b600160a060020a038416600090815260208190526040902054821115610c3057600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115610c6357600080fd5b600160a060020a038416600090815260208190526040902054610c8c908363ffffffff610db316565b600160a060020a038086166000908152602081905260408082209390935590851681522054610cc1908363ffffffff610d6216565b600160a060020a0380851660009081526020818152604080832094909455878316825260028152838220339093168252919091522054610d07908363ffffffff610db316565b600160a060020a0380861660008181526002602090815260408083203386168452909152908190209390935590851691600080516020610ec68339815191529085905190815260200160405180910390a35060019392505050565b600082820183811015610a7457fe5b600080831515610d845760009150610943565b50828202828482811515610d9457fe5b0414610a7457fe5b6000808284811515610daa57fe5b04949350505050565b600082821115610dbf57fe5b50900390565b6000600160a060020a0383161515610ddc57600080fd5b600160a060020a033316600090815260208190526040902054821115610e0157600080fd5b600160a060020a033316600090815260208190526040902054610e2a908363ffffffff610db316565b600160a060020a033381166000908152602081905260408082209390935590851681522054610e5f908363ffffffff610d6216565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a0316600080516020610ec68339815191528460405190815260200160405180910390a3506001929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820897f66552c3938215ed1229d4adc421b5cb61c2ad808c2970165e1e0b07b02350029"
}