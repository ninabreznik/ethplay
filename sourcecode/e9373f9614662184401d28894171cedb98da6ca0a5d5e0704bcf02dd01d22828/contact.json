{
  "address": "0x51bedad07ab8c2470556d565f98307d89380a6da",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NamePublicKey",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\npragma solidity >=0.5.4 <0.6.0;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n\t/**\n\t * @dev Multiplies two numbers, throws on overflow.\n\t */\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tc = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Integer division of two numbers, truncating the quotient.\n\t */\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\t// uint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn a / b;\n\t}\n\n\t/**\n\t * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n\t */\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\t/**\n\t * @dev Adds two numbers, throws on overflow.\n\t */\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\tc = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\n\ninterface INameTAOPosition {\n\tfunction senderIsAdvocate(address _sender, address _id) external view returns (bool);\n\tfunction senderIsListener(address _sender, address _id) external view returns (bool);\n\tfunction senderIsSpeaker(address _sender, address _id) external view returns (bool);\n\tfunction senderIsPosition(address _sender, address _id) external view returns (bool);\n\tfunction getAdvocate(address _id) external view returns (address);\n\tfunction nameIsAdvocate(address _nameId, address _id) external view returns (bool);\n\tfunction nameIsPosition(address _nameId, address _id) external view returns (bool);\n\tfunction initialize(address _id, address _advocateId, address _listenerId, address _speakerId) external returns (bool);\n\tfunction determinePosition(address _sender, address _id) external view returns (uint256);\n}\n\n\ninterface INameAccountRecovery {\n\tfunction isCompromised(address _id) external view returns (bool);\n}\n\n\ninterface INameFactory {\n\tfunction nonces(address _nameId) external view returns (uint256);\n\tfunction incrementNonce(address _nameId) external returns (uint256);\n\tfunction ethAddressToNameId(address _ethAddress) external view returns (address);\n\tfunction setNameNewAddress(address _id, address _newAddress) external returns (bool);\n\tfunction nameIdToEthAddress(address _nameId) external view returns (address);\n}\n\n\ninterface INamePublicKey {\n\tfunction initialize(address _id, address _defaultKey, address _writerKey) external returns (bool);\n\n\tfunction isKeyExist(address _id, address _key) external view returns (bool);\n\n\tfunction getDefaultKey(address _id) external view returns (address);\n\n\tfunction whitelistAddKey(address _id, address _key) external returns (bool);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontract TokenERC20 {\n\t// Public variables of the token\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals = 18;\n\t// 18 decimals is the strongly suggested default, avoid changing it\n\tuint256 public totalSupply;\n\n\t// This creates an array with all balances\n\tmapping (address => uint256) public balanceOf;\n\tmapping (address => mapping (address => uint256)) public allowance;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\t// This notifies clients about the amount burnt\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * Constructor function\n\t *\n\t * Initializes contract with initial supply tokens to the creator of the contract\n\t */\n\tconstructor (uint256 initialSupply, string memory tokenName, string memory tokenSymbol) public {\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n\t\tname = tokenName;                                   // Set the name for display purposes\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\n\t}\n\n\t/**\n\t * Internal transfer, only can be called by this contract\n\t */\n\tfunction _transfer(address _from, address _to, uint _value) internal {\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(_to != address(0));\n\t\t// Check if the sender has enough\n\t\trequire(balanceOf[_from] >= _value);\n\t\t// Check for overflows\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\n\t\t// Save this for an assertion in the future\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t\t// Subtract from the sender\n\t\tbalanceOf[_from] -= _value;\n\t\t// Add the same to the recipient\n\t\tbalanceOf[_to] += _value;\n\t\temit Transfer(_from, _to, _value);\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\t}\n\n\t/**\n\t * Transfer tokens\n\t *\n\t * Send `_value` tokens to `_to` from your account\n\t *\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n\t\t_transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Transfer tokens from other address\n\t *\n\t * Send `_value` tokens to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\n\t\tallowance[_from][msg.sender] -= _value;\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t */\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\tallowance[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address and notify\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t * @param _extraData some extra information to send to the approved contract\n\t */\n\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n\t\ttokenRecipient spender = tokenRecipient(_spender);\n\t\tif (approve(_spender, _value)) {\n\t\t\tspender.receiveApproval(msg.sender, _value, address(this), _extraData);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Destroy tokens\n\t *\n\t * Remove `_value` tokens from the system irreversibly\n\t *\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burn(uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\n\t\ttotalSupply -= _value;                      // Updates totalSupply\n\t\temit Burn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Destroy tokens from other account\n\t *\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n\t\ttotalSupply -= _value;                              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n}\n\n\n/**\n * @title TAO\n */\ncontract TAO {\n\tusing SafeMath for uint256;\n\n\taddress public vaultAddress;\n\tstring public name;\t\t\t\t// the name for this TAO\n\taddress public originId;\t\t// the ID of the Name that created this TAO. If Name, it's the eth address\n\n\t// TAO's data\n\tstring public datHash;\n\tstring public database;\n\tstring public keyValue;\n\tbytes32 public contentId;\n\n\t/**\n\t * 0 = TAO\n\t * 1 = Name\n\t */\n\tuint8 public typeId;\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _vaultAddress\n\t) public {\n\t\tname = _name;\n\t\toriginId = _originId;\n\t\tdatHash = _datHash;\n\t\tdatabase = _database;\n\t\tkeyValue = _keyValue;\n\t\tcontentId = _contentId;\n\n\t\t// Creating TAO\n\t\ttypeId = 0;\n\n\t\tvaultAddress = _vaultAddress;\n\t}\n\n\t/**\n\t * @dev Checks if calling address is Vault contract\n\t */\n\tmodifier onlyVault {\n\t\trequire (msg.sender == vaultAddress);\n\t\t_;\n\t}\n\n\t/**\n\t * Will receive any ETH sent\n\t */\n\tfunction () external payable {\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ETH from this TAO to `_recipient`\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\t_recipient.transfer(_amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ERC20 Token from this TAO to `_recipient`\n\t * @param _erc20TokenAddress The address of ERC20 Token\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferERC20(address _erc20TokenAddress, address _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\tTokenERC20 _erc20 = TokenERC20(_erc20TokenAddress);\n\t\t_erc20.transfer(_recipient, _amount);\n\t\treturn true;\n\t}\n}\n\n\n\n\n/**\n * @title Name\n */\ncontract Name is TAO {\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name, address _originId, string memory _datHash, string memory _database, string memory _keyValue, bytes32 _contentId, address _vaultAddress)\n\t\tTAO (_name, _originId, _datHash, _database, _keyValue, _contentId, _vaultAddress) public {\n\t\t// Creating Name\n\t\ttypeId = 1;\n\t}\n}\n\n\n\n\n/**\n * @title AOLibrary\n */\nlibrary AOLibrary {\n\tusing SafeMath for uint256;\n\n\tuint256 constant private _MULTIPLIER_DIVISOR = 10 ** 6; // 1000000 = 1\n\tuint256 constant private _PERCENTAGE_DIVISOR = 10 ** 6; // 100% = 1000000\n\n\t/**\n\t * @dev Check whether or not the given TAO ID is a TAO\n\t * @param _taoId The ID of the TAO\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isTAO(address _taoId) public view returns (bool) {\n\t\treturn (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);\n\t}\n\n\t/**\n\t * @dev Check whether or not the given Name ID is a Name\n\t * @param _nameId The ID of the Name\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isName(address _nameId) public view returns (bool) {\n\t\treturn (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);\n\t}\n\n\t/**\n\t * @dev Check if `_tokenAddress` is a valid ERC20 Token address\n\t * @param _tokenAddress The ERC20 Token address to check\n\t */\n\tfunction isValidERC20TokenAddress(address _tokenAddress) public view returns (bool) {\n\t\tif (_tokenAddress == address(0)) {\n\t\t\treturn false;\n\t\t}\n\t\tTokenERC20 _erc20 = TokenERC20(_tokenAddress);\n\t\treturn (_erc20.totalSupply() >= 0 && bytes(_erc20.name()).length > 0 && bytes(_erc20.symbol()).length > 0);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t * @param _sender The address to check\n\t * @param _theAO The AO address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t * @return true if yes, false otherwise\n\t */\n\tfunction isTheAO(address _sender, address _theAO, address _nameTAOPositionAddress) public view returns (bool) {\n\t\treturn (_sender == _theAO ||\n\t\t\t(\n\t\t\t\t(isTAO(_theAO) || isName(_theAO)) &&\n\t\t\t\t_nameTAOPositionAddress != address(0) &&\n\t\t\t\tINameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate percentage.\n\t *\t\tPercentage stored throughout AO contracts covers 4 decimals,\n\t *\t\tso 1% is 10000, 1.25% is 12500, etc\n\t */\n\tfunction PERCENTAGE_DIVISOR() public pure returns (uint256) {\n\t\treturn _PERCENTAGE_DIVISOR;\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate multiplier.\n\t *\t\tMultiplier stored throughout AO contracts covers 6 decimals,\n\t *\t\tso 1 is 1000000, 0.023 is 23000, etc\n\t */\n\tfunction MULTIPLIER_DIVISOR() public pure returns (uint256) {\n\t\treturn _MULTIPLIER_DIVISOR;\n\t}\n\n\t/**\n\t * @dev deploy a TAO\n\t * @param _name The name of the TAO\n\t * @param _originId The Name ID the creates the TAO\n\t * @param _datHash The datHash of this TAO\n\t * @param _database The database for this TAO\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this TAO\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployTAO(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (TAO _tao) {\n\t\t_tao = new TAO(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev deploy a Name\n\t * @param _name The name of the Name\n\t * @param _originId The eth address the creates the Name\n\t * @param _datHash The datHash of this Name\n\t * @param _database The database for this Name\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this Name\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployName(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (Name _myName) {\n\t\t_myName = new Name(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev Calculate the new weighted multiplier when adding `_additionalPrimordialAmount` at `_additionalWeightedMultiplier` to the current `_currentPrimordialBalance` at `_currentWeightedMultiplier`\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _currentPrimordialBalance Account's current primordial ion balance\n\t * @param _additionalWeightedMultiplier The weighted multiplier to be added\n\t * @param _additionalPrimordialAmount The primordial ion amount to be added\n\t * @return the new primordial weighted multiplier\n\t */\n\tfunction calculateWeightedMultiplier(uint256 _currentWeightedMultiplier, uint256 _currentPrimordialBalance, uint256 _additionalWeightedMultiplier, uint256 _additionalPrimordialAmount) public pure returns (uint256) {\n\t\tif (_currentWeightedMultiplier > 0) {\n\t\t\tuint256 _totalWeightedIons = (_currentWeightedMultiplier.mul(_currentPrimordialBalance)).add(_additionalWeightedMultiplier.mul(_additionalPrimordialAmount));\n\t\t\tuint256 _totalIons = _currentPrimordialBalance.add(_additionalPrimordialAmount);\n\t\t\treturn _totalWeightedIons.div(_totalIons);\n\t\t} else {\n\t\t\treturn _additionalWeightedMultiplier;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the primordial ion multiplier on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Multiplier = S\n\t *\t\tEnding Multiplier = E\n\t *\t\tTo Purchase = P\n\t *\t\tMultiplier for next Lot of Amount = (1 - ((M + P/2) / T)) x (S-E)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion mintable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting multiplier in (10 ** 6)\n\t * @param _endingMultiplier The ending multiplier in (10 ** 6)\n\t * @return The multiplier in (10 ** 6)\n\t */\n\tfunction calculatePrimordialMultiplier(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * Multiplier = (1 - (temp / T)) x (S-E)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply multiplier with _MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR to account for 6 decimals\n\t\t\t * so, Multiplier = (_MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR) * (1 - (temp / T)) * (S-E)\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR * (1 - (temp / T))) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Take out the division by _MULTIPLIER_DIVISOR for now and include in later calculation\n\t\t\t * Multiplier = (_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)\n\t\t\t */\n\t\t\tuint256 multiplier = (_MULTIPLIER_DIVISOR.sub(_MULTIPLIER_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier));\n\t\t\t/**\n\t\t\t * Since _startingMultiplier and _endingMultiplier are in 6 decimals\n\t\t\t * Need to divide multiplier by _MULTIPLIER_DIVISOR\n\t\t\t */\n\t\t\treturn multiplier.div(_MULTIPLIER_DIVISOR);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus percentage of network ion on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Network Bonus Multiplier = Bs\n\t *\t\tEnding Network Bonus Multiplier = Be\n\t *\t\tTo Purchase = P\n\t *\t\tAO Bonus % = B% = (1 - ((M + P/2) / T)) x (Bs-Be)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusPercentage(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * B% = (1 - (temp / T)) x (Bs-Be)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply B% with _PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR to account for 6 decimals\n\t\t\t * so, B% = (_PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR) * (1 - (temp / T)) * (Bs-Be)\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR * (1 - (temp / T))) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * Take out the division by _PERCENTAGE_DIVISOR for now and include in later calculation\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)\n\t\t\t * But since Bs and Be are in 6 decimals, need to divide by _PERCENTAGE_DIVISOR\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be) / _PERCENTAGE_DIVISOR\n\t\t\t */\n\t\t\tuint256 bonusPercentage = (_PERCENTAGE_DIVISOR.sub(_PERCENTAGE_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier)).div(_PERCENTAGE_DIVISOR);\n\t\t\treturn bonusPercentage;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus amount of network ion on a given lot\n\t *\t\tAO Bonus Amount = B% x P\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusAmount(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tuint256 bonusPercentage = calculateNetworkBonusPercentage(_purchaseAmount, _totalPrimordialMintable, _totalPrimordialMinted, _startingMultiplier, _endingMultiplier);\n\t\t/**\n\t\t * Since bonusPercentage is in _PERCENTAGE_DIVISOR format, need to divide it with _PERCENTAGE DIVISOR\n\t\t * when calculating the network ion bonus amount\n\t\t */\n\t\tuint256 networkBonus = bonusPercentage.mul(_purchaseAmount).div(_PERCENTAGE_DIVISOR);\n\t\treturn networkBonus;\n\t}\n\n\t/**\n\t * @dev Calculate the maximum amount of Primordial an account can burn\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_maximumMultiplier = S\n\t *\t\t_amountToBurn = B\n\t *\t\tB = ((S x P) - (P x M)) / S\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _maximumMultiplier The maximum multiplier of this account\n\t * @return The maximum burn amount\n\t */\n\tfunction calculateMaximumBurnAmount(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _maximumMultiplier) public pure returns (uint256) {\n\t\treturn (_maximumMultiplier.mul(_primordialBalance).sub(_primordialBalance.mul(_currentWeightedMultiplier))).div(_maximumMultiplier);\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after burning primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToBurn = B\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P - B)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToBurn The amount of primordial ion to burn\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterBurn(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToBurn) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.sub(_amountToBurn));\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after converting network ion to primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToConvert = C\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P + C)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToConvert The amount of network ion to convert\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterConversion(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToConvert) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.add(_amountToConvert));\n\t}\n\n\t/**\n\t * @dev count num of digits\n\t * @param number uint256 of the nuumber to be checked\n\t * @return uint8 num of digits\n\t */\n\tfunction numDigits(uint256 number) public pure returns (uint8) {\n\t\tuint8 digits = 0;\n\t\twhile(number != 0) {\n\t\t\tnumber = number.div(10);\n\t\t\tdigits++;\n\t\t}\n\t\treturn digits;\n\t}\n}\n\n\n\ncontract TheAO {\n\taddress public theAO;\n\taddress public nameTAOPositionAddress;\n\n\t// Check whether an address is whitelisted and granted access to transact\n\t// on behalf of others\n\tmapping (address => bool) public whitelist;\n\n\tconstructor() public {\n\t\ttheAO = msg.sender;\n\t}\n\n\t/**\n\t * @dev Checks if msg.sender is in whitelist.\n\t */\n\tmodifier inWhitelist() {\n\t\trequire (whitelist[msg.sender] == true);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n}\n\n\n\n\n\n\n/**\n * @title NamePublicKey\n */\ncontract NamePublicKey is TheAO, INamePublicKey {\n\tusing SafeMath for uint256;\n\n\taddress public nameFactoryAddress;\n\taddress public nameAccountRecoveryAddress;\n\n\tINameFactory internal _nameFactory;\n\tINameTAOPosition internal _nameTAOPosition;\n\tINameAccountRecovery internal _nameAccountRecovery;\n\n\tstruct PublicKey {\n\t\tbool created;\n\t\taddress defaultKey;\n\t\taddress writerKey;\n\t\taddress[] keys;\n\t}\n\n\t// Mapping from nameId to its PublicKey\n\tmapping (address => PublicKey) internal publicKeys;\n\n\t// Mapping from key to nameId\n\tmapping (address => address) public keyToNameId;\n\n\t// Event to be broadcasted to public when a publicKey is added to a Name\n\tevent AddKey(address indexed nameId, address publicKey, uint256 nonce);\n\n\t// Event to be broadcasted to public when a publicKey is removed from a Name\n\tevent RemoveKey(address indexed nameId, address publicKey, uint256 nonce);\n\n\t// Event to be broadcasted to public when a publicKey is set as default for a Name\n\tevent SetDefaultKey(address indexed nameId, address publicKey, uint256 nonce);\n\n\t// Event to be broadcasted to public when a publicKey is set as writer for a Name\n\tevent SetWriterKey(address indexed nameId, address publicKey, uint256 nonce);\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor(address _nameFactoryAddress, address _nameTAOPositionAddress) public {\n\t\tsetNameFactoryAddress(_nameFactoryAddress);\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t */\n\tmodifier onlyTheAO {\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if calling address is Factory\n\t */\n\tmodifier onlyFactory {\n\t\trequire (msg.sender == nameFactoryAddress);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if `_nameId` is a Name\n\t */\n\tmodifier isName(address _nameId) {\n\t\trequire (AOLibrary.isName(_nameId));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if msg.sender is the current advocate of Name ID\n\t */\n\tmodifier onlyAdvocate(address _id) {\n\t\trequire (_nameTAOPosition.senderIsAdvocate(msg.sender, _id));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Only allowed if sender's Name is not compromised\n\t */\n\tmodifier senderNameNotCompromised() {\n\t\trequire (!_nameAccountRecovery.isCompromised(_nameFactory.ethAddressToNameId(msg.sender)));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if `_key` is not yet taken\n\t */\n\tmodifier keyNotTaken(address _key) {\n\t\trequire (_key != address(0) && keyToNameId[_key] == address(0));\n\t\t_;\n\t}\n\n\t/***** The AO ONLY METHODS *****/\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n\n\t/**\n\t * @dev The AO sets NameFactory address\n\t * @param _nameFactoryAddress The address of NameFactory\n\t */\n\tfunction setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {\n\t\trequire (_nameFactoryAddress != address(0));\n\t\tnameFactoryAddress = _nameFactoryAddress;\n\t\t_nameFactory = INameFactory(_nameFactoryAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets NameTAOPosition address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\n\t\trequire (_nameTAOPositionAddress != address(0));\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\n\t\t_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the NameAccountRecovery Address\n\t * @param _nameAccountRecoveryAddress The address of NameAccountRecovery\n\t */\n\tfunction setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {\n\t\trequire (_nameAccountRecoveryAddress != address(0));\n\t\tnameAccountRecoveryAddress = _nameAccountRecoveryAddress;\n\t\t_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);\n\t}\n\n\t/**\n\t * @dev Whitelisted address add publicKey to list for a Name\n\t * @param _id The ID of the Name\n\t * @param _key The publicKey to be added\n\t * @return true on success\n\t */\n\tfunction whitelistAddKey(address _id, address _key) external isName(_id) keyNotTaken(_key) inWhitelist returns (bool) {\n\t\trequire (_addKey(_id, _key));\n\t\treturn true;\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * @dev Check whether or not a Name ID exist in the list of Public Keys\n\t * @param _id The ID to be checked\n\t * @return true if yes, false otherwise\n\t */\n\tfunction isExist(address _id) public view returns (bool) {\n\t\treturn publicKeys[_id].created;\n\t}\n\n\t/**\n\t * @dev Store the PublicKey info for a Name\n\t * @param _id The ID of the Name\n\t * @param _defaultKey The default public key for this Name\n\t * @param _writerKey The writer public key for this Name\n\t * @return true on success\n\t */\n\tfunction initialize(address _id, address _defaultKey, address _writerKey)\n\t\texternal\n\t\tisName(_id)\n\t\tkeyNotTaken(_defaultKey)\n\t\tkeyNotTaken(_writerKey)\n\t\tonlyFactory returns (bool) {\n\t\trequire (!isExist(_id));\n\n\t\tkeyToNameId[_defaultKey] = _id;\n\t\tif (_defaultKey != _writerKey) {\n\t\t\tkeyToNameId[_writerKey] = _id;\n\t\t}\n\t\tPublicKey storage _publicKey = publicKeys[_id];\n\t\t_publicKey.created = true;\n\t\t_publicKey.defaultKey = _defaultKey;\n\t\t_publicKey.writerKey = _writerKey;\n\t\t_publicKey.keys.push(_defaultKey);\n\t\tif (_defaultKey != _writerKey) {\n\t\t\t_publicKey.keys.push(_writerKey);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Get total publicKeys count for a Name\n\t * @param _id The ID of the Name\n\t * @return total publicKeys count\n\t */\n\tfunction getTotalPublicKeysCount(address _id) public isName(_id) view returns (uint256) {\n\t\trequire (isExist(_id));\n\t\treturn publicKeys[_id].keys.length;\n\t}\n\n\t/**\n\t * @dev Check whether or not a publicKey exist in the list for a Name\n\t * @param _id The ID of the Name\n\t * @param _key The publicKey to check\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isKeyExist(address _id, address _key) isName(_id) external view returns (bool) {\n\t\trequire (isExist(_id));\n\t\trequire (_key != address(0));\n\t\treturn keyToNameId[_key] == _id;\n\t}\n\n\t/**\n\t * @dev Add publicKey to list for a Name\n\t * @param _id The ID of the Name\n\t * @param _key The publicKey to be added\n\t * @param _nonce The signed uint256 nonce (should be Name's current nonce + 1)\n\t * @param _signatureV The V part of the signature\n\t * @param _signatureR The R part of the signature\n\t * @param _signatureS The S part of the signature\n\t */\n\tfunction addKey(address _id,\n\t\taddress _key,\n\t\tuint256 _nonce,\n\t\tuint8 _signatureV,\n\t\tbytes32 _signatureR,\n\t\tbytes32 _signatureS\n\t) public isName(_id) onlyAdvocate(_id) keyNotTaken(_key) senderNameNotCompromised {\n\t\trequire (_nonce == _nameFactory.nonces(_id).add(1));\n\t\tbytes32 _hash = keccak256(abi.encodePacked(address(this), _id, _key, _nonce));\n\t\trequire (ecrecover(_hash, _signatureV, _signatureR, _signatureS) == _key);\n\t\trequire (_addKey(_id, _key));\n\t}\n\n\t/**\n\t * @dev Get default public key of a Name\n\t * @param _id The ID of the Name\n\t * @return the default public key\n\t */\n\tfunction getDefaultKey(address _id) external isName(_id) view returns (address) {\n\t\trequire (isExist(_id));\n\t\treturn publicKeys[_id].defaultKey;\n\t}\n\n\t/**\n\t * @dev Get writer public key of a Name\n\t * @param _id The ID of the Name\n\t * @return the writer public key\n\t */\n\tfunction getWriterKey(address _id) external isName(_id) view returns (address) {\n\t\trequire (isExist(_id));\n\t\treturn publicKeys[_id].writerKey;\n\t}\n\n\t/**\n\t * @dev Check whether or not a key is Name's writerKey\n\t * @param _id The ID of the Name\n\t * @param _key The key to be checked\n\t * @return true if yes, false otherwise\n\t */\n\tfunction isNameWriterKey(address _id, address _key) public isName(_id) view returns (bool) {\n\t\trequire (isExist(_id));\n\t\trequire (_key != address(0));\n\t\treturn publicKeys[_id].writerKey == _key;\n\t}\n\n\t/**\n\t * @dev Get list of publicKeys of a Name\n\t * @param _id The ID of the Name\n\t * @param _from The starting index\n\t * @param _to The ending index\n\t * @return list of publicKeys\n\t */\n\tfunction getKeys(address _id, uint256 _from, uint256 _to) public isName(_id) view returns (address[] memory) {\n\t\trequire (isExist(_id));\n\t\trequire (_from >= 0 && _to >= _from);\n\n\t\tPublicKey memory _publicKey = publicKeys[_id];\n\t\trequire (_publicKey.keys.length > 0);\n\n\t\tif (_to >  _publicKey.keys.length.sub(1)) {\n\t\t\t_to = _publicKey.keys.length.sub(1);\n\t\t}\n\t\taddress[] memory _keys = new address[](_to.sub(_from).add(1));\n\n\t\tfor (uint256 i = _from; i <= _to; i++) {\n\t\t\t_keys[i.sub(_from)] = _publicKey.keys[i];\n\t\t}\n\t\treturn _keys;\n\t}\n\n\t/**\n\t * @dev Remove publicKey from the list\n\t * @param _id The ID of the Name\n\t * @param _key The publicKey to be removed\n\t */\n\tfunction removeKey(address _id, address _key) public isName(_id) onlyAdvocate(_id) senderNameNotCompromised {\n\t\trequire (this.isKeyExist(_id, _key));\n\n\t\tPublicKey storage _publicKey = publicKeys[_id];\n\n\t\t// Can't remove default key\n\t\trequire (_key != _publicKey.defaultKey);\n\t\t// Can't remove writer key\n\t\trequire (_key != _publicKey.writerKey);\n\t\t// Has to have at least defaultKey/writerKey\n\t\trequire (_publicKey.keys.length > 1);\n\n\t\tkeyToNameId[_key] = address(0);\n\n\t\tuint256 index;\n\t\tfor (uint256 i = 0; i < _publicKey.keys.length; i++) {\n\t\t\tif (_publicKey.keys[i] == _key) {\n\t\t\t\tindex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfor (uint256 i = index; i < _publicKey.keys.length.sub(1); i++) {\n\t\t\t_publicKey.keys[i] = _publicKey.keys[i+1];\n\t\t}\n\t\t_publicKey.keys.length--;\n\n\t\tuint256 _nonce = _nameFactory.incrementNonce(_id);\n\t\trequire (_nonce > 0);\n\n\t\temit RemoveKey(_id, _key, _nonce);\n\t}\n\n\t/**\n\t * @dev Set a publicKey as the default for a Name\n\t * @param _id The ID of the Name\n\t * @param _defaultKey The defaultKey to be set\n\t * @param _signatureV The V part of the signature for this update\n\t * @param _signatureR The R part of the signature for this update\n\t * @param _signatureS The S part of the signature for this update\n\t */\n\tfunction setDefaultKey(address _id, address _defaultKey, uint8 _signatureV, bytes32 _signatureR, bytes32 _signatureS) public isName(_id) onlyAdvocate(_id) senderNameNotCompromised {\n\t\trequire (this.isKeyExist(_id, _defaultKey));\n\n\t\tbytes32 _hash = keccak256(abi.encodePacked(address(this), _id, _defaultKey));\n\t\trequire (ecrecover(_hash, _signatureV, _signatureR, _signatureS) == msg.sender);\n\n\t\tPublicKey storage _publicKey = publicKeys[_id];\n\t\t_publicKey.defaultKey = _defaultKey;\n\n\t\tuint256 _nonce = _nameFactory.incrementNonce(_id);\n\t\trequire (_nonce > 0);\n\t\temit SetDefaultKey(_id, _defaultKey, _nonce);\n\t}\n\n\t/**\n\t * @dev Set a publicKey as the writer for a Name\n\t * @param _id The ID of the Name\n\t * @param _writerKey The writerKey to be set\n\t * @param _signatureV The V part of the signature for this update\n\t * @param _signatureR The R part of the signature for this update\n\t * @param _signatureS The S part of the signature for this update\n\t */\n\tfunction setWriterKey(address _id, address _writerKey, uint8 _signatureV, bytes32 _signatureR, bytes32 _signatureS) public isName(_id) onlyAdvocate(_id) senderNameNotCompromised {\n\t\tbytes32 _hash = keccak256(abi.encodePacked(address(this), _id, _writerKey));\n\t\trequire (ecrecover(_hash, _signatureV, _signatureR, _signatureS) == msg.sender);\n\t\trequire (_setWriterKey(_id, _writerKey));\n\t}\n\n\t/**\n\t * @dev Add key and set as writerKey for a Name\n\t * @param _id The ID of the Name\n\t * @param _key The writerKey to be added\n\t * @param _nonce The signed uint256 nonce (should be Name's current nonce + 1)\n\t * @param _signatureV The V part of the signature\n\t * @param _signatureR The R part of the signature\n\t * @param _signatureS The S part of the signature\n\t */\n\tfunction addSetWriterKey(address _id,\n\t\taddress _key,\n\t\tuint256 _nonce,\n\t\tuint8 _signatureV,\n\t\tbytes32 _signatureR,\n\t\tbytes32 _signatureS\n\t) public isName(_id) onlyAdvocate(_id) keyNotTaken(_key) senderNameNotCompromised {\n\t\trequire (_nonce == _nameFactory.nonces(_id).add(1));\n\t\tbytes32 _hash = keccak256(abi.encodePacked(address(this), _id, _key, _nonce));\n\t\trequire (ecrecover(_hash, _signatureV, _signatureR, _signatureS) == _key);\n\t\trequire (_addKey(_id, _key));\n\t\trequire (_setWriterKey(_id, _key));\n\t}\n\n\t/***** INTERNAL METHOD *****/\n\t/**\n\t * @dev Actual adding the publicKey to list for a Name\n\t * @param _id The ID of the Name\n\t * @param _key The publicKey to be added\n\t * @return true on success\n\t */\n\tfunction _addKey(address _id, address _key) internal returns (bool) {\n\t\trequire (!this.isKeyExist(_id, _key));\n\n\t\tkeyToNameId[_key] = _id;\n\n\t\tPublicKey storage _publicKey = publicKeys[_id];\n\t\t_publicKey.keys.push(_key);\n\n\t\tuint256 _nonce = _nameFactory.incrementNonce(_id);\n\t\trequire (_nonce > 0);\n\n\t\temit AddKey(_id, _key, _nonce);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Actual setting the writerKey for a Name\n\t * @param _id The ID of the Name\n\t * @param _writerKey The writerKey to be set\n\t * @return true on success\n\t */\n\tfunction _setWriterKey(address _id, address _writerKey) internal returns (bool) {\n\t\trequire (this.isKeyExist(_id, _writerKey));\n\n\t\tPublicKey storage _publicKey = publicKeys[_id];\n\t\t_publicKey.writerKey = _writerKey;\n\n\t\tuint256 _nonce = _nameFactory.incrementNonce(_id);\n\t\trequire (_nonce > 0);\n\t\temit SetWriterKey(_id, _writerKey, _nonce);\n\t\treturn true;\n\t}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"isExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameAccountRecoveryAddress\",\"type\":\"address\"}],\"name\":\"setNameAccountRecoveryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"getWriterKey\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"},{\"name\":\"_key\",\"type\":\"address\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signatureV\",\"type\":\"uint8\"},{\"name\":\"_signatureR\",\"type\":\"bytes32\"},{\"name\":\"_signatureS\",\"type\":\"bytes32\"}],\"name\":\"addSetWriterKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameTAOPositionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"name\":\"setNameTAOPositionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"getTotalPublicKeysCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"},{\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"removeKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"}],\"name\":\"setNameFactoryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"},{\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"isKeyExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameAccountRecoveryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theAO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"},{\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"isNameWriterKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameFactoryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"},{\"name\":\"_defaultKey\",\"type\":\"address\"},{\"name\":\"_writerKey\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"},{\"name\":\"_writerKey\",\"type\":\"address\"},{\"name\":\"_signatureV\",\"type\":\"uint8\"},{\"name\":\"_signatureR\",\"type\":\"bytes32\"},{\"name\":\"_signatureS\",\"type\":\"bytes32\"}],\"name\":\"setWriterKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"},{\"name\":\"_defaultKey\",\"type\":\"address\"},{\"name\":\"_signatureV\",\"type\":\"uint8\"},{\"name\":\"_signatureR\",\"type\":\"bytes32\"},{\"name\":\"_signatureS\",\"type\":\"bytes32\"}],\"name\":\"setDefaultKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"keyToNameId\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"},{\"name\":\"_key\",\"type\":\"address\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signatureV\",\"type\":\"uint8\"},{\"name\":\"_signatureR\",\"type\":\"bytes32\"},{\"name\":\"_signatureS\",\"type\":\"bytes32\"}],\"name\":\"addKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"getDefaultKey\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"},{\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"whitelistAddKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_theAO\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"},{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"nameId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"publicKey\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"AddKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"nameId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"publicKey\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"RemoveKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"nameId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"publicKey\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"SetDefaultKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"nameId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"publicKey\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"SetWriterKey\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b50604051604080620030b1833981018060405260408110156200003357600080fd5b50805160209091015160008054600160a060020a0319163317905562000062826401000000006200007e810204565b620000768164010000000062000183810204565b505062000288565b600054600154604080517ff66afcac000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156200010757600080fd5b505af41580156200011c573d6000803e3d6000fd5b505050506040513d60208110156200013357600080fd5b505115156200014157600080fd5b600160a060020a03811615156200015757600080fd5b60038054600160a060020a03909216600160a060020a0319928316811790915560058054909216179055565b600054600154604080517ff66afcac000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156200020c57600080fd5b505af415801562000221573d6000803e3d6000fd5b505050506040513d60208110156200023857600080fd5b505115156200024657600080fd5b600160a060020a03811615156200025c57600080fd5b60018054600160a060020a03909216600160a060020a0319928316811790915560068054909216179055565b612e1980620002986000396000f3fe608060405234801561001057600080fd5b50600436106101765760003560e060020a90048063a481247c116100e2578063c395c2401161009b578063d684678211610075578063d684678214610556578063db536d2f146105a1578063f0f2fd04146105c7578063f2fde38b146105f557610176565b8063c395c240146104a6578063c59c1144146104eb578063c920a51a1461053057610176565b8063a481247c146103fa578063a4e5fad214610428578063a9b6b38e14610430578063b469641c14610438578063bc40620614610466578063c0c53b8b1461046e57610176565b806353d6fd591161013457806353d6fd59146102f45780635cfaf2ef14610322578063722e1677146103485780638ab3e33f146103805780638c924361146103ae5780639b19251a146103d457610176565b806213eb4b1461017b578063181a916b146101b55780631dfde2bd1461023757806321b7f5331461025f5780632cc37f6f146102a15780634ef033f0146102ec575b600080fd5b6101a16004803603602081101561019157600080fd5b5035600160a060020a031661061b565b604080519115158252519081900360200190f35b6101e7600480360360608110156101cb57600080fd5b50600160a060020a038135169060208101359060400135610639565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561022357818101518382015260200161020b565b505050509050019250505060405180910390f35b61025d6004803603602081101561024d57600080fd5b5035600160a060020a03166108bc565b005b6102856004803603602081101561027557600080fd5b5035600160a060020a03166109a9565b60408051600160a060020a039092168252519081900360200190f35b61025d600480360360c08110156102b757600080fd5b50600160a060020a03813581169160208101359091169060408101359060ff6060820135169060808101359060a00135610a7e565b610285610e98565b61025d6004803603604081101561030a57600080fd5b50600160a060020a0381351690602001351515610ea7565b61025d6004803603602081101561033857600080fd5b5035600160a060020a0316610f90565b61036e6004803603602081101561035e57600080fd5b5035600160a060020a031661107a565b60408051918252519081900360200190f35b61025d6004803603604081101561039657600080fd5b50600160a060020a038135811691602001351661114c565b61025d600480360360208110156103c457600080fd5b5035600160a060020a0316611659565b6101a1600480360360208110156103ea57600080fd5b5035600160a060020a0316611743565b6101a16004803603604081101561041057600080fd5b50600160a060020a0381358116916020013516611758565b610285611843565b610285611852565b6101a16004803603604081101561044e57600080fd5b50600160a060020a0381358116916020013516611861565b61028561194f565b6101a16004803603606081101561048457600080fd5b50600160a060020a03813581169160208101358216916040909101351661195e565b61025d600480360360a08110156104bc57600080fd5b50600160a060020a03813581169160208101359091169060ff6040820135169060608101359060800135611bc7565b61025d600480360360a081101561050157600080fd5b50600160a060020a03813581169160208101359091169060ff6040820135169060608101359060800135611ed9565b6102856004803603602081101561054657600080fd5b5035600160a060020a031661236a565b61025d600480360360c081101561056c57600080fd5b50600160a060020a03813581169160208101359091169060408101359060ff6060820135169060808101359060a00135612385565b610285600480360360208110156105b757600080fd5b5035600160a060020a031661273b565b6101a1600480360360408110156105dd57600080fd5b50600160a060020a0381358116916020013516612812565b61025d6004803603602081101561060b57600080fd5b5035600160a060020a031661292d565b600160a060020a031660009081526008602052604090205460ff1690565b606083731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156106a057600080fd5b505af41580156106b4573d6000803e3d6000fd5b505050506040513d60208110156106ca57600080fd5b505115156106d757600080fd5b6106e08561061b565b15156106eb57600080fd5b600084101580156106fc5750838310155b151561070757600080fd5b61070f612d7d565b600160a060020a038087166000908152600860209081526040918290208251608081018452815460ff8116151582526101009004851681840152600182015490941684840152600281018054845181850281018501909552808552919360608601939092908301828280156107ad57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161078f575b505050505081525050905060008160600151511115156107cc57600080fd5b6060810151516107e390600163ffffffff612a0d16565b8411156108045760608101515161080190600163ffffffff612a0d16565b93505b6060610827600161081b878963ffffffff612a0d16565b9063ffffffff612a1f16565b604051908082528060200260200182016040528015610850578160200160208202803883390190505b509050855b8581116108b157606083015180518290811061086d57fe5b6020908102909101015182610888838a63ffffffff612a0d16565b8151811061089257fe5b600160a060020a03909216602092830290910190910152600101610855565b509695505050505050565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b15801561092e57600080fd5b505af4158015610942573d6000803e3d6000fd5b505050506040513d602081101561095857600080fd5b5051151561096557600080fd5b600160a060020a038116151561097a57600080fd5b60048054600160a060020a0319908116600160a060020a03938416179182905560078054929093169116179055565b600081731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015610a1057600080fd5b505af4158015610a24573d6000803e3d6000fd5b505050506040513d6020811015610a3a57600080fd5b50511515610a4757600080fd5b610a508361061b565b1515610a5b57600080fd5b5050600160a060020a039081166000908152600860205260409020600101541690565b85731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015610ae357600080fd5b505af4158015610af7573d6000803e3d6000fd5b505050506040513d6020811015610b0d57600080fd5b50511515610b1a57600080fd5b6006546040805160e060020a6371ce52ed028152336004820152600160a060020a03808b16602483015291518a9392909216916371ce52ed91604480820192602092909190829003018186803b158015610b7357600080fd5b505afa158015610b87573d6000803e3d6000fd5b505050506040513d6020811015610b9d57600080fd5b50511515610baa57600080fd5b86600160a060020a03811615801590610bdb5750600160a060020a0381811660009081526009602052604090205416155b1515610be657600080fd5b6007546005546040805160e060020a63029b7d530281523360048201529051600160a060020a0393841693633ebc2ab393169163029b7d53916024808301926020929190829003018186803b158015610c3e57600080fd5b505afa158015610c52573d6000803e3d6000fd5b505050506040513d6020811015610c6857600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a039092166004830152516024808301926020929190829003018186803b158015610cad57600080fd5b505afa158015610cc1573d6000803e3d6000fd5b505050506040513d6020811015610cd757600080fd5b505115610ce357600080fd5b600554604080517f7ecebe00000000000000000000000000000000000000000000000000000000008152600160a060020a038c811660048301529151610d85936001931691637ecebe00916024808301926020929190829003018186803b158015610d4d57600080fd5b505afa158015610d61573d6000803e3d6000fd5b505050506040513d6020811015610d7757600080fd5b50519063ffffffff612a1f16565b8714610d9057600080fd5b604080516c01000000000000000000000000308102602080840191909152600160a060020a03808e16830260348501528c169182026048840152605c8084018c905284518085039091018152607c84018086528151918301919091206000909152609c840180865281905260ff8b1660bc85015260dc84018a905260fc84018990529351919260019261011c8083019392601f198301929081900390910190855afa158015610e43573d6000803e3d6000fd5b50505060206040510351600160a060020a0316141515610e6257600080fd5b610e6c8a8a612a32565b1515610e7757600080fd5b610e818a8a612bea565b1515610e8c57600080fd5b50505050505050505050565b600154600160a060020a031681565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015610f1957600080fd5b505af4158015610f2d573d6000803e3d6000fd5b505050506040513d6020811015610f4357600080fd5b50511515610f5057600080fd5b600160a060020a0382161515610f6557600080fd5b600160a060020a03919091166000908152600260205260409020805460ff1916911515919091179055565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b15801561100257600080fd5b505af4158015611016573d6000803e3d6000fd5b505050506040513d602081101561102c57600080fd5b5051151561103957600080fd5b600160a060020a038116151561104e57600080fd5b60018054600160a060020a03909216600160a060020a0319928316811790915560068054909216179055565b600081731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156110e157600080fd5b505af41580156110f5573d6000803e3d6000fd5b505050506040513d602081101561110b57600080fd5b5051151561111857600080fd5b6111218361061b565b151561112c57600080fd5b5050600160a060020a031660009081526008602052604090206002015490565b81731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156111b157600080fd5b505af41580156111c5573d6000803e3d6000fd5b505050506040513d60208110156111db57600080fd5b505115156111e857600080fd5b6006546040805160e060020a6371ce52ed028152336004820152600160a060020a0380871660248301529151869392909216916371ce52ed91604480820192602092909190829003018186803b15801561124157600080fd5b505afa158015611255573d6000803e3d6000fd5b505050506040513d602081101561126b57600080fd5b5051151561127857600080fd5b6007546005546040805160e060020a63029b7d530281523360048201529051600160a060020a0393841693633ebc2ab393169163029b7d53916024808301926020929190829003018186803b1580156112d057600080fd5b505afa1580156112e4573d6000803e3d6000fd5b505050506040513d60208110156112fa57600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a039092166004830152516024808301926020929190829003018186803b15801561133f57600080fd5b505afa158015611353573d6000803e3d6000fd5b505050506040513d602081101561136957600080fd5b50511561137557600080fd5b6040805160e260020a632920491f028152600160a060020a038681166004830152851660248201529051309163a481247c916044808301926020929190829003018186803b1580156113c657600080fd5b505afa1580156113da573d6000803e3d6000fd5b505050506040513d60208110156113f057600080fd5b505115156113fd57600080fd5b600160a060020a0380851660009081526008602052604090208054909185811661010090920416141561142f57600080fd5b6001810154600160a060020a038581169116141561144c57600080fd5b600281015460011061145d57600080fd5b600160a060020a03841660009081526009602052604081208054600160a060020a0319169055805b60028301548110156114d75785600160a060020a031683600201828154811015156114ac57fe5b600091825260209091200154600160a060020a031614156114cf578091506114d7565b600101611485565b50805b60028301546114f090600163ffffffff612a0d16565b811015611563576002830180546001830190811061150a57fe5b600091825260209091200154600284018054600160a060020a03909216918390811061153257fe5b60009182526020909120018054600160a060020a031916600160a060020a03929092169190911790556001016114da565b5060028201805490611579906000198301612da3565b506005546040805160e260020a633d5d0f13028152600160a060020a0389811660048301529151600093929092169163f5743c4c9160248082019260209290919082900301818787803b1580156115cf57600080fd5b505af11580156115e3573d6000803e3d6000fd5b505050506040513d60208110156115f957600080fd5b505190506000811161160a57600080fd5b60408051600160a060020a038881168252602082018490528251908a16927faec0509ffc1f2fe28ada93894c552d532d94e3c32821ce0939b2064d95686642928290030190a250505050505050565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156116cb57600080fd5b505af41580156116df573d6000803e3d6000fd5b505050506040513d60208110156116f557600080fd5b5051151561170257600080fd5b600160a060020a038116151561171757600080fd5b60038054600160a060020a03909216600160a060020a0319928316811790915560058054909216179055565b60026020526000908152604090205460ff1681565b600082731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156117bf57600080fd5b505af41580156117d3573d6000803e3d6000fd5b505050506040513d60208110156117e957600080fd5b505115156117f657600080fd5b6117ff8461061b565b151561180a57600080fd5b600160a060020a038316151561181f57600080fd5b5050600160a060020a03908116600090815260096020526040902054811691161490565b600454600160a060020a031681565b600054600160a060020a031681565b600082731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156118c857600080fd5b505af41580156118dc573d6000803e3d6000fd5b505050506040513d60208110156118f257600080fd5b505115156118ff57600080fd5b6119088461061b565b151561191357600080fd5b600160a060020a038316151561192857600080fd5b5050600160a060020a03918216600090815260086020526040902060010154821691161490565b600354600160a060020a031681565b600083731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156119c557600080fd5b505af41580156119d9573d6000803e3d6000fd5b505050506040513d60208110156119ef57600080fd5b505115156119fc57600080fd5b83600160a060020a03811615801590611a2d5750600160a060020a0381811660009081526009602052604090205416155b1515611a3857600080fd5b83600160a060020a03811615801590611a695750600160a060020a0381811660009081526009602052604090205416155b1515611a7457600080fd5b600354600160a060020a03163314611a8b57600080fd5b611a948761061b565b15611a9e57600080fd5b600160a060020a0386811660008181526009602052604090208054600160a060020a0319168a841617905590861614611b0057600160a060020a0385811660009081526009602052604090208054600160a060020a0319169189169190911790555b600160a060020a038088166000908152600860209081526040822080548a8516610100810274ffffffffffffffffffffffffffffffffffffffff001960ff199093166001908117939093161783558183018054968c16600160a060020a031997881681179091556002840180549384018155865293909420018054909416831790935514611bb95760028101805460018101825560009182526020909120018054600160a060020a031916600160a060020a0388161790555b506001979650505050505050565b84731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015611c2c57600080fd5b505af4158015611c40573d6000803e3d6000fd5b505050506040513d6020811015611c5657600080fd5b50511515611c6357600080fd5b6006546040805160e060020a6371ce52ed028152336004820152600160a060020a03808a1660248301529151899392909216916371ce52ed91604480820192602092909190829003018186803b158015611cbc57600080fd5b505afa158015611cd0573d6000803e3d6000fd5b505050506040513d6020811015611ce657600080fd5b50511515611cf357600080fd5b6007546005546040805160e060020a63029b7d530281523360048201529051600160a060020a0393841693633ebc2ab393169163029b7d53916024808301926020929190829003018186803b158015611d4b57600080fd5b505afa158015611d5f573d6000803e3d6000fd5b505050506040513d6020811015611d7557600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a039092166004830152516024808301926020929190829003018186803b158015611dba57600080fd5b505afa158015611dce573d6000803e3d6000fd5b505050506040513d6020811015611de457600080fd5b505115611df057600080fd5b604080516c01000000000000000000000000308102602080840191909152600160a060020a03808c16830260348501528a1690910260488301528251603c818403018152605c83018085528151918301919091206000909152607c830180855281905260ff8916609c84015260bc830188905260dc83018790529251339260019260fc808301939192601f198301929081900390910190855afa158015611e9b573d6000803e3d6000fd5b50505060206040510351600160a060020a0316141515611eba57600080fd5b611ec48888612bea565b1515611ecf57600080fd5b5050505050505050565b84731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015611f3e57600080fd5b505af4158015611f52573d6000803e3d6000fd5b505050506040513d6020811015611f6857600080fd5b50511515611f7557600080fd5b6006546040805160e060020a6371ce52ed028152336004820152600160a060020a03808a1660248301529151899392909216916371ce52ed91604480820192602092909190829003018186803b158015611fce57600080fd5b505afa158015611fe2573d6000803e3d6000fd5b505050506040513d6020811015611ff857600080fd5b5051151561200557600080fd5b6007546005546040805160e060020a63029b7d530281523360048201529051600160a060020a0393841693633ebc2ab393169163029b7d53916024808301926020929190829003018186803b15801561205d57600080fd5b505afa158015612071573d6000803e3d6000fd5b505050506040513d602081101561208757600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a039092166004830152516024808301926020929190829003018186803b1580156120cc57600080fd5b505afa1580156120e0573d6000803e3d6000fd5b505050506040513d60208110156120f657600080fd5b50511561210257600080fd5b6040805160e260020a632920491f028152600160a060020a038981166004830152881660248201529051309163a481247c916044808301926020929190829003018186803b15801561215357600080fd5b505afa158015612167573d6000803e3d6000fd5b505050506040513d602081101561217d57600080fd5b5051151561218a57600080fd5b604080516c01000000000000000000000000308102602080840191909152600160a060020a03808c16830260348501528a1690910260488301528251603c818403018152605c83018085528151918301919091206000909152607c830180855281905260ff8916609c84015260bc830188905260dc83018790529251339260019260fc808301939192601f198301929081900390910190855afa158015612235573d6000803e3d6000fd5b50505060206040510351600160a060020a031614151561225457600080fd5b600160a060020a038881166000818152600860209081526040808320805474ffffffffffffffffffffffffffffffffffffffff0019166101008e881602178155600554825160e260020a633d5d0f130281526004810196909652915190959394919093169263f5743c4c9260248084019391929182900301818787803b1580156122dd57600080fd5b505af11580156122f1573d6000803e3d6000fd5b505050506040513d602081101561230757600080fd5b505190506000811161231857600080fd5b60408051600160a060020a038b81168252602082018490528251908d16927fd77f210e9f1b29555f577c8e8794a9470fa9198f423fc077f55168838ba679a9928290030190a250505050505050505050565b600960205260009081526040902054600160a060020a031681565b85731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156123ea57600080fd5b505af41580156123fe573d6000803e3d6000fd5b505050506040513d602081101561241457600080fd5b5051151561242157600080fd5b6006546040805160e060020a6371ce52ed028152336004820152600160a060020a03808b16602483015291518a9392909216916371ce52ed91604480820192602092909190829003018186803b15801561247a57600080fd5b505afa15801561248e573d6000803e3d6000fd5b505050506040513d60208110156124a457600080fd5b505115156124b157600080fd5b86600160a060020a038116158015906124e25750600160a060020a0381811660009081526009602052604090205416155b15156124ed57600080fd5b6007546005546040805160e060020a63029b7d530281523360048201529051600160a060020a0393841693633ebc2ab393169163029b7d53916024808301926020929190829003018186803b15801561254557600080fd5b505afa158015612559573d6000803e3d6000fd5b505050506040513d602081101561256f57600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a039092166004830152516024808301926020929190829003018186803b1580156125b457600080fd5b505afa1580156125c8573d6000803e3d6000fd5b505050506040513d60208110156125de57600080fd5b5051156125ea57600080fd5b600554604080517f7ecebe00000000000000000000000000000000000000000000000000000000008152600160a060020a038c811660048301529151612654936001931691637ecebe00916024808301926020929190829003018186803b158015610d4d57600080fd5b871461265f57600080fd5b604080516c01000000000000000000000000308102602080840191909152600160a060020a03808e16830260348501528c169182026048840152605c8084018c905284518085039091018152607c84018086528151918301919091206000909152609c840180865281905260ff8b1660bc85015260dc84018a905260fc84018990529351919260019261011c8083019392601f198301929081900390910190855afa158015612712573d6000803e3d6000fd5b50505060206040510351600160a060020a031614151561273157600080fd5b610e818a8a612a32565b600081731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156127a257600080fd5b505af41580156127b6573d6000803e3d6000fd5b505050506040513d60208110156127cc57600080fd5b505115156127d957600080fd5b6127e28361061b565b15156127ed57600080fd5b5050600160a060020a0390811660009081526008602052604090205461010090041690565b600082731150d53299abb7de27464d01b626728f5c840229632d706a34826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b15801561287957600080fd5b505af415801561288d573d6000803e3d6000fd5b505050506040513d60208110156128a357600080fd5b505115156128b057600080fd5b82600160a060020a038116158015906128e15750600160a060020a0381811660009081526009602052604090205416155b15156128ec57600080fd5b3360009081526002602052604090205460ff16151560011461290d57600080fd5b6129178585612a32565b151561292257600080fd5b506001949350505050565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b15801561299f57600080fd5b505af41580156129b3573d6000803e3d6000fd5b505050506040513d60208110156129c957600080fd5b505115156129d657600080fd5b600160a060020a03811615156129eb57600080fd5b60008054600160a060020a031916600160a060020a0392909216919091179055565b600082821115612a1957fe5b50900390565b81810182811015612a2c57fe5b92915050565b6040805160e260020a632920491f028152600160a060020a038481166004830152831660248201529051600091309163a481247c91604480820192602092909190829003018186803b158015612a8757600080fd5b505afa158015612a9b573d6000803e3d6000fd5b505050506040513d6020811015612ab157600080fd5b505115612abd57600080fd5b600160a060020a0380831660008181526009602090815260408083208054868a16600160a060020a03199182168117909255818552600884528285206002810180546001810182559087528587200180549092169096179055600554825160e260020a633d5d0f130281526004810192909252915194959394919093169263f5743c4c92602480830193919282900301818787803b158015612b5e57600080fd5b505af1158015612b72573d6000803e3d6000fd5b505050506040513d6020811015612b8857600080fd5b5051905060008111612b9957600080fd5b60408051600160a060020a038681168252602082018490528251908816927f4487b0a9ffea124fa087f0b52b2e9ce94d4cc7863686b6d07b61569b2652b153928290030190a2506001949350505050565b6040805160e260020a632920491f028152600160a060020a038481166004830152831660248201529051600091309163a481247c91604480820192602092909190829003018186803b158015612c3f57600080fd5b505afa158015612c53573d6000803e3d6000fd5b505050506040513d6020811015612c6957600080fd5b50511515612c7657600080fd5b600160a060020a038381166000818152600860209081526040808320600181018054600160a060020a031916898816179055600554825160e260020a633d5d0f130281526004810196909652915190959394919093169263f5743c4c9260248084019391929182900301818787803b158015612cf157600080fd5b505af1158015612d05573d6000803e3d6000fd5b505050506040513d6020811015612d1b57600080fd5b5051905060008111612d2c57600080fd5b60408051600160a060020a038681168252602082018490528251908816927f469fd8b44dc9f92cf425126828b67f1062a61ebe2c7f0bd5192008a0d1a5ba1d928290030190a2506001949350505050565b604080516080810182526000808252602082018190529181019190915260608082015290565b815481835581811115612dc757600083815260209020612dc7918101908301612dcc565b505050565b612dea91905b80821115612de65760008155600101612dd2565b5090565b9056fea165627a7a7230582058fd9b511598419ad73f943e60a6267f1bcf32e31da8489c832c3fb9567c4794002900000000000000000000000010fbf61e4cce57d72eed8b5d9728134ce374bd820000000000000000000000001f7f65b220a0f2d48b28390380f57468e7a382fe",
  "constructorArguments": "00000000000000000000000010fbf61e4cce57d72eed8b5d9728134ce374bd820000000000000000000000001f7f65b220a0f2d48b28390380f57468e7a382fe",
  "libraries": [
    {
      "name": "AOLibrary",
      "address": "0x1150d53299Abb7DE27464D01B626728f5c840229"
    }
  ]
}