{
  "address": "0x0ac10bf0342fa2724e93d250751186ba5b659303",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "master",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-06\n*/\n\npragma solidity ^0.4.25;\n\n library SafeMath{\n     function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    } \n       \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c; \n    }\n    \n     function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) { \n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n     \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n }\n \n library SafeMath16{\n     function add(uint16 a, uint16 b) internal pure returns (uint16) {\n        uint16 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n    \n    function sub(uint16 a, uint16 b) internal pure returns (uint16) {\n        require(b <= a);\n        uint16 c = a - b;\n        return c;\n    }\n    \n     function mul(uint16 a, uint16 b) internal pure returns (uint16) {\n        if (a == 0) {\n            return 0;\n        }\n        uint16 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n    \n    function div(uint16 a, uint16 b) internal pure returns (uint16) {\n        require(b > 0);\n        uint16 c = a / b;\n        return c;\n    }\n }\n\ncontract owned {\n\n    address public manager;\n\n    constructor() public{\n        manager = msg.sender;\n    }\n \n    modifier onlymanager{\n        require(msg.sender == manager);\n        _;\n    }\n\n    function transferownership(address _new_manager) public onlymanager {\n        manager = _new_manager;\n    }\n}\n\n\ncontract byt_str {\n    function stringToBytes32(string memory source) pure public returns (bytes32 result) {\n       \n        assembly {\n            result := mload(add(source, 32))\n        }\n    }\n\n    function bytes32ToString(bytes32 x) pure public returns (string) {\n        bytes memory bytesString = new bytes(32);\n        uint charCount = 0;\n        for (uint j = 0; j < 32; j++) {\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n            if (char != 0) {\n                bytesString[charCount] = char;\n                charCount++;\n            }\n        }\n        bytes memory bytesStringTrimmed = new bytes(charCount);\n        for (j = 0; j < charCount; j++) {\n            bytesStringTrimmed[j] = bytesString[j];\n        }\n        return string(bytesStringTrimmed);\n    }\n\n}\n\n\ninterface ERC20_interface {\n  function decimals() external view returns(uint8);\n  function totalSupply() external view returns (uint256);\n  function balanceOf(address who) external view returns (uint256);\n  \n  function transfer(address to, uint256 value) external returns(bool);\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) ;\n}\n\n\ninterface ERC721_interface{\n     function balanceOf(address _owner) external view returns (uint256);\n     function ownerOf(uint256 _tokenId) external view returns (address);\n     function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable;\n     function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\n     function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n     function approve(address _approved, uint256 _tokenId) external payable;\n     function setApprovalForAll(address _operator, bool _approved) external;\n     function getApproved(uint256 _tokenId) external view returns (address);\n     function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n } \n \n \n interface slave{\n    function master_address() external view returns(address);\n    \n    function transferMayorship(address new_mayor) external;\n    function city_number() external view returns(uint16);\n    function area_number() external view returns(uint8);\n    \n    function inquire_totdomains_amount() external view returns(uint16);\n    function inquire_domain_level_star(uint16 _id) external view returns(uint8, uint8);\n    function inquire_domain_building(uint16 _id, uint8 _index) external view returns(uint8);\n    function inquire_tot_domain_attribute(uint16 _id) external view returns(uint8[5]);\n    function inquire_domain_cooltime(uint16 _id) external view returns(uint);\n    function inquire_mayor_cooltime() external view returns(uint);\n    function inquire_tot_domain_building(uint16 _id) external view returns(uint8[]);\n    function inquire_own_domain(address _sender) external view returns(uint16[]);\n    function inquire_land_info(uint16 _city, uint16 _id) external view returns(uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8);\n    \n    function inquire_building_limit(uint8 _building) external view returns(uint8);\n    \n    function domain_build(uint16 _id, uint8 _building) external;\n    function reconstruction(uint16 _id, uint8 _index, uint8 _building)external;\n    function set_domian_attribute(uint16 _id, uint8 _index) external;\n    function domain_all_reward(uint8 _class, address _user) external;\n    function mayor_reward(address _user) external; \n    function inquire_mayor_address() external view returns(address);\n \n    function domain_reward(uint8 _class, address _user, uint16 _id) external;\n    function transfer_master(address _to, uint16 _id) external;\n    function retrieve_domain(address _user, uint _id) external;\n    function at_Area() external view returns(string);\n    function set_domain_cooltime(uint _cooltime) external;\n } \n \n interface trade{\n    function set_city_pool(uint _arina, uint16 _city )external;\n    function inquire_pool(uint16 _city) external view returns(uint);\n    function exchange_arina(uint _arina, uint16 _city, address _target) external;\n }\n\n contract master is owned, byt_str {\n    using SafeMath for uint;\n    using SafeMath16 for uint16;\n    \n    \n    address arina_contract = 0xe6987cd613dfda0995a95b3e6acbabececd41376;\n     \n    address GIC_contract = 0x340e85491c5f581360811d0ce5cc7476c72900ba;\n    address trade_address;\n    address mix_address;\n    \n    uint16 public owner_slave_amount = 0; \n    uint random_seed;\n    uint public probability = 1000000;\n    bool public all_stop = false;\n    \n    \n    struct _info{\n        uint16 city; \n        uint16 domain; \n        bool unmovable; \n        bool lotto; \n        bool build; \n        bool reward;\n    }\n    \n    \n    address[] public owner_slave; \n   \n    mapping (uint8 => string) public area; \n    mapping (uint8 => string) public building_type;  \n    mapping (uint8 => uint) public building_price; \n     \n    mapping(address => _info) public player_info;  \n    \n    mapping(bytes32 => address) public member;\n    mapping(address => bytes32) public addressToName;\n    \n    \n    \n    event set_name(address indexed player, uint value); \n    event FirstSign(address indexed player,uint time); \n    event RollDice(address indexed player, uint16 city, uint16 id, bool unmovable); \n    event Change_city(address indexed player, uint16 city, uint16 id, bool unmovable);\n    event Fly(address indexed player, uint16 city, uint16 id, bool unmovable);\n    \n    event PlayLotto(address indexed player,uint player_number, uint lotto_number);\n    \n    event PayArina(address indexed player, uint value, uint16 city, uint16 id);\n    event BuyArina(address indexed player, uint value, uint16 city, uint16 id);\n    event PayEth(address indexed player, uint value, uint16 city, uint16 id);\n    event BuyEth(address indexed player, uint value, uint16 city, uint16 id);\n    \n    event Build(address indexed player, uint8 building, uint value);\n    event Reconstruction(address indexed player, uint8 building, uint value);\n    \n    \n\n\n  function register(string _name) public{\n      if(keccak256(abi.encodePacked(_name)) == keccak256(abi.encodePacked(\"\"))) {\n          revert();\n      } \n      bytes32 byte_name =  stringToBytes32(_name);\n   \n      if(addressToName[msg.sender] == 0x0){\n          member[byte_name] = msg.sender;\n          addressToName[msg.sender] = byte_name;\n          emit FirstSign(msg.sender,now); \n      }else{\n          revert(); \n      }\n      \n  }\n\n\n\n    function() public payable{}\n    \n    function rollDice() external{\n        require(!all_stop);\n        require(owner_slave_amount >= 1);\n        require(!player_info[msg.sender].unmovable,\"不可移動\");\n        uint16 random = uint16((keccak256(abi.encodePacked(now, random_seed))));\n        random_seed.add(1);\n        \n        if(player_info[msg.sender].city == 0){\n            player_info[msg.sender].city = 1;\n        }\n        \n        uint16 in_city = player_info[msg.sender].city;\n        \n        \n        uint16 tot_domains = inquire_city_totdomains(in_city);\n        uint16 go_domains_id = random % tot_domains; \n        \n        \n        \n        player_info[msg.sender].domain = go_domains_id;\n        \n        address city_address = owner_slave[in_city];\n        address domain_owner = ERC721_interface(city_address).ownerOf(go_domains_id);\n        \n        if (domain_owner != 0x0){\n            if(domain_owner == msg.sender){\n                player_info[msg.sender].build = true; \n                \n            }\n            else{\n                player_info[msg.sender].unmovable = true; \n                player_info[msg.sender].reward = false;\n            }\n\t\t}\n        \n        emit RollDice(msg.sender, in_city, go_domains_id, player_info[msg.sender].unmovable);\n    }\n    \n    function change_city(address _sender, uint16 go_city) private{\n        require(!all_stop);\n        require(owner_slave_amount >= 1);\n        require(!player_info[_sender].unmovable,\"不可移動\"); \n        \n        uint16 random = uint16((keccak256(abi.encodePacked(now, random_seed))));\n        random_seed.add(1);\n        \n        uint16 tot_domains = inquire_city_totdomains(go_city);\n        uint16 go_domains_id = random % tot_domains; \n        \n        player_info[_sender].city = go_city;\n        player_info[_sender].domain = go_domains_id;\n        \n        \n        address city_address = owner_slave[go_city];\n        address domain_owner = ERC721_interface(city_address).ownerOf(go_domains_id);\n        \n        if (domain_owner != 0x0){\n            if(domain_owner == _sender){\n                player_info[_sender].build = true; \n                \n            }\n            else{\n                player_info[_sender].unmovable = true; \n                player_info[msg.sender].reward = false;\n            }\n\t\t}\n         \n        emit Change_city(_sender, go_city, go_domains_id, player_info[_sender].unmovable);\n    }\n    \n    function fly(uint16 _city, uint16 _domain) public payable{\n        require(msg.value == 0.1 ether);\n        require(owner_slave_amount >= 1);\n        require(!player_info[msg.sender].unmovable);\n        \n        address[] memory checkPlayer;\n        checkPlayer = checkBuildingPlayer(player_info[msg.sender].city,14);\n     \n        \n        player_info[msg.sender].city = _city;\n        player_info[msg.sender].domain = _domain;\n        \n        address city_address = owner_slave[_city];\n        address domain_owner = ERC721_interface(city_address).ownerOf(_domain);\n        uint exchange_player_ETH;\n        \n\n        if(checkPlayer.length!=0){\n            exchange_player_ETH = msg.value.div(10).mul(1);\n            \n            for(uint8 i = 0 ; i< checkPlayer.length;i++){\n    \t        checkPlayer[i].transfer(exchange_player_ETH.div(checkPlayer.length));\n            }\n        } \n\n        \n        if (domain_owner != 0x0){\n            if(domain_owner == msg.sender){\n                player_info[msg.sender].build = true; \n                \n            }\n            else{\n                player_info[msg.sender].unmovable = true; \n                player_info[msg.sender].reward = false;\n            }\n\t\t}\n        player_info[msg.sender].lotto = true;\n        emit Fly(msg.sender, _city, _domain , player_info[msg.sender].unmovable);\n    }\n    \n    function playLotto() external{\n        require(!all_stop);\n        require(player_info[msg.sender].lotto);\n        \n        uint random = uint((keccak256(abi.encodePacked(now, random_seed))));\n        uint random2 = uint((keccak256(abi.encodePacked(random_seed, msg.sender))));\n        random_seed = random_seed.add(1);\n\n        address _address = inquire_slave_address(player_info[msg.sender].city);\n         \n        if(player_info[msg.sender].unmovable == false){\n            (,uint8 _star) = slave(_address).inquire_domain_level_star(player_info[msg.sender].domain);\n                if(_star <= 1){\n                    _star = 1;\n                }\n            probability = probability.div(2**(uint(_star)-1));                   \n            uint8[] memory buildings = slave(_address).inquire_tot_domain_building(player_info[msg.sender].domain);\n            for(uint8 i=0;i< buildings.length;i++){\n                if(buildings[i] == 8 ){\n                    probability = probability.div(10).mul(9);      \n                    break; \n                }\n            }\n        }\n        \n        uint lotto_number = random % probability;\n        uint player_number =  random2 % probability;\n        \n        probability = 1000000;   \n        \n        if(lotto_number == player_number){\n            msg.sender.transfer(address(this).balance.div(10));\n        }\n        \n        player_info[msg.sender].lotto = false;\n        \n        \n        emit PlayLotto(msg.sender, player_number, lotto_number);\n    }\n\n     \n\n\n    function payRoadETH_amount(uint8 _level, uint8 _star) public pure returns(uint){\n         \n        if(_level <= 1){\n    \t   return  0.02 ether * 2**(uint(_star)-1) ;\n    \t} \n    \telse if(_level > 1) {    \n    \t   return  0.02 ether * 2**(uint(_star)-1)*(3**(uint(_level)-1))/(2**(uint(_level)-1)) ;\n    \t} \n    }\n     \n    function buyLandETH_amount(uint8 _level, uint8 _star) public pure returns(uint){\n\n         \n        if(_level <= 1){\n    \t   return  0.2 ether * 2**(uint(_star)-1) ;\n    \t} \n    \telse if(_level > 1) {    \n    \t   return  0.2 ether * 2**(uint(_star)-1)*(3**(uint(_level)-1))/(2**(uint(_level)-1)) ;\n    \t} \n    }\n     \n    function payARINA_amount(uint8 _level, uint8 _star) public pure returns(uint){\n\n        \n        if(_level <= 1){\n    \treturn (10**8) * (2**(uint(_star)-1)*10);\n    \t} \n    \t\n    \telse if(_level > 1) {   \n    \treturn (10**8) * (2**(uint(_star)-1)*10)*(3**(uint(_level)-1))/(2**(uint(_level)-1));\n    \t}\n\n    }\n     \n    function buyLandARINA_amount() public pure returns(uint){\n        return 2000*10**8;\n    }\n \n    function payRent_ETH() external payable{\n        require(!all_stop);\n        require(player_info[msg.sender].unmovable,\"檢查不可移動\");\n        \n        uint16 city = player_info[msg.sender].city; \n        uint16 domains_id = player_info[msg.sender].domain;  \n        \n        address city_address = owner_slave[city];\n\t\taddress domain_owner = ERC721_interface(city_address).ownerOf(domains_id);\n\t\t\n\t\tif (domain_owner == 0x0){\n\t\t    revert(\"不用付手續費\");\n\t\t}\n        \n        (uint8 _level,uint8 _star) = slave(city_address).inquire_domain_level_star(domains_id);\n        \n        uint _payRoadETH_amount = payRoadETH_amount(_level, _star);\n        \n        require(msg.value == _payRoadETH_amount);\n        \n        player_info[msg.sender].unmovable = false;\n\n        uint payRent_ETH_50toOwner = msg.value.div(10).mul(5);\n\t\tuint payRent_ETH_10toTeam = msg.value.div(10);\n\t\tuint payRent_ETH_20toCity = msg.value.div(10).mul(2); \n\t\tuint payRent_ETH_20toPool = msg.value.div(10).mul(2);\n\t\tuint pay = payRent_ETH_50toOwner + payRent_ETH_10toTeam + payRent_ETH_20toCity + payRent_ETH_20toPool;\n\t\trequire(msg.value == pay);\n\n\t\tdomain_owner.transfer(payRent_ETH_50toOwner); \n        manager.transfer(payRent_ETH_10toTeam); \n        city_address.transfer(payRent_ETH_20toCity); \n        \n        player_info[msg.sender].lotto = true;\n        player_info[msg.sender].reward = true;\n        emit PayEth(msg.sender, msg.value, city, domains_id);\n    }\n    \n    function buyLand_ETH() external payable{\n        require(!all_stop);\n        require(player_info[msg.sender].unmovable,\"檢查不可移動\");\n        \n        uint16 city = player_info[msg.sender].city;\n        uint16 domains_id = player_info[msg.sender].domain;\n        \n        address city_address = owner_slave[city];\n        address domain_owner = ERC721_interface(city_address).ownerOf(domains_id);\n        \n        (uint8 _level,uint8 _star) = slave(city_address).inquire_domain_level_star(domains_id);\n        \n        uint _buyLandETH_amount = buyLandETH_amount(_level, _star);\n        require(msg.value == _buyLandETH_amount); \n        \n        if(domain_owner == 0x0){\n            revert(\"第一次請用Arina購買\");\n        }\n        \n        uint BuyLand_ETH_50toOwner;\n        uint BuyLand_ETH_10toTeam;\n        uint BuyLand_ETH_20toCity; \n        uint BuyLand_ETH_20toPool;\n        uint pay;\n        \n        if(_level <= 1){\n            BuyLand_ETH_50toOwner = msg.value.div(10).mul(5);\n        \tBuyLand_ETH_10toTeam = msg.value.div(10);\n        \tBuyLand_ETH_20toCity = msg.value.div(10).mul(2); \n        \tBuyLand_ETH_20toPool = msg.value.div(10).mul(2);\n        \tpay = BuyLand_ETH_50toOwner + BuyLand_ETH_10toTeam + BuyLand_ETH_20toCity +BuyLand_ETH_20toPool;\n        \trequire(msg.value == pay);\n        \t\t \n        \tdomain_owner.transfer(BuyLand_ETH_50toOwner); \n            manager.transfer(BuyLand_ETH_10toTeam); \n            city_address.transfer(BuyLand_ETH_20toCity); \n            \n        }\n        else{\n            BuyLand_ETH_50toOwner = msg.value.div(10).mul(8);\n        \tBuyLand_ETH_10toTeam = msg.value.div(20);\n        \tBuyLand_ETH_20toCity = msg.value.div(20);\n        \tBuyLand_ETH_20toPool = msg.value.div(10);\n        \tpay = BuyLand_ETH_50toOwner + BuyLand_ETH_10toTeam + BuyLand_ETH_20toCity +BuyLand_ETH_20toPool;\n        \trequire(msg.value == pay);\n        \t\t\n        \tdomain_owner.transfer(BuyLand_ETH_50toOwner); \n            manager.transfer(BuyLand_ETH_10toTeam); \n            city_address.transfer(BuyLand_ETH_20toCity); \n            \n        }\n        \n        slave(city_address).transfer_master(msg.sender, domains_id); \n        \n        player_info[msg.sender].unmovable = false;\n        player_info[msg.sender].lotto = true;\n        emit BuyEth(msg.sender, msg.value, city, domains_id);\n    }\n     \n    function _payRent_ARINA(address _sender, uint _value) private{\n        require(!all_stop);\n        \n        require(player_info[_sender].unmovable,\"檢查不可移動\");\n        \n        uint16 city = player_info[_sender].city;\n        uint16 domains_id = player_info[_sender].domain; \n        \n        address city_address = owner_slave[city];\n\t\taddress domain_owner = ERC721_interface(city_address).ownerOf(domains_id);\n\t\t\n\t\tif(domain_owner == 0x0){\n            revert(\"空地不用付手續費\");\n        }\n\n        (uint8 _level,uint8 _star) = slave(city_address).inquire_domain_level_star(domains_id);\n        \n        uint _payARINA_amount = payARINA_amount(_level, _star);\n        \n    \trequire(_value == _payARINA_amount,\"金額不對\");\n        ERC20_interface arina = ERC20_interface(arina_contract);\n        require(arina.transferFrom(_sender, domain_owner, _value),\"交易失敗\"); \n\n        player_info[_sender].unmovable = false;\n        player_info[_sender].reward = true;\n        \n        emit PayArina(_sender, _value, city, domains_id);\n    }\n\n    function _buyLand_ARINA(address _sender, uint _value) private{ \n        \n        \n        require(!all_stop);\n        uint16 city = player_info[_sender].city;\n        uint16 domains_id = player_info[_sender].domain;\n        \n        address city_address = owner_slave[city];\n\t\taddress domain_owner = ERC721_interface(city_address).ownerOf(domains_id);\n        \n        if(domain_owner != 0x0){\n            revert(\"空地才能用Arina買\");\n        }\n        \n        uint _buyLandARINA_amount = buyLandARINA_amount();\n        \n        require(_value ==  _buyLandARINA_amount,\"金額不對\");\n        ERC20_interface arina = ERC20_interface(arina_contract);\n        require(arina.transferFrom(_sender, trade_address, _value)); \n        \n        slave(city_address).transfer_master(_sender, domains_id); \n        trade(trade_address).set_city_pool(_value,city);          \n        \n        player_info[_sender].unmovable = false;\n        emit BuyArina(_sender, _value, city, domains_id);\n    }\n    \n    function _build(address _sender, uint8 _building,uint _arina) private {\n        require(!all_stop);\n        require(player_info[_sender].build == true,\"不能建設\");\n        uint16 city = player_info[_sender].city;\n        uint16 domains_id = player_info[_sender].domain;\n        \n        address city_address = owner_slave[city];\n\t\taddress domain_owner = ERC721_interface(city_address).ownerOf(domains_id);\n\t\trequire(_sender == domain_owner,\"擁有者不是自己\");\n\t\t\n\t\tslave(city_address).domain_build(domains_id, _building);\n\t\tplayer_info[_sender].build = false;\n\t\t\n\t\temit Build(_sender, _building,_arina);\n    }\n    \n    function reconstruction(uint8 _index, uint8 _building)public payable{\n        uint16 city = player_info[msg.sender].city;\n        uint16 domains_id = player_info[msg.sender].domain;\n        uint BuyLand_ETH_toTeam;\n        address city_address = owner_slave[city];\n\t\taddress domain_owner = ERC721_interface(city_address).ownerOf(domains_id);\n\t\trequire(msg.sender == domain_owner, \"限定擁有者\");\n         \n        uint arina_price = inquire_type_price(_building);\n        uint eth_price = arina_price.mul(10**6); \n        \n        require(msg.value == eth_price,\"價格不對\");\n        BuyLand_ETH_toTeam = msg.value.div(10).mul(7);\n        manager.transfer(BuyLand_ETH_toTeam); \n        slave(city_address).reconstruction(domains_id, _index, _building);\n        player_info[msg.sender].lotto = true;\n        emit Reconstruction(msg.sender, _building,eth_price);\n    }\n    \n    function domain_attribute(uint16 _city,uint16 _id, uint8 _index) public{\n        require(msg.sender == mix_address);\n        require(!all_stop);\n        address city_address = owner_slave[_city];\n        slave(city_address).set_domian_attribute(_id,_index);\n    }\n     \n    \n    function reward(uint8 _class, uint16 _city, uint16 _domains_id) public{\n        require(!all_stop);\n        if(inquire_owner(_city,_domains_id) != msg.sender){     \n            require(!player_info[msg.sender].unmovable,\"不可移動\"); \n            require(_city == player_info[msg.sender].city && _domains_id == player_info[msg.sender].domain);\n            require(player_info[msg.sender].reward == true);\n            player_info[msg.sender].reward = false;\n        }\n     \n        address city_address = owner_slave[_city];\n        slave(city_address).domain_reward(_class, msg.sender, _domains_id);\n    }  \n     \n    function all_reward(uint8 _class,uint16 _city) public{\n        address city_address;\n        \n        city_address = owner_slave[_city];\n        slave(city_address).domain_all_reward(_class, msg.sender);\n        \n        \n    }\n      \n    function mayor_all_reward(uint16 _city) public{\n\n        address city_address = owner_slave[_city];\n        address _mayor = slave(city_address).inquire_mayor_address();\n        require(msg.sender == _mayor);\n        slave(city_address).mayor_reward(msg.sender);\n        \n    }\n     \n    function set_member_name(address _owner, string new_name) payable public{\n         require(msg.value == 0.1 ether);\n         require(addressToName[msg.sender].length != 0); \n         require(msg.sender == _owner);\n           \n         bytes32 bytes_old_name = addressToName[msg.sender];   \n         member[bytes_old_name] = 0x0;\n         \n         if(keccak256(abi.encodePacked(new_name)) == keccak256(abi.encodePacked(\"\"))) {\n             revert(); \n         } \n         bytes32 bytes_new_name =  stringToBytes32(new_name);    \n        \n         member[bytes_new_name] = msg.sender; \n         addressToName[msg.sender] = bytes_new_name;\n         emit set_name(msg.sender,msg.value);\n          \n    }\n    \n    function exchange(uint16 _city,uint _value) payable public{\n        uint rate;\n        uint pool = trade(trade_address).inquire_pool(_city);\n        \n        uint exchange_master_ETH;\n        uint exchange_player_ETH;\n        uint exchange_Pool_ETH;\n        require(msg.value == _value*10 ** 13);\n        require(_city == player_info[msg.sender].city);\n        address[] memory checkPlayer;\n        \n        \n        if(pool > 500000 * 10 ** 8){ \n            rate = 10000;\n        }else if(pool > 250000 * 10 ** 8 && pool <= 500000 * 10 ** 8  ){\n            rate = 5000;\n        }else if(pool > 100000 * 10 ** 8 && pool <= 250000 * 10 ** 8  ){\n            rate = 3000;\n        }else if(pool <= 100000 * 10 ** 8){\n            revert();\n        } \n        uint exchangeArina = _value * rate * 10 ** 3;\n        trade(trade_address).exchange_arina(exchangeArina,_city, msg.sender);\n        \n        checkPlayer = checkBuildingPlayer(_city,15);\n        \n        if(checkPlayer.length !=0){\n            exchange_master_ETH = msg.value.div(10).mul(8);\n            exchange_player_ETH = msg.value.div(10).mul(1);\n            exchange_Pool_ETH = msg.value.div(10).mul(1);\n            \n            for(uint8 i = 0 ; i< checkPlayer.length;i++){\n    \t        checkPlayer[i].transfer(exchange_player_ETH.div(checkPlayer.length));\n    \t    }\n        }else{\n            exchange_master_ETH = msg.value.div(10).mul(9);\n            exchange_Pool_ETH = msg.value.div(10);\n        }\n\n        manager.transfer(exchange_master_ETH); \n        \n\n    } \n     \n    function checkBuildingPlayer(uint16 _city,uint8 building) public view  returns(address[] ){  \n        \n        \n        address[] memory _players = new address[](100);\n        uint16 counter = 0;\n        for(uint8 i=0 ; i<100; i++){\n            uint8[] memory buildings = slave(owner_slave[_city]).inquire_tot_domain_building(i);\n            if(buildings.length != 0){\n                for(uint8 j = 0; j < buildings.length; j++){ \n                    if(buildings[j] == building){\n                        _players[counter] = inquire_owner(_city,i); \n                        counter = counter.add(1);\n                        break;\n                    } \n                }  \n                \n            }\n        } \n        address[] memory players = new address[](counter);\n        \n        for (i = 0; i < counter; i++) {\n            players[i] = _players[i];\n        }\n        \n        \n        return players;\n    \n    }\n    \n    \n     \n     \n \n\n\n    \n    \n    \n    \n\n    function inquire_owner(uint16 _city, uint16 _domain) public view returns(address){\n        address city_address = owner_slave[_city];\n        return ERC721_interface(city_address).ownerOf(_domain);\n    }\n    \n    function inquire_have_owner(uint16 _city, uint16 _domain) public view returns(bool){\n        address city_address = owner_slave[_city];\n        address domain_owner = ERC721_interface(city_address).ownerOf(_domain);\n        if(domain_owner == 0x0){\n        return false;\n        }\n        else{return true;}\n    }\n\n    \n    function inquire_domain_level_star(uint16 _city, uint16 _domain) public view \n    returns(uint8, uint8){\n        address _address = inquire_slave_address(_city);\n        return slave(_address).inquire_domain_level_star(_domain);\n    }\n    \n    function inquire_slave_address(uint16 _slave) public view returns(address){\n        return owner_slave[_slave];\n    }\n    \n    \n    \n    \n    \n    \n    function inquire_city_totdomains(uint16 _index) public view returns(uint16){\n        address _address = inquire_slave_address(_index);\n        return  slave(_address).inquire_totdomains_amount();\n    }\n    \n    function inquire_location(address _address) public view returns(uint16, uint16){\n        return (player_info[_address].city, player_info[_address].domain);\n    }\n     \n    function inquire_status(address _address) public view returns(bool, bool, bool){\n        return (player_info[_address].unmovable, player_info[_address].lotto, player_info[_address].reward);\n    }\n    \n    function inquire_type(uint8 _typeid) public view returns(string){\n        return building_type[_typeid];\n    }\n    \n    function inquire_type_price(uint8 _typeid) public view returns(uint){\n        return building_price[_typeid];\n    } \n    \n    function inquire_building(uint16 _slave, uint16 _domain, uint8 _index)\n    public view returns(uint8){\n        address _address = inquire_slave_address(_slave);\n        return slave(_address).inquire_domain_building(_domain, _index);\n    }\n    \n    function inquire_building_amount(uint16 _slave,uint8 _building) public view returns(uint8){\n        address _address = inquire_slave_address(_slave);\n        return slave(_address).inquire_building_limit(_building);\n    }\n     \n    function inquire_tot_attribute(uint16 _slave, uint16 _domain)\n    public view returns(uint8[5]){\n        address _address = inquire_slave_address(_slave);\n        return slave(_address).inquire_tot_domain_attribute(_domain);\n    }\n    \n\n    function inquire_cooltime(uint16 _slave, uint16 _domain)\n    public view returns(uint){\n        address _address = inquire_slave_address(_slave);\n        return slave(_address).inquire_domain_cooltime(_domain);\n    }\n     \n    \n    \n    \n    \n    \n     \n    function inquire_tot_building(uint16 _slave, uint16 _domain)\n    public view returns(uint8[]){\n        address _address = inquire_slave_address(_slave);\n        return slave(_address).inquire_tot_domain_building(_domain);\n    }\n    \n    function inquire_own_domain(uint16 _city) public view returns(uint16[]){\n \n        address _address = inquire_slave_address(_city);\n        return slave(_address).inquire_own_domain(msg.sender);\n    }\n    \n    function inquire_land_info(uint16 _city, uint16 _id) public view returns(uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8){\n    \n        address _address = inquire_slave_address(_city);\n        return slave(_address).inquire_land_info(_city,_id);\n    }\n     \n    function inquire_GIClevel(address _address) view public returns(uint8 _level){\n        uint GIC_balance = ERC20_interface(GIC_contract).balanceOf(_address);\n        if (GIC_balance <= 1000*10**18){\n            return 1;\n        }\n        else if(1000*10**18 < GIC_balance && GIC_balance <=10000*10**18){\n            return 2;\n        }\n        else if(10000*10**18 < GIC_balance && GIC_balance <=100000*10**18){\n            return 3;\n        }\n        else if(100000*10**18 < GIC_balance && GIC_balance <=500000*10**18){\n            return 4;\n        }\n        else if(500000*10**18 < GIC_balance){\n            return 5;\n        }\n        else revert();\n    }\n\n\n\n    \n    function receiveApproval(address _sender, uint256 _value,\n    address _tokenContract, bytes _extraData) public{\n        \n        require(_tokenContract == arina_contract);\n          \n        bytes1 action = _extraData[0];\n    \n    \n        if (action == 0x0){ \n              \n            _payRent_ARINA(_sender, _value);\n        }\n      \n        else if(action == 0x1){ \n          \n            _buyLand_ARINA(_sender, _value);\n        } \n       \n        else if(action == 0x2){ \n            require(_value == 100*10**8);\n            uint16 _city = uint16(_extraData[1]);\n             \n            \n            address[] memory checkPlayer;\n            checkPlayer = checkBuildingPlayer(player_info[_sender].city,17);  \n           \n            if(checkPlayer.length != 0){\n                for(uint8 i=0;i<checkPlayer.length;i++){\n                    require(ERC20_interface(arina_contract).transferFrom(_sender, checkPlayer[i], _value.div(checkPlayer.length)),\"交易失敗\");\n                } \n            }else{\n                require(ERC20_interface(arina_contract).transferFrom(_sender, trade_address, _value),\"交易失敗\");\n                trade(trade_address).set_city_pool(_value,player_info[_sender].city);\n            }\n            \n             \n            change_city(_sender, _city);\n            \n        }\n      \n        else if(action == 0x3){ \n         \n            uint8 _building = uint8(_extraData[1]);\n            \n              \n            uint build_value = inquire_type_price(_building);\n    \t\t\n    \t\trequire(_value == build_value,\"金額不對\"); \n             \n            require(ERC20_interface(arina_contract).transferFrom(_sender, trade_address, _value),\"交易失敗\");\n            trade(trade_address).set_city_pool(_value,player_info[_sender].city);\n            \n            _build(_sender, _building,_value);\n        }\n        else{revert();}\n\n    }\n    \n\n\n    function set_all_stop(bool _stop) public onlymanager{\n        all_stop = _stop;\n    }\n\n    function withdraw_all_ETH() public onlymanager{\n        manager.transfer(address(this).balance);\n    }\n     \n    function withdraw_all_arina() public onlymanager{\n        uint asset = ERC20_interface(arina_contract).balanceOf(address(this));\n        ERC20_interface(arina_contract).transfer(manager, asset);\n    }\n    \n    function withdraw_ETH(uint _eth_wei) public onlymanager{\n        manager.transfer(_eth_wei);\n    }\n    \n    function withdraw_arina(uint _arina) public onlymanager{\n        ERC20_interface(arina_contract).transfer(manager, _arina); \n    }\n    \n    function set_arina_address(address _arina_address) public onlymanager{\n        arina_contract = _arina_address;\n    }\n  \n    \n    \n    \n    \n    \n    \n    function set_slave_mayor(uint16 _index, address newMayor_address) public onlymanager{\n        address contract_address = owner_slave[_index];\n        slave(contract_address).transferMayorship(newMayor_address); \n    }\n     \n    function push_slave_address(address _address) external onlymanager{\n        \n        require(slave(_address).master_address() == address(this));\n        owner_slave.push(_address);\n        owner_slave_amount = owner_slave_amount.add(1); \n    } \n    \n    function change_slave_address(uint16 _index, address _address) external onlymanager{\n        owner_slave[_index] = _address; \n    }\n    \n    function set_building_type(uint8 _type, string _name) public onlymanager{\n        building_type[_type] = _name;\n    }\n    \n    function set_type_price(uint8 _type, uint _price) public onlymanager{\n        building_price[_type] = _price;\n    }\n    \n    function set_trade_address(address _trade_address) public onlymanager{ \n       trade_address = _trade_address;\n    }\n    \n    function set_mix_address(address _mix_address) public onlymanager{ \n       mix_address = _mix_address;\n    }\n    \n    function set_cooltime(uint16 _index, uint _cooltime) public onlymanager{\n        address contract_address = owner_slave[_index];\n        slave(contract_address).set_domain_cooltime(_cooltime); \n    }\n    \n\n\n    constructor() public{\n        random_seed = uint((keccak256(abi.encodePacked(now))));\n        \n        owner_slave.push(address(0));\n        \n        area[1] = \"魔幻魔法區\";\n        area[2] = \"蒸氣龐克區\";\n        area[3] = \"現代區\";\n        area[4] = \"SCI-FI科幻未來區\";\n                \n        \n        \n        \n        building_type[0] = \"null\" ; \n        building_type[1] = \"Farm\" ; \n        building_type[2] = \"Mine\" ; \n        building_type[3] = \"Workshop\" ; \n        building_type[4] = \"Bazaar\" ; \n        building_type[5] = \"Arena\" ;\n        building_type[6] = \"Adventurer's Guild\" ; \n        building_type[7] = \"Dungeon\" ; \n        building_type[8] = \"Lucky Fountain\" ; \n        building_type[9] = \"Stable\" ; \n        building_type[10] = \"Mega Tower\" ; \n        \n        building_type[11] = \"Fuel station\" ; \n        building_type[12] = \"Research Lab\" ; \n        building_type[13] = \"Racecourse\" ; \n        building_type[14] = \"Airport\" ; \n        building_type[15] = \"Bank\" ; \n        building_type[16] = \"Department store\" ; \n        building_type[17] = \"Station\" ;\n        building_type[18] = \"Hotel\" ; \n        building_type[19] = \"Shop\" ; \n        building_type[20] = \"Weapon factory\" ; \n        \n        \n         \n        \n        building_price[0] = 0 ; \n        building_price[1] = 2000*10**8 ;\n        building_price[2] = 2000*10**8 ;\n        building_price[3] = 2000*10**8 ; \n        building_price[4] = 2000*10**8 ; \n        building_price[5] = 5000*10**8 ;\n        building_price[6] = 5000*10**8 ;\n        building_price[7] = 5000*10**8 ;\n        building_price[8] = 5000*10**8 ;\n        building_price[9] = 5000*10**8 ;\n        building_price[10] = 5000*10**8 ; \n        \n        building_price[11] = 2000*10**8 ; \n        building_price[12] = 10000*10**8 ;\n        building_price[13] = 5000*10**8 ;\n        building_price[14] = 20000*10**8 ; \n        building_price[15] = 10000*10**8 ; \n        building_price[16] = 5000*10**8 ;\n        building_price[17] = 5000*10**8 ;\n        building_price[18] = 5000*10**8 ;\n        building_price[19] = 5000*10**8 ;\n        building_price[20] = 5000*10**8 ;\n    }\n    \n }",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_trade_address\",\"type\":\"address\"}],\"name\":\"set_trade_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_slave\",\"type\":\"uint16\"},{\"name\":\"_domain\",\"type\":\"uint16\"}],\"name\":\"inquire_cooltime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arina\",\"type\":\"uint256\"}],\"name\":\"withdraw_arina\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eth_wei\",\"type\":\"uint256\"}],\"name\":\"withdraw_ETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"all_stop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"member\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_typeid\",\"type\":\"uint8\"}],\"name\":\"inquire_type_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_domain\",\"type\":\"uint16\"}],\"name\":\"fly\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"inquire_GIClevel\",\"outputs\":[{\"name\":\"_level\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"area\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mix_address\",\"type\":\"address\"}],\"name\":\"set_mix_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_slave\",\"type\":\"uint16\"},{\"name\":\"_domain\",\"type\":\"uint16\"}],\"name\":\"inquire_tot_attribute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_slave\",\"type\":\"uint16\"}],\"name\":\"inquire_slave_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"building_type\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint16\"},{\"name\":\"newMayor_address\",\"type\":\"address\"}],\"name\":\"set_slave_mayor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_class\",\"type\":\"uint8\"},{\"name\":\"_city\",\"type\":\"uint16\"}],\"name\":\"all_reward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint8\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"set_type_price\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint16\"},{\"name\":\"_cooltime\",\"type\":\"uint256\"}],\"name\":\"set_cooltime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"probability\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"inquire_status\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_all_ETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_domain\",\"type\":\"uint16\"}],\"name\":\"inquire_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_class\",\"type\":\"uint8\"},{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_domains_id\",\"type\":\"uint16\"}],\"name\":\"reward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_domain\",\"type\":\"uint16\"}],\"name\":\"inquire_domain_level_star\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint16\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"change_slave_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_slave\",\"type\":\"uint16\"},{\"name\":\"_domain\",\"type\":\"uint16\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"inquire_building\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"}],\"name\":\"mayor_all_reward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_id\",\"type\":\"uint16\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"domain_attribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyLand_ETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_domain\",\"type\":\"uint16\"}],\"name\":\"inquire_have_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint16\"}],\"name\":\"inquire_city_totdomains\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyLandARINA_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint8\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"set_building_type\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"playLotto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rollDice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint8\"},{\"name\":\"_star\",\"type\":\"uint8\"}],\"name\":\"buyLandETH_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arina_address\",\"type\":\"address\"}],\"name\":\"set_arina_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payRent_ETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"inquire_location\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint8\"},{\"name\":\"_star\",\"type\":\"uint8\"}],\"name\":\"payRoadETH_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"building_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"building\",\"type\":\"uint8\"}],\"name\":\"checkBuildingPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_slave\",\"type\":\"uint16\"},{\"name\":\"_domain\",\"type\":\"uint16\"}],\"name\":\"inquire_tot_building\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"player_info\",\"outputs\":[{\"name\":\"city\",\"type\":\"uint16\"},{\"name\":\"domain\",\"type\":\"uint16\"},{\"name\":\"unmovable\",\"type\":\"bool\"},{\"name\":\"lotto\",\"type\":\"bool\"},{\"name\":\"build\",\"type\":\"bool\"},{\"name\":\"reward\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"push_slave_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint8\"},{\"name\":\"_building\",\"type\":\"uint8\"}],\"name\":\"reconstruction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stop\",\"type\":\"bool\"}],\"name\":\"set_all_stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owner_slave\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner_slave_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_slave\",\"type\":\"uint16\"},{\"name\":\"_building\",\"type\":\"uint8\"}],\"name\":\"inquire_building_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"}],\"name\":\"inquire_own_domain\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"new_name\",\"type\":\"string\"}],\"name\":\"set_member_name\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_typeid\",\"type\":\"uint8\"}],\"name\":\"inquire_type\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint8\"},{\"name\":\"_star\",\"type\":\"uint8\"}],\"name\":\"payARINA_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_manager\",\"type\":\"address\"}],\"name\":\"transferownership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"inquire_land_info\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_all_arina\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"set_name\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"FirstSign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"city\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"unmovable\",\"type\":\"bool\"}],\"name\":\"RollDice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"city\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"unmovable\",\"type\":\"bool\"}],\"name\":\"Change_city\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"city\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"unmovable\",\"type\":\"bool\"}],\"name\":\"Fly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"player_number\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lotto_number\",\"type\":\"uint256\"}],\"name\":\"PlayLotto\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"city\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint16\"}],\"name\":\"PayArina\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"city\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint16\"}],\"name\":\"BuyArina\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"city\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint16\"}],\"name\":\"PayEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"city\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint16\"}],\"name\":\"BuyEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"building\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Build\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"building\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Reconstruction\",\"type\":\"event\"}]",
  "bytecode": ""
}