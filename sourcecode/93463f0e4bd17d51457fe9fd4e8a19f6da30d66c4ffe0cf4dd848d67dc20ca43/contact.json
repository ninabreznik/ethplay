{
  "address": "0x042969acfa0a586a939652612458a2387ab0073a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VixcoreToken2",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-13\n*/\n\npragma solidity ^0.4.16;\n\ncontract Owned {\n    address public owner;\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n}\n\n\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract VixcoreToken2 is Owned {\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;   \n \n    uint public totalTokenSold; \n    uint public totalWeiReceived;  \n    uint public weiBalance;  \n\n    //EVENTS\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    // This generates a public event on the blockchain that will notify clients\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n    \n    //ETH Withdrawn\n    event Withdrawal(address receiver, uint amount);\n\n    //Token is purchased using Selfdrop\n    event Selfdrop(address backer, uint weiAmount, uint token);\n\n    //Over softcap set for Selfdrop\n    event OverSoftCap(address receiver, uint weiAmount);\n\n\n\n\n\n    /**\n     * Constructor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function VixcoreToken2(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n        owner = msg.sender; \n    }\n\n\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    } \n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    } \n\n    /**\n     * Default function when someone's transferring to this contract \n     * The next 3 functions are the same\n     */  \n    function () payable public {\n        _pay();\n    }\n\n    function pay() payable public {  \n        _pay();\n    }  \n\n    function _pay() internal { \n        uint weiValue = msg.value; \n        uint phase1 = 2500000000000000000000000000;\n        uint phase2 = phase1 + 1500000000000000000000000000;\n        uint phase3 = phase2 + 1000000000000000000000000000; //phase 3 should be less than supply\n\n        if(totalTokenSold <= phase1){\n            _exchange(weiValue, 5000000);\n        }else if(totalTokenSold <= phase2){\n            _exchange(weiValue, 4000000);\n        }else if(totalTokenSold <= phase3){\n            _exchange(weiValue, 3500000);\n        }else{\n            emit OverSoftCap(msg.sender, weiValue);\n        } \n    }\n\n    function _exchange(uint weiValue, uint rate) internal {\n        uint tokenEquiv = tokenEquivalent(weiValue, rate);  \n        _transfer(owner, msg.sender, tokenEquiv); \n        totalWeiReceived += weiValue;\n        weiBalance += weiValue;\n        totalTokenSold += tokenEquiv;\n        emit Selfdrop(msg.sender, weiValue, tokenEquiv); \n    }\n\n    function tokenEquivalent(uint weiValue, uint rate) public returns (uint) {\n        return weiValue * rate;\n    } \n\n\n    /**\n     * Withdraw the funds\n     *\n     * Send the benefeciary some Wei\n     * This function will emit the Withdrawal event if send it successful\n     * Only owner can call this function \n     */\n    function withdraw(uint _amount) onlyOwner public {\n        require(_amount > 0);\n        require(_amount <= weiBalance);     // Amount withdraw should be less or equal to balance\n        if (owner.send(_amount)) {\n            weiBalance -= _amount;\n            emit Withdrawal(owner, _amount);\n        }else{\n            throw;\n        }\n    }\n\n\n}",
  "bytecode": "60806040526003805460ff1916601217905534801561001d57600080fd5b5060405161090838038061090883398101604090815281516020808401518385015160008054600160a060020a03191633908117825560035460ff16600a0a8602600481905590825260058552959020949094558401805192949093019161008b91600191908501906100bb565b50805161009f9060029060208401906100bb565b505060008054600160a060020a03191633179055506101569050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100fc57805160ff1916838001178555610129565b82800160010185558215610129579182015b8281111561012957825182559160200191906001019061010e565b50610135929150610139565b5090565b61015391905b80821115610135576000815560010161013f565b90565b6107a3806101656000396000f3006080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d957806318160ddd146101635780631b9265b81461018a5780632969d202146101925780632e1a7d4d146101a7578063313ce567146101bf5780635c390f82146101ea57806370a082311461020557806388d12a4d146102265780638da5cb5b1461023b57806395d89b411461026c578063a9059cbb14610281578063b5f7f636146102b9578063f2fde38b146102ce575b6100d76102ef565b005b3480156100e557600080fd5b506100ee6103a4565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610128578181015183820152602001610110565b50505050905090810190601f1680156101555780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016f57600080fd5b50610178610431565b60408051918252519081900360200190f35b6100d7610437565b34801561019e57600080fd5b50610178610441565b3480156101b357600080fd5b506100d7600435610447565b3480156101cb57600080fd5b506101d4610504565b6040805160ff9092168252519081900360200190f35b3480156101f657600080fd5b5061017860043560243561050d565b34801561021157600080fd5b50610178600160a060020a0360043516610511565b34801561023257600080fd5b50610178610523565b34801561024757600080fd5b50610250610529565b60408051600160a060020a039092168252519081900360200190f35b34801561027857600080fd5b506100ee610538565b34801561028d57600080fd5b506102a5600160a060020a0360043516602435610590565b604080519115158252519081900360200190f35b3480156102c557600080fd5b506101786105a6565b3480156102da57600080fd5b506100d7600160a060020a03600435166105ac565b60065434906b0813f3978f89409844000000906b0cecb8f27f4200f3a0000000906b1027e72f1f128130880000009083106103365761033184624c4b406105f2565b61039e565b600654821061034c5761033184623d09006105f2565b60065481106103625761033184623567e06105f2565b604080513381526020810186905281517fc84ed8366166eed21655a3e72ffe2fe188b3704052bf2ae0a62675162a7c3d42929181900390910190a15b50505050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104295780601f106103fe57610100808354040283529160200191610429565b820191906000526020600020905b81548152906001019060200180831161040c57829003601f168201915b505050505081565b60045481565b61043f6102ef565b565b60085481565b600054600160a060020a0316331461045e57600080fd5b6000811161046b57600080fd5b60085481111561047a57600080fd5b60008054604051600160a060020a039091169183156108fc02918491818181858888f19350505050156104fc5760088054829003905560005460408051600160a060020a0390921682526020820183905280517f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b659281900390910190a1610501565b600080fd5b50565b60035460ff1681565b0290565b60056020526000908152604090205481565b60075481565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156104295780601f106103fe57610100808354040283529160200191610429565b600061059d338484610675565b50600192915050565b60065481565b600054600160a060020a031633146105c357600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60006105fe838361050d565b60005490915061061890600160a060020a03163383610675565b600780548401905560088054840190556006805482019055604080513381526020810185905280820183905290517f42a8aad03bce5faa99c641182dab32a27652f001fb7ae1565fc86915457b743b9181900360600190a1505050565b6000600160a060020a038316151561068c57600080fd5b600160a060020a0384166000908152600560205260409020548211156106b157600080fd5b600160a060020a03831660009081526005602052604090205482810110156106d857600080fd5b50600160a060020a038083166000818152600560209081526040808320805495891680855282852080548981039091559486905281548801909155815187815291519390950194927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600160a060020a0380841660009081526005602052604080822054928716825290205401811461039e57fe00a165627a7a723058204cbf17b7a51bca9b7d353c830c9880c1bbb5c95d918ea1418b753a5ac3fe41c4002900000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000007566978636f72650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045658435200000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000007566978636f72650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045658435200000000000000000000000000000000000000000000000000000000"
}