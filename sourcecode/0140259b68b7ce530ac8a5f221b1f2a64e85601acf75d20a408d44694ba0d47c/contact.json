{
  "address": "0x404c41da498cd32217e59e8ec718bd1579591748",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WinexlCoins",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-20\n*/\n\npragma solidity 0.4.24;\n\n /**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20 {\n  function totalSupply()public view returns (uint total_Supply);\n  function balanceOf(address who)public view returns (uint256);\n  function allowance(address owner, address spender)public view returns (uint);\n  function transferFrom(address from, address to, uint value)public returns (bool ok);\n  function approve(address spender, uint value)public returns (bool ok);\n  function transfer(address to, uint value)public returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\ncontract WinexlCoins is ERC20 { \n    \n    using SafeMath for uint256;\n    string public constant name = \"WINEXLCOINS\";        // Name of the token\n    string public constant symbol = \"WNX\";              // Symbol of token\n    uint8 public constant decimals = 18;\n    uint public _totalsupply = 100000000 * 10 ** 18;    // 100 million total supply // muliplies dues to decimal precision\n    address public owner;                               // Owner of this contract\n    uint256 public _price_token_PRE = 3500;             // 1 Ether = 3500 tokens in Pre-ICO\n    uint256 public _price_token_ICO1 = 3000;            // 1 Ether = 3000 tokens in ICO Phase 1\n    uint256 public _price_token_ICO2 = 2500;            // 1 Ether = 2500 tokens in ICO Phase 2\n    uint256 no_of_tokens;\n    uint256 bonus_token;\n    uint256 total_token;\n    bool stopped = false;\n    uint256 public pre_startdate;\n    uint256 public ico1_startdate;\n    uint256 ico_first;\n    uint256 ico_second;\n    uint256 pre_enddate;\n    uint256 public eth_received;                        // Total ether received in the contract\n    uint256 maxCap_public = 10000000 * 10 ** 18;        // 10 million in Public Sale\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n    uint public contractBalance = balances[address(this)];\n\n    enum Stages {\n        NOTSTARTED,\n        PREICO,\n        ICO,\n        PAUSED,\n        ENDED\n    }\n    \n    Stages public stage;\n    \n    modifier atStage(Stages _stage) {\n        if (stage != _stage)\n            // Contract not in expected state\n            revert();\n        _;\n    }\n    \n    modifier onlyOwner() {\n        if (msg.sender != owner) {\n            revert();\n        }\n        _;\n    }\n\n    function WinexlCoins() public {\n        owner = msg.sender;\n        balances[owner] = 90000000 * 10 ** 18;         // 90 million to owner\n        stage = Stages.NOTSTARTED;\n        Transfer(0, owner, balances[owner]);\n    }\n  \n    function () public payable {\n        require(stage != Stages.ENDED);\n        require(!stopped && msg.sender != owner);\n            if( stage == Stages.PREICO && now <= pre_enddate ) { \n                require (eth_received <= 1500 ether);                       // Hardcap\n                eth_received = (eth_received).add(msg.value);\n                no_of_tokens = ((msg.value).mul(_price_token_PRE)); \n                bonus_token  = ((no_of_tokens).mul(30)).div(100);           // 30% bonus in Pre-ICO\n                total_token  = no_of_tokens + bonus_token;\n                transferTokens(msg.sender,total_token);\n            }\n            else if (stage == Stages.ICO && now <= ico_second ) {\n                    \n                if( now < ico_first )\n                {\n                    no_of_tokens = (msg.value).mul(_price_token_ICO1);\n                    bonus_token  = ((no_of_tokens).mul(20)).div(100);       // 20% bonus in ICO Phase 1\n                    total_token  = no_of_tokens + bonus_token;\n                    transferTokens(msg.sender,total_token);\n                }   \n                else if( now >= ico_first && now < ico_second )\n                {\n                    no_of_tokens = (msg.value).mul(_price_token_ICO2);\n                    bonus_token  = ((no_of_tokens).mul(10)).div(100);       // 10% bonus in ICO Phase 2\n                    total_token  = no_of_tokens + bonus_token;\n                    transferTokens(msg.sender,total_token);\n                }\n                \n            }\n            else\n            {\n                revert();\n            }\n    }\n    \n    function start_PREICO() public onlyOwner atStage(Stages.NOTSTARTED)\n    {\n        stage   = Stages.PREICO;\n        stopped = false;\n        balances[address(this)] =  maxCap_public;\n        pre_startdate = now;\n        pre_enddate   = now + 15 days;                                      // 15 days PREICO\n        Transfer(0, address(this), balances[address(this)]);\n    }\n     \n    function start_ICO() public onlyOwner atStage(Stages.PREICO)\n    {\n        require(now > pre_enddate);\n        stage   = Stages.ICO;\n        stopped = false;\n        ico1_startdate = now;\n        ico_first  = now + 15 days;\n        ico_second = ico_first + 40 days;\n        \n        Transfer(0, address(this), balances[address(this)]);\n    }\n    \n    // called by the owner, pause ICO\n    function PauseICO() external onlyOwner\n    {\n        stopped = true;\n    }\n\n    // called by the owner, resumes ICO\n    function ResumeICO() external onlyOwner\n    {\n        stopped = false;\n    }\n   \n    function end_ICO() external onlyOwner atStage(Stages.ICO)\n    {\n        require(now > ico_second);\n        stage = Stages.ENDED;\n        _totalsupply = (_totalsupply).sub(balances[address(this)]);\n        balances[address(this)] = 0;\n        Transfer(address(this), 0 , balances[address(this)]);\n    }\n\n    // what is the total supply of the ech tokens\n    function totalSupply() public view returns (uint256 total_Supply) {\n        total_Supply = _totalsupply;\n    }\n    \n    // What is the balance of a particular account?\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n    \n    // Send _value amount of tokens from address _from to address _to\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n    // fees in sub-currencies; the command should fail unless the _from account has\n    // deliberately authorized the sender of the message via some mechanism; we propose\n    // these standardized APIs for approval:\n    function transferFrom( address _from, address _to, uint256 _amount ) public returns (bool success) {\n        require( _to != 0x0);\n        require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\n        balances[_from] = (balances[_from]).sub(_amount);\n        allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\n        balances[_to] = (balances[_to]).add(_amount);\n        Transfer(_from, _to, _amount);\n        return true;\n    }\n    \n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\n        require( _spender != 0x0);\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n  \n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        require( _owner != 0x0 && _spender !=0x0);\n        return allowed[_owner][_spender];\n    }\n\n    // Transfer the balance from owner's account to another account\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\n        require( _to != 0x0);\n        require(balances[msg.sender] >= _amount && _amount >= 0);\n        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\n        balances[_to] = (balances[_to]).add(_amount);\n        Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n    \n    // Transfer the balance from owner's account to another account\n    function transferTokens(address _to, uint256 _amount) private returns (bool success) {\n        require( _to != 0x0);       \n        require(balances[address(this)] >= _amount && _amount > 0);\n        balances[address(this)] = (balances[address(this)]).sub(_amount);\n        balances[_to] = (balances[_to]).add(_amount);\n        Transfer(address(this), _to, _amount);\n        return true;\n    }\n \n    function drain() external onlyOwner {\n        owner.transfer(this.balance);\n    }\n}",
  "bytecode": "60806040526a52b7d2dcc80cd2e4000000600055610dac600255610bb86003556109c46004556000600860006101000a81548160ff0219169083151502179055506a084595161401484a000000600f55601060003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460125534801561009e57600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506a4a723dc6b40b8a9a00000060106000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000601360006101000a81548160ff0219169083600481111561017057fe5b0217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60106000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3611cdf806102576000396000f300608060405260043610610149576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302c3d7f61461040757806306a815911461041e57806306fdde0314610449578063095ea7b3146104d957806318160ddd1461053e57806323b872dd14610569578063313ce567146105ee578063405df3381461061f57806364e8d6821461063657806370a0823114610661578063807d2da3146106b85780638666107c146106cf5780638b7afe2e146106fa5780638da5cb5b1461072557806395d89b411461077c5780639890220b1461080c578063a393dc4414610823578063a9059cbb1461084e578063a913eb24146108b3578063c040e6b8146108de578063cd18704314610917578063cd7a2c3b14610942578063cf5ae51614610959578063d44aecb014610970578063dd62ed3e1461099b575b60048081111561015557fe5b601360009054906101000a900460ff16600481111561017057fe5b1415151561017d57600080fd5b600860009054906101000a900460ff161580156101e85750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15156101f357600080fd5b6001600481111561020057fe5b601360009054906101000a900460ff16600481111561021b57fe5b14801561022a5750600d544211155b156102cd57685150ae84a8cdf00000600e541115151561024957600080fd5b61025e34600e54610a1290919063ffffffff16565b600e8190555061027960025434610a3090919063ffffffff16565b6005819055506102a8606461029a601e600554610a3090919063ffffffff16565b610a6b90919063ffffffff16565b600681905550600654600554016007819055506102c733600754610a86565b50610405565b600260048111156102da57fe5b601360009054906101000a900460ff1660048111156102f557fe5b1480156103045750600c544211155b156103ff57600b5442101561037c5761032860035434610a3090919063ffffffff16565b60058190555061035760646103496014600554610a3090919063ffffffff16565b610a6b90919063ffffffff16565b6006819055506006546005540160078190555061037633600754610a86565b506103fa565b600b54421015801561038f5750600c5442105b156103f9576103a960045434610a3090919063ffffffff16565b6005819055506103d860646103ca600a600554610a3090919063ffffffff16565b610a6b90919063ffffffff16565b600681905550600654600554016007819055506103f733600754610a86565b505b5b610404565b600080fd5b5b005b34801561041357600080fd5b5061041c610ca0565b005b34801561042a57600080fd5b50610433610e96565b6040518082815260200191505060405180910390f35b34801561045557600080fd5b5061045e610e9c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561049e578082015181840152602081019050610483565b50505050905090810190601f1680156104cb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104e557600080fd5b50610524600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ed5565b604051808215151515815260200191505060405180910390f35b34801561054a57600080fd5b50610553610fec565b6040518082815260200191505060405180910390f35b34801561057557600080fd5b506105d4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ff5565b604051808215151515815260200191505060405180910390f35b3480156105fa57600080fd5b506106036113a8565b604051808260ff1660ff16815260200191505060405180910390f35b34801561062b57600080fd5b506106346113ad565b005b34801561064257600080fd5b5061064b611568565b6040518082815260200191505060405180910390f35b34801561066d57600080fd5b506106a2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061156e565b6040518082815260200191505060405180910390f35b3480156106c457600080fd5b506106cd6115b7565b005b3480156106db57600080fd5b506106e461174a565b6040518082815260200191505060405180910390f35b34801561070657600080fd5b5061070f611750565b6040518082815260200191505060405180910390f35b34801561073157600080fd5b5061073a611756565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561078857600080fd5b5061079161177c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107d15780820151818401526020810190506107b6565b50505050905090810190601f1680156107fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561081857600080fd5b506108216117b5565b005b34801561082f57600080fd5b50610838611893565b6040518082815260200191505060405180910390f35b34801561085a57600080fd5b50610899600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611899565b604051808215151515815260200191505060405180910390f35b3480156108bf57600080fd5b506108c8611ab4565b6040518082815260200191505060405180910390f35b3480156108ea57600080fd5b506108f3611aba565b6040518082600481111561090357fe5b60ff16815260200191505060405180910390f35b34801561092357600080fd5b5061092c611acd565b6040518082815260200191505060405180910390f35b34801561094e57600080fd5b50610957611ad3565b005b34801561096557600080fd5b5061096e611b4c565b005b34801561097c57600080fd5b50610985611bc5565b6040518082815260200191505060405180910390f35b3480156109a757600080fd5b506109fc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bcb565b6040518082815260200191505060405180910390f35b6000808284019050838110151515610a2657fe5b8091505092915050565b6000806000841415610a455760009150610a64565b8284029050828482811515610a5657fe5b04141515610a6057fe5b8091505b5092915050565b6000808284811515610a7957fe5b0490508091505092915050565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515610aad57600080fd5b81601060003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610afc5750600082115b1515610b0757600080fd5b610b5982601060003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c9a90919063ffffffff16565b601060003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bee82601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a1290919063ffffffff16565b601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610cfc57600080fd5b6002806004811115610d0a57fe5b601360009054906101000a900460ff166004811115610d2557fe5b141515610d3157600080fd5b600c5442111515610d4157600080fd5b6004601360006101000a81548160ff02191690836004811115610d6057fe5b0217905550610db9601060003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600054611c9a90919063ffffffff16565b6000819055506000601060003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef601060003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a350565b60025481565b6040805190810160405280600b81526020017f57494e45584c434f494e5300000000000000000000000000000000000000000081525081565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515610efc57600080fd5b81601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008054905090565b6000808373ffffffffffffffffffffffffffffffffffffffff161415151561101c57600080fd5b81601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156110e7575081601160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156110f4575060008210155b15156110ff57600080fd5b61115182601060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c9a90919063ffffffff16565b601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061122382601160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c9a90919063ffffffff16565b601160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112f582601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a1290919063ffffffff16565b601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561140957600080fd5b600080600481111561141757fe5b601360009054906101000a900460ff16600481111561143257fe5b14151561143e57600080fd5b6001601360006101000a81548160ff0219169083600481111561145d57fe5b02179055506000600860006101000a81548160ff021916908315150217905550600f54601060003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550426009819055506213c6804201600d819055503073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef601060003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a350565b60095481565b6000601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561161357600080fd5b600180600481111561162157fe5b601360009054906101000a900460ff16600481111561163c57fe5b14151561164857600080fd5b600d544211151561165857600080fd5b6002601360006101000a81548160ff0219169083600481111561167757fe5b02179055506000600860006101000a81548160ff02191690831515021790555042600a819055506213c6804201600b819055506234bc00600b5401600c819055503073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef601060003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a350565b600e5481565b60125481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f574e58000000000000000000000000000000000000000000000000000000000081525081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561181157600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015611890573d6000803e3d6000fd5b50565b60005481565b6000808373ffffffffffffffffffffffffffffffffffffffff16141515156118c057600080fd5b81601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015611910575060008210155b151561191b57600080fd5b61196d82601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c9a90919063ffffffff16565b601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a0282601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a1290919063ffffffff16565b601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60045481565b601360009054906101000a900460ff1681565b60035481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b2f57600080fd5b6000600860006101000a81548160ff021916908315150217905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ba857600080fd5b6001600860006101000a81548160ff021916908315150217905550565b600a5481565b6000808373ffffffffffffffffffffffffffffffffffffffff1614158015611c0a575060008273ffffffffffffffffffffffffffffffffffffffff1614155b1515611c1557600080fd5b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000828211151515611ca857fe5b8183039050929150505600a165627a7a723058205e2b5cffea738997ceeb6211f69053fafca12aba753fbff47ff44ef2709f0f9c0029"
}