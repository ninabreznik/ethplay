{
  "address": "0x5d8da427250233b942e0da8775cde56b215d65d8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CIVC",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-26\n*/\n\npragma solidity ^ 0.4.24;\n\n// ----------------------------------------------------------------------------\n// 安全的加减乘除\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n\tfunction add(uint a, uint b) internal pure returns(uint c) {\n\t\tc = a + b;\n\t\trequire(c >= a);\n\t}\n\n\tfunction sub(uint a, uint b) internal pure returns(uint c) {\n\t\trequire(b <= a);\n\t\tc = a - b;\n\t}\n\n\tfunction mul(uint a, uint b) internal pure returns(uint c) {\n\t\tc = a * b;\n\t\trequire(a == 0 || c / a == b);\n\t}\n\n\tfunction div(uint a, uint b) internal pure returns(uint c) {\n\t\trequire(b > 0);\n\t\tc = a / b;\n\t}\n}\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n\tfunction totalSupply() public constant returns(uint);\n\n\tfunction balanceOf(address tokenOwner) public constant returns(uint balance);\n\n\tfunction allowance(address tokenOwner, address spender) public constant returns(uint remaining);\n\n\tfunction transfer(address to, uint tokens) public returns(bool success);\n\n\tfunction approve(address spender, uint tokens) public returns(bool success);\n\n\tfunction transferFrom(address from, address to, uint tokens) public returns(bool success);\n\n\tevent Transfer(address indexed from, address indexed to, uint tokens);\n\tevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n//\n// Borrowed from MiniMeToken\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n\tfunction receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\n// ----------------------------------------------------------------------------\n// 管理员\n// ----------------------------------------------------------------------------\ncontract Owned {\n\taddress public owner;\n\taddress public newOwner;\n\n\tevent OwnershipTransferred(address indexed _from, address indexed _to);\n\n\tconstructor() public {\n\t\towner = msg.sender;\n\t}\n\n\tmodifier onlyOwner {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n\tfunction transferOwnership(address _newOwner) public onlyOwner {\n\t\tnewOwner = _newOwner;\n\t}\n\n\tfunction acceptOwnership() public {\n\t\trequire(msg.sender == newOwner);\n\t\temit OwnershipTransferred(owner, newOwner);\n\t\towner = newOwner;\n\t\tnewOwner = address(0);\n\t}\n}\n\n// ----------------------------------------------------------------------------\n// 核心类\n// ----------------------------------------------------------------------------\ncontract CIVC is ERC20Interface, Owned {\n\tusing SafeMath\n\tfor uint;\n\n\tstring public symbol;\n\tstring public name;\n\tuint8 public decimals;\n\tuint _totalSupply;\n\n\tuint public sellPrice; //出售价格 1枚代币换多少以太 /1000\n\tuint public buyPrice; //购买价格 多少以太可购买1枚代币 /1000\n\tbool public actived;\n\n\n\tmapping(address => uint) balances;\n\tmapping(address => mapping(address => uint)) allowed;\n\n\t/* 冻结账户 */\n\tmapping(address => bool) public frozenAccount;\n\n\t//上家地址\n\tmapping(address => address) public fromaddr;\n\t//管理员帐号\n\tmapping(address => bool) public admins;\n    address public adms;\n\t/* 通知 */\n\tevent FrozenFunds(address target, bool frozen);\n\t// ------------------------------------------------------------------------\n\t// Constructor\n\t// ------------------------------------------------------------------------\n\tconstructor() public {\n\n\t\tsymbol = \"CIVC\";\n\t\tname = \"CIVC Coin\";\n\t\tdecimals = 18;\n\t\t_totalSupply = 1000000000 ether;\n        adms = 0x4a4c8b50E45f1974B0fba88D22cbFb29301905e0;\n\t\tsellPrice = 1 ether; //出售价格 1token can buy how much eth\n\t\tbuyPrice = 1 ether; //购买价格 1eth can buy how much token\n\t\tactived = true;\n\t\n\t\tbalances[this] = _totalSupply;\n\t\tbalances[adms] = _totalSupply;\n\t\temit Transfer(this, adms, _totalSupply);\n\n\t}\n\n\t/* 获取用户金额 */\n\tfunction balanceOf(address tokenOwner) public view returns(uint balance) {\n\t\treturn balances[tokenOwner];\n\t}\n\n\t/*\n\t * 用户转账\n\t * @param {Object} address\n\t */\n\tfunction transfer(address to, uint tokens) public returns(bool success) {\n\t\trequire(!frozenAccount[msg.sender]);\n\t\trequire(!frozenAccount[to]);\n\t\trequire(actived == true);\n\t\trequire(balances[msg.sender] >= tokens);\n\t\trequire(msg.sender != to);\n\t\trequire(to != 0x0);\n\t\t // 检查是否溢出（数据类型的溢出）\n        require(balances[to] + tokens > balances[to]);\n        // 将此保存为将来的断言， 函数最后会有一个检验\n        uint previousBalances = balances[msg.sender] + balances[to];\n\t\t//如果用户没有上家\n\t\tif(fromaddr[to] == address(0)) {\n\t\t\t//指定上家地址\n\t\t\tfromaddr[to] = msg.sender;\n\t\t} \n\n\t\tbalances[msg.sender] = balances[msg.sender].sub(tokens);\n\t\tbalances[to] = balances[to].add(tokens);\n\t\temit Transfer(msg.sender, to, tokens);\n\t\t// 断言检测， 不应该为错\n        assert(balances[msg.sender] + balances[to] == previousBalances);\n\t\treturn true;\n\t}\n\t\n\t/*\n\t * 获取上家地址\n\t * @param {Object} address\n\t */\n\tfunction getfrom(address _addr) public view returns(address) {\n\t\treturn(fromaddr[_addr]);\n\t}\n\n\tfunction approve(address spender, uint tokens) public returns(bool success) {\n\t\trequire(admins[msg.sender] == true);\n\t\tallowed[msg.sender][spender] = tokens;\n\t\temit Approval(msg.sender, spender, tokens);\n\t\treturn true;\n\t}\n\t/*\n\t * 授权转账\n\t * @param {Object} address\n\t */\n\tfunction transferFrom(address from, address to, uint tokens) public returns(bool success) {\n\t\trequire(actived == true);\n\t\trequire(!frozenAccount[from]);\n\t\trequire(!frozenAccount[to]);\n\t\tbalances[from] = balances[from].sub(tokens);\n\t\tallowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n\t\tbalances[to] = balances[to].add(tokens);\n\t\temit Transfer(from, to, tokens);\n\t\treturn true;\n\t}\n\n\t/*\n\t * 获取授权信息\n\t * @param {Object} address\n\t */\n\tfunction allowance(address tokenOwner, address spender) public view returns(uint remaining) {\n\t\treturn allowed[tokenOwner][spender];\n\t}\n\n\t/*\n\t * 授权\n\t * @param {Object} address\n\t */\n\tfunction approveAndCall(address spender, uint tokens, bytes data) public returns(bool success) {\n\t\tallowed[msg.sender][spender] = tokens;\n\t\temit Approval(msg.sender, spender, tokens);\n\t\tApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n\t\treturn true;\n\t}\n\n\t/// 冻结 or 解冻账户\n\tfunction freezeAccount(address target, bool freeze) public {\n\t\trequire(admins[msg.sender] == true);\n\t\tfrozenAccount[target] = freeze;\n\t\temit FrozenFunds(target, freeze);\n\t}\n\t/*\n\t * 设置管理员\n\t * @param {Object} address\n\t */\n\tfunction admAccount(address target, bool freeze) onlyOwner public {\n\t\tadmins[target] = freeze;\n\t}\n\t/*\n\t * 系统设置\n\t * @param {Object} uint\n\t */\n\tfunction setPrices(uint newBuyPrice, uint newSellPrice) public {\n\t\trequire(admins[msg.sender] == true);\n\t\tbuyPrice = newBuyPrice;\n\t\tsellPrice = newSellPrice;\n\t}\n\t/*\n\t * 获取系统设置\n\t */\n\tfunction getprice() public view returns(uint bprice, uint spice) {\n\t\tbprice = buyPrice;\n\t\tspice = sellPrice;\n\t\t\n\t}\n\t/*\n\t * 设置是否开启\n\t * @param {Object} bool\n\t */\n\tfunction setactive(bool tags) public onlyOwner {\n\t\tactived = tags;\n\t}\n\n\t/*\n\t * 获取总发行\n\t */\n\tfunction totalSupply() public view returns(uint) {\n\t\treturn _totalSupply.sub(balances[this]);\n\t}\n\t/*\n\t * 向指定账户拨发资金\n\t * @param {Object} address\n\t */\n\tfunction mintToken(address target, uint256 mintedAmount) public {\n\t\trequire(!frozenAccount[target]);\n\t\trequire(admins[msg.sender] == true);\n\t\trequire(actived == true);\n        require(balances[this] >= mintedAmount);\n\t\tbalances[target] = balances[target].add(mintedAmount);\n\t\tbalances[this] = balances[this].sub(mintedAmount);\n\t\temit Transfer(this, target, mintedAmount);\n\n\t}\n\t\n\t\n\t/*\n\t * 购买\n\t */\n\tfunction buy() public payable returns(uint) {\n\t\trequire(actived == true);\n\t\trequire(!frozenAccount[msg.sender]);\n\t\trequire(msg.value > 0);\n\n\t\tuint amount = msg.value * buyPrice/1 ether;\n\t\trequire(balances[this] >= amount);\n\t\tbalances[msg.sender] = balances[msg.sender].add(amount);\n\t\tbalances[this] = balances[this].sub(amount);\n\t\temit Transfer(owner, msg.sender, amount);\n\t\treturn(amount);\n\t}\n\t/*\n\t * 系统充值\n\t */\n\tfunction charge() public payable returns(bool) {\n\t\t//require(actived == true);\n\t\treturn(true);\n\t}\n\t\n\tfunction() payable public {\n\t\tbuy();\n\t}\n\t/*\n\t * 系统提现\n\t * @param {Object} address\n\t */\n\tfunction withdraw(address _to) public onlyOwner {\n\t\trequire(actived == true);\n\t\trequire(!frozenAccount[_to]);\n\t\t_to.transfer(address(this).balance);\n\t}\n\t/*\n\t * 出售\n\t * @param {Object} uint256\n\t */\n\tfunction sell(uint256 amount) public returns(bool success) {\n\t\trequire(actived == true);\n\t\trequire(!frozenAccount[msg.sender]);\n\t\trequire(amount > 0);\n\t\trequire(balances[msg.sender] >= amount);\n\t\t//uint moneys = (amount * sellPrice) / 10 ** uint(decimals);\n\t\tuint moneys = amount * sellPrice/1 ether;\n\t\trequire(address(this).balance >= moneys);\n\t\tmsg.sender.transfer(moneys);\n\t\tbalances[msg.sender] = balances[msg.sender].sub(amount);\n\t\tbalances[this] = balances[this].add(amount);\n\n\t\temit Transfer(msg.sender, this, amount);\n\t\treturn(true);\n\t}\n\t/*\n\t * 批量发币\n\t * @param {Object} address\n\t */\n\tfunction addBalances(address[] recipients, uint256[] moenys) public{\n\t\trequire(admins[msg.sender] == true);\n\t\tuint256 sum = 0;\n\t\tfor(uint256 i = 0; i < recipients.length; i++) {\n\t\t\tbalances[recipients[i]] = balances[recipients[i]].add(moenys[i]);\n\t\t\temit Transfer(this, msg.sender, moenys[i]);\n\t\t\tsum = sum.add(moenys[i]);\n\t\t}\n\t\tbalances[this] = balances[this].sub(sum);\n\t}\n\t/*\n\t * 批量减币\n\t * @param {Object} address\n\t */\n\tfunction subBalances(address[] recipients, uint256[] moenys) public{\n\t\trequire(admins[msg.sender] == true);\n\t\tuint256 sum = 0;\n\t\tfor(uint256 i = 0; i < recipients.length; i++) {\n\t\t\tbalances[recipients[i]] = balances[recipients[i]].sub(moenys[i]);\n\t\t\temit Transfer(msg.sender, this, moenys[i]);\n\t\t\tsum = sum.add(moenys[i]);\n\t\t}\n\t\tbalances[this] = balances[this].add(sum);\n\t}\n\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060008054600160a060020a031916331790556040805180820190915260048082527f434956430000000000000000000000000000000000000000000000000000000060209092019182526200006a9160029162000184565b506040805180820190915260098082527f4349564320436f696e00000000000000000000000000000000000000000000006020909201918252620000b19160039162000184565b506004805460ff199081166012179091556b033b2e3c9fd0803ce80000006005819055600e8054600160a060020a031916734a4c8b50e45f1974b0fba88d22cbfb29301905e0178155670de0b6b3a76400006006819055600755600880549093166001179092553060008181526009602090815260408083208590558554600160a060020a03908116845292819020859055945485519485529451949091169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a362000229565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001c757805160ff1916838001178555620001f7565b82800160010185558215620001f7579182015b82811115620001f7578251825591602001919060010190620001da565b506200020592915062000209565b5090565b6200022691905b8082111562000205576000815560010162000210565b90565b6117a680620002396000396000f3006080604052600436106101ab5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305fefda781146101b657806306fdde03146101d3578063095ea7b31461025d5780630c0a6499146102955780630fcb5984146102c657806318160ddd146102f457806323b872dd1461031b578063313ce56714610345578063429b62e51461037057806346e3606014610391578063478904eb1461041f5780634b7503341461044057806351cff8d914610455578063551619131461047657806370a082311461047e57806379ba50971461049f57806379c65068146104b45780638620410b146104d85780638da5cb5b146104ed57806395d89b4114610502578063a6f2ae3a14610517578063a9059cbb1461051f578063b414d4b614610543578063cae9ca5114610564578063ceaf0bfb146105cd578063d4ee1d90146105f3578063dd62ed3e14610608578063ddf0c0701461062f578063e4849b32146106bd578063e724529c146106d5578063e736f03c146106fb578063e987cc4514610710578063f2fde38b14610731578063f43a72b014610752575b6101b361076c565b50005b3480156101c257600080fd5b506101d1600435602435610870565b005b3480156101df57600080fd5b506101e861089c565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561022257818101518382015260200161020a565b50505050905090810190601f16801561024f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561026957600080fd5b50610281600160a060020a036004351660243561092a565b604080519115158252519081900360200190f35b3480156102a157600080fd5b506102aa6109b3565b60408051600160a060020a039092168252519081900360200190f35b3480156102d257600080fd5b506102db6109c2565b6040805192835260208301919091528051918290030190f35b34801561030057600080fd5b506103096109cc565b60408051918252519081900360200190f35b34801561032757600080fd5b50610281600160a060020a03600435811690602435166044356109f3565b34801561035157600080fd5b5061035a610b4f565b6040805160ff9092168252519081900360200190f35b34801561037c57600080fd5b50610281600160a060020a0360043516610b58565b34801561039d57600080fd5b50604080516020600480358082013583810280860185019096528085526101d195369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610b6d9650505050505050565b34801561042b57600080fd5b506102aa600160a060020a0360043516610cda565b34801561044c57600080fd5b50610309610cf5565b34801561046157600080fd5b506101d1600160a060020a0360043516610cfb565b610281610d86565b34801561048a57600080fd5b50610309600160a060020a0360043516610d8b565b3480156104ab57600080fd5b506101d1610da6565b3480156104c057600080fd5b506101d1600160a060020a0360043516602435610e2e565b3480156104e457600080fd5b50610309610f43565b3480156104f957600080fd5b506102aa610f49565b34801561050e57600080fd5b506101e8610f58565b61030961076c565b34801561052b57600080fd5b50610281600160a060020a0360043516602435610fb0565b34801561054f57600080fd5b50610281600160a060020a03600435166111af565b34801561057057600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610281948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506111c49650505050505050565b3480156105d957600080fd5b506101d1600160a060020a03600435166024351515611325565b3480156105ff57600080fd5b506102aa611367565b34801561061457600080fd5b50610309600160a060020a0360043581169060243516611376565b34801561063b57600080fd5b50604080516020600480358082013583810280860185019096528085526101d195369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506113a19650505050505050565b3480156106c957600080fd5b506102816004356114e1565b3480156106e157600080fd5b506101d1600160a060020a03600435166024351515611619565b34801561070757600080fd5b5061028161169e565b34801561071c57600080fd5b506102aa600160a060020a03600435166116a7565b34801561073d57600080fd5b506101d1600160a060020a03600435166116c5565b34801561075e57600080fd5b506101d1600435151561170b565b600854600090819060ff16151560011461078557600080fd5b336000908152600b602052604090205460ff16156107a257600080fd5b600034116107af57600080fd5b600754670de0b6b3a76400009034023060009081526009602052604090205491900491508111156107df57600080fd5b336000908152600960205260409020546107ff908263ffffffff61173516565b33600090815260096020526040808220929092553081522054610828908263ffffffff61174516565b306000908152600960209081526040808320939093559054825184815292513393600160a060020a039092169260008051602061175b833981519152928290030190a3919050565b336000908152600d602052604090205460ff16151560011461089157600080fd5b600791909155600655565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109225780601f106108f757610100808354040283529160200191610922565b820191906000526020600020905b81548152906001019060200180831161090557829003601f168201915b505050505081565b336000908152600d602052604081205460ff16151560011461094b57600080fd5b336000818152600a60209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b600e54600160a060020a031681565b6007546006549091565b306000908152600960205260408120546005546109ee9163ffffffff61174516565b905090565b60085460009060ff161515600114610a0a57600080fd5b600160a060020a0384166000908152600b602052604090205460ff1615610a3057600080fd5b600160a060020a0383166000908152600b602052604090205460ff1615610a5657600080fd5b600160a060020a038416600090815260096020526040902054610a7f908363ffffffff61174516565b600160a060020a038516600090815260096020908152604080832093909355600a815282822033835290522054610abc908363ffffffff61174516565b600160a060020a038086166000908152600a60209081526040808320338452825280832094909455918616815260099091522054610b00908363ffffffff61173516565b600160a060020a03808516600081815260096020908152604091829020949094558051868152905191939288169260008051602061175b83398151915292918290030190a35060019392505050565b60045460ff1681565b600d6020526000908152604090205460ff1681565b336000908152600d6020526040812054819060ff161515600114610b9057600080fd5b5060009050805b8351811015610ca457610bfc8382815181101515610bb157fe5b90602001906020020151600960008785815181101515610bcd57fe5b6020908102909101810151600160a060020a03168252810191909152604001600020549063ffffffff61174516565b600960008684815181101515610c0e57fe5b6020908102909101810151600160a060020a031682528101919091526040016000205582513090339060008051602061175b83398151915290869085908110610c5357fe5b906020019060200201516040518082815260200191505060405180910390a3610c9a8382815181101515610c8357fe5b60209081029091010151839063ffffffff61173516565b9150600101610b97565b30600090815260096020526040902054610cc4908363ffffffff61173516565b3060009081526009602052604090205550505050565b600c60205260009081526040902054600160a060020a031681565b60065481565b600054600160a060020a03163314610d1257600080fd5b60085460ff161515600114610d2657600080fd5b600160a060020a0381166000908152600b602052604090205460ff1615610d4c57600080fd5b604051600160a060020a03821690303180156108fc02916000818181858888f19350505050158015610d82573d6000803e3d6000fd5b5050565b600190565b600160a060020a031660009081526009602052604090205490565b600154600160a060020a03163314610dbd57600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600160a060020a0382166000908152600b602052604090205460ff1615610e5457600080fd5b336000908152600d602052604090205460ff161515600114610e7557600080fd5b60085460ff161515600114610e8957600080fd5b30600090815260096020526040902054811115610ea557600080fd5b600160a060020a038216600090815260096020526040902054610ece908263ffffffff61173516565b600160a060020a038316600090815260096020526040808220929092553081522054610f00908263ffffffff61174516565b306000818152600960209081526040918290209390935580518481529051600160a060020a0386169360008051602061175b833981519152928290030190a35050565b60075481565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156109225780601f106108f757610100808354040283529160200191610922565b336000908152600b6020526040812054819060ff1615610fcf57600080fd5b600160a060020a0384166000908152600b602052604090205460ff1615610ff557600080fd5b60085460ff16151560011461100957600080fd5b3360009081526009602052604090205483111561102557600080fd5b33600160a060020a038516141561103b57600080fd5b600160a060020a038416151561105057600080fd5b600160a060020a0384166000908152600960205260409020548381011161107657600080fd5b50600160a060020a0380841660008181526009602090815260408083205433845281842054948452600c909252909120549101911615156110e757600160a060020a0384166000908152600c60205260409020805473ffffffffffffffffffffffffffffffffffffffff1916331790555b33600090815260096020526040902054611107908463ffffffff61174516565b3360009081526009602052604080822092909255600160a060020a03861681522054611139908463ffffffff61173516565b600160a060020a03851660008181526009602090815260409182902093909355805186815290519192339260008051602061175b8339815191529281900390910190a3600160a060020a038416600090815260096020526040808220543383529120540181146111a557fe5b5060019392505050565b600b6020526000908152604090205460ff1681565b336000818152600a60209081526040808320600160a060020a038816808552908352818420879055815187815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a36040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018690523060448401819052608060648501908152865160848601528651600160a060020a038a1695638f4ffcb195948a94938a939192909160a490910190602085019080838360005b838110156112b457818101518382015260200161129c565b50505050905090810190601f1680156112e15780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561130357600080fd5b505af1158015611317573d6000803e3d6000fd5b506001979650505050505050565b600054600160a060020a0316331461133c57600080fd5b600160a060020a03919091166000908152600d60205260409020805460ff1916911515919091179055565b600154600160a060020a031681565b600160a060020a039182166000908152600a6020908152604080832093909416825291909152205490565b336000908152600d6020526040812054819060ff1615156001146113c457600080fd5b5060009050805b83518110156114c15761143083828151811015156113e557fe5b9060200190602002015160096000878581518110151561140157fe5b6020908102909101810151600160a060020a03168252810191909152604001600020549063ffffffff61173516565b60096000868481518110151561144257fe5b6020908102909101810151600160a060020a031682528101919091526040016000205582513390309060008051602061175b8339815191529086908590811061148757fe5b906020019060200201516040518082815260200191505060405180910390a36114b78382815181101515610c8357fe5b91506001016113cb565b30600090815260096020526040902054610cc4908363ffffffff61174516565b600854600090819060ff1615156001146114fa57600080fd5b336000908152600b602052604090205460ff161561151757600080fd5b6000831161152457600080fd5b3360009081526009602052604090205483111561154057600080fd5b50600654670de0b6b3a764000090830204303181111561155f57600080fd5b604051339082156108fc029083906000818181858888f1935050505015801561158c573d6000803e3d6000fd5b50336000908152600960205260409020546115ad908463ffffffff61174516565b336000908152600960205260408082209290925530815220546115d6908463ffffffff61173516565b3060008181526009602090815260409182902093909355805186815290519192339260008051602061175b8339815191529281900390910190a350600192915050565b336000908152600d602052604090205460ff16151560011461163a57600080fd5b600160a060020a0382166000818152600b6020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b60085460ff1681565b600160a060020a039081166000908152600c60205260409020541690565b600054600160a060020a031633146116dc57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a0316331461172257600080fd5b6008805460ff1916911515919091179055565b818101828110156109ad57600080fd5b60008282111561175457600080fd5b509003905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820f69f5639005fd690a4fd79c1eec52075795d0485b54ed97b3ff6396b504c03370029"
}