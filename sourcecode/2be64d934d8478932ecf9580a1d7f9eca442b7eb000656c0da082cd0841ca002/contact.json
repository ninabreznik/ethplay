{
  "address": "0xc5ea8d4c0336672437c942949cc8a5c2b9741bc3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenTemplate",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-10\n*/\n\npragma solidity ^0.4.24;\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\ncontract CrowdsaleInterface {\n\n    bool fundingGoalReached = false;\n    bool crowdsaleClosed = false;\n\n    mapping(address => uint8) whitelist;\n    mapping(uint256 => address) holders;\n    mapping(address => uint) maxInvestLimitList;\n\n    uint256 _totalHolders; // you should initialize this to 0 in the constructor\n\n    function enableWhitelist(address[] _addresses) public returns (bool success);\n    function setMaximumInvest(address _address, uint _amount) public returns (bool success);\n\n    modifier onlyWhitelist() {\n        require(whitelist[msg.sender] == 2);\n        _;\n    }\n\n\n\n\n}\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n      * @dev Allows the current owner to transfer control of the contract to a newOwner.\n      * @param newOwner The address to transfer ownership to.\n      */\n    // function transferOwnership(address newOwner) public onlyOwner {\n    //     _transferOwnership(newOwner);\n    // }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\ncontract TokenTemplate is ERC20Interface, CrowdsaleInterface, Owned {\n    using SafeMath for uint;\n\n    bytes32 public symbol;\n    uint public priceRate;\n    uint public minimumInvest;\n    bytes32 public  name;\n    uint8 public decimals;\n    uint _totalSupply;\n    uint amountRaised;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    constructor(bytes32 _name, bytes32 _symbol, uint _total, uint _weiCostOfEachToken, uint _weiMinimumInvest) public {\n        symbol = _symbol;\n        name = _name;\n        decimals = 18;\n        priceRate= _weiCostOfEachToken;\n        minimumInvest= _weiMinimumInvest;\n        _totalSupply = _total * 10**uint(decimals);\n\n        _totalHolders = 0;\n\n        balances[owner] = _totalSupply;\n        holders[_totalHolders] = owner;\n        whitelist[owner] = 2;\n        maxInvestLimitList[owner] = 0;\n        _totalHolders++;\n\n\n        emit Transfer(address(0), owner, _totalSupply);\n\n\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public view returns (uint) {\n        return _totalSupply.sub(balances[address(0)]);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to `to` account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens) onlyWhitelist public returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    //\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces\n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) onlyWhitelist public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer `tokens` from the `from` account to the `to` account\n    //\n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the `from` account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens) onlyWhitelist public returns (bool success) {\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n    function enableWhitelist(address[] _addresses) public onlyOwner returns (bool success) {\n        for (uint i = 0; i < _addresses.length; i++) {\n            _addWalletToWhitelist(_addresses[i]);\n        }\n        return true;\n    }\n    function _addWalletToWhitelist(address addr) internal {\n        if (whitelist[addr] == 2) {\n        } else if (whitelist[addr] == 1) {\n            whitelist[addr] = 2;\n        } else {\n            whitelist[addr] = 2;\n            holders[_totalHolders] = addr;\n            maxInvestLimitList[addr] = 0;\n            _totalHolders++;\n        }\n    }\n\n    function disableWhitelist(address[] _addresses) public onlyOwner returns (bool success) {\n        for (uint i = 0; i < _addresses.length; i++) {\n            _disableWhitelist(_addresses[i]);\n        }\n        return true;\n    }\n\n    function _disableWhitelist(address addr) internal {\n        if (whitelist[addr] == 2) {\n            whitelist[addr] = 1;\n        } else {\n        }\n    }\n\n    function getWhitelist() public view returns (address[] addresses) {\n\n        uint256 j;\n        uint256 count = 0;\n\n        for (j=0; j<_totalHolders; j++) {\n            if (whitelist[holders[j]] == 2) {\n                count = count+1;\n            } else {\n            }\n        }\n        address[] memory wlist = new address[](count);\n\n        for (j=0; j<count; j++) {\n            if (whitelist[holders[j]] == 2) {\n                wlist[j] = holders[j];\n            } else {\n            }\n        }\n        return wlist;\n    }\n\n    function getBalances() public view returns (address[] _addresses, uint256[] _balances) {\n        address[] memory wlist1 = new address[](_totalHolders);\n        uint256[] memory wlist2 = new uint256[](_totalHolders);\n\n        for (uint256 j=0; j<_totalHolders; j++) {\n            //////if (whitelist[holders[j]] == 2) {\n                wlist1[j] = holders[j];\n                wlist2[j] = balances[holders[j]];\n            //////}\n        }\n        return (wlist1,wlist2);\n    }\n\n    function getBalancesAndMaxLimit() public view returns (address[] _addresses, uint256[] _balances, uint256[] _limits) {\n        address[] memory wlist1 = new address[](_totalHolders);\n        uint256[] memory wlist2 = new uint256[](_totalHolders);\n        uint256[] memory wlist3 = new uint256[](_totalHolders);\n\n        for (uint256 j=0; j<_totalHolders; j++) {\n            //////if (whitelist[holders[j]] == 2) {\n                wlist1[j] = holders[j];\n                wlist2[j] = balances[holders[j]];\n                wlist3[j] = maxInvestLimitList[holders[j]];\n            //////}\n        }\n        return (wlist1,wlist2,wlist3);\n    }\n\n    function closeCrowdsale() public onlyOwner  {\n        crowdsaleClosed = true;\n    }\n\n    function safeWithdrawal() public onlyOwner {\n        require(crowdsaleClosed);\n        require(!fundingGoalReached);\n\n        if (msg.sender.send(amountRaised)) {\n            fundingGoalReached = true;\n        } else {\n            fundingGoalReached = false;\n        }\n\n    }\n\n    // immediate withdrawal withou funding goal reached and without crowdsale close\n    function immediateWithdrawal() public onlyOwner {\n        if (msg.sender.send(amountRaised)) {\n            //fundingGoalReached = true;\n            amountRaised = 0;\n        } else {\n            //fundingGoalReached = false;\n        }\n    }\n\n    function burnTokens(uint token_amount) public onlyOwner {\n\n        require(!crowdsaleClosed);\n        balances[owner] = balances[owner].sub(token_amount);\n        _totalSupply = _totalSupply.sub(token_amount);\n        emit Transfer(owner, address(0), token_amount);\n    }\n\n    function mintTokens(uint token_amount) public onlyOwner {\n        require(!crowdsaleClosed);\n        _totalSupply = _totalSupply.add(token_amount);\n        balances[owner] = balances[owner].add(token_amount);\n        emit Transfer(address(0), owner, token_amount);\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n\n        require(!crowdsaleClosed);\n\n        // enable newOwner to whitelist\n        _addWalletToWhitelist(newOwner);\n\n        // puts unrealized tokens to new owner\n        uint token_amount = balances[owner];\n        balances[owner] = 0;\n        balances[newOwner] = balances[newOwner].add(token_amount);\n        emit Transfer(owner, newOwner, token_amount);\n\n        // change owner\n        _transferOwnership(newOwner);\n\n    }\n\n    function setMaximumInvest(address _address, uint _amount) public onlyOwner returns (bool success) {\n        if (whitelist[_address] == 2) {\n            maxInvestLimitList[_address] = _amount;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function setMinimumInvest(uint _weiMinimumInvest) public onlyOwner {\n        minimumInvest = _weiMinimumInvest;\n    }\n\n    function setPriceRate(uint _weiCostOfEachToken) public onlyOwner {\n        priceRate = _weiCostOfEachToken;\n    }\n\n    function () payable onlyWhitelist public {\n\n        require(!crowdsaleClosed);\n        uint amount = msg.value;\n        require(amount >= minimumInvest);\n        require(amount.div(priceRate) > 0);\n        require( maxInvestLimitList[msg.sender]>=amount || maxInvestLimitList[msg.sender] == 0 );\n\n        uint token_amount = (amount.div(priceRate))*10**18;\n\n        amountRaised = amountRaised.add(amount);\n\n        balances[owner] = balances[owner].sub(token_amount);\n        balances[msg.sender] = balances[msg.sender].add(token_amount);\n        emit Transfer(owner, msg.sender, token_amount);\n\n    }\n\n\n}",
  "bytecode": "",
  "constructorArguments": "5465737420746f6b656e20544553544a36000000000000000000000000000000544553544a360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
}