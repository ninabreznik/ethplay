{
  "address": "0x8d6b6f21e4519ec10f54842cd9c113ee7e50e04a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MonethaVoucher",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-23\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20Basic _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n\n  function safeTransferFrom(\n    ERC20 _token,\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transferFrom(_from, _to, _value));\n  }\n\n  function safeApprove(\n    ERC20 _token,\n    address _spender,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.approve(_spender, _value));\n  }\n}\n\n// File: contracts/IMonethaVoucher.sol\n\ninterface IMonethaVoucher {\n    /**\n    * @dev Total number of vouchers in shared pool\n    */\n    function totalInSharedPool() external view returns (uint256);\n\n    /**\n     * @dev Converts vouchers to equivalent amount of wei.\n     * @param _value amount of vouchers (vouchers) to convert to amount of wei\n     * @return A uint256 specifying the amount of wei.\n     */\n    function toWei(uint256 _value) external view returns (uint256);\n\n    /**\n     * @dev Converts amount of wei to equivalent amount of vouchers.\n     * @param _value amount of wei to convert to vouchers (vouchers)\n     * @return A uint256 specifying the amount of vouchers.\n     */\n    function fromWei(uint256 _value) external view returns (uint256);\n\n    /**\n     * @dev Applies discount for address by returning vouchers to shared pool and transferring funds (in wei). May be called only by Monetha.\n     * @param _for address to apply discount for\n     * @param _vouchers amount of vouchers to return to shared pool\n     * @return Actual number of vouchers returned to shared pool and amount of funds (in wei) transferred.\n     */\n    function applyDiscount(address _for, uint256 _vouchers) external returns (uint256 amountVouchers, uint256 amountWei);\n\n    /**\n     * @dev Applies payback by transferring vouchers from the shared pool to the user.\n     * The amount of transferred vouchers is equivalent to the amount of Ether in the `_amountWei` parameter.\n     * @param _for address to apply payback for\n     * @param _amountWei amount of Ether to estimate the amount of vouchers\n     * @return The number of vouchers added\n     */\n    function applyPayback(address _for, uint256 _amountWei) external returns (uint256 amountVouchers);\n\n    /**\n     * @dev Function to buy vouchers by transferring equivalent amount in Ether to contract. May be called only by Monetha.\n     * After the vouchers are purchased, they can be sold or released to another user. Purchased vouchers are stored in\n     * a separate pool and may not be expired.\n     * @param _vouchers The amount of vouchers to buy. The caller must also transfer an equivalent amount of Ether.\n     */\n    function buyVouchers(uint256 _vouchers) external payable;\n\n    /**\n     * @dev The function allows Monetha account to sell previously purchased vouchers and get Ether from the sale.\n     * The equivalent amount of Ether will be transferred to the caller. May be called only by Monetha.\n     * @param _vouchers The amount of vouchers to sell.\n     * @return A uint256 specifying the amount of Ether (in wei) transferred to the caller.\n     */\n    function sellVouchers(uint256 _vouchers) external returns(uint256 weis);\n\n    /**\n     * @dev Function allows Monetha account to release the purchased vouchers to any address.\n     * The released voucher acquires an expiration property and should be used in Monetha ecosystem within 6 months, otherwise\n     * it will be returned to shared pool. May be called only by Monetha.\n     * @param _to address to release vouchers to.\n     * @param _value the amount of vouchers to release.\n     */\n    function releasePurchasedTo(address _to, uint256 _value) external returns (bool);\n\n    /**\n     * @dev Function to check the amount of vouchers that an owner (Monetha account) allowed to sell or release to some user.\n     * @param owner The address which owns the funds.\n     * @return A uint256 specifying the amount of vouchers still available for the owner.\n     */\n    function purchasedBy(address owner) external view returns (uint256);\n}\n\n// File: monetha-utility-contracts/contracts/Restricted.sol\n\n/** @title Restricted\n *  Exposes onlyMonetha modifier\n */\ncontract Restricted is Ownable {\n\n    //MonethaAddress set event\n    event MonethaAddressSet(\n        address _address,\n        bool _isMonethaAddress\n    );\n\n    mapping (address => bool) public isMonethaAddress;\n\n    /**\n     *  Restrict methods in such way, that they can be invoked only by monethaAddress account.\n     */\n    modifier onlyMonetha() {\n        require(isMonethaAddress[msg.sender]);\n        _;\n    }\n\n    /**\n     *  Allows owner to set new monetha address\n     */\n    function setMonethaAddress(address _address, bool _isMonethaAddress) onlyOwner public {\n        isMonethaAddress[_address] = _isMonethaAddress;\n\n        emit MonethaAddressSet(_address, _isMonethaAddress);\n    }\n}\n\n// File: contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/ownership/CanReclaimEther.sol\n\ncontract CanReclaimEther is Ownable {\n    event ReclaimEther(address indexed to, uint256 amount);\n\n    /**\n     * @dev Transfer all Ether held by the contract to the owner.\n     */\n    function reclaimEther() external onlyOwner {\n        uint256 value = address(this).balance;\n        owner.transfer(value);\n\n        emit ReclaimEther(owner, value);\n    }\n\n    /**\n     * @dev Transfer specified amount of Ether held by the contract to the address.\n     * @param _to The address which will receive the Ether\n     * @param _value The amount of Ether to transfer\n     */\n    function reclaimEtherTo(address _to, uint256 _value) external onlyOwner {\n        require(_to != address(0), \"zero address is not allowed\");\n        _to.transfer(_value);\n\n        emit ReclaimEther(_to, _value);\n    }\n}\n\n// File: contracts/ownership/CanReclaimTokens.sol\n\ncontract CanReclaimTokens is Ownable {\n    using SafeERC20 for ERC20Basic;\n\n    event ReclaimTokens(address indexed to, uint256 amount);\n\n    /**\n     * @dev Reclaim all ERC20Basic compatible tokens\n     * @param _token ERC20Basic The address of the token contract\n     */\n    function reclaimToken(ERC20Basic _token) external onlyOwner {\n        uint256 balance = _token.balanceOf(this);\n        _token.safeTransfer(owner, balance);\n\n        emit ReclaimTokens(owner, balance);\n    }\n\n    /**\n     * @dev Reclaim specified amount of ERC20Basic compatible tokens\n     * @param _token ERC20Basic The address of the token contract\n     * @param _to The address which will receive the tokens\n     * @param _value The amount of tokens to transfer\n     */\n    function reclaimTokenTo(ERC20Basic _token, address _to, uint256 _value) external onlyOwner {\n        require(_to != address(0), \"zero address is not allowed\");\n        _token.safeTransfer(_to, _value);\n\n        emit ReclaimTokens(_to, _value);\n    }\n}\n\n// File: contracts/MonethaVoucher.sol\n\ncontract MonethaVoucher is IMonethaVoucher, Restricted, Pausable, IERC20, CanReclaimEther, CanReclaimTokens {\n    using SafeMath for uint256;\n    using SafeERC20 for ERC20Basic;\n\n    event DiscountApplied(address indexed user, uint256 releasedVouchers, uint256 amountWeiTransferred);\n    event PaybackApplied(address indexed user, uint256 addedVouchers, uint256 amountWeiEquivalent);\n    event VouchersBought(address indexed user, uint256 vouchersBought);\n    event VouchersSold(address indexed user, uint256 vouchersSold, uint256 amountWeiTransferred);\n    event VoucherMthRateUpdated(uint256 oldVoucherMthRate, uint256 newVoucherMthRate);\n    event MthEthRateUpdated(uint256 oldMthEthRate, uint256 newMthEthRate);\n    event VouchersAdded(address indexed user, uint256 vouchersAdded);\n    event VoucherReleased(address indexed user, uint256 releasedVoucher);\n    event PurchasedVouchersReleased(address indexed from, address indexed to, uint256 vouchers);\n\n    /* Public variables of the token */\n    string constant public standard = \"ERC20\";\n    string constant public name = \"Monetha Voucher\";\n    string constant public symbol = \"MTHV\";\n    uint8 constant public decimals = 5;\n\n    /* For calculating half year */\n    uint256 constant private DAY_IN_SECONDS = 86400;\n    uint256 constant private YEAR_IN_SECONDS = 365 * DAY_IN_SECONDS;\n    uint256 constant private LEAP_YEAR_IN_SECONDS = 366 * DAY_IN_SECONDS;\n    uint256 constant private YEAR_IN_SECONDS_AVG = (YEAR_IN_SECONDS * 3 + LEAP_YEAR_IN_SECONDS) / 4;\n    uint256 constant private HALF_YEAR_IN_SECONDS_AVG = YEAR_IN_SECONDS_AVG / 2;\n\n    uint256 constant public RATE_COEFFICIENT = 1000000000000000000; // 10^18\n    uint256 constant private RATE_COEFFICIENT2 = RATE_COEFFICIENT * RATE_COEFFICIENT; // RATE_COEFFICIENT^2\n    \n    uint256 public voucherMthRate; // number of voucher units in 10^18 MTH units\n    uint256 public mthEthRate; // number of mth units in 10^18 wei\n    uint256 internal voucherMthEthRate; // number of vouchers units (= voucherMthRate * mthEthRate) in 10^36 wei\n\n    ERC20Basic public mthToken;\n\n    mapping(address => uint256) public purchased; // amount of vouchers purchased by other monetha contract\n    uint256 public totalPurchased;                        // total amount of vouchers purchased by monetha\n\n    mapping(uint16 => uint256) public totalDistributedIn; // аmount of vouchers distributed in specific half-year\n    mapping(uint16 => mapping(address => uint256)) public distributed; // amount of vouchers distributed in specific half-year to specific user\n\n    constructor(uint256 _voucherMthRate, uint256 _mthEthRate, ERC20Basic _mthToken) public {\n        require(_voucherMthRate > 0, \"voucherMthRate should be greater than 0\");\n        require(_mthEthRate > 0, \"mthEthRate should be greater than 0\");\n        require(_mthToken != address(0), \"must be valid contract\");\n\n        voucherMthRate = _voucherMthRate;\n        mthEthRate = _mthEthRate;\n        mthToken = _mthToken;\n        _updateVoucherMthEthRate();\n    }\n\n    /**\n    * @dev Total number of vouchers in existence = vouchers in shared pool + vouchers distributed + vouchers purchased\n    */\n    function totalSupply() external view returns (uint256) {\n        return _totalVouchersSupply();\n    }\n\n    /**\n    * @dev Total number of vouchers in shared pool\n    */\n    function totalInSharedPool() external view returns (uint256) {\n        return _vouchersInSharedPool(_currentHalfYear());\n    }\n\n    /**\n    * @dev Total number of vouchers distributed\n    */\n    function totalDistributed() external view returns (uint256) {\n        return _vouchersDistributed(_currentHalfYear());\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) external view returns (uint256) {\n        return _distributedTo(owner, _currentHalfYear()).add(purchased[owner]);\n    }\n\n    /**\n     * @dev Function to check the amount of vouchers that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of vouchers still available for the spender.\n     */\n    function allowance(address owner, address spender) external view returns (uint256) {\n        owner;\n        spender;\n        return 0;\n    }\n\n    /**\n    * @dev Transfer voucher for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) external returns (bool) {\n        to;\n        value;\n        revert();\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of vouchers on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of vouchers to be spent.\n     */\n    function approve(address spender, uint256 value) external returns (bool) {\n        spender;\n        value;\n        revert();\n    }\n\n    /**\n     * @dev Transfer vouchers from one address to another\n     * @param from address The address which you want to send vouchers from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of vouchers to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool) {\n        from;\n        to;\n        value;\n        revert();\n    }\n\n    // Allows direct funds send by Monetha\n    function () external onlyMonetha payable {\n    }\n\n    /**\n     * @dev Converts vouchers to equivalent amount of wei.\n     * @param _value amount of vouchers to convert to amount of wei\n     * @return A uint256 specifying the amount of wei.\n     */\n    function toWei(uint256 _value) external view returns (uint256) {\n        return _vouchersToWei(_value);\n    }\n\n    /**\n     * @dev Converts amount of wei to equivalent amount of vouchers.\n     * @param _value amount of wei to convert to vouchers\n     * @return A uint256 specifying the amount of vouchers.\n     */\n    function fromWei(uint256 _value) external view returns (uint256) {\n        return _weiToVouchers(_value);\n    }\n\n    /**\n     * @dev Applies discount for address by returning vouchers to shared pool and transferring funds (in wei). May be called only by Monetha.\n     * @param _for address to apply discount for\n     * @param _vouchers amount of vouchers to return to shared pool\n     * @return Actual number of vouchers returned to shared pool and amount of funds (in wei) transferred.\n     */\n    function applyDiscount(address _for, uint256 _vouchers) external onlyMonetha returns (uint256 amountVouchers, uint256 amountWei) {\n        require(_for != address(0), \"zero address is not allowed\");\n        uint256 releasedVouchers = _releaseVouchers(_for, _vouchers);\n        if (releasedVouchers == 0) {\n            return (0,0);\n        }\n        \n        uint256 amountToTransfer = _vouchersToWei(releasedVouchers);\n\n        require(address(this).balance >= amountToTransfer, \"insufficient funds\");\n        _for.transfer(amountToTransfer);\n\n        emit DiscountApplied(_for, releasedVouchers, amountToTransfer);\n\n        return (releasedVouchers, amountToTransfer);\n    }\n\n    /**\n     * @dev Applies payback by transferring vouchers from the shared pool to the user.\n     * The amount of transferred vouchers is equivalent to the amount of Ether in the `_amountWei` parameter.\n     * @param _for address to apply payback for\n     * @param _amountWei amount of Ether to estimate the amount of vouchers\n     * @return The number of vouchers added\n     */\n    function applyPayback(address _for, uint256 _amountWei) external onlyMonetha returns (uint256 amountVouchers) {\n        amountVouchers = _weiToVouchers(_amountWei);\n        require(_addVouchers(_for, amountVouchers), \"vouchers must be added\");\n\n        emit PaybackApplied(_for, amountVouchers, _amountWei);\n    }\n\n    /**\n     * @dev Function to buy vouchers by transferring equivalent amount in Ether to contract. May be called only by Monetha.\n     * After the vouchers are purchased, they can be sold or released to another user. Purchased vouchers are stored in\n     * a separate pool and may not be expired.\n     * @param _vouchers The amount of vouchers to buy. The caller must also transfer an equivalent amount of Ether.\n     */\n    function buyVouchers(uint256 _vouchers) external onlyMonetha payable {\n        uint16 currentHalfYear = _currentHalfYear();\n        require(_vouchersInSharedPool(currentHalfYear) >= _vouchers, \"insufficient vouchers present\");\n        require(msg.value == _vouchersToWei(_vouchers), \"insufficient funds\");\n\n        _addPurchasedTo(msg.sender, _vouchers);\n\n        emit VouchersBought(msg.sender, _vouchers);\n    }\n\n    /**\n     * @dev The function allows Monetha account to sell previously purchased vouchers and get Ether from the sale.\n     * The equivalent amount of Ether will be transferred to the caller. May be called only by Monetha.\n     * @param _vouchers The amount of vouchers to sell.\n     * @return A uint256 specifying the amount of Ether (in wei) transferred to the caller.\n     */\n    function sellVouchers(uint256 _vouchers) external onlyMonetha returns(uint256 weis) {\n        require(_vouchers <= purchased[msg.sender], \"Insufficient vouchers\");\n\n        _subPurchasedFrom(msg.sender, _vouchers);\n        weis = _vouchersToWei(_vouchers);\n        msg.sender.transfer(weis);\n        \n        emit VouchersSold(msg.sender, _vouchers, weis);\n    }\n\n    /**\n     * @dev Function allows Monetha account to release the purchased vouchers to any address.\n     * The released voucher acquires an expiration property and should be used in Monetha ecosystem within 6 months, otherwise\n     * it will be returned to shared pool. May be called only by Monetha.\n     * @param _to address to release vouchers to.\n     * @param _value the amount of vouchers to release.\n     */\n    function releasePurchasedTo(address _to, uint256 _value) external onlyMonetha returns (bool) {\n        require(_value <= purchased[msg.sender], \"Insufficient Vouchers\");\n        require(_to != address(0), \"address should be valid\");\n\n        _subPurchasedFrom(msg.sender, _value);\n        _addVouchers(_to, _value);\n\n        emit PurchasedVouchersReleased(msg.sender, _to, _value);\n\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of vouchers that an owner (Monetha account) allowed to sell or release to some user.\n     * @param owner The address which owns the funds.\n     * @return A uint256 specifying the amount of vouchers still available for the owner.\n     */\n    function purchasedBy(address owner) external view returns (uint256) {\n        return purchased[owner];\n    }\n\n    /**\n     * @dev updates voucherMthRate.\n     */\n    function updateVoucherMthRate(uint256 _voucherMthRate) external onlyMonetha {\n        require(_voucherMthRate > 0, \"should be greater than 0\");\n        require(voucherMthRate != _voucherMthRate, \"same as previous value\");\n\n        voucherMthRate = _voucherMthRate;\n        _updateVoucherMthEthRate();\n\n        emit VoucherMthRateUpdated(voucherMthRate, _voucherMthRate);\n    }\n\n    /**\n     * @dev updates mthEthRate.\n     */\n    function updateMthEthRate(uint256 _mthEthRate) external onlyMonetha {\n        require(_mthEthRate > 0, \"should be greater than 0\");\n        require(mthEthRate != _mthEthRate, \"same as previous value\");\n        \n        mthEthRate = _mthEthRate;\n        _updateVoucherMthEthRate();\n\n        emit MthEthRateUpdated(mthEthRate, _mthEthRate);\n    }\n\n    function _addPurchasedTo(address _to, uint256 _value) internal {\n        purchased[_to] = purchased[_to].add(_value);\n        totalPurchased = totalPurchased.add(_value);\n    }\n\n    function _subPurchasedFrom(address _from, uint256 _value) internal {\n        purchased[_from] = purchased[_from].sub(_value);\n        totalPurchased = totalPurchased.sub(_value);\n    }\n\n    function _updateVoucherMthEthRate() internal {\n        voucherMthEthRate = voucherMthRate.mul(mthEthRate);\n    }\n\n    /**\n     * @dev Transfer vouchers from shared pool to address. May be called only by Monetha.\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function _addVouchers(address _to, uint256 _value) internal returns (bool) {\n        require(_to != address(0), \"zero address is not allowed\");\n\n        uint16 currentHalfYear = _currentHalfYear();\n        require(_vouchersInSharedPool(currentHalfYear) >= _value, \"must be less or equal than vouchers present in shared pool\");\n\n        uint256 oldDist = totalDistributedIn[currentHalfYear];\n        totalDistributedIn[currentHalfYear] = oldDist.add(_value);\n        uint256 oldBalance = distributed[currentHalfYear][_to];\n        distributed[currentHalfYear][_to] = oldBalance.add(_value);\n\n        emit VouchersAdded(_to, _value);\n\n        return true;\n    }\n\n    /**\n     * @dev Transfer vouchers from address to shared pool\n     * @param _from address The address which you want to send vouchers from\n     * @param _value uint256 the amount of vouchers to be transferred\n     * @return A uint256 specifying the amount of vouchers released to shared pool.\n     */\n    function _releaseVouchers(address _from, uint256 _value) internal returns (uint256) {\n        require(_from != address(0), \"must be valid address\");\n\n        uint16 currentHalfYear = _currentHalfYear();\n        uint256 released = 0;\n        if (currentHalfYear > 0) {\n            released = released.add(_releaseVouchers(_from, _value, currentHalfYear - 1));\n            _value = _value.sub(released);\n        }\n        released = released.add(_releaseVouchers(_from, _value, currentHalfYear));\n\n        emit VoucherReleased(_from, released);\n\n        return released;\n    }\n\n    function _releaseVouchers(address _from, uint256 _value, uint16 _currentHalfYear) internal returns (uint256) {\n        if (_value == 0) {\n            return 0;\n        }\n\n        uint256 oldBalance = distributed[_currentHalfYear][_from];\n        uint256 subtracted = _value;\n        if (oldBalance <= _value) {\n            delete distributed[_currentHalfYear][_from];\n            subtracted = oldBalance;\n        } else {\n            distributed[_currentHalfYear][_from] = oldBalance.sub(_value);\n        }\n\n        uint256 oldDist = totalDistributedIn[_currentHalfYear];\n        if (oldDist == subtracted) {\n            delete totalDistributedIn[_currentHalfYear];\n        } else {\n            totalDistributedIn[_currentHalfYear] = oldDist.sub(subtracted);\n        }\n        return subtracted;\n    }\n\n    // converts vouchers to Ether (in wei)\n    function _vouchersToWei(uint256 _value) internal view returns (uint256) {\n        return _value.mul(RATE_COEFFICIENT2).div(voucherMthEthRate);\n    }\n\n    // converts Ether (in wei) to vouchers\n    function _weiToVouchers(uint256 _value) internal view returns (uint256) {\n        return _value.mul(voucherMthEthRate).div(RATE_COEFFICIENT2);\n    }\n\n    // converts MTH tokens to vouchers\n    function _mthToVouchers(uint256 _value) internal view returns (uint256) {\n        return _value.mul(voucherMthRate).div(RATE_COEFFICIENT);\n    }\n\n    // converts Ether (in wei) to MTH\n    function _weiToMth(uint256 _value) internal view returns (uint256) {\n        return _value.mul(mthEthRate).div(RATE_COEFFICIENT);\n    }\n\n    function _totalVouchersSupply() internal view returns (uint256) {\n        return _mthToVouchers(mthToken.balanceOf(address(this)));\n    }\n\n    function _vouchersInSharedPool(uint16 _currentHalfYear) internal view returns (uint256) {\n        return _totalVouchersSupply().sub(_vouchersDistributed(_currentHalfYear)).sub(totalPurchased);\n    }\n\n    function _vouchersDistributed(uint16 _currentHalfYear) internal view returns (uint256) {\n        uint256 dist = totalDistributedIn[_currentHalfYear];\n        if (_currentHalfYear > 0) {\n            // include previous half-year\n            dist = dist.add(totalDistributedIn[_currentHalfYear - 1]);\n        }\n        return dist;\n    }\n\n    function _distributedTo(address _owner, uint16 _currentHalfYear) internal view returns (uint256) {\n        uint256 balance = distributed[_currentHalfYear][_owner];\n        if (_currentHalfYear > 0) {\n            // include previous half-year\n            balance = balance.add(distributed[_currentHalfYear - 1][_owner]);\n        }\n        return balance;\n    }\n    \n    function _currentHalfYear() internal view returns (uint16) {\n        return uint16(now / HALF_YEAR_IN_SECONDS_AVG);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mthEthRate\",\"type\":\"uint256\"}],\"name\":\"updateMthEthRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"reclaimEtherTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMonethaAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mthEthRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vouchers\",\"type\":\"uint256\"}],\"name\":\"sellVouchers\",\"outputs\":[{\"name\":\"weis\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"toWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_for\",\"type\":\"address\"},{\"name\":\"_vouchers\",\"type\":\"uint256\"}],\"name\":\"applyDiscount\",\"outputs\":[{\"name\":\"amountVouchers\",\"type\":\"uint256\"},{\"name\":\"amountWei\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_for\",\"type\":\"address\"},{\"name\":\"_amountWei\",\"type\":\"uint256\"}],\"name\":\"applyPayback\",\"outputs\":[{\"name\":\"amountVouchers\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"totalDistributedIn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"purchasedBy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mthToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"reclaimTokenTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE_COEFFICIENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vouchers\",\"type\":\"uint256\"}],\"name\":\"buyVouchers\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"releasePurchasedTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voucherMthRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voucherMthRate\",\"type\":\"uint256\"}],\"name\":\"updateVoucherMthRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_isMonethaAddress\",\"type\":\"bool\"}],\"name\":\"setMonethaAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInSharedPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"distributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPurchased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"fromWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_voucherMthRate\",\"type\":\"uint256\"},{\"name\":\"_mthEthRate\",\"type\":\"uint256\"},{\"name\":\"_mthToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"releasedVouchers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountWeiTransferred\",\"type\":\"uint256\"}],\"name\":\"DiscountApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"addedVouchers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountWeiEquivalent\",\"type\":\"uint256\"}],\"name\":\"PaybackApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"vouchersBought\",\"type\":\"uint256\"}],\"name\":\"VouchersBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"vouchersSold\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountWeiTransferred\",\"type\":\"uint256\"}],\"name\":\"VouchersSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldVoucherMthRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newVoucherMthRate\",\"type\":\"uint256\"}],\"name\":\"VoucherMthRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldMthEthRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newMthEthRate\",\"type\":\"uint256\"}],\"name\":\"MthEthRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"vouchersAdded\",\"type\":\"uint256\"}],\"name\":\"VouchersAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"releasedVoucher\",\"type\":\"uint256\"}],\"name\":\"VoucherReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"vouchers\",\"type\":\"uint256\"}],\"name\":\"PurchasedVouchersReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReclaimTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReclaimEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_isMonethaAddress\",\"type\":\"bool\"}],\"name\":\"MonethaAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526002805460ff191690553480156200001b57600080fd5b506040516060806200219583398101604090815281516020830151919092015160008054600160a060020a031916331781558311620000e157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f766f75636865724d7468526174652073686f756c64206265206772656174657260448201527f207468616e203000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600082116200017757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f6d7468457468526174652073686f756c6420626520677265617465722074686160448201527f6e20300000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0381161515620001ef57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6d7573742062652076616c696420636f6e747261637400000000000000000000604482015290519081900360640190fd5b6003839055600482905560068054600160a060020a031916600160a060020a0383161790556200022764010000000062000230810204565b50505062000287565b6004546003546200024f9164010000000062001d246200025482021704565b600555565b6000821515620002675750600062000281565b508181028183828115156200027857fe5b04146200028157fe5b92915050565b611efe80620002976000396000f3006080604052600436106102035763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610223578063095ea7b3146102ad5780630ce11ded146102e557806317ffc320146102fd57806318160ddd1461031e57806323b872dd146103455780632e84a3741461036f578063313ce5671461039357806331d41325146103be5780633f4ba83a146103df57806349ff7a62146103f4578063522fe98e146104095780635a3b7e421461042a5780635c975abb1461043f5780636481f08114610454578063669dafe81461046c5780636a2b171a146104845780636daa212f146104c157806370a08231146104e5578063715018a614610506578063732a935c1461051b5780638456cb59146105375780638d8c36e91461054c5780638da5cb5b1461056d57806393306c431461059e57806395d89b41146105b35780639f727c27146105c85780639fe98bda146105dd578063a05e0f6514610607578063a9059cbb146102ad578063b04087211461061c578063b2bea9c114610627578063b6f817241461064b578063b9c5eb9014610660578063c07e339114610678578063c3fdbef81461069e578063d9582cde146106b3578063dd62ed3e146106db578063e632c2f314610702578063e65d152214610717578063efca2eed1461072f578063f2fde38b14610744575b3360009081526001602052604090205460ff16151561022157600080fd5b005b34801561022f57600080fd5b50610238610765565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561027257818101518382015260200161025a565b50505050905090810190601f16801561029f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102b957600080fd5b506102d1600160a060020a036004351660243561079c565b604080519115158252519081900360200190f35b3480156102f157600080fd5b506102216004356107a2565b34801561030957600080fd5b50610221600160a060020a03600435166108bf565b34801561032a57600080fd5b506103336109cd565b60408051918252519081900360200190f35b34801561035157600080fd5b506102d1600160a060020a036004358116906024351660443561079c565b34801561037b57600080fd5b50610221600160a060020a03600435166024356109dc565b34801561039f57600080fd5b506103a8610abb565b6040805160ff9092168252519081900360200190f35b3480156103ca57600080fd5b506102d1600160a060020a0360043516610ac0565b3480156103eb57600080fd5b50610221610ad5565b34801561040057600080fd5b50610333610b32565b34801561041557600080fd5b50610333600160a060020a0360043516610b38565b34801561043657600080fd5b50610238610b4a565b34801561044b57600080fd5b506102d1610b81565b34801561046057600080fd5b50610333600435610b8a565b34801561047857600080fd5b50610333600435610c92565b34801561049057600080fd5b506104a8600160a060020a0360043516602435610ca3565b6040805192835260208301919091528051918290030190f35b3480156104cd57600080fd5b50610333600160a060020a0360043516602435610e22565b3480156104f157600080fd5b50610333600160a060020a0360043516610ef4565b34801561051257600080fd5b50610221610f2e565b34801561052757600080fd5b5061033361ffff60043516610f9a565b34801561054357600080fd5b50610221610fac565b34801561055857600080fd5b50610333600160a060020a036004351661100b565b34801561057957600080fd5b50610582611026565b60408051600160a060020a039092168252519081900360200190f35b3480156105aa57600080fd5b50610582611035565b3480156105bf57600080fd5b50610238611044565b3480156105d457600080fd5b5061022161107b565b3480156105e957600080fd5b50610221600160a060020a0360043581169060243516604435611116565b34801561061357600080fd5b506103336111d9565b6102216004356111e5565b34801561063357600080fd5b506102d1600160a060020a0360043516602435611310565b34801561065757600080fd5b50610333611453565b34801561066c57600080fd5b50610221600435611459565b34801561068457600080fd5b50610221600160a060020a03600435166024351515611576565b3480156106aa57600080fd5b506103336115f1565b3480156106bf57600080fd5b5061033361ffff60043516600160a060020a0360243516611603565b3480156106e757600080fd5b50610333600160a060020a0360043581169060243516611620565b34801561070e57600080fd5b50610333611628565b34801561072357600080fd5b5061033360043561162e565b34801561073b57600080fd5b50610333611639565b34801561075057600080fd5b50610221600160a060020a036004351661164b565b60408051808201909152600f81527f4d6f6e6574686120566f75636865720000000000000000000000000000000000602082015281565b60008080fd5b3360009081526001602052604090205460ff1615156107c057600080fd5b60008111610818576040805160e560020a62461bcd02815260206004820152601860248201527f73686f756c642062652067726561746572207468616e20300000000000000000604482015290519081900360640190fd5b600454811415610872576040805160e560020a62461bcd02815260206004820152601660248201527f73616d652061732070726576696f75732076616c756500000000000000000000604482015290519081900360640190fd5b600481905561087f61166e565b600454604080519182526020820183905280517ff376950c4c79df1231c4d2cc604341aff0685bc9b6c3a1661200a6d4f319d4e49281900390910190a150565b60008054600160a060020a031633146108d757600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038416916370a082319160248083019260209291908290030181600087803b15801561093857600080fd5b505af115801561094c573d6000803e3d6000fd5b505050506040513d602081101561096257600080fd5b505160005490915061098790600160a060020a0384811691168363ffffffff61168816565b600054604080518381529051600160a060020a03909216917f355069f20974db323c9dcd100e8bf13fb2acc1884e5ec05b0a89c09e15ce810f9181900360200190a25050565b60006109d7611740565b905090565b600054600160a060020a031633146109f357600080fd5b600160a060020a0382161515610a41576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020611eb3833981519152604482015290519081900360640190fd5b604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610a77573d6000803e3d6000fd5b50604080518281529051600160a060020a038416917fb54913b2b58b2e96ea9b4e96ba2353cf13426af9d3f252e0c17899a93c4ce125919081900360200190a25050565b600581565b60016020526000908152604090205460ff1681565b600054600160a060020a03163314610aec57600080fd5b60025460ff161515610afd57600080fd5b6002805460ff191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60045481565b60076020526000908152604090205481565b60408051808201909152600581527f4552433230000000000000000000000000000000000000000000000000000000602082015281565b60025460ff1681565b3360009081526001602052604081205460ff161515610ba857600080fd5b33600090815260076020526040902054821115610c0f576040805160e560020a62461bcd02815260206004820152601560248201527f496e73756666696369656e7420766f7563686572730000000000000000000000604482015290519081900360640190fd5b610c1933836117dd565b610c2282611839565b604051909150339082156108fc029083906000818181858888f19350505050158015610c52573d6000803e3d6000fd5b506040805183815260208101839052815133927f4f4ec1e156ff2a5d94d15690727a0c7c94705b9dd53e5e0abf3fa16195b106e2928290030190a2919050565b6000610c9d82611839565b92915050565b3360009081526001602052604081205481908190819060ff161515610cc757600080fd5b600160a060020a0386161515610d15576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020611eb3833981519152604482015290519081900360640190fd5b610d1f868661186e565b9150811515610d345760009350839250610e19565b610d3d82611839565b90503031811115610d98576040805160e560020a62461bcd02815260206004820152601260248201527f696e73756666696369656e742066756e64730000000000000000000000000000604482015290519081900360640190fd5b604051600160a060020a0387169082156108fc029083906000818181858888f19350505050158015610dce573d6000803e3d6000fd5b5060408051838152602081018390528151600160a060020a038916927fa5d355764530fdfd305e1709a5c34997434bd0032f3afe650f362d1d1544b947928290030190a28181935093505b50509250929050565b3360009081526001602052604081205460ff161515610e4057600080fd5b610e4982611977565b9050610e55838261199c565b1515610eab576040805160e560020a62461bcd02815260206004820152601660248201527f766f756368657273206d75737420626520616464656400000000000000000000604482015290519081900360640190fd5b60408051828152602081018490528151600160a060020a038616927f289266f290897c2e82d0cee6b6f74f7d5e62d30244d4bfcf390abc4af4cd5666928290030190a292915050565b600160a060020a038116600090815260076020526040812054610c9d90610f2284610f1d611b56565b611b5f565b9063ffffffff611bd716565b600054600160a060020a03163314610f4557600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60096020526000908152604090205481565b600054600160a060020a03163314610fc357600080fd5b60025460ff1615610fd357600080fd5b6002805460ff191660011790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600160a060020a031660009081526007602052604090205490565b600054600160a060020a031681565b600654600160a060020a031681565b60408051808201909152600481527f4d54485600000000000000000000000000000000000000000000000000000000602082015281565b60008054600160a060020a0316331461109357600080fd5b5060008054604051303192600160a060020a03909216916108fc841502918491818181858888f193505050501580156110d0573d6000803e3d6000fd5b50600054604080518381529051600160a060020a03909216917fb54913b2b58b2e96ea9b4e96ba2353cf13426af9d3f252e0c17899a93c4ce1259181900360200190a250565b600054600160a060020a0316331461112d57600080fd5b600160a060020a038216151561117b576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020611eb3833981519152604482015290519081900360640190fd5b611195600160a060020a038416838363ffffffff61168816565b604080518281529051600160a060020a038416917f355069f20974db323c9dcd100e8bf13fb2acc1884e5ec05b0a89c09e15ce810f919081900360200190a2505050565b670de0b6b3a764000081565b3360009081526001602052604081205460ff16151561120357600080fd5b61120b611b56565b90508161121782611be4565b101561126d576040805160e560020a62461bcd02815260206004820152601d60248201527f696e73756666696369656e7420766f7563686572732070726573656e74000000604482015290519081900360640190fd5b61127682611839565b34146112cc576040805160e560020a62461bcd02815260206004820152601260248201527f696e73756666696369656e742066756e64730000000000000000000000000000604482015290519081900360640190fd5b6112d63383611c0c565b60408051838152905133917fad6ca73eec0e00d9089e39fad2962bb18992dd5feeae519dcb4cef2aabd93e30919081900360200190a25050565b3360009081526001602052604081205460ff16151561132e57600080fd5b33600090815260076020526040902054821115611395576040805160e560020a62461bcd02815260206004820152601560248201527f496e73756666696369656e7420566f7563686572730000000000000000000000604482015290519081900360640190fd5b600160a060020a03831615156113f5576040805160e560020a62461bcd02815260206004820152601760248201527f616464726573732073686f756c642062652076616c6964000000000000000000604482015290519081900360640190fd5b6113ff33836117dd565b611409838361199c565b50604080518381529051600160a060020a0385169133917fd49597d4844c4d37387a6053e4a1832bd054dee0aaf72fcd84da7e2aa9f8cbf09181900360200190a350600192915050565b60035481565b3360009081526001602052604090205460ff16151561147757600080fd5b600081116114cf576040805160e560020a62461bcd02815260206004820152601860248201527f73686f756c642062652067726561746572207468616e20300000000000000000604482015290519081900360640190fd5b600354811415611529576040805160e560020a62461bcd02815260206004820152601660248201527f73616d652061732070726576696f75732076616c756500000000000000000000604482015290519081900360640190fd5b600381905561153661166e565b600354604080519182526020820183905280517f5f8dd084970454563d6e013038a3a2204c50015701c39e62c3429738026fa7849281900390910190a150565b600054600160a060020a0316331461158d57600080fd5b600160a060020a038216600081815260016020908152604091829020805460ff191685151590811790915582519384529083015280517fa551de8741dbb2092ce6bc142fd0ff3af5dfbf87d0aa594619fccddb0141e6929281900390910190a15050565b60006109d76115fe611b56565b611be4565b600a60209081526000928352604080842090915290825290205481565b600092915050565b60085481565b6000610c9d82611977565b60006109d7611646611b56565b611c61565b600054600160a060020a0316331461166257600080fd5b61166b81611ca7565b50565b6004546003546116839163ffffffff611d2416565b600555565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561170457600080fd5b505af1158015611718573d6000803e3d6000fd5b505050506040513d602081101561172e57600080fd5b5051151561173b57600080fd5b505050565b600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926109d792600160a060020a03909116916370a082319160248082019260209290919082900301818887803b1580156117ac57600080fd5b505af11580156117c0573d6000803e3d6000fd5b505050506040513d60208110156117d657600080fd5b5051611d4d565b600160a060020a038216600090815260076020526040902054611806908263ffffffff611d7016565b600160a060020a038316600090815260076020526040902055600854611832908263ffffffff611d7016565b6008555050565b600554600090610c9d90611862846ec097ce7bc90715b34b9f100000000063ffffffff611d2416565b9063ffffffff611d8216565b60008080600160a060020a03851615156118d2576040805160e560020a62461bcd02815260206004820152601560248201527f6d7573742062652076616c696420616464726573730000000000000000000000604482015290519081900360640190fd5b6118da611b56565b91506000905060008261ffff1611156119205761190b6118fe868660018603611d97565b829063ffffffff611bd716565b905061191d848263ffffffff611d7016565b93505b61192e6118fe868685611d97565b604080518281529051919250600160a060020a038716917f5c2b936c2e3089a9ba68c1146fc951f328fd49b4b1a5c00156babd126b227a459181900360200190a2949350505050565b6000610c9d670de0b6b3a7640000800261186260055485611d2490919063ffffffff16565b6000808080600160a060020a03861615156119ef576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020611eb3833981519152604482015290519081900360640190fd5b6119f7611b56565b925084611a0384611be4565b1015611a7f576040805160e560020a62461bcd02815260206004820152603a60248201527f6d757374206265206c657373206f7220657175616c207468616e20766f75636860448201527f6572732070726573656e7420696e2073686172656420706f6f6c000000000000606482015290519081900360840190fd5b61ffff83166000908152600960205260409020549150611aa5828663ffffffff611bd716565b61ffff8416600090815260096020908152604080832093909355600a8152828220600160a060020a038a168352905220549050611ae8818663ffffffff611bd716565b61ffff84166000908152600a60209081526040808320600160a060020a038b1680855290835292819020939093558251888152925191927fa4822228ba5999ec50d98259975e2e7e3b56a666bfd3cae8c7722ee90af63a28929081900390910190a250600195945050505050565b62f0c3f0420490565b61ffff81166000818152600a60209081526040808320600160a060020a03871684529091528120549091821015611bd05761ffff6000198401166000908152600a60209081526040808320600160a060020a0388168452909152902054611bcd90829063ffffffff611bd716565b90505b9392505050565b81810182811015610c9d57fe5b6000610c9d600854611c00611bf885611c61565b611c00611740565b9063ffffffff611d7016565b600160a060020a038216600090815260076020526040902054611c35908263ffffffff611bd716565b600160a060020a038316600090815260076020526040902055600854611832908263ffffffff611bd716565b61ffff81166000818152600960205260408120549091821015610c9d5761ffff600019840116600090815260096020526040902054611bd090829063ffffffff611bd716565b600160a060020a0381161515611cbc57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000821515611d3557506000610c9d565b50818102818382811515611d4557fe5b0414610c9d57fe5b6000610c9d670de0b6b3a764000061186260035485611d2490919063ffffffff16565b600082821115611d7c57fe5b50900390565b60008183811515611d8f57fe5b049392505050565b6000808080851515611dac5760009350611ea8565b61ffff85166000908152600a60209081526040808320600160a060020a038b1684529091529020549250859150818311611e105761ffff85166000908152600a60209081526040808320600160a060020a038b168452909152812055829150611e49565b611e20838763ffffffff611d7016565b61ffff86166000908152600a60209081526040808320600160a060020a038c1684529091529020555b5061ffff841660009081526009602052604090205481811415611e7f5761ffff8516600090815260096020526040812055611ea4565b611e8f818363ffffffff611d7016565b61ffff86166000908152600960205260409020555b8193505b505050939250505056007a65726f2061646472657373206973206e6f7420616c6c6f7765640000000000a165627a7a723058206316be0f4a6182a4b2630543472bd763c5a9e29ab520cef2f96c5ffd0e3ef5e100290000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000026c7ca92000000000000000000000000af4dce16da2877f8c9e00544c93b62ac40631f16",
  "constructorArguments": "0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000026c7ca92000000000000000000000000af4dce16da2877f8c9e00544c93b62ac40631f16"
}