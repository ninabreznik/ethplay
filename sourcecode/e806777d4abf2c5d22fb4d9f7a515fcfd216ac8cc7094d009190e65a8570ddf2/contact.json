{
  "address": "0x5cc61caad7db681207325c504104b080e8963da9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BbillerToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-12\n*/\n\npragma solidity ^0.4.13;\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract BbillerBallot is Ownable {\n    BbillerToken public token;\n    mapping(uint => Issue) public issues;\n\n    uint issueDoesNotExistFlag = 0;\n    uint issueVotingFlag = 1;\n    uint issueAcceptedFlag = 2;\n    uint issueRejectedFlag = 3;\n\n    struct Issue {\n        uint votingStartDate;\n        uint votingEndDate;\n        mapping(address => bool) isVoted;\n        uint forCounter;\n        uint againstCounter;\n        uint flag;\n    }\n\n    event CreateIssue(uint _issueId, uint _votingStartDate, uint _votingEndDate, address indexed creator);\n    event Vote(uint issueId, bool forVote, address indexed voter);\n    event IssueAccepted(uint issueId);\n    event IssueRejected(uint issueId);\n\n    function BbillerBallot(BbillerToken _token) public {\n        token = _token;\n    }\n\n    function createIssue(uint issueId, uint _votingStartDate, uint _votingEndDate) public onlyOwner {\n        require(issues[issueId].flag == issueDoesNotExistFlag);\n\n        Issue memory issue = Issue(\n            {votingEndDate : _votingEndDate,\n            votingStartDate : _votingStartDate,\n            forCounter : 0,\n            againstCounter : 0,\n            flag : issueVotingFlag});\n        issues[issueId] = issue;\n\n        CreateIssue(issueId, _votingStartDate, _votingEndDate, msg.sender);\n    }\n\n    function vote(uint issueId, bool forVote) public {\n        require(token.isTokenUser(msg.sender));\n\n        Issue storage issue = issues[issueId];\n        require(!issue.isVoted[msg.sender]);\n        require(issue.flag == issueVotingFlag);\n        require(issue.votingEndDate > now);\n        require(issue.votingStartDate < now);\n\n        issue.isVoted[msg.sender] = true;\n        if (forVote) {\n            issue.forCounter++;\n        }\n        else {\n            issue.againstCounter++;\n        }\n        Vote(issueId, forVote, msg.sender);\n\n        uint tokenUserCounterHalf = getTokenUserCounterHalf();\n        if (issue.forCounter >= tokenUserCounterHalf) {\n            issue.flag = issueAcceptedFlag;\n            IssueAccepted(issueId);\n        }\n        if (issue.againstCounter >= tokenUserCounterHalf) {\n            issue.flag = issueRejectedFlag;\n            IssueRejected(issueId);\n        }\n    }\n\n    function getVoteResult(uint issueId) public view returns (string) {\n        Issue storage issue = issues[issueId];\n        if (issue.flag == issueVotingFlag) {\n            return 'Voting';\n        }\n        if (issue.flag == issueAcceptedFlag) {\n            return 'Accepted';\n        }\n        if (issue.flag == issueRejectedFlag) {\n            return 'Rejected';\n        }\n        if (issue.flag == issueDoesNotExistFlag) {\n            return 'DoesNotExist';\n        }\n    }\n\n    function getTokenUserCounterHalf() internal returns (uint) {\n        // for division must be of uint type\n        uint half = 2;\n        uint tokenUserCounter = token.getTokenUserCounter();\n        uint tokenUserCounterHalf = tokenUserCounter / half;\n        if (tokenUserCounterHalf * half != tokenUserCounter) {\n            // odd case\n            tokenUserCounterHalf++;\n        }\n        return tokenUserCounterHalf;\n    }\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed _to, uint256 _amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\ncontract BbillerToken is MintableToken {\n    string public symbol = 'BBILLER';\n    uint public decimals = 18;\n    uint public tokenUserCounter;  // number of users that owns this token\n\n    mapping(address => bool) public isTokenUser;\n\n    event CountTokenUser(address _tokenUser, uint _tokenUserCounter, bool increment);\n\n    function getTokenUserCounter() public view returns (uint) {\n        return tokenUserCounter;\n    }\n\n    function countTokenUser(address tokenUser) internal {\n        if (!isTokenUser[tokenUser]) {\n            isTokenUser[tokenUser] = true;\n            tokenUserCounter++;\n        }\n        CountTokenUser(tokenUser, tokenUserCounter, true);\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        bool res = super.transfer(to, value);\n        countTokenUser(to);\n        return res;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        bool res = super.transferFrom(from, to, value);\n        countTokenUser(to);\n        if (balanceOf(from) <= 0) {\n            isTokenUser[from] = false;\n            tokenUserCounter--;\n            CountTokenUser(from, tokenUserCounter, false);\n        }\n        return res;\n    }\n\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n        bool res = super.mint(_to, _amount);\n        countTokenUser(_to);\n        return res;\n    }\n}",
  "bytecode": "606060409081526003805460a060020a60ff02191690558051908101604052600781527f4242494c4c4552000000000000000000000000000000000000000000000000006020820152600490805161005b929160200190610081565b50601260055560038054600160a060020a03191633600160a060020a031617905561011c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100c257805160ff19168380011785556100ef565b828001600101855582156100ef579182015b828111156100ef5782518255916020019190600101906100d4565b506100fb9291506100ff565b5090565b61011991905b808211156100fb5760008155600101610105565b90565b610d998061012b6000396000f3006060604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b8114610100578063095ea7b31461012757806318160ddd1461014957806323b872dd1461016e578063313ce5671461019657806340c10f19146101a957806364dad32f146101cb57806366188463146101ea57806370a082311461020c5780637d64bcb41461022b5780638da5cb5b1461023e578063908c3a6a1461026d57806395d89b4114610280578063a9059cbb1461030a578063be8dd49a1461032c578063d73dd6231461033f578063dd62ed3e14610361578063f2fde38b14610386575b600080fd5b341561010b57600080fd5b6101136103a7565b604051901515815260200160405180910390f35b341561013257600080fd5b610113600160a060020a03600435166024356103b7565b341561015457600080fd5b61015c610423565b60405190815260200160405180910390f35b341561017957600080fd5b610113600160a060020a0360043581169060243516604435610429565b34156101a157600080fd5b61015c6104d9565b34156101b457600080fd5b610113600160a060020a03600435166024356104df565b34156101d657600080fd5b610113600160a060020a0360043516610532565b34156101f557600080fd5b610113600160a060020a0360043516602435610547565b341561021757600080fd5b61015c600160a060020a0360043516610641565b341561023657600080fd5b61011361065c565b341561024957600080fd5b6102516106e7565b604051600160a060020a03909116815260200160405180910390f35b341561027857600080fd5b61015c6106f6565b341561028b57600080fd5b6102936106fc565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102cf5780820151838201526020016102b7565b50505050905090810190601f1680156102fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561031557600080fd5b610113600160a060020a036004351660243561079a565b341561033757600080fd5b61015c6107a7565b341561034a57600080fd5b610113600160a060020a03600435166024356107ad565b341561036c57600080fd5b61015c600160a060020a0360043581169060243516610851565b341561039157600080fd5b6103a5600160a060020a036004351661087c565b005b60035460a060020a900460ff1681565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b600080610437858585610917565b905061044284610a99565b600061044d86610641565b116104d157600160a060020a038516600090815260076020526040808220805460ff191690556006805460001901908190557fb83e1d14e8ccecc5461685cc4343c697baa6c3c30cd71b169b61a4ee9d7b1d2292889251600160a060020a039093168352602083019190915215156040808301919091526060909101905180910390a15b949350505050565b60055481565b600354600090819033600160a060020a039081169116146104ff57600080fd5b60035460a060020a900460ff161561051657600080fd5b6105208484610b44565b905061052b84610a99565b9392505050565b60076020526000908152604090205460ff1681565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156105a457600160a060020a0333811660009081526002602090815260408083209388168352929052908120556105db565b6105b4818463ffffffff610c5116565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b60035460009033600160a060020a0390811691161461067a57600080fd5b60035460a060020a900460ff161561069157600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600354600160a060020a031681565b60065481565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107925780601f1061076757610100808354040283529160200191610792565b820191906000526020600020905b81548152906001019060200180831161077557829003601f168201915b505050505081565b6000806105208484610c63565b60065490565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120546107e5908363ffffffff610d5e16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a0390811691161461089757600080fd5b600160a060020a03811615156108ac57600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a038316151561092e57600080fd5b600160a060020a03841660009081526001602052604090205482111561095357600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561098657600080fd5b600160a060020a0384166000908152600160205260409020546109af908363ffffffff610c5116565b600160a060020a0380861660009081526001602052604080822093909355908516815220546109e4908363ffffffff610d5e16565b600160a060020a03808516600090815260016020908152604080832094909455878316825260028152838220339093168252919091522054610a2c908363ffffffff610c5116565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b600160a060020a03811660009081526007602052604090205460ff161515610aeb57600160a060020a0381166000908152600760205260409020805460ff191660019081179091556006805490910190555b7fb83e1d14e8ccecc5461685cc4343c697baa6c3c30cd71b169b61a4ee9d7b1d22816006546001604051600160a060020a039093168352602083019190915215156040808301919091526060909101905180910390a150565b60035460009033600160a060020a03908116911614610b6257600080fd5b60035460a060020a900460ff1615610b7957600080fd5b600054610b8c908363ffffffff610d5e16565b6000908155600160a060020a038416815260016020526040902054610bb7908363ffffffff610d5e16565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a03831660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b600082821115610c5d57fe5b50900390565b6000600160a060020a0383161515610c7a57600080fd5b600160a060020a033316600090815260016020526040902054821115610c9f57600080fd5b600160a060020a033316600090815260016020526040902054610cc8908363ffffffff610c5116565b600160a060020a033381166000908152600160205260408082209390935590851681522054610cfd908363ffffffff610d5e16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60008282018381101561052b57fe00a165627a7a7230582055b7063c5cf39b6677250e7de08a08371de57822708eeec9ded6897513d7b65d0029"
}