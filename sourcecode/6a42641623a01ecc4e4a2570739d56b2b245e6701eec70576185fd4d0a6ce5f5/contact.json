{
  "address": "0xabf1411106314b22307ef99c6f8e7d39775b0a95",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Asset",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-28\n*/\n\npragma solidity 0.4.20;\n/**\n* TOKEN Contract\n* ERC-20 Token Standard Compliant\n* @author Fares A. Akel C. [emailÂ protected]\n*/\n\n/**\n * @title SafeMath by OpenZeppelin\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n}\n\n/**\n * Token contract interface for external use\n */\ncontract ERC20TokenInterface {\n\n    function balanceOf(address _owner) public constant returns (uint256 value);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n    }\n\n\n/**\n* @title Admin parameters\n* @dev Define administration parameters for this contract\n*/\ncontract admined { //This token contract is administered\n    address public admin; //Admin address is public\n    bool public lockSupply; //Mint and Burn Lock flag\n\n    /**\n    * @dev Contract constructor\n    * define initial administrator\n    */\n    function admined() internal {\n        admin = msg.sender; //Set initial admin to contract creator\n        Admined(admin);\n    }\n\n    modifier onlyAdmin() { //A modifier to define admin-only functions\n        require(msg.sender == admin);\n        _;\n    }\n\n    modifier supplyLock() { //A modifier to lock mint and burn transactions\n        require(lockSupply == false);\n        _;\n    }\n\n   /**\n    * @dev Function to set new admin address\n    * @param _newAdmin The address to transfer administration to\n    */\n    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\n        require(_newAdmin != 0);\n        admin = _newAdmin;\n        TransferAdminship(admin);\n    }\n\n   /**\n    * @dev Function to set mint and burn locks\n    * @param _set boolean flag (true | false)\n    */\n    function setSupplyLock(bool _set) onlyAdmin public { //Only the admin can set a lock on supply\n        lockSupply = _set;\n        SetSupplyLock(_set);\n    }\n\n    //All admin actions have a log for public review\n    event SetSupplyLock(bool _set);\n    event TransferAdminship(address newAdminister);\n    event Admined(address administer);\n\n}\n\n/**\n* @title Token definition\n* @dev Define token paramters including ERC20 ones\n*/\ncontract ERC20Token is ERC20TokenInterface, admined { //Standard definition of a ERC20Token\n    using SafeMath for uint256;\n    uint256 public totalSupply;\n    mapping (address => uint256) balances; //A mapping of all balances per address\n    mapping (address => mapping (address => uint256)) allowed; //A mapping of all allowances\n\n    /**\n    * @dev Get the balance of an specified address.\n    * @param _owner The address to be query.\n    */\n    function balanceOf(address _owner) public constant returns (uint256 value) {\n      return balances[_owner];\n    }\n\n    /**\n    * @dev transfer token to a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0)); //If you dont want that people destroy token\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev transfer token from an address to another specified address using allowance\n    * @param _from The address where token comes.\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0)); //If you dont want that people destroy token\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Assign allowance to an specified address to use the owner balance\n    * @param _spender The address to be allowed to spend.\n    * @param _value The amount to be allowed.\n    */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev Get the allowance of an specified address to use another address balance.\n    * @param _owner The address of the owner of the tokens.\n    * @param _spender The address of the allowed spender.\n    */\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * @dev Mint token to an specified address.\n    * @param _target The address of the receiver of the tokens.\n    * @param _mintedAmount amount to mint.\n    */\n    function mintToken(address _target, uint256 _mintedAmount) onlyAdmin supplyLock public {\n        require(_target != address(0));\n        balances[_target] = SafeMath.add(balances[_target], _mintedAmount);\n        totalSupply = SafeMath.add(totalSupply, _mintedAmount);\n        Transfer(0, this, _mintedAmount);\n        Transfer(this, _target, _mintedAmount);\n    }\n\n    /**\n    * @dev Burn token.\n    * @param _burnedAmount amount to burn.\n    */\n    function burnToken(uint256 _burnedAmount) supplyLock public {\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _burnedAmount);\n        totalSupply = SafeMath.sub(totalSupply, _burnedAmount);\n        Burned(msg.sender, _burnedAmount);\n    }\n\n    /**\n    * @dev Log Events\n    */\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Burned(address indexed _target, uint256 _value);\n}\n\n/**\n* @title Asset\n* @dev Initial supply creation\n*/\ncontract Asset is ERC20Token {\n    string public name = 'Equitybase';\n    uint8 public decimals = 18;\n    string public symbol = 'BASE';\n    string public version = '2';\n\n    /**\n    * @dev Asset constructor.\n    * @param _privateSaleWallet The wallet address for the private sale distribution.\n    * @param _companyReserveAndBountyWallet The wallet address of the company to handle also reserve and bounties.\n    */\n    function Asset(address _privateSaleWallet, address _companyReserveAndBountyWallet) public {\n        //Sanity checks\n        require(msg.sender != _privateSaleWallet);\n        require(msg.sender != _companyReserveAndBountyWallet);\n        require(_privateSaleWallet != _companyReserveAndBountyWallet);\n        require(_privateSaleWallet != 0);\n        require(_companyReserveAndBountyWallet != 0);\n\n        totalSupply = 360000000 * (10**uint256(decimals)); //initial token creation\n        \n        balances[msg.sender] = 180000000 * (10**uint256(decimals)); //180 Million for crowdsale\n        balances[_privateSaleWallet] = 14400000 * (10**uint256(decimals)); //14.4 Million for crowdsale\n        balances[_companyReserveAndBountyWallet] = 165240000 * (10**uint256(decimals)); //165.24 Million for crowdsale\n        balances[0xA6bc924715A0B63C6E0a7653d3262D26F254EcFd] = 360000 * (10**uint256(decimals)); //360k for contract writer (0.1%)\n\n        setSupplyLock(true);\n\n        Transfer(0, this, totalSupply);\n        Transfer(this, msg.sender, balances[msg.sender]);\n        Transfer(this, _privateSaleWallet, balances[_privateSaleWallet]);\n        Transfer(this, _companyReserveAndBountyWallet, balances[_companyReserveAndBountyWallet]);\n        Transfer(this, 0xA6bc924715A0B63C6E0a7653d3262D26F254EcFd, balances[0xA6bc924715A0B63C6E0a7653d3262D26F254EcFd]);\n    }\n    \n    /**\n    *@dev Function to handle callback calls\n    */\n    function() public {\n        revert();\n    }\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000009bff419dd2e63e807015edac1f3e3aa0ab218208000000000000000000000000038b4b13950f6c8e15357f6992c16631d099cfeb"
}