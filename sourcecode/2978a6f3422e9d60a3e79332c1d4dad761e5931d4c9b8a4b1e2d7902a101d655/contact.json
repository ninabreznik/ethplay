{
  "address": "0xbb1f24c0c1554b9990222f036b0aad6ee4caec29",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "CryptoSoul Token",
  "contractName": "CryptosoulToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-16\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 result = a * b;\n        assert(a == 0 || result / a == b);\n        return result;\n    }\n \n    function div(uint256 a, uint256 b)internal pure returns (uint256) {\n        uint256 result = a / b;\n        return result;\n    }\n \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a); \n        return a - b; \n    } \n  \n    function add(uint256 a, uint256 b) internal pure returns (uint256) { \n        uint256 result = a + b; \n        assert(result >= a);\n        return result;\n    }\n \n}\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    function balanceOf(address who) public view returns(uint256);\n    function transfer(address to, uint256 value) public returns(bool);\n}\n\ncontract ERC20 is ERC20Basic {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    function allowance(address owner, address spender) public view returns (uint256);\n    function approve(address spender, uint256 value) public returns (bool);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n}\n\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    struct WalletData {\n        uint256 tokensAmount;  //Tokens amount on wallet\n        uint256 freezedAmount;  //Freezed tokens amount on wallet.\n        bool canFreezeTokens;  //Is wallet can freeze tokens or not.\n        uint unfreezeDate; // Date when we can unfreeze tokens on wallet.\n    }\n   \n    mapping(address => WalletData) wallets;\n\n    function transfer(address _to, uint256 _value) public notSender(_to) returns(bool) {    \n        require(_to != address(0) \n        && wallets[msg.sender].tokensAmount >= _value \n        && checkIfCanUseTokens(msg.sender, _value)); \n\n        uint256 amount = wallets[msg.sender].tokensAmount.sub(_value);\n        wallets[msg.sender].tokensAmount = amount;\n        wallets[_to].tokensAmount = wallets[_to].tokensAmount.add(_value);\n        \n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns(uint256 balance) {\n        return wallets[_owner].tokensAmount;\n    }\n    // Check wallet on unfreeze tokens amount\n    function checkIfCanUseTokens(address _owner, uint256 _amount) internal view returns(bool) {\n        uint256 unfreezedAmount = wallets[_owner].tokensAmount - wallets[_owner].freezedAmount;\n        return _amount <= unfreezedAmount;\n    }\n    \n    // Prevents user to send transaction on his own address\n    modifier notSender(address _owner) {\n        require(msg.sender != _owner);\n        _;\n    }\n}\n\ncontract StandartToken is ERC20, BasicToken{\n    mapping (address => mapping (address => uint256)) allowed;\n  \n    function approve(address _spender, uint256 _value) public returns (bool) { \n        allowed[msg.sender][_spender] = _value; \n        emit Approval(msg.sender, _spender, _value); \n        return true; \n    }\n  \n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) { \n        return allowed[_owner][_spender]; \n    } \n  \n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0) &&\n        checkIfCanUseTokens(_from, _value) &&\n        _value <= wallets[_from].tokensAmount &&\n        _value <= allowed[_from][msg.sender]); \n        wallets[_from].tokensAmount = wallets[_from].tokensAmount.sub(_value); \n        wallets[_to].tokensAmount = wallets[_to].tokensAmount.add(_value); \n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); \n        emit Transfer(_from, _to, _value); \n        return true; \n   } \n    \n}\n\ncontract Ownable {\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n\n    event TransferOwnership(address indexed _previousOwner, address indexed _newOwner);\n    address public owner = 0x0;\n    //wallet that can change owner\n    address internal masterKey = 0x4977A392d8D207B49c7fDE8A6B91C23bCebE7291;\n   \n    function transferOwnership(address _newOwner) public returns(bool);\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n}\n\ncontract FreezableToken is StandartToken, Ownable {\n    event ChangeFreezePermission(address indexed _owner, bool _permission);\n    event FreezeTokens(address indexed _owner, uint256 _freezeAmount);\n    event UnfreezeTokens(address indexed _owner, uint256 _unfreezeAmount);\n    \n    // Give\\deprive permission to a wallet for freeze tokens.\n    function giveFreezePermission(address[] _owners, bool _permission) public onlyOwner returns(bool) {\n        for (uint i = 0; i < _owners.length; i++) {\n        wallets[_owners[i]].canFreezeTokens = _permission;\n        emit ChangeFreezePermission(_owners[i], _permission);\n        }\n        return true;\n    }\n    \n    function freezeAllowance(address _owner) public view returns(bool) { \n        return wallets[_owner].canFreezeTokens;   \n    }\n    // Freeze tokens on sender wallet if have permission.\n    function freezeTokens(uint256 _amount, uint _unfreezeDate) public isFreezeAllowed returns(bool) {\n        //We can freeze tokens only if there are no frozen tokens on the wallet.\n        require(wallets[msg.sender].freezedAmount == 0\n        && wallets[msg.sender].tokensAmount >= _amount); \n        wallets[msg.sender].freezedAmount = _amount;\n        wallets[msg.sender].unfreezeDate = _unfreezeDate;\n        emit FreezeTokens(msg.sender, _amount);\n        return true;\n    }\n    \n    function showFreezedTokensAmount(address _owner) public view returns(uint256) {\n        return wallets[_owner].freezedAmount;\n    }\n    \n    function unfreezeTokens() public returns(bool) {\n        require(wallets[msg.sender].freezedAmount > 0\n        && now >= wallets[msg.sender].unfreezeDate);\n        emit UnfreezeTokens(msg.sender, wallets[msg.sender].freezedAmount);\n        wallets[msg.sender].freezedAmount = 0; // Unfreeze all tokens.\n        wallets[msg.sender].unfreezeDate = 0;\n        return true;\n    }\n    //Show date in UNIX time format.\n    function showTokensUnfreezeDate(address _owner) public view returns(uint) {\n        //If wallet don't have freezed tokens - function will return 0.\n        return wallets[_owner].unfreezeDate;\n    }\n    \n    function getUnfreezedTokens(address _owner) internal view returns(uint256) {\n        return wallets[_owner].tokensAmount - wallets[_owner].freezedAmount;\n    }\n    \n    modifier isFreezeAllowed() {\n        require(freezeAllowance(msg.sender));\n        _;\n    }\n}\n\ncontract MultisendableToken is FreezableToken {\n\n    function massTransfer(address[] _addresses, uint[] _values) public onlyOwner returns(bool) {\n        for (uint i = 0; i < _addresses.length; i++) {\n            transferFromOwner(_addresses[i], _values[i]);\n        }\n        return true;\n    }\n\n    function massApprove(address[] _spenders, uint256[] _values) public returns (bool succes) {\n        for(uint i = 0; i < _spenders.length; i++) {\n        approve(_spenders[i], _values[i]);\n        }\n        return true;\n    }\n\n    function transferFromOwner(address _to, uint256 _value) internal notSender(_to) onlyOwner {\n        require(_to != address(0)\n        && wallets[owner].tokensAmount >= _value\n        && checkIfCanUseTokens(owner, _value));\n        wallets[owner].tokensAmount = wallets[owner].tokensAmount.sub(_value); \n        wallets[_to].tokensAmount = wallets[_to].tokensAmount.add(_value);\n        emit Transfer(owner, _to, _value);\n    }\n    \n}\n\ncontract CryptosoulToken is MultisendableToken {\n    \n    event AllowMinting();\n    event Burn(address indexed _from, uint256 _value);\n    event Mint(address indexed _to, uint256 _value);\n    \n    string constant public name = \"CryptoSoul\";\n    string constant public symbol = \"SOUL\";\n    uint constant public decimals = 18;\n    \n    uint256 constant public START_TOKENS = 500000000 * 10**decimals; //500M start\n    uint256 constant public MINT_AMOUNT = 1370000 * 10**decimals;\n    uint256 constant public MINT_INTERVAL = 1 days; // 24 hours\n    uint256 constant private MAX_BALANCE_VALUE = 10000000000 * 10**decimals;\n    \n    uint256 public nextMintPossibleDate = 0;\n    bool public canMint = false;\n    \n    constructor() public {\n        wallets[owner].tokensAmount = START_TOKENS;\n        wallets[owner].canFreezeTokens = true;\n        totalSupply = START_TOKENS;\n        nextMintPossibleDate = 1538352000; //01.10.2018 (DD, MM, YYYY)\n        emit Mint(owner, START_TOKENS);\n    }\n\n    function allowMinting() public onlyOwner {\n        // Can start minting token after 01.10.2018\n        require(!canMint\n        && now >= nextMintPossibleDate);\n        nextMintPossibleDate = now;\n        canMint = true;\n        emit AllowMinting();\n    }\n\n    function mint() public onlyOwner returns(bool) {\n        require(canMint\n        && now >= nextMintPossibleDate\n        && totalSupply + MINT_AMOUNT <= MAX_BALANCE_VALUE);\n        nextMintPossibleDate = nextMintPossibleDate.add(MINT_INTERVAL);\n        wallets[owner].tokensAmount = wallets[owner].tokensAmount.\n                                             add(MINT_AMOUNT);  \n        totalSupply = totalSupply.add(MINT_AMOUNT);\n        emit Mint(owner, MINT_AMOUNT);\n        return true;\n    }\n\n    function burn(uint256 value) public onlyOwner returns(bool) {\n        require(checkIfCanUseTokens(owner, value)\n        && wallets[owner].tokensAmount >= value);\n        wallets[owner].tokensAmount = wallets[owner].\n                                             tokensAmount.sub(value);\n        totalSupply = totalSupply.sub(value);                             \n        emit Burn(owner, value);\n        return true;\n    }\n    \n    function transferOwnership(address _newOwner) public notSender(_newOwner) returns(bool) {\n        require(msg.sender == masterKey \n        && _newOwner != address(0));\n        emit TransferOwnership(owner, _newOwner);\n        owner = _newOwner;\n        return true;\n    }\n    \n    function() public payable {\n        revert();\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"massTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spenders\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"massApprove\",\"outputs\":[{\"name\":\"succes\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"freezeAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextMintPossibleDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINT_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINT_INTERVAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"showFreezedTokensAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_unfreezeDate\",\"type\":\"uint256\"}],\"name\":\"freezeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_permission\",\"type\":\"bool\"}],\"name\":\"giveFreezePermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"showTokensUnfreezeDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreezeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AllowMinting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_permission\",\"type\":\"bool\"}],\"name\":\"ChangeFreezePermission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_freezeAmount\",\"type\":\"uint256\"}],\"name\":\"FreezeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_unfreezeAmount\",\"type\":\"uint256\"}],\"name\":\"UnfreezeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": ""
}