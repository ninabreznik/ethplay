{
  "address": "0x9faeff7d8443a0ac0be0f4e13d847cd7bd408ad6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ERC223StandardToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-01\n*/\n\npragma solidity ^0.4.24;\n//ERC223\ncontract ERC223Ownable {\n    address public owner;\n\n    function ERC223Ownable() public{\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    function transferOwnership(address newOwner) onlyOwner public{\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n\ncontract ContractReceiver {\n     \n    struct TKN {\n        address sender;\n        uint value;\n        bytes data;\n        bytes4 sig;\n    }\n    \n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\n      TKN memory tkn;\n      tkn.sender = _from;\n      tkn.value = _value;\n      tkn.data = _data;\n      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n      tkn.sig = bytes4(u);\n      \n      /* tkn variable is analogue of msg variable of Ether transaction\n      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n      *  tkn.value the number of tokens that were sent   (analogue of msg.value)\n      *  tkn.data is data of token transaction   (analogue of msg.data)\n      *  tkn.sig is 4 bytes signature of function\n      *  if data of token transaction is a function execution\n      */\n    }\n}\n\ncontract ERC223 {\n  uint public totalSupply;\n  function balanceOf(address who) public view returns (uint);\n\n  function transfer(address to, uint value) public returns (bool ok);\n  function transfer(address to, uint value, bytes data) public returns (bool ok);\n  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n\n  event Transfer(address indexed from, address indexed to, uint value);\n  event Transfer(address indexed from, address indexed to, uint value, bytes data);\n}\n\ncontract SafeMath {\n    uint256 constant public MAX_UINT256 =\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    function safeAdd(uint256 x, uint256 y) pure internal returns (uint256 z) {\n        if (x > MAX_UINT256 - y) revert();\n        return x + y;\n    }\n\n    function safeSub(uint256 x, uint256 y) pure internal returns (uint256 z) {\n        if (x < y) revert();\n        return x - y;\n    }\n\n    function safeMul(uint256 x, uint256 y) pure internal returns (uint256 z) {\n        if (y == 0) return 0;\n        if (x > MAX_UINT256 / y) revert();\n        return x * y;\n    }\n}\n\ncontract ERC223Token is ERC223, SafeMath {\n\n  mapping(address => uint) balances;\n\n  string public name;\n  string public symbol;\n  uint256 public decimals;\n  uint256 public totalSupply;\n  bool public mintable;\n\n\n\n  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\n\n    if(isContract(_to)) {\n        if (balanceOf(msg.sender) < _value) revert();\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n        balances[_to] = safeAdd(balanceOf(_to), _value);\n        assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n        emit Transfer(msg.sender, _to, _value);\n        emit Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n    else {\n        return transferToAddress(_to, _value, _data);\n    }\n}\n\n\nfunction transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n\n    if(isContract(_to)) {\n        return transferToContract(_to, _value, _data);\n    }\n    else {\n        return transferToAddress(_to, _value, _data);\n    }\n}\n\n  function transfer(address _to, uint _value) public returns (bool success) {\n\n    //standard function transfer similar to ERC20 transfer with no _data\n    //added due to backwards compatibility reasons\n    bytes memory empty;\n    if(isContract(_to)) {\n        return transferToContract(_to, _value, empty);\n    }\n    else {\n        return transferToAddress(_to, _value, empty);\n    }\n}\n\n  function isContract(address _addr) private view returns (bool is_contract) {\n      uint length;\n      assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n      }\n      return (length>0);\n    }\n\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n    if (balanceOf(msg.sender) < _value) revert();\n    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n    balances[_to] = safeAdd(balanceOf(_to), _value);\n    emit Transfer(msg.sender, _to, _value);\n    emit Transfer(msg.sender, _to, _value, _data);\n    return true;\n  }\n\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n    if (balanceOf(msg.sender) < _value) revert();\n    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n    balances[_to] = safeAdd(balanceOf(_to), _value);\n    ContractReceiver receiver = ContractReceiver(_to);\n    receiver.tokenFallback(msg.sender, _value, _data);\n    emit Transfer(msg.sender, _to, _value);\n    emit Transfer(msg.sender, _to, _value, _data);\n    return true;\n}\n\n\n  function balanceOf(address _owner) public view returns (uint balance) {\n    return balances[_owner];\n  }\n}\n\ncontract ERC223StandardToken is ERC223Token,ERC223Ownable {\n    \n    function ERC223StandardToken(address _owner, string _name, string _symbol, uint256 _decimals, uint256 _totalSupply, bool _mintable) public {\n        \n        require(_owner != address(0));\n        owner = _owner;\n\t\tdecimals = _decimals;\n\t\tsymbol = _symbol;\n\t\tname = _name;\n\t\tmintable = _mintable;\n        totalSupply = _totalSupply;\n        balances[_owner] = totalSupply;\n        emit Transfer(address(0), _owner, totalSupply);\n        emit Transfer(address(0), _owner, totalSupply, \"\");\n    }\n  \n    function mint(uint256 amount) onlyOwner public {\n\t\trequire(mintable);\n\t\trequire(amount >= 0);\n\t\tbalances[msg.sender] += amount;\n\t\ttotalSupply += amount;\n\t}\n\n    function burn(uint256 _value) onlyOwner public returns (bool) {\n        require(balances[msg.sender] >= _value  && totalSupply >=_value && _value > 0);\n        balances[msg.sender] -= _value;\n        totalSupply -= _value;\n        emit Transfer(msg.sender, 0x0, _value);\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_mintable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b50604051620018843803806200188483398101806040528101908080519060200190929190805182019291906020018051820192919060200180519060200190929190805190602001909291908051906020019092919050505033600660016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614151515620000e957600080fd5b85600660016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600481905550836003908051906020019062000149929190620002ba565b50846002908051906020019062000162929190620002ba565b5080600660006101000a81548160ff02191690831515021790555081600581905550600554600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6005546040518082815260200191505060405180910390a38573ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1660055460405180828152602001806020018281038252600081526020016020019250505060405180910390a350505050505062000369565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002fd57805160ff19168380011785556200032e565b828001600101855582156200032e579182015b828111156200032d57825182559160200191906001019062000310565b5b5090506200033d919062000341565b5090565b6200036691905b808211156200036257600081600090555060010162000348565b5090565b90565b61150b80620003796000396000f3006080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d557806318160ddd14610165578063313ce5671461019057806333a581d2146101bb57806342966c68146101e65780634bf365df1461022b57806370a082311461025a5780638da5cb5b146102b157806395d89b4114610308578063a0712d6814610398578063a9059cbb146103c5578063be45fd621461042a578063f2fde38b146104d5578063f6368f8a14610518575b600080fd5b3480156100e157600080fd5b506100ea610609565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561012a57808201518184015260208101905061010f565b50505050905090810190601f1680156101575780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017157600080fd5b5061017a6106a7565b6040518082815260200191505060405180910390f35b34801561019c57600080fd5b506101a56106ad565b6040518082815260200191505060405180910390f35b3480156101c757600080fd5b506101d06106b3565b6040518082815260200191505060405180910390f35b3480156101f257600080fd5b50610211600480360381019080803590602001909291905050506106d7565b604051808215151515815260200191505060405180910390f35b34801561023757600080fd5b50610240610853565b604051808215151515815260200191505060405180910390f35b34801561026657600080fd5b5061029b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610866565b6040518082815260200191505060405180910390f35b3480156102bd57600080fd5b506102c66108af565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561031457600080fd5b5061031d6108d5565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035d578082015181840152602081019050610342565b50505050905090810190601f16801561038a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103a457600080fd5b506103c360048036038101908080359060200190929190505050610973565b005b3480156103d157600080fd5b50610410600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a5a565b604051808215151515815260200191505060405180910390f35b34801561043657600080fd5b506104bb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610a93565b604051808215151515815260200191505060405180910390f35b3480156104e157600080fd5b50610516600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610aca565b005b34801561052457600080fd5b506105ef600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610ba1565b604051808215151515815260200191505060405180910390f35b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561069f5780601f106106745761010080835404028352916020019161069f565b820191906000526020600020905b81548152906001019060200180831161068257829003601f168201915b505050505081565b60055481565b60045481565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81565b6000600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561073557600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561078657508160055410155b80156107925750600082115b151561079d57600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508160056000828254039250508190555060003373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050919050565b600660009054906101000a900460ff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561096b5780601f106109405761010080835404028352916020019161096b565b820191906000526020600020905b81548152906001019060200180831161094e57829003601f168201915b505050505081565b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109cf57600080fd5b600660009054906101000a900460ff1615156109ea57600080fd5b600081101515156109fa57600080fd5b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508060056000828254019250508190555050565b60006060610a6784610f43565b15610a7e57610a77848483610f56565b9150610a8c565b610a89848483611286565b91505b5092915050565b6000610a9e84610f43565b15610ab557610aae848484610f56565b9050610ac3565b610ac0848484611286565b90505b9392505050565b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b2657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610b9e5780600660016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000610bac85610f43565b15610f2d5783610bbb33610866565b1015610bc657600080fd5b610bd8610bd233610866565b85611489565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c2d610c2786610866565b856114a3565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff166000836040518082805190602001908083835b602083101515610cbf5780518252602082019150602081019050602083039250610c9a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207c01000000000000000000000000000000000000000000000000000000009004903387876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828051906020019080838360005b83811015610da0578082015181840152602081019050610d85565b50505050905090810190601f168015610dcd5780820380516001836020036101000a031916815260200191505b50935050505060006040518083038185885af193505050501515610ded57fe5b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a38473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1686866040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610ee9578082015181840152602081019050610ece565b50505050905090810190601f168015610f165780820380516001836020036101000a031916815260200191505b50935050505060405180910390a360019050610f3b565b610f38858585611286565b90505b949350505050565b600080823b905060008111915050919050565b60008083610f6333610866565b1015610f6e57600080fd5b610f80610f7a33610866565b85611489565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fd5610fcf86610866565b856114a3565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508490508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3386866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156110dd5780820151818401526020810190506110c2565b50505050905090810190601f16801561110a5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561112b57600080fd5b505af115801561113f573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a38473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1686866040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561123f578082015181840152602081019050611224565b50505050905090810190601f16801561126c5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a360019150509392505050565b60008261129233610866565b101561129d57600080fd5b6112af6112a933610866565b84611489565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113046112fe85610866565b846114a3565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1685856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611443578082015181840152602081019050611428565b50505050905090810190601f1680156114705780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3600190509392505050565b60008183101561149857600080fd5b818303905092915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038311156114d457600080fd5b8183019050929150505600a165627a7a72305820a6a101b23735e514ffbac465ccf727368f0b1f580440b631127f5b7dfa8adb9500290000000000000000000000003de332e44a0bbff025838c187873d77f92caf5e900000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000052b7d2dcc80cd2e4000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000134552433232335374616e64617264546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000094552433232335344540000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000003de332e44a0bbff025838c187873d77f92caf5e900000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000052b7d2dcc80cd2e4000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000134552433232335374616e64617264546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000094552433232335344540000000000000000000000000000000000000000000000"
}