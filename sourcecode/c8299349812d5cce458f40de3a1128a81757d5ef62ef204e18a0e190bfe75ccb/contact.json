{
  "address": "0x0821126d74d1b33b5cfdedbea66663868a15800c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Airdrop",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-10\n*/\n\npragma solidity 0.4.24;\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: contracts/FreeDnaCardRepositoryInterface.sol\n\ninterface FreeDnaCardRepositoryInterface {\n    function airdrop(address to, uint256 animalId) external;\n\n    function giveaway(\n        address to,\n        uint256 animalId,\n        uint8 effectiveness\n    )\n    external;\n}\n\n// File: contracts/Airdrop.sol\n\ninterface CryptoServal {\n    function getAnimalsCount() external view returns(uint256 animalsCount);\n}\n\n\ncontract Airdrop {\n    using SafeMath for uint256;\n\n    mapping (address => mapping (uint256 => bool)) private addressHasWithdraw;\n    mapping (uint256 => uint256) private periodDonationCount;\n\n    CryptoServal private cryptoServal;\n    FreeDnaCardRepositoryInterface private freeDnaCardRepository;\n\n    uint256 private startTimestamp;\n    uint256 private endTimestamp;\n    uint256 private periodDuration; // 23 hours (82800 seconds)?\n    uint16 private cardsByPeriod; // number of cards dropped by period\n\n    constructor(\n        address _cryptoServalAddress,\n        address _freeDnaCardRepositoryAddress,\n        uint _startTimestamp,\n        uint _endTimestamp,\n        uint256 _periodDuration,\n        uint16 _cardsByPeriod\n    )\n    public {\n        freeDnaCardRepository =\n            FreeDnaCardRepositoryInterface(_freeDnaCardRepositoryAddress);\n        cryptoServal = CryptoServal(_cryptoServalAddress);\n        startTimestamp = _startTimestamp;\n        endTimestamp = _endTimestamp;\n        periodDuration = _periodDuration;\n        cardsByPeriod = _cardsByPeriod;\n    }\n\n    function withdraw() external {\n        require(now >= startTimestamp, \"not started yet\");\n        require(now <= endTimestamp, \"ended\");\n\n        mapping (uint256 => bool) senderHasWithdraw = addressHasWithdraw[msg.sender];\n        uint256 currentPeriodKey = getCurrentPeriodKey();\n\n        // Ensure the sender has not already withdraw during the current period\n        require(senderHasWithdraw[currentPeriodKey] == false, \"once / period\");\n\n        // Ensure we didn't reached the daily (period) limit\n        require(\n            periodDonationCount[currentPeriodKey] < cardsByPeriod,\n            \"period maximum donations reached\"\n        );\n\n        // Donate the card\n        freeDnaCardRepository.airdrop(msg.sender, getRandomAnimalId());\n\n        // And record his withdrawal\n        periodDonationCount[currentPeriodKey]++;\n        senderHasWithdraw[currentPeriodKey] = true;\n    }\n\n    function hasAvailableCard() external view returns(bool) {\n        uint256 currentPeriodKey = getCurrentPeriodKey();\n        mapping (uint256 => bool) senderHasWithdraw = addressHasWithdraw[msg.sender];\n\n        return (senderHasWithdraw[currentPeriodKey] == false &&\n                periodDonationCount[currentPeriodKey] < cardsByPeriod);\n    }\n\n    function getAvailableCardCount() external view returns(uint256) {\n        return cardsByPeriod - periodDonationCount[getCurrentPeriodKey()];\n    }\n\n    function getNextPeriodTimestamp() external view returns(uint256) {\n        uint256 nextPeriodKey = getCurrentPeriodKey() + 1;\n        return nextPeriodKey.mul(periodDuration);\n    }\n\n    function getRandomNumber(uint256 max) public view returns(uint256) {\n        require(max != 0);\n        return now % max;\n    }\n\n    function getAnimalCount() public view returns(uint256) {\n        return cryptoServal.getAnimalsCount();\n    }\n\n    function getRandomAnimalId() public view returns(uint256) {\n        return getRandomNumber(getAnimalCount());\n    }\n\n    function getPeriodKey(uint atTime) private view returns(uint256) {\n        return atTime.div(periodDuration);\n    }\n\n    function getCurrentPeriodKey() private view returns(uint256) {\n        return getPeriodKey(now);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405160c08061095683398101806040528101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505084600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600481905550826005819055508160068190555080600760006101000a81548161ffff021916908361ffff1602179055505050505050506108288061012e6000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631da05199146100885780633ccfd60b146100b757806366634a16146100ce57806394c6116f146100f9578063a098a04b14610124578063b20b0ef51461014f578063b37217a41461017a575b600080fd5b34801561009457600080fd5b5061009d6101bb565b604051808215151515815260200191505060405180910390f35b3480156100c357600080fd5b506100cc61026a565b005b3480156100da57600080fd5b506100e361061a565b6040518082815260200191505060405180910390f35b34801561010557600080fd5b5061010e6106e2565b6040518082815260200191505060405180910390f35b34801561013057600080fd5b5061013961070d565b6040518082815260200191505060405180910390f35b34801561015b57600080fd5b50610164610724565b6040518082815260200191505060405180910390f35b34801561018657600080fd5b506101a56004803603810190808035906020019092919050505061075c565b6040518082815260200191505060405180910390f35b60008060006101c8610780565b91506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000151581600084815260200190815260200160002060009054906101000a900460ff1615151480156102635750600760009054906101000a900461ffff1661ffff166001600084815260200190815260200160002054105b9250505090565b60008060045442101515156102e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6e6f74207374617274656420796574000000000000000000000000000000000081525060200191505060405180910390fd5b6005544211151515610361576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260058152602001807f656e64656400000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091506103a9610780565b90506000151582600083815260200190815260200160002060009054906101000a900460ff161515141515610446576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6f6e6365202f20706572696f640000000000000000000000000000000000000081525060200191505060405180910390fd5b600760009054906101000a900461ffff1661ffff1660016000838152602001908152602001600020541015156104e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f706572696f64206d6178696d756d20646f6e6174696f6e73207265616368656481525060200191505060405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638ba4cc3c3361052b61070d565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156105b057600080fd5b505af11580156105c4573d6000803e3d6000fd5b505050506001600082815260200190815260200160002060008154809291906001019190505550600182600083815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630931ce676040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156106a257600080fd5b505af11580156106b6573d6000803e3d6000fd5b505050506040513d60208110156106cc57600080fd5b8101908080519060200190929190505050905090565b60008060016106ef610780565b0190506107076006548261079090919063ffffffff16565b91505090565b600061071f61071a61061a565b61075c565b905090565b600060016000610732610780565b815260200190815260200160002054600760009054906101000a900461ffff1661ffff1603905090565b600080821415151561076d57600080fd5b814281151561077857fe5b069050919050565b600061078b426107c8565b905090565b6000808314156107a357600090506107c2565b81830290508183828115156107b457fe5b041415156107be57fe5b8090505b92915050565b60006107df600654836107e690919063ffffffff16565b9050919050565b600081838115156107f357fe5b049050929150505600a165627a7a72305820a9cdc9f4a45bb3409c0eaf206724731942254c6d497ef24f7d60017f8ab6b0b900290000000000000000000000003a1957a0b9755d78c77e301410b254b6147a400c00000000000000000000000082b30de6cecd124c3d34fd6cef12a6bdb79b22090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ca1386000000000000000000000000000000000000000000000000000000000000143700000000000000000000000000000000000000000000000000000000000000019",
  "constructorArguments": "0000000000000000000000003a1957a0b9755d78c77e301410b254b6147a400c00000000000000000000000082b30de6cecd124c3d34fd6cef12a6bdb79b22090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ca1386000000000000000000000000000000000000000000000000000000000000143700000000000000000000000000000000000000000000000000000000000000019"
}