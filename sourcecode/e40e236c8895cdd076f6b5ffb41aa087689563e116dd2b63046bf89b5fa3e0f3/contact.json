{
  "address": "0x5b52b324fc10cb43b9eeadaf9bd15afb98867942",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-20\n*/\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.4.21;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.4.21;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\npragma solidity ^0.4.21;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\npragma solidity ^0.4.21;\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.4.21;\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\npragma solidity ^0.4.21;\n\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/Token.sol\n\npragma solidity 0.4.23;\n\n\n\n\n/// @title   Token\n/// @author  Jose Perez - <[emailÂ protected]>\n/// @notice  ERC20 token\n/// @dev     The contract allows to perform a number of token sales in different periods in time.\n///          allowing participants in previous token sales to transfer tokens to other accounts.\n///          Additionally, token locking logic for KYC/AML compliance checking is supported.\n\ncontract Token is StandardToken, Ownable {\n    using SafeMath for uint256;\n\n    string public constant name = \"Nynja\";\n    string public constant symbol = \"NYN\";\n    uint256 public constant decimals = 18;\n\n    // Using same number of decimal figures as ETH (i.e. 18).\n    uint256 public constant TOKEN_UNIT = 10 ** uint256(decimals);\n\n    // Maximum number of tokens in circulation\n    uint256 public constant MAX_TOKEN_SUPPLY = 5000000000 * TOKEN_UNIT;\n\n    // Maximum number of tokens sales to be performed.\n    uint256 public constant MAX_TOKEN_SALES = 5;\n\n    // Maximum size of the batch functions input arrays.\n    uint256 public constant MAX_BATCH_SIZE = 400;\n\n    address public assigner;    // The address allowed to assign or mint tokens during token sale.\n    address public locker;      // The address allowed to lock/unlock addresses.\n\n    mapping(address => bool) public locked;        // If true, address' tokens cannot be transferred.\n\n    uint256 public currentTokenSaleId = 0;           // The id of the current token sale.\n    mapping(address => uint256) public tokenSaleId;  // In which token sale the address participated.\n\n    bool public tokenSaleOngoing = false;\n\n    event TokenSaleStarting(uint indexed tokenSaleId);\n    event TokenSaleEnding(uint indexed tokenSaleId);\n    event Lock(address indexed addr);\n    event Unlock(address indexed addr);\n    event Assign(address indexed to, uint256 amount);\n    event Mint(address indexed to, uint256 amount);\n    event LockerTransferred(address indexed previousLocker, address indexed newLocker);\n    event AssignerTransferred(address indexed previousAssigner, address indexed newAssigner);\n\n    /// @dev Constructor that initializes the contract.\n    /// @param _assigner The assigner account.\n    /// @param _locker The locker account.\n    constructor(address _assigner, address _locker) public {\n        require(_assigner != address(0));\n        require(_locker != address(0));\n\n        assigner = _assigner;\n        locker = _locker;\n    }\n\n    /// @dev True if a token sale is ongoing.\n    modifier tokenSaleIsOngoing() {\n        require(tokenSaleOngoing);\n        _;\n    }\n\n    /// @dev True if a token sale is not ongoing.\n    modifier tokenSaleIsNotOngoing() {\n        require(!tokenSaleOngoing);\n        _;\n    }\n\n    /// @dev Throws if called by any account other than the assigner.\n    modifier onlyAssigner() {\n        require(msg.sender == assigner);\n        _;\n    }\n\n    /// @dev Throws if called by any account other than the locker.\n    modifier onlyLocker() {\n        require(msg.sender == locker);\n        _;\n    }\n\n    /// @dev Starts a new token sale. Only the owner can start a new token sale. If a token sale\n    ///      is ongoing, it has to be ended before a new token sale can be started.\n    ///      No more than `MAX_TOKEN_SALES` sales can be carried out.\n    /// @return True if the operation was successful.\n    function tokenSaleStart() external onlyOwner tokenSaleIsNotOngoing returns(bool) {\n        require(currentTokenSaleId < MAX_TOKEN_SALES);\n        currentTokenSaleId++;\n        tokenSaleOngoing = true;\n        emit TokenSaleStarting(currentTokenSaleId);\n        return true;\n    }\n\n    /// @dev Ends the current token sale. Only the owner can end a token sale.\n    /// @return True if the operation was successful.\n    function tokenSaleEnd() external onlyOwner tokenSaleIsOngoing returns(bool) {\n        emit TokenSaleEnding(currentTokenSaleId);\n        tokenSaleOngoing = false;\n        return true;\n    }\n\n    /// @dev Returns whether or not a token sale is ongoing.\n    /// @return True if a token sale is ongoing.\n    function isTokenSaleOngoing() external view returns(bool) {\n        return tokenSaleOngoing;\n    }\n\n    /// @dev Getter of the variable `currentTokenSaleId`.\n    /// @return Returns the current token sale id.\n    function getCurrentTokenSaleId() external view returns(uint256) {\n        return currentTokenSaleId;\n    }\n\n    /// @dev Getter of the variable `tokenSaleId[]`.\n    /// @param _address The address of the participant.\n    /// @return Returns the id of the token sale the address participated in.\n    function getAddressTokenSaleId(address _address) external view returns(uint256) {\n        return tokenSaleId[_address];\n    }\n\n    /// @dev Allows the current owner to change the assigner.\n    /// @param _newAssigner The address of the new assigner.\n    /// @return True if the operation was successful.\n    function transferAssigner(address _newAssigner) external onlyOwner returns(bool) {\n        require(_newAssigner != address(0));\n\n        emit AssignerTransferred(assigner, _newAssigner);\n        assigner = _newAssigner;\n        return true;\n    }\n\n    /// @dev Function to mint tokens. It can only be called by the assigner during an ongoing token sale.\n    /// @param _to The address that will receive the minted tokens.\n    /// @param _amount The amount of tokens to mint.\n    /// @return A boolean that indicates if the operation was successful.\n    function mint(address _to, uint256 _amount) public onlyAssigner tokenSaleIsOngoing returns(bool) {\n        totalSupply_ = totalSupply_.add(_amount);\n        require(totalSupply_ <= MAX_TOKEN_SUPPLY);\n\n        if (tokenSaleId[_to] == 0) {\n            tokenSaleId[_to] = currentTokenSaleId;\n        }\n        require(tokenSaleId[_to] == currentTokenSaleId);\n\n        balances[_to] = balances[_to].add(_amount);\n\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    /// @dev Mints tokens for several addresses in one single call.\n    /// @param _to address[] The addresses that get the tokens.\n    /// @param _amount address[] The number of tokens to be minted.\n    /// @return A boolean that indicates if the operation was successful.\n    function mintInBatches(address[] _to, uint256[] _amount) external onlyAssigner tokenSaleIsOngoing returns(bool) {\n        require(_to.length > 0);\n        require(_to.length == _amount.length);\n        require(_to.length <= MAX_BATCH_SIZE);\n\n        for (uint i = 0; i < _to.length; i++) {\n            mint(_to[i], _amount[i]);\n        }\n        return true;\n    }\n\n    /// @dev Function to assign any number of tokens to a given address.\n    ///      Compared to the `mint` function, the `assign` function allows not just to increase but also to decrease\n    ///      the number of tokens of an address by assigning a lower value than the address current balance.\n    ///      This function can only be executed during initial token sale.\n    /// @param _to The address that will receive the assigned tokens.\n    /// @param _amount The amount of tokens to assign.\n    /// @return True if the operation was successful.\n    function assign(address _to, uint256 _amount) public onlyAssigner tokenSaleIsOngoing returns(bool) {\n        require(currentTokenSaleId == 1);\n\n        // The desired value to assign (`_amount`) can be either higher or lower than the current number of tokens\n        // of the address (`balances[_to]`). To calculate the new `totalSupply_` value, the difference between `_amount`\n        // and `balances[_to]` (`delta`) is calculated first, and then added or substracted to `totalSupply_` accordingly.\n        uint256 delta = 0;\n        if (balances[_to] < _amount) {\n            // balances[_to] will be increased, so totalSupply_ should be increased\n            delta = _amount.sub(balances[_to]);\n            totalSupply_ = totalSupply_.add(delta);\n        } else {\n            // balances[_to] will be decreased, so totalSupply_ should be decreased\n            delta = balances[_to].sub(_amount);\n            totalSupply_ = totalSupply_.sub(delta);\n        }\n        require(totalSupply_ <= MAX_TOKEN_SUPPLY);\n\n        balances[_to] = _amount;\n        tokenSaleId[_to] = currentTokenSaleId;\n\n        emit Assign(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    /// @dev Assigns tokens to several addresses in one call.\n    /// @param _to address[] The addresses that get the tokens.\n    /// @param _amount address[] The number of tokens to be assigned.\n    /// @return True if the operation was successful.\n    function assignInBatches(address[] _to, uint256[] _amount) external onlyAssigner tokenSaleIsOngoing returns(bool) {\n        require(_to.length > 0);\n        require(_to.length == _amount.length);\n        require(_to.length <= MAX_BATCH_SIZE);\n\n        for (uint i = 0; i < _to.length; i++) {\n            assign(_to[i], _amount[i]);\n        }\n        return true;\n    }\n\n    /// @dev Allows the current owner to change the locker.\n    /// @param _newLocker The address of the new locker.\n    /// @return True if the operation was successful.\n    function transferLocker(address _newLocker) external onlyOwner returns(bool) {\n        require(_newLocker != address(0));\n\n        emit LockerTransferred(locker, _newLocker);\n        locker = _newLocker;\n        return true;\n    }\n\n    /// @dev Locks an address. A locked address cannot transfer its tokens or other addresses' tokens out.\n    ///      Only addresses participating in the current token sale can be locked.\n    ///      Only the locker account can lock addresses and only during the token sale.\n    /// @param _address address The address to lock.\n    /// @return True if the operation was successful.\n    function lockAddress(address _address) public onlyLocker tokenSaleIsOngoing returns(bool) {\n        require(tokenSaleId[_address] == currentTokenSaleId);\n        require(!locked[_address]);\n\n        locked[_address] = true;\n        emit Lock(_address);\n        return true;\n    }\n\n    /// @dev Unlocks an address so that its owner can transfer tokens out again.\n    ///      Addresses can be unlocked any time. Only the locker account can unlock addresses\n    /// @param _address address The address to unlock.\n    /// @return True if the operation was successful.\n    function unlockAddress(address _address) public onlyLocker returns(bool) {\n        require(locked[_address]);\n\n        locked[_address] = false;\n        emit Unlock(_address);\n        return true;\n    }\n\n    /// @dev Locks several addresses in one single call.\n    /// @param _addresses address[] The addresses to lock.\n    /// @return True if the operation was successful.\n    function lockInBatches(address[] _addresses) external onlyLocker returns(bool) {\n        require(_addresses.length > 0);\n        require(_addresses.length <= MAX_BATCH_SIZE);\n\n        for (uint i = 0; i < _addresses.length; i++) {\n            lockAddress(_addresses[i]);\n        }\n        return true;\n    }\n\n    /// @dev Unlocks several addresses in one single call.\n    /// @param _addresses address[] The addresses to unlock.\n    /// @return True if the operation was successful.\n    function unlockInBatches(address[] _addresses) external onlyLocker returns(bool) {\n        require(_addresses.length > 0);\n        require(_addresses.length <= MAX_BATCH_SIZE);\n\n        for (uint i = 0; i < _addresses.length; i++) {\n            unlockAddress(_addresses[i]);\n        }\n        return true;\n    }\n\n    /// @dev Checks whether or not the given address is locked.\n    /// @param _address address The address to be checked.\n    /// @return Boolean indicating whether or not the address is locked.\n    function isLocked(address _address) external view returns(bool) {\n        return locked[_address];\n    }\n\n    /// @dev Transfers tokens to the specified address. It prevents transferring tokens from a locked address.\n    ///      Locked addresses can receive tokens.\n    ///      Current token sale's addresses cannot receive or send tokens until the token sale ends.\n    /// @param _to The address to transfer tokens to.\n    /// @param _value The number of tokens to be transferred.\n    function transfer(address _to, uint256 _value) public returns(bool) {\n        require(!locked[msg.sender]);\n\n        if (tokenSaleOngoing) {\n            require(tokenSaleId[msg.sender] < currentTokenSaleId);\n            require(tokenSaleId[_to] < currentTokenSaleId);\n        }\n\n        return super.transfer(_to, _value);\n    }\n\n    /// @dev Transfers tokens from one address to another. It prevents transferring tokens if the caller is locked or\n    ///      if the allowed address is locked.\n    ///      Locked addresses can receive tokens.\n    ///      Current token sale's addresses cannot receive or send tokens until the token sale ends.\n    /// @param _from address The address to transfer tokens from.\n    /// @param _to address The address to transfer tokens to.\n    /// @param _value The number of tokens to be transferred.\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n        require(!locked[msg.sender]);\n        require(!locked[_from]);\n\n        if (tokenSaleOngoing) {\n            require(tokenSaleId[msg.sender] < currentTokenSaleId);\n            require(tokenSaleId[_from] < currentTokenSaleId);\n            require(tokenSaleId[_to] < currentTokenSaleId);\n        }\n\n        return super.transferFrom(_from, _to, _value);\n    }\n}",
  "bytecode": "608060405260006007556000600960006101000a81548160ff02191690831515021790555034801561003057600080fd5b5060405160408061349d833981018060405281019080805190602001909291908051906020019092919050505033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156100da57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561011657600080fd5b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506132f4806101a96000396000f3006080604052600436106101e3576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101e8578063095ea7b31461027857806318160ddd146102dd578063199732611461030857806323b872dd1461035f5780632ba25366146103e4578063313ce5671461044f57806334a90d021461047a578063403911a6146104d557806340c10f19146105045780634a4fbeec146105695780635b40d5dd146105c45780636007c4f814610617578063661884631461064657806370a08231146106ab578063737a76981461070257806380f6ab861461075d5780638da5cb5b146107b45780638eb7ffe81461080b578063952d6c221461087657806395d89b41146108a5578063969bf35814610935578063a413627214610960578063a5c9cd821461098b578063a9059cbb146109b6578063aa736f5714610a1b578063b0759c3e14610a76578063b7eb5e0a14610ac9578063be76048814610b24578063cbf9fe5f14610b89578063cfdbf25414610be4578063d1bdd92f14610c0f578063d4430bc714610c66578063d73dd62314610c95578063d7b96d4e14610cfa578063dd62ed3e14610d51578063e0f0497d14610dc8578063e489d51014610df3578063f2fde38b14610e1e575b600080fd5b3480156101f457600080fd5b506101fd610e61565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561023d578082015181840152602081019050610222565b50505050905090810190601f16801561026a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561028457600080fd5b506102c3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e9a565b604051808215151515815260200191505060405180910390f35b3480156102e957600080fd5b506102f2610f8c565b6040518082815260200191505060405180910390f35b34801561031457600080fd5b5061031d610f96565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561036b57600080fd5b506103ca600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fbc565b604051808215151515815260200191505060405180910390f35b3480156103f057600080fd5b50610435600480360381019080803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390505050611187565b604051808215151515815260200191505060405180910390f35b34801561045b57600080fd5b506104646112ae565b6040518082815260200191505060405180910390f35b34801561048657600080fd5b506104bb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112b3565b604051808215151515815260200191505060405180910390f35b3480156104e157600080fd5b506104ea611478565b604051808215151515815260200191505060405180910390f35b34801561051057600080fd5b5061054f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611566565b604051808215151515815260200191505060405180910390f35b34801561057557600080fd5b506105aa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611845565b604051808215151515815260200191505060405180910390f35b3480156105d057600080fd5b506105fd60048036038101908080359060200190820180359060200191909192939192939050505061189b565b604051808215151515815260200191505060405180910390f35b34801561062357600080fd5b5061062c61197c565b604051808215151515815260200191505060405180910390f35b34801561065257600080fd5b50610691600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611993565b604051808215151515815260200191505060405180910390f35b3480156106b757600080fd5b506106ec600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c24565b6040518082815260200191505060405180910390f35b34801561070e57600080fd5b50610743600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c6c565b604051808215151515815260200191505060405180910390f35b34801561076957600080fd5b5061079e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611dcc565b6040518082815260200191505060405180910390f35b3480156107c057600080fd5b506107c9611e15565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561081757600080fd5b5061085c600480360381019080803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390505050611e3b565b604051808215151515815260200191505060405180910390f35b34801561088257600080fd5b5061088b611f62565b604051808215151515815260200191505060405180910390f35b3480156108b157600080fd5b506108ba61202c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108fa5780820151818401526020810190506108df565b50505050905090810190601f1680156109275780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561094157600080fd5b5061094a612065565b6040518082815260200191505060405180910390f35b34801561096c57600080fd5b5061097561206f565b6040518082815260200191505060405180910390f35b34801561099757600080fd5b506109a0612074565b6040518082815260200191505060405180910390f35b3480156109c257600080fd5b50610a01600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061207c565b604051808215151515815260200191505060405180910390f35b348015610a2757600080fd5b50610a5c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061219d565b604051808215151515815260200191505060405180910390f35b348015610a8257600080fd5b50610aaf6004803603810190808035906020019082018035906020019190919293919293905050506122fd565b604051808215151515815260200191505060405180910390f35b348015610ad557600080fd5b50610b0a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123de565b604051808215151515815260200191505060405180910390f35b348015610b3057600080fd5b50610b6f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612538565b604051808215151515815260200191505060405180910390f35b348015610b9557600080fd5b50610bca600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612853565b604051808215151515815260200191505060405180910390f35b348015610bf057600080fd5b50610bf9612873565b6040518082815260200191505060405180910390f35b348015610c1b57600080fd5b50610c50600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612879565b6040518082815260200191505060405180910390f35b348015610c7257600080fd5b50610c7b612891565b604051808215151515815260200191505060405180910390f35b348015610ca157600080fd5b50610ce0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506128a4565b604051808215151515815260200191505060405180910390f35b348015610d0657600080fd5b50610d0f612aa0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610d5d57600080fd5b50610db2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612ac6565b6040518082815260200191505060405180910390f35b348015610dd457600080fd5b50610ddd612b4d565b6040518082815260200191505060405180910390f35b348015610dff57600080fd5b50610e08612b53565b6040518082815260200191505060405180910390f35b348015610e2a57600080fd5b50610e5f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b62565b005b6040805190810160405280600581526020017f4e796e6a6100000000000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600154905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561101757600080fd5b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561107057600080fd5b600960009054906101000a900460ff161561117357600754600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015156110d457600080fd5b600754600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151561112357600080fd5b600754600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151561117257600080fd5b5b61117e848484612cba565b90509392505050565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111e657600080fd5b600960009054906101000a900460ff16151561120157600080fd5b60008686905011151561121357600080fd5b838390508686905014151561122757600080fd5b610190868690501115151561123b57600080fd5b600090505b858590508110156112a157611293868683818110151561125c57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16858584818110151561128757fe5b90506020020135611566565b508080600101915050611240565b6001915050949350505050565b601281565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561131157600080fd5b600960009054906101000a900460ff16151561132c57600080fd5b600754600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561137b57600080fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156113d457600080fd5b6001600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167fc1b5f12cea7c200ad495a43bf2d4c7ba1a753343c06c339093937849de84d91360405160405180910390a260019050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114d657600080fd5b600960009054906101000a900460ff161515156114f257600080fd5b600560075410151561150357600080fd5b6007600081548092919060010191905055506001600960006101000a81548160ff0219169083151502179055506007547f876ae0acd69a7fae570f9828df9dc478f1772f47906e089652e7d185819f9f4660405160405180910390a26001905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115c457600080fd5b600960009054906101000a900460ff1615156115df57600080fd5b6115f48260015461307490919063ffffffff16565b6001819055506012600a0a64012a05f200026001541115151561161657600080fd5b6000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156116a557600754600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600754600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415156116f457600080fd5b611745826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461307490919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118fa57600080fd5b60008484905011151561190c57600080fd5b610190848490501115151561192057600080fd5b600090505b8383905081101561197157611963848483818110151561194157fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff166123de565b508080600101915050611925565b600191505092915050565b6000600960009054906101000a900460ff16905090565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115611aa4576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b38565b611ab7838261309090919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cca57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611d0657600080fd5b8173ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f96796c61aa903b86a8d91c28b1355e94a6d8126dc339e81028ca80a0b04ac98360405160405180910390a381600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e9a57600080fd5b600960009054906101000a900460ff161515611eb557600080fd5b600086869050111515611ec757600080fd5b8383905086869050141515611edb57600080fd5b6101908686905011151515611eef57600080fd5b600090505b85859050811015611f5557611f478686838181101515611f1057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168585848181101515611f3b57fe5b90506020020135612538565b508080600101915050611ef4565b6001915050949350505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611fc057600080fd5b600960009054906101000a900460ff161515611fdb57600080fd5b6007547f3ab754a2b4b3c6b59edf2e5f7a39e63d76e0ee83c16a8f2160ec8bae241ca62260405160405180910390a26000600960006101000a81548160ff0219169083151502179055506001905090565b6040805190810160405280600381526020017f4e594e000000000000000000000000000000000000000000000000000000000081525081565b6000600754905090565b600581565b6012600a0a81565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156120d757600080fd5b600960009054906101000a900460ff161561218b57600754600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151561213b57600080fd5b600754600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151561218a57600080fd5b5b61219583836130a9565b905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121fb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561223757600080fd5b8173ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb6a14cb7d716300f94e7de6bf44958c82a682b2aec5d25919186fa610951811060405160405180910390a381600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561235c57600080fd5b60008484905011151561236e57600080fd5b610190848490501115151561238257600080fd5b600090505b838390508110156123d3576123c584848381811015156123a357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff166112b3565b508080600101915050612387565b600191505092915050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561243c57600080fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561249457600080fd5b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f0be774851955c26a1d6a32b13b020663a069006b4a3b643ff0b809d31826057260405160405180910390a260019050919050565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561259757600080fd5b600960009054906101000a900460ff1615156125b257600080fd5b60016007541415156125c357600080fd5b60009050826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156126805761265e6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548461309090919063ffffffff16565b90506126758160015461307490919063ffffffff16565b6001819055506126ef565b6126d1836000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461309090919063ffffffff16565b90506126e88160015461309090919063ffffffff16565b6001819055505b6012600a0a64012a05f200026001541115151561270b57600080fd5b826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600754600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff167f8a0e37b73a0d9c82e205d4d1a3ff3d0b57ce5f4d7bccf6bac03336dc101cb7ba846040518082815260200191505060405180910390a28373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b60066020528060005260406000206000915054906101000a900460ff1681565b61019081565b60086020528060005260406000206000915090505481565b600960009054906101000a900460ff1681565b600061293582600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461307490919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60075481565b6012600a0a64012a05f2000281565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612bbe57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612bfa57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515612cf757600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515612d4457600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515612dcf57600080fd5b612e20826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461309090919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612eb3826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461307490919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612f8482600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461309090919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000818301905082811015151561308757fe5b80905092915050565b600082821115151561309e57fe5b818303905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156130e657600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561313357600080fd5b613184826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461309090919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613217826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461307490919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050929150505600a165627a7a72305820a16f150ee19cfc21b73e901b62167a6d916a12c3c70d19abd5428a8ad92b91650029000000000000000000000000a29e6dd32dd4df7b63419a9931538cb1ecd8c4f10000000000000000000000004de026b32eade9e4450b1b82ff4114cc41686725",
  "constructorArguments": "000000000000000000000000a29e6dd32dd4df7b63419a9931538cb1ecd8c4f10000000000000000000000004de026b32eade9e4450b1b82ff4114cc41686725"
}