{
  "address": "0x9750ce7823568c9354720407e2763fd16bf0b1c6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FOMO",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-10\n*/\n\npragma solidity ^0.4.13;\n\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract FOMO is ERC20,Ownable{\n\tusing SafeMath for uint256;\n\n\t//the base info of the token\n\tstring public constant name=\"FOMO\";\n\tstring public constant symbol=\"FMC\";\n\tstring public constant version = \"1.0\";\n\tuint256 public constant decimals = 18;\n    uint256 public airdropSupply;\n    \n    address public admin;\n\n\tuint256 public MAX_SUPPLY=20000000*10**decimals;\n\n\n    struct epoch  {\n        uint256 endTime;\n        uint256 amount;\n    }\n\n\n\tmapping(address=>epoch[]) public lockEpochsMap;\n\n\n    mapping(address => uint256) balances;\n\tmapping (address => mapping (address => uint256)) allowed;\n\t\n\n\tfunction FOMO(){\n        airdropSupply=0;\n\t\ttotalSupply = MAX_SUPPLY;\n\t\tbalances[msg.sender] = MAX_SUPPLY;\n\t\tTransfer(0x0, msg.sender, MAX_SUPPLY);\n\t}\n\n    function airdrop(address [] _holders,uint256 paySize) external\n    \tonlyOwner \n\t{\n        uint256 count = _holders.length;\n        assert(paySize.mul(count) <= balanceOf(msg.sender));\n        for (uint256 i = 0; i < count; i++) {\n            transfer(_holders [i], paySize);\n\t\t\tairdropSupply = airdropSupply.add(paySize);\n        }\n    }\n\n    function addIssue(uint256 amount) external\n    {\n\t\tassert(msg.sender == owner||msg.sender == admin);\n\t\tif(msg.sender == owner){\n\t\t\tbalances[msg.sender] = balances[msg.sender].add(amount);\n\t\t\tMAX_SUPPLY=MAX_SUPPLY.add(amount);\n\t\t\tTransfer(0x0, msg.sender, amount);\n\t\t}else if(msg.sender == admin){\n\t\t\tbalances[msg.sender] = balances[msg.sender].add(amount);\n\t\t\tTransfer(0x0, msg.sender, amount);\n\t\t}\n\t}\n\n\n\tfunction () payable external\n\t{\n\t}\n\n\n\tfunction etherProceeds() external\n\t\tonlyOwner\n\n\t{\n\t\tif(!msg.sender.send(this.balance)) revert();\n\t}\n\n\n\n\tfunction lockBalance(address user, uint256 amount,uint256 endTime) external\n\t\tonlyOwner\n\t{\n\t\t epoch[] storage epochs = lockEpochsMap[user];\n\t\t epochs.push(epoch(endTime,amount));\n\t}\n\n\n  \tfunction transfer(address _to, uint256 _value) public  returns (bool)\n \t{\n\t\trequire(_to != address(0));\n\t\t//计算锁仓份额\n\t\tepoch[] epochs = lockEpochsMap[msg.sender];\n\t\tuint256 needLockBalance = 0;\n\t\tfor(uint256 i;i<epochs.length;i++)\n\t\t{\n\t\t\tif( now < epochs[i].endTime )\n\t\t\t{\n\t\t\t\tneedLockBalance=needLockBalance.add(epochs[i].amount);\n\t\t\t}\n\t\t}\n\n\t\trequire(balances[msg.sender].sub(_value)>=needLockBalance);\n\t\t// SafeMath.sub will throw if there is not enough balance.\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tTransfer(msg.sender, _to, _value);\n\t\treturn true;\n  \t}\n\n  \tfunction balanceOf(address _owner) public constant returns (uint256 balance) \n  \t{\n\t\treturn balances[_owner];\n  \t}\n\n\n  \tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) \n  \t{\n\t\trequire(_to != address(0));\n\n\n\t\tepoch[] epochs = lockEpochsMap[_from];\n\t\tuint256 needLockBalance = 0;\n\t\tfor(uint256 i;i<epochs.length;i++)\n\t\t{\n\t\t\tif( now < epochs[i].endTime )\n\t\t\t{\n\t\t\t\tneedLockBalance = needLockBalance.add(epochs[i].amount);\n\t\t\t}\n\t\t}\n\n\t\trequire(balances[_from].sub(_value)>=needLockBalance);\n\t\tuint256 _allowance = allowed[_from][msg.sender];\n\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\n\t\tTransfer(_from, _to, _value);\n\t\treturn true;\n  \t}\n\n  \tfunction approve(address _spender, uint256 _value) public returns (bool) \n  \t{\n\t\tallowed[msg.sender][_spender] = _value;\n\t\tApproval(msg.sender, _spender, _value);\n\t\treturn true;\n  \t}\n\n  \tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) \n  \t{\n\t\treturn allowed[_owner][_spender];\n  \t}\n\n    function setAdmin(address _admin) public onlyOwner{\n        admin=_admin;\n    }\n\t  \n}",
  "bytecode": "60806040526012600a0a6301312d000260045534801561001e57600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600281905550600454600081905550600454600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6004546040518082815260200191505060405180910390a3611abb806101186000396000f30060806040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461011f578063095ea7b3146101af57806318160ddd1461021457806323b872dd1461023f578063313ce567146102c457806332cb6b0c146102ef57806354fd4d501461031a5780635b89a48a146103aa578063704b6c021461041257806370a0823114610455578063801aba56146104ac5780638da5cb5b146104c357806395d89b411461051a578063a5595683146105aa578063a9059cbb14610601578063c204642c14610666578063d57c1ea2146106ab578063dd62ed3e146106d8578063f2fde38b1461074f578063f851a44014610792578063fb3ed5c7146107e9575b005b34801561012b57600080fd5b50610134610814565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610174578082015181840152602081019050610159565b50505050905090810190601f1680156101a15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101bb57600080fd5b506101fa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061084d565b604051808215151515815260200191505060405180910390f35b34801561022057600080fd5b5061022961093f565b6040518082815260200191505060405180910390f35b34801561024b57600080fd5b506102aa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610945565b604051808215151515815260200191505060405180910390f35b3480156102d057600080fd5b506102d9610d53565b6040518082815260200191505060405180910390f35b3480156102fb57600080fd5b50610304610d58565b6040518082815260200191505060405180910390f35b34801561032657600080fd5b5061032f610d5e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561036f578082015181840152602081019050610354565b50505050905090810190601f16801561039c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103b657600080fd5b506103f5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d97565b604051808381526020018281526020019250505060405180910390f35b34801561041e57600080fd5b50610453600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dd7565b005b34801561046157600080fd5b50610496600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e77565b6040518082815260200191505060405180910390f35b3480156104b857600080fd5b506104c1610ec0565b005b3480156104cf57600080fd5b506104d8610f75565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561052657600080fd5b5061052f610f9b565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561056f578082015181840152602081019050610554565b50505050905090810190601f16801561059c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105b657600080fd5b506105ff600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050610fd4565b005b34801561060d57600080fd5b5061064c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110d1565b604051808215151515815260200191505060405180910390f35b34801561067257600080fd5b506106a9600480360381019080803590602001908201803590602001919091929391929390803590602001909291905050506113ca565b005b3480156106b757600080fd5b506106d6600480360381019080803590602001909291905050506114c6565b005b3480156106e457600080fd5b50610739600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611812565b6040518082815260200191505060405180910390f35b34801561075b57600080fd5b50610790600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611899565b005b34801561079e57600080fd5b506107a76119f1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107f557600080fd5b506107fe611a17565b6040518082815260200191505060405180910390f35b6040805190810160405280600481526020017f464f4d4f0000000000000000000000000000000000000000000000000000000081525081565b600081600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b60008060008060008073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415151561098857600080fd5b600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209350600092505b8380549050821015610a435783828154811015156109e857fe5b906000526020600020906002020160000154421015610a3657610a338483815481101515610a1257fe5b90600052602060002090600202016001015484611a1d90919063ffffffff16565b92505b81806001019250506109ce565b82610a9687600660008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a3b90919063ffffffff16565b10151515610aa357600080fd5b600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610b7486600660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a3b90919063ffffffff16565b600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c0986600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a1d90919063ffffffff16565b600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c5f8682611a3b90919063ffffffff16565b600760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef886040518082815260200191505060405180910390a360019450505050509392505050565b601281565b60045481565b6040805190810160405280600381526020017f312e30000000000000000000000000000000000000000000000000000000000081525081565b600560205281600052604060002081815481101515610db257fe5b9060005260206000209060020201600091509150508060000154908060010154905082565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e3357600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f1c57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515610f7357600080fd5b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f464d43000000000000000000000000000000000000000000000000000000000081525081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561103257600080fd5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060408051908101604052808481526020018581525090806001815401808255809150509060018203906000526020600020906002020160009091929091909150600082015181600001556020820151816001015550505050505050565b600080600080600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415151561111357600080fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209250600091505b82805490508110156111ce57828181548110151561117357fe5b9060005260206000209060020201600001544210156111c1576111be838281548110151561119d57fe5b90600052602060002090600202016001015483611a1d90919063ffffffff16565b91505b8080600101915050611159565b8161122186600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a3b90919063ffffffff16565b1015151561122e57600080fd5b61128085600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a3b90919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061131585600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a1d90919063ffffffff16565b600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a36001935050505092915050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561142957600080fd5b84849050915061143833610e77565b61144b8385611a5490919063ffffffff16565b1115151561145557fe5b600090505b818110156114bf57611496858583818110151561147357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16846110d1565b506114ac83600254611a1d90919063ffffffff16565b600281905550808060010191505061145a565b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061156f5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561157757fe5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156116d25761161f81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a1d90919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061167781600454611a1d90919063ffffffff16565b6004819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a361180f565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561180e5761177a81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a1d90919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5b50565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118f557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561193157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b6000808284019050838110151515611a3157fe5b8091505092915050565b6000828211151515611a4957fe5b818303905092915050565b6000806000841415611a695760009150611a88565b8284029050828482811515611a7a57fe5b04141515611a8457fe5b8091505b50929150505600a165627a7a7230582065ed5792cd740889b0a4e3cab797bfa5c3d4146fdd1f7dd7103d39fbdbf6fda00029"
}