{
  "address": "0x2C74cB216ff1fe2B8bf389403CB7C745dbb0a750",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "nerveShares",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-05\n*/\n\npragma solidity 0.5.7;\n\n\nlibrary SafeMath \n{\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n}\n\n\n/******************************************/\n/*       nerveShares starts here          */\n/******************************************/\n\ncontract nerveShares {\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    uint256 public totalDividends;\n    uint256 internal constant MAX_UINT = 2**256 - 1;\n\n    mapping (address => uint) public balanceOf;\n    mapping (address => mapping (address => uint)) public allowance;\n    mapping (address => uint256) internal lastDividends;\n    mapping (address => bool) public tradables;\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Claim(address indexed _to, uint256 value);\n\n    using SafeMath for uint256;\n\n    constructor() public\n    {\n        decimals = 18;                              // decimals  \n        totalSupply = 1000000*10**18;               // initialSupply\n        name = \"Nerve\";                             // Set the name for display purposes\n        symbol = \"NRV\";                             // Set the symbol for display purposes\n\n        balanceOf[msg.sender] = totalSupply;\n        emit Transfer(address(0), msg.sender, totalSupply);\n    }\n\n    /**\n    * @dev Get the dividends of a user. Take prior payoffs into account.\n    * @param account The address of the user.\n    */\n    function dividendBalanceOf(address account) public view returns (uint256) \n    {\n        uint256 newDividends = totalDividends.sub(lastDividends[account]);\n        uint256 product = balanceOf[account].mul(newDividends);\n        return product.div(totalSupply);\n    }   \n\n    /**\n    * @dev Get the dividends of a user. Take prior payoffs into account.\n    * @param account The address of the user.\n    */\n    function internalDividendBalanceOf(address account, uint256 tempLastDividends) internal view returns (uint256) \n    {\n        uint256 newDividends = totalDividends.sub(tempLastDividends);\n        uint256 product = balanceOf[account].mul(newDividends);\n        return product.div(totalSupply);\n    }   \n\n    /**\n    * @dev Claim dividends. Restrict dividends to new income.\n    */\n    function claimDividend() external \n    {\n        uint256 tempLastDividends = lastDividends[msg.sender];\n        lastDividends[msg.sender] = totalDividends;\n        uint256 owing = internalDividendBalanceOf(msg.sender, tempLastDividends);\n\n        require(owing > 0, \"No dividends to claim.\");\n\n        msg.sender.transfer(owing);\n        \n        emit Claim(msg.sender, owing);\n    }\n\n    /**\n    * @dev Claim dividends internally. Get called on addresses opened for trade.\n    */\n    function internalClaimDividend(address payable from) internal \n    {\n        uint256 tempLastDividends = lastDividends[from];\n        lastDividends[from] = totalDividends;\n        uint256 owing = internalDividendBalanceOf(from, tempLastDividends);\n\n        if (owing > 0) {\n\n        from.transfer(owing);\n\n        emit Claim(from, owing);\n        }\n    }\n\n    /**\n    * @dev Open or close sending address for trade.\n    * @param allow True -> open\n    */\n    function allowTrade(bool allow) external\n    {\n        tradables[msg.sender] = allow;\n    }\n\n    /**\n    * @dev Transfer tokens\n    * @param to The address of the recipient\n    * @param value the amount to send\n    */\n    function transfer(address payable to, uint256 value) external returns(bool success)\n    {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n    * @dev Transfer tokens. Make sure that both participants have no open dividends left.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address payable from, address payable to, uint256 value) internal\n    {   \n        require(value > 0, \"Transferred value has to be grater than 0.\");\n        require(to != address(0), \"0x00 address not allowed.\");\n        require(value <= balanceOf[from], \"Not enough funds on sender address.\");\n        require(balanceOf[to] + value >= balanceOf[to], \"Overflow protection.\");\n \n        uint256 fromOwing = dividendBalanceOf(from);\n        uint256 toOwing = dividendBalanceOf(to);\n\n        if (tradables[from] == true && (tradables[to] == true || toOwing == 0)) \n        {\n\n            internalClaimDividend(from);\n            internalClaimDividend(to);\n        } else {\n            \n            require(fromOwing == 0 && toOwing == 0, \"Unclaimed dividends on sender and/or receiver\");\n        }\n        \n        balanceOf[from] -= value;\n        balanceOf[to] += value;\n \n        lastDividends[to] = lastDividends[from];    // In case of new account, set lastDividends of receiver to totalDividends.\n \n        emit Transfer(from, to, value);\n    }\n\n    /**\n    * @dev ERC20 transferFrom, modified such that an allowance of MAX_UINT represents an unlimited allowance.\n    * @param from Address to transfer from.\n    * @param to Address to transfer to.\n    * @param value Amount to transfer.\n    * @return Success of transfer.\n    */\n    function transferFrom(address payable from, address payable to, uint value) external returns (bool success)\n    {\n        uint256 allowanceTemp = allowance[from][msg.sender];\n        \n        require(allowanceTemp >= value, \"Funds not approved.\"); \n        require(balanceOf[from] >= value, \"Not enough funds on sender address.\");\n        require(balanceOf[to] + value >= balanceOf[to], \"Overflow protection.\");\n\n        if (allowanceTemp < MAX_UINT) \n        {\n            allowance[from][msg.sender] -= value;\n        }\n        \n        _transfer(from, to, value);\n\n        return true;\n    }\n\n    /**\n    * @dev `msg.sender` approves `addr` to spend `value` tokens.\n    * @param spender The address of the account able to transfer the tokens.\n    * @param value The amount of wei to be approved for transfer.\n    */\n    function approve(address spender, uint value) external returns (bool) \n    {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n    * @dev Set unlimited allowance for other address\n    * @param target The address authorized to spend\n    */   \n    function giveAccess(address target) external\n    {\n        require(target != address(0), \"0x00 address not allowed.\");\n        allowance[msg.sender][target] = MAX_UINT;\n        emit Approval(msg.sender, target, MAX_UINT);\n    }\n\n    /**\n    * @dev Set allowance for other address to 0\n    * @param target The address authorized to spend\n    */   \n    function revokeAccess(address target) external\n    {\n        require(target != address(0), \"0x00 address not allowed.\");\n        allowance[msg.sender][target] = 0;\n    }\n    \n    /**\n    * @dev Get contract ETH amount. \n    */ \n    function contractBalance() external view returns(uint256 amount)\n    {\n        return (address(this).balance);\n    }\n    \n    /**\n    * @dev Receive ETH from CONTRACT and increase the total historic amount of dividend eligible earnings.\n    */\n    function receiveETH() external payable\n    {\n        totalDividends = totalDividends.add(msg.value);\n    }\n    \n    /**\n    * @dev Receive ETH and increase the total historic amount of dividend eligible earnings.\n    */\n    function () external payable \n    {\n        totalDividends = totalDividends.add(msg.value);\n    }\n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receiveETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradables\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"revokeAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"allowTrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"giveAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimDividend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b506012600260006101000a81548160ff021916908360ff16021790555069d3c21bcecceda10000006003819055506040518060400160405280600581526020017f4e65727665000000000000000000000000000000000000000000000000000000815250600090805190602001906200008c9291906200018f565b506040518060400160405280600381526020017f4e5256000000000000000000000000000000000000000000000000000000000081525060019080519060200190620000da9291906200018f565b50600354600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6003546040518082815260200191505060405180910390a36200023e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001d257805160ff191683800117855562000203565b8280016001018555821562000203579182015b8281111562000202578251825591602001919060010190620001e5565b5b50905062000212919062000216565b5090565b6200023b91905b80821115620002375760008160009055506001016200021d565b5090565b90565b611bb2806200024e6000396000f3fe6080604052600436106101095760003560e01c80638b7afe2e11610095578063c8bb639b11610064578063c8bb639b1461059a578063cf12e870146105d7578063dd62ed3e14610628578063e083d4c8146106ad578063f0fc6bca1461071257610109565b80638b7afe2e1461044157806395d89b411461046c578063997664d7146104fc578063a9059cbb1461052757610109565b8063313ce567116100dc578063313ce567146102e75780633ecfd51e1461031857806356b3dd7a1461032257806370a082311461038b57806385e68531146103f057610109565b806306fdde0314610126578063095ea7b3146101b657806318160ddd1461022957806323b872dd14610254575b61011e3460045461072990919063ffffffff16565b600481905550005b34801561013257600080fd5b5061013b610748565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017b578082015181840152602081019050610160565b50505050905090810190601f1680156101a85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101c257600080fd5b5061020f600480360360408110156101d957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107e6565b604051808215151515815260200191505060405180910390f35b34801561023557600080fd5b5061023e6108d8565b6040518082815260200191505060405180910390f35b34801561026057600080fd5b506102cd6004803603606081101561027757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108de565b604051808215151515815260200191505060405180910390f35b3480156102f357600080fd5b506102fc610c2e565b604051808260ff1660ff16815260200191505060405180910390f35b610320610c41565b005b34801561032e57600080fd5b506103716004803603602081101561034557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c5e565b604051808215151515815260200191505060405180910390f35b34801561039757600080fd5b506103da600480360360208110156103ae57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c7e565b6040518082815260200191505060405180910390f35b3480156103fc57600080fd5b5061043f6004803603602081101561041357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c96565b005b34801561044d57600080fd5b50610456610dbe565b6040518082815260200191505060405180910390f35b34801561047857600080fd5b50610481610ddd565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104c15780820151818401526020810190506104a6565b50505050905090810190601f1680156104ee5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561050857600080fd5b50610511610e7b565b6040518082815260200191505060405180910390f35b34801561053357600080fd5b506105806004803603604081101561054a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e81565b604051808215151515815260200191505060405180910390f35b3480156105a657600080fd5b506105d5600480360360208110156105bd57600080fd5b81019080803515159060200190929190505050610e98565b005b3480156105e357600080fd5b50610626600480360360208110156105fa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ef2565b005b34801561063457600080fd5b506106976004803603604081101561064b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110be565b6040518082815260200191505060405180910390f35b3480156106b957600080fd5b506106fc600480360360208110156106d057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110e3565b6040518082815260200191505060405180910390f35b34801561071e57600080fd5b506107276111b0565b005b60008082840190508381101561073e57600080fd5b8091505092915050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107de5780601f106107b3576101008083540402835291602001916107de565b820191906000526020600020905b8154815290600101906020018083116107c157829003601f168201915b505050505081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60035481565b600080600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156109d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f46756e6473206e6f7420617070726f7665642e0000000000000000000000000081525060200191505060405180910390fd5b82600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610a6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180611b3a6023913960400191505060405180910390fd5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015610b64576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4f766572666c6f772070726f74656374696f6e2e00000000000000000000000081525060200191505060405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015610c175782600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b610c22858585611357565b60019150509392505050565b600260009054906101000a900460ff1681565b610c563460045461072990919063ffffffff16565b600481905550565b60086020528060005260406000206000915054906101000a900460ff1681565b60056020528060005260406000206000915090505481565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d39576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f307830302061646472657373206e6f7420616c6c6f7765642e0000000000000081525060200191505060405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e735780601f10610e4857610100808354040283529160200191610e73565b820191906000526020600020905b815481529060010190602001808311610e5657829003601f168201915b505050505081565b60045481565b6000610e8e338484611357565b6001905092915050565b80600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f95576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f307830302061646472657373206e6f7420616c6c6f7765642e0000000000000081525060200191505060405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9257fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518082815260200191505060405180910390a350565b6006602052816000526040600020602052806000526040600020600091509150505481565b60008061113a600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546004546118c190919063ffffffff16565b9050600061119082600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118e190919063ffffffff16565b90506111a76003548261191b90919063ffffffff16565b92505050919050565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600454600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006112463383611941565b9050600081116112be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4e6f206469766964656e647320746f20636c61696d2e0000000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611304573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4826040518082815260200191505060405180910390a25050565b600081116113b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180611b5d602a913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611453576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f307830302061646472657373206e6f7420616c6c6f7765642e0000000000000081525060200191505060405180910390fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111156114eb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180611b3a6023913960400191505060405180910390fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110156115e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4f766572666c6f772070726f74656374696f6e2e00000000000000000000000081525060200191505060405180910390fd5b60006115ec846110e3565b905060006115f9846110e3565b905060011515600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151480156116b6575060011515600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514806116b55750600081145b5b156116d2576116c4856119d0565b6116cd846119d0565b611738565b6000821480156116e25750600081145b611737576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d815260200180611b0d602d913960400191505060405180910390fd5b5b82600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35050505050565b6000828211156118d057600080fd5b600082840390508091505092915050565b6000808314156118f45760009050611915565b600082840290508284828161190557fe5b041461191057600080fd5b809150505b92915050565b600080821161192957600080fd5b600082848161193457fe5b0490508091505092915050565b600080611959836004546118c190919063ffffffff16565b905060006119af82600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118e190919063ffffffff16565b90506119c66003548261191b90919063ffffffff16565b9250505092915050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600454600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000611a668383611941565b90506000811115611b07578273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611ab7573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4826040518082815260200191505060405180910390a25b50505056fe556e636c61696d6564206469766964656e6473206f6e2073656e64657220616e642f6f722072656365697665724e6f7420656e6f7567682066756e6473206f6e2073656e64657220616464726573732e5472616e736665727265642076616c75652068617320746f20626520677261746572207468616e20302ea165627a7a723058205446c729e618ddcd9d6826a19a2286ee6e57cb81be92bffc24f9aa20e4a059310029"
}