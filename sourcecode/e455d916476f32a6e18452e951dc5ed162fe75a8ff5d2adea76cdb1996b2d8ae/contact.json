{
  "address": "0x790aac02412e8665604bdae39b00be012f4acc12",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MintHelper",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-12\n*/\n\npragma solidity ^0.4.18;\n\n\n\nlibrary SafeMath {\n\n    function add(uint a, uint b) internal pure returns (uint c) {\n\n        c = a + b;\n\n        require(c >= a);\n\n    }\n\n    function sub(uint a, uint b) internal pure returns (uint c) {\n\n        require(b <= a);\n\n        c = a - b;\n\n    }\n\n    function mul(uint a, uint b) internal pure returns (uint c) {\n\n        c = a * b;\n\n        require(a == 0 || c / a == b);\n\n    }\n\n    function div(uint a, uint b) internal pure returns (uint c) {\n\n        require(b > 0);\n\n        c = a / b;\n\n    }\n\n}\n\ncontract Ownable {\n\n\n\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    if (msg.sender != owner) {\n      throw;\n    }\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract ERC918Interface {\n  function totalSupply() public constant returns (uint);\n  function getMiningDifficulty() public constant returns (uint);\n  function getMiningTarget() public constant returns (uint);\n  function getMiningReward() public constant returns (uint);\n  function balanceOf(address tokenOwner) public constant returns (uint balance);\n  function merge() public returns (bool success);\n  uint public lastRewardAmount;\n\n  function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success);\n\n  event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n\n}\n\n/*\nThe owner (or anyone) will deposit tokens in here\nThe owner calls the multisend method to send out payments\n*/\ncontract MintHelper is Ownable {\n\n  using SafeMath for uint;\n\n    address public mintableToken;\n\n    address public payoutsWallet;\n    address public minterWallet;\n\n    uint public minterFeePercent;\n\n\n    function MintHelper(address mToken, address pWallet, address mWallet)\n    {\n      mintableToken = mToken;\n      payoutsWallet = pWallet;\n      minterWallet = mWallet;\n      minterFeePercent = 5;\n    }\n\n    function setMintableToken(address mToken)\n    public onlyOwner\n    returns (bool)\n    {\n      mintableToken = mToken;\n      return true;\n    }\n\n    function setPayoutsWallet(address pWallet)\n    public onlyOwner\n    returns (bool)\n    {\n      payoutsWallet = pWallet;\n      return true;\n    }\n\n    function setMinterWallet(address mWallet)\n    public onlyOwner\n    returns (bool)\n    {\n      minterWallet = mWallet;\n      return true;\n    }\n\n    function setMinterFeePercent(uint fee)\n    public onlyOwner\n    returns (bool)\n    {\n      require(fee >= 0 && fee <= 100);\n      minterFeePercent = fee;\n      return true;\n    }\n\n\n\n    function proxyMint(uint256 nonce, bytes32 challenge_digest )\n    public onlyOwner\n    returns (bool)\n    {\n      //identify the rewards that will be won and how to split them up\n      uint totalReward = ERC918Interface(mintableToken).getMiningReward();\n\n      uint minterReward = totalReward.mul(minterFeePercent).div(100);\n      uint payoutReward = totalReward.sub(minterReward);\n\n      // get paid in new tokens\n      require(ERC918Interface(mintableToken).mint(nonce, challenge_digest));\n\n      //transfer the tokens to the correct wallets\n      require(ERC20Interface(mintableToken).transfer(minterWallet, minterReward));\n      require(ERC20Interface(mintableToken).transfer(payoutsWallet, payoutReward));\n\n      return true;\n\n    }\n\n\n    function proxyMergeMint(uint256 nonce, bytes32 challenge_digest, address[] tokens)\n    public onlyOwner\n    returns (bool)\n    {\n      //identify the rewards that will be won and how to split them up\n      uint totalReward = ERC918Interface(mintableToken).getMiningReward();\n\n      uint minterReward = totalReward.mul(minterFeePercent).div(100);\n      uint payoutReward = totalReward.sub(minterReward);\n\n      // get paid in new tokens\n      require(ERC918Interface(mintableToken).mint(nonce, challenge_digest));\n      //transfer the tokens to the correct wallets\n      require(ERC20Interface(mintableToken).transfer(minterWallet, minterReward));\n      require(ERC20Interface(mintableToken).transfer(payoutsWallet, payoutReward));\n\n      uint256 i = 0;\n      while (i < tokens.length) {\n         address mergedToken = tokens[i];\n         if(ERC918Interface(mergedToken).merge())\n         {\n            uint merge_totalReward = ERC918Interface(mergedToken).lastRewardAmount();\n            uint merge_minterReward = merge_totalReward.mul(minterFeePercent).div(100);\n            uint merge_payoutReward = merge_totalReward.sub(merge_minterReward);\n\n            // get paid in new tokens\n            //transfer the tokens to the correct wallets\n            require(ERC20Interface(mergedToken).transfer(minterWallet, merge_minterReward));\n            require(ERC20Interface(mergedToken).transfer(payoutsWallet, merge_payoutReward));\n         }\n         i+=1;\n      }\n\n\n      return true;\n\n    }\n\n\n\n    //withdraw any eth inside\n    function withdraw()\n    public onlyOwner\n    {\n        msg.sender.transfer(this.balance);\n    }\n\n    //send tokens out\n    function send(address _tokenAddr, address dest, uint value)\n    public onlyOwner\n    returns (bool)\n    {\n     return ERC20Interface(_tokenAddr).transfer(dest, value);\n    }\n\n \n\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mToken\",\"type\":\"address\"}],\"name\":\"setMintableToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"proxyMergeMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mWallet\",\"type\":\"address\"}],\"name\":\"setMinterWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minterWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintableToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minterFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setMinterFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"}],\"name\":\"proxyMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pWallet\",\"type\":\"address\"}],\"name\":\"setPayoutsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"mToken\",\"type\":\"address\"},{\"name\":\"pWallet\",\"type\":\"address\"},{\"name\":\"mWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]",
  "bytecode": "608060405234801561001057600080fd5b50604051606080610e438339810160409081528151602083015191909201516000805433600160a060020a0319918216178255600180548216600160a060020a039687161790556002805482169486169490941790935560038054909316939091169290921790556005600455610db690819061008d90396000f3006080604052600436106100b65763ffffffff60e060020a6000350416630779afe681146100bb5780632516a18f146100f95780633ccfd60b1461011a578063593b45301461013157806385b6824f1461018f5780638da5cb5b146101b05780638f1a422c146101e157806395d38ea8146101f657806398be7c621461020b578063a5c102a214610232578063b1bb4d351461024a578063b61334b114610265578063d3eb11d614610286578063f2fde38b1461029b575b600080fd5b3480156100c757600080fd5b506100e5600160a060020a03600435811690602435166044356102bc565b604080519115158252519081900360200190f35b34801561010557600080fd5b506100e5600160a060020a036004351661036b565b34801561012657600080fd5b5061012f6103b3565b005b34801561013d57600080fd5b5060408051602060046044358181013583810280860185019096528085526100e59583359560248035963696956064959394920192918291850190849080828437509497506103fa9650505050505050565b34801561019b57600080fd5b506100e5600160a060020a036004351661091b565b3480156101bc57600080fd5b506101c5610965565b60408051600160a060020a039092168252519081900360200190f35b3480156101ed57600080fd5b506101c5610974565b34801561020257600080fd5b506101c5610983565b34801561021757600080fd5b50610220610992565b60408051918252519081900360200190f35b34801561023e57600080fd5b506100e5600435610998565b34801561025657600080fd5b506100e56004356024356109d6565b34801561027157600080fd5b506100e5600160a060020a0360043516610c7d565b34801561029257600080fd5b506101c5610cc7565b3480156102a757600080fd5b5061012f600160a060020a0360043516610cd6565b60008054600160a060020a031633146102d457600080fd5b83600160a060020a031663a9059cbb84846040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561033757600080fd5b505af115801561034b573d6000803e3d6000fd5b505050506040513d602081101561036157600080fd5b5051949350505050565b60008054600160a060020a0316331461038357600080fd5b5060018054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff19909116178155919050565b600054600160a060020a031633146103ca57600080fd5b6040513390303180156108fc02916000818181858888f193505050501580156103f7573d6000803e3d6000fd5b50565b6000805481908190819081908190819081908190600160a060020a0316331461042257600080fd5b600160009054906101000a9004600160a060020a0316600160a060020a031663490203a76040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561047557600080fd5b505af1158015610489573d6000803e3d6000fd5b505050506040513d602081101561049f57600080fd5b50516004549098506104cb906064906104bf908b9063ffffffff610d2916565b9063ffffffff610d5416565b96506104dd888863ffffffff610d7516565b9550600160009054906101000a9004600160a060020a0316600160a060020a0316631801fbe58d8d6040518363ffffffff1660e060020a02815260040180838152602001826000191660001916815260200192505050602060405180830381600087803b15801561054d57600080fd5b505af1158015610561573d6000803e3d6000fd5b505050506040513d602081101561057757600080fd5b5051151561058457600080fd5b6001546003546040805160e060020a63a9059cbb028152600160a060020a039283166004820152602481018b90529051919092169163a9059cbb9160448083019260209291908290030181600087803b1580156105e057600080fd5b505af11580156105f4573d6000803e3d6000fd5b505050506040513d602081101561060a57600080fd5b5051151561061757600080fd5b6001546002546040805160e060020a63a9059cbb028152600160a060020a039283166004820152602481018a90529051919092169163a9059cbb9160448083019260209291908290030181600087803b15801561067357600080fd5b505af1158015610687573d6000803e3d6000fd5b505050506040513d602081101561069d57600080fd5b505115156106aa57600080fd5b600094505b89518510156109095789858151811015156106c657fe5b90602001906020020151935083600160a060020a0316630b65108b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561071057600080fd5b505af1158015610724573d6000803e3d6000fd5b505050506040513d602081101561073a57600080fd5b5051156108fe5783600160a060020a031663bafedcaa6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561077f57600080fd5b505af1158015610793573d6000803e3d6000fd5b505050506040513d60208110156107a957600080fd5b50516004549093506107c9906064906104bf90869063ffffffff610d2916565b91506107db838363ffffffff610d7516565b6003546040805160e060020a63a9059cbb028152600160a060020a0392831660048201526024810186905290519293509086169163a9059cbb916044808201926020929091908290030181600087803b15801561083757600080fd5b505af115801561084b573d6000803e3d6000fd5b505050506040513d602081101561086157600080fd5b5051151561086e57600080fd5b6002546040805160e060020a63a9059cbb028152600160a060020a0392831660048201526024810184905290519186169163a9059cbb916044808201926020929091908290030181600087803b1580156108c757600080fd5b505af11580156108db573d6000803e3d6000fd5b505050506040513d60208110156108f157600080fd5b505115156108fe57600080fd5b6001850194506106af565b5060019b9a5050505050505050505050565b60008054600160a060020a0316331461093357600080fd5b5060038054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b600054600160a060020a031681565b600354600160a060020a031681565b600154600160a060020a031681565b60045481565b60008054600160a060020a031633146109b057600080fd5b600082101580156109c2575060648211155b15156109cd57600080fd5b50600455600190565b60008054819081908190600160a060020a031633146109f457600080fd5b600160009054906101000a9004600160a060020a0316600160a060020a031663490203a76040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610a4757600080fd5b505af1158015610a5b573d6000803e3d6000fd5b505050506040513d6020811015610a7157600080fd5b5051600454909350610a91906064906104bf90869063ffffffff610d2916565b9150610aa3838363ffffffff610d7516565b600154604080517f1801fbe5000000000000000000000000000000000000000000000000000000008152600481018a9052602481018990529051929350600160a060020a0390911691631801fbe5916044808201926020929091908290030181600087803b158015610b1457600080fd5b505af1158015610b28573d6000803e3d6000fd5b505050506040513d6020811015610b3e57600080fd5b50511515610b4b57600080fd5b6001546003546040805160e060020a63a9059cbb028152600160a060020a039283166004820152602481018690529051919092169163a9059cbb9160448083019260209291908290030181600087803b158015610ba757600080fd5b505af1158015610bbb573d6000803e3d6000fd5b505050506040513d6020811015610bd157600080fd5b50511515610bde57600080fd5b6001546002546040805160e060020a63a9059cbb028152600160a060020a039283166004820152602481018590529051919092169163a9059cbb9160448083019260209291908290030181600087803b158015610c3a57600080fd5b505af1158015610c4e573d6000803e3d6000fd5b505050506040513d6020811015610c6457600080fd5b50511515610c7157600080fd5b50600195945050505050565b60008054600160a060020a03163314610c9557600080fd5b5060028054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b600254600160a060020a031681565b600054600160a060020a03163314610ced57600080fd5b600160a060020a038116156103f75760008054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff1990911617905550565b818102821580610d435750818382811515610d4057fe5b04145b1515610d4e57600080fd5b92915050565b6000808211610d6257600080fd5b8183811515610d6d57fe5b049392505050565b600082821115610d8457600080fd5b509003905600a165627a7a723058204f7b763df8be8e10fb09aefc9b723c43dcc02ef6047f50c11badb9d000c751ef00290000000000000000000000000f00f1696218eaefa2d2330df3d6d1f94813b38f000000000000000000000000f3f79b9df8ad476f8a70210eb1693be335cd403c000000000000000000000000f0bda1242b21d22b67602c1c0ceaa33cfcd00f6a",
  "constructorArguments": "0000000000000000000000000f00f1696218eaefa2d2330df3d6d1f94813b38f000000000000000000000000f3f79b9df8ad476f8a70210eb1693be335cd403c000000000000000000000000f0bda1242b21d22b67602c1c0ceaa33cfcd00f6a"
}