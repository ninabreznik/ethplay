{
  "address": "0x8e4bf12e472739ab62eb404c758423ca499cf94d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HELLCOIN",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-14\n*/\n\npragma solidity ^0.4.13;\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\nlibrary SaferMath {\n  function mulX(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function divX(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract BasicToken is ERC20Basic {\n  using SaferMath for uint256;\n  mapping(address => uint256) balances;\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    uint256 _allowance = allowed[_from][msg.sender];\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n}\n\ncontract HELLCOIN is StandardToken, Ownable {\n\n  string public constant name = \"HELL COIN\";\n  string public constant symbol = \"HELL\";\n  uint8 public constant decimals = 8;\n\n  uint256 public constant SUPPLY_CAP = 10000000000 * (10 ** uint256(decimals));\n\n  address NULL_ADDRESS = address(0);\n\n\n  event NoteChanged(string newNote);\n  string public note = \"Welcome to Hell\";\n  function setNote(string note_) public onlyOwner {\n      note = note_;\n      NoteChanged(note);\n  }\n\n  \n  event PerformingDrop(uint count);\n  function drop(address[] addresses, uint256 amount) public onlyOwner {\n    uint256 amt = amount * 10**8;\n    require(amt > 0);\n    require(amt <= SUPPLY_CAP);\n    PerformingDrop(addresses.length);\n    \n    assert(addresses.length <= 1000);\n    assert(balances[owner] >= amt * addresses.length);\n    for (uint i = 0; i < addresses.length; i++) {\n      address recipient = addresses[i];\n      if(recipient != NULL_ADDRESS) {\n        balances[owner] -= amt;\n        balances[recipient] += amt;\n        Transfer(owner, recipient, amt);\n      }\n    }\n  }\n\n  function HELLCOIN() public {\n    totalSupply = SUPPLY_CAP;\n    balances[msg.sender] = SUPPLY_CAP;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUPPLY_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"note\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"note_\",\"type\":\"string\"}],\"name\":\"setNote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"drop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newNote\",\"type\":\"string\"}],\"name\":\"NoteChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"PerformingDrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "6060604090815260048054600160a060020a03191690558051908101604052600f81527f57656c636f6d6520746f2048656c6c00000000000000000000000000000000006020820152600590805161005b9291602001906100a6565b50341561006757600080fd5b60038054600160a060020a03191633600160a060020a0316908117909155670de0b6b3a764000060008181559182526001602052604090912055610141565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e757805160ff1916838001178555610114565b82800160010185558215610114579182015b828111156101145782518255916020019190600101906100f9565b50610120929150610124565b5090565b61013e91905b80821115610120576000815560010161012a565b90565b610d5d806101506000396000f3006060604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f5780630cfccc83146101b557806318160ddd146101da57806323b872dd146101ed57806326d111f5146102155780632d7b299d14610228578063313ce5671461027b5780633974874b146102a457806366188463146102f557806370a08231146103175780638da5cb5b1461033657806395d89b4114610365578063a9059cbb14610378578063d73dd6231461039a578063dd62ed3e146103bc578063f2fde38b146103e1575b600080fd5b341561010057600080fd5b610108610400565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561014457808201518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018a57600080fd5b6101a1600160a060020a0360043516602435610437565b604051901515815260200160405180910390f35b34156101c057600080fd5b6101c86104a3565b60405190815260200160405180910390f35b34156101e557600080fd5b6101c86104af565b34156101f857600080fd5b6101a1600160a060020a03600435811690602435166044356104b5565b341561022057600080fd5b6101086105df565b341561023357600080fd5b61027960046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061067d95505050505050565b005b341561028657600080fd5b61028e610759565b60405160ff909116815260200160405180910390f35b34156102af57600080fd5b6102796004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650509335935061075e92505050565b341561030057600080fd5b6101a1600160a060020a03600435166024356108d3565b341561032257600080fd5b6101c8600160a060020a03600435166109cd565b341561034157600080fd5b6103496109e8565b604051600160a060020a03909116815260200160405180910390f35b341561037057600080fd5b6101086109f7565b341561038357600080fd5b6101a1600160a060020a0360043516602435610a2e565b34156103a557600080fd5b6101a1600160a060020a0360043516602435610b04565b34156103c757600080fd5b6101c8600160a060020a0360043581169060243516610ba8565b34156103ec57600080fd5b610279600160a060020a0360043516610bd3565b60408051908101604052600981527f48454c4c20434f494e0000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b670de0b6b3a764000081565b60005481565b600080600160a060020a03841615156104cd57600080fd5b50600160a060020a03808516600081815260026020908152604080832033909516835293815283822054928252600190529190912054610513908463ffffffff610c6e16565b600160a060020a038087166000908152600160205260408082209390935590861681522054610548908463ffffffff610c8016565b600160a060020a038516600090815260016020526040902055610571818463ffffffff610c6e16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106755780601f1061064a57610100808354040283529160200191610675565b820191906000526020600020905b81548152906001019060200180831161065857829003601f168201915b505050505081565b60035433600160a060020a0390811691161461069857600080fd5b60058180516106ab929160200190610c96565b507f29928852ccc0f94f50f6bbf315a9b4e2d2ded4c4f5de08857997daf086b754366005604051602080825282546002600019610100600184161502019091160490820181905281906040820190849080156107485780601f1061071d57610100808354040283529160200191610748565b820191906000526020600020905b81548152906001019060200180831161072b57829003601f168201915b50509250505060405180910390a150565b600881565b6003546000908190819033600160a060020a0390811691161461078057600080fd5b6305f5e100840292506000831161079657600080fd5b670de0b6b3a76400008311156107ab57600080fd5b7fd0707c61df60f834131065c6e5663fcae19010cdcd4f80af656fa5216107502d855160405190815260200160405180910390a16103e8855111156107ec57fe5b8451600354600160a060020a031660009081526001602052604090205490840290101561081557fe5b600091505b84518210156108cc5784828151811061082f57fe5b90602001906020020151600454909150600160a060020a038083169116146108c15760038054600160a060020a039081166000908152600160205260408082208054889003905584831680835291819020805488019055925490929116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a35b60019091019061081a565b5050505050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561093057600160a060020a033381166000908152600260209081526040808320938816835292905290812055610967565b610940818463ffffffff610c6e16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b600354600160a060020a031681565b60408051908101604052600481527f48454c4c00000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a0383161515610a4557600080fd5b600160a060020a033316600090815260016020526040902054610a6e908363ffffffff610c6e16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610aa3908363ffffffff610c8016565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610b3c908363ffffffff610c8016565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610bee57600080fd5b600160a060020a0381161515610c0357600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610c7a57fe5b50900390565b600082820183811015610c8f57fe5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610cd757805160ff1916838001178555610d04565b82800160010185558215610d04579182015b82811115610d04578251825591602001919060010190610ce9565b50610d10929150610d14565b5090565b610d2e91905b80821115610d105760008155600101610d1a565b905600a165627a7a723058204698ad6d69bcf720d1bc043b12ec95551a5326bfc676363665ff4710f299006a0029"
}