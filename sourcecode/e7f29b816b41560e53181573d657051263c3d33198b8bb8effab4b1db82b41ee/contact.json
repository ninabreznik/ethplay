{
  "address": "0x6f539a9456a5bcb6334a1a41207c3788f5825207",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Ohni",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-10\n*/\n\npragma solidity ^ 0.4.2;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract owned {\n\taddress public owner;\n\n\tfunction owned() public {\n\t\towner = msg.sender;\n\t}\n\n\tmodifier onlyOwner {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n\tfunction transferOwnership(address newAdmin) onlyOwner public {\n\t\towner = newAdmin;\n\t}\n}\n\ncontract tokenRecipient {\n\tfunction receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n}\n\ncontract token {\n\t// Public variables of the token\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals;\n\tuint256 public totalSupply;\n\n\t// This creates an array with all balances\n\tmapping(address => uint256) public balanceOf;\n\tmapping(address => mapping(address => uint256)) public allowance;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This notifies clients about the amount burnt\n\tevent Burn(address indexed from, uint256 value);\n\n\tfunction token(uint256 initialSupply, string tokenName,\tuint8 decimalCount, string tokenSymbol) public {\n\t    decimals = decimalCount;\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals); // Update total supply with the decimal amount\n\t\tbalanceOf[msg.sender] = totalSupply; // Give the creator all initial tokens\n\t\tname = tokenName; // Set the name for display purposes\n\t\tsymbol = tokenSymbol; // Set the symbol for display purposes\n\t}\n\n\t//Transfer tokens\n\tfunction transfer(address _to, uint256 _value) {\n\t\tif (balanceOf[msg.sender] < _value) throw; // Check if the sender has enough\n\t\tif (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n\t\tbalanceOf[msg.sender] -= _value; // Subtract from the sender\n\t\tbalanceOf[_to] += _value; // Add the same to the recipient\n\t\tTransfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\n\t}\n\n\t//A contract attempts to get tokens\n\tfunction transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\n\t\tif (balanceOf[_from] < _value) throw; // Check if the sender has enough\n\t\tif (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n\t\tif (_value > allowance[_from][msg.sender]) throw; // Check allowance\n\t\tbalanceOf[_from] -= _value; // Subtract from the sender\n\t\tbalanceOf[_to] += _value; // Add the same to the recipient\n\t\tallowance[_from][msg.sender] -= _value;\n\t\tTransfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t//Set allowance for another address\n\tfunction approve(address _spender, uint256 _value) public\n\treturns(bool success) {\n\t\tallowance[msg.sender][_spender] = _value;\n\t\treturn true;\n\t}\n\n\t//Set allowance for another address and call a function\n\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns(bool success) {\n\t\ttokenRecipient spender = tokenRecipient(_spender);\n\t\tif (approve(_spender, _value)) {\n\t\t\tspender.receiveApproval(msg.sender, _value, this, _extraData);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t//Destroy tokens\n\tfunction burn(uint256 _value) public returns(bool success) {\n\t\trequire(balanceOf[msg.sender] >= _value); // Check if the sender has enough\n\t\tbalanceOf[msg.sender] -= _value; // Subtract from the sender\n\t\ttotalSupply -= _value; // Updates totalSupply\n\t\tBurn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\t//Destroy tokens from another account\n\tfunction burnFrom(address _from, uint256 _value) public returns(bool success) {\n\t\trequire(balanceOf[_from] >= _value); // Check if the targeted balance is enough\n\t\trequire(_value <= allowance[_from][msg.sender]); // Check allowance\n\t\tbalanceOf[_from] -= _value; // Subtract from the targeted balance\n\t\tallowance[_from][msg.sender] -= _value; // Subtract from the sender's allowance\n\t\ttotalSupply -= _value; // Update totalSupply\n\t\tBurn(_from, _value);\n\t\treturn true;\n\t}\n}\n\ncontract OldToken {\n  function totalSupply() constant returns (uint256 supply) {}\n  function balanceOf(address _owner) constant returns (uint256 balance) {}\n  function transfer(address _to, uint256 _value) returns (bool success) {}\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n  function approve(address _spender, uint256 _value) returns (bool success) {}\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n  uint public decimals;\n  string public name;\n}\n\ncontract Ohni is owned, token {\n\tOldToken ohniOld = OldToken(0x7f2176ceb16dcb648dc924eff617c3dc2befd30d); // The old Ohni token\n    using SafeMath for uint256; // We use safemath to do basic math operation (+,-,*,/)\n\tuint256 public sellPrice;\n\tuint256 public buyPrice;\n\tbool public deprecated;\n\taddress public currentVersion;\n\tmapping(address => bool) public frozenAccount;\n\n\t/* This generates a public event on the blockchain that will notify clients */\n\tevent FrozenFunds(address target, bool frozen);\n\tevent ChangedTokens(address changedTarget, uint256 amountToChanged);\n\t/* Initializes contract with initial supply tokens to the creator of the contract */\n\tfunction Ohni(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol) token(initialSupply, tokenName, decimalUnits, tokenSymbol) {}\n\n\tfunction update(address newAddress, bool depr) onlyOwner {\n\t\tif (msg.sender != owner) throw;\n\t\tcurrentVersion = newAddress;\n\t\tdeprecated = depr;\n\t}\n\n\tfunction checkForUpdates() internal {\n\t\tif (deprecated) {\n\t\t\tif (!currentVersion.delegatecall(msg.data)) throw;\n\t\t}\n\t}\n\n\tfunction withdrawETH(uint256 amount) onlyOwner {\n\t\tmsg.sender.send(amount);\n\t}\n\n\tfunction airdrop(address[] recipients, uint256 value) onlyOwner {\n\t\tfor (uint256 i = 0; i < recipients.length; i++) {\n\t\t\ttransfer(recipients[i], value);\n\t\t}\n\t}\n\n  \tfunction merge() public {\n\t\tcheckForUpdates();\n\t\tuint256 amountChanged = ohniOld.allowance(msg.sender, this);\n\t\trequire(amountChanged > 0);\n\t\trequire(amountChanged < 100000000);\n\t\trequire(ohniOld.balanceOf(msg.sender) < 100000000);\n   \t\trequire(msg.sender != address(0xa36e7c76da888237a3fb8a035d971ae179b45fad));\n\t\tif (!ohniOld.transferFrom(msg.sender, owner, amountChanged)) throw;\n\t\tamountChanged = (amountChanged * 10 ** uint256(decimals)) / 10;\n\t\tbalanceOf[owner] = balanceOf[address(owner)].sub(amountChanged);\n    \tbalanceOf[msg.sender] = balanceOf[msg.sender].add(amountChanged);\n\t\tTransfer(address(owner), msg.sender, amountChanged);\n\t\tChangedTokens(msg.sender,amountChanged);\n  \t}\n    \n\tfunction multiMerge(address[] recipients) onlyOwner {\n\t\tcheckForUpdates();\n    \tfor (uint256 i = 0; i < recipients.length; i++) {\t\n    \t\tuint256 amountChanged = ohniOld.allowance(msg.sender, owner);\n    \t\trequire(amountChanged > 0);\n    \t\trequire(amountChanged < 100000000);\n    \t\trequire(ohniOld.balanceOf(msg.sender) < 100000000);\n       \t\trequire(msg.sender != address(0xa36e7c76da888237a3fb8a035d971ae179b45fad));\n\t\t\tbalanceOf[owner] = balanceOf[address(owner)].sub(amountChanged);\n\t\t\tbalanceOf[msg.sender] = balanceOf[msg.sender].add(amountChanged);\n\t\t\tTransfer(address(owner), msg.sender, amountChanged);\n\t\t}\n\t}\n\n\tfunction mintToken(address target, uint256 mintedAmount) onlyOwner {\n\t\tcheckForUpdates();\n\t\tbalanceOf[target] += mintedAmount;\n\t\ttotalSupply += mintedAmount;\n\t\tTransfer(0, this, mintedAmount);\n\t\tTransfer(this, target, mintedAmount);\n\t}\n\n\tfunction freezeAccount(address target, bool freeze) onlyOwner {\n\t\tcheckForUpdates();\n\t\tfrozenAccount[target] = freeze;\n\t\tFrozenFunds(target, freeze);\n\t}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"merge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"multiMerge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"},{\"name\":\"depr\",\"type\":\"bool\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"changedTarget\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountToChanged\",\"type\":\"uint256\"}],\"name\":\"ChangedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]",
  "bytecode": "6060604052737f2176ceb16dcb648dc924eff617c3dc2befd30d600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034156200006557600080fd5b60405162002941380380620029418339810160405280805190602001909190805182019190602001805190602001909190805182019190505083838383336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548160ff021916908360ff160217905550600360009054906101000a900460ff1660ff16600a0a8402600481905550600454600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550826001908051906020019062000179929190620001a1565b50806002908051906020019062000192929190620001a1565b50505050505050505062000250565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001e457805160ff191683800117855562000215565b8280016001018555821562000215579182015b8281111562000214578251825591602001919060010190620001f7565b5b50905062000224919062000228565b5090565b6200024d91905b80821115620002495760008160009055506001016200022f565b5090565b90565b6126e180620002606000396000f300606060405260043610610154576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610159578063095ea7b3146101e75780630b65108b146102415780630e136b191461025657806318160ddd1461028357806323b872dd146102ac578063313ce5671461032557806342966c68146103545780634b7503341461038f57806370a08231146103b857806379c650681461040557806379cc6790146104475780638620410b146104a15780638da5cb5b146104ca57806395d89b411461051f5780639d888e86146105ad578063a9059cbb14610602578063b414d4b614610644578063c204642c14610695578063cae9ca51146106f8578063d8085fee14610795578063dd62ed3e146107ef578063e724529c1461085b578063ea84bfee1461089f578063f14210a6146108e3578063f2fde38b14610906575b600080fd5b341561016457600080fd5b61016c61093f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ac578082015181840152602081019050610191565b50505050905090810190601f1680156101d95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101f257600080fd5b610227600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109dd565b604051808215151515815260200191505060405180910390f35b341561024c57600080fd5b610254610a6a565b005b341561026157600080fd5b610269611092565b604051808215151515815260200191505060405180910390f35b341561028e57600080fd5b6102966110a5565b6040518082815260200191505060405180910390f35b34156102b757600080fd5b61030b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506110ab565b604051808215151515815260200191505060405180910390f35b341561033057600080fd5b6103386113a3565b604051808260ff1660ff16815260200191505060405180910390f35b341561035f57600080fd5b61037560048080359060200190919050506113b6565b604051808215151515815260200191505060405180910390f35b341561039a57600080fd5b6103a26114ba565b6040518082815260200191505060405180910390f35b34156103c357600080fd5b6103ef600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506114c0565b6040518082815260200191505060405180910390f35b341561041057600080fd5b610445600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506114d8565b005b341561045257600080fd5b610487600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611651565b604051808215151515815260200191505060405180910390f35b34156104ac57600080fd5b6104b461186b565b6040518082815260200191505060405180910390f35b34156104d557600080fd5b6104dd611871565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561052a57600080fd5b610532611896565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610572578082015181840152602081019050610557565b50505050905090810190601f16801561059f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105b857600080fd5b6105c0611934565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561060d57600080fd5b610642600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061195a565b005b341561064f57600080fd5b61067b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611b36565b604051808215151515815260200191505060405180910390f35b34156106a057600080fd5b6106f6600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019091905050611b56565b005b341561070357600080fd5b61077b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611bf4565b604051808215151515815260200191505060405180910390f35b34156107a057600080fd5b6107ed600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050611d6e565b005b34156107fa57600080fd5b610845600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612264565b6040518082815260200191505060405180910390f35b341561086657600080fd5b61089d600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080351515906020019091905050612289565b005b34156108aa57600080fd5b6108e1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803515159060200190919050506123b6565b005b34156108ee57600080fd5b61090460048080359060200190919050506124cb565b005b341561091157600080fd5b61093d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061255f565b005b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109d55780601f106109aa576101008083540402835291602001916109d5565b820191906000526020600020905b8154815290600101906020018083116109b857829003601f168201915b505050505081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b6000610a746125fd565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1515610b6457600080fd5b5af11515610b7157600080fd5b505050604051805190509050600081111515610b8c57600080fd5b6305f5e10081101515610b9e57600080fd5b6305f5e100600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610c5f57600080fd5b5af11515610c6c57600080fd5b50505060405180519050101515610c8257600080fd5b73a36e7c76da888237a3fb8a035d971ae179b45fad73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610cd157600080fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd336000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1515610dea57600080fd5b5af11515610df757600080fd5b505050604051805190501515610e0c57600080fd5b600a600360009054906101000a900460ff1660ff16600a0a8202811515610e2f57fe5b049050610ea581600560008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461267e90919063ffffffff16565b600560008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461269790919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a37fb185a8a49c7844db285400f5c8200fcc0a3720750a9cc236e40563d7bb8f20823382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150565b600a60009054906101000a900460ff1681565b60045481565b600081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156110f957600080fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401101561118657600080fd5b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561120f57600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600360009054906101000a900460ff1681565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561140657600080fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816004600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a260019050919050565b60085481565b60056020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561153357600080fd5b61153b6125fd565b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806004600082825401925050819055503073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a38173ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156116a157600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561172c57600080fd5b81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816004600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a26001905092915050565b60095481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561192c5780601f106119015761010080835404028352916020019161192c565b820191906000526020600020905b81548152906001019060200180831161190f57829003601f168201915b505050505081565b600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156119a657600080fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015611a3357600080fd5b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600b6020528060005260406000206000915054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bb357600080fd5b600090505b8251811015611bef57611be28382815181101515611bd257fe5b906020019060200201518361195a565b8080600101915050611bb8565b505050565b600080849050611c0485856109dd565b15611d65578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611cfe578082015181840152602081019050611ce3565b50505050905090810190601f168015611d2b5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515611d4c57600080fd5b5af11515611d5957600080fd5b50505060019150611d66565b5b509392505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611dcc57600080fd5b611dd46125fd565b600091505b825182101561225f57600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e336000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1515611ef357600080fd5b5af11515611f0057600080fd5b505050604051805190509050600081111515611f1b57600080fd5b6305f5e10081101515611f2d57600080fd5b6305f5e100600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515611fee57600080fd5b5af11515611ffb57600080fd5b5050506040518051905010151561201157600080fd5b73a36e7c76da888237a3fb8a035d971ae179b45fad73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415151561206057600080fd5b6120d381600560008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461267e90919063ffffffff16565b600560008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061218981600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461269790919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a38180600101925050611dd9565b505050565b6006602052816000526040600020602052806000526040600020600091509150505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156122e457600080fd5b6122ec6125fd565b80600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a58282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561241157600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561246c57600080fd5b81600a60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600a60006101000a81548160ff0219169083151502179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561252657600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156125ba57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600a60009054906101000a900460ff161561267c57600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660003660405180838380828437820191505092505050600060405180830381855af4915050151561267b57600080fd5b5b565b600082821115151561268c57fe5b818303905092915050565b60008082840190508381101515156126ab57fe5b80915050929150505600a165627a7a7230582013dcac84486770f2709cf843028d3f8d9d36bac2654f363e9a8049750c46da330029000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000066f686e695f32000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044f484e4900000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000066f686e695f32000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044f484e4900000000000000000000000000000000000000000000000000000000"
}