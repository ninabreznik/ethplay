{
  "address": "0xb59f67a8bff5d8cd03f6ac17265c550ed8f33907",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FrozenToken",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-11\n*/\n\n//! FrozenToken ECR20-compliant token contract\n//! By Parity Technologies, 2017.\n//! Released under the Apache Licence 2.\n\npragma solidity ^0.4.17;\n\n// Owned contract.\ncontract Owned {\n\tmodifier only_owner { require (msg.sender == owner); _; }\n\n\tevent NewOwner(address indexed old, address indexed current);\n\n\tfunction setOwner(address _new) public only_owner { NewOwner(owner, _new); owner = _new; }\n\n\taddress public owner;\n}\n\n// FrozenToken, a bit like an ECR20 token (though not - as it doesn't\n// implement most of the API).\n// All token balances are generally non-transferable.\n// All \"tokens\" belong to the owner (who is uniquely liquid) at construction.\n// Liquid accounts can make other accounts liquid and send their tokens\n// to other axccounts.\ncontract FrozenToken is Owned {\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// this is as basic as can be, only the associated balance & allowances\n\tstruct Account {\n\t\tuint balance;\n\t\tbool liquid;\n\t}\n\n\t// constructor sets the parameters of execution, _totalSupply is all units\n\tfunction FrozenToken(uint _totalSupply, address _owner)\n        public\n\t\twhen_non_zero(_totalSupply)\n\t{\n\t\ttotalSupply = _totalSupply;\n\t\towner = _owner;\n\t\taccounts[_owner].balance = totalSupply;\n\t\taccounts[_owner].liquid = true;\n\t}\n\n\t// balance of a specific address\n\tfunction balanceOf(address _who) public constant returns (uint256) {\n\t\treturn accounts[_who].balance;\n\t}\n\n\t// make an account liquid: only liquid accounts can do this.\n\tfunction makeLiquid(address _to)\n\t\tpublic\n\t\twhen_liquid(msg.sender)\n\t\treturns(bool)\n\t{\n\t\taccounts[_to].liquid = true;\n\t\treturn true;\n\t}\n\n\t// transfer\n\tfunction transfer(address _to, uint256 _value)\n\t\tpublic\n\t\twhen_owns(msg.sender, _value)\n\t\twhen_liquid(msg.sender)\n\t\treturns(bool)\n\t{\n\t\tTransfer(msg.sender, _to, _value);\n\t\taccounts[msg.sender].balance -= _value;\n\t\taccounts[_to].balance += _value;\n\n\t\treturn true;\n\t}\n\n\t// no default function, simple contract only, entry-level users\n\tfunction() public {\n\t\tassert(false);\n\t}\n\n\t// the balance should be available\n\tmodifier when_owns(address _owner, uint _amount) {\n\t\trequire (accounts[_owner].balance >= _amount);\n\t\t_;\n\t}\n\n\tmodifier when_liquid(address who) {\n\t\trequire (accounts[who].liquid);\n\t\t_;\n\t}\n\n\t// a value should be > 0\n\tmodifier when_non_zero(uint _value) {\n\t\trequire (_value > 0);\n\t\t_;\n\t}\n\n\t// Available token supply\n\tuint public totalSupply;\n\n\t// Storage and mapping of all balances & allowances\n\tmapping (address => Account) accounts;\n\n\t// Conventional metadata.\n\tstring public constant name = \"DOT Allocation Indicator\";\n\tstring public constant symbol = \"DOT\";\n\tuint8 public constant decimals = 3;\n}",
  "bytecode": "6060604052341561000f57600080fd5b604051604080610565833981016040528080519190602001805191508290506000811161003b57600080fd5b50600182815560008054600160a060020a03909316600160a060020a03199093168317815591825260026020526040909120918255908101805460ff191690911790556104d88061008d6000396000f300606060405236156100965763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100a557806313af40351461012f57806318160ddd1461014e578063313ce5671461017357806370a082311461019c57806375ad319a146101bb5780638da5cb5b146101ee57806395d89b411461021d578063a9059cbb14610230575b34156100a157600080fd5bfe5b005b34156100b057600080fd5b6100b8610252565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100f45780820151838201526020016100dc565b50505050905090810190601f1680156101215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013a57600080fd5b6100a3600160a060020a0360043516610289565b341561015957600080fd5b61016161030f565b60405190815260200160405180910390f35b341561017e57600080fd5b610186610315565b60405160ff909116815260200160405180910390f35b34156101a757600080fd5b610161600160a060020a036004351661031a565b34156101c657600080fd5b6101da600160a060020a0360043516610335565b604051901515815260200160405180910390f35b34156101f957600080fd5b61020161038e565b604051600160a060020a03909116815260200160405180910390f35b341561022857600080fd5b6100b861039d565b341561023b57600080fd5b6101da600160a060020a03600435166024356103d4565b60408051908101604052601881527f444f5420416c6c6f636174696f6e20496e64696361746f720000000000000000602082015281565b60005433600160a060020a039081169116146102a457600080fd5b600054600160a060020a0380831691167f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b236460405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60015481565b600381565b600160a060020a031660009081526002602052604090205490565b33600160a060020a03811660009081526002602052604081206001015490919060ff16151561036357600080fd5b5050600160a060020a031660009081526002602052604090206001908101805460ff19168217905590565b600054600160a060020a031681565b60408051908101604052600381527f444f540000000000000000000000000000000000000000000000000000000000602082015281565b33600160a060020a03811660009081526002602052604081205490919083908190101561040057600080fd5b33600160a060020a03811660009081526002602052604090206001015460ff16151561042b57600080fd5b85600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8760405190815260200160405180910390a3600160a060020a033381166000908152600260205260408082208054899003905591881681522080548601905560019350505050929150505600a165627a7a72305820228dfae3e67abcdc7f73fb3f83a7d23f45acd853774acad9d2e1ac83b940fbe9002900000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000b46c2526e227482e2ebb8f4c69e4674d262e75",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000b46c2526e227482e2ebb8f4c69e4674d262e75"
}