{
  "address": "0x294adfa61038c0e1e968507d7ada6be5e6562629",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Lendxcoin Token",
  "contractName": "LendToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-01\n*/\n\npragma solidity ^0.4.13;\n\n/*\n*\n*  /$$       /$$$$$$$$ /$$   /$$ /$$$$$$$  /$$   /$$  /$$$$$$   /$$$$$$  /$$$$$$ /$$   /$$\n* | $$      | $$_____/| $$$ | $$| $$__  $$| $$  / $$ /$$__  $$ /$$__  $$|_  $$_/| $$$ | $$\n* | $$      | $$      | $$$$| $$| $$  \\ $$|  $$/ $$/| $$  \\__/| $$  \\ $$  | $$  | $$$$| $$\n* | $$      | $$$$$   | $$ $$ $$| $$  | $$ \\  $$$$/ | $$      | $$  | $$  | $$  | $$ $$ $$\n* | $$      | $$__/   | $$  $$$$| $$  | $$  >$$  $$ | $$      | $$  | $$  | $$  | $$  $$$$\n* | $$      | $$      | $$\\  $$$| $$  | $$ /$$/\\  $$| $$    $$| $$  | $$  | $$  | $$\\  $$$\n* | $$$$$$$$| $$$$$$$$| $$ \\  $$| $$$$$$$/| $$  \\ $$|  $$$$$$/|  $$$$$$/ /$$$$$$| $$ \\  $$\n* |________/|________/|__/  \\__/|_______/ |__/  |__/ \\______/  \\______/ |______/|__/  \\__/\n*/\n\n\ncontract Crowdsale {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20;\n\n  // The token being sold\n  ERC20 public token;\n\n  // Address where funds are collected\n  address public wallet;\n\n  // How many token units a buyer gets per wei.\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\n  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n  // 1 wei will give you 1 unit, or 0.001 TOK.\n  uint256 public rate;\n\n  // Amount of wei raised\n  uint256 public weiRaised;\n\n  /**\n   * Event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(\n    address indexed purchaser,\n    address indexed beneficiary,\n    uint256 value,\n    uint256 amount\n  );\n\n  /**\n   * @param _rate Number of token units a buyer gets per wei\n   * @param _wallet Address where collected funds will be forwarded to\n   * @param _token Address of the token being sold\n   */\n  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n    require(_rate > 0);\n    require(_wallet != address(0));\n    require(_token != address(0));\n\n    rate = _rate;\n    wallet = _wallet;\n    token = _token;\n  }\n\n  // -----------------------------------------\n  // Crowdsale external interface\n  // -----------------------------------------\n\n  /**\n   * @dev fallback function ***DO NOT OVERRIDE***\n   */\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * @dev low level token purchase ***DO NOT OVERRIDE***\n   * @param _beneficiary Address performing the token purchase\n   */\n  function buyTokens(address _beneficiary) public payable {\n\n    uint256 weiAmount = msg.value;\n    _preValidatePurchase(_beneficiary, weiAmount);\n\n    // calculate token amount to be created\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    _processPurchase(_beneficiary, tokens);\n    emit TokenPurchase(\n      msg.sender,\n      _beneficiary,\n      weiAmount,\n      tokens\n    );\n\n    _updatePurchasingState(_beneficiary, weiAmount);\n\n    _forwardFunds();\n    _postValidatePurchase(_beneficiary, weiAmount);\n  }\n\n  // -----------------------------------------\n  // Internal interface (extensible)\n  // -----------------------------------------\n\n  /**\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n   * Example from CappedCrowdsale.sol's _preValidatePurchase method: \n   *   super._preValidatePurchase(_beneficiary, _weiAmount);\n   *   require(weiRaised.add(_weiAmount) <= cap);\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    require(_beneficiary != address(0));\n    require(_weiAmount != 0);\n  }\n\n  /**\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _postValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n   * @param _beneficiary Address performing the token purchase\n   * @param _tokenAmount Number of tokens to be emitted\n   */\n  function _deliverTokens(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    token.safeTransfer(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n   * @param _beneficiary Address receiving the tokens\n   * @param _tokenAmount Number of tokens to be purchased\n   */\n  function _processPurchase(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    _deliverTokens(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n   * @param _beneficiary Address receiving the tokens\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _updatePurchasingState(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Override to extend the way in which ether is converted to tokens.\n   * @param _weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n  function _getTokenAmount(uint256 _weiAmount)\n    internal view returns (uint256)\n  {\n    return _weiAmount.mul(rate);\n  }\n\n  /**\n   * @dev Determines how ETH is stored/forwarded on purchases.\n   */\n  function _forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n}\n\ncontract MintedCrowdsale is Crowdsale {\n\n  /**\n   * @dev Overrides delivery by minting tokens upon purchase.\n   * @param _beneficiary Token purchaser\n   * @param _tokenAmount Number of tokens to be minted\n   */\n  function _deliverTokens(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    // Potentially dangerous assumption about the type of the token.\n    require(MintableToken(address(token)).mint(_beneficiary, _tokenAmount));\n  }\n}\n\ncontract CappedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 public cap;\n\n  /**\n   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n   * @param _cap Max amount of wei to be contributed\n   */\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  /**\n   * @dev Checks whether the cap has been reached.\n   * @return Whether the cap was reached\n   */\n  function capReached() public view returns (bool) {\n    return weiRaised >= cap;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring purchase to respect the funding cap.\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n    require(weiRaised.add(_weiAmount) <= cap);\n  }\n\n}\n\ncontract TimedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 public openingTime;\n  uint256 public closingTime;\n\n  /**\n   * @dev Reverts if not in crowdsale time range.\n   */\n  modifier onlyWhileOpen {\n    // solium-disable-next-line security/no-block-members\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n    _;\n  }\n\n  /**\n   * @dev Constructor, takes crowdsale opening and closing times.\n   * @param _openingTime Crowdsale opening time\n   * @param _closingTime Crowdsale closing time\n   */\n  constructor(uint256 _openingTime, uint256 _closingTime) public {\n    // solium-disable-next-line security/no-block-members\n    require(_openingTime >= block.timestamp);\n    require(_closingTime >= _openingTime);\n\n    openingTime = _openingTime;\n    closingTime = _closingTime;\n  }\n\n  /**\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n   * @return Whether crowdsale period has elapsed\n   */\n  function hasClosed() public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp > closingTime;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring to be within contributing period\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n    onlyWhileOpen\n  {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\ncontract DailyLimitCrowdsale is TimedCrowdsale, Ownable {\n\n    uint256 public dailyLimit; // all users\n    uint256 public stageLimit; // all users\n    uint256 public minDailyPerUser;\n    uint256 public maxDailyPerUser;\n\n    // today's index => who => value\n    mapping(uint256 => mapping(address => uint256)) public userSpending;\n    // all users\n    mapping(uint256 => uint256) public totalSpending;\n\n    uint256 public stageSpending;\n    /**\n     * @dev Constructor that sets the passed value as a dailyLimit.\n     * @param _minDailyPerUser uint256 to represent the min cap / day / user.\n     * @param _maxDailyPerUser uint256 to represent the max cap / day/ user.\n     * @param _dailyLimit uint256 to represent the daily limit of all users.\n     * @param _stageLimit uint256 to represent the stage limit of all users.\n     */\n    constructor(uint256 _minDailyPerUser, uint256 _maxDailyPerUser, uint256 _dailyLimit, uint256 _stageLimit)\n    public {\n        minDailyPerUser = _minDailyPerUser;\n        maxDailyPerUser = _maxDailyPerUser;\n        dailyLimit = _dailyLimit;\n        stageLimit = _stageLimit;\n        stageSpending = 0;\n    }\n\n    function setTime(uint256 _openingTime, uint256 _closingTime)\n    onlyOwner\n    public {\n        require(_closingTime >= _openingTime);\n        openingTime = _openingTime;\n        closingTime = _closingTime;\n    }\n\n    /**\n     * @dev sets the daily limit. Does not alter the amount already spent today.\n     * @param _value uint256 to represent the new limit.\n     */\n    function _setDailyLimit(uint256 _value) internal {\n        dailyLimit = _value;\n    }\n\n    function _setMinDailyPerUser(uint256 _value) internal {\n        minDailyPerUser = _value;\n    }\n\n    function _setMaxDailyPerUser(uint256 _value) internal {\n        maxDailyPerUser = _value;\n    }\n\n    function _setStageLimit(uint256 _value) internal {\n        stageLimit = _value;\n    }\n\n\n    /**\n     * @dev Checks to see if there is enough resource to spend today. If true, the resource may be expended.\n     * @param _value uint256 representing the amount of resource to spend.\n     * @return A boolean that is True if the resource was spent and false otherwise.\n     */\n\n    function underLimit(address who, uint256 _value) internal returns (bool) {\n        require(stageLimit > 0);\n        require(minDailyPerUser > 0);\n        require(maxDailyPerUser > 0);\n        require(_value >= minDailyPerUser);\n        require(_value <= maxDailyPerUser);\n        uint256 _key = today();\n        require(userSpending[_key][who] + _value >= userSpending[_key][who] && userSpending[_key][who] + _value <= maxDailyPerUser);\n        if (dailyLimit > 0) {\n            require(totalSpending[_key] + _value >= totalSpending[_key] && totalSpending[_key] + _value <= dailyLimit);\n        }\n        require(stageSpending + _value >= stageSpending && stageSpending + _value <= stageLimit);\n        totalSpending[_key] += _value;\n        userSpending[_key][who] += _value;\n        stageSpending += _value;\n        return true;\n    }\n\n    /**\n     * @dev Private function to determine today's index\n     * @return uint256 of today's index.\n     */\n    function today() private view returns (uint256) {\n        return now / 1 days;\n    }\n\n    modifier limitedDaily(address who, uint256 _value) {\n        require(underLimit(who, _value));\n        _;\n    }\n    // ===============================\n    function _preValidatePurchase(\n        address _beneficiary,\n        uint256 _weiAmount\n    )\n    limitedDaily(_beneficiary, _weiAmount)\n    internal\n    {\n        super._preValidatePurchase(_beneficiary, _weiAmount);\n    }\n\n    function _deliverTokens(\n        address _beneficiary,\n        uint256 _tokenAmount\n    )\n    internal\n    {\n        require(LendToken(token).deliver(_beneficiary, _tokenAmount));\n    }\n}\n\ncontract LendContract is MintedCrowdsale, DailyLimitCrowdsale {\n\n    // Fields:\n    enum CrowdsaleStage {\n        BT,         // Bounty\n        PS,         // Pre sale\n        TS_R1,      // Token sale round 1\n        TS_R2,      // Token sale round 2\n        TS_R3,      // Token sale round 3\n        EX,         // Exchange\n        P2P_EX      // P2P Exchange\n    }\n\n    CrowdsaleStage public stage = CrowdsaleStage.PS; // By default it's Presale\n    // =============\n\n    // Token Distribution\n    // =============================\n    uint256 public maxTokens = 120 * 1e6 * 1e18; // There will be total 120 million Tokens available for sale\n    uint256 public tokensForReserve = 50 * 1e6 * 1e18; // 50 million for the eco system reserve\n    uint256 public tokensForBounty = 1 * 1e6 * 1e18; // 1 million for token bounty will send from fund deposit address\n    uint256 public totalTokensForTokenSale = 49 * 1e6 * 1e18; // 49 million Tokens will be sold in Crowdsale\n    uint256 public totalTokensForSaleDuringPreSale = 20 * 1e6 * 1e18; // 20 million out of 6 million will be sold during PreSale\n    // ==============================\n    // Token Funding Rates\n    // ==============================\n    uint256 public constant PRESALE_RATE = 1070; // 1 ETH = 1070 xcoin\n    uint256 public constant ROUND_1_TOKENSALE_RATE = 535; // 1 ETH = 535 xcoin\n    uint256 public constant ROUND_2_TOKENSALE_RATE = 389; // 1 ETH = 389 xcoin\n    uint256 public constant ROUND_3_TOKENSALE_RATE = 306; // 1 ETH = 306 xcoin\n\n    // ==============================\n    // Token Limit\n    // ==============================\n\n    uint256 public constant PRESALE_MIN_DAILY_PER_USER = 5 * 1e18; // 5 ETH / user / day\n    uint256 public constant PRESALE_MAX_DAILY_PER_USER = 100 * 1e18; // 100 ETH / user / day\n\n    uint256 public constant TOKENSALE_MIN_DAILY_PER_USER = 0.1 * 1e18; // 0.1 ETH / user / day\n    uint256 public constant TOKENSALE_MAX_DAILY_PER_USER = 10 * 1e18; // 10 ETH / user / day\n\n\n    uint256 public constant ROUND_1_TOKENSALE_LIMIT_PER_DAY = 1.5 * 1e6 * 1e18; //1.5M xcoin all users\n    uint256 public constant ROUND_1_TOKENSALE_LIMIT = 15 * 1e6 * 1e18; //15M xcoin all users\n\n    uint256 public constant ROUND_2_TOKENSALE_LIMIT_PER_DAY = 1.5 * 1e6 * 1e18; //1.5M xcoin all users\n    uint256 public constant ROUND_2_TOKENSALE_LIMIT = 15 * 1e6 * 1e18; //15M xcoin all users\n\n    uint256 public constant ROUND_3_TOKENSALE_LIMIT_PER_DAY = 1.9 * 1e6 * 1e18; //1.9M xcoin all users\n    uint256 public constant ROUND_3_TOKENSALE_LIMIT = 19 * 1e6 * 1e18; //19M xcoin all users\n\n    // ===================\n    bool public crowdsaleStarted = true;\n    bool public crowdsalePaused = false;\n    // Events\n    event EthTransferred(string text);\n    event EthRefunded(string text);\n\n    function LendContract\n    (\n        uint256 _openingTime,\n        uint256 _closingTime,\n        uint256 _rate,\n        address _wallet,\n        uint256 _minDailyPerUser,\n        uint256 _maxDailyPerUser,\n        uint256 _dailyLimit,\n        uint256 _stageLimit,\n        MintableToken _token\n    )\n    public\n    DailyLimitCrowdsale(_minDailyPerUser, _maxDailyPerUser, _dailyLimit, _stageLimit)\n    Crowdsale(_rate, _wallet, _token)\n    TimedCrowdsale(_openingTime, _closingTime) {\n\n    }\n    function setCrowdsaleStage(uint value) public onlyOwner {\n        require(value > uint(CrowdsaleStage.BT) && value < uint(CrowdsaleStage.EX));\n        CrowdsaleStage _stage;\n        if (uint(CrowdsaleStage.PS) == value) {\n            _stage = CrowdsaleStage.PS;\n            setCurrentRate(PRESALE_RATE);\n            setMinDailyPerUser(PRESALE_MIN_DAILY_PER_USER);\n            setMaxDailyPerUser(PRESALE_MAX_DAILY_PER_USER);\n            setStageLimit(totalTokensForSaleDuringPreSale);\n        } else if (uint(CrowdsaleStage.TS_R1) == value) {\n            _stage = CrowdsaleStage.TS_R2;\n            setCurrentRate(ROUND_1_TOKENSALE_RATE);\n            // update limit\n            setDailyLimit(ROUND_1_TOKENSALE_LIMIT_PER_DAY);\n            setMinDailyPerUser(TOKENSALE_MIN_DAILY_PER_USER);\n            setMaxDailyPerUser(TOKENSALE_MAX_DAILY_PER_USER);\n            setStageLimit(ROUND_1_TOKENSALE_LIMIT);\n        } else if (uint(CrowdsaleStage.TS_R2) == value) {\n            _stage = CrowdsaleStage.TS_R2;\n            setCurrentRate(ROUND_2_TOKENSALE_RATE);\n            // update limit\n            setDailyLimit(ROUND_2_TOKENSALE_LIMIT_PER_DAY);\n            setMinDailyPerUser(TOKENSALE_MIN_DAILY_PER_USER);\n            setMaxDailyPerUser(TOKENSALE_MAX_DAILY_PER_USER);\n            setStageLimit(ROUND_2_TOKENSALE_LIMIT);\n        } else if (uint(CrowdsaleStage.TS_R3) == value) {\n            _stage = CrowdsaleStage.TS_R3;\n            setCurrentRate(ROUND_2_TOKENSALE_RATE);\n            // update limit\n            setDailyLimit(ROUND_2_TOKENSALE_LIMIT_PER_DAY);\n            setMinDailyPerUser(TOKENSALE_MIN_DAILY_PER_USER);\n            setMaxDailyPerUser(TOKENSALE_MAX_DAILY_PER_USER);\n            setStageLimit(ROUND_3_TOKENSALE_LIMIT);\n        }\n        stage = _stage;\n    }\n\n    // Change the current rate\n    function setCurrentRate(uint256 _rate) private {\n        rate = _rate;\n    }\n\n    function setRate(uint256 _rate) public onlyOwner {\n        setCurrentRate(_rate);\n    }\n\n    function setCrowdSale(bool _started) public onlyOwner {\n        crowdsaleStarted = _started;\n    }\n    // limit by user\n    function setDailyLimit(uint256 _value) public onlyOwner {\n        _setDailyLimit(_value);\n    }\n    function setMinDailyPerUser(uint256 _value) public onlyOwner {\n        _setMinDailyPerUser(_value);\n    }\n\n    function setMaxDailyPerUser(uint256 _value) public onlyOwner {\n        _setMaxDailyPerUser(_value);\n    }\n    function setStageLimit(uint256 _value) public onlyOwner {\n        _setStageLimit(_value);\n    }\n    function pauseCrowdsale() public onlyOwner {\n        crowdsalePaused = true;\n    }\n\n    function unPauseCrowdsale() public onlyOwner {\n        crowdsalePaused = false;\n    }\n    // ===========================\n    // Finish: Mint Extra Tokens as needed before finalizing the Crowdsale.\n    // ====================================================================\n\n    function finish(address _reserveFund) public onlyOwner {\n        if (crowdsaleStarted) {\n            uint256 alreadyMinted = token.totalSupply();\n            require(alreadyMinted < maxTokens);\n\n            uint256 unsoldTokens = totalTokensForTokenSale - alreadyMinted;\n            if (unsoldTokens > 0) {\n                tokensForReserve = tokensForReserve + unsoldTokens;\n            }\n            MintableToken(token).mint(_reserveFund, tokensForReserve);\n            crowdsaleStarted = false;\n        }\n    }\n\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20Basic _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n\n  function safeTransferFrom(\n    ERC20 _token,\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transferFrom(_from, _to, _value));\n  }\n\n  function safeApprove(\n    ERC20 _token,\n    address _spender,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.approve(_spender, _value));\n  }\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public onlyOwner canMint returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\ncontract LendToken is MintableToken {\n    string public name = \"LENDXCOIN\";\n    string public symbol = \"XCOIN\";\n    uint8 public decimals = 18;\n    address public contractAddress;\n    uint256 public fee;\n\n    uint256 public constant FEE_TRANSFER = 5 * 1e15; // 0.005 xcoin\n\n    uint256 public constant INITIAL_SUPPLY = 51 * 1e6 * (10 ** uint256(decimals)); // 50M + 1M bounty\n\n    // Events\n    event ChangedFee(address who, uint256 newFee);\n\n    /**\n     * @dev Constructor that gives msg.sender all of existing tokens.\n     */\n    function LendToken() public {\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        fee = FEE_TRANSFER;\n    }\n\n    function setContractAddress(address _contractAddress) external onlyOwner {\n        if (_contractAddress != address(0)) {\n            contractAddress = _contractAddress;\n        }\n    }\n\n    function deliver(\n        address _beneficiary,\n        uint256 _tokenAmount\n    )\n    public\n    returns (bool success)\n    {\n        require(_tokenAmount > 0);\n        require(msg.sender == contractAddress);\n        balances[_beneficiary] += _tokenAmount;\n        totalSupply_ += _tokenAmount;\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        if (msg.sender == owner) {\n            return super.transfer(_to, _value);\n        } else {\n            require(fee <= balances[msg.sender]);\n            balances[owner] = balances[owner].add(fee);\n            balances[msg.sender] = balances[msg.sender].sub(fee);\n            return super.transfer(_to, _value - fee);\n        }\n    }\n\n    function setFee(uint256 _fee)\n    onlyOwner\n    public\n    {\n        fee = _fee;\n        emit ChangedFee(msg.sender, _fee);\n    }\n\n}",
  "bytecode": ""
}