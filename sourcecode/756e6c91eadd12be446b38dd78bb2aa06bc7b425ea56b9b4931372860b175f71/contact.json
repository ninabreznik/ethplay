{
  "address": "0x2ef27bf41236bd859a95209e17a43fbd26851f92",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MorphToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-22\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * \n * This contract is used to set admin to the contract  which has some additional features such as minting , burning etc\n * \n */\n    contract Owned {\n        address public owner;\n\n        function owned() public {\n            owner = msg.sender;\n        }\n\n        modifier onlyOwner {\n            require(msg.sender == owner);\n            _;\n        }\n        \n        /* This function is used to transfer adminship to new owner\n         * @param  _newOwner - address of new admin or owner        \n         */\n\n        function transferOwnership(address _newOwner) onlyOwner public {\n            owner = _newOwner;\n        }          \n    }\n\n\n/**\n * This is base ERC20 Contract , basically ERC-20 defines a common list of rules for all Ethereum tokens to follow\n */ \n\ncontract ERC20 {\n  \n  using SafeMath for uint256;\n\n  //This creates an array with all balances \n  mapping (address => uint256) public balanceOf;\n  mapping (address => mapping (address => uint256)) allowed;  \n\n  //This maintains list of all black list account\n  mapping(address => bool) public isblacklistedAccount;\n    \n  // public variables of the token  \n  string public name;\n  string public symbol;\n  uint8 public decimals = 4;\n  uint256 public totalSupply;\n   \n  // This notifies client about the approval done by owner to spender for a given value\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  // This notifies client about the approval done\n  event Transfer(address indexed from, address indexed to, uint256 value);\n \n  \n  function ERC20(uint256 _initialSupply,string _tokenName, string _tokenSymbol) public {    \n    totalSupply = _initialSupply * 10 ** uint256(decimals); // Update total supply with the decimal amount     \n    balanceOf[msg.sender] = totalSupply;  \n    name = _tokenName;\n    symbol = _tokenSymbol;   \n  }\n  \n    /* This function is used to transfer tokens to a particular address \n     * @param _to receiver address where transfer is to be done\n     * @param _value value to be transferred\n     */\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n        require(!isblacklistedAccount[msg.sender]);                 // Check if sender is not blacklisted\n        require(!isblacklistedAccount[_to]);                        // Check if receiver is not blacklisted\n\t\trequire(balanceOf[msg.sender] > 0);                     \n\t\trequire(balanceOf[msg.sender] >= _value);                   // Check if the sender has enough  \n\t\trequire(_to != address(0));                                 // Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(_value > 0);\n\t\trequire(balanceOf[_to] .add(_value) >= balanceOf[_to]);     // Check for overflows \n\t\trequire(_to != msg.sender);                                 // Check if sender and receiver is not same\n\t\tbalanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);  // Subtract value from sender\n\t\tbalanceOf[_to] = balanceOf[_to].add(_value);                // Add the value to the receiver\n\t\tTransfer(msg.sender, _to, _value);                          // Notify all clients about the transfer events\n        return true;\n\t}\n\n\t/* Send _value amount of tokens from address _from to address _to\n     * The transferFrom method is used for a withdraw workflow, allowing contracts to send\n     * tokens on your behalf\n     * @param _from address from which amount is to be transferred\n     * @param _to address to which amount is transferred\n     * @param _amount to which amount is transferred\n     */\n    function transferFrom(\n         address _from,\n         address _to,\n         uint256 _amount\n     ) public returns (bool success)\n      {\n         if (balanceOf[_from] >= _amount\n             && allowed[_from][msg.sender] >= _amount\n             && _amount > 0\n             && balanceOf[_to].add(_amount) > balanceOf[_to])\n        {\n             balanceOf[_from] = balanceOf[_from].sub(_amount);\n             allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n             balanceOf[_to] = balanceOf[_to].add(_amount);\n             return true;\n        } else {\n             return false;\n        }\n    }\n    \n    /* This function allows _spender to withdraw from your account, multiple times, up to the _value amount.\n     * If this function is called again it overwrites the current allowance with _value.\n     * @param _spender address of the spender\n     * @param _amount amount allowed to be withdrawal\n     */\n     function approve(address _spender, uint256 _amount) public returns (bool success) {\n         allowed[msg.sender][_spender] = _amount;\n         Approval(msg.sender, _spender, _amount);\n         return true;\n    } \n\n    /* This function returns the amount of tokens approved by the owner that can be\n     * transferred to the spender's account\n     * @param _owner address of the owner\n     * @param _spender address of the spender \n     */\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n         return allowed[_owner][_spender];\n    }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n//This is the Main Morph Token Contract derived from the other two contracts Owned and ERC20\ncontract MorphToken is Owned, ERC20 {\n\n    using SafeMath for uint256;\n\n    uint256  tokenSupply = 100000000; \n             \n    // This notifies clients about the amount burnt , only admin is able to burn the contract\n    event Burn(address from, uint256 value); \n    \n    /* This is the main Token Constructor \n     * @param _centralAdmin  Address of the admin of the contract\n     */\n\tfunction MorphToken() \n\n\tERC20 (tokenSupply,\"MORPH\",\"MORPH\") public\n    {\n\t\towner = msg.sender;\n\t}\n\n       \n    /* This function is used to Blacklist a user or unblacklist already blacklisted users, blacklisted users are not able to transfer funds\n     * only admin can invoke this function\n     * @param _target address of the target \n     * @param _isBlacklisted boolean value\n     */\n    function blacklistAccount(address _target, bool _isBlacklisted) public onlyOwner {\n        isblacklistedAccount[_target] = _isBlacklisted;       \n    }\n\n\n    /* This function is used to mint additional tokens\n     * only admin can invoke this function\n     * @param _mintedAmount amount of tokens to be minted  \n     */\n    function mintTokens(uint256 _mintedAmount) public onlyOwner {\n        balanceOf[owner] = balanceOf[owner].add(_mintedAmount);\n        totalSupply = totalSupply.add(_mintedAmount);\n        Transfer(0, owner, _mintedAmount);      \n    }    \n\n     /**\n    * This function Burns a specific amount of tokens.\n    * @param _value The amount of token to be burned.\n    */\n    function burn(uint256 _value) public onlyOwner {\n      require(_value <= balanceOf[msg.sender]);\n      // no need to require value <= totalSupply, since that would imply the\n      // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n      address burner = msg.sender;\n      balanceOf[burner] = balanceOf[burner].sub(_value);\n      totalSupply = totalSupply.sub(_value);\n      Burn(burner, _value);\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_isBlacklisted\",\"type\":\"bool\"}],\"name\":\"blacklistAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isblacklistedAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"owned\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526004600660006101000a81548160ff021916908360ff1602179055506305f5e10060085534156200003457600080fd5b6008546040805190810160405280600581526020017f4d4f5250480000000000000000000000000000000000000000000000000000008152506040805190810160405280600581526020017f4d4f525048000000000000000000000000000000000000000000000000000000815250600660009054906101000a900460ff1660ff16600a0a8302600781905550600754600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600490805190602001906200011f92919062000182565b5080600590805190602001906200013892919062000182565b50505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000231565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001c557805160ff1916838001178555620001f6565b82800160010185558215620001f6579182015b82811115620001f5578251825591602001919060010190620001d8565b5b50905062000205919062000209565b5090565b6200022e91905b808211156200022a57600081600090555060010162000210565b5090565b90565b61164a80620002416000396000f3006060604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100eb578063095ea7b31461017957806318160ddd146101d357806323b872dd146101fc5780632d5a5d3414610275578063313ce567146102b957806342966c68146102e85780635e702b1b1461030b57806370a082311461035c5780638da5cb5b146103a957806395d89b41146103fe57806397304ced1461048c578063a9059cbb146104af578063dd62ed3e14610509578063df32754b14610575578063f2fde38b1461058a575b600080fd5b34156100f657600080fd5b6100fe6105c3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013e578082015181840152602081019050610123565b50505050905090810190601f16801561016b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018457600080fd5b6101b9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610661565b604051808215151515815260200191505060405180910390f35b34156101de57600080fd5b6101e6610753565b6040518082815260200191505060405180910390f35b341561020757600080fd5b61025b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610759565b604051808215151515815260200191505060405180910390f35b341561028057600080fd5b6102b7600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080351515906020019091905050610b20565b005b34156102c457600080fd5b6102cc610bd6565b604051808260ff1660ff16815260200191505060405180910390f35b34156102f357600080fd5b6103096004808035906020019091905050610be9565b005b341561031657600080fd5b610342600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610db6565b604051808215151515815260200191505060405180910390f35b341561036757600080fd5b610393600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dd6565b6040518082815260200191505060405180910390f35b34156103b457600080fd5b6103bc610dee565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561040957600080fd5b610411610e13565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610451578082015181840152602081019050610436565b50505050905090810190601f16801561047e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561049757600080fd5b6104ad6004808035906020019091905050610eb1565b005b34156104ba57600080fd5b6104ef600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611072565b604051808215151515815260200191505060405180910390f35b341561051457600080fd5b61055f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611480565b6040518082815260200191505060405180910390f35b341561058057600080fd5b610588611507565b005b341561059557600080fd5b6105c1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611549565b005b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106595780601f1061062e57610100808354040283529160200191610659565b820191906000526020600020905b81548152906001019060200180831161063c57829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60075481565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610826575081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156108325750600082115b80156108cd5750600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108cb83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115e790919063ffffffff16565b115b15610b145761092482600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461160590919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109f682600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461160590919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ac882600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115e790919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060019050610b19565b600090505b9392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b7b57600080fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600660009054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c4657600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610c9457600080fd5b339050610ce982600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461160590919063ffffffff16565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d418260075461160590919063ffffffff16565b6007819055507fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58183604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b60036020528060005260406000206000915054906101000a900460ff1681565b60016020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ea95780601f10610e7e57610100808354040283529160200191610ea9565b820191906000526020600020905b815481529060010190602001808311610e8c57829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f0c57600080fd5b610f7f81600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115e790919063ffffffff16565b600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ff8816007546115e790919063ffffffff16565b6007819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156110cd57600080fd5b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561112657600080fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151561117457600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156111c257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156111fe57600080fd5b60008211151561120d57600080fd5b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461129f83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115e790919063ffffffff16565b101515156112ac57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156112e757600080fd5b61133982600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461160590919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113ce82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115e790919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115a457600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008082840190508381101515156115fb57fe5b8091505092915050565b600082821115151561161357fe5b8183039050929150505600a165627a7a7230582063231087ec04820281edd2122fcba9974acc48a47dd9627de707529863e75ee50029"
}