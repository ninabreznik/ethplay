{
  "address": "0xdf14fd93849ca9a38cc1fd2d22104591af48356b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoMotorsMarketV1",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-09\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\npragma solidity ^0.4.24;\n\n/**\n * @title IERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface IERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    external\n    view\n    returns (bool);\n}\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721 is IERC165 {\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 indexed tokenId\n  );\n  event Approval(\n    address indexed owner,\n    address indexed approved,\n    uint256 indexed tokenId\n  );\n  event ApprovalForAll(\n    address indexed owner,\n    address indexed operator,\n    bool approved\n  );\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n  function approve(address to, uint256 tokenId) public;\n  function getApproved(uint256 tokenId)\n    public view returns (address operator);\n\n  function setApprovalForAll(address operator, bool _approved) public;\n  function isApprovedForAll(address owner, address operator)\n    public view returns (bool);\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n    public;\n\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes data\n  )\n    public;\n}\n\npragma solidity ^0.4.24;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract IERC721Receiver {\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safeTransfer`. This function MUST return the function selector,\n   * otherwise the caller will revert the transaction. The selector to be\n   * returned can be obtained as `this.onERC721Received.selector`. This\n   * function MAY throw to revert and reject the transfer.\n   * Note: the ERC721 contract address is always the message sender.\n   * @param operator The address which called `safeTransferFrom` function\n   * @param from The address which previously owned the token\n   * @param tokenId The NFT identifier which is being transferred\n   * @param data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address operator,\n    address from,\n    uint256 tokenId,\n    bytes data\n  )\n    public\n    returns(bytes4);\n}\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\npragma solidity ^0.4.24;\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param account address of the account to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address account) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(account) }\n    return size > 0;\n  }\n\n}\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title ERC165\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract ERC165 is IERC165 {\n\n  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) private _supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    internal\n  {\n    _registerInterface(_InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return _supportedInterfaces[interfaceId];\n  }\n\n  /**\n   * @dev internal method for registering an interface\n   */\n  function _registerInterface(bytes4 interfaceId)\n    internal\n  {\n    require(interfaceId != 0xffffffff);\n    _supportedInterfaces[interfaceId] = true;\n  }\n}\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC165, IERC721 {\n\n  using SafeMath for uint256;\n  using Address for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) private _tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) private _tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) private _ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  constructor()\n    public\n  {\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(_InterfaceId_ERC721);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address owner) public view returns (uint256) {\n    require(owner != address(0));\n    return _ownedTokensCount[owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 tokenId) public view returns (address) {\n    address owner = _tokenOwner[tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param to address to be approved for the given token ID\n   * @param tokenId uint256 ID of the token to be approved\n   */\n  function approve(address to, uint256 tokenId) public {\n    address owner = ownerOf(tokenId);\n    require(to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    _tokenApprovals[tokenId] = to;\n    emit Approval(owner, to, tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * Reverts if the token ID does not exist.\n   * @param tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 tokenId) public view returns (address) {\n    require(_exists(tokenId));\n    return _tokenApprovals[tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param to operator address to set the approval\n   * @param approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address to, bool approved) public {\n    require(to != msg.sender);\n    _operatorApprovals[msg.sender][to] = approved;\n    emit ApprovalForAll(msg.sender, to, approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param owner owner address which you want to query the approval of\n   * @param operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address owner,\n    address operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return _operatorApprovals[owner][operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  )\n    public\n  {\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n    require(to != address(0));\n\n    _clearApproval(from, tokenId);\n    _removeTokenFrom(from, tokenId);\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(from, to, tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  )\n    public\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(from, to, tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes _data\n  )\n    public\n  {\n    transferFrom(from, to, tokenId);\n    // solium-disable-next-line arg-overflow\n    require(_checkOnERC721Received(from, to, tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function _exists(uint256 tokenId) internal view returns (bool) {\n    address owner = _tokenOwner[tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param spender address of the spender to query\n   * @param tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function _isApprovedOrOwner(\n    address spender,\n    uint256 tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      spender == owner ||\n      getApproved(tokenId) == spender ||\n      isApprovedForAll(owner, spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param to The address that will own the minted token\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address to, uint256 tokenId) internal {\n    require(to != address(0));\n    _addTokenTo(to, tokenId);\n    emit Transfer(address(0), to, tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address owner, uint256 tokenId) internal {\n    _clearApproval(owner, tokenId);\n    _removeTokenFrom(owner, tokenId);\n    emit Transfer(owner, address(0), tokenId);\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n   * @param to address representing the new owner of the given token ID\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function _addTokenTo(address to, uint256 tokenId) internal {\n    require(_tokenOwner[tokenId] == address(0));\n    _tokenOwner[tokenId] = to;\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n   * and doesn't clear approvals.\n   * @param from address representing the previous owner of the given token ID\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n    require(ownerOf(tokenId) == from);\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n    _tokenOwner[tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param from address representing the previous owner of the given token ID\n   * @param to target address that will receive the tokens\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function _checkOnERC721Received(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!to.isContract()) {\n      return true;\n    }\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n      msg.sender, from, tokenId, _data);\n    return (retval == _ERC721_RECEIVED);\n  }\n\n  /**\n   * @dev Private function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param owner owner of the token\n   * @param tokenId uint256 ID of the token to be transferred\n   */\n  function _clearApproval(address owner, uint256 tokenId) private {\n    require(ownerOf(tokenId) == owner);\n    if (_tokenApprovals[tokenId] != address(0)) {\n      _tokenApprovals[tokenId] = address(0);\n    }\n  }\n}\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Enumerable is IERC721 {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address owner,\n    uint256 index\n  )\n    public\n    view\n    returns (uint256 tokenId);\n\n  function tokenByIndex(uint256 index) public view returns (uint256);\n}\n\npragma solidity ^0.4.24;\n\n\n\n\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) private _ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) private _ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] private _allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) private _allTokensIndex;\n\n  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  /**\n   * @dev Constructor function\n   */\n  constructor() public {\n    // register the supported interface to conform to ERC721 via ERC165\n    _registerInterface(_InterfaceId_ERC721Enumerable);\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param owner address owning the tokens list to be accessed\n   * @param index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address owner,\n    uint256 index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(index < balanceOf(owner));\n    return _ownedTokens[owner][index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return _allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 index) public view returns (uint256) {\n    require(index < totalSupply());\n    return _allTokens[index];\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * This function is internal due to language limitations, see the note in ERC721.sol.\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n   * @param to address representing the new owner of the given token ID\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function _addTokenTo(address to, uint256 tokenId) internal {\n    super._addTokenTo(to, tokenId);\n    uint256 length = _ownedTokens[to].length;\n    _ownedTokens[to].push(tokenId);\n    _ownedTokensIndex[tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * This function is internal due to language limitations, see the note in ERC721.sol.\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n   * and doesn't clear approvals.\n   * @param from address representing the previous owner of the given token ID\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n    super._removeTokenFrom(from, tokenId);\n\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n    // then delete the last slot.\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\n    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\n\n    _ownedTokens[from][tokenIndex] = lastToken;\n    // This also deletes the contents at the last position of the array\n    _ownedTokens[from].length--;\n\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    _ownedTokensIndex[tokenId] = 0;\n    _ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param to address the beneficiary that will own the minted token\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address to, uint256 tokenId) internal {\n    super._mint(to, tokenId);\n\n    _allTokensIndex[tokenId] = _allTokens.length;\n    _allTokens.push(tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param owner owner of the token to burn\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address owner, uint256 tokenId) internal {\n    super._burn(owner, tokenId);\n\n    // Reorg all tokens array\n    uint256 tokenIndex = _allTokensIndex[tokenId];\n    uint256 lastTokenIndex = _allTokens.length.sub(1);\n    uint256 lastToken = _allTokens[lastTokenIndex];\n\n    _allTokens[tokenIndex] = lastToken;\n    _allTokens[lastTokenIndex] = 0;\n\n    _allTokens.length--;\n    _allTokensIndex[tokenId] = 0;\n    _allTokensIndex[lastToken] = tokenIndex;\n  }\n}\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Metadata is IERC721 {\n  function name() external view returns (string);\n  function symbol() external view returns (string);\n  function tokenURI(uint256 tokenId) external view returns (string);\n}\n\npragma solidity ^0.4.24;\n\n\n\n\ncontract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\n  // Token name\n  string private _name;\n\n  // Token symbol\n  string private _symbol;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) private _tokenURIs;\n\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string name, string symbol) public {\n    _name = name;\n    _symbol = symbol;\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string) {\n    return _name;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string) {\n    return _symbol;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 tokenId) external view returns (string) {\n    require(_exists(tokenId));\n    return _tokenURIs[tokenId];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param tokenId uint256 ID of the token to set its URI\n   * @param uri string URI to assign\n   */\n  function _setTokenURI(uint256 tokenId, string uri) internal {\n    require(_exists(tokenId));\n    _tokenURIs[tokenId] = uri;\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param owner owner of the token to burn\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address owner, uint256 tokenId) internal {\n    super._burn(owner, tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\n      delete _tokenURIs[tokenId];\n    }\n  }\n}\n\npragma solidity ^0.4.24;\n\n\n\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\n  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n    public\n  {\n  }\n}\n\npragma solidity ^0.4.24;\n\n\n\ncontract CryptoMotors is Ownable, ERC721Full {\n    string public name = \"CryptoMotors\";\n    string public symbol = \"CM\";\n    \n    event CryptoMotorCreated(address receiver, uint cryptoMotorId, string uri);\n    event CryptoMotorTransferred(address from, address to, uint cryptoMotorId, string uri);\n    event CryptoMotorUriChanged(uint cryptoMotorId, string uri);\n    event CryptoMotorDnaChanged(uint cryptoMotorId, string dna);\n    // Structs\n\n    struct CryptoMotor {\n        string dna;\n        uint32 level;\n        uint32 readyTime;\n        uint32 winCount;\n        uint32 lossCount;\n        address designerWallet;\n    }\n\n    CryptoMotor[] public cryptoMotors;\n\n    constructor() ERC721Full(name, symbol) public { }\n\n    // Management methods\n    function create(address owner, string _uri, string _dna, address _designerWallet) public onlyOwner returns (uint) {\n        uint id = cryptoMotors.push(CryptoMotor(_dna, 1, uint32(now + 1 days), 0, 0, _designerWallet)) - 1;\n        _mint(owner, id);\n        _setTokenURI(id, _uri);\n        emit CryptoMotorCreated(owner, id, _uri);\n        return id;\n    }\n\n    function setTokenURI(uint256 _cryptoMotorId, string _uri) public onlyOwner {\n        _setTokenURI(_cryptoMotorId, _uri);\n        emit CryptoMotorUriChanged(_cryptoMotorId, _uri);\n    }\n    \n    function setCryptoMotorDna(uint _cryptoMotorId, string _dna) public onlyOwner {\n        CryptoMotor storage cm = cryptoMotors[_cryptoMotorId];\n        cm.dna = _dna;\n        emit CryptoMotorDnaChanged(_cryptoMotorId, _dna);\n    }\n\n    function setAttributes(uint256 _cryptoMotorId, uint32 _level, uint32 _readyTime, uint32 _winCount, uint32 _lossCount) public onlyOwner {\n        CryptoMotor storage cm = cryptoMotors[_cryptoMotorId];\n        cm.level = _level;\n        cm.readyTime = _readyTime;\n        cm.winCount = _winCount;\n        cm.lossCount = _lossCount;\n    }\n\n    function withdraw() external onlyOwner {\n        msg.sender.transfer(address(this).balance);\n    }\n\n    // User methods\n    function getDesignerWallet(uint256 _cryptoMotorId) public view returns (address) {\n        return cryptoMotors[_cryptoMotorId].designerWallet;\n    }\n\n    function setApprovalsForAll(address[] _addresses, bool approved) public {\n        for(uint i; i < _addresses.length; i++) {\n            setApprovalForAll(_addresses[i], approved);\n        }\n    }\n\n}\n\npragma solidity ^0.4.24;\n\n\n\ncontract CryptoMotorsMarketV1 is Ownable {\n    \n    CryptoMotors token;\n\n    event CryptoMotorForSale(uint cryptoMotorId, uint startPrice, uint endPrice, uint duration, address seller);\n    event CryptoMotorSold(uint cryptoMotorId, uint priceSold, address seller, address buyer);\n    event CryptoMotorSaleCancelled(uint cryptoMotorId, address seller);\n    event CryptoMotorSaleFinished(uint cryptoMotorId, address seller);\n    event CryptoMotorGift(uint cryptoMotorId, address from, address to);\n    \n    // Note: It is known that there are roughly 15 seconds between every block generation in Ethereum\n    uint8 SECONDS_PER_BLOCK = 15;\n\n    uint16 public ownerCutPercentage;\n    uint16 public designerCutPercentage;\n    \n    mapping (uint => Sale) cryptoMotorToSale;\n\n    struct Sale {\n        address seller;\n        uint cryptoMotorId;\n        uint startPrice;\n        uint endPrice;\n        uint startBlock;\n        uint endBlock;\n        uint duration;\n        bool exists;\n    }\n\n    constructor(address _cryptoMotorsToken) public { \n        token = CryptoMotors(_cryptoMotorsToken);\n    }\n\n    // Modifiers\n\n    modifier cryptoMotorForSale(uint _cryptoMotorId) {\n        require(cryptoMotorToSale[_cryptoMotorId].exists == true, \"The car is not for auction\");\n        _;\n    }\n\n    modifier cryptoMotorNotForSale(uint _cryptoMotorId) {\n        require(cryptoMotorToSale[_cryptoMotorId].exists == false, \"The car is on auction\");\n        _;\n    }\n\n    function setOwnerCut(uint16 _ownerCutPercentage) public onlyOwner {\n        ownerCutPercentage = _ownerCutPercentage;\n    }\n\n    function setDesignerCut(uint16 _designerCutPercentage) public onlyOwner {\n        designerCutPercentage = _designerCutPercentage;\n    }\n\n    function sendGift(uint _cryptoMotorId, address _account) public cryptoMotorNotForSale(_cryptoMotorId) {\n        require(token.isApprovedForAll(msg.sender, address(this)), \"This contract needs approval from the owner to operate with his cars\");\n        require(token.ownerOf(_cryptoMotorId) == msg.sender, \"Only the owner can send the car as a gift\");\n        token.safeTransferFrom(msg.sender, _account, _cryptoMotorId);\n        emit CryptoMotorGift(_cryptoMotorId, msg.sender, _account);\n    }\n\n    // Auction management methods\n    function createSale(uint _cryptoMotorId, uint _startPrice, uint _endPrice, uint _duration) public cryptoMotorNotForSale(_cryptoMotorId) {\n        require(token.isApprovedForAll(msg.sender, address(this)), \"This contract needs approval from the owner to operate with his cars\");\n        require(token.ownerOf(_cryptoMotorId) == msg.sender, \"Only the owner can create an auction for the car\");\n\n        if (_startPrice > _endPrice) {\n            require(_endPrice >= 10000000000000, \"Minimum end price must be above 10000000000000 wei\");\n        } else {\n            require(_startPrice >= 10000000000000, \"Minimum start price must be above 10000000000000 wei\");\n        }\n\n        if (_duration != 0 || _startPrice != _endPrice) {\n            require(_duration >= 86400 && _duration <= 7776000, \"Auction duration must be between 1 and 90 days\");\n        }\n\n        Sale storage sale = cryptoMotorToSale[_cryptoMotorId];\n        sale.seller = msg.sender;\n        sale.cryptoMotorId = _cryptoMotorId;\n        sale.startPrice = _startPrice;\n        sale.endPrice = _endPrice;\n        sale.startBlock = block.number;\n        sale.endBlock = block.number + (_duration / SECONDS_PER_BLOCK);\n        sale.duration = _duration;\n        sale.exists = true;\n\n        emit CryptoMotorForSale(_cryptoMotorId, _startPrice, _endPrice, _duration, msg.sender);\n    }\n\n    function buy(uint _cryptoMotorId) public payable cryptoMotorForSale(_cryptoMotorId) {\n        Sale storage sale = cryptoMotorToSale[_cryptoMotorId];\n        \n        require(msg.sender != sale.seller, \"Cant bid on your own sale\");\n\n        if (sale.duration != 0) {\n            require(block.number > sale.startBlock && block.number < sale.endBlock, \"Sale has finished already\");\n        }\n\n        uint256 price = _currentPrice(sale);\n        address seller = sale.seller;\n\n        require(msg.value >= price, \"Ether sent is not enough for the current price\");\n        \n        uint256 sellerCut = msg.value;\n\n        delete cryptoMotorToSale[_cryptoMotorId];\n\n        if (sale.startPrice == sale.endPrice && msg.value > price) {\n            uint refund = msg.value - price;\n            sellerCut = price;\n            msg.sender.transfer(refund);\n        }\n\n        if (seller == owner()) {\n            address designerWallet = token.getDesignerWallet(_cryptoMotorId);\n            uint256 designerCut = sellerCut * designerCutPercentage / 10000;\n            designerWallet.transfer(designerCut);\n        } else {\n            uint256 ownerCut = sellerCut * ownerCutPercentage / 10000;\n            sellerCut = sellerCut - ownerCut;\n            seller.transfer(sellerCut);\n        }\n\n        token.safeTransferFrom(seller, msg.sender, _cryptoMotorId);\n        \n        emit CryptoMotorSold(_cryptoMotorId, msg.value, seller, msg.sender);\n    }\n\n    function _currentPrice(Sale storage _sale) internal view returns (uint256) {\n        if (_sale.startPrice == _sale.endPrice) {\n            return _sale.startPrice;\n        }\n\n        uint256 secondsPassed = 0;\n\n        if (block.number > _sale.startBlock) {\n            secondsPassed = (block.number - _sale.startBlock) * SECONDS_PER_BLOCK;\n        }\n\n        int256 priceChange = (int256(_sale.endPrice) - int256(_sale.startPrice)) * int256(secondsPassed) / int256(_sale.duration);\n        \n        return uint256(int256(_sale.startPrice) + priceChange);\n    }\n\n    function getCurrentPrice(uint _cryptoMotorId) public cryptoMotorForSale(_cryptoMotorId) view returns (uint256) {\n        return _currentPrice(cryptoMotorToSale[_cryptoMotorId]);\n    }\n\n    function finishSale(uint _cryptoMotorId) public cryptoMotorForSale(_cryptoMotorId) {\n        require(token.ownerOf(_cryptoMotorId) == msg.sender, \"Only the owner can finish the sale\");\n        Sale memory sale = cryptoMotorToSale[_cryptoMotorId];\n        require(block.number > sale.endBlock, \"Sale has not finished yet\");\n        delete cryptoMotorToSale[_cryptoMotorId];\n        emit CryptoMotorSaleFinished(_cryptoMotorId, msg.sender);\n    }\n\n    function cancelSale(uint _cryptoMotorId) public cryptoMotorForSale(_cryptoMotorId) {\n        require(token.ownerOf(_cryptoMotorId) == msg.sender, \"Only the owner can cancel the sale\");\n        Sale memory sale = cryptoMotorToSale[_cryptoMotorId];\n        require(block.number > sale.startBlock && block.number < sale.endBlock, \"Sale has finished already\");\n        delete cryptoMotorToSale[_cryptoMotorId];\n        emit CryptoMotorSaleCancelled(_cryptoMotorId, msg.sender);\n    }\n\n    function withdraw() external onlyOwner {\n        msg.sender.transfer(address(this).balance);\n    }\n\n    // ONLY FOR TESTING PURPOSES\n    function _changeStartBlock(uint _cryptoMotorId, uint _startBlock) public onlyOwner {\n        Sale storage sale = cryptoMotorToSale[_cryptoMotorId];\n        sale.startBlock = _startBlock;\n    }\n    \n    function _changeEndBlock(uint _cryptoMotorId, uint _endBlock) public onlyOwner {\n        Sale storage sale = cryptoMotorToSale[_cryptoMotorId];\n        sale.endBlock = _endBlock;\n    }\n    // ONLY FOR TESTING PURPOSES\n}",
  "bytecode": "6080604052600f600160146101000a81548160ff021916908360ff16021790555034801561002c57600080fd5b5060405160208061297383398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506128178061015c6000396000f3006080604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063060bbee1146100f65780632061a952146101275780633ccfd60b14610154578063418531541461016b57806355a8bb08146101a25780635b1fe0cb146101d5578063715018a614610222578063747512d8146102395780638174b6d7146102705780638319da07146102a35780638da5cb5b146102d45780638f32d59b1461032b578063a52fb13a1461035a578063bd94b005146103a5578063c55d0f56146103d2578063d96a094a14610413578063f2fde38b14610433575b600080fd5b34801561010257600080fd5b50610125600480360381019080803561ffff169060200190929190505050610476565b005b34801561013357600080fd5b50610152600480360381019080803590602001909291905050506104a9565b005b34801561016057600080fd5b50610169610920565b005b34801561017757600080fd5b506101a06004803603810190808035906020019092919080359060200190929190505050610993565b005b3480156101ae57600080fd5b506101b76109cb565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156101e157600080fd5b5061022060048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109df565b005b34801561022e57600080fd5b50610237610fb4565b005b34801561024557600080fd5b5061026e6004803603810190808035906020019092919080359060200190929190505050611086565b005b34801561027c57600080fd5b506102856110be565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156102af57600080fd5b506102d2600480360381019080803561ffff1690602001909291905050506110d2565b005b3480156102e057600080fd5b506102e9611105565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561033757600080fd5b5061034061112e565b604051808215151515815260200191505060405180910390f35b34801561036657600080fd5b506103a360048036038101908080359060200190929190803590602001909291908035906020019092919080359060200190929190505050611185565b005b3480156103b157600080fd5b506103d060048036038101908080359060200190929190505050611918565b005b3480156103de57600080fd5b506103fd60048036038101908080359060200190929190505050611d9e565b6040518082815260200191505060405180910390f35b61043160048036038101908080359060200190929190505050611e63565b005b34801561043f57600080fd5b50610474600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506125f6565b005b61047e61112e565b151561048957600080fd5b80600160176101000a81548161ffff021916908361ffff16021790555050565b6104b161278d565b81600115156002600083815260200190815260200160002060070160009054906101000a900460ff161515141515610551576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f54686520636172206973206e6f7420666f722061756374696f6e00000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156105f957600080fd5b505af115801561060d573d6000803e3d6000fd5b505050506040513d602081101561062357600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161415156106e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f4f6e6c7920746865206f776e65722063616e2066696e6973682074686520736181526020017f6c6500000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6002600084815260200190815260200160002061010060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff16151515158152505091508160a001514311151561082f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f53616c6520686173206e6f742066696e6973686564207965740000000000000081525060200191505060405180910390fd5b60026000848152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160009055600282016000905560038201600090556004820160009055600582016000905560068201600090556007820160006101000a81549060ff021916905550507fb54cd7ca930aa119bbd41ed2f0dc6bee713aeffa27feb8c6613b2ff648215e3a8333604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1505050565b61092861112e565b151561093357600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610990573d6000803e3d6000fd5b50565b600061099d61112e565b15156109a857600080fd5b600260008481526020019081526020016000209050818160050181905550505050565b600160179054906101000a900461ffff1681565b81600015156002600083815260200190815260200160002060070160009054906101000a900460ff161515141515610a7f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f54686520636172206973206f6e2061756374696f6e000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e985e9c533306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b158015610b7057600080fd5b505af1158015610b84573d6000803e3d6000fd5b505050506040513d6020811015610b9a57600080fd5b81019080805190602001909291905050501515610c6b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260448152602001807f5468697320636f6e7472616374206e6565647320617070726f76616c2066726f81526020017f6d20746865206f776e657220746f206f7065726174652077697468206869732081526020017f636172730000000000000000000000000000000000000000000000000000000081525060600191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015610d1357600080fd5b505af1158015610d27573d6000803e3d6000fd5b505050506040513d6020811015610d3d57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16141515610dff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f4f6e6c7920746865206f776e65722063616e2073656e6420746865206361722081526020017f617320612067696674000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3384866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015610ef857600080fd5b505af1158015610f0c573d6000803e3d6000fd5b505050507f740527b6ce423ee4ece2798bb4e5073f03820ded9bf4779c06868568d077ecbd833384604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1505050565b610fbc61112e565b1515610fc757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600061109061112e565b151561109b57600080fd5b600260008481526020019081526020016000209050818160040181905550505050565b600160159054906101000a900461ffff1681565b6110da61112e565b15156110e557600080fd5b80600160156101000a81548161ffff021916908361ffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600084600015156002600083815260200190815260200160002060070160009054906101000a900460ff161515141515611227576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f54686520636172206973206f6e2061756374696f6e000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e985e9c533306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561131857600080fd5b505af115801561132c573d6000803e3d6000fd5b505050506040513d602081101561134257600080fd5b81019080805190602001909291905050501515611413576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260448152602001807f5468697320636f6e7472616374206e6565647320617070726f76616c2066726f81526020017f6d20746865206f776e657220746f206f7065726174652077697468206869732081526020017f636172730000000000000000000000000000000000000000000000000000000081525060600191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e886040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156114bb57600080fd5b505af11580156114cf573d6000803e3d6000fd5b505050506040513d60208110156114e557600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161415156115a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f4f6e6c7920746865206f776e65722063616e2063726561746520616e2061756381526020017f74696f6e20666f7220746865206361720000000000000000000000000000000081525060400191505060405180910390fd5b83851115611658576509184e72a0008410151515611653576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001807f4d696e696d756d20656e64207072696365206d7573742062652061626f76652081526020017f313030303030303030303030303020776569000000000000000000000000000081525060400191505060405180910390fd5b6116fd565b6509184e72a00085101515156116fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001807f4d696e696d756d207374617274207072696365206d7573742062652061626f7681526020017f652031303030303030303030303030302077656900000000000000000000000081525060400191505060405180910390fd5b5b60008314158061170d5750838514155b156117c35762015180831015801561172857506276a7008311155b15156117c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f41756374696f6e206475726174696f6e206d757374206265206265747765656e81526020017f203120616e64203930206461797300000000000000000000000000000000000081525060400191505060405180910390fd5b5b600260008781526020019081526020016000209150338260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550858260010181905550848260020181905550838260030181905550438260040181905550600160149054906101000a900460ff1660ff168381151561185c57fe5b044301826005018190555082826006018190555060018260070160006101000a81548160ff0219169083151502179055507f415094309ac04040e65136538ba92cf31996f79aa04714a8c5b39817e836f1408686868633604051808681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060405180910390a1505050505050565b61192061278d565b81600115156002600083815260200190815260200160002060070160009054906101000a900460ff1615151415156119c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f54686520636172206973206e6f7420666f722061756374696f6e00000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015611a6857600080fd5b505af1158015611a7c573d6000803e3d6000fd5b505050506040513d6020811015611a9257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16141515611b54576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f4f6e6c7920746865206f776e65722063616e2063616e63656c2074686520736181526020017f6c6500000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6002600084815260200190815260200160002061010060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff1615151515815250509150816080015143118015611c3957508160a0015143105b1515611cad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f53616c65206861732066696e697368656420616c72656164790000000000000081525060200191505060405180910390fd5b60026000848152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160009055600282016000905560038201600090556004820160009055600582016000905560068201600090556007820160006101000a81549060ff021916905550507f2b92c90a8d7d6bbb24aeeb6c5604f5ea61197dc56abbd2104e56f599ee9636d18333604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1505050565b600081600115156002600083815260200190815260200160002060070160009054906101000a900460ff161515141515611e40576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f54686520636172206973206e6f7420666f722061756374696f6e00000000000081525060200191505060405180910390fd5b611e5b60026000858152602001908152602001600020612615565b915050919050565b60008060008060008060008088600115156002600083815260200190815260200160002060070160009054906101000a900460ff161515141515611f0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f54686520636172206973206e6f7420666f722061756374696f6e00000000000081525060200191505060405180910390fd5b600260008b815260200190815260200160002098508860000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515611fec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f43616e7420626964206f6e20796f7572206f776e2073616c650000000000000081525060200191505060405180910390fd5b60008960060154141515612085578860040154431180156120105750886005015443105b1515612084576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f53616c65206861732066696e697368656420616c72656164790000000000000081525060200191505060405180910390fd5b5b61208e89612615565b97508860000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169650873410151515612155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f45746865722073656e74206973206e6f7420656e6f75676820666f722074686581526020017f2063757272656e7420707269636500000000000000000000000000000000000081525060400191505060405180910390fd5b349550600260008b8152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160009055600282016000905560038201600090556004820160009055600582016000905560068201600090556007820160006101000a81549060ff02191690555050886003015489600201541480156121ef57508734115b156122445787340394508795503373ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050158015612242573d6000803e3d6000fd5b505b61224c611105565b73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614156123bf57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166390d76d7b8b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561231057600080fd5b505af1158015612324573d6000803e3d6000fd5b505050506040513d602081101561233a57600080fd5b81019080805190602001909291905050509350612710600160179054906101000a900461ffff1661ffff16870281151561237057fe5b0492508373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050501580156123b9573d6000803e3d6000fd5b50612432565b612710600160159054906101000a900461ffff1661ffff1687028115156123e257fe5b04915081860395508673ffffffffffffffffffffffffffffffffffffffff166108fc879081150290604051600060405180830381858888f19350505050158015612430573d6000803e3d6000fd5b505b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e88338d6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561252b57600080fd5b505af115801561253f573d6000803e3d6000fd5b505050507f3d74e22a080ab9b81c060801a955dd8bfbf2ed0ef36c4c4b03af4a2fdbc5e8668a348933604051808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390a150505050505050505050565b6125fe61112e565b151561260957600080fd5b61261281612693565b50565b6000806000836003015484600201541415612636578360020154925061268c565b60009150836004015443111561266457600160149054906101000a900460ff1660ff16846004015443030291505b83600601548285600201548660030154030281151561267f57fe5b0590508084600201540192505b5050919050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156126cf57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61010060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815250905600a165627a7a7230582045489889943d946657c80a8365ef47369421a30ffffc69e84c7150d2d9f0933e002900000000000000000000000030a2fa3c93fb9f93d1efeffd350c6a6bb62ba000",
  "constructorArguments": "00000000000000000000000030a2fa3c93fb9f93d1efeffd350c6a6bb62ba000"
}