{
  "address": "0x8768b7ad12ea89eb13a125404601501ccbf49899",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "UniswapReserve",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-17\n*/\n\npragma solidity 0.4.18;\n\n// File: contracts/ERC20Interface.sol\n\n// https://github.com/ethereum/EIPs/issues/20\ninterface ERC20 {\n    function totalSupply() public view returns (uint supply);\n    function balanceOf(address _owner) public view returns (uint balance);\n    function transfer(address _to, uint _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n    function approve(address _spender, uint _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\n    function decimals() public view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n// File: contracts/PermissionGroups.sol\n\ncontract PermissionGroups {\n\n    address public admin;\n    address public pendingAdmin;\n    mapping(address=>bool) internal operators;\n    mapping(address=>bool) internal alerters;\n    address[] internal operatorsGroup;\n    address[] internal alertersGroup;\n    uint constant internal MAX_GROUP_SIZE = 50;\n\n    function PermissionGroups() public {\n        admin = msg.sender;\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin);\n        _;\n    }\n\n    modifier onlyOperator() {\n        require(operators[msg.sender]);\n        _;\n    }\n\n    modifier onlyAlerter() {\n        require(alerters[msg.sender]);\n        _;\n    }\n\n    function getOperators () external view returns(address[]) {\n        return operatorsGroup;\n    }\n\n    function getAlerters () external view returns(address[]) {\n        return alertersGroup;\n    }\n\n    event TransferAdminPending(address pendingAdmin);\n\n    /**\n     * @dev Allows the current admin to set the pendingAdmin address.\n     * @param newAdmin The address to transfer ownership to.\n     */\n    function transferAdmin(address newAdmin) public onlyAdmin {\n        require(newAdmin != address(0));\n        TransferAdminPending(pendingAdmin);\n        pendingAdmin = newAdmin;\n    }\n\n    /**\n     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\n     * @param newAdmin The address to transfer ownership to.\n     */\n    function transferAdminQuickly(address newAdmin) public onlyAdmin {\n        require(newAdmin != address(0));\n        TransferAdminPending(newAdmin);\n        AdminClaimed(newAdmin, admin);\n        admin = newAdmin;\n    }\n\n    event AdminClaimed( address newAdmin, address previousAdmin);\n\n    /**\n     * @dev Allows the pendingAdmin address to finalize the change admin process.\n     */\n    function claimAdmin() public {\n        require(pendingAdmin == msg.sender);\n        AdminClaimed(pendingAdmin, admin);\n        admin = pendingAdmin;\n        pendingAdmin = address(0);\n    }\n\n    event AlerterAdded (address newAlerter, bool isAdd);\n\n    function addAlerter(address newAlerter) public onlyAdmin {\n        require(!alerters[newAlerter]); // prevent duplicates.\n        require(alertersGroup.length < MAX_GROUP_SIZE);\n\n        AlerterAdded(newAlerter, true);\n        alerters[newAlerter] = true;\n        alertersGroup.push(newAlerter);\n    }\n\n    function removeAlerter (address alerter) public onlyAdmin {\n        require(alerters[alerter]);\n        alerters[alerter] = false;\n\n        for (uint i = 0; i < alertersGroup.length; ++i) {\n            if (alertersGroup[i] == alerter) {\n                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\n                alertersGroup.length--;\n                AlerterAdded(alerter, false);\n                break;\n            }\n        }\n    }\n\n    event OperatorAdded(address newOperator, bool isAdd);\n\n    function addOperator(address newOperator) public onlyAdmin {\n        require(!operators[newOperator]); // prevent duplicates.\n        require(operatorsGroup.length < MAX_GROUP_SIZE);\n\n        OperatorAdded(newOperator, true);\n        operators[newOperator] = true;\n        operatorsGroup.push(newOperator);\n    }\n\n    function removeOperator (address operator) public onlyAdmin {\n        require(operators[operator]);\n        operators[operator] = false;\n\n        for (uint i = 0; i < operatorsGroup.length; ++i) {\n            if (operatorsGroup[i] == operator) {\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\n                operatorsGroup.length -= 1;\n                OperatorAdded(operator, false);\n                break;\n            }\n        }\n    }\n}\n\n// File: contracts/Withdrawable.sol\n\n/**\n * @title Contracts that should be able to recover tokens or ethers\n * @author Ilan Doron\n * @dev This allows to recover any tokens or Ethers received in a contract.\n * This will prevent any accidental loss of tokens.\n */\ncontract Withdrawable is PermissionGroups {\n\n    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\n\n    /**\n     * @dev Withdraw all ERC20 compatible tokens\n     * @param token ERC20 The address of the token contract\n     */\n    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\n        require(token.transfer(sendTo, amount));\n        TokenWithdraw(token, amount, sendTo);\n    }\n\n    event EtherWithdraw(uint amount, address sendTo);\n\n    /**\n     * @dev Withdraw Ethers\n     */\n    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\n        sendTo.transfer(amount);\n        EtherWithdraw(amount, sendTo);\n    }\n}\n\n// File: contracts/KyberReserveInterface.sol\n\n/// @title Kyber Reserve contract\ninterface KyberReserveInterface {\n\n    function trade(\n        ERC20 srcToken,\n        uint srcAmount,\n        ERC20 destToken,\n        address destAddress,\n        uint conversionRate,\n        bool validate\n    )\n        public\n        payable\n        returns(bool);\n\n    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) public view returns(uint);\n}\n\n// File: contracts/Utils.sol\n\n/// @title Kyber constants contract\ncontract Utils {\n\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n    uint  constant internal PRECISION = (10**18);\n    uint  constant internal MAX_QTY   = (10**28); // 10B tokens\n    uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\n    uint  constant internal MAX_DECIMALS = 18;\n    uint  constant internal ETH_DECIMALS = 18;\n    mapping(address=>uint) internal decimals;\n\n    function setDecimals(ERC20 token) internal {\n        if (token == ETH_TOKEN_ADDRESS) decimals[token] = ETH_DECIMALS;\n        else decimals[token] = token.decimals();\n    }\n\n    function getDecimals(ERC20 token) internal view returns(uint) {\n        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\n        uint tokenDecimals = decimals[token];\n        // technically, there might be token with decimals 0\n        // moreover, very possible that old tokens have decimals 0\n        // these tokens will just have higher gas fees.\n        if(tokenDecimals == 0) return token.decimals();\n\n        return tokenDecimals;\n    }\n\n    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n        require(srcQty <= MAX_QTY);\n        require(rate <= MAX_RATE);\n\n        if (dstDecimals >= srcDecimals) {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\n        } else {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\n        }\n    }\n\n    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n        require(dstQty <= MAX_QTY);\n        require(rate <= MAX_RATE);\n        \n        //source quantity is rounded up. to avoid dest quantity being too low.\n        uint numerator;\n        uint denominator;\n        if (srcDecimals >= dstDecimals) {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\n            denominator = rate;\n        } else {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            numerator = (PRECISION * dstQty);\n            denominator = (rate * (10**(dstDecimals - srcDecimals)));\n        }\n        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\n    }\n}\n\n// File: contracts/Utils2.sol\n\ncontract Utils2 is Utils {\n\n    /// @dev get the balance of a user.\n    /// @param token The token type\n    /// @return The balance\n    function getBalance(ERC20 token, address user) public view returns(uint) {\n        if (token == ETH_TOKEN_ADDRESS)\n            return user.balance;\n        else\n            return token.balanceOf(user);\n    }\n\n    function getDecimalsSafe(ERC20 token) internal returns(uint) {\n\n        if (decimals[token] == 0) {\n            setDecimals(token);\n        }\n\n        return decimals[token];\n    }\n\n    function calcDestAmount(ERC20 src, ERC20 dest, uint srcAmount, uint rate) internal view returns(uint) {\n        return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\n    }\n\n    function calcSrcAmount(ERC20 src, ERC20 dest, uint destAmount, uint rate) internal view returns(uint) {\n        return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\n    }\n\n    function calcRateFromQty(uint srcAmount, uint destAmount, uint srcDecimals, uint dstDecimals)\n        internal pure returns(uint)\n    {\n        require(srcAmount <= MAX_QTY);\n        require(destAmount <= MAX_QTY);\n\n        if (dstDecimals >= srcDecimals) {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            return (destAmount * PRECISION / ((10 ** (dstDecimals - srcDecimals)) * srcAmount));\n        } else {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            return (destAmount * PRECISION * (10 ** (srcDecimals - dstDecimals)) / srcAmount);\n        }\n    }\n}\n\n// File: contracts/uniswap/UniswapReserve.sol\n\ninterface UniswapExchange {\n    function ethToTokenSwapInput(\n        uint256 min_tokens,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (uint256  tokens_bought);\n\n    function tokenToEthSwapInput(\n        uint256 tokens_sold,\n        uint256 min_eth,\n        uint256 deadline\n    )\n        external\n        returns (uint256  eth_bought);\n\n    function getEthToTokenInputPrice(\n        uint256 eth_sold\n    )\n        external\n        view\n        returns (uint256 tokens_bought);\n\n    function getTokenToEthInputPrice(\n        uint256 tokens_sold\n    )\n        external\n        view\n        returns (uint256 eth_bought);\n}\n\n\ninterface UniswapFactory {\n    function getExchange(address token) external view returns (address exchange);\n}\n\n\ncontract UniswapReserve is KyberReserveInterface, Withdrawable, Utils2 {\n    // Parts per 10000\n    uint public constant DEFAULT_FEE_BPS = 25;\n\n    UniswapFactory public uniswapFactory;\n    address public kyberNetwork;\n\n    uint public feeBps = DEFAULT_FEE_BPS;\n\n    // Uniswap exchange contract for every listed token\n    // token -> exchange\n    mapping (address => address) public tokenExchange;\n\n    bool public tradeEnabled = true;\n\n    /**\n        Constructor\n    */\n    function UniswapReserve(\n        UniswapFactory _uniswapFactory,\n        address _admin,\n        address _kyberNetwork\n    )\n        public\n    {\n        require(address(_uniswapFactory) != 0);\n        require(_admin != 0);\n        require(_kyberNetwork != 0);\n\n        uniswapFactory = _uniswapFactory;\n        admin = _admin;\n        kyberNetwork = _kyberNetwork;\n    }\n\n    function() public payable {\n        // anyone can deposit ether\n    }\n\n    /**\n        Returns dest quantity / source quantity.\n    */\n    function getConversionRate(\n        ERC20 src,\n        ERC20 dest,\n        uint srcQty,\n        uint blockNumber\n    )\n        public\n        view\n        returns(uint)\n    {\n        // This makes the UNUSED warning go away.\n        blockNumber;\n\n        require(isValidTokens(src, dest));\n\n        if (!tradeEnabled) return 0;\n\n        ERC20 token;\n        if (src == ETH_TOKEN_ADDRESS) {\n            token = dest;\n        } else if (dest == ETH_TOKEN_ADDRESS) {\n            token = src;\n        } else {\n            // Should never arrive here - isValidTokens requires one side to be ETH\n            revert();\n        }\n\n        UniswapExchange exchange = UniswapExchange(tokenExchange[token]);\n\n        uint convertedQuantity;\n        if (src == ETH_TOKEN_ADDRESS) {\n            uint quantity = srcQty * (10000 - feeBps) / 10000;\n            convertedQuantity = exchange.getEthToTokenInputPrice(quantity);\n        } else {\n            convertedQuantity = exchange.getTokenToEthInputPrice(srcQty);\n            convertedQuantity = convertedQuantity * (10000 - feeBps) / 10000;\n        }\n\n        return calcRateFromQty(\n            srcQty, /* srcAmount */\n            convertedQuantity, /* destAmount */\n            getDecimals(src), /* srcDecimals */\n            getDecimals(dest) /* dstDecimals */\n        );\n    }\n\n    event TradeExecute(\n        address indexed sender,\n        address src,\n        uint srcAmount,\n        address destToken,\n        uint destAmount,\n        address destAddress\n    );\n\n    /**\n      conversionRate: expected conversion rate should be >= this value.\n     */\n    function trade(\n        ERC20 srcToken,\n        uint srcAmount,\n        ERC20 destToken,\n        address destAddress,\n        uint conversionRate,\n        bool validate\n    )\n        public\n        payable\n        returns(bool)\n    {\n        // Not using this variable that is part of the interface.\n        validate;\n\n        require(tradeEnabled);\n        require(msg.sender == kyberNetwork);\n        require(isValidTokens(srcToken, destToken));\n\n        uint expectedConversionRate = getConversionRate(\n            srcToken,\n            destToken,\n            srcAmount,\n            0 /* blockNumber */\n        );\n        require(expectedConversionRate <= conversionRate);\n\n        uint destAmount;\n        UniswapExchange exchange;\n        if (srcToken == ETH_TOKEN_ADDRESS) {\n            require(srcAmount == msg.value);\n\n            // Fees in ETH\n            uint quantity = srcAmount * (10000 - feeBps) / 10000;\n            exchange = UniswapExchange(tokenExchange[destToken]);\n            destAmount = exchange.ethToTokenSwapInput.value(quantity)(\n                0,\n                2 ** 255 /* deadline */\n            );\n            require(destToken.transfer(destAddress, destAmount));\n        } else {\n            require(msg.value == 0);\n            require(srcToken.transferFrom(msg.sender, address(this), srcAmount));\n\n            exchange = UniswapExchange(tokenExchange[srcToken]);\n            destAmount = exchange.tokenToEthSwapInput(\n                srcAmount,\n                0,\n                2 ** 255 /* deadline */\n            );\n            // Fees in ETH\n            destAmount = destAmount * (10000 - feeBps) / 10000;\n            destAddress.transfer(destAmount);\n        }\n\n        TradeExecute(\n            msg.sender, /* sender */\n            srcToken, /* src */\n            srcAmount, /* srcAmount */\n            destToken, /* destToken */\n            destAmount, /* destAmount */\n            destAddress /* destAddress */\n        );\n        return true;\n    }\n\n    event FeeUpdated(\n        uint bps\n    );\n\n    function setFee(\n        uint bps\n    )\n        public\n        onlyAdmin\n    {\n        require(bps <= 10000);\n\n        feeBps = bps;\n\n        FeeUpdated(bps);\n    }\n\n    event TokenListed(\n        ERC20 token,\n        UniswapExchange exchange\n    );\n\n    function listToken(ERC20 token)\n        public\n        onlyAdmin\n    {\n        require(address(token) != 0);\n\n        UniswapExchange uniswapExchange = UniswapExchange(\n            uniswapFactory.getExchange(token)\n        );\n        tokenExchange[token] = uniswapExchange;\n        setDecimals(token);\n\n        require(token.approve(uniswapExchange, 2**255));\n\n        TokenListed(token, uniswapExchange);\n    }\n\n    event TokenDelisted(ERC20 token);\n\n    function delistToken(ERC20 token)\n        public\n        onlyAdmin\n    {\n        require(tokenExchange[token] != 0);\n        tokenExchange[token] = 0;\n\n\n        TokenDelisted(token);\n    }\n\n    function isValidTokens(\n        ERC20 src,\n        ERC20 dest\n    )\n        public\n        view\n        returns(bool)\n    {\n        return (\n            (src == ETH_TOKEN_ADDRESS && tokenExchange[dest] != 0) ||\n            (tokenExchange[src] != 0 && dest == ETH_TOKEN_ADDRESS)\n        );\n    }\n\n    event TradeEnabled(\n        bool enable\n    );\n\n    function enableTrade()\n        public\n        onlyAdmin\n        returns(bool)\n    {\n        tradeEnabled = true;\n        TradeEnabled(true);\n        return true;\n    }\n\n    function disableTrade()\n        public\n        onlyAlerter\n        returns(bool)\n    {\n        tradeEnabled = false;\n        TradeEnabled(false);\n        return true;\n    }\n\n    event KyberNetworkSet(\n        address kyberNetwork\n    );\n\n    function setKyberNetwork(\n        address _kyberNetwork\n    )\n        public\n        onlyAdmin\n    {\n        require(_kyberNetwork != 0);\n        kyberNetwork = _kyberNetwork;\n        KyberNetworkSet(kyberNetwork);\n    }\n}",
  "bytecode": "60606040526019600955600b805460ff19166001179055341561002157600080fd5b604051606080611d3283398101604052808051919060200180519190602001805160008054600160a060020a03191633600160a060020a039081169190911790915590925084161515905061007557600080fd5b600160a060020a038216151561008a57600080fd5b600160a060020a038116151561009f57600080fd5b60078054600160a060020a03948516600160a060020a031991821617909155600080549385169382169390931790925560088054919093169116179055611c47806100eb6000396000f30060606040526004361061015a5763ffffffff60e060020a60003504166299d386811461015c57806301a12fd3146101835780630dd94b96146101a25780631fc1e25f146101dd57806324a9d853146101fc578063267822471461022157806327a099d81461023457806333d8262c1461029a5780633ccdbb28146102ad578063408ee7fe146102d657806354a325a6146102f55780636940030f1461031457806369fe0e2d146103275780636cf698111461033d57806375829def1461036957806377f50f97146103885780637acc86781461039b5780637be98598146103ba5780637c423f54146103df5780637cd44272146103f25780638bdb2afa1461041d5780639870d7fe14610430578063abffc9ac1461044f578063ac8a584a1461046e578063b78b842d1461048d578063ce56c454146104a0578063d4fac45d146104c2578063d621e813146104e7578063f851a440146104fa575b005b341561016757600080fd5b61016f61050d565b604051901515815260200160405180910390f35b341561018e57600080fd5b61015a600160a060020a0360043516610575565b34156101ad57600080fd5b6101c1600160a060020a03600435166106e5565b604051600160a060020a03909116815260200160405180910390f35b34156101e857600080fd5b61015a600160a060020a0360043516610700565b341561020757600080fd5b61020f6108af565b60405190815260200160405180910390f35b341561022c57600080fd5b6101c16108b5565b341561023f57600080fd5b6102476108c4565b60405160208082528190810183818151815260200191508051906020019060200280838360005b8381101561028657808201518382015260200161026e565b505050509050019250505060405180910390f35b34156102a557600080fd5b61020f61092c565b34156102b857600080fd5b61015a600160a060020a036004358116906024359060443516610931565b34156102e157600080fd5b61015a600160a060020a0360043516610a28565b341561030057600080fd5b61015a600160a060020a0360043516610b24565b341561031f57600080fd5b61016f610bb6565b341561033257600080fd5b61015a600435610c23565b61016f600160a060020a03600435811690602435906044358116906064351660843560a4351515610c88565b341561037457600080fd5b61015a600160a060020a0360043516611033565b341561039357600080fd5b61015a6110ce565b34156103a657600080fd5b61015a600160a060020a0360043516611168565b34156103c557600080fd5b61016f600160a060020a036004358116906024351661124a565b34156103ea57600080fd5b6102476112e5565b34156103fd57600080fd5b61020f600160a060020a036004358116906024351660443560643561134b565b341561042857600080fd5b6101c1611539565b341561043b57600080fd5b61015a600160a060020a0360043516611548565b341561045a57600080fd5b61015a600160a060020a0360043516611618565b341561047957600080fd5b61015a600160a060020a03600435166116c1565b341561049857600080fd5b6101c161182d565b34156104ab57600080fd5b61015a600435600160a060020a036024351661183c565b34156104cd57600080fd5b61020f600160a060020a03600435811690602435166118cf565b34156104f257600080fd5b61016f611980565b341561050557600080fd5b6101c1611989565b6000805433600160a060020a0390811691161461052957600080fd5b600b805460ff191660019081179091557f7d7f00509dd73ac4449f698ae75ccc797895eff5fa9d446d3df387598a26e73590604051901515815260200160405180910390a15060015b90565b6000805433600160a060020a0390811691161461059157600080fd5b600160a060020a03821660009081526003602052604090205460ff1615156105b857600080fd5b50600160a060020a0381166000908152600360205260408120805460ff191690555b6005548110156106e15781600160a060020a03166005828154811015156105fd57fe5b600091825260209091200154600160a060020a031614156106d95760058054600019810190811061062a57fe5b60009182526020909120015460058054600160a060020a03909216918390811061065057fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600580549061068c906000198301611bc2565b507f5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762826000604051600160a060020a039092168252151560208201526040908101905180910390a16106e1565b6001016105da565b5050565b600a60205260009081526040902054600160a060020a031681565b6000805433600160a060020a0390811691161461071c57600080fd5b600160a060020a038216151561073157600080fd5b600754600160a060020a03166306f2bf628360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561078a57600080fd5b6102c65a03f1151561079b57600080fd5b5050506040518051600160a060020a038481166000908152600a602052604090208054600160a060020a03191691831691909117905591506107de905082611998565b81600160a060020a031663095ea7b38260ff60020a60006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561083f57600080fd5b6102c65a03f1151561085057600080fd5b50505060405180519050151561086557600080fd5b7f99d2b755eb38920131acb332adf086ea38d15009f223c21f3aa978d6ab2347868282604051600160a060020a039283168152911660208201526040908101905180910390a15050565b60095481565b600154600160a060020a031681565b6108cc611beb565b600480548060200260200160405190810160405280929190818152602001828054801561092257602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610904575b5050505050905090565b601981565b60005433600160a060020a0390811691161461094c57600080fd5b82600160a060020a031663a9059cbb828460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156109a957600080fd5b6102c65a03f115156109ba57600080fd5b5050506040518051905015156109cf57600080fd5b7f72cb8a894ddb372ceec3d2a7648d86f17d5a15caae0e986c53109b8a9a9385e6838383604051600160a060020a03938416815260208101929092529091166040808301919091526060909101905180910390a1505050565b60005433600160a060020a03908116911614610a4357600080fd5b600160a060020a03811660009081526003602052604090205460ff1615610a6957600080fd5b60055460329010610a7957600080fd5b7f5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762816001604051600160a060020a039092168252151560208201526040908101905180910390a1600160a060020a0381166000908152600360205260409020805460ff191660019081179091556005805490918101610af88382611bc2565b5060009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055565b60005433600160a060020a03908116911614610b3f57600080fd5b600160a060020a0381161515610b5457600080fd5b60088054600160a060020a031916600160a060020a0383811691909117918290557f38622430bb6defd4452b087e8d0b4a6d1c4d35c179c2d7d875d4abb272b9d88b9116604051600160a060020a03909116815260200160405180910390a150565b600160a060020a03331660009081526003602052604081205460ff161515610bdd57600080fd5b600b805460ff191690557f7d7f00509dd73ac4449f698ae75ccc797895eff5fa9d446d3df387598a26e7356000604051901515815260200160405180910390a150600190565b60005433600160a060020a03908116911614610c3e57600080fd5b612710811115610c4d57600080fd5b60098190557f8c4d35e54a3f2ef1134138fd8ea3daee6a3c89e10d2665996babdf70261e2c768160405190815260200160405180910390a150565b600b54600090819081908190819060ff161515610ca457600080fd5b60085433600160a060020a03908116911614610cbf57600080fd5b610cc98b8a61124a565b1515610cd457600080fd5b610ce18b8a8c600061134b565b935086841115610cf057600080fd5b600160a060020a038b1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610e4657348a14610d2157600080fd5b5050600954600160a060020a038881166000908152600a602052604080822054909216926127109081038c020491839163f39b5b9b9184919060ff60020a908290516020015260405160e060020a63ffffffff8616028152600481019290925260248201526044016020604051808303818588803b1515610da157600080fd5b6125ee5a03f11515610db257600080fd5b505050506040518051935050600160a060020a03891663a9059cbb898560006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610e1b57600080fd5b6102c65a03f11515610e2c57600080fd5b505050604051805190501515610e4157600080fd5b610fb5565b3415610e5157600080fd5b8a600160a060020a03166323b872dd33308d60006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515610ebb57600080fd5b6102c65a03f11515610ecc57600080fd5b505050604051805190501515610ee157600080fd5b600160a060020a03808c166000908152600a602052604080822054909216935083916395e3c50b918d9160ff60020a908290516020015260405160e060020a63ffffffff8616028152600481019390935260248301919091526044820152606401602060405180830381600087803b1515610f5b57600080fd5b6102c65a03f11515610f6c57600080fd5b505050604051805160095461271090810390910204935050600160a060020a0388166108fc84150284604051600060405180830381858888f193505050501515610fb557600080fd5b33600160a060020a03167fea9415385bae08fe9f6dc457b02577166790cde83bb18cc340aac6cb81b824de8c8c8c878d604051600160a060020a039586168152602081019490945291841660408085019190915260608401919091529216608082015260a001905180910390a25060019a9950505050505050505050565b60005433600160a060020a0390811691161461104e57600080fd5b600160a060020a038116151561106357600080fd5b6001547f3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc4090600160a060020a0316604051600160a060020a03909116815260200160405180910390a160018054600160a060020a031916600160a060020a0392909216919091179055565b60015433600160a060020a039081169116146110e957600080fd5b6001546000547f65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed91600160a060020a039081169116604051600160a060020a039283168152911660208201526040908101905180910390a16001805460008054600160a060020a0319908116600160a060020a03841617909155169055565b60005433600160a060020a0390811691161461118357600080fd5b600160a060020a038116151561119857600080fd5b7f3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc4081604051600160a060020a03909116815260200160405180910390a16000547f65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed908290600160a060020a0316604051600160a060020a039283168152911660208201526040908101905180910390a160008054600160a060020a031916600160a060020a0392909216919091179055565b6000600160a060020a03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1480156112915750600160a060020a038083166000908152600a60205260409020541615155b806112dc5750600160a060020a038084166000908152600a602052604090205416158015906112dc5750600160a060020a03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b90505b92915050565b6112ed611beb565b600580548060200260200160405190810160405280929190818152602001828054801561092257602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610904575050505050905090565b600080600080600061135d898961124a565b151561136857600080fd5b600b5460ff16151561137d576000945061152d565b600160a060020a03891673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156113aa578793506113dc565b600160a060020a03881673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156113d7578893506113dc565b600080fd5b600160a060020a038085166000908152600a602052604090205481169350891673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156114955750600954612710908103870204600160a060020a03831663cd7724c38260006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561147357600080fd5b6102c65a03f1151561148457600080fd5b50505060405180519050915061150e565b82600160a060020a03166395b68fe78860006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156114e457600080fd5b6102c65a03f115156114f557600080fd5b5050506040518051600954612710908103909102049250505b61152a878361151c8c611a5b565b6115258c611a5b565b611b1f565b94505b50505050949350505050565b600754600160a060020a031681565b60005433600160a060020a0390811691161461156357600080fd5b600160a060020a03811660009081526002602052604090205460ff161561158957600080fd5b6004546032901061159957600080fd5b7f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b816001604051600160a060020a039092168252151560208201526040908101905180910390a1600160a060020a0381166000908152600260205260409020805460ff191660019081179091556004805490918101610af88382611bc2565b60005433600160a060020a0390811691161461163357600080fd5b600160a060020a038082166000908152600a602052604090205416151561165957600080fd5b600160a060020a0381166000908152600a6020526040908190208054600160a060020a03191690557f6621c4efc5efa31320394260425b7d14cbb9d7e3754b2c98c04af66b1cbf315b90829051600160a060020a03909116815260200160405180910390a150565b6000805433600160a060020a039081169116146116dd57600080fd5b600160a060020a03821660009081526002602052604090205460ff16151561170457600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b6004548110156106e15781600160a060020a031660048281548110151561174957fe5b600091825260209091200154600160a060020a031614156118255760048054600019810190811061177657fe5b60009182526020909120015460048054600160a060020a03909216918390811061179c57fe5b60009182526020909120018054600160a060020a031916600160a060020a03929092169190911790556004805460001901906117d89082611bc2565b507f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b826000604051600160a060020a039092168252151560208201526040908101905180910390a16106e1565b600101611726565b600854600160a060020a031681565b60005433600160a060020a0390811691161461185757600080fd5b600160a060020a03811682156108fc0283604051600060405180830381858888f19350505050151561188857600080fd5b7fec47e7ed86c86774d1a72c19f35c639911393fe7c1a34031fdbd260890da90de8282604051918252600160a060020a031660208201526040908101905180910390a15050565b6000600160a060020a03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156119075750600160a060020a038116316112df565b82600160a060020a03166370a082318360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561195e57600080fd5b6102c65a03f1151561196f57600080fd5b5050506040518051905090506112df565b600b5460ff1681565b600054600160a060020a031681565b600160a060020a03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156119de57600160a060020a038116600090815260066020526040902060129055611a58565b80600160a060020a031663313ce5676000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611a2457600080fd5b6102c65a03f11515611a3557600080fd5b5050506040518051600160a060020a038316600090815260066020526040902055505b50565b600080600160a060020a03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611a8c5760129150611b19565b50600160a060020a038216600090815260066020526040902054801515611b155782600160a060020a031663313ce5676000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611af357600080fd5b6102c65a03f11515611b0457600080fd5b505050604051805190509150611b19565b8091505b50919050565b60006b204fce5e3e25026110000000851115611b3a57600080fd5b6b204fce5e3e25026110000000841115611b5357600080fd5b828210611b8e5760128383031115611b6a57600080fd5b84838303600a0a02670de0b6b3a76400008502811515611b8657fe5b049050611bba565b60128284031115611b9e57600080fd5b84828403600a0a670de0b6b3a7640000860202811515611b8657fe5b949350505050565b815481835581811511611be657600083815260209020611be6918101908301611bfd565b505050565b60206040519081016040526000815290565b61057291905b80821115611c175760008155600101611c03565b50905600a165627a7a723058204ea0122caec87acf32580434f5fb64cfbc82aebc4face1f937810ee92b52ab690029000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d950000000000000000000000002259099897afaf3813fef3284b91d2b227b66ad400000000000000000000000065897adcba42dcca5dd162c647b1cc3e31238490",
  "constructorArguments": "000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d950000000000000000000000002259099897afaf3813fef3284b91d2b227b66ad400000000000000000000000065897adcba42dcca5dd162c647b1cc3e31238490"
}