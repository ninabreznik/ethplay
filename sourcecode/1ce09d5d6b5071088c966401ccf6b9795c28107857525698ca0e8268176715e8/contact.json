{
  "address": "0x838df5c03147f0b038c24b18af5bb5dee1ffd446",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Edgecoin",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-07\n*/\n\npragma solidity ^0.4.23;\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n    \n    function safeMul(uint a, uint b) internal pure returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n    \n    function safeDiv(uint a, uint b) internal pure returns (uint) {\n        assert(b > 0);\n        uint c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n    \n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    \n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n    \n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n    \n    function min64(uint64 a, uint64 b) internal pure returns (uint64) \n    {\n        return a < b ? a : b;\n    }\n    \n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n    \n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n }\n \n /**\n * Date and Time utilities for ethereum contracts\n */\n contract DateTime {\n\n        struct _DateTime {\n                uint16 year;\n                uint8 month;\n                uint8 day;\n                uint8 hour;\n                uint8 minute;\n                uint8 second;\n                uint8 weekday;\n        }\n\n        uint constant DAY_IN_SECONDS = 86400;\n        uint constant YEAR_IN_SECONDS = 31536000;\n        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n\n        uint constant HOUR_IN_SECONDS = 3600;\n        uint constant MINUTE_IN_SECONDS = 60;\n\n        uint16 constant ORIGIN_YEAR = 1970;\n\n        function isLeapYear(uint16 year) internal pure returns (bool) {\n                if (year % 4 != 0) {\n                        return false;\n                }\n                if (year % 100 != 0) {\n                        return true;\n                }\n                if (year % 400 != 0) {\n                        return false;\n                }\n                return true;\n        }\n\n        function leapYearsBefore(uint year) internal pure returns (uint) {\n                year -= 1;\n                return year / 4 - year / 100 + year / 400;\n        }\n\n        function getDaysInMonth(uint8 month, uint16 year) internal pure returns (uint8) {\n                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                        return 31;\n                }\n                else if (month == 4 || month == 6 || month == 9 || month == 11) {\n                        return 30;\n                }\n                else if (isLeapYear(year)) {\n                        return 29;\n                }\n                else {\n                        return 28;\n                }\n        }\n\n        function parseTimestamp(uint timestamp) internal pure returns (_DateTime dt) {\n                uint secondsAccountedFor = 0;\n                uint buf;\n                uint8 i;\n\n                // Year\n                dt.year = getYear(timestamp);\n                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n\n                // Month\n                uint secondsInMonth;\n                for (i = 1; i <= 12; i++) {\n                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n                        if (secondsInMonth + secondsAccountedFor > timestamp) {\n                                dt.month = i;\n                                break;\n                        }\n                        secondsAccountedFor += secondsInMonth;\n                }\n\n                // Day\n                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n                        if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n                                dt.day = i;\n                                break;\n                        }\n                        secondsAccountedFor += DAY_IN_SECONDS;\n                }\n\n                // Hour\n                dt.hour = getHour(timestamp);\n\n                // Minute\n                dt.minute = getMinute(timestamp);\n\n                // Second\n                dt.second = getSecond(timestamp);\n\n                // Day of week.\n                dt.weekday = getWeekday(timestamp);\n        }\n\n        function getYear(uint timestamp) internal pure returns (uint16) {\n                uint secondsAccountedFor = 0;\n                uint16 year;\n                uint numLeapYears;\n\n                // Year\n                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n\n                while (secondsAccountedFor > timestamp) {\n                        if (isLeapYear(uint16(year - 1))) {\n                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n                        }\n                        else {\n                                secondsAccountedFor -= YEAR_IN_SECONDS;\n                        }\n                        year -= 1;\n                }\n                return year;\n        }\n\n        function getMonth(uint timestamp) internal pure returns (uint8) {\n                return parseTimestamp(timestamp).month;\n        }\n\n        function getDay(uint timestamp) internal pure returns (uint8) {\n                return parseTimestamp(timestamp).day;\n        }\n\n        function getHour(uint timestamp) internal pure returns (uint8) {\n                return uint8((timestamp / 60 / 60) % 24);\n        }\n\n        function getMinute(uint timestamp) internal pure returns (uint8) {\n                return uint8((timestamp / 60) % 60);\n        }\n\n        function getSecond(uint timestamp) internal pure returns (uint8) {\n                return uint8(timestamp % 60);\n        }\n\n        function getWeekday(uint timestamp) internal pure returns (uint8) {\n                return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day) internal pure returns (uint timestamp) {\n                return toTimestamp(year, month, day, 0, 0, 0);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) internal pure returns (uint timestamp) {\n                return toTimestamp(year, month, day, hour, 0, 0);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) internal pure returns (uint timestamp) {\n                return toTimestamp(year, month, day, hour, minute, 0);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) internal pure returns (uint timestamp) {\n                uint16 i;\n\n                // Year\n                for (i = ORIGIN_YEAR; i < year; i++) {\n                        if (isLeapYear(i)) {\n                                timestamp += LEAP_YEAR_IN_SECONDS;\n                        }\n                        else {\n                                timestamp += YEAR_IN_SECONDS;\n                        }\n                }\n\n                // Month\n                uint8[12] memory monthDayCounts;\n                monthDayCounts[0] = 31;\n                if (isLeapYear(year)) {\n                        monthDayCounts[1] = 29;\n                }\n                else {\n                        monthDayCounts[1] = 28;\n                }\n                monthDayCounts[2] = 31;\n                monthDayCounts[3] = 30;\n                monthDayCounts[4] = 31;\n                monthDayCounts[5] = 30;\n                monthDayCounts[6] = 31;\n                monthDayCounts[7] = 31;\n                monthDayCounts[8] = 30;\n                monthDayCounts[9] = 31;\n                monthDayCounts[10] = 30;\n                monthDayCounts[11] = 31;\n\n                for (i = 1; i < month; i++) {\n                        timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n                }\n\n                // Day\n                timestamp += DAY_IN_SECONDS * (day - 1);\n\n                // Hour\n                timestamp += HOUR_IN_SECONDS * (hour);\n\n                // Minute\n                timestamp += MINUTE_IN_SECONDS * (minute);\n\n                // Second\n                timestamp += second;\n\n                return timestamp;\n        }\n}\n\ncontract ERC20 {\n    function totalSupply() public constant returns (uint256);\n    function balanceOf(address _owner) public constant returns (uint);\n    function transfer(address _to, uint _value) public returns (bool);\n    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n    function approve(address _spender, uint _value) public returns (bool);\n    function allowance(address _owner, address _spender) public constant returns (uint);\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n} \n \n\ncontract EdgeSmartToken is ERC20, SafeMath, DateTime {\n\n    uint256  public constant _decimals = 18;\n    uint256 public constant _totalSupply = (100000000 * 10**_decimals);\n    \n    string public constant symbol = 'EDUX';\n    string public constant name = 'Edgecoin Smart Token';\n    \n    mapping(address => uint256) public balances;\n    mapping(address => mapping(address => uint256)) approved;\n    address EdgeSmartTokenOwner;\n\n    modifier onlyOwner() {\n        require(msg.sender == EdgeSmartTokenOwner);\n        _;\n    }    \n    \n    constructor() public {\n        EdgeSmartTokenOwner = msg.sender;\n        balances[EdgeSmartTokenOwner] = _totalSupply;\n    }\n   \n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != EdgeSmartTokenOwner);      \n        EdgeSmartTokenOwner = newOwner;\n    }    \n    \n\n    function decimals() public pure returns (uint256) {\n        return _decimals;\n    }\n\n    function totalSupply() public constant returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address _owner) public constant returns (uint256) {\n        return balances[_owner];\n    }\n\n    /**\n     * @dev Transfer self tokens to given address\n     * @param _to destination address\n     * @param _value amount of token values to send\n     * @notice `_value` tokens will be sended to `_to`\n     * @return `true` when transfer done\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(\n            balances[msg.sender] >= _value && _value > 0\n        );\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n        balances[_to] = safeAdd(balances[_to], _value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer with approvement mechainsm\n     * @param _from source address, `_value` tokens shold be approved for `sender`\n     * @param _to destination address\n     * @param _value amount of token values to send\n     * @notice from `_from` will be sended `_value` tokens to `_to`\n     * @return `true` when transfer is done\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(\n            approved[_from][msg.sender] >= _value && balances[_from] >= _value && _value > 0\n        );\n        balances[_from] = safeSub(balances[_from], _value);\n        balances[_to] = safeAdd(balances[_to], _value);\n        approved[_from][msg.sender] = safeSub(approved[_from][msg.sender], _value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Give to target address ability for self token manipulation without sending\n     * @param _spender target address (future requester)\n     * @param _value amount of token values for approving\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        approved[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    /**\n     * @dev Reset count of tokens approved for given address\n     * @param _spender target address (future requester)\n     */\n    function unapprove(address _spender) public { \n        approved[msg.sender][_spender] = 0; \n    }\n\n    /**\n     * @dev Take allowed tokens\n     * @param _owner The address of the account owning tokens\n     * @param _spender The address of the account able to transfer the tokens\n     * @return Amount of remaining tokens allowed to spent\n     */\n    function allowance(address _owner, address _spender) public constant returns (uint256) {\n        return approved[_owner][_spender];\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract Edgecoin is SafeMath, DateTime, EdgeSmartToken {\n    \n    address owner; \n    uint private totalCollected = 0;\n    uint private preSaleCollected = 0;\n    uint private ICOCollected = 0;\n    \n    uint256 public totalTokensCap = (50000000 * 10**_decimals); //50% of total supply\n    uint public preSaleTokensLimit = (10000000 * 10**_decimals); //10% of total supply\n    \n    uint256 public icoSaleSoftCap = (5000000 * 10**_decimals); //5mio EDUX or 1000 ETH\n    uint public icoSaleHardCap = (25000000 * 10**_decimals);//25mio EDUX or 5000 ETH\n   \n    uint256 private preSaleTokenPrice = (10000 * 10**_decimals); //10k\n    uint256 private ICOTokenPrice = (5000 * 10**_decimals); //5k\n   \n    bool ICOActive = true;\n   \n    uint pre_ICO_end_date = toTimestamp(2017, 12, 6, 20, 0);\n   \n    uint ICO_end_date = toTimestamp(2018, 1, 1, 20, 0); \n    \n    //since ICO date and period are not defined precisely, lets put hardcoded end date \n    uint ICO_hardcoded_expiry_date = toTimestamp(2019, 1, 1, 20, 0); \n   \n    uint256 private tokensToBuy;\n    \n    //multisig withdrawal part\n    mapping (address => bool) private isOwner; // immutable state\n    mapping (address => bool) private isConfirmed; // immutable state\n    mapping (uint => address) private ownersArr; // immutable state\n    uint public nonce;                // (only) mutable state\n    uint public threshold = 3;            // immutable state\n    uint public pendingAmount;\n    address public pendingAddress;\n    uint public confirmedTimesByOwners = 0;\n    //multisig ended\n\n    constructor() public {\n       owner = msg.sender;\n       isOwner[0x512B431fc06855C8418495ffcc570D246B654f6E] = true; //am\n       isOwner[0xb43d2a6fEFEF1260F772EDa4eF4341044C494b48] = true; //kj\n       isOwner[0x9016f6fb21F454F294A78AdeFbD700f4B6795C91] = true; //aw\n       \n       ownersArr[0] = 0x512B431fc06855C8418495ffcc570D246B654f6E;\n       ownersArr[2] = 0xb43d2a6fEFEF1260F772EDa4eF4341044C494b48;\n       ownersArr[3] = 0x9016f6fb21F454F294A78AdeFbD700f4B6795C91;\n       \n       //migrated from first version of ICO contract, addr 0x25992f65334b5d23096b912af089ac454c3aabb6\n       totalCollected = 366536727590000000000000;\n       preSaleCollected = 265029930140000000000000;\n       ICOCollected = 101506797450000000000000;\n    }\n   \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    modifier onlyOwners() {\n        require(isOwner[msg.sender] == true);\n        _;\n    }\n    \n    function initiateWithdrawal(address destination, uint value) public onlyOwners {\n        confirmedTimesByOwners = 0;\n        for (uint j = 0; j < threshold; j++) {\n            isConfirmed[ownersArr[j]] = false;\n        }  \n            \n        pendingAmount = value;\n        pendingAddress = destination;\n\n        isConfirmed[msg.sender] = true;\n        confirmedTimesByOwners++;\n    }\n\n    function confirmAndExecuteWithdrawal() public onlyOwners payable {\n        isConfirmed[msg.sender] = true;\n        for (uint i = 0; i < threshold; i++) {\n            if (isConfirmed[ownersArr[i]]) {\n                confirmedTimesByOwners++;\n            }\n        }\n      \n        if (confirmedTimesByOwners >= (threshold-1) ) { // 2/3 or 3/3\n            nonce = nonce + 1;\n            pendingAddress.transfer(pendingAmount);\n\n            //reset withdrawal data\n            pendingAmount = 0;\n            pendingAddress = 0x0;\n            confirmedTimesByOwners = 0;\n        \n            for (uint j = 0; j < threshold; j++) {\n                isConfirmed[ownersArr[j]] = false;\n            }  \n        }\n    }\n    \n    function getTotalTokensSold() public constant returns (uint) {\n        return totalCollected;\n    }\n    \n    function getPreSaleTokensSold() public constant returns (uint) {\n        return preSaleCollected;\n    } \n    \n    function getIcoTokensSold() public constant returns (uint) {\n        return ICOCollected;\n    }    \n\n    function setICOStatus(bool status) onlyOwner public {\n        ICOActive = status;\n    }\n\n    function () public payable {\n        createTokens(msg.sender);\n    }\n    \n    function createTokens(address recipient) public payable {\n        \n        if (ICOActive && (now < ICO_hardcoded_expiry_date)) {\n            require(msg.value >= 0.1 * (1 ether)); //minimum 0.1 ETH\n            tokensToBuy = safeDiv(safeMul(msg.value * 1 ether, ICOTokenPrice), 1000000000000000000 ether);\n            require (totalCollected + tokensToBuy <= totalTokensCap); //max sell 50mio, 40mio + rest from preSale\n            ICOCollected = safeAdd(ICOCollected, tokensToBuy);\n            totalCollected = safeAdd(totalCollected, tokensToBuy);\n            \n            balances[recipient] = safeAdd(balances[recipient], tokensToBuy);\n            balances[owner] = safeSub(balances[owner], tokensToBuy);\n            emit Transfer(owner, recipient, tokensToBuy);\n        }\n        else  {\n            revert(\"Edgecoin ICO has ended.\");\n        }\n    }\n}",
  "bytecode": "60806040526000600455600060055560006006556012600a0a6302faf080026007556012600a0a62989680026008556012600a0a624c4b40026009556012600a0a63017d784002600a556012600a0a61271002600b556012600a0a61138802600c556001600d60006101000a81548160ff021916908315150217905550620000a06107e1600c600660146000620004a9640100000000026401000000009004565b600e55620000c66107e260018060146000620004a9640100000000026401000000009004565b600f55620000ec6107e360018060146000620004a9640100000000026401000000009004565b601055600360165560006019553480156200010657600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506012600a0a6305f5e10002600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016012600073512b431fc06855c8418495ffcc570d246b654f6e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016012600073b43d2a6fefef1260f772eda4ef4341044c494b4873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160126000739016f6fb21f454f294a78adefbd700f4b6795c9173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555073512b431fc06855c8418495ffcc570d246b654f6e6014600080815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073b43d2a6fefef1260f772eda4ef4341044c494b48601460006002815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550739016f6fb21f454f294a78adefbd700f4b6795c91601460006003815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550694d9dfeede44ac640600060048190555069381f4d2219944d55c00060058190555069157eb1cbcab678eaa00060068190555062000865565b6000620004cb86868686866000620004d6640100000000026401000000009004565b905095945050505050565b600080620004e362000841565b6107b291505b8861ffff168261ffff16101562000541576200051482620007b7640100000000026401000000009004565b1562000529576301e285008301925062000533565b6301e13380830192505b8180600101925050620004e9565b601f816000600c811015156200055357fe5b602002019060ff16908160ff16815250506200057e89620007b7640100000000026401000000009004565b15620005ad57601d816001600c811015156200059657fe5b602002019060ff16908160ff1681525050620005d1565b601c816001600c81101515620005bf57fe5b602002019060ff16908160ff16815250505b601f816002600c81101515620005e357fe5b602002019060ff16908160ff1681525050601e816003600c811015156200060657fe5b602002019060ff16908160ff1681525050601f816004600c811015156200062957fe5b602002019060ff16908160ff1681525050601e816005600c811015156200064c57fe5b602002019060ff16908160ff1681525050601f816006600c811015156200066f57fe5b602002019060ff16908160ff1681525050601f816007600c811015156200069257fe5b602002019060ff16908160ff1681525050601e816008600c81101515620006b557fe5b602002019060ff16908160ff1681525050601f816009600c81101515620006d857fe5b602002019060ff16908160ff1681525050601e81600a600c81101515620006fb57fe5b602002019060ff16908160ff1681525050601f81600b600c811015156200071e57fe5b602002019060ff16908160ff1681525050600191505b8760ff168261ffff1610156200077957806001830361ffff16600c811015156200075a57fe5b602002015160ff16620151800283019250818060010192505062000734565b6001870360ff166201518002830192508560ff16610e1002830192508460ff16603c02830192508360ff168301925082925050509695505050505050565b60008060048361ffff16811515620007cb57fe5b0661ffff16141515620007e257600090506200083c565b600060648361ffff16811515620007f557fe5b0661ffff161415156200080c57600190506200083c565b60006101908361ffff168115156200082057fe5b0661ffff161415156200083757600090506200083c565b600190505b919050565b61018060405190810160405280600c90602082028038833980820191505090505090565b611c0780620008756000396000f30060806040526004361061017f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806241edee1461018a57806306fdde03146101b5578063083eb6f814610245578063095ea7b31461027057806318160ddd146102d557806323b872dd1461030057806327e235e314610385578063313ce567146103dc57806332424aa3146104075780633ac7d6fe146104325780633eaaf86b1461048957806342cde4e8146104b4578063540cc484146104df57806370a082311461050a57806387eeddf81461056157806394c331631461056b57806395d89b41146105965780639dc27fe3146106265780639fda5ad214610655578063a9059cbb14610680578063ae6439c4146106e5578063affed0e014610710578063ba1066ed1461073b578063be802f0514610766578063c8393ba914610791578063cedbbeee146107de578063da44695814610814578063dd62ed3e1461083f578063f2fde38b146108b6578063fbf1f78a146108f9575b6101883361093c565b005b34801561019657600080fd5b5061019f610c43565b6040518082815260200191505060405180910390f35b3480156101c157600080fd5b506101ca610c49565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561020a5780820151818401526020810190506101ef565b50505050905090810190601f1680156102375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561025157600080fd5b5061025a610c82565b6040518082815260200191505060405180910390f35b34801561027c57600080fd5b506102bb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c88565b604051808215151515815260200191505060405180910390f35b3480156102e157600080fd5b506102ea610d7a565b6040518082815260200191505060405180910390f35b34801561030c57600080fd5b5061036b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d8c565b604051808215151515815260200191505060405180910390f35b34801561039157600080fd5b506103c6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110f9565b6040518082815260200191505060405180910390f35b3480156103e857600080fd5b506103f1611111565b6040518082815260200191505060405180910390f35b34801561041357600080fd5b5061041c61111a565b6040518082815260200191505060405180910390f35b34801561043e57600080fd5b5061044761111f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561049557600080fd5b5061049e611145565b6040518082815260200191505060405180910390f35b3480156104c057600080fd5b506104c9611153565b6040518082815260200191505060405180910390f35b3480156104eb57600080fd5b506104f4611159565b6040518082815260200191505060405180910390f35b34801561051657600080fd5b5061054b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611163565b6040518082815260200191505060405180910390f35b6105696111ab565b005b34801561057757600080fd5b5061058061149e565b6040518082815260200191505060405180910390f35b3480156105a257600080fd5b506105ab6114a8565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105eb5780820151818401526020810190506105d0565b50505050905090810190601f1680156106185780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561063257600080fd5b506106536004803603810190808035151590602001909291905050506114e1565b005b34801561066157600080fd5b5061066a61155a565b6040518082815260200191505060405180910390f35b34801561068c57600080fd5b506106cb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611560565b604051808215151515815260200191505060405180910390f35b3480156106f157600080fd5b506106fa61173e565b6040518082815260200191505060405180910390f35b34801561071c57600080fd5b50610725611744565b6040518082815260200191505060405180910390f35b34801561074757600080fd5b5061075061174a565b6040518082815260200191505060405180910390f35b34801561077257600080fd5b5061077b611750565b6040518082815260200191505060405180910390f35b34801561079d57600080fd5b506107dc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061175a565b005b610812600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061093c565b005b34801561082057600080fd5b50610829611921565b6040518082815260200191505060405180910390f35b34801561084b57600080fd5b506108a0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611927565b6040518082815260200191505060405180910390f35b3480156108c257600080fd5b506108f7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506119ae565b005b34801561090557600080fd5b5061093a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611aab565b005b600d60009054906101000a900460ff168015610959575060105442105b15610bd25767016345785d8a0000341015151561097557600080fd5b6109a361098e670de0b6b3a76400003402600c54611b30565b6ec097ce7bc90715b34b9f1000000000611b63565b60118190555060075460115460045401111515156109c057600080fd5b6109ce600654601154611ba4565b6006819055506109e2600454601154611ba4565b600481905550610a326000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601154611ba4565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ae0600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601154611bc2565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6011546040518082815260200191505060405180910390a3610c40565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f45646765636f696e2049434f2068617320656e6465642e00000000000000000081525060200191505060405180910390fd5b50565b60085481565b6040805190810160405280601481526020017f45646765636f696e20536d61727420546f6b656e00000000000000000000000081525081565b600a5481565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60006012600a0a6305f5e10002905090565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610e585750816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610e645750600082115b1515610e6f57600080fd5b610eb76000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611bc2565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f416000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611ba4565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611009600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611bc2565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60006020528060005260406000206000915090505481565b60006012905090565b601281565b601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6012600a0a6305f5e1000281565b60165481565b6000600554905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060011515601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561120d57600080fd5b6001601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600091505b60165482101561131957601360006014600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561130c576019600081548092919060010191905055505b818060010192505061126a565b60016016540360195410151561149a57600160155401601581905550601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6017549081150290604051600060405180830381858888f1935050505015801561139f573d6000803e3d6000fd5b5060006017819055506000601860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000601981905550600090505b601654811015611499576000601360006014600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806001019150506113f7565b5b5050565b6000600454905090565b6040805190810160405280600481526020017f454455580000000000000000000000000000000000000000000000000000000081525081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561153d57600080fd5b80600d60006101000a81548160ff02191690831515021790555050565b60195481565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156115b05750600082115b15156115bb57600080fd5b6116036000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611bc2565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061168d6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611ba4565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60095481565b60155481565b60175481565b6000600654905090565b600060011515601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156117bb57600080fd5b6000601981905550600090505b60165481101561186a576000601360006014600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806001019150506117c8565b8160178190555082601860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550601960008154809291906001019190505550505050565b60075481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a0a57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611a6757600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60008082840290506000841480611b515750828482811515611b4e57fe5b04145b1515611b5957fe5b8091505092915050565b600080600083111515611b7257fe5b8284811515611b7d57fe5b0490508284811515611b8b57fe5b068184020184141515611b9a57fe5b8091505092915050565b6000808284019050838110151515611bb857fe5b8091505092915050565b6000828211151515611bd057fe5b8183039050929150505600a165627a7a723058203b07121cfb0b5e81ab158785b02a8b053f22c7ba99b6d69761244f38338eb8a20029"
}