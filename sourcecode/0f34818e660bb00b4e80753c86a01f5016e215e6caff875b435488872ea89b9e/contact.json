{
  "address": "0x767b8c6fb76db2e2a547819ba7afd2006d3de6b2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ProfitLineInc",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-19\n*/\n\npragma solidity ^0.4.25;\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n// ProfitLineInc contract\ncontract ProfitLineInc  {\n    using SafeMath for uint;\n    // set CEO and board of directors ownables\n    mapping(uint256 => address)public management;// 0 CEO 1-5 Directors\n    mapping(uint256 => uint256)public manVault;// Eth balance\n    //mapping(uint256 => uint256)public spendableShares; // unused allocation\n    mapping(uint256 => uint256)public price; // takeover price\n    uint256 public totalSupplyShares; // in use totalsupply shares\n    uint256 public ethPendingManagement;\n    \n    // Player setup\n    mapping(address => uint256)public  bondsOutstanding; // redeemablebonds\n    uint256 public totalSupplyBonds; //totalsupply of bonds outstanding\n    mapping(address => uint256)public  playerVault; // in contract eth balance\n    mapping(address => uint256)public  pendingFills; //eth to fill bonds\n    mapping(address => uint256)public  playerId; \n    mapping(uint256 => address)public  IdToAdress; \n    uint256 public nextPlayerID;\n    \n    // autoReinvest\n    mapping(address => bool) public allowAutoInvest;\n    mapping(address => uint256) public percentageToReinvest;\n    \n    // Game vars\n    uint256 ethPendingDistribution; // eth pending distribution\n    \n    // proffit line vars\n    uint256 ethPendingLines; // eth ending distributionacross lines\n    \n        // line 1 -  proof of cheating the line\n        mapping(uint256 => address) public cheatLine;\n        mapping(address => bool) public isInLine;\n        mapping(address => uint256) public lineNumber;\n        uint256 public cheatLinePot;\n        uint256 public nextInLine;\n        uint256 public lastInLine;\n        // line 2 -  proof of cheating the line Whale\n        mapping(uint256 => address) public cheatLineWhale;\n        mapping(address => bool) public isInLineWhale;\n        mapping(address => uint256) public lineNumberWhale;\n        uint256 public cheatLinePotWhale;\n        uint256 public nextInLineWhale;\n        uint256 public lastInLineWhale;\n        // line 3 -  proof of arbitrage opportunity\n        uint256 public arbitragePot;\n        // line 4 - proof of risky arbitrage opportunity\n        uint256 public arbitragePotRisky;\n        // line 5 - proof of increasing odds\n        mapping(address => uint256) public odds;\n        uint256 public poioPot; \n        // line 6 - proof of increasing odds Whale\n        mapping(address => uint256) public oddsWhale;\n        uint256 public poioPotWhale;\n        // line 7 - proof of increasing odds everybody\n        uint256 public oddsAll;\n        uint256 public poioPotAll;\n        // line 8 - proof of decreasing odds everybody\n        uint256 public decreasingOddsAll;\n        uint256 public podoPotAll;\n        // line 9 -  proof of distributing by random\n        uint256 public randomPot;\n        mapping(uint256 => address) public randomDistr;\n        uint256 public randomNext;\n        uint256 public lastdraw;\n        // line 10 - proof of distributing by random whale\n        uint256 public randomPotWhale;\n        mapping(uint256 => address) public randomDistrWhale;\n        uint256 public randomNextWhale;\n        uint256 public lastdrawWhale;\n        // line 11 - proof of distributing by everlasting random\n        uint256 public randomPotAlways;\n        mapping(uint256 => address) public randomDistrAlways;\n        uint256 public randomNextAlways;\n        uint256 public lastdrawAlways;\n        // line 12 - Proof of eth rolls\n        uint256 public dicerollpot;\n        // line 13 - Proof of ridiculously bad odds\n        uint256 public amountPlayed;\n        uint256 public badOddsPot;\n        \n        // line 14 - Proof of playing Snip3d\n        uint256 public Snip3dPot;\n\n        // line 16 - Proof of playing Slaughter3d\n        uint256 public Slaughter3dPot;\n        \n        // line 17 - Proof of eth rolls feeding bank\n        uint256 public ethRollBank;\n        // line 18 - Proof of eth stuck on PLinc\n        uint256 public ethStuckOnPLinc;\n        address public currentHelper;\n        bool public canGetPaidForHelping;\n        mapping(address => bool) public hassEthstuck;\n        // line 19 - Proof of giving of eth\n        uint256 public PLincGiverOfEth;\n        // \n        \n        // vaults\n        uint256 public vaultSmall;\n        uint256 public timeSmall;\n        uint256 public vaultMedium;\n        uint256 public timeMedium;\n        uint256 public vaultLarge;\n        uint256 public timeLarge;\n        uint256 public vaultDrip; // delayed bonds maturing\n        uint256 public timeDrip;\n    \n    // interfaces\n    HourglassInterface constant P3Dcontract_ = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);//0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\n    SPASMInterface constant SPASM_ = SPASMInterface(0xfaAe60F2CE6491886C9f7C9356bd92F688cA66a1);//0xfaAe60F2CE6491886C9f7C9356bd92F688cA66a1);\n    Snip3DBridgeInterface constant snip3dBridge = Snip3DBridgeInterface(0x99352D1edfa7f124eC618dfb51014f6D54bAc4aE);//snip3d bridge\n    Slaughter3DBridgeInterface constant slaughter3dbridge = Slaughter3DBridgeInterface(0x3E752fFD5eff7b7f2715eF43D8339ecABd0e65b9);//slaughter3dbridge\n    \n    // bonds div setup\n    uint256 public pointMultiplier = 10e18;\n    struct Account {\n        uint256 balance;\n        uint256 lastDividendPoints;\n        }\n    mapping(address=>Account) accounts;\n    \n   \n    uint256 public totalDividendPoints;\n    uint256 public unclaimedDividends;\n\n    function dividendsOwing(address account) public view returns(uint256) {\n        uint256 newDividendPoints = totalDividendPoints.sub(accounts[account].lastDividendPoints);\n        return (bondsOutstanding[account] * newDividendPoints) / pointMultiplier;\n    }\n    function fetchdivs(address toupdate) public updateAccount(toupdate){}\n    \n    modifier updateAccount(address account) {\n        uint256 owing = dividendsOwing(account);\n        if(owing > 0) {\n            \n            unclaimedDividends = unclaimedDividends.sub(owing);\n            pendingFills[account] = pendingFills[account].add(owing);\n        }\n        accounts[account].lastDividendPoints = totalDividendPoints;\n        _;\n        }\n    function () external payable{} // needs for divs\n    function vaultToWallet(address toPay) public {\n        require(playerVault[toPay] > 0);\n        uint256 value = playerVault[toPay];\n        playerVault[toPay] = 0;\n        toPay.transfer(value);\n        emit cashout(msg.sender,value);\n    }\n    // view functions\n    function harvestabledivs()\n        view\n        public\n        returns(uint256)\n    {\n        return ( P3Dcontract_.myDividends(true))  ;\n    }\n    \n    function fetchDataMain()\n        public\n        view\n        returns(uint256 _ethPendingDistribution, uint256 _ethPendingManagement, uint256 _ethPendingLines)\n    {\n        _ethPendingDistribution = ethPendingDistribution;\n        _ethPendingManagement = ethPendingManagement;\n        _ethPendingLines = ethPendingLines;\n    }\n    function fetchCheatLine()\n        public\n        view\n        returns(address _1stInLine, address _2ndInLine, address _3rdInLine, uint256 _sizeOfPot)\n    {\n        _1stInLine = cheatLine[nextInLine-1];\n        _2ndInLine = cheatLine[nextInLine-2];\n        _3rdInLine = cheatLine[nextInLine-3];\n        _sizeOfPot = cheatLinePot;\n    }\n    function fetchCheatLineWhale()\n        public\n        view\n        returns(address _1stInLine2, address _2ndInLine2, address _3rdInLine2, uint256 _sizeOfPot2)\n    {\n        _1stInLine2 = cheatLineWhale[nextInLineWhale-1];\n        _2ndInLine2 = cheatLineWhale[nextInLineWhale-2];\n        _3rdInLine2 = cheatLineWhale[nextInLineWhale-3];\n        _sizeOfPot2 = cheatLinePotWhale;\n    }\n\n    // management hot potato functions\n    function buyCEO() public payable{\n        uint256 value = msg.value;\n        require(value >= price[0]);// \n        playerVault[management[0]] += (manVault[0] .add(value.div(2)));\n        manVault[0] = 0;\n        emit CEOsold(management[0],msg.sender,value);\n        management[0] = msg.sender;\n        ethPendingDistribution = ethPendingDistribution.add(value.div(2));\n        price[0] = price[0].mul(21).div(10);\n    }\n    function buyDirector(uint256 spot) public payable{\n        uint256 value = msg.value;\n        require(spot >0 && spot < 6);\n        require(value >= price[spot]);\n        playerVault[management[spot]] += (manVault[spot].add(value.div(2)));\n        manVault[spot] = 0;\n        emit Directorsold(management[spot],msg.sender,value, spot);\n        management[spot] = msg.sender;\n        ethPendingDistribution = ethPendingDistribution.add(value.div(4));\n        playerVault[management[0]] = playerVault[management[0]].add(value.div(4));\n        price[spot] = price[spot].mul(21).div(10);\n    }\n    function managementWithdraw(uint256 who) public{\n        uint256 cash = manVault[who];\n        require(who <6);\n        require(cash>0);\n        manVault[who] = 0; \n        management[who].transfer(cash);\n        emit cashout(management[who],cash);\n    }\n    // eth distribution cogs main\n    function ethPropagate() public{\n        require(ethPendingDistribution>0 );\n        uint256 base = ethPendingDistribution.div(50);\n        ethPendingDistribution = 0;\n        //2% to SPASM\n        SPASM_.disburse.value(base)();\n        //2% to management\n        ethPendingManagement = ethPendingManagement.add(base);\n        //10% to bonds maturity\n        uint256 amount = base.mul(5);\n        totalDividendPoints = totalDividendPoints.add(amount.mul(pointMultiplier).div(totalSupplyBonds));\n        unclaimedDividends = unclaimedDividends.add(amount);\n        emit bondsMatured(amount);\n        //rest split across lines\n        ethPendingLines = ethPendingLines.add(base.mul(43));\n    }\n    //buybonds function\n    function buyBonds(address masternode, address referral)updateAccount(msg.sender) updateAccount(referral) payable public {\n        // update bonds first\n        uint256 value = msg.value;\n        address sender = msg.sender;\n        require(msg.value > 0 && referral != 0);\n        uint256 base = value.div(100);\n        // buy P3D 5%\n        P3Dcontract_.buy.value(base.mul(5))(masternode);\n        // add bonds to sender\n        uint256 amount =  value.mul(11).div(10);\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(amount);\n        emit bondsBought(msg.sender,amount);\n        // reward referal in bonds\n        bondsOutstanding[referral] = bondsOutstanding[referral].add(value.mul(2).div(100));\n        // edit totalsupply\n        totalSupplyBonds = totalSupplyBonds.add(amount.add(value.mul(2).div(100)));\n        // set rest to eth pending\n        ethPendingDistribution = ethPendingDistribution.add(base.mul(95));\n        // update playerbook\n        if(playerId[sender] == 0){\n           playerId[sender] = nextPlayerID;\n           IdToAdress[nextPlayerID] = sender;\n           nextPlayerID++;\n        }\n    }\n    // management distribution eth function\n    function ethManagementPropagate() public {\n        require(ethPendingManagement > 0);\n        uint256 base = ethPendingManagement.div(20);\n        ethPendingManagement = 0;\n        manVault[0] += base.mul(5);//CEO\n        manVault[1] += base.mul(5);//first Director\n        manVault[2] += base.mul(4);\n        manVault[3] += base.mul(3);\n        manVault[4] += base.mul(2);\n        manVault[5] += base.mul(1);// fifth\n    }\n    // cash mature bonds to playervault\n    function fillBonds (address bondsOwner)updateAccount(msg.sender) updateAccount(bondsOwner) public {\n        uint256 pendingz = pendingFills[bondsOwner];\n        require(bondsOutstanding[bondsOwner] > 1000 && pendingz > 1000);\n        require(msg.sender == tx.origin);\n        require(pendingz <= bondsOutstanding[bondsOwner]);\n        // empty the pendings\n        pendingFills[bondsOwner] = 0;\n        // decrease bonds outstanding\n        bondsOutstanding[bondsOwner] = bondsOutstanding[bondsOwner].sub(pendingz);\n        // reward freelancer\n        bondsOutstanding[msg.sender]= bondsOutstanding[msg.sender].add(pendingz.div(1000));\n        // adjust totalSupplyBonds\n        totalSupplyBonds = totalSupplyBonds.sub(pendingz).add(pendingz.div(1000));\n        // add cash to playerVault\n        playerVault[bondsOwner] = playerVault[bondsOwner].add(pendingz);\n        emit bondsFilled(bondsOwner,pendingz);\n    }\n    //force bonds because overstock pendingFills\n    function forceBonds (address bondsOwner,  address masternode)updateAccount(msg.sender) updateAccount(bondsOwner) public {\n        require(bondsOutstanding[bondsOwner] > 1000 && pendingFills[bondsOwner] > 1000);\n        require(pendingFills[bondsOwner] > bondsOutstanding[bondsOwner]);\n        // update bonds first\n        uint256 value = pendingFills[bondsOwner].sub(bondsOutstanding[bondsOwner]);\n        \n        pendingFills[bondsOwner] = pendingFills[bondsOwner].sub(bondsOutstanding[bondsOwner]);\n        uint256 base = value.div(100);\n        // buy P3D 5%\n        P3Dcontract_.buy.value(base.mul(5))(masternode);\n        // add bonds to sender\n        uint256 amount =  value.mul(11).div(10);\n        bondsOutstanding[bondsOwner] += amount;\n        // reward referal in bonds\n        bondsOutstanding[msg.sender] += value.mul(2).div(100);\n        // edit totalsupply\n        totalSupplyBonds += amount.add(value.mul(2).div(100));\n        // set rest to eth pending\n        ethPendingDistribution += base.mul(95);\n        emit bondsBought(bondsOwner, amount);\n    }\n    //autoReinvest functions\n    function setAuto (uint256 percentage) public {\n        allowAutoInvest[msg.sender] = true;\n        require(percentage <=100 && percentage > 0);\n        percentageToReinvest[msg.sender] = percentage;\n    }\n    function disableAuto () public {\n        allowAutoInvest[msg.sender] = false;\n    }\n    function freelanceReinvest(address stackOwner, address masternode)updateAccount(msg.sender) updateAccount(stackOwner) public{\n        address sender = msg.sender;\n        require(allowAutoInvest[stackOwner] == true && playerVault[stackOwner] > 100000);\n        require(sender == tx.origin);\n        // update vault first\n        uint256 value = playerVault[stackOwner];\n        //emit autoReinvested(stackOwner, value, percentageToReinvest[stackOwner]);\n        playerVault[stackOwner]=0;\n        uint256 base = value.div(100000).mul(percentageToReinvest[stackOwner]);\n        // buy P3D 5%\n        P3Dcontract_.buy.value(base.mul(50))(masternode);\n        // update bonds first\n        // add bonds to sender\n        uint256 precalc = base.mul(950);//.mul(percentageToReinvest[stackOwner]); \n        uint256 amount =  precalc.mul(109).div(100);\n        bondsOutstanding[stackOwner] = bondsOutstanding[stackOwner].add(amount);\n        // reward referal in bonds\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(base);\n        // edit totalsupply\n        totalSupplyBonds = totalSupplyBonds.add(amount.add(base));\n        // set to eth pending\n        ethPendingDistribution = ethPendingDistribution.add(precalc);\n        if(percentageToReinvest[stackOwner] < 100)\n        {\n            precalc = value.sub(precalc.add(base.mul(50)));//base.mul(100-percentageToReinvest[stackOwner]);\n            stackOwner.transfer(precalc);\n            \n        }\n        emit bondsBought(stackOwner, amount);\n        \n    }\n    function PendinglinesToLines () public {\n        require(ethPendingLines > 1000);\n        \n        uint256 base = ethPendingLines.div(25);\n        ethPendingLines = 0;\n        // line 1\n        cheatLinePot = cheatLinePot.add(base);\n        // line 2\n        cheatLinePotWhale = cheatLinePotWhale.add(base);\n        // line 3\n        arbitragePot = arbitragePot.add(base);\n        // line 4\n        arbitragePotRisky = arbitragePotRisky.add(base);\n        // line 5\n        poioPot = poioPot.add(base);\n        // line 6\n        poioPotWhale = poioPotWhale.add(base);\n        // line 7\n        poioPotAll = poioPotAll.add(base);\n        // line 8\n        podoPotAll = podoPotAll.add(base);\n        // line 9\n        randomPot = randomPot.add(base);\n        // line 10\n        randomPotWhale = randomPotWhale.add(base);\n        // line 11\n        randomPotAlways = randomPotAlways.add(base);\n        // line 12\n        dicerollpot = dicerollpot.add(base);\n        // line 13\n        badOddsPot = badOddsPot.add(base);\n        \n        // line 14\n        Snip3dPot = Snip3dPot.add(base);\n\n        // line 16\n        Slaughter3dPot = Slaughter3dPot.add(base);\n        \n        // line 17\n        ethRollBank = ethRollBank.add(base);\n        // line 18\n        ethStuckOnPLinc = ethStuckOnPLinc.add(base);\n        // line 19\n        PLincGiverOfEth = PLincGiverOfEth.add(base);\n        \n        //vaultSmall\n        vaultSmall = vaultSmall.add(base);\n        //vaultMedium\n        vaultMedium = vaultMedium.add(base);\n        //vaultLarge \n        vaultLarge = vaultLarge.add(base);\n        //vaultdrip \n        vaultDrip = vaultDrip.add(base.mul(4));\n        \n    }\n    function fetchP3Ddivs() public{\n        //allocate p3d dividends to contract \n            uint256 dividends =  harvestabledivs();\n            require(dividends > 0);\n            P3Dcontract_.withdraw();\n            ethPendingDistribution = ethPendingDistribution.add(dividends);\n    }\n    \n    //Profit lines\n    function cheatTheLine () public payable updateAccount(msg.sender){\n        address sender = msg.sender;\n        uint256 value = msg.value;\n        require(value >= 0.01 ether);\n        require(msg.sender == tx.origin);\n        if(isInLine[sender] == true)\n        {\n            // overwrite previous spot\n            cheatLine[lineNumber[sender]] = cheatLine[lastInLine];\n            // get first in line\n            cheatLine[nextInLine] = sender;\n            // adjust pointers\n            nextInLine++;\n            lastInLine++;\n        }\n        if(isInLine[sender] == false)\n        {\n            // get first in line\n            cheatLine[nextInLine] = sender;\n            // set where in line\n            lineNumber[sender] = nextInLine;\n            // adjust pointer\n            nextInLine++;\n            // adjust isinline\n            isInLine[sender] = true;\n        }\n\n        //give bonds for eth payment    \n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\n        // edit totalsupply\n        totalSupplyBonds = totalSupplyBonds.add(value);\n        // set paid eth to eth pending\n        ethPendingDistribution = ethPendingDistribution.add(value);\n        emit bondsBought(sender, value);\n        \n    }\n    function payoutCheatLine () public {\n        // needs someone in line and pot have honey\n        require(cheatLinePot >= 0.1 ether && nextInLine > 0);\n        require(msg.sender == tx.origin);\n        // set winner\n        uint256 winner = nextInLine.sub(1);\n        // change index\n        nextInLine--;\n        // deduct from pot\n        cheatLinePot = cheatLinePot.sub(0.1 ether);\n        // add to winers pendingFills\n        pendingFills[cheatLine[winner]] = pendingFills[cheatLine[winner]].add(0.1 ether);\n        // kicked from line because of win\n        isInLine[cheatLine[winner]] = false;\n        // \n        //emit newMaturedBonds(cheatLine[winner], 0.1 ether);\n        emit won(cheatLine[winner], true, 0.1 ether, 1);\n    }\n    function cheatTheLineWhale () public payable updateAccount(msg.sender){\n        address sender = msg.sender;\n        uint256 value = msg.value;\n        require(value >= 1 ether);\n        require(sender == tx.origin);\n        if(isInLineWhale[sender] == true)\n        {\n            // overwrite previous spot\n            cheatLineWhale[lineNumberWhale[sender]] = cheatLineWhale[lastInLineWhale];\n            // get first in line\n            cheatLineWhale[nextInLineWhale] = sender;\n            // adjust pointers\n            nextInLineWhale++;\n            lastInLineWhale++;\n        }\n        if(isInLineWhale[sender] == false)\n        {\n            // get first in line\n            cheatLineWhale[nextInLineWhale] = sender;\n            // set where in line\n            lineNumberWhale[sender] = nextInLineWhale;\n            // adjust pointer\n            nextInLineWhale++;\n            // adjust isinline\n            isInLineWhale[sender] = true;\n        }\n        \n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\n        // edit totalsupply\n        totalSupplyBonds = totalSupplyBonds.add(value);\n        // set paid eth to eth pending\n        ethPendingDistribution = ethPendingDistribution.add(value);\n        //emit bondsBought(sender, value);\n    }\n    function payoutCheatLineWhale () public {\n        // needs someone in line and pot have honey\n        require(cheatLinePotWhale >= 10 ether && nextInLineWhale > 0);\n        require(msg.sender == tx.origin);\n        // set winner\n        uint256 winner = nextInLineWhale.sub(1);\n        // change index\n        nextInLineWhale--;\n        // deduct from pot\n        cheatLinePotWhale = cheatLinePotWhale.sub(10 ether);\n        // add to winers pendingFills\n        pendingFills[cheatLineWhale[winner]] = pendingFills[cheatLineWhale[winner]].add(10 ether);\n        // kicked from line because of win\n        isInLineWhale[cheatLineWhale[winner]] = false;\n        // \n        //emit newMaturedBonds(cheatLineWhale[winner], 10 ether);\n        emit won(cheatLineWhale[winner], true, 10 ether,2);\n    }\n    function takeArbitrageOpportunity () public payable updateAccount(msg.sender){\n        uint256 opportunityCost = arbitragePot.div(100);\n        require(msg.value > opportunityCost && opportunityCost > 1000);\n        \n        uint256 payout = opportunityCost.mul(101).div(100);\n        arbitragePot = arbitragePot.sub(payout);\n        //\n        uint256 value = msg.value;\n        address sender = msg.sender;\n        require(sender == tx.origin);\n        // add to winers pendingFills\n        pendingFills[sender] = pendingFills[sender].add(payout);\n        // add bonds to sender\n        \n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\n        // edit totalsupply\n        totalSupplyBonds = totalSupplyBonds.add(value);\n        // set paid eth to eth pending\n        ethPendingDistribution = ethPendingDistribution.add(value);\n        \n        emit won(sender, true, payout,3);\n    }\n    function takeArbitrageOpportunityRisky () public payable updateAccount(msg.sender){\n        uint256 opportunityCost = arbitragePotRisky.div(5);\n        require(msg.value > opportunityCost && opportunityCost > 1000);\n        \n        uint256 payout = opportunityCost.mul(101).div(100);\n        arbitragePotRisky = arbitragePotRisky.sub(payout);\n        //\n        uint256 value = msg.value;\n        address sender = msg.sender;\n        require(sender == tx.origin);\n        // add to winers pendingFills\n        pendingFills[sender] = pendingFills[sender].add(payout);\n        // add bonds to sender\n        \n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\n        // edit totalsupply\n        totalSupplyBonds = totalSupplyBonds.add(value);\n        // set paid eth to eth pending\n        ethPendingDistribution = ethPendingDistribution.add(value);\n        //emit bondsBought(sender, value);\n        //emit newMaturedBonds(sender, payout);\n        emit won(sender, true, payout,4);\n    }\n    function playProofOfIncreasingOdds (uint256 plays) public payable updateAccount(msg.sender){\n        //possible mm gas problem upon win?\n        \n        address sender  = msg.sender;\n        uint256 value = msg.value;\n        uint256 oddz = odds[sender];\n        uint256 oddzactual;\n        require(sender == tx.origin);\n        require(value >= plays.mul(0.1 ether));\n        require(plays > 0);\n        bool hasWon;\n        // fix this\n        for(uint i=0; i< plays; i++)\n        {\n            \n            if(1000- oddz - i > 2){oddzactual = 1000- oddz - i;}\n            if(1000- oddz - i <= 2){oddzactual =  2;}\n            uint256 outcome = uint256(blockhash(block.number-1)) % (oddzactual);\n            emit RNGgenerated(outcome);\n            if(outcome == 1){\n                // only 1 win per tx\n                i = plays;\n                // change pot\n                poioPot = poioPot.div(2);\n                // add to winers pendingFills\n                pendingFills[sender] = pendingFills[sender].add(poioPot);\n                // reset odds\n                odds[sender] = 0;\n                //emit newMaturedBonds(sender, poioPot);\n                hasWon = true;\n                uint256 amount = poioPot;\n            }\n        }\n        odds[sender] += i;\n        // add bonds to sender\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\n        // edit totalsupply\n        totalSupplyBonds = totalSupplyBonds.add(value);\n        // set paid eth to eth pending\n        ethPendingDistribution = ethPendingDistribution.add(value);\n        //\n        //emit bondsBought(sender, value);\n        emit won(sender, hasWon, amount,5);\n        \n    }\n    function playProofOfIncreasingOddsWhale (uint256 plays) public payable updateAccount(msg.sender){\n        //possible mm gas problem upon win?\n\n        address sender  = msg.sender;\n        uint256 value = msg.value;\n        uint256 oddz = oddsWhale[sender];\n        uint256 oddzactual;\n        require(sender == tx.origin);\n        require(value >= plays.mul(10 ether));\n        require(plays > 0);\n        bool hasWon;\n        // fix this\n        for(uint i=0; i< plays; i++)\n        {\n            \n            if(1000- oddz - i > 2){oddzactual = 1000- oddz - i;}\n            if(1000- oddz - i <= 2){oddzactual =  2;}\n            uint256 outcome = uint256(blockhash(block.number-1)) % (oddzactual);\n            emit RNGgenerated(outcome);\n            if(outcome == 1){\n                // only 1 win per tx\n                i = plays;\n                // change pot\n                poioPotWhale = poioPotWhale.div(2);\n                // add to winers pendingFills\n                pendingFills[sender] = pendingFills[sender].add(poioPotWhale);\n                // reset odds\n                oddsWhale[sender] = 0;\n                //emit newMaturedBonds(sender, poioPotWhale);\n                hasWon = true;\n                uint256 amount = poioPotWhale;\n            }\n        }\n        oddsWhale[sender] += i;\n        // add bonds to sender\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\n        // edit totalsupply\n        totalSupplyBonds = totalSupplyBonds.add(value);\n        // set paid eth to eth pending\n        ethPendingDistribution = ethPendingDistribution.add(value);\n        //\n        //emit bondsBought(sender, value);\n        emit won(sender, hasWon, amount,6);\n    }\n    function playProofOfIncreasingOddsALL (uint256 plays) public payable updateAccount(msg.sender){\n        //possible mm gas problem upon win?\n\n        address sender  = msg.sender;\n        uint256 value = msg.value;\n        uint256 oddz = oddsAll;\n        uint256 oddzactual;\n        require(sender == tx.origin);\n        require(value >= plays.mul(0.1 ether));\n        require(plays > 0);\n        bool hasWon;\n        // fix this\n        for(uint i=0; i< plays; i++)\n        {\n            \n            if(1000- oddz - i > 2){oddzactual = 1000- oddz - i;}\n            if(1000- oddz - i <= 2){oddzactual =  2;}\n            uint256 outcome = uint256(blockhash(block.number-1)) % (oddzactual);\n            emit RNGgenerated(outcome);\n            if(outcome == 1){\n                // only 1 win per tx\n                i = plays;\n                // change pot\n                poioPotAll = poioPotAll.div(2);\n                // add to winers pendingFills\n                pendingFills[sender] = pendingFills[sender].add(poioPotAll);\n                // reset odds\n                odds[sender] = 0;\n                //emit newMaturedBonds(sender, poioPotAll);\n                hasWon = true;\n                uint256 amount = poioPotAll;\n            }\n        }\n        oddsAll += i;\n        // add bonds to sender\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\n        // edit totalsupply\n        totalSupplyBonds = totalSupplyBonds.add(value);\n        // set paid eth to eth pending\n        ethPendingDistribution = ethPendingDistribution.add(value);\n        //emit bondsBought(sender, value);\n        emit won(sender, hasWon, amount,7);\n    }\n    function playProofOfDecreasingOddsALL (uint256 plays) public payable updateAccount(msg.sender){\n        //possible mm gas problem upon win?\n\n        address sender  = msg.sender;\n        uint256 value = msg.value;\n        uint256 oddz = decreasingOddsAll;\n        uint256 oddzactual;\n        require(sender == tx.origin);\n        require(value >= plays.mul(0.1 ether));\n        require(plays > 0);\n        bool hasWon;\n        // fix this\n        for(uint i=0; i< plays; i++)\n        {\n            \n            oddzactual = oddz + i;\n            uint256 outcome = uint256(blockhash(block.number-1)).add(now) % (oddzactual);\n            emit RNGgenerated(outcome);\n            if(outcome == 1){\n                // only 1 win per tx\n                i = plays;\n                // change pot\n                podoPotAll = podoPotAll.div(2);\n                // add to winers pendingFills\n                pendingFills[sender] = pendingFills[sender].add(podoPotAll);\n                // reset odds\n                decreasingOddsAll = 10;\n                //emit newMaturedBonds(sender, podoPotAll);\n                hasWon = true;\n                uint256 amount = podoPotAll;\n            }\n        }\n        decreasingOddsAll += i;\n        // add bonds to sender\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\n        // edit totalsupply\n        totalSupplyBonds = totalSupplyBonds.add(value);\n        // set paid eth to eth pending\n        ethPendingDistribution = ethPendingDistribution.add(value);\n        //emit bondsBought(sender, value);\n        emit won(sender, hasWon, amount,8);\n    }\n    function playRandomDistribution (uint256 plays) public payable updateAccount(msg.sender){\n        address sender = msg.sender;\n        uint256 value = msg.value;\n        require(value >= plays.mul(0.01 ether));\n        require(plays > 0);\n        uint256 spot;\n         for(uint i=0; i< plays; i++)\n        {\n            // get first in line\n            spot = randomNext + i;\n            randomDistr[spot] = sender;\n        }\n        // adjust pointer\n        randomNext = randomNext + i;\n        \n        \n        //give bonds for eth payment    \n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\n        // edit totalsupply\n        totalSupplyBonds = totalSupplyBonds.add(value);\n        // set paid eth to eth pending\n        ethPendingDistribution = ethPendingDistribution.add(value);\n        //emit bondsBought(sender, value);\n       \n    }\n    function payoutRandomDistr () public {\n        // needs someone in line and pot have honey\n        address sender = msg.sender;\n        require(randomPot >= 0.1 ether && randomNext > 0 && lastdraw != block.number);\n        require(sender == tx.origin);\n        // set winner\n        uint256 outcome = uint256(blockhash(block.number-1)).add(now) % (randomNext);\n        emit RNGgenerated(outcome);\n        // deduct from pot\n        randomPot = randomPot.sub(0.1 ether);\n        // add to winers pendingFills\n        pendingFills[randomDistr[outcome]] = pendingFills[randomDistr[outcome]].add(0.1 ether);\n        //emit newMaturedBonds(randomDistr[outcome], 0.1 ether);\n        // kicked from line because of win\n        randomDistr[outcome] = randomDistr[randomNext-1];\n        // reduce one the line\n        randomNext--;\n        // adjust lastdraw\n        lastdraw = block.number;\n        // \n        emit won(randomDistr[outcome], true, 0.1 ether,9);\n    }\n    function playRandomDistributionWhale (uint256 plays) public payable updateAccount(msg.sender){\n        address sender = msg.sender;\n        uint256 value = msg.value;\n        require(value >= plays.mul(1 ether));\n        require(plays > 0);\n        uint256 spot;\n         for(uint i=0; i< plays; i++)\n        {\n            // get first in line\n            spot = randomNextWhale + i;\n            randomDistrWhale[spot] = sender;\n        }\n        // adjust pointer\n        randomNextWhale = randomNextWhale + i;\n        \n        \n        //give bonds for eth payment    \n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\n        // edit totalsupply\n        totalSupplyBonds = totalSupplyBonds.add(value);\n        // set paid eth to eth pending\n        ethPendingDistribution = ethPendingDistribution.add(value);\n        //emit bondsBought(sender, value);\n        \n    }\n    function payoutRandomDistrWhale () public {\n        // needs someone in line and pot have honey\n        require(randomPotWhale >= 10 ether && randomNextWhale > 0 && lastdrawWhale != block.number);\n        require(msg.sender == tx.origin);\n        // set winner\n        uint256 outcome = uint256(blockhash(block.number-1)).add(now) % (randomNextWhale);\n        emit RNGgenerated(outcome);\n        // deduct from pot\n        randomPotWhale = randomPotWhale.sub(10 ether);\n        //emit newMaturedBonds(randomDistrWhale[outcome], 10 ether);\n        // add to winers pendingFills\n        pendingFills[randomDistrWhale[outcome]] = pendingFills[randomDistrWhale[outcome]].add(10 ether);\n        // kicked from line because of win\n        randomDistrWhale[outcome] = randomDistrWhale[randomNext-1];\n        // reduce one the line\n        randomNextWhale--;\n        // adjust lastdraw\n        lastdrawWhale = block.number;\n        // \n        emit won(randomDistrWhale[outcome], true, 10 ether,10);\n    }\n    function playRandomDistributionAlways (uint256 plays) public payable updateAccount(msg.sender){\n        address sender = msg.sender;\n        uint256 value = msg.value;\n        require(value >= plays.mul(0.1 ether));\n        require(plays > 0);\n        uint256 spot;\n         for(uint i=0; i< plays; i++)\n        {\n            // get first in line\n            spot = randomNextAlways + i;\n            randomDistrAlways[spot] = sender;\n        }\n        // adjust pointer\n        randomNextAlways = randomNextAlways + i;\n        \n        \n        //give bonds for eth payment    \n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\n        // edit totalsupply\n        totalSupplyBonds = totalSupplyBonds.add(value);\n        // set paid eth to eth pending\n        ethPendingDistribution = ethPendingDistribution.add(value);\n        //emit bondsBought(sender, value);\n    }\n    function payoutRandomDistrAlways () public {\n        // needs someone in line and pot have honey\n        require(msg.sender == tx.origin);\n        require(randomPotAlways >= 1 ether && randomNextAlways > 0 && lastdrawAlways != block.number);\n        // set winner\n        uint256 outcome = uint256(blockhash(block.number-1)).add(now) % (randomNextAlways);\n        emit RNGgenerated(outcome);\n        // deduct from pot\n        randomPotAlways = randomPotAlways.sub(1 ether);\n        //emit newMaturedBonds(randomDistrAlways[outcome], 1 ether);\n        // add to winers pendingFills\n        pendingFills[randomDistrAlways[outcome]] = pendingFills[randomDistrAlways[outcome]].add(1 ether);\n        // adjust lastdraw\n        lastdraw = block.number;\n        // \n        emit won(randomDistrAlways[outcome], true, 1 ether,11);\n    }\n    function playProofOfRediculousBadOdds (uint256 plays) public payable updateAccount(msg.sender){\n        //possible mm gas problem upon win?\n\n        address sender  = msg.sender;\n        uint256 value = msg.value;\n        uint256 oddz = amountPlayed;\n        uint256 oddzactual;\n        require(sender == tx.origin);\n        require(value >= plays.mul(0.0001 ether));\n        require(plays > 0);\n        bool hasWon;\n        // fix this\n        for(uint i=0; i< plays; i++)\n        {\n            oddzactual =  oddz.add(1000000).add(i);\n            uint256 outcome = uint256(blockhash(block.number-1)).add(now) % (oddzactual);\n            emit RNGgenerated(outcome);\n            if(outcome == 1){\n                // only 1 win per tx\n                i = plays;\n                // change pot\n                badOddsPot = badOddsPot.div(2);\n                // add to winers pendingFills\n                pendingFills[sender] = pendingFills[sender].add(badOddsPot);\n                //emit newMaturedBonds(randomDistrAlways[outcome], badOddsPot);\n                 hasWon = true;\n                uint256 amount = badOddsPot;\n            }\n        }\n        amountPlayed += i;\n        // add bonds to sender\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\n        // edit totalsupply\n        totalSupplyBonds = totalSupplyBonds.add(value);\n        // set paid eth to eth pending\n        ethPendingDistribution = ethPendingDistribution.add(value);\n        //emit bondsBought(sender, value);\n        emit won(sender, hasWon, amount,12);\n    }\n    function playProofOfDiceRolls (uint256 oddsTaken) public payable updateAccount(msg.sender){\n        //possible mm gas problem upon win?\n\n        address sender  = msg.sender;\n        uint256 value = msg.value;\n        uint256 oddz = amountPlayed;\n        uint256 possiblewin = value.mul(100).div(oddsTaken);\n        require(sender == tx.origin);\n        require(dicerollpot >= possiblewin);\n        require(oddsTaken > 0 && oddsTaken < 100);\n        bool hasWon;\n        // fix this\n       \n            uint256 outcome = uint256(blockhash(block.number-1)).add(now).add(oddz) % (100);\n            emit RNGgenerated(outcome);\n            if(outcome < oddsTaken){\n                // win\n                dicerollpot = dicerollpot.sub(possiblewin);\n               pendingFills[sender] = pendingFills[sender].add(possiblewin);\n                //emit newMaturedBonds(sender, possiblewin);\n                hasWon = true;\n                uint256 amount = possiblewin;\n            }\n        \n        amountPlayed ++;\n        // add bonds to sender\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\n        // edit totalsupply\n        totalSupplyBonds = totalSupplyBonds.add(value);\n        // set paid eth to eth pending\n        ethPendingDistribution = ethPendingDistribution.add(value);\n        //emit bondsBought(sender, value);\n        emit won(sender, hasWon, amount,13);\n    }\n    function playProofOfEthRolls (uint256 oddsTaken) public payable updateAccount(msg.sender){\n        //possible mm gas problem upon win?\n\n        address sender  = msg.sender;\n        uint256 value = msg.value;\n        uint256 oddz = amountPlayed;\n        uint256 possiblewin = value.mul(100).div(oddsTaken);\n        require(sender == tx.origin);\n        require(ethRollBank >= possiblewin);\n        require(oddsTaken > 0 && oddsTaken < 100);\n        bool hasWon;\n        // fix this\n       \n            uint256 outcome = uint256(blockhash(block.number-1)).add(now).add(oddz) % (100);\n            emit RNGgenerated(outcome);\n            if(outcome < oddsTaken){\n                // win\n                ethRollBank = ethRollBank.sub(possiblewin);\n               pendingFills[sender] = pendingFills[sender].add(possiblewin);\n               //emit newMaturedBonds(sender, possiblewin);\n                hasWon = true;\n                uint256 amount = possiblewin;\n            }\n        \n        amountPlayed ++;\n        // add bonds to sender\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\n        // edit totalsupply\n        totalSupplyBonds = totalSupplyBonds.add(value);\n        // set paid eth to eth pending\n        ethPendingDistribution = ethPendingDistribution.add(value.div(100));\n        // most eth to bank instead\n        ethRollBank = ethRollBank.add(value.div(100).mul(99));\n        \n        emit won(sender, hasWon, amount,14);\n    }\n    function helpUnstuckEth()public payable updateAccount(msg.sender){\n        uint256 value = msg.value;\n        address sender  = msg.sender;\n        require(sender == tx.origin);\n        require(value >= 2 finney);\n        hassEthstuck[currentHelper] = true;\n        canGetPaidForHelping = true;\n        currentHelper = msg.sender;\n        hassEthstuck[currentHelper] = false;\n        // add bonds to sender\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\n        // edit totalsupply\n        totalSupplyBonds = totalSupplyBonds.add(value);\n        // set paid eth to eth pending\n        ethPendingDistribution = ethPendingDistribution.add(value);\n        \n    }\n    function transferEthToHelper()public{\n        \n        address sender  = msg.sender;\n        require(sender == tx.origin);\n        require(hassEthstuck[sender] == true && canGetPaidForHelping == true);\n        require(ethStuckOnPLinc > 4 finney);\n        hassEthstuck[sender] = false;\n        canGetPaidForHelping = false;\n        ethStuckOnPLinc = ethStuckOnPLinc.sub(4 finney);\n        pendingFills[currentHelper] = pendingFills[currentHelper].add(4 finney) ;\n        //emit newMaturedBonds(currentHelper, 4 finney);\n        emit won(currentHelper, true, 4 finney,15);\n    }\n    function begForFreeEth () public payable updateAccount(msg.sender){\n         address sender  = msg.sender;\n         uint256 value = msg.value;\n        require(sender == tx.origin);\n        \n        require(value >= 0.1 ether );\n        bool hasWon;\n        if(PLincGiverOfEth >= 0.101 ether)\n        {\n            PLincGiverOfEth = PLincGiverOfEth.sub(0.1 ether);\n            pendingFills[sender] = pendingFills[sender].add( 0.101 ether) ;\n            //emit newMaturedBonds(sender, 0.101 ether);\n            hasWon = true;\n        }\n        // add bonds to sender\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\n        // edit totalsupply\n        totalSupplyBonds = totalSupplyBonds.add(value);\n        // set paid eth to eth pending\n        ethPendingDistribution = ethPendingDistribution.add(value);\n        //emit bondsBought(sender, value);\n        emit won(sender, hasWon, 0.101 ether,16);\n    }\n    function releaseVaultSmall () public {\n        // needs time or amount reached\n        uint256 vaultSize = vaultSmall;\n        require(timeSmall + 24 hours < now || vaultSize > 10 ether);\n        // reset time\n        timeSmall = now;\n        // empty vault\n        vaultSmall = 0;\n        // add to ethPendingDistribution\n        ethPendingDistribution = ethPendingDistribution.add(vaultSize);\n    }\n    function releaseVaultMedium () public {\n        // needs time or amount reached\n        uint256 vaultSize = vaultMedium;\n        require(timeMedium + 168 hours < now || vaultSize > 100 ether);\n        // reset time\n        timeMedium = now;\n        // empty vault\n        vaultMedium = 0;\n        // add to ethPendingDistribution\n        ethPendingDistribution = ethPendingDistribution.add(vaultSize);\n    }\n    function releaseVaultLarge () public {\n        // needs time or amount reached\n        uint256 vaultSize = vaultLarge;\n        require(timeLarge + 720 hours < now || vaultSize > 1000 ether);\n        // reset time\n        timeLarge = now;\n        // empty vault\n        vaultLarge = 0;\n        // add to ethPendingDistribution\n        ethPendingDistribution = ethPendingDistribution.add(vaultSize);\n    }\n    function releaseDrip () public {\n        // needs time or amount reached\n        uint256 vaultSize = vaultDrip;\n        require(timeDrip + 24 hours < now);\n        // reset time\n        timeDrip = now;\n        uint256 value = vaultSize.div(100);\n        // empty vault\n        vaultDrip = vaultDrip.sub(value);\n        // update divs params\n        totalDividendPoints = totalDividendPoints.add(value);\n        unclaimedDividends = unclaimedDividends.add(value);\n        emit bondsMatured(value);\n    }\n\n    constructor()\n        public\n    {\n        management[0] = 0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220;\n        management[1] = 0x58E90F6e19563CE82C4A0010CEcE699B3e1a6723;\n        management[2] = 0xf1A7b8b3d6A69C30883b2a3fB023593d9bB4C81E;\n        management[3] = 0x2615A4447515D97640E43ccbbF47E003F55eB18C;\n        management[4] = 0xD74B96994Ef8a35Fc2dA61c5687C217ab527e8bE;\n        management[5] = 0x2F145AA0a439Fa15e02415e035aaF9fDbDeCaBD5;\n        price[0] = 100 ether;\n        price[1] = 25 ether;\n        price[2] = 20 ether;\n        price[3] = 15 ether;\n        price[4] = 10 ether;\n        price[5] = 5 ether;\n        \n        bondsOutstanding[0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220]= 100 finney;\n        totalSupplyBonds = 100 finney;\n        decreasingOddsAll = 10;\n        \n        timeSmall = now;\n        timeMedium = now;\n        timeLarge = now;\n        timeDrip = now;\n    }\n    \n    // snip3d handlers\n    function soldierBuy () public {\n        require(Snip3dPot > 0.1 ether);\n        uint256 temp = Snip3dPot;\n        Snip3dPot = 0;\n        snip3dBridge.sacUp.value(temp)();\n    }\n    function snip3dVaultToPLinc() public {// from bridge to PLinc\n        uint256 incoming = snip3dBridge.harvestableBalance();\n        snip3dBridge.fetchBalance();\n        ethPendingDistribution = ethPendingDistribution.add(incoming);\n    }\n    // slaughter3d handlers\n    \n    function sendButcher() public{\n        require(Slaughter3dPot > 0.1 ether);\n        uint256 temp = Slaughter3dPot;\n        Slaughter3dPot = 0;\n        slaughter3dbridge.sacUp.value(temp)();\n    }\n    function slaughter3dbridgeToPLinc() public {\n        uint256 incoming = slaughter3dbridge.harvestableBalance();\n        slaughter3dbridge.fetchBalance();\n        ethPendingDistribution = ethPendingDistribution.add(incoming);\n    }\n \n// events\n    event bondsBought(address indexed player, uint256 indexed bonds);\n    event bondsFilled(address indexed player, uint256 indexed bonds);\n    event CEOsold(address indexed previousOwner, address indexed newOwner, uint256 indexed price);\n    event Directorsold(address indexed previousOwner, address indexed newOwner, uint256 indexed price, uint256 spot);\n    event cashout(address indexed player , uint256 indexed ethAmount);\n    event bondsMatured(uint256 indexed amount);\n    event RNGgenerated(uint256 indexed number);\n    event won(address player, bool haswon, uint256 amount ,uint256 line);\n\n}\ninterface HourglassInterface  {\n    function () payable external;\n    function buy(address _playerAddress) payable external returns(uint256);\n    function withdraw() external;\n    function myDividends(bool _includeReferralBonus) external view returns(uint256);\n\n}\ninterface SPASMInterface  {\n    function() payable external;\n    function disburse() external  payable;\n}\n\ninterface Snip3DBridgeInterface  {\n    function harvestableBalance()\n        view\n        external\n        returns(uint256)\n    ;\n    function sacUp () external payable ;\n    function fetchBalance ()  external ;\n    \n}\ninterface Slaughter3DBridgeInterface{\n    function harvestableBalance()\n        view\n        external\n        returns(uint256)\n    ;\n    function sacUp () external payable ;\n    function fetchBalance ()  external ;\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"Slaughter3dPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomPotWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextInLine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseDrip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"plays\",\"type\":\"uint256\"}],\"name\":\"playProofOfDecreasingOddsALL\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takeArbitrageOpportunityRisky\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutRandomDistrAlways\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fetchDataMain\",\"outputs\":[{\"name\":\"_ethPendingDistribution\",\"type\":\"uint256\"},{\"name\":\"_ethPendingManagement\",\"type\":\"uint256\"},{\"name\":\"_ethPendingLines\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividendPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPlayerID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"helpUnstuckEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decreasingOddsAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomNext\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomDistr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbitragePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbitragePotRisky\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IdToAdress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toupdate\",\"type\":\"address\"}],\"name\":\"fetchdivs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"begForFreeEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unclaimedDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"badOddsPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastInLine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"snip3dVaultToPLinc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bondsOwner\",\"type\":\"address\"}],\"name\":\"fillBonds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseVaultMedium\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ethManagementPropagate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"manVault\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"plays\",\"type\":\"uint256\"}],\"name\":\"playProofOfIncreasingOddsWhale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseVaultSmall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyCEO\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"percentageToReinvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hassEthstuck\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"plays\",\"type\":\"uint256\"}],\"name\":\"playProofOfRediculousBadOdds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"plays\",\"type\":\"uint256\"}],\"name\":\"playRandomDistributionWhale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeDrip\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"odds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultSmall\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setAuto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendButcher\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"management\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pointMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultLarge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInLine\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethStuckOnPLinc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRollBank\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomDistrWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takeArbitrageOpportunity\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fetchCheatLine\",\"outputs\":[{\"name\":\"_1stInLine\",\"type\":\"address\"},{\"name\":\"_2ndInLine\",\"type\":\"address\"},{\"name\":\"_3rdInLine\",\"type\":\"address\"},{\"name\":\"_sizeOfPot\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeSmall\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"plays\",\"type\":\"uint256\"}],\"name\":\"playProofOfIncreasingOddsALL\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poioPotWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ethPropagate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultDrip\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeMedium\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"plays\",\"type\":\"uint256\"}],\"name\":\"playProofOfIncreasingOdds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"harvestabledivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Snip3dPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendsOwing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLarge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"slaughter3dbridgeToPLinc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cheatLine\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stackOwner\",\"type\":\"address\"},{\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"freelanceReinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutCheatLine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"uint256\"}],\"name\":\"managementWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastdrawWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingFills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PLincGiverOfEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cheatLinePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oddsAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethPendingManagement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cheatLinePotWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canGetPaidForHelping\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bondsOwner\",\"type\":\"address\"},{\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"forceBonds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oddsTaken\",\"type\":\"uint256\"}],\"name\":\"playProofOfDiceRolls\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerVault\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInLineWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"soldierBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"oddsWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferEthToHelper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lineNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fetchCheatLineWhale\",\"outputs\":[{\"name\":\"_1stInLine2\",\"type\":\"address\"},{\"name\":\"_2ndInLine2\",\"type\":\"address\"},{\"name\":\"_3rdInLine2\",\"type\":\"address\"},{\"name\":\"_sizeOfPot2\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutRandomDistr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dicerollpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomDistrAlways\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"plays\",\"type\":\"uint256\"}],\"name\":\"playRandomDistribution\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultMedium\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lineNumberWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fetchP3Ddivs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomPotAlways\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"plays\",\"type\":\"uint256\"}],\"name\":\"playRandomDistributionAlways\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PendinglinesToLines\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutCheatLineWhale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextInLineWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cheatLineWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomNextAlways\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomNextWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableAuto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyBonds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toPay\",\"type\":\"address\"}],\"name\":\"vaultToWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poioPotAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poioPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spot\",\"type\":\"uint256\"}],\"name\":\"buyDirector\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondsOutstanding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowAutoInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"podoPotAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cheatTheLineWhale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountPlayed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutRandomDistrWhale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentHelper\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastInLineWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastdrawAlways\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cheatTheLine\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseVaultLarge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oddsTaken\",\"type\":\"uint256\"}],\"name\":\"playProofOfEthRolls\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"masternode\",\"type\":\"address\"},{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"buyBonds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"bonds\",\"type\":\"uint256\"}],\"name\":\"bondsBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"bonds\",\"type\":\"uint256\"}],\"name\":\"bondsFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"CEOsold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"spot\",\"type\":\"uint256\"}],\"name\":\"Directorsold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"cashout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bondsMatured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"RNGgenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"haswon\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"line\",\"type\":\"uint256\"}],\"name\":\"won\",\"type\":\"event\"}]",
  "bytecode": ""
}