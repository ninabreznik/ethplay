{
  "address": "0x3b09c3ec283e6afbc0a2f459ae0843ab6f1da6c1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TAXChain",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-13\n*/\n\npragma solidity ^0.4.16;\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n  mapping(address => uint256) balances;\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value > 0 && _value <= balances[msg.sender]);\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n  mapping (address => mapping (address => uint256)) internal allowed;\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value > 0 && _value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n  bool public paused = false;\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n/**\n * @title Pausable token\n *\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n}\n/**\n * @title TAXChain\n *\n * @dev Implementation of TAXChain based on the basic standard token.\n */\ncontract TAXChain is PausableToken {\n    /**\n    * Public variables of the token\n    * The following variables are OPTIONAL vanities. One does not have to include them.\n    * They allow one to customise the token contract & in no way influences the core functionality.\n    * Some wallets/interfaces might not even bother to look at this information.\n    */\n    string public name = \"TAXChain\";\n    string public symbol = \"TAX\";\n    string public version = '1.0.0';\n    uint8 public decimals = 18;\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     */\n    function TAXChain() {\n      totalSupply = 10000000000 * (10**(uint256(decimals)));\n      balances[0xAAA50586b0aB10dcb4Ce664A475Fb506419dF2E4] = totalSupply;    // Give the creator all initial tokens\n\t  Transfer(address(0),0xAAA50586b0aB10dcb4Ce664A475Fb506419dF2E4, totalSupply);\n    }\n    function () {\n        //if ether is sent to this address, send it back.\n        revert();\n    }\n}",
  "bytecode": "606060409081526003805460a060020a60ff02191690558051908101604052600881527f544158436861696e0000000000000000000000000000000000000000000000006020820152600490805161005b9291602001906101ae565b5060408051908101604052600381527f5441580000000000000000000000000000000000000000000000000000000000602082015260059080516100a39291602001906101ae565b5060408051908101604052600581527f312e302e30000000000000000000000000000000000000000000000000000000602082015260069080516100eb9291602001906101ae565b506007805460ff19166012179055341561010457600080fd5b60038054600160a060020a03191633600160a060020a031617905560075460ff16600a0a6402540be40002600081815573aaa50586b0ab10dcb4ce664a475fb506419df2e480825260016020527f470d4633236a57e37f9244597801ef26b5b1da5438284904ca2429dcb4db6d39839055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060405190815260200160405180910390a3610249565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101ef57805160ff191683800117855561021c565b8280016001018555821561021c579182015b8281111561021c578251825591602001919060010190610201565b5061022892915061022c565b5090565b61024691905b808211156102285760008155600101610232565b90565b610a89806102586000396000f3006060604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ea578063095ea7b31461017457806318160ddd146101aa57806323b872dd146101cf578063313ce567146101f75780633f4ba83a1461022057806354fd4d50146102355780635c975abb1461024857806370a082311461025b5780638456cb591461027a5780638da5cb5b1461028d57806395d89b41146102bc578063a9059cbb146102cf578063dd62ed3e146102f1578063f2fde38b14610316575b34156100e557600080fd5b600080fd5b34156100f557600080fd5b6100fd610335565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610139578082015183820152602001610121565b50505050905090810190601f1680156101665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017f57600080fd5b610196600160a060020a03600435166024356103d3565b604051901515815260200160405180910390f35b34156101b557600080fd5b6101bd6103fe565b60405190815260200160405180910390f35b34156101da57600080fd5b610196600160a060020a0360043581169060243516604435610404565b341561020257600080fd5b61020a610431565b60405160ff909116815260200160405180910390f35b341561022b57600080fd5b61023361043a565b005b341561024057600080fd5b6100fd6104b9565b341561025357600080fd5b610196610524565b341561026657600080fd5b6101bd600160a060020a0360043516610534565b341561028557600080fd5b61023361054f565b341561029857600080fd5b6102a06105d3565b604051600160a060020a03909116815260200160405180910390f35b34156102c757600080fd5b6100fd6105e2565b34156102da57600080fd5b610196600160a060020a036004351660243561064d565b34156102fc57600080fd5b6101bd600160a060020a0360043581169060243516610671565b341561032157600080fd5b610233600160a060020a036004351661069c565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103cb5780601f106103a0576101008083540402835291602001916103cb565b820191906000526020600020905b8154815290600101906020018083116103ae57829003601f168201915b505050505081565b60035460009060a060020a900460ff16156103ed57600080fd5b6103f78383610737565b9392505050565b60005481565b60035460009060a060020a900460ff161561041e57600080fd5b6104298484846107a3565b949350505050565b60075460ff1681565b60035433600160a060020a0390811691161461045557600080fd5b60035460a060020a900460ff16151561046d57600080fd5b6003805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103cb5780601f106103a0576101008083540402835291602001916103cb565b60035460a060020a900460ff1681565b600160a060020a031660009081526001602052604090205490565b60035433600160a060020a0390811691161461056a57600080fd5b60035460a060020a900460ff161561058157600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600354600160a060020a031681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103cb5780601f106103a0576101008083540402835291602001916103cb565b60035460009060a060020a900460ff161561066757600080fd5b6103f78383610933565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a039081169116146106b757600080fd5b600160a060020a03811615156106cc57600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6000600160a060020a03831615156107ba57600080fd5b6000821180156107e25750600160a060020a0384166000908152600160205260409020548211155b15156107ed57600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561082057600080fd5b600160a060020a038416600090815260016020526040902054610849908363ffffffff610a3c16565b600160a060020a03808616600090815260016020526040808220939093559085168152205461087e908363ffffffff610a4e16565b600160a060020a038085166000908152600160209081526040808320949094558783168252600281528382203390931682529190915220546108c6908363ffffffff610a3c16565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b6000600160a060020a038316151561094a57600080fd5b6000821180156109725750600160a060020a0333166000908152600160205260409020548211155b151561097d57600080fd5b600160a060020a0333166000908152600160205260409020546109a6908363ffffffff610a3c16565b600160a060020a0333811660009081526001602052604080822093909355908516815220546109db908363ffffffff610a4e16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600082821115610a4857fe5b50900390565b6000828201838110156103f757fe00a165627a7a72305820e412be1fb00f3af66e04fbb99cca3dccb45a6f214d37e06863328e119586fa120029"
}