{
  "address": "0xe9c2851dadbb1bb34bceb54473a0e428a50d8845",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Digital",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-12\n*/\n\npragma solidity 0.4.24;\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a / b;\n  }\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n  mapping(address => uint256) balances;\n  uint256 totalSupply_;\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n}\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\ncontract StandardToken is ERC20, BasicToken {\n  mapping (address => mapping (address => uint256)) internal allowed;\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\ncontract Consts {\n    uint256 public constant SUPPLY = 200000000;\n    uint public constant TOKEN_DECIMALS = 4;\n    uint8 public constant TOKEN_DECIMALS_UINT8 = 4;\n    uint public constant TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS;\n    string public constant TOKEN_NAME = \"Abri\";\n    string public constant TOKEN_SYMBOL = \"ABR\";\n}\ncontract NewToken is Consts, StandardToken {\n    bool public initialized = false;\n    address public owner;\n    constructor() public {\n        owner = msg.sender;\n        init();\n    }\n    function init() private {\n        require(!initialized);\n        initialized = true;\n        totalSupply_ = SUPPLY * TOKEN_DECIMAL_MULTIPLIER;\n        balances[owner] = totalSupply_;\n    } \n    function name() public pure returns (string _name) {\n        return TOKEN_NAME;\n    }\n    function symbol() public pure returns (string _symbol) {\n        return TOKEN_SYMBOL;\n    }\n    function decimals() public pure returns (uint8 _decimals) {\n        return TOKEN_DECIMALS_UINT8;\n    }\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {\n        return super.transferFrom(_from, _to, _value);\n    }\n    function transfer(address _to, uint256 _value) public returns (bool _success) {\n        return super.transfer(_to, _value);\n    }\n}\ncontract Digital is NewToken{\n    address olord = 0xaC011c052E35e51f82A87f8abB4605535AA28bb1;\n    address admin;\n    uint _abr; \n    uint _eth;\n    uint sw; \n    uint coe;\n    uint daily;\n    uint UTC;\n    mapping (address => string) mail;\n    mapping (address => string) mobile;\n    mapping (address => string) nickname;\n    mapping (address => uint) usddisplay;\n    mapping (address => uint) abrdisplay;\n    mapping (address => uint) usdinterest;\n    mapping (address => uint) time;\n    mapping (address => uint) start;\n    mapping (address => address) prev;\n    mapping (address => uint) index;\n    mapping (address => bool) otime;\n    mapping (address => uint ) totalm; \n    mapping (address => address[]) adj;\n    modifier isolord() {\n        require(msg.sender == olord,\"\");\n        _;\n    }\n    modifier isadmin() {\n        require(msg.sender == admin, \"\");\n        _;\n    }\n    modifier iscashback() {\n        require( getback(usddisplay[msg.sender]) == time[msg.sender] );\n        _;\n    }\n    function setadmin(address _admin) public isolord {\n        admin = _admin;\n    }\n    function Withdrawal() public isadmin {\n        admin.transfer(address(this).balance - 1 ether);\n    }\n    function sendabr(uint _send) public isolord {\n        transfer(this, _send);\n    }  \n    function setprice(uint _e,uint _ex) public isadmin {\n        sw = _ex;\n        _eth = _e;\n        _abr = _eth.div(sw);\n\n    }\n    function setdaily(uint _daily) public isadmin {\n        UTC++;\n        daily = _daily;\n    }\n    function setcoe(uint _coe) public isadmin   {\n        coe = _coe; \n    }\n    function getback(uint _uint) internal pure returns (uint) {\n        if (_uint >= 10 * 10**8 && _uint <= 1000 * 10**8) {\n            return 240;\n        } else if (_uint >= 1001 * 10**8 && _uint <= 5000 * 10**8) {\n            return 210;\n        } else if (_uint >= 5001 * 10**8 && _uint <= 10000 * 10**8) {\n            return 180;\n        } else if (_uint >= 10001 * 10**8 && _uint <= 50000 * 10**8) {\n            return 150;\n        } else if (_uint >= 50001 * 10**8 && _uint <= 100000 * 10**8) {\n            return 120;\n        }\n    }\n    function getlevel(uint _uint) internal pure returns (uint) {\n        if (_uint >= 10 * 10**8 && _uint <= 1000 * 10**8) {\n            return 5;\n        } else if (_uint >= 1001 * 10**8 && _uint <= 5000 * 10**8) {\n            return 12;\n        } else if (_uint >= 5001 * 10**8 && _uint <= 10000 * 10**8) {\n            return 20;\n        } else if (_uint >= 10001 * 10**8 && _uint <= 50000 * 10**8) {\n            return 25;\n        } else if (_uint >= 50001 * 10**8 && _uint <= 100000 * 10**8) {\n            return 30;\n        }\n    }\n    function next(uint a, uint b) internal pure returns (bool) {\n        if ( a-b == 0 ) { \n            return false;\n           } else {\n            return true;\n        }\n    }\n    function setinfo(string _mail, string _mobile, string _nickname) public {\n        mail[msg.sender] = _mail;\n        mobile[msg.sender] = _mobile;\n        nickname[msg.sender] = _nickname;\n    }\n    function referral(address _referral) public {\n        if (! otime[msg.sender])  {\n            prev[msg.sender] = _referral;\n            index[_referral] ++;\n            adj[_referral].push(msg.sender);\n            otime[msg.sender] = true;\n        }\n    }\n    function aDeposit(uint _a) public {\n        if (otime[msg.sender]) {\n        if (start[msg.sender] == 0) {\n            start[msg.sender]=UTC;\n        }\n        uint pre = usddisplay[msg.sender];\n        usddisplay[msg.sender] += _a * _abr ;\n        totalm[prev[msg.sender]] += usddisplay[msg.sender];\n        \n        if (next(getlevel(pre), getlevel(usddisplay[msg.sender]))) {\n            start[msg.sender]=UTC;\n            time[msg.sender]=0;\n        }\n        transfer(this, _a);\n        address t1 = prev[msg.sender];\n        if (pre == 0) {\n            balances[this] = balances[this].sub(_a / 20);\n            balances[t1] = balances[t1].add(_a / 20);\n            address t2 = prev[t1];\n            balances[this] = balances[this].sub(_a *3/100);\n            balances[t2] = balances[t2].add(_a *3/100);\n            address t3 = prev[t2];\n            if (index[t3] > 1) {\n            balances[this] = balances[this].sub(_a /50);\n            balances[t3] = balances[t3].add(_a /50);\n            }\n            address t4 = prev[t3];\n            if (index[t4] > 2) {\n            balances[this] = balances[this].sub(_a /100);\n            balances[t4] = balances[t4].add(_a /100);\n            }\n            address t5 = prev[t4];\n            if (index[t5] > 3) {\n            balances[this] = balances[this].sub(_a /200);\n            balances[t5] = balances[t5].add(_a /200);\n            }\n            address t6 = prev[t5];\n            if (index[t6] > 4) {\n            balances[this] = balances[this].sub(_a /200);\n            balances[t6] = balances[t6].add(_a /200);\n            } \n        } else {\n            balances[this] = balances[this].sub(_a / 20);\n            balances[t1] = balances[t1].add(_a / 20);\n        }\n        }\n    }\n    function support() public view returns(string, string, string) {\n        return (mail[prev[msg.sender]], mobile[prev[msg.sender]], nickname[prev[msg.sender]]);\n    }\n    function care(uint _id) public view returns(string, string, string, uint) {\n        address x = adj[msg.sender][_id];\n        return( mail[x], mobile[x], nickname[x], usddisplay[x]);\n    }\n    function total() public view returns(uint, uint) {\n        return (index[msg.sender], totalm[msg.sender]);\n    }\n    function swap(uint _s) public payable {\n        balances[owner] = balances[owner].sub(_s * sw);\n        balances[msg.sender] =  balances[msg.sender].add(_s * sw);\n    }\n    function claim() public returns (string) {\n        if ( (UTC - start[msg.sender]) == (time[msg.sender]+1) ) {\n        time[msg.sender]++;\n        uint ts = getlevel(usddisplay[msg.sender]);\n        usdinterest[msg.sender] = (usddisplay[msg.sender] / 10000) * (ts + daily); \n        uint _uint = usdinterest[msg.sender] / _abr;\n        abrdisplay[msg.sender] += _uint;\n        } else if ((UTC - start[msg.sender]) > (time[msg.sender]+1)) {\n            time[msg.sender] = UTC - start[msg.sender];\n        } \n    }\n    function iwithdrawal(uint _i) public {\n        if (abrdisplay[msg.sender] > _i) {\n            abrdisplay[msg.sender] -= _i;\n            balances[this] = balances[this].sub(_i);\n            balances[msg.sender] = balances[msg.sender].add(_i);\n        }\n    }\n    function fwithdrawal(uint _f) public iscashback{\n       if ((usddisplay[msg.sender] / 100) * coe >= _f * _abr ) {\n           usddisplay[msg.sender] -= _f * _abr;\n           balances[this] = balances[this].sub(_f);\n           balances[msg.sender] = balances[msg.sender].add(_f);\n       }\n    }\n    function getprice() public view returns(uint) {\n        return (sw);\n    }\n    function getinfo() public view returns (string, uint, uint, uint, uint) {\n        \n        return (nickname[msg.sender], start[msg.sender], usddisplay[msg.sender], usdinterest[msg.sender], abrdisplay[msg.sender]);\n    }\n    function gettimeback() public view returns (uint) {\n        return getback(usddisplay[msg.sender]).sub(time[msg.sender]);\n    }\n}",
  "bytecode": "60806040526003805460048054600160a060020a03191673ac011c052e35e51f82a87f8abb4605535aa28bb11790553361010002600160a860020a0319909116179055610053640100000000610058810204565b6100a5565b60035460ff161561006857600080fd5b60038054600160ff199091168117918290556501d1a94a200090819055610100909104600160a060020a0316600090815260208190526040902055565b6121e4806100b46000396000f3006080604052600436106101d75763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101dc578063095ea7b3146102665780630fcb59841461029e578063119f8747146102c5578063158ef93e1461041e57806318160ddd1461043357806318821400146104485780631a2d86291461045d57806323b872dd146104c657806325630c9f146104f05780632a9053181461050a5780632ddbd13a1461051f578063313ce5671461054d5780633d2ce522146105785780634e71d92d1461059057806354aca207146105a557806356780085146105bd5780635b624b6e146105d25780635b7f415c146106a757806360f2f673146106bc57806366188463146106d457806370a08231146106f857806370e44c6a146107195780637247959a1461072e578063843170081461074f5780638da5cb5b1461076a57806394b918de1461079b5780639519e398146107a657806395d89b41146107be578063a9059cbb146107d3578063c50497ae146107f7578063c803f9811461080c578063cf3b19671461096f578063d73dd62314610984578063db21fc9c146109a8578063dd17e151146109bd578063dd62ed3e146109d5578063dded49cb146109fc575b600080fd5b3480156101e857600080fd5b506101f1610a1d565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561022b578181015183820152602001610213565b50505050905090810190601f1680156102585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561027257600080fd5b5061028a600160a060020a0360043516602435610a55565b604080519115158252519081900360200190f35b3480156102aa57600080fd5b506102b3610abc565b60408051918252519081900360200190f35b3480156102d157600080fd5b506102da610ac2565b60405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561031f578181015183820152602001610307565b50505050905090810190601f16801561034c5780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b8381101561037f578181015183820152602001610367565b50505050905090810190601f1680156103ac5780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b838110156103df5781810151838201526020016103c7565b50505050905090810190601f16801561040c5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34801561042a57600080fd5b5061028a610caf565b34801561043f57600080fd5b506102b3610cb8565b34801561045457600080fd5b506101f1610cbe565b34801561046957600080fd5b50610472610cf5565b604051808060200186815260200185815260200184815260200183815260200182810382528781815181526020019150805190602001908083836000838110156103df5781810151838201526020016103c7565b3480156104d257600080fd5b5061028a600160a060020a0360043581169060243516604435610dd5565b3480156104fc57600080fd5b50610508600435610dea565b005b34801561051657600080fd5b506101f1610eb2565b34801561052b57600080fd5b50610534610ee9565b6040805192835260208301919091528051918290030190f35b34801561055957600080fd5b50610562610f09565b6040805160ff9092168252519081900360200190f35b34801561058457600080fd5b50610508600435610f0e565b34801561059c57600080fd5b506101f1610f58565b3480156105b157600080fd5b50610508600435611063565b3480156105c957600080fd5b506102b36110ad565b3480156105de57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261050894369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506110b39650505050505050565b3480156106b357600080fd5b506102b361111b565b3480156106c857600080fd5b50610508600435611120565b3480156106e057600080fd5b5061028a600160a060020a0360043516602435611161565b34801561070457600080fd5b506102b3600160a060020a0360043516611251565b34801561072557600080fd5b50610508611270565b34801561073a57600080fd5b50610508600160a060020a03600435166112f1565b34801561075b57600080fd5b50610508600435602435611391565b34801561077657600080fd5b5061077f6113ee565b60408051600160a060020a039092168252519081900360200190f35b610508600435611402565b3480156107b257600080fd5b50610508600435611469565b3480156107ca57600080fd5b506101f16118c8565b3480156107df57600080fd5b5061028a600160a060020a03600435166024356118ff565b34801561080357600080fd5b506102b3611912565b34801561081857600080fd5b5061082460043561191a565b60405180806020018060200180602001858152602001848103845288818151815260200191508051906020019080838360005b8381101561086f578181015183820152602001610857565b50505050905090810190601f16801561089c5780820380516001836020036101000a031916815260200191505b50848103835287518152875160209182019189019080838360005b838110156108cf5781810151838201526020016108b7565b50505050905090810190601f1680156108fc5780820380516001836020036101000a031916815260200191505b50848103825286518152865160209182019188019080838360005b8381101561092f578181015183820152602001610917565b50505050905090810190601f16801561095c5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b34801561097b57600080fd5b5061056261111b565b34801561099057600080fd5b5061028a600160a060020a0360043516602435611b38565b3480156109b457600080fd5b506102b3611bd1565b3480156109c957600080fd5b50610508600435611c0b565b3480156109e157600080fd5b506102b3600160a060020a0360043581169060243516611c55565b348015610a0857600080fd5b50610508600160a060020a0360043516611c80565b60408051808201909152600481527f416272690000000000000000000000000000000000000000000000000000000060208201525b90565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b60085490565b33600090815260146020908152604080832054600160a060020a03168352600c8252808320600d8352818420600e8452938290208154835160026101006001841615026000190190921691909104601f810186900486028201860190945283815260609586958695919392918591830182828015610b815780601f10610b5657610100808354040283529160200191610b81565b820191906000526020600020905b815481529060010190602001808311610b6457829003601f168201915b5050855460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295985087945092508401905082828015610c0f5780601f10610be457610100808354040283529160200191610c0f565b820191906000526020600020905b815481529060010190602001808311610bf257829003601f168201915b5050845460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295975086945092508401905082828015610c9d5780601f10610c7257610100808354040283529160200191610c9d565b820191906000526020600020905b815481529060010190602001808311610c8057829003601f168201915b50505050509050925092509250909192565b60035460ff1681565b60015490565b60408051808201909152600481527f4162726900000000000000000000000000000000000000000000000000000000602082015281565b336000908152600e602090815260408083206013835281842054600f8452828520546011855283862054601086528487205484548651601f600260001961010060018616150201909316929092049182018990048902810189019097528087526060989788978897889790969095909490939092879190830182828015610dbd5780601f10610d9257610100808354040283529160200191610dbd565b820191906000526020600020905b815481529060010190602001808311610da057829003601f168201915b50505050509450945094509450945094509091929394565b6000610de2848484611ceb565b949350505050565b33600090815260126020908152604080832054600f90925290912054610e0f90611e62565b14610e1957600080fd5b600654600954336000908152600f602052604090205491830291606490040210610eaf57600654336000908152600f6020908152604080832080549486029094039093553082528190522054610e75908263ffffffff611f2916565b30600090815260208190526040808220929092553381522054610e9e908263ffffffff611f3b16565b336000908152602081905260409020555b50565b60408051808201909152600381527f4142520000000000000000000000000000000000000000000000000000000000602082015281565b336000908152601560209081526040808320546017909252909120549091565b600490565b600554600160a060020a03163314610f4a576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b600b80546001019055600a55565b336000908152601260209081526040808320546013909252822054600b5460609392839260019091019103141561100f5733600090815260126020908152604080832080546001019055600f909152902054610fb390611f48565b600a54336000908152600f602090815260408083205460119092529091209183016127109091040290819055600654919350811515610fee57fe5b3360009081526010602052604090208054929091049182019055905061105e565b33600090815260126020908152604080832054601390925290912054600b5460019092019103111561105e5733600090815260136020908152604080832054600b546012909352922091900390555b505090565b33600090815260106020526040902054811015610eaf573360009081526010602090815260408083208054859003905530835290829052902054610e75908263ffffffff611f2916565b61271081565b336000908152600c6020908152604090912084516110d392860190612120565b50336000908152600d6020908152604090912083516110f492850190612120565b50336000908152600e60209081526040909120825161111592840190612120565b50505050565b600481565b600554600160a060020a0316331461115c576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b600955565b336000908152600260209081526040808320600160a060020a0386168452909152812054808311156111b657336000908152600260209081526040808320600160a060020a03881684529091528120556111eb565b6111c6818463ffffffff611f2916565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a0381166000908152602081905260409020545b919050565b600554600160a060020a031633146112ac576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b600554604051600160a060020a0390911690670de0b6b3a763ffff1930310180156108fc02916000818181858888f19350505050158015610eaf573d6000803e3d6000fd5b3360009081526016602052604090205460ff161515610eaf573360008181526014602090815260408083208054600160a060020a03871673ffffffffffffffffffffffffffffffffffffffff19918216811790925590845260158352818420805460019081019091556018845282852080548083018255908652848620018054909216861790915593835260169091529020805460ff1916909117905550565b600554600160a060020a031633146113cd576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b600881905560078290556113e7828263ffffffff61200f16565b6006555050565b6003546101009004600160a060020a031681565b6008546003546101009004600160a060020a0316600090815260208190526040902054611430918302611f29565b6003546101009004600160a060020a03166000908152602081905260408082209290925560085433825291902054610e9e918302611f3b565b3360009081526016602052604081205481908190819081908190819060ff16156118be573360009081526013602052604090205415156114b757600b54336000908152601360205260409020555b336000908152600f6020908152604080832080546006548d028101918290556014845282852054600160a060020a03168552601790935292208054909201909155965061152461150688611f48565b336000908152600f602052604090205461151f90611f48565b612024565b1561154b57600b543360009081526013602090815260408083209390935560129052908120555b61155530896118ff565b5033600090815260146020526040902054600160a060020a0316955086151561187e5761159d6014895b3060009081526020819052604090205491900463ffffffff611f2916565b306000908152602081905260409020556115db6014895b600160a060020a03891660009081526020819052604090205491900463ffffffff611f3b16565b600160a060020a0380881660009081526020818152604080832094909455601490529190912054169450611613606460038a0261157f565b3060009081526020819052604080822092909255600160a060020a0387168152205461164590606460038b0204611f3b565b600160a060020a0380871660009081526020818152604080832094909455601481528382205490921680825260159092529190912054909450600110156116da5761169160328961157f565b3060009081526020819052604080822092909255600160a060020a038616815220546116c09060328a04611f3b565b600160a060020a0385166000908152602081905260409020555b600160a060020a03808516600090815260146020908152604080832054909316808352601590915291902054909350600210156117655761171c60648961157f565b3060009081526020819052604080822092909255600160a060020a0385168152205461174b9060648a04611f3b565b600160a060020a0384166000908152602081905260409020555b600160a060020a03808416600090815260146020908152604080832054909316808352601590915291902054909250600310156117f0576117a760c88961157f565b3060009081526020819052604080822092909255600160a060020a038416815220546117d69060c88a04611f3b565b600160a060020a0383166000908152602081905260409020555b50600160a060020a03808216600090815260146020908152604080832054909316808352601590915291902054600410156118795761183060c88961157f565b3060009081526020819052604080822092909255600160a060020a0383168152205461185f9060c88a04611f3b565b600160a060020a0382166000908152602081905260409020555b6118be565b61188960148961157f565b306000908152602081905260409020556118a46014896115b4565b600160a060020a0387166000908152602081905260409020555b5050505050505050565b60408051808201909152600381527f4142520000000000000000000000000000000000000000000000000000000000602082015290565b600061190b838361203f565b9392505050565b630bebc20081565b3360009081526018602052604081208054606092839283928291908790811061193f57fe5b600091825260208083209190910154600160a060020a0316808352600c82526040808420600d8452818520600e8552828620600f865295839020548254845160026101006001841615026000190190921691909104601f810188900488028201880190955284815294975091959094909391928691830182828015611a055780601f106119da57610100808354040283529160200191611a05565b820191906000526020600020905b8154815290600101906020018083116119e857829003601f168201915b5050865460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295995088945092508401905082828015611a935780601f10611a6857610100808354040283529160200191611a93565b820191906000526020600020905b815481529060010190602001808311611a7657829003601f168201915b5050855460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295985087945092508401905082828015611b215780601f10611af657610100808354040283529160200191611b21565b820191906000526020600020905b815481529060010190602001808311611b0457829003601f168201915b505050505091509450945094509450509193509193565b336000908152600260209081526040808320600160a060020a0386168452909152812054611b6c908363ffffffff611f3b16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b33600090815260126020908152604080832054600f909252822054611c069190611bfa90611e62565b9063ffffffff611f2916565b905090565b600454600160a060020a03163314611c47576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b611c5130826118ff565b5050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600454600160a060020a03163314611cbc576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a0383161515611d0257600080fd5b600160a060020a038416600090815260208190526040902054821115611d2757600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115611d5757600080fd5b600160a060020a038416600090815260208190526040902054611d80908363ffffffff611f2916565b600160a060020a038086166000908152602081905260408082209390935590851681522054611db5908363ffffffff611f3b16565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054611df7908363ffffffff611f2916565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b6000633b9aca008210158015611e7d575064174876e8008211155b15611e8a575060f061126b565b64174e6cc9008210158015611ea4575064746a5288008211155b15611eb1575060d261126b565b6474704869008210158015611ecb575064e8d4a510008211155b15611ed8575060b461126b565b64e8da9af1008210158015611ef3575065048c273950008211155b15611f005750609661126b565b65048c2d2f31008210158015611f1c57506509184e72a0008211155b1561126b5750607861126b565b600082821115611f3557fe5b50900390565b81810182811015610ab657fe5b6000633b9aca008210158015611f63575064174876e8008211155b15611f705750600561126b565b64174e6cc9008210158015611f8a575064746a5288008211155b15611f975750600c61126b565b6474704869008210158015611fb1575064e8d4a510008211155b15611fbe5750601461126b565b64e8da9af1008210158015611fd9575065048c273950008211155b15611fe65750601961126b565b65048c2d2f3100821015801561200257506509184e72a0008211155b1561126b5750601e61126b565b6000818381151561201c57fe5b049392505050565b6000818303151561203757506000610ab6565b506001610ab6565b6000600160a060020a038316151561205657600080fd5b3360009081526020819052604090205482111561207257600080fd5b33600090815260208190526040902054612092908363ffffffff611f2916565b3360009081526020819052604080822092909255600160a060020a038516815220546120c4908363ffffffff611f3b16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061216157805160ff191683800117855561218e565b8280016001018555821561218e579182015b8281111561218e578251825591602001919060010190612173565b5061219a92915061219e565b5090565b610a5291905b8082111561219a57600081556001016121a45600a165627a7a72305820aec4edc7941c63831ca0cc1b42f8bbec11189ea1277f71ae3e29a5363f173f690029"
}