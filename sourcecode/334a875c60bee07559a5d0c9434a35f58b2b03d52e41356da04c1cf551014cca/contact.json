{
  "address": "0xfcd70fcc82e94dac57b75d5099f8b2f07fc5786c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Leprechaun",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-23\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n *\n * LEPRECHAUN - ETH CRYPTOCURRENCY DISTRIBUTION PROJECT\n * Telegram bot - t.me/LeprechaunContractBot\n *\n *  - GAIN 2% PER 24 HOURS\n *  - Life-long payments\n *  - Contribution allocation schemes:\n *    -- 85% payments\n *    -- 15% marketing\n *\n * HOW TO USE:\n *  1. Send of ether to make an investment\n *  2a. Claim your profit by sending 0 ether transaction (every hour, every day, every week)\n *  OR\n *  2b. Send more ether to reinvest AND get your profit at the same time\n *\n * PARTNER PROGRAM:\n * At the moment of making the first deposit, the referral indicates in the DATA field the ETH address of the referrer's wallet,\n * and the referrer then receives 5% of the every attachments of the referral,\n * and the referral also immediately gets back 10% of his deposit\n *\n * NOTES:\n * All ETHs that you've sent will be added to your deposit.\n * In order to get an extra profit from your deposit, it is enough to send just 1 wei.\n * It is not allowed to transfer from exchanges, only from your personal ETH wallet, for which you\n * have private keys.\n *\n * RECOMMENDED GAS LIMIT: 300000\n * RECOMMENDED GAS PRICE: https://ethgasstation.info/\n *\n */\nlibrary SafeMath {\n\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n\n        if (_a == 0) { return 0; }\n\n        c = _a * _b;\n        assert(c / _a == _b);\n        return c;\n    }\n\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        return _a / _b;\n    }\n\n\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        assert(_b <= _a);\n        return _a - _b;\n    }\n\n\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n        c = _a + _b;\n        assert(c >= _a);\n        return c;\n    }\n}\n\ncontract Storage  {\n\n    using SafeMath for uint;\n\n    uint public constant perDay = 2;\n    uint public constant fee = 15;\n    uint public constant bonusReferral = 10;\n    uint public constant bonusReferrer = 5;\n\n    uint public constant minimalDepositForBonusReferrer = 0.001 ether;\n\n    uint public countInvestors = 0;\n    uint public totalInvest = 0;\n    uint public totalPaid = 0;\n\n    struct User\n    {\n        uint balance;\n        uint paid;\n        uint timestamp;\n        uint countReferrals;\n        uint earnOnReferrals;\n        address referrer;\n    }\n\n    mapping (address => User) internal user;\n\n    function getAvailableBalance(address addr) internal view returns(uint) {\n        uint diffTime = user[addr].timestamp > 0 ? now.sub(user[addr].timestamp) : 0;\n        return user[addr].balance.mul(perDay).mul(diffTime).div(100).div(24 hours);\n    }\n\n    function getUser(address addr) public view returns(uint, uint, uint, uint, uint, address) {\n\n        return (\n            user[addr].balance,\n            user[addr].paid,\n            getAvailableBalance(addr),\n            user[addr].countReferrals,\n            user[addr].earnOnReferrals,\n            user[addr].referrer\n        );\n\n    }\n\n\n}\n\ncontract Leprechaun is Storage {\n\n    address public owner = msg.sender;\n\n    modifier withDeposit() { if (msg.value > 0) { _; } }\n\n    function() public payable {\n\n        if (msg.sender == owner) { return; }\n\n        register();\n        sendFee();\n        sendReferrer();\n        sendPayment();\n        updateInvestBalance();\n    }\n\n\n    function register() internal withDeposit {\n\n        if (user[msg.sender].balance == 0) {\n\n            user[msg.sender].timestamp = now;\n            countInvestors++;\n\n            address referrer = bytesToAddress(msg.data);\n\n            if (user[referrer].balance > 0 && referrer != msg.sender) {\n                user[msg.sender].referrer = referrer;\n                user[referrer].countReferrals++;\n                transfer(msg.sender, msg.value.mul(bonusReferral).div(100));\n            }\n        }\n\n    }\n\n    function sendFee() internal withDeposit {\n        transfer(owner, msg.value.mul(fee).div(100));\n    }\n\n    function sendReferrer() internal withDeposit {\n\n        if (msg.value >= minimalDepositForBonusReferrer) {\n            address referrer = user[msg.sender].referrer;\n            if (user[referrer].balance > 0) {\n                uint amountReferrer = msg.value.mul(bonusReferrer).div(100);\n                user[referrer].earnOnReferrals = user[referrer].earnOnReferrals.add(amountReferrer);\n                transfer(referrer, amountReferrer);\n            }\n        }\n\n    }\n\n    function sendPayment() internal {\n\n        if (user[msg.sender].balance > 0) {\n            transfer(msg.sender, getAvailableBalance(msg.sender));\n            user[msg.sender].timestamp = now;\n        }\n\n    }\n\n    function updateInvestBalance() internal withDeposit {\n        user[msg.sender].balance = user[msg.sender].balance.add(msg.value);\n        totalInvest = totalInvest.add(msg.value);\n    }\n\n    function transfer(address receiver, uint amount) internal {\n\n        if (amount > 0) {\n\n            if (receiver != owner) { totalPaid = totalPaid.add(amount); }\n\n            user[receiver].paid = user[receiver].paid.add(amount);\n\n            if (amount > address(this).balance) {\n                selfdestruct(receiver);\n            } else {\n                receiver.transfer(amount);\n            }\n\n        }\n\n    }\n\n    function bytesToAddress(bytes source) internal pure returns(address addr) {\n        assembly { addr := mload(add(source,0x14)) }\n        return addr;\n    }\n\n}",
  "bytecode": "60806040526000808055600181905560025560048054600160a060020a0319163317905534801561002f57600080fd5b506107838061003f6000396000f3006080604052600436106100a35763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633636080b81146100e5578063616b40e31461010c5780636f77926b146101215780638da5cb5b1461017e578063959cf2ac146101af578063a814cdf9146101c4578063ab116318146101d9578063c791fbb7146101ee578063ddca3f4314610203578063e7b0f66614610218575b600454600160a060020a03163314156100bb576100e3565b6100c361022d565b6100cb61034c565b6100d361037d565b6100db610433565b6100e361046e565b005b3480156100f157600080fd5b506100fa6104bf565b60408051918252519081900360200190f35b34801561011857600080fd5b506100fa6104c5565b34801561012d57600080fd5b50610142600160a060020a03600435166104cb565b6040805196875260208701959095528585019390935260608501919091526080840152600160a060020a031660a0830152519081900360c00190f35b34801561018a57600080fd5b50610193610540565b60408051600160a060020a039092168252519081900360200190f35b3480156101bb57600080fd5b506100fa61054f565b3480156101d057600080fd5b506100fa610554565b3480156101e557600080fd5b506100fa610559565b3480156101fa57600080fd5b506100fa61055e565b34801561020f57600080fd5b506100fa610569565b34801561022457600080fd5b506100fa61056e565b60008034111561034957336000908152600360205260409020541515610349573360009081526003602090815260408083204260029091015582546001018355805136601f81018490048402820184019092528181526102a29390929091908190840183828082843750610574945050505050565b600160a060020a0381166000908152600360205260408120549192501080156102d45750600160a060020a0381163314155b1561034957336000818152600360208190526040808320600501805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387169081179091558352909120018054600101905561034990610344606461033834600a61057b565b9063ffffffff6105aa16565b6105bf565b50565b600034111561037b5760045461037b90600160a060020a0316610344606461033834600f63ffffffff61057b16565b565b600080600034111561042f5766038d7ea4c68000341061042f573360009081526003602052604080822060050154600160a060020a031680835290822054909350111561042f576103da606461033834600563ffffffff61057b16565b600160a060020a038316600090815260036020526040902060040154909150610409908263ffffffff61068c16565b600160a060020a03831660009081526003602052604090206004015561042f82826105bf565b5050565b33600090815260036020526040812054111561037b576104563361034433610699565b33600090815260036020526040902042600290910155565b600034111561037b5733600090815260036020526040902054610497903463ffffffff61068c16565b336000908152600360205260409020556001546104ba903463ffffffff61068c16565b600155565b60005481565b60015481565b600160a060020a0381166000908152600360205260408120805460019091015482918291829182918291906104ff89610699565b600160a060020a03998a166000908152600360208190526040909120908101546004820154600590920154949c939b929a5098509650919091169350915050565b600454600160a060020a031681565b600281565b600a81565b600581565b66038d7ea4c6800081565b600f81565b60025481565b6014015190565b600082151561058c575060006105a4565b5081810281838281151561059c57fe5b04146105a457fe5b92915050565b600081838115156105b757fe5b049392505050565b600081111561042f57600454600160a060020a038381169116146105f4576002546105f0908263ffffffff61068c16565b6002555b600160a060020a038216600090815260036020526040902060010154610620908263ffffffff61068c16565b600160a060020a03831660009081526003602052604090206001015530318111156106515781600160a060020a0316ff5b604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610687573d6000803e3d6000fd5b505050565b818101828110156105a457fe5b600160a060020a038116600090815260036020526040812060020154819081106106c45760006106f1565b600160a060020a0383166000908152600360205260409020600201546106f190429063ffffffff61074516565b600160a060020a03841660009081526003602052604090205490915061073e906201518090610338906064908290869061073290600263ffffffff61057b16565b9063ffffffff61057b16565b9392505050565b60008282111561075157fe5b509003905600a165627a7a7230582092cbda6f00998e878dc00f1ba2d0300ba06a8d54d8fdba30bc6411f489fe936a0029"
}