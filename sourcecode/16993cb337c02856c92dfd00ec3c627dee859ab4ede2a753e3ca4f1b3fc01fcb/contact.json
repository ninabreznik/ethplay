{
  "address": "0x84ac94f17622241f313511b629e5e98f489ad6e4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PepeBase",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-09\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/Genetic.sol\n\n// solhint-disable-next-line\npragma solidity ^0.4.23;\n\n\ncontract Genetic {\n\n    // TODO mutations\n    // maximum number of random mutations per chromatid\n    uint8 public constant R = 5;\n\n    // solhint-disable-next-line function-max-lines\n    function breed(uint256[2] mother, uint256[2] father, uint256 seed) internal view returns (uint256[2] memOffset) {\n        // Meiosis I: recombining alleles (Chromosomal crossovers)\n\n        // Note about optimization I: no cell duplication,\n        //  producing 2 seeds/eggs per cell is enough, instead of 4 (like humans do)\n\n        // Note about optimization II: crossovers happen,\n        //  but only 1 side of the result is computed,\n        //  as the other side will not affect anything.\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // allocate output\n            // 1) get the pointer to our memory\n            memOffset := mload(0x40)\n            // 2) Change the free-memory pointer to keep our memory\n            //     (we will only use 64 bytes: 2 values of 256 bits)\n            mstore(0x40, add(memOffset, 64))\n\n\n            // Put seed in scratchpad 0\n            mstore(0x0, seed)\n            // Also use the timestamp, best we could do to increase randomness\n            //  without increasing costs dramatically. (Trade-off)\n            mstore(0x20, timestamp)\n\n            // Hash it for a universally random bitstring.\n            let hash := keccak256(0, 64)\n\n            // Byzantium VM does not support shift opcodes, will be introduced in Constantinople.\n            // Soldity itself, in non-assembly, also just uses other opcodes to simulate it.\n            // Optmizer should take care of inlining, just declare shiftR ourselves here.\n            // Where possible, better optimization is applied to make it cheaper.\n            function shiftR(value, offset) -> result {\n                result := div(value, exp(2, offset))\n            }\n\n            // solhint-disable max-line-length\n            // m_context << Instruction::SWAP1 << u256(2) << Instruction::EXP << Instruction::SWAP1 << (c_leftSigned ? Instruction::SDIV : Instruction::DIV);\n\n            // optimization: although one side consists of multiple chromatids,\n            //  we handle them just as one long chromatid:\n            //  only difference is that a crossover in chromatid i affects chromatid i+1.\n            //  No big deal, order and location is random anyway\n            function processSide(fatherSrc, motherSrc, rngSrc) -> result {\n\n                {\n                    // initial rngSrc bit length: 254 bits\n\n                    // Run the crossovers\n                    // =====================================================\n\n                    // Pick some crossovers\n                    // Each crossover is spaced ~64 bits on average.\n                    // To achieve this, we get a random 7 bit number, [0, 128), for each crossover.\n\n                    // 256 / 64 = 4, we need 4 crossovers,\n                    //  and will have 256 / 127 = 2 at least (rounded down).\n\n                    // Get one bit determining if we should pick DNA from the father,\n                    //  or from the mother.\n                    // This changes every crossover. (by swapping father and mother)\n                    {\n                        if eq(and(rngSrc, 0x1), 0) {\n                            // Swap mother and father,\n                            // create a temporary variable (code golf XOR swap costs more in gas)\n                            let temp := fatherSrc\n                            fatherSrc := motherSrc\n                            motherSrc := temp\n                        }\n\n                        // remove the bit from rng source, 253 rng bits left\n                        rngSrc := shiftR(rngSrc, 1)\n                    }\n\n                    // Don't push/pop this all the time, we have just enough space on stack.\n                    let mask := 0\n\n                    // Cap at 4 crossovers, no more than that.\n                    let cap := 0\n                    let crossoverLen := and(rngSrc, 0x7f) // bin: 1111111 (7 bits ON)\n                    // remove bits from hash, e.g. 254 - 7 = 247 left.\n                    rngSrc := shiftR(rngSrc, 7)\n                    let crossoverPos := crossoverLen\n\n                    // optimization: instead of shifting with an opcode we don't have until Constantinople,\n                    //  keep track of the a shifted number, updated using multiplications.\n                    let crossoverPosLeading1 := 1\n\n                    // solhint-disable-next-line no-empty-blocks\n                    for { } and(lt(crossoverPos, 256), lt(cap, 4)) {\n\n                        crossoverLen := and(rngSrc, 0x7f) // bin: 1111111 (7 bits ON)\n                        // remove bits from hash, e.g. 254 - 7 = 247 left.\n                        rngSrc := shiftR(rngSrc, 7)\n\n                        crossoverPos := add(crossoverPos, crossoverLen)\n\n                        cap := add(cap, 1)\n                    } {\n\n                        // Note: we go from right to left in the bit-string.\n\n                        // Create a mask for this crossover.\n                        // Example:\n                        // 00000000000001111111111111111110000000000000000000000000000000000000000000000000000000000.....\n                        // |Prev. data ||Crossover here  ||remaining data .......\n                        //\n                        // The crossover part is copied from the mother/father to the child.\n\n                        // Create the bit-mask\n                        // Create a bitstring that ignores the previous data:\n                        // 00000000000001111111111111111111111111111111111111111111111111111111111111111111111111111.....\n                        // First create a leading 1, just before the crossover, like:\n                        // 00000000000010000000000000000000000000000000000000000000000000000000000.....\n                        // Then substract 1, to get a long string of 1s\n                        // 00000000000001111111111111111111111111111111111111111111111111111111111111111111111111111.....\n                        // Now do the same for the remain part, and xor it.\n                        // leading 1\n                        // 00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000.....\n                        // sub 1\n                        // 00000000000000000000000000000001111111111111111111111111111111111111111111111111111111111.....\n                        // xor with other\n                        // 00000000000001111111111111111111111111111111111111111111111111111111111111111111111111111.....\n                        // 00000000000000000000000000000001111111111111111111111111111111111111111111111111111111111.....\n                        // 00000000000001111111111111111110000000000000000000000000000000000000000000000000000000000.....\n\n                        // Use the final shifted 1 of the previous crossover as the start marker\n                        mask := sub(crossoverPosLeading1, 1)\n\n                        // update for this crossover, (and will be used as start for next crossover)\n                        crossoverPosLeading1 := mul(1, exp(2, crossoverPos))\n                        mask := xor(mask,\n                                    sub(crossoverPosLeading1, 1)\n                        )\n\n                        // Now add the parent data to the child genotype\n                        // E.g.\n                        // Mask:         00000000000001111111111111111110000000000000000000000000000000000000000000000000000000000....\n                        // Parent:       10010111001000110101011111001010001011100000000000010011000001000100000001011101111000111....\n                        // Child (pre):  00000000000000000000000000000001111110100101111111000011001010000000101010100000110110110....\n                        // Child (post): 00000000000000110101011111001011111110100101111111000011001010000000101010100000110110110....\n\n                        // To do this, we run: child_post = child_pre | (mask & father)\n                        result := or(result, and(mask, fatherSrc))\n\n                        // Swap father and mother, next crossover will take a string from the other.\n                        let temp := fatherSrc\n                        fatherSrc := motherSrc\n                        motherSrc := temp\n                    }\n\n                    // We still have a left-over part that was not copied yet\n                    // E.g., we have something like:\n                    // Father: |            xxxxxxxxxxxxxxxxxxx          xxxxxxxxxxxxxxxxxxxxxxxx            ....\n                    // Mother: |############                   xxxxxxxxxx                        xxxxxxxxxxxx....\n                    // Child:  |            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx....\n                    // The ############ still needs to be applied to the child, also,\n                    //  this can be done cheaper than in the loop above,\n                    //  as we don't have to swap anything for the next crossover or something.\n\n                    // At this point we have to assume 4 crossovers ran,\n                    //  and that we only have 127 - 1 - (4 * 7) = 98 bits of randomness left.\n                    // We stopped at the bit after the crossoverPos index, see \"x\":\n                    // 000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.....\n                    // now create a leading 1 at crossoverPos like:\n                    // 000000001000000000000000000000000000000000000000000000000000000000000000000.....\n                    // Sub 1, get the mask for what we had.\n                    // 000000000111111111111111111111111111111111111111111111111111111111111111111.....\n                    // Invert, and we have the final mask:\n                    // 111111111000000000000000000000000000000000000000000000000000000000000000000.....\n                    mask := not(sub(crossoverPosLeading1, 1))\n                    // Apply it to the result\n                    result := or(result, and(mask, fatherSrc))\n\n                    // Random mutations\n                    // =====================================================\n\n                    // random mutations\n                    // Put rng source in scratchpad 0\n                    mstore(0x0, rngSrc)\n                    // And some arbitrary padding in scratchpad 1,\n                    //  used to create different hashes based on input size changes\n                    mstore(0x20, 0x434f4c4c454354205045504553204f4e2043525950544f50455045532e494f21)\n                    // Hash it for a universally random bitstring.\n                    // Then reduce the number of 1s by AND-ing it with other *different* hashes.\n                    // Each bit in mutations has a probability of 0.5^5 = 0.03125 = 3.125% to be a 1\n                    let mutations := and(\n                            and(\n                                and(keccak256(0, 32), keccak256(1, 33)),\n                                and(keccak256(2, 34), keccak256(3, 35))\n                            ),\n                            keccak256(0, 36)\n                    )\n\n                    result := xor(result, mutations)\n\n                }\n            }\n\n\n            {\n\n                // Get 1 bit of pseudo randomness that will\n                //  determine if side #1 will come from the left, or right side.\n                // Either 0 or 1, shift it by 5 bits to get either 0x0 or 0x20, cheaper later on.\n                let relativeFatherSideLoc := mul(and(hash, 0x1), 0x20) // shift by 5 bits = mul by 2^5=32 (0x20)\n                // Either 0 or 1, shift it by 5 bits to get either 0x0 or 0x20, cheaper later on.\n                let relativeMotherSideLoc := mul(and(hash, 0x2), 0x10) // already shifted by 1, mul by 2^4=16 (0x10)\n\n                // Now remove the used 2 bits from the hash, 254 bits remaining now.\n                hash := div(hash, 4)\n\n                // Process the side, load the relevant parent data that will be used.\n                mstore(memOffset, processSide(\n                    mload(add(father, relativeFatherSideLoc)),\n                    mload(add(mother, relativeMotherSideLoc)),\n                    hash\n                ))\n\n                // The other side will be the opposite index: 1 -> 0, 0 -> 1\n                // Apply it to the location,\n                //  which is either 0x20 (For index 1) or 0x0 for index 0.\n                relativeFatherSideLoc := xor(relativeFatherSideLoc, 0x20)\n                relativeMotherSideLoc := xor(relativeMotherSideLoc, 0x20)\n\n                mstore(0x0, seed)\n                // Second argument will be inverse,\n                //  resulting in a different second hash.\n                mstore(0x20, not(timestamp))\n\n                // Now create another hash, for the other side\n                hash := keccak256(0, 64)\n\n                // Process the other side\n                mstore(add(memOffset, 0x20), processSide(\n                    mload(add(father, relativeFatherSideLoc)),\n                    mload(add(mother, relativeMotherSideLoc)),\n                    hash\n                ))\n\n            }\n\n        }\n\n        // Sample input:\n        // [\"0xAAABBBBBBBBCCCCCCCCAAAAAAAAABBBBBBBBBBCCCCCCCCCAABBBBBBBCCCCCCCC\",\"0x4444444455555555555555556666666666666644444444455555555555666666\"]\n        //\n        // [\"0x1111111111112222222223333311111111122222223333333331111112222222\",\"0x7777788888888888999999999999977777777777788888888888999999997777\"]\n\n        // Expected results (or similar, depends on the seed):\n        // 0xAAABBBBBBBBCCCCCCCCAAAAAAAAABBBBBBBBBBCCCCCCCCCAABBBBBBBCCCCCCCC < Father side A\n        // 0x4444444455555555555555556666666666666644444444455555555555666666 < Father side B\n\n        // 0x1111111111112222222223333311111111122222223333333331111112222222 < Mother side A\n        // 0x7777788888888888999999999999977777777777788888888888999999997777 < Mother side B\n\n        //   xxxxxxxxxxxxxxxxx           xxxxxxxxx                         xx\n        // 0xAAABBBBBBBBCCCCCD99999999998BBBBBBBBF77778888888888899999999774C < Child side A\n        //   xxx                       xxxxxxxxxxx\n        // 0x4441111111112222222223333366666666666222223333333331111112222222 < Child side B\n\n        // And then random mutations, for gene pool expansion.\n        // Each bit is flipped with a 3.125% chance\n\n        // Example:\n        //a2c37edc61dca0ca0b199e098c80fd5a221c2ad03605b4b54332361358745042 < random hash 1\n        //c217d04b19a83fe497c1cf6e1e10030e455a0812a6949282feec27d67fe2baa7 < random hash 2\n        //2636a55f38bed26d804c63a13628e21b2d701c902ca37b2b0ca94fada3821364 < random hash 3\n        //86bb023a85e2da50ac233b946346a53aa070943b0a8e91c56e42ba181729a5f9 < random hash 4\n        //5d71456a1288ab30ddd4c955384d42e66a09d424bd7743791e3eab8e09aa13f1 < random hash 5\n        //0000000800800000000000000000000200000000000000000000020000000000 < resulting mutation\n        //aaabbbbbbbbcccccd99999999998bbbbbbbbf77778888888888899999999774c < original\n        //aaabbbb3bb3cccccd99999999998bbb9bbbbf7777888888888889b999999774c < mutated (= original XOR mutation)\n    }\n\n    // Generates (psuedo) random Pepe DNA\n    function randomDNA(uint256 seed) internal pure returns (uint256[2] memOffset) {\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // allocate output\n            // 1) get the pointer to our memory\n            memOffset := mload(0x40)\n            // 2) Change the free-memory pointer to keep our memory\n            //     (we will only use 64 bytes: 2 values of 256 bits)\n            mstore(0x40, add(memOffset, 64))\n\n            // Load the seed into 1st scratchpad memory slot.\n            // adjacent to the additional value (used to create two distinct hashes)\n            mstore(0x0, seed)\n\n            // In second scratchpad slot:\n            // The additional value can be any word, as long as the caller uses\n            //  it (second hash needs to be different)\n            mstore(0x20, 0x434f4c4c454354205045504553204f4e2043525950544f50455045532e494f21)\n\n\n            // // Create first element pointer of array\n            // mstore(memOffset, add(memOffset, 64)) // pointer 1\n            // mstore(add(memOffset, 32), add(memOffset, 96)) // pointer 2\n\n            // control block to auto-pop the hash.\n            {\n                // L * N * 2 * 4 = 4 * 2 * 2 * 4 = 64 bytes, 2x 256 bit hash\n\n                // Sha3 is cheaper than sha256, make use of it\n                let hash := keccak256(0, 64)\n\n                // Store first array value\n                mstore(memOffset, hash)\n\n                // Now hash again, but only 32 bytes of input,\n                //  to ignore make the input different than the previous call,\n                hash := keccak256(0, 32)\n                mstore(add(memOffset, 32), hash)\n\n            }\n\n        }\n    }\n\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts/Usernames.sol\n\n// solhint-disable-next-line\npragma solidity ^0.4.19;\n\n\ncontract Usernames {\n\n    mapping(address => bytes32) public addressToUser;\n    mapping(bytes32 => address) public userToAddress;\n\n    event UserNamed(address indexed user, bytes32 indexed username);\n\n    /**\n     * Claim a username. Frees up a previously used one\n     * @param _username to claim\n     */\n    function claimUsername(bytes32 _username) external {\n        require(userToAddress[_username] == address(0));// Username must be free\n\n        if (addressToUser[msg.sender] != bytes32(0)) { // If user already has username free it up\n            userToAddress[addressToUser[msg.sender]] = address(0);\n        }\n\n        //all is well assign username\n        addressToUser[msg.sender] = _username;\n        userToAddress[_username] = msg.sender;\n\n        emit UserNamed(msg.sender, _username);\n\n    }\n\n}\n\n// File: contracts/Beneficiary.sol\n\n// solhint-disable-next-line\npragma solidity ^0.4.24;\n\n\n\n/** @title Beneficiary */\ncontract Beneficiary is Ownable {\n    address public beneficiary;\n\n    constructor() public {\n        beneficiary = msg.sender;\n    }\n\n    /**\n     * @dev Change the beneficiary address\n     * @param _beneficiary Address of the new beneficiary\n     */\n    function setBeneficiary(address _beneficiary) public onlyOwner {\n        beneficiary = _beneficiary;\n    }\n}\n\n// File: contracts/Affiliate.sol\n\n// solhint-disable-next-line\npragma solidity ^0.4.25;\n\n\n\n/** @title Affiliate */\ncontract Affiliate is Ownable {\n    mapping(address => bool) public canSetAffiliate;\n    mapping(address => address) public userToAffiliate;\n\n    /** @dev Allows an address to set the affiliate address for a user\n      * @param _setter The address that should be allowed\n      */\n    function setAffiliateSetter(address _setter) public onlyOwner {\n        canSetAffiliate[_setter] = true;\n    }\n\n    /**\n     * @dev Set the affiliate of a user\n     * @param _user user to set affiliate for\n     * @param _affiliate address to set\n     */\n    function setAffiliate(address _user, address _affiliate) public {\n        require(canSetAffiliate[msg.sender]);\n        if (userToAffiliate[_user] == address(0)) {\n            userToAffiliate[_user] = _affiliate;\n        }\n    }\n\n}\n\n// File: contracts/interfaces/ERC721.sol\n\ncontract ERC721 {\n    function implementsERC721() public pure returns (bool);\n    function totalSupply() public view returns (uint256 total);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\n    function approve(address _to, uint256 _tokenId) public;\n    function transferFrom(address _from, address _to, uint256 _tokenId) public returns (bool) ;\n    function transfer(address _to, uint256 _tokenId) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    // Optional\n    // function name() public view returns (string name);\n    // function symbol() public view returns (string symbol);\n    // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n}\n\n// File: contracts/interfaces/PepeInterface.sol\n\ncontract PepeInterface is ERC721{\n    function cozyTime(uint256 _mother, uint256 _father, address _pepeReceiver) public returns (bool);\n    function getCozyAgain(uint256 _pepeId) public view returns(uint64);\n}\n\n// File: contracts/AuctionBase.sol\n\n// solhint-disable-next-line\npragma solidity ^0.4.24;\n\n\n\n\n\n/** @title AuctionBase */\ncontract AuctionBase is Beneficiary {\n    mapping(uint256 => PepeAuction) public auctions;//maps pepes to auctions\n    PepeInterface public pepeContract;\n    Affiliate public affiliateContract;\n    uint256 public fee = 37500; //in 1 10000th of a percent so 3.75% at the start\n    uint256 public constant FEE_DIVIDER = 1000000; //Perhaps needs better name?\n\n    struct PepeAuction {\n        address seller;\n        uint256 pepeId;\n        uint64 auctionBegin;\n        uint64 auctionEnd;\n        uint256 beginPrice;\n        uint256 endPrice;\n    }\n\n    event AuctionWon(uint256 indexed pepe, address indexed winner, address indexed seller);\n    event AuctionStarted(uint256 indexed pepe, address indexed seller);\n    event AuctionFinalized(uint256 indexed pepe, address indexed seller);\n\n    constructor(address _pepeContract, address _affiliateContract) public {\n        pepeContract = PepeInterface(_pepeContract);\n        affiliateContract = Affiliate(_affiliateContract);\n    }\n\n    /**\n     * @dev Return a pepe from a auction that has passed\n     * @param  _pepeId the id of the pepe to save\n     */\n    function savePepe(uint256 _pepeId) external {\n        // solhint-disable-next-line not-rely-on-time\n        require(auctions[_pepeId].auctionEnd < now);//auction must have ended\n        require(pepeContract.transfer(auctions[_pepeId].seller, _pepeId));//transfer pepe back to seller\n\n        emit AuctionFinalized(_pepeId, auctions[_pepeId].seller);\n\n        delete auctions[_pepeId];//delete auction\n    }\n\n    /**\n     * @dev change the fee on pepe sales. Can only be lowerred\n     * @param _fee The new fee to set. Must be lower than current fee\n     */\n    function changeFee(uint256 _fee) external onlyOwner {\n        require(_fee < fee);//fee can not be raised\n        fee = _fee;\n    }\n\n    /**\n     * @dev Start a auction\n     * @param  _pepeId Pepe to sell\n     * @param  _beginPrice Price at which the auction starts\n     * @param  _endPrice Ending price of the auction\n     * @param  _duration How long the auction should take\n     */\n    function startAuction(uint256 _pepeId, uint256 _beginPrice, uint256 _endPrice, uint64 _duration) public {\n        require(pepeContract.transferFrom(msg.sender, address(this), _pepeId));\n        // solhint-disable-next-line not-rely-on-time\n        require(now > auctions[_pepeId].auctionEnd);//can only start new auction if no other is active\n\n        PepeAuction memory auction;\n\n        auction.seller = msg.sender;\n        auction.pepeId = _pepeId;\n        // solhint-disable-next-line not-rely-on-time\n        auction.auctionBegin = uint64(now);\n        // solhint-disable-next-line not-rely-on-time\n        auction.auctionEnd = uint64(now) + _duration;\n        require(auction.auctionEnd > auction.auctionBegin);\n        auction.beginPrice = _beginPrice;\n        auction.endPrice = _endPrice;\n\n        auctions[_pepeId] = auction;\n\n        emit AuctionStarted(_pepeId, msg.sender);\n    }\n\n    /**\n     * @dev directly start a auction from the PepeBase contract\n     * @param  _pepeId Pepe to put on auction\n     * @param  _beginPrice Price at which the auction starts\n     * @param  _endPrice Ending price of the auction\n     * @param  _duration How long the auction should take\n     * @param  _seller The address selling the pepe\n     */\n    // solhint-disable-next-line max-line-length\n    function startAuctionDirect(uint256 _pepeId, uint256 _beginPrice, uint256 _endPrice, uint64 _duration, address _seller) public {\n        require(msg.sender == address(pepeContract)); //can only be called by pepeContract\n        //solhint-disable-next-line not-rely-on-time\n        require(now > auctions[_pepeId].auctionEnd);//can only start new auction if no other is active\n\n        PepeAuction memory auction;\n\n        auction.seller = _seller;\n        auction.pepeId = _pepeId;\n        // solhint-disable-next-line not-rely-on-time\n        auction.auctionBegin = uint64(now);\n        // solhint-disable-next-line not-rely-on-time\n        auction.auctionEnd = uint64(now) + _duration;\n        require(auction.auctionEnd > auction.auctionBegin);\n        auction.beginPrice = _beginPrice;\n        auction.endPrice = _endPrice;\n\n        auctions[_pepeId] = auction;\n\n        emit AuctionStarted(_pepeId, _seller);\n    }\n\n  /**\n   * @dev Calculate the current price of a auction\n   * @param  _pepeId the pepeID to calculate the current price for\n   * @return currentBid the current price for the auction\n   */\n    function calculateBid(uint256 _pepeId) public view returns(uint256 currentBid) {\n        PepeAuction storage auction = auctions[_pepeId];\n        // solhint-disable-next-line not-rely-on-time\n        uint256 timePassed = now - auctions[_pepeId].auctionBegin;\n\n        // If auction ended return auction end price.\n        // solhint-disable-next-line not-rely-on-time\n        if (now >= auction.auctionEnd) {\n            return auction.endPrice;\n        } else {\n            // Can be negative\n            int256 priceDifference = int256(auction.endPrice) - int256(auction.beginPrice);\n            // Always positive\n            int256 duration = int256(auction.auctionEnd) - int256(auction.auctionBegin);\n\n            // As already proven in practice by CryptoKitties:\n            //  timePassed -> 64 bits at most\n            //  priceDifference -> 128 bits at most\n            //  timePassed * priceDifference -> 64 + 128 bits at most\n            int256 priceChange = priceDifference * int256(timePassed) / duration;\n\n            // Will be positive, both operands are less than 256 bits\n            int256 price = int256(auction.beginPrice) + priceChange;\n\n            return uint256(price);\n        }\n    }\n\n  /**\n   * @dev collect the fees from the auction\n   */\n    function getFees() public {\n        beneficiary.transfer(address(this).balance);\n    }\n\n\n}\n\n// File: contracts/CozyTimeAuction.sol\n\n// solhint-disable-next-line\npragma solidity ^0.4.24;\n\n\n\n/** @title CozyTimeAuction */\ncontract CozyTimeAuction is AuctionBase {\n    // solhint-disable-next-line\n    constructor (address _pepeContract, address _affiliateContract) AuctionBase(_pepeContract, _affiliateContract) public {\n\n    }\n\n    /**\n     * @dev Start an auction\n     * @param  _pepeId The id of the pepe to start the auction for\n     * @param  _beginPrice Start price of the auction\n     * @param  _endPrice End price of the auction\n     * @param  _duration How long the auction should take\n     */\n    function startAuction(uint256 _pepeId, uint256 _beginPrice, uint256 _endPrice, uint64 _duration) public {\n        // solhint-disable-next-line not-rely-on-time\n        require(pepeContract.getCozyAgain(_pepeId) <= now);//need to have this extra check\n        super.startAuction(_pepeId, _beginPrice, _endPrice, _duration);\n    }\n\n    /**\n     * @dev Start a auction direclty from the PepeBase smartcontract\n     * @param  _pepeId The id of the pepe to start the auction for\n     * @param  _beginPrice Start price of the auction\n     * @param  _endPrice End price of the auction\n     * @param  _duration How long the auction should take\n     * @param  _seller The address of the seller\n     */\n    // solhint-disable-next-line max-line-length\n    function startAuctionDirect(uint256 _pepeId, uint256 _beginPrice, uint256 _endPrice, uint64 _duration, address _seller) public {\n        // solhint-disable-next-line not-rely-on-time\n        require(pepeContract.getCozyAgain(_pepeId) <= now);//need to have this extra check\n        super.startAuctionDirect(_pepeId, _beginPrice, _endPrice, _duration, _seller);\n    }\n\n    /**\n     * @dev Buy cozy right from the auction\n     * @param  _pepeId Pepe to cozy with\n     * @param  _cozyCandidate the pepe to cozy with\n     * @param  _candidateAsFather Is the _cozyCandidate father?\n     * @param  _pepeReceiver address receiving the pepe after cozy time\n     */\n    // solhint-disable-next-line max-line-length\n    function buyCozy(uint256 _pepeId, uint256 _cozyCandidate, bool _candidateAsFather, address _pepeReceiver) public payable {\n        require(address(pepeContract) == msg.sender); //caller needs to be the PepeBase contract\n\n        PepeAuction storage auction = auctions[_pepeId];\n        // solhint-disable-next-line not-rely-on-time\n        require(now < auction.auctionEnd);// auction must be still going\n\n        uint256 price = calculateBid(_pepeId);\n        require(msg.value >= price);//must send enough ether\n        uint256 totalFee = price * fee / FEE_DIVIDER; //safe math needed?\n\n        //Send ETH to seller\n        auction.seller.transfer(price - totalFee);\n        //send ETH to beneficiary\n\n        address affiliate = affiliateContract.userToAffiliate(_pepeReceiver);\n\n        //solhint-disable-next-line\n        if (affiliate != address(0) && affiliate.send(totalFee / 2)) { //if user has affiliate\n            //nothing just to suppress warning\n        }\n\n        //actual cozytiming\n        if (_candidateAsFather) {\n            if (!pepeContract.cozyTime(auction.pepeId, _cozyCandidate, _pepeReceiver)) {\n                revert();\n            }\n        } else {\n          // Swap around the two pepes, they have no set gender, the user decides what they are.\n            if (!pepeContract.cozyTime(_cozyCandidate, auction.pepeId, _pepeReceiver)) {\n                revert();\n            }\n        }\n\n        //Send pepe to seller of auction\n        if (!pepeContract.transfer(auction.seller, _pepeId)) {\n            revert(); //can't complete transfer if this fails\n        }\n\n        if (msg.value > price) { //return ether send to much\n            _pepeReceiver.transfer(msg.value - price);\n        }\n\n        emit AuctionWon(_pepeId, _pepeReceiver, auction.seller);//emit event\n\n        delete auctions[_pepeId];//deletes auction\n    }\n\n    /**\n     * @dev Buy cozytime and pass along affiliate\n     * @param  _pepeId Pepe to cozy with\n     * @param  _cozyCandidate the pepe to cozy with\n     * @param  _candidateAsFather Is the _cozyCandidate father?\n     * @param  _pepeReceiver address receiving the pepe after cozy time\n     * @param  _affiliate Affiliate address to set\n     */\n    //solhint-disable-next-line max-line-length\n    function buyCozyAffiliated(uint256 _pepeId, uint256 _cozyCandidate, bool _candidateAsFather, address _pepeReceiver, address _affiliate) public payable {\n        affiliateContract.setAffiliate(_pepeReceiver, _affiliate);\n        buyCozy(_pepeId, _cozyCandidate, _candidateAsFather, _pepeReceiver);\n    }\n}\n\n// File: contracts/Haltable.sol\n\n// solhint-disable-next-line\npragma solidity ^0.4.24;\n\n\n\ncontract Haltable is Ownable {\n    uint256 public haltTime; //when the contract was halted\n    bool public halted;//is the contract halted?\n    uint256 public haltDuration;\n    uint256 public maxHaltDuration = 8 weeks;//how long the contract can be halted\n\n    modifier stopWhenHalted {\n        require(!halted);\n        _;\n    }\n\n    modifier onlyWhenHalted {\n        require(halted);\n        _;\n    }\n\n    /**\n     * @dev Halt the contract for a set time smaller than maxHaltDuration\n     * @param  _duration Duration how long the contract should be halted. Must be smaller than maxHaltDuration\n     */\n    function halt(uint256 _duration) public onlyOwner {\n        require(haltTime == 0); //cannot halt if it was halted before\n        require(_duration <= maxHaltDuration);//cannot halt for longer than maxHaltDuration\n        haltDuration = _duration;\n        halted = true;\n        // solhint-disable-next-line not-rely-on-time\n        haltTime = now;\n    }\n\n    /**\n     * @dev Unhalt the contract. Can only be called by the owner or when the haltTime has passed\n     */\n    function unhalt() public {\n        // solhint-disable-next-line\n        require(now > haltTime + haltDuration || msg.sender == owner);//unhalting is only possible when haltTime has passed or the owner unhalts\n        halted = false;\n    }\n\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/interfaces/ERC721TokenReceiver.sol\n\n/// @dev Note: the ERC-165 identifier for this interface is 0xf0b9e5ba\ninterface ERC721TokenReceiver {\n    /// @notice Handle the receipt of an NFT\n    /// @dev The ERC721 smart contract calls this function on the recipient\n    ///  after a `transfer`. This function MAY throw to revert and reject the\n    ///  transfer. This function MUST use 50,000 gas or less. Return of other\n    ///  than the magic value MUST result in the transaction being reverted.\n    ///  Note: the contract address is always the message sender.\n    /// @param _from The sending address\n    /// @param _tokenId The NFT identifier which is being transfered\n    /// @param data Additional data with no specified format\n    /// @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n    ///  unless throwing\n\tfunction onERC721Received(address _from, uint256 _tokenId, bytes data) external returns(bytes4);\n}\n\n// File: contracts/PepeBase.sol\n\n// solhint-disable-next-line\npragma solidity ^0.4.24;\n\n// solhint-disable func-order\n\n\n\n\n\n\n\n\n\n\ncontract PepeBase is Genetic, Ownable, Usernames, Haltable {\n\n    uint32[15] public cozyCoolDowns = [ //determined by generation / 2\n        uint32(1 minutes),\n        uint32(2 minutes),\n        uint32(5 minutes),\n        uint32(15 minutes),\n        uint32(30 minutes),\n        uint32(45 minutes),\n        uint32(1 hours),\n        uint32(2 hours),\n        uint32(4 hours),\n        uint32(8 hours),\n        uint32(16 hours),\n        uint32(1 days),\n        uint32(2 days),\n        uint32(4 days),\n        uint32(7 days)\n    ];\n\n    struct Pepe {\n        address master; //The master of the pepe\n        uint256[2] genotype; //all genes stored here\n        uint64 canCozyAgain; //time when pepe can have nice time again\n        uint64 generation; //what generation?\n        uint64 father; //father of this pepe\n        uint64 mother; //mommy of this pepe\n        uint8 coolDownIndex;\n    }\n\n    mapping(uint256 => bytes32) public pepeNames;\n\n    //stores all pepes\n    Pepe[] public pepes;\n\n    bool public implementsERC721 = true; //signal erc721 support\n\n    // solhint-disable-next-line const-name-snakecase\n    string public constant name = \"Crypto Pepe\";\n    // solhint-disable-next-line const-name-snakecase\n    string public constant symbol = \"CPEP\";\n\n    mapping(address => uint256[]) private wallets;\n    mapping(address => uint256) public balances; //amounts of pepes per address\n    mapping(uint256 => address) public approved; //pepe index to address approved to transfer\n    mapping(address => mapping(address => bool)) public approvedForAll;\n\n    uint256 public zeroGenPepes; //how many zero gen pepes are mined\n    uint256 public constant MAX_PREMINE = 100;//how many pepes can be premined\n    uint256 public constant MAX_ZERO_GEN_PEPES = 1100; //max number of zero gen pepes\n    address public miner; //address of the miner contract\n\n    modifier onlyPepeMaster(uint256 _pepeId) {\n        require(pepes[_pepeId].master == msg.sender);\n        _;\n    }\n\n    modifier onlyAllowed(uint256 _tokenId) {\n        // solhint-disable-next-line max-line-length\n        require(msg.sender == pepes[_tokenId].master || msg.sender == approved[_tokenId] || approvedForAll[pepes[_tokenId].master][msg.sender]); //check if msg.sender is allowed\n        _;\n    }\n\n    event PepeBorn(uint256 indexed mother, uint256 indexed father, uint256 indexed pepeId);\n    event PepeNamed(uint256 indexed pepeId);\n\n    constructor() public {\n\n        Pepe memory pepe0 = Pepe({\n            master: 0x0,\n            genotype: [uint256(0), uint256(0)],\n            canCozyAgain: 0,\n            father: 0,\n            mother: 0,\n            generation: 0,\n            coolDownIndex: 0\n        });\n\n        pepes.push(pepe0);\n    }\n\n    /**\n     * @dev Internal function that creates a new pepe\n     * @param  _genoType DNA of the new pepe\n     * @param  _mother The ID of the mother\n     * @param  _father The ID of the father\n     * @param  _generation The generation of the new Pepe\n     * @param  _master The owner of this new Pepe\n     * @return The ID of the newly generated Pepe\n     */\n    // solhint-disable-next-line max-line-length\n    function _newPepe(uint256[2] _genoType, uint64 _mother, uint64 _father, uint64 _generation, address _master) internal returns (uint256 pepeId) {\n        uint8 tempCoolDownIndex;\n\n        tempCoolDownIndex = uint8(_generation / 2);\n\n        if (_generation > 28) {\n            tempCoolDownIndex = 14;\n        }\n\n        Pepe memory _pepe = Pepe({\n            master: _master, //The master of the pepe\n            genotype: _genoType, //all genes stored here\n            canCozyAgain: 0, //time when pepe can have nice time again\n            father: _father, //father of this pepe\n            mother: _mother, //mommy of this pepe\n            generation: _generation, //what generation?\n            coolDownIndex: tempCoolDownIndex\n        });\n\n        if (_generation == 0) {\n            zeroGenPepes += 1; //count zero gen pepes\n        }\n\n        //push returns the new length, use it to get a new unique id\n        pepeId = pepes.push(_pepe) - 1;\n\n        //add it to the wallet of the master of the new pepe\n        addToWallet(_master, pepeId);\n\n        emit PepeBorn(_mother, _father, pepeId);\n        emit Transfer(address(0), _master, pepeId);\n\n        return pepeId;\n    }\n\n    /**\n     * @dev Set the miner contract. Can only be called once\n     * @param _miner Address of the miner contract\n     */\n    function setMiner(address _miner) public onlyOwner {\n        require(miner == address(0));//can only be set once\n        miner = _miner;\n    }\n\n    /**\n     * @dev Mine a new Pepe. Can only be called by the miner contract.\n     * @param  _seed Seed to be used for the generation of the DNA\n     * @param  _receiver Address receiving the newly mined Pepe\n     * @return The ID of the newly mined Pepe\n     */\n    function minePepe(uint256 _seed, address _receiver) public stopWhenHalted returns(uint256) {\n        require(msg.sender == miner);//only miner contract can call\n        require(zeroGenPepes < MAX_ZERO_GEN_PEPES);\n\n        return _newPepe(randomDNA(_seed), 0, 0, 0, _receiver);\n    }\n\n    /**\n     * @dev Premine pepes. Can only be called by the owner and is limited to MAX_PREMINE\n     * @param  _amount Amount of Pepes to premine\n     */\n    function pepePremine(uint256 _amount) public onlyOwner stopWhenHalted {\n        for (uint i = 0; i < _amount; i++) {\n            require(zeroGenPepes <= MAX_PREMINE);//can only generate set amount during premine\n            //create a new pepe\n            // 1) who's genes are based on hash of the timestamp and the number of pepes\n            // 2) who has no mother or father\n            // 3) who is generation zero\n            // 4) who's master is the manager\n\n            // solhint-disable-next-line\n            _newPepe(randomDNA(uint256(keccak256(abi.encodePacked(block.timestamp, pepes.length)))), 0, 0, 0, owner);\n\n        }\n    }\n\n    /**\n     * @dev CozyTime two Pepes together\n     * @param  _mother The mother of the new Pepe\n     * @param  _father The father of the new Pepe\n     * @param  _pepeReceiver Address receiving the new Pepe\n     * @return If it was a success\n     */\n    function cozyTime(uint256 _mother, uint256 _father, address _pepeReceiver) external stopWhenHalted returns (bool) {\n        //cannot cozyTime with itself\n        require(_mother != _father);\n        //caller has to either be master or approved for mother\n        // solhint-disable-next-line max-line-length\n        require(pepes[_mother].master == msg.sender || approved[_mother] == msg.sender || approvedForAll[pepes[_mother].master][msg.sender]);\n        //caller has to either be master or approved for father\n        // solhint-disable-next-line max-line-length\n        require(pepes[_father].master == msg.sender || approved[_father] == msg.sender || approvedForAll[pepes[_father].master][msg.sender]);\n        //require both parents to be ready for cozytime\n        // solhint-disable-next-line not-rely-on-time\n        require(now > pepes[_mother].canCozyAgain && now > pepes[_father].canCozyAgain);\n        //require both mother parents not to be father\n        require(pepes[_mother].mother != _father && pepes[_mother].father != _father);\n        //require both father parents not to be mother\n        require(pepes[_father].mother != _mother && pepes[_father].father != _mother);\n\n        Pepe storage father = pepes[_father];\n        Pepe storage mother = pepes[_mother];\n\n\n        approved[_father] = address(0);\n        approved[_mother] = address(0);\n\n        uint256[2] memory newGenotype = breed(father.genotype, mother.genotype, pepes.length);\n\n        uint64 newGeneration;\n\n        newGeneration = mother.generation + 1;\n        if (newGeneration < father.generation + 1) { //if father generation is bigger\n            newGeneration = father.generation + 1;\n        }\n\n        _handleCoolDown(_mother);\n        _handleCoolDown(_father);\n\n        //sets pepe birth when mother is done\n        // solhint-disable-next-line max-line-length\n        pepes[_newPepe(newGenotype, uint64(_mother), uint64(_father), newGeneration, _pepeReceiver)].canCozyAgain = mother.canCozyAgain; //_pepeReceiver becomes the master of the pepe\n\n        return true;\n    }\n\n    /**\n     * @dev Internal function to increase the coolDownIndex\n     * @param _pepeId The id of the Pepe to update the coolDown of\n     */\n    function _handleCoolDown(uint256 _pepeId) internal {\n        Pepe storage tempPep = pepes[_pepeId];\n\n        // solhint-disable-next-line not-rely-on-time\n        tempPep.canCozyAgain = uint64(now + cozyCoolDowns[tempPep.coolDownIndex]);\n\n        if (tempPep.coolDownIndex < 14) {// after every cozy time pepe gets slower\n            tempPep.coolDownIndex++;\n        }\n\n    }\n\n    /**\n     * @dev Set the name of a Pepe. Can only be set once\n     * @param _pepeId ID of the pepe to name\n     * @param _name The name to assign\n     */\n    function setPepeName(uint256 _pepeId, bytes32 _name) public stopWhenHalted onlyPepeMaster(_pepeId) returns(bool) {\n        require(pepeNames[_pepeId] == 0x0000000000000000000000000000000000000000000000000000000000000000);\n        pepeNames[_pepeId] = _name;\n        emit PepeNamed(_pepeId);\n        return true;\n    }\n\n    /**\n     * @dev Transfer a Pepe to the auction contract and auction it\n     * @param  _pepeId ID of the Pepe to auction\n     * @param  _auction Auction contract address\n     * @param  _beginPrice Price the auction starts at\n     * @param  _endPrice Price the auction ends at\n     * @param  _duration How long the auction should run\n     */\n    // solhint-disable-next-line max-line-length\n    function transferAndAuction(uint256 _pepeId, address _auction, uint256 _beginPrice, uint256 _endPrice, uint64 _duration) public stopWhenHalted onlyPepeMaster(_pepeId) {\n        _transfer(msg.sender, _auction, _pepeId);//transfer pepe to auction\n        AuctionBase auction = AuctionBase(_auction);\n\n        auction.startAuctionDirect(_pepeId, _beginPrice, _endPrice, _duration, msg.sender);\n    }\n\n    /**\n     * @dev Approve and buy. Used to buy cozyTime in one call\n     * @param  _pepeId Pepe to cozy with\n     * @param  _auction Address of the auction contract\n     * @param  _cozyCandidate Pepe to approve and cozy with\n     * @param  _candidateAsFather Use the candidate as father or not\n     */\n    // solhint-disable-next-line max-line-length\n    function approveAndBuy(uint256 _pepeId, address _auction, uint256 _cozyCandidate, bool _candidateAsFather) public stopWhenHalted payable onlyPepeMaster(_cozyCandidate) {\n        approved[_cozyCandidate] = _auction;\n        // solhint-disable-next-line max-line-length\n        CozyTimeAuction(_auction).buyCozy.value(msg.value)(_pepeId, _cozyCandidate, _candidateAsFather, msg.sender); //breeding resets approval\n    }\n\n    /**\n     * @dev The same as above only pass an extra parameter\n     * @param  _pepeId Pepe to cozy with\n     * @param  _auction Address of the auction contract\n     * @param  _cozyCandidate Pepe to approve and cozy with\n     * @param  _candidateAsFather Use the candidate as father or not\n     * @param  _affiliate Address to set as affiliate\n     */\n    // solhint-disable-next-line max-line-length\n    function approveAndBuyAffiliated(uint256 _pepeId, address _auction, uint256 _cozyCandidate, bool _candidateAsFather, address _affiliate) public stopWhenHalted payable onlyPepeMaster(_cozyCandidate) {\n        approved[_cozyCandidate] = _auction;\n        // solhint-disable-next-line max-line-length\n        CozyTimeAuction(_auction).buyCozyAffiliated.value(msg.value)(_pepeId, _cozyCandidate, _candidateAsFather, msg.sender, _affiliate); //breeding resets approval\n    }\n\n    /**\n     * @dev get Pepe information\n     * @param  _pepeId ID of the Pepe to get information of\n     * @return master\n     * @return genotype\n     * @return canCozyAgain\n     * @return generation\n     * @return father\n     * @return mother\n     * @return pepeName\n     * @return coolDownIndex\n     */\n    // solhint-disable-next-line max-line-length\n    function getPepe(uint256 _pepeId) public view returns(address master, uint256[2] genotype, uint64 canCozyAgain, uint64 generation, uint256 father, uint256 mother, bytes32 pepeName, uint8 coolDownIndex) {\n        Pepe storage tempPep = pepes[_pepeId];\n\n        master = tempPep.master;\n        genotype = tempPep.genotype;\n        canCozyAgain = tempPep.canCozyAgain;\n        generation = tempPep.generation;\n        father = tempPep.father;\n        mother = tempPep.mother;\n        pepeName = pepeNames[_pepeId];\n        coolDownIndex = tempPep.coolDownIndex;\n    }\n\n    /**\n     * @dev Get the time when a pepe can cozy again\n     * @param  _pepeId ID of the pepe\n     * @return Time when the pepe can cozy again\n     */\n    function getCozyAgain(uint256 _pepeId) public view returns(uint64) {\n        return pepes[_pepeId].canCozyAgain;\n    }\n\n    /**\n     *  ERC721 Compatibility\n     *\n     */\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /**\n     * @dev Get the total number of Pepes\n     * @return total Returns the total number of pepes\n     */\n    function totalSupply() public view returns(uint256 total) {\n        total = pepes.length - balances[address(0)];\n        return total;\n    }\n\n    /**\n     * @dev Get the number of pepes owned by an address\n     * @param  _owner Address to get the balance from\n     * @return balance The number of pepes\n     */\n    function balanceOf(address _owner) external view returns (uint256 balance) {\n        balance = balances[_owner];\n    }\n\n    /**\n     * @dev Get the owner of a Pepe\n     * @param  _tokenId the token to get the owner of\n     * @return _owner the owner of the pepe\n     */\n    function ownerOf(uint256 _tokenId) external view returns (address _owner) {\n        _owner = pepes[_tokenId].master;\n    }\n\n    /**\n     * @dev Get the id of an token by its index\n     * @param _owner The address to look up the tokens of\n     * @param _index Index to look at\n     * @return tokenId the ID of the token of the owner at the specified index\n     */\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public constant returns (uint256 tokenId) {\n        //The index must be smaller than the balance,\n        // to guarantee that there is no leftover token returned.\n        require(_index < balances[_owner]);\n\n        return wallets[_owner][_index];\n    }\n\n    /**\n     * @dev Private method that ads a token to the wallet\n     * @param _owner Address of the owner\n     * @param _tokenId Pepe ID to add\n     */\n    function addToWallet(address _owner, uint256 _tokenId) private {\n        uint256[] storage wallet = wallets[_owner];\n        uint256 balance = balances[_owner];\n        if (balance < wallet.length) {\n            wallet[balance] = _tokenId;\n        } else {\n            wallet.push(_tokenId);\n        }\n        //increase owner balance\n        //overflow is not likely to happen(need very large amount of pepes)\n        balances[_owner] += 1;\n    }\n\n    /**\n     * @dev Remove a token from a address's wallet\n     * @param _owner Address of the owner\n     * @param _tokenId Token to remove from the wallet\n     */\n    function removeFromWallet(address _owner, uint256 _tokenId) private {\n        uint256[] storage wallet = wallets[_owner];\n        uint256 i = 0;\n        // solhint-disable-next-line no-empty-blocks\n        for (; wallet[i] != _tokenId; i++) {\n            // not the pepe we are looking for\n        }\n        if (wallet[i] == _tokenId) {\n            //found it!\n            uint256 last = balances[_owner] - 1;\n            if (last > 0) {\n                //move the last item to this spot, the last will become inaccessible\n                wallet[i] = wallet[last];\n            }\n            //else: no last item to move, the balance is 0, making everything inaccessible.\n\n            //only decrease balance if _tokenId was in the wallet\n            balances[_owner] -= 1;\n        }\n    }\n\n    /**\n     * @dev Internal transfer function\n     * @param _from Address sending the token\n     * @param _to Address to token is send to\n     * @param _tokenId ID of the token to send\n     */\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        pepes[_tokenId].master = _to;\n        approved[_tokenId] = address(0);//reset approved of pepe on every transfer\n\n        //remove the token from the _from wallet\n        removeFromWallet(_from, _tokenId);\n\n        //add the token to the _to wallet\n        addToWallet(_to, _tokenId);\n\n        emit Transfer(_from, _to, _tokenId);\n    }\n\n    /**\n     * @dev transfer a token. Can only be called by the owner of the token\n     * @param  _to Addres to send the token to\n     * @param  _tokenId ID of the token to send\n     */\n    // solhint-disable-next-line no-simple-event-func-name\n    function transfer(address _to, uint256 _tokenId) public stopWhenHalted\n        onlyPepeMaster(_tokenId) //check if msg.sender is the master of this pepe\n        returns(bool)\n    {\n        _transfer(msg.sender, _to, _tokenId);//after master modifier invoke internal transfer\n        return true;\n    }\n\n    /**\n     * @dev Approve a address to send a token\n     * @param _to Address to approve\n     * @param _tokenId Token to set approval for\n     */\n    function approve(address _to, uint256 _tokenId) external stopWhenHalted\n        onlyPepeMaster(_tokenId)\n    {\n        approved[_tokenId] = _to;\n        emit Approval(msg.sender, _to, _tokenId);\n    }\n\n    /**\n     * @dev Approve or revoke approval an address for al tokens of a user\n     * @param _operator Address to (un)approve\n     * @param _approved Approving or revoking indicator\n     */\n    function setApprovalForAll(address _operator, bool _approved) external stopWhenHalted {\n        if (_approved) {\n            approvedForAll[msg.sender][_operator] = true;\n        } else {\n            approvedForAll[msg.sender][_operator] = false;\n        }\n        emit ApprovalForAll(msg.sender, _operator, _approved);\n    }\n\n    /**\n     * @dev Get approved address for a token\n     * @param _tokenId Token ID to get the approved address for\n     * @return The address that is approved for this token\n     */\n    function getApproved(uint256 _tokenId) external view returns (address) {\n        return approved[_tokenId];\n    }\n\n    /**\n     * @dev Get if an operator is approved for all tokens of that owner\n     * @param _owner Owner to check the approval for\n     * @param _operator Operator to check approval for\n     * @return Boolean indicating if the operator is approved for that owner\n     */\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\n        return approvedForAll[_owner][_operator];\n    }\n\n    /**\n     * @dev Function to signal support for an interface\n     * @param interfaceID the ID of the interface to check for\n     * @return Boolean indicating support\n     */\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\n        if (interfaceID == 0x80ac58cd || interfaceID == 0x01ffc9a7) { //TODO: add more interfaces the contract supports\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @dev Safe transferFrom function\n     * @param _from Address currently owning the token\n     * @param _to Address to send token to\n     * @param _tokenId ID of the token to send\n     */\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external stopWhenHalted {\n        _safeTransferFromInternal(_from, _to, _tokenId, \"\");\n    }\n\n    /**\n     * @dev Safe transferFrom function with aditional data attribute\n     * @param _from Address currently owning the token\n     * @param _to Address to send token to\n     * @param _tokenId ID of the token to send\n     * @param _data Data to pass along call\n     */\n    // solhint-disable-next-line max-line-length\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) external stopWhenHalted {\n        _safeTransferFromInternal(_from, _to, _tokenId, _data);\n    }\n\n    /**\n     * @dev Internal Safe transferFrom function with aditional data attribute\n     * @param _from Address currently owning the token\n     * @param _to Address to send token to\n     * @param _tokenId ID of the token to send\n     * @param _data Data to pass along call\n     */\n    // solhint-disable-next-line max-line-length\n    function _safeTransferFromInternal(address _from, address _to, uint256 _tokenId, bytes _data) internal onlyAllowed(_tokenId) {\n        require(pepes[_tokenId].master == _from);//check if from is current owner\n        require(_to != address(0));//throw on zero address\n\n        _transfer(_from, _to, _tokenId); //transfer token\n\n        if (isContract(_to)) { //check if is contract\n            // solhint-disable-next-line max-line-length\n            require(ERC721TokenReceiver(_to).onERC721Received(_from, _tokenId, _data) == bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\")));\n        }\n    }\n\n    /**\n     * @dev TransferFrom function\n     * @param _from Address currently owning the token\n     * @param _to Address to send token to\n     * @param _tokenId ID of the token to send\n     * @return If it was successful\n     */\n    // solhint-disable-next-line max-line-length\n    function transferFrom(address _from, address _to, uint256 _tokenId) public stopWhenHalted onlyAllowed(_tokenId) returns(bool) {\n        require(pepes[_tokenId].master == _from);//check if _from is really the master.\n        require(_to != address(0));\n        _transfer(_from, _to, _tokenId);//handles event, balances and approval reset;\n        return true;\n    }\n\n    /**\n     * @dev Utility method to check if an address is a contract\n     * @param _address Address to check\n     * @return Boolean indicating if the address is a contract\n     */\n    function isContract(address _address) internal view returns (bool) {\n        uint size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(_address) }\n        return size > 0;\n    }\n\n}",
  "bytecode": "6249d400600655610260604052603c6080908152607860a05261012c60c05261038460e05261070861010052610a8c61012052610e1061014052611c2061016052613840610180526170806101a05261e1006101c052620151806101e0526202a30061020052620546006102205262093a80610240526200008590600790600f62000261565b50600b805460ff19166001179055348015620000a057600080fd5b50620000ab62000304565b506000805433600160a060020a03199182161782556040805160e0810182528381528151808301835284815260208082018690528201908152918101849052606081018490526080810184905260a0810184905260c08101849052600a8054600181018083559190955281517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a860059096029586018054909516600160a060020a03909116178455915190939192849290916200018d917fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a9019060026200034b565b5060408201516003820180546060850151608086015160a087015167ffffffffffffffff1990931667ffffffffffffffff95861617604060020a608060020a031916680100000000000000009286169290920291909117608060020a60c060020a0319167001000000000000000000000000000000009185169190910217600160c060020a03167801000000000000000000000000000000000000000000000000939091169290920291909117905560c0909101516004909101805460ff191660ff90921691909117905550620003e99050565b600283019183908215620002f25791602002820160005b83821115620002be57835183826101000a81548163ffffffff021916908363ffffffff160217905550926020019260040160208160030104928301926001030262000278565b8015620002f05782816101000a81549063ffffffff0219169055600401602081600301049283019260010302620002be565b505b50620003009291506200038a565b5090565b604080516101008101909152600081526020810162000322620003b1565b815260006020820181905260408201819052606082018190526080820181905260a09091015290565b82600281019282156200037c579160200282015b828111156200037c5782518255916020019190600101906200035f565b5062000300929150620003cc565b620003ae91905b808211156200030057805463ffffffff1916815560010162000391565b90565b60408051808201825290600290829080388339509192915050565b620003ae91905b80821115620003005760008155600101620003d3565b6128bd80620003f96000396000f3006080604052600436106102505763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461025557806306fdde031461028b578063081812fc14610315578063095ea7b3146103495780630b1714fd1461036f5780631051db341461039657806313aa48bf146103ab57806318160ddd146103e15780631977bd68146103f657806321a764301461040e578063228dff131461042357806323b872dd1461043e57806327e235e3146104685780632df1f1b6146104895780632e1a9ffe146104a15780632f745c591461053d578063349dc3291461056157806342842e0e146105765780634980e1be146105a0578063583c2e7b146105cb57806362bc63c4146105e05780636352211e146106155780636c88beeb1461062d57806370a0823114610645578063715018a61461066657806371e68cad1461067b57806373a01b75146106935780637d4061e6146106a857806382cf2116146106c05780638da5cb5b146106f757806395d89b411461070c5780639742ca46146107215780639d18e40514610742578063a22cb46514610769578063a9059cbb1461078f578063b3ecf7a6146107b3578063b88d4fde146107c8578063b9b8af0b14610801578063c29338cf14610816578063cb3e64fd1461083d578063d346658b14610852578063e23a778514610883578063e985e9c5146108a2578063edf53886146108c9578063ee66875a146108ea578063f2fde38b146108ff578063f73bda7214610920578063fb139a2114610935578063fb1fad501461099b575b600080fd5b34801561026157600080fd5b50610277600160e060020a0319600435166109b3565b604080519115158252519081900360200190f35b34801561029757600080fd5b506102a0610a2c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102da5781810151838201526020016102c2565b50505050905090810190601f1680156103075780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561032157600080fd5b5061032d600435610a63565b60408051600160a060020a039092168252519081900360200190f35b34801561035557600080fd5b5061036d600160a060020a0360043516602435610a7e565b005b34801561037b57600080fd5b50610277600160a060020a0360043581169060243516610b2b565b3480156103a257600080fd5b50610277610b4b565b3480156103b757600080fd5b506103cf600435600160a060020a0360243516610b54565b60408051918252519081900360200190f35b3480156103ed57600080fd5b506103cf610bac565b34801561040257600080fd5b5061036d600435610bdf565b34801561041a57600080fd5b506103cf610cdb565b34801561042f57600080fd5b50610277600435602435610ce1565b34801561044a57600080fd5b50610277600160a060020a0360043581169060243516604435610d85565b34801561047457600080fd5b506103cf600160a060020a0360043516610eaa565b34801561049557600080fd5b506103cf600435610ebc565b3480156104ad57600080fd5b506104b9600435610ece565b60408051600160a060020a038a168152906020820190899080838360005b838110156104ef5781810151838201526020016104d7565b50505067ffffffffffffffff9a8b169390910192835250509590961660208601526040808601949094526060850192909252608084015260ff1660a0830152519081900360c0019350915050f35b34801561054957600080fd5b506103cf600160a060020a0360043516602435610fb1565b34801561056d57600080fd5b5061032d61100c565b34801561058257600080fd5b5061036d600160a060020a036004358116906024351660443561101b565b3480156105ac57600080fd5b506105b561104c565b6040805160ff9092168252519081900360200190f35b3480156105d757600080fd5b506103cf611051565b3480156105ec57600080fd5b506105f8600435611057565b6040805167ffffffffffffffff9092168252519081900360200190f35b34801561062157600080fd5b5061032d60043561108c565b34801561063957600080fd5b5061032d6004356110bd565b34801561065157600080fd5b506103cf600160a060020a03600435166110d8565b34801561067257600080fd5b5061036d6110f3565b34801561068757600080fd5b5061036d600435611152565b34801561069f57600080fd5b506103cf61120e565b3480156106b457600080fd5b5061032d600435611214565b3480156106cc57600080fd5b5061036d600435600160a060020a036024351660443560643567ffffffffffffffff6084351661122f565b34801561070357600080fd5b5061032d61132c565b34801561071857600080fd5b506102a061133b565b34801561072d57600080fd5b5061036d600160a060020a0360043516611372565b61036d600435600160a060020a0360243581169060443590606435151590608435166113c1565b34801561077557600080fd5b5061036d600160a060020a036004351660243515156114a5565b34801561079b57600080fd5b50610277600160a060020a0360043516602435611560565b3480156107bf57600080fd5b506103cf6115be565b3480156107d457600080fd5b5061036d600160a060020a03600480358216916024803590911691604435916064359081019101356115c4565b34801561080d57600080fd5b50610277611617565b34801561082257600080fd5b50610277600435602435600160a060020a0360443516611620565b34801561084957600080fd5b5061036d611af9565b34801561085e57600080fd5b5061086a600435611b2e565b6040805163ffffffff9092168252519081900360200190f35b61036d600435600160a060020a03602435166044356064351515611b5b565b3480156108ae57600080fd5b50610277600160a060020a0360043581169060243516611c55565b3480156108d557600080fd5b506103cf600160a060020a0360043516611c83565b3480156108f657600080fd5b506103cf611c95565b34801561090b57600080fd5b5061036d600160a060020a0360043516611c9b565b34801561092c57600080fd5b506103cf611cbe565b34801561094157600080fd5b5061094d600435611cc3565b60408051600160a060020a03909716875267ffffffffffffffff9586166020880152938516868501529184166060860152909216608084015260ff90911660a0830152519081900360c00190f35b3480156109a757600080fd5b5061036d600435611d40565b60007f80ac58cd00000000000000000000000000000000000000000000000000000000600160e060020a031983161480610a1657507f01ffc9a700000000000000000000000000000000000000000000000000000000600160e060020a03198316145b15610a2357506001610a27565b5060005b919050565b60408051808201909152600b81527f43727970746f2050657065000000000000000000000000000000000000000000602082015281565b6000908152600e6020526040902054600160a060020a031690565b60045460ff1615610a8e57600080fd5b600a80548291339183908110610aa057fe5b6000918252602090912060059091020154600160a060020a031614610ac457600080fd5b6000828152600e60209081526040918290208054600160a060020a031916600160a060020a03871690811790915582518581529251909233927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92592918290030190a3505050565b600f60209081526000928352604080842090915290825290205460ff1681565b600b5460ff1681565b60045460009060ff1615610b6757600080fd5b601154600160a060020a03163314610b7e57600080fd5b60105461044c11610b8e57600080fd5b610ba5610b9a84611d89565b600080600086611dd6565b9392505050565b60008052600d6020527f81955a0a11e65eac625c29e8882660bae4e165a75d72780094acae8ece9a29ee54600a54035b90565b60008054600160a060020a03163314610bf757600080fd5b60045460ff1615610c0757600080fd5b5060005b81811015610cd75760105460641015610c2357600080fd5b610cce610cb842600a8054905060405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310610c855780518252601f199092019160209182019101610c66565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209250611d89915050565b6000805481908190600160a060020a0316611dd6565b50600101610c0b565b5050565b60105481565b60045460009060ff1615610cf457600080fd5b600a80548491339183908110610d0657fe5b6000918252602090912060059091020154600160a060020a031614610d2a57600080fd5b60008481526009602052604090205415610d4357600080fd5b6000848152600960205260408082208590555185917f5a8858069902ead8e61944d06d7de6818a0dd09b668447431ac1501baa5e8ef891a25060019392505050565b60045460009060ff1615610d9857600080fd5b81600a81815481101515610da857fe5b6000918252602090912060059091020154600160a060020a0316331480610de557506000818152600e6020526040902054600160a060020a031633145b80610e375750600f6000600a83815481101515610dfe57fe5b60009182526020808320600590920290910154600160a060020a03168352828101939093526040918201812033825290925290205460ff165b1515610e4257600080fd5b84600160a060020a0316600a84815481101515610e5b57fe5b6000918252602090912060059091020154600160a060020a031614610e7f57600080fd5b600160a060020a0384161515610e9457600080fd5b610e9f85858561206c565b506001949350505050565b600d6020526000908152604090205481565b60096020526000908152604090205481565b6000610ed86127d9565b6000806000806000806000600a8a815481101515610ef257fe5b6000918252602090912060059091020180546040805180820191829052600160a060020a039092169b5091925090600183019060029082845b815481526020019060010190808311610f2b57505050600384015460009d8e5260096020526040909d20546004909401549b9d929c67ffffffffffffffff8082169d68010000000000000000830482169d50700100000000000000000000000000000000830482169c5060c060020a9092041699509397505060ff909216945092505050565b600160a060020a0382166000908152600d60205260408120548210610fd557600080fd5b600160a060020a0383166000908152600c60205260409020805483908110610ff957fe5b9060005260206000200154905092915050565b601154600160a060020a031681565b60045460ff161561102b57600080fd5b6110478383836020604051908101604052806000815250612117565b505050565b600581565b60065481565b6000600a8281548110151561106857fe5b600091825260209091206005909102016003015467ffffffffffffffff1692915050565b6000600a8281548110151561109d57fe5b6000918252602090912060059091020154600160a060020a031692915050565b600260205260009081526040902054600160a060020a031681565b600160a060020a03166000908152600d602052604090205490565b600054600160a060020a0316331461110a57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a260008054600160a060020a0319169055565b600081815260026020526040902054600160a060020a03161561117457600080fd5b33600090815260016020526040902054156111b457336000908152600160209081526040808320548352600290915290208054600160a060020a03191690555b33600081815260016020908152604080832085905584835260029091528082208054600160a060020a03191684179055518392917f43c1ac38b68f3a24742fba8f0826c9fcf340d41f123872fa3175164d117e25af91a350565b61044c81565b600e60205260009081526040902054600160a060020a031681565b60045460009060ff161561124257600080fd5b600a8054879133918390811061125457fe5b6000918252602090912060059091020154600160a060020a03161461127857600080fd5b61128333878961206c565b604080517fd024cd0200000000000000000000000000000000000000000000000000000000815260048101899052602481018790526044810186905267ffffffffffffffff851660648201523360848201529051879350600160a060020a0384169163d024cd029160a480830192600092919082900301818387803b15801561130b57600080fd5b505af115801561131f573d6000803e3d6000fd5b5050505050505050505050565b600054600160a060020a031681565b60408051808201909152600481527f4350455000000000000000000000000000000000000000000000000000000000602082015281565b600054600160a060020a0316331461138957600080fd5b601154600160a060020a03161561139f57600080fd5b60118054600160a060020a031916600160a060020a0392909216919091179055565b60045460ff16156113d157600080fd5b600a805484913391839081106113e357fe5b6000918252602090912060059091020154600160a060020a03161461140757600080fd5b6000848152600e60205260408082208054600160a060020a031916600160a060020a0389811691821790925582517fa6da467c000000000000000000000000000000000000000000000000000000008152600481018b905260248101899052871515604482015233606482015291861660848301529151919263a6da467c92349260a480820193929182900301818588803b15801561130b57600080fd5b60045460ff16156114b557600080fd5b80156114ee57336000908152600f60209081526040808320600160a060020a03861684529091529020805460ff1916600117905561151a565b336000908152600f60209081526040808320600160a060020a03861684529091529020805460ff191690555b6040805182151581529051600160a060020a0384169133917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319181900360200190a35050565b60045460009060ff161561157357600080fd5b600a8054839133918390811061158557fe5b6000918252602090912060059091020154600160a060020a0316146115a957600080fd5b6115b433858561206c565b5060019392505050565b60055481565b60045460ff16156115d457600080fd5b61161085858585858080601f01602080910402602001604051908101604052809392919081815260200183838082843750612117945050505050565b5050505050565b60045460ff1681565b600080600061162d6127d9565b60045460009060ff161561164057600080fd5b8787141561164d57600080fd5b600a80543391908a90811061165e57fe5b6000918252602090912060059091020154600160a060020a0316148061169a57506000888152600e6020526040902054600160a060020a031633145b806116ec5750600f6000600a8a8154811015156116b357fe5b60009182526020808320600590920290910154600160a060020a03168352828101939093526040918201812033825290925290205460ff165b15156116f757600080fd5b600a80543391908990811061170857fe5b6000918252602090912060059091020154600160a060020a0316148061174457506000878152600e6020526040902054600160a060020a031633145b806117965750600f6000600a8981548110151561175d57fe5b60009182526020808320600590920290910154600160a060020a03168352828101939093526040918201812033825290925290205460ff165b15156117a157600080fd5b600a8054899081106117af57fe5b600091825260209091206003600590920201015467ffffffffffffffff16421180156118055750600a8054889081106117e457fe5b600091825260209091206003600590920201015467ffffffffffffffff1642115b151561181057600080fd5b86600a8981548110151561182057fe5b600091825260209091206005909102016003015460c060020a900467ffffffffffffffff1614801590611893575086600a8981548110151561185e57fe5b6000918252602090912060059091020160030154700100000000000000000000000000000000900467ffffffffffffffff1614155b151561189e57600080fd5b87600a888154811015156118ae57fe5b600091825260209091206005909102016003015460c060020a900467ffffffffffffffff1614801590611921575087600a888154811015156118ec57fe5b6000918252602090912060059091020160030154700100000000000000000000000000000000900467ffffffffffffffff1614155b151561192c57600080fd5b600a80548890811061193a57fe5b90600052602060002090600502019350600a8881548110151561195957fe5b600091825260208083208a8452600e90915260408084208054600160a060020a03199081169091558c8552938190208054909416909355825180840193849052600592909202019450611a0291600187019060029082845b8154815260200190600101908083116119b1575050604080518082019182905293506001890192506002915082845b8154815260200190600101908083116119e0575050600a5492506123cd915050565b91508260030160089054906101000a900467ffffffffffffffff1660010190508360030160089054906101000a900467ffffffffffffffff1660010167ffffffffffffffff168167ffffffffffffffff161015611a795750600383015468010000000000000000900467ffffffffffffffff166001015b611a828861254e565b611a8b8761254e565b600383015467ffffffffffffffff16600a611aa9848b8b868c611dd6565b81548110611ab357fe5b906000526020600020906005020160030160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060019450505050509392505050565b60055460035401421180611b175750600054600160a060020a031633145b1515611b2257600080fd5b6004805460ff19169055565b600781600f8110611b3b57fe5b60089182820401919006600402915054906101000a900463ffffffff1681565b60045460ff1615611b6b57600080fd5b600a80548391339183908110611b7d57fe5b6000918252602090912060059091020154600160a060020a031614611ba157600080fd5b6000838152600e60205260408082208054600160a060020a031916600160a060020a03881690811790915581517fd3ce71df000000000000000000000000000000000000000000000000000000008152600481018990526024810187905285151560448201523360648201529151909263d3ce71df9234926084808301939282900301818588803b158015611c3557600080fd5b505af1158015611c49573d6000803e3d6000fd5b50505050505050505050565b600160a060020a039182166000908152600f6020908152604080832093909416825291909152205460ff1690565b60016020526000908152604090205481565b60035481565b600054600160a060020a03163314611cb257600080fd5b611cbb816125f5565b50565b606481565b600a805482908110611cd157fe5b6000918252602090912060059091020180546003820154600490920154600160a060020a03909116925067ffffffffffffffff80831692680100000000000000008104821692700100000000000000000000000000000000820483169260c060020a9092049091169060ff1686565b600054600160a060020a03163314611d5757600080fd5b60035415611d6457600080fd5b600654811115611d7357600080fd5b6005556004805460ff1916600117905542600355565b611d916127d9565b5060408051808201825260009283527f434f4c4c454354205045504553204f4e2043525950544f50455045532e494f2160209081529183208152918190209082015290565b600080611de16127f4565b600267ffffffffffffffff8616049150601c8567ffffffffffffffff161115611e0957600e91505b506040805160e081018252600160a060020a03851681526020810189905260009181019190915267ffffffffffffffff85811660608301819052878216608084015290881660a083015260ff831660c08301521515611e6c576010805460010190555b600a8054600180820180845560009390935283517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a860059093029283018054600160a060020a031916600160a060020a0390921691909117815560208501519193928592611efe917fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a901906002612839565b5060408201516003820180546060850151608086015160a087015167ffffffffffffffff1990931667ffffffffffffffff958616176fffffffffffffffff0000000000000000191668010000000000000000928616929092029190911777ffffffffffffffff000000000000000000000000000000001916700100000000000000000000000000000000918516919091021777ffffffffffffffffffffffffffffffffffffffffffffffff1660c060020a939091169290920291909117905560c0909101516004909101805460ff191660ff909216919091179055039250611fe68484612665565b828667ffffffffffffffff168867ffffffffffffffff167f160403841b73fe58236181ab476e17f2836a5b4aa8a570d9f1baf4b6ed61a38a60405160405180910390a46040518390600160a060020a038616906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505095945050505050565b81600a8281548110151561207c57fe5b6000918252602080832060059092029091018054600160a060020a0394909416600160a060020a0319948516179055838252600e905260409020805490911690556120c783826126eb565b6120d18282612665565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b81600a8181548110151561212757fe5b6000918252602090912060059091020154600160a060020a031633148061216457506000818152600e6020526040902054600160a060020a031633145b806121b65750600f6000600a8381548110151561217d57fe5b60009182526020808320600590920290910154600160a060020a03168352828101939093526040918201812033825290925290205460ff165b15156121c157600080fd5b84600160a060020a0316600a848154811015156121da57fe5b6000918252602090912060059091020154600160a060020a0316146121fe57600080fd5b600160a060020a038416151561221357600080fd5b61221e85858561206c565b612227846127d1565b156116105760405180807f6f6e455243373231526563656976656428616464726573732c75696e7432353681526020017f2c62797465732900000000000000000000000000000000000000000000000000815250602701905060405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191684600160a060020a031663f0b9e5ba8786866040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561233f578181015183820152602001612327565b50505050905090810190601f16801561236c5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561238d57600080fd5b505af11580156123a1573d6000803e3d6000fd5b505050506040513d60208110156123b757600080fd5b5051600160e060020a0319161461161057600080fd5b6123d56127d9565b604051905060408101604052816000524260205260406000206123fe565b60029190910a900490565b6124eb565b6000600184161515612413579091905b61241e6001856123f3565b9350600080607f86166124326007886123f3565b96508060015b600484106101008310161561248657959695600019908101600283900a9182011880891696909617959450607f8916925061247460078a6123f3565b98508282019150600184019350612438565b6001810319945086851686179550886000527f434f4c4c454354205045504553204f4e2043525950544f50455045532e494f21602052602460002060236003206022600220166021600120602060002016161680871896505050505050509392505050565b6020600182160260106002831602600483049250612510838289015184890151612403565b84526020821891506020811890508460005242196020526040600020925061253f838289015184890151612403565b60208501525050509392505050565b6000600a8281548110151561255f57fe5b60009182526020909120600590910201600481015490915060079060ff16600f811061258757fe5b60088104919091015460038301805467ffffffffffffffff1916600790931660049081026101000a90920463ffffffff16420167ffffffffffffffff1692909217909155810154600e60ff9091161015610cd757600401805460ff8082166001011660ff1990911617905550565b600160a060020a038116151561260a57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a0382166000908152600c60209081526040808320600d9092529091205481548110156126b2578282828154811015156126a157fe5b6000918252602090912001556126c8565b8154600181018355600083815260209020018390555b505050600160a060020a03166000908152600d6020526040902080546001019055565b600160a060020a0382166000908152600c6020526040812090805b83838381548110151561271557fe5b906000526020600020015414151561273257600190910190612706565b83838381548110151561274157fe5b906000526020600020015414156116105750600160a060020a0384166000908152600d602052604081205460001901908111156127ac57828181548110151561278657fe5b9060005260206000200154838381548110151561279f57fe5b6000918252602090912001555b50505050600160a060020a03166000908152600d602052604090208054600019019055565b6000903b1190565b60408051808201825290600290829080388339509192915050565b60408051610100810190915260008152602081016128106127d9565b815260006020820181905260408201819052606082018190526080820181905260a09091015290565b8260028101928215612867579160200282015b8281111561286757825182559160200191906001019061284c565b50612873929150612877565b5090565b610bdc91905b80821115612873576000815560010161287d5600a165627a7a72305820824faa9a1a1c971be5f5b529149a59e462185c5aef8cde729b59ca67cbf5ff420029"
}