{
  "address": "0x63239f9ac103b672537bdf5c81c11536c49c02a9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PiggyBank",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-02\n*/\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: contracts/piggyBank.sol\n\npragma solidity ^0.5.0;\n\n\ncontract PiggyBank {\n    using SafeMath for uint256;\n\n    struct Deposit {\n        uint256 period;\n        uint256 amount;\n        bool withdrawed;\n    }\n\n    address[] public users;\n    mapping(address => mapping(uint256 => Deposit)) public userToDeposit;\n    mapping(address => uint256[]) public userAllDeposit;\n\n    function deposit(uint256 _period) public payable {\n        if(!isUserExist(msg.sender)) {\n            users.push(msg.sender);\n        }\n        userAllDeposit[msg.sender].push(1);\n        uint256 newId = userTotalDeposit(msg.sender);\n        userToDeposit[msg.sender][newId] = Deposit(block.timestamp.add(_period), msg.value, false);\n    }\n\n    function extendPeriod(uint256 _secondsToExtend, uint256 _id) public {\n        userToDeposit[msg.sender][_id].period += _secondsToExtend;\n    }\n\n    function withdraw(uint256 _id) public {\n        require(_id > 0);\n        require(userToDeposit[msg.sender][_id].amount > 0);\n        require(block.timestamp > userToDeposit[msg.sender][_id].period);\n        uint256 transferValue = userToDeposit[msg.sender][_id].amount;\n        userToDeposit[msg.sender][_id].amount = 0;\n        userToDeposit[msg.sender][_id].withdrawed = true;\n        msg.sender.transfer(transferValue);\n    }\n\n    function isUserExist(address _user) public view returns(bool) {\n        for(uint i = 0; i < users.length; i++) {\n            if(users[i] == _user) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function userTotalDeposit(address _user) public view returns(uint256) {\n        return userAllDeposit[_user].length;\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userTotalDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isUserExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAllDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userToDeposit\",\"outputs\":[{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"withdrawed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secondsToExtend\",\"type\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"extendPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
  "bytecode": "608060405234801561001057600080fd5b506109b9806100206000396000f3fe608060405260043610610097576000357c010000000000000000000000000000000000000000000000000000000090048063a87cbebb1161006b578063a87cbebb14610220578063b6b55f251461028f578063d2af1e8a146102bd578063db1ae5901461033e57610097565b8062d2e4681461009c5780630255fa1e146101015780632e1a7d4d1461016a578063365b98b2146101a5575b600080fd5b3480156100a857600080fd5b506100eb600480360360208110156100bf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610383565b6040518082815260200191505060405180910390f35b34801561010d57600080fd5b506101506004803603602081101561012457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103cf565b604051808215151515815260200191505060405180910390f35b34801561017657600080fd5b506101a36004803603602081101561018d57600080fd5b8101908080359060200190929190505050610473565b005b3480156101b157600080fd5b506101de600480360360208110156101c857600080fd5b81019080803590602001909291905050506106ac565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561022c57600080fd5b506102796004803603604081101561024357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106ea565b6040518082815260200191505060405180910390f35b6102bb600480360360208110156102a557600080fd5b810190808035906020019092919050505061071a565b005b3480156102c957600080fd5b50610316600480360360408110156102e057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108c3565b6040518084815260200183815260200182151515158152602001935050505060405180910390f35b34801561034a57600080fd5b506103816004803603604081101561036157600080fd5b810190808035906020019092919080359060200190929190505050610907565b005b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b600080600090505b600080549050811015610468578273ffffffffffffffffffffffffffffffffffffffff1660008281548110151561040a57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561045b57600191505061046e565b80806001019150506103d7565b50600090505b919050565b60008111151561048257600080fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600101541115156104e457600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020600001544211151561054557600080fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206001015490506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000206001018190555060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060020160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156106a7573d6000803e3d6000fd5b505050565b6000818154811015156106bb57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528160005260406000208181548110151561070557fe5b90600052602060002001600091509150505481565b610723336103cf565b15156107905760003390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060019080600181540180825580915050906001820390600052602060002001600090919290919091505550600061080533610383565b9050606060405190810160405280610826844261096c90919063ffffffff16565b815260200134815260200160001515815250600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff0219169083151502179055509050505050565b6001602052816000526040600020602052806000526040600020600091509150508060000154908060010154908060020160009054906101000a900460ff16905083565b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600001600082825401925050819055505050565b600080828401905083811015151561098357600080fd5b809150509291505056fea165627a7a7230582058ea8a73bab318135419df435ecb1fa53c7434983b8ea4ef82ebbca20a653f7a0029"
}