{
  "address": "0x0090d11b3752826c8b6e86ff3ca0a3f6466db8a0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Aligato",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-09\n*/\n\npragma solidity ^0.4.24;\n\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that throw on error\n*/\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"Mul overflow!\");\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"Sub overflow!\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        require(c >= a, \"Add overflow!\");\n        return c;\n    }\n}\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    function balanceOf(address _owner) external view returns (uint256);\n    function transfer(address _to, uint256 _value) external returns(bool);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n}\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Only Owner can do that!\");\n        _;\n    }\n\n    function transferOwnership(address _newOwner)\n    external onlyOwner {\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership()\n    external {\n        require(msg.sender == newOwner, \"You are not new Owner!\");\n        owner = newOwner;\n        newOwner = address(0);\n        emit OwnershipTransferred(owner, newOwner);\n    }\n}\n\ncontract Permissioned {\n\n    function approve(address _spender, uint256 _value) public returns(bool);\n    function transferFrom(address _from, address _to, uint256 _value) external returns(bool);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract Burnable {\n\n    function burn(uint256 _value) external returns(bool);\n    function burnFrom(address _from, uint256 _value) external returns(bool);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed _from, uint256 _value);\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract Aligato is ERC20Interface, Owned, Permissioned, Burnable {\n\n    using SafeMath for uint256; //Be aware of overflows\n\n    // This creates an array with all balances\n    mapping(address => uint256) internal _balanceOf;\n\n    // This creates an array with all allowance\n    mapping(address => mapping(address => uint256)) internal _allowance;\n\n    bool public isLocked = true; //only contract Owner can transfer tokens\n\n    uint256 icoSupply = 0;\n\n    //set ICO balance and emit\n    function setICO(address user, uint256 amt) internal{\n        uint256 amt2 = amt * (10 ** uint256(decimals));\n        _balanceOf[user] = amt2;\n        emit Transfer(0x0, user, amt2);\n        icoSupply += amt2;\n    }\n\n    // As ICO been done on platform, we need set proper amouts for ppl that participate\n    function doICO() internal{\nsetICO(\t0x5cD4c4F9eb8F323d64873C55b8da45f915A8256F\t,\t205750\t);\nsetICO(\t0x937f403B2f5cd0C17BEE8EF5DB1ecb2E3C793343\t,\t130500\t);\nsetICO(\t0x7503033e1B7AF4C1bc5Dd16B45b88ac08aF256f9\t,\t120300\t);\nsetICO(\t0x06010e8bc01446aBf39190F305B3740BE442aD88\t,\t100500\t);\nsetICO(\t0x51dB593c4ACC25b527c251E4fAc40C1d0C37559D\t,\t42500\t);\nsetICO(\t0xD11c70764B03fd23E451574a824af2104Bec5908\t,\t40000\t);\nsetICO(\t0x0c1610251B1Ac4180981D09bc795784beF44115d\t,\t39938\t);\nsetICO(\t0x91679f8Ab88a243f6F4387407fd11d75131CF3D4\t,\t35000\t);\nsetICO(\t0x1ac43DEC17B267d502cc257e5ab545Af6228ba94\t,\t21750\t);\nsetICO(\t0x7fC6cC49a4Dd2C56dBD062141b5D2e3563e4b873\t,\t20000\t);\nsetICO(\t0xF19051aD24B50C14C612515fFbd68f06097d014C\t,\t19909\t);\nsetICO(\t0x3B6E06351c1E1bD62ffdC47C4ada2fD18a819482\t,\t19868\t);\nsetICO(\t0x20A2018CdC1D9A4f474C268b6c20670C597487B2\t,\t16169\t);\nsetICO(\t0x2fEcDEedF64C49563E90E926c7F2323DF1ba09D2\t,\t15000\t);\nsetICO(\t0xc9b8f7c277551dA2759c2f655Ab8429564bA6a76\t,\t12500\t);\nsetICO(\t0x1F2245636D7CeA33f73E4CAa7935481122AF31b9\t,\t12000\t);\nsetICO(\t0xbb9cDa8148153103cbe8EE0227a8c7a84666AA13\t,\t11125\t);\nsetICO(\t0x43E4d827e518Dd960498BD105E9e76971e5965FC\t,\t10500\t);\nsetICO(\t0x588749e9395A1EE6A8C9A6fb182Ebdd2796B9f0f\t,\t10268\t);\nsetICO(\t0x7e35AA166a8c78B49e61ab280f39915d9BB51C40\t,\t10000\t);\nsetICO(\t0xa2aFF7b4aC8df3FB1A789396267e0fe55b7D8783\t,\t8622\t);\nsetICO(\t0x7Bee818d0FD6b9f3A104e38036cC4e872517e789\t,\t7840\t);\nsetICO(\t0x0D2CCA65Be1F274E69224C57790731FFC3D6b767\t,\t7000\t);\nsetICO(\t0x2Fe29a9C8Ae4C676af671270CaED159bCF2A153b\t,\t6854\t);\nsetICO(\t0x7c5c27274F1cD86849e7DDd47191e4C3cd1Fe273\t,\t6400\t);\nsetICO(\t0xcEE7bF213816c93e8C5d87a3CC6C21dF38D120A2\t,\t5500\t);\nsetICO(\t0x6C5e4C05AD042880053A183a9Aa204212f09Eb65\t,\t5500\t);\nsetICO(\t0xA29Ecf7b205928bD4d9dEdEbA24dDEbcFE8cb8aF\t,\t5500\t);\nsetICO(\t0x42dfe28873c01a8D128eAaEfc3bde9FEcF22647A\t,\t5500\t);\nsetICO(\t0xF78d102a7f3048B5d5927dcA76601d943526F37b\t,\t4800\t);\nsetICO(\t0xd4E30D7b48287a72Bc99c5ABe5AB8dDE8B608802\t,\t4500\t);\nsetICO(\t0xeDAA7f020467e77249F9d08d81C50c4e33eB063D\t,\t4500\t);\nsetICO(\t0x3f2a9614f217acF05A8d6f144aEE5c1fAD564C3D\t,\t4500\t);\nsetICO(\t0x8a170A75845E5F39Db826470A9f28c6A331BF2B6\t,\t4000\t);\nsetICO(\t0xFB3018F1366219eD3fE8CE1B844860F9c4Fac5e7\t,\t4000\t);\nsetICO(\t0x47A85250507EB1b892AD310F78d40D170d24FED1\t,\t4000\t);\nsetICO(\t0x22eeb1c4265F7F7cFEB1e19AF7f32Ec361a4710E\t,\t4000\t);\nsetICO(\t0x6384f2d17A855435E7517C29d302690Dc02421C2\t,\t3700\t);\nsetICO(\t0x93E7A5b9fa8e34F58eE8d4B4562B627C04eAD99b\t,\t3500\t);\nsetICO(\t0xe714E0CcFCE4d0244f7431B43080C685d1504Bd0\t,\t3500\t);\nsetICO(\t0x27ef607C8F1b71aF3Df913C104eD73Ed66624871\t,\t3310\t);\nsetICO(\t0xd5B82B5BcEA28A2740b8dA56a345238Fb212B623\t,\t3200\t);\nsetICO(\t0xAA2dc38E8bD38C0faaa735B4C0D4a899059f5a0d\t,\t3125\t);\nsetICO(\t0x40b95671c37116Bf41F0D2E68BD93aD10d25502E\t,\t3055\t);\nsetICO(\t0xCe14cf3bB404eDC02db6Ba2d8178b200A3031aeA\t,\t3010\t);\nsetICO(\t0x74b04A0198b68722Ca630D041E60303B655Bd6A8\t,\t3000\t);\nsetICO(\t0x5Ca403BB07e4e792400d165Fd716d939C35AB49B\t,\t3000\t);\nsetICO(\t0x6eA366425fa4b6Cf070472aCA6991e0731de9A0D\t,\t3000\t);\nsetICO(\t0x3eE6ba8E7B299443Cc23eff3B8426A33aD6a2121\t,\t3000\t);\nsetICO(\t0xdfCee0e4E371e02d7744E9eCA3Fa6269E116b1C9\t,\t6524\t);\nsetICO(\t0x42A44787FaD2C644201B6c753DBAE2d990dFb47c\t,\t3000\t);\nsetICO(\t0xB5F1090997630A5E233467538C40C0e2e259A916\t,\t2630\t);\nsetICO(\t0x1ACCcE2F80A3660e672Da9F24E384D6143AF0C03\t,\t2585\t);\nsetICO(\t0xa32DF0f819e017b3ca2d43c67E4368edC844A804\t,\t2553\t);\nsetICO(\t0x7dD71b315f12De87C1F136A179DB8Cc144b58295\t,\t2500\t);\nsetICO(\t0x822e1a575CC4ce8D17d29cA07C082929A6B8A3bB\t,\t2500\t);\nsetICO(\t0x1915F337099Ce25Ee6ED818B53fF1F7623e3123F\t,\t2340\t);\nsetICO(\t0x6dAE092fa57D05681e919563f4ee63F2f7F1D201\t,\t2000\t);\nsetICO(\t0xc3923D820881B1F189123008749427A481E983Ca\t,\t2000\t);\nsetICO(\t0x3f47469982dE2348e44C9B56dB275E26e9259f4D\t,\t1900\t);\nsetICO(\t0xF6A657925812fad72a6FB51f0Fbb5328d9BF8f31\t,\t1650\t);\nsetICO(\t0x6a8058555c57BC1C59dcE48202DaD700fAA17D26\t,\t1600\t);\nsetICO(\t0xF4d4C9E869604715039cbD3027AEC95d083f9265\t,\t1600\t);\nsetICO(\t0x5F6520231C1ad754C574b01f34A36619C5CA2a02\t,\t1500\t);\nsetICO(\t0xA81Ea58d0377AaC22C78CA61c631B7b0BFf2029f\t,\t1500\t);\nsetICO(\t0x43396e7DF304adeFEdFF3cb3BEe3dF55D1764928\t,\t1500\t);\nsetICO(\t0xCcfdaA5C4E355075D1628DfaF4030a397EF0e91E\t,\t1500\t);\nsetICO(\t0x7e40CB0937bdf37be20F68E8d759ffD1138968Ec\t,\t1853\t);\nsetICO(\t0x0B8fEA04316355de3F912fc5F7aa2A32235E8986\t,\t1300\t);\nsetICO(\t0x0F57D11a21Fe457bd59bbaf8848410Cc38003eef\t,\t1200\t);\nsetICO(\t0xff3850d80A748202Fb36EF680486d64DDAA493e9\t,\t1091\t);\nsetICO(\t0x8d54F232DF1fB84781286Ccffb0671D436B21DFF\t,\t1046\t);\nsetICO(\t0x8966636fE61E876Fc6499a6B819D56Af40433083\t,\t1039\t);\nsetICO(\t0x8B25A8f699F314ef3011122AD1d0B102e326367f\t,\t1006\t);\nsetICO(\t0x32ABe252Ea2CE4E949738495Ed51f911F835Fd53\t,\t1000\t);\nsetICO(\t0x67eb2a1cC74cC366DDE5aE88A5E4F82eF1a13B49\t,\t1000\t);\nsetICO(\t0x680C150689d6b981d382206A39fB44301b62F837\t,\t1000\t);\nsetICO(\t0x70D7c067C206f1e42178604678ff2C0C9fd58E66\t,\t1000\t);\nsetICO(\t0x65cc14dc596073750a566205370239e8e20268E4\t,\t1000\t);\nsetICO(\t0x887995731f3fd390B7eeb6aEb978900af410D48B\t,\t800\t);\nsetICO(\t0x5f3861ffc2e75D00BA5c19728590986f3FF48808\t,\t760\t);\nsetICO(\t0x9b6ac30F4694d86d430ECDB2cD16F3e6e414cBb2\t,\t640\t);\nsetICO(\t0x9d35e4411272DF158a8634a2f529DEd0fF541973\t,\t593\t);\nsetICO(\t0x27B48344ed0b7Aaef62e1E679035f94a25DF2442\t,\t508\t);\nsetICO(\t0x351313F49476Ed58214D07Bb87162527be34978e\t,\t500\t);\nsetICO(\t0xd96B785ba950ccf4d336FbDC69c2a82fB6c485B4\t,\t500\t);\nsetICO(\t0x7Eb37Ddd2b4Ed95Be445a1BCBf33b458e0e0103D\t,\t400\t);\nsetICO(\t0xCA83fBDe3197c93d4754bf23fe2f5c745a4DcAA0\t,\t350\t);\nsetICO(\t0xd162BdB296b99527D137323BEdF80a0899476a3b\t,\t345\t);\nsetICO(\t0x93773a596DfB4E0641dC626306c903a0552E05E7\t,\t340\t);\nsetICO(\t0x61014d61b734162745E0B9770be56F2d21460cE6\t,\t300\t);\nsetICO(\t0x0b48AEBA0e8Ab53820c6Cc25249bB0c6A09f3E2c\t,\t300\t);\nsetICO(\t0xe24526F12eA980c237d25F5aefc2fe3Aa5fc70cd\t,\t250\t);\nsetICO(\t0x34FCb220FACd2746433a312D113737fCc4B32B11\t,\t196\t);\nsetICO(\t0x7037c3521616Ca33F3362cC4a8ef29dc172cC392\t,\t150\t);\nsetICO(\t0xf0d9C8b7b1C94B67d90131Eb5444Ff4D9fE98eAd\t,\t150\t);\nsetICO(\t0x65ba8BAa1857578606f5F69E975C658daE26eDe5\t,\t100\t);\nsetICO(\t0xb19cB24d619608eFe8a127756ac030D56586Fc84\t,\t100\t);\nsetICO(\t0x18fa81c761Bf09e86cDcb0D01C18d7f8ceDbeCc3\t,\t100\t);\nsetICO(\t0x7a666D30379576Cc4659b5440eF787c652eeD11B\t,\t100\t);\nsetICO(\t0x1b0ccb9B9d74D83F1A51656e1f20b0947bd5927d\t,\t100\t);\nsetICO(\t0xA29Cd944f7bA653D35cE627961246A87ffdB1156\t,\t100\t);\nsetICO(\t0xA88677Bed9DE38C818aFcC2C7FAD60D473A23542\t,\t100\t);\nsetICO(\t0xC5ffEb68fb7D13ffdff2f363aE560dF0Ce392a98\t,\t50\t);\nsetICO(\t0xc7EFE07b332b580eBA18DE013528De604E363b64\t,\t38\t);\nsetICO(\t0xFcc9aCC9FC667Ad2E7D7BcEDa58bbacEa9cB721A\t,\t20\t);\nsetICO(\t0x9cdEBfF1F20F6b7828AEAb3710D6caE61cB48cd4\t,\t5\t);\n\n\n    }\n\n    /**\n    * Constructor function\n    *\n    * Initializes contract with initial supply tokens to the creator of the contract\n    */\n    constructor(string _symbol, string _name, uint256 _supply, uint8 _decimals)\n    public {\n        require(_supply != 0, \"Supply required!\"); //avoid accidental deplyment with zero balance\n        owner = msg.sender;\n        symbol = _symbol;\n        name = _name;\n        decimals = _decimals;\n        doICO();\n        totalSupply = _supply.mul(10 ** uint256(decimals)); //supply in constuctor is w/o decimal zeros\n        _balanceOf[msg.sender] = totalSupply - icoSupply;\n        emit Transfer(address(0), msg.sender, totalSupply - icoSupply);\n    }\n\n    // unlock transfers for everyone\n    function unlock() external onlyOwner returns (bool success)\n    {\n        require (isLocked == true, \"It is unlocked already!\"); //you can unlock only once\n        isLocked = false;\n        return true;\n    }\n\n    /**\n    * Get the token balance for account\n    *\n    * Get token balance of `_owner` account\n    *\n    * @param _owner The address of the owner\n    */\n    function balanceOf(address _owner)\n    external view\n    returns(uint256 balance) {\n        return _balanceOf[_owner];\n    }\n\n    /**\n    * Internal transfer, only can be called by this contract\n    */\n    function _transfer(address _from, address _to, uint256 _value)\n    internal {\n        // check that contract is unlocked\n        require (isLocked == false || _from == owner, \"Contract is locked!\");\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != address(0), \"Can`t send to 0x0, use burn()\");\n        // Check if the sender has enough\n        require(_balanceOf[_from] >= _value, \"Not enough balance!\");\n        // Subtract from the sender\n        _balanceOf[_from] = _balanceOf[_from].sub(_value);\n        // Add the same to the recipient\n        _balanceOf[_to] = _balanceOf[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n    }\n\n    /**\n    * Transfer tokens\n    *\n    * Send `_value` tokens to `_to` from your account\n    *\n    * @param _to The address of the recipient\n    * @param _value the amount to send\n    */\n    function transfer(address _to, uint256 _value)\n    external\n    returns(bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * Transfer tokens from other address\n    *\n    * Send `_value` tokens to `_to` on behalf of `_from`\n    *\n    * @param _from The address of the sender\n    * @param _to The address of the recipient\n    * @param _value the amount to send\n    */\n    function transferFrom(address _from, address _to, uint256 _value)\n    external\n    returns(bool success) {\n        // Check allowance\n        require(_value <= _allowance[_from][msg.sender], \"Not enough allowance!\");\n        // Check balance\n        require(_value <= _balanceOf[_from], \"Not enough balance!\");\n        _allowance[_from][msg.sender] = _allowance[_from][msg.sender].sub(_value);\n        _transfer(_from, _to, _value);\n        emit Approval(_from, _to, _allowance[_from][_to]);\n        return true;\n    }\n\n    /**\n    * Set allowance for other address\n    *\n    * Allows `_spender` to spend no more than `_value` tokens on your behalf\n    *\n    * @param _spender The address authorized to spend\n    * @param _value the max amount they can spend\n    */\n    function approve(address _spender, uint256 _value)\n    public\n    returns(bool success) {\n        _allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * Set allowance for other address and notify\n    *\n    * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n    *\n    * @param _spender The address authorized to spend\n    * @param _value the max amount they can spend\n    * @param _extraData some extra information to send to the approved contract\n    */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n    external\n    returns(bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(address _owner, address _spender)\n    external view\n    returns(uint256 value) {\n        return _allowance[_owner][_spender];\n    }\n\n    /**\n    * Destroy tokens\n    *\n    * Remove `_value` tokens from the system irreversibly\n    *\n    * @param _value the amount of money to burn\n    */\n    function burn(uint256 _value)\n    external\n    returns(bool success) {\n        _burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n    * Destroy tokens from other account\n    *\n    * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n    *\n    * @param _from the address of the sender\n    * @param _value the amount of money to burn\n    */\n    function burnFrom(address _from, uint256 _value)\n    external\n    returns(bool success) {\n         // Check allowance\n        require(_value <= _allowance[_from][msg.sender], \"Not enough allowance!\");\n        // Is tehere enough coins on account\n        require(_value <= _balanceOf[_from], \"Insuffient balance!\");\n        // Subtract from the sender's allowance\n        _allowance[_from][msg.sender] = _allowance[_from][msg.sender].sub(_value);\n        _burn(_from, _value);\n        emit Approval(_from, msg.sender, _allowance[_from][msg.sender]);\n        return true;\n    }\n\n    function _burn(address _from, uint256 _value)\n    internal {\n        // Check if the targeted balance is enough\n        require(_balanceOf[_from] >= _value, \"Insuffient balance!\");\n        // Subtract from the sender\n        _balanceOf[_from] = _balanceOf[_from].sub(_value);\n        // Updates totalSupply\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(msg.sender, _value);\n        emit Transfer(_from, address(0), _value);\n    }\n\n    // ------------------------------------------------------------------------\n    // Don't accept accidental ETH\n    // ------------------------------------------------------------------------\n    function () external payable {\n        revert(\"This contract is not accepting ETH.\");\n    }\n\n    //Owner can take ETH from contract\n    function withdraw(uint256 _amount)\n    external onlyOwner\n    returns (bool){\n        require(_amount <= address(this).balance, \"Not enough balance!\");\n        owner.transfer(_amount);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint256 _value)\n    external onlyOwner\n    returns(bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, _value);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_supply\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526001600860006101000a81548160ff02191690831515021790555060006009553480156200003157600080fd5b5060405162003ded38038062003ded8339810180604052810190808051820192919060200180518201929190602001805190602001909291908051906020019092919050505060008214151515620000f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f537570706c79207265717569726564210000000000000000000000000000000081525060200191505060405180910390fd5b33600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600190805190602001906200014a92919062001881565b5082600090805190602001906200016392919062001881565b5080600260006101000a81548160ff021916908360ff1602179055506200019862000296640100000000026401000000009004565b620001d0600260009054906101000a900460ff1660ff16600a0a836200170864010000000002620023d2179091906401000000009004565b60038190555060095460035403600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600954600354036040518082815260200191505060405180910390a35050505062001930565b620002c8735cd4c4f9eb8f323d64873c55b8da45f915a8256f620323b6620017bc640100000000026401000000009004565b620002fa73937f403b2f5cd0c17bee8ef5db1ecb2e3c7933436201fdc4620017bc640100000000026401000000009004565b6200032c737503033e1b7af4c1bc5dd16b45b88ac08af256f96201d5ec620017bc640100000000026401000000009004565b6200035e7306010e8bc01446abf39190f305b3740be442ad8862018894620017bc640100000000026401000000009004565b6200038f7351db593c4acc25b527c251e4fac40c1d0c37559d61a604620017bc640100000000026401000000009004565b620003c073d11c70764b03fd23e451574a824af2104bec5908619c40620017bc640100000000026401000000009004565b620003f1730c1610251b1ac4180981d09bc795784bef44115d619c02620017bc640100000000026401000000009004565b620004227391679f8ab88a243f6f4387407fd11d75131cf3d46188b8620017bc640100000000026401000000009004565b62000453731ac43dec17b267d502cc257e5ab545af6228ba946154f6620017bc640100000000026401000000009004565b62000484737fc6cc49a4dd2c56dbd062141b5d2e3563e4b873614e20620017bc640100000000026401000000009004565b620004b573f19051ad24b50c14c612515ffbd68f06097d014c614dc5620017bc640100000000026401000000009004565b620004e6733b6e06351c1e1bd62ffdc47c4ada2fd18a819482614d9c620017bc640100000000026401000000009004565b620005177320a2018cdc1d9a4f474c268b6c20670c597487b2613f29620017bc640100000000026401000000009004565b62000548732fecdeedf64c49563e90e926c7f2323df1ba09d2613a98620017bc640100000000026401000000009004565b6200057973c9b8f7c277551da2759c2f655ab8429564ba6a766130d4620017bc640100000000026401000000009004565b620005aa731f2245636d7cea33f73e4caa7935481122af31b9612ee0620017bc640100000000026401000000009004565b620005db73bb9cda8148153103cbe8ee0227a8c7a84666aa13612b75620017bc640100000000026401000000009004565b6200060c7343e4d827e518dd960498bd105e9e76971e5965fc612904620017bc640100000000026401000000009004565b6200063d73588749e9395a1ee6a8c9a6fb182ebdd2796b9f0f61281c620017bc640100000000026401000000009004565b6200066e737e35aa166a8c78b49e61ab280f39915d9bb51c40612710620017bc640100000000026401000000009004565b6200069f73a2aff7b4ac8df3fb1a789396267e0fe55b7d87836121ae620017bc640100000000026401000000009004565b620006d0737bee818d0fd6b9f3a104e38036cc4e872517e789611ea0620017bc640100000000026401000000009004565b62000701730d2cca65be1f274e69224c57790731ffc3d6b767611b58620017bc640100000000026401000000009004565b62000732732fe29a9c8ae4c676af671270caed159bcf2a153b611ac6620017bc640100000000026401000000009004565b62000763737c5c27274f1cd86849e7ddd47191e4c3cd1fe273611900620017bc640100000000026401000000009004565b6200079473cee7bf213816c93e8c5d87a3cc6c21df38d120a261157c620017bc640100000000026401000000009004565b620007c5736c5e4c05ad042880053a183a9aa204212f09eb6561157c620017bc640100000000026401000000009004565b620007f673a29ecf7b205928bd4d9dedeba24ddebcfe8cb8af61157c620017bc640100000000026401000000009004565b620008277342dfe28873c01a8d128eaaefc3bde9fecf22647a61157c620017bc640100000000026401000000009004565b6200085873f78d102a7f3048b5d5927dca76601d943526f37b6112c0620017bc640100000000026401000000009004565b6200088973d4e30d7b48287a72bc99c5abe5ab8dde8b608802611194620017bc640100000000026401000000009004565b620008ba73edaa7f020467e77249f9d08d81c50c4e33eb063d611194620017bc640100000000026401000000009004565b620008eb733f2a9614f217acf05a8d6f144aee5c1fad564c3d611194620017bc640100000000026401000000009004565b6200091c738a170a75845e5f39db826470a9f28c6a331bf2b6610fa0620017bc640100000000026401000000009004565b6200094d73fb3018f1366219ed3fe8ce1b844860f9c4fac5e7610fa0620017bc640100000000026401000000009004565b6200097e7347a85250507eb1b892ad310f78d40d170d24fed1610fa0620017bc640100000000026401000000009004565b620009af7322eeb1c4265f7f7cfeb1e19af7f32ec361a4710e610fa0620017bc640100000000026401000000009004565b620009e0736384f2d17a855435e7517c29d302690dc02421c2610e74620017bc640100000000026401000000009004565b62000a117393e7a5b9fa8e34f58ee8d4b4562b627c04ead99b610dac620017bc640100000000026401000000009004565b62000a4273e714e0ccfce4d0244f7431b43080c685d1504bd0610dac620017bc640100000000026401000000009004565b62000a737327ef607c8f1b71af3df913c104ed73ed66624871610cee620017bc640100000000026401000000009004565b62000aa473d5b82b5bcea28a2740b8da56a345238fb212b623610c80620017bc640100000000026401000000009004565b62000ad573aa2dc38e8bd38c0faaa735b4c0d4a899059f5a0d610c35620017bc640100000000026401000000009004565b62000b067340b95671c37116bf41f0d2e68bd93ad10d25502e610bef620017bc640100000000026401000000009004565b62000b3773ce14cf3bb404edc02db6ba2d8178b200a3031aea610bc2620017bc640100000000026401000000009004565b62000b687374b04a0198b68722ca630d041e60303b655bd6a8610bb8620017bc640100000000026401000000009004565b62000b99735ca403bb07e4e792400d165fd716d939c35ab49b610bb8620017bc640100000000026401000000009004565b62000bca736ea366425fa4b6cf070472aca6991e0731de9a0d610bb8620017bc640100000000026401000000009004565b62000bfb733ee6ba8e7b299443cc23eff3b8426a33ad6a2121610bb8620017bc640100000000026401000000009004565b62000c2c73dfcee0e4e371e02d7744e9eca3fa6269e116b1c961197c620017bc640100000000026401000000009004565b62000c5d7342a44787fad2c644201b6c753dbae2d990dfb47c610bb8620017bc640100000000026401000000009004565b62000c8e73b5f1090997630a5e233467538c40c0e2e259a916610a46620017bc640100000000026401000000009004565b62000cbf731accce2f80a3660e672da9f24e384d6143af0c03610a19620017bc640100000000026401000000009004565b62000cf073a32df0f819e017b3ca2d43c67e4368edc844a8046109f9620017bc640100000000026401000000009004565b62000d21737dd71b315f12de87c1f136a179db8cc144b582956109c4620017bc640100000000026401000000009004565b62000d5273822e1a575cc4ce8d17d29ca07c082929a6b8a3bb6109c4620017bc640100000000026401000000009004565b62000d83731915f337099ce25ee6ed818b53ff1f7623e3123f610924620017bc640100000000026401000000009004565b62000db4736dae092fa57d05681e919563f4ee63f2f7f1d2016107d0620017bc640100000000026401000000009004565b62000de573c3923d820881b1f189123008749427a481e983ca6107d0620017bc640100000000026401000000009004565b62000e16733f47469982de2348e44c9b56db275e26e9259f4d61076c620017bc640100000000026401000000009004565b62000e4773f6a657925812fad72a6fb51f0fbb5328d9bf8f31610672620017bc640100000000026401000000009004565b62000e78736a8058555c57bc1c59dce48202dad700faa17d26610640620017bc640100000000026401000000009004565b62000ea973f4d4c9e869604715039cbd3027aec95d083f9265610640620017bc640100000000026401000000009004565b62000eda735f6520231c1ad754c574b01f34a36619c5ca2a026105dc620017bc640100000000026401000000009004565b62000f0b73a81ea58d0377aac22c78ca61c631b7b0bff2029f6105dc620017bc640100000000026401000000009004565b62000f3c7343396e7df304adefedff3cb3bee3df55d17649286105dc620017bc640100000000026401000000009004565b62000f6d73ccfdaa5c4e355075d1628dfaf4030a397ef0e91e6105dc620017bc640100000000026401000000009004565b62000f9e737e40cb0937bdf37be20f68e8d759ffd1138968ec61073d620017bc640100000000026401000000009004565b62000fcf730b8fea04316355de3f912fc5f7aa2a32235e8986610514620017bc640100000000026401000000009004565b62001000730f57d11a21fe457bd59bbaf8848410cc38003eef6104b0620017bc640100000000026401000000009004565b6200103173ff3850d80a748202fb36ef680486d64ddaa493e9610443620017bc640100000000026401000000009004565b62001062738d54f232df1fb84781286ccffb0671d436b21dff610416620017bc640100000000026401000000009004565b62001093738966636fe61e876fc6499a6b819d56af4043308361040f620017bc640100000000026401000000009004565b620010c4738b25a8f699f314ef3011122ad1d0b102e326367f6103ee620017bc640100000000026401000000009004565b620010f57332abe252ea2ce4e949738495ed51f911f835fd536103e8620017bc640100000000026401000000009004565b620011267367eb2a1cc74cc366dde5ae88a5e4f82ef1a13b496103e8620017bc640100000000026401000000009004565b6200115773680c150689d6b981d382206a39fb44301b62f8376103e8620017bc640100000000026401000000009004565b620011887370d7c067c206f1e42178604678ff2c0c9fd58e666103e8620017bc640100000000026401000000009004565b620011b97365cc14dc596073750a566205370239e8e20268e46103e8620017bc640100000000026401000000009004565b620011ea73887995731f3fd390b7eeb6aeb978900af410d48b610320620017bc640100000000026401000000009004565b6200121b735f3861ffc2e75d00ba5c19728590986f3ff488086102f8620017bc640100000000026401000000009004565b6200124c739b6ac30f4694d86d430ecdb2cd16f3e6e414cbb2610280620017bc640100000000026401000000009004565b6200127d739d35e4411272df158a8634a2f529ded0ff541973610251620017bc640100000000026401000000009004565b620012ae7327b48344ed0b7aaef62e1e679035f94a25df24426101fc620017bc640100000000026401000000009004565b620012df73351313f49476ed58214d07bb87162527be34978e6101f4620017bc640100000000026401000000009004565b6200131073d96b785ba950ccf4d336fbdc69c2a82fb6c485b46101f4620017bc640100000000026401000000009004565b62001341737eb37ddd2b4ed95be445a1bcbf33b458e0e0103d610190620017bc640100000000026401000000009004565b6200137273ca83fbde3197c93d4754bf23fe2f5c745a4dcaa061015e620017bc640100000000026401000000009004565b620013a373d162bdb296b99527d137323bedf80a0899476a3b610159620017bc640100000000026401000000009004565b620013d47393773a596dfb4e0641dc626306c903a0552e05e7610154620017bc640100000000026401000000009004565b620014057361014d61b734162745e0b9770be56f2d21460ce661012c620017bc640100000000026401000000009004565b62001436730b48aeba0e8ab53820c6cc25249bb0c6a09f3e2c61012c620017bc640100000000026401000000009004565b6200146673e24526f12ea980c237d25f5aefc2fe3aa5fc70cd60fa620017bc640100000000026401000000009004565b620014967334fcb220facd2746433a312d113737fcc4b32b1160c4620017bc640100000000026401000000009004565b620014c6737037c3521616ca33f3362cc4a8ef29dc172cc3926096620017bc640100000000026401000000009004565b620014f673f0d9c8b7b1c94b67d90131eb5444ff4d9fe98ead6096620017bc640100000000026401000000009004565b620015267365ba8baa1857578606f5f69e975c658dae26ede56064620017bc640100000000026401000000009004565b6200155673b19cb24d619608efe8a127756ac030d56586fc846064620017bc640100000000026401000000009004565b620015867318fa81c761bf09e86cdcb0d01c18d7f8cedbecc36064620017bc640100000000026401000000009004565b620015b6737a666d30379576cc4659b5440ef787c652eed11b6064620017bc640100000000026401000000009004565b620015e6731b0ccb9b9d74d83f1a51656e1f20b0947bd5927d6064620017bc640100000000026401000000009004565b6200161673a29cd944f7ba653d35ce627961246a87ffdb11566064620017bc640100000000026401000000009004565b6200164673a88677bed9de38c818afcc2c7fad60d473a235426064620017bc640100000000026401000000009004565b6200167673c5ffeb68fb7d13ffdff2f363ae560df0ce392a986032620017bc640100000000026401000000009004565b620016a673c7efe07b332b580eba18de013528de604e363b646026620017bc640100000000026401000000009004565b620016d673fcc9acc9fc667ad2e7d7bceda58bbacea9cb721a6014620017bc640100000000026401000000009004565b62001706739cdebff1f20f6b7828aeab3710d6cae61cb48cd46005620017bc640100000000026401000000009004565b565b600080831480620017195750600082145b15620017295760009050620017b6565b81830290508183828115156200173b57fe5b04141515620017b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4d756c206f766572666c6f77210000000000000000000000000000000000000081525060200191505060405180910390fd5b8090505b92915050565b6000600260009054906101000a900460ff1660ff16600a0a8202905080600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a380600960008282540192505081905550505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620018c457805160ff1916838001178555620018f5565b82800160010185558215620018f5579182015b82811115620018f4578251825591602001919060010190620018d7565b5b50905062001904919062001908565b5090565b6200192d91905b80821115620019295760008160009055506001016200190f565b5090565b90565b6124ad80620019406000396000f300608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101a6578063095ea7b31461023657806318160ddd1461029b57806323b872dd146102c65780632e1a7d4d1461034b578063313ce5671461039057806342966c68146103c157806370a082311461040657806379ba50971461045d57806379cc6790146104745780638da5cb5b146104d957806395d89b4114610530578063a4e2d634146105c0578063a69df4b5146105ef578063a9059cbb1461061e578063cae9ca5114610683578063d4ee1d9014610700578063dc39d06d14610757578063dd62ed3e146107bc578063f2fde38b14610833575b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f5468697320636f6e7472616374206973206e6f7420616363657074696e67204581526020017f54482e000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b3480156101b257600080fd5b506101bb610876565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101fb5780820151818401526020810190506101e0565b50505050905090810190601f1680156102285780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024257600080fd5b50610281600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610914565b604051808215151515815260200191505060405180910390f35b3480156102a757600080fd5b506102b0610a06565b6040518082815260200191505060405180910390f35b3480156102d257600080fd5b50610331600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a0c565b604051808215151515815260200191505060405180910390f35b34801561035757600080fd5b5061037660048036038101908080359060200190929190505050610dbf565b604051808215151515815260200191505060405180910390f35b34801561039c57600080fd5b506103a5610f87565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103cd57600080fd5b506103ec60048036038101908080359060200190929190505050610f9a565b604051808215151515815260200191505060405180910390f35b34801561041257600080fd5b50610447600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610faf565b6040518082815260200191505060405180910390f35b34801561046957600080fd5b50610472610ff8565b005b34801561048057600080fd5b506104bf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611202565b604051808215151515815260200191505060405180910390f35b3480156104e557600080fd5b506104ee6115b3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561053c57600080fd5b506105456115d9565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561058557808201518184015260208101905061056a565b50505050905090810190601f1680156105b25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105cc57600080fd5b506105d5611677565b604051808215151515815260200191505060405180910390f35b3480156105fb57600080fd5b5061060461168a565b604051808215151515815260200191505060405180910390f35b34801561062a57600080fd5b50610669600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506117fe565b604051808215151515815260200191505060405180910390f35b34801561068f57600080fd5b506106e6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001919091929391929390505050611815565b604051808215151515815260200191505060405180910390f35b34801561070c57600080fd5b5061071561194e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561076357600080fd5b506107a2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611974565b604051808215151515815260200191505060405180910390f35b3480156107c857600080fd5b5061081d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b43565b6040518082815260200191505060405180910390f35b34801561083f57600080fd5b50610874600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bca565b005b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561090c5780601f106108e15761010080835404028352916020019161090c565b820191906000526020600020905b8154815290600101906020018083116108ef57829003601f168201915b505050505081565b600081600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60035481565b6000600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610b02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4e6f7420656e6f75676820616c6c6f77616e636521000000000000000000000081525060200191505060405180910390fd5b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610bb9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4e6f7420656e6f7567682062616c616e6365210000000000000000000000000081525060200191505060405180910390fd5b610c4882600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cd390919063ffffffff16565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cd3848484611d58565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600190509392505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e86576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f4f6e6c79204f776e65722063616e20646f20746861742100000000000000000081525060200191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16318211151515610f15576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4e6f7420656e6f7567682062616c616e6365210000000000000000000000000081525060200191505060405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610f7d573d6000803e3d6000fd5b5060019050919050565b600260009054906101000a900460ff1681565b6000610fa6338361212b565b60019050919050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f596f7520617265206e6f74206e6577204f776e6572210000000000000000000081525060200191505060405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156112f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4e6f7420656e6f75676820616c6c6f77616e636521000000000000000000000081525060200191505060405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156113af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f496e7375666669656e742062616c616e6365210000000000000000000000000081525060200191505060405180910390fd5b61143e82600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cd390919063ffffffff16565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506114c8838361212b565b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561166f5780601f106116445761010080835404028352916020019161166f565b820191906000526020600020905b81548152906001019060200180831161165257829003601f168201915b505050505081565b600860009054906101000a900460ff1681565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611751576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f4f6e6c79204f776e65722063616e20646f20746861742100000000000000000081525060200191505060405180910390fd5b60011515600860009054906101000a900460ff1615151415156117dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f497420697320756e6c6f636b656420616c72656164792100000000000000000081525060200191505060405180910390fd5b6000600860006101000a81548160ff0219169083151502179055506001905090565b600061180b338484611d58565b6001905092915050565b6000808590506118258686610914565b15611944578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb133873088886040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825284848281815260200192508082843782019150509650505050505050600060405180830381600087803b15801561192357600080fd5b505af1158015611937573d6000803e3d6000fd5b5050505060019150611945565b5b50949350505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a3b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f4f6e6c79204f776e65722063616e20646f20746861742100000000000000000081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611b0057600080fd5b505af1158015611b14573d6000803e3d6000fd5b505050506040513d6020811015611b2a57600080fd5b8101908080519060200190929190505050905092915050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c8f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f4f6e6c79204f776e65722063616e20646f20746861742100000000000000000081525060200191505060405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000828211151515611d4d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f537562206f766572666c6f77210000000000000000000000000000000000000081525060200191505060405180910390fd5b818303905092915050565b60001515600860009054906101000a900460ff1615151480611dc75750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b1515611e3b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f436f6e7472616374206973206c6f636b6564210000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611ee0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f43616e60742073656e6420746f203078302c20757365206275726e282900000081525060200191505060405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611f97576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4e6f7420656e6f7567682062616c616e6365210000000000000000000000000081525060200191505060405180910390fd5b611fe981600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cd390919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061207e81600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461234a90919063ffffffff16565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156121e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f496e7375666669656e742062616c616e6365210000000000000000000000000081525060200191505060405180910390fd5b61223481600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cd390919063ffffffff16565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061228c81600354611cd390919063ffffffff16565b6003819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600081830190508281101515156123c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f416464206f766572666c6f77210000000000000000000000000000000000000081525060200191505060405180910390fd5b80905092915050565b6000808314806123e25750600082145b156123f0576000905061247b565b818302905081838281151561240157fe5b04141515612477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4d756c206f766572666c6f77210000000000000000000000000000000000000081525060200191505060405180910390fd5b8090505b929150505600a165627a7a72305820bd1429742490fd9003f3bd6d27f01e005a889b3d08a7fc0a81254a42c4a997540029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000003414c430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b416c696761746f436f696e000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000003414c430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b416c696761746f436f696e000000000000000000000000000000000000000000"
}