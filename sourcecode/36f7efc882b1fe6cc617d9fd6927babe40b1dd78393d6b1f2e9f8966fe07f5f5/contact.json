{
  "address": "0xb4c55b5a1faf5323e59842171c2492773a3783dd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BCDCToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "0",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-19\n*/\n\npragma solidity ^0.4.11;\n\n// accepted from zeppelin-solidity https://github.com/OpenZeppelin/zeppelin-solidity\n/*\n * ERC20 interface\n * see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n  uint public totalSupply;\n  function balanceOf(address who) constant returns (uint);\n  function allowance(address owner, address spender) constant returns (uint);\n\n  function transfer(address to, uint value) returns (bool ok);\n  function transferFrom(address from, address to, uint value) returns (bool ok);\n  function approve(address spender, uint value) returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n// accepted from zeppelin-solidity https://github.com/OpenZeppelin/zeppelin-solidity\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n  function safeMul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint a, uint b) internal returns (uint) {\n    assert(b > 0);\n    uint c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\n\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\n/// @author Stefan George - <[emailÂ protected]>\ncontract MultiSigWallet {\n\n    // flag to determine if address is for a real contract or not\n    bool public isMultiSigWallet = false;\n\n    uint constant public MAX_OWNER_COUNT = 50;\n\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Revocation(address indexed sender, uint indexed transactionId);\n    event Submission(uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event Deposit(address indexed sender, uint value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint required);\n\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] public owners;\n    uint public required;\n    uint public transactionCount;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n\n    modifier onlyWallet() {\n        if (msg.sender != address(this)) throw;\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        if (isOwner[owner]) throw;\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        if (!isOwner[owner]) throw;\n        _;\n    }\n\n    modifier transactionExists(uint transactionId) {\n        if (transactions[transactionId].destination == 0) throw;\n        _;\n    }\n\n    modifier confirmed(uint transactionId, address owner) {\n        if (!confirmations[transactionId][owner]) throw;\n        _;\n    }\n\n    modifier notConfirmed(uint transactionId, address owner) {\n        if (confirmations[transactionId][owner]) throw;\n        _;\n    }\n\n    modifier notExecuted(uint transactionId) {\n        if (transactions[transactionId].executed) throw;\n        _;\n    }\n\n    modifier notNull(address _address) {\n        if (_address == 0) throw;\n        _;\n    }\n\n    modifier validRequirement(uint ownerCount, uint _required) {\n        if (ownerCount > MAX_OWNER_COUNT) throw;\n        if (_required > ownerCount) throw;\n        if (_required == 0) throw;\n        if (ownerCount == 0) throw;\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function()\n        payable\n    {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    /*\n     * Public functions\n     */\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function MultiSigWallet(address[] _owners, uint _required)\n        public\n        validRequirement(_owners.length, _required)\n    {\n        for (uint i=0; i<_owners.length; i++) {\n            if (isOwner[_owners[i]] || _owners[i] == 0) throw;\n            isOwner[_owners[i]] = true;\n        }\n        isMultiSigWallet = true;\n        owners = _owners;\n        required = _required;\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param owner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyWallet\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        OwnerRemoval(owner);\n        OwnerAddition(newOwner);\n    }\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        RequirementChange(_required);\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes data)\n        public\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n    }\n\n    /*\n     * Internal functions\n     */\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n       internal\n       notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction tx = transactions[transactionId];\n            tx.executed = true;\n            if (tx.destination.call.value(tx.value)(tx.data))\n                Execution(transactionId);\n            else {\n                ExecutionFailure(transactionId);\n                tx.executed = false;\n            }\n        }\n    }\n\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes data)\n        internal\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        Submission(transactionId);\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n    }\n\n    /// @dev Returns total number of transactions after filers are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<transactionCount; i++)\n            if ((pending && !transactions[i].executed) ||\n                (executed && transactions[i].executed))\n                count += 1;\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        constant\n        returns (address[])\n    {\n        return owners;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n        public\n        constant\n        returns (address[] _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        _confirmations = new address[](count);\n        for (i=0; i<count; i++)\n            _confirmations[i] = confirmationsTemp[i];\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n        public\n        constant\n        returns (uint[] _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i=0; i<transactionCount; i++)\n          if ((pending && !transactions[i].executed) ||\n              (executed && transactions[i].executed))\n            {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        _transactionIds = new uint[](to - from);\n        for (i=from; i<to; i++)\n            _transactionIds[i - from] = transactionIdsTemp[i];\n    }\n}\n\ncontract UpgradeAgent is SafeMath {\n  address public owner;\n  bool public isUpgradeAgent;\n  function upgradeFrom(address _from, uint256 _value) public;\n  function setOriginalSupply() public;\n}\n\n// @title BCDC Token vault, locked tokens for 1 month (Dev Team) and 1 year for Founders\ncontract BCDCVault is SafeMath {\n\n    // flag to determine if address is for a real contract or not\n    bool public isBCDCVault = false;\n\n    BCDCToken bcdcToken;\n\n    // address of our private MultiSigWallet contract\n    address bcdcMultisig;\n    // number of block unlock for developers\n    uint256 public unlockedBlockForDev;\n    // number of block unlock for founders\n    uint256 public unlockedBlockForFounders;\n    // It should be 1 * 30 days * 24 hours * 60 minutes * 60 seconds / 17\n    // We can set small for testing purpose\n    uint256 public numBlocksLockedDev;\n    // It should be 12 months * 30 days * 24 hours * 60 minutes * 60 seconds / 17\n    // We can set small for testing purpose\n    uint256 public numBlocksLockedFounders;\n\n    // flag to determine all the token for developers already unlocked or not\n    bool public unlockedAllTokensForDev = false;\n    // flag to determine all the token for founders already unlocked or not\n    bool public unlockedAllTokensForFounders = false;\n\n    // Constructor function sets the BCDC Multisig address and\n    // total number of locked tokens to transfer\n    function BCDCVault(address _bcdcMultisig,uint256 _numBlocksLockedForDev,uint256 _numBlocksLockedForFounders) {\n        // If it's not bcdcMultisig address then throw\n        if (_bcdcMultisig == 0x0) throw;\n        // Initalized bcdcToken\n        bcdcToken = BCDCToken(msg.sender);\n        // Initalized bcdcMultisig address\n        bcdcMultisig = _bcdcMultisig;\n        // Mark it as BCDCVault\n        isBCDCVault = true;\n        //Initalized numBlocksLockedDev and numBlocksLockedFounders with block number\n        numBlocksLockedDev = _numBlocksLockedForDev;\n        numBlocksLockedFounders = _numBlocksLockedForFounders;\n        // Initalized unlockedBlockForDev with block number\n        // according to current block\n        unlockedBlockForDev = safeAdd(block.number, numBlocksLockedDev); // 30 days of blocks later\n        // Initalized unlockedBlockForFounders with block number\n        // according to current block\n        unlockedBlockForFounders = safeAdd(block.number, numBlocksLockedFounders); // 365 days of blocks later\n    }\n\n    // Transfer Development Team Tokens To MultiSigWallet - 30 Days Locked\n    function unlockForDevelopment() external {\n        // If it has not reached 30 days mark do not transfer\n        if (block.number < unlockedBlockForDev) throw;\n        // If it is already unlocked then do not allowed\n        if (unlockedAllTokensForDev) throw;\n        // Mark it as unlocked\n        unlockedAllTokensForDev = true;\n        // Will fail if allocation (and therefore toTransfer) is 0.\n        uint256 totalBalance = bcdcToken.balanceOf(this);\n        // transfer half of token to development team\n        uint256 developmentTokens = safeDiv(safeMul(totalBalance, 50), 100);\n        if (!bcdcToken.transfer(bcdcMultisig, developmentTokens)) throw;\n    }\n\n    //  Transfer Founders Team Tokens To MultiSigWallet - 365 Days Locked\n    function unlockForFounders() external {\n        // If it has not reached 365 days mark do not transfer\n        if (block.number < unlockedBlockForFounders) throw;\n        // If it is already unlocked then do not allowed\n        if (unlockedAllTokensForFounders) throw;\n        // Mark it as unlocked\n        unlockedAllTokensForFounders = true;\n        // Will fail if allocation (and therefore toTransfer) is 0.\n        if (!bcdcToken.transfer(bcdcMultisig, bcdcToken.balanceOf(this))) throw;\n        // So that ether will not be trapped here.\n        if (!bcdcMultisig.send(this.balance)) throw;\n    }\n\n    // disallow payment after unlock block\n    function () payable {\n        if (block.number >= unlockedBlockForFounders) throw;\n    }\n\n}\n\n// @title BCDC Token Contract with Token Sale Functionality as well\ncontract BCDCToken is SafeMath, ERC20 {\n\n    // flag to determine if address is for a real contract or not\n    bool public isBCDCToken = false;\n    bool public upgradeAgentStatus = false;\n    // Address of Owner for this Contract\n    address public owner;\n\n    // Define the current state of crowdsale\n    enum State{PreFunding, Funding, Success, Failure}\n\n    // Token related information\n    string public constant name = \"BCDC Token\";\n    string public constant symbol = \"BCDC\";\n    uint256 public constant decimals = 18;  // decimal places\n\n    // Mapping of token balance and allowed address for each address with transfer limit\n    mapping (address => uint256) balances;\n    // This is only for refund purpose, as we have price range during different weeks of Crowdfunding,\n    //  need to maintain total investment done so refund would be exactly same.\n    mapping (address => uint256) investment;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    // Crowdsale information\n    bool public finalizedCrowdfunding = false;\n    // flag to determine is perallocation done or not\n    bool public preallocated = false;\n    uint256 public fundingStartBlock; // crowdsale start block\n    uint256 public fundingEndBlock; // crowdsale end block\n    // change price of token when current block reached\n\n    // Maximum Token Sale (Crowdsale + Early Sale + Supporters)\n    // Approximate 250 millions ITS + 125 millions for early investors + 75 Millions to Supports\n    uint256 public tokenSaleMax;\n    // Min tokens needs to be sold out for success\n    // Approximate 1/4 of 250 millions\n    uint256 public tokenSaleMin;\n    //1 Billion BCDC Tokens\n    uint256 public constant maxTokenSupply = 1000000000 ether;\n    // Team token percentages to store in time vault\n    uint256 public constant vaultPercentOfTotal = 5;\n    // Project Reserved Fund Token %\n    uint256 public constant reservedPercentTotal = 25;\n\n    // Multisig Wallet Address\n    address public bcdcMultisig;\n    // Project Reserve Fund address\n    address bcdcReserveFund;\n    // BCDC's time-locked vault\n    BCDCVault public timeVault;\n\n    // Events for refund process\n    event Refund(address indexed _from, uint256 _value);\n    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n    event UpgradeFinalized(address sender, address upgradeAgent);\n    event UpgradeAgentSet(address agent);\n    // BCDC:ETH exchange rate\n    uint256 tokensPerEther;\n\n    // @dev To Halt in Emergency Condition\n    bool public halted;\n\n    bool public finalizedUpgrade = false;\n    address public upgradeMaster;\n    UpgradeAgent public upgradeAgent;\n    uint256 public totalUpgraded;\n\n\n    // Constructor function sets following\n    // @param bcdcMultisig address of bcdcMultisigWallet\n    // @param fundingStartBlock block number at which funding will start\n    // @param fundingEndBlock block number at which funding will end\n    // @param tokenSaleMax maximum number of token to sale\n    // @param tokenSaleMin minimum number of token to sale\n    // @param tokensPerEther number of token to sale per ether\n    function BCDCToken(address _bcdcMultiSig,\n                      address _upgradeMaster,\n                      uint256 _fundingStartBlock,\n                      uint256 _fundingEndBlock,\n                      uint256 _tokenSaleMax,\n                      uint256 _tokenSaleMin,\n                      uint256 _tokensPerEther,\n                      uint256 _numBlocksLockedForDev,\n                      uint256 _numBlocksLockedForFounders) {\n        // Is not bcdcMultisig address correct then throw\n        if (_bcdcMultiSig == 0) throw;\n        // Is funding already started then throw\n        if (_upgradeMaster == 0) throw;\n\n        if (_fundingStartBlock <= block.number) throw;\n        // If fundingEndBlock or fundingStartBlock value is not correct then throw\n        if (_fundingEndBlock   <= _fundingStartBlock) throw;\n        // If tokenSaleMax or tokenSaleMin value is not correct then throw\n        if (_tokenSaleMax <= _tokenSaleMin) throw;\n        // If tokensPerEther value is 0 then throw\n        if (_tokensPerEther == 0) throw;\n        // Mark it is BCDCToken\n        isBCDCToken = true;\n        // Initalized all param\n        upgradeMaster = _upgradeMaster;\n        fundingStartBlock = _fundingStartBlock;\n        fundingEndBlock = _fundingEndBlock;\n        tokenSaleMax = _tokenSaleMax;\n        tokenSaleMin = _tokenSaleMin;\n        tokensPerEther = _tokensPerEther;\n        // Initalized timeVault as BCDCVault\n        timeVault = new BCDCVault(_bcdcMultiSig,_numBlocksLockedForDev,_numBlocksLockedForFounders);\n        // If timeVault is not BCDCVault then throw\n        if (!timeVault.isBCDCVault()) throw;\n        // Initalized bcdcMultisig address\n        bcdcMultisig = _bcdcMultiSig;\n        // Initalized owner\n        owner = msg.sender;\n        // MultiSigWallet is not bcdcMultisig then throw\n        if (!MultiSigWallet(bcdcMultisig).isMultiSigWallet()) throw;\n    }\n    // Ownership related modifer and functions\n    // @dev Throws if called by any account other than the owner\n    modifier onlyOwner() {\n      if (msg.sender != owner) {\n        throw;\n      }\n      _;\n    }\n\n    // @dev Allows the current owner to transfer control of the contract to a newOwner.\n    // @param newOwner The address to transfer ownership to.\n    function transferOwnership(address newOwner) onlyOwner {\n      if (newOwner != address(0)) {\n        owner = newOwner;\n      }\n    }\n\n    // @param _bcdcReserveFund Ether Address for Project Reserve Fund\n    // This has to be called before preAllocation\n    // Only to be called by Owner of this contract\n    function setBcdcReserveFund(address _bcdcReserveFund) onlyOwner{\n        if (getState() != State.PreFunding) throw;\n        if (preallocated) throw; // Has to be done before preallocation\n        if (_bcdcReserveFund == 0x0) throw;\n        bcdcReserveFund = _bcdcReserveFund;\n    }\n\n    // @param who The address of the investor to check balance\n    // @return balance tokens of investor address\n    function balanceOf(address who) constant returns (uint) {\n        return balances[who];\n    }\n\n    // @param who The address of the investor to check investment amount\n    // @return total investment done by ethereum address\n    // This method is only usable up to Crowdfunding ends (Success or Fail)\n    // So if tokens are transfered post crowdsale investment will not change.\n    function checkInvestment(address who) constant returns (uint) {\n        return investment[who];\n    }\n\n    // @param owner The address of the account owning tokens\n    // @param spender The address of the account able to transfer the tokens\n    // @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender) constant returns (uint) {\n        return allowed[owner][spender];\n    }\n\n    //  Transfer `value` BCDC tokens from sender's account\n    // `msg.sender` to provided account address `to`.\n    // @dev Required state: Success\n    // @param to The address of the recipient\n    // @param value The number of BCDC tokens to transfer\n    // @return Whether the transfer was successful or not\n    function transfer(address to, uint value) returns (bool ok) {\n        if (getState() != State.Success) throw; // Abort if crowdfunding was not a success.\n        uint256 senderBalance = balances[msg.sender];\n        if ( senderBalance >= value && value > 0) {\n            senderBalance = safeSub(senderBalance, value);\n            balances[msg.sender] = senderBalance;\n            balances[to] = safeAdd(balances[to], value);\n            Transfer(msg.sender, to, value);\n            return true;\n        }\n        return false;\n    }\n\n    //  Transfer `value` BCDC tokens from sender 'from'\n    // to provided account address `to`.\n    // @dev Required state: Success\n    // @param from The address of the sender\n    // @param to The address of the recipient\n    // @param value The number of BCDC to transfer\n    // @return Whether the transfer was successful or not\n    function transferFrom(address from, address to, uint value) returns (bool ok) {\n        if (getState() != State.Success) throw; // Abort if crowdfunding was not a success.\n        if (balances[from] >= value &&\n            allowed[from][msg.sender] >= value &&\n            value > 0)\n        {\n            balances[to] = safeAdd(balances[to], value);\n            balances[from] = safeSub(balances[from], value);\n            allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], value);\n            Transfer(from, to, value);\n            return true;\n        } else { return false; }\n    }\n\n    //  `msg.sender` approves `spender` to spend `value` tokens\n    // @param spender The address of the account able to transfer the tokens\n    // @param value The amount of wei to be approved for transfer\n    // @return Whether the approval was successful or not\n    function approve(address spender, uint value) returns (bool ok) {\n        if (getState() != State.Success) throw; // Abort if not in Success state.\n        allowed[msg.sender][spender] = value;\n        Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    // Sale of the tokens. Investors can call this method to invest into BCDC Tokens\n    // Only when it's in funding mode. In case of emergecy it will be halted.\n    function() payable stopIfHalted external {\n        // Allow only to invest in funding state\n        if (getState() != State.Funding) throw;\n\n        // Sorry !! We do not allow to invest with 0 as value\n        if (msg.value == 0) throw;\n\n        // multiply by exchange rate to get newly created token amount\n        uint256 createdTokens = safeMul(msg.value, tokensPerEther);\n\n        // Wait we crossed maximum token sale goal. It's successful token sale !!\n        if (safeAdd(createdTokens, totalSupply) > tokenSaleMax) throw;\n\n        // Call to Internal function to assign tokens\n        assignTokens(msg.sender, createdTokens);\n\n        // Track the investment for each address till crowdsale ends\n        investment[msg.sender] = safeAdd(investment[msg.sender], msg.value);\n    }\n\n    // To allocate tokens to Project Fund - eg. RecycleToCoin before Token Sale\n    // Tokens allocated to these will not be count in totalSupply till the Token Sale Success and Finalized in finalizeCrowdfunding()\n    function preAllocation() onlyOwner stopIfHalted external {\n        // Allow only in Pre Funding Mode\n        if (getState() != State.PreFunding) throw;\n        // Check if BCDC Reserve Fund is set or not\n        if (bcdcReserveFund == 0x0) throw;\n        // To prevent multiple call by mistake\n        if (preallocated) throw;\n        preallocated = true;\n        // 25% of overall Token Supply to project reseve fund\n        uint256 projectTokens = safeDiv(safeMul(maxTokenSupply, reservedPercentTotal), 100);\n        // At this time we will not add to totalSupply because these are not part of Sale\n        // It will be added in totalSupply once the Token Sale is Finalized\n        balances[bcdcReserveFund] = projectTokens;\n        // Log the event\n        Transfer(0, bcdcReserveFund, projectTokens);\n    }\n\n    // BCDC accepts Early Investment through manual process in Fiat Currency\n    // BCDC Team will assign the tokens to investors manually through this function\n    function earlyInvestment(address earlyInvestor, uint256 assignedTokens) onlyOwner stopIfHalted external {\n        // Allow only in Pre Funding Mode And Funding Mode\n        if (getState() != State.PreFunding && getState() != State.Funding) throw;\n        // Check if earlyInvestor address is set or not\n        if (earlyInvestor == 0x0) throw;\n        // By mistake tokens mentioned as 0, save the cost of assigning tokens.\n        if (assignedTokens == 0 ) throw;\n\n        // Call to Internal function to assign tokens\n        assignTokens(earlyInvestor, assignedTokens);\n\n        // Track the investment for each address\n        // Refund for this investor is taken care by out side the contract.because they are investing in their fiat currency\n        //investment[earlyInvestor] = safeAdd(investment[earlyInvestor], etherValue);\n    }\n\n    // Function will transfer the tokens to investor's address\n    // Common function code for Early Investor and Crowdsale Investor\n    function assignTokens(address investor, uint256 tokens) internal {\n        // Creating tokens and  increasing the totalSupply\n        totalSupply = safeAdd(totalSupply, tokens);\n\n        // Assign new tokens to the sender\n        balances[investor] = safeAdd(balances[investor], tokens);\n\n        // Finally token created for sender, log the creation event\n        Transfer(0, investor, tokens);\n    }\n\n    // Finalize crowdfunding\n    // Finally - Transfer the Ether to Multisig Wallet\n    function finalizeCrowdfunding() stopIfHalted external {\n        // Abort if not in Funding Success state.\n        if (getState() != State.Success) throw; // don't finalize unless we won\n        if (finalizedCrowdfunding) throw; // can't finalize twice (so sneaky!)\n\n        // prevent more creation of tokens\n        finalizedCrowdfunding = true;\n\n        // Check if Unsold tokens out 450 millions\n        // 250 Millions Sale + 125 Millions for Early Investors + 75 Millions for Supporters\n        uint256 unsoldTokens = safeSub(tokenSaleMax, totalSupply);\n\n        // Founders and Tech Team Tokens Goes to Vault, Locked for 1 month (Tech) and 1 year(Team)\n        uint256 vaultTokens = safeDiv(safeMul(maxTokenSupply, vaultPercentOfTotal), 100);\n        totalSupply = safeAdd(totalSupply, vaultTokens);\n        balances[timeVault] = safeAdd(balances[timeVault], vaultTokens);\n        Transfer(0, timeVault, vaultTokens);\n\n        // Only transact if there are any unsold tokens\n        if(unsoldTokens > 0) {\n            totalSupply = safeAdd(totalSupply, unsoldTokens);\n            // Remaining unsold tokens assign to multisig wallet\n            balances[bcdcMultisig] = safeAdd(balances[bcdcMultisig], unsoldTokens);// Assign Reward Tokens to Multisig wallet\n            Transfer(0, bcdcMultisig, unsoldTokens);\n        }\n\n        // Add pre allocated tokens to project reserve fund to totalSupply\n        uint256 preallocatedTokens = safeDiv(safeMul(maxTokenSupply, reservedPercentTotal), 100);\n        // project tokens already counted, so only add preallcated tokens\n        totalSupply = safeAdd(totalSupply, preallocatedTokens);\n        // 250 millions reward tokens to multisig (equal to reservefund prellocation).\n        // Reward to token holders on their commitment with BCDC (25 % of 1 billion = 250 millions)\n        uint256 rewardTokens = safeDiv(safeMul(maxTokenSupply, reservedPercentTotal), 100);\n        balances[bcdcMultisig] = safeAdd(balances[bcdcMultisig], rewardTokens);// Assign Reward Tokens to Multisig wallet\n        totalSupply = safeAdd(totalSupply, rewardTokens);\n\n        // Total Supply Should not be greater than 1 Billion\n        if (totalSupply > maxTokenSupply) throw;\n        // Transfer ETH to the BCDC Multisig address.\n        if (!bcdcMultisig.send(this.balance)) throw;\n    }\n\n    // Call this function to get the refund of investment done during Crowdsale\n    // Refund can be done only when Min Goal has not reached and Crowdsale is over\n    function refund() external {\n        // Abort if not in Funding Failure state.\n        if (getState() != State.Failure) throw;\n\n        uint256 bcdcValue = balances[msg.sender];\n        if (bcdcValue == 0) throw;\n        balances[msg.sender] = 0;\n        totalSupply = safeSub(totalSupply, bcdcValue);\n\n        uint256 ethValue = investment[msg.sender];\n        investment[msg.sender] = 0;\n        Refund(msg.sender, ethValue);\n        if (!msg.sender.send(ethValue)) throw;\n    }\n\n    // This will return the current state of Token Sale\n    // Read only method so no transaction fees\n    function getState() public constant returns (State){\n      if (block.number < fundingStartBlock) return State.PreFunding;\n      else if (block.number <= fundingEndBlock && totalSupply < tokenSaleMax) return State.Funding;\n      else if (totalSupply >= tokenSaleMin || upgradeAgentStatus) return State.Success;\n      else return State.Failure;\n    }\n\n    // Token upgrade functionality\n\n    /// @notice Upgrade tokens to the new token contract.\n    /// @dev Required state: Success\n    /// @param value The number of tokens to upgrade\n    function upgrade(uint256 value) external {\n        if (!upgradeAgentStatus) throw;\n        /*if (getState() != State.Success) throw; // Abort if not in Success state.*/\n        if (upgradeAgent.owner() == 0x0) throw; // need a real upgradeAgent address\n        if (finalizedUpgrade) throw; // cannot upgrade if finalized\n\n        // Validate input value.\n        if (value == 0) throw;\n        if (value > balances[msg.sender]) throw;\n\n        // update the balances here first before calling out (reentrancy)\n        balances[msg.sender] = safeSub(balances[msg.sender], value);\n        totalSupply = safeSub(totalSupply, value);\n        totalUpgraded = safeAdd(totalUpgraded, value);\n        upgradeAgent.upgradeFrom(msg.sender, value);\n        Upgrade(msg.sender, upgradeAgent, value);\n    }\n\n    /// @notice Set address of upgrade target contract and enable upgrade\n    /// process.\n    /// @dev Required state: Success\n    /// @param agent The address of the UpgradeAgent contract\n    function setUpgradeAgent(address agent) external {\n        if (getState() != State.Success) throw; // Abort if not in Success state.\n        if (agent == 0x0) throw; // don't set agent to nothing\n        if (msg.sender != upgradeMaster) throw; // Only a master can designate the next agent\n        upgradeAgent = UpgradeAgent(agent);\n        if (!upgradeAgent.isUpgradeAgent()) throw;\n        // this needs to be called in success condition to guarantee the invariant is true\n        upgradeAgentStatus = true;\n        upgradeAgent.setOriginalSupply();\n        UpgradeAgentSet(upgradeAgent);\n    }\n\n    /// @notice Set address of upgrade target contract and enable upgrade\n    /// process.\n    /// @dev Required state: Success\n    /// @param master The address that will manage upgrades, not the upgradeAgent contract address\n    function setUpgradeMaster(address master) external {\n        if (getState() != State.Success) throw; // Abort if not in Success state.\n        if (master == 0x0) throw;\n        if (msg.sender != upgradeMaster) throw; // Only a master can designate the next master\n        upgradeMaster = master;\n    }\n\n    // These modifier and functions related to halt the sale in case of emergency\n\n    // @dev Use this as function modifier that should not execute if contract state Halted\n    modifier stopIfHalted {\n      if(halted) throw;\n      _;\n    }\n\n    // @dev Use this as function modifier that should execute only if contract state Halted\n    modifier runIfHalted{\n      if(!halted) throw;\n      _;\n    }\n\n    // @dev called by only owner in case of any emergecy situation\n    function halt() external onlyOwner{\n      halted = true;\n    }\n\n    // @dev called by only owner to stop the emergency situation\n    function unhalt() external onlyOwner{\n      halted = false;\n    }\n\n    // This method is only use for transfer bcdctoken from bcdcReserveFund\n    // @dev Required state: is bcdcReserveFund set\n    // @param to The address of the recipient\n    // @param value The number of BCDC tokens to transfer\n    // @return Whether the transfer was successful or not\n    function reserveTokenClaim(address claimAddress,uint256 token) onlyBcdcReserve returns (bool ok){\n      // Check if BCDC Reserve Fund is set or not\n      if ( bcdcReserveFund == 0x0) throw;\n      uint256 senderBalance = balances[msg.sender];\n      if(senderBalance >= token && token>0){\n        senderBalance = safeSub(senderBalance, token);\n        balances[msg.sender] = senderBalance;\n        balances[claimAddress] = safeAdd(balances[claimAddress], token);\n        Transfer(msg.sender, claimAddress, token);\n        return true;\n      }\n      return false;\n    }\n\n    // This method is for getting bcdctoken as rewards\n\t  // @param tokens The number of tokens back for rewards\n  \tfunction backTokenForRewards(uint256 tokens) external{\n  \t\t// Check that token available for transfer\n  \t\tif(balances[msg.sender] < tokens && tokens <= 0) throw;\n\n  \t\t// Debit tokens from msg.sender\n  \t\tbalances[msg.sender] = safeSub(balances[msg.sender], tokens);\n\n  \t\t// Credit tokens into bcdcReserveFund\n  \t\tbalances[bcdcReserveFund] = safeAdd(balances[bcdcReserveFund], tokens);\n  \t\tTransfer(msg.sender, bcdcReserveFund, tokens);\n  \t}\n\n    // bcdcReserveFund related modifer and functions\n    // @dev Throws if called by any account other than the bcdcReserveFund owner\n    modifier onlyBcdcReserve() {\n      if (msg.sender != bcdcReserveFund) {\n        throw;\n      }\n      _;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultPercentOfTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgentStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeCrowdfunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preallocated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalizedUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bcdcMultisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"earlyInvestor\",\"type\":\"address\"},{\"name\":\"assignedTokens\",\"type\":\"uint256\"}],\"name\":\"earlyInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalizedCrowdfunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedPercentTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bcdcReserveFund\",\"type\":\"address\"}],\"name\":\"setBcdcReserveFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"backTokenForRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isBCDCToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"preAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setUpgradeAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"claimAddress\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"reserveTokenClaim\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"checkInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"master\",\"type\":\"address\"}],\"name\":\"setUpgradeMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bcdcMultiSig\",\"type\":\"address\"},{\"name\":\"_upgradeMaster\",\"type\":\"address\"},{\"name\":\"_fundingStartBlock\",\"type\":\"uint256\"},{\"name\":\"_fundingEndBlock\",\"type\":\"uint256\"},{\"name\":\"_tokenSaleMax\",\"type\":\"uint256\"},{\"name\":\"_tokenSaleMin\",\"type\":\"uint256\"},{\"name\":\"_tokensPerEther\",\"type\":\"uint256\"},{\"name\":\"_numBlocksLockedForDev\",\"type\":\"uint256\"},{\"name\":\"_numBlocksLockedForFounders\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"upgradeAgent\",\"type\":\"address\"}],\"name\":\"UpgradeFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000ec71c55893ee571d2eb8592f0b7b2816c115a4a20000000000000000000000005adc335afa4f6f97d5920996f0f0ff06ace3b998000000000000000000000000000000000000000000000000000000000046151d000000000000000000000000000000000000000000000000000000000046c21d000000000000000000000000000000000000000001743b34e18439b50200000000000000000000000000000000000000000000000001a784379d99db420000000000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000003c068000000000000000000000000000000000000000000000000000000000021197a"
}