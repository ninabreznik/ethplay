{
  "address": "0x31ead6a10b5215321afa8bef2f05aa271508fa6c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CustomToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-02\n*/\n\npragma solidity ^0.4.19;\n\ncontract BaseToken {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != 0x0);\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n        Transfer(_from, _to, _value);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n}\n\ncontract BurnToken is BaseToken {\n    event Burn(address indexed from, uint256 value);\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        totalSupply -= _value;\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(_value <= allowance[_from][msg.sender]);\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        totalSupply -= _value;\n        Burn(_from, _value);\n        return true;\n    }\n}\n\ncontract LockToken is BaseToken {\n    struct LockMeta {\n        uint256 amount;\n        uint256 endtime;\n    }\n    \n    mapping (address => LockMeta) public lockedAddresses;\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(balanceOf[_from] >= _value);\n        LockMeta storage meta = lockedAddresses[_from];\n        require(now >= meta.endtime || meta.amount <= balanceOf[_from] - _value);\n        super._transfer(_from, _to, _value);\n    }\n}\n\ncontract CustomToken is BaseToken, BurnToken, LockToken {\n    function CustomToken() public {\n        totalSupply = 520000000000000000000000000;\n        name = 'DragonCoin';\n        symbol = 'DC';\n        decimals = 18;\n        balanceOf[0x837b5cc69e11e89b5fdb266a3ff0a71ba37aa3a6] = totalSupply;\n        Transfer(address(0), 0x837b5cc69e11e89b5fdb266a3ff0a71ba37aa3a6, totalSupply);\n\n        lockedAddresses[0x3a6aeca5666d4af4161e48609f83e80f124170d9] = LockMeta({amount: 400000000000000000000000000, endtime: 1549000800});\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b6b01ae22487c1042af0800000060035560408051908101604052600a81527f447261676f6e436f696e00000000000000000000000000000000000000000000602082015260009080516100669291602001906101b0565b5060408051908101604052600281527f4443000000000000000000000000000000000000000000000000000000000000602082015260019080516100ae9291602001906101b0565b506002805460ff1916601217905560035473837b5cc69e11e89b5fdb266a3ff0a71ba37aa3a6600081815260046020527f6d4fd1891dbbf5eb882372517087f93f3badf316781313e2ecca1448b31201c183905590917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060405190815260200160405180910390a3604080519081016040526b014adf4b7320334b900000008152635c53e060602080830191909152733a6aeca5666d4af4161e48609f83e80f124170d9600052600690527fca64fbe1e0078b939f267bf2d3007a20e041af730085120f502adae5c303c5b88151815560208201516001909101555061024b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101f157805160ff191683800117855561021e565b8280016001018555821561021e579182015b8281111561021e578251825591602001919060010190610203565b5061022a92915061022e565b5090565b61024891905b8082111561022a5760008155600101610234565b90565b6108458061025a6000396000f3006060604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100be578063095ea7b31461014857806318160ddd1461017e57806323b872dd146101a3578063313ce567146101cb57806342966c68146101f457806370a082311461020a57806379cc67901461022957806395d89b411461024b578063a5bbd67a1461025e578063a9059cbb14610295578063dd62ed3e146102b7575b600080fd5b34156100c957600080fd5b6100d16102dc565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561010d5780820151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015357600080fd5b61016a600160a060020a036004351660243561037a565b604051901515815260200160405180910390f35b341561018957600080fd5b6101916103e6565b60405190815260200160405180910390f35b34156101ae57600080fd5b61016a600160a060020a03600435811690602435166044356103ec565b34156101d657600080fd5b6101de610463565b60405160ff909116815260200160405180910390f35b34156101ff57600080fd5b61016a60043561046c565b341561021557600080fd5b610191600160a060020a03600435166104f7565b341561023457600080fd5b61016a600160a060020a0360043516602435610509565b341561025657600080fd5b6100d16105e5565b341561026957600080fd5b61027d600160a060020a0360043516610650565b60405191825260208201526040908101905180910390f35b34156102a057600080fd5b61016a600160a060020a0360043516602435610669565b34156102c257600080fd5b610191600160a060020a036004358116906024351661067f565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103725780601f1061034757610100808354040283529160200191610372565b820191906000526020600020905b81548152906001019060200180831161035557829003601f168201915b505050505081565b600160a060020a03338116600081815260056020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60035481565b600160a060020a0380841660009081526005602090815260408083203390941683529290529081205482111561042157600080fd5b600160a060020a038085166000908152600560209081526040808320339094168352929052208054839003905561045984848461069c565b5060019392505050565b60025460ff1681565b600160a060020a0333166000908152600460205260408120548290101561049257600080fd5b600160a060020a03331660008181526004602052604090819020805485900390556003805485900390557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a2506001919050565b60046020526000908152604090205481565b600160a060020a0382166000908152600460205260408120548290101561052f57600080fd5b600160a060020a038084166000908152600560209081526040808320339094168352929052205482111561056257600080fd5b600160a060020a038084166000818152600460209081526040808320805488900390556005825280832033909516835293905282902080548590039055600380548590039055907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a250600192915050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103725780601f1061034757610100808354040283529160200191610372565b6006602052600090815260409020805460019091015482565b600061067633848461069c565b50600192915050565b600560209081526000928352604080842090915290825290205481565b600160a060020a038316600090815260046020526040812054829010156106c257600080fd5b50600160a060020a038316600090815260066020526040902060018101544210158061070c5750600160a060020a0384166000908152600460205260409020548154908390039011155b151561071757600080fd5b610722848484610728565b50505050565b6000600160a060020a038316151561073f57600080fd5b600160a060020a0384166000908152600460205260409020548290101561076557600080fd5b600160a060020a0383166000908152600460205260409020548281011161078b57600080fd5b50600160a060020a0382811660009081526004602052604080822080549387168352912080548481038255825485019283905590549201910181146107cc57fe5b82600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a3505050505600a165627a7a723058205d10526fc36b38f5e644dfdc7ab01b46964538c2d7b8fc7201f968e7ebb094ed0029"
}