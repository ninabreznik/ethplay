{
  "address": "0xf0f9f4d63b7dd586e6b07806b0f39cc9cd7e9490",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-07\n*/\n\npragma solidity 0.4.21;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\ncontract MintableAndPausableToken is PausableToken {\n    uint8 public constant decimals = 18;\n    bool public mintingFinished = false;\n    \n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n    event MintStarted();\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    modifier cannotMint() {\n        require(mintingFinished);\n        _;\n    }\n\n    function mint(address _to, uint256 _amount)\n        external\n        onlyOwner\n        canMint\n        whenNotPaused\n        returns (bool)\n    {\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    function finishMinting() external onlyOwner canMint returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n\n    function startMinting() external onlyOwner cannotMint returns (bool) {\n        mintingFinished = false;\n        emit MintStarted();\n        return true;\n    }\n}\n\n\n\n/**\n * Token upgrader interface inspired by Lunyr.\n *\n * Token upgrader transfers previous version tokens to a newer version.\n * Token upgrader itself can be the token contract, or just a middle man contract doing the heavy lifting.\n */\ncontract TokenUpgrader {\n    uint public originalSupply;\n\n    /** Interface marker */\n    function isTokenUpgrader() external pure returns (bool) {\n        return true;\n    }\n\n    function upgradeFrom(address _from, uint256 _value) public {}\n}\n\n\n/**\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n *\n * First envisioned by Golem and Lunyr projects.\n */\n\n\ncontract UpgradeableToken is MintableAndPausableToken {\n    // Contract or person who can set the upgrade path.\n    address public upgradeMaster;\n    \n    // Bollean value needs to be true to start upgrades\n    bool private upgradesAllowed;\n\n    // The next contract where the tokens will be migrated.\n    TokenUpgrader public tokenUpgrader;\n\n    // How many tokens we have upgraded by now.\n    uint public totalUpgraded;\n\n    /**\n    * Upgrade states.\n    * - NotAllowed: The child contract has not reached a condition where the upgrade can begin\n    * - Waiting: Token allows upgrade, but we don't have a new token version\n    * - ReadyToUpgrade: The token version is set, but not a single token has been upgraded yet\n    * - Upgrading: Token upgrader is set and the balance holders can upgrade their tokens\n    */\n    enum UpgradeState { NotAllowed, Waiting, ReadyToUpgrade, Upgrading }\n\n    // Somebody has upgraded some of his tokens.\n    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n\n    // New token version available.\n    event TokenUpgraderIsSet(address _newToken);\n\n    modifier onlyUpgradeMaster {\n        // Only a master can designate the next token\n        require(msg.sender == upgradeMaster);\n        _;\n    }\n\n    modifier notInUpgradingState {\n        // Upgrade has already begun for token\n        require(getUpgradeState() != UpgradeState.Upgrading);\n        _;\n    }\n\n    // Do not allow construction without upgrade master set.\n    function UpgradeableToken(address _upgradeMaster) public {\n        upgradeMaster = _upgradeMaster;\n    }\n\n    // set a token upgrader\n    function setTokenUpgrader(address _newToken)\n        external\n        onlyUpgradeMaster\n        notInUpgradingState\n    {\n        require(canUpgrade());\n        require(_newToken != address(0));\n\n        tokenUpgrader = TokenUpgrader(_newToken);\n\n        // Handle bad interface\n        require(tokenUpgrader.isTokenUpgrader());\n\n        // Make sure that token supplies match in source and target\n        require(tokenUpgrader.originalSupply() == totalSupply_);\n\n        emit TokenUpgraderIsSet(tokenUpgrader);\n    }\n\n    // Allow the token holder to upgrade some of their tokens to a new contract.\n    function upgrade(uint _value) external {\n        UpgradeState state = getUpgradeState();\n        \n        // Check upgrate state \n        require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n        // Validate input value\n        require(_value != 0);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n\n        // Take tokens out from circulation\n        totalSupply_ = totalSupply_.sub(_value);\n        totalUpgraded = totalUpgraded.add(_value);\n\n        // Token Upgrader reissues the tokens\n        tokenUpgrader.upgradeFrom(msg.sender, _value);\n        emit Upgrade(msg.sender, tokenUpgrader, _value);\n    }\n\n    /**\n    * Change the upgrade master.\n    * This allows us to set a new owner for the upgrade mechanism.\n    */\n    function setUpgradeMaster(address _newMaster) external onlyUpgradeMaster {\n        require(_newMaster != address(0));\n        upgradeMaster = _newMaster;\n    }\n\n    // To be overriden to add functionality\n    function allowUpgrades() external onlyUpgradeMaster () {\n        upgradesAllowed = true;\n    }\n\n    // To be overriden to add functionality\n    function rejectUpgrades() external onlyUpgradeMaster () {\n        require(!(totalUpgraded > 0));\n        upgradesAllowed = false;\n    }\n\n    // Get the state of the token upgrade.\n    function getUpgradeState() public view returns(UpgradeState) {\n        if (!canUpgrade()) return UpgradeState.NotAllowed;\n        else if (address(tokenUpgrader) == address(0)) return UpgradeState.Waiting;\n        else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n        else return UpgradeState.Upgrading;\n    }\n\n    // To be overriden to add functionality\n    function canUpgrade() public view returns(bool) {\n        return upgradesAllowed;\n    }\n}\n\n\ncontract Token is UpgradeableToken {\n    string public name = \"Ydentity\";\n    string public symbol = \"YDY\";\n    uint8 public constant decimals = 18;\n\n    // For patient incentive programs\n    uint256 public INITIAL_SUPPLY;\n\n    event UpdatedTokenInformation(string newName, string newSymbol);\n\n    function Token(address ydyWallet, address _upgradeMaster, uint256 _INITIAL_SUPPLY)\n        public\n        UpgradeableToken(_upgradeMaster)\n    {\n        INITIAL_SUPPLY = _INITIAL_SUPPLY * (10 ** uint256(decimals));\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[ydyWallet] = INITIAL_SUPPLY;\n        emit Transfer(address(0), ydyWallet, INITIAL_SUPPLY);\n    }\n\n    /**\n    * Owner can update token information here\n    */\n    function setTokenInformation(string _name, string _symbol) external onlyOwner {\n        name = _name;\n        symbol = _symbol;\n\n        emit UpdatedTokenInformation(name, symbol);\n    }\n\n}",
  "bytecode": "60606040526000600360146101000a81548160ff0219169083151502179055506000600360156101000a81548160ff0219169083151502179055506040805190810160405280600881526020017f5964656e74697479000000000000000000000000000000000000000000000000815250600790805190602001906200008792919062000264565b506040805190810160405280600381526020017f594459000000000000000000000000000000000000000000000000000000000081525060089080519060200190620000d592919062000264565b503415620000e257600080fd5b60405160608062002d3f833981016040528080519060200190919080519060200190919080519060200190919050508133600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050601260ff16600a0a81026009819055506009546001819055506009546000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6009546040518082815260200191505060405180910390a350505062000313565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002a757805160ff1916838001178555620002d8565b82800160010185558215620002d8579182015b82811115620002d7578251825591602001919060010190620002ba565b5b509050620002e79190620002eb565b5090565b6200031091905b808211156200030c576000816000905550600101620002f2565b5090565b90565b612a1c80620003236000396000f300606060405260043610610196576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063041e6b8b1461019b57806305d2035b146101b057806306fdde03146101dd578063095ea7b31461026b57806318160ddd146102c557806323b872dd146102ee5780632ff2e9dc14610367578063313ce567146103905780633f4ba83a146103bf57806340c10f19146103d457806345977d031461042e5780634dcf2917146104515780634eee966f146104665780635c975abb146104a8578063600440cb146104d5578063661884631461052a57806370a08231146105845780637d64bcb4146105d15780638444b391146105fe5780638456cb59146106355780638da5cb5b1461064a5780638e4adf4e1461069f57806395d89b41146106f45780639738968c146107825780639a65ea26146107af578063a9059cbb146107dc578063c752ff6214610836578063cd61cb3a1461085f578063d73dd62314610898578063dd62ed3e146108f2578063f2fde38b1461095e578063ffeb7d7514610997575b600080fd5b34156101a657600080fd5b6101ae6109d0565b005b34156101bb57600080fd5b6101c3610a5b565b604051808215151515815260200191505060405180910390f35b34156101e857600080fd5b6101f0610a6e565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610230578082015181840152602081019050610215565b50505050905090810190601f16801561025d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561027657600080fd5b6102ab600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b0c565b604051808215151515815260200191505060405180910390f35b34156102d057600080fd5b6102d8610b3c565b6040518082815260200191505060405180910390f35b34156102f957600080fd5b61034d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b46565b604051808215151515815260200191505060405180910390f35b341561037257600080fd5b61037a610b78565b6040518082815260200191505060405180910390f35b341561039b57600080fd5b6103a3610b7e565b604051808260ff1660ff16815260200191505060405180910390f35b34156103ca57600080fd5b6103d2610b83565b005b34156103df57600080fd5b610414600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c43565b604051808215151515815260200191505060405180910390f35b341561043957600080fd5b61044f6004808035906020019091905050610e45565b005b341561045c57600080fd5b6104646110ce565b005b341561047157600080fd5b6104a6600480803590602001908201803590602001919091929080359060200190820180359060200191909192905050611147565b005b34156104b357600080fd5b6104bb611312565b604051808215151515815260200191505060405180910390f35b34156104e057600080fd5b6104e8611325565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561053557600080fd5b61056a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061134b565b604051808215151515815260200191505060405180910390f35b341561058f57600080fd5b6105bb600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061137b565b6040518082815260200191505060405180910390f35b34156105dc57600080fd5b6105e46113c3565b604051808215151515815260200191505060405180910390f35b341561060957600080fd5b61061161148b565b6040518082600381111561062157fe5b60ff16815260200191505060405180910390f35b341561064057600080fd5b610648611520565b005b341561065557600080fd5b61065d6115e1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106aa57600080fd5b6106b2611607565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106ff57600080fd5b61070761162d565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561074757808201518184015260208101905061072c565b50505050905090810190601f1680156107745780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561078d57600080fd5b6107956116cb565b604051808215151515815260200191505060405180910390f35b34156107ba57600080fd5b6107c26116e2565b604051808215151515815260200191505060405180910390f35b34156107e757600080fd5b61081c600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506117a9565b604051808215151515815260200191505060405180910390f35b341561084157600080fd5b6108496117d9565b6040518082815260200191505060405180910390f35b341561086a57600080fd5b610896600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506117df565b005b34156108a357600080fd5b6108d8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611ad1565b604051808215151515815260200191505060405180910390f35b34156108fd57600080fd5b610948600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611b01565b6040518082815260200191505060405180910390f35b341561096957600080fd5b610995600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611b88565b005b34156109a257600080fd5b6109ce600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611ce0565b005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a2c57600080fd5b600060065411151515610a3e57600080fd5b6000600460146101000a81548160ff021916908315150217905550565b600360159054906101000a900460ff1681565b60078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b045780601f10610ad957610100808354040283529160200191610b04565b820191906000526020600020905b815481529060010190602001808311610ae757829003601f168201915b505050505081565b6000600360149054906101000a900460ff16151515610b2a57600080fd5b610b348383611dbc565b905092915050565b6000600154905090565b6000600360149054906101000a900460ff16151515610b6457600080fd5b610b6f848484611eae565b90509392505050565b60095481565b601281565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bdf57600080fd5b600360149054906101000a900460ff161515610bfa57600080fd5b6000600360146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ca157600080fd5b600360159054906101000a900460ff16151515610cbd57600080fd5b600360149054906101000a900460ff16151515610cd957600080fd5b610cee8260015461226890919063ffffffff16565b600181905550610d45826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461226890919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000610e4f61148b565b905060026003811115610e5e57fe5b816003811115610e6a57fe5b1480610e8b5750600380811115610e7d57fe5b816003811115610e8957fe5b145b1515610e9657600080fd5b60008214151515610ea657600080fd5b610ef7826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461228690919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f4e8260015461228690919063ffffffff16565b600181905550610f698260065461226890919063ffffffff16565b600681905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663753e88e533846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b151561103357600080fd5b5af1151561104057600080fd5b505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f7e5c344a8141a805725cb476f76c6953b842222b967edd1f78ddb6e8b3f397ac846040518082815260200191505060405180910390a35050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561112a57600080fd5b6001600460146101000a81548160ff021916908315150217905550565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111a357600080fd5b8383600791906111b492919061294b565b508181600891906111c692919061294b565b507fd131ab1e6f279deea74e13a18477e13e2107deb6dc8ae955648948be5841fb46600760086040518080602001806020018381038352858181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156112795780601f1061124e57610100808354040283529160200191611279565b820191906000526020600020905b81548152906001019060200180831161125c57829003601f168201915b50508381038252848181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156112fc5780601f106112d1576101008083540402835291602001916112fc565b820191906000526020600020905b8154815290600101906020018083116112df57829003601f168201915b505094505050505060405180910390a150505050565b600360149054906101000a900460ff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360149054906101000a900460ff1615151561136957600080fd5b611373838361229f565b905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561142157600080fd5b600360159054906101000a900460ff1615151561143d57600080fd5b6001600360156101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b60006114956116cb565b15156114a4576000905061151d565b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611504576001905061151d565b60006006541415611518576002905061151d565b600390505b90565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561157c57600080fd5b600360149054906101000a900460ff1615151561159857600080fd5b6001600360146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116c35780601f10611698576101008083540402835291602001916116c3565b820191906000526020600020905b8154815290600101906020018083116116a657829003601f168201915b505050505081565b6000600460149054906101000a900460ff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561174057600080fd5b600360159054906101000a900460ff16151561175b57600080fd5b6000600360156101000a81548160ff0219169083151502179055507f452a344f03203071e1daf66e007976c85cb2380deabf1c91f3c4fb1fca41204960405160405180910390a16001905090565b6000600360149054906101000a900460ff161515156117c757600080fd5b6117d18383612530565b905092915050565b60065481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561183b57600080fd5b60038081111561184757fe5b61184f61148b565b600381111561185a57fe5b1415151561186757600080fd5b61186f6116cb565b151561187a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156118b657600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ea2ce6516040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561197c57600080fd5b5af1151561198957600080fd5b50505060405180519050151561199e57600080fd5b600154600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634b2ba0dd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515611a2657600080fd5b5af11515611a3357600080fd5b50505060405180519050141515611a4957600080fd5b7f219f1080015df4ca5a2cdcb89266f4a405ff0c2518b8563b9189f91cca9f9a10600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b6000600360149054906101000a900460ff16151515611aef57600080fd5b611af9838361274f565b905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611be457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611c2057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d3c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611d7857600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611eeb57600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611f3857600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611fc357600080fd5b612014826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461228690919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506120a7826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461226890919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061217882600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461228690919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600080828401905083811015151561227c57fe5b8091505092915050565b600082821115151561229457fe5b818303905092915050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156123b0576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612444565b6123c3838261228690919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561256d57600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156125ba57600080fd5b61260b826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461228690919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061269e826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461226890919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60006127e082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461226890919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061298c57803560ff19168380011785556129ba565b828001600101855582156129ba579182015b828111156129b957823582559160200191906001019061299e565b5b5090506129c791906129cb565b5090565b6129ed91905b808211156129e95760008160009055506001016129d1565b5090565b905600a165627a7a72305820544c942ab0f201ff6341e52c7d4a32f1f831d98a25f869685571d79f80abc77d00290000000000000000000000000566f36c38534bcf384924bdda8b9d101ae8d7e2000000000000000000000000983823b1300957a3b16c57a053975257702124340000000000000000000000000000000000000000000000000000000002faf080",
  "constructorArguments": "0000000000000000000000000566f36c38534bcf384924bdda8b9d101ae8d7e2000000000000000000000000983823b1300957a3b16c57a053975257702124340000000000000000000000000000000000000000000000000000000002faf080"
}