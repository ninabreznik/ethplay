{
  "address": "0x5f6798393f725238a3b4243019fa420e93f1efb1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LinkedListLib",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-23\n*/\n\npragma solidity 0.4.24;\n\n/**\n * @title LinkedListLib\n * @author Darryl Morris (o0ragman0o) and Modular.network\n *\n * This utility library was forked from https://github.com/o0ragman0o/LibCLL\n * into the Modular-Network ethereum-libraries repo at https://github.com/Modular-Network/ethereum-libraries\n * It has been updated to add additional functionality and be more compatible with solidity 0.4.18\n * coding patterns.\n *\n * version 1.1.1\n * Copyright (c) 2017 Modular Inc.\n * The MIT License (MIT)\n * https://github.com/Modular-network/ethereum-libraries/blob/master/LICENSE\n *\n * The LinkedListLib provides functionality for implementing data indexing using\n * a circlular linked list\n *\n * Modular provides smart contract services and security reviews for contract\n * deployments in addition to working on open source projects in the Ethereum\n * community. Our purpose is to test, document, and deploy reusable code onto the\n * blockchain and improve both security and usability. We also educate non-profits,\n * schools, and other community members about the application of blockchain\n * technology. For further information: modular.network\n *\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n\nlibrary LinkedListLib {\n\n    uint256 constant NULL = 0;\n    uint256 constant HEAD = 0;\n    bool constant PREV = false;\n    bool constant NEXT = true;\n\n    struct LinkedList{\n        mapping (uint256 => mapping (bool => uint256)) list;\n    }\n\n    /// @dev returns true if the list exists\n    /// @param self stored linked list from contract\n    function listExists(LinkedList storage self)\n        public\n        view returns (bool)\n    {\n        // if the head nodes previous or next pointers both point to itself, then there are no items in the list\n        if (self.list[HEAD][PREV] != HEAD || self.list[HEAD][NEXT] != HEAD) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /// @dev returns true if the node exists\n    /// @param self stored linked list from contract\n    /// @param _node a node to search for\n    function nodeExists(LinkedList storage self, uint256 _node)\n        public\n        view returns (bool)\n    {\n        if (self.list[_node][PREV] == HEAD && self.list[_node][NEXT] == HEAD) {\n            if (self.list[HEAD][NEXT] == _node) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /// @dev Returns the number of elements in the list\n    /// @param self stored linked list from contract\n    function sizeOf(LinkedList storage self) public view returns (uint256 numElements) {\n        bool exists;\n        uint256 i;\n        (exists,i) = getAdjacent(self, HEAD, NEXT);\n        while (i != HEAD) {\n            (exists,i) = getAdjacent(self, i, NEXT);\n            numElements++;\n        }\n        return;\n    }\n\n    /// @dev Returns the links of a node as a tuple\n    /// @param self stored linked list from contract\n    /// @param _node id of the node to get\n    function getNode(LinkedList storage self, uint256 _node)\n        public view returns (bool,uint256,uint256)\n    {\n        if (!nodeExists(self,_node)) {\n            return (false,0,0);\n        } else {\n            return (true,self.list[_node][PREV], self.list[_node][NEXT]);\n        }\n    }\n\n    /// @dev Returns the link of a node `_node` in direction `_direction`.\n    /// @param self stored linked list from contract\n    /// @param _node id of the node to step from\n    /// @param _direction direction to step in\n    function getAdjacent(LinkedList storage self, uint256 _node, bool _direction)\n        public view returns (bool,uint256)\n    {\n        if (!nodeExists(self,_node)) {\n            return (false,0);\n        } else {\n            return (true,self.list[_node][_direction]);\n        }\n    }\n\n    /// @dev Can be used before `insert` to build an ordered list\n    /// @param self stored linked list from contract\n    /// @param _node an existing node to search from, e.g. HEAD.\n    /// @param _value value to seek\n    /// @param _direction direction to seek in\n    //  @return next first node beyond '_node' in direction `_direction`\n    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n        public view returns (uint256)\n    {\n        if (sizeOf(self) == 0) { return 0; }\n        require((_node == 0) || nodeExists(self,_node));\n        bool exists;\n        uint256 next;\n        (exists,next) = getAdjacent(self, _node, _direction);\n        while  ((next != 0) && (_value != next) && ((_value < next) != _direction)) next = self.list[next][_direction];\n        return next;\n    }\n\n    /// @dev Creates a bidirectional link between two nodes on direction `_direction`\n    /// @param self stored linked list from contract\n    /// @param _node first node for linking\n    /// @param _link  node to link to in the _direction\n    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) private  {\n        self.list[_link][!_direction] = _node;\n        self.list[_node][_direction] = _link;\n    }\n\n    /// @dev Insert node `_new` beside existing node `_node` in direction `_direction`.\n    /// @param self stored linked list from contract\n    /// @param _node existing node\n    /// @param _new  new node to insert\n    /// @param _direction direction to insert node in\n    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n        if(!nodeExists(self,_new) && nodeExists(self,_node)) {\n            uint256 c = self.list[_node][_direction];\n            createLink(self, _node, _new, _direction);\n            createLink(self, _new, c, _direction);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /// @dev removes an entry from the linked list\n    /// @param self stored linked list from contract\n    /// @param _node node to remove from the list\n    function remove(LinkedList storage self, uint256 _node) internal returns (uint256) {\n        if ((_node == NULL) || (!nodeExists(self,_node))) { return 0; }\n        createLink(self, self.list[_node][PREV], self.list[_node][NEXT], NEXT);\n        delete self.list[_node][PREV];\n        delete self.list[_node][NEXT];\n        return _node;\n    }\n\n    /// @dev pushes an enrty to the head of the linked list\n    /// @param self stored linked list from contract\n    /// @param _node new entry to push to the head\n    /// @param _direction push to the head (NEXT) or tail (PREV)\n    function push(LinkedList storage self, uint256 _node, bool _direction) internal  {\n        insert(self, HEAD, _node, _direction);\n    }\n\n    /// @dev pops the first entry from the linked list\n    /// @param self stored linked list from contract\n    /// @param _direction pop from the head (NEXT) or the tail (PREV)\n    function pop(LinkedList storage self, bool _direction) internal returns (uint256) {\n        bool exists;\n        uint256 adj;\n\n        (exists,adj) = getAdjacent(self, HEAD, _direction);\n\n        return remove(self, adj);\n    }\n}",
  "bytecode": "6103ba610030600b82828239805160001a6073146000811461002057610022565bfe5b5030600052607381538281f300730000000000000000000000000000000000000000301460806040526004361061008e5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663352a714b811461009357806353d00bd4146100bb578063574047ac146100da5780637bfa62fb14610108578063d99455bd14610113578063f593633c14610141575b600080fd5b6100a9600435602435604435606435151561014f565b60408051918252519081900360200190f35b6100c66004356101eb565b604080519115158252519081900360200190f35b6100ed600435602435604435151561023a565b60408051921515835260208301919091528051918290030190f35b6100a9600435610280565b6101216004356024356102c1565b604080519315158452602084019290925282820152519081900360600190f35b6100c6600435602435610314565b600080600061015d87610280565b151561016c57600092506101e1565b85158061017e575061017e8787610314565b151561018957600080fd5b61019487878661023a565b90925090505b80158015906101a95750808514155b80156101b9575080851084151514155b156101dd57600090815260208781526040808320861515845290915290205461019a565b8092505b5050949350505050565b60008080526020828152604080832090915281205415158061022457506000808052602083815260408083206001845290915290205415155b1561023157506001610235565b5060005b919050565b6000806102478585610314565b151561025857506000905080610278565b505060008281526020848152604080832084151584529091529020546001905b935093915050565b6000806000610292846000600161023a565b90925090505b80156102ba576102aa8482600161023a565b6001909401939092509050610298565b5050919050565b60008060006102d08585610314565b15156102e45750600091508190508061030d565b505050600081815260208381526040808320838052808352818420546001808652919093529220545b9250925092565b60008181526020838152604080832083805290915281205415801561034f575060008281526020848152604080832060018452909152902054155b15610384576000808052602084815260408083206001845290915290205482141561037c57506001610388565b506000610388565b5060015b929150505600a165627a7a72305820c46855bcc5640424d42853c424c0ced61de7419375ddf6859413745fa9d6985f0029"
}