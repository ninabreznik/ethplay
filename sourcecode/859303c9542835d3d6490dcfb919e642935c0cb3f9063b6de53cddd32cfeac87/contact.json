{
  "address": "0x5ed89439c90b5af263810c6ca051b199ebedb3e3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenizedProperty",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-21\n*/\n\n/**\n * Copyright (c) 2019 blockimmo AG [emailÂ protected]\n * No license\n */\n\npragma solidity 0.5.4;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        require(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n        require(token.approve(spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        require(token.approve(spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        require(token.approve(spender, newAllowance));\n    }\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\ncontract MoneyMarketInterface {\n  function getSupplyBalance(address account, address asset) public view returns (uint);\n  function supply(address asset, uint amount) public returns (uint);\n  function withdraw(address asset, uint requestedAmount) public returns (uint);\n}\n\ncontract LoanEscrow is Pausable {\n  using SafeERC20 for IERC20;\n  using SafeMath for uint256;\n\n  // configurable to any ERC20 (i.e. xCHF)\n  address public constant DAI_ADDRESS = 0xB4272071eCAdd69d933AdcD19cA99fe80664fc08;  // 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;  // 0x9Ad61E35f8309aF944136283157FABCc5AD371E5;\n  IERC20 public dai = IERC20(DAI_ADDRESS);\n\n  address public constant MONEY_MARKET_ADDRESS = 0x3FDA67f7583380E67ef93072294a7fAc882FD7E7;  // 0x6732c278C58FC90542cce498981844A073D693d7;\n  MoneyMarketInterface public moneyMarket = MoneyMarketInterface(MONEY_MARKET_ADDRESS);\n\n  event Deposited(address indexed from, uint256 daiAmount);\n  event InterestWithdrawn(address indexed to, uint256 daiAmount);\n  event Pulled(address indexed to, uint256 daiAmount);\n\n  mapping(address => uint256) public deposits;\n  mapping(address => uint256) public pulls;\n  uint256 public deposited;\n  uint256 public pulled;\n\n  modifier onlyBlockimmo() {\n    require(msg.sender == blockimmo(), \"onlyBlockimmo\");\n    _;\n  }\n\n  function blockimmo() public view returns (address);\n\n  function withdrawInterest() public onlyBlockimmo {\n    uint256 amountInterest = moneyMarket.getSupplyBalance(address(this), DAI_ADDRESS).add(dai.balanceOf(address(this))).add(pulled).sub(deposited);\n    require(amountInterest > 0, \"no interest\");\n\n    uint256 errorCode = moneyMarket.withdraw(DAI_ADDRESS, amountInterest);\n    require(errorCode == 0, \"withdraw failed\");\n\n    dai.safeTransfer(msg.sender, amountInterest);\n    emit InterestWithdrawn(msg.sender, amountInterest);\n  }\n\n  function deposit(address _from, uint256 _amountDai) internal {\n    require(_from != address(0) && _amountDai > 0, \"invalid parameter(s)\");\n\n    dai.safeTransferFrom(msg.sender, address(this), _amountDai);\n\n    if (!paused()) {\n      require(dai.allowance(address(this), MONEY_MARKET_ADDRESS) == 0, \"non-zero initial moneyMarket allowance\");\n      require(dai.approve(MONEY_MARKET_ADDRESS, _amountDai), \"approving moneyMarket failed\");\n\n      uint256 errorCode = moneyMarket.supply(DAI_ADDRESS, _amountDai);\n      require(errorCode == 0, \"supply failed\");\n      require(dai.allowance(address(this), MONEY_MARKET_ADDRESS) == 0, \"allowance not fully consumed by moneyMarket\");\n    }\n\n    deposits[_from] = deposits[_from].add(_amountDai);\n    deposited = deposited.add(_amountDai);\n    emit Deposited(_from, _amountDai);\n  }\n\n  function pull(address _to, uint256 _amountDai, bool _refund) internal {\n    require(_to != address(0) && _amountDai > 0, \"invalid parameter(s)\");\n\n    uint256 errorCode = (_amountDai > dai.balanceOf(address(this))) ? moneyMarket.withdraw(DAI_ADDRESS, _amountDai.sub(dai.balanceOf(address(this)))) : 0;\n    require(errorCode == 0, \"withdraw failed\");\n\n    if (_refund) {\n      deposits[_to] = deposits[_to].sub(_amountDai);\n      deposited = deposited.sub(_amountDai);\n    } else {\n      pulls[_to] = pulls[_to].add(_amountDai);\n      pulled = pulled.add(_amountDai);\n    }\n\n    dai.safeTransfer(_to, _amountDai);\n    emit Pulled(_to, _amountDai);\n  }\n}\n\n/**\n * @title DividendDistributingToken\n * @dev An ERC20-compliant token that distributes any Dai it receives to its token holders proportionate to their share.\n *\n * Implementation based on: https://blog.pennyether.com/posts/realtime-dividend-token.html#the-token\n *\n * The user is responsible for when they transact tokens (transacting before a dividend payout is probably not ideal).\n *\n * `TokenizedProperty` inherits from `this` and is the front-facing contract representing the rights / ownership to a property.\n *\n * NOTE: if the owner(s) of a `TokenizedProperty` wish to update `LoanEscrow` behavior (i.e. changing the ERC20 token funds are raised in, or changing loan behavior),\n * some options are: (a) `untokenize` and re-deploy the updated `TokenizedProperty`, or (b) deploy an independent contract acting as the updated dividend distribution vehicle.\n */\ncontract DividendDistributingToken is ERC20, LoanEscrow {\n  using SafeMath for uint256;\n\n  uint256 public constant POINTS_PER_DAI = uint256(10) ** 32;\n\n  uint256 public pointsPerToken = 0;\n  mapping(address => uint256) public credits;\n  mapping(address => uint256) public lastPointsPerToken;\n\n  event DividendsCollected(address indexed collector, uint256 amount);\n  event DividendsDeposited(address indexed depositor, uint256 amount);\n\n  function collectOwedDividends() public {\n    creditAccount(msg.sender);\n\n    uint256 _dai = credits[msg.sender].div(POINTS_PER_DAI);\n    credits[msg.sender] = 0;\n\n    pull(msg.sender, _dai, false);\n    emit DividendsCollected(msg.sender, _dai);\n  }\n\n  function depositDividends() public {  // dividends\n    uint256 amount = dai.allowance(msg.sender, address(this));\n\n    uint256 fee = amount.div(100);\n    dai.safeTransferFrom(msg.sender, blockimmo(), fee);\n\n    deposit(msg.sender, amount.sub(fee));\n\n    // partially tokenized properties store the \"non-tokenized\" part in `this` contract, dividends not disrupted\n    uint256 issued = totalSupply().sub(unissued());\n    pointsPerToken = pointsPerToken.add(amount.sub(fee).mul(POINTS_PER_DAI).div(issued));\n\n    emit DividendsDeposited(msg.sender, amount);\n  }\n\n  function unissued() public view returns (uint256) {\n    return balanceOf(address(this));\n  }\n\n  function creditAccount(address _account) internal {\n    uint256 amount = balanceOf(_account).mul(pointsPerToken.sub(lastPointsPerToken[_account]));\n    credits[_account] = credits[_account].add(amount);\n    lastPointsPerToken[_account] = pointsPerToken;\n  }\n}\n\ncontract LandRegistryInterface {\n  function getProperty(string memory _eGrid) public view returns (address property);\n}\n\ncontract LandRegistryProxyInterface {\n  function owner() public view returns (address);\n  function landRegistry() public view returns (LandRegistryInterface);\n}\n\ncontract WhitelistInterface {\n  function checkRole(address _operator, string memory _permission) public view;\n}\n\ncontract WhitelistProxyInterface {\n  function whitelist() public view returns (WhitelistInterface);\n}\n\n/**\n * @title TokenizedProperty\n * @dev An asset-backed security token (a property as identified by its E-GRID (a UUID) in the (Swiss) land registry).\n *\n * Ownership of `this` must be transferred to `ShareholderDAO` before blockimmo will verify `this` as legitimate in `LandRegistry`.\n * Until verified legitimate, transferring tokens is not possible (locked).\n *\n * Tokens can be freely listed on exchanges (especially decentralized / 0x).\n *\n * `this.owner` can make two suggestions that blockimmo will always (try) to take: `setManagementCompany` and `untokenize`.\n * `this.owner` can also transfer or rescind ownership.\n * See `ShareholderDAO` documentation for more information...\n *\n * Our legal framework requires a `TokenizedProperty` must be possible to `untokenize`.\n * Un-tokenizing is also the first step to upgrading or an outright sale of `this`.\n *\n * For both:\n *   1. `owner` emits an `UntokenizeRequest`\n *   2. blockimmo removes `this` from the `LandRegistry`\n *\n * Upgrading:\n *   3. blockimmo migrates `this` to the new `TokenizedProperty` (ie perfectly preserving `this.balances`)\n *   4. blockimmo attaches `owner` to the property (1)\n *   5. blockimmo adds the property to `LandRegistry`\n *\n * Outright sale:\n *   3. blockimmo deploys a new `TokenizedProperty` and adds it to the `LandRegistry`\n *   4. blockimmo configures and deploys a `TokenSale` for the property with `TokenSale.wallet == address(this)`\n *      (raised Ether distributed to current token holders as a dividend payout)\n *        - if the sale is unsuccessful, the new property is removed from the `LandRegistry`, and `this` is added back\n */\ncontract TokenizedProperty is DividendDistributingToken, ERC20Detailed, Ownable {\n  address public constant LAND_REGISTRY_PROXY_ADDRESS = 0xe72AD2A335AE18e6C7cdb6dAEB64b0330883CD56;  // 0x0f5Ea0A652E851678Ebf77B69484bFcD31F9459B;\n  address public constant WHITELIST_PROXY_ADDRESS = 0x7223b032180CDb06Be7a3D634B1E10032111F367;  // 0xEC8bE1A5630364292E56D01129E8ee8A9578d7D8;\n\n  LandRegistryProxyInterface public registryProxy = LandRegistryProxyInterface(LAND_REGISTRY_PROXY_ADDRESS);\n  WhitelistProxyInterface public whitelistProxy = WhitelistProxyInterface(WHITELIST_PROXY_ADDRESS);\n\n  uint256 public constant NUM_TOKENS = 1000000;\n\n  mapping(address => uint256) public lastTransferBlock;\n  mapping(address => uint256) public minTransferAccepted;\n\n  event MinTransferSet(address indexed account, uint256 minTransfer);\n  event ProposalEmitted(bytes32 indexed hash, string message);\n\n  modifier isValid() {\n    LandRegistryInterface registry = LandRegistryInterface(registryProxy.landRegistry());\n    require(registry.getProperty(name()) == address(this), \"invalid TokenizedProperty\");\n    _;\n  }\n\n  modifier onlyBlockimmo() {\n    require(msg.sender == blockimmo(), \"onlyBlockimmo\");\n    _;\n  }\n\n  constructor(string memory _eGrid, string memory _grundstuck) public ERC20Detailed(_eGrid, _grundstuck, 18) {\n    uint256 totalSupply = NUM_TOKENS * (uint256(10) ** decimals());\n    _mint(msg.sender, totalSupply);\n\n    _approve(address(this), blockimmo(), ~uint256(0));  // enable blockimmo to issue `unissued` tokens in the future\n  }\n\n  function blockimmo() public view returns (address) {\n    return registryProxy.owner();\n  }\n\n  function burn(uint256 _value) public isValid {  // buyback\n    _burn(msg.sender, _value);\n  }\n\n  function mint(address _to, uint256 _value) public isValid onlyBlockimmo returns (bool) {  // equity dilution\n    _mint(_to, _value);\n    return true;\n  }\n\n  function emitProposal(bytes32 _hash, string memory _message) public isValid onlyOwner {\n    emit ProposalEmitted(_hash, _message);\n  }\n\n  function setMinTransfer(uint256 _amount) public isValid {\n    minTransferAccepted[msg.sender] = _amount;\n    emit MinTransferSet(msg.sender, _amount);\n  }\n\n  function transfer(address _to, uint256 _value) public isValid returns (bool) {\n    require(_value >= minTransferAccepted[_to], \"_value must exceed _to's minTransferAccepted\");\n    transferBookKeeping(msg.sender, _to);\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public isValid returns (bool) {\n    transferBookKeeping(_from, _to);\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function transferBookKeeping(address _from, address _to) internal {\n    whitelistProxy.whitelist().checkRole(_to, \"authorized\");\n\n    creditAccount(_from);  // required for dividends...\n    creditAccount(_to);\n\n    lastTransferBlock[_from] = block.number;  // required for voting...\n    lastTransferBlock[_to] = block.number;\n  }\n}",
  "bytecode": "608060405273b4272071ecadd69d933adcd19ca99fe80664fc08600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550733fda67f7583380e67ef93072294a7fac882fd7e7600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600a5573e72ad2a335ae18e6c7cdb6daeb64b0330883cd56601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550737223b032180cdb06be7a3d634b1e10032111f367601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200016a57600080fd5b5060405162005e5838038062005e58833981018060405260408110156200019057600080fd5b810190808051640100000000811115620001a957600080fd5b82810190506020810184811115620001c057600080fd5b8151856001820283011164010000000082111715620001de57600080fd5b50509291906020018051640100000000811115620001fb57600080fd5b828101905060208101848111156200021257600080fd5b81518560018202830111640100000000821117156200023057600080fd5b505092919050505081816012620002563362000401640100000000026401000000009004565b6000600460006101000a81548160ff02191690831515021790555082600d9080519060200190620002899291906200099f565b5081600e9080519060200190620002a29291906200099f565b5080600f60006101000a81548160ff021916908360ff16021790555050505033600f60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600f60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360006200039a6200046b640100000000026401000000009004565b60ff16600a0a620f4240029050620003c2338262000482640100000000026401000000009004565b620003f830620003e0620005f7640100000000026401000000009004565b600019620006c0640100000000026401000000009004565b50505062000a4e565b620004258160036200082564010000000002620052a1179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b6000600f60009054906101000a900460ff16905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515620004bf57600080fd5b620004e481600254620008e86401000000000262003409179091906401000000009004565b6002819055506200054b816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620008e86401000000000262003409179091906401000000009004565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156200067e57600080fd5b505afa15801562000693573d6000803e3d6000fd5b505050506040513d6020811015620006aa57600080fd5b8101908080519060200190929190505050905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515620006fd57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156200073a57600080fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156200086257600080fd5b6200087d82826200090a640100000000026401000000009004565b1515156200088a57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008082840190508381101515156200090057600080fd5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200094857600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620009e257805160ff191683800117855562000a13565b8280016001018555821562000a13579182015b8281111562000a12578251825591602001919060010190620009f5565b5b50905062000a22919062000a26565b5090565b62000a4b91905b8082111562000a4757600081600090555060010162000a2d565b5090565b90565b6153fa8062000a5e6000396000f3fe608060405234801561001057600080fd5b50600436106102d7576000357c010000000000000000000000000000000000000000000000000000000090048063715018a61161019f578063b53dfd4d11610106578063eef49ee3116100bf578063f2fde38b11610099578063f2fde38b14610e71578063f4b9fa7514610eb5578063fc7e286d14610eff578063fe5ff46814610f57576102d7565b8063eef49ee314610deb578063ef8b715114610e09578063f280d77b14610e27576102d7565b8063b53dfd4d14610c25578063bb3d995d14610c7d578063c5f4197914610cc7578063d6d75f5114610d1f578063dd62ed3e14610d69578063defa92ee14610de1576102d7565b80638f32d59b116101585780638f32d59b14610a3c57806395d89b4114610a5e578063971a19b414610ae157806397d159e714610b2b578063a457c2d714610b59578063a9059cbb14610bbf576102d7565b8063715018a61461092457806382dc1ec41461092e5780638456cb59146109725780638712523e1461097c57806387b95404146109d45780638da5cb5b146109f2576102d7565b806340c10f19116102435780634d2efe4e116101fc5780634d2efe4e146108205780634fcb6f3a1461082a5780635c975abb14610848578063664c35ab1461086a5780636ef8d66d146108c257806370a08231146108cc576102d7565b806340c10f191461062f5780634149db481461069557806342966c68146106b357806342e3b9be146106e157806346fbf68e146107a65780634c42959214610802576102d7565b806323b872dd1161029557806323b872dd1461048157806327cdf22e146105075780632a4c0a1a14610551578063313ce5671461059b57806339509351146105bf5780633f4ba83a14610625576102d7565b806263750c146102dc57806306fdde03146102e65780630952ad2414610369578063095ea7b3146103b357806318160ddd14610419578063218d984b14610437575b600080fd5b6102e4610faf565b005b6102ee611571565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561032e578082015181840152602081019050610313565b50505050905090810190601f16801561035b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610371611613565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103ff600480360360408110156103c957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061162b565b604051808215151515815260200191505060405180910390f35b610421611642565b6040518082815260200191505060405180910390f35b61043f61164c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104ed6004803603606081101561049757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611672565b604051808215151515815260200191505060405180910390f35b61050f61190b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610559611931565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105a3611949565b604051808260ff1660ff16815260200191505060405180910390f35b61060b600480360360408110156105d557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611960565b604051808215151515815260200191505060405180910390f35b61062d611a05565b005b61067b6004803603604081101561064557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611ab4565b604051808215151515815260200191505060405180910390f35b61069d611ded565b6040518082815260200191505060405180910390f35b6106df600480360360208110156106c957600080fd5b8101908080359060200190929190505050611df4565b005b6107a4600480360360408110156106f757600080fd5b81019080803590602001909291908035906020019064010000000081111561071e57600080fd5b82018360208201111561073057600080fd5b8035906020019184600183028401116401000000008311171561075257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061207b565b005b6107e8600480360360208110156107bc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123a9565b604051808215151515815260200191505060405180910390f35b61080a6123c6565b6040518082815260200191505060405180910390f35b6108286123ce565b005b6108326124d3565b6040518082815260200191505060405180910390f35b6108506124d9565b604051808215151515815260200191505060405180910390f35b6108ac6004803603602081101561088057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124f0565b6040518082815260200191505060405180910390f35b6108ca612508565b005b61090e600480360360208110156108e257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612513565b6040518082815260200191505060405180910390f35b61092c61255b565b005b6109706004803603602081101561094457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061262f565b005b61097a61264f565b005b6109be6004803603602081101561099257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506126ff565b6040518082815260200191505060405180910390f35b6109dc612717565b6040518082815260200191505060405180910390f35b6109fa612727565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610a44612751565b604051808215151515815260200191505060405180910390f35b610a666127a9565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610aa6578082015181840152602081019050610a8b565b50505050905090810190601f168015610ad35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610ae961284b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610b5760048036036020811015610b4157600080fd5b8101908080359060200190929190505050612863565b005b610ba560048036036040811015610b6f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612b72565b604051808215151515815260200191505060405180910390f35b610c0b60048036036040811015610bd557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612c17565b604051808215151515815260200191505060405180910390f35b610c6760048036036020811015610c3b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612f48565b6040518082815260200191505060405180910390f35b610c85612f60565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610d0960048036036020811015610cdd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612f78565b6040518082815260200191505060405180910390f35b610d27612f90565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610dcb60048036036040811015610d7f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612fb6565b6040518082815260200191505060405180910390f35b610de961303d565b005b610df36132c2565b6040518082815260200191505060405180910390f35b610e116132c8565b6040518082815260200191505060405180910390f35b610e2f6132ce565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610eb360048036036020811015610e8757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613394565b005b610ebd6133b3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610f4160048036036020811015610f1557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506133d9565b6040518082815260200191505060405180910390f35b610f9960048036036020811015610f6d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506133f1565b6040518082815260200191505060405180910390f35b610fb76132ce565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611059576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6f6e6c79426c6f636b696d6d6f0000000000000000000000000000000000000081525060200191505060405180910390fd5b60006112c86008546112ba6009546112ac600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561112557600080fd5b505afa158015611139573d6000803e3d6000fd5b505050506040513d602081101561114f57600080fd5b8101908080519060200190929190505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ba3777313073b4272071ecadd69d933adcd19ca99fe80664fc086040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561126357600080fd5b505afa158015611277573d6000803e3d6000fd5b505050506040513d602081101561128d57600080fd5b810190808051906020019092919050505061340990919063ffffffff16565b61340990919063ffffffff16565b61342a90919063ffffffff16565b9050600081111515611342576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f6e6f20696e74657265737400000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3fef3a373b4272071ecadd69d933adcd19ca99fe80664fc08846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561141d57600080fd5b505af1158015611431573d6000803e3d6000fd5b505050506040513d602081101561144757600080fd5b810190808051906020019092919050505090506000811415156114d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f7769746864726177206661696c6564000000000000000000000000000000000081525060200191505060405180910390fd5b61151f3383600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661344c9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f0fb2ffd41401cdebe76e1a7cdcaed20ad31cf8d215f8209b73ec00525cb8d686836040518082815260200191505060405180910390a25050565b6060600d8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116095780601f106115de57610100808354040283529160200191611609565b820191906000526020600020905b8154815290600101906020018083116115ec57829003601f168201915b5050505050905090565b737223b032180cdb06be7a3d634b1e10032111f36781565b600061163833848461353a565b6001905092915050565b6000600254905090565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bd4dc0246040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156116f957600080fd5b505afa15801561170d573d6000803e3d6000fd5b505050506040513d602081101561172357600080fd5b810190808051906020019092919050505090503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663ab331a34611771611571565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156117dc5780820151818401526020810190506117c1565b50505050905090810190601f1680156118095780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561182657600080fd5b505afa15801561183a573d6000803e3d6000fd5b505050506040513d602081101561185057600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161415156118ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f696e76616c696420546f6b656e697a656450726f70657274790000000000000081525060200191505060405180910390fd5b6118f6858561369d565b6119018585856138e3565b9150509392505050565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b73b4272071ecadd69d933adcd19ca99fe80664fc0881565b6000600f60009054906101000a900460ff16905090565b60006119fb33846119f685600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461340990919063ffffffff16565b61353a565b6001905092915050565b611a0e336123a9565b1515611a1957600080fd5b600460009054906101000a900460ff161515611a3457600080fd5b6000600460006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b600080601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bd4dc0246040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611b3b57600080fd5b505afa158015611b4f573d6000803e3d6000fd5b505050506040513d6020811015611b6557600080fd5b810190808051906020019092919050505090503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663ab331a34611bb3611571565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c1e578082015181840152602081019050611c03565b50505050905090810190601f168015611c4b5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015611c6857600080fd5b505afa158015611c7c573d6000803e3d6000fd5b505050506040513d6020811015611c9257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16141515611d2e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f696e76616c696420546f6b656e697a656450726f70657274790000000000000081525060200191505060405180910390fd5b611d366132ce565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611dd8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6f6e6c79426c6f636b696d6d6f0000000000000000000000000000000000000081525060200191505060405180910390fd5b611de28484613994565b600191505092915050565b620f424081565b6000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bd4dc0246040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611e7a57600080fd5b505afa158015611e8e573d6000803e3d6000fd5b505050506040513d6020811015611ea457600080fd5b810190808051906020019092919050505090503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663ab331a34611ef2611571565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611f5d578082015181840152602081019050611f42565b50505050905090810190601f168015611f8a5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015611fa757600080fd5b505afa158015611fbb573d6000803e3d6000fd5b505050506040513d6020811015611fd157600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614151561206d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f696e76616c696420546f6b656e697a656450726f70657274790000000000000081525060200191505060405180910390fd5b6120773383613ae8565b5050565b6000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bd4dc0246040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561210157600080fd5b505afa158015612115573d6000803e3d6000fd5b505050506040513d602081101561212b57600080fd5b810190808051906020019092919050505090503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663ab331a34612179611571565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156121e45780820151818401526020810190506121c9565b50505050905090810190601f1680156122115780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561222e57600080fd5b505afa158015612242573d6000803e3d6000fd5b505050506040513d602081101561225857600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161415156122f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f696e76616c696420546f6b656e697a656450726f70657274790000000000000081525060200191505060405180910390fd5b6122fc612751565b151561230757600080fd5b827f1eed7b14dad232245d822203ec33d71bd83fdc5bcc9d000d5c5f07e76e9aa6f9836040518080602001828103825283818151815260200191508051906020019080838360005b8381101561236a57808201518184015260208101905061234f565b50505050905090810190601f1680156123975780820380516001836020036101000a031916815260200191505b509250505060405180910390a2505050565b60006123bf826003613c3c90919063ffffffff16565b9050919050565b6020600a0a81565b6123d733613cd0565b600061242f6020600a0a600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613e2190919063ffffffff16565b90506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061248233826000613e4b565b3373ffffffffffffffffffffffffffffffffffffffff167f97e6e78d2df94abb37cadd04b8120a3ff229c90b3495b36dadc97ce7b49542c4826040518082815260200191505060405180910390a250565b600a5481565b6000600460009054906101000a900460ff16905090565b60076020528060005260406000206000915090505481565b612511336144a4565b565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b612563612751565b151561256e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600f60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600f60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b612638336123a9565b151561264357600080fd5b61264c816144fe565b50565b612658336123a9565b151561266357600080fd5b600460009054906101000a900460ff1615151561267f57600080fd5b6001600460006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60126020528060005260406000206000915090505481565b600061272230612513565b905090565b6000600f60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600f60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6060600e8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128415780601f1061281657610100808354040283529160200191612841565b820191906000526020600020905b81548152906001019060200180831161282457829003601f168201915b5050505050905090565b733fda67f7583380e67ef93072294a7fac882fd7e781565b6000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bd4dc0246040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156128e957600080fd5b505afa1580156128fd573d6000803e3d6000fd5b505050506040513d602081101561291357600080fd5b810190808051906020019092919050505090503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663ab331a34612961611571565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156129cc5780820151818401526020810190506129b1565b50505050905090810190601f1680156129f95780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015612a1657600080fd5b505afa158015612a2a573d6000803e3d6000fd5b505050506040513d6020811015612a4057600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16141515612adc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f696e76616c696420546f6b656e697a656450726f70657274790000000000000081525060200191505060405180910390fd5b81601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f78740ad3fc624a380e4fe5a911bf18a8c8906c414f66ebd39a7332e007f6bd17836040518082815260200191505060405180910390a25050565b6000612c0d3384612c0885600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461342a90919063ffffffff16565b61353a565b6001905092915050565b600080601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bd4dc0246040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015612c9e57600080fd5b505afa158015612cb2573d6000803e3d6000fd5b505050506040513d6020811015612cc857600080fd5b810190808051906020019092919050505090503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663ab331a34612d16611571565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612d81578082015181840152602081019050612d66565b50505050905090810190601f168015612dae5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015612dcb57600080fd5b505afa158015612ddf573d6000803e3d6000fd5b505050506040513d6020811015612df557600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16141515612e91576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f696e76616c696420546f6b656e697a656450726f70657274790000000000000081525060200191505060405180910390fd5b601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548310151515612f2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001806153a3602c913960400191505060405180910390fd5b612f35338561369d565b612f3f8484614558565b91505092915050565b600c6020528060005260406000206000915090505481565b73e72ad2a335ae18e6c7cdb6daeb64b0330883cd5681565b60136020528060005260406000206000915090505481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561312e57600080fd5b505afa158015613142573d6000803e3d6000fd5b505050506040513d602081101561315857600080fd5b810190808051906020019092919050505090506000613181606483613e2190919063ffffffff16565b90506131d93361318f6132ce565b83600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661456f909392919063ffffffff16565b6131f5336131f0838561342a90919063ffffffff16565b614692565b6000613218613202612717565b61320a611642565b61342a90919063ffffffff16565b90506132696132588261324a6020600a0a61323c878961342a90919063ffffffff16565b614eec90919063ffffffff16565b613e2190919063ffffffff16565b600a5461340990919063ffffffff16565b600a819055503373ffffffffffffffffffffffffffffffffffffffff167f630819c75b5dd0ad6507f10e821c0d57f89fa4d9005de30999ec5380475c190e846040518082815260200191505060405180910390a2505050565b60085481565b60095481565b6000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561335457600080fd5b505afa158015613368573d6000803e3d6000fd5b505050506040513d602081101561337e57600080fd5b8101908080519060200190929190505050905090565b61339c612751565b15156133a757600080fd5b6133b081614f2a565b50565b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60066020528060005260406000206000915090505481565b600b6020528060005260406000206000915090505481565b600080828401905083811015151561342057600080fd5b8091505092915050565b600082821115151561343b57600080fd5b600082840390508091505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156134ef57600080fd5b505af1158015613503573d6000803e3d6000fd5b505050506040513d602081101561351957600080fd5b8101908080519060200190929190505050151561353557600080fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561357657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156135b257600080fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166393e59dc16040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561372157600080fd5b505afa158015613735573d6000803e3d6000fd5b505050506040513d602081101561374b57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16630988ca8c826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252600a8152602001807f617574686f72697a6564000000000000000000000000000000000000000000008152506020019250505060006040518083038186803b15801561382d57600080fd5b505afa158015613841573d6000803e3d6000fd5b5050505061384e82613cd0565b61385781613cd0565b43601260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555043601260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60006138f0848484615026565b613989843361398485600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461342a90919063ffffffff16565b61353a565b600190509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156139d057600080fd5b6139e58160025461340990919063ffffffff16565b600281905550613a3c816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461340990919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515613b2457600080fd5b613b398160025461342a90919063ffffffff16565b600281905550613b90816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461342a90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515613c7957600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000613d40613d29600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600a5461342a90919063ffffffff16565b613d3284612513565b614eec90919063ffffffff16565b9050613d9481600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461340990919063ffffffff16565b600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600a54600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60008082111515613e3157600080fd5b60008284811515613e3e57fe5b0490508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015613e885750600082115b1515613efc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f696e76616c696420706172616d6574657228732900000000000000000000000081525060200191505060405180910390fd5b6000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015613fb957600080fd5b505afa158015613fcd573d6000803e3d6000fd5b505050506040513d6020811015613fe357600080fd5b8101908080519060200190929190505050831161400157600061421d565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3fef3a373b4272071ecadd69d933adcd19ca99fe80664fc0861415c600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561411257600080fd5b505afa158015614126573d6000803e3d6000fd5b505050506040513d602081101561413c57600080fd5b81019080805190602001909291905050508761342a90919063ffffffff16565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156141e157600080fd5b505af11580156141f5573d6000803e3d6000fd5b505050506040513d602081101561420b57600080fd5b81019080805190602001909291905050505b9050600081141515614297576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f7769746864726177206661696c6564000000000000000000000000000000000081525060200191505060405180910390fd5b8115614352576142ef83600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461342a90919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506143478360085461342a90919063ffffffff16565b600881905550614403565b6143a483600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461340990919063ffffffff16565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506143fc8360095461340990919063ffffffff16565b6009819055505b6144508484600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661344c9092919063ffffffff16565b8373ffffffffffffffffffffffffffffffffffffffff167f8f6dc746d2ddfc02adada7fa1b00410b478496d5fed7a2b9020322b3959fe9ee846040518082815260200191505060405180910390a250505050565b6144b88160036151f290919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b6145128160036152a190919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b6000614565338484615026565b6001905092915050565b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd8484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561464657600080fd5b505af115801561465a573d6000803e3d6000fd5b505050506040513d602081101561467057600080fd5b8101908080519060200190929190505050151561468c57600080fd5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156146cf5750600081115b1515614743576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f696e76616c696420706172616d6574657228732900000000000000000000000081525060200191505060405180910390fd5b614792333083600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661456f909392919063ffffffff16565b61479a6124d9565b1515614dea576000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30733fda67f7583380e67ef93072294a7fac882fd7e76040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156148a557600080fd5b505afa1580156148b9573d6000803e3d6000fd5b505050506040513d60208110156148cf57600080fd5b8101908080519060200190929190505050141515614938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061537d6026913960400191505060405180910390fd5b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3733fda67f7583380e67ef93072294a7fac882fd7e7836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015614a1157600080fd5b505af1158015614a25573d6000803e3d6000fd5b505050506040513d6020811015614a3b57600080fd5b81019080805190602001909291905050501515614ac0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f617070726f76696e67206d6f6e65794d61726b6574206661696c65640000000081525060200191505060405180910390fd5b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2b9fdb873b4272071ecadd69d933adcd19ca99fe80664fc08846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015614b9b57600080fd5b505af1158015614baf573d6000803e3d6000fd5b505050506040513d6020811015614bc557600080fd5b81019080805190602001909291905050509050600081141515614c50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f737570706c79206661696c65640000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30733fda67f7583380e67ef93072294a7fac882fd7e76040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015614d5557600080fd5b505afa158015614d69573d6000803e3d6000fd5b505050506040513d6020811015614d7f57600080fd5b8101908080519060200190929190505050141515614de8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180615352602b913960400191505060405180910390fd5b505b614e3c81600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461340990919063ffffffff16565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550614e948160085461340990919063ffffffff16565b6008819055508173ffffffffffffffffffffffffffffffffffffffff167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4826040518082815260200191505060405180910390a25050565b600080831415614eff5760009050614f24565b60008284029050828482811515614f1257fe5b04141515614f1f57600080fd5b809150505b92915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515614f6657600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600f60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600f60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561506257600080fd5b6150b3816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461342a90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550615146816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461340990919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561522e57600080fd5b6152388282613c3c565b151561524357600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156152dd57600080fd5b6152e78282613c3c565b1515156152f357600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505056fe616c6c6f77616e6365206e6f742066756c6c7920636f6e73756d6564206279206d6f6e65794d61726b65746e6f6e2d7a65726f20696e697469616c206d6f6e65794d61726b657420616c6c6f77616e63655f76616c7565206d75737420657863656564205f746f2773206d696e5472616e736665724163636570746564a165627a7a723058206528202cb4093a8c3b2d614a29127f0aadb0b55394dbae9c5fdad0f018aa6c58002900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000f4348393831383036363537373737640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a43482d5a47343133336400000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000f4348393831383036363537373737640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a43482d5a47343133336400000000000000000000000000000000000000000000"
}