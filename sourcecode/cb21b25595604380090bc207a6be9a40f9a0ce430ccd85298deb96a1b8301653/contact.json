{
  "address": "0x53221d2a9f8a246f2795df86b515034de974a144",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WHY",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-06\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\ncontract WHY is ERC20, Ownable {\n  string public constant name = \"WhenHungry\";\n  string public constant symbol = \"WHY\";\n  uint32 public constant decimals = 0;\n\n\n\n  uint256 private _forSale = 160e6;\n  uint256 private _team = 20e6;\n  address private _teamAddress = 0x38290ce73Ed7acaaF80712482FD13d8531DBD576;\n  uint256 private _teamRelease = 1581724800; // 15.02.2020\n  uint256 private _bounty = 15e6;\n  address private _bountyAddress = 0x3930476b4542f0874F98Cfba6C5e17ccb200ccB7;\n  uint256 private _service = 5e6;\n  address private _serviceAddress = 0x03dF4a87550506e6e5b55E260bb5a1Fb4431a511;\n  address public crowdsaleAddress;\n  bool public crowdsaleIsActivated = false;\n\n  /**\n   * Event for sale contract activation logging\n   * @param crowdsale crowdsale contract address\n   * @param amount - amount of the tokens transferred to the sale contract\n   */\n  event CrowdsaleActivation(\n    address crowdsale,\n    uint256 amount\n  );\n\n  constructor(address newOwner) public {\n    require(newOwner != address(0));\n    transferOwnership(newOwner);\n    _mint(_bountyAddress, _bounty);\n    _mint(_serviceAddress, _service);\n  }\n\n  /**\n   * Crowdsale contract activation\n   * @param crowdsale crowdsale contract address\n   */\n  function activateSaleContract(address crowdsale) public onlyOwner {\n    require (crowdsale != address(0));\n    require (!crowdsaleIsActivated);\n    crowdsaleAddress = crowdsale;\n    crowdsaleIsActivated = true;\n    _mint(crowdsaleAddress, _forSale);\n    emit CrowdsaleActivation(crowdsaleAddress, _forSale);\n  }\n\n  /**\n   * Release team tokens\n   */\n  function releaseTeamTokens() public {\n    require (now > _teamRelease);\n    _mint(_teamAddress, _team);\n  }\n}",
  "bytecode": "608060405263098968006004556301312d0060055560068054600160a060020a03199081167338290ce73ed7acaaf80712482fd13d8531dbd57617909155635e47348060075562e4e1c0600855600980548216733930476b4542f0874f98cfba6c5e17ccb200ccb7179055624c4b40600a55600b80549091167303df4a87550506e6e5b55e260bb5a1fb4431a511179055600c805460a060020a60ff0219169055348015620000ad57600080fd5b5060405160208062000e8a833981016040819052905160038054600160a060020a0319163317908190559091600160a060020a03919091169060009060008051602062000e6a833981519152908290a3600160a060020a03811615156200011357600080fd5b620001278164010000000062000176810204565b6009546008546200014b91600160a060020a031690640100000000620001ac810204565b600b54600a546200016f91600160a060020a031690640100000000620001ac810204565b50620002f7565b620001896401000000006200026b810204565b15156200019557600080fd5b620001a9816401000000006200027c810204565b50565b600160a060020a0382161515620001c257600080fd5b600254620001df908264010000000062000aa0620002dd82021704565b600255600160a060020a03821660009081526020819052604090205462000215908264010000000062000aa0620002dd82021704565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600354600160a060020a0316331490565b600160a060020a03811615156200029257600080fd5b600354604051600160a060020a0380841692169060008051602062000e6a83398151915290600090a360038054600160a060020a031916600160a060020a0392909216919091179055565b600082820183811015620002f057600080fd5b9392505050565b610b6380620003076000396000f3006080604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461010b578063095ea7b31461019557806314c411c7146101cd57806318160ddd146101e457806323b872dd1461020b578063313ce5671461023557806331d2f891146102635780633950935114610294578063442f4ce5146102b857806370a08231146102cd578063715018a6146102ee5780638da5cb5b146103035780638f32d59b1461031857806395d89b411461032d578063a457c2d714610342578063a9059cbb14610366578063dd62ed3e1461038a578063f2fde38b146103b1578063fdd080a4146103d2575b600080fd5b34801561011757600080fd5b506101206103f3565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015a578181015183820152602001610142565b50505050905090810190601f1680156101875780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a157600080fd5b506101b9600160a060020a036004351660243561042a565b604080519115158252519081900360200190f35b3480156101d957600080fd5b506101e26104a8565b005b3480156101f057600080fd5b506101f96104d1565b60408051918252519081900360200190f35b34801561021757600080fd5b506101b9600160a060020a03600435811690602435166044356104d7565b34801561024157600080fd5b5061024a610574565b6040805163ffffffff9092168252519081900360200190f35b34801561026f57600080fd5b50610278610579565b60408051600160a060020a039092168252519081900360200190f35b3480156102a057600080fd5b506101b9600160a060020a0360043516602435610588565b3480156102c457600080fd5b506101b9610638565b3480156102d957600080fd5b506101f9600160a060020a0360043516610659565b3480156102fa57600080fd5b506101e2610674565b34801561030f57600080fd5b506102786106de565b34801561032457600080fd5b506101b96106ed565b34801561033957600080fd5b506101206106fe565b34801561034e57600080fd5b506101b9600160a060020a0360043516602435610735565b34801561037257600080fd5b506101b9600160a060020a0360043516602435610780565b34801561039657600080fd5b506101f9600160a060020a0360043581169060243516610796565b3480156103bd57600080fd5b506101e2600160a060020a03600435166107c1565b3480156103de57600080fd5b506101e2600160a060020a03600435166107e0565b60408051808201909152600a81527f5768656e48756e67727900000000000000000000000000000000000000000000602082015281565b6000600160a060020a038316151561044157600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60075442116104b657600080fd5b6006546005546104cf91600160a060020a0316906108ed565b565b60025490565b600160a060020a038316600090815260016020908152604080832033845290915281205482111561050757600080fd5b600160a060020a038416600090815260016020908152604080832033845290915290205461053b908363ffffffff61099716565b600160a060020a038516600090815260016020908152604080832033845290915290205561056a8484846109ae565b5060019392505050565b600081565b600c54600160a060020a031681565b6000600160a060020a038316151561059f57600080fd5b336000908152600160209081526040808320600160a060020a03871684529091529020546105d3908363ffffffff610aa016565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600c5474010000000000000000000000000000000000000000900460ff1681565b600160a060020a031660009081526020819052604090205490565b61067c6106ed565b151561068757600080fd5b600354604051600091600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600160a060020a031690565b600354600160a060020a0316331490565b60408051808201909152600381527f5748590000000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a038316151561074c57600080fd5b336000908152600160209081526040808320600160a060020a03871684529091529020546105d3908363ffffffff61099716565b600061078d3384846109ae565b50600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6107c96106ed565b15156107d457600080fd5b6107dd81610ab9565b50565b6107e86106ed565b15156107f357600080fd5b600160a060020a038116151561080857600080fd5b600c5474010000000000000000000000000000000000000000900460ff161561083057600080fd5b600c805474ff000000000000000000000000000000000000000019600160a060020a0380851673ffffffffffffffffffffffffffffffffffffffff19909316929092171674010000000000000000000000000000000000000000179182905560045461089f92909116906108ed565b600c5460045460408051600160a060020a039093168352602083019190915280517f34939b1f97b84ad81d93615163dc2adea89e7a7cde5dc6bcb1bbd26f54929da49281900390910190a150565b600160a060020a038216151561090257600080fd5b600254610915908263ffffffff610aa016565b600255600160a060020a038216600090815260208190526040902054610941908263ffffffff610aa016565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600080838311156109a757600080fd5b5050900390565b600160a060020a0383166000908152602081905260409020548111156109d357600080fd5b600160a060020a03821615156109e857600080fd5b600160a060020a038316600090815260208190526040902054610a11908263ffffffff61099716565b600160a060020a038085166000908152602081905260408082209390935590841681522054610a46908263ffffffff610aa016565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600082820183811015610ab257600080fd5b9392505050565b600160a060020a0381161515610ace57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058202db33381b0060f7f3b3b7acd5669064d0e81d6c373bc794aa2c2d49aa621796600298be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e00000000000000000000000008cffc6082e5e756dfab8b7cffa31aa7c1071db26",
  "constructorArguments": "0000000000000000000000008cffc6082e5e756dfab8b7cffa31aa7c1071db26"
}