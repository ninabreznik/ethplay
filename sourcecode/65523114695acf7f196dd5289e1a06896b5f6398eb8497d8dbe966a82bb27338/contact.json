{
  "address": "0x7367a68039d4704f30bfbf6d948020c3b07dfc59",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Beercoin",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-12\n*/\n\npragma solidity ^0.4.19;\n\n\n/**\n * A contract containing the fundamental state variables of the Beercoin\n */\ncontract InternalBeercoin {\n    // As 18 decimal places will be used, the constants are multiplied by 10^18\n    uint256 internal constant INITIAL_SUPPLY = 15496000000 * 10**18;\n    uint256 internal constant DIAMOND_VALUE = 10000 * 10**18;\n    uint256 internal constant GOLD_VALUE = 100 * 10**18;\n    uint256 internal constant SILVER_VALUE = 10 * 10**18;\n    uint256 internal constant BRONZE_VALUE = 1 * 10**18;\n\n    // In addition to the initial total supply of 15496000000 Beercoins,\n    // more Beercoins will only be added by scanning bottle caps.\n    // 20800000000 bottle caps will be eventually produced.\n    //\n    // Within 10000 bottle caps,\n    // 1 (i.e. every 10000th cap in total) has a value of 10000 (\"Diamond\") Beercoins,\n    // 9 (i.e. every 1000th cap in total) have a value of 100 (\"Gold\") Beercoins,\n    // 990 (i.e. every 10th cap in total) have a value of 10 (\"Silver\") Beercoins,\n    // 9000 (i.e. every remaining cap) have a value of 1 (\"Bronze\") Beercoin.\n    //\n    // Therefore one bottle cap has an average Beercoin value of\n    // (1 * 10000 + 9 * 100 + 990 * 10 + 9000 * 1) / 10000 = 2.98.\n    //\n    // This means the total Beercoin value of all bottle caps that will\n    // be eventually produced equals 20800000000 * 2.98 = 61984000000.\n    uint64 internal producibleCaps = 20800000000;\n\n    // The  amounts of diamond, gold, silver, and bronze caps are stored\n    // as a single 256-bit value divided into four sections of 64 bits.\n    //\n    // Bits 255 to 192 are used for the amount of diamond caps,\n    // bits 191 to 128 are used for the amount of gold caps,\n    // bits 127 to 64 are used for the amount of silver caps,\n    // bits 63 to 0 are used for the amount of bronze caps.\n    //\n    // For example, the following numbers represent a single cap of a certain type:\n    // 0x0000000000000001000000000000000000000000000000000000000000000000 (diamond)\n    // 0x0000000000000000000000000000000100000000000000000000000000000000 (gold)\n    // 0x0000000000000000000000000000000000000000000000010000000000000000 (silver)\n    // 0x0000000000000000000000000000000000000000000000000000000000000001 (bronze)\n    uint256 internal packedProducedCaps = 0;\n    uint256 internal packedScannedCaps = 0;\n\n    // The amount of irreversibly burnt Beercoins\n    uint256 internal burntValue = 0;\n}\n\n\n/**\n * A contract containing functions to understand the packed low-level data\n */\ncontract ExplorableBeercoin is InternalBeercoin {\n    /**\n     * The amount of caps that can still be produced\n     */\n    function unproducedCaps() public view returns (uint64) {\n        return producibleCaps;\n    }\n\n    /**\n     * The amount of caps that is produced but not yet scanned\n     */\n    function unscannedCaps() public view returns (uint64) {\n        uint256 caps = packedProducedCaps - packedScannedCaps;\n        uint64 amount = uint64(caps >> 192);\n        amount += uint64(caps >> 128);\n        amount += uint64(caps >> 64);\n        amount += uint64(caps);\n        return amount;\n    }\n\n    /**\n     * The amount of all caps produced so far\n     */\n    function producedCaps() public view returns (uint64) {\n        uint256 caps = packedProducedCaps;\n        uint64 amount = uint64(caps >> 192);\n        amount += uint64(caps >> 128);\n        amount += uint64(caps >> 64);\n        amount += uint64(caps);\n        return amount;\n    }\n\n    /**\n     * The amount of all caps scanned so far\n     */\n    function scannedCaps() public view returns (uint64) {\n        uint256 caps = packedScannedCaps;\n        uint64 amount = uint64(caps >> 192);\n        amount += uint64(caps >> 128);\n        amount += uint64(caps >> 64);\n        amount += uint64(caps);\n        return amount;\n    }\n\n    /**\n     * The amount of diamond caps produced so far\n     */\n    function producedDiamondCaps() public view returns (uint64) {\n        return uint64(packedProducedCaps >> 192);\n    }\n\n    /**\n     * The amount of diamond caps scanned so far\n     */\n    function scannedDiamondCaps() public view returns (uint64) {\n        return uint64(packedScannedCaps >> 192);\n    }\n\n    /**\n     * The amount of gold caps produced so far\n     */\n    function producedGoldCaps() public view returns (uint64) {\n        return uint64(packedProducedCaps >> 128);\n    }\n\n    /**\n     * The amount of gold caps scanned so far\n     */\n    function scannedGoldCaps() public view returns (uint64) {\n        return uint64(packedScannedCaps >> 128);\n    }\n\n    /**\n     * The amount of silver caps produced so far\n     */\n    function producedSilverCaps() public view returns (uint64) {\n        return uint64(packedProducedCaps >> 64);\n    }\n\n    /**\n     * The amount of silver caps scanned so far\n     */\n    function scannedSilverCaps() public view returns (uint64) {\n        return uint64(packedScannedCaps >> 64);\n    }\n\n    /**\n     * The amount of bronze caps produced so far\n     */\n    function producedBronzeCaps() public view returns (uint64) {\n        return uint64(packedProducedCaps);\n    }\n\n    /**\n     * The amount of bronze caps scanned so far\n     */\n    function scannedBronzeCaps() public view returns (uint64) {\n        return uint64(packedScannedCaps);\n    }\n}\n\n\n/**\n * A contract implementing all standard ERC20 functionality for the Beercoin\n */\ncontract ERC20Beercoin is ExplorableBeercoin {\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    mapping (address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowances;\n\n    /**\n     * Beercoin's name\n     */\n    function name() public pure returns (string) {\n        return \"Beercoin\";\n    }\n\n    /**\n     * Beercoin's symbol\n     */\n    function symbol() public pure returns (string) {\n        return \"🍺\";\n    }\n\n    /**\n     * Beercoin's decimal places\n     */\n    function decimals() public pure returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * The current total supply of Beercoins\n     */\n    function totalSupply() public view returns (uint256) {\n        uint256 caps = packedScannedCaps;\n        uint256 supply = INITIAL_SUPPLY;\n        supply += (caps >> 192) * DIAMOND_VALUE;\n        supply += ((caps >> 128) & 0xFFFFFFFFFFFFFFFF) * GOLD_VALUE;\n        supply += ((caps >> 64) & 0xFFFFFFFFFFFFFFFF) * SILVER_VALUE;\n        supply += (caps & 0xFFFFFFFFFFFFFFFF) * BRONZE_VALUE;\n        return supply - burntValue;\n    }\n\n    /**\n     * Check the balance of a Beercoin user\n     *\n     * @param _owner the user to check\n     */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    /**\n     * Transfer Beercoins to another user\n     *\n     * @param _to the address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != 0x0);\n\n        uint256 balanceFrom = balances[msg.sender];\n\n        require(_value <= balanceFrom);\n\n        uint256 oldBalanceTo = balances[_to];\n        uint256 newBalanceTo = oldBalanceTo + _value;\n\n        require(oldBalanceTo <= newBalanceTo);\n\n        balances[msg.sender] = balanceFrom - _value;\n        balances[_to] = newBalanceTo;\n\n        Transfer(msg.sender, _to, _value);\n\n        return true;\n    }\n\n    /**\n     * Transfer Beercoins from other address if a respective allowance exists\n     *\n     * @param _from the address of the sender\n     * @param _to the address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != 0x0);\n\n        uint256 balanceFrom = balances[_from];\n        uint256 allowanceFrom = allowances[_from][msg.sender];\n\n        require(_value <= balanceFrom);\n        require(_value <= allowanceFrom);\n\n        uint256 oldBalanceTo = balances[_to];\n        uint256 newBalanceTo = oldBalanceTo + _value;\n\n        require(oldBalanceTo <= newBalanceTo);\n\n        balances[_from] = balanceFrom - _value;\n        balances[_to] = newBalanceTo;\n        allowances[_from][msg.sender] = allowanceFrom - _value;\n\n        Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    /**\n     * Allow another user to spend a certain amount of Beercoins on your behalf\n     *\n     * @param _spender the address of the user authorized to spend\n     * @param _value the maximum amount that can be spent on your behalf\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowances[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * The amount of Beercoins that can be spent by a user on behalf of another\n     *\n     * @param _owner the address of the user user whose Beercoins are spent\n     * @param _spender the address of the user who executes the transaction\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowances[_owner][_spender];\n    }\n}\n\n\n/**\n * A contract that defines a master with special debiting abilities\n * required for operating a user-friendly Beercoin redemption system\n */\ncontract MasteredBeercoin is ERC20Beercoin {\n    address internal beercoinMaster;\n    mapping (address => bool) internal directDebitAllowances;\n\n    /**\n     * Construct the MasteredBeercoin contract\n     * and make the sender the master\n     */\n    function MasteredBeercoin() public {\n        beercoinMaster = msg.sender;\n    }\n\n    /**\n     * Restrict to the master only\n     */\n    modifier onlyMaster {\n        require(msg.sender == beercoinMaster);\n        _;\n    }\n\n    /**\n     * The master of the Beercoin\n     */\n    function master() public view returns (address) {\n        return beercoinMaster;\n    }\n\n    /**\n     * Declare a master at another address\n     *\n     * @param newMaster the new owner's address\n     */\n    function declareNewMaster(address newMaster) public onlyMaster {\n        beercoinMaster = newMaster;\n    }\n\n    /**\n     * Allow the master to withdraw Beercoins from your\n     * account so you don't have to send Beercoins yourself\n     */\n    function allowDirectDebit() public {\n        directDebitAllowances[msg.sender] = true;\n    }\n\n    /**\n     * Forbid the master to withdraw Beercoins from you account\n     */\n    function forbidDirectDebit() public {\n        directDebitAllowances[msg.sender] = false;\n    }\n\n    /**\n     * Check whether a user allows direct debits by the master\n     *\n     * @param user the user to check\n     */\n    function directDebitAllowance(address user) public view returns (bool) {\n        return directDebitAllowances[user];\n    }\n\n    /**\n     * Withdraw Beercoins from multiple users\n     *\n     * Beercoins are only withdrawn this way if and only if\n     * a user deliberately wants it to happen by initiating\n     * a transaction on a plattform operated by the owner\n     *\n     * @param users the addresses of the users to take Beercoins from\n     * @param values the respective amounts to take\n     */\n    function debit(address[] users, uint256[] values) public onlyMaster returns (bool) {\n        require(users.length == values.length);\n\n        uint256 oldBalance = balances[msg.sender];\n        uint256 newBalance = oldBalance;\n\n        address currentUser;\n        uint256 currentValue;\n        uint256 currentBalance;\n        for (uint256 i = 0; i < users.length; ++i) {\n            currentUser = users[i];\n            currentValue = values[i];\n            currentBalance = balances[currentUser];\n\n            require(directDebitAllowances[currentUser]);\n            require(currentValue <= currentBalance);\n            balances[currentUser] = currentBalance - currentValue;\n            \n            newBalance += currentValue;\n\n            Transfer(currentUser, msg.sender, currentValue);\n        }\n\n        require(oldBalance <= newBalance);\n        balances[msg.sender] = newBalance;\n\n        return true;\n    }\n\n    /**\n     * Withdraw Beercoins from multiple users\n     *\n     * Beercoins are only withdrawn this way if and only if\n     * a user deliberately wants it to happen by initiating\n     * a transaction on a plattform operated by the owner\n     *\n     * @param users the addresses of the users to take Beercoins from\n     * @param value the amount to take from each user\n     */\n    function debitEqually(address[] users, uint256 value) public onlyMaster returns (bool) {\n        uint256 oldBalance = balances[msg.sender];\n        uint256 newBalance = oldBalance + (users.length * value);\n\n        require(oldBalance <= newBalance);\n        balances[msg.sender] = newBalance;\n\n        address currentUser;\n        uint256 currentBalance;\n        for (uint256 i = 0; i < users.length; ++i) {\n            currentUser = users[i];\n            currentBalance = balances[currentUser];\n\n            require(directDebitAllowances[currentUser]);\n            require(value <= currentBalance);\n            balances[currentUser] = currentBalance - value;\n\n            Transfer(currentUser, msg.sender, value);\n        }\n\n        return true;\n    }\n\n    /**\n     * Send Beercoins to multiple users\n     *\n     * @param users the addresses of the users to send Beercoins to\n     * @param values the respective amounts to send\n     */\n    function credit(address[] users, uint256[] values) public onlyMaster returns (bool) {\n        require(users.length == values.length);\n\n        uint256 balance = balances[msg.sender];\n        uint256 totalValue = 0;\n\n        address currentUser;\n        uint256 currentValue;\n        uint256 currentOldBalance;\n        uint256 currentNewBalance;\n        for (uint256 i = 0; i < users.length; ++i) {\n            currentUser = users[i];\n            currentValue = values[i];\n            currentOldBalance = balances[currentUser];\n            currentNewBalance = currentOldBalance + currentValue;\n\n            require(currentOldBalance <= currentNewBalance);\n            balances[currentUser] = currentNewBalance;\n\n            totalValue += currentValue;\n\n            Transfer(msg.sender, currentUser, currentValue);\n        }\n\n        require(totalValue <= balance);\n        balances[msg.sender] = balance - totalValue;\n\n        return true;\n    }\n\n    /**\n     * Send Beercoins to multiple users\n     *\n     * @param users the addresses of the users to send Beercoins to\n     * @param value the amounts to send to each user\n     */\n    function creditEqually(address[] users, uint256 value) public onlyMaster returns (bool) {\n        uint256 balance = balances[msg.sender];\n        uint256 totalValue = users.length * value;\n\n        require(totalValue <= balance);\n        balances[msg.sender] = balance - totalValue;\n\n        address currentUser;\n        uint256 currentOldBalance;\n        uint256 currentNewBalance;\n        for (uint256 i = 0; i < users.length; ++i) {\n            currentUser = users[i];\n            currentOldBalance = balances[currentUser];\n            currentNewBalance = currentOldBalance + value;\n\n            require(currentOldBalance <= currentNewBalance);\n            balances[currentUser] = currentNewBalance;\n\n            Transfer(msg.sender, currentUser, value);\n        }\n\n        return true;\n    }\n}\n\n\n/**\n * A contract that defines the central business logic\n * which also mirrors the life of a Beercoin\n */\ncontract Beercoin is MasteredBeercoin {\n    event Produce(uint256 newCaps);\n    event Scan(address[] users, uint256[] caps);\n    event Burn(uint256 value);\n\n    /**\n     * Construct the Beercoin contract and\n     * assign the initial supply to the creator\n     */\n    function Beercoin() public {\n        balances[msg.sender] = INITIAL_SUPPLY;\n    }\n\n    /**\n     * Increase the amounts of produced diamond, gold, silver, and\n     * bronze bottle caps in respect to their occurrence probabilities\n     *\n     * This function is called if and only if a brewery has actually\n     * ordered codes to produce the specified amount of bottle caps\n     *\n     * @param numberOfCaps the number of bottle caps to be produced\n     */\n    function produce(uint64 numberOfCaps) public onlyMaster returns (bool) {\n        require(numberOfCaps <= producibleCaps);\n\n        uint256 producedCaps = packedProducedCaps;\n\n        uint64 targetTotalCaps = numberOfCaps;\n        targetTotalCaps += uint64(producedCaps >> 192);\n        targetTotalCaps += uint64(producedCaps >> 128);\n        targetTotalCaps += uint64(producedCaps >> 64);\n        targetTotalCaps += uint64(producedCaps);\n\n        uint64 targetDiamondCaps = (targetTotalCaps - (targetTotalCaps % 10000)) / 10000;\n        uint64 targetGoldCaps = ((targetTotalCaps - (targetTotalCaps % 1000)) / 1000) - targetDiamondCaps;\n        uint64 targetSilverCaps = ((targetTotalCaps - (targetTotalCaps % 10)) / 10) - targetDiamondCaps - targetGoldCaps;\n        uint64 targetBronzeCaps = targetTotalCaps - targetDiamondCaps - targetGoldCaps - targetSilverCaps;\n\n        uint256 targetProducedCaps = 0;\n        targetProducedCaps |= uint256(targetDiamondCaps) << 192;\n        targetProducedCaps |= uint256(targetGoldCaps) << 128;\n        targetProducedCaps |= uint256(targetSilverCaps) << 64;\n        targetProducedCaps |= uint256(targetBronzeCaps);\n\n        producibleCaps -= numberOfCaps;\n        packedProducedCaps = targetProducedCaps;\n\n        Produce(targetProducedCaps - producedCaps);\n\n        return true;\n    }\n\n    /**\n     * Approve scans of multiple users and grant Beercoins\n     *\n     * This function is called periodically to mass-transfer Beercoins to\n     * multiple users if and only if each of them has scanned codes that\n     * our server has never verified before for the same or another user\n     *\n     * @param users the addresses of the users who scanned valid codes\n     * @param caps the amounts of caps the users have scanned as single 256-bit values\n     */\n    function scan(address[] users, uint256[] caps) public onlyMaster returns (bool) {\n        require(users.length == caps.length);\n\n        uint256 scannedCaps = packedScannedCaps;\n\n        uint256 currentCaps;\n        uint256 capsValue;\n        for (uint256 i = 0; i < users.length; ++i) {\n            currentCaps = caps[i];\n\n            capsValue = DIAMOND_VALUE * (currentCaps >> 192);\n            capsValue += GOLD_VALUE * ((currentCaps >> 128) & 0xFFFFFFFFFFFFFFFF);\n            capsValue += SILVER_VALUE * ((currentCaps >> 64) & 0xFFFFFFFFFFFFFFFF);\n            capsValue += BRONZE_VALUE * (currentCaps & 0xFFFFFFFFFFFFFFFF);\n\n            balances[users[i]] += capsValue;\n            scannedCaps += currentCaps;\n        }\n\n        require(scannedCaps <= packedProducedCaps);\n        packedScannedCaps = scannedCaps;\n\n        Scan(users, caps);\n\n        return true;\n    }\n\n    /**\n     * Remove Beercoins from the system irreversibly\n     *\n     * @param value the amount of Beercoins to burn\n     */\n    function burn(uint256 value) public onlyMaster returns (bool) {\n        uint256 balance = balances[msg.sender];\n        require(value <= balance);\n\n        balances[msg.sender] = balance - value;\n        burntValue += value;\n\n        Burn(value);\n\n        return true;\n    }\n}",
  "bytecode": "60606040526000805467ffffffffffffffff19166404d7c6d00017815560018190556002819055600355341561003457600080fd5b60068054600160a060020a033316600160a060020a0319909116811790915560009081526004602052604090206b3211fda33de48ff98800000090556116258061007f6000396000f3006060604052600436106101a05763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630628769381146101a557806306fdde03146101d857806307336e3514610262578063095ea7b3146102925780630e53bf67146102b457806318160ddd146102c75780631b2212f5146102ec57806323b872dd14610301578063266fc4361461032957806330e6c3331461033c578063313ce5671461034f57806342966c681461037857806344b88a6d1461038e5780634509052f146103a15780634b2f9eb7146103b457806367ea43bd146103d35780636854df55146103e65780636f7495cb146103f95780636fbf466c1461040c57806370a082311461041f5780637634ecc01461043e57806378ec0adf1461048f57806383b40eb7146104a257806395d89b41146104f357806397c06deb146105065780639933a24a14610595578063a534a920146105a8578063a9059cbb14610637578063bc25415c14610659578063bf3da86514610679578063c89b50c71461068c578063dd62ed3e1461071b578063ee97f7f314610740575b600080fd5b34156101b057600080fd5b6101c4600160a060020a036004351661076f565b604051901515815260200160405180910390f35b34156101e357600080fd5b6101eb61078d565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561022757808201518382015260200161020f565b50505050905090810190601f1680156102545780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561026d57600080fd5b6102756107ce565b60405167ffffffffffffffff909116815260200160405180910390f35b341561029d57600080fd5b6101c4600160a060020a03600435166024356107f1565b34156102bf57600080fd5b61027561085d565b34156102d257600080fd5b6102da61086a565b60405190815260200160405180910390f35b34156102f757600080fd5b6102ff6108e3565b005b341561030c57600080fd5b6101c4600160a060020a0360043581169060243516604435610905565b341561033457600080fd5b610275610a14565b341561034757600080fd5b610275610a26565b341561035a57600080fd5b610362610a33565b60405160ff909116815260200160405180910390f35b341561038357600080fd5b6101c4600435610a38565b341561039957600080fd5b610275610ae2565b34156103ac57600080fd5b610275610ae8565b34156103bf57600080fd5b6102ff600160a060020a0360043516610b0b565b34156103de57600080fd5b610275610b55565b34156103f157600080fd5b610275610b5b565b341561040457600080fd5b610275610b68565b341561041757600080fd5b610275610b78565b341561042a57600080fd5b6102da600160a060020a0360043516610ba2565b341561044957600080fd5b6101c460046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437509496505093359350610bbd92505050565b341561049a57600080fd5b610275610cf2565b34156104ad57600080fd5b6101c460046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437509496505093359350610d0492505050565b34156104fe57600080fd5b6101eb610e25565b341561051157600080fd5b6101c4600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843750949650610e6695505050505050565b34156105a057600080fd5b6102ff610fc3565b34156105b357600080fd5b6101c4600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843750949650610fe895505050505050565b341561064257600080fd5b6101c4600160a060020a03600435166024356111c7565b341561066457600080fd5b6101c467ffffffffffffffff6004351661128e565b341561068457600080fd5b610275611435565b341561069757600080fd5b6101c460046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965061144295505050505050565b341561072657600080fd5b6102da600160a060020a036004358116906024351661158d565b341561074b57600080fd5b6107536115b8565b604051600160a060020a03909116815260200160405180910390f35b600160a060020a031660009081526007602052604090205460ff1690565b6107956115c7565b60408051908101604052600881527f42656572636f696e0000000000000000000000000000000000000000000000006020820152905090565b60015460c060020a8104608060020a820401680100000000000000008204010190565b600160a060020a03338116600081815260056020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60015460c060020a900490565b60025460035467ffffffffffffffff808316670de0b6b3a7640000026801000000000000000084048216678ac7230489e8000002608060020a85049290921668056bc75e2d631000000260c060020a90940469021e19e0c9bab240000002939093010191909101036b3211fda33de48ff9880000000190565b600160a060020a0333166000908152600760205260409020805460ff19169055565b600080808080600160a060020a038716151561092057600080fd5b600160a060020a03808916600090815260046020908152604080832054600583528184203390951684529390915290205490945092508386111561096357600080fd5b8286111561097057600080fd5b5050600160a060020a0385166000908152600460205260409020548481018082111561099b57600080fd5b600160a060020a0380891660008181526004602090815260408083208b8a0390558b851680845281842087905584845260058352818420339096168452949091529081902089870390556000805160206115da8339815191529089905190815260200160405180910390a3506001979650505050505050565b60015468010000000000000000900490565b600154608060020a900490565b601290565b600654600090819033600160a060020a03908116911614610a5857600080fd5b50600160a060020a03331660009081526004602052604090205480831115610a7f57600080fd5b600160a060020a03331660009081526004602052604090819020848303905560038054850190557fb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb9084905190815260200160405180910390a150600192915050565b60025490565b60025460c060020a8104608060020a820401680100000000000000008204010190565b60065433600160a060020a03908116911614610b2657600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60015490565b60025460c060020a900490565b60005467ffffffffffffffff1690565b60025460015460c060020a919003908104608060020a820401680100000000000000008204010190565b600160a060020a031660009081526004602052604090205490565b6006546000908190819081908190819033600160a060020a03908116911614610be557600080fd5b600160a060020a0333166000908152600460205260409020549450868851028501935083851115610c1557600080fd5b50600160a060020a03331660009081526004602052604081208490555b8751811015610ce457878181518110610c4757fe5b90602001906020020151600160a060020a038116600090815260046020908152604080832054600790925290912054919450925060ff161515610c8957600080fd5b81871115610c9657600080fd5b600160a060020a03808416600081815260046020526040908190208a8603905533909216916000805160206115da833981519152908a905190815260200160405180910390a3600101610c32565b506001979650505050505050565b60025468010000000000000000900490565b60065460009081908190819081908190819033600160a060020a03908116911614610d2e57600080fd5b600160a060020a033316600090815260046020526040902054955087895102945085851115610d5c57600080fd5b50600160a060020a033316600090815260046020526040812085870390555b8851811015610e1657888181518110610d9057fe5b90602001906020020151600160a060020a0381166000908152600460205260409020549094509250878301915081831115610dca57600080fd5b600160a060020a038085166000818152600460205260409081902085905590913316906000805160206115da833981519152908b905190815260200160405180910390a3600101610d7b565b50600198975050505050505050565b610e2d6115c7565b60408051908101604052600481527ff09f8dba000000000000000000000000000000000000000000000000000000006020820152905090565b60065460009081908190819081908190819033600160a060020a03908116911614610e9057600080fd5b8751895114610e9e57600080fd5b50600160a060020a03331660009081526004602052604081205495508594505b8851811015610f8c57888181518110610ed357fe5b906020019060200201519350878181518110610eeb57fe5b90602001906020020151600160a060020a038516600090815260046020908152604080832054600790925290912054919450925060ff161515610f2d57600080fd5b81831115610f3a57600080fd5b600160a060020a038085166000818152600460205260409081902086860390559685019633909216916000805160206115da8339815191529086905190815260200160405180910390a3600101610ebe565b84861115610f9957600080fd5b50505033600160a060020a0316600090815260046020526040902091909155506001949350505050565b600160a060020a0333166000908152600760205260409020805460ff19166001179055565b600654600090819081908190819033600160a060020a0390811691161461100e57600080fd5b855187511461101c57600080fd5b50600254925060005b86518110156110eb5785818151811061103a57fe5b90602001906020020151925060c060020a830469021e19e0c9bab240000002608060020a840467ffffffffffffffff90811668056bc75e2d6310000002919091016801000000000000000085048216678ac7230489e800000201908416670de0b6b3a76400000201915081600460008984815181106110b557fe5b90602001906020020151600160a060020a0316815260208101919091526040016000208054909101905592820192600101611025565b6001548411156110fa57600080fd5b60028490557fdf9f92fb62c3da8cef6b817fa08d8a9fbd8726964b86a3640e35ba7df533b6298787604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561116657808201518382015260200161114e565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156111a557808201518382015260200161118d565b5050505090500194505050505060405180910390a15060019695505050505050565b6000808080600160a060020a03861615156111e157600080fd5b600160a060020a03331660009081526004602052604090205492508285111561120957600080fd5b5050600160a060020a0384166000908152600460205260409020548381018082111561123457600080fd5b600160a060020a03338116600081815260046020526040808220898803905592891680825290839020849055916000805160206115da8339815191529088905190815260200160405180910390a350600195945050505050565b600654600090819081908190819081908190819033600160a060020a039081169116146112ba57600080fd5b60005467ffffffffffffffff908116908a1611156112d757600080fd5b600154965060c060020a87048901608060020a880401680100000000000000008804018701955061271067ffffffffffffffff808816829006880316049450846103e867ffffffffffffffff888116829006890316040393508385600a67ffffffffffffffff8981168290068a031604030392508284868803030391506000905060c08567ffffffffffffffff169060020a028117905060808467ffffffffffffffff169060020a028117905060408367ffffffffffffffff169060020a02811790508167ffffffffffffffff1681179050886000808282829054906101000a900467ffffffffffffffff160392506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550806001819055507f8e47a7a9f75060856558083a56a8969ecca26177786055e4f3a0d2eea227d67787820360405190815260200160405180910390a150600198975050505050505050565b600254608060020a900490565b600654600090819081908190819081908190819033600160a060020a0390811691161461146e57600080fd5b88518a511461147c57600080fd5b50600160a060020a03331660009081526004602052604081205496509450845b8951811015611553578981815181106114b157fe5b9060200190602002015194508881815181106114c957fe5b90602001906020020151600160a060020a038616600090815260046020526040902054909450925082840191508183111561150357600080fd5b600160a060020a03808616600081815260046020526040908190208590559786019790913316906000805160206115da8339815191529087905190815260200160405180910390a360010161149c565b8686111561156057600080fd5b50505033600160a060020a0316600090815260046020526040902092909303909155506001949350505050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b600654600160a060020a031690565b602060405190810160405260008152905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820bc9f64cea4d31ef8a9ad99d5a705b573f2beab4f553f567d78d8e32a4be400170029"
}