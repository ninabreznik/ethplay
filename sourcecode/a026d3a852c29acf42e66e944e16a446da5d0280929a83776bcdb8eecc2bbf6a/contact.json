{
  "address": "0x7d99fd84989792885031a2248a32e68b9ce1b877",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "bitgrit",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-18\n*/\n\n// Here's the contract code btw, might as well drop it as it's all that's needed now besides compiler version:\npragma solidity ^0.4.16;\n\n// ---------------------------------------------\n// The specification of the token\n// ---------------------------------------------\n// Name   : bitgrit\n// Symbol : GRIT\n// 18 digits of decimal point\n// The issue upper limit: 1,000,000,000\n// ---------------------------------------------\n\n/* https://github.com/Dexaran/ERC223-token-standard/blob/Recommended/ERC223_Interface.sol */\ncontract ERC223 {\n    uint256 public totalSupply;\n\n    function balanceOf(address who) public view returns (uint256);\n\n    function name() public view returns (string _name);\n    function symbol() public view returns (string _symbol);\n    function decimals() public view returns (uint8 _decimals);\n    function totalSupply() public view returns (uint256 _supply);\n\n    function transfer(address to, uint256 value) public returns (bool ok);\n    function transfer(address to, uint256 value, bytes data) public returns (bool ok);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n}\n\n\n/* https://github.com/LykkeCity/EthereumApiDotNetCore/blob/master/src/ContractBuilder/contracts/token/SafeMath.sol */\ncontract SafeMath {\n    uint256 constant MAX_UINT256 =\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    function safeAdd(uint256 x, uint256 y) pure internal returns (uint256 z) {\n        if (x > MAX_UINT256 - y) revert();\n        return x + y;\n    }\n\n    function safeSub(uint256 x, uint256 y) pure internal returns (uint256 z) {\n        if (x < y) revert();\n        return x - y;\n    }\n\n    function safeMul(uint256 x, uint256 y) pure internal returns (uint256 z) {\n        if (y == 0) return 0;\n        if (x > MAX_UINT256 / y) revert();\n        return x * y;\n    }\n}\n\n\n/* https://github.com/Dexaran/ERC223-token-standard/blob/Recommended/ERC223_Token.sol */\ncontract ERC223Token is ERC223, SafeMath {\n\n    mapping (address => uint256) balances;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    // Function to access name of token .\n    function name() public view returns (string _name) {\n        return name;\n    }\n\n    // Function to access symbol of token .\n    function symbol() public view returns (string _symbol) {\n        return symbol;\n    }\n\n    // Function to access decimals of token .\n    function decimals() public view returns (uint8 _decimals) {\n        return decimals;\n    }\n\n    // Function to access total supply of tokens .\n    function totalSupply() public view returns (uint256 _totalSupply) {\n        return totalSupply;\n    }\n\n    // Function that is called when a user or another contract wants to transfer funds .\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success) {\n\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, _data);\n        }\n        else {\n            return transferToAddress(_to, _value, _data);\n        }\n    }\n\n    // Standard function transfer similar to ERC20 transfer with no _data .\n    // Added due to backwards compatibility reasons .\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n\n        //standard function transfer similar to ERC20 transfer with no _data\n        //added due to backwards compatibility reasons\n        bytes memory empty;\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, empty);\n        }\n        else {\n            return transferToAddress(_to, _value, empty);\n        }\n    }\n\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) private view returns (bool is_contract) {\n        uint256 length;\n        assembly {\n        //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return (length > 0);\n    }\n\n    //function that is called when transaction target is an address\n    function transferToAddress(address _to, uint256 _value, bytes _data) private returns (bool success) {\n        if (balanceOf(msg.sender) < _value) revert();\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n        balances[_to] = safeAdd(balanceOf(_to), _value);\n        emit Transfer(msg.sender, _to, _value);\n        emit Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n\n    //function that is called when transaction target is a contract\n    function transferToContract(address _to, uint256 _value, bytes _data) private returns (bool success) {\n        if (balanceOf(msg.sender) < _value) revert();\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n        balances[_to] = safeAdd(balanceOf(_to), _value);\n        ContractReceiver receiver = ContractReceiver(_to);\n        receiver.tokenFallback(msg.sender, _value, _data);\n        emit Transfer(msg.sender, _to, _value);\n        emit Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n\n\n/* https://github.com/Dexaran/ERC223-token-standard/blob/Recommended/Receiver_Interface.sol */\ncontract ContractReceiver {\n\n    struct TKN {\n        address sender;\n        uint256 value;\n        bytes data;\n        bytes4 sig;\n    }\n\n    function tokenFallback(address _from, uint256 _value, bytes _data) public pure {\n        TKN memory tkn;\n        tkn.sender = _from;\n        tkn.value = _value;\n        tkn.data = _data;\n        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n        tkn.sig = bytes4(u);\n\n        /* tkn variable is analogue of msg variable of Ether transaction\n        *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n        *  tkn.value the number of tokens that were sent   (analogue of msg.value)\n        *  tkn.data is data of token transaction   (analogue of msg.data)\n        *  tkn.sig is 4 bytes signature of function\n        *  if data of token transaction is a function execution\n        */\n    }\n}\n\n\ncontract bitgrit is ERC223Token {\n\n    string public name = \"bitgrit\";\n\n    string public symbol = \"GRIT\";\n\n    uint8 public decimals = 18;\n\n    uint256 public totalSupply = 1000000000 * (10 ** uint256(decimals));\n\n    address public owner;\n\n    // ---------------------------------------------\n    // Modification : Only an owner can carry out.\n    // ---------------------------------------------\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    // ---------------------------------------------\n    // Constructor\n    // ---------------------------------------------\n    function bitgrit() public {\n        // The owner address is maintained.\n        owner = msg.sender;\n\n        // All tokens are allocated to an owner.\n        balances[owner] = totalSupply;\n    }\n\n    // ---------------------------------------------\n    // Destruction of a contract (only owner)\n    // ---------------------------------------------\n    function destory() public onlyOwner {\n        selfdestruct(owner);\n    }\n\n}",
  "bytecode": "606060405260408051908101604052600781527f62697467726974000000000000000000000000000000000000000000000000006020820152600690805161004b9291602001906100fa565b5060408051908101604052600481527f4752495400000000000000000000000000000000000000000000000000000000602082015260079080516100939291602001906100fa565b5060088054601260ff19909116179081905560ff16600a0a633b9aca000260095534156100bf57600080fd5b600a8054600160a060020a03191633600160a060020a0390811691909117918290556009549116600090815260016020526040902055610195565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061013b57805160ff1916838001178555610168565b82800160010185558215610168579182015b8281111561016857825182559160200191906001019061014d565b50610174929150610178565b5090565b61019291905b80821115610174576000815560010161017e565b90565b610886806101a46000396000f3006060604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461009d57806318160ddd14610127578063313ce5671461014c5780636bdebcc91461017557806370a082311461018a5780638da5cb5b146101a957806395d89b41146101d8578063a9059cbb146101eb578063be45fd6214610221575b600080fd5b34156100a857600080fd5b6100b0610286565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100ec5780820151838201526020016100d4565b50505050905090810190601f1680156101195780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013257600080fd5b61013a610324565b60405190815260200160405180910390f35b341561015757600080fd5b61015f61032a565b60405160ff909116815260200160405180910390f35b341561018057600080fd5b610188610333565b005b341561019557600080fd5b61013a600160a060020a036004351661035c565b34156101b457600080fd5b6101bc610377565b604051600160a060020a03909116815260200160405180910390f35b34156101e357600080fd5b6100b0610386565b34156101f657600080fd5b61020d600160a060020a03600435166024356103f1565b604051901515815260200160405180910390f35b341561022c57600080fd5b61020d60048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061042d95505050505050565b60068054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561031c5780601f106102f15761010080835404028352916020019161031c565b820191906000526020600020905b8154815290600101906020018083116102ff57829003601f168201915b505050505081565b60095481565b60085460ff1681565b600a5433600160a060020a0390811691161461034e57600080fd5b600a54600160a060020a0316ff5b600160a060020a031660009081526001602052604090205490565b600a54600160a060020a031681565b60078054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561031c5780601f106102f15761010080835404028352916020019161031c565b60006103fb610848565b61040484610461565b1561041b57610414848483610469565b9150610426565b6104148484836106c2565b5092915050565b600061043884610461565b1561044f57610448848484610469565b905061045a565b6104488484846106c2565b9392505050565b6000903b1190565b600080836104763361035c565b101561048157600080fd5b61049361048d3361035c565b8561081b565b600160a060020a0333166000908152600160205260409020556104be6104b88661035c565b85610830565b600160a060020a03861660008181526001602052604090819020929092558692509063c0ee0b8a90339087908790518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610570578082015183820152602001610558565b50505050905090810190601f16801561059d5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15156105bd57600080fd5b5af115156105ca57600080fd5b50505084600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a3826040518082805190602001908083835b602083106106445780518252601f199092019160209182019101610625565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902085600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c168760405190815260200160405180910390a4506001949350505050565b6000826106ce3361035c565b10156106d957600080fd5b6106eb6106e53361035c565b8461081b565b600160a060020a0333166000908152600160205260409020556107166107108561035c565b84610830565b600160a060020a0380861660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3816040518082805190602001908083835b6020831061079e5780518252601f19909201916020918201910161077f565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902084600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c168660405190815260200160405180910390a45060019392505050565b60008183101561082a57600080fd5b50900390565b6000816000190383111561084357600080fd5b500190565b602060405190810160405260008152905600a165627a7a72305820db2437ccd8a9d9152508de06806bcf44dba4caa65aa71d8722af29ad75286d7f0029"
}