{
  "address": "0x35903ee62c0bd764bde4cf3b73f7b44643800f4c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PCToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-13\n*/\n\npragma solidity ^0.4.24;\ncontract ERC20 {\n  function totalSupply() public view returns (uint256);\n\n  function balanceOf(address _who) public view returns (uint256);\n\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transfer(address _to, uint256 _value) public returns (bool);\n\n  function approve(address _spender, uint256 _value)\n    public returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\ninterface TokenRecipient {\n  function receiveApproval(address _sender, uint256 _value,  bytes _data) external returns (bool ok);\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    uint256 c = _a * _b;\n    assert(c / _a == _b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    uint256 c = _a - _b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    uint256 c = _a + _b;\n    assert(c >= _a);\n\n    return c;\n  }\n\n  /**\n   * @dev gives square root of given x.\n   */\n  function sqrt(uint256 x)\n      internal\n      pure\n      returns (uint256 y)\n  {\n      uint256 z = ((add(x,1)) / 2);\n      y = x;\n      while (z < y)\n      {\n          y = z;\n          z = ((add((x / z),z)) / 2);\n      }\n  }\n\n  /**\n   * @dev gives square. multiplies x by x\n   */\n  function sq(uint256 x)\n      internal\n      pure\n      returns (uint256)\n  {\n      return (mul(x,x));\n  }\n\n  /**\n   * @dev x to the power of y\n   */\n  function pwr(uint256 x, uint256 y)\n      internal\n      pure\n      returns (uint256)\n  {\n      if (x==0)\n          return (0);\n      else if (y==0)\n          return (1);\n      else\n      {\n          uint256 z = x;\n          for (uint256 i=1; i < y; i++)\n              z = mul(z,x);\n          return (z);\n      }\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20 {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n\n  function transferContract(address _to, uint256 _value, bytes _data) public\n    returns (bool success)\n  {\n    bool isContract = false;\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n      isContract := not(iszero(extcodesize(_to)))\n    }\n    if (isContract) {\n      transfer(_to, _value);\n      TokenRecipient receiver = TokenRecipient(_to);\n      require(receiver.receiveApproval(msg.sender, _value, _data));//call another contract\n    }\n    return isContract;\n  }\n\n  /*\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n      TokenRecipient spender = TokenRecipient(_spender);\n      if (approve(_spender, _value)) {\n          spender.receiveApproval(msg.sender, _value, this, _extraData);\n          return true;\n      }\n  }\n  */\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param _from address The address which you want to send tokens from\n   * @param _value uint256 The amount of token to be burned\n   */\n  function burnFrom(address _from, uint256 _value) public {\n    require(_value <= allowed[_from][msg.sender]);\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    _burn(_from, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n\ncontract PCToken is BurnableToken {\n\n//  using SafeMath for uint256;\n  // metadata\n  string public constant name = \"PetCraftToken\";\n  string public constant symbol = \"PCTOKEN\";\n  uint256 public constant decimals = 18;\n  string public version = \"1.0\";\n\n  // deposit address\n  address public inGameRewardAddress;\n  address public developerAddress;\n\n  // constructor\n  constructor(address _financeContract) public {\n      require(_financeContract != address(0));\n      inGameRewardAddress = _financeContract;\n      developerAddress = msg.sender;\n\n      balances[inGameRewardAddress] = 300000000 * 10**uint(decimals);\n      balances[developerAddress] = 1200000000 * 10**uint(decimals);\n      totalSupply_ = balances[inGameRewardAddress]  + balances[developerAddress];\n  }\n}",
  "bytecode": "60c0604052600360808190527f312e30000000000000000000000000000000000000000000000000000000000060a090815261003c9190816100ef565b5034801561004957600080fd5b50604051602080610e568339810160405251600160a060020a038116151561007057600080fd5b60048054600160a060020a03928316600160a060020a031991821617808355600580549092163317825583166000908152602081905260408082206af8277896582678ac00000090558254851682528082206b03e09de2596099e2b000000090559154841681528181205492549093168352909120540160025561018a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061013057805160ff191683800117855561015d565b8280016001018555821561015d579182015b8281111561015d578251825591602001919060010190610142565b5061016992915061016d565b5090565b61018791905b808211156101695760008155600101610173565b90565b610cbd806101996000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f57806318160ddd146101b757806323b872dd146101de578063313ce5671461020857806342966c681461021d57806354fd4d5014610237578063661884631461024c57806370a082311461027057806379cc67901461029157806395d89b41146102b5578063a33b2d62146102ca578063a9059cbb14610333578063caccd7f714610357578063d73dd62314610388578063dd62ed3e146103ac578063f0a2c430146103d3575b600080fd5b34801561010157600080fd5b5061010a6103e8565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014457818101518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018b57600080fd5b506101a3600160a060020a036004351660243561041f565b604080519115158252519081900360200190f35b3480156101c357600080fd5b506101cc610485565b60408051918252519081900360200190f35b3480156101ea57600080fd5b506101a3600160a060020a036004358116906024351660443561048b565b34801561021457600080fd5b506101cc610600565b34801561022957600080fd5b50610235600435610605565b005b34801561024357600080fd5b5061010a610612565b34801561025857600080fd5b506101a3600160a060020a03600435166024356106a0565b34801561027c57600080fd5b506101cc600160a060020a036004351661078f565b34801561029d57600080fd5b50610235600160a060020a03600435166024356107aa565b3480156102c157600080fd5b5061010a610840565b3480156102d657600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101a3948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506108779650505050505050565b34801561033f57600080fd5b506101a3600160a060020a03600435166024356109a5565b34801561036357600080fd5b5061036c610a84565b60408051600160a060020a039092168252519081900360200190f35b34801561039457600080fd5b506101a3600160a060020a0360043516602435610a93565b3480156103b857600080fd5b506101cc600160a060020a0360043581169060243516610b2c565b3480156103df57600080fd5b5061036c610b57565b60408051808201909152600d81527f5065744372616674546f6b656e00000000000000000000000000000000000000602082015281565b336000818152600160209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60025490565b600160a060020a0383166000908152602081905260408120548211156104b057600080fd5b600160a060020a03841660009081526001602090815260408083203384529091529020548211156104e057600080fd5b600160a060020a03831615156104f557600080fd5b600160a060020a03841660009081526020819052604090205461051e908363ffffffff610b6616565b600160a060020a038086166000908152602081905260408082209390935590851681522054610553908363ffffffff610b7a16565b600160a060020a03808516600090815260208181526040808320949094559187168152600182528281203382529091522054610595908363ffffffff610b6616565b600160a060020a03808616600081815260016020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b601281565b61060f3382610b90565b50565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106985780601f1061066d57610100808354040283529160200191610698565b820191906000526020600020905b81548152906001019060200180831161067b57829003601f168201915b505050505081565b336000908152600160209081526040808320600160a060020a03861684529091528120548083106106f457336000908152600160209081526040808320600160a060020a0388168452909152812055610729565b610704818463ffffffff610b6616565b336000908152600160209081526040808320600160a060020a03891684529091529020555b336000818152600160209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600160a060020a03821660009081526001602090815260408083203384529091529020548111156107da57600080fd5b600160a060020a038216600090815260016020908152604080832033845290915290205461080e908263ffffffff610b6616565b600160a060020a038316600090815260016020908152604080832033845290915290205561083c8282610b90565b5050565b60408051808201909152600781527f5043544f4b454e00000000000000000000000000000000000000000000000000602082015281565b6000833b151981811561099c5761088e86866109a5565b50506040517fa2d578530000000000000000000000000000000000000000000000000000000081523360048201818152602483018790526060604484019081528651606485015286518994600160a060020a0386169463a2d578539490938b938b9360840190602085019080838360005b838110156109175781810151838201526020016108ff565b50505050905090810190601f1680156109445780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561096557600080fd5b505af1158015610979573d6000803e3d6000fd5b505050506040513d602081101561098f57600080fd5b5051151561099c57600080fd5b50949350505050565b336000908152602081905260408120548211156109c157600080fd5b600160a060020a03831615156109d657600080fd5b336000908152602081905260409020546109f6908363ffffffff610b6616565b3360009081526020819052604080822092909255600160a060020a03851681522054610a28908363ffffffff610b7a16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600554600160a060020a031681565b336000908152600160209081526040808320600160a060020a0386168452909152812054610ac7908363ffffffff610b7a16565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600454600160a060020a031681565b60008083831115610b7357fe5b5050900390565b600082820183811015610b8957fe5b9392505050565b600160a060020a038216600090815260208190526040902054811115610bb557600080fd5b600160a060020a038216600090815260208190526040902054610bde908263ffffffff610b6616565b600160a060020a038316600090815260208190526040902055600254610c0a908263ffffffff610b6616565b600255604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350505600a165627a7a7230582046c9f56c012eaf55a59832ad2b600d4a2f6113cd1c2f88e5ef82d693f791d34d002900000000000000000000000025d118b93ca97a61ab2ecf71827672d76d4bc1be",
  "constructorArguments": "00000000000000000000000025d118b93ca97a61ab2ecf71827672d76d4bc1be"
}