{
  "address": "0x6e3bc8f50d04f7262f5c99f1cbabe502eb5e37f5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "GameFlip: Token Sale",
  "contractName": "MainSale",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-29\n*/\n\npragma solidity ^0.4.15;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Crowdsale {\n  using SafeMath for uint256;\n\n  // The token being sold\n  MintableToken public token;\n\n  // start and end timestamps where investments are allowed (both inclusive)\n  uint256 public startTime;\n  uint256 public endTime;\n\n  // address where funds are collected\n  address public wallet;\n\n  // how many token units a buyer gets per wei\n  uint256 public rate;\n\n  // amount of raised money in wei\n  uint256 public weiRaised;\n\n  /**\n   * event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\n    require(_startTime >= now);\n    require(_endTime >= _startTime);\n    require(_rate > 0);\n    require(_wallet != 0x0);\n\n    token = createTokenContract();\n    startTime = _startTime;\n    endTime = _endTime;\n    rate = _rate;\n    wallet = _wallet;\n  }\n\n  // creates the token to be sold.\n  // override this method to have crowdsale of a specific mintable token.\n  function createTokenContract() internal returns (MintableToken) {\n    return new MintableToken();\n  }\n\n\n  // fallback function can be used to buy tokens\n  function () payable {\n    buyTokens(msg.sender);\n  }\n\n  // low level token purchase function\n  function buyTokens(address beneficiary) public payable {\n    require(beneficiary != 0x0);\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n\n    // calculate token amount to be created\n    uint256 tokens = weiAmount.mul(rate);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    token.mint(beneficiary, tokens);\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n    forwardFunds();\n  }\n\n  // send ether to the fund collection wallet\n  // override to create custom fund forwarding mechanisms\n  function forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n\n  // @return true if the transaction can buy tokens\n  function validPurchase() internal constant returns (bool) {\n    bool withinPeriod = now >= startTime && now <= endTime;\n    bool nonZeroPurchase = msg.value != 0;\n    return withinPeriod && nonZeroPurchase;\n  }\n\n  // @return true if crowdsale event has ended\n  function hasEnded() public constant returns (bool) {\n    return now > endTime;\n  }\n\n\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\n  using SafeMath for uint256;\n\n  bool public isFinalized = false;\n\n  event Finalized();\n\n  /**\n   * @dev Must be called after crowdsale ends, to do some extra finalization\n   * work. Calls the contract's finalization function.\n   */\n  function finalize() onlyOwner public {\n    require(!isFinalized);\n    require(hasEnded());\n\n    finalization();\n    Finalized();\n\n    isFinalized = true;\n  }\n\n  /**\n   * @dev Can be overridden to add finalization logic. The overriding function\n   * should call super.finalization() to ensure the chain of finalization is\n   * executed entirely.\n   */\n  function finalization() internal {\n  }\n}\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\ncontract Contactable is Ownable{\n\n    string public contactInformation;\n\n    /**\n     * @dev Allows the owner to set a string with their contact information.\n     * @param info The contact information to attach to the contract.\n     */\n    function setContactInformation(string info) onlyOwner public {\n         contactInformation = info;\n     }\n}\n\ncontract HasNoContracts is Ownable {\n\n  /**\n   * @dev Reclaim ownership of Ownable contracts\n   * @param contractAddr The address of the Ownable to be reclaimed.\n   */\n  function reclaimContract(address contractAddr) external onlyOwner {\n    Ownable contractInst = Ownable(contractAddr);\n    contractInst.transferOwnership(owner);\n  }\n}\n\ncontract HasNoEther is Ownable {\n\n  /**\n  * @dev Constructor that rejects incoming Ether\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n  * we could use assembly to access msg.value.\n  */\n  function HasNoEther() payable {\n    require(msg.value == 0);\n  }\n\n  /**\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\n   */\n  function() external {\n  }\n\n  /**\n   * @dev Transfer all Ether held by the contract to the owner.\n   */\n  function reclaimEther() external onlyOwner {\n    assert(owner.send(this.balance));\n  }\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\ncontract CanReclaimToken is Ownable {\n  using SafeERC20 for ERC20Basic;\n\n  /**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param token ERC20Basic The address of the token contract\n   */\n  function reclaimToken(ERC20Basic token) external onlyOwner {\n    uint256 balance = token.balanceOf(this);\n    token.safeTransfer(owner, balance);\n  }\n\n}\n\ncontract HasNoTokens is CanReclaimToken {\n\n /**\n  * @dev Reject all ERC23 compatible tokens\n  * @param from_ address The address that is transferring the tokens\n  * @param value_ uint256 the amount of the specified token\n  * @param data_ Bytes The data passed from the caller.\n  */\n  function tokenFallback(address from_, uint256 value_, bytes data_) external {\n    revert();\n  }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    uint256 _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue)\n    returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue)\n    returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(0x0, _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\ncontract FlipCrowdsale is Contactable, Pausable, HasNoContracts, HasNoTokens, FinalizableCrowdsale {\n    using SafeMath for uint256;\n\n    uint256 public tokensSold = 0;\n\n    // ignore the Crowdsale.rate and dynamically compute rate based on other factors (e.g. purchase amount, time, etc)\n    function FlipCrowdsale(MintableToken _token, uint256 _startTime, uint256 _endTime, address _ethWallet)\n    Ownable()\n    Pausable()\n    Contactable()\n    HasNoTokens()\n    HasNoContracts()\n    Crowdsale(_startTime, _endTime, 1, _ethWallet)\n    FinalizableCrowdsale()\n    {\n        // deployment must set token.owner = FlipCrowdsale.address to allow minting\n        token = _token;\n        contactInformation = 'https://tokensale.gameflip.com/';\n    }\n\n    function setWallet(address _wallet) onlyOwner public {\n        require(_wallet != 0x0);\n        wallet = _wallet;\n    }\n\n    // over-ridden low level token purchase function so that we\n    // can control the token-per-wei exchange rate dynamically\n    function buyTokens(address beneficiary) public payable whenNotPaused {\n        require(beneficiary != 0x0);\n        require(validPurchase());\n\n        uint256 weiAmount = msg.value;\n\n        // calculate token amount to be created\n        uint256 tokens = applyExchangeRate(weiAmount);\n\n        // update state\n        weiRaised = weiRaised.add(weiAmount);\n        tokensSold = tokensSold.add(tokens);\n\n        token.mint(beneficiary, tokens);\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n        forwardFunds();\n    }\n\n    function tokenTransferOwnership(address newOwner) public onlyOwner {\n        require(hasEnded());\n        token.transferOwnership(newOwner);\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) onlyOwner public {\n        // do not allow self ownership\n        require(newOwner != address(this));\n        super.transferOwnership(newOwner);\n    }\n\n    // overriding Crowdsale#hasEnded to add cap logic\n    // @return true if crowdsale event has ended\n    function hasEnded() public constant returns (bool) {\n        bool capReached = tokensRemaining() == 0;\n        return super.hasEnded() || capReached;\n    }\n\n    // sub-classes must override to control tokens sales cap\n    function tokensRemaining() constant public returns (uint256);\n\n\n    /*\n     * internal functions\n     */\n    function createTokenContract() internal returns (MintableToken) {\n        return token;\n    }\n\n    // sub-classes must override to customize token-per-wei exchange rate\n    function applyExchangeRate(uint256 _wei) constant internal returns (uint256);\n\n    /**\n       * @dev Can be overridden to add finalization logic. The overriding function\n       * should call super.finalization() to ensure the chain of finalization is\n       * executed entirely.\n       */\n    function finalization() internal {\n        // if we own the token, pass ownership to our owner when finalized\n        if(address(token) != address(0) && token.owner() == address(this) && owner != address(0)) {\n            token.transferOwnership(owner);\n        }\n        super.finalization();\n    }\n}\n\ncontract FlipToken is Contactable, HasNoTokens, HasNoEther, MintableToken, PausableToken {\n\n    string public constant name = \"FLIP Token\";\n    string public constant symbol = \"FLP\";\n    uint8 public constant decimals = 18;\n\n    uint256 public constant ONE_TOKENS = (10 ** uint256(decimals));\n    uint256 public constant MILLION_TOKENS = (10**6) * ONE_TOKENS;\n    uint256 public constant TOTAL_TOKENS = 100 * MILLION_TOKENS;\n\n    function FlipToken()\n    Ownable()\n    Contactable()\n    HasNoTokens()\n    HasNoEther()\n    MintableToken()\n    PausableToken()\n    {\n        contactInformation = 'https://tokensale.gameflip.com/';\n    }\n\n    // cap minting so that totalSupply <= TOTAL_TOKENS\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n        require(totalSupply.add(_amount) <= TOTAL_TOKENS);\n        return super.mint(_to, _amount);\n    }\n\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) onlyOwner public {\n        // do not allow self ownership\n        require(newOwner != address(this));\n        super.transferOwnership(newOwner);\n    }\n}\n\ncontract MainSale is FlipCrowdsale {\n    using SafeMath for uint256;\n\n    function MainSale(MintableToken _token, uint256 _startTime, uint256 _endTime, address _ethWallet)\n    FlipCrowdsale(_token, _startTime, _endTime, _ethWallet)\n    {\n    }\n\n    function tokensRemaining() constant public returns (uint256) {\n        FlipToken tok = FlipToken(token);\n        return tok.TOTAL_TOKENS().sub(tok.totalSupply());\n    }\n\n    function setEndTime(uint256 _endTime) onlyOwner public {\n        require(!hasEnded());\n        require(_endTime >= now);\n        require(_endTime >= startTime);\n        endTime = _endTime;\n    }\n\n    /*\n     * internal functions\n     */\n    function applyExchangeRate(uint256 _wei) constant internal returns (uint256) {\n        // white paper (6.4 Token Main Sale) specifies rates based on purchase time\n        uint256 minPurchaseAmt = 100 finney;\n        require(_wei >= minPurchaseAmt);\n        // compute token-per-wei rate based on current date\n        uint256 period = endTime.sub(startTime).div(4);\n        uint256 nowts = now;\n\n        uint256 rate;\n        // checks for before startTime and after endTime are handled elsewhere\n        if(nowts < startTime.add(period)) {\n            rate = 250;\n        } else if(nowts < startTime.add(period).add(period)) {\n            rate = 230;\n        } else if(nowts < startTime.add(period).add(period).add(period)) {\n            rate = 220;\n        } else {\n            rate = 200;\n        }\n\n        uint256 tokens = _wei.mul(rate);\n        // check token cap\n        uint256 remaining = tokensRemaining();\n        require(remaining >= tokens);\n        // if remaining tokens cannot be purchased (at current rate) then gift to current buyer ... it's a sellout!\n        uint256 min_tokens_purchasable = minPurchaseAmt.mul(rate);\n        remaining = remaining.sub(tokens);\n        if(remaining < min_tokens_purchasable) {\n            tokens = tokens.add(remaining);\n        }\n        return tokens;\n    }\n}",
  "bytecode": "60606040526008805461ffff19169055600060095534156200002057600080fd5b604051608080620014bc833981016040528080519190602001805191906020018051919060200180519150505b838383835b5b82826001835b428410156200006757600080fd5b838310156200007557600080fd5b600082116200008357600080fd5b600160a060020a03811615156200009957600080fd5b620000b1640100000000620012316200018582021704565b60008054600160a060020a0319908116600160a060020a0393841617909155600186905560028590556004849055600380549091169183169190911790555b505060068054600160a060020a03191633600160a060020a031617905550505b60008054600160a060020a031916600160a060020a03861617905560408051908101604052601f81527f68747470733a2f2f746f6b656e73616c652e67616d65666c69702e636f6d2f00602082015260079080516200017492916020019062000195565b505b505050505b505050506200023f565b600054600160a060020a03165b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001d857805160ff191683800117855562000208565b8280016001018555821562000208579182015b8281111562000208578251825591602001919060010190620001eb565b5b50620002179291506200021b565b5090565b6200019291905b8082111562000217576000815560010162000222565b5090565b90565b61126d806200024f6000396000f3006060604052361561012d5763ffffffff60e060020a6000350416630dc081c5811461013a57806317ffc3201461015b5780632aed7f3f1461017c5780632c4e722e1461019d5780633197cbb6146101c257806336f7ab5e146101e75780633f4ba83a146102725780634042b66f146102875780634bb278f3146102ac578063518ab2a8146102c1578063521eb273146102e65780635c975abb1461031557806378e979251461033c5780638456cb59146103615780638d4e4083146103765780638da5cb5b1461039d578063b967a52e146103cc578063c0ee0b8a1461041f578063c8b0812514610450578063ccb98ffc14610475578063deaa59df1461048d578063ec8ac4d8146104ae578063ecb70fb7146104c4578063f2fde38b146104eb578063fc0c546a1461050c575b5b6101373361053b565b5b005b341561014557600080fd5b610137600160a060020a036004351661068e565b005b341561016657600080fd5b610137600160a060020a0360043516610725565b005b341561018757600080fd5b610137600160a060020a03600435166107dd565b005b34156101a857600080fd5b6101b061086c565b60405190815260200160405180910390f35b34156101cd57600080fd5b6101b0610872565b60405190815260200160405180910390f35b34156101f257600080fd5b6101fa610878565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102375780820151818401525b60200161021e565b50505050905090810190601f1680156102645780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561027d57600080fd5b610137610916565b005b341561029257600080fd5b6101b061097d565b60405190815260200160405180910390f35b34156102b757600080fd5b610137610983565b005b34156102cc57600080fd5b6101b0610a0d565b60405190815260200160405180910390f35b34156102f157600080fd5b6102f9610a13565b604051600160a060020a03909116815260200160405180910390f35b341561032057600080fd5b610328610a22565b604051901515815260200160405180910390f35b341561034757600080fd5b6101b0610a2b565b60405190815260200160405180910390f35b341561036c57600080fd5b610137610a31565b005b341561038157600080fd5b610328610a9a565b604051901515815260200160405180910390f35b34156103a857600080fd5b6102f9610aa8565b604051600160a060020a03909116815260200160405180910390f35b34156103d757600080fd5b61013760046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610ab795505050505050565b005b341561042a57600080fd5b61013760048035600160a060020a0316906024803591604435918201910135610aeb565b005b341561045b57600080fd5b6101b0610af6565b60405190815260200160405180910390f35b341561048057600080fd5b610137600435610bd1565b005b341561049857600080fd5b610137600160a060020a0360043516610c24565b005b610137600160a060020a036004351661053b565b005b34156104cf57600080fd5b610328610c81565b604051901515815260200160405180910390f35b34156104f657600080fd5b610137600160a060020a0360043516610ca6565b005b341561051757600080fd5b6102f9610cf0565b604051600160a060020a03909116815260200160405180910390f35b600854600090819060ff161561055057600080fd5b600160a060020a038316151561056557600080fd5b61056d610cff565b151561057857600080fd5b34915061058482610d30565b60055490915061059a908363ffffffff610e9816565b6005556009546105b0908263ffffffff610e9816565b60095560008054600160a060020a0316906340c10f1990859084906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561061557600080fd5b6102c65a03f1151561062657600080fd5b505050604051805190505082600160a060020a031633600160a060020a03167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18848460405191825260208201526040908101905180910390a3610687610eb2565b5b5b505050565b60065433600160a060020a039081169116146106a957600080fd5b6106b1610c81565b15156106bc57600080fd5b600054600160a060020a031663f2fde38b8260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b151561070c57600080fd5b6102c65a03f1151561071d57600080fd5b5050505b5b50565b60065460009033600160a060020a0390811691161461074357600080fd5b81600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561079a57600080fd5b6102c65a03f115156107ab57600080fd5b50505060405180516006549092506107d79150600160a060020a0384811691168363ffffffff610ee916565b5b5b5050565b60065460009033600160a060020a039081169116146107fb57600080fd5b506006548190600160a060020a038083169163f2fde38b911660405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b151561085257600080fd5b6102c65a03f1151561086357600080fd5b5050505b5b5050565b60045481565b60025481565b60078054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561090e5780601f106108e35761010080835404028352916020019161090e565b820191906000526020600020905b8154815290600101906020018083116108f157829003601f168201915b505050505081565b60065433600160a060020a0390811691161461093157600080fd5b60085460ff16151561094257600080fd5b6008805460ff191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a15b5b5b565b60055481565b60065433600160a060020a0390811691161461099e57600080fd5b600854610100900460ff16156109b357600080fd5b6109bb610c81565b15156109c657600080fd5b6109ce610f6f565b7f6823b073d48d6e3a7d385eeb601452d680e74bb46afe3255a7d778f3a9b1768160405160405180910390a16008805461ff0019166101001790555b5b565b60095481565b600354600160a060020a031681565b60085460ff1681565b60015481565b60065433600160a060020a03908116911614610a4c57600080fd5b60085460ff1615610a5c57600080fd5b6008805460ff191660011790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a15b5b5b565b600854610100900460ff1681565b600654600160a060020a031681565b60065433600160a060020a03908116911614610ad257600080fd5b60078180516107d7929160200190611191565b505b5b50565b600080fd5b50505050565b60008054600160a060020a0316610bca816318160ddd84604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610b4257600080fd5b6102c65a03f11515610b5357600080fd5b5050506040518051905082600160a060020a0316630b7abf776000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610ba357600080fd5b6102c65a03f11515610bb457600080fd5b505050604051805191905063ffffffff61108a16565b91505b5090565b60065433600160a060020a03908116911614610bec57600080fd5b610bf4610c81565b15610bfe57600080fd5b42811015610c0b57600080fd5b600154811015610c1a57600080fd5b60028190555b5b50565b60065433600160a060020a03908116911614610c3f57600080fd5b600160a060020a0381161515610c5457600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600080610c8c610af6565b159050610c976110a1565b80610bca5750805b91505b5090565b60065433600160a060020a03908116911614610cc157600080fd5b30600160a060020a031681600160a060020a031614151515610ce257600080fd5b610721816110aa565b5b5b50565b600054600160a060020a031681565b60008060006001544210158015610d1857506002544211155b915050341515818015610d285750805b92505b505090565b600067016345785d8a000081808080808086891015610d4e57600080fd5b610d766004610d6a60015460025461108a90919063ffffffff16565b9063ffffffff61114316565b600154909650429550610d8f908763ffffffff610e9816565b851015610d9f5760fa9350610e1e565b610dc486610db888600154610e9890919063ffffffff16565b9063ffffffff610e9816565b851015610dd45760e69350610e1e565b610e0986610db888610db88a600154610e9890919063ffffffff16565b9063ffffffff610e9816565b9063ffffffff610e9816565b851015610e195760dc9350610e1e565b60c893505b5b5b610e30898563ffffffff61115f16565b9250610e3a610af6565b915082821015610e4957600080fd5b610e59878563ffffffff61115f16565b9050610e6b828463ffffffff61108a16565b915080821015610e8857610e85838363ffffffff610e9816565b92505b8297505b50505050505050919050565b600082820183811015610ea757fe5b8091505b5092915050565b600354600160a060020a03163480156108fc0290604051600060405180830381858888f19350505050151561097957600080fd5b5b565b82600160a060020a031663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610f4657600080fd5b6102c65a03f11515610f5757600080fd5b50505060405180519050151561068757fe5b5b505050565b600054600160a060020a031615801590610ff8575060008054600160a060020a0330811692911690638da5cb5b90604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610fd257600080fd5b6102c65a03f11515610fe357600080fd5b50505060405180519050600160a060020a0316145b801561100e5750600654600160a060020a031615155b1561107f57600054600654600160a060020a039182169163f2fde38b911660405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b151561106a57600080fd5b6102c65a03f1151561107b57600080fd5b5050505b610979610979565b5b565b60008282111561109657fe5b508082035b92915050565b60025442115b90565b60065433600160a060020a039081169116146110c557600080fd5b600160a060020a03811615156110da57600080fd5b600654600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600080828481151561115157fe5b0490508091505b5092915050565b600082820283158061117b575082848281151561117857fe5b04145b1515610ea757fe5b8091505b5092915050565b5b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106111d257805160ff19168380011785556111ff565b828001600101855582156111ff579182015b828111156111ff5782518255916020019190600101906111e4565b5b50610bcd929150611210565b5090565b6110a791905b80821115610bcd5760008155600101611216565b5090565b90565b600054600160a060020a03165b905600a165627a7a72305820a6d42bcfc93a52735bc1cea7263df73784719e02be061bdd98b8d6e8211e30d000290000000000000000000000003a1bda28adb5b0a812a7cf10a1950c920f79bcd3000000000000000000000000000000000000000000000000000000005a259b30000000000000000000000000000000000000000000000000000000005a6f6f30000000000000000000000000158f3a8d816d61f80c8db36fd6c48b57ecef0ad4",
  "constructorArguments": "0000000000000000000000003a1bda28adb5b0a812a7cf10a1950c920f79bcd3000000000000000000000000000000000000000000000000000000005a259b30000000000000000000000000000000000000000000000000000000005a6f6f30000000000000000000000000158f3a8d816d61f80c8db36fd6c48b57ecef0ad4"
}