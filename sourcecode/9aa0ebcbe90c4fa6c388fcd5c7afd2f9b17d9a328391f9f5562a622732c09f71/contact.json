{
  "address": "0x14c4293d7e7325cec8c52cea3df37d91aa9cc7b6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoServalV2",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-24\n*/\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\introspection\\IERC165.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title IERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface IERC165 {\n    /**\n     * @notice Query if a contract implements an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @dev Interface identification is specified in ERC-165. This function\n     * uses less than 30,000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\IERC721.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\IERC721Receiver.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract IERC721Receiver {\n    /**\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     * after a `safeTransfer`. This function MUST return the function selector,\n     * otherwise the caller will revert the transaction. The selector to be\n     * returned can be obtained as `this.onERC721Received.selector`. This\n     * function MAY throw to revert and reject the transfer.\n     * Note: the ERC721 contract address is always the message sender.\n     * @param operator The address which called `safeTransferFrom` function\n     * @param from The address which previously owned the token\n     * @param tokenId The NFT identifier which is being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\n    public returns (bytes4);\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\math\\SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\utils\\Address.sol\n\npragma solidity ^0.5.0;\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\introspection\\ERC165.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title ERC165\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract ERC165 is IERC165 {\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n    /**\n     * 0x01ffc9a7 ===\n     *     bytes4(keccak256('supportsInterface(bytes4)'))\n     */\n\n    /**\n     * @dev a mapping of interface id to whether or not it's supported\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev A contract implementing SupportsInterfaceWithLookup\n     * implement ERC165 itself\n     */\n    constructor () internal {\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev implement supportsInterface(bytes4) using a lookup table\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev internal method for registering an interface\n     */\n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff);\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\ERC721.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC165, IERC721 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from token ID to owner\n    mapping (uint256 => address) private _tokenOwner;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to number of owned token\n    mapping (address => uint256) private _ownedTokensCount;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n    /*\n     * 0x80ac58cd ===\n     *     bytes4(keccak256('balanceOf(address)')) ^\n     *     bytes4(keccak256('ownerOf(uint256)')) ^\n     *     bytes4(keccak256('approve(address,uint256)')) ^\n     *     bytes4(keccak256('getApproved(uint256)')) ^\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) ^\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n     */\n\n    constructor () public {\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n    }\n\n    /**\n     * @dev Gets the balance of the specified address\n     * @param owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        require(owner != address(0));\n        return _ownedTokensCount[owner];\n    }\n\n    /**\n     * @dev Gets the owner of the specified token ID\n     * @param tokenId uint256 ID of the token to query the owner of\n     * @return owner address currently marked as the owner of the given token ID\n     */\n    function ownerOf(uint256 tokenId) public view returns (address) {\n        address owner = _tokenOwner[tokenId];\n        require(owner != address(0));\n        return owner;\n    }\n\n    /**\n     * @dev Approves another address to transfer the given token ID\n     * The zero address indicates there is no approved address.\n     * There can only be one approved address per token at a given time.\n     * Can only be called by the token owner or an approved operator.\n     * @param to address to be approved for the given token ID\n     * @param tokenId uint256 ID of the token to be approved\n     */\n    function approve(address to, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n        require(to != owner);\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Gets the approved address for a token ID, or zero if no address set\n     * Reverts if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to query the approval of\n     * @return address currently approved for the given token ID\n     */\n    function getApproved(uint256 tokenId) public view returns (address) {\n        require(_exists(tokenId));\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Sets or unsets the approval of a given operator\n     * An operator is allowed to transfer all tokens of the sender on their behalf\n     * @param to operator address to set the approval\n     * @param approved representing the status of the approval to be set\n     */\n    function setApprovalForAll(address to, bool approved) public {\n        require(to != msg.sender);\n        _operatorApprovals[msg.sender][to] = approved;\n        emit ApprovalForAll(msg.sender, to, approved);\n    }\n\n    /**\n     * @dev Tells whether an operator is approved by a given owner\n     * @param owner owner address which you want to query the approval of\n     * @param operator operator address which you want to query the approval of\n     * @return bool whether the given operator is approved by the given owner\n     */\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Transfers the ownership of a given token ID to another address\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n     * Requires the msg sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n    */\n    function transferFrom(address from, address to, uint256 tokenId) public {\n        require(_isApprovedOrOwner(msg.sender, tokenId));\n\n        _transferFrom(from, to, tokenId);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     *\n     * Requires the msg sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n    */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n        transferFrom(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data));\n    }\n\n    /**\n     * @dev Returns whether the specified token exists\n     * @param tokenId uint256 ID of the token to query the existence of\n     * @return whether the token exists\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        address owner = _tokenOwner[tokenId];\n        return owner != address(0);\n    }\n\n    /**\n     * @dev Returns whether the given spender can transfer a given token ID\n     * @param spender address of the spender to query\n     * @param tokenId uint256 ID of the token to be transferred\n     * @return bool whether the msg.sender is approved for the given token ID,\n     *    is an operator of the owner, or is the owner of the token\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        address owner = ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Internal function to mint a new token\n     * Reverts if the given token ID already exists\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        require(to != address(0));\n        require(!_exists(tokenId));\n\n        _tokenOwner[tokenId] = to;\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token\n     * Reverts if the token does not exist\n     * Deprecated, use _burn(uint256) instead.\n     * @param owner owner of the token to burn\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(address owner, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == owner);\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[owner] = _ownedTokensCount[owner].sub(1);\n        _tokenOwner[tokenId] = address(0);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token\n     * Reverts if the token does not exist\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(uint256 tokenId) internal {\n        _burn(ownerOf(tokenId), tokenId);\n    }\n\n    /**\n     * @dev Internal function to transfer ownership of a given token ID to another address.\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n    */\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == from);\n        require(to != address(0));\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n        _tokenOwner[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke `onERC721Received` on a target address\n     * The call is not executed if the target address is not a contract\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        internal returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /**\n     * @dev Private function to clear current approval of a given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _clearApproval(uint256 tokenId) private {\n        if (_tokenApprovals[tokenId] != address(0)) {\n            _tokenApprovals[tokenId] = address(0);\n        }\n    }\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\IERC721Enumerable.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Enumerable is IERC721 {\n    function totalSupply() public view returns (uint256);\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\n\n    function tokenByIndex(uint256 index) public view returns (uint256);\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\ERC721Enumerable.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n/**\n * @title ERC-721 Non-Fungible Token with optional enumeration extension logic\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => uint256[]) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n    /**\n     * 0x780e9d63 ===\n     *     bytes4(keccak256('totalSupply()')) ^\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n     *     bytes4(keccak256('tokenByIndex(uint256)'))\n     */\n\n    /**\n     * @dev Constructor function\n     */\n    constructor () public {\n        // register the supported interface to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n    }\n\n    /**\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner\n     * @param owner address owning the tokens list to be accessed\n     * @param index uint256 representing the index to be accessed of the requested tokens list\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\n        require(index < balanceOf(owner));\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev Gets the total amount of tokens stored by the contract\n     * @return uint256 representing the total amount of tokens\n     */\n    function totalSupply() public view returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev Gets the token ID at a given index of all the tokens in this contract\n     * Reverts if the index is greater or equal to the total number of tokens\n     * @param index uint256 representing the index to be accessed of the tokens list\n     * @return uint256 token ID at the given index of the tokens list\n     */\n    function tokenByIndex(uint256 index) public view returns (uint256) {\n        require(index < totalSupply());\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Internal function to transfer ownership of a given token ID to another address.\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n    */\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\n        super._transferFrom(from, to, tokenId);\n\n        _removeTokenFromOwnerEnumeration(from, tokenId);\n\n        _addTokenToOwnerEnumeration(to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to mint a new token\n     * Reverts if the given token ID already exists\n     * @param to address the beneficiary that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        super._mint(to, tokenId);\n\n        _addTokenToOwnerEnumeration(to, tokenId);\n\n        _addTokenToAllTokensEnumeration(tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token\n     * Reverts if the token does not exist\n     * Deprecated, use _burn(uint256) instead\n     * @param owner owner of the token to burn\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(address owner, uint256 tokenId) internal {\n        super._burn(owner, tokenId);\n\n        _removeTokenFromOwnerEnumeration(owner, tokenId);\n        // Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\n        _ownedTokensIndex[tokenId] = 0;\n\n        _removeTokenFromAllTokensEnumeration(tokenId);\n    }\n\n    /**\n     * @dev Gets the list of token IDs of the requested owner\n     * @param owner address owning the tokens\n     * @return uint256[] List of token IDs owned by the requested address\n     */\n    function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\n        return _ownedTokens[owner];\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\n        _ownedTokens[to].push(tokenId);\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the _ownedTokensIndex mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        _ownedTokens[from].length--;\n\n        // Note that _ownedTokensIndex[tokenId] hasn't been cleared: it still points to the old slot (now occcupied by\n        // lasTokenId, or just over the end of the array if the token was the last one).\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        _allTokens.length--;\n        _allTokensIndex[tokenId] = 0;\n    }\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\IERC721Metadata.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Metadata is IERC721 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\ERC721Metadata.sol\n\npragma solidity ^0.5.0;\n\n\n\n\ncontract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n    /**\n     * 0x5b5e139f ===\n     *     bytes4(keccak256('name()')) ^\n     *     bytes4(keccak256('symbol()')) ^\n     *     bytes4(keccak256('tokenURI(uint256)'))\n     */\n\n    /**\n     * @dev Constructor function\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n    }\n\n    /**\n     * @dev Gets the token name\n     * @return string representing the token name\n     */\n    function name() external view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Gets the token symbol\n     * @return string representing the token symbol\n     */\n    function symbol() external view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns an URI for a given token ID\n     * Throws if the token ID does not exist. May return an empty string.\n     * @param tokenId uint256 ID of the token to query\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\n        require(_exists(tokenId));\n        return _tokenURIs[tokenId];\n    }\n\n    /**\n     * @dev Internal function to set the token URI for a given token\n     * Reverts if the token ID does not exist\n     * @param tokenId uint256 ID of the token to set its URI\n     * @param uri string URI to assign\n     */\n    function _setTokenURI(uint256 tokenId, string memory uri) internal {\n        require(_exists(tokenId));\n        _tokenURIs[tokenId] = uri;\n    }\n\n    /**\n     * @dev Internal function to burn a specific token\n     * Reverts if the token does not exist\n     * Deprecated, use _burn(uint256) instead\n     * @param owner owner of the token to burn\n     * @param tokenId uint256 ID of the token being burned by the msg.sender\n     */\n    function _burn(address owner, uint256 tokenId) internal {\n        super._burn(owner, tokenId);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\ERC721Full.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\n    constructor (string memory name, string memory symbol) public ERC721Metadata(name, symbol) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n}\n\n// File: contracts\\GameData.sol\n\npragma solidity 0.5.0;\n\n\ncontract GameData {\n    struct Animal {\n        uint256 wildAnimalId;\n        uint256 xp;\n        uint16 effectiveness;\n        uint16[3] accessories;      \n    }\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts\\Restricted.sol\n\npragma solidity 0.5.0;\n\n\n\ncontract Restricted is Ownable {\n    mapping(address => bool) private addressIsAdmin;\n    bool private isActive = true;\n\n    modifier onlyAdmin() {\n        require(addressIsAdmin[msg.sender] || msg.sender == owner(), \"Sender is not admin\");\n        _;\n    }\n\n    modifier contractIsActive() {\n        require(isActive, \"Contract is not active\");\n        _;\n    }\n\n    function addAdmin(address adminAddress) public onlyOwner {\n        addressIsAdmin[adminAddress] = true;\n    }\n\n    function removeAdmin(address adminAddress) public onlyOwner {\n        addressIsAdmin[adminAddress] = false;\n    }\n\n    function pauseContract() public onlyOwner {\n        isActive = false;\n    }\n\n    function activateContract() public onlyOwner {\n        isActive = true;\n    }\n}\n\n// File: contracts\\IDnaRepository.sol\n\npragma solidity 0.5.0;\n\n\ncontract IDnaRepository {\n    function getDna(uint256 _dnaId)\n        public\n        view\n        returns(\n            uint animalId,\n            address owner,\n            uint16 effectiveness,\n            uint256 id\n        );\n}\n\n// File: contracts\\IServal.sol\n\npragma solidity 0.5.0;\n\n\n\ncontract IServal is IDnaRepository {\n    function getAnimal(uint256 _animalId)\n        public\n        view\n        returns(\n            uint256 countryId,\n            bytes32 name,\n            uint8 rarity,\n            uint256 currentValue,\n            uint256 targetValue,\n            address owner,\n            uint256 id\n        );\n}\n\n// File: contracts\\IMarketplace.sol\n\npragma solidity 0.5.0;\n\n\ncontract IMarketplace {\n    function createAuction(\n        uint256 _tokenId,\n        uint128 startPrice,\n        uint128 endPrice,\n        uint128 duration\n    )\n        external;\n}\n\n// File: contracts\\CryptoServalV2.sol\n\npragma solidity 0.5.0;\n\n\n\n\n\n\n\n\n\ncontract CryptoServalV2 is ERC721Full(\"CryptoServalGame\", \"CSG\"), GameData, Restricted {\n    address private servalChainAddress;\n    IServal private cryptoServalContract;\n    IDnaRepository private dnaRepositoryContract;\n    IMarketplace private marketplaceContract;\n\n    mapping(uint256 => bool) private usedNonces;\n    mapping(address => uint256) private addressToGems;\n\n    mapping(bytes32 => bool) private withdrawnHashedContractAnimals;\n    mapping(bytes32 => bool) private withdrawnHashedRepositoryAnimals;\n\n    Animal[] internal animals;\n\n    uint256 private syncCost = 0.003 ether;\n    uint256 private spawnCost = 0.01 ether;\n\n    uint256 private spawnWindow = 1 hours;\n    uint256[3] private rarityToSpawnGemCost = [30, 60, 90];\n\n    using SafeMath for uint256;\n\n    event GemsAddedEvent(\n        address to,\n        uint256 gemAmount\n    );\n\n    event XpAddedEvent(\n        uint256 animalId,\n        uint256 xpAmount\n    );\n\n    event AccessoryAddedEvent(\n        uint256 animalId,\n        uint8 accessorySlot,\n        uint16 accessoryId\n    );\n\n    function setServalChainAddress(address newServalChainAddress) external onlyAdmin() {\n        servalChainAddress = newServalChainAddress;\n    }\n\n    function setCryptoServalContract(address cryptoServalContractAddress) external onlyAdmin() {\n        cryptoServalContract = IServal(cryptoServalContractAddress);\n    }\n\n    function setDnaRepositoryContract(address dnaRepositoryContractAddress) external onlyAdmin() {\n        dnaRepositoryContract = IDnaRepository(dnaRepositoryContractAddress);\n    }\n\n    function setMarketplaceContract(address marketplaceContractAddress) external onlyAdmin() {\n        marketplaceContract = IMarketplace(marketplaceContractAddress);\n    }\n\n    function setSyncCost(uint256 _syncCost) external onlyAdmin() {\n        syncCost = _syncCost;\n    }\n\n    function setSpawnCost(uint256 _spawnCost) external onlyAdmin() {\n        spawnCost = _spawnCost;\n    }\n\n    function setRarityToSpawnGemCost(uint8 index, uint256 targetValue) external onlyAdmin {\n        rarityToSpawnGemCost[index] = targetValue;\n    }\n\n    function sequenceContractDna(uint256 wildAnimalId, uint256[] calldata dnaIds) external {\n        require(!isWithdrawnFromContract(msg.sender, wildAnimalId), \"Animal was already minted from contract\");  \n        withdrawnHashedContractAnimals[keccak256(abi.encodePacked(msg.sender, wildAnimalId))] = true;\n        sequenceDna(wildAnimalId, dnaIds, cryptoServalContract);  \n    }\n\n    function sequenceRepositoryDna(uint256 wildAnimalId, uint256[] calldata dnaIds) external {\n        require(!isWithdrawnFromRepository(msg.sender, wildAnimalId), \"Animal was already minted from repository\");  \n        withdrawnHashedRepositoryAnimals[keccak256(abi.encodePacked(msg.sender, wildAnimalId))] = true;\n        sequenceDna(wildAnimalId, dnaIds, dnaRepositoryContract);  \n    }\n\n    function spawnOffspring(\n        uint256 wildAnimalId,\n        uint16 effectiveness,\n        uint256 timestamp,\n        uint256 nonce,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n        )\n        external\n        payable\n        usesNonce(nonce)\n        spawnPriced()\n    {        \n        require(now < timestamp.add(spawnWindow), \"Animal spawn expired\");\n        require(effectiveness <= 100, \"Invalid effectiveness\");\n        require(isServalChainSigner(\n                keccak256(abi.encodePacked(wildAnimalId, effectiveness, timestamp, nonce, msg.sender, this)),\n                v,\n                r,\n                s\n            ), \"Invalid signature\");\n\n        uint8 rarity;\n        (, , rarity, , , ,) = cryptoServalContract.getAnimal(wildAnimalId);\n        // SafeMath reverts if sender does not have enough gems\n        addressToGems[msg.sender] = addressToGems[msg.sender].sub(rarityToSpawnGemCost[rarity]);\n        mintAnimal(wildAnimalId, effectiveness, msg.sender);\n    }\n        \n    function requestGems(\n        uint256 amount,\n        uint256 nonce,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n        )\n        external\n        payable        \n        usesNonce(nonce)\n        syncPriced()\n    {\n        require(isServalChainSigner(\n            keccak256(abi.encodePacked(amount, nonce, msg.sender, this)), v, r, s),\n            \"Invalid signature\"\n            );        \n        addGems(msg.sender, amount);        \n    }\n\n    function addXp(\n        uint256 animalId,\n        uint256 xpToAdd,\n        uint256 nonce,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n        )\n        external\n        payable\n        syncPriced()\n        usesNonce(nonce)\n    {\n        require(isServalChainSigner(\n            keccak256(abi.encodePacked(animalId, xpToAdd, nonce, msg.sender, this)), v, r, s),\n            \"Invalid signature\"\n            );\n        animals[animalId].xp = animals[animalId].xp.add(xpToAdd);\n\n        emit XpAddedEvent(animalId, xpToAdd);\n    }\n      \n    function addAccessories(\n        uint256 animalId,\n        uint8 accessorySlot,\n        uint16 accessoryId,\n        uint256 nonce,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n        )\n        external\n        payable\n        syncPriced()      \n        usesNonce(nonce)\n    {\n        require(isServalChainSigner(\n                keccak256(abi.encodePacked(animalId, accessorySlot, accessoryId, nonce, msg.sender, this)),\n                v,\n                r,\n                s\n            ),\n            \"Invalid signature\"\n            );        \n        require(msg.sender == ownerOf(animalId));\n        require(animals[animalId].accessories[accessorySlot] == 0);     \n        \n        animals[animalId].accessories[accessorySlot] = accessoryId;\n        emit AccessoryAddedEvent(animalId, accessorySlot, accessoryId);\n    }\n\n    function fuseAnimal(uint256 animalId) external payable syncPriced() {        \n        Animal memory animal = animals[animalId];\n\n        address wildAnimalOwner;\n        uint8 rarity;\n        (, , rarity, , , wildAnimalOwner,) = cryptoServalContract.getAnimal(animal.wildAnimalId);\n        \n        uint256 gemsToAdd = uint256(animal.effectiveness).div(4);\n        uint256 rarityMultiplier = uint256(rarity).add(1);\n\n        if (gemsToAdd > 2) {            \n            gemsToAdd = gemsToAdd.mul(rarityMultiplier);\n        }\n\n        _burn(msg.sender, animalId);\n        delete animals[animalId];\n\n        addGems(msg.sender, gemsToAdd);\n        addGems(wildAnimalOwner, rarityMultiplier.mul(5));\n    }\n\n    function createAuction(\n        uint256 _tokenId,\n        uint128 startPrice,\n        uint128 endPrice,\n        uint128 duration\n    )\n        external\n    {\n        // approve, not a transfer, let marketplace confirm the original owner and take ownership\n        approve(address(marketplaceContract), _tokenId);\n        marketplaceContract.createAuction(_tokenId, startPrice, endPrice, duration);\n    } \n\n    function getAnimal(uint256 animalId)\n    external\n    view\n    returns(\n        address owner,\n        uint256 wildAnimalId,\n        uint256 xp,\n        uint16 effectiveness,\n        uint16[3] memory accessories\n    )\n    {\n        Animal memory animal = animals[animalId];\n        return (\n            ownerOf(animalId),\n            animal.wildAnimalId,\n            animal.xp,\n            animal.effectiveness,\n            animal.accessories\n        );\n    }\n\n    function getPlayerAnimals(address playerAddress)\n        external\n        view\n        returns(uint256[] memory)\n    {\n        return _tokensOfOwner(playerAddress);\n    }\n\n    function getPlayerGems(address addr) external view returns(uint256) {\n        return addressToGems[addr];\n    }\n\n    function getSyncCost() external view returns(uint256) {\n        return syncCost;\n    }\n\n    function getSpawnCost() external view returns(uint256) {\n        return spawnCost;\n    }\n\n    function getRarityToSpawnGemCost(uint8 index) public view returns(uint256) {\n        return rarityToSpawnGemCost[index];\n    }\n\n    function isWithdrawnFromContract(address owner, uint256 wildAnimalId) public view returns(bool) {\n        return withdrawnHashedContractAnimals[keccak256(abi.encodePacked(owner, wildAnimalId))];\n    }\n\n    function isWithdrawnFromRepository(address owner, uint256 wildAnimalId) public view returns(bool) {\n        return withdrawnHashedRepositoryAnimals[keccak256(abi.encodePacked(owner, wildAnimalId))]; \n    }\n\n    function isServalChainSigner(bytes32 msgHash, uint8 v, bytes32 r, bytes32 s) public view returns (bool) {\n        return servalChainAddress == ecrecover(msgHash, v, r, s);\n    }\n\n    function withdrawContract() public onlyOwner {\n        msg.sender.transfer(address(this).balance);\n    }\n\n    function sequenceDna(uint256 animalToSpawn, uint256[] memory dnaIds, IDnaRepository dnaContract) private {\n        uint256 highestEffectiveness = 0;\n        uint256 sumOfEffectiveness = 0;\n\n        require(!hasDuplicateMember(dnaIds), \"DNA array contains the same cards\");\n        \n        for (uint256 i = 0; i < dnaIds.length; i++) {\n            uint animalId;\n            address owner;\n            uint16 effectiveness;\n            uint256 id;\n\n            (animalId, owner, effectiveness, id) = dnaContract.getDna(dnaIds[i]);\n\n            require(animalId == animalToSpawn, \"Provided DNA has incorrect wild animal id\");\n            require(msg.sender == owner, \"Sender is not owner of DNA\");\n\n            if (effectiveness > highestEffectiveness) { \n                highestEffectiveness = effectiveness;\n            }\n\n            sumOfEffectiveness = sumOfEffectiveness.add(effectiveness);\n        }\n        \n        uint256 effectivenessBonus = (sumOfEffectiveness.sub(highestEffectiveness)).div(10); \n        uint256 finalEffectiveness = highestEffectiveness.add(effectivenessBonus);\n        if (finalEffectiveness > 100) {\n            addGems(msg.sender, finalEffectiveness.sub(100));\n            \n            finalEffectiveness = 100;            \n        }\n        \n        mintAnimal(animalToSpawn, uint16(finalEffectiveness), msg.sender);\n    }\n\n    function hasDuplicateMember(uint256[] memory uintArray) private pure returns(bool) {\n        uint256 uintArrayLength = uintArray.length;\n        for (uint256 i = 0; i < uintArrayLength - 1; i++) {\n            for (uint256 u = i + 1; u < uintArrayLength; u++) {\n                if (uintArray[i] == uintArray[u]) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    function mintAnimal(uint256 wildAnimalId, uint16 effectiveness, address mintTo) private\n    {\n        Animal memory animal = Animal(\n            wildAnimalId,\n            0,\n            effectiveness,\n            [uint16(0), uint16(0), uint16(0)]\n        ); \n        uint256 id = animals.length; // id before push\n        animals.push(animal);\n        _mint(mintTo, id);\n    }\n\n    function addGems(address receiver, uint256 gemsCount) private {\n        addressToGems[receiver] = addressToGems[receiver].add(gemsCount);\n\n        emit GemsAddedEvent(receiver, gemsCount);\n    }\n\n    modifier usesNonce(uint256 nonce) {\n        require(!usedNonces[nonce], \"Nonce already used\");\n        usedNonces[nonce] = true;\n        _;\n    }\n\n    modifier syncPriced() {\n        require(msg.value == syncCost, \"Sync price not paid\");\n        _;\n    }\n\n    modifier spawnPriced() {\n        require(msg.value == spawnCost, \"Mint price not paid\");\n        _;\n    }\n}",
  "bytecode": ""
}