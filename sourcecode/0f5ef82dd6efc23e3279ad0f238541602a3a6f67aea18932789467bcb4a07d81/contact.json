{
  "address": "0x21683397aa53aaf7baca416c27f2c1e0e84bb493",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WhitelistedTokenProxy",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-28\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\". This adds two-phase\n * ownership control to OpenZeppelin's Ownable class. In this model, the original owner \n * designates a new owner but does not actually transfer ownership. The new owner then accepts \n * ownership and completes the transfer.\n */\ncontract Ownable {\n  address public owner;\n  address public pendingOwner;\n\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n    pendingOwner = address(0);\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    require(_newOwner != address(0));\n    pendingOwner = _newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner public {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n\n\n}\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(addr) }\n    return size > 0;\n  }\n\n}\n\n/**\n* @title PermissionedTokenStorage\n* @notice a PermissionedTokenStorage is constructed by setting Regulator, BalanceSheet, and AllowanceSheet locations.\n* Once the storages are set, they cannot be changed.\n*/\ncontract PermissionedTokenStorage is Ownable {\n    using SafeMath for uint256;\n\n    /**\n        Storage\n    */\n    mapping (address => mapping (address => uint256)) public allowances;\n    mapping (address => uint256) public balances;\n    uint256 public totalSupply;\n\n    function addAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\n        allowances[_tokenHolder][_spender] = allowances[_tokenHolder][_spender].add(_value);\n    }\n\n    function subAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\n        allowances[_tokenHolder][_spender] = allowances[_tokenHolder][_spender].sub(_value);\n    }\n\n    function setAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\n        allowances[_tokenHolder][_spender] = _value;\n    }\n\n    function addBalance(address _addr, uint256 _value) public onlyOwner {\n        balances[_addr] = balances[_addr].add(_value);\n    }\n\n    function subBalance(address _addr, uint256 _value) public onlyOwner {\n        balances[_addr] = balances[_addr].sub(_value);\n    }\n\n    function setBalance(address _addr, uint256 _value) public onlyOwner {\n        balances[_addr] = _value;\n    }\n\n    function addTotalSupply(uint256 _value) public onlyOwner {\n        totalSupply = totalSupply.add(_value);\n    }\n\n    function subTotalSupply(uint256 _value) public onlyOwner {\n        totalSupply = totalSupply.sub(_value);\n    }\n\n    function setTotalSupply(uint256 _value) public onlyOwner {\n        totalSupply = _value;\n    }\n\n}\n\n/**\n * @title Proxy\n * @dev Implements delegation of calls to other contracts, with proper\n * forwarding of return values and bubbling of failures.\n * It defines a fallback function that delegates all calls to the address\n * returned by the abstract _implementation() internal function.\n */\ncontract Proxy {\n  /**\n   * @dev Fallback function.\n   * Implemented entirely in `_fallback`.\n   */\n  function () payable external {\n    _fallback();\n  }\n\n  /**\n   * @return The Address of the implementation.\n   */\n  function _implementation() internal view returns (address);\n\n  /**\n   * @dev Delegates execution to an implementation contract.\n   * This is a low level function that doesn't return to its internal call site.\n   * It will return to the external caller whatever the implementation returns.\n   * @param implementation Address to delegate.\n   */\n  function _delegate(address implementation) internal {\n    assembly {\n      // Copy msg.data. We take full control of memory in this inline assembly\n      // block because it will not return to Solidity code. We overwrite the\n      // Solidity scratch pad at memory position 0.\n      calldatacopy(0, 0, calldatasize)\n\n      // Call the implementation.\n      // out and outsize are 0 because we don't know the size yet.\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n      // Copy the returned data.\n      returndatacopy(0, 0, returndatasize)\n\n      switch result\n      // delegatecall returns 0 on error.\n      case 0 { revert(0, returndatasize) }\n      default { return(0, returndatasize) }\n    }\n  }\n\n  /**\n   * @dev Function that is run as the first thing in the fallback function.\n   * Can be redefined in derived contracts to add functionality.\n   * Redefinitions must call super._willFallback().\n   */\n  function _willFallback() internal {\n  }\n\n  /**\n   * @dev fallback implementation.\n   * Extracted to enable manual triggering.\n   */\n  function _fallback() internal {\n    _willFallback();\n    _delegate(_implementation());\n  }\n}\n\n/**\n * Utility library of inline functions on addresses\n */\n// library AddressUtils {\n\n//   /**\n//    * Returns whether the target address is a contract\n//    * @dev This function will return false if invoked during the constructor of a contract,\n//    *  as the code is not actually created until after the constructor finishes.\n//    * @param addr address to check\n//    * @return whether the target address is a contract\n//    */\n//   function isContract(address addr) internal view returns (bool) {\n//     uint256 size;\n//     // XXX Currently there is no better way to check if there is a contract in an address\n//     // than to check the size of the code at that address.\n//     // See https://ethereum.stackexchange.com/a/14016/36603\n//     // for more details about how this works.\n//     // TODO Check this again before the Serenity release, because all addresses will be\n//     // contracts then.\n//     // solium-disable-next-line security/no-inline-assembly\n//     assembly { size := extcodesize(addr) }\n//     return size > 0;\n//   }\n\n// }\n\n/**\n * @title UpgradeabilityProxy\n * @dev This contract implements a proxy that allows to change the\n * implementation address to which it will delegate.\n * Such a change is called an implementation upgrade.\n */\ncontract UpgradeabilityProxy is Proxy {\n  /**\n   * @dev Emitted when the implementation is upgraded.\n   * @param implementation Address of the new implementation.\n   */\n  event Upgraded(address implementation);\n\n  /**\n   * @dev Storage slot with the address of the current implementation.\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.implementation\", and is\n   * validated in the constructor.\n   */\n  bytes32 private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\n\n  /**\n   * @dev Contract constructor.\n   * @param _implementation Address of the initial implementation.\n   */\n  constructor(address _implementation) public {\n    assert(IMPLEMENTATION_SLOT == keccak256(\"org.zeppelinos.proxy.implementation\"));\n\n    _setImplementation(_implementation);\n  }\n\n  /**\n   * @dev Returns the current implementation.\n   * @return Address of the current implementation\n   */\n  function _implementation() internal view returns (address impl) {\n    bytes32 slot = IMPLEMENTATION_SLOT;\n    assembly {\n      impl := sload(slot)\n    }\n  }\n\n  /**\n   * @dev Upgrades the proxy to a new implementation.\n   * @param newImplementation Address of the new implementation.\n   */\n  function _upgradeTo(address newImplementation) internal {\n    _setImplementation(newImplementation);\n    emit Upgraded(newImplementation);\n  }\n\n  /**\n   * @dev Sets the implementation address of the proxy.\n   * @param newImplementation Address of the new implementation.\n   */\n  function _setImplementation(address newImplementation) private {\n    require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n      sstore(slot, newImplementation)\n    }\n  }\n}\n\n/**\n*\n* @dev Stores permissions and validators and provides setter and getter methods. \n* Permissions determine which methods users have access to call. Validators\n* are able to mutate permissions at the Regulator level.\n*\n*/\ncontract RegulatorStorage is Ownable {\n    \n    /** \n        Structs \n    */\n\n    /* Contains metadata about a permission to execute a particular method signature. */\n    struct Permission {\n        string name; // A one-word description for the permission. e.g. \"canMint\"\n        string description; // A longer description for the permission. e.g. \"Allows user to mint tokens.\"\n        string contract_name; // e.g. \"PermissionedToken\"\n        bool active; // Permissions can be turned on or off by regulator\n    }\n\n    /** \n        Constants: stores method signatures. These are potential permissions that a user can have, \n        and each permission gives the user the ability to call the associated PermissionedToken method signature\n    */\n    bytes4 public constant MINT_SIG = bytes4(keccak256(\"mint(address,uint256)\"));\n    bytes4 public constant MINT_CUSD_SIG = bytes4(keccak256(\"mintCUSD(address,uint256)\"));\n    bytes4 public constant CONVERT_WT_SIG = bytes4(keccak256(\"convertWT(uint256)\"));\n    bytes4 public constant BURN_SIG = bytes4(keccak256(\"burn(uint256)\"));\n    bytes4 public constant CONVERT_CARBON_DOLLAR_SIG = bytes4(keccak256(\"convertCarbonDollar(address,uint256)\"));\n    bytes4 public constant BURN_CARBON_DOLLAR_SIG = bytes4(keccak256(\"burnCarbonDollar(address,uint256)\"));\n    bytes4 public constant DESTROY_BLACKLISTED_TOKENS_SIG = bytes4(keccak256(\"destroyBlacklistedTokens(address,uint256)\"));\n    bytes4 public constant APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG = bytes4(keccak256(\"approveBlacklistedAddressSpender(address)\"));\n    bytes4 public constant BLACKLISTED_SIG = bytes4(keccak256(\"blacklisted()\"));\n\n    /** \n        Mappings \n    */\n\n    /* each method signature maps to a Permission */\n    mapping (bytes4 => Permission) public permissions;\n    /* list of validators, either active or inactive */\n    mapping (address => bool) public validators;\n    /* each user can be given access to a given method signature */\n    mapping (address => mapping (bytes4 => bool)) public userPermissions;\n\n    /** \n        Events \n    */\n    event PermissionAdded(bytes4 methodsignature);\n    event PermissionRemoved(bytes4 methodsignature);\n    event ValidatorAdded(address indexed validator);\n    event ValidatorRemoved(address indexed validator);\n\n    /** \n        Modifiers \n    */\n    /**\n    * @notice Throws if called by any account that does not have access to set attributes\n    */\n    modifier onlyValidator() {\n        require (isValidator(msg.sender), \"Sender must be validator\");\n        _;\n    }\n\n    /**\n    * @notice Sets a permission within the list of permissions.\n    * @param _methodsignature Signature of the method that this permission controls.\n    * @param _permissionName A \"slug\" name for this permission (e.g. \"canMint\").\n    * @param _permissionDescription A lengthier description for this permission (e.g. \"Allows user to mint tokens\").\n    * @param _contractName Name of the contract that the method belongs to.\n    */\n    function addPermission(\n        bytes4 _methodsignature, \n        string _permissionName, \n        string _permissionDescription, \n        string _contractName) public onlyValidator { \n        Permission memory p = Permission(_permissionName, _permissionDescription, _contractName, true);\n        permissions[_methodsignature] = p;\n        emit PermissionAdded(_methodsignature);\n    }\n\n    /**\n    * @notice Removes a permission the list of permissions.\n    * @param _methodsignature Signature of the method that this permission controls.\n    */\n    function removePermission(bytes4 _methodsignature) public onlyValidator {\n        permissions[_methodsignature].active = false;\n        emit PermissionRemoved(_methodsignature);\n    }\n    \n    /**\n    * @notice Sets a permission in the list of permissions that a user has.\n    * @param _methodsignature Signature of the method that this permission controls.\n    */\n    function setUserPermission(address _who, bytes4 _methodsignature) public onlyValidator {\n        require(permissions[_methodsignature].active, \"Permission being set must be for a valid method signature\");\n        userPermissions[_who][_methodsignature] = true;\n    }\n\n    /**\n    * @notice Removes a permission from the list of permissions that a user has.\n    * @param _methodsignature Signature of the method that this permission controls.\n    */\n    function removeUserPermission(address _who, bytes4 _methodsignature) public onlyValidator {\n        require(permissions[_methodsignature].active, \"Permission being removed must be for a valid method signature\");\n        userPermissions[_who][_methodsignature] = false;\n    }\n\n    /**\n    * @notice add a Validator\n    * @param _validator Address of validator to add\n    */\n    function addValidator(address _validator) public onlyOwner {\n        validators[_validator] = true;\n        emit ValidatorAdded(_validator);\n    }\n\n    /**\n    * @notice remove a Validator\n    * @param _validator Address of validator to remove\n    */\n    function removeValidator(address _validator) public onlyOwner {\n        validators[_validator] = false;\n        emit ValidatorRemoved(_validator);\n    }\n\n    /**\n    * @notice does validator exist?\n    * @return true if yes, false if no\n    **/\n    function isValidator(address _validator) public view returns (bool) {\n        return validators[_validator];\n    }\n\n    /**\n    * @notice does permission exist?\n    * @return true if yes, false if no\n    **/\n    function isPermission(bytes4 _methodsignature) public view returns (bool) {\n        return permissions[_methodsignature].active;\n    }\n\n    /**\n    * @notice get Permission structure\n    * @param _methodsignature request to retrieve the Permission struct for this methodsignature\n    * @return Permission\n    **/\n    function getPermission(bytes4 _methodsignature) public view returns \n        (string name, \n         string description, \n         string contract_name,\n         bool active) {\n        return (permissions[_methodsignature].name,\n                permissions[_methodsignature].description,\n                permissions[_methodsignature].contract_name,\n                permissions[_methodsignature].active);\n    }\n\n    /**\n    * @notice does permission exist?\n    * @return true if yes, false if no\n    **/\n    function hasUserPermission(address _who, bytes4 _methodsignature) public view returns (bool) {\n        return userPermissions[_who][_methodsignature];\n    }\n}\n\n/**\n * @title Regulator\n * @dev Regulator can be configured to meet relevant securities regulations, KYC policies\n * AML requirements, tax laws, and more. The Regulator ensures that the PermissionedToken\n * makes compliant transfers possible. Contains the userPermissions necessary\n * for regulatory compliance.\n *\n */\ncontract Regulator is RegulatorStorage {\n    \n    /** \n        Modifiers \n    */\n    /**\n    * @notice Throws if called by any account that does not have access to set attributes\n    */\n    modifier onlyValidator() {\n        require (isValidator(msg.sender), \"Sender must be validator\");\n        _;\n    }\n\n    /** \n        Events \n    */\n    event LogWhitelistedUser(address indexed who);\n    event LogBlacklistedUser(address indexed who);\n    event LogNonlistedUser(address indexed who);\n    event LogSetMinter(address indexed who);\n    event LogRemovedMinter(address indexed who);\n    event LogSetBlacklistDestroyer(address indexed who);\n    event LogRemovedBlacklistDestroyer(address indexed who);\n    event LogSetBlacklistSpender(address indexed who);\n    event LogRemovedBlacklistSpender(address indexed who);\n\n    /**\n    * @notice Sets the necessary permissions for a user to mint tokens.\n    * @param _who The address of the account that we are setting permissions for.\n    */\n    function setMinter(address _who) public onlyValidator {\n        _setMinter(_who);\n    }\n\n    /**\n    * @notice Removes the necessary permissions for a user to mint tokens.\n    * @param _who The address of the account that we are removing permissions for.\n    */\n    function removeMinter(address _who) public onlyValidator {\n        _removeMinter(_who);\n    }\n\n    /**\n    * @notice Sets the necessary permissions for a user to spend tokens from a blacklisted account.\n    * @param _who The address of the account that we are setting permissions for.\n    */\n    function setBlacklistSpender(address _who) public onlyValidator {\n        require(isPermission(APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG), \"Blacklist spending not supported by token\");\n        setUserPermission(_who, APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG);\n        emit LogSetBlacklistSpender(_who);\n    }\n    \n    /**\n    * @notice Removes the necessary permissions for a user to spend tokens from a blacklisted account.\n    * @param _who The address of the account that we are removing permissions for.\n    */\n    function removeBlacklistSpender(address _who) public onlyValidator {\n        require(isPermission(APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG), \"Blacklist spending not supported by token\");\n        removeUserPermission(_who, APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG);\n        emit LogRemovedBlacklistSpender(_who);\n    }\n\n    /**\n    * @notice Sets the necessary permissions for a user to destroy tokens from a blacklisted account.\n    * @param _who The address of the account that we are setting permissions for.\n    */\n    function setBlacklistDestroyer(address _who) public onlyValidator {\n        require(isPermission(DESTROY_BLACKLISTED_TOKENS_SIG), \"Blacklist token destruction not supported by token\");\n        setUserPermission(_who, DESTROY_BLACKLISTED_TOKENS_SIG);\n        emit LogSetBlacklistDestroyer(_who);\n    }\n    \n\n    /**\n    * @notice Removes the necessary permissions for a user to destroy tokens from a blacklisted account.\n    * @param _who The address of the account that we are removing permissions for.\n    */\n    function removeBlacklistDestroyer(address _who) public onlyValidator {\n        require(isPermission(DESTROY_BLACKLISTED_TOKENS_SIG), \"Blacklist token destruction not supported by token\");\n        removeUserPermission(_who, DESTROY_BLACKLISTED_TOKENS_SIG);\n        emit LogRemovedBlacklistDestroyer(_who);\n    }\n\n    /**\n    * @notice Sets the necessary permissions for a \"whitelisted\" user.\n    * @param _who The address of the account that we are setting permissions for.\n    */\n    function setWhitelistedUser(address _who) public onlyValidator {\n        _setWhitelistedUser(_who);\n    }\n\n    /**\n    * @notice Sets the necessary permissions for a \"blacklisted\" user. A blacklisted user has their accounts\n    * frozen; they cannot transfer, burn, or withdraw any tokens.\n    * @param _who The address of the account that we are setting permissions for.\n    */\n    function setBlacklistedUser(address _who) public onlyValidator {\n        _setBlacklistedUser(_who);\n    }\n\n    /**\n    * @notice Sets the necessary permissions for a \"nonlisted\" user. Nonlisted users can trade tokens,\n    * but cannot burn them (and therefore cannot convert them into fiat.)\n    * @param _who The address of the account that we are setting permissions for.\n    */\n    function setNonlistedUser(address _who) public onlyValidator {\n        _setNonlistedUser(_who);\n    }\n\n    /** Returns whether or not a user is whitelisted.\n     * @param _who The address of the account in question.\n     * @return `true` if the user is whitelisted, `false` otherwise.\n     */\n    function isWhitelistedUser(address _who) public view returns (bool) {\n        return (hasUserPermission(_who, BURN_SIG) && !hasUserPermission(_who, BLACKLISTED_SIG));\n    }\n\n    /** Returns whether or not a user is blacklisted.\n     * @param _who The address of the account in question.\n     * @return `true` if the user is blacklisted, `false` otherwise.\n     */\n    function isBlacklistedUser(address _who) public view returns (bool) {\n        return (!hasUserPermission(_who, BURN_SIG) && hasUserPermission(_who, BLACKLISTED_SIG));\n    }\n\n    /** Returns whether or not a user is nonlisted.\n     * @param _who The address of the account in question.\n     * @return `true` if the user is nonlisted, `false` otherwise.\n     */\n    function isNonlistedUser(address _who) public view returns (bool) {\n        return (!hasUserPermission(_who, BURN_SIG) && !hasUserPermission(_who, BLACKLISTED_SIG));\n    }\n\n    /** Returns whether or not a user is a blacklist spender.\n     * @param _who The address of the account in question.\n     * @return `true` if the user is a blacklist spender, `false` otherwise.\n     */\n    function isBlacklistSpender(address _who) public view returns (bool) {\n        return hasUserPermission(_who, APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG);\n    }\n\n    /** Returns whether or not a user is a blacklist destroyer.\n     * @param _who The address of the account in question.\n     * @return `true` if the user is a blacklist destroyer, `false` otherwise.\n     */\n    function isBlacklistDestroyer(address _who) public view returns (bool) {\n        return hasUserPermission(_who, DESTROY_BLACKLISTED_TOKENS_SIG);\n    }\n\n    /** Returns whether or not a user is a minter.\n     * @param _who The address of the account in question.\n     * @return `true` if the user is a minter, `false` otherwise.\n     */\n    function isMinter(address _who) public view returns (bool) {\n        return hasUserPermission(_who, MINT_SIG);\n    }\n\n    /** Internal Functions **/\n\n    function _setMinter(address _who) internal {\n        require(isPermission(MINT_SIG), \"Minting not supported by token\");\n        setUserPermission(_who, MINT_SIG);\n        emit LogSetMinter(_who);\n    }\n\n    function _removeMinter(address _who) internal {\n        require(isPermission(MINT_SIG), \"Minting not supported by token\");\n        removeUserPermission(_who, MINT_SIG);\n        emit LogRemovedMinter(_who);\n    }\n\n    function _setNonlistedUser(address _who) internal {\n        require(isPermission(BURN_SIG), \"Burn method not supported by token\");\n        require(isPermission(BLACKLISTED_SIG), \"Self-destruct method not supported by token\");\n        removeUserPermission(_who, BURN_SIG);\n        removeUserPermission(_who, BLACKLISTED_SIG);\n        emit LogNonlistedUser(_who);\n    }\n\n    function _setBlacklistedUser(address _who) internal {\n        require(isPermission(BURN_SIG), \"Burn method not supported by token\");\n        require(isPermission(BLACKLISTED_SIG), \"Self-destruct method not supported by token\");\n        removeUserPermission(_who, BURN_SIG);\n        setUserPermission(_who, BLACKLISTED_SIG);\n        emit LogBlacklistedUser(_who);\n    }\n\n    function _setWhitelistedUser(address _who) internal {\n        require(isPermission(BURN_SIG), \"Burn method not supported by token\");\n        require(isPermission(BLACKLISTED_SIG), \"Self-destruct method not supported by token\");\n        setUserPermission(_who, BURN_SIG);\n        removeUserPermission(_who, BLACKLISTED_SIG);\n        emit LogWhitelistedUser(_who);\n    }\n}\n\n/**\n* @title PermissionedTokenProxy\n* @notice A proxy contract that serves the latest implementation of PermissionedToken.\n*/\ncontract PermissionedTokenProxy is UpgradeabilityProxy, Ownable {\n    \n    PermissionedTokenStorage public tokenStorage;\n    Regulator public regulator;\n\n    // Events\n    event ChangedRegulator(address indexed oldRegulator, address indexed newRegulator );\n\n\n    /**\n    * @dev create a new PermissionedToken as a proxy contract\n    * with a brand new data storage \n    **/\n    constructor(address _implementation, address _regulator) \n    UpgradeabilityProxy(_implementation) public {\n        regulator = Regulator(_regulator);\n        tokenStorage = new PermissionedTokenStorage();\n    }\n\n    /**\n    * @dev Upgrade the backing implementation of the proxy.\n    * Only the admin can call this function.\n    * @param newImplementation Address of the new implementation.\n    */\n    function upgradeTo(address newImplementation) public onlyOwner {\n        _upgradeTo(newImplementation);\n    }\n\n\n    /**\n    * @return The address of the implementation.\n    */\n    function implementation() public view returns (address) {\n        return _implementation();\n    }\n}\n\n/**\n * @title WhitelistedTokenRegulator\n * @dev WhitelistedTokenRegulator is a type of Regulator that modifies its definitions of\n * what constitutes a \"whitelisted/nonlisted/blacklisted\" user. A WhitelistedToken\n * provides a user the additional ability to convert from a whtielisted stablecoin into the\n * meta-token CUSD, or mint CUSD directly through a specific WT.\n *\n */\ncontract WhitelistedTokenRegulator is Regulator {\n\n    function isMinter(address _who) public view returns (bool) {\n        return (super.isMinter(_who) && hasUserPermission(_who, MINT_CUSD_SIG));\n    }\n\n    // Getters\n\n    function isWhitelistedUser(address _who) public view returns (bool) {\n        return (hasUserPermission(_who, CONVERT_WT_SIG) && super.isWhitelistedUser(_who));\n    }\n\n    function isBlacklistedUser(address _who) public view returns (bool) {\n        return (!hasUserPermission(_who, CONVERT_WT_SIG) && super.isBlacklistedUser(_who));\n    }\n\n    function isNonlistedUser(address _who) public view returns (bool) {\n        return (!hasUserPermission(_who, CONVERT_WT_SIG) && super.isNonlistedUser(_who));\n    }   \n\n    /** Internal functions **/\n\n    // A WT minter should have option to either mint directly into CUSD via mintCUSD(), or\n    // mint the WT via an ordinary mint() \n    function _setMinter(address _who) internal {\n        require(isPermission(MINT_CUSD_SIG), \"Minting to CUSD not supported by token\");\n        setUserPermission(_who, MINT_CUSD_SIG);\n        super._setMinter(_who);\n    }\n\n    function _removeMinter(address _who) internal {\n        require(isPermission(MINT_CUSD_SIG), \"Minting to CUSD not supported by token\");\n        removeUserPermission(_who, MINT_CUSD_SIG);\n        super._removeMinter(_who);\n    }\n\n    // Setters\n\n    // A WT whitelisted user should gain ability to convert their WT into CUSD. They can also burn their WT, as a\n    // PermissionedToken whitelisted user can do\n    function _setWhitelistedUser(address _who) internal {\n        require(isPermission(CONVERT_WT_SIG), \"Converting to CUSD not supported by token\");\n        setUserPermission(_who, CONVERT_WT_SIG);\n        super._setWhitelistedUser(_who);\n    }\n\n    function _setBlacklistedUser(address _who) internal {\n        require(isPermission(CONVERT_WT_SIG), \"Converting to CUSD not supported by token\");\n        removeUserPermission(_who, CONVERT_WT_SIG);\n        super._setBlacklistedUser(_who);\n    }\n\n    function _setNonlistedUser(address _who) internal {\n        require(isPermission(CONVERT_WT_SIG), \"Converting to CUSD not supported by token\");\n        removeUserPermission(_who, CONVERT_WT_SIG);\n        super._setNonlistedUser(_who);\n    }\n\n}\n\n/**\n* @title WhitelistedTokenProxy\n* @notice This contract IS a WhitelistedToken. All calls to the WhitelistedToken contract will\n* be routed through this proxy, since this proxy contract is the owner of the\n* storage contracts.\n*/\ncontract WhitelistedTokenProxy is PermissionedTokenProxy {\n    address public cusdAddress;\n\n\n    constructor(address _implementation, \n                address _regulator, \n                address _cusd) public PermissionedTokenProxy(_implementation, _regulator) {\n        // base class override\n        regulator = WhitelistedTokenRegulator(_regulator);\n\n        cusdAddress = _cusd;\n\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051606080610e088339810160408181528251602080850151948301517f6f72672e7a657070656c696e6f732e70726f78792e696d706c656d656e74617485527f696f6e000000000000000000000000000000000000000000000000000000000091850191909152915192839003602301909220919291839083908290600080516020610de8833981519152146100a557fe5b6100b781640100000000610156810204565b506000805433600160a060020a031991821617909155600180548216905560038054909116600160a060020a0383161790556100f161021c565b604051809103906000f08015801561010d573d6000803e3d6000fd5b5060028054600160a060020a0319908116600160a060020a039384161790915560038054821696831696909617909555600480549095169316929092179092555061022c915050565b600061016e8264010000000061046161021482021704565b151561020157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f43616e6e6f742073657420612070726f787920696d706c656d656e746174696f60448201527f6e20746f2061206e6f6e2d636f6e747261637420616464726573730000000000606482015290519081900360840190fd5b50600080516020610de883398151915255565b6000903b1190565b604051610718806106d083390190565b6104958061023b6000396000f3006080604052600436106100985763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633659cfe681146100a25780634e71e0c8146100c35780635c60da1b146100d8578063636f0cf8146101095780638da5cb5b1461011e578063b199efb514610133578063dd8fee1414610148578063e30c39781461015d578063f2fde38b14610172575b6100a0610193565b005b3480156100ae57600080fd5b506100a0600160a060020a03600435166101ad565b3480156100cf57600080fd5b506100a06101d0565b3480156100e457600080fd5b506100ed610258565b60408051600160a060020a039092168252519081900360200190f35b34801561011557600080fd5b506100ed610267565b34801561012a57600080fd5b506100ed610276565b34801561013f57600080fd5b506100ed610285565b34801561015457600080fd5b506100ed610294565b34801561016957600080fd5b506100ed6102a3565b34801561017e57600080fd5b506100a0600160a060020a03600435166102b2565b61019b6101ab565b6101ab6101a661030d565b610332565b565b600054600160a060020a031633146101c457600080fd5b6101cd81610356565b50565b600154600160a060020a031633146101e757600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600061026261030d565b905090565b600454600160a060020a031681565b600054600160a060020a031681565b600254600160a060020a031681565b600354600160a060020a031681565b600154600160a060020a031681565b600054600160a060020a031633146102c957600080fd5b600160a060020a03811615156102de57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b7f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c35490565b3660008037600080366000845af43d6000803e808015610351573d6000f35b3d6000fd5b61035f8161039e565b60408051600160a060020a038316815290517fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9181900360200190a150565b60006103a982610461565b151561043c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f43616e6e6f742073657420612070726f787920696d706c656d656e746174696f60448201527f6e20746f2061206e6f6e2d636f6e747261637420616464726573730000000000606482015290519081900360840190fd5b507f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c355565b6000903b11905600a165627a7a72305820538ffd21bd292e650c4841d0c36d0c7b224c26518db11a330dc5f4dbb6367ddd0029608060405260008054600160a060020a031990811633179091556001805490911690556106e7806100316000396000f3006080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166318160ddd81146100ea57806321e5383a1461011157806327e235e3146101375780634e71e0c81461015857806355b6ed5c1461016d5780635fd72d161461019457806382838c76146101be5780638da5cb5b146101d657806397d88cd214610207578063cf8eeb7e14610231578063da46098c14610255578063e30443bc1461027f578063e30c3978146102a3578063e468688e146102b8578063f2fde38b146102d0578063f7ea7a3d146102f1575b600080fd5b3480156100f657600080fd5b506100ff610309565b60408051918252519081900360200190f35b34801561011d57600080fd5b50610135600160a060020a036004351660243561030f565b005b34801561014357600080fd5b506100ff600160a060020a036004351661036f565b34801561016457600080fd5b50610135610381565b34801561017957600080fd5b506100ff600160a060020a0360043581169060243516610409565b3480156101a057600080fd5b50610135600160a060020a0360043581169060243516604435610426565b3480156101ca57600080fd5b506101356004356104a4565b3480156101e257600080fd5b506101eb6104d4565b60408051600160a060020a039092168252519081900360200190f35b34801561021357600080fd5b50610135600160a060020a03600435811690602435166044356104e3565b34801561023d57600080fd5b50610135600160a060020a0360043516602435610530565b34801561026157600080fd5b50610135600160a060020a0360043581169060243516604435610570565b34801561028b57600080fd5b50610135600160a060020a03600435166024356105b3565b3480156102af57600080fd5b506101eb6105e6565b3480156102c457600080fd5b506101356004356105f5565b3480156102dc57600080fd5b50610135600160a060020a036004351661061f565b3480156102fd57600080fd5b5061013560043561067a565b60045481565b600054600160a060020a0316331461032657600080fd5b600160a060020a03821660009081526003602052604090205461034f908263ffffffff61069616565b600160a060020a0390921660009081526003602052604090209190915550565b60036020526000908152604090205481565b600154600160a060020a0316331461039857600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600260209081526000928352604080842090915290825290205481565b600054600160a060020a0316331461043d57600080fd5b600160a060020a03808416600090815260026020908152604080832093861683529290522054610473908263ffffffff61069616565b600160a060020a03938416600090815260026020908152604080832095909616825293909352929091209190915550565b600054600160a060020a031633146104bb57600080fd5b6004546104ce908263ffffffff6106a916565b60045550565b600054600160a060020a031681565b600054600160a060020a031633146104fa57600080fd5b600160a060020a03808416600090815260026020908152604080832093861683529290522054610473908263ffffffff6106a916565b600054600160a060020a0316331461054757600080fd5b600160a060020a03821660009081526003602052604090205461034f908263ffffffff6106a916565b600054600160a060020a0316331461058757600080fd5b600160a060020a0392831660009081526002602090815260408083209490951682529290925291902055565b600054600160a060020a031633146105ca57600080fd5b600160a060020a03909116600090815260036020526040902055565b600154600160a060020a031681565b600054600160a060020a0316331461060c57600080fd5b6004546104ce908263ffffffff61069616565b600054600160a060020a0316331461063657600080fd5b600160a060020a038116151561064b57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a0316331461069157600080fd5b600455565b818101828110156106a357fe5b92915050565b6000828211156106b557fe5b509003905600a165627a7a72305820aedc8f8f5d2ec047db8a77ac7af64d87a9e84df392b69e942ea0ab5f4866c42500297050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3000000000000000000000000e5b58d53caabc455a4ea1ad6a9ea48bca0e42c7a0000000000000000000000008644b70d1e40e954d8397e79a210624cbc22e1fe0000000000000000000000001410d4ec3d276c0ebbf16ccbe88a4383ae734ed0",
  "constructorArguments": "000000000000000000000000e5b58d53caabc455a4ea1ad6a9ea48bca0e42c7a0000000000000000000000008644b70d1e40e954d8397e79a210624cbc22e1fe0000000000000000000000001410d4ec3d276c0ebbf16ccbe88a4383ae734ed0"
}