{
  "address": "0xe6b7743e2b9aa2d0a9b163c4e69186abb57817d9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KukyCoin",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-05\n*/\n\npragma solidity ^0.4.22;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n  address delegate;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n    emit OwnershipTransferred(address(0), owner);\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    delegate = newOwner;\n  }\n\n  function confirmChangeOwnership() public {\n    require(msg.sender == delegate);\n    emit OwnershipTransferred(owner, delegate);\n    owner = delegate;\n    delegate = 0;\n  }\n\n}\n\n\n\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n\n\n\n\ncontract TransferFilter is Ownable {\n  bool public isTransferable;\n  mapping( address => bool ) public mapAddressPass;\n  mapping( address => bool ) public mapAddressBlock;\n\n  event LogFilterPass(address indexed target, bool status);\n  event LogFilterBlock(address indexed target, bool status);\n\n  // if Token transfer\n  modifier checkTokenTransfer(address source) {\n      if (isTransferable == true) {\n          require(mapAddressBlock[source] == false);\n      }\n      else {\n          require(mapAddressPass[source] == true);\n      }\n      _;\n  }\n\n  constructor() public {\n      isTransferable = true;\n  }\n\n  function setTransferable(bool status) public onlyOwner {\n      isTransferable = status;\n  }\n\n  function isInPassFilter(address user) public view returns (bool) {\n    return mapAddressPass[user];\n  }\n\n  function isInBlockFilter(address user) public view returns (bool) {\n    return mapAddressBlock[user];\n  }\n\n  function addressToPass(address[] target, bool status)\n  public\n  onlyOwner\n  {\n    for( uint i = 0 ; i < target.length ; i++ ) {\n        address targetAddress = target[i];\n        bool old = mapAddressPass[targetAddress];\n        if (old != status) {\n            if (status == true) {\n                mapAddressPass[targetAddress] = true;\n                emit LogFilterPass(targetAddress, true);\n            }\n            else {\n                delete mapAddressPass[targetAddress];\n                emit LogFilterPass(targetAddress, false);\n            }\n        }\n    }\n  }\n\n  function addressToBlock(address[] target, bool status)\n  public\n  onlyOwner\n  {\n      for( uint i = 0 ; i < target.length ; i++ ) {\n          address targetAddress = target[i];\n          bool old = mapAddressBlock[targetAddress];\n          if (old != status) {\n              if (status == true) {\n                  mapAddressBlock[targetAddress] = true;\n                  emit LogFilterBlock(targetAddress, true);\n              }\n              else {\n                  delete mapAddressBlock[targetAddress];\n                  emit LogFilterBlock(targetAddress, false);\n              }\n          }\n      }\n  }\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, TransferFilter {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  modifier onlyPayloadSize(uint size) {\n    require(msg.data.length >= size + 4);\n    _;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value)\n  onlyPayloadSize(2 * 32)\n  checkTokenTransfer(msg.sender)\n  public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value)\n  onlyPayloadSize(3 * 32)\n  checkTokenTransfer(_from)\n  public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function approve(address _spender, uint256 _value)\n  onlyPayloadSize(2 * 32)\n  checkTokenTransfer(msg.sender)\n  public returns (bool) {\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender,0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n}\n\ncontract BurnableToken is StandardToken {\n  event Burn(address indexed from, uint256 value);\n\n  function burn(address _from, uint256 _amount) public onlyOwner {\n    require(_amount <= balances[_from]);\n    totalSupply = totalSupply.sub(_amount);\n    balances[_from] = balances[_from].sub(_amount);\n    emit Transfer(_from, address(0), _amount);\n    emit Burn(_from, _amount);\n  }\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is BurnableToken {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n  address public minter;\n\n  constructor() public {\n    minter = msg.sender;\n  }\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasPermission() {\n    require(msg.sender == owner || msg.sender == minter);\n    _;\n  }\n\n  function () public payable {\n    require(false);\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) canMint hasPermission public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() canMint onlyOwner public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n\ncontract KukyCoin is MintableToken {\n\n  string public constant name = \"Kuky Coin\"; // solium-disable-line uppercase\n  string public constant symbol = \"KUKY\"; // solium-disable-line uppercase\n  uint8 public constant decimals = 18; // solium-disable-line uppercase\n  /**\n   * @dev Constructor that gives msg.sender all of existing tokens.\n   */\n  constructor() public {\n    totalSupply = 0;\n  }\n}",
  "bytecode": "60806040526007805460ff1916905534801561001a57600080fd5b5060018054600160a060020a031916331790819055604051600160a060020a0391909116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36002805460a060020a60ff0219167401000000000000000000000000000000000000000017905560078054336101000261010060a860020a0319909116179055600080556111ac806100ba6000396000f3006080604052600436106101485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461014f57806306fdde03146101785780630754617214610202578063095ea7b31461023357806318160ddd146102575780632121dc751461027e57806323b872dd14610293578063313ce567146102bd57806340c10f19146102e8578063483b1a761461030c57806370a082311461032d578063751014ff1461034e5780637d64bcb41461036f5780638da5cb5b146103845780638f8e9e7b1461039957806394b44f3e146103ba57806395d89b41146104135780639cd23707146104285780639dc29fac14610442578063a9059cbb14610466578063afbdaa051461048a578063b57874ce146104ab578063dd62ed3e14610504578063e602af061461052b578063f2fde38b14610540575b600080fd5b005b34801561015b57600080fd5b50610164610561565b604080519115158252519081900360200190f35b34801561018457600080fd5b5061018d61056a565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101c75781810151838201526020016101af565b50505050905090810190601f1680156101f45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020e57600080fd5b506102176105a1565b60408051600160a060020a039092168252519081900360200190f35b34801561023f57600080fd5b50610164600160a060020a03600435166024356105b5565b34801561026357600080fd5b5061026c6106d7565b60408051918252519081900360200190f35b34801561028a57600080fd5b506101646106dd565b34801561029f57600080fd5b50610164600160a060020a03600435811690602435166044356106ed565b3480156102c957600080fd5b506102d26108d4565b6040805160ff9092168252519081900360200190f35b3480156102f457600080fd5b50610164600160a060020a03600435166024356108d9565b34801561031857600080fd5b50610164600160a060020a03600435166109e7565b34801561033957600080fd5b5061026c600160a060020a0360043516610a05565b34801561035a57600080fd5b50610164600160a060020a0360043516610a20565b34801561037b57600080fd5b50610164610a35565b34801561039057600080fd5b50610217610a9b565b3480156103a557600080fd5b50610164600160a060020a0360043516610aaa565b3480156103c657600080fd5b506040805160206004803580820135838102808601850190965280855261014d95369593946024949385019291829185019084908082843750949750505050913515159250610abf915050565b34801561041f57600080fd5b5061018d610c02565b34801561043457600080fd5b5061014d6004351515610c39565b34801561044e57600080fd5b5061014d600160a060020a0360043516602435610c7f565b34801561047257600080fd5b50610164600160a060020a0360043516602435610d7d565b34801561049657600080fd5b50610164600160a060020a0360043516610ece565b3480156104b757600080fd5b506040805160206004803580820135838102808601850190965280855261014d95369593946024949385019291829185019084908082843750949750505050913515159250610eec915050565b34801561051057600080fd5b5061026c600160a060020a0360043581169060243516611028565b34801561053757600080fd5b5061014d611053565b34801561054c57600080fd5b5061014d600160a060020a03600435166110dd565b60075460ff1681565b60408051808201909152600981527f4b756b7920436f696e0000000000000000000000000000000000000000000000602082015281565b6007546101009004600160a060020a031681565b6000604060443610156105c757600080fd5b600254339060a060020a900460ff1615156001141561060b57600160a060020a03811660009081526004602052604090205460ff161561060657600080fd5b610635565b600160a060020a03811660009081526003602052604090205460ff16151560011461063557600080fd5b8315806106635750336000908152600660209081526040808320600160a060020a0389168452909152902054155b151561066e57600080fd5b336000818152600660209081526040808320600160a060020a038a1680855290835292819020889055805188815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a3506001949350505050565b60005481565b60025460a060020a900460ff1681565b6000606060643610156106ff57600080fd5b600254859060a060020a900460ff1615156001141561074357600160a060020a03811660009081526004602052604090205460ff161561073e57600080fd5b61076d565b600160a060020a03811660009081526003602052604090205460ff16151560011461076d57600080fd5b600160a060020a038516151561078257600080fd5b600160a060020a0386166000908152600560205260409020548411156107a757600080fd5b600160a060020a03861660009081526006602090815260408083203384529091529020548411156107d757600080fd5b600160a060020a038616600090815260056020526040902054610800908563ffffffff61113816565b600160a060020a038088166000908152600560205260408082209390935590871681522054610835908563ffffffff61114a16565b600160a060020a038087166000908152600560209081526040808320949094559189168152600682528281203382529091522054610879908563ffffffff61113816565b600160a060020a0380881660008181526006602090815260408083203384528252918290209490945580518881529051928916939192600080516020611161833981519152929181900390910190a350600195945050505050565b601281565b60075460009060ff16156108ec57600080fd5b600154600160a060020a031633148061091457506007546101009004600160a060020a031633145b151561091f57600080fd5b600054610932908363ffffffff61114a16565b6000908155600160a060020a03841681526005602052604090205461095d908363ffffffff61114a16565b600160a060020a038416600081815260056020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000916000805160206111618339815191529181900360200190a350600192915050565b600160a060020a031660009081526003602052604090205460ff1690565b600160a060020a031660009081526005602052604090205490565b60036020526000908152604090205460ff1681565b60075460009060ff1615610a4857600080fd5b600154600160a060020a03163314610a5f57600080fd5b6007805460ff191660011790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600154600160a060020a031681565b60046020526000908152604090205460ff1681565b60015460009081908190600160a060020a03163314610add57600080fd5b600092505b8451831015610bfb578483815181101515610af957fe5b6020908102909101810151600160a060020a0381166000908152600490925260409091205490925060ff16905080151584151514610bf05760018415151415610b9c57600160a060020a038216600081815260046020908152604091829020805460ff19166001908117909155825190815291517fa09e978c90f25c2a977904ade347948ac4761e23cf07a17f87c8b77ef301e89c9281900390910190a2610bf0565b600160a060020a0382166000818152600460209081526040808320805460ff191690558051928352517fa09e978c90f25c2a977904ade347948ac4761e23cf07a17f87c8b77ef301e89c9281900390910190a25b600190920191610ae2565b5050505050565b60408051808201909152600481527f4b554b5900000000000000000000000000000000000000000000000000000000602082015281565b600154600160a060020a03163314610c5057600080fd5b6002805491151560a060020a0274ff000000000000000000000000000000000000000019909216919091179055565b600154600160a060020a03163314610c9657600080fd5b600160a060020a038216600090815260056020526040902054811115610cbb57600080fd5b600054610cce908263ffffffff61113816565b6000908155600160a060020a038316815260056020526040902054610cf9908263ffffffff61113816565b600160a060020a038316600081815260056020908152604080832094909455835185815293519193600080516020611161833981519152929081900390910190a3604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b600060406044361015610d8f57600080fd5b600254339060a060020a900460ff16151560011415610dd357600160a060020a03811660009081526004602052604090205460ff1615610dce57600080fd5b610dfd565b600160a060020a03811660009081526003602052604090205460ff161515600114610dfd57600080fd5b600160a060020a0385161515610e1257600080fd5b33600090815260056020526040902054841115610e2e57600080fd5b33600090815260056020526040902054610e4e908563ffffffff61113816565b3360009081526005602052604080822092909255600160a060020a03871681522054610e80908563ffffffff61114a16565b600160a060020a0386166000818152600560209081526040918290209390935580518781529051919233926000805160206111618339815191529281900390910190a3506001949350505050565b600160a060020a031660009081526004602052604090205460ff1690565b60015460009081908190600160a060020a03163314610f0a57600080fd5b600092505b8451831015610bfb578483815181101515610f2657fe5b6020908102909101810151600160a060020a0381166000908152600390925260409091205490925060ff1690508015158415151461101d5760018415151415610fc957600160a060020a038216600081815260036020908152604091829020805460ff19166001908117909155825190815291517f369e0b70fff47e7b3ceb33e2f6f5d67c3d85ab70974ae25e5b2ef2516863d1999281900390910190a261101d565b600160a060020a0382166000818152600360209081526040808320805460ff191690558051928352517f369e0b70fff47e7b3ceb33e2f6f5d67c3d85ab70974ae25e5b2ef2516863d1999281900390910190a25b600190920191610f0f565b600160a060020a03918216600090815260066020908152604080832093909416825291909152205490565b600254600160a060020a0316331461106a57600080fd5b600254600154604051600160a060020a0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600280546001805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600154600160a060020a031633146110f457600080fd5b600160a060020a038116151561110957600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282111561114457fe5b50900390565b60008282018381101561115957fe5b93925050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582070da536699509ff062641b9419e5c869e52139fc47cd236e48ce548f585376ba0029"
}