{
  "address": "0x910845fbbd3210d74a69bc1b39a3e6dcc9630f36",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Organicco",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-07\n*/\n\npragma solidity ^0.4.0;\n\ninterface ERC20 {\n    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n    function approve(address _spender, uint _value) public returns (bool);\n    function allowance(address _owner, address _spender) public constant returns (uint);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ninterface ERC223 {\n    function transfer(address _to, uint _value, bytes _data) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n}\n\ncontract ERC223ReceivingContract {\n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\ncontract Token {\n    string internal _symbol;\n    string internal _name;\n    uint8 internal _decimals;\n    uint internal _totalSupply = 1000;\n    mapping (address => uint) internal _balanceOf;\n    mapping (address => mapping (address => uint)) internal _allowances;\n\n    function Token(string symbol, string name, uint8 decimals, uint totalSupply) public {\n        _symbol = symbol;\n        _name = name;\n        _decimals = decimals;\n        _totalSupply = totalSupply;\n    }\n\n    function name() public constant returns (string) {\n        return _name;\n    }\n\n    function symbol() public constant returns (string) {\n        return _symbol;\n    }\n\n    function decimals() public constant returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public constant returns (uint) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address _addr) public constant returns (uint);\n    function transfer(address _to, uint _value) public returns (bool);\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Organicco is Token(\"ORC\", \"Organicco\", 18, 120000000000000000000000000), ERC20, ERC223 {\n\n    using SafeMath for uint;\n    address public constant FOUNDING_TEAM = 0x001c3234d614F12D5ef931E2871BFf35D8C05a29;\n    address public constant PARTNER_SALES = 0x00749ea1Ca25e9C027426D74Bb3659A80493fa6d;\n    address public constant PRESALES = 0x00faf4afd47ebA1D1713C0506f4a05BC36cc590D;\n    address public constant ICO = 0x000E945D52F3EF8602B3484ce04036fF4d2888CA;\n    address public constant BONUS = 0x009C88134EE3636E7f92A402ed9531DF54B802BB;\n\n    function Organicco() public {\n        _balanceOf[FOUNDING_TEAM] = _totalSupply * 20 / 100; //24,000,000 (24 million)\n        _balanceOf[PARTNER_SALES] = _totalSupply * 16 / 100; //19,200,000 (19.2 million)\n        _balanceOf[PRESALES] = _totalSupply * 10 / 100; //12,000,000 (12 million)\n        _balanceOf[ICO] = _totalSupply * 50 / 100; //60,000,000 (60 million)\n        _balanceOf[BONUS] = _totalSupply * 4 / 100; //4,800,000 (4.8 million)\n    }\n\n    function totalSupply() public constant returns (uint) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address _addr) public constant returns (uint) {\n        return _balanceOf[_addr];\n    }\n\n    function transfer(address _to, uint _value) public returns (bool) {\n        if (_value > 0 &&\n            _value <= _balanceOf[msg.sender] &&\n            !isContract(_to)) {\n            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        return false;\n    }\n\n    function transfer(address _to, uint _value, bytes _data) public returns (bool) {\n        if (_value > 0 &&\n            _value <= _balanceOf[msg.sender] &&\n            isContract(_to)) {\n            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\n            ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\n            _contract.tokenFallback(msg.sender, _value, _data);\n            Transfer(msg.sender, _to, _value, _data);\n            return true;\n        }\n        return false;\n    }\n\n    function isContract(address _addr) private constant returns (bool) {\n        uint codeSize;\n        assembly {\n            codeSize := extcodesize(_addr)\n        }\n        return codeSize > 0;\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n        if (_allowances[_from][msg.sender] > 0 &&\n            _value > 0 &&\n            _allowances[_from][msg.sender] >= _value &&\n            _balanceOf[_from] >= _value) {\n            _balanceOf[_from] = _balanceOf[_from].sub(_value);\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\n            _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(_value);\n            Transfer(_from, _to, _value);\n            return true;\n        }\n        return false;\n    }\n\n    function approve(address _spender, uint _value) public returns (bool) {\n        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender].add(_value);\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint) {\n        return _allowances[_owner][_spender];\n    }\n}",
  "bytecode": "60606040526103e860035534156200001657600080fd5b6040805190810160405280600381526020017f4f524300000000000000000000000000000000000000000000000000000000008152506040805190810160405280600981526020017f4f7267616e6963636f000000000000000000000000000000000000000000000081525060126a6342fd08f00f63780000008360009080519060200190620000a8929190620002fb565b508260019080519060200190620000c1929190620002fb565b5081600260006101000a81548160ff021916908360ff16021790555080600381905550505050506064601460035402811515620000fa57fe5b0460046000721c3234d614f12d5ef931e2871bff35d8c05a2973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060646010600354028115156200016357fe5b046004600072749ea1ca25e9c027426d74bb3659a80493fa6d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506064600a60035402811515620001cc57fe5b046004600072faf4afd47eba1d1713c0506f4a05bc36cc590d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060646032600354028115156200023557fe5b0460046000720e945d52f3ef8602b3484ce04036ff4d2888ca73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060646004600354028115156200029e57fe5b0460046000729c88134ee3636e7f92a402ed9531df54b802bb73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620003aa565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200033e57805160ff19168380011785556200036f565b828001600101855582156200036f579182015b828111156200036e57825182559160200191906001019062000351565b5b5090506200037e919062000382565b5090565b620003a791905b80821115620003a357600081600090555060010162000389565b5090565b90565b6114f680620003ba6000396000f3006060604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306921a9c146100e057806306fdde0314610135578063095ea7b3146101c357806318160ddd1461021d57806323b872dd14610246578063273ba6bb146102bf578063313ce567146103145780634b8624c41461034357806370a082311461039857806395d89b41146103e5578063a9059cbb14610473578063be45fd62146104cd578063dd62ed3e1461056a578063ee2c4fec146105d6578063f00989a81461062b575b600080fd5b34156100eb57600080fd5b6100f3610680565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561014057600080fd5b610148610697565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561018857808201518184015260208101905061016d565b50505050905090810190601f1680156101b55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101ce57600080fd5b610203600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061073f565b604051808215151515815260200191505060405180910390f35b341561022857600080fd5b6102306108bf565b6040518082815260200191505060405180910390f35b341561025157600080fd5b6102a5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108c9565b604051808215151515815260200191505060405180910390f35b34156102ca57600080fd5b6102d2610ce1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561031f57600080fd5b610327610cf8565b604051808260ff1660ff16815260200191505060405180910390f35b341561034e57600080fd5b610356610d0f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103a357600080fd5b6103cf600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d26565b6040518082815260200191505060405180910390f35b34156103f057600080fd5b6103f8610d6f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561043857808201518184015260208101905061041d565b50505050905090810190601f1680156104655780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561047e57600080fd5b6104b3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e17565b604051808215151515815260200191505060405180910390f35b34156104d857600080fd5b610550600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611021565b604051808215151515815260200191505060405180910390f35b341561057557600080fd5b6105c0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506113b7565b6040518082815260200191505060405180910390f35b34156105e157600080fd5b6105e961143e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561063657600080fd5b61063e611455565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b72faf4afd47eba1d1713c0506f4a05bc36cc590d81565b61069f6114b6565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107355780601f1061070a57610100808354040283529160200191610735565b820191906000526020600020905b81548152906001019060200180831161071857829003601f168201915b5050505050905090565b60006107d082600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461146c90919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600354905090565b600080600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541180156109565750600082115b80156109de575081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610a29575081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b15610cd557610a8082600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461148a90919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b1582600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461146c90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610be782600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461148a90919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610cda565b600090505b9392505050565b720e945d52f3ef8602b3484ce04036ff4d2888ca81565b6000600260009054906101000a900460ff16905090565b729c88134ee3636e7f92a402ed9531df54b802bb81565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610d776114b6565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e0d5780601f10610de257610100808354040283529160200191610e0d565b820191906000526020600020905b815481529060010190602001808311610df057829003601f168201915b5050505050905090565b60008082118015610e675750600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211155b8015610e795750610e77836114a3565b155b1561101657610ed082600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461148a90919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f6582600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461146c90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905061101b565b600090505b92915050565b6000806000841180156110735750600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548411155b80156110845750611083856114a3565b5b156113aa576110db84600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461148a90919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061117084600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461146c90919063ffffffff16565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508490508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3386866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561127857808201518184015260208101905061125d565b50505050905090810190601f1680156112a55780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15156112c557600080fd5b6102c65a03f115156112d657600080fd5b505050826040518082805190602001908083835b60208310151561130f57805182526020820191506020810190506020830392506112ea565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16876040518082815260200191505060405180910390a4600191506113af565b600091505b509392505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b72749ea1ca25e9c027426d74bb3659a80493fa6d81565b721c3234d614f12d5ef931e2871bff35d8c05a2981565b600080828401905083811015151561148057fe5b8091505092915050565b600082821115151561149857fe5b818303905092915050565b600080823b905060008111915050919050565b6020604051908101604052806000815250905600a165627a7a7230582028326947106f53ea60ac9d90780a5a4837c8a6cc0c4ab0a258e54566d34821510029"
}