{
  "address": "0x89205a3a3b2a69de6dbf7f01ed13b2108b2c43e7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Unicorns Token",
  "contractName": "MyToken",
  "compilerVersion": "v0.2.0-nightly.2016.1.13+commit.d2f18c7",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-24\n*/\n\ncontract owned {\n        address public owner;\n\n        function owned() {\n                owner = msg.sender;\n        }\n\n        modifier onlyOwner {\n                if (msg.sender != owner) throw;\n                _\n        }\n\n        function transferOwnership(address newOwner) onlyOwner {\n                owner = newOwner;\n        }\n}\n\n/* The token is used as a voting shares */\ncontract token {\n        function mintToken(address target, uint256 mintedAmount);\n}\n\ncontract Congress is owned {\n\n        /* Contract Variables and events */\n        uint public minimumQuorum;\n        uint public debatingPeriodInMinutes;\n        int public majorityMargin;\n        Proposal[] public proposals;\n        uint public numProposals;\n        mapping(address => uint) public memberId;\n        Member[] public members;\n\n        address public unicornAddress;\n        uint public priceOfAUnicornInFinney;\n\n        event ProposalAdded(uint proposalID, address recipient, uint amount, string description);\n        event Voted(uint proposalID, bool position, address voter, string justification);\n        event ProposalTallied(uint proposalID, int result, uint quorum, bool active);\n        event MembershipChanged(address member);\n        event ChangeOfRules(uint minimumQuorum, uint debatingPeriodInMinutes, int majorityMargin);\n\n        struct Proposal {\n                address recipient;\n                uint amount;\n                string description;\n                uint votingDeadline;\n                bool executed;\n                bool proposalPassed;\n                uint numberOfVotes;\n                int currentResult;\n                bytes32 proposalHash;\n                Vote[] votes;\n                mapping(address => bool) voted;\n        }\n\n        struct Member {\n                address member;\n                uint voteWeight;\n                bool canAddProposals;\n                string name;\n                uint memberSince;\n        }\n\n        struct Vote {\n                bool inSupport;\n                address voter;\n                string justification;\n        }\n\n\n        /* First time setup */\n        function Congress(uint minimumQuorumForProposals, uint minutesForDebate, int marginOfVotesForMajority, address congressLeader) {\n                minimumQuorum = minimumQuorumForProposals;\n                debatingPeriodInMinutes = minutesForDebate;\n                majorityMargin = marginOfVotesForMajority;\n                members.length++;\n                members[0] = Member({\n                        member: 0,\n                        voteWeight: 0,\n                        canAddProposals: false,\n                        memberSince: now,\n                        name: ''\n                });\n                if (congressLeader != 0) owner = congressLeader;\n\n        }\n\n        /*make member*/\n        function changeMembership(address targetMember, uint voteWeight, bool canAddProposals, string memberName) onlyOwner {\n                uint id;\n                if (memberId[targetMember] == 0) {\n                        memberId[targetMember] = members.length;\n                        id = members.length++;\n                        members[id] = Member({\n                                member: targetMember,\n                                voteWeight: voteWeight,\n                                canAddProposals: canAddProposals,\n                                memberSince: now,\n                                name: memberName\n                        });\n                } else {\n                        id = memberId[targetMember];\n                        Member m = members[id];\n                        m.voteWeight = voteWeight;\n                        m.canAddProposals = canAddProposals;\n                        m.name = memberName;\n                }\n\n                MembershipChanged(targetMember);\n\n        }\n\n        /*change rules*/\n        function changeVotingRules(uint minimumQuorumForProposals, uint minutesForDebate, int marginOfVotesForMajority) onlyOwner {\n                minimumQuorum = minimumQuorumForProposals;\n                debatingPeriodInMinutes = minutesForDebate;\n                majorityMargin = marginOfVotesForMajority;\n\n                ChangeOfRules(minimumQuorum, debatingPeriodInMinutes, majorityMargin);\n        }\n\n        // ribbonPriceInEther\n        function changeUnicorn(uint newUnicornPriceInFinney, address newUnicornAddress) onlyOwner {\n                unicornAddress = newUnicornAddress;\n                priceOfAUnicornInFinney = newUnicornPriceInFinney;\n        }\n\n        /* Function to create a new proposal */\n        function newProposalInWei(address beneficiary, uint weiAmount, string JobDescription, bytes transactionBytecode) returns(uint proposalID) {\n                if (memberId[msg.sender] == 0 || !members[memberId[msg.sender]].canAddProposals) throw;\n\n                proposalID = proposals.length++;\n                Proposal p = proposals[proposalID];\n                p.recipient = beneficiary;\n                p.amount = weiAmount;\n                p.description = JobDescription;\n                p.proposalHash = sha3(beneficiary, weiAmount, transactionBytecode);\n                p.votingDeadline = now + debatingPeriodInMinutes * 1 minutes;\n                p.executed = false;\n                p.proposalPassed = false;\n                p.numberOfVotes = 0;\n                ProposalAdded(proposalID, beneficiary, weiAmount, JobDescription);\n                numProposals = proposalID + 1;\n        }\n\n        /* Function to create a new proposal */\n        function newProposalInEther(address beneficiary, uint etherAmount, string JobDescription, bytes transactionBytecode) returns(uint proposalID) {\n                if (memberId[msg.sender] == 0 || !members[memberId[msg.sender]].canAddProposals) throw;\n\n                proposalID = proposals.length++;\n                Proposal p = proposals[proposalID];\n                p.recipient = beneficiary;\n                p.amount = etherAmount * 1 ether;\n                p.description = JobDescription;\n                p.proposalHash = sha3(beneficiary, etherAmount * 1 ether, transactionBytecode);\n                p.votingDeadline = now + debatingPeriodInMinutes * 1 minutes;\n                p.executed = false;\n                p.proposalPassed = false;\n                p.numberOfVotes = 0;\n                ProposalAdded(proposalID, beneficiary, etherAmount, JobDescription);\n                numProposals = proposalID + 1;\n        }\n\n        /* function to check if a proposal code matches */\n        function checkProposalCode(uint proposalNumber, address beneficiary, uint amount, bytes transactionBytecode) constant returns(bool codeChecksOut) {\n                Proposal p = proposals[proposalNumber];\n                return p.proposalHash == sha3(beneficiary, amount, transactionBytecode);\n        }\n\n        function vote(uint proposalNumber, bool supportsProposal, string justificationText) returns(uint voteID) {\n                if (memberId[msg.sender] == 0) throw;\n\n                uint voteWeight = members[memberId[msg.sender]].voteWeight;\n\n                Proposal p = proposals[proposalNumber]; // Get the proposal\n                if (p.voted[msg.sender] == true) throw; // If has already voted, cancel\n                p.voted[msg.sender] = true; // Set this voter as having voted\n                p.numberOfVotes += voteWeight; // Increase the number of votes\n                if (supportsProposal) { // If they support the proposal\n                        p.currentResult += int(voteWeight); // Increase score\n                } else { // If they don't\n                        p.currentResult -= int(voteWeight); // Decrease the score\n                }\n                // Create a log of this event\n                Voted(proposalNumber, supportsProposal, msg.sender, justificationText);\n        }\n\n        function executeProposal(uint proposalNumber, bytes transactionBytecode) returns(int result) {\n                Proposal p = proposals[proposalNumber];\n                /* Check if the proposal can be executed */\n                if (now < p.votingDeadline // has the voting deadline arrived?  \n                        || p.executed // has it been already executed? \n                        || p.proposalHash != sha3(p.recipient, p.amount, transactionBytecode) // Does the transaction code match the proposal? \n                        || p.numberOfVotes < minimumQuorum) // has minimum quorum?\n                        throw;\n\n                /* execute result */\n                if (p.currentResult > majorityMargin) {\n                        /* If difference between support and opposition is larger than margin */\n                        p.recipient.call.value(p.amount)(transactionBytecode);\n                        p.executed = true;\n                        p.proposalPassed = true;\n                } else {\n                        p.executed = true;\n                        p.proposalPassed = false;\n                }\n                // Fire Events\n                ProposalTallied(proposalNumber, p.currentResult, p.numberOfVotes, p.proposalPassed);\n        }\n\n        function() {\n                if (msg.value > priceOfAUnicornInFinney) {\n                        token unicorn = token(unicornAddress);\n                        unicorn.mintToken(msg.sender, msg.value / (priceOfAUnicornInFinney * 1 finney));\n                }\n\n        }\n}\n\n\ncontract MyToken is owned {\n        /* Public variables of the token */\n        string public name;\n        string public symbol;\n        uint8 public decimals;\n        uint256 public totalSupply;\n\n        /* This creates an array with all balances */\n        mapping(address => uint256) public balanceOf;\n        mapping(address => bool) public frozenAccount;\n        mapping(address => mapping(address => uint)) public allowance;\n        mapping(address => mapping(address => uint)) public spentAllowance;\n\n\n        /* This generates a public event on the blockchain that will notify clients */\n        event Transfer(address indexed from, address indexed to, uint256 value);\n        event FrozenFunds(address target, bool frozen);\n\n        /* Initializes contract with initial supply tokens to the creator of the contract */\n        function MyToken(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol, address centralMinter) {\n                if (centralMinter != 0) owner = centralMinter; // Sets the minter\n                balanceOf[msg.sender] = initialSupply; // Give the creator all initial tokens                    \n                name = tokenName; // Set the name for display purposes     \n                symbol = tokenSymbol; // Set the symbol for display purposes    \n                decimals = decimalUnits; // Amount of decimals for display purposes        \n                totalSupply = initialSupply;\n        }\n\n        /* Send coins */\n        function transfer(address _to, uint256 _value) {\n                if (balanceOf[msg.sender] < _value) throw; // Check if the sender has enough   \n                if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n                if (frozenAccount[msg.sender]) throw; // Check if frozen\n                balanceOf[msg.sender] -= _value; // Subtract from the sender\n                balanceOf[_to] += _value; // Add the same to the recipient            \n                Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\n        }\n\n        function mintToken(address target, uint256 mintedAmount) onlyOwner {\n                balanceOf[target] += mintedAmount;\n                totalSupply += mintedAmount;\n                Transfer(owner, target, mintedAmount);\n        }\n\n        function freezeAccount(address target, bool freeze) onlyOwner {\n                frozenAccount[target] = freeze;\n                FrozenFunds(target, freeze);\n        }\n\n        function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\n                if (balanceOf[_from] < _value) throw; // Check if the sender has enough   \n                if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n                if (frozenAccount[_from]) throw; // Check if frozen\n                if (spentAllowance[_from][msg.sender] + _value > allowance[_from][msg.sender]) throw; // Check allowance\n                balanceOf[_from] -= _value; // Subtract from the sender\n                balanceOf[_to] += _value; // Add the same to the recipient            \n                spentAllowance[_from][msg.sender] += _value;\n                Transfer(msg.sender, _to, _value);\n        }\n\n        function approve(address _spender, uint256 _value) returns(bool success) {\n                allowance[msg.sender][_spender] = _value;\n        }\n\n        function() {\n                //owner.send(msg.value);\n                throw;\n        }\n}",
  "bytecode": "60606040526040516108ee3803806108ee83398101604052805160805160a05160c05160e0519394928301939192019060008054600160a060020a03191633179055600160a060020a0381166000146100655760008054600160a060020a031916821790555b600160a060020a033316600090815260056020908152604082208790558551600180549381905292600281851615610100026000190190911604601f9081018390047fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69081019390919089019083901061010257805160ff19168380011785555b506101329291505b8082111561018b57600081556001016100ee565b828001600101855582156100e6579182015b828111156100e6578251826000505591602001919060010190610114565b50508160026000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061018f57805160ff19168380011785555b506101bf9291506100ee565b5090565b8280016001018555821561017f579182015b8281111561017f5782518260005055916020019190600101906101a1565b50506003805460ff19169390931790925550505060045561070a806101e46000396000f3606060405236156100b95760e060020a600035046306fdde0381146100c1578063095ea7b31461011d57806318160ddd1461015857806323b872dd14610161578063313ce5671461019357806370a082311461019f57806379c65068146101b75780638da5cb5b146101db57806395d89b41146101ed578063a9059cbb14610246578063b414d4b614610275578063dc3080f214610290578063dd62ed3e146102b5578063e724529c146102da578063f2fde38b146102fe575b61031f610002565b610321600180546020600282841615610100026000190190921691909104601f810182900490910260809081016040526060828152929190828280156103dc5780601f106103b1576101008083540402835291602001916103dc565b600160a060020a03338116600090815260076020908152604080832060043594909416835292905290812060243590555b6060908152602090f35b61014e60045481565b61014e600435602435604435600160a060020a0383166000908152600560205260408120548290101561058a57610002565b61014e60035460ff1681565b61014e60043560056020526000908152604090205481565b61031f60043560243560005433600160a060020a039081169116146104d957610002565b61014e600054600160a060020a031681565b610321600280546020601f600019600184161561010002019092168390049182018190040260809081016040526060828152929190828280156103dc5780601f106103b1576101008083540402835291602001916103dc565b61031f60043560243533600160a060020a0316600090815260056020526040902054819010156103e457610002565b61014e60043560066020526000908152604090205460ff1681565b60086020908152600435600090815260408082209092526024358152205461014e9081565b60076020908152600435600090815260408082209092526024358152205461014e9081565b61031f60043560243560005433600160a060020a0390811691161461053557610002565b61031f60043560005433600160a060020a0390811691161461038f57610002565b005b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156103815780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000805473ffffffffffffffffffffffffffffffffffffffff19168217905550565b820191906000526020600020905b8154815290600101906020018083116103bf57829003601f168201915b505050505081565b600160a060020a03821660009081526040902054808201101561040657610002565b33600160a060020a031660009081526006602052604090205460ff161561042c57610002565b806005600050600033600160a060020a03168152602001908152602001600020600082828250540392505081905550806005600050600084600160a060020a0316815260200190815260200160002060008282825054019250508190555081600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600160a060020a0380831660008181526005602090815260408220805486019055600480548601905590546060858152929316917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a35050565b600160a060020a03821660008181526006602052604090819020805460ff191684179055606091825260808390527f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a591a15050565b600160a060020a0383168152604081205482810110156105a957610002565b600160a060020a03841681526006602052604081205460ff16156105cc57610002565b600760209081526040808320600160a060020a033381168086529184528285205490881685526008845282852091855292528220548301111561060e57610002565b816005600050600086600160a060020a03168152602001908152602001600020600082828250540392505081905550816005600050600085600160a060020a03168152602001908152602001600020600082828250540192505081905550816008600050600086600160a060020a03168152602001908152602001600020600050600033600160a060020a0316815260200190815260200160002060008282825054019250508190555082600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3939250505056000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000fb6916095ca1df60bb79ce92ce3ea74c37c5d3590000000000000000000000000000000000000000000000000000000000000008556e69636f726e730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004f09fa68400000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000fb6916095ca1df60bb79ce92ce3ea74c37c5d3590000000000000000000000000000000000000000000000000000000000000008556e69636f726e730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004f09fa68400000000000000000000000000000000000000000000000000000000"
}