{
  "address": "0x7a3822a45dd6e6c91cc87012b3059266106e122d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Crowdsale",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-30\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Transfer {\n  function safeTransfer(\n    IERC20 token,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transfer(to, value));\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale,\n * allowing investors to purchase tokens with ether. This contract implements\n * such functionality in its most fundamental form and can be extended to provide additional\n * functionality and/or custom behavior.\n * The external interface represents the basic interface for purchasing tokens, and conform\n * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\n * behavior.\n */\ncontract Crowdsale is Ownable {\n  using SafeMath for uint256;\n  using SafeERC20Transfer for IERC20;\n\n  // The token being sold\n  IERC20 private _token;\n\n  // Address where funds are collected\n  address private _wallet;\n\n  // How many token units a buyer gets per 1 ETH.\n  uint256 private _rate = 5000;\n\n  // Amount of wei raised\n  uint256 private _weiRaised;\n\n  // Accrued tokens amount\n  uint256 private _accruedTokensAmount;\n\n  // freezing periods in seconds\n  uint256 private _threeMonths = 5256000;\n  uint256 private _sixMonths = 15768000;\n  uint256 private _nineMonths = 21024000;\n  uint256 private _twelveMonths = 31536000;\n\n  // ICO configuration\n  uint256 private _foundersTokens = 4e7;\n  uint256 private _distributedTokens = 1e9;\n  uint256 public softCap = 1000 ether;\n  uint256 public hardCap = 35000 ether;\n  uint256 public preICO_1_Start = 1541030400; // 01/11/2018 00:00:00\n  uint256 public preICO_2_Start = 1541980800; // 12/11/2018 00:00:00\n  uint256 public preICO_3_Start = 1542844800; // 22/11/2018 00:00:00\n  uint256 public ICO_Start = 1543622400; // 01/12/2018 00:00:00\n  uint256 public ICO_End = 1548979199; // 31/01/2019 23:59:59\n  uint32 public bonus1 = 30; // pre ICO phase 1\n  uint32 public bonus2 = 20; // pre ICO phase 2\n  uint32 public bonus3 = 10; // pre ICO phase 3\n  uint32 public whitelistedBonus = 10;\n\n  mapping (address => bool) private _whitelist;\n\n  // tokens accrual\n  mapping (address => uint256) public threeMonthsFreezingAccrual;\n  mapping (address => uint256) public sixMonthsFreezingAccrual;\n  mapping (address => uint256) public nineMonthsFreezingAccrual;\n  mapping (address => uint256) public twelveMonthsFreezingAccrual;\n\n  // investors ledger\n  mapping (address => uint256) public ledger;\n\n  /**\n   * Event for tokens accrual logging\n   * @param to who tokens where accrued to\n   * @param accruedAmount amount of tokens accrued\n   * @param freezingTime period for freezing in seconds\n   * @param purchasedAmount amount of tokens purchased\n   * @param weiValue amount of ether contributed\n   */\n  event Accrual(\n    address to,\n    uint256 accruedAmount,\n    uint256 freezingTime,\n    uint256 purchasedAmount,\n    uint256 weiValue\n  );\n\n  /**\n   * Event for accrued tokens releasing logging\n   * @param to who tokens where release to\n   * @param amount amount of tokens released\n   */\n  event Released(\n    address to,\n    uint256 amount\n  );\n\n  /**\n   * Event for refund logging\n   * @param to who have got refund\n   * @param value ether refunded\n   */\n  event Refunded(\n    address to,\n    uint256 value\n  );\n\n  /**\n   * Event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokensPurchased(\n    address indexed purchaser,\n    address indexed beneficiary,\n    uint256 value,\n    uint256 amount\n  );\n\n  /**\n   * @dev The rate is the conversion between wei and the smallest and indivisible\n   * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\n   * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\n   * @param wallet Address where collected funds will be forwarded to\n   * @param founders Address for founders tokens accrual\n   * @param token Address of the token being sold\n   */\n  constructor(address newOwner, address wallet, address founders, IERC20 token) public {\n    require(wallet != address(0));\n    require(founders != address(0));\n    require(token != address(0));\n    require(newOwner != address(0));\n    transferOwnership(newOwner);\n\n    _wallet = wallet;\n    _token = token;\n\n    twelveMonthsFreezingAccrual[founders] = _foundersTokens;\n    _accruedTokensAmount = _foundersTokens;\n    emit Accrual(founders, _foundersTokens, _twelveMonths, 0, 0);\n  }\n\n  // -----------------------------------------\n  // Crowdsale external interface\n  // -----------------------------------------\n\n  /**\n   * @dev fallback function ***DO NOT OVERRIDE***\n   */\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * @return the token being sold.\n   */\n  function token() public view returns(IERC20) {\n    return _token;\n  }\n\n  /**\n   * @return the address where funds are collected.\n   */\n  function wallet() public view returns(address) {\n    return _wallet;\n  }\n\n  /**\n   * @return the number of token units a buyer gets per wei.\n   */\n  function rate() public view returns(uint256) {\n    return _rate;\n  }\n\n  /**\n   * @return the amount of wei raised.\n   */\n  function weiRaised() public view returns (uint256) {\n    return _weiRaised;\n  }\n\n  /**\n   * @return if who is whitelisted.\n   * @param who investors address\n   */\n  function whitelist(address who) public view returns (bool) {\n    return _whitelist[who];\n  }\n\n  /**\n   * add investor to whitelist\n   * @param who investors address\n   */\n  function addToWhitelist(address who) public onlyOwner {\n    _whitelist[who] = true;\n  }\n\n  /**\n   * remove investor from whitelist\n   * @param who investors address\n   */\n  function removeFromWhitelist(address who) public onlyOwner {\n    _whitelist[who] = false;\n  }\n\n  /**\n   * Accrue bonuses to advisors\n   * @param to address for accrual\n   * @param amount tokem amount\n   */\n  function accrueAdvisorsTokens(address to, uint256 amount) public onlyOwner {\n    require(now > ICO_End);\n    uint256 tokenBalance = _token.balanceOf(address(this));\n    require(tokenBalance >= _accruedTokensAmount.add(amount));\n\n    _accruedTokensAmount = _accruedTokensAmount.add(amount);\n    \n    sixMonthsFreezingAccrual[to] = sixMonthsFreezingAccrual[to].add(amount);\n\n    emit Accrual(to, amount, _sixMonths, 0, 0);    \n  }\n\n  /**\n   * Accrue bonuses to partners\n   * @param to address for accrual\n   * @param amount tokem amount\n   */\n  function accruePartnersTokens(address to, uint256 amount) public onlyOwner {\n    require(now > ICO_End);\n    uint256 tokenBalance = _token.balanceOf(address(this));\n    require(tokenBalance >= _accruedTokensAmount.add(amount));\n\n    _accruedTokensAmount = _accruedTokensAmount.add(amount);\n    \n    nineMonthsFreezingAccrual[to] = nineMonthsFreezingAccrual[to].add(amount);\n\n    emit Accrual(to, amount, _nineMonths, 0, 0);    \n  }\n\n  /**\n   * Accrue bounty and airdrop bonuses\n   * @param to address for accrual\n   * @param amount tokem amount\n   */\n  function accrueBountyTokens(address to, uint256 amount) public onlyOwner {\n    require(now > ICO_End);\n    uint256 tokenBalance = _token.balanceOf(address(this));\n    require(tokenBalance >= _accruedTokensAmount.add(amount));\n\n    _accruedTokensAmount = _accruedTokensAmount.add(amount);\n    \n    twelveMonthsFreezingAccrual[to] = twelveMonthsFreezingAccrual[to].add(amount);\n\n    emit Accrual(to, amount, _twelveMonths, 0, 0);    \n  }\n\n  /**\n   * release accrued tokens\n   */\n  function release() public {\n    address who = msg.sender;\n    uint256 amount;\n    if (now > ICO_End.add(_twelveMonths) && twelveMonthsFreezingAccrual[who] > 0) {\n      amount = amount.add(twelveMonthsFreezingAccrual[who]);\n      _accruedTokensAmount = _accruedTokensAmount.sub(twelveMonthsFreezingAccrual[who]);\n      twelveMonthsFreezingAccrual[who] = 0;\n    }\n    if (now > ICO_End.add(_nineMonths) && nineMonthsFreezingAccrual[who] > 0) {\n      amount = amount.add(nineMonthsFreezingAccrual[who]);\n      _accruedTokensAmount = _accruedTokensAmount.sub(nineMonthsFreezingAccrual[who]);\n      nineMonthsFreezingAccrual[who] = 0;\n    }\n    if (now > ICO_End.add(_sixMonths) && sixMonthsFreezingAccrual[who] > 0) {\n      amount = amount.add(sixMonthsFreezingAccrual[who]);\n      _accruedTokensAmount = _accruedTokensAmount.sub(sixMonthsFreezingAccrual[who]);\n      sixMonthsFreezingAccrual[who] = 0;\n    }\n    if (now > ICO_End.add(_threeMonths) && threeMonthsFreezingAccrual[who] > 0) {\n      amount = amount.add(threeMonthsFreezingAccrual[who]);\n      _accruedTokensAmount = _accruedTokensAmount.sub(threeMonthsFreezingAccrual[who]);\n      threeMonthsFreezingAccrual[who] = 0;\n    }\n    if (amount > 0) {\n      _deliverTokens(who, amount);\n      emit Released(who, amount);\n    }\n  }\n\n  /**\n   * refund ether\n   */\n  function refund() public {\n    address investor = msg.sender;\n    require(now > ICO_End);\n    require(_weiRaised < softCap);\n    require(ledger[investor] > 0);\n    uint256 value = ledger[investor];\n    ledger[investor] = 0;\n    investor.transfer(value);\n    emit Refunded(investor, value);\n  }\n\n  /**\n   * @dev low level token purchase ***DO NOT OVERRIDE***\n   * @param beneficiary Address performing the token purchase\n   */\n  function buyTokens(address beneficiary) public payable {\n    uint256 weiAmount = msg.value;\n    _preValidatePurchase(beneficiary, weiAmount);\n\n    // calculate token amount to be created\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    // bonus tokens accrual and ensure token balance is enough for accrued tokens release\n    _accrueBonusTokens(beneficiary, tokens, weiAmount);\n\n    // update state\n    _weiRaised = _weiRaised.add(weiAmount);\n\n    _processPurchase(beneficiary, tokens);\n    emit TokensPurchased(\n      msg.sender,\n      beneficiary,\n      weiAmount,\n      tokens\n    );\n\n    if (_weiRaised >= softCap) _forwardFunds();\n\n    ledger[msg.sender] = ledger[msg.sender].add(msg.value);\n  }\n\n  // -----------------------------------------\n  // Internal interface (extensible)\n  // -----------------------------------------\n\n    /**\n   * @dev Accrue bonus tokens.\n   * @param beneficiary Address for tokens accrual\n   * @param tokenAmount amount of tokens that beneficiary get\n   */\n  function _accrueBonusTokens(address beneficiary, uint256 tokenAmount, uint256 weiAmount) internal {\n    uint32 bonus = 0;\n    uint256 bonusTokens = 0;\n    uint256 tokenBalance = _token.balanceOf(address(this));\n    if (_whitelist[beneficiary] && now < ICO_Start) bonus = bonus + whitelistedBonus;\n    if (now < preICO_2_Start) {\n      bonus = bonus + bonus1;\n      bonusTokens = tokenAmount.mul(bonus).div(100);\n\n      require(tokenBalance >= _accruedTokensAmount.add(bonusTokens).add(tokenAmount));\n\n      _accruedTokensAmount = _accruedTokensAmount.add(bonusTokens);\n\n      nineMonthsFreezingAccrual[beneficiary] = nineMonthsFreezingAccrual[beneficiary].add(bonusTokens);\n\n      emit Accrual(beneficiary, bonusTokens, _nineMonths, tokenAmount, weiAmount);\n    } else if (now < preICO_3_Start) {\n      bonus = bonus + bonus2;\n      bonusTokens = tokenAmount.mul(bonus).div(100);\n\n      require(tokenBalance >= _accruedTokensAmount.add(bonusTokens).add(tokenAmount));\n\n      _accruedTokensAmount = _accruedTokensAmount.add(bonusTokens);\n      \n      sixMonthsFreezingAccrual[beneficiary] = sixMonthsFreezingAccrual[beneficiary].add(bonusTokens);\n\n      emit Accrual(beneficiary, bonusTokens, _sixMonths, tokenAmount, weiAmount);\n    } else if (now < ICO_Start) {\n      bonus = bonus + bonus3;\n      bonusTokens = tokenAmount.mul(bonus).div(100);\n\n      require(tokenBalance >= _accruedTokensAmount.add(bonusTokens).add(tokenAmount));\n\n      _accruedTokensAmount = _accruedTokensAmount.add(bonusTokens);\n      \n      threeMonthsFreezingAccrual[beneficiary] = threeMonthsFreezingAccrual[beneficiary].add(bonusTokens);\n\n      emit Accrual(beneficiary, bonusTokens, _threeMonths, tokenAmount, weiAmount);\n    } else {\n      require(tokenBalance >= _accruedTokensAmount.add(tokenAmount));\n\n      emit Accrual(beneficiary, 0, 0, tokenAmount, weiAmount);\n    }\n  }\n\n  /**\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n   * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n   *   super._preValidatePurchase(beneficiary, weiAmount);\n   *   require(weiRaised().add(weiAmount) <= cap);\n   * @param beneficiary Address performing the token purchase\n   * @param weiAmount Value in wei involved in the purchase\n   */\n  function _preValidatePurchase(\n    address beneficiary,\n    uint256 weiAmount\n  )\n    internal view\n  {\n    require(beneficiary != address(0));\n    require(weiAmount != 0);\n    require(_weiRaised.add(weiAmount) <= hardCap);\n    require(now >= preICO_1_Start);\n    require(now <= ICO_End);\n  }\n\n  /**\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n   * @param beneficiary Address performing the token purchase\n   * @param tokenAmount Number of tokens to be emitted\n   */\n  function _deliverTokens(\n    address beneficiary,\n    uint256 tokenAmount\n  )\n    internal\n  {\n    _token.safeTransfer(beneficiary, tokenAmount);\n  }\n\n  /**\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n   * @param beneficiary Address receiving the tokens\n   * @param tokenAmount Number of tokens to be purchased\n   */\n  function _processPurchase(\n    address beneficiary,\n    uint256 tokenAmount\n  )\n    internal\n  {\n    _deliverTokens(beneficiary, tokenAmount);\n  }\n\n  /**\n   * @dev The way in which ether is converted to tokens.\n   * @param weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n  function _getTokenAmount(\n    uint256 weiAmount\n  )\n    internal view returns (uint256)\n  {\n    return weiAmount.mul(_rate).div(1e18);\n  }\n\n  /**\n   * @dev Determines how ETH is stored/forwarded on purchases.\n   */\n  function _forwardFunds() internal {\n    uint256 balance = address(this).balance;\n    _wallet.transfer(balance);\n  }\n}",
  "bytecode": "60806040526113886003556250334060065562f099c0600755630140cd006008556301e133806009556302625a00600a55633b9aca00600b55683635c9adc5dea00000600c556907695a92c20d6fe00000600d55635bda4200600e55635be8c280600f55635bf5f180601055635c01cf00601155635c538bff60125560138054601e63ffffffff199091161767ffffffff00000000191664140000000017604060020a63ffffffff021916680a000000000000000017606060020a63ffffffff0219166c0a000000000000000000000000179055348015620000e057600080fd5b5060405160808062001ae9833981016040818152825160208401519184015160609094015160008054600160a060020a0319163317808255929593949192600160a060020a03169160008051602062001ac9833981519152908290a3600160a060020a03831615156200015257600080fd5b600160a060020a03821615156200016857600080fd5b600160a060020a03811615156200017e57600080fd5b600160a060020a03841615156200019457600080fd5b620001a8846401000000006200024a810204565b60028054600160a060020a03808616600160a060020a031992831617909255600180548484169216919091179055600a54908316600081815260186020908152604080832085905560058590556009548151948552918401949094528284015260608201819052608082015290517fa888b50527526c3db4d6172eed7af64df088fbd9343a416802d4b264f15477e19181900360a00190a150505050620002f1565b6200025d64010000000062000280810204565b15156200026957600080fd5b6200027d8164010000000062000291810204565b50565b600054600160a060020a0316331490565b600160a060020a0381161515620002a757600080fd5b60008054604051600160a060020a038085169392169160008051602062001ac983398151915291a360008054600160a060020a031916600160a060020a0392909216919091179055565b6117c880620003016000396000f3006080604052600436106101a05763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663122eb42181146101ab57806328553325146101de57806328c0f928146102025780632c4e722e14610217578063308181891461022c5780634042b66f1461025a5780634e3e5d691461026f578063521eb273146102845780635689dfc5146102b5578063590e1ae3146102d957806367e8d3d2146102ee57806370cfb15914610303578063715018a614610327578063720531241461033c578063867a30d91461035d57806386d1a69f1461037e5780638ab1d681146103935780638da5cb5b146103b45780638f32d59b146103c9578063906a26e0146103f25780639b19251a146104075780639fe6a6f114610428578063a48eaa201461043d578063ab86ba3a14610452578063ccf9495d14610467578063e33e7ffd1461047c578063e43252d714610491578063e508750b146104b2578063ec8ac4d8146104d3578063f2fde38b146104e7578063fb86a40414610508578063fbfa941f1461051d578063fc0c546a1461053e575b6101a933610553565b005b3480156101b757600080fd5b506101cc600160a060020a0360043516610626565b60408051918252519081900360200190f35b3480156101ea57600080fd5b506101a9600160a060020a0360043516602435610638565b34801561020e57600080fd5b506101cc610794565b34801561022357600080fd5b506101cc61079a565b34801561023857600080fd5b506102416107a0565b6040805163ffffffff9092168252519081900360200190f35b34801561026657600080fd5b506101cc6107ac565b34801561027b57600080fd5b506101cc6107b2565b34801561029057600080fd5b506102996107b8565b60408051600160a060020a039092168252519081900360200190f35b3480156102c157600080fd5b506101a9600160a060020a03600435166024356107c7565b3480156102e557600080fd5b506101a9610923565b3480156102fa57600080fd5b506102416109fd565b34801561030f57600080fd5b506101a9600160a060020a0360043516602435610a11565b34801561033357600080fd5b506101a9610b6d565b34801561034857600080fd5b506101cc600160a060020a0360043516610bd7565b34801561036957600080fd5b506101cc600160a060020a0360043516610be9565b34801561038a57600080fd5b506101a9610bfb565b34801561039f57600080fd5b506101a9600160a060020a0360043516610f2c565b3480156103c057600080fd5b50610299610f60565b3480156103d557600080fd5b506103de610f6f565b604080519115158252519081900360200190f35b3480156103fe57600080fd5b506101cc610f80565b34801561041357600080fd5b506103de600160a060020a0360043516610f86565b34801561043457600080fd5b506101cc610fa4565b34801561044957600080fd5b506101cc610faa565b34801561045e57600080fd5b50610241610fb0565b34801561047357600080fd5b506101cc610fc8565b34801561048857600080fd5b50610241610fce565b34801561049d57600080fd5b506101a9600160a060020a0360043516610fea565b3480156104be57600080fd5b506101cc600160a060020a0360043516611021565b6101a9600160a060020a0360043516610553565b3480156104f357600080fd5b506101a9600160a060020a0360043516611033565b34801561051457600080fd5b506101cc611052565b34801561052957600080fd5b506101cc600160a060020a0360043516611058565b34801561054a57600080fd5b5061029961106a565b3460006105608383611079565b610569826110d9565b905061057683828461110e565b600454610589908363ffffffff61156016565b600455610596838261157d565b60408051838152602081018390528151600160a060020a0386169233927f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b929081900390910190a3600c54600454106105f1576105f1611587565b33600090815260196020526040902054610611903463ffffffff61156016565b33600090815260196020526040902055505050565b60176020526000908152604090205481565b6000610642610f6f565b151561064d57600080fd5b601254421161065b57600080fd5b6001546040805160e060020a6370a082310281523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b1580156106ab57600080fd5b505af11580156106bf573d6000803e3d6000fd5b505050506040513d60208110156106d557600080fd5b50516005549091506106ed908363ffffffff61156016565b8110156106f957600080fd5b60055461070c908363ffffffff61156016565b600555600160a060020a038316600090815260186020526040902054610738908363ffffffff61156016565b600160a060020a038416600081815260186020908152604080832094909455600954845193845290830186905282840152606082018190526080820152905160008051602061177d8339815191529181900360a00190a1505050565b60105481565b60035490565b60135463ffffffff1681565b60045490565b600f5481565b600254600160a060020a031690565b60006107d1610f6f565b15156107dc57600080fd5b60125442116107ea57600080fd5b6001546040805160e060020a6370a082310281523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b15801561083a57600080fd5b505af115801561084e573d6000803e3d6000fd5b505050506040513d602081101561086457600080fd5b505160055490915061087c908363ffffffff61156016565b81101561088857600080fd5b60055461089b908363ffffffff61156016565b600555600160a060020a0383166000908152601760205260409020546108c7908363ffffffff61156016565b600160a060020a038416600081815260176020908152604080832094909455600854845193845290830186905282840152606082018190526080820152905160008051602061177d8339815191529181900360a00190a1505050565b6012543390600090421161093657600080fd5b600c546004541061094657600080fd5b600160a060020a0382166000908152601960205260408120541161096957600080fd5b50600160a060020a038116600081815260196020526040808220805490839055905190929183156108fc02918491818181858888f193505050501580156109b4573d6000803e3d6000fd5b5060408051600160a060020a03841681526020810183905281517fd7dee2702d63ad89917b6a4da9981c90c4d24f8c2bdfd64c604ecae57d8d0651929181900390910190a15050565b601354640100000000900463ffffffff1681565b6000610a1b610f6f565b1515610a2657600080fd5b6012544211610a3457600080fd5b6001546040805160e060020a6370a082310281523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b158015610a8457600080fd5b505af1158015610a98573d6000803e3d6000fd5b505050506040513d6020811015610aae57600080fd5b5051600554909150610ac6908363ffffffff61156016565b811015610ad257600080fd5b600554610ae5908363ffffffff61156016565b600555600160a060020a038316600090815260166020526040902054610b11908363ffffffff61156016565b600160a060020a038416600081815260166020908152604080832094909455600754845193845290830186905282840152606082018190526080820152905160008051602061177d8339815191529181900360a00190a1505050565b610b75610f6f565b1515610b8057600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60186020526000908152604090205481565b60166020526000908152604090205481565b6009546012543391600091610c159163ffffffff61156016565b42118015610c395750600160a060020a038216600090815260186020526040812054115b15610cb457600160a060020a038216600090815260186020526040902054610c6890829063ffffffff61156016565b600160a060020a038316600090815260186020526040902054600554919250610c97919063ffffffff6115c216565b600555600160a060020a0382166000908152601860205260408120555b600854601254610cc99163ffffffff61156016565b42118015610ced5750600160a060020a038216600090815260176020526040812054115b15610d6857600160a060020a038216600090815260176020526040902054610d1c90829063ffffffff61156016565b600160a060020a038316600090815260176020526040902054600554919250610d4b919063ffffffff6115c216565b600555600160a060020a0382166000908152601760205260408120555b600754601254610d7d9163ffffffff61156016565b42118015610da15750600160a060020a038216600090815260166020526040812054115b15610e1c57600160a060020a038216600090815260166020526040902054610dd090829063ffffffff61156016565b600160a060020a038316600090815260166020526040902054600554919250610dff919063ffffffff6115c216565b600555600160a060020a0382166000908152601660205260408120555b600654601254610e319163ffffffff61156016565b42118015610e555750600160a060020a038216600090815260156020526040812054115b15610ed057600160a060020a038216600090815260156020526040902054610e8490829063ffffffff61156016565b600160a060020a038316600090815260156020526040902054600554919250610eb3919063ffffffff6115c216565b600555600160a060020a0382166000908152601560205260408120555b6000811115610f2857610ee382826115d9565b60408051600160a060020a03841681526020810183905281517fb21fb52d5749b80f3182f8c6992236b5e5576681880914484d7f4c9b062e619e929181900390910190a15b5050565b610f34610f6f565b1515610f3f57600080fd5b600160a060020a03166000908152601460205260409020805460ff19169055565b600054600160a060020a031690565b600054600160a060020a0316331490565b600c5481565b600160a060020a031660009081526014602052604090205460ff1690565b60115481565b60125481565b60135468010000000000000000900463ffffffff1681565b600e5481565b6013546c01000000000000000000000000900463ffffffff1681565b610ff2610f6f565b1515610ffd57600080fd5b600160a060020a03166000908152601460205260409020805460ff19166001179055565b60156020526000908152604090205481565b61103b610f6f565b151561104657600080fd5b61104f816115f6565b50565b600d5481565b60196020526000908152604090205481565b600154600160a060020a031690565b600160a060020a038216151561108e57600080fd5b80151561109a57600080fd5b600d546004546110b0908363ffffffff61156016565b11156110bb57600080fd5b600e544210156110ca57600080fd5b601254421115610f2857600080fd5b6000611108670de0b6b3a76400006110fc6003548561167390919063ffffffff16565b9063ffffffff6116a116565b92915050565b6001546040805160e060020a6370a08231028152306004820152905160009283928392600160a060020a03909216916370a082319160248082019260209290919082900301818787803b15801561116457600080fd5b505af1158015611178573d6000803e3d6000fd5b505050506040513d602081101561118e57600080fd5b5051600160a060020a03871660009081526014602052604090205490915060ff1680156111bc575060115442105b156111e0576013546c01000000000000000000000000900463ffffffff1692909201915b600f544210156112e55760135463ffffffff9081169390930192611211906064906110fc9088908781169061167316565b91506112388561122c8460055461156090919063ffffffff16565b9063ffffffff61156016565b81101561124457600080fd5b600554611257908363ffffffff61156016565b600555600160a060020a038616600090815260176020526040902054611283908363ffffffff61156016565b600160a060020a038716600081815260176020908152604091829020939093556008548151928352928201859052818101929092526060810187905260808101869052905160008051602061177d8339815191529181900360a00190a1611558565b6010544210156113ec57601360049054906101000a900463ffffffff168301925061132460646110fc8563ffffffff168861167390919063ffffffff16565b915061133f8561122c8460055461156090919063ffffffff16565b81101561134b57600080fd5b60055461135e908363ffffffff61156016565b600555600160a060020a03861660009081526016602052604090205461138a908363ffffffff61156016565b600160a060020a038716600081815260166020908152604091829020939093556007548151928352928201859052818101929092526060810187905260808101869052905160008051602061177d8339815191529181900360a00190a1611558565b6011544210156114f357601360089054906101000a900463ffffffff168301925061142b60646110fc8563ffffffff168861167390919063ffffffff16565b91506114468561122c8460055461156090919063ffffffff16565b81101561145257600080fd5b600554611465908363ffffffff61156016565b600555600160a060020a038616600090815260156020526040902054611491908363ffffffff61156016565b600160a060020a038716600081815260156020908152604091829020939093556006548151928352928201859052818101929092526060810187905260808101869052905160008051602061177d8339815191529181900360a00190a1611558565b600554611506908663ffffffff61156016565b81101561151257600080fd5b60408051600160a060020a0388168152600060208201819052818301526060810187905260808101869052905160008051602061177d8339815191529181900360a00190a15b505050505050565b60008282018381101561157257600080fd5b8091505b5092915050565b610f2882826115d9565b600254604051303191600160a060020a03169082156108fc029083906000818181858888f19350505050158015610f28573d6000803e3d6000fd5b600080838311156115d257600080fd5b5050900390565b600154610f2890600160a060020a0316838363ffffffff6116c416565b600160a060020a038116151561160b57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000808315156116865760009150611576565b5082820282848281151561169657fe5b041461157257600080fd5b6000808083116116b057600080fd5b82848115156116bb57fe5b04949350505050565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561174057600080fd5b505af1158015611754573d6000803e3d6000fd5b505050506040513d602081101561176a57600080fd5b5051151561177757600080fd5b5050505600a888b50527526c3db4d6172eed7af64df088fbd9343a416802d4b264f15477e1a165627a7a723058208f3e78455d248ab8a56f01da363766a8b8b5a0887171c0bec12c56f22a30c79600298be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0000000000000000000000000d0dff57971c7e064fefa475b4547652183d8da1f000000000000000000000000161efcf7a6a38ec690954fc427630dd4ba7c6454000000000000000000000000d0dff57971c7e064fefa475b4547652183d8da1f0000000000000000000000009ce3ddb8885cd217392b3fc29bc648965029192f",
  "constructorArguments": "000000000000000000000000d0dff57971c7e064fefa475b4547652183d8da1f000000000000000000000000161efcf7a6a38ec690954fc427630dd4ba7c6454000000000000000000000000d0dff57971c7e064fefa475b4547652183d8da1f0000000000000000000000009ce3ddb8885cd217392b3fc29bc648965029192f"
}