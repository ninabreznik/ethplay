{
  "address": "0x4228b993d0a0b3cd9bb097210b50c7c20d1cb7a8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BasicERC20token",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-29\n*/\n\npragma solidity ^0.4.25;\n\ncontract BasicERC20token {\n\n    uint256 constant MAX_UINT256 = 2**256 - 1;\n    uint256 public totalSupply;\n    string public name;\n    uint8 public decimals;\n    string public symbol;\n    string public version = 'smartmachine_basic_erc20_token_01';\n    address public creator;\n    uint public init;\n    address public Factory;\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    constructor() public {}\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success) {\n        uint256 allowance = allowed[_from][msg.sender];\n        require(balances[_from] >= _value && allowance >= _value);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        if (allowance < MAX_UINT256) {\n            allowed[_from][msg.sender] -= _value;\n        }\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n    /* Approves and then calls the receiving contract */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        require(_spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData));\n        return true;\n    }\n\n\n    function init(\n        uint256 _initialAmount,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        address _owner\n        ) public returns (bool){\n        if(init>0)revert();\n        balances[_owner] = _initialAmount;\n        totalSupply = _initialAmount;\n        name = _tokenName; \n        decimals = _decimalUnits;\n        symbol = _tokenSymbol;   \n        creator=_owner;\n        Factory=msg.sender;\n        init=1;\n        return true;\n    }\n\n    function init2(\n        uint256 _initialAmount,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        address _owner,\n        address _freebie\n        ) public returns (bool){\n        if(init>0)revert();\n        FloodNameSys flood= FloodNameSys(address(0x63030f02d4B18acB558750db1Dc9A2F3961531eE));\n        uint256 p=flood.freebiePercentage();\n        if(_initialAmount>1000){\n            balances[_owner] = _initialAmount-((_initialAmount/1000)*p);\n            balances[_freebie] = (_initialAmount/1000)*p;\n        }else{\n            balances[_owner] = _initialAmount;\n        }\n        totalSupply = _initialAmount;\n        name = _tokenName;\n        decimals = _decimalUnits;\n        symbol = _tokenSymbol;   \n        creator=_owner;\n        Factory=msg.sender;\n        init=1;\n        return true;\n    }\n}\n\ncontract FloodNameSys{\n\n\taddress public owner;\n\tbool public gift;\n\tuint256 public giftAmount;\n\taddress[] public list;\n\tBasicERC20token public flood;\n\tuint256 public cost;\n\tuint256 public freebiePercentage;\n\tuint256 public totalCoins;\n\tuint256 public totalFreeCoins;\n\tmapping(address => address[]) public created;\n\tmapping(address => address[]) public generated;\n\tmapping(address => address) public generator;\n\tmapping(address => bool) public permission;\n\tmapping(string => bool) names;\n\tmapping(string => bool) symbols;\n\tmapping(string => address) namesAddress;\n\tmapping(string => address) symbolsAddress;\n\tmapping(address => string)public tokenNames;\n\tmapping(address => string)public tokenSymbols;\n\n\n\tconstructor() public{\n\t\towner=msg.sender;\n\t\tpermission[msg.sender]=true;\n\t}\n\n\tfunction setCost(uint256 c) public{\n       \t\tif(msg.sender!=owner)revert();\n       \t\tcost=c;\n\t}\n\n\tfunction setFreePerc(uint256 p) public{\n       \t\tif(msg.sender!=owner)revert();\n       \t\tfreebiePercentage=p;\n\t}\n\n\n\tfunction setGiftToken(address _flood)public{\n\t\tif(msg.sender!=owner)revert();\n\t\tflood=BasicERC20token(_flood);\n\t}\n\n\tfunction enableGift(bool b) public{\n\t\tif(msg.sender!=owner)revert();\n\t\tgift=b;\n\t}\n\n\tfunction setGiftAmount(uint256 u) public{\n\t\tif(msg.sender!=owner)revert();\n\tgiftAmount=u;\n\t}\n\n\tfunction lockName(string _name,string _symbol,bool b) public{\n\t\tif(!permission[msg.sender])revert();\n\t\tnames[_name]=b;\n\t\tsymbols[_symbol]=b;\n\t}\n\n\tfunction deleteToken(address a)public{\n\t\tif(!permission[msg.sender])revert();\n\t\tnames[tokenNames[a]]=false;\n\t\tnamesAddress[tokenNames[a]]=address(0x0);\n\t\ttokenNames[a]=\"\";\n\t\tsymbols[tokenSymbols[a]]=false;\n\t\tsymbolsAddress[tokenSymbols[a]]=address(0x0);\n\t\ttokenSymbols[a]=\"\";\n\t}\n\n\tfunction add(address token,address own,string _name,string _symbol,bool free) public returns (bool){\n\t\tif((!permission[msg.sender])||(names[_name])||(symbols[_symbol]))revert();\n\t\tif(free){\n\t\t\tcreated[own].push(address(token));\n\t\t\ttotalFreeCoins++;\n\t\t}else{\n\t\t\tcreated[own].push(address(token));\n\t\t\tlist.push(address(token));\n\t\t\tnames[_name]=true;\n\t\t\ttokenNames[token]=_name;\n\t\t\tnamesAddress[_name]=token;\n\t\t\tsymbols[_symbol]=true;\n\t\t\ttokenSymbols[token]=_symbol;\n\t\t\tsymbolsAddress[_symbol]=token;\n\t\t\tif(gift)flood.transfer(own,giftAmount);\n\t\t}\n\t\tgenerator[token]=msg.sender;\n\t\tgenerated[msg.sender].push(token);\n\t\ttotalCoins++;\n\t\treturn true;\n\t}\n\n\tfunction setOwner(address o)public{\n\t\tif(msg.sender!=owner)revert();\n\t\towner=o;\n\t}\n\n\tfunction setPermission(address a,bool b)public{\n\t\tif(msg.sender!=owner)revert();\n\t\tpermission[a]=b;\n\t}\n\n\tfunction getMyTokens(address own,uint i)public constant returns(address,uint){\n\t\treturn (created[own][i],created[own].length);\n\t}\n\n\tfunction getGeneratorTokens(address gen,uint i)public constant returns(address,uint){\n\t\treturn (generated[gen][i],generated[gen].length);\n\t}\n\n\tfunction getTokenIndex(uint i)public constant returns(address,uint){\n\t\treturn (list[i],list.length);\n\t}\n\n\tfunction getToken(address _token)public constant returns(string,string){\n\t\treturn (tokenNames[_token],tokenSymbols[_token]);\n\t}\n\n\tfunction checkName(string _name)public constant returns(bool){return names[_name];}\n\n\tfunction checkSymbol(string _symbol)public constant returns(bool){return symbols[_symbol];}\n\n\tfunction findName(string _name)public constant returns(address){return namesAddress[_name];}\n\n\tfunction findSymbol(string _symbol)public constant returns(address){return symbolsAddress[_symbol];}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_freebie\",\"type\":\"address\"}],\"name\":\"init2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Factory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"init\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": ""
}