{
  "address": "0xd494938d0524edadfc239adc2c233e50550fa152",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DinngoProxy",
  "compilerVersion": "v0.5.6+commit.b259423e",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-25\n*/\n\ncontract Administrable {\n    using SafeMath for uint256;\n    mapping (address => bool) private admins;\n    uint256 private _nAdmin;\n    uint256 private _nLimit;\n\n    event Activated(address indexed admin);\n    event Deactivated(address indexed admin);\n\n    /**\n     * @dev The Administrable constructor sets the original `admin` of the contract to the sender\n     * account. The initial limit amount of admin is 2.\n     */\n    constructor() internal {\n        _setAdminLimit(2);\n        _activateAdmin(msg.sender);\n    }\n\n    function isAdmin() public view returns(bool) {\n        return admins[msg.sender];\n    }\n\n    /**\n     * @dev Throws if called by non-admin.\n     */\n    modifier onlyAdmin() {\n        require(isAdmin(), \"sender not admin\");\n        _;\n    }\n\n    function activateAdmin(address admin) external onlyAdmin {\n        _activateAdmin(admin);\n    }\n\n    function deactivateAdmin(address admin) external onlyAdmin {\n        _safeDeactivateAdmin(admin);\n    }\n\n    function setAdminLimit(uint256 n) external onlyAdmin {\n        _setAdminLimit(n);\n    }\n\n    function _setAdminLimit(uint256 n) internal {\n        require(_nLimit != n, \"same limit\");\n        _nLimit = n;\n    }\n\n    /**\n     * @notice The Amount of admin should be bounded by _nLimit.\n     */\n    function _activateAdmin(address admin) internal {\n        require(admin != address(0), \"invalid address\");\n        require(_nAdmin < _nLimit, \"too many admins existed\");\n        require(!admins[admin], \"already admin\");\n        admins[admin] = true;\n        _nAdmin = _nAdmin.add(1);\n        emit Activated(admin);\n    }\n\n    /**\n     * @notice At least one admin should exists.\n     */\n    function _safeDeactivateAdmin(address admin) internal {\n        require(_nAdmin > 1, \"admin should > 1\");\n        _deactivateAdmin(admin);\n    }\n\n    function _deactivateAdmin(address admin) internal {\n        require(admins[admin], \"not admin\");\n        admins[admin] = false;\n        _nAdmin = _nAdmin.sub(1);\n        emit Deactivated(admin);\n    }\n}\n\nlibrary ErrorHandler {\n    function errorHandler(bytes memory ret) internal pure {\n        if (ret.length > 0) {\n            byte ec = abi.decode(ret, (byte));\n            if (ec != 0x00)\n                revert(byteToHexString(ec));\n        }\n    }\n\n    function byteToHexString(byte data) internal pure returns (string memory ret) {\n        bytes memory ec = bytes(\"0x00\");\n        byte dataL = data & 0x0f;\n        byte dataH = data >> 4;\n        if (dataL < 0x0a)\n            ec[3] = byte(uint8(ec[3]) + uint8(dataL));\n        else\n            ec[3] = byte(uint8(ec[3]) + uint8(dataL) + 0x27);\n        if (dataH < 0x0a)\n            ec[2] = byte(uint8(ec[2]) + uint8(dataH));\n        else\n            ec[2] = byte(uint8(ec[2]) + uint8(dataH) + 0x27);\n\n        return string(ec);\n    }\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\ncontract Proxy is Ownable {\n    using Address for address;\n\n    // keccak256 hash of \"dinngo.proxy.implementation\"\n    bytes32 private constant IMPLEMENTATION_SLOT =\n        0x3b2ff02c0f36dba7cc1b20a669e540b974575f04ef71846d482983efb03bebb4;\n\n    event Upgraded(address indexed implementation);\n\n    constructor(address implementation) internal {\n        assert(IMPLEMENTATION_SLOT == keccak256(\"dinngo.proxy.implementation\"));\n        _setImplementation(implementation);\n    }\n\n    /**\n     * @notice Upgrade the implementation contract. Can only be triggered\n     * by the owner. Emits the Upgraded event.\n     * @param implementation The new implementation address.\n     */\n    function upgrade(address implementation) external onlyOwner {\n        _setImplementation(implementation);\n        emit Upgraded(implementation);\n    }\n\n    /**\n     * @dev Set the implementation address in the storage slot.\n     * @param implementation The new implementation address.\n     */\n    function _setImplementation(address implementation) internal {\n        require(implementation.isContract(),\n            \"Implementation address should be a contract address\"\n        );\n        bytes32 slot = IMPLEMENTATION_SLOT;\n\n        assembly {\n            sstore(slot, implementation)\n        }\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view returns (address implementation) {\n        bytes32 slot = IMPLEMENTATION_SLOT;\n\n        assembly {\n            implementation := sload(slot)\n        }\n    }\n}\n\ncontract TimelockUpgradableProxy is Proxy {\n    // keccak256 hash of \"dinngo.proxy.registration\"\n    bytes32 private constant REGISTRATION_SLOT =\n        0x90215db359d12011b32ff0c897114c39e26956599904ee846adb0dd49f782e97;\n    // keccak256 hash of \"dinngo.proxy.time\"\n    bytes32 private constant TIME_SLOT =\n        0xe89d1a29650bdc8a918bc762afb8ef07e10f6180e461c3fc305f9f142e5591e6;\n    uint256 private constant UPGRADE_TIME = 14 days;\n\n    event UpgradeAnnounced(address indexed implementation, uint256 time);\n\n    constructor() internal {\n        assert(REGISTRATION_SLOT == keccak256(\"dinngo.proxy.registration\"));\n        assert(TIME_SLOT == keccak256(\"dinngo.proxy.time\"));\n    }\n\n    /**\n     * @notice Register the implementation address as the candidate contract\n     * to be upgraded. Emits the UpgradeAnnounced event.\n     * @param implementation The implementation contract address to be registered.\n     */\n    function register(address implementation) external onlyOwner {\n        _registerImplementation(implementation);\n        emit UpgradeAnnounced(implementation, _time());\n    }\n\n    /**\n     * @dev Overload the function in contract Proxy.\n     * @notice Upgrade the implementation contract.\n     * @param implementation The new implementation contract.\n     */\n    function upgrade(address implementation) external {\n        require(implementation == _registration());\n        upgradeAnnounced();\n    }\n\n    /**\n     * @notice Upgrade the implementation contract to the announced address.\n     * Emits the Upgraded event.\n     */\n    function upgradeAnnounced() public onlyOwner {\n        require(now >= _time());\n        _setImplementation(_registration());\n        emit Upgraded(_registration());\n    }\n\n    /**\n     * @dev Register the imeplemtation address to the registation slot. Record the\n     * valid time by adding the UPGRADE_TIME to the registration time to the time slot.\n     * @param implementation The implemetation address to be registered.\n     */\n    function _registerImplementation(address implementation) internal {\n        require(implementation.isContract(),\n            \"Implementation address should be a contract address\"\n        );\n        uint256 time = now + UPGRADE_TIME;\n\n        bytes32 implSlot = REGISTRATION_SLOT;\n        bytes32 timeSlot = TIME_SLOT;\n\n        assembly {\n            sstore(implSlot, implementation)\n            sstore(timeSlot, time)\n        }\n    }\n\n    /**\n     * @dev Return the valid time of registered implementation address.\n     */\n    function _time() internal view returns (uint256 time) {\n        bytes32 slot = TIME_SLOT;\n\n        assembly {\n            time := sload(slot)\n        }\n    }\n\n    /**\n     * @dev Return the registered implementation address.\n     */\n    function _registration() internal view returns (address implementation) {\n        bytes32 slot = REGISTRATION_SLOT;\n\n        assembly {\n            implementation := sload(slot)\n        }\n    }\n}\n\ncontract DinngoProxy is Ownable, Administrable, TimelockUpgradableProxy {\n    using ErrorHandler for bytes;\n\n    uint256 public processTime;\n\n    mapping (address => mapping (address => uint256)) public balances;\n    mapping (bytes32 => uint256) public orderFills;\n    mapping (uint256 => address payable) public userID_Address;\n    mapping (uint256 => address) public tokenID_Address;\n    mapping (address => uint256) public userRanks;\n    mapping (address => uint256) public tokenRanks;\n    mapping (address => uint256) public lockTimes;\n\n    /**\n     * @dev User ID 0 is the management wallet.\n     * Token ID 0 is ETH (address 0). Token ID 1 is DGO.\n     * @param dinngoWallet The main address of dinngo\n     * @param dinngoToken The contract address of DGO\n     */\n    constructor(\n        address payable dinngoWallet,\n        address dinngoToken,\n        address impl\n    ) Proxy(impl) public {\n        processTime = 90 days;\n        userID_Address[0] = dinngoWallet;\n        userRanks[dinngoWallet] = 255;\n        tokenID_Address[0] = address(0);\n        tokenID_Address[1] = dinngoToken;\n    }\n\n    /**\n     * @dev All ether directly sent to contract will be refunded\n     */\n    function() external payable {\n        revert();\n    }\n\n    /**\n     * @notice Add the address to the user list. Event AddUser will be emitted\n     * after execution.\n     * @dev Record the user list to map the user address to a specific user ID, in\n     * order to compact the data size when transferring user address information\n     * @param id The user id to be assigned\n     * @param user The user address to be added\n     */\n    function addUser(uint256 id, address user) external onlyAdmin {\n        (bool ok,) = _implementation().delegatecall(\n            abi.encodeWithSignature(\"addUser(uint256,address)\", id, user)\n        );\n        require(ok);\n    }\n\n    /**\n     * @notice Remove the address from the user list.\n     * @dev The user rank is set to 0 to remove the user.\n     * @param user The user address to be added\n     */\n    function removeUser(address user) external onlyAdmin {\n        (bool ok,) = _implementation().delegatecall(\n            abi.encodeWithSignature(\"removeUser(address)\", user)\n        );\n        require(ok);\n    }\n\n    /**\n     * @notice Update the rank of user. Can only be called by owner.\n     * @param user The user address\n     * @param rank The rank to be assigned\n     */\n    function updateUserRank(address user, uint256 rank) external onlyAdmin {\n        (bool ok,) = _implementation().delegatecall(\n            abi.encodeWithSignature(\"updateUserRank(address,uint256)\",user, rank)\n        );\n        require(ok);\n    }\n\n    /**\n     * @notice Add the token to the token list. Event AddToken will be emitted\n     * after execution.\n     * @dev Record the token list to map the token contract address to a specific\n     * token ID, in order to compact the data size when transferring token contract\n     * address information\n     * @param id The token id to be assigned\n     * @param token The token contract address to be added\n     */\n    function addToken(uint256 id, address token) external onlyOwner {\n        (bool ok,) = _implementation().delegatecall(\n            abi.encodeWithSignature(\"addToken(uint256,address)\", id, token)\n        );\n        require(ok);\n    }\n\n    /**\n     * @notice Remove the token to the token list.\n     * @dev The token rank is set to 0 to remove the token.\n     * @param token The token contract address to be removed.\n     */\n    function removeToken(address token) external onlyOwner {\n        (bool ok,) = _implementation().delegatecall(\n            abi.encodeWithSignature(\"removeToken(address)\", token)\n        );\n        require(ok);\n    }\n\n    /**\n     * @notice Update the rank of token. Can only be called by owner.\n     * @param token The token contract address.\n     * @param rank The rank to be assigned.\n     */\n    function updateTokenRank(address token, uint256 rank) external onlyOwner {\n        (bool ok,) = _implementation().delegatecall(\n            abi.encodeWithSignature(\"updateTokenRank(address,uint256)\", token, rank)\n        );\n        require(ok);\n    }\n\n    function activateAdmin(address admin) external onlyOwner {\n        _activateAdmin(admin);\n    }\n\n    function deactivateAdmin(address admin) external onlyOwner {\n        _safeDeactivateAdmin(admin);\n    }\n\n    /**\n     * @notice Force-deactivate allows owner to deactivate admin even there will be\n     * no admin left. Should only be executed under emergency situation.\n     */\n    function forceDeactivateAdmin(address admin) external onlyOwner {\n        _deactivateAdmin(admin);\n    }\n\n    function setAdminLimit(uint256 n) external onlyOwner {\n        _setAdminLimit(n);\n    }\n\n    /**\n     * @notice The deposit function for ether. The ether that is sent with the function\n     * call will be deposited. The first time user will be added to the user list.\n     * Event Deposit will be emitted after execution.\n     */\n    function deposit() external payable {\n        (bool ok,) = _implementation().delegatecall(abi.encodeWithSignature(\"deposit()\"));\n        require(ok);\n    }\n\n    /**\n     * @notice The deposit function for tokens. The first time user will be added to\n     * the user list. Event Deposit will be emitted after execution.\n     * @param token Address of the token contract to be deposited\n     * @param amount Amount of the token to be depositied\n     */\n    function depositToken(address token, uint256 amount) external {\n        (bool ok,) = _implementation().delegatecall(\n            abi.encodeWithSignature(\"depositToken(address,uint256)\", token, amount)\n        );\n        require(ok);\n    }\n\n    /**\n     * @notice The withdraw function for ether. Event Withdraw will be emitted\n     * after execution. User needs to be locked before calling withdraw.\n     * @param amount The amount to be withdrawn.\n     */\n    function withdraw(uint256 amount) external {\n        (bool ok,) = _implementation().delegatecall(\n            abi.encodeWithSignature(\"withdraw(uint256)\", amount)\n        );\n        require(ok);\n    }\n\n    /**\n     * @notice The withdraw function for tokens. Event Withdraw will be emitted\n     * after execution. User needs to be locked before calling withdraw.\n     * @param token The token contract address to be withdrawn.\n     * @param amount The token amount to be withdrawn.\n     */\n    function withdrawToken(address token, uint256 amount) external {\n        (bool ok,) = _implementation().delegatecall(\n            abi.encodeWithSignature(\"withdrawToken(address,uint256)\", token, amount)\n        );\n        require(ok);\n    }\n\n    /**\n     * @notice The withdraw function that can only be triggered by owner.\n     * Event Withdraw will be emitted after execution.\n     * @param withdrawal The serialized withdrawal data\n     */\n    function withdrawByAdmin(bytes calldata withdrawal) external onlyAdmin {\n        (bool ok, bytes memory ret) = _implementation().delegatecall(\n            abi.encodeWithSignature(\"withdrawByAdmin(bytes)\", withdrawal)\n        );\n        require(ok);\n        ret.errorHandler();\n    }\n\n    /**\n     * @notice The settle function for orders. First order is taker order and the followings\n     * are maker orders.\n     * @param orders The serialized orders.\n     */\n    function settle(bytes calldata orders) external onlyAdmin {\n        (bool ok, bytes memory ret) = _implementation().delegatecall(\n            abi.encodeWithSignature(\"settle(bytes)\", orders)\n        );\n        require(ok);\n        ret.errorHandler();\n    }\n\n    /**\n     * @notice The migrate function that can only be triggered by admin.\n     * @param migration The serialized migration data\n     */\n    function migrateByAdmin(bytes calldata migration) external onlyAdmin {\n        (bool ok, bytes memory ret) = _implementation().delegatecall(\n            abi.encodeWithSignature(\"migrateByAdmin(bytes)\", migration)\n        );\n        require(ok);\n        ret.errorHandler();\n    }\n\n    /**\n     * @notice Announce lock of the sender\n     */\n    function lock() external {\n        (bool ok,) = _implementation().delegatecall(abi.encodeWithSignature(\"lock()\"));\n        require(ok);\n    }\n\n    /**\n     * @notice Unlock the sender\n     */\n    function unlock() external {\n        (bool ok,) = _implementation().delegatecall(abi.encodeWithSignature(\"unlock()\"));\n        require(ok);\n    }\n\n    /**\n     * @notice Change the processing time of locking the user address\n     */\n    function changeProcessTime(uint256 time) external onlyOwner {\n        (bool ok,) = _implementation().delegatecall(\n            abi.encodeWithSignature(\"changeProcessTime(uint256)\", time)\n        );\n        require(ok);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"upgradeAnnounced\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdrawal\",\"type\":\"bytes\"}],\"name\":\"withdrawByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"activateAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"rank\",\"type\":\"uint256\"}],\"name\":\"updateTokenRank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenRanks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRanks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userID_Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"forceDeactivateAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"setAdminLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"migration\",\"type\":\"bytes\"}],\"name\":\"migrateByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"rank\",\"type\":\"uint256\"}],\"name\":\"updateUserRank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orders\",\"type\":\"bytes\"}],\"name\":\"settle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"processTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"deactivateAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenID_Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"changeProcessTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderFills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"dinngoWallet\",\"type\":\"address\"},{\"name\":\"dinngoToken\",\"type\":\"address\"},{\"name\":\"impl\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"UpgradeAnnounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Activated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Deactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b5060405160608062002660833981018060405260608110156200003357600080fd5b5080516020820151604092830151600080546001600160a01b0319163317808255945193949293919283926001600160a01b039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3620000a360026200028360201b60201c565b620000b433620002fa60201b60201c565b604080517f64696e6e676f2e70726f78792e696d706c656d656e746174696f6e00000000008152905190819003601b0190206000805160206200260d83398151915214620000fe57fe5b6200010f81620004e560201b60201c565b50604080517f64696e6e676f2e70726f78792e726567697374726174696f6e00000000000000815290519081900360190190207f90215db359d12011b32ff0c897114c39e26956599904ee846adb0dd49f782e97146200016b57fe5b604080517f64696e6e676f2e70726f78792e74696d65000000000000000000000000000000815290519081900360110190207fe89d1a29650bdc8a918bc762afb8ef07e10f6180e461c3fc305f9f142e5591e614620001c657fe5b506276a7006004557f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6df80546001600160a01b039384166001600160a01b031991821681179092556000918252600960209081526040832060ff9055600890527f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c780548216905560019091527fad67d757c34507f157cacfa2e3153e9f260a2244f30428821be7be64587ac55f80549290931691161790556200058e565b806003541415620002f557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f73616d65206c696d697400000000000000000000000000000000000000000000604482015290519081900360640190fd5b600355565b6001600160a01b0381166200037057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f696e76616c696420616464726573730000000000000000000000000000000000604482015290519081900360640190fd5b60035460025410620003e357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f746f6f206d616e792061646d696e732065786973746564000000000000000000604482015290519081900360640190fd5b6001600160a01b03811660009081526001602052604090205460ff16156200046c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f616c72656164792061646d696e00000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0381166000908152600160208181526040909220805460ff191682179055600254620004ab9290919062001fe26200056e821b17901c565b6002556040516001600160a01b038216907f0cc43938d137e7efade6a531f663e78c1fc75257b0d65ffda2fdaf70cb49cdf990600090a250565b62000504816001600160a01b03166200058860201b62001e421760201c565b6200055b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001806200262d6033913960400191505060405180910390fd5b6000805160206200260d83398151915255565b6000828201838110156200058157600080fd5b9392505050565b3b151590565b61206f806200059e6000396000f3fe60806040526004361061020f5760003560e01c80638f32d59b11610118578063d0322fbf116100a0578063e8b93ad71161006f578063e8b93ad714610877578063f1c5f1e2146108a1578063f2fde38b146108cb578063f7213db6146108fe578063f83d08ba146109285761020f565b8063d0322fbf146107aa578063d0e30db014610827578063dd41250f1461082f578063df6fa20e146108445761020f565b8063a69df4b5116100e7578063a69df4b51461068f578063b19e43b4146106a4578063b46b791914610721578063b6db75a01461075a578063c23f001f1461076f5761020f565b80638f32d59b146105d057806391a8c4b8146105f957806398575188146106235780639e281a98146106565761020f565b80634d5edd281161019b5780635fa7b5841161016a5780635fa7b584146104fa57806361959f851461052d5780636f9a5fb314610573578063715018a6146105a65780638da5cb5b146105bb5761020f565b80634d5edd281461042257806356c7c1b31461045557806357016b0a1461048857806358d9fa04146104c15761020f565b80632123cb78116101e25780632123cb781461030e5780632e1a7d4d14610347578063338b5dea146103715780634420e486146103aa5780634a184239146103dd5761020f565b8063056f9d6d146102145780630900f0101461022b57806314e0c71f1461025e5780631af1a768146102db575b600080fd5b34801561022057600080fd5b5061022961093d565b005b34801561023757600080fd5b506102296004803603602081101561024e57600080fd5b50356001600160a01b03166109b1565b34801561026a57600080fd5b506102296004803603602081101561028157600080fd5b81019060208101813564010000000081111561029c57600080fd5b8201836020820111156102ae57600080fd5b803590602001918460018302840111640100000000831117156102d057600080fd5b5090925090506109e1565b3480156102e757600080fd5b50610229600480360360208110156102fe57600080fd5b50356001600160a01b0316610b60565b34801561031a57600080fd5b506102296004803603604081101561033157600080fd5b506001600160a01b038135169060200135610b7a565b34801561035357600080fd5b506102296004803603602081101561036a57600080fd5b5035610c8a565b34801561037d57600080fd5b506102296004803603604081101561039457600080fd5b506001600160a01b038135169060200135610d80565b3480156103b657600080fd5b50610229600480360360208110156103cd57600080fd5b50356001600160a01b0316610e06565b3480156103e957600080fd5b506104106004803603602081101561040057600080fd5b50356001600160a01b0316610e67565b60408051918252519081900360200190f35b34801561042e57600080fd5b506104106004803603602081101561044557600080fd5b50356001600160a01b0316610e79565b34801561046157600080fd5b506104106004803603602081101561047857600080fd5b50356001600160a01b0316610e8b565b34801561049457600080fd5b50610229600480360360408110156104ab57600080fd5b50803590602001356001600160a01b0316610e9d565b3480156104cd57600080fd5b50610229600480360360408110156104e457600080fd5b50803590602001356001600160a01b0316610f37565b34801561050657600080fd5b506102296004803603602081101561051d57600080fd5b50356001600160a01b0316611012565b34801561053957600080fd5b506105576004803603602081101561055057600080fd5b50356110a5565b604080516001600160a01b039092168252519081900360200190f35b34801561057f57600080fd5b506102296004803603602081101561059657600080fd5b50356001600160a01b03166110c0565b3480156105b257600080fd5b506102296110da565b3480156105c757600080fd5b50610557611135565b3480156105dc57600080fd5b506105e5611144565b604080519115158252519081900360200190f35b34801561060557600080fd5b506102296004803603602081101561061c57600080fd5b5035611155565b34801561062f57600080fd5b506102296004803603602081101561064657600080fd5b50356001600160a01b031661116f565b34801561066257600080fd5b506102296004803603604081101561067957600080fd5b506001600160a01b038135169060200135611243565b34801561069b57600080fd5b506102296112c9565b3480156106b057600080fd5b50610229600480360360208110156106c757600080fd5b8101906020810181356401000000008111156106e257600080fd5b8201836020820111156106f457600080fd5b8035906020019184600183028401116401000000008311171561071657600080fd5b5090925090506113ac565b34801561072d57600080fd5b506102296004803603604081101561074457600080fd5b506001600160a01b0381351690602001356114a7565b34801561076657600080fd5b506105e561157f565b34801561077b57600080fd5b506104106004803603604081101561079257600080fd5b506001600160a01b0381358116916020013516611595565b3480156107b657600080fd5b50610229600480360360208110156107cd57600080fd5b8101906020810181356401000000008111156107e857600080fd5b8201836020820111156107fa57600080fd5b8035906020019184600183028401116401000000008311171561081c57600080fd5b5090925090506115b2565b6102296116ad565b34801561083b57600080fd5b5061041061171c565b34801561085057600080fd5b506102296004803603602081101561086757600080fd5b50356001600160a01b0316611722565b34801561088357600080fd5b506105576004803603602081101561089a57600080fd5b503561173c565b3480156108ad57600080fd5b50610229600480360360208110156108c457600080fd5b5035611757565b3480156108d757600080fd5b50610229600480360360208110156108ee57600080fd5b50356001600160a01b03166117e6565b34801561090a57600080fd5b506104106004803603602081101561092157600080fd5b5035611800565b34801561093457600080fd5b50610229611812565b610945611144565b61094e57600080fd5b610956611881565b42101561096257600080fd5b61097261096d6118a6565b6118cb565b61097a6118a6565b6001600160a01b03167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a2565b6109b96118a6565b6001600160a01b0316816001600160a01b0316146109d657600080fd5b6109de61093d565b50565b6109e961157f565b610a335760408051600160e51b62461bcd0281526020600482015260106024820152600160811b6f39b2b73232b9103737ba1030b236b4b702604482015290519081900360640190fd5b60006060610a3f61193f565b6001600160a01b031684846040516024018080602001828103825284848281815260200192508082843760008382015260408051601f909201601f1990811690940182810390940182529283526020810180516001600160e01b0316600160e01b6314e0c71f0217815292518151919750955085945091925081905083835b60208310610add5780518252601f199092019160209182019101610abe565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610b3d576040519150601f19603f3d011682016040523d82523d6000602084013e610b42565b606091505b509150915081610b5157600080fd5b610b5a81611964565b50505050565b610b68611144565b610b7157600080fd5b6109de81611a26565b610b82611144565b610b8b57600080fd5b6000610b9561193f565b604080516001600160a01b038681166024830152604480830187905283518084039091018152606490920183526020820180516001600160e01b0316600160e31b630424796f02178152925182519490911693919290918291908083835b60208310610c125780518252601f199092019160209182019101610bf3565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610c72576040519150601f19603f3d011682016040523d82523d6000602084013e610c77565b606091505b5050905080610c8557600080fd5b505050565b6000610c9461193f565b60408051602480820186905282518083039091018152604490910182526020810180516001600160e01b0316600160e01b632e1a7d4d02178152915181516001600160a01b039490941693919290918291908083835b60208310610d095780518252601f199092019160209182019101610cea565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610d69576040519150601f19603f3d011682016040523d82523d6000602084013e610d6e565b606091505b5050905080610d7c57600080fd5b5050565b6000610d8a61193f565b604080516001600160a01b038681166024830152604480830187905283518084039091018152606490920183526020820180516001600160e01b0316600160e11b6319c5aef5021781529251825194909116939192909182919080838360208310610c125780518252601f199092019160209182019101610bf3565b610e0e611144565b610e1757600080fd5b610e2081611bc1565b806001600160a01b03167fb923610cdac8a2884c143a9b2cf1153f9573a6ad9c5052ae33c1ff4a3e4e1e77610e53611881565b60408051918252519081900360200190a250565b600a6020526000908152604090205481565b60096020526000908152604090205481565b600b6020526000908152604090205481565b610ea5611144565b610eae57600080fd5b6000610eb861193f565b60408051602481018690526001600160a01b0385811660448084019190915283518084039091018152606490920183526020820180516001600160e01b0316600160e11b632b80b585021781529251825194909116939192909182919080838360208310610c125780518252601f199092019160209182019101610bf3565b610f3f61157f565b610f895760408051600160e51b62461bcd0281526020600482015260106024820152600160811b6f39b2b73232b9103737ba1030b236b4b702604482015290519081900360640190fd5b6000610f9361193f565b60408051602481018690526001600160a01b0385811660448084019190915283518084039091018152606490920183526020820180516001600160e01b0316600160e21b6316367e81021781529251825194909116939192909182919080838360208310610c125780518252601f199092019160209182019101610bf3565b61101a611144565b61102357600080fd5b600061102d61193f565b604080516001600160a01b0385811660248084019190915283518084039091018152604490920183526020820180516001600160e01b0316600160e21b6317e9ed61021781529251825194909116939192909182919080838360208310610d095780518252601f199092019160209182019101610cea565b6007602052600090815260409020546001600160a01b031681565b6110c8611144565b6110d157600080fd5b6109de81611c5d565b6110e2611144565b6110eb57600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b61115d611144565b61116657600080fd5b6109de81611d2b565b61117761157f565b6111c15760408051600160e51b62461bcd0281526020600482015260106024820152600160811b6f39b2b73232b9103737ba1030b236b4b702604482015290519081900360640190fd5b60006111cb61193f565b604080516001600160a01b0385811660248084019190915283518084039091018152604490920183526020820180516001600160e01b0316600160e31b63130aea31021781529251825194909116939192909182919080838360208310610d095780518252601f199092019160209182019101610cea565b600061124d61193f565b604080516001600160a01b038681166024830152604480830187905283518084039091018152606490920183526020820180516001600160e01b0316600160e31b6313c50353021781529251825194909116939192909182919080838360208310610c125780518252601f199092019160209182019101610bf3565b60006112d361193f565b60408051600481526024810182526020810180516001600160e01b0316600160e01b63a69df4b502178152915181516001600160a01b039490941693919290918291908083835b602083106113395780518252601f19909201916020918201910161131a565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114611399576040519150601f19603f3d011682016040523d82523d6000602084013e61139e565b606091505b50509050806109de57600080fd5b6113b461157f565b6113fe5760408051600160e51b62461bcd0281526020600482015260106024820152600160811b6f39b2b73232b9103737ba1030b236b4b702604482015290519081900360640190fd5b6000606061140a61193f565b6001600160a01b031684846040516024018080602001828103825284848281815260200192508082843760008382015260408051601f909201601f1990811690940182810390940182529283526020810180516001600160e01b0316600160e21b632c6790ed02178152925181519197509550859450919250819050838360208310610add5780518252601f199092019160209182019101610abe565b6114af61157f565b6114f95760408051600160e51b62461bcd0281526020600482015260106024820152600160811b6f39b2b73232b9103737ba1030b236b4b702604482015290519081900360640190fd5b600061150361193f565b604080516001600160a01b038681166024830152604480830187905283518084039091018152606490920183526020820180516001600160e01b0316600160e01b63b46b7919021781529251825194909116939192909182919080838360208310610c125780518252601f199092019160209182019101610bf3565b3360009081526001602052604090205460ff1690565b600560209081526000928352604080842090915290825290205481565b6115ba61157f565b6116045760408051600160e51b62461bcd0281526020600482015260106024820152600160811b6f39b2b73232b9103737ba1030b236b4b702604482015290519081900360640190fd5b6000606061161061193f565b6001600160a01b031684846040516024018080602001828103825284848281815260200192508082843760008382015260408051601f909201601f1990811690940182810390940182529283526020810180516001600160e01b0316600160e01b63d0322fbf02178152925181519197509550859450919250819050838360208310610add5780518252601f199092019160209182019101610abe565b60006116b761193f565b60408051600481526024810182526020810180516001600160e01b0316600160e41b630d0e30db02178152915181516001600160a01b03949094169391929091829190808383602083106113395780518252601f19909201916020918201910161131a565b60045481565b61172a611144565b61173357600080fd5b6109de81611d7a565b6008602052600090815260409020546001600160a01b031681565b61175f611144565b61176857600080fd5b600061177261193f565b60408051602480820186905282518083039091018152604490910182526020810180516001600160e01b0316600160e11b6378e2f8f102178152915181516001600160a01b0394909416939192909182919080838360208310610d095780518252601f199092019160209182019101610cea565b6117ee611144565b6117f757600080fd5b6109de81611dd4565b60066020526000908152604090205481565b600061181c61193f565b60408051600481526024810182526020810180516001600160e01b0316600160e11b637c1e845d02178152915181516001600160a01b03949094169391929091829190808383602083106113395780518252601f19909201916020918201910161131a565b7fe89d1a29650bdc8a918bc762afb8ef07e10f6180e461c3fc305f9f142e5591e65490565b7f90215db359d12011b32ff0c897114c39e26956599904ee846adb0dd49f782e975490565b6118dd816001600160a01b0316611e42565b61191b57604051600160e51b62461bcd0281526004018080602001828103825260338152602001806120116033913960400191505060405180910390fd5b7f3b2ff02c0f36dba7cc1b20a669e540b974575f04ef71846d482983efb03bebb455565b7f3b2ff02c0f36dba7cc1b20a669e540b974575f04ef71846d482983efb03bebb45490565b8051156109de57600081806020019051602081101561198257600080fd5b505190506001600160f81b0319811615610d7c5761199f81611e48565b604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156119eb5781810151838201526020016119d3565b50505050905090810190601f168015611a185780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6001600160a01b038116611a845760408051600160e51b62461bcd02815260206004820152600f60248201527f696e76616c696420616464726573730000000000000000000000000000000000604482015290519081900360640190fd5b60035460025410611adf5760408051600160e51b62461bcd02815260206004820152601760248201527f746f6f206d616e792061646d696e732065786973746564000000000000000000604482015290519081900360640190fd5b6001600160a01b03811660009081526001602052604090205460ff1615611b505760408051600160e51b62461bcd02815260206004820152600d60248201527f616c72656164792061646d696e00000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0381166000908152600160208190526040909120805460ff191682179055600254611b879163ffffffff611fe216565b6002556040516001600160a01b038216907f0cc43938d137e7efade6a531f663e78c1fc75257b0d65ffda2fdaf70cb49cdf990600090a250565b611bd3816001600160a01b0316611e42565b611c1157604051600160e51b62461bcd0281526004018080602001828103825260338152602001806120116033913960400191505060405180910390fd5b7f90215db359d12011b32ff0c897114c39e26956599904ee846adb0dd49f782e97554262127500017fe89d1a29650bdc8a918bc762afb8ef07e10f6180e461c3fc305f9f142e5591e655565b6001600160a01b03811660009081526001602052604090205460ff16611cbc5760408051600160e51b62461bcd0281526020600482015260096024820152600160b91b683737ba1030b236b4b702604482015290519081900360640190fd5b6001600160a01b0381166000908152600160208190526040909120805460ff19169055600254611cf19163ffffffff611ffb16565b6002556040516001600160a01b038216907f749cb6b4c510bc468cf6b9c2086d6f0a54d6b18e25d37bf3200e68eab0880c0090600090a250565b806003541415611d755760408051600160e51b62461bcd02815260206004820152600a6024820152600160b21b691cd85b59481b1a5b5a5d02604482015290519081900360640190fd5b600355565b6001600254116110d15760408051600160e51b62461bcd02815260206004820152601060248201527f61646d696e2073686f756c64203e203100000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038116611de757600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3b151590565b604080518082019091526004808252600160e41b630307830302602083015260609190600160f81b600f028416906001600160f81b03198516901c600160f91b600502821015611ede578160f81c83600381518110611ea357fe5b602001015160f81c60f81b60f81c0160f81b83600381518110611ec257fe5b60200101906001600160f81b031916908160001a905350611f29565b8160f81c83600381518110611eef57fe5b602001015160f81c60f81b60f81c0160270160f81b83600381518110611f1157fe5b60200101906001600160f81b031916908160001a9053505b600160f91b6005026001600160f81b031982161015611f8e578060f81c83600281518110611f5357fe5b602001015160f81c60f81b60f81c0160f81b83600281518110611f7257fe5b60200101906001600160f81b031916908160001a905350611fd9565b8060f81c83600281518110611f9f57fe5b602001015160f81c60f81b60f81c0160270160f81b83600281518110611fc157fe5b60200101906001600160f81b031916908160001a9053505b50909392505050565b600082820183811015611ff457600080fd5b9392505050565b60008282111561200a57600080fd5b5090039056fe496d706c656d656e746174696f6e20616464726573732073686f756c64206265206120636f6e74726163742061646472657373a165627a7a723058209b011b05aeeb6dc6abb10d474fcedc266ee6e3f8f811abb180afe90ea456f15c00293b2ff02c0f36dba7cc1b20a669e540b974575f04ef71846d482983efb03bebb4496d706c656d656e746174696f6e20616464726573732073686f756c64206265206120636f6e74726163742061646472657373000000000000000000000000a4589bb891d020aad7681ff49c0f3911c793255e0000000000000000000000006d38574be6c230272daad16fa5f291f825bd0da100000000000000000000000027ccda67fd7319efe097d0b562db96e9969433ba",
  "constructorArguments": "000000000000000000000000a4589bb891d020aad7681ff49c0f3911c793255e0000000000000000000000006d38574be6c230272daad16fa5f291f825bd0da100000000000000000000000027ccda67fd7319efe097d0b562db96e9969433ba"
}