{
  "address": "0x3ec54f89caff986c0b2685389f1b335a1bb16f85",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RHEM",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-31\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title ERC20Interface\n * @dev Standard version of ERC20 interface\n */\ncontract ERC20Interface {\n    uint256 public totalSupply;\n\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    /**\n     * @dev The Ownable constructor sets the original `owner`\n     * of the contract to the sender account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the current owner\n     */\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner\n     * @param newOwner The address to transfer ownership to\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n}\n\n/**\n * @title RHEM\n * @dev Implemantation of the RHEM token\n */\ncontract RHEM is Ownable, ERC20Interface {\n    string public constant symbol = \"RHEM\";\n    string public constant name = \"RHEM\";\n    uint8 public constant decimals = 18;\n    uint256 public _unmintedTokens = 3000000000000*uint(10)**decimals;\n    mapping(address => uint256) balances;\n    mapping(address => mapping (address => uint256)) internal allowed;\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed sender, uint256 value);\n    event Mint(address indexed sender, uint256 value);\n\n    /**\n     * @dev Gets the balance of the specified address\n     * @param _owner The address to query the the balance of\n     * @return An uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return (balances[_owner]);\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param _to The address to transfer to\n     * @param _value The amount to be transferred\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0));\n        require(balances[msg.sender] >= _value);\n        assert(balances[_to] + _value >= balances[_to]);\n\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from The address which you want to send tokens from\n     * @param _to The address which you want to transfer to\n     * @param _value The amout of tokens to be transfered\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        assert(balances[_to] + _value >= balances[_to]);\n\n        balances[_from] = balances[_from] - _value;\n        balances[_to] = balances[_to] + _value;\n        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender\n     * @param _spender The address which will spend the funds\n     * @param _value The amount of tokens to be spent\n     */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens than an owner allowed to a spender\n     * @param _owner The address which owns the funds\n     * @param _spender The address which will spend the funds\n     * @return A uint specifing the amount of tokens still avaible for the spender\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Mint RHEM tokens. No more than 3,000,000,000,000 RHEM can be minted\n     * @param _target The address to which new tokens will be minted\n     * @param _mintedAmount The amout of tokens to be minted\n     */\n    function mint(address _target, uint256 _mintedAmount) public onlyOwner returns (bool success) {\n        require(_mintedAmount <= _unmintedTokens);\n        balances[_target] += _mintedAmount;\n        _unmintedTokens -= _mintedAmount;\n        totalSupply += _mintedAmount;\n        emit Mint(_target, _mintedAmount);\n\n        return true;\n    }\n\n    /**\n     * @dev Mint RHEM tokens and aproves the passed address to spend the minted amount of tokens\n     * No more than 3,000,000,000,000 RHEM can be minted\n     * @param _target The address to which new tokens will be minted\n     * @param _mintedAmount The amout of tokens to be minted\n     * @param _spender The address which will spend minted funds\n     */\n    function mintWithApproval(address _target, uint256 _mintedAmount, address _spender) public onlyOwner returns (bool success) {\n        require(_mintedAmount <= _unmintedTokens);\n        balances[_target] += _mintedAmount;\n        _unmintedTokens -= _mintedAmount;\n        totalSupply += _mintedAmount;\n        allowed[_target][_spender] += _mintedAmount;\n        emit Mint(_target, _mintedAmount);\n        emit Approval(_target, _spender, _mintedAmount);\n\n        return true;\n    }\n\n    /**\n     * @dev function that burns an amount of the token of the sender\n     * @param _amount The amount that will be burnt.\n     */\n    function burn(uint256 _amount) public returns (uint256 balance) {\n        require(msg.sender != address(0));\n        require(_amount <= balances[msg.sender]);\n        totalSupply = totalSupply - _amount;\n        balances[msg.sender] = balances[msg.sender] - _amount;\n\n        emit Burn(msg.sender, _amount);\n\n        return balances[msg.sender];\n    }\n\n    /**\n     * @dev Decrease amount of RHEM tokens that can be minted\n     * @param _burnedAmount The amount of unminted tokens to be burned\n     */\n    function deductFromUnminted(uint256 _burnedAmount) public onlyOwner returns (bool success) {\n        require(_burnedAmount <= _unmintedTokens);\n        _unmintedTokens -= _burnedAmount;\n\n        return true;\n    }\n\n    /**\n     * @dev Add to unminted\n     * @param _value The amount to be add\n     */\n    function addToUnminted(uint256 _value) public onlyOwner returns (uint256 unmintedTokens) {\n        require(_unmintedTokens + _value > _unmintedTokens);\n        _unmintedTokens += _value;\n\n        return _unmintedTokens;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_unmintedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_mintedAmount\",\"type\":\"uint256\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"mintWithApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnedAmount\",\"type\":\"uint256\"}],\"name\":\"deductFromUnminted\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addToUnminted\",\"outputs\":[{\"name\":\"unmintedTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"}]",
  "bytecode": "60806040526c25dd85d670d35ec9bec000000060025560008054600160a060020a0319163317905561099a806100366000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f57806318160ddd146101b757806323b872dd146101de578063313ce5671461020857806340c10f191461023357806342966c681461025757806370a082311461026f578063866c03eb146102905780638d73c027146102a55780638da5cb5b146102d05780638e611cee1461030157806395d89b41146100f5578063a9059cbb14610319578063dd62ed3e1461033d578063f2c8043514610364578063f2fde38b1461037c575b600080fd5b34801561010157600080fd5b5061010a61039f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014457818101518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018b57600080fd5b506101a3600160a060020a03600435166024356103d6565b604080519115158252519081900360200190f35b3480156101c357600080fd5b506101cc61043c565b60408051918252519081900360200190f35b3480156101ea57600080fd5b506101a3600160a060020a0360043581169060243516604435610442565b34801561021457600080fd5b5061021d61055c565b6040805160ff9092168252519081900360200190f35b34801561023f57600080fd5b506101a3600160a060020a0360043516602435610561565b34801561026357600080fd5b506101cc6004356105f5565b34801561027b57600080fd5b506101cc600160a060020a0360043516610688565b34801561029c57600080fd5b506101cc6106a3565b3480156102b157600080fd5b506101a3600160a060020a0360043581169060243590604435166106a9565b3480156102dc57600080fd5b506102e56107a5565b60408051600160a060020a039092168252519081900360200190f35b34801561030d57600080fd5b506101a36004356107b4565b34801561032557600080fd5b506101a3600160a060020a03600435166024356107eb565b34801561034957600080fd5b506101cc600160a060020a03600435811690602435166108b0565b34801561037057600080fd5b506101cc6004356108db565b34801561038857600080fd5b5061039d600160a060020a0360043516610913565b005b60408051808201909152600481527f5248454d00000000000000000000000000000000000000000000000000000000602082015281565b336000818152600460209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015481565b6000600160a060020a038316151561045957600080fd5b600160a060020a03841660009081526003602052604090205482111561047e57600080fd5b600160a060020a03841660009081526004602090815260408083203384529091529020548211156104ae57600080fd5b600160a060020a03831660009081526003602052604090205482810110156104d257fe5b600160a060020a0384811660008181526003602090815260408083208054889003905593871680835284832080548801905583835260048252848320338452825291849020805487900390558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060019392505050565b601281565b60008054600160a060020a0316331461057957600080fd5b60025482111561058857600080fd5b600160a060020a0383166000818152600360209081526040918290208054860190556002805486900390556001805486019055815185815291517f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859281900390910190a250600192915050565b600033151561060357600080fd5b3360009081526003602052604090205482111561061f57600080fd5b6001805483900390553360008181526003602090815260409182902080548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a250503360009081526003602052604090205490565b600160a060020a031660009081526003602052604090205490565b60025481565b60008054600160a060020a031633146106c157600080fd5b6002548311156106d057600080fd5b600160a060020a0380851660008181526003602090815260408083208054890190556002805489900390556001805489019055600482528083209487168352938152908390208054870190558251868152925191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885929081900390910190a281600160a060020a031684600160a060020a03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a35060019392505050565b600054600160a060020a031681565b60008054600160a060020a031633146107cc57600080fd5b6002548211156107db57600080fd5b5060028054919091039055600190565b6000600160a060020a038316151561080257600080fd5b3360009081526003602052604090205482111561081e57600080fd5b600160a060020a038316600090815260036020526040902054828101101561084257fe5b33600081815260036020908152604080832080548790039055600160a060020a03871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600192915050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b60008054600160a060020a031633146108f357600080fd5b6002548281011161090357600080fd5b5060028054820190819055919050565b600054600160a060020a0316331461092a57600080fd5b600160a060020a038116151561093f57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a7230582014687af2f7c63ee2bf202ba3b05fd6dc03fde9429272b888cafdfbc793cece930029"
}