{
  "address": "0x6f1fE62FD47E87542A6C2B2Ee89912f42227E9Bd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FXBSCoin",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "pragma solidity ^0.4.21;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract FXBSCoin is ERC20 {\n    \n    using SafeMath for uint256;\n    address public owner = msg.sender;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    string public constant name = \"FXB\";\n    string public constant symbol = \"FXB\";\n    uint public constant decimals = 8;\n    uint256 public totalSupply = 10000000000e8;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Burn(address indexed burner, uint256 value);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function FXBSCoin () public {\n        owner = msg.sender;\n        balances[msg.sender] = totalSupply;\n    }\n    \n    function transferOwnership(address newOwner) onlyOwner public {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n\n    function balanceOf(address _owner) constant public returns (uint256) {\n\t    return balances[_owner];\n    }\n\n    // mitigates the ERC20 short address attack\n    modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n    \n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n\n        require(_to != address(0));\n        require(_amount <= balances[msg.sender]);\n        \n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n\n        require(_to != address(0));\n        require(_amount <= balances[_from]);\n        require(_amount <= allowed[_from][msg.sender]);\n        \n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n    \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) constant public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n    \n    function burn(uint256 _value) onlyOwner public {\n        require(_value <= balances[msg.sender]);\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(burner, _value);\n    }\n    \n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        \n        require(_spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData));\n        return true;\n    }\n}",
  "bytecode": "606060405260018054600160a060020a03191633600160a060020a0316179055670de0b6b3a7640000600455341561003657600080fd5b60018054600160a060020a033316600160a060020a03199091168117909155600454600091825260026020526040909120556109bb806100776000396000f3006060604052600436106100ab5763ffffffff60e060020a60003504166306fdde0381146100b0578063095ea7b31461013a57806318160ddd1461017057806323b872dd14610195578063313ce567146101bd57806342966c68146101d057806370a08231146101e85780638da5cb5b1461020757806395d89b41146100b0578063a9059cbb14610236578063cae9ca5114610258578063dd62ed3e146102bd578063f2fde38b146102e2575b600080fd5b34156100bb57600080fd5b6100c3610301565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100ff5780820151838201526020016100e7565b50505050905090810190601f16801561012c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014557600080fd5b61015c600160a060020a0360043516602435610338565b604051901515815260200160405180910390f35b341561017b57600080fd5b6101836103a4565b60405190815260200160405180910390f35b34156101a057600080fd5b61015c600160a060020a03600435811690602435166044356103aa565b34156101c857600080fd5b61018361053a565b34156101db57600080fd5b6101e660043561053f565b005b34156101f357600080fd5b610183600160a060020a0360043516610617565b341561021257600080fd5b61021a610632565b604051600160a060020a03909116815260200160405180910390f35b341561024157600080fd5b61015c600160a060020a0360043516602435610641565b341561026357600080fd5b61015c60048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061074a95505050505050565b34156102c857600080fd5b610183600160a060020a03600435811690602435166108e6565b34156102ed57600080fd5b6101e6600160a060020a0360043516610911565b60408051908101604052600381527f4658420000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260036020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60045481565b6000606060643610156103b957fe5b600160a060020a03841615156103ce57600080fd5b600160a060020a0385166000908152600260205260409020548311156103f357600080fd5b600160a060020a038086166000908152600360209081526040808320339094168352929052205483111561042657600080fd5b600160a060020a03851660009081526002602052604090205461044f908463ffffffff61096716565b600160a060020a0380871660009081526002602090815260408083209490945560038152838220339093168252919091522054610492908463ffffffff61096716565b600160a060020a03808716600090815260036020908152604080832033851684528252808320949094559187168152600290915220546104d8908463ffffffff61097916565b600160a060020a03808616600081815260026020526040908190209390935591908716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b600881565b60015460009033600160a060020a0390811691161461055d57600080fd5b600160a060020a03331660009081526002602052604090205482111561058257600080fd5b5033600160a060020a0381166000908152600260205260409020546105a79083610967565b600160a060020a0382166000908152600260205260409020556004546105d3908363ffffffff61096716565b600455600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b600160a060020a031660009081526002602052604090205490565b600154600160a060020a031681565b60006040604436101561065057fe5b600160a060020a038416151561066557600080fd5b600160a060020a03331660009081526002602052604090205483111561068a57600080fd5b600160a060020a0333166000908152600260205260409020546106b3908463ffffffff61096716565b600160a060020a0333811660009081526002602052604080822093909355908616815220546106e8908463ffffffff61097916565b600160a060020a0380861660008181526002602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a35060019392505050565b600160a060020a03338116600081815260036020908152604080832094881680845294909152808220869055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a383600160a060020a03166040517f72656365697665417070726f76616c28616464726573732c75696e743235362c81527f616464726573732c6279746573290000000000000000000000000000000000006020820152602e01604051809103902060e060020a9004338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a03168152602001828051906020019080838360005b8381101561088b578082015183820152602001610873565b50505050905090810190601f1680156108b85780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000875af19250505015156108dc57600080fd5b5060019392505050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60015433600160a060020a0390811691161461092c57600080fd5b600160a060020a03811615610964576001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b60008282111561097357fe5b50900390565b60008282018381101561098857fe5b93925050505600a165627a7a723058201257f5677873ebcf904227adfbe012a3c0617d234b75975c168589d7642bcce70029"
}