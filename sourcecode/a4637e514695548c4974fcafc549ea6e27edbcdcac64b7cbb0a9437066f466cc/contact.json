{
  "address": "0x04efc7daef8e5ba7b23f1cc1b3a36e2d50000ff7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AmmuNationStore",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-14\n*/\n\n/*\n     `sy-                                              `yy.     :y`             `    +y:\n     ymoN.                                             -MyN/    +M.            -M:   -+.\n    +N- hd`    h+syhh:/yhds`  yooyhh/:yydy.  so    /h  -M//No   +M.  -shyyh/ `ydMdyy`-h`  -shyhy:  `h/oyhds`\n   :M/  `my   `Mm.  yMo  .Ns  NN-  oMs` `mh  mh    sN` -M+ -mh` +M.  s+   /M-  :M:   /M. +M/   :No .Mm-  `Nh\n  .NNhhhhmM+  `Mo   oM`   Ny  Ny   /M-   dd  mh    sN` -M+  `dm.+M.  +hyyshM-  :M:   /M. mh     hN .M+    dd\n `dd`     oM: `Mo   oM`   Ny  Ny   /M.   dd  dd   `dN` -M+    sNoM. +M-   +M-  :M:   /M. yN.   `my .M+    dd\n sN.       hN``Mo   +M    ms  my   /M.   hh  :mdsyhyN  .M/     /NN. .ddsshyM:  `dmyh`/M.  odysydo` .M+    dh\n `  `                               ``                     ```        ``         ```     `\n                                                                            ``\n                                                                            dh\n                                                                  +yyyhs. +yNNyy: `+hyyho`  -h/ydd. .syyys-\n                                                                 :M/   o/   dh   `mh`  `yN` /Mh.   :M/   :N/\nCopyright 2018 ethbattle.io                                       +yhhyo-   dh   /M-    -M/ /M-    yNyyyyydo\n                                                                 :o   `sM`  dd   .Mo    oM- /M-    +M.    +-\n                                                                 .hdysydo   +Nyh+ -hdsshh:  /M.     +dyssdy.\n                                                                    ```       ``     ``                ``\n\n*/\ncontract ERC721Basic {\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 _tokenId\n  );\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 _tokenId\n  );\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId)\n    public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator)\n    public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n    public;\n\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public;\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   *  after a `safetransfer`. This function MAY throw to revert and reject the\n   *  transfer. This function MUST use 50,000 gas or less. Return of other\n   *  than the magic value MUST result in the transaction being reverted.\n   *  Note: the contract address is always the message sender.\n   * @param _from The sending address\n   * @param _tokenId The NFT identifier which is being transfered\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _from,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    returns(bytes4);\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner public {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\ncontract ERC721Holder is ERC721Receiver {\n  function onERC721Received(address, uint256, bytes) public returns(bytes4) {\n    return ERC721_RECEIVED;\n  }\n}\n\ncontract AmmuNationStore is Claimable, ERC721Holder{\n\n    using SafeMath for uint256;\n\n    GTAInterface public token;\n\n    uint256 private tokenSellPrice; //wei\n    uint256 private tokenBuyPrice; //wei\n    uint256 public buyDiscount; //%\n\n    mapping (address => mapping (uint256 => uint256)) public nftPrices;\n\n    event Buy(address buyer, uint256 amount, uint256 payed);\n    event Robbery(address robber);\n\n    constructor (address _tokenAddress) public {\n        token = GTAInterface(_tokenAddress);\n    }\n\n    /** Owner's operations to fill and empty the stock */\n\n    // Important! remember to call GoldenThalerToken(address).approve(this, amount)\n    // or this contract will not be able to do the transfer on your behalf.\n    function depositGTA(uint256 amount) onlyOwner public {\n        require(token.transferFrom(msg.sender, this, amount), \"Insufficient funds\");\n    }\n\n    // Important! remember to call ERC721Basic(address).approve(this, tokenId)\n    // or this contract will not be able to do the transfer on your behalf.\n    function listNFT(address _nftToken, uint256[] _tokenIds, uint256 _price) onlyOwner public {\n        ERC721Basic erc721 = ERC721Basic(_nftToken);\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            erc721.safeTransferFrom(msg.sender, this, _tokenIds[i]);\n            nftPrices[_nftToken][_tokenIds[i]] = _price;\n        }\n    }\n\n    function delistNFT(address _nftToken, uint256[] _tokenIds) onlyOwner public {\n        ERC721Basic erc721 = ERC721Basic(_nftToken);\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            erc721.safeTransferFrom(this, msg.sender, _tokenIds[i]);\n        }\n    }\n\n    function withdrawGTA(uint256 amount) onlyOwner public {\n        require(token.transfer(msg.sender, amount), \"Amount exceeds the available balance\");\n    }\n\n    function robCashier() onlyOwner public {\n        msg.sender.transfer(address(this).balance);\n        emit Robbery(msg.sender);\n    }\n\n    /**\n   * @dev Set the prices in wei for 1 GTA\n   * @param _newSellPrice The price people can sell GTA for\n   * @param _newBuyPrice The price people can buy GTA for\n   */\n    function setTokenPrices(uint256 _newSellPrice, uint256 _newBuyPrice) onlyOwner public {\n        tokenSellPrice = _newSellPrice;\n        tokenBuyPrice = _newBuyPrice;\n    }\n\n    function buyNFT(address _nftToken, uint256 _tokenId) payable public returns (uint256){\n        ERC721Basic erc721 = ERC721Basic(_nftToken);\n        require(erc721.ownerOf(_tokenId) == address(this), \"This token is not available\");\n        require(nftPrices[_nftToken][_tokenId] <= msg.value, \"Payed too little\");\n        erc721.safeTransferFrom(this, msg.sender, _tokenId);\n    }\n\n    function buy() payable public returns (uint256){\n        //note: the price of 1 GTA is in wei, but the token transfer expects the amount in 'token wei'\n        //so we're missing 10*18\n        uint256 value = msg.value.mul(1 ether);\n        uint256 _buyPrice = tokenBuyPrice;\n        if (buyDiscount > 0) {\n            //happy discount!\n            _buyPrice = _buyPrice.sub(_buyPrice.mul(buyDiscount).div(100));\n        }\n        uint256 amount = value.div(_buyPrice);\n        require(token.balanceOf(this) >= amount, \"Sold out\");\n        require(token.transfer(msg.sender, amount), \"Couldn't transfer token\");\n        emit Buy(msg.sender, amount, msg.value);\n        return amount;\n    }\n\n    // Important! remember to call GoldenThalerToken(address).approve(this, amount)\n    // or this contract will not be able to do the transfer on your behalf.\n    //TODO No sell at this moment\n    /*function sell(uint256 amount) public returns (uint256){\n        require(token.balanceOf(msg.sender) >= amount, \"Insufficient funds\");\n        require(token.transferFrom(msg.sender, this, amount), \"Couldn't transfer token\");\n        uint256 revenue = amount.mul(tokenSellPrice).div(1 ether);\n        msg.sender.transfer(revenue);\n        return revenue;\n    }*/\n\n    function applyDiscount(uint256 discount) onlyOwner public {\n        buyDiscount = discount;\n    }\n\n    function getTokenBuyPrice() public view returns (uint256) {\n        uint256 _buyPrice = tokenBuyPrice;\n        if (buyDiscount > 0) {\n            _buyPrice = _buyPrice.sub(_buyPrice.mul(buyDiscount).div(100));\n        }\n        return _buyPrice;\n    }\n\n    function getTokenSellPrice() public view returns (uint256) {\n        return tokenSellPrice;\n    }\n}\n\n/**\n * @title GTA contract interface\n */\ninterface GTAInterface {\n\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function balanceOf(address _owner) external view returns (uint256);\n\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000ef26c2766972cbac10575aa85c0ab0691b967d20"
}