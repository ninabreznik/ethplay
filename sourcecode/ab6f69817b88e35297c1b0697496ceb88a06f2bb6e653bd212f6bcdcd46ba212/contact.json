{
  "address": "0x898bf39cd67658bd63577fb00a2a3571daecbc53",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "elixor",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-31\n*/\n\npragma solidity ^0.4.10;\n\n// Miners create Elixor (EXOR), which they then convert to Elixir (ELIX)\n\ncontract elixor {\n    \nstring public name; \nstring public symbol; \nuint8 public decimals; \nuint256 public startTime;\nuint256 public totalSupply;\n\nbool public balanceImportsComplete;\n\nmapping (address => bool) public numRewardsAvailableSetForChildAddress;\n\nmapping (address => bool) public isNewParent;\nmapping (address => address) public returnChildForParentNew;\n\nbool public genesisImportsComplete;\n\n// Until contract is locked, devs can freeze the system if anything arises.\n// Then deploy a contract that interfaces with the state of this one.\nbool public frozen;\nbool public freezeProhibited;\n\naddress public devAddress; // For doing imports\n\nbool importsComplete; // Locked when devs have updated all balances\n\nmapping (address => uint256) public burnAmountAllowed;\n\nmapping(address => mapping (address => uint256)) allowed;\n\n// Balances for each account\nmapping(address => uint256) balances;\n\nmapping (address => uint256) public numRewardsAvailable;\n\n// ELIX address info\nbool public ELIXAddressSet;\naddress public ELIXAddress;\n\nevent Transfer(address indexed from, address indexed to, uint256 value);\n// Triggered whenever approve(address _spender, uint256 _value) is called.\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\nfunction elixor() {\nname = \"elixor\";\nsymbol = \"EXOR\";\ndecimals = 18;\nstartTime=1500307354; //Time contract went online.\ndevAddress=0x85196Da9269B24bDf5FfD2624ABB387fcA05382B; // Set the dev import address\n\n// Dev will create 10 batches as test using 1 EXOR in dev address (which is a child)\n// Also will send tiny amounts to several random addresses to make sure parent-child auth works.\n// Then set numRewardsAvailable to 0\nbalances[devAddress]+=1000000000000000000;\ntotalSupply+=1000000000000000000;\nnumRewardsAvailableSetForChildAddress[devAddress]=true;\nnumRewardsAvailable[devAddress]=10;\n}\n\n// Returns balance of particular account\nfunction balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n}\n\nfunction transfer(address _to, uint256 _value) { \nif (!frozen){\n    \n    if (balances[msg.sender] < _value) revert();\n    if (balances[_to] + _value < balances[_to]) revert();\n\n    if (returnIsParentAddress(_to) || isNewParent[_to])     {\n        if ((msg.sender==returnChildAddressForParent(_to)) || (returnChildForParentNew[_to]==msg.sender))  {\n            \n            if (numRewardsAvailableSetForChildAddress[msg.sender]==false)  {\n                setNumRewardsAvailableForAddress(msg.sender);\n            }\n\n            if (numRewardsAvailable[msg.sender]>0)    {\n                uint256 currDate=block.timestamp;\n                uint256 returnMaxPerBatchGenerated=5000000000000000000000; //max 5000 coins per batch\n                uint256 deployTime=10*365*86400; //10 years\n                uint256 secondsSinceStartTime=currDate-startTime;\n                uint256 maximizationTime=deployTime+startTime;\n                uint256 coinsPerBatchGenerated;\n                if (currDate>=maximizationTime)  {\n                    coinsPerBatchGenerated=returnMaxPerBatchGenerated;\n                } else  {\n                    uint256 b=(returnMaxPerBatchGenerated/4);\n                    uint256 m=(returnMaxPerBatchGenerated-b)/deployTime;\n                    coinsPerBatchGenerated=secondsSinceStartTime*m+b;\n                }\n                numRewardsAvailable[msg.sender]-=1;\n                balances[msg.sender]+=coinsPerBatchGenerated;\n                totalSupply+=coinsPerBatchGenerated;\n            }\n        }\n    }\n    \n    if (_to==ELIXAddress)   {\n        //They want to convert to ELIX\n        convertToELIX(_value,msg.sender);\n    }\n    \n    balances[msg.sender] -= _value;\n    balances[_to] += _value;\n    Transfer(msg.sender, _to, _value);\n}\n}\n\nfunction transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n) returns (bool success) {\n    if (!frozen){\n    if (balances[_from] >= _amount\n        && allowed[_from][msg.sender] >= _amount\n        && _amount > 0\n        && balances[_to] + _amount > balances[_to]) {\n        balances[_from] -= _amount;\n        allowed[_from][msg.sender] -= _amount;\n\n    if (_to==ELIXAddress)   {\n        //They want to convert to ELIX\n        convertToELIX(_amount,msg.sender);\n    }\n\n        balances[_to] += _amount;\n        return true;\n    } else {\n        return false;\n    }\n    }\n}\n  \n// Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n// If this function is called again it overwrites the current allowance with _value.\nfunction approve(address _spender, uint256 _amount) returns (bool success) {\n    allowed[msg.sender][_spender] = _amount;\n    Approval(msg.sender, _spender, _amount);\n    return true;\n}\n\n// Allows devs to set num rewards used. Locked up when system online.\nfunction setNumRewardsAvailableForAddresses(uint256[] numRewardsAvailableForAddresses,address[] addressesToSetFor)    {\n    if (tx.origin==devAddress) { // Dev address\n       if (!importsComplete)  {\n           for (uint256 i=0;i<addressesToSetFor.length;i++)  {\n               address addressToSet=addressesToSetFor[i];\n               numRewardsAvailable[addressToSet]=numRewardsAvailableForAddresses[i];\n           }\n       }\n    }\n}\n\n// Freezes the entire system\nfunction freezeTransfers() {\n    if (tx.origin==devAddress) { // Dev address\n        if (!freezeProhibited)  {\n               frozen=true;\n        }\n    }\n}\n\n// Prevent Freezing (Once system is ready to be locked)\nfunction prohibitFreeze()   {\n    if (tx.origin==devAddress) { // Dev address\n        freezeProhibited=true;\n    }\n}\n\n// Get whether address is genesis parent\nfunction returnIsParentAddress(address possibleParent) returns(bool)  {\n    return tme(0xEe22430595aE400a30FFBA37883363Fbf293e24e).parentAddress(possibleParent);\n}\n\n// Return child address for parent\nfunction returnChildAddressForParent(address parent) returns(address)  {\n    return tme(0xEe22430595aE400a30FFBA37883363Fbf293e24e).returnChildAddressForParent(parent);\n}\n\n//Allows dev to set ELIX Address\nfunction setELIXAddress(address ELIXAddressToSet)   {\n    if (tx.origin==devAddress) { // Dev address\n        if (!ELIXAddressSet)  {\n                ELIXAddressSet=true;\n               ELIXAddress=ELIXAddressToSet;\n        }\n    }\n}\n\n// Conversion to ELIX function\nfunction convertToELIX(uint256 amount,address sender) private   {\n    totalSupply-=amount;\n    burnAmountAllowed[sender]=amount;\n    elixir(ELIXAddress).createAmountFromEXORForAddress(amount,sender);\n    burnAmountAllowed[sender]=0;\n}\n\nfunction returnAmountOfELIXAddressCanProduce(address producingAddress) public returns(uint256)   {\n    return burnAmountAllowed[producingAddress];\n}\n\n// Locks up all changes to balances\nfunction lockBalanceChanges() {\n    if (tx.origin==devAddress) { // Dev address\n       balanceImportsComplete=true;\n   }\n}\n\nfunction importGenesisPairs(address[] parents,address[] children) public {\n    if (tx.origin==devAddress) { // Dev address\n        if (!genesisImportsComplete)    {\n            for (uint256 i=0;i<parents.length;i++)  {\n                address child=children[i];\n                address parent=parents[i];\n                // Set the parent as parent address\n                isNewParent[parent]=true; // Exciting\n                // Set the child of that parent\n                returnChildForParentNew[parent]=child;\n                balances[child]+=1000000000000000000;\n                totalSupply+=1000000000000000000;\n                numRewardsAvailable[child]=10;\n                numRewardsAvailableSetForChildAddress[child]=true;\n            }\n        }\n   }\n\n}\n\nfunction lockGenesisImports() public    {\n    if (tx.origin==devAddress) {\n        genesisImportsComplete=true;\n    }\n}\n\n// Devs will upload balances snapshot of blockchain via this function.\nfunction importAmountForAddresses(uint256[] amounts,address[] addressesToAddTo) public {\n   if (tx.origin==devAddress) { // Dev address\n       if (!balanceImportsComplete)  {\n           for (uint256 i=0;i<addressesToAddTo.length;i++)  {\n                address addressToAddTo=addressesToAddTo[i];\n                uint256 amount=amounts[i];\n                balances[addressToAddTo]+=amount;\n                totalSupply+=amount;\n           }\n       }\n   }\n}\n\n// Extra balance removal in case any issues arise. Do not anticipate using this function.\nfunction removeAmountForAddresses(uint256[] amounts,address[] addressesToRemoveFrom) public {\n   if (tx.origin==devAddress) { // Dev address\n       if (!balanceImportsComplete)  {\n           for (uint256 i=0;i<addressesToRemoveFrom.length;i++)  {\n                address addressToRemoveFrom=addressesToRemoveFrom[i];\n                uint256 amount=amounts[i];\n                balances[addressToRemoveFrom]-=amount;\n                totalSupply-=amount;\n           }\n       }\n   }\n}\n\n// Manual override in case any issues arise. Do not anticipate using this function.\nfunction manuallySetNumRewardsAvailableForChildAddress(address addressToSet,uint256 rewardsAvail) public {\n   if (tx.origin==devAddress) { // Dev address\n       if (!genesisImportsComplete)  {\n            numRewardsAvailable[addressToSet]=rewardsAvail;\n            numRewardsAvailableSetForChildAddress[addressToSet]=true;\n       }\n   }\n}\n\n// Manual override for total supply in case any issues arise. Do not anticipate using this function.\nfunction removeFromTotalSupply(uint256 amount) public {\n   if (tx.origin==devAddress) { // Dev address\n       if (!balanceImportsComplete)  {\n            totalSupply-=amount;\n       }\n   }\n}\n\nfunction setNumRewardsAvailableForAddress(address addressToSet) private {\n    //Get the number of rewards used in the old contract\n    tme tmeContract=tme(0xEe22430595aE400a30FFBA37883363Fbf293e24e);\n    uint256 numRewardsUsed=tmeContract.numRewardsUsed(addressToSet);\n    numRewardsAvailable[addressToSet]=10-numRewardsUsed;\n    numRewardsAvailableSetForChildAddress[addressToSet]=true;\n}\n\n}\n\n// Pulling info about parent-child pairs from the original contract\ncontract tme    {\n    function parentAddress(address possibleParent) public returns(bool);\n    function returnChildAddressForParent(address parentAddressOfChild) public returns(address);\n    function numRewardsUsed(address childAddress) public returns(uint256);\n}\n\ncontract elixir {\n    function createAmountFromEXORForAddress(uint256 amount,address sender);\n}",
  "bytecode": "606060405234156200001057600080fd5b5b6040805190810160405280600681526020017f656c69786f720000000000000000000000000000000000000000000000000000815250600090805190602001906200005e929190620002a0565b506040805190810160405280600481526020017f45584f520000000000000000000000000000000000000000000000000000000081525060019080519060200190620000ac929190620002a0565b506012600260006101000a81548160ff021916908360ff16021790555063596cdf9a6003819055507385196da9269b24bdf5ffd2624abb387fca05382b600960036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550670de0b6b3a7640000600c6000600960039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550670de0b6b3a7640000600460008282540192505081905550600160066000600960039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600a600d6000600960039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6200034f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002e357805160ff191683800117855562000314565b8280016001018555821562000314579182015b8281111562000313578251825591602001919060010190620002f6565b5b50905062000323919062000327565b5090565b6200034c91905b80821115620003485760008160009055506001016200032e565b5090565b90565b612834806200035f6000396000f300606060405236156101b5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301502460146101ba5780630241fb82146101cf578063054f7d9c1461024857806306fdde0314610275578063095ea7b3146103045780630c1838e91461035e57806315a9a145146103f857806318160ddd1461044557806323b872dd1461046e57806324889e37146104e7578063313ce567146105815780633ad10ef6146105b05780634d562c82146106055780634e6b29ee146106325780634f24e4711461068357806351175e01146106d4578063591090ee1461076e5780635945841b1461079b5780635bae8c36146107f05780635fc8cc161461084157806370a082311461088e57806376617156146108db57806378e9792514610928578063810d54a01461095157806382e933091461096657806383e219eb14610a0057806395d89b4114610a235780639c3c97a114610ab2578063a4d3364614610ac7578063a9059cbb14610b00578063b9afd6e114610b42578063c66ed8f714610bbb578063cbdd326814610bd0578063dd38623914610bfd578063e258307014610c3f575b600080fd5b34156101c557600080fd5b6101cd610c6c565b005b34156101da57600080fd5b610206600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610cf8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561025357600080fd5b61025b610d2b565b604051808215151515815260200191505060405180910390f35b341561028057600080fd5b610288610d3e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102c95780820151818401525b6020810190506102ad565b50505050905090810190601f1680156102f65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561030f57600080fd5b610344600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ddc565b604051808215151515815260200191505060405180910390f35b341561036957600080fd5b6103f660048080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050610ecf565b005b341561040357600080fd5b61042f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ff7565b6040518082815260200191505060405180910390f35b341561045057600080fd5b61045861100f565b6040518082815260200191505060405180910390f35b341561047957600080fd5b6104cd600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611015565b604051808215151515815260200191505060405180910390f35b34156104f257600080fd5b61057f60048080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050611334565b005b341561058c57600080fd5b61059461145c565b604051808260ff1660ff16815260200191505060405180910390f35b34156105bb57600080fd5b6105c361146f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561061057600080fd5b610618611495565b604051808215151515815260200191505060405180910390f35b341561063d57600080fd5b610669600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506114a8565b604051808215151515815260200191505060405180910390f35b341561068e57600080fd5b6106ba600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611584565b604051808215151515815260200191505060405180910390f35b34156106df57600080fd5b61076c600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506115a4565b005b341561077957600080fd5b6107816116ad565b604051808215151515815260200191505060405180910390f35b34156107a657600080fd5b6107ae6116c0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107fb57600080fd5b610827600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506116e6565b604051808215151515815260200191505060405180910390f35b341561084c57600080fd5b610878600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611706565b6040518082815260200191505060405180910390f35b341561089957600080fd5b6108c5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611750565b6040518082815260200191505060405180910390f35b34156108e657600080fd5b610912600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061179a565b6040518082815260200191505060405180910390f35b341561093357600080fd5b61093b6117b2565b6040518082815260200191505060405180910390f35b341561095c57600080fd5b6109646117b8565b005b341561097157600080fd5b6109fe6004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190505061182d565b005b3415610a0b57600080fd5b610a216004808035906020019091905050611ad8565b005b3415610a2e57600080fd5b610a36611b5a565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a775780820151818401525b602081019050610a5b565b50505050905090810190601f168015610aa45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610abd57600080fd5b610ac5611bf8565b005b3415610ad257600080fd5b610afe600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611c6d565b005b3415610b0b57600080fd5b610b40600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611d3b565b005b3415610b4d57600080fd5b610b79600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061228d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610bc657600080fd5b610bce612369565b005b3415610bdb57600080fd5b610be36123de565b604051808215151515815260200191505060405180910390f35b3415610c0857600080fd5b610c3d600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506123f1565b005b3415610c4a57600080fd5b610c52612500565b604051808215151515815260200191505060405180910390f35b600960039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161415610cf557600960029054906101000a900460ff161515610cf4576001600960016101000a81548160ff0219169083151502179055505b5b5b565b60086020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960019054906101000a900460ff1681565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dd45780601f10610da957610100808354040283529160200191610dd4565b820191906000526020600020905b815481529060010190602001808311610db757829003601f168201915b505050505081565b600081600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b6000806000600960039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161415610fef57600560009054906101000a900460ff161515610fee57600092505b8351831015610fed578383815181101515610f5c57fe5b9060200190602002015191508483815181101515610f7657fe5b90602001906020020151905080600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806004600082825401925050819055505b8280600101935050610f45565b5b5b5b5050505050565b600d6020528060005260406000206000915090505481565b60045481565b6000600960019054906101000a900460ff16151561132c5781600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156110f8575081600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156111045750600082115b801561118f5750600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b156113225781600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600e60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156112cc576112cb8233612513565b5b81600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506001905061132d565b6000905061132d565b5b5b9392505050565b6000806000600960039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16141561145457600560009054906101000a900460ff16151561145357600092505b83518310156114525783838151811015156113c157fe5b90602001906020020151915084838151811015156113db57fe5b90602001906020020151905080600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550806004600082825403925050819055505b82806001019350506113aa565b5b5b5b5050505050565b600260009054906101000a900460ff1681565b600960039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960029054906101000a900460ff1681565b600073ee22430595ae400a30ffba37883363fbf293e24e73ffffffffffffffffffffffffffffffffffffffff1663a3b2363d836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561156157600080fd5b6102c65a03f1151561157257600080fd5b5050506040518051905090505b919050565b60066020528060005260406000206000915054906101000a900460ff1681565b600080600960039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614156116a657600960179054906101000a900460ff1615156116a557600091505b82518210156116a457828281518110151561162f57fe5b906020019060200201519050838281518110151561164957fe5b90602001906020020151600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8180600101925050611618565b5b5b5b50505050565b600e60009054906101000a900460ff1681565b600e60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60076020528060005260406000206000915054906101000a900460ff1681565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b600a6020528060005260406000206000915090505481565b60035481565b600960039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16141561182a576001600560006101000a81548160ff0219169083151502179055505b5b565b6000806000600960039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161415611ad057600960009054906101000a900460ff161515611acf57600092505b8451831015611ace5783838151811015156118ba57fe5b90602001906020020151915084838151811015156118d457fe5b9060200190602002015190506001600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555081600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550670de0b6b3a7640000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550670de0b6b3a7640000600460008282540192505081905550600a600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b82806001019350506118a3565b5b5b5b5050505050565b600960039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161415611b5657600560009054906101000a900460ff161515611b5557806004600082825403925050819055505b5b5b50565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bf05780601f10611bc557610100808354040283529160200191611bf0565b820191906000526020600020905b815481529060010190602001808311611bd357829003601f168201915b505050505081565b600960039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161415611c6a576001600960026101000a81548160ff0219169083151502179055505b5b565b600960039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161415611d3757600e60009054906101000a900460ff161515611d36576001600e60006101000a81548160ff02191690831515021790555080600e60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600080600080600080600080600960019054906101000a900460ff1615156122805788600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611da957600080fd5b600c60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205489600c60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015611e3657600080fd5b611e3f8a6114a8565b80611e935750600760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1561211f57611ea18a61228d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611f6457503373ffffffffffffffffffffffffffffffffffffffff16600860008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1561211e5760001515600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415611fcc57611fcb33612689565b5b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111561211d5742975069010f0cf064dd5920000096506312cc030095506003548803945060035486019350838810151561204a57869250612071565b60048781151561205657fe5b0491508582880381151561206657fe5b049050818186020192505b6001600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550826004600082825401925050819055505b5b5b600e60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614156121805761217f8933612513565b5b88600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555088600c60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8b6040518082815260200191505060405180910390a35b5b50505050505050505050565b600073ee22430595ae400a30ffba37883363fbf293e24e73ffffffffffffffffffffffffffffffffffffffff1663b9afd6e1836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561234657600080fd5b6102c65a03f1151561235757600080fd5b5050506040518051905090505b919050565b600960039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614156123db576001600960006101000a81548160ff0219169083151502179055505b5b565b600960009054906101000a900460ff1681565b600960039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614156124fb57600960009054906101000a900460ff1615156124fa5780600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5b5b5050565b600560009054906101000a900460ff1681565b8160046000828254039250508190555081600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600e60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630b56f01c83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b151561262b57600080fd5b6102c65a03f1151561263c57600080fd5b5050506000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5050565b60008073ee22430595ae400a30ffba37883363fbf293e24e91508173ffffffffffffffffffffffffffffffffffffffff1663d7560f2b846000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561274657600080fd5b6102c65a03f1151561275757600080fd5b50505060405180519050905080600a03600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5050505600a165627a7a7230582073b43fa613d861b8ab70f9f9a676cdf42f5d8bebaf72e76002265dd866201cbb0029"
}