{
  "address": "0xd427c628c5f72852965fadaf1231b618c0c82395",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EventSponsorshipToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-08\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title tokenRecipient\n * @dev An interface capable of calling `receiveApproval`, which is used by `approveAndCall` to notify the contract from this interface\n */\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\n/**\n * @title TokenERC20\n * @dev A simple ERC20 standard token with burnable function\n */\ncontract TokenERC20 {\n    using SafeMath for uint256;\n\n    // Total number of tokens in existence\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping(address => uint256) internal balances;\n    mapping(address => mapping(address => uint256)) internal allowed;\n\n    // This notifies clients about the amount burnt/transferred/approved\n    event Burn(address indexed from, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Gets the balance of the specified address\n     * @param _owner The address to query\n     * @return Token balance of `_owner`\n     */\n    function balanceOf(address _owner) view public returns(uint256) {\n        return balances[_owner];\n    }\n\n    /**\n     * @dev Gets a spender's allowance from a token holder\n     * @param _owner The address which allows spender to spend\n     * @param _spender The address being allowed\n     * @return Approved amount for `spender` to spend from `_owner`\n     */\n    function allowance(address _owner, address _spender) view public returns(uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Basic transfer of all transfer-related functions\n     * @param _from The address of sender\n     * @param _to The address of recipient\n     * @param _value The amount sender want to transfer to recipient\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer( _from, _to, _value);\n    }\n\n    /**\n     * @notice Transfer tokens\n     * @dev Send `_value` tokens to `_to` from your account\n     * @param _to The address of the recipient\n     * @param _value The amount to send\n     * @return True if the transfer is done without error\n     */\n    function transfer(address _to, uint256 _value) public returns(bool) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @notice Transfer tokens from other address\n     * @dev Send `_value` tokens to `_to` on behalf of `_from`\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value The amount to send\n     * @return True if the transfer is done without error\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @notice Set allowance for other address\n     * @dev Allows `_spender` to spend no more than `_value` tokens on your behalf\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @return True if the approval is done without error\n     */\n    function approve(address _spender, uint256 _value) public returns(bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @notice Set allowance for other address and notify\n     * @dev Allows contract `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n     * @param _spender The contract address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     * @return True if it is done without error\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns(bool) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @notice Destroy tokens\n     * @dev Remove `_value` tokens from the system irreversibly\n     * @param _value The amount of money will be burned\n     * @return True if `_value` is burned successfully\n     */\n    function burn(uint256 _value) public returns(bool) {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * @notice Destroy tokens from other account\n     * @dev Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     * @param _from The address of the burner\n     * @param _value The amount of token will be burned\n     * @return True if `_value` is burned successfully\n     */\n    function burnFrom(address _from, uint256 _value) public returns(bool) {\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        balances[_from] = balances[_from].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(_from, _value);\n        return true;\n    }\n\n    /**\n     * @notice Transfer tokens to multiple account\n     * @dev Send `_value` tokens to corresponding `_to` from your account\n     * @param _to The array of ddress of the recipients\n     * @param _value The array of amount to send\n     * @return True if the transfer is done without error\n     */\n    function transferMultiple(address[] _to, uint256[] _value) external returns(bool) {\n        require(_to.length == _value.length);\n        uint256 i = 0;\n        while (i < _to.length) {\n           _transfer(msg.sender, _to[i], _value[i]);\n           i += 1;\n        }\n        return true;\n    }\n}\n\n/**\n * @title EventSponsorshipToken\n * @author Ping Chen\n */\ncontract EventSponsorshipToken is TokenERC20 {\n    using SafeMath for uint256;\n\n    // Token Info.\n    string public constant name = \"EventSponsorshipToken\";\n    string public constant symbol = \"EST\";\n    uint8 public constant decimals = 18;\n\n    /**\n     * @dev contract constructor\n     * @param _wallet The address where initial supply goes to\n     * @param _totalSupply initial supply\n     */\n    constructor(address _wallet, uint256 _totalSupply) public {\n        totalSupply = _totalSupply;\n        balances[_wallet] = _totalSupply;\n    }\n\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405160408061116783398101806040528101908080519060200190929190805190602001909291905050508060008190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050506110ce806100996000396000f3006080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100ca578063095ea7b31461015a57806318160ddd146101bf57806323b872dd146101ea578063313ce5671461026f57806342966c68146102a057806370a08231146102e557806379cc67901461033c57806395d89b41146103a1578063a05fccef14610431578063a9059cbb1461049c578063cae9ca5114610501578063dd62ed3e146105ac575b600080fd5b3480156100d657600080fd5b506100df610623565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561011f578082015181840152602081019050610104565b50505050905090810190601f16801561014c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016657600080fd5b506101a5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061065c565b604051808215151515815260200191505060405180910390f35b3480156101cb57600080fd5b506101d461074e565b6040518082815260200191505060405180910390f35b3480156101f657600080fd5b50610255600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610754565b604051808215151515815260200191505060405180910390f35b34801561027b57600080fd5b5061028461087b565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102ac57600080fd5b506102cb60048036038101908080359060200190929190505050610880565b604051808215151515815260200191505060405180910390f35b3480156102f157600080fd5b50610326600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610989565b6040518082815260200191505060405180910390f35b34801561034857600080fd5b50610387600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109d2565b604051808215151515815260200191505060405180910390f35b3480156103ad57600080fd5b506103b6610beb565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103f65780820151818401526020810190506103db565b50505050905090810190601f1680156104235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561043d57600080fd5b50610482600480360381019080803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390505050610c24565b604051808215151515815260200191505060405180910390f35b3480156104a857600080fd5b506104e7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cac565b604051808215151515815260200191505060405180910390f35b34801561050d57600080fd5b50610592600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610cc3565b604051808215151515815260200191505060405180910390f35b3480156105b857600080fd5b5061060d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e4a565b6040518082815260200191505060405180910390f35b6040805190810160405280601581526020017f4576656e7453706f6e736f7273686970546f6b656e000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b60006107e582600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ed190919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610870848484610eed565b600190509392505050565b601281565b60006108d482600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ed190919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061092c82600054610ed190919063ffffffff16565b6000819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a260019050919050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610a6382600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ed190919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b3582600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ed190919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b8d82600054610ed190919063ffffffff16565b6000819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a26001905092915050565b6040805190810160405280600381526020017f455354000000000000000000000000000000000000000000000000000000000081525081565b6000808383905086869050141515610c3b57600080fd5b600090505b85859050811015610c9f57610c94338787848181101515610c5d57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168686858181101515610c8857fe5b90506020020135610eed565b600181019050610c40565b6001915050949350505050565b6000610cb9338484610eed565b6001905092915050565b600080849050610cd3858561065c565b15610e3d578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610dcd578082015181840152602081019050610db2565b50505050905090810190601f168015610dfa5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610e1c57600080fd5b505af1158015610e30573d6000803e3d6000fd5b5050505060019150610e42565b600091505b509392505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000828211151515610ee257600080fd5b818303905092915050565b610f3f81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ed190919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fd481600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461108190919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600080828401905083811015151561109857600080fd5b80915050929150505600a165627a7a72305820bcf4024204d3b9efea83c1bb7637049501a216e2edfb9dac46222bd8b0e8dd6d002900000000000000000000000049bc69750aa700e13aff1bc899a39e779bd17950000000000000000000000000000000000000000000a56fa5b99019a5c8000000",
  "constructorArguments": "00000000000000000000000049bc69750aa700e13aff1bc899a39e779bd17950000000000000000000000000000000000000000000a56fa5b99019a5c8000000"
}