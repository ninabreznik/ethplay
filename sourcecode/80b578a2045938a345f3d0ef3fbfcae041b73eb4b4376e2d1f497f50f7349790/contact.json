{
  "address": "0x35b1d56e7783f7d79fb3c34f2e512694de2ae5fe",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GGPCToken",
  "compilerVersion": "v0.4.22-nightly.2018.3.8+commit.fbc29f6d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-17\n*/\n\npragma solidity ^0.4.16;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value > 0 && _value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value > 0 && _value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n/**\n * @title Pausable token\n *\n * @dev StandardToken modified with pausable transfers.\n **/\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n}\n\ncontract Crowdsale is PausableToken {\n    uint8 public decimals = 18;\n    uint256 public ownerSupply = 18900000000 * (10 ** uint256(decimals));\n    uint256 public supplyLimit = 21000000000 * (10 ** uint256(decimals));\n    uint256 public crowdsaleSupply = 0;\n    uint256 public crowdsalePrice = 20000;\n    uint256 public crowdsaleTotal = 2100000000 * (10 ** uint256(decimals));\n    uint256 public limit = 2 * (10 ** uint256(decimals));\n    \n    function crowdsale() public payable returns (bool) {\n        require(msg.value >= limit);\n        uint256 vv = msg.value;\n        uint256 coin = crowdsalePrice.mul(vv);\n        require(coin.add(totalSupply) <= supplyLimit);\n        require(crowdsaleSupply.add(coin) <= crowdsaleTotal);\n        \n        balances[msg.sender] = coin.add(balances[msg.sender]);\n        totalSupply = totalSupply.add(coin);\n        crowdsaleSupply = crowdsaleSupply.add(coin);\n        balances[msg.sender] = coin;\n        return true;\n    }\n}\n\n/**\n * @title GGPC Token\n *\n * @dev Implementation of GGPC Token based on the basic standard token.\n */\ncontract GGPCToken is Crowdsale {\n    /**\n    * Public variables of the token\n    * The following variables are OPTIONAL vanities. One does not have to include them.\n    * They allow one to customise the token contract & in no way influences the core functionality.\n    * Some wallets/interfaces might not even bother to look at this information.\n    */\n    string public name = \"Global game payment currency\";\n    string public symbol = \"GGPC\";\n    string public version = '1.0.1';\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     */\n    function GGPCToken() public {\n        totalSupply = ownerSupply;\n        balances[msg.sender] = ownerSupply;    // Give the creator all initial tokens\n    }\n    \n    function () public {\n        //if ether is sent to this address, send it back.\n        revert();\n    }\n}",
  "bytecode": "606060409081526003805460a060020a61ffff0219167512000000000000000000000000000000000000000000179081905560ff750100000000000000000000000000000000000000000090910416600a0a640466871d0081026004556404e3b2920081026005556000600655614e20600755637d2b750081026008556002026009558051908101604052601c81527f476c6f62616c2067616d65207061796d656e742063757272656e6379000000006020820152600a9080516100c792916020019061019c565b5060408051908101604052600481527f47475043000000000000000000000000000000000000000000000000000000006020820152600b90805161010f92916020019061019c565b5060408051908101604052600581527f312e302e310000000000000000000000000000000000000000000000000000006020820152600c90805161015792916020019061019c565b50341561016357600080fd5b60038054600160a060020a03191633600160a060020a031690811790915560045460008181559182526001602052604090912055610237565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101dd57805160ff191683800117855561020a565b8280016001018555821561020a579182015b8281111561020a5782518255916020019190600101906101ef565b5061021692915061021a565b5090565b61023491905b808211156102165760008155600101610220565b90565b610cb8806102466000396000f3006060604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610137578063095ea7b3146101c15780631207bb8e146101f757806318160ddd1461021c57806319d1997a1461022f57806323b872dd1461024257806325f96b731461026a578063313ce5671461027d5780633f4ba83a146102a657806354fd4d50146102bb5780635c975abb146102ce57806370a08231146102e15780638456cb59146103005780638da5cb5b1461031357806395d89b41146103425780639c1e03a014610355578063a4d66daf1461035d578063a9059cbb14610370578063aff1e0de14610392578063cdcb3cdb146103a5578063dd62ed3e146103b8578063f2fde38b146103dd575b341561013257600080fd5b600080fd5b341561014257600080fd5b61014a6103fc565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561018657808201518382015260200161016e565b50505050905090810190601f1680156101b35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101cc57600080fd5b6101e3600160a060020a036004351660243561049a565b604051901515815260200160405180910390f35b341561020257600080fd5b61020a6104c5565b60405190815260200160405180910390f35b341561022757600080fd5b61020a6104cb565b341561023a57600080fd5b61020a6104d1565b341561024d57600080fd5b6101e3600160a060020a03600435811690602435166044356104d7565b341561027557600080fd5b61020a610504565b341561028857600080fd5b61029061050a565b60405160ff909116815260200160405180910390f35b34156102b157600080fd5b6102b961052c565b005b34156102c657600080fd5b61014a6105ab565b34156102d957600080fd5b6101e3610616565b34156102ec57600080fd5b61020a600160a060020a0360043516610626565b341561030b57600080fd5b6102b9610641565b341561031e57600080fd5b6103266106c5565b604051600160a060020a03909116815260200160405180910390f35b341561034d57600080fd5b61014a6106d4565b6101e361073f565b341561036857600080fd5b61020a610846565b341561037b57600080fd5b6101e3600160a060020a036004351660243561084c565b341561039d57600080fd5b61020a610870565b34156103b057600080fd5b61020a610876565b34156103c357600080fd5b61020a600160a060020a036004358116906024351661087c565b34156103e857600080fd5b6102b9600160a060020a03600435166108a7565b600a8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104925780601f1061046757610100808354040283529160200191610492565b820191906000526020600020905b81548152906001019060200180831161047557829003601f168201915b505050505081565b60035460009060a060020a900460ff16156104b457600080fd5b6104be8383610942565b9392505050565b60075481565b60005481565b60055481565b60035460009060a060020a900460ff16156104f157600080fd5b6104fc8484846109ae565b949350505050565b60045481565b6003547501000000000000000000000000000000000000000000900460ff1681565b60035433600160a060020a0390811691161461054757600080fd5b60035460a060020a900460ff16151561055f57600080fd5b6003805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600c8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104925780601f1061046757610100808354040283529160200191610492565b60035460a060020a900460ff1681565b600160a060020a031660009081526001602052604090205490565b60035433600160a060020a0390811691161461065c57600080fd5b60035460a060020a900460ff161561067357600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600354600160a060020a031681565b600b8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104925780601f1061046757610100808354040283529160200191610492565b6000806000600954341015151561075557600080fd5b60075434925061076b908363ffffffff610b3e16565b905060055461078560005483610b6290919063ffffffff16565b111561079057600080fd5b6008546006546107a6908363ffffffff610b6216565b11156107b157600080fd5b600160a060020a0333166000908152600160205260409020546107db90829063ffffffff610b6216565b600160a060020a03331660009081526001602052604081209190915554610808908263ffffffff610b6216565b60005560065461081e908263ffffffff610b6216565b600655600160a060020a03331660009081526001602081905260409091208290559250505090565b60095481565b60035460009060a060020a900460ff161561086657600080fd5b6104be8383610b71565b60085481565b60065481565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a039081169116146108c257600080fd5b600160a060020a03811615156108d757600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6000600160a060020a03831615156109c557600080fd5b6000821180156109ed5750600160a060020a0384166000908152600160205260409020548211155b15156109f857600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115610a2b57600080fd5b600160a060020a038416600090815260016020526040902054610a54908363ffffffff610c7a16565b600160a060020a038086166000908152600160205260408082209390935590851681522054610a89908363ffffffff610b6216565b600160a060020a03808516600090815260016020908152604080832094909455878316825260028152838220339093168252919091522054610ad1908363ffffffff610c7a16565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b6000828202831580610b5a5750828482811515610b5757fe5b04145b15156104be57fe5b6000828201838110156104be57fe5b6000600160a060020a0383161515610b8857600080fd5b600082118015610bb05750600160a060020a0333166000908152600160205260409020548211155b1515610bbb57600080fd5b600160a060020a033316600090815260016020526040902054610be4908363ffffffff610c7a16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610c19908363ffffffff610b6216565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600082821115610c8657fe5b509003905600a165627a7a723058207ce4726e37d85f598c57f9a5ef17dbadd3277e1f5e7f9d969a70ee4d0d15a3590029"
}