{
  "address": "0xafa07cc44e4b1d347f78915fb39cfc705f10c4a1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Vesting",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-15\n*/\n\npragma solidity ^0.4.20;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal  pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal  pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure  returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Owned {\n\n    address public owner;\n    address newOwner;\n\n    modifier only(address _allowed) {\n        require(msg.sender == _allowed);\n        _;\n    }\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    function transferOwnership(address _newOwner) only(owner) public {\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() only(newOwner) public {\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n}\n\ncontract ERC20 is Owned {\n    using SafeMath for uint;\n\n    uint public totalSupply;\n    bool public isStarted = false;\n    mapping (address => uint) balances;\n    mapping (address => mapping (address => uint)) allowed;\n\n    modifier isStartedOnly() {\n        require(isStarted);\n        _;\n    }\n\n    modifier isNotStartedOnly() {\n        require(!isStarted);\n        _;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n\n    function transfer(address _to, uint _value) isStartedOnly public returns (bool success) {\n        require(_to != address(0));\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint _value) isStartedOnly public returns (bool success) {\n        require(_to != address(0));\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint balance) {\n        return balances[_owner];\n    }\n\n    function approve_fixed(address _spender, uint _currentValue, uint _value) isStartedOnly public returns (bool success) {\n        if(allowed[msg.sender][_spender] == _currentValue){\n            allowed[msg.sender][_spender] = _value;\n            emit Approval(msg.sender, _spender, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function approve(address _spender, uint _value) isStartedOnly public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n\n}\n\ncontract Token is ERC20 {\n    using SafeMath for uint;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    function Token(string _name, string _symbol, uint8 _decimals) public {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    function start() public only(owner) isNotStartedOnly {\n        isStarted = true;\n    }\n\n    //================= Crowdsale Only =================\n    function mint(address _to, uint _amount) public only(owner) isNotStartedOnly returns(bool) {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    function multimint(address[] dests, uint[] values) public only(owner) isNotStartedOnly returns (uint) {\n        uint i = 0;\n        while (i < dests.length) {\n           mint(dests[i], values[i]);\n           i += 1;\n        }\n        return(i);\n    }\n}\n\ncontract TokenWithoutStart is Owned {\n    using SafeMath for uint;\n\n    mapping (address => uint) balances;\n    mapping (address => mapping (address => uint)) allowed;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint public totalSupply;\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n\n    function TokenWithoutStart(string _name, string _symbol, uint8 _decimals) public {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    function transfer(address _to, uint _value) public returns (bool success) {\n        require(_to != address(0));\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n        require(_to != address(0));\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint balance) {\n        return balances[_owner];\n    }\n\n    function approve_fixed(address _spender, uint _currentValue, uint _value) public returns (bool success) {\n        if(allowed[msg.sender][_spender] == _currentValue){\n            allowed[msg.sender][_spender] = _value;\n            emit Approval(msg.sender, _spender, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function approve(address _spender, uint _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function mint(address _to, uint _amount) public only(owner) returns(bool) {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    function multimint(address[] dests, uint[] values) public only(owner) returns (uint) {\n        uint i = 0;\n        while (i < dests.length) {\n           mint(dests[i], values[i]);\n           i += 1;\n        }\n        return(i);\n    }\n\n}\n\n\n\n//This contract is used to distribute tokens reserved for Jury.Online team the terms of distirbution are following:\n//after the end of ICO tokens are frozen for 6 months and afterwards each months 10% of tokens is unfrozen\n\ncontract Vesting {\n\n    //1. Alexander Shevtsov            0x4C67EB86d70354731f11981aeE91d969e3823c39\n    //2. Anastasia Bormotova           0x450Eb50Cc83B155cdeA8b6d47Be77970Cf524368\n    //3. Artemiy Pirozhkov             0x9CFf3408a1eB46FE1F9de91f932FDCfEC34A568f\n    //4. Konstantin Kudryavtsev        0xA14d9fa5B1b46206026eA51A98CeEd182A91a190\n    //5. Marina Kobyakova              0x0465f2fA674bF20Fe9484dB70D8570617495b352\n    //6. Nikita Alekseev               0x07F8a6Fb0Ad63abBe21e8ef33523D8368618cd10\n    //7. Nikolay Prudnikov             0xF29fE8e258b084d40D9cF1dCF02E5CB29837b6D5\n    //8. Valeriy Strechen              0x64B557EaED227B841DcEd9f70918cd8f5ca2Bdab\n    //9. Igor Lavrenov                 0x05d1e624eaDF70bb7F8A2B11D39A8a5635e5D007\n    \n    uint public constant interval = 30 days;\n    uint public constant distributionStart = 1540994400; //1st of November\n    uint public currentStage;\n    uint public stageAmount;\n    uint public toSendLeft;\n\n    address[] public team;\n    Token public token;\n\n    constructor(address[] _team, address _token) {\n        token = Token(_token);\n        for(uint i=0; i<_team.length; i++) {\n            team.push(_team[i]);\n        }\n    }\n\n    function makePayouts() {\n        require(toSendLeft != 0);\n        if (now > interval*currentStage + distributionStart) {\n\t\t\tuint balance = stageAmount/team.length;\n            for(uint i=0; i<team.length; i++) {\n                toSendLeft -= balance;\n                require(token.transfer(team[i], balance));\n            }\n        currentStage+=1;\n        }\n    }\n\n    function setToSendLeft() {\n        require(toSendLeft == 0);\n        toSendLeft = token.balanceOf(address(this));\n        stageAmount = toSendLeft/10;\n    }\n\n\n\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516107323803806107328339810180604052810190808051820192919060200180519060200190929190505050600081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600090505b825181101561011b57600383828151811015156100a157fe5b9060200190602002015190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050610088565b5050506106058061012d6000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630350bcd91461009e578063197ebd53146100c95780635bf5d54c1461013657806365b06136146101615780637bbc101b14610178578063947a36fb146101a3578063ba067f59146101ce578063bdbbfcad146101e5578063fc0c546a14610210575b600080fd5b3480156100aa57600080fd5b506100b3610267565b6040518082815260200191505060405180910390f35b3480156100d557600080fd5b506100f46004803603810190808035906020019092919050505061026d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561014257600080fd5b5061014b6102ab565b6040518082815260200191505060405180910390f35b34801561016d57600080fd5b506101766102b1565b005b34801561018457600080fd5b5061018d610478565b6040518082815260200191505060405180910390f35b3480156101af57600080fd5b506101b8610480565b6040518082815260200191505060405180910390f35b3480156101da57600080fd5b506101e3610487565b005b3480156101f157600080fd5b506101fa6105ad565b6040518082815260200191505060405180910390f35b34801561021c57600080fd5b506102256105b3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60025481565b60038181548110151561027c57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b6000806000600254141515156102c657600080fd5b635bd9b56060005462278d000201421115610474576003805490506001548115156102ed57fe5b049150600090505b6003805490508110156104635781600260008282540392505081905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60038381548110151561035f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561041057600080fd5b505af1158015610424573d6000803e3d6000fd5b505050506040513d602081101561043a57600080fd5b8101908080519060200190929190505050151561045657600080fd5b80806001019150506102f5565b600160008082825401925050819055505b5050565b635bd9b56081565b62278d0081565b600060025414151561049857600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561055557600080fd5b505af1158015610569573d6000803e3d6000fd5b505050506040513d602081101561057f57600080fd5b8101908080519060200190929190505050600281905550600a6002548115156105a457fe5b04600181905550565b60015481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a72305820ba50c3dafdcc07e63b52312f7182e1ffbff25c9f20fd46da6b53a4e54728cf2400290000000000000000000000000000000000000000000000000000000000000040000000000000000000000000db455c71c1bc2de4e80ca451184041ef3205400100000000000000000000000000000000000000000000000000000000000000090000000000000000000000004c67eb86d70354731f11981aee91d969e3823c39000000000000000000000000450eb50cc83b155cdea8b6d47be77970cf5243680000000000000000000000009cff3408a1eb46fe1f9de91f932fdcfec34a568f000000000000000000000000a14d9fa5b1b46206026ea51a98ceed182a91a1900000000000000000000000000465f2fa674bf20fe9484db70d8570617495b35200000000000000000000000007f8a6fb0ad63abbe21e8ef33523d8368618cd10000000000000000000000000f29fe8e258b084d40d9cf1dcf02e5cb29837b6d500000000000000000000000064b557eaed227b841dced9f70918cd8f5ca2bdab00000000000000000000000005d1e624eadf70bb7f8a2b11d39a8a5635e5d007",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000db455c71c1bc2de4e80ca451184041ef3205400100000000000000000000000000000000000000000000000000000000000000090000000000000000000000004c67eb86d70354731f11981aee91d969e3823c39000000000000000000000000450eb50cc83b155cdea8b6d47be77970cf5243680000000000000000000000009cff3408a1eb46fe1f9de91f932fdcfec34a568f000000000000000000000000a14d9fa5b1b46206026ea51a98ceed182a91a1900000000000000000000000000465f2fa674bf20fe9484db70d8570617495b35200000000000000000000000007f8a6fb0ad63abbe21e8ef33523d8368618cd10000000000000000000000000f29fe8e258b084d40d9cf1dcf02e5cb29837b6d500000000000000000000000064b557eaed227b841dced9f70918cd8f5ca2bdab00000000000000000000000005d1e624eadf70bb7f8a2b11d39a8a5635e5d007"
}