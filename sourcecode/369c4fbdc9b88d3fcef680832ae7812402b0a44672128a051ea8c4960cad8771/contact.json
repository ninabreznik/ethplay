{
  "address": "0x9988d2f48f46065eeac8af066dec23d5701f7dda",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CustomToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-09\n*/\n\npragma solidity ^0.4.25;\n\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract BaseToken {\n    using SafeMath for uint256;\n\n    string constant public name = 'Ethereum Dollars';\n    string constant public symbol = 'ethds';\n    uint8 constant public decimals = 8;\n    uint256 public totalSupply = 106000000000000000;\n    uint256 constant public _totalLimit = 1e22;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function _transfer(address from, address to, uint value) internal {\n        require(to != address(0));\n        balanceOf[from] = balanceOf[from].sub(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n        totalSupply = totalSupply.add(value);\n        require(_totalLimit >= totalSupply);\n        balanceOf[account] = balanceOf[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n        allowance[msg.sender][spender] = allowance[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n        allowance[msg.sender][spender] = allowance[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\n        return true;\n    }\n}\n\ncontract CustomToken is BaseToken {\n    constructor() public {\n        balanceOf[0x348D6E3320F0Bd8D7281A6aa3545C51F852a2892] = totalSupply;\n        emit Transfer(address(0), 0x348D6E3320F0Bd8D7281A6aa3545C51F852a2892, totalSupply);\n    }\n}",
  "bytecode": "608060405267017896703a31000060005534801561001c57600080fd5b506000805473348d6e3320f0bd8d7281a6aa3545c51f852a2892808352600160209081527f6154afdecfd4fd0cf466bbcec41b31781f0ff584b9e6b85c48a8d6fa4ccf182b83905560408051938452519193927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a36106b7806100a96000396000f3006080604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100be578063095ea7b31461014857806318160ddd1461018057806323b872dd146101a7578063313ce567146101d157806339509351146101fc57806339f85f5d1461022057806370a082311461023557806395d89b4114610256578063a457c2d71461026b578063a9059cbb1461028f578063dd62ed3e146102b3575b600080fd5b3480156100ca57600080fd5b506100d36102da565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561010d5781810151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015457600080fd5b5061016c600160a060020a0360043516602435610311565b604080519115158252519081900360200190f35b34801561018c57600080fd5b5061019561038f565b60408051918252519081900360200190f35b3480156101b357600080fd5b5061016c600160a060020a0360043581169060243516604435610395565b3480156101dd57600080fd5b506101e6610402565b6040805160ff9092168252519081900360200190f35b34801561020857600080fd5b5061016c600160a060020a0360043516602435610407565b34801561022c57600080fd5b506101956104b7565b34801561024157600080fd5b50610195600160a060020a03600435166104c5565b34801561026257600080fd5b506100d36104d7565b34801561027757600080fd5b5061016c600160a060020a036004351660243561050e565b34801561029b57600080fd5b5061016c600160a060020a0360043516602435610559565b3480156102bf57600080fd5b50610195600160a060020a036004358116906024351661056f565b60408051808201909152601081527f457468657265756d20446f6c6c61727300000000000000000000000000000000602082015281565b6000600160a060020a038316151561032857600080fd5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60005481565b600160a060020a03831660009081526002602090815260408083203384529091528120546103c9908363ffffffff61058c16565b600160a060020a03851660009081526002602090815260408083203384529091529020556103f88484846105a3565b5060019392505050565b600881565b6000600160a060020a038316151561041e57600080fd5b336000908152600260209081526040808320600160a060020a0387168452909152902054610452908363ffffffff61067216565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b69021e19e0c9bab240000081565b60016020526000908152604090205481565b60408051808201909152600581527f6574686473000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a038316151561052557600080fd5b336000908152600260209081526040808320600160a060020a0387168452909152902054610452908363ffffffff61058c16565b60006105663384846105a3565b50600192915050565b600260209081526000928352604080842090915290825290205481565b6000808383111561059c57600080fd5b5050900390565b600160a060020a03821615156105b857600080fd5b600160a060020a0383166000908152600160205260409020546105e1908263ffffffff61058c16565b600160a060020a038085166000908152600160205260408082209390935590841681522054610616908263ffffffff61067216565b600160a060020a0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282018381101561068457600080fd5b93925050505600a165627a7a72305820be7c41449ecaabf7a01649cd3aac97dc4507942bbbdb083c8b0bb2d8c536ca060029"
}