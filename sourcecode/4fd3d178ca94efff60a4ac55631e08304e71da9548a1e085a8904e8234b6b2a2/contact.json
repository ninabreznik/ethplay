{
  "address": "0xef4a6b8090297972cfa022afe21e8b81d8c11411",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SBECoin",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-02\n*/\n\npragma solidity ^0.4.12;\n\n\n\n/**\n\n * @title SafeMath\n\n * @dev Math operations with safety checks that throw on error\n\n */\n\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n\n    uint256 c = a * b;\n\n    assert(a == 0 || c / a == b);\n\n    return c;\n\n  }\n\n\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n\n    uint256 c = a / b;\n\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n\n  }\n\n\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n\n    assert(b <= a);\n\n    return a - b;\n\n  }\n\n\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n\n    uint256 c = a + b;\n\n    assert(c >= a);\n\n    return c;\n\n  }\n\n}\n\n\n\n\n\n/**\n\n * @title Ownable\n\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n\n * functions, this simplifies the implementation of \"user permissions\".\n\n */\n\ncontract Ownable {\n\n  address public owner;\n\n\n\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n\n\n\n  /**\n\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n\n   * account.\n\n   */\n\n  function Ownable() {\n\n    owner = msg.sender;\n\n  }\n\n\n\n\n\n  /**\n\n   * @dev Throws if called by any account other than the owner.\n\n   */\n\n  modifier onlyOwner() {\n\n    require(msg.sender == owner);\n\n    _;\n\n  }\n\n\n\n\n\n  /**\n\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n\n   * @param newOwner The address to transfer ownership to.\n\n   */\n\n  function transferOwnership(address newOwner) onlyOwner public {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n\n  }\n\n}\n\n\n\n/**\n\n * @title ERC20Basic\n\n * @dev Simpler version of ERC20 interface\n\n * @dev see https://github.com/ethereum/EIPs/issues/179\n\n */\n\ncontract ERC20Basic {\n\n  uint256 public totalSupply;\n\n  function balanceOf(address who) public constant returns (uint256);\n\n  function transfer(address to, uint256 value) public returns (bool);\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n}\n\n\n\n\n\n/**\n\n * @title Basic token\n\n * @dev Basic version of StandardToken, with no allowances.\n\n */\n\ncontract BasicToken is ERC20Basic {\n\n  using SafeMath for uint256;\n\n\n\n  mapping(address => uint256) balances;\n\n\n\n  /**\n\n  * @dev transfer token for a specified address\n\n  * @param _to The address to transfer to.\n\n  * @param _value The amount to be transferred.\n\n  */\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n\n  }\n\n\n\n  /**\n\n  * @dev Gets the balance of the specified address.\n\n  * @param _owner The address to query the the balance of.\n\n  * @return An uint256 representing the amount owned by the passed address.\n\n  */\n\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n\n    return balances[_owner];\n\n  }\n\n}\n\n\n\n/**\n\n * @title ERC20 interface\n\n * @dev see https://github.com/ethereum/EIPs/issues/20\n\n */\n\ncontract ERC20 is ERC20Basic {\n\n  function allowance(address owner, address spender) public constant returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}\n\n\n\n\n\n/**\n\n * @title Standard ERC20 token\n\n *\n\n * @dev Implementation of the basic standard token.\n\n * @dev https://github.com/ethereum/EIPs/issues/20\n\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n\n */\n\ncontract StandardToken is ERC20, BasicToken {\n\n\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n\n\n\n  /**\n\n   * @dev Transfer tokens from one address to another\n\n   * @param _from address The address which you want to send tokens from\n\n   * @param _to address The address which you want to transfer to\n\n   * @param _value uint256 the amount of tokens to be transferred\n\n   */\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n\n\n    uint256 _allowance = allowed[_from][msg.sender];\n\n\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n\n    // require (_value <= _allowance);\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n\n    Transfer(_from, _to, _value);\n\n    return true;\n\n  }\n\n\n\n  /**\n\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n\n   *\n\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n   * @param _spender The address which will spend the funds.\n\n   * @param _value The amount of tokens to be spent.\n\n   */\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n\n  }\n\n\n\n  /**\n\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n\n   * @param _owner address The address which owns the funds.\n\n   * @param _spender address The address which will spend the funds.\n\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n\n   */\n\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n\n    return allowed[_owner][_spender];\n\n  }\n\n\n\n  /**\n\n   * approve should be called when allowed[_spender] == 0. To increment\n\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n\n   * the first transaction is mined)\n\n   * From MonolithDAO Token.sol\n\n   */\n\n  function increaseApproval (address _spender, uint _addedValue)\n\n    returns (bool success) {\n\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n\n  }\n\n\n\n  function decreaseApproval (address _spender, uint _subtractedValue)\n\n    returns (bool success) {\n\n    uint oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue > oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n\n  }\n\n}\n\n\n\n\n\n\n\ncontract SBECoin is StandardToken, Ownable {\n\n\n\n    string public constant name = \"SBECoin\";\n\n    string public constant symbol = \"SBE\";\n\n    uint public constant decimals = 18;\n\n    // there is no problem in using * here instead of .mul()\n\n    uint256 public constant initialSupply = 1000000000 * (10 ** uint256(decimals));\n\n\n\n    // Constructors\n\n    function SBECoin () {\n\n        totalSupply = initialSupply;\n\n        balances[msg.sender] = initialSupply; // Send all tokens to owner\n\n    }\n\n\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5060038054600160a060020a031916339081179091556b033b2e3c9fd0803ce8000000600081815591825260016020526040909120556108cd806100556000396000f3006080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d4578063095ea7b31461015e57806318160ddd1461019657806323b872dd146101bd578063313ce567146101e7578063378dc3dc146101fc578063661884631461021157806370a08231146102355780638da5cb5b1461025657806395d89b4114610287578063a9059cbb1461029c578063d73dd623146102c0578063dd62ed3e146102e4578063f2fde38b1461030b575b600080fd5b3480156100e057600080fd5b506100e961032e565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012357818101518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016a57600080fd5b50610182600160a060020a0360043516602435610365565b604080519115158252519081900360200190f35b3480156101a257600080fd5b506101ab6103cb565b60408051918252519081900360200190f35b3480156101c957600080fd5b50610182600160a060020a03600435811690602435166044356103d1565b3480156101f357600080fd5b506101ab6104f3565b34801561020857600080fd5b506101ab6104f8565b34801561021d57600080fd5b50610182600160a060020a0360043516602435610508565b34801561024157600080fd5b506101ab600160a060020a03600435166105f8565b34801561026257600080fd5b5061026b610613565b60408051600160a060020a039092168252519081900360200190f35b34801561029357600080fd5b506100e9610622565b3480156102a857600080fd5b50610182600160a060020a0360043516602435610659565b3480156102cc57600080fd5b50610182600160a060020a0360043516602435610720565b3480156102f057600080fd5b506101ab600160a060020a03600435811690602435166107b9565b34801561031757600080fd5b5061032c600160a060020a03600435166107e4565b005b60408051808201909152600781527f534245436f696e00000000000000000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60005481565b600080600160a060020a03841615156103e957600080fd5b50600160a060020a03841660008181526002602090815260408083203384528252808320549383526001909152902054610429908463ffffffff61087916565b600160a060020a03808716600090815260016020526040808220939093559086168152205461045e908463ffffffff61088b16565b600160a060020a038516600090815260016020526040902055610487818463ffffffff61087916565b600160a060020a03808716600081815260026020908152604080832033845282529182902094909455805187815290519288169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3506001949350505050565b601281565b6b033b2e3c9fd0803ce800000081565b336000908152600260209081526040808320600160a060020a03861684529091528120548083111561055d57336000908152600260209081526040808320600160a060020a0388168452909152812055610592565b61056d818463ffffffff61087916565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526001602052604090205490565b600354600160a060020a031681565b60408051808201909152600381527f5342450000000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a038316151561067057600080fd5b33600090815260016020526040902054610690908363ffffffff61087916565b3360009081526001602052604080822092909255600160a060020a038516815220546106c2908363ffffffff61088b16565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a0386168452909152812054610754908363ffffffff61088b16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a031633146107fb57600080fd5b600160a060020a038116151561081057600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282111561088557fe5b50900390565b60008282018381101561089a57fe5b93925050505600a165627a7a72305820afec483a0115e4f18a3c11c61885973073bb3052aa58ddf3c5d785d934d2069c0029"
}