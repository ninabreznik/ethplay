{
  "address": "0xfa2632a88bd0c11535a38f98a98db8251ccbaa9e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GTA",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-19\n*/\n\npragma solidity ^0.4.11;\n\ncontract Ownable {\n  address public owner;\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner\n  {\n    require(newOwner != address(0));\n    owner = newOwner;\n  }\n\n}\n\ncontract Contactable is Ownable {\n\n    string public contactInformation;\n\n    /**\n     * @dev Allows the owner to set a string with their contact information.\n     * @param info The contact information to attach to the contract.\n     */\n    function setContactInformation(string info) onlyOwner\n    {\n         contactInformation = info;\n    }\n}\n\ncontract Destructible is Ownable {\n\n  function Destructible() payable\n  {\n\n  }\n\n  /**\n   * @dev Transfers the current balance to the owner and terminates the contract.\n   */\n  function destroy() onlyOwner\n  {\n    selfdestruct(owner);\n  }\n\n  function destroyAndSend(address _recipient) onlyOwner\n  {\n    selfdestruct(_recipient);\n  }\n}\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev modifier to allow actions only when the contract IS paused\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev modifier to allow actions only when the contract IS NOT paused\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused\n  {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused\n  {\n    paused = false;\n    Unpause();\n  }\n}\n\n\ncontract ERC20 {\n    uint256 public totalSupply;\n    function balanceOf(address who) constant returns (uint256);\n\n    function transfer(address to, uint256 value) returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function allowance(address owner, address spender) constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) returns (bool);\n\n    function approve(address spender, uint256 value) returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract StandardToken is ERC20 {\n    using SafeMath for uint256;\n    mapping(address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n\n\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(0x0, _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n\ncontract GTA is Ownable, Destructible, Contactable, MintableToken {\n    using SafeMath for uint256;\n\n\n       // start and end timestamps where investments are allowed (both inclusive)\n    uint256 public startBlock;\n    uint256 public endBlock;\n\n    // address where funds are collected\n    address public wallet;\n\n    // how many token units a buyer gets per wei\n    uint256 public rate;\n\n    // amount of raised money in wei\n    uint256 public weiRaised;\n\n    //Constant of max suppliable tokens  .\n    uint256 constant MAXSUPPLY = 200000000000000000000000000;\n\n  string public name = \"GROUP TOKEN ALIANCE\";\n  string public symbol = \"GTA\";\n  uint public decimals = 18;\n  uint public OWNER_SUPPLY = 200000000000000000000000000;\n  address public owner;\n  bool public locked;\n\n    modifier onlyUnlocked() {\n\n      if (owner != msg.sender) {\n        require(false == locked);\n      }\n      _;\n    }\n\n  function GTA() {\n      startBlock = block.number + 2;\n      endBlock = startBlock + 1;\n\n      require(endBlock >= startBlock);\n\n      rate = 2500;\n      wallet = msg.sender;\n      locked = true;\n      owner = msg.sender;\n      totalSupply = MAXSUPPLY;\n      balances[owner] = MAXSUPPLY;\n      contactInformation = \"http://www.groupco.in\";\n  }\n\n  function unlock() onlyOwner\n    {\n      require(locked);   // to allow only 1 call\n      locked = false;\n  }\n\n\n  function transferFrom(address _from, address _to, uint256 _value) onlyUnlocked returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n   function transfer(address _to, uint256 _value) onlyUnlocked returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n\n\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    function () payable\n    {\n        buyTokens(msg.sender);\n    }\n\n    // low level token purchase function\n    function buyTokens(address beneficiary) payable\n     {\n        require(beneficiary != 0x0);\n        require(validPurchase());\n        uint256 weiAmount = msg.value;\n        // calculate token amount to be created\n        uint256 tokens = weiAmount.mul(rate);\n        // update state\n        weiRaised = weiRaised.add(weiAmount);\n        balances[owner] = balances[owner].sub(tokens);\n        balances[beneficiary] = balances[beneficiary].add(tokens);\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n        forwardFunds(); // funds are forward finally\n\n    }\n\n    // send ether to the fund collection wallet\n    // override to create custom fund forwarding mechanisms\n    function forwardFunds() internal\n    {\n        wallet.transfer(msg.value);\n    }\n\n    function validPurchase() internal constant returns (bool) {\n        uint256 current = block.number;\n        bool withinPeriod = current >= startBlock && current <= endBlock;\n        bool nonZeroPurchase = msg.value != 0;\n        bool nonMaxPurchase = msg.value <= 1000 ether;\n        bool maxSupplyNotReached = balances[owner] > OWNER_SUPPLY; // check if the balance of the owner hasnt reached the initial supply\n        return withinPeriod && nonZeroPurchase && nonMaxPurchase && maxSupplyNotReached;\n    }\n\n    function hasEnded() public constant returns (bool) {\n        return block.number > endBlock;\n    }\n\n   function burn(uint _value) onlyOwner\n   {\n        require(_value > 0);\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n\n    event Burn(address indexed burner, uint indexed value);\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contactInformation\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"info\",\"type\":\"string\"}],\"name\":\"setContactInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "606060409081526005805460ff191690558051908101604052601381527f47524f555020544f4b454e20414c49414e4345000000000000000000000000006020820152600b90805162000057929160200190620001cc565b5060408051908101604052600381527f47544100000000000000000000000000000000000000000000000000000000006020820152600c908051620000a1929160200190620001cc565b506012600d556aa56fa5b99019a5c8000000600e553415620000c257600080fd5b5b5b5b60038054600160a060020a03191633600160a060020a03161790555b5b436002810160068190556003909101600781905510156200010257600080fd5b6109c460095560088054600160a060020a03338116600160a060020a03199283168117909355600f805460a060020a60ff0219167401000000000000000000000000000000000000000017909216909217908190556aa56fa5b99019a5c800000060008181559190921681526001602052604090819020919091558051908101604052601581527f687474703a2f2f7777772e67726f7570636f2e696e000000000000000000000060208201526004908051620001c4929160200190620001cc565b505b62000276565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020f57805160ff19168380011785556200023f565b828001600101855582156200023f579182015b828111156200023f57825182559160200191906001019062000222565b5b506200024e92915062000252565b5090565b6200027391905b808211156200024e576000815560010162000259565b5090565b90565b61134980620002866000396000f300606060405236156101725763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461017f57806306fdde03146101a6578063083c632314610231578063095ea7b31461025657806318160ddd1461028c57806323b872dd146102b15780632c4e722e146102ed578063313ce5671461031257806336f7ab5e146103375780634042b66f146103c257806340c10f19146103e757806342966c681461041d57806348cd4cb114610435578063521eb2731461045a57806370a08231146104895780637d64bcb4146104ba57806383197ef0146104e15780638da5cb5b146104f657806395d89b4114610525578063a69df4b5146105b0578063a9059cbb146105c5578063b662dc9b146105fb578063b967a52e14610620578063cf30901214610673578063dd62ed3e1461069a578063ec8ac4d8146106d1578063ecb70fb7146106e7578063f2fde38b1461070e578063f5074f411461072f575b5b61017c33610750565b5b005b341561018a57600080fd5b610192610893565b604051901515815260200160405180910390f35b34156101b157600080fd5b6101b961089c565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101f65780820151818401525b6020016101dd565b50505050905090810190601f1680156102235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561023c57600080fd5b61024461093a565b60405190815260200160405180910390f35b341561026157600080fd5b610192600160a060020a0360043516602435610940565b604051901515815260200160405180910390f35b341561029757600080fd5b6102446109e7565b60405190815260200160405180910390f35b34156102bc57600080fd5b610192600160a060020a03600435811690602435166044356109ed565b604051901515815260200160405180910390f35b34156102f857600080fd5b610244610b34565b60405190815260200160405180910390f35b341561031d57600080fd5b610244610b3a565b60405190815260200160405180910390f35b341561034257600080fd5b6101b9610b40565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101f65780820151818401525b6020016101dd565b50505050905090810190601f1680156102235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103cd57600080fd5b610244610bde565b60405190815260200160405180910390f35b34156103f257600080fd5b610192600160a060020a0360043516602435610be4565b604051901515815260200160405180910390f35b341561042857600080fd5b61017c600435610ced565b005b341561044057600080fd5b610244610daa565b60405190815260200160405180910390f35b341561046557600080fd5b61046d610db0565b604051600160a060020a03909116815260200160405180910390f35b341561049457600080fd5b610244600160a060020a0360043516610dbf565b60405190815260200160405180910390f35b34156104c557600080fd5b610192610dde565b604051901515815260200160405180910390f35b34156104ec57600080fd5b61017c610e3d565b005b341561050157600080fd5b61046d610e69565b604051600160a060020a03909116815260200160405180910390f35b341561053057600080fd5b6101b9610e78565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101f65780820151818401525b6020016101dd565b50505050905090810190601f1680156102235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105bb57600080fd5b61017c610f16565b005b34156105d057600080fd5b610192600160a060020a0360043516602435610f6b565b604051901515815260200160405180910390f35b341561060657600080fd5b61024461105d565b60405190815260200160405180910390f35b341561062b57600080fd5b61017c60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061106395505050505050565b005b341561067e57600080fd5b610192611097565b604051901515815260200160405180910390f35b34156106a557600080fd5b610244600160a060020a03600435811690602435166110a7565b60405190815260200160405180910390f35b61017c600160a060020a0360043516610750565b005b34156106f257600080fd5b6101926110d4565b604051901515815260200160405180910390f35b341561071957600080fd5b61017c600160a060020a03600435166110dd565b005b341561073a57600080fd5b61017c600160a060020a036004351661113a565b005b600080600160a060020a038316151561076857600080fd5b610770611165565b151561077b57600080fd5b60095434925061079290839063ffffffff6111e616565b600a549091506107a8908363ffffffff61121516565b600a55600f54600160a060020a03166000908152600160205260409020546107d6908263ffffffff61122f16565b600f54600160a060020a03908116600090815260016020526040808220939093559085168152205461080e908263ffffffff61121516565b6001600085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a03167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18848460405191825260208201526040908101905180910390a361088d611246565b5b505050565b60055460ff1681565b600b8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109325780601f1061090757610100808354040283529160200191610932565b820191906000526020600020905b81548152906001019060200180831161091557829003601f168201915b505050505081565b60075481565b60008115806109725750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561097d57600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b600f54600090819033600160a060020a03908116911614610a1f57600f5460a060020a900460ff1615610a1f57600080fd5b5b50600160a060020a038085166000908152600260209081526040808320338516845282528083205493871683526001909152902054610a65908463ffffffff61121516565b600160a060020a038086166000908152600160205260408082209390935590871681522054610a9a908463ffffffff61122f16565b600160a060020a038616600090815260016020526040902055610ac3818463ffffffff61122f16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b5b509392505050565b60095481565b600d5481565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109325780601f1061090757610100808354040283529160200191610932565b820191906000526020600020905b81548152906001019060200180831161091557829003601f168201915b505050505081565b600a5481565b60035460009033600160a060020a03908116911614610c0257600080fd5b60055460ff1615610c1257600080fd5b600054610c25908363ffffffff61121516565b6000908155600160a060020a038416815260016020526040902054610c50908363ffffffff61121516565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a282600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35060015b5b5b92915050565b60035460009033600160a060020a03908116911614610d0b57600080fd5b60008211610d1857600080fd5b5033600160a060020a038116600090815260016020526040902054610d3d908361122f565b600160a060020a03821660009081526001602052604081209190915554610d6a908363ffffffff61122f16565b60005581600160a060020a0382167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca560405160405180910390a35b5b5050565b60065481565b600854600160a060020a031681565b600160a060020a0381166000908152600160205260409020545b919050565b60035460009033600160a060020a03908116911614610dfc57600080fd5b6005805460ff191660011790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a15060015b5b90565b60035433600160a060020a03908116911614610e5857600080fd5b600354600160a060020a0316ff5b5b565b600f54600160a060020a031681565b600c8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109325780601f1061090757610100808354040283529160200191610932565b820191906000526020600020905b81548152906001019060200180831161091557829003601f168201915b505050505081565b60035433600160a060020a03908116911614610f3157600080fd5b600f5460a060020a900460ff161515610f4957600080fd5b600f805474ff0000000000000000000000000000000000000000191690555b5b565b600f5460009033600160a060020a03908116911614610f9b57600f5460a060020a900460ff1615610f9b57600080fd5b5b600160a060020a033316600090815260016020526040902054610fc5908363ffffffff61122f16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610ffa908363ffffffff61121516565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b5b92915050565b600e5481565b60035433600160a060020a0390811691161461107e57600080fd5b6004818051610da592916020019061127d565b505b5b50565b600f5460a060020a900460ff1681565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60075443115b90565b60035433600160a060020a039081169116146110f857600080fd5b600160a060020a038116151561110d57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b60035433600160a060020a0390811691161461115557600080fd5b80600160a060020a0316ff5b5b50565b600080600080600080439450600654851015801561118557506007548511155b600e54600f54600160a060020a0316600090815260016020526040902054919550348015159550683635c9adc5dea000009011159350901190508380156111c95750825b80156111d25750815b80156111db5750805b95505b505050505090565b600082820283158061120257508284828115156111ff57fe5b04145b151561120a57fe5b8091505b5092915050565b60008282018381101561120a57fe5b8091505b5092915050565b60008282111561123b57fe5b508082035b92915050565b600854600160a060020a03163480156108fc0290604051600060405180830381858888f193505050501515610e6657600080fd5b5b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106112be57805160ff19168380011785556112eb565b828001600101855582156112eb579182015b828111156112eb5782518255916020019190600101906112d0565b5b506112f89291506112fc565b5090565b610e3991905b808211156112f85760008155600101611302565b5090565b905600a165627a7a72305820302f00a421259df075ab1d55d20239f281c782ac64faa03c5b0cb6d34f421ac80029"
}