{
  "address": "0x1fDF026b9298bbc7627A97Dcf21dB734050b840f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MCoinToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-18\n*/\n\npragma solidity ^0.4.24;\n\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed sig,\n        address  indexed guy,\n        bytes32  indexed foo,\n        bytes32  indexed bar,\n        uint wad,\n        bytes fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\n\ncontract ERC20 {\n\n    function totalSupply() public view returns (uint);\n\n    function balanceOf(address guy) public view returns (uint);\n\n    function allowance(address src, address guy) public view returns (uint);\n\n    function approve(address guy, uint wad) public returns (bool);\n\n    function transfer(address dst, uint wad) public returns (bool);\n\n    function transferFrom(address src, address dst, uint wad) public returns (bool);\n\n    event Approval(address indexed src, address indexed guy, uint wad);\n    event Transfer(address indexed src, address indexed dst, uint wad);\n}\n\n\ncontract DSAuthority {\n    function canCall(address src, address dst, bytes4 sig) public view returns (bool);\n}\n\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    constructor() public{\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_) public auth {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_) public auth {\n        authority = authority_;\n        emit LogSetAuthority(authority);\n    }\n\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig));\n        _;\n    }\n\n    modifier authorized(bytes4 sig) {\n        require(isAuthorized(msg.sender, sig));\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, this, sig);\n        }\n    }\n\n    modifier onlyOwner {\n        require(isOwner(msg.sender));\n        _;\n    }\n\n    function isOwner(address src) internal view returns (bool) {\n        if (src == owner) {\n            return true;\n        }\n    }\n}\n\n\ncontract DSMath {\n\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n\ncontract DSStop is DSAuth, DSNote {\n\n    bool public stopped;\n\n    modifier stoppable {\n        require(!stopped);\n        _;\n    }\n\n    function stop() public auth note {\n        stopped = true;\n    }\n\n    function start() public auth note {\n        stopped = false;\n    }\n\n}\n\n\ncontract DSTokenBase is ERC20, DSMath {\n    uint256                                            _supply;\n    mapping(address => uint256)                       _balances;\n    mapping(address => mapping(address => uint256))  _approvals;\n\n\n    function totalSupply() public view returns (uint) {\n        return _supply;\n    }\n\n    function balanceOf(address src) public view returns (uint) {\n        return _balances[src];\n    }\n\n    function allowance(address src, address guy) public view returns (uint) {\n        return _approvals[src][guy];\n    }\n\n    function transfer(address dst, uint wad) public returns (bool) {\n        require(dst != address(0) && wad > 0);\n        require(_balances[msg.sender] >= wad);\n\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n        _balances[dst] = add(_balances[dst], wad);\n\n        emit Transfer(msg.sender, dst, wad);\n\n        return true;\n    }\n\n    function transferFrom(address src, address dst, uint wad) public returns (bool) {\n        require(dst != address(0) && wad > 0);\n        require(_balances[src] >= wad);\n        require(_approvals[src][msg.sender] >= wad);\n\n        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n        _balances[src] = sub(_balances[src], wad);\n        _balances[dst] = add(_balances[dst], wad);\n\n        emit Transfer(src, dst, wad);\n        return true;\n    }\n\n    function approve(address guy, uint wad) public returns (bool) {\n        require(guy != address(0) && wad >= 0);\n        _approvals[msg.sender][guy] = wad;\n\n        emit Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n}\n\n\ncontract MCoinToken is DSTokenBase, DSStop {\n    string  public  symbol = \"MC\";\n    string  public name = \"MCoin\";\n    uint256  public  decimals = 18;\n\n    string public version = \"M0.1\"; // GMAT version\n\n    constructor() public {\n        _supply = 14900000000000000000000000000;\n        _balances[msg.sender] = _supply;\n    }\n\n    function transfer(address dst, uint wad) public stoppable note returns (bool) {\n        return super.transfer(dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad) public stoppable note returns (bool) {\n        return super.transferFrom(src, dst, wad);\n    }\n\n    function approve(address guy, uint wad) public stoppable note returns (bool) {\n        return super.approve(guy, wad);\n    }\n\n    function push(address dst, uint wad) public returns (bool) {\n        return transfer(dst, wad);\n    }\n\n    function pull(address src, uint wad) public returns (bool) {\n        return transferFrom(src, msg.sender, wad);\n    }\n\n}",
  "bytecode": "60c0604052600260808190527f4d4300000000000000000000000000000000000000000000000000000000000060a090815261003e916005919061013d565b506040805180820190915260058082527f4d436f696e00000000000000000000000000000000000000000000000000000060209092019182526100839160069161013d565b5060126007556040805180820190915260048082527f4d302e310000000000000000000000000000000000000000000000000000000060209092019182526100cd9160089161013d565b503480156100da57600080fd5b5060048054600160a060020a031916339081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a26b3024fdba806f76beb40000006000818155338152600160205260409020556101d8565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061017e57805160ff19168380011785556101ab565b828001600101855582156101ab579182015b828111156101ab578251825591602001919060010190610190565b506101b79291506101bb565b5090565b6101d591905b808211156101b757600081556001016101c1565b90565b610d9280620001e86000396000f3006080604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461010b57806307da68f514610195578063095ea7b3146101ac57806313af4035146101e457806318160ddd1461020557806323b872dd1461022c578063313ce5671461025657806354fd4d501461026b57806370a082311461028057806375f12b21146102a15780637a9e5e4b146102b65780638da5cb5b146102d757806395d89b4114610308578063a9059cbb1461031d578063b753a98c14610341578063be9a655514610365578063bf7e214f1461037a578063dd62ed3e1461038f578063f2d5d56b146103b6575b600080fd5b34801561011757600080fd5b506101206103da565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015a578181015183820152602001610142565b50505050905090810190601f1680156101875780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a157600080fd5b506101aa610468565b005b3480156101b857600080fd5b506101d0600160a060020a0360043516602435610502565b604080519115158252519081900360200190f35b3480156101f057600080fd5b506101aa600160a060020a0360043516610580565b34801561021157600080fd5b5061021a6105fe565b60408051918252519081900360200190f35b34801561023857600080fd5b506101d0600160a060020a0360043581169060243516604435610604565b34801561026257600080fd5b5061021a610684565b34801561027757600080fd5b5061012061068a565b34801561028c57600080fd5b5061021a600160a060020a03600435166106e5565b3480156102ad57600080fd5b506101d0610700565b3480156102c257600080fd5b506101aa600160a060020a0360043516610710565b3480156102e357600080fd5b506102ec61078e565b60408051600160a060020a039092168252519081900360200190f35b34801561031457600080fd5b5061012061079d565b34801561032957600080fd5b506101d0600160a060020a03600435166024356107f8565b34801561034d57600080fd5b506101d0600160a060020a036004351660243561086d565b34801561037157600080fd5b506101aa610882565b34801561038657600080fd5b506102ec610916565b34801561039b57600080fd5b5061021a600160a060020a0360043581169060243516610925565b3480156103c257600080fd5b506101d0600160a060020a0360043516602435610950565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104605780601f1061043557610100808354040283529160200191610460565b820191906000526020600020905b81548152906001019060200180831161044357829003601f168201915b505050505081565b61047e33600035600160e060020a03191661095d565b151561048957600080fd5b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a450506004805474ff0000000000000000000000000000000000000000191660a060020a179055565b60045460009060a060020a900460ff161561051c57600080fd5b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a46105778585610a61565b95945050505050565b61059633600035600160e060020a03191661095d565b15156105a157600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290556040519116907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b60005490565b60045460009060a060020a900460ff161561061e57600080fd5b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a461067a868686610aee565b9695505050505050565b60075481565b6008805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104605780601f1061043557610100808354040283529160200191610460565b600160a060020a031660009081526001602052604090205490565b60045460a060020a900460ff1681565b61072633600035600160e060020a03191661095d565b151561073157600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290556040519116907f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada490600090a250565b600454600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104605780601f1061043557610100808354040283529160200191610460565b60045460009060a060020a900460ff161561081257600080fd5b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a46105778585610c61565b600061087983836107f8565b90505b92915050565b61089833600035600160e060020a03191661095d565b15156108a357600080fd5b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a450506004805474ff000000000000000000000000000000000000000019169055565b600354600160a060020a031681565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6000610879833384610604565b6000600160a060020a0383163014156109785750600161087c565b600454600160a060020a03848116911614156109965750600161087c565b600354600160a060020a031615156109b05750600061087c565b600354604080517fb7009613000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152306024830152600160e060020a0319861660448301529151919092169163b70096139160648083019260209291908290030181600087803b158015610a2e57600080fd5b505af1158015610a42573d6000803e3d6000fd5b505050506040513d6020811015610a5857600080fd5b5051905061087c565b6000600160a060020a03831615801590610a7c575060008210155b1515610a8757600080fd5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b6000600160a060020a03831615801590610b085750600082115b1515610b1357600080fd5b600160a060020a038416600090815260016020526040902054821115610b3857600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115610b6857600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054610b969083610d46565b600160a060020a038516600081815260026020908152604080832033845282528083209490945591815260019091522054610bd19083610d46565b600160a060020a038086166000908152600160205260408082209390935590851681522054610c009083610d56565b600160a060020a0380851660008181526001602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b6000600160a060020a03831615801590610c7b5750600082115b1515610c8657600080fd5b33600090815260016020526040902054821115610ca257600080fd5b33600090815260016020526040902054610cbc9083610d46565b3360009081526001602052604080822092909255600160a060020a03851681522054610ce89083610d56565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b8082038281111561087c57600080fd5b8082018281101561087c57600080fd00a165627a7a7230582003902ddb8cb0e1469e67c77d8a14834dc72b3ca1b72238ebf9675da9e5e3038a0029"
}