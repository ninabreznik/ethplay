{
  "address": "0x8F7cdCc11D631E5300F24B4be7fd2F933e5fA938",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "StandardToken",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-08\n*/\n\npragma solidity >=0.4.0 <0.6.0;\n\ncontract Token {\n\n    function totalSupply() public  view returns (uint256 supply) {}\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {}\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {}\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}\n\n    function approve(address _spender, uint256 _value)public returns (bool success) {}\n\n    function allowance(address _owner, address _spender)public  returns (uint256 remaining) {}\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\n\ncontract StandardToken is Token {\n  uint256 public _totalSupply;  \n  string public name;  \n  string public symbol;  \n  uint32 public decimals;  \n  address public owner;\n  uint256 public oneTokenPrice;\n  uint256 public  no_of_tokens;\n  \n  mapping (address => uint256) balances;\n  mapping (address => mapping (address => uint256)) allowed;\n  \n   constructor() public {  \n        symbol = \"MAS\";  \n        name = \"MAS\";  \n        decimals = 18;  \n        _totalSupply = 2000000000* 10**uint(decimals);  \n        owner = msg.sender;  \n        balances[msg.sender] = _totalSupply; \n        oneTokenPrice = 0.01 ether;\n    }\n    \n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n \n\n   function transfer(address _to, uint256 _value) public returns (bool success) {\n\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            emit Transfer(msg.sender, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            emit Transfer(_from, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function balanceOf(address _owner) public view  returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public  returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n    function tokenForEther() public payable returns(uint256)\n    {\n        address payable _owner = address(uint160((owner))) ;\n        no_of_tokens = msg.value/oneTokenPrice;\n        _owner.transfer(msg.value);\n        transferFrom(_owner,msg.sender,no_of_tokens);\n        return no_of_tokens;\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b506040518060400160405280600381526020017f4d415300000000000000000000000000000000000000000000000000000000008152506002908051906020019061005c92919061018d565b506040518060400160405280600381526020017f4d41530000000000000000000000000000000000000000000000000000000000815250600190805190602001906100a892919061018d565b506012600360006101000a81548163ffffffff021916908363ffffffff160217905550600360009054906101000a900463ffffffff1663ffffffff16600a0a63773594000260008190555033600360046101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600054600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550662386f26fc10000600481905550610232565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101ce57805160ff19168380011785556101fc565b828001600101855582156101fc579182015b828111156101fb5782518255916020019190600101906101e0565b5b509050610209919061020d565b5090565b61022f91905b8082111561022b576000816000905550600101610213565b5090565b90565b610dbb806102416000396000f3fe6080604052600436106100dd5760003560e01c806370a082311161007f5780638da5cb5b116100595780638da5cb5b146103de57806395d89b4114610435578063a9059cbb146104c5578063dd62ed3e14610538576100dd565b806370a08231146103305780637c174d37146103955780637f4255e6146103b3576100dd565b806323b872dd116100bb57806323b872dd14610210578063313ce567146102a35780633eaaf86b146102da57806359a29c6f14610305576100dd565b806306fdde03146100e2578063095ea7b31461017257806318160ddd146101e5575b600080fd5b3480156100ee57600080fd5b506100f76105bd565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013757808201518184015260208101905061011c565b50505050905090810190601f1680156101645780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017e57600080fd5b506101cb6004803603604081101561019557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061065b565b604051808215151515815260200191505060405180910390f35b3480156101f157600080fd5b506101fa61074d565b6040518082815260200191505060405180910390f35b34801561021c57600080fd5b506102896004803603606081101561023357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610756565b604051808215151515815260200191505060405180910390f35b3480156102af57600080fd5b506102b86109d2565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b3480156102e657600080fd5b506102ef6109e8565b6040518082815260200191505060405180910390f35b34801561031157600080fd5b5061031a6109ee565b6040518082815260200191505060405180910390f35b34801561033c57600080fd5b5061037f6004803603602081101561035357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109f4565b6040518082815260200191505060405180910390f35b61039d610a3d565b6040518082815260200191505060405180910390f35b3480156103bf57600080fd5b506103c8610ad5565b6040518082815260200191505060405180910390f35b3480156103ea57600080fd5b506103f3610adb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561044157600080fd5b5061044a610b01565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561048a57808201518184015260208101905061046f565b50505050905090810190601f1680156104b75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104d157600080fd5b5061051e600480360360408110156104e857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b9f565b604051808215151515815260200191505060405180910390f35b34801561054457600080fd5b506105a76004803603604081101561055b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d08565b6040518082815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106535780601f1061062857610100808354040283529160200191610653565b820191906000526020600020905b81548152906001019060200180831161063657829003601f168201915b505050505081565b600081600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008054905090565b600081600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610823575081600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b801561082f5750600082115b156109c65781600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190506109cb565b600090505b9392505050565b600360009054906101000a900463ffffffff1681565b60005481565b60055481565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600360049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506004543481610a7057fe5b046005819055508073ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610abd573d6000803e3d6000fd5b50610acb8133600554610756565b5060055491505090565b60045481565b600360049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b975780601f10610b6c57610100808354040283529160200191610b97565b820191906000526020600020905b815481529060010190602001808311610b7a57829003601f168201915b505050505081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610bf05750600082115b15610cfd5781600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610d02565b600090505b92915050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509291505056fea165627a7a72305820d9e629705532896527c469b49b5fae5cd6896b6617d12b3130d5c8f317994bc90029"
}