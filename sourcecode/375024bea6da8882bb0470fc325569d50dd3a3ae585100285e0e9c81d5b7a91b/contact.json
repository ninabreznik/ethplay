{
  "address": "0x181a63746d3adcf356cbc73ace22832ffbb1ee5a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Alaricoin",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-25\n*/\n\npragma solidity ^0.4.16;\n\n\n\n  // TOKEN INFO SITE\n  // https://alaricoin.org/\n\n  // CONTRACT REPOSITORY\n  // https://github.com/marcuzzu/Alaricoin/blob/master/token/Alaricoin.sol\n\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract ERC20 {\n  uint256 public constant totalSupply=100000000000000;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\ncontract Alaricoin is ERC20 {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n    // Public variables of the token\n  string public constant name= \"Alaricoin\";\n  string public constant symbol= \"ALCO\";\n  string public constant image=\"https://alaricoin.org/wp-content/alco.png\";\n  string public constant x=\"MzksMjkyMjAyLzE2LDI1OTE3Mw==\";\n  uint8 public constant decimals = 8;\n\n  function Alaricoin() {\n\n      // cultural project account\n      balances[0x5932cbb7Cc02cf0D811a33dAa8d818f0441b8457]=100000 * 10 ** 8;\n      \n      //developers accounts\n      balances[0x45d9927B6938b193B9E733F021DeCdaE8b582Ac4]=7000 * 10 ** 8;\n      balances[0x7195794b15747dD589747C6200194be6B56c1BF3]=6000 * 10 ** 8;\n      balances[0x59bdeAf328FBF3aeD6f6c3c874a32D6a46a1ACcf]=6000 * 10 ** 8;\n      balances[0x85afD9d575dB33F5C16E10c0eAd2519f4215ed95]=6000 * 10 ** 8;\n      balances[0x2E429e4Ddd2D494fA2708e6611429DE589303510]=5000 * 10 ** 8;\n      balances[0x17074c2480882Ad1AD53614Ab3907789108d919E]=5000 * 10 ** 8;\n      balances[0x4c6e580B8366180D3D2Ed6E338eDBB50d10edF82]=3000 * 10 ** 8;\n      balances[0x839Ab10cE6Efbaa4F38d25c913Af6C438CD2b1B9]=3000 * 10 ** 8;\n      balances[0x4C3C0053B9947d3005E31eAd0042Ab3a7C6e3Ef3]=3000 * 10 ** 8;\n      balances[0xACf858ec7301024C37C2bAaCabF1cdD691AF99e1]=3000 * 10 ** 8;\n      balances[0xb37FA525222180654DAe96ca1Ad15ECeB3595cF7]=3000 * 10 ** 8;\n\n\n      //airdrops accounts\n      balances[0x09Ad487Ba5Be982d64097faf19583Ad8DeaA016e]=85000 * 10 ** 8;\n      balances[0xBFc59C104bD16E84d016eFA4B34Ea47ee216C982]=85000 * 10 ** 8;\n      balances[0x6e542BA667A8feD6e6d1e2cd741F7a8a156b07D3]=85000 * 10 ** 8;\n      balances[0x5E1A8Ab18BC7D28da9e13491585DF8b0160F99cC]=85000 * 10 ** 8;\n      balances[0x793064E86b4b274BdbEF672e8EaAeB87517FfDeC]=85000 * 10 ** 8;\n      balances[0x1Fd7772Fb2Bf826fAc26566efE2624aAd664C8e9]=85000 * 10 ** 8;\n      balances[0x57f7D077ff04cA5A6e65948c938657D0Ed57603A]=85000 * 10 ** 8;\n      balances[0xA5C54614198063eD9807BB4802d70108402CeDa1]=85000 * 10 ** 8;\n      balances[0x7bbFF0b5F17d1eC947070AE104eecD56396bb4D4]=85000 * 10 ** 8;\n      balances[0x690bB68fFF6938Da706A240320Fba0933C5864B5]=85000 * 10 ** 8;\n    \n  }\n\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n    /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}",
  "bytecode": "6060604052341561000f57600080fd5b6509184e72a000600080735932cbb7cc02cf0d811a33daa8d818f0441b845773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555064a2fb4058006000807345d9927b6938b193b9e733f021decdae8b582ac473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550648bb2c97000600080737195794b15747dd589747c6200194be6b56c1bf373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550648bb2c970006000807359bdeaf328fbf3aed6f6c3c874a32d6a46a1accf73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550648bb2c970006000807385afd9d575db33f5c16e10c0ead2519f4215ed9573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555064746a528800600080732e429e4ddd2d494fa2708e6611429de58930351073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555064746a5288006000807317074c2480882ad1ad53614ab3907789108d919e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506445d964b800600080734c6e580b8366180d3d2ed6e338edbb50d10edf8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506445d964b80060008073839ab10ce6efbaa4f38d25c913af6c438cd2b1b973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506445d964b800600080734c3c0053b9947d3005e31ead0042ab3a7c6e3ef373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506445d964b80060008073acf858ec7301024c37c2baacabf1cdd691af99e173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506445d964b80060008073b37fa525222180654dae96ca1ad15eceb3595cf773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506507bb0f7b08006000807309ad487ba5be982d64097faf19583ad8deaa016e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506507bb0f7b080060008073bfc59c104bd16e84d016efa4b34ea47ee216c98273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506507bb0f7b0800600080736e542ba667a8fed6e6d1e2cd741f7a8a156b07d373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506507bb0f7b0800600080735e1a8ab18bc7d28da9e13491585df8b0160f99cc73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506507bb0f7b080060008073793064e86b4b274bdbef672e8eaaeb87517ffdec73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506507bb0f7b0800600080731fd7772fb2bf826fac26566efe2624aad664c8e973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506507bb0f7b08006000807357f7d077ff04ca5a6e65948c938657d0ed57603a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506507bb0f7b080060008073a5c54614198063ed9807bb4802d70108402ceda173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506507bb0f7b0800600080737bbff0b5f17d1ec947070ae104eecd56396bb4d473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506507bb0f7b080060008073690bb68fff6938da706a240320fba0933c5864b573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e41806108116000396000f3006060604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100b4578063095ea7b3146101425780630c55699c1461019c57806318160ddd1461022a57806323b872dd14610253578063313ce567146102cc57806370a08231146102fb57806395d89b4114610348578063a9059cbb146103d6578063dd62ed3e14610430578063f3ccaac01461049c575b600080fd5b34156100bf57600080fd5b6100c761052a565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101075780820151818401526020810190506100ec565b50505050905090810190601f1680156101345780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014d57600080fd5b610182600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610563565b604051808215151515815260200191505060405180910390f35b34156101a757600080fd5b6101af610655565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ef5780820151818401526020810190506101d4565b50505050905090810190601f16801561021c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561023557600080fd5b61023d61068e565b6040518082815260200191505060405180910390f35b341561025e57600080fd5b6102b2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610698565b604051808215151515815260200191505060405180910390f35b34156102d757600080fd5b6102df610a52565b604051808260ff1660ff16815260200191505060405180910390f35b341561030657600080fd5b610332600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a57565b6040518082815260200191505060405180910390f35b341561035357600080fd5b61035b610a9f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561039b578082015181840152602081019050610380565b50505050905090810190601f1680156103c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103e157600080fd5b610416600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ad8565b604051808215151515815260200191505060405180910390f35b341561043b57600080fd5b610486600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610cf7565b6040518082815260200191505060405180910390f35b34156104a757600080fd5b6104af610d7e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104ef5780820151818401526020810190506104d4565b50505050905090810190601f16801561051c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6040805190810160405280600981526020017f416c617269636f696e000000000000000000000000000000000000000000000081525081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6040805190810160405280601c81526020017f4d7a6b734d6a6b794d6a41794c7a45324c4449314f5445334d773d3d0000000081525081565b655af3107a400081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156106d557600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561072257600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156107ad57600080fd5b6107fe826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dde90919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610891826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610df790919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061096282600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dde90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600881565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040805190810160405280600481526020017f414c434f0000000000000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610b1557600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610b6257600080fd5b610bb3826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dde90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c46826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610df790919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b606060405190810160405280602981526020017f68747470733a2f2f616c617269636f696e2e6f72672f77702d636f6e74656e7481526020017f2f616c636f2e706e67000000000000000000000000000000000000000000000081525081565b6000828211151515610dec57fe5b818303905092915050565b6000808284019050838110151515610e0b57fe5b80915050929150505600a165627a7a723058205d08d7b7f24b019c47448020c30f6869c73be74a42d77571cae790f6f8a000450029"
}