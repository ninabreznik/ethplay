{
  "address": "0x03973dba2a19cd38813aee62c59d0de4c005c703",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OwnsArt",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-14\n*/\n\npragma solidity ^0.4.24; contract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    } function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n} contract Bank is DSMath { mapping(address => uint) public balances;\n  event LogDepositMade(address accountAddress, uint amount); function deposit() public payable returns (uint balance) {\n    balances[msg.sender] = add(balances[msg.sender], msg.value);\n    emit LogDepositMade(msg.sender, msg.value);\n    return balances[msg.sender];\n  } function withdraw(uint amount) public returns (uint remainingBalance){\n    require(min(amount,balances[msg.sender]) == amount);\n    balances[msg.sender] = sub(balances[msg.sender],amount);\n    msg.sender.transfer(amount);\n    return balances[msg.sender];\n  } \n\nfunction balance() view public returns (uint) {\n    return balances[msg.sender];\n  }\n} contract OwnsArt is DSMath, Bank{\n  address public artist;\n  address public artOwner;\n  uint public price;\n  uint public resaleFee;\n  uint public constant maxFlatIncreaseAmount = 0.01 ether;\n  uint public constant maxPercentIncreaseAmount = 10;\n\n  event LogArtBought(address purchaserAddress, uint price, uint resalePrice);\n\n  bool private buyArtMutex = false;\n\n  constructor() public {\n    artist = msg.sender;\n    artOwner = msg.sender;\n    price = 0.01 ether;\n    resaleFee = 0 ether;\n    emit LogArtBought(msg.sender,0 ether,price);\n  } function buyArt(uint maxBid, uint resalePrice) public returns (uint){\n    require(msg.sender != artOwner);\n    require(max(maxBid,price) == maxBid);\n    require(min(maxBid,balances[msg.sender]) == maxBid);\n    require(min(resalePrice,maxResalePrice()) == resalePrice);\n\n    require(!buyArtMutex);\n    buyArtMutex = true;\n\n\n    balances[msg.sender] = sub(balances[msg.sender],price);\n    balances[artOwner] = add(balances[artOwner],sub(price,resaleFee));\n    balances[artist] = add(balances[artist],resaleFee);\n    artOwner = msg.sender; if(min(resalePrice,price)==resalePrice){\n      resaleFee = 0 ether;\n    } else{\n      resaleFee = rdiv(sub(resalePrice,price),2*RAY);\n    }\n\n    emit LogArtBought(msg.sender,price,resalePrice);\n    price = resalePrice;\n\n    buyArtMutex = false;\n    return balances[msg.sender];\n  } function maxResalePrice() view public returns (uint){\n    return add(add(rdiv(mul(price,maxPercentIncreaseAmount),100*RAY),price),maxFlatIncreaseAmount);\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"maxPercentIncreaseAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"remainingBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"artOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxResalePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"artist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxBid\",\"type\":\"uint256\"},{\"name\":\"resalePrice\",\"type\":\"uint256\"}],\"name\":\"buyArt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resaleFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxFlatIncreaseAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"purchaserAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"resalePrice\",\"type\":\"uint256\"}],\"name\":\"LogArtBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogDepositMade\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600560006101000a81548160ff02191690831515021790555034801561002b57600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550662386f26fc1000060038190555060006004819055507f7b9dd5547f10d6bfc6c2dfa5e84618984f0a0014533ff9743deed99e546a98bc336000600354604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a1610e2c806101496000396000f3006080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806308863c5b146100bf57806327e235e3146100ea5780632e1a7d4d146101415780633351612f1461018257806339e9e8eb146101d957806343bc161214610204578063692ce3cf1461025b5780636a07a832146102a6578063a035b1fe146102d1578063b69ef8a8146102fc578063b9640f8c14610327578063d0e30db014610352575b600080fd5b3480156100cb57600080fd5b506100d4610370565b6040518082815260200191505060405180910390f35b3480156100f657600080fd5b5061012b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610375565b6040518082815260200191505060405180910390f35b34801561014d57600080fd5b5061016c6004803603810190808035906020019092919050505061038d565b6040518082815260200191505060405180910390f35b34801561018e57600080fd5b506101976104fb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101e557600080fd5b506101ee610521565b6040518082815260200191505060405180910390f35b34801561021057600080fd5b50610219610568565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561026757600080fd5b50610290600480360381019080803590602001909291908035906020019092919050505061058e565b6040518082815260200191505060405180910390f35b3480156102b257600080fd5b506102bb610a51565b6040518082815260200191505060405180910390f35b3480156102dd57600080fd5b506102e6610a57565b6040518082815260200191505060405180910390f35b34801561030857600080fd5b50610311610a5d565b6040518082815260200191505060405180910390f35b34801561033357600080fd5b5061033c610aa3565b6040518082815260200191505060405180910390f35b61035a610aae565b6040518082815260200191505060405180910390f35b600a81565b60006020528060005260406000206000915090505481565b6000816103d8836000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610be9565b1415156103e457600080fd5b61042c6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610c03565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156104b4573d6000803e3d6000fd5b506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061056361055661054e610539600354600a610c88565b6b033b2e3c9fd0803ce8000000606402610d21565b600354610d61565b662386f26fc10000610d61565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515156105ed57600080fd5b826105fa84600354610de6565b14151561060657600080fd5b8261064f846000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610be9565b14151561065b57600080fd5b8161066d83610668610521565b610be9565b14151561067957600080fd5b600560009054906101000a900460ff1615151561069557600080fd5b6001600560006101000a81548160ff0219169083151502179055506106fa6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600354610c03565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107b3600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546107ae600354600454610c03565b610d61565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610883600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600454610d61565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508161093583600354610be9565b1415610948576000600481905550610973565b61096c61095783600354610c03565b6b033b2e3c9fd0803ce8000000600202610d21565b6004819055505b7f7b9dd5547f10d6bfc6c2dfa5e84618984f0a0014533ff9743deed99e546a98bc3360035484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a1816003819055506000600560006101000a81548160ff0219169083151502179055506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60045481565b60035481565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b662386f26fc1000081565b6000610af86000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205434610d61565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fa8126f7572bb1fdeae5b5aa9ec126438b91f658a07873f009d041ae690f3a1933334604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a16000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b600081831115610bf95781610bfb565b825b905092915050565b60008282840391508111151515610c82576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f64732d6d6174682d7375622d756e646572666c6f77000000000000000000000081525060200191505060405180910390fd5b92915050565b600080821480610ca757508282838502925082811515610ca457fe5b04145b1515610d1b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d6d6174682d6d756c2d6f766572666c6f7700000000000000000000000081525060200191505060405180910390fd5b92915050565b600081610d4f610d3d856b033b2e3c9fd0803ce8000000610c88565b600285811515610d4957fe5b04610d61565b811515610d5857fe5b04905092915050565b60008282840191508110151515610de0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d6d6174682d6164642d6f766572666c6f7700000000000000000000000081525060200191505060405180910390fd5b92915050565b600081831015610df65781610df8565b825b9050929150505600a165627a7a723058200ac0d1c468b90df644dd1818ade1635f2d5c94343e0efc1b08f31681ceae8ec20029"
}