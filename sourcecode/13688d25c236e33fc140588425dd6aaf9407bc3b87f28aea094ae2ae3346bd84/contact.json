{
  "address": "0xdfbd2889bdba743d3454911df61d200e79294b01",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ICOToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-18\n*/\n\npragma solidity ^0.4.21;\n\n// File: contracts/ERC20Interface.sol\n\ncontract ERC20Interface {\n    uint256 public totalSupply;\n\n    function balanceOf(address _owner) public constant returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool ok);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool ok);\n    function approve(address _spender, uint256 _value) public returns (bool ok);\n    function allowance(address _owner, address _spender) public constant returns (uint256);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n// File: contracts/SafeMath.sol\n\n/**\n * Math operations with safety checks\n */\nlibrary SafeMath {\n    function multiply(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function divide(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0);\n        uint256 c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function subtract(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a && c >= b);\n        return c;\n    }\n}\n\n// File: contracts/StandardToken.sol\n\ncontract StandardToken is ERC20Interface {\n    using SafeMath for uint256;\n\n    /* Actual balances of token holders */\n    mapping(address => uint) balances;\n    /* approve() allowances */\n    mapping (address => mapping (address => uint)) allowed;\n\n    /**\n     *\n     * Fix for the ERC20 short address attack\n     *\n     * http://vessenes.com/the-erc20-short-address-attack-explained/\n     */\n    modifier onlyPayloadSize(uint256 size) {\n        require(msg.data.length == size + 4);\n        _;\n    }\n\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool ok) {\n        require(_to != address(0));\n        require(_value > 0);\n        uint256 holderBalance = balances[msg.sender];\n        require(_value <= holderBalance);\n\n        balances[msg.sender] = holderBalance.subtract(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool ok) {\n        require(_to != address(0));\n        uint256 allowToTrans = allowed[_from][msg.sender];\n        uint256 balanceFrom = balances[_from];\n        require(_value <= balanceFrom);\n        require(_value <= allowToTrans);\n\n        balances[_from] = balanceFrom.subtract(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowToTrans.subtract(_value);\n\n        emit Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    /**\n     * @dev Returns balance of the `_owner`.\n     *\n     * @param _owner   The address whose balance will be returned.\n     * @return balance Balance of the `_owner`.\n     */\n    function balanceOf(address _owner) public constant returns (uint256) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool ok) {\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        //    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n        //    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * Atomic increment of approved spending\n     *\n     * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     */\n    function increaseApproval(address _spender, uint256 _addedValue) onlyPayloadSize(2 * 32) public returns (bool ok) {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        allowed[msg.sender][_spender] = oldValue.add(_addedValue);\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n    }\n\n    /**\n     * Atomic decrement of approved spending.\n     *\n     * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     */\n    function decreaseApproval(address _spender, uint256 _subtractedValue) onlyPayloadSize(2 * 32) public returns (bool ok) {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.subtract(_subtractedValue);\n        }\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n    }\n\n}\n\n// File: contracts/BurnableToken.sol\n\ncontract BurnableToken is StandardToken {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        _burn(msg.sender, _value);\n    }\n\n    function _burn(address _holder, uint256 _value) internal {\n        require(_value <= balances[_holder]);\n\n        balances[_holder] = balances[_holder].subtract(_value);\n        totalSupply = totalSupply.subtract(_value);\n\n        emit Burn(_holder, _value);\n        emit Transfer(_holder, address(0), _value);\n    }\n\n    event Burn(address indexed _burner, uint256 _value);\n}\n\n// File: contracts/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n    address public newOwner;\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n\n        owner = newOwner;\n        newOwner = address(0);\n\n        emit OwnershipTransferred(owner, newOwner);\n    }\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n}\n\n// File: contracts/ERC223Interface.sol\n\ncontract ERC223Interface is ERC20Interface {\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool ok);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value, bytes indexed _data);\n}\n\n// File: contracts/ERC223ReceivingContract.sol\n\ncontract ERC223ReceivingContract {\n    /**\n     * @dev Standard ERC223 function that will handle incoming token transfers.\n     *\n     * @param _from  Token sender address.\n     * @param _value Amount of tokens.\n     * @param _data  Transaction metadata.\n     */\n    function tokenFallback(address _from, uint256 _value, bytes _data) public;\n}\n\n// File: contracts/Standard223Token.sol\n\ncontract Standard223Token is ERC223Interface, StandardToken {\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool ok) {\n        if (!super.transfer(_to, _value)) {\n            revert();\n        }\n        if (isContract(_to)) {\n            contractFallback(msg.sender, _to, _value, _data);\n        }\n\n        emit Transfer(msg.sender, _to, _value, _data);\n\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool ok) {\n        return transfer(_to, _value, new bytes(0));\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool ok) {\n        if (!super.transferFrom(_from, _to, _value)) {\n            revert();\n        }\n        if (isContract(_to)) {\n            contractFallback(_from, _to, _value, _data);\n        }\n\n        emit Transfer(_from, _to, _value, _data);\n\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool ok) {\n        return transferFrom(_from, _to, _value, new bytes(0));\n    }\n\n    function contractFallback(address _origin, address _to, uint256 _value, bytes _data) private {\n        ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n        receiver.tokenFallback(_origin, _value, _data);\n    }\n\n    function isContract(address _addr) private view returns (bool is_contract) {\n        uint256 length;\n        assembly {\n            length := extcodesize(_addr)\n        }\n\n        return (length > 0);\n    }\n}\n\n// File: contracts/ICOToken.sol\n\n// ----------------------------------------------------------------------------\n// ICO Token contract\n// ----------------------------------------------------------------------------\ncontract ICOToken is BurnableToken, Ownable, Standard223Token {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply = _totalSupply;\n\n        balances[owner] = totalSupply;\n\n        emit Mint(owner, totalSupply);\n        emit Transfer(address(0), owner, totalSupply);\n        emit MintFinished();\n    }\n\n    function () public payable {\n        revert();\n    }\n\n    event Mint(address indexed _to, uint256 _amount);\n    event MintFinished();\n}",
  "bytecode": "60806040523480156200001157600080fd5b50604051620020f4380380620020f48339810180604052810190808051820192919060200180518201929190602001805190602001909291908051906020019092919050505033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360059080519060200190620000b092919062000286565b508260069080519060200190620000c992919062000286565b5081600760006101000a81548160ff021916908360ff1602179055508060008190555060005460016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968856000546040518082815260200191505060405180910390a2600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000546040518082815260200191505060405180910390a37fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a15050505062000335565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002c957805160ff1916838001178555620002fa565b82800160010185558215620002fa579182015b82811115620002f9578251825591602001919060010190620002dc565b5b5090506200030991906200030d565b5090565b6200033291905b808211156200032e57600081600090555060010162000314565b5090565b90565b611daf80620003456000396000f3006080604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610101578063095ea7b31461019157806318160ddd146101f657806323b872dd14610221578063313ce567146102a657806342966c68146102d7578063661884631461030457806370a082311461036957806379ba5097146103c05780638da5cb5b146103d757806395d89b411461042e578063a9059cbb146104be578063ab67aa5814610523578063be45fd62146105ee578063d4ee1d9014610699578063d73dd623146106f0578063dd62ed3e14610755578063f2fde38b146107cc575b600080fd5b34801561010d57600080fd5b5061011661080f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015657808201518184015260208101905061013b565b50505050905090810190601f1680156101835780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019d57600080fd5b506101dc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108ad565b604051808215151515815260200191505060405180910390f35b34801561020257600080fd5b5061020b61099f565b6040518082815260200191505060405180910390f35b34801561022d57600080fd5b5061028c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109a5565b604051808215151515815260200191505060405180910390f35b3480156102b257600080fd5b506102bb6109f0565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102e357600080fd5b5061030260048036038101908080359060200190929190505050610a03565b005b34801561031057600080fd5b5061034f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a10565b604051808215151515815260200191505060405180910390f35b34801561037557600080fd5b506103aa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cb9565b6040518082815260200191505060405180910390f35b3480156103cc57600080fd5b506103d5610d02565b005b3480156103e357600080fd5b506103ec610ea3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043a57600080fd5b50610443610ec9565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610483578082015181840152602081019050610468565b50505050905090810190601f1680156104b05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104ca57600080fd5b50610509600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f67565b604051808215151515815260200191505060405180910390f35b34801561052f57600080fd5b506105d4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610fb0565b604051808215151515815260200191505060405180910390f35b3480156105fa57600080fd5b5061067f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506110b7565b604051808215151515815260200191505060405180910390f35b3480156106a557600080fd5b506106ae6111bc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106fc57600080fd5b5061073b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111e2565b604051808215151515815260200191505060405180910390f35b34801561076157600080fd5b506107b6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113fb565b6040518082815260200191505060405180910390f35b3480156107d857600080fd5b5061080d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611482565b005b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108a55780601f1061087a576101008083540402835291602001916108a5565b820191906000526020600020905b81548152906001019060200180831161088857829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b60006109e784848460006040519080825280601f01601f1916602001820160405280156109e15781602001602082028038833980820191505090505b50610fb0565b90509392505050565b600760009054906101000a900460ff1681565b610a0d3382611522565b50565b6000806040600481016000369050141515610a2a57600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915081841115610b38576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bcc565b610b4b84836116d890919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a360019250505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d5e57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f5f5780601f10610f3457610100808354040283529160200191610f5f565b820191906000526020600020905b815481529060010190602001808311610f4257829003601f168201915b505050505081565b6000610fa8838360006040519080825280601f01601f191660200182016040528015610fa25781602001602082028038833980820191505090505b506110b7565b905092915050565b6000610fbd8585856116f1565b1515610fc857600080fd5b610fd184611a00565b15610fe357610fe285858585611a13565b5b816040518082805190602001908083835b6020831015156110195780518252602082019150602081019050602083039250610ff4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16866040518082815260200191505060405180910390a460019050949350505050565b60006110c38484611b47565b15156110ce57600080fd5b6110d784611a00565b156110e9576110e833858585611a13565b5b816040518082805190602001908083835b60208310151561111f57805182526020820191506020810190506020830392506110fa565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16866040518082815260200191505060405180910390a4600190509392505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060406004810160003690501415156111fc57600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915061128e8483611d5990919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a360019250505092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114de57600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561157057600080fd5b6115c281600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116d890919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061161a816000546116d890919063ffffffff16565b6000819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008282111515156116e657fe5b818303905092915050565b60008060008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415151561173157600080fd5b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080841115151561180157600080fd5b81841115151561181057600080fd5b61182384826116d890919063ffffffff16565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118b884600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d5990919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061190e84836116d890919063ffffffff16565b600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a36001925050509392505050565b600080823b905060008111915050919050565b60008390508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a8685856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611ada578082015181840152602081019050611abf565b50505050905090810190601f168015611b075780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015611b2857600080fd5b505af1158015611b3c573d6000803e3d6000fd5b505050505050505050565b6000806040600481016000369050141515611b6157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614151515611b9d57600080fd5b600084111515611bac57600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150818411151515611bfd57600080fd5b611c1084836116d890919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ca584600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d5990919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b6000808284019050838110158015611d715750828110155b1515611d7957fe5b80915050929150505600a165627a7a723058204111e80a38c3cd922fdc8adba955457079b81a40288340eedacb5a7b5aff97db0029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000001176592e0000000000000000000000000000000000000000000000000000000000000000084f474f20436f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034f474f0000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000001176592e0000000000000000000000000000000000000000000000000000000000000000084f474f20436f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034f474f0000000000000000000000000000000000000000000000000000000000"
}