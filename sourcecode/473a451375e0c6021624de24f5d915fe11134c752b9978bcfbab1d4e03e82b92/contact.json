{
  "address": "0xaf55f3b7dc65c8f9577cf00c8c5ca7b6e8cc4433",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "EnterCoin: Old Token",
  "contractName": "Token",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-12\n*/\n\npragma solidity ^0.4.14;\n\n\n\n\ncontract ERC20 {\n    uint256 public totalSupply;\n    function balanceOf(address who) constant returns (uint256);\n    \n    function transfer(address to, uint256 value) returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    function allowance(address owner, address spender) constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) returns (bool);\n    \n    function approve(address spender, uint256 value) returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract StandardToken is ERC20 {\n    using SafeMath for uint256;\n    mapping(address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    require(newOwner != address(0));      \n    owner = newOwner;\n  }\n\n}\n\n\ncontract Token is StandardToken, Ownable {\n    using SafeMath for uint256;\n\n  // start and end block where investments are allowed (both inclusive)\n    uint256 public startBlock;\n    uint256 public endBlock;\n  // address where funds are collected\n    address public wallet;\n\n  // how many token units a buyer gets per wei\n    uint256 public tokensPerEther;\n\n  // amount of raised money in wei\n    uint256 public weiRaised;\n\n    uint256 public cap;\n    uint256 public issuedTokens;\n    string public name = \"Enter-Coin\";\n    string public symbol = \"ENTRC\";\n    uint public decimals = 8;\n    uint public INITIAL_SUPPLY = 100000000 * (10**decimals);\n    address founder; \n    uint internal factor;\n    bool internal isCrowdSaleRunning;\n    uint contractDeployedTime;\n    uint mf = 10**decimals; // multiplication factor due to decimal value\n\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n\n    function Token() { \n  \n    \n\n    wallet = address(0x6D6D8fDFeFDA898341a60340a5699769Af2BA350); \n    founder = address(0x0CC74179395d9434C9A31586763861327C499E76); // address of the founder\n\n    tokensPerEther = 306; // 12/10/17 value 1 dollar value\n    endBlock = block.number + 1000000;\n\n    totalSupply = INITIAL_SUPPLY;\n                          // reserve         // for token sale\n    balances[msg.sender] = (25000000 * mf) + (65000000 * mf);\n    balances[founder] = 10000000 * mf;\n\n    startBlock = block.number;    \n    cap = 65000000 * mf;\n    issuedTokens = 0;\n    factor = 10**10;\n    isCrowdSaleRunning = true;\n    contractDeployedTime = now;\n\n    }\n\n    // crowdsale entrypoint\n    // fallback function can be used to buy tokens\n\n  function () payable {\n    buyTokens(msg.sender);\n  }\n  \n  function getTimePassed() public constant returns (uint256) {\n      return (now - contractDeployedTime).div(1 days);\n  }\n  // bonus based on the current time\n  function applyBonus(uint256 tokens) internal constant returns (uint256) {\n\n    if ( (now < (contractDeployedTime + 14 days)) && (issuedTokens < (3500000*mf)) ) {\n\n      return tokens.mul(20).div(10); // 100% bonus\n      \n    } else if ((now < (contractDeployedTime + 20 days)) && (issuedTokens < (13500000*mf)) ) {\n    \n      return tokens.mul(15).div(10); // 50% bonus\n    \n\n    } else if ((now < (contractDeployedTime + 26 days)) && (issuedTokens < (23500000*mf)) ) {\n\n      return tokens.mul(13).div(10); // 30% bonus\n\n    } else if ((now < (contractDeployedTime + 32 days)) && (issuedTokens < (33500000*mf)) ) {\n\n      return tokens.mul(12).div(10); // 20% bonus\n\n    } else if ((now < (contractDeployedTime + 38 days)) && (issuedTokens < (43500000*mf)) ) {\n      return tokens.mul(11).div(10); // 10% bonus\n\n    } \n\n    return tokens; // if reached till hear means no bonus \n\n  }\n\n  // stop the crowd sale\n  function stopCrowdSale() onlyOwner {\n    isCrowdSaleRunning = false;\n    endBlock = block.number;\n  }\n\n  function resetContractDeploymentDate() onlyOwner {\n      contractDeployedTime = now;\n  }\n\n  function startCrowdsale(uint interval) onlyOwner {\n    if ( endBlock < block.number ) {\n      endBlock = block.number;  // normalize the end block\n    }\n\n    endBlock = endBlock.add(interval);\n    isCrowdSaleRunning = true;\n  }\n\n  function setWallet(address newWallet) onlyOwner {\n    require(newWallet != address(0));\n    wallet = newWallet;\n  }\n\n  // low level token purchase function\n  function buyTokens(address beneficiary) payable {\n    require(beneficiary != 0x0);\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n    // calculate token amount to be created\n    uint256 tokens = weiAmount.mul(tokensPerEther).div(factor);\n\n    tokens = applyBonus(tokens);\n    \n    // check if the tokens are more than the cap\n    require(issuedTokens.add(tokens) <= cap);\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n    issuedTokens = issuedTokens.add(tokens);\n\n    forwardFunds();\n    // transfer the token\n    issueToken(beneficiary,tokens);\n    TokenPurchase(msg.sender, beneficiary, msg.value, tokens);\n\n  }\n\n  function setFounder(address newFounder) onlyOwner {\n    require(newFounder != address(0));\n    founder = newFounder; \n  }\n\n  // can be issued to anyone without owners concent but as this method is internal only buyToken is calling it.\n  function issueToken(address beneficiary, uint256 tokens) internal {\n    balances[owner] = balances[owner].sub(tokens);\n    balances[beneficiary] = balances[beneficiary].add(tokens);\n  }\n\n  // send ether to the fund collection wallet\n  // override to create custom fund forwarding mechanisms\n  function forwardFunds() internal {\n    // to normalize the input \n    wallet.transfer(msg.value);\n  \n  }\n\n  // @return true if the transaction can buy tokens\n  function validPurchase() internal constant returns (bool) {\n    uint256 current = block.number;\n    bool withinPeriod = current >= startBlock && current <= endBlock;\n    bool nonZeroPurchase = msg.value != 0;\n    return withinPeriod && nonZeroPurchase && isCrowdSaleRunning;\n  }\n\n  // @return true if crowdsale event has ended\n  function hasEnded() public constant returns (bool) {\n      return (block.number > endBlock) || !isCrowdSaleRunning;\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimePassed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFounder\",\"type\":\"address\"}],\"name\":\"setFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"startCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetContractDeploymentDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopCrowdSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526040805190810160405280600a81526020017f456e7465722d436f696e00000000000000000000000000000000000000000000815250600b908051906020019062000051929190620002e7565b506040805190810160405280600581526020017f454e545243000000000000000000000000000000000000000000000000000000815250600c90805190602001906200009f929190620002e7565b506008600d55600d54600a0a6305f5e10002600e55600d54600a0a6013553415620000c957600080fd5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550736d6d8fdfefda898341a60340a5699769af2ba350600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550730cc74179395d9434c9a31586763861327c499e76600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610132600781905550620f42404301600581905550600e546000819055506013546303dfd2400260135463017d78400201600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601354629896800260016000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550436004819055506013546303dfd240026009819055506000600a819055506402540be4006010819055506001601160006101000a81548160ff0219169083151502179055504260128190555062000396565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200032a57805160ff19168380011785556200035b565b828001600101855582156200035b579182015b828111156200035a5782518255916020019190600101906200033d565b5b5090506200036a91906200036e565b5090565b6200039391905b808211156200038f57600081600090555060010162000375565b5090565b90565b611a9480620003a66000396000f3006060604052361561015d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610168578063083c6323146101f6578063095ea7b31461021f57806318160ddd1461027957806323b872dd146102a25780632ff2e9dc1461031b578063313ce56714610344578063355274ea1461036d5780634042b66f1461039657806348cd4cb1146103bf578063521eb273146103e8578063649218441461043d57806370a08231146104665780637a341bc7146104b35780638da5cb5b146104ec57806395d89b4114610541578063a9059cbb146105cf578063b534b5b714610629578063bbc2402d14610652578063c225bf0314610675578063c67c6eab1461068a578063dd62ed3e1461069f578063deaa59df1461070b578063ec8ac4d814610744578063ecb70fb714610772578063f2fde38b1461079f578063f856d605146107d8575b61016633610801565b005b341561017357600080fd5b61017b610955565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101bb5780820151818401526020810190506101a0565b50505050905090810190601f1680156101e85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561020157600080fd5b6102096109f3565b6040518082815260200191505060405180910390f35b341561022a57600080fd5b61025f600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109f9565b604051808215151515815260200191505060405180910390f35b341561028457600080fd5b61028c610b80565b6040518082815260200191505060405180910390f35b34156102ad57600080fd5b610301600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b86565b604051808215151515815260200191505060405180910390f35b341561032657600080fd5b61032e610e36565b6040518082815260200191505060405180910390f35b341561034f57600080fd5b610357610e3c565b6040518082815260200191505060405180910390f35b341561037857600080fd5b610380610e42565b6040518082815260200191505060405180910390f35b34156103a157600080fd5b6103a9610e48565b6040518082815260200191505060405180910390f35b34156103ca57600080fd5b6103d2610e4e565b6040518082815260200191505060405180910390f35b34156103f357600080fd5b6103fb610e54565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561044857600080fd5b610450610e7a565b6040518082815260200191505060405180910390f35b341561047157600080fd5b61049d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e9b565b6040518082815260200191505060405180910390f35b34156104be57600080fd5b6104ea600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ee4565b005b34156104f757600080fd5b6104ff610fc0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561054c57600080fd5b610554610fe6565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610594578082015181840152602081019050610579565b50505050905090810190601f1680156105c15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105da57600080fd5b61060f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611084565b604051808215151515815260200191505060405180910390f35b341561063457600080fd5b61063c61121f565b6040518082815260200191505060405180910390f35b341561065d57600080fd5b6106736004808035906020019091905050611225565b005b341561068057600080fd5b6106886112cc565b005b341561069557600080fd5b61069d611331565b005b34156106aa57600080fd5b6106f5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506113b1565b6040518082815260200191505060405180910390f35b341561071657600080fd5b610742600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611438565b005b610770600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610801565b005b341561077d57600080fd5b610785611514565b604051808215151515815260200191505060405180910390f35b34156107aa57600080fd5b6107d6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611538565b005b34156107e357600080fd5b6107eb611614565b6040518082815260200191505060405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff161415151561082a57600080fd5b61083261161a565b151561083d57600080fd5b34915061086960105461085b6007548561166a90919063ffffffff16565b61169d90919063ffffffff16565b9050610874816116b8565b905060095461088e82600a5461185b90919063ffffffff16565b1115151561089b57600080fd5b6108b08260085461185b90919063ffffffff16565b6008819055506108cb81600a5461185b90919063ffffffff16565b600a819055506108d9611879565b6108e383826118dd565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad183484604051808381526020018281526020019250505060405180910390a3505050565b600b8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109eb5780601f106109c0576101008083540402835291602001916109eb565b820191906000526020600020905b8154815290600101906020018083116109ce57829003601f168201915b505050505081565b60055481565b600080821480610a8557506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515610a9057600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b600080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610c5a83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461185b90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cef83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a4f90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d458382611a4f90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b600e5481565b600d5481565b60095481565b60085481565b60045481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610e9662015180601254420361169d90919063ffffffff16565b905090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f4057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610f7c57600080fd5b80600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c8054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561107c5780601f106110515761010080835404028352916020019161107c565b820191906000526020600020905b81548152906001019060200180831161105f57829003601f168201915b505050505081565b60006110d882600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a4f90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061116d82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461185b90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600a5481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561128157600080fd5b43600554101561129357436005819055505b6112a88160055461185b90919063ffffffff16565b6005819055506001601160006101000a81548160ff02191690831515021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561132857600080fd5b42601281905550565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561138d57600080fd5b6000601160006101000a81548160ff02191690831515021790555043600581905550565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561149457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156114d057600080fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006005544311806115335750601160009054906101000a900460ff16155b905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561159457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156115d057600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60075481565b600080600080439250600454831015801561163757506005548311155b91506000341415905081801561164a5750805b80156116625750601160009054906101000a900460ff165b935050505090565b6000808284029050600084148061168b575082848281151561168857fe5b04145b151561169357fe5b8091505092915050565b60008082848115156116ab57fe5b0490508091505092915050565b60006212750060125401421080156116d85750601354623567e002600a54105b1561170b57611704600a6116f660148561166a90919063ffffffff16565b61169d90919063ffffffff16565b9050611856565b621a5e006012540142108015611729575060135462cdfe6002600a54105b1561175c57611755600a611747600f8561166a90919063ffffffff16565b61169d90919063ffffffff16565b9050611856565b62224700601254014210801561177b575060135463016694e002600a54105b156117ae576117a7600a611799600d8561166a90919063ffffffff16565b61169d90919063ffffffff16565b9050611856565b622a300060125401421080156117cd57506013546301ff2b6002600a54105b15611800576117f9600a6117eb600c8561166a90919063ffffffff16565b61169d90919063ffffffff16565b9050611856565b62321900601254014210801561181f5750601354630297c1e002600a54105b156118525761184b600a61183d600b8561166a90919063ffffffff16565b61169d90919063ffffffff16565b9050611856565b8190505b919050565b600080828401905083811015151561186f57fe5b8091505092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015156118db57600080fd5b565b6119518160016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a4f90919063ffffffff16565b60016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a0881600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461185b90919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000828211151515611a5d57fe5b8183039050929150505600a165627a7a72305820d857e1a6bb5874f9f13a9a9e5826b2acf2c9cb926f1fbe995b434abd7412dac20029"
}