{
  "address": "0x12aac5bd0ff25840172f3d12d391748faa3775e2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TOKEN",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-05\n*/\n\npragma solidity ^0.4.24;\n\n    contract Owned\n    {\n      address internal owner;\n      address private manager;\n      address internal sink;\n\n      constructor() public\n      {\n        owner = msg.sender;\n        manager = msg.sender;\n        sink = msg.sender;\n      }\n\n      modifier onlyOwner\n      {\n        require(msg.sender == owner, \"Contract owner is required\");\n        _;\n      }\n\n      modifier onlyManager\n      {\n        require(msg.sender == manager, \"Contract manager is required\");\n        _;\n      }\n\n      modifier onlyManagerNUser(address user)\n      {\n        require(msg.sender == manager || msg.sender == user, \"Contract manager or wallet owner is required\");\n        _;\n      }\n\n      function transferOwnership(address newOwner, address newManager, address newSink) onlyOwner public\n      {\n        owner = newOwner;\n        manager = newManager;\n        sink = newSink;\n      }\n    }\n\n    /*\n    interface tokenRecipient\n    {\n      function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\n    }\n    */\n\n    contract SupplyInfo\n    {\n      string public name;\n      string public symbol;\n      uint8 constant public decimals = 18;\n      uint256 constant internal denominator = 10 ** uint256(decimals);\n      uint256 public totalSupply;\n\n      constructor(\n          uint256 initialSupply,\n          string tokenName,\n          string tokenSymbol\n      )\n        public\n      {\n        totalSupply = initialSupply * denominator;\n        name = tokenName;\n        symbol = tokenSymbol;\n      }\n    }\n\n    contract Transferable\n    {\n      mapping (address => uint256) public balanceOf;\n      event Transfer(address indexed from, address indexed to, uint256 value);\n\n      function _transferTokens(address _from, address _to, uint _value) internal\n      {\n        require(balanceOf[_from] >= _value, \"Not enough funds\");\n        require(balanceOf[_to] + _value >= balanceOf[_to], \"BufferOverflow on receiver side\");\n\n        // uint previousBalances = balanceOf[_from] + balanceOf[_to];\n\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n\n        // assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n      }\n\n      function transfer(address _to, uint256 _value) public returns (bool success)\n      {\n        _transferTokens(msg.sender, _to, _value);\n        return true;\n      }\n\n\n    }\n\n\n    contract ERC20 is SupplyInfo, Transferable\n    {\n      constructor(\n          uint256 initialSupply,\n          string tokenName,\n          string tokenSymbol\n      ) SupplyInfo(initialSupply, tokenName, tokenSymbol)\n        public\n      {\n        balanceOf[this] = totalSupply;\n      }\n    }\n\n    contract Manageable is Transferable, Owned {\n      event Deposit(\n          address indexed _from,\n          // bytes32 indexed _id,\n          uint _value,\n          string comment\n      );\n\n      event Withdraw(\n          address indexed _to,\n          uint _value,\n          string comment\n      );\n\n      // function deposit(bytes32 _id) public payable {\n      function deposit(string comment) public payable {\n        emit Deposit(msg.sender, msg.value, comment);\n      }\n\n      function withdraw(uint256 amount, string comment) onlyOwner public {\n        _transferEther(sink, amount);\n        emit Withdraw(sink, amount, comment);\n      }\n\n      function _transferEther(address _to, uint _value) internal {\n        address contractAddress = this;\n        require(contractAddress.balance >= _value);\n        _to.transfer(_value);\n      }\n    }\n\n    contract Tradeable is ERC20, Manageable {\n\n\n      event Buy(address indexed who, uint256 amount, uint256 buyPrice, string comment);\n      event Sell(address indexed who, uint256 amount, uint256 sellPrice, string comment);\n\n      function _convertEtherToToken(uint256 etherAmount, uint256 buyPrice) pure internal returns (uint256) {\n        require(buyPrice > 0, \"Buy price cant be zero\");\n\n        // BufferOverflow just in case\n        require(etherAmount * denominator > etherAmount, \"BufferOverflow\");\n        uint256 tokenAmount = etherAmount * denominator / buyPrice;\n\n        return tokenAmount;\n      }\n\n      function _convertTokenToEther(uint256 tokenAmount, uint256 sellPrice) pure internal returns (uint256) {\n        require(sellPrice > 0, \"Sell price cant be zero\");\n\n        // BufferOverflow just in case\n        require(tokenAmount * sellPrice > tokenAmount, \"BufferOverflow\");\n        uint256 etherAmount = tokenAmount * sellPrice / denominator;\n        return etherAmount;\n      }\n\n      function _buy(uint256 etherAmount, uint256 buyPrice, string comment) internal {\n        require(etherAmount > 0, \"Ether amount cant be zero\");\n        uint256 tokenAmount = _convertEtherToToken(etherAmount, buyPrice);\n\n        // At this point transaction is accepted, just send tokens in return\n        _transferTokens(this, msg.sender, tokenAmount);\n        _transferEther(sink, etherAmount);\n        emit Buy(msg.sender, tokenAmount, buyPrice, comment);\n      }\n\n      function _sell(uint256 tokenAmount, uint256 sellPrice, string comment) internal {\n        uint256 etherAmount = _convertTokenToEther(tokenAmount, sellPrice);\n        require(etherAmount > 0, \"Ether amount after convert become zero - reverting\"); // makes no sense otherwise\n\n        _transferTokens(msg.sender, this, tokenAmount);\n        _transferEther(msg.sender, tokenAmount);\n        emit Sell(msg.sender, tokenAmount,sellPrice, comment);\n      }\n    }\n\n    contract FrezeeableAccounts is Transferable, Owned {\n      mapping (address => bool) internal frozenAccount;\n      /* This generates a public event  on the blockchain that will notify clients */\n      event FrozenFunds(address indexed target, bool indexed frozen);\n\n      modifier notFrozen(address target)\n      {\n        require(!frozenAccount[target], \"Account is frozen\");\n        _;\n      }\n\n      function freezeAccount(address target, bool freeze) onlyManager public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n      }\n\n      function iamFrozen() view public returns(bool isFrozen)\n      {\n        return frozenAccount[msg.sender];\n      }\n\n      function transfer(address _to, uint256 _value) public notFrozen(msg.sender) notFrozen(_to) returns (bool success)\n      {\n        return super.transfer(_to, _value);\n      }\n    }\n\n    contract Destructable is Owned {\n      event Destruct(string indexed comment);\n\n      function destruct(string comment) onlyOwner public {\n        selfdestruct(owner);\n        emit Destruct(comment);\n      }\n    }\n\n    contract CoeficientTransform is SupplyInfo\n    {\n      function applyChange(uint256 currentCoeficient, uint256 value) pure internal returns(uint256)\n      {\n        return currentCoeficient * value / denominator;\n      }\n\n      function deduceChange(uint256 currentCoeficient, uint256 value) pure internal returns(uint256)\n      {\n        require(value > 0, \"Cant deduce zero change\");\n        uint256 opposite = denominator * denominator / value;\n        return applyChange(currentCoeficient, opposite);\n      }\n    }\n\n    contract DayCounter\n    {\n      uint private DayZero;\n      uint internal constant SecondsInDay = 60 * 60 * 24;\n\n      constructor(uint ZeroDayTimestamp) public\n      {\n        DayZero = ZeroDayTimestamp;\n      }\n\n      function daysSince(uint a, uint b) pure internal returns(uint)\n      {\n        return (b - a) / SecondsInDay;\n      }\n\n      function DaysPast() view public returns(uint)\n      {\n        return daysSince(DayZero, now);\n      }\n    }\n\n    contract InvestmentTransform is CoeficientTransform, DayCounter\n    {\n      uint constant private percentsPerDay = 3;\n\n      function currentRoiInPersents() view public returns(uint)\n      {\n        uint currentPercents = percentsPerDay * DaysPast();\n        return 100 + currentPercents;\n      }\n\n      function investmentRate(uint256 currentCoeficient) view internal returns(uint256)\n      {\n        uint256 dailyMultiply = denominator * currentRoiInPersents() / 100;\n        return applyChange(currentCoeficient, dailyMultiply);\n      }\n    }\n\n    contract LinkedToFiatTransform is CoeficientTransform, Owned\n    {\n      uint256 public fiatDriftAncor;\n      uint256 public etherToFiatRate;\n\n      event FiatLink(uint256 ancorDrift, uint exchangeRate);\n\n      function setFiatLinkedCoef(uint256 newAncor, uint256 newRate) public onlyManager {\n        require(newAncor > 0 && newRate > 0, \"Coeficients cant be zero\");\n        fiatDriftAncor = newAncor;\n        etherToFiatRate = newRate;\n        emit FiatLink(newAncor, newRate);\n      }\n\n      function fiatDrift(uint256 currentCoeficient) view internal returns(uint256)\n      {\n        return applyChange(currentCoeficient, fiatDriftAncor);\n      }\n\n      function FiatToEther(uint256 amount) view internal returns(uint256)\n      {\n        return deduceChange(amount, etherToFiatRate);\n      }\n\n      function EtherToFiat(uint256 amount) view internal returns(uint256)\n      {\n        return applyChange(amount, etherToFiatRate);\n      }\n    }\n\n    contract StartStopSell is CoeficientTransform, Owned\n    {\n      bool internal buyAvailable = false;\n      bool internal sellAvailable = false;\n\n      function updateBuySellFlags(bool allowBuy, bool allowSell) public onlyManager\n      {\n        buyAvailable = allowBuy;\n        sellAvailable = allowSell;\n      }\n\n      modifier canBuy()\n      {\n        require(buyAvailable, \"Buy currently disabled\");\n        _;\n      }\n\n      modifier canSell()\n      {\n        require(sellAvailable, \"Sell currently disabled\");\n        _;\n      }\n    }\n\n    contract LISCTrade is FrezeeableAccounts, Tradeable, LinkedToFiatTransform, InvestmentTransform, StartStopSell\n    {\n      uint256 internal baseFiatPrice;\n      uint256 public minBuyAmount;\n\n      constructor(uint256 basePrice) public\n      {\n        baseFiatPrice = basePrice;\n      }\n\n      function setMinTrade(uint256 _minBuyAmount) onlyManager public\n      {\n        minBuyAmount = _minBuyAmount;\n      }\n\n      function priceInUSD() view public returns(uint256)\n      {\n        uint256 price = baseFiatPrice;\n        price = fiatDrift(price);\n        price = investmentRate(price);\n        require(price > 0, \"USD price cant be zero\");\n        return price;\n      }\n\n      function priceInETH() view public returns(uint256)\n      {\n        return FiatToEther(priceInUSD());\n      }\n\n      function tokensPerETH() view public returns(uint256)\n      {\n        uint256 EthPerToken = priceInETH();\n        return deduceChange(denominator, EthPerToken);\n      }\n\n      function buy(string comment) payable public canBuy notFrozen(msg.sender)\n      {\n        uint256 USDAmount = EtherToFiat(msg.value);\n        require(USDAmount > minBuyAmount, \"You cant buy lesser than min USD amount\");\n        _buy(msg.value, priceInETH(), comment);\n      }\n\n      function sell(uint256 tokenAmount, string comment) public canSell notFrozen(msg.sender)\n      {\n        _sell(tokenAmount, priceInETH(), comment);\n      }\n    }\n\n\n    contract MintNBurn is ERC20\n    {\n      event Mint(address indexed target, uint256 mintedAmount, string comment);\n      event Burn(address indexed target, uint256 mintedAmount, string comment);\n\n\n      function mintToken(address target, uint256 mintedAmount, string comment) internal\n      {\n        balanceOf[this] += mintedAmount;\n        totalSupply += mintedAmount;\n\n        _transferTokens(this, target, mintedAmount);\n        emit Mint(target, mintedAmount, comment);\n      }\n\n      function burnToken(address target, uint256 amount, string comment) internal\n      {\n        _transferTokens(msg.sender, this, amount);\n        balanceOf[this] -= amount;\n        totalSupply -= amount;\n        emit Burn(target, amount, comment);\n      }\n    }\n\n    contract Upgradeable is MintNBurn, Owned\n    {\n      address private prevVersion;\n      address private newVersion = 0x0;\n      mapping (address => bool) public upgraded;\n\n      constructor(address upgradeFrom) internal {\n        prevVersion = upgradeFrom;\n      }\n\n      function setUpgradeTo(address upgradeTo) public onlyOwner {\n        newVersion = upgradeTo;\n      }\n\n      function upgradeAvalable() view public returns(bool) {\n        return newVersion != 0x0;\n      }\n\n      function upgradeMe() public {\n        upgradeUser(msg.sender);\n      }\n\n      function upgradeUser(address target) public onlyManagerNUser(target)\n      {\n        require(upgradeAvalable(), \"New version not yet available\");\n        Upgradeable newContract = Upgradeable(newVersion);\n        require(!newContract.upgraded(target), \"Your account already been upgraded\");\n        newContract.importUser(target);\n        burnToken(target, balanceOf[target], \"Upgrading to new version\");\n      }\n\n      function importMe() public {\n        importUser(msg.sender);\n      }\n\n      function importUser(address target) onlyManager public\n      {\n        require(!upgraded[target], \"Account already been upgraded\");\n        upgraded[target] = true;\n        Transferable oldContract = Transferable(prevVersion);\n        uint256 amount = oldContract.balanceOf(target);\n        mintToken(target, amount, \"Upgrade from previous version\");\n      }\n    }\n\n    contract TOKEN is ERC20, Owned, Destructable, LISCTrade, Upgradeable  {\n\n      event Init(uint256 basePrice, uint dayZero);\n\n      constructor(\n          string tokenName,\n          string tokenSymbol,\n          uint basePrice,\n          uint dayZero,\n          address _prevVersion\n      ) ERC20(0, tokenName, tokenSymbol) DayCounter(dayZero) LISCTrade(basePrice * denominator) Upgradeable(_prevVersion) public\n      {\n        emit Init(basePrice, dayZero);\n      }\n\n      event Mint(address indexed target, uint256 mintedAmount, string comment);\n\n      function mint(address target, uint256 mintedAmount, string comment) onlyOwner public {\n        mintedAmount *= denominator;\n        mintToken(target, mintedAmount, comment);\n      }\n\n      function burn(uint256 amount, string comment) private\n      {\n        burnToken(msg.sender, amount, comment);\n      }\n\n      function balance() view public returns(uint256)\n      {\n        return balanceOf[msg.sender];\n      }\n\n      event Broadcast(string message);\n\n      function broadcast(string _message) public onlyManager\n      {\n        emit Broadcast(_message);\n      }\n\n\n    }",
  "bytecode": "6080604052600b805461ffff19169055600f8054600160a060020a03191690553480156200002c57600080fd5b50604051620023fb380380620023fb83398101604090815281516020808401519284015160608501516080860151600060028190559487018051909796909601959294919390928392670de0b6b3a764000087029286928a918a918491849184916200009d91859185019062000169565b508051620000b390600190602084019062000169565b505060025430600090815260036020908152604091829020929092556004805433600160a060020a0319918216811790925560058054821683179055600680548216909217909155600a98909855600c98909855600e8054909716600160a060020a03999099169890981790955550508351888152948501879052505081517ff0ee3666ded00e4a4054586f71ae9aba172e661b35be2e598af046d5c61c532793819003909201919050a150505050506200020e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001ac57805160ff1916838001178555620001dc565b82800160010185558215620001dc579182015b82811115620001dc578251825591602001919060010190620001bf565b50620001ea929150620001ee565b5090565b6200020b91905b80821115620001ea5760008155600101620001f5565b90565b6121dd806200021e6000396000f3006080604052600436106101b65763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101bb5780630cd0563b1461024557806318160ddd146102a057806323814798146102c757806324562747146102e85780632ac6e2e4146102fd5780632bb1b957146103265780632f7f117514610345578063313ce5671461035a57806337cc18281461038557806338eb519f146103a657806344a78dff146103bb5780634686a527146103d3578063492cc769146103e85780635656fef3146104345780636b760a941461044f57806370a082311461047c5780637960049e1461049d5780638632f2ad146104be57806389f1bd3f146104d357806395d89b41146105315780639c15296a14610546578063a26e11861461055b578063a9059cbb146105a7578063b08663c6146105cb578063b69ef8a8146105e0578063c1ea3853146105f5578063d3fc98641461064e578063d41edb7b146106b7578063dc048cf2146106cc578063e503fe5b1461072a578063e724529c1461073f578063ece5be8614610765578063f4b489e71461077a578063f66bf2291461079b575b600080fd5b3480156101c757600080fd5b506101d06107b0565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561020a5781810151838201526020016101f2565b50505050905090810190601f1680156102375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561025157600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261029e94369492936024939284019190819084018382808284375094975061083e9650505050505050565b005b3480156102ac57600080fd5b506102b561092a565b60408051918252519081900360200190f35b3480156102d357600080fd5b5061029e600160a060020a0360043516610930565b3480156102f457600080fd5b506102b5610c38565b34801561030957600080fd5b50610312610c5d565b604080519115158252519081900360200190f35b34801561033257600080fd5b5061029e60043515156024351515610c73565b34801561035157600080fd5b506102b5610ce6565b34801561036657600080fd5b5061036f610cfd565b6040805160ff9092168252519081900360200190f35b34801561039157600080fd5b5061029e600160a060020a0360043516610d02565b3480156103b257600080fd5b506102b5610eba565b3480156103c757600080fd5b5061029e600435610ed4565b3480156103df57600080fd5b5061029e610f29565b6040805160206004803580820135601f810184900484028501840190955284845261029e943694929360249392840191908190840183828082843750949750610f349650505050505050565b34801561044057600080fd5b5061029e600435602435611086565b34801561045b57600080fd5b5061029e600160a060020a0360043581169060243581169060443516611185565b34801561048857600080fd5b506102b5600160a060020a0360043516611221565b3480156104a957600080fd5b5061029e600160a060020a0360043516611233565b3480156104ca57600080fd5b5061029e6112b2565b3480156104df57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261029e9583359536956044949193909101919081908401838280828437509497506112bb9650505050505050565b34801561053d57600080fd5b506101d0611384565b34801561055257600080fd5b506103126113de565b6040805160206004803580820135601f810184900484028501840190955284845261029e9436949293602493928401919081908401838280828437509497506113ef9650505050505050565b3480156105b357600080fd5b50610312600160a060020a036004351660243561149d565b3480156105d757600080fd5b506102b561156a565b3480156105ec57600080fd5b506102b5611570565b34801561060157600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261029e9436949293602493928401919081908401838280828437509497506115839650505050505050565b34801561065a57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261029e948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506116569650505050505050565b3480156106c357600080fd5b506102b56116bf565b3480156106d857600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261029e9583359536956044949193909101919081908401838280828437509497506117389650505050505050565b34801561073657600080fd5b506102b5611854565b34801561074b57600080fd5b5061029e600160a060020a0360043516602435151561185a565b34801561077157600080fd5b506102b56118fe565b34801561078657600080fd5b50610312600160a060020a036004351661190c565b3480156107a757600080fd5b506102b5611921565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108365780601f1061080b57610100808354040283529160200191610836565b820191906000526020600020905b81548152906001019060200180831161081957829003601f168201915b505050505081565b600554600160a060020a0316331461088e576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020612152833981519152604482015290519081900360640190fd5b7f9328e51774c9ccc9bf9f6c2fffbf4ac2752b584aa63775a8317772016029a90e816040518080602001828103825283818151815260200191508051906020019080838360005b838110156108ed5781810151838201526020016108d5565b50505050905090810190601f16801561091a5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b60025481565b6005546000908290600160a060020a0316331480610956575033600160a060020a038216145b15156109d2576040805160e560020a62461bcd02815260206004820152602c60248201527f436f6e7472616374206d616e61676572206f722077616c6c6574206f776e657260448201527f2069732072657175697265640000000000000000000000000000000000000000606482015290519081900360840190fd5b6109da6113de565b1515610a30576040805160e560020a62461bcd02815260206004820152601d60248201527f4e65772076657273696f6e206e6f742079657420617661696c61626c65000000604482015290519081900360640190fd5b600f54604080517ff4b489e7000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301529151919092169350839163f4b489e79160248083019260209291908290030181600087803b158015610a9b57600080fd5b505af1158015610aaf573d6000803e3d6000fd5b505050506040513d6020811015610ac557600080fd5b505115610b42576040805160e560020a62461bcd02815260206004820152602260248201527f596f7572206163636f756e7420616c7265616479206265656e2075706772616460448201527f6564000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b81600160a060020a03166337cc1828846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a03168152602001915050600060405180830381600087803b158015610bb657600080fd5b505af1158015610bca573d6000803e3d6000fd5b50505050610c33836003600086600160a060020a0316600160a060020a03168152602001908152602001600020546040805190810160405280601881526020017f557067726164696e6720746f206e65772076657273696f6e0000000000000000815250611927565b505050565b600080610c43610ce6565b9050610c57670de0b6b3a764000082611a06565b91505090565b3360009081526007602052604090205460ff1690565b600554600160a060020a03163314610cc3576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020612152833981519152604482015290519081900360640190fd5b600b805460ff19169215159290921761ff00191661010091151591909102179055565b6000610cf8610cf36116bf565b611a8f565b905090565b601281565b6005546000908190600160a060020a03163314610d57576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020612152833981519152604482015290519081900360640190fd5b600160a060020a03831660009081526010602052604090205460ff1615610dc8576040805160e560020a62461bcd02815260206004820152601d60248201527f4163636f756e7420616c7265616479206265656e207570677261646564000000604482015290519081900360640190fd5b600160a060020a038084166000818152601060209081526040808320805460ff19166001179055600e5481517f70a08231000000000000000000000000000000000000000000000000000000008152600481019590955290519416955085936370a0823193602480820194918390030190829087803b158015610e4a57600080fd5b505af1158015610e5e573d6000803e3d6000fd5b505050506040513d6020811015610e7457600080fd5b505160408051808201909152601d81527f557067726164652066726f6d2070726576696f75732076657273696f6e0000006020820152909150610c339084908390611aa3565b600080610ec56118fe565b60030290508060640191505090565b600554600160a060020a03163314610f24576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020612152833981519152604482015290519081900360640190fd5b600d55565b610f3233610d02565b565b600b5460009060ff161515610f93576040805160e560020a62461bcd02815260206004820152601660248201527f4275792063757272656e746c792064697361626c656400000000000000000000604482015290519081900360640190fd5b3360008181526007602052604090205460ff1615610fe9576040805160e560020a62461bcd0281526020600482015260116024820152600080516020612172833981519152604482015290519081900360640190fd5b610ff234611b3a565b600d549092508211611074576040805160e560020a62461bcd02815260206004820152602760248201527f596f752063616e7420627579206c6573736572207468616e206d696e2055534460448201527f20616d6f756e7400000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b610c3334611080610ce6565b85611b48565b600554600160a060020a031633146110d6576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020612152833981519152604482015290519081900360640190fd5b6000821180156110e65750600081115b151561113c576040805160e560020a62461bcd02815260206004820152601860248201527f436f6566696369656e74732063616e74206265207a65726f0000000000000000604482015290519081900360640190fd5b60088290556009819055604080518381526020810183905281517f281f4878f86e8af1441e8a46472e5e2c6e4491c18907e5a29f75a52421217409929181900390910190a15050565b600454600160a060020a031633146111d5576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020612192833981519152604482015290519081900360640190fd5b60048054600160a060020a0394851673ffffffffffffffffffffffffffffffffffffffff1991821617909155600580549385169382169390931790925560068054919093169116179055565b60036020526000908152604090205481565b600454600160a060020a03163314611283576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020612192833981519152604482015290519081900360640190fd5b600f805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b610f3233610930565b600b54610100900460ff16151561131c576040805160e560020a62461bcd02815260206004820152601760248201527f53656c6c2063757272656e746c792064697361626c6564000000000000000000604482015290519081900360640190fd5b3360008181526007602052604090205460ff1615611372576040805160e560020a62461bcd0281526020600482015260116024820152600080516020612172833981519152604482015290519081900360640190fd5b610c338361137e610ce6565b84611c87565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108365780601f1061080b57610100808354040283529160200191610836565b600f54600160a060020a0316151590565b33600160a060020a03167f643e927b32d5bfd08eccd2fcbd97057ad413850f857a2359639114e8e8dd3d7b34836040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561145f578181015183820152602001611447565b50505050905090810190601f16801561148c5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a250565b3360008181526007602052604081205490919060ff16156114f6576040805160e560020a62461bcd0281526020600482015260116024820152600080516020612172833981519152604482015290519081900360640190fd5b600160a060020a038416600090815260076020526040902054849060ff1615611557576040805160e560020a62461bcd0281526020600482015260116024820152600080516020612172833981519152604482015290519081900360640190fd5b6115618585611d9e565b95945050505050565b60095481565b3360009081526003602052604090205490565b600454600160a060020a031633146115d3576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020612192833981519152604482015290519081900360640190fd5b600454600160a060020a0316ff5b602083106116005780518252601f1990920191602091820191016115e1565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093507f3ffc78143aab5b8bf6b1e09250b7c95c9adb4ebdd701bc60fe29235c6f0db50392506000919050a250565b600454600160a060020a031633146116a6576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020612192833981519152604482015290519081900360640190fd5b670de0b6b3a76400009190910290610c33838383611aa3565b600c546000906116ce81611db4565b90506116d981611dc2565b905060008111611733576040805160e560020a62461bcd02815260206004820152601660248201527f5553442070726963652063616e74206265207a65726f00000000000000000000604482015290519081900360640190fd5b919050565b600454600160a060020a03163314611788576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020612192833981519152604482015290519081900360640190fd5b60065461179e90600160a060020a031683611df6565b6006546040805184815260208082018381528551938301939093528451600160a060020a03909416937f485f1bb6524c663555797e00171a10f341656e59b02d6b557a0a38ba7d5d975193879387939092606084019185019080838360005b838110156118155781810151838201526020016117fd565b50505050905090810190601f1680156118425780820380516001836020036101000a031916815260200191505b50935050505060405180910390a25050565b60085481565b600554600160a060020a031633146118aa576040805160e560020a62461bcd02815260206004820152601c6024820152600080516020612152833981519152604482015290519081900360640190fd5b600160a060020a038216600081815260076020526040808220805460ff191685151590811790915590519092917f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a591a35050565b6000610cf8600a5442611e41565b60106020526000908152604090205460ff1681565b600d5481565b611932333084611e53565b3060009081526003602090815260408083208054869003905560028054869003905580518581528083018281528551928201929092528451600160a060020a038816947f47e772fda56eb54ab211642ce5421882c49fc2b7033455982af14588ae4207ff94889488949390926060850192860191908190849084905b838110156119c65781810151838201526020016119ae565b50505050905090810190601f1680156119f35780820380516001836020036101000a031916815260200191505b50935050505060405180910390a2505050565b600080808311611a60576040805160e560020a62461bcd02815260206004820152601760248201527f43616e7420646564756365207a65726f206368616e6765000000000000000000604482015290519081900360640190fd5b826ec097ce7bc90715b34b9f1000000000811515611a7a57fe5b049050611a878482611fa1565b949350505050565b6000611a9d82600954611a06565b92915050565b3060008181526003602052604090208054840190556002805484019055611acb908484611e53565b82600160a060020a03167f85a66b9141978db9980f7e0ce3b468cebf4f7999f32b23091c5c03e798b1ba7a8383604051808381526020018060200182810382528381815181526020019150805190602001908083836000838110156119c65781810151838201526020016119ae565b6000611a9d82600954611fa1565b6000808411611ba1576040805160e560020a62461bcd02815260206004820152601960248201527f457468657220616d6f756e742063616e74206265207a65726f00000000000000604482015290519081900360640190fd5b611bab8484611fb4565b9050611bb8303383611e53565b600654611bce90600160a060020a031685611df6565b33600160a060020a03167f149b84f345a2529777fc0c790a7d9767c1069d6621069d801ec05488e8779dbd8285856040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611c45578181015183820152602001611c2d565b50505050905090810190601f168015611c725780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a250505050565b6000611c93848461208d565b905060008111611d13576040805160e560020a62461bcd02815260206004820152603260248201527f457468657220616d6f756e7420616674657220636f6e76657274206265636f6d60448201527f65207a65726f202d20726576657274696e670000000000000000000000000000606482015290519081900360840190fd5b611d1e333086611e53565b611d283385611df6565b33600160a060020a03167fe277b208662ca07e3fb98c44e06ee31ba18ba82768e31cdbfc20dd489564b00b85858560405180848152602001838152602001806020018281038252838181518152602001915080519060200190808383600083811015611c45578181015183820152602001611c2d565b6000611dab338484611e53565b50600192915050565b6000611a9d82600854611fa1565b6000806064611dcf610eba565b670de0b6b3a764000002811515611de257fe5b049050611def8382611fa1565b9392505050565b308031821115611e0557600080fd5b604051600160a060020a0384169083156108fc029084906000818181858888f19350505050158015611e3b573d6000803e3d6000fd5b50505050565b6000620151808383035b049392505050565b600160a060020a038316600090815260036020526040902054811115611ec3576040805160e560020a62461bcd02815260206004820152601060248201527f4e6f7420656e6f7567682066756e647300000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a0382166000908152600360205260409020548181011015611f35576040805160e560020a62461bcd02815260206004820152601f60248201527f4275666665724f766572666c6f77206f6e207265636569766572207369646500604482015290519081900360640190fd5b600160a060020a03808416600081815260036020908152604080832080548790039055938616808352918490208054860190558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3505050565b6000670de0b6b3a7640000838302611e4b565b60008080831161200e576040805160e560020a62461bcd02815260206004820152601660248201527f4275792070726963652063616e74206265207a65726f00000000000000000000604482015290519081900360640190fd5b670de0b6b3a76400008402841061206f576040805160e560020a62461bcd02815260206004820152600e60248201527f4275666665724f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b82670de0b6b3a7640000850281151561208457fe5b04949350505050565b6000808083116120e7576040805160e560020a62461bcd02815260206004820152601760248201527f53656c6c2070726963652063616e74206265207a65726f000000000000000000604482015290519081900360640190fd5b8284028410612140576040805160e560020a62461bcd02815260206004820152600e60248201527f4275666665724f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b670de0b6b3a76400008484026120845600436f6e7472616374206d616e61676572206973207265717569726564000000004163636f756e742069732066726f7a656e000000000000000000000000000000436f6e7472616374206f776e6572206973207265717569726564000000000000a165627a7a723058208a5350400f96725c17bda970fb4a4b30faa926170b5687bd76e39b2d22cc6263002900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000f000000000000000000000000000000000000000000000000000000005bf1fd000000000000000000000000000aab7417de4f1b8255c7bcef24ffe5ad0e0441f900000000000000000000000000000000000000000000000000000000000000154944454d76312e3120284c4953432e574f524c4429000000000000000000000000000000000000000000000000000000000000000000000000000000000000084944454d76312e31000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000f000000000000000000000000000000000000000000000000000000005bf1fd000000000000000000000000000aab7417de4f1b8255c7bcef24ffe5ad0e0441f900000000000000000000000000000000000000000000000000000000000000154944454d76312e3120284c4953432e574f524c4429000000000000000000000000000000000000000000000000000000000000000000000000000000000000084944454d76312e31000000000000000000000000000000000000000000000000"
}