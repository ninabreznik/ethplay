{
  "address": "0x800d894f49b636eff0290c7cd168cc8f9c52bebf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LBIG",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-24\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\ncontract SafeMath {\n    function safeMul(uint256 a, uint256 b) public pure  returns (uint256)  {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)public pure returns (uint256) {\n        assert(b > 0);\n        uint256 c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)public pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)public pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c>=a && c>=b);\n        return c;\n    }\n\n    function _assert(bool assertion)public pure {\n      assert(!assertion);\n    }\n}\n\n\ncontract ERC20Interface {\n    string public name;\n    string public symbol;\n    uint8 public  decimals;\n    uint public totalSupply;\n    \n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender)public view returns (uint256 remaining);\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n }\n \ncontract ERC20 is ERC20Interface,SafeMath {\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) allowed;\n\n    constructor(string memory _name) public {\n        name = _name;\n        symbol = \"LBIG\";\n        decimals = 4;\n        totalSupply = 963333000000;\n        balanceOf[msg.sender] = totalSupply;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0));\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[ _to] + _value >= balanceOf[ _to]);  \n\n        balanceOf[msg.sender] =SafeMath.safeSub(balanceOf[msg.sender],_value) ;\n        balanceOf[_to] =SafeMath.safeAdd(balanceOf[_to] ,_value);\n\n   \n        emit Transfer(msg.sender, _to, _value);\n \n        return true;\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0));\n        require(allowed[_from][msg.sender] >= _value);\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n\n        balanceOf[_from] =SafeMath.safeSub(balanceOf[_from],_value) ;\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to],_value);\n\n        allowed[_from][msg.sender] =SafeMath.safeSub(allowed[_from][msg.sender], _value);\n\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        require((_value==0)||(allowed[msg.sender][_spender]==0));\n        allowed[msg.sender][_spender] = _value;\n \n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n      \n        return allowed[_owner][_spender];\n    }\n\n}\n\n\ncontract owned {\n    address public owner;\n\n    constructor () public {\n        \n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        \n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnerShip(address newOwer) public onlyOwner {\n        \n        owner = newOwer;\n    }\n\n}\n\ncontract LBIG is ERC20,owned{\n    mapping (address => bool) public frozenAccount;\n\n    event FrozenFunds(address target, bool frozen);\n    event Burn(address target, uint amount);\n\n    constructor (string memory _name) ERC20(_name) public {\n\n    }\n\n\n    function freezeAccount(address target, bool freeze) public onlyOwner {\n        \n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        \n        success = _transfer(msg.sender, _to, _value);\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(allowed[_from][msg.sender] >= _value);\n        require(!frozenAccount[_from]);\n        \n        success =  _transfer(_from, _to, _value);\n        allowed[_from][msg.sender] =SafeMath.safeSub(allowed[_from][msg.sender],_value) ;\n    }\n\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool success) {\n        require(_to != address(0));\n        require(!frozenAccount[_from]);\n        require(!frozenAccount[_to]);\n\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[ _to] + _value >= balanceOf[ _to]);\n\n        balanceOf[_from] =SafeMath.safeSub(balanceOf[_from],_value) ;\n        balanceOf[_to] =SafeMath.safeAdd(balanceOf[_to],_value) ;\n\n        emit Transfer(_from, _to, _value);\n       return true;\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(owner == msg.sender);\n        require(balanceOf[msg.sender] >= _value);\n\n        totalSupply =SafeMath.safeSub(totalSupply,_value) ;\n        balanceOf[msg.sender] =SafeMath.safeSub(balanceOf[msg.sender],_value) ;\n\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value)  public returns (bool success) {\n        require(owner == msg.sender);\n        require(balanceOf[_from] >= _value);\n        require(allowed[_from][msg.sender] >= _value);\n\n        totalSupply =SafeMath.safeSub(totalSupply,_value) ;\n        balanceOf[msg.sender] =SafeMath.safeSub(balanceOf[msg.sender], _value);\n        allowed[_from][msg.sender] =SafeMath.safeSub(allowed[_from][msg.sender],_value);\n\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051610dca380380610dca8339810180604052602081101561003357600080fd5b81019080805164010000000081111561004b57600080fd5b8201602081018481111561005e57600080fd5b815164010000000081118282018710171561007857600080fd5b5050805190935083925061009491506000906020840190610121565b506040805180820190915260048082527f4c4249470000000000000000000000000000000000000000000000000000000060209092019182526100d991600191610121565b50506002805460ff1916600490811790915564e04b1f0b406003819055336000818152602093909352604090922055600680546001600160a01b0319169091179055506101bc565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061016257805160ff191683800117855561018f565b8280016001018555821561018f579182015b8281111561018f578251825591602001919060010190610174565b5061019b92915061019f565b5090565b6101b991905b8082111561019b57600081556001016101a5565b90565b610bff806101cb6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806395d89b41116100ad578063cdeda05511610071578063cdeda055146103b7578063d05c78da146103d6578063dd62ed3e146103f9578063e6cb901314610427578063e724529c1461044a5761012c565b806395d89b4114610317578063a293d1e81461031f578063a9059cbb14610342578063b414d4b61461036e578063b5931f7c146103945761012c565b806342966c68116100f457806342966c681461025c57806370a082311461027957806379cc67901461029f5780638863dd1a146102cb5780638da5cb5b146102f35761012c565b806306fdde0314610131578063095ea7b3146101ae57806318160ddd146101ee57806323b872dd14610208578063313ce5671461023e575b600080fd5b610139610478565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017357818101518382015260200161015b565b50505050905090810190601f1680156101a05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101da600480360360408110156101c457600080fd5b506001600160a01b038135169060200135610506565b604080519115158252519081900360200190f35b6101f66105a6565b60408051918252519081900360200190f35b6101da6004803603606081101561021e57600080fd5b506001600160a01b038135811691602081013590911690604001356105ac565b61024661066d565b6040805160ff9092168252519081900360200190f35b6101da6004803603602081101561027257600080fd5b5035610676565b6101f66004803603602081101561028f57600080fd5b50356001600160a01b031661072c565b6101da600480360360408110156102b557600080fd5b506001600160a01b03813516906020013561073e565b6102f1600480360360208110156102e157600080fd5b50356001600160a01b031661087c565b005b6102fb6108b5565b604080516001600160a01b039092168252519081900360200190f35b6101396108c4565b6101f66004803603604081101561033557600080fd5b508035906020013561091e565b6101da6004803603604081101561035857600080fd5b506001600160a01b038135169060200135610930565b6101da6004803603602081101561038457600080fd5b50356001600160a01b0316610944565b6101f6600480360360408110156103aa57600080fd5b5080359060200135610959565b6102f1600480360360208110156103cd57600080fd5b50351515610988565b6101f6600480360360408110156103ec57600080fd5b5080359060200135610993565b6101f66004803603604081101561040f57600080fd5b506001600160a01b03813581169160200135166109b3565b6101f66004803603604081101561043d57600080fd5b50803590602001356109de565b6102f16004803603604081101561046057600080fd5b506001600160a01b03813516906020013515156109f8565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104fe5780601f106104d3576101008083540402835291602001916104fe565b820191906000526020600020905b8154815290600101906020018083116104e157829003601f168201915b505050505081565b600081158061053657503360009081526005602090815260408083206001600160a01b0387168452909152902054155b61053f57600080fd5b3360008181526005602090815260408083206001600160a01b03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60035481565b6001600160a01b03831660009081526005602090815260408083203384529091528120548211156105dc57600080fd5b6001600160a01b03841660009081526007602052604090205460ff161561060257600080fd5b61060d848484610a73565b6001600160a01b038516600090815260056020908152604080832033845290915290205490915061063e908361091e565b6001600160a01b0390941660009081526005602090815260408083203384529091529020939093555090919050565b60025460ff1681565b6006546000906001600160a01b0316331461069057600080fd5b336000908152600460205260409020548211156106ac57600080fd5b6106b86003548361091e565b600355336000908152600460205260409020546106d5908361091e565b3360008181526004602090815260409182902093909355805191825291810184905281517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5929181900390910190a1506001919050565b60046020526000908152604090205481565b6006546000906001600160a01b0316331461075857600080fd5b6001600160a01b03831660009081526004602052604090205482111561077d57600080fd5b6001600160a01b03831660009081526005602090815260408083203384529091529020548211156107ad57600080fd5b6107b96003548361091e565b600355336000908152600460205260409020546107d6908361091e565b336000818152600460209081526040808320949094556001600160a01b038716825260058152838220928252919091522054610812908361091e565b6001600160a01b03841660009081526005602090815260408083203380855290835292819020939093558251918252810184905281517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5929181900390910190a150600192915050565b6006546001600160a01b0316331461089357600080fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b031681565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104fe5780601f106104d3576101008083540402835291602001916104fe565b60008282111561092a57fe5b50900390565b600061093d338484610a73565b9392505050565b60076020526000908152604090205460ff1681565b600080821161096457fe5b600082848161096f57fe5b04905082848161097b57fe5b0681840201841461093d57fe5b801561099057fe5b50565b60008282028315806109ad5750828482816109aa57fe5b04145b61093d57fe5b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b60008282018381108015906109ad57508281101561093d57fe5b6006546001600160a01b03163314610a0f57600080fd5b6001600160a01b038216600081815260076020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b60006001600160a01b038316610a8857600080fd5b6001600160a01b03841660009081526007602052604090205460ff1615610aae57600080fd5b6001600160a01b03831660009081526007602052604090205460ff1615610ad457600080fd5b6001600160a01b038416600090815260046020526040902054821115610af957600080fd5b6001600160a01b0383166000908152600460205260409020548281011015610b2057600080fd5b6001600160a01b038416600090815260046020526040902054610b43908361091e565b6001600160a01b038086166000908152600460205260408082209390935590851681522054610b7290836109de565b6001600160a01b0380851660008181526004602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3506001939250505056fea165627a7a72305820a80e5fc557f4ca2c96a956c85521a26a3f3f210466eb189b4885e9e53b6ab46a00290000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000d4c4946452042494720424f4f4d00000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000d4c4946452042494720424f4f4d00000000000000000000000000000000000000"
}