{
  "address": "0xed6849727f7b158a14a492bd0a3bf4d7126f7f71",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TIMETokenFundraiser",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-11\n*/\n\npragma solidity ^0.4.22;\n\n// File: contracts/library/SafeMath.sol\n\n/**\n * @title Safe Math\n *\n * @dev Library for safe mathematical operations.\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function minus(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n\n        return a - b;\n    }\n\n    function plus(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n\n        return c;\n    }\n}\n\n// File: contracts/token/ERC20Token.sol\n\n/**\n * @dev The standard ERC20 Token contract base.\n */\ncontract ERC20Token {\n    uint256 public totalSupply;  /* shorthand for public function and a property */\n    \n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n// File: contracts/component/TokenSafe.sol\n\n/**\n * @title TokenSafe\n *\n * @dev Abstract contract that serves as a base for the token safes. It is a multi-group token safe, where each group\n *      has it's own release time and multiple accounts with locked tokens.\n */\ncontract TokenSafe {\n    using SafeMath for uint;\n\n    // The ERC20 token contract.\n    ERC20Token token;\n\n    struct Group {\n        // The release date for the locked tokens\n        // Note: Unix timestamp fits in uint32, however block.timestamp is uint256\n        uint256 releaseTimestamp;\n        // The total remaining tokens in the group.\n        uint256 remaining;\n        // The individual account token balances in the group.\n        mapping (address => uint) balances;\n    }\n\n    // The groups of locked tokens\n    mapping (uint8 => Group) public groups;\n\n    /**\n     * @dev The constructor.\n     *\n     * @param _token The address of the Fabric Token (fundraiser) contract.\n     */\n    constructor(address _token) public {\n        token = ERC20Token(_token);\n    }\n\n    /**\n     * @dev The function initializes a group with a release date.\n     *\n     * @param _id Group identifying number.\n     * @param _releaseTimestamp Unix timestamp of the time after which the tokens can be released\n     */\n    function init(uint8 _id, uint _releaseTimestamp) internal {\n        require(_releaseTimestamp > 0, \"TokenSafe group release timestamp is not set\");\n        \n        Group storage group = groups[_id];\n        group.releaseTimestamp = _releaseTimestamp;\n    }\n\n    /**\n     * @dev Add new account with locked token balance to the specified group id.\n     *\n     * @param _id Group identifying number.\n     * @param _account The address of the account to be added.\n     * @param _balance The number of tokens to be locked.\n     */\n    function add(uint8 _id, address _account, uint _balance) internal {\n        Group storage group = groups[_id];\n        group.balances[_account] = group.balances[_account].plus(_balance);\n        group.remaining = group.remaining.plus(_balance);\n    }\n\n    /**\n     * @dev Allows an account to be released if it meets the time constraints of the group.\n     *\n     * @param _id Group identifying number.\n     * @param _account The address of the account to be released.\n     */\n    function release(uint8 _id, address _account) public {\n        Group storage group = groups[_id];\n        require(now >= group.releaseTimestamp, \"Group funds are not released yet\");\n        \n        uint tokens = group.balances[_account];\n        require(tokens > 0, \"The account is empty or non-existent\");\n        \n        group.balances[_account] = 0;\n        group.remaining = group.remaining.minus(tokens);\n        \n        if (!token.transfer(_account, tokens)) {\n            revert(\"Token transfer failed\");\n        }\n    }\n}\n\n// File: contracts/token/StandardToken.sol\n\n/**\n * @title Standard Token\n *\n * @dev The standard abstract implementation of the ERC20 interface.\n */\ncontract StandardToken is ERC20Token {\n    using SafeMath for uint256;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    /**\n     * @dev The constructor assigns the token name, symbols and decimals.\n     */\n    constructor(string _name, string _symbol, uint8 _decimals) internal {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    /**\n     * @dev Get the balance of an address.\n     *\n     * @param _address The address which's balance will be checked.\n     *\n     * @return The current balance of the address.\n     */\n    function balanceOf(address _address) public view returns (uint256 balance) {\n        return balances[_address];\n    }\n\n    /**\n     * @dev Checks the amount of tokens that an owner allowed to a spender.\n     *\n     * @param _owner The address which owns the funds allowed for spending by a third-party.\n     * @param _spender The third-party address that is allowed to spend the tokens.\n     *\n     * @return The number of tokens available to `_spender` to be spent.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Give permission to `_spender` to spend `_value` number of tokens on your behalf.\n     * E.g. You place a buy or sell order on an exchange and in that example, the \n     * `_spender` address is the address of the contract the exchange created to add your token to their \n     * website and you are `msg.sender`.\n     *\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     *\n     * @return Whether the approval process was successful or not.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n\n    /**\n     * @dev Transfers `_value` number of tokens to the `_to` address.\n     *\n     * @param _to The address of the recipient.\n     * @param _value The number of tokens to be transferred.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        executeTransfer(msg.sender, _to, _value);\n\n        return true;\n    }\n\n    /**\n     * @dev Allows another contract to spend tokens on behalf of the `_from` address and send them to the `_to` address.\n     *\n     * @param _from The address which approved you to spend tokens on their behalf.\n     * @param _to The address where you want to send tokens.\n     * @param _value The number of tokens to be sent.\n     *\n     * @return Whether the transfer was successful or not.\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_value <= allowed[_from][msg.sender], \"Insufficient allowance\");\n\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].minus(_value);\n        executeTransfer(_from, _to, _value);\n\n        return true;\n    }\n\n    /**\n     * @dev Internal function that this reused by the transfer functions\n     */\n    function executeTransfer(address _from, address _to, uint256 _value) internal {\n        require(_to != address(0), \"Invalid transfer to address zero\");\n        require(_value <= balances[_from], \"Insufficient account balance\");\n\n        balances[_from] = balances[_from].minus(_value);\n        balances[_to] = balances[_to].plus(_value);\n\n        emit Transfer(_from, _to, _value);\n    }\n}\n\n// File: contracts/token/MintableToken.sol\n\n/**\n * @title Mintable Token\n *\n * @dev Allows the creation of new tokens.\n */\ncontract MintableToken is StandardToken {\n    /// @dev The only address allowed to mint coins\n    address public minter;\n\n    /// @dev Indicates whether the token is still mintable.\n    bool public mintingDisabled = false;\n\n    /**\n     * @dev Event fired when minting is no longer allowed.\n     */\n    event MintingDisabled();\n\n    /**\n     * @dev Allows a function to be executed only if minting is still allowed.\n     */\n    modifier canMint() {\n        require(!mintingDisabled, \"Minting is disabled\");\n        _;\n    }\n\n    /**\n     * @dev Allows a function to be called only by the minter\n     */\n    modifier onlyMinter() {\n        require(msg.sender == minter, \"Only the minter address can mint\");\n        _;\n    }\n\n    /**\n     * @dev The constructor assigns the minter which is allowed to mind and disable minting\n     */\n    constructor(address _minter) internal {\n        minter = _minter;\n    }\n\n    /**\n    * @dev Creates new `_value` number of tokens and sends them to the `_to` address.\n    *\n    * @param _to The address which will receive the freshly minted tokens.\n    * @param _value The number of tokens that will be created.\n    */\n    function mint(address _to, uint256 _value) public onlyMinter canMint {\n        totalSupply = totalSupply.plus(_value);\n        balances[_to] = balances[_to].plus(_value);\n\n        emit Transfer(0x0, _to, _value);\n    }\n\n    /**\n    * @dev Disable the minting of new tokens. Cannot be reversed.\n    *\n    * @return Whether or not the process was successful.\n    */\n    function disableMinting() public onlyMinter canMint {\n        mintingDisabled = true;\n       \n        emit MintingDisabled();\n    }\n}\n\n// File: contracts/trait/HasOwner.sol\n\n/**\n * @title HasOwner\n *\n * @dev Allows for exclusive access to certain functionality.\n */\ncontract HasOwner {\n    // The current owner.\n    address public owner;\n\n    // Conditionally the new owner.\n    address public newOwner;\n\n    /**\n     * @dev The constructor.\n     *\n     * @param _owner The address of the owner.\n     */\n    constructor(address _owner) public {\n        owner = _owner;\n    }\n\n    /** \n     * @dev Access control modifier that allows only the current owner to call the function.\n     */\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Only owner can call this function\");\n        _;\n    }\n\n    /**\n     * @dev The event is fired when the current owner is changed.\n     *\n     * @param _oldOwner The address of the previous owner.\n     * @param _newOwner The address of the new owner.\n     */\n    event OwnershipTransfer(address indexed _oldOwner, address indexed _newOwner);\n\n    /**\n     * @dev Transfering the ownership is a two-step process, as we prepare\n     * for the transfer by setting `newOwner` and requiring `newOwner` to accept\n     * the transfer. This prevents accidental lock-out if something goes wrong\n     * when passing the `newOwner` address.\n     *\n     * @param _newOwner The address of the proposed new owner.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n \n    /**\n     * @dev The `newOwner` finishes the ownership transfer process by accepting the\n     * ownership.\n     */\n    function acceptOwnership() public {\n        require(msg.sender == newOwner, \"Only the newOwner can accept ownership\");\n\n        emit OwnershipTransfer(owner, newOwner);\n\n        owner = newOwner;\n    }\n}\n\n// File: contracts/fundraiser/AbstractFundraiser.sol\n\ncontract AbstractFundraiser {\n    /// The ERC20 token contract.\n    ERC20Token public token;\n\n    /**\n     * @dev The event fires every time a new buyer enters the fundraiser.\n     *\n     * @param _address The address of the buyer.\n     * @param _ethers The number of ethers funded.\n     * @param _tokens The number of tokens purchased.\n     */\n    event FundsReceived(address indexed _address, uint _ethers, uint _tokens);\n\n\n    /**\n     * @dev The initialization method for the token\n     *\n     * @param _token The address of the token of the fundraiser\n     */\n    function initializeFundraiserToken(address _token) internal\n    {\n        token = ERC20Token(_token);\n    }\n\n    /**\n     * @dev The default function which is executed when someone sends funds to this contract address.\n     */\n    function() public payable {\n        receiveFunds(msg.sender, msg.value);\n    }\n\n    /**\n     * @dev this overridable function returns the current conversion rate for the fundraiser\n     */\n    function getConversionRate() public view returns (uint256);\n\n    /**\n     * @dev checks whether the fundraiser passed `endTime`.\n     *\n     * @return whether the fundraiser has ended.\n     */\n    function hasEnded() public view returns (bool);\n\n    /**\n     * @dev Create and sends tokens to `_address` considering amount funded and `conversionRate`.\n     *\n     * @param _address The address of the receiver of tokens.\n     * @param _amount The amount of received funds in ether.\n     */\n    function receiveFunds(address _address, uint256 _amount) internal;\n    \n    /**\n     * @dev It throws an exception if the transaction does not meet the preconditions.\n     */\n    function validateTransaction() internal view;\n    \n    /**\n     * @dev this overridable function makes and handles tokens to buyers\n     */\n    function handleTokens(address _address, uint256 _tokens) internal;\n\n    /**\n     * @dev this overridable function forwards the funds (if necessary) to a vault or directly to the beneficiary\n     */\n    function handleFunds(address _address, uint256 _ethers) internal;\n\n}\n\n// File: contracts/fundraiser/BasicFundraiser.sol\n\n/**\n * @title Basic Fundraiser\n *\n * @dev An abstract contract that is a base for fundraisers. \n * It implements a generic procedure for handling received funds:\n * 1. Validates the transaction preconditions\n * 2. Calculates the amount of tokens based on the conversion rate.\n * 3. Delegate the handling of the tokens (mint, transfer or create)\n * 4. Delegate the handling of the funds\n * 5. Emit event for received funds\n */\ncontract BasicFundraiser is HasOwner, AbstractFundraiser {\n    using SafeMath for uint256;\n\n    // The number of decimals for the token.\n    uint8 constant DECIMALS = 18;  // Enforced\n\n    // Decimal factor for multiplication purposes.\n    uint256 constant DECIMALS_FACTOR = 10 ** uint256(DECIMALS);\n\n    // The start time of the fundraiser - Unix timestamp.\n    uint256 public startTime;\n\n    // The end time of the fundraiser - Unix timestamp.\n    uint256 public endTime;\n\n    // The address where funds collected will be sent.\n    address public beneficiary;\n\n    // The conversion rate with decimals difference adjustment,\n    // When converion rate is lower than 1 (inversed), the function calculateTokens() should use division\n    uint256 public conversionRate;\n\n    // The total amount of ether raised.\n    uint256 public totalRaised;\n\n    /**\n     * @dev The event fires when the number of token conversion rate has changed.\n     *\n     * @param _conversionRate The new number of tokens per 1 ether.\n     */\n    event ConversionRateChanged(uint _conversionRate);\n\n    /**\n     * @dev The basic fundraiser initialization method.\n     *\n     * @param _startTime The start time of the fundraiser - Unix timestamp.\n     * @param _endTime The end time of the fundraiser - Unix timestamp.\n     * @param _conversionRate The number of tokens create for 1 ETH funded.\n     * @param _beneficiary The address which will receive the funds gathered by the fundraiser.\n     */\n    function initializeBasicFundraiser(\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _conversionRate,\n        address _beneficiary\n    )\n        internal\n    {\n        require(_endTime >= _startTime, \"Fundraiser's end is before its start\");\n        require(_conversionRate > 0, \"Conversion rate is not set\");\n        require(_beneficiary != address(0), \"The beneficiary is not set\");\n\n        startTime = _startTime;\n        endTime = _endTime;\n        conversionRate = _conversionRate;\n        beneficiary = _beneficiary;\n    }\n\n    /**\n     * @dev Sets the new conversion rate\n     *\n     * @param _conversionRate New conversion rate\n     */\n    function setConversionRate(uint256 _conversionRate) public onlyOwner {\n        require(_conversionRate > 0, \"Conversion rate is not set\");\n\n        conversionRate = _conversionRate;\n\n        emit ConversionRateChanged(_conversionRate);\n    }\n\n    /**\n     * @dev Sets The beneficiary of the fundraiser.\n     *\n     * @param _beneficiary The address of the beneficiary.\n     */\n    function setBeneficiary(address _beneficiary) public onlyOwner {\n        require(_beneficiary != address(0), \"The beneficiary is not set\");\n\n        beneficiary = _beneficiary;\n    }\n\n    /**\n     * @dev Create and sends tokens to `_address` considering amount funded and `conversionRate`.\n     *\n     * @param _address The address of the receiver of tokens.\n     * @param _amount The amount of received funds in ether.\n     */\n    function receiveFunds(address _address, uint256 _amount) internal {\n        validateTransaction();\n\n        uint256 tokens = calculateTokens(_amount);\n        require(tokens > 0, \"The transaction results in zero tokens\");\n\n        totalRaised = totalRaised.plus(_amount);\n        handleTokens(_address, tokens);\n        handleFunds(_address, _amount);\n\n        emit FundsReceived(_address, msg.value, tokens);\n    }\n\n    /**\n     * @dev this overridable function returns the current conversion rate multiplied by the conversion rate factor\n     */\n    function getConversionRate() public view returns (uint256) {\n        return conversionRate;\n    }\n\n    /**\n     * @dev this overridable function that calculates the tokens based on the ether amount\n     */\n    function calculateTokens(uint256 _amount) internal view returns(uint256 tokens) {\n        tokens = _amount.mul(getConversionRate());\n    }\n\n    /**\n     * @dev It throws an exception if the transaction does not meet the preconditions.\n     */\n    function validateTransaction() internal view {\n        require(msg.value != 0, \"Transaction value is zero\");\n        require(now >= startTime && now < endTime, \"The fundraiser is not active\");\n    }\n\n    /**\n     * @dev checks whether the fundraiser passed `endtime`.\n     *\n     * @return whether the fundraiser is passed its deadline or not.\n     */\n    function hasEnded() public view returns (bool) {\n        return now >= endTime;\n    }\n}\n\n// File: contracts/token/StandardMintableToken.sol\n\ncontract StandardMintableToken is MintableToken {\n    constructor(address _minter, string _name, string _symbol, uint8 _decimals)\n        StandardToken(_name, _symbol, _decimals)\n        MintableToken(_minter)\n        public\n    {\n    }\n}\n\n// File: contracts/fundraiser/MintableTokenFundraiser.sol\n\n/**\n * @title Fundraiser With Mintable Token\n */\ncontract MintableTokenFundraiser is BasicFundraiser {\n    /**\n     * @dev The initialization method that creates a new mintable token.\n     *\n     * @param _name Token name\n     * @param _symbol Token symbol\n     * @param _decimals Token decimals\n     */\n    function initializeMintableTokenFundraiser(string _name, string _symbol, uint8 _decimals) internal {\n        token = new StandardMintableToken(\n            address(this), // The fundraiser is the token minter\n            _name,\n            _symbol,\n            _decimals\n        );\n    }\n\n    /**\n     * @dev Mint the specific amount tokens\n     */\n    function handleTokens(address _address, uint256 _tokens) internal {\n        MintableToken(token).mint(_address, _tokens);\n    }\n}\n\n// File: contracts/fundraiser/IndividualCapsFundraiser.sol\n\n/**\n * @title Fundraiser with individual caps\n *\n * @dev Allows you to set a hard cap on your fundraiser.\n */\ncontract IndividualCapsFundraiser is BasicFundraiser {\n    uint256 public individualMinCap;\n    uint256 public individualMaxCap;\n    uint256 public individualMaxCapTokens;\n\n\n    event IndividualMinCapChanged(uint256 _individualMinCap);\n    event IndividualMaxCapTokensChanged(uint256 _individualMaxCapTokens);\n\n    /**\n     * @dev The initialization method.\n     *\n     * @param _individualMinCap The minimum amount of ether contribution per address.\n     * @param _individualMaxCap The maximum amount of ether contribution per address.\n     */\n    function initializeIndividualCapsFundraiser(uint256 _individualMinCap, uint256 _individualMaxCap) internal {\n        individualMinCap = _individualMinCap;\n        individualMaxCap = _individualMaxCap;\n        individualMaxCapTokens = _individualMaxCap * conversionRate;\n    }\n\n    function setConversionRate(uint256 _conversionRate) public onlyOwner {\n        super.setConversionRate(_conversionRate);\n\n        if (individualMaxCap == 0) {\n            return;\n        }\n        \n        individualMaxCapTokens = individualMaxCap * _conversionRate;\n\n        emit IndividualMaxCapTokensChanged(individualMaxCapTokens);\n    }\n\n    function setIndividualMinCap(uint256 _individualMinCap) public onlyOwner {\n        individualMinCap = _individualMinCap;\n\n        emit IndividualMinCapChanged(individualMinCap);\n    }\n\n    function setIndividualMaxCap(uint256 _individualMaxCap) public onlyOwner {\n        individualMaxCap = _individualMaxCap;\n        individualMaxCapTokens = _individualMaxCap * conversionRate;\n\n        emit IndividualMaxCapTokensChanged(individualMaxCapTokens);\n    }\n\n    /**\n     * @dev Extends the transaction validation to check if the value is higher than the minimum cap.\n     */\n    function validateTransaction() internal view {\n        super.validateTransaction();\n        require(\n            msg.value >= individualMinCap,\n            \"The transaction value does not pass the minimum contribution cap\"\n        );\n    }\n\n    /**\n     * @dev We validate the new amount doesn't surpass maximum contribution cap\n     */\n    function handleTokens(address _address, uint256 _tokens) internal {\n        require(\n            individualMaxCapTokens == 0 || token.balanceOf(_address).plus(_tokens) <= individualMaxCapTokens,\n            \"The transaction exceeds the individual maximum cap\"\n        );\n\n        super.handleTokens(_address, _tokens);\n    }\n}\n\n// File: contracts/fundraiser/GasPriceLimitFundraiser.sol\n\n/**\n * @title GasPriceLimitFundraiser\n *\n * @dev This fundraiser allows to set gas price limit for the participants in the fundraiser\n */\ncontract GasPriceLimitFundraiser is HasOwner, BasicFundraiser {\n    uint256 public gasPriceLimit;\n\n    event GasPriceLimitChanged(uint256 gasPriceLimit);\n\n    /**\n     * @dev This function puts the initial gas limit\n     */\n    function initializeGasPriceLimitFundraiser(uint256 _gasPriceLimit) internal {\n        gasPriceLimit = _gasPriceLimit;\n    }\n\n    /**\n     * @dev This function allows the owner to change the gas limit any time during the fundraiser\n     */\n    function changeGasPriceLimit(uint256 _gasPriceLimit) public onlyOwner {\n        gasPriceLimit = _gasPriceLimit;\n\n        emit GasPriceLimitChanged(_gasPriceLimit);\n    }\n\n    /**\n     * @dev The transaction is valid if the gas price limit is lifted-off or the transaction meets the requirement\n     */\n    function validateTransaction() internal view {\n        require(gasPriceLimit == 0 || tx.gasprice <= gasPriceLimit, \"Transaction exceeds the gas price limit\");\n\n        return super.validateTransaction();\n    }\n}\n\n// File: contracts/fundraiser/ForwardFundsFundraiser.sol\n\n/**\n * @title Forward Funds to Beneficiary Fundraiser\n *\n * @dev This contract forwards the funds received to the beneficiary.\n */\ncontract ForwardFundsFundraiser is BasicFundraiser {\n    /**\n     * @dev Forward funds directly to beneficiary\n     */\n    function handleFunds(address, uint256 _ethers) internal {\n        // Forward the funds directly to the beneficiary\n        beneficiary.transfer(_ethers);\n    }\n}\n\n// File: contracts/fundraiser/PresaleFundraiser.sol\n\n/**\n * @title PresaleFundraiser\n *\n * @dev This is the standard fundraiser contract which allows\n * you to raise ETH in exchange for your tokens.\n */\ncontract PresaleFundraiser is MintableTokenFundraiser {\n    /// @dev The token hard cap for the pre-sale\n    uint256 public presaleSupply;\n\n    /// @dev The token hard cap for the pre-sale\n    uint256 public presaleMaxSupply;\n\n    /// @dev The start time of the pre-sale (Unix timestamp).\n    uint256 public presaleStartTime;\n\n    /// @dev The end time of the pre-sale (Unix timestamp).\n    uint256 public presaleEndTime;\n\n    /// @dev The conversion rate for the pre-sale\n    uint256 public presaleConversionRate;\n\n    /**\n     * @dev The initialization method.\n     *\n     * @param _startTime The timestamp of the moment when the pre-sale starts\n     * @param _endTime The timestamp of the moment when the pre-sale ends\n     * @param _conversionRate The conversion rate during the pre-sale\n     */\n    function initializePresaleFundraiser(\n        uint256 _presaleMaxSupply,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _conversionRate\n    )\n        internal\n    {\n        require(_endTime >= _startTime, \"Pre-sale's end is before its start\");\n        require(_conversionRate > 0, \"Conversion rate is not set\");\n\n        presaleMaxSupply = _presaleMaxSupply;\n        presaleStartTime = _startTime;\n        presaleEndTime = _endTime;\n        presaleConversionRate = _conversionRate;\n    }\n\n    /**\n     * @dev Internal funciton that helps to check if the pre-sale is active\n     */\n    \n    function isPresaleActive() internal view returns (bool) {\n        return now < presaleEndTime && now >= presaleStartTime;\n    }\n    /**\n     * @dev this function different conversion rate while in presale\n     */\n    function getConversionRate() public view returns (uint256) {\n        if (isPresaleActive()) {\n            return presaleConversionRate;\n        }\n        return super.getConversionRate();\n    }\n\n    /**\n     * @dev It throws an exception if the transaction does not meet the preconditions.\n     */\n    function validateTransaction() internal view {\n        require(msg.value != 0, \"Transaction value is zero\");\n        require(\n            now >= startTime && now < endTime || isPresaleActive(),\n            \"Neither the pre-sale nor the fundraiser are currently active\"\n        );\n    }\n\n    function handleTokens(address _address, uint256 _tokens) internal {\n        if (isPresaleActive()) {\n            presaleSupply = presaleSupply.plus(_tokens);\n            require(\n                presaleSupply <= presaleMaxSupply,\n                \"Transaction exceeds the pre-sale maximum token supply\"\n            );\n        }\n\n        super.handleTokens(_address, _tokens);\n    }\n\n}\n\n// File: contracts/fundraiser/TieredFundraiser.sol\n\n/**\n * @title TieredFundraiser\n *\n * @dev A fundraiser that improves the base conversion precision to allow percent bonuses\n */\n\ncontract TieredFundraiser is BasicFundraiser {\n    // Conversion rate factor for better precision.\n    uint256 constant CONVERSION_RATE_FACTOR = 100;\n\n    /**\n      * @dev Define conversion rates based on the tier start and end date\n      */\n    function getConversionRate() public view returns (uint256) {\n        return super.getConversionRate().mul(CONVERSION_RATE_FACTOR);\n    }\n\n    /**\n     * @dev this overridable function that calculates the tokens based on the ether amount\n     */\n    function calculateTokens(uint256 _amount) internal view returns(uint256 tokens) {\n        return super.calculateTokens(_amount).div(CONVERSION_RATE_FACTOR);\n    }\n\n    /**\n     * @dev this overridable function returns the current conversion rate factor\n     */\n    function getConversionRateFactor() public pure returns (uint256) {\n        return CONVERSION_RATE_FACTOR;\n    }\n}\n\n// File: contracts/Fundraiser.sol\n\n/**\n * @title TIMEToken\n */\n\ncontract TIMEToken is MintableToken {\n    constructor(address _minter)\n        StandardToken(\n            \"TIME\",   // Token name\n            \"TM\", // Token symbol\n            18  // Token decimals\n        )\n        \n        MintableToken(_minter)\n        public\n    {\n    }\n}\n\n\n\n/**\n * @title TIMETokenSafe\n */\n\ncontract TIMETokenSafe is TokenSafe {\n  constructor(address _token)\n    TokenSafe(_token)\n    public\n  {\n    \n    // Group \"Core Team Members Safe\"\n    init(\n      1, // Group Id\n      1555049100 // Release date = 2019-04-12 06:05 UTC\n    );\n    add(\n      1, // Group Id\n      0x892f34F709Dd7090e6E2BeC8220E88CbdF57ed7B,  // Token Safe Entry Address\n      4375000000000000000000000  // Allocated tokens\n    );\n  }\n}\n\n\n\n/**\n * @title TIMETokenFundraiser\n */\n\ncontract TIMETokenFundraiser is MintableTokenFundraiser, PresaleFundraiser, IndividualCapsFundraiser, ForwardFundsFundraiser, TieredFundraiser, GasPriceLimitFundraiser {\n    TIMETokenSafe public tokenSafe;\n\n    constructor()\n        HasOwner(msg.sender)\n        public\n    {\n        token = new TIMEToken(\n        \n        address(this)  // The fundraiser is the minter\n        );\n\n        tokenSafe = new TIMETokenSafe(token);\n        MintableToken(token).mint(address(tokenSafe), 4375000000000000000000000);\n\n        initializeBasicFundraiser(\n            1555048920, // Start date = 2019-04-12 06:02 UTC\n            1893391380,  // End date = 2029-12-31 06:03 UTC\n            1, // Conversion rate = 1 TM per 1 ether\n            0xaC4F9BE57419Aed5e71739Cd22a0cf2da4c90Fe4     // Beneficiary\n        );\n\n        initializeIndividualCapsFundraiser(\n            (0 ether), // Minimum contribution\n            (0 ether)  // Maximum individual cap\n        );\n\n        initializeGasPriceLimitFundraiser(\n            3000000000000000 // Gas price limit in wei\n        );\n\n        initializePresaleFundraiser(\n            12500000000000000000000000,\n            1555048800, // Start = 2019-04-12 06:00 UTC\n            1555048860,   // End = 2019-04-12 06:01 UTC\n            1\n        );\n\n        \n\n        \n\n        \n    }\n    \n    /**\n      * @dev Define conversion rates based on the tier start and end date\n      */\n    function getConversionRate() public view returns (uint256) {\n        uint256 rate = super.getConversionRate();\n        if (now >= 1555049040 && now < 1555049100)\n            return rate.mul(105).div(100);\n        \n\n        return rate;\n    }\n\n    /**\n      * @dev Fundraiser with mintable token allows the owner to mint through the Fundraiser contract\n      */\n    function mint(address _to, uint256 _value) public onlyOwner {\n        MintableToken(token).mint(_to, _value);\n    }\n\n    /**\n      * @dev Irreversibly disable minting\n      */\n    function disableMinting() public onlyOwner {\n        MintableToken(token).disableMinting();\n    }\n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"presaleMaxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSafe\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"individualMaxCapTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleConversionRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_individualMaxCap\",\"type\":\"uint256\"}],\"name\":\"setIndividualMaxCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPriceLimit\",\"type\":\"uint256\"}],\"name\":\"changeGasPriceLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conversionRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasPriceLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getConversionRateFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"individualMinCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_conversionRate\",\"type\":\"uint256\"}],\"name\":\"setConversionRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_individualMinCap\",\"type\":\"uint256\"}],\"name\":\"setIndividualMinCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getConversionRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"individualMaxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gasPriceLimit\",\"type\":\"uint256\"}],\"name\":\"GasPriceLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_individualMinCap\",\"type\":\"uint256\"}],\"name\":\"IndividualMinCapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_individualMaxCapTokens\",\"type\":\"uint256\"}],\"name\":\"IndividualMaxCapTokensChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_conversionRate\",\"type\":\"uint256\"}],\"name\":\"ConversionRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ethers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"FundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b5060008054600160a060020a03191633179055306200002f620004d8565b600160a060020a03909116815260405190819003602001906000f0801580156200005d573d6000803e3d6000fd5b5060028054600160a060020a031916600160a060020a0392831617908190551662000087620004e9565b600160a060020a03909116815260405190819003602001906000f080158015620000b5573d6000803e3d6000fd5b5060118054600160a060020a031916600160a060020a039283161790819055600254604080517f40c10f1900000000000000000000000000000000000000000000000000000000815292841660048401526a039e7139a8c08fa06000006024840152519216916340c10f199160448082019260009290919082900301818387803b1580156200014357600080fd5b505af115801562000158573d6000803e3d6000fd5b5050505062000196635cb029d86370dadc14600173ac4f9be57419aed5e71739cd22a0cf2da4c90fe4620001f8640100000000026401000000009004565b620001ac600080640100000000620003a5810204565b620001c7660aa87bee538000640100000000620003b9810204565b620001f26a0a56fa5b99019a5c800000635cb02960635cb0299c6001640100000000620003be810204565b620004fa565b838310156200028d57604080517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f46756e64726169736572277320656e64206973206265666f726520697473207360448201527f7461727400000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60008211620002fd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f436f6e76657273696f6e2072617465206973206e6f7420736574000000000000604482015290519081900360640190fd5b600160a060020a03811615156200037557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5468652062656e6566696369617279206973206e6f7420736574000000000000604482015290519081900360640190fd5b60039390935560049190915560065560058054600160a060020a031916600160a060020a03909216919091179055565b600d91909155600e81905560065402600f55565b601055565b828210156200045457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f5072652d73616c65277320656e64206973206265666f7265206974732073746160448201527f7274000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60008111620004c457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f436f6e76657273696f6e2072617465206973206e6f7420736574000000000000604482015290519081900360640190fd5b600993909355600a91909155600b55600c55565b604051610c00806200189c83390190565b6040516105ae806200249c83390190565b611392806200050a6000396000f30060806040526004361061017f5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166308fc299b811461018b5780631c31f710146101b25780631c4fda10146101d35780631fe00a1514610204578063249b7c19146102195780633197cbb61461022e57806338af3eed1461024357806340c10f1914610258578063514b13f21461027c5780636007c8361461029157806365c13fdb146102a957806378e97925146102c157806379ba5097146102d65780637e5cd5c1146102eb5780637ffdf53e146103005780638da5cb5b14610315578063961a929c1461032a578063a82524b21461033f578063b3a196e914610354578063c27b1ed914610369578063c5c4744c1461037e578063d1614df314610393578063d2e80494146103a8578063d4ee1d90146103c0578063daae717c146103d5578063ecb70fb7146103ed578063f2fde38b14610416578063f36089ec14610437578063f5a30cee1461044c578063fc0c546a14610461575b6101893334610476565b005b34801561019757600080fd5b506101a061057b565b60408051918252519081900360200190f35b3480156101be57600080fd5b50610189600160a060020a0360043516610581565b3480156101df57600080fd5b506101e861066d565b60408051600160a060020a039092168252519081900360200190f35b34801561021057600080fd5b506101a061067c565b34801561022557600080fd5b506101a0610682565b34801561023a57600080fd5b506101a0610688565b34801561024f57600080fd5b506101e861068e565b34801561026457600080fd5b50610189600160a060020a036004351660243561069d565b34801561028857600080fd5b506101a0610784565b34801561029d57600080fd5b5061018960043561078a565b3480156102b557600080fd5b5061018960043561082b565b3480156102cd57600080fd5b506101a06108c3565b3480156102e257600080fd5b506101896108c9565b3480156102f757600080fd5b506101896109bf565b34801561030c57600080fd5b506101a0610aa2565b34801561032157600080fd5b506101e8610aa8565b34801561033657600080fd5b506101a0610ab7565b34801561034b57600080fd5b506101a0610abd565b34801561036057600080fd5b506101a0610ac3565b34801561037557600080fd5b506101a0610ac9565b34801561038a57600080fd5b506101a0610acf565b34801561039f57600080fd5b506101a0610ad5565b3480156103b457600080fd5b50610189600435610adb565b3480156103cc57600080fd5b506101e8610b8f565b3480156103e157600080fd5b50610189600435610b9e565b3480156103f957600080fd5b50610402610c36565b604080519115158252519081900360200190f35b34801561042257600080fd5b50610189600160a060020a0360043516610c3f565b34801561044357600080fd5b506101a0610ccb565b34801561045857600080fd5b506101a0610d25565b34801561046d57600080fd5b506101e8610d2b565b6000610480610d3a565b61048982610dd1565b905060008111610509576040805160e560020a62461bcd02815260206004820152602660248201527f546865207472616e73616374696f6e20726573756c747320696e207a65726f2060448201527f746f6b656e730000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60075461051c908363ffffffff610de716565b6007556105298382610dfd565b6105338383610f3a565b60408051348152602081018390528151600160a060020a038616927f363f315f930a17d1266b86a20d6dd34b1cfbc5a9db9f13a65d06a689c3a2af8a928290030190a2505050565b60095481565b600054600160a060020a031633146105de576040805160e560020a62461bcd0281526020600482015260216024820152600080516020611347833981519152604482015260f960020a603702606482015290519081900360840190fd5b600160a060020a038116151561063e576040805160e560020a62461bcd02815260206004820152601a60248201527f5468652062656e6566696369617279206973206e6f7420736574000000000000604482015290519081900360640190fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b601154600160a060020a031681565b600f5481565b600b5481565b60045481565b600554600160a060020a031681565b600054600160a060020a031633146106fa576040805160e560020a62461bcd0281526020600482015260216024820152600080516020611347833981519152604482015260f960020a603702606482015290519081900360840190fd5b600254604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483015260248201859052915191909216916340c10f1991604480830192600092919082900301818387803b15801561076857600080fd5b505af115801561077c573d6000803e3d6000fd5b505050505050565b600c5481565b600054600160a060020a031633146107e7576040805160e560020a62461bcd0281526020600482015260216024820152600080516020611347833981519152604482015260f960020a603702606482015290519081900360840190fd5b600e8190556006548102600f81905560408051918252517f57abf0427b16049a4b4f5234cd901a0f14c02268a8cf9f578b65440d54382ddb9181900360200190a150565b600054600160a060020a03163314610888576040805160e560020a62461bcd0281526020600482015260216024820152600080516020611347833981519152604482015260f960020a603702606482015290519081900360840190fd5b60108190556040805182815290517f7eccbaf3b6433d499add1a7b8d2301ddca1ce7148e27e05e7c3a10321aba70199181900360200190a150565b60035481565b600154600160a060020a03163314610951576040805160e560020a62461bcd02815260206004820152602660248201527f4f6e6c7920746865206e65774f776e65722063616e20616363657074206f776e60448201527f6572736869700000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60015460008054604051600160a060020a0393841693909116917f22500af037c600dd7b720644ab6e358635085601d9ac508ad83eb2d6b2d729ca91a36001546000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055565b600054600160a060020a03163314610a1c576040805160e560020a62461bcd0281526020600482015260216024820152600080516020611347833981519152604482015260f960020a603702606482015290519081900360840190fd5b600260009054906101000a9004600160a060020a0316600160a060020a0316637e5cd5c16040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015610a8857600080fd5b505af1158015610a9c573d6000803e3d6000fd5b50505050565b60065481565b600054600160a060020a031681565b60105481565b600a5481565b60085481565b60645b90565b60075481565b600d5481565b600054600160a060020a03163314610b38576040805160e560020a62461bcd0281526020600482015260216024820152600080516020611347833981519152604482015260f960020a603702606482015290519081900360840190fd5b610b4181610f79565b600e541515610b4f57610b8c565b600e548102600f81905560408051918252517f57abf0427b16049a4b4f5234cd901a0f14c02268a8cf9f578b65440d54382ddb9181900360200190a15b50565b600154600160a060020a031681565b600054600160a060020a03163314610bfb576040805160e560020a62461bcd0281526020600482015260216024820152600080516020611347833981519152604482015260f960020a603702606482015290519081900360840190fd5b600d8190556040805182815290517f9dc25dd899b96b9c01242eee4610b805084a873af7614e24f0fd3206cacd93329181900360200190a150565b60045442101590565b600054600160a060020a03163314610c9c576040805160e560020a62461bcd0281526020600482015260216024820152600080516020611347833981519152604482015260f960020a603702606482015290519081900360840190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080610cd6611069565b9050635cb02a504210158015610cef5750635cb02a8c42105b15610d1d57610d166064610d0a83606963ffffffff61108916565b9063ffffffff6110ad16565b9150610d21565b8091505b5090565b600e5481565b600254600160a060020a031681565b6010541580610d4b57506010543a11155b1515610dc7576040805160e560020a62461bcd02815260206004820152602760248201527f5472616e73616374696f6e20657863656564732074686520676173207072696360448201527f65206c696d697400000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b610dcf6110c4565b565b6000610de16064610d0a8461114c565b92915050565b600082820183811015610df657fe5b9392505050565b600f541580610eb05750600f54600254604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301529151610ead93869316916370a082319160248083019260209291908290030181600087803b158015610e7557600080fd5b505af1158015610e89573d6000803e3d6000fd5b505050506040513d6020811015610e9f57600080fd5b50519063ffffffff610de716565b11155b1515610f2c576040805160e560020a62461bcd02815260206004820152603260248201527f546865207472616e73616374696f6e20657863656564732074686520696e646960448201527f76696475616c206d6178696d756d206361700000000000000000000000000000606482015290519081900360840190fd5b610f368282611166565b5050565b600554604051600160a060020a039091169082156108fc029083906000818181858888f19350505050158015610f74573d6000803e3d6000fd5b505050565b600054600160a060020a03163314610fd6576040805160e560020a62461bcd0281526020600482015260216024820152600080516020611347833981519152604482015260f960020a603702606482015290519081900360840190fd5b6000811161102e576040805160e560020a62461bcd02815260206004820152601a60248201527f436f6e76657273696f6e2072617465206973206e6f7420736574000000000000604482015290519081900360640190fd5b60068190556040805182815290517fb6e78d5c7115b12c1603fb3c8926acd812db2d83d01f62004c460b33f62a88649181900360200190a150565b60006110846064611078611214565b9063ffffffff61108916565b905090565b60008282028315806110a557508284828115156110a257fe5b04145b1515610df657fe5b60008082848115156110bb57fe5b04949350505050565b6110cc611234565b600d54341015610dcf576040805160e560020a62461bcd02815260206004820152602481018290527f546865207472616e73616374696f6e2076616c756520646f6573206e6f74207060448201527f61737320746865206d696e696d756d20636f6e747269627574696f6e20636170606482015290519081900360840190fd5b6000610de1611159610ccb565b839063ffffffff61108916565b61116e611328565b1561120a57600854611186908263ffffffff610de716565b6008819055600954101561120a576040805160e560020a62461bcd02815260206004820152603560248201527f5472616e73616374696f6e206578636565647320746865207072652d73616c6560448201527f206d6178696d756d20746f6b656e20737570706c790000000000000000000000606482015290519081900360840190fd5b610f3682826106fa565b600061121e611328565b1561122c5750600c54610acc565b611084611340565b34151561128b576040805160e560020a62461bcd02815260206004820152601960248201527f5472616e73616374696f6e2076616c7565206973207a65726f00000000000000604482015290519081900360640190fd5b600354421015801561129e575060045442105b806112ac57506112ac611328565b1515610dcf576040805160e560020a62461bcd02815260206004820152603c60248201527f4e65697468657220746865207072652d73616c65206e6f72207468652066756e60448201527f64726169736572206172652063757272656e746c792061637469766500000000606482015290519081900360840190fd5b6000600b5442108015611084575050600a5442101590565b6006549056004f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696fa165627a7a7230582033fabfe23a5c3103872c2acf354374c3cddb82b4293bd84f4fa4cc54d54a0bb9002960806040526006805460a060020a60ff021916905534801561002057600080fd5b50604051602080610c0083398101604081815291518282018352600482527f54494d450000000000000000000000000000000000000000000000000000000060208084019182528451808601909552600285527f544d000000000000000000000000000000000000000000000000000000000000908501528251919384939290916012916100b091600191610101565b5081516100c4906002906020850190610101565b506003805460ff191660ff92909216919091179055505060068054600160a060020a031916600160a060020a03929092169190911790555061019c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061014257805160ff191683800117855561016f565b8280016001018555821561016f579182015b8281111561016f578251825591602001919060010190610154565b5061017b92915061017f565b5090565b61019991905b8082111561017b5760008155600101610185565b90565b610a55806101ab6000396000f3006080604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100c95780630754617214610153578063095ea7b31461018457806318160ddd146101bc57806321afb5ee146101e357806323b872dd146101f8578063313ce5671461022257806340c10f191461024d57806370a08231146102735780637e5cd5c11461029457806395d89b41146102a9578063a9059cbb146102be578063dd62ed3e146102e2575b600080fd5b3480156100d557600080fd5b506100de610309565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610118578181015183820152602001610100565b50505050905090810190601f1680156101455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015f57600080fd5b50610168610396565b60408051600160a060020a039092168252519081900360200190f35b34801561019057600080fd5b506101a8600160a060020a03600435166024356103a5565b604080519115158252519081900360200190f35b3480156101c857600080fd5b506101d161040b565b60408051918252519081900360200190f35b3480156101ef57600080fd5b506101a8610411565b34801561020457600080fd5b506101a8600160a060020a0360043581169060243516604435610432565b34801561022e57600080fd5b5061023761051a565b6040805160ff9092168252519081900360200190f35b34801561025957600080fd5b50610271600160a060020a0360043516602435610523565b005b34801561027f57600080fd5b506101d1600160a060020a036004351661068e565b3480156102a057600080fd5b506102716106a9565b3480156102b557600080fd5b506100de6107de565b3480156102ca57600080fd5b506101a8600160a060020a0360043516602435610836565b3480156102ee57600080fd5b506101d1600160a060020a036004358116906024351661084c565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561038e5780601f106103635761010080835404028352916020019161038e565b820191906000526020600020905b81548152906001019060200180831161037157829003601f168201915b505050505081565b600654600160a060020a031681565b336000818152600560209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60005481565b60065474010000000000000000000000000000000000000000900460ff1681565b600160a060020a03831660009081526005602090815260408083203384529091528120548211156104ad576040805160e560020a62461bcd02815260206004820152601660248201527f496e73756666696369656e7420616c6c6f77616e636500000000000000000000604482015290519081900360640190fd5b600160a060020a03841660009081526005602090815260408083203384529091529020546104e1908363ffffffff61087716565b600160a060020a0385166000908152600560209081526040808320338452909152902055610510848484610889565b5060019392505050565b60035460ff1681565b600654600160a060020a03163314610585576040805160e560020a62461bcd02815260206004820181905260248201527f4f6e6c7920746865206d696e74657220616464726573732063616e206d696e74604482015290519081900360640190fd5b60065474010000000000000000000000000000000000000000900460ff16156105f8576040805160e560020a62461bcd02815260206004820152601360248201527f4d696e74696e672069732064697361626c656400000000000000000000000000604482015290519081900360640190fd5b60005461060b908263ffffffff610a1316565b6000908155600160a060020a038316815260046020526040902054610636908263ffffffff610a1316565b600160a060020a03831660008181526004602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a031660009081526004602052604090205490565b600654600160a060020a0316331461070b576040805160e560020a62461bcd02815260206004820181905260248201527f4f6e6c7920746865206d696e74657220616464726573732063616e206d696e74604482015290519081900360640190fd5b60065474010000000000000000000000000000000000000000900460ff161561077e576040805160e560020a62461bcd02815260206004820152601360248201527f4d696e74696e672069732064697361626c656400000000000000000000000000604482015290519081900360640190fd5b6006805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517faf79b4370f6af9d950564bbe6b81f7f0834c003c455db9248f4e55e6bf865eb790600090a1565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152929183018282801561038e5780601f106103635761010080835404028352916020019161038e565b6000610843338484610889565b50600192915050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b60008282111561088357fe5b50900390565b600160a060020a03821615156108e9576040805160e560020a62461bcd02815260206004820181905260248201527f496e76616c6964207472616e7366657220746f2061646472657373207a65726f604482015290519081900360640190fd5b600160a060020a038316600090815260046020526040902054811115610959576040805160e560020a62461bcd02815260206004820152601c60248201527f496e73756666696369656e74206163636f756e742062616c616e636500000000604482015290519081900360640190fd5b600160a060020a038316600090815260046020526040902054610982908263ffffffff61087716565b600160a060020a0380851660009081526004602052604080822093909355908416815220546109b7908263ffffffff610a1316565b600160a060020a0380841660008181526004602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600082820183811015610a2257fe5b93925050505600a165627a7a72305820ddfaabd6bba6d37793fda2765a50312cb4704036114d928df19bde0b82528ba70029608060405234801561001057600080fd5b506040516020806105ae833981016040525160008054600160a060020a031916600160a060020a0383161790556100556001635cb02a8c64010000000061008f810204565b610089600173892f34f709dd7090e6e2bec8220e88cbdf57ed7b6a039e7139a8c08fa060000064010000000061013c810204565b506101d7565b600080821161012557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f546f6b656e536166652067726f75702072656c656173652074696d657374616d60448201527f70206973206e6f74207365740000000000000000000000000000000000000000606482015290519081900360840190fd5b5060ff909116600090815260016020526040902055565b60ff83166000908152600160209081526040808320600160a060020a0386168452600281019092529091205461017f90836401000000006103866101c182021704565b600160a060020a038416600090815260028301602052604090205560018101546101b690836401000000006103866101c182021704565b600190910155505050565b6000828201838110156101d057fe5b9392505050565b6103c8806101e66000396000f30060806040526004361061004b5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663587fae938114610050578063e6587a8614610086575b600080fd5b34801561005c57600080fd5b5061008460ff6004351673ffffffffffffffffffffffffffffffffffffffff602435166100ba565b005b34801561009257600080fd5b506100a160ff6004351661035b565b6040805192835260208301919091528051918290030190f35b60ff82166000908152600160205260408120805490919042101561013f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f47726f75702066756e647320617265206e6f742072656c656173656420796574604482015290519081900360640190fd5b5073ffffffffffffffffffffffffffffffffffffffff821660009081526002820160205260408120549081116101fb57604080517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f546865206163636f756e7420697320656d707479206f72206e6f6e2d6578697360448201527f74656e7400000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526002830160205260408120556001820154610238908263ffffffff61037416565b600183015560008054604080517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018690529151919092169263a9059cbb92604480820193602093909283900390910190829087803b1580156102bc57600080fd5b505af11580156102d0573d6000803e3d6000fd5b505050506040513d60208110156102e657600080fd5b5051151561035557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f546f6b656e207472616e73666572206661696c65640000000000000000000000604482015290519081900360640190fd5b50505050565b6001602081905260009182526040909120805491015482565b60008282111561038057fe5b50900390565b60008282018381101561039557fe5b93925050505600a165627a7a72305820ce167343b1dcaa8725159d95e78bc955e63e34546b19b99b083b3441ce0618e70029"
}