{
  "address": "0xc35aaea6dd561a9976e1745a22f8cc5a762354bb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AIV",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "byzantium",
  "sourceCode": "pragma solidity 0.5.7;\n\n/**\n * @title ERC20 interface\n */\ninterface IERC20 {\n  function transfer(address to, uint256 value) external returns (bool);\n  function approve(address spender, uint256 value) external returns (bool);\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\n  function totalSupply() external view returns (uint256);\n  function balanceOf(address who) external view returns (uint256);\n  function allowance(address owner, address spender) external view returns (uint256);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n  * @title Interfaces for working with the protocol\n */\ninterface IProxy {\n  function isDeployer(address _address) external view returns(bool);\n}\n\ninterface IEntryPoint {\n  function getProxyAddress() external view returns(address);\n}\n/**\n  * @title SafeMath\n  * @dev Unsigned math operations with safety checks that revert on error.\n  */\nlibrary SafeMath {\n  /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n      }\n    uint256 c = a * b;\n    require(c / a == b);\n    return c;\n  }\n  /**\n    * @dev Integer division of two unsigned integers truncating the quotient,\n    * reverts on division by zero.\n    */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0);\n    uint256 c = a / b;\n    return c;\n  }\n  /**\n    * @dev Subtracts two unsigned integers, \n    * reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n    return c;\n  }\n  /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n    return c;\n  }\n  /**\n    * @dev Divides two unsigned integers and returns the remainder,\n    * reverts when dividing by zero.\n    */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n    * @dev Give an account access to this role.\n    */ \n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n    * @dev Remove an account's access to this role.\n    */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n    * @dev Check if an account has this role.\n    * @return bool\n    */\n  function has(Role storage role, address account) internal view returns (bool) {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n  /**\n    * @dev The Ownable constructor sets the original `owner` \n    of the contract to the sender account.\n    */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n    * @return the address of the owner.\n    */\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  /**\n    * @dev Throws if called by any account other than the owner.\n    */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n    * @return true if `msg.sender` is the owner of the contract.\n    */\n  function isOwner() public view returns (bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n    * @dev Allows the current owner to relinquish control of the contract.\n    * It will not be possible to call the functions with the `onlyOwner` modifier anymore.\n    * @notice Renouncing ownership will leave the contract without an owner,\n    * thereby removing any functionality that is only available to the owner.\n    */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n    * @dev Transfers control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) internal _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n    * @dev Total number of tokens in existence.\n    */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return A uint256 representing the amount owned by the passed address.\n    */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param owner address The address which owns the funds.\n    * @param spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n  function allowance(address owner, address spender) public view returns (uint256) {\n    return _allowed[owner][spender];\n  }\n\n  /**\n    * @dev Transfer token to a specified address.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * @param spender The address which will spend the funds.\n    * @param value The amount of tokens to be spent.\n    */\n  function approve(address spender, uint256 value) public returns (bool) {\n    _approve(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n    * @dev Transfer tokens from one address to another.\n    * Note that while this function emits an Approval event, this is not required as per the specification,\n    * and other compliant implementations may not emit the event.\n    * @param from address The address which you want to send tokens from\n    * @param to address The address which you want to transfer to\n    * @param value uint256 the amount of tokens to be transferred\n    */\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\n    require(value <= _allowed[from][msg.sender]);\n    _transfer(from, to, value);\n    _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n    return true;\n  }\n\n  /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * Emits an Approval event.\n    * @param spender The address which will spend the funds.\n    * @param addedValue The amount of tokens to increase the allowance by.\n    */\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n    _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n    return true;\n  }\n\n  /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * Emits an Approval event.\n    * @param spender The address which will spend the funds.\n    * @param subtractedValue The amount of tokens to decrease the allowance by.\n    */\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n    return true;\n  }\n\n  /**\n    * @dev Transfer token for a specified addresses.\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(to != address(0));\n    require(value <= _balances[from]);\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n    * @dev Internal function that mints an amount of the token and assigns it to\n    * an account. This encapsulates the modification of balances such that the\n    * proper events are emitted.\n    * @param account The account that will receive the created tokens.\n    * @param value The amount that will be created.\n    */\n  function _mint(address account, uint256 value) internal {\n    require(account != address(0));\n\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n\n  /**\n    * @dev Approve an address to spend another addresses' tokens.\n    * @param owner The address that owns the tokens.\n    * @param spender The address that will spend the tokens.\n    * @param value The number of tokens that can be spent.\n    */\n  function _approve(address owner, address spender, uint256 value) internal {\n    require(spender != address(0));\n    require(owner != address(0));\n    _allowed[owner][spender] = value;\n    emit Approval(owner, spender, value);\n  }\n\n}\n\ncontract MinterRole is Ownable {\n  using Roles for Roles.Role;\n\n  event MinterAdded(address indexed account);\n  event MinterRemoved(address indexed account);\n\n  Roles.Role private _minters;\n\n  constructor () internal {\n    _addMinter(msg.sender);\n  }\n\n  modifier onlyMinter() {\n    require(isMinter(msg.sender));\n    _;\n  }\n\n  function isMinter(address account) public view returns (bool) {\n    return _minters.has(account);\n  }\n\n  function addMinter(address account) public onlyOwner {\n    _addMinter(account);\n  }\n\n  function removeMinter(address account) public onlyOwner {\n    _removeMinter(account);\n  }\n\n  function _addMinter(address account) internal {\n    _minters.add(account);\n    emit MinterAdded(account);\n  }\n\n  function _removeMinter(address account) internal {\n    _minters.remove(account);\n    emit MinterRemoved(account);\n  }\n}\n\ncontract PauserRole is Ownable {\n  using Roles for Roles.Role;\n\n  event PauserAdded(address indexed account);\n  event PauserRemoved(address indexed account);\n\n  Roles.Role private _pausers;\n\n  constructor () internal {\n    _addPauser(msg.sender);\n  }\n\n  modifier onlyPauser() {\n    require(isPauser(msg.sender));\n    _;\n  }\n\n  function isPauser(address account) public view returns (bool) {\n    return _pausers.has(account);\n  }\n\n  function addPauser(address account) public onlyOwner {\n    _addPauser(account);\n  }\n\n  function removePauser(address account) public onlyOwner {\n    _removePauser(account);\n  }\n\n  function _addPauser(address account) internal {\n    _pausers.add(account);\n    emit PauserAdded(account);\n  }\n\n  function _removePauser(address account) internal {\n    _pausers.remove(account);\n    emit PauserRemoved(account);\n  }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n  event Paused(address account);\n  event Unpaused(address account);\n\n  bool private _paused;\n\n  constructor () internal {\n    _paused = false;\n  }\n\n  /**\n    * @return True if the contract is paused, false otherwise.\n    */\n  function paused() public view returns (bool) {\n    return _paused;\n  }\n\n  /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n  modifier whenNotPaused() {\n    require(!_paused);\n    _;\n  }\n\n  /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n  modifier whenPaused() {\n    require(_paused);\n    _;\n  }\n\n  /**\n    * @dev Called by a pauser to pause, triggers stopped state.\n    */\n  function pause() public onlyPauser whenNotPaused {\n    _paused = true;\n    emit Paused(msg.sender);\n  }\n\n  /**\n    * @dev Called by a pauser to unpause, returns to normal state.\n    */\n  function unpause() public onlyPauser whenPaused {\n    _paused = false;\n    emit Unpaused(msg.sender);\n  }\n}\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n */\ncontract ERC20Pausable is ERC20, Pausable {\n  function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n    return super.transfer(to, value);\n  }\n\n  function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n    return super.transferFrom(from, to, value);\n  }\n\n  function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n    return super.approve(spender, value);\n  }\n\n  function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool) {\n    return super.increaseAllowance(spender, addedValue);\n  }\n\n  function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool) {\n    return super.decreaseAllowance(spender, subtractedValue);\n  }\n}\n\n\ncontract ERC20Mintable is ERC20, MinterRole {\n  /**\n    * @dev Function to mint tokens\n    * @param to The address that will receive the minted tokens.\n    * @param value The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n  function mint(address to, uint256 value) public onlyMinter returns (bool) {\n    _mint(to, value);\n    return true;\n  }\n}\n\ncontract ERC20Detailed is IERC20 {\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n\n  constructor (string memory name, string memory symbol, uint8 decimals) public {\n    _name = name;\n    _symbol = symbol;\n    _decimals = decimals;\n  }\n\n  /**\n    * @return the name of the token.\n    */\n  function name() public view returns (string memory) {\n    return _name;\n  }\n\n  /**\n    * @return the symbol of the token.\n    */\n  function symbol() public view returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n    * @return the number of decimals of the token.\n    */\n  function decimals() public view returns (uint8) {\n    return _decimals;\n  }\n}\n\n/**\n * @title Capped token\n * @dev Mintable token with a token cap.\n */\ncontract ERC20Capped is ERC20Mintable {\n  uint256 private _cap;\n\n  constructor (uint256 cap) public {\n    require(cap > 0);\n    _cap = cap;\n  }\n\n  /**\n    * @return the cap for the token minting.\n    */\n  function cap() public view returns (uint256) {\n    return _cap;\n  }\n\n  function _mint(address account, uint256 value) internal {\n    require(totalSupply().add(value) <= _cap);\n    super._mint(account, value);\n  }\n}\n\n\n/***\n * @title AIV token\n */\ncontract AIV is ERC20Detailed, ERC20Capped, ERC20Pausable  {\n\n  mapping(address => bool) private whiteList;\n  IEntryPoint private EntryPoint;\n  IProxy private Proxy;\n\n  constructor(string memory name, string memory symbol, uint8 decimals, uint256 cap)\n  ERC20Detailed(name, symbol, decimals) ERC20Capped(cap) public {}\n\n  modifier canModifyWhiteList() {\n    address proxyAddress = EntryPoint.getProxyAddress();\n    Proxy = IProxy(proxyAddress);\n    require(isOwner() || Proxy.isDeployer(msg.sender));\n    _;\n  }\n\n  modifier onlyFromWhiteList() {\n    require(whiteList[msg.sender] == true);\n    _;\n  }\n\n  function setEntryPointAddress(address _EntryPointAddress) public onlyOwner {\n    EntryPoint = IEntryPoint(_EntryPointAddress);\n  }\n\n  function addToWhiteList(address _address) public canModifyWhiteList {\n    whiteList[_address] = true;\n  }\n\n  function removeFromWhiteList(address _address) public canModifyWhiteList {\n    whiteList[_address] = false;\n  }\n\n  /**\n    Token owner can approve for `spender` to transferFrom(...) `tokens`\n    from the token owner's account.\n  */\n  function approveFromProtocol(address sender, address spender, uint tokens) public onlyFromWhiteList returns (bool success) {\n    require(balanceOf(sender) >= tokens);\n    _approve(sender, spender, _allowed[sender][spender].add(tokens));\n    return true;\n  }\n\n\n  function getTotalAmount(uint256[] memory values) internal pure returns(uint256) {\n    uint256 total;\n    for (uint8 i = 0; i < values.length; i++) {\n      total += values[i];\n    }\n    return total;\n  }\n\n  /**\n    * @dev transfer to array of wallets\n    * @param addresses wallet address array\n    * @param values value to transfer array\n    */\n  function transferBatch(address[] memory addresses, uint256[] memory values) public {\n    require((addresses.length != 0 && values.length != 0));\n    require(addresses.length == values.length);\n    /// @notice Check if the tokens are enough\n    require(getTotalAmount(values) <= balanceOf(msg.sender));\n    for (uint8 j = 0; j < values.length; j++) {\n      transfer(addresses[j], values[j]);\n    }\n  }\n    /**\n    * @dev transfer to array of wallets\n    * @param addresses wallet address array\n    * @param values value to transfer array\n    */\n  function mintBatch(address[] memory addresses, uint256[] memory values) public onlyMinter {\n    require((addresses.length != 0 && values.length != 0));\n    require(addresses.length == values.length);\n    /// @notice Check if the tokens are enough\n    uint256 value = getTotalAmount(values);\n    require(totalSupply().add(value) <= cap());\n    for (uint8 j = 0; j < values.length; j++) {\n      mint(addresses[j], values[j]);\n    }\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_EntryPointAddress\",\"type\":\"address\"}],\"name\":\"setEntryPointAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approveFromProtocol\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"cap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b5060405162001bd238038062001bd2833981018060405260808110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b820160208101848111156200006457600080fd5b81516401000000008111828201871017156200007f57600080fd5b505092919060200180516401000000008111156200009c57600080fd5b82016020810184811115620000b057600080fd5b8151640100000000811182820187101715620000cb57600080fd5b505060208083015160409093015186519295509293508291869186918691620000fa91600091860190620002f5565b50815162000110906001906020850190620002f5565b506002805460ff90921660ff19909216919091179055505060068054600160a060020a031916331790819055604051600160a060020a0391909116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36200018833640100000000620001c2810204565b600081116200019657600080fd5b600855620001ad3364010000000062000214810204565b5050600a805460ff19169055506200039a9050565b620001dd600782640100000000620017b06200026682021704565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b6200022f600982640100000000620017b06200026682021704565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600160a060020a0381166200027a57600080fd5b6200028f8282640100000000620002bf810204565b156200029a57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a038216620002d557600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200033857805160ff191683800117855562000368565b8280016001018555821562000368579182015b82811115620003685782518255916020019190600101906200034b565b50620003769291506200037a565b5090565b6200039791905b8082111562000376576000815560010162000381565b90565b61182880620003aa6000396000f3fe608060405234801561001057600080fd5b506004361061020d576000357c0100000000000000000000000000000000000000000000000000000000900480636b2c0f551161012c57806395d89b41116100bf578063aa271e1a1161008e578063aa271e1a146107ef578063ce36899014610815578063dd62ed3e1461084b578063f2fde38b146108795761020d565b806395d89b4114610769578063983b2d5614610771578063a457c2d714610797578063a9059cbb146107c35761020d565b806382dc1ec4116100fb57806382dc1ec41461070f5780638456cb59146107355780638da5cb5b1461073d5780638f32d59b146107615761020d565b80636b2c0f551461059457806370a08231146105ba578063715018a6146105e05780637c88e3d9146105e85761020d565b8063355274ea116101a457806340c10f191161017357806340c10f191461051457806346fbf68e1461054057806347ee0394146105665780635c975abb1461058c5761020d565b8063355274ea146103b157806339509351146103b95780633b3e672f146103e55780633f4ba83a1461050c5761020d565b806318160ddd116101e057806318160ddd1461031d57806323b872dd146103375780633092afd51461036d578063313ce567146103935761020d565b806301bf66481461021257806306fdde031461023a578063095ea7b3146102b75780630e86f506146102f7575b600080fd5b6102386004803603602081101561022857600080fd5b5035600160a060020a031661089f565b005b610242610a1d565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561027c578181015183820152602001610264565b50505050905090810190601f1680156102a95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102e3600480360360408110156102cd57600080fd5b50600160a060020a038135169060200135610ab3565b604080519115158252519081900360200190f35b6102386004803603602081101561030d57600080fd5b5035600160a060020a0316610ad7565b610325610b17565b60408051918252519081900360200190f35b6102e36004803603606081101561034d57600080fd5b50600160a060020a03813581169160208101359091169060400135610b1d565b6102386004803603602081101561038357600080fd5b5035600160a060020a0316610b43565b61039b610b60565b6040805160ff9092168252519081900360200190f35b610325610b69565b6102e3600480360360408110156103cf57600080fd5b50600160a060020a038135169060200135610b6f565b610238600480360360408110156103fb57600080fd5b81019060208101813564010000000081111561041657600080fd5b82018360208201111561042857600080fd5b8035906020019184602083028401116401000000008311171561044a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561049a57600080fd5b8201836020820111156104ac57600080fd5b803590602001918460208302840111640100000000831117156104ce57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610b8c945050505050565b610238610c23565b6102e36004803603604081101561052a57600080fd5b50600160a060020a038135169060200135610c83565b6102e36004803603602081101561055657600080fd5b5035600160a060020a0316610caa565b6102386004803603602081101561057c57600080fd5b5035600160a060020a0316610cc3565b6102e3610e44565b610238600480360360208110156105aa57600080fd5b5035600160a060020a0316610e4d565b610325600480360360208110156105d057600080fd5b5035600160a060020a0316610e67565b610238610e82565b610238600480360360408110156105fe57600080fd5b81019060208101813564010000000081111561061957600080fd5b82018360208201111561062b57600080fd5b8035906020019184602083028401116401000000008311171561064d57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561069d57600080fd5b8201836020820111156106af57600080fd5b803590602001918460208302840111640100000000831117156106d157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610eea945050505050565b6102386004803603602081101561072557600080fd5b5035600160a060020a0316610faf565b610238610fc9565b61074561102d565b60408051600160a060020a039092168252519081900360200190f35b6102e361103c565b61024261104d565b6102386004803603602081101561078757600080fd5b5035600160a060020a03166110ad565b6102e3600480360360408110156107ad57600080fd5b50600160a060020a0381351690602001356110c7565b6102e3600480360360408110156107d957600080fd5b50600160a060020a0381351690602001356110e4565b6102e36004803603602081101561080557600080fd5b5035600160a060020a0316611101565b6102e36004803603606081101561082b57600080fd5b50600160a060020a03813581169160208101359091169060400135611114565b6103256004803603604081101561086157600080fd5b50600160a060020a0381358116916020013516611197565b6102386004803603602081101561088f57600080fd5b5035600160a060020a03166111c2565b600c54604080517f43a73d9a0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a0316916343a73d9a916004808301926020929190829003018186803b1580156108fd57600080fd5b505afa158015610911573d6000803e3d6000fd5b505050506040513d602081101561092757600080fd5b5051600d805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038316179055905061095b61103c565b806109f25750600d54604080517f50c358a40000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a03909216916350c358a491602480820192602092909190829003018186803b1580156109c557600080fd5b505afa1580156109d9573d6000803e3d6000fd5b505050506040513d60208110156109ef57600080fd5b50515b6109fb57600080fd5b50600160a060020a03166000908152600b60205260409020805460ff19169055565b60008054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610aa95780601f10610a7e57610100808354040283529160200191610aa9565b820191906000526020600020905b815481529060010190602001808311610a8c57829003601f168201915b5050505050905090565b600a5460009060ff1615610ac657600080fd5b610ad083836111dc565b9392505050565b610adf61103c565b610ae857600080fd5b600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60055490565b600a5460009060ff1615610b3057600080fd5b610b3b8484846111e9565b949350505050565b610b4b61103c565b610b5457600080fd5b610b5d8161125f565b50565b60025460ff1690565b60085490565b600a5460009060ff1615610b8257600080fd5b610ad083836112a7565b815115801590610b9c5750805115155b610ba557600080fd5b8051825114610bb357600080fd5b610bbc33610e67565b610bc5826112e3565b1115610bd057600080fd5b60005b81518160ff161015610c1e57610c15838260ff1681518110610bf157fe5b6020026020010151838360ff1681518110610c0857fe5b60200260200101516110e4565b50600101610bd3565b505050565b610c2c33610caa565b610c3557600080fd5b600a5460ff16610c4457600080fd5b600a805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b6000610c8e33611101565b610c9757600080fd5b610ca18383611323565b50600192915050565b6000610cbd60098363ffffffff61134b16565b92915050565b600c54604080517f43a73d9a0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a0316916343a73d9a916004808301926020929190829003018186803b158015610d2157600080fd5b505afa158015610d35573d6000803e3d6000fd5b505050506040513d6020811015610d4b57600080fd5b5051600d805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790559050610d7f61103c565b80610e165750600d54604080517f50c358a40000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a03909216916350c358a491602480820192602092909190829003018186803b158015610de957600080fd5b505afa158015610dfd573d6000803e3d6000fd5b505050506040513d6020811015610e1357600080fd5b50515b610e1f57600080fd5b50600160a060020a03166000908152600b60205260409020805460ff19166001179055565b600a5460ff1690565b610e5561103c565b610e5e57600080fd5b610b5d81611380565b600160a060020a031660009081526003602052604090205490565b610e8a61103c565b610e9357600080fd5b600654604051600091600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36006805473ffffffffffffffffffffffffffffffffffffffff19169055565b610ef333611101565b610efc57600080fd5b815115801590610f0c5750805115155b610f1557600080fd5b8051825114610f2357600080fd5b6000610f2e826112e3565b9050610f38610b69565b610f5082610f44610b17565b9063ffffffff6113c816565b1115610f5b57600080fd5b60005b82518160ff161015610fa957610fa0848260ff1681518110610f7c57fe5b6020026020010151848360ff1681518110610f9357fe5b6020026020010151610c83565b50600101610f5e565b50505050565b610fb761103c565b610fc057600080fd5b610b5d816113da565b610fd233610caa565b610fdb57600080fd5b600a5460ff1615610feb57600080fd5b600a805460ff191660011790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b600654600160a060020a031690565b600654600160a060020a0316331490565b60018054604080516020601f60026000196101008789161502019095169490940493840181900481028201810190925282815260609390929091830182828015610aa95780601f10610a7e57610100808354040283529160200191610aa9565b6110b561103c565b6110be57600080fd5b610b5d81611422565b600a5460009060ff16156110da57600080fd5b610ad0838361146a565b600a5460009060ff16156110f757600080fd5b610ad083836114a6565b6000610cbd60078363ffffffff61134b16565b336000908152600b602052604081205460ff16151560011461113557600080fd5b8161113f85610e67565b101561114a57600080fd5b600160a060020a0380851660009081526004602090815260408083209387168352929052205461118d9085908590611188908663ffffffff6113c816565b6114b3565b5060019392505050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b6111ca61103c565b6111d357600080fd5b610b5d8161153b565b6000610ca13384846114b3565b600160a060020a038316600090815260046020908152604080832033845290915281205482111561121957600080fd5b6112248484846115b7565b600160a060020a03841660009081526004602090815260408083203380855292529091205461118d918691611188908663ffffffff6116a916565b61127060078263ffffffff6116be16565b604051600160a060020a038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b336000818152600460209081526040808320600160a060020a03871684529091528120549091610ca1918590611188908663ffffffff6113c816565b600080805b83518160ff16101561131c57838160ff168151811061130357fe5b60200260200101518201915080806001019150506112e8565b5092915050565b60085461133282610f44610b17565b111561133d57600080fd5b6113478282611706565b5050565b6000600160a060020a03821661136057600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b61139160098263ffffffff6116be16565b604051600160a060020a038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b600082820183811015610ad057600080fd5b6113eb60098263ffffffff6117b016565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b61143360078263ffffffff6117b016565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b336000818152600460209081526040808320600160a060020a03871684529091528120549091610ca1918590611188908663ffffffff6116a916565b6000610ca13384846115b7565b600160a060020a0382166114c657600080fd5b600160a060020a0383166114d957600080fd5b600160a060020a03808416600081815260046020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600160a060020a03811661154e57600080fd5b600654604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0382166115ca57600080fd5b600160a060020a0383166000908152600360205260409020548111156115ef57600080fd5b600160a060020a038316600090815260036020526040902054611618908263ffffffff6116a916565b600160a060020a03808516600090815260036020526040808220939093559084168152205461164d908263ffffffff6113c816565b600160a060020a0380841660008181526003602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828211156116b857600080fd5b50900390565b600160a060020a0381166116d157600080fd5b6116db828261134b565b6116e457600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a03821661171957600080fd5b60055461172c908263ffffffff6113c816565b600555600160a060020a038216600090815260036020526040902054611758908263ffffffff6113c816565b600160a060020a03831660008181526003602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a0381166117c357600080fd5b6117cd828261134b565b156117d757600080fd5b600160a060020a0316600090815260209190915260409020805460ff1916600117905556fea165627a7a72305820a7501cf057fe65c70ae8d2ee09a677cfafece3d3f725dc6a8e7989b245a9b55d0029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000006765c793fa10079d0000000000000000000000000000000000000000000000000000000000000000000000b414956494120544f4b454e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034149560000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000006765c793fa10079d0000000000000000000000000000000000000000000000000000000000000000000000b414956494120544f4b454e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034149560000000000000000000000000000000000000000000000000000000000"
}