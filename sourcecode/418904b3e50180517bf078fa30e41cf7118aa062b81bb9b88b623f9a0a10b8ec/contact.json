{
  "address": "0x8198e349afd0a09efb06b460452ec1beab7a20aa",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MDToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "500",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-12\n*/\n\npragma solidity ^0.4.18;\n\n// File: contracts/commons/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/flavours/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n// File: contracts/flavours/Lockable.sol\n\n/**\n * @title Lockable\n * @dev Base contract which allows children to\n *      implement main operations locking mechanism.\n */\ncontract Lockable is Ownable {\n  event Lock();\n  event Unlock();\n\n  bool public locked = false;\n\n  /**\n   * @dev Modifier to make a function callable\n  *       only when the contract is not locked.\n   */\n  modifier whenNotLocked() {\n    require(!locked);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable\n   *      only when the contract is locked.\n   */\n  modifier whenLocked() {\n    require(locked);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to locke, triggers locked state\n   */\n  function lock() onlyOwner whenNotLocked public {\n    locked = true;\n    Lock();\n  }\n\n  /**\n   * @dev called by the owner\n   *      to unlock, returns to unlocked state\n   */\n  function unlock() onlyOwner whenLocked public {\n    locked = false;\n    Unlock();\n  }\n}\n\n// File: contracts/base/BaseFixedERC20Token.sol\n\ncontract BaseFixedERC20Token is Lockable {\n  using SafeMath for uint;\n\n  /// @dev ERC20 Total supply\n  uint public totalSupply;\n\n  mapping(address => uint) balances;\n\n  mapping(address => mapping (address => uint)) private allowed;\n\n  /// @dev Fired if Token transfered accourding to ERC20\n  event Transfer(address indexed from, address indexed to, uint value);\n\n  /// @dev Fired if Token withdraw is approved accourding to ERC20\n  event Approval(address indexed owner, address indexed spender, uint value);\n\n  /**\n   * @dev Gets the balance of the specified address.\n   * @param owner_ The address to query the the balance of.\n   * @return An uint representing the amount owned by the passed address.\n   */\n  function balanceOf(address owner_) public view returns (uint balance) {\n    return balances[owner_];\n  }\n\n  /**\n   * @dev Transfer token for a specified address\n   * @param to_ The address to transfer to.\n   * @param value_ The amount to be transferred.\n   */\n  function transfer(address to_, uint value_) whenNotLocked public returns (bool) {\n    require(to_ != address(0) && value_ <= balances[msg.sender]);\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(value_);\n    balances[to_] = balances[to_].add(value_);\n    Transfer(msg.sender, to_, value_);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from_ address The address which you want to send tokens from\n   * @param to_ address The address which you want to transfer to\n   * @param value_ uint the amount of tokens to be transferred\n   */\n  function transferFrom(address from_, address to_, uint value_) whenNotLocked public returns (bool) {\n    require(to_ != address(0) && value_ <= balances[from_] && value_ <= allowed[from_][msg.sender]);\n    balances[from_] = balances[from_].sub(value_);\n    balances[to_] = balances[to_].add(value_);\n    allowed[from_][msg.sender] = allowed[from_][msg.sender].sub(value_);\n    Transfer(from_, to_, value_);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering.\n   *\n   * To change the approve amount you first have to reduce the addresses\n   * allowance to zero by calling `approve(spender_, 0)` if it is not\n   * already 0 to mitigate the race condition described in:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * @param spender_ The address which will spend the funds.\n   * @param value_ The amount of tokens to be spent.\n   */\n  function approve(address spender_, uint value_) whenNotLocked public returns (bool) {\n    if (value_ != 0 && allowed[msg.sender][spender_] != 0) {\n      revert();\n    }\n    allowed[msg.sender][spender_] = value_;\n    Approval(msg.sender, spender_, value_);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner_ address The address which owns the funds.\n   * @param spender_ address The address which will spend the funds.\n   * @return A uint specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address owner_, address spender_) view public returns (uint) {\n    return allowed[owner_][spender_];\n  }\n}\n\n// File: contracts/base/BaseICOToken.sol\n\n/**\n * @dev Not mintable, ERC20 compilant token, distributed by ICO/Pre-ICO.\n */\ncontract BaseICOToken is BaseFixedERC20Token {\n\n  /// @dev Available supply of tokens\n  uint public availableSupply;\n\n  /// @dev ICO/Pre-ICO smart contract allowed to distribute public funds for this\n  address public ico;\n\n  /// @dev Fired if investment for `amount` of tokens performed by `to` address\n  event ICOTokensInvested(address indexed to, uint amount);\n\n  /// @dev ICO contract changed for this token\n  event ICOChanged(address indexed icoContract);\n\n  /**\n   * @dev Not mintable, ERC20 compilant token, distributed by ICO/Pre-ICO.\n   * @param totalSupply_ Total tokens supply.\n   */\n  function BaseICOToken(uint totalSupply_) public {\n    locked = true;\n    totalSupply = totalSupply_;\n    availableSupply = totalSupply_;\n  }\n\n  /**\n   * @dev Set address of ICO smart-contract which controls token\n   * initial token distribution.\n   * @param ico_ ICO contract address.\n   */\n  function changeICO(address ico_) onlyOwner public {\n    ico = ico_;\n    ICOChanged(ico);\n  }\n\n  function isValidICOInvestment(address to_, uint amount_) internal view returns(bool) {\n    return msg.sender == ico && to_ != address(0) && amount_ <= availableSupply;\n  }\n\n  /**\n   * @dev Assign `amount_` of tokens to investor identified by `to_` address.\n   * @param to_ Investor address.\n   * @param amount_ Number of tokens distributed.\n   */\n  function icoInvestment(address to_, uint amount_) public returns (uint) {\n    require(isValidICOInvestment(to_, amount_));\n    availableSupply -= amount_;\n    balances[to_] = balances[to_].add(amount_);\n    ICOTokensInvested(to_, amount_);\n    return amount_;\n  }\n}\n\n// File: contracts/MDToken.sol\n\n/**\n * @title MD token contract.\n */\ncontract MDToken is BaseICOToken {\n  using SafeMath for uint;\n\n  string public constant name = 'MD Tokens';\n\n  string public constant symbol = 'MDTK';\n\n  uint8 public constant decimals = 18;\n\n  uint internal constant ONE_TOKEN = 1e18;\n\n  /// @dev Fired some tokens distributed to someone from staff,business\n  event ReservedTokensDistributed(address indexed to, uint8 group, uint amount);\n\n  function MDToken(uint totalSupplyTokens_,\n                   uint reservedStaffTokens_,\n                   uint reservedBusinessTokens_,\n                   uint reservedEcosystemTokens_)\n    BaseICOToken(totalSupplyTokens_ * ONE_TOKEN) public {\n    require(availableSupply == totalSupply);\n    availableSupply = availableSupply\n                        .sub(reservedStaffTokens_ * ONE_TOKEN)\n                        .sub(reservedBusinessTokens_ * ONE_TOKEN)\n                        .sub(reservedEcosystemTokens_ * ONE_TOKEN);\n    reserved[RESERVED_STAFF_GROUP] = reservedStaffTokens_ * ONE_TOKEN;\n    reserved[RESERVED_BUSINESS_GROUP] = reservedBusinessTokens_ * ONE_TOKEN;\n    reserved[RESERVED_ECOSYSTEM_GROUP] = reservedEcosystemTokens_ * ONE_TOKEN;\n  }\n\n  // Disable direct payments\n  function() external payable {\n    revert();\n  }\n\n  //---------------------------- MD tokens specific\n\n  uint8 public RESERVED_STAFF_GROUP = 0x1;\n\n  uint8 public RESERVED_BUSINESS_GROUP = 0x2;\n\n  uint8 public RESERVED_ECOSYSTEM_GROUP = 0x4;\n\n  /// @dev Token reservation mapping: key(RESERVED_X) => value(number of tokens)\n  mapping(uint8 => uint) public reserved;\n\n  /**\n   * @dev Get reserved tokens for specific group\n   */\n  function getReservedTokens(uint8 group_) view public returns (uint) {\n    return reserved[group_];\n  }\n\n  /**\n   * @dev Assign `amount_` of privately distributed tokens\n   *      to someone identified with `to_` address.\n   * @param to_   Tokens owner\n   * @param group_ Group identifier of privately distributed tokens\n   * @param amount_ Number of tokens distributed with decimals part\n   */\n  function assignReserved(address to_, uint8 group_, uint amount_) onlyOwner public {\n    require(to_ != address(0) && (group_ & 0x7) != 0);\n    // SafeMath will check reserved[group_] >= amount\n    reserved[group_] = reserved[group_].sub(amount_);\n    balances[to_] = balances[to_].add(amount_);\n    ReservedTokensDistributed(to_, group_, amount_);\n  }\n}",
  "bytecode": "60606040526000805460a060020a60ff0219908116909155600580547401000000000000000000000000000000000000000092169190911760a860020a60ff02191675020000000000000000000000000000000000000000001760b060020a60ff021916760400000000000000000000000000000000000000000000179055341561008957600080fd5b604051608080611039833981016040528080519190602001805191906020018051919060200180516000805474010000000000000000000000000000000000000000600160a060020a031990911633600160a060020a03161760a060020a60ff021916179055670de0b6b3a764000086026001819055600455915061010b9050565b610166670de0b6b3a76400008202610153670de0b6b3a76400008502610153670de0b6b3a764000088026004546101fc64010000000002610d8c179091906401000000009004565b90640100000000610d8c6101fc82021704565b6004556005805460ff740100000000000000000000000000000000000000009091048116600090815260066020526040808220670de0b6b3a76400009788029055835475010000000000000000000000000000000000000000009004831682528082209587029095559154760100000000000000000000000000000000000000000000900416815291909120910290555061020e565b60008282111561020857fe5b50900390565b610e1c8061021d6000396000f30060606040526004361061013d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461014257806308612c35146101cc578063095ea7b3146101f75780631019635d1461022d57806318160ddd1461025757806323b872dd1461026a578063313ce567146102925780635d452201146102bb5780636d47fb71146102ea5780636dd0c51e1461030957806370a082311461031c5780637277236b1461033b5780637ecc2b561461035d5780638da5cb5b1461037057806395d89b411461038357806396cb4bc51461039657806397ab4786146103a9578063a69df4b5146103c2578063a9059cbb146103d5578063cf309012146103f7578063dd62ed3e1461040a578063eae9dbec1461042f578063f2fde38b14610442578063f83d08ba14610461575b600080fd5b341561014d57600080fd5b610155610474565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610191578082015183820152602001610179565b50505050905090810190601f1680156101be5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101d757600080fd5b6101e560ff600435166104ab565b60405190815260200160405180910390f35b341561020257600080fd5b610219600160a060020a03600435166024356104c0565b604051901515815260200160405180910390f35b341561023857600080fd5b610255600160a060020a036004351660ff6024351660443561058f565b005b341561026257600080fd5b6101e5610690565b341561027557600080fd5b610219600160a060020a0360043581169060243516604435610696565b341561029d57600080fd5b6102a561083f565b60405160ff909116815260200160405180910390f35b34156102c657600080fd5b6102ce610844565b604051600160a060020a03909116815260200160405180910390f35b34156102f557600080fd5b610255600160a060020a0360043516610853565b341561031457600080fd5b6102a56108cc565b341561032757600080fd5b6101e5600160a060020a03600435166108ed565b341561034657600080fd5b6101e5600160a060020a0360043516602435610908565b341561036857600080fd5b6101e56109a9565b341561037b57600080fd5b6102ce6109af565b341561038e57600080fd5b6101556109be565b34156103a157600080fd5b6102a56109f5565b34156103b457600080fd5b6101e560ff60043516610a18565b34156103cd57600080fd5b610255610a2a565b34156103e057600080fd5b610219600160a060020a0360043516602435610aba565b341561040257600080fd5b610219610bdd565b341561041557600080fd5b6101e5600160a060020a0360043581169060243516610bfe565b341561043a57600080fd5b6102a5610c29565b341561044d57600080fd5b610255600160a060020a0360043516610c4b565b341561046c57600080fd5b610255610ce6565b60408051908101604052600981527f4d4420546f6b656e730000000000000000000000000000000000000000000000602082015281565b60ff1660009081526006602052604090205490565b6000805474010000000000000000000000000000000000000000900460ff16156104e957600080fd5b811580159061051c5750600160a060020a0333811660009081526003602090815260408083209387168352929052205415155b1561052657600080fd5b600160a060020a03338116600081815260036020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005433600160a060020a039081169116146105aa57600080fd5b600160a060020a038316158015906105c457506007821615155b15156105cf57600080fd5b60ff82166000908152600660205260409020546105f2908263ffffffff610d8c16565b60ff8316600090815260066020908152604080832093909355600160a060020a038616825260029052205461062d908263ffffffff610d9e16565b600160a060020a0384166000818152600260205260409081902092909255907f9b25e6f19951830b3dbcfcd62be59f689237a770339d40af72e2380fc4042fe490849084905160ff909216825260208201526040908101905180910390a2505050565b60015481565b6000805474010000000000000000000000000000000000000000900460ff16156106bf57600080fd5b600160a060020a038316158015906106ef5750600160a060020a0384166000908152600260205260409020548211155b80156107215750600160a060020a03808516600090815260036020908152604080832033909416835292905220548211155b151561072c57600080fd5b600160a060020a038416600090815260026020526040902054610755908363ffffffff610d8c16565b600160a060020a03808616600090815260026020526040808220939093559085168152205461078a908363ffffffff610d9e16565b600160a060020a038085166000908152600260209081526040808320949094558783168252600381528382203390931682529190915220546107d2908363ffffffff610d8c16565b600160a060020a03808616600081815260036020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b601281565b600554600160a060020a031681565b60005433600160a060020a0390811691161461086e57600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038381169190911791829055167ff75d34bb42a98ed9c96ce1821b7834a59d12693611bf4fe2776dae6d512d6d1460405160405180910390a250565b60055474010000000000000000000000000000000000000000900460ff1681565b600160a060020a031660009081526002602052604090205490565b60006109148383610db4565b151561091f57600080fd5b600480548390039055600160a060020a038316600090815260026020526040902054610951908363ffffffff610d9e16565b600160a060020a0384166000818152600260205260409081902092909255907fb34195a3d0de1e5150c8bbe5f5163b622b1ed771ce55319230906552a62160649084905190815260200160405180910390a250919050565b60045481565b600054600160a060020a031681565b60408051908101604052600481527f4d44544b00000000000000000000000000000000000000000000000000000000602082015281565b600554760100000000000000000000000000000000000000000000900460ff1681565b60066020526000908152604090205481565b60005433600160a060020a03908116911614610a4557600080fd5b60005474010000000000000000000000000000000000000000900460ff161515610a6e57600080fd5b6000805474ff0000000000000000000000000000000000000000191690557f70e3fffea7bbb557facdee48ed7f7af5179030adef9ad0c876df039a718f359e60405160405180910390a1565b6000805474010000000000000000000000000000000000000000900460ff1615610ae357600080fd5b600160a060020a03831615801590610b135750600160a060020a0333166000908152600260205260409020548211155b1515610b1e57600080fd5b600160a060020a033316600090815260026020526040902054610b47908363ffffffff610d8c16565b600160a060020a033381166000908152600260205260408082209390935590851681522054610b7c908363ffffffff610d9e16565b600160a060020a0380851660008181526002602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60005474010000000000000000000000000000000000000000900460ff1681565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b6005547501000000000000000000000000000000000000000000900460ff1681565b60005433600160a060020a03908116911614610c6657600080fd5b600160a060020a0381161515610c7b57600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60005433600160a060020a03908116911614610d0157600080fd5b60005474010000000000000000000000000000000000000000900460ff1615610d2957600080fd5b6000805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557f46620e39f4e119bf05f13544f8ef38338fc06c17f6b731c7f95bee356572db9660405160405180910390a1565b600082821115610d9857fe5b50900390565b600082820183811015610dad57fe5b9392505050565b60055460009033600160a060020a039081169116148015610ddd5750600160a060020a03831615155b8015610dad5750506004549011159190505600a165627a7a7230582037e4d8d784fe4d32cfc2a0e0837a5f11160b5dc626a48a71591e7cca31c8a8290029000000000000000000000000000000000000000000000000000000001dcd650000000000000000000000000000000000000000000000000000000000047868c000000000000000000000000000000000000000000000000000000000077359400000000000000000000000000000000000000000000000000000000008f0d180",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000001dcd650000000000000000000000000000000000000000000000000000000000047868c000000000000000000000000000000000000000000000000000000000077359400000000000000000000000000000000000000000000000000000000008f0d180"
}