{
  "address": "0x823ddda8fb4b1faf08dfc7440b98366454295d28",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GGAToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-22\n*/\n\npragma solidity ^0.4.25;\n\ncontract ERC20Base {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Base {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\ncontract Ownable {\n  address public owner;\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function kill() public onlyOwner { \n      if (msg.sender == owner) selfdestruct(owner); \n      \n  }\n  \n}\n\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a / b;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Basic is ERC20Base {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\ncontract StandardToken is ERC20, Basic {\n  mapping (address => mapping (address => uint256)) internal allowed;\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n}\n\ncontract Burnable is StandardToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\ncontract Createable is StandardToken, Ownable {\n\n  event Create(address indexed to, uint256 amount);\n\n  modifier hasCreatePermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function CreateNew(\n    address _to,\n    uint256 _amount\n  )\n    hasCreatePermission\n    public\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Create(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n}\n\ncontract GGAToken is Createable, Burnable {\n  string public name = \"GGA Gold\";\n  string public symbol = \"GGAG\";\n  uint8 public decimals = 0;\n}",
  "bytecode": "60c0604052600860808190527f47474120476f6c6400000000000000000000000000000000000000000000000060a090815261003e91600491906100a5565b506040805180820190915260048082527f47474147000000000000000000000000000000000000000000000000000000006020909201918252610083916005916100a5565b506006805460ff1916905560038054600160a060020a03191633179055610140565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e657805160ff1916838001178555610113565b82800160010185558215610113579182015b828111156101135782518255916020019190600101906100f8565b5061011f929150610123565b5090565b61013d91905b8082111561011f5760008155600101610129565b90565b610b628061014f6000396000f3006080604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100df578063095ea7b31461016957806318160ddd146101a157806323b872dd146101c8578063313ce567146101f257806341c0e1b51461021d57806342966c6814610234578063661884631461024c57806370a08231146102705780638da5cb5b1461029157806395d89b41146102c2578063a9059cbb146102d7578063d73dd623146102fb578063dd62ed3e1461031f578063e152c2a614610346575b600080fd5b3480156100eb57600080fd5b506100f461036a565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012e578181015183820152602001610116565b50505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017557600080fd5b5061018d600160a060020a03600435166024356103f8565b604080519115158252519081900360200190f35b3480156101ad57600080fd5b506101b661045e565b60408051918252519081900360200190f35b3480156101d457600080fd5b5061018d600160a060020a0360043581169060243516604435610464565b3480156101fe57600080fd5b506102076105c9565b6040805160ff9092168252519081900360200190f35b34801561022957600080fd5b506102326105d2565b005b34801561024057600080fd5b5061023260043561060c565b34801561025857600080fd5b5061018d600160a060020a0360043516602435610619565b34801561027c57600080fd5b506101b6600160a060020a0360043516610709565b34801561029d57600080fd5b506102a6610724565b60408051600160a060020a039092168252519081900360200190f35b3480156102ce57600080fd5b506100f4610733565b3480156102e357600080fd5b5061018d600160a060020a036004351660243561078e565b34801561030757600080fd5b5061018d600160a060020a036004351660243561085d565b34801561032b57600080fd5b506101b6600160a060020a03600435811690602435166108f6565b34801561035257600080fd5b5061018d600160a060020a0360043516602435610921565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103f05780601f106103c5576101008083540402835291602001916103f0565b820191906000526020600020905b8154815290600101906020018083116103d357829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b6000600160a060020a038316151561047b57600080fd5b600160a060020a0384166000908152602081905260409020548211156104a057600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156104d057600080fd5b600160a060020a0384166000908152602081905260409020546104f9908363ffffffff610a0216565b600160a060020a03808616600090815260208190526040808220939093559085168152205461052e908363ffffffff610a1416565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610570908363ffffffff610a0216565b600160a060020a0380861660008181526002602090815260408083203384528252918290209490945580518681529051928716939192600080516020610b17833981519152929181900390910190a35060019392505050565b60065460ff1681565b600354600160a060020a031633146105e957600080fd5b600354600160a060020a031633141561060a57600354600160a060020a0316ff5b565b6106163382610a27565b50565b336000908152600260209081526040808320600160a060020a03861684529091528120548083111561066e57336000908152600260209081526040808320600160a060020a03881684529091528120556106a3565b61067e818463ffffffff610a0216565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103f05780601f106103c5576101008083540402835291602001916103f0565b6000600160a060020a03831615156107a557600080fd5b336000908152602081905260409020548211156107c157600080fd5b336000908152602081905260409020546107e1908363ffffffff610a0216565b3360009081526020819052604080822092909255600160a060020a03851681522054610813908363ffffffff610a1416565b600160a060020a03841660008181526020818152604091829020939093558051858152905191923392600080516020610b178339815191529281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a0386168452909152812054610891908363ffffffff610a1416565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600090600160a060020a0316331461093b57600080fd5b60015461094e908363ffffffff610a1416565b600155600160a060020a03831660009081526020819052604090205461097a908363ffffffff610a1416565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927fcc9018de05b5f497ee7618d8830568d8ac2d45d0671b73d8f71c67e824122ec792918290030190a2604080518381529051600160a060020a03851691600091600080516020610b178339815191529181900360200190a350600192915050565b600082821115610a0e57fe5b50900390565b81810182811015610a2157fe5b92915050565b600160a060020a038216600090815260208190526040902054811115610a4c57600080fd5b600160a060020a038216600090815260208190526040902054610a75908263ffffffff610a0216565b600160a060020a038316600090815260208190526040902055600154610aa1908263ffffffff610a0216565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a03851691600080516020610b178339815191529181900360200190a350505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058201578a6dc571ed8eca70b7e7d45ff792c7684e5c9d3f1333d72b9b8bcbce74b4b0029"
}