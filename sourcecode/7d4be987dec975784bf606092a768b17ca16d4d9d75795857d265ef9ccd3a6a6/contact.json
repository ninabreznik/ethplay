{
  "address": "0xa28322b792a1d950b4857c61734b4e50e80fc9b0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MimiCoinToken",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-11\n*/\n\npragma solidity ^0.4.16;\n\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n \n\nlibrary SafeMath {\n    \n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n \n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n \n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n \n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n \ncontract BasicToken is ERC20Basic {\n    \n  using SafeMath for uint256;\n \n  mapping(address => uint256) balances;\n \n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n \n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\n \ncontract StandardToken is ERC20, BasicToken {\n \n  mapping (address => mapping (address => uint256)) allowed;\n \n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n \n  function approve(address _spender, uint256 _value) returns (bool) {\n \n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n \n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n \n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n \ncontract Ownable {\n    \n  address public owner;\n \n  function Ownable() {\n    owner = msg.sender;\n  }\n \n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n \n  function transferOwnership(address newOwner) onlyOwner {\n    require(newOwner != address(0));      \n    owner = newOwner;\n  }\n}\n \ncontract BurnableToken is StandardToken {\n \n  function burn(uint _value) public {\n    require(_value > 0);\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply = totalSupply.sub(_value);\n    Burn(burner, _value);\n  }\n \n  event Burn(address indexed burner, uint indexed value);\n}\n \ncontract MimiCoinToken is BurnableToken {\n    \n  string public constant name = \"MiMi Coin Token\";\n   \n  string public constant symbol = \"MiMiMi\";\n    \n  uint32 public constant decimals = 18;\n \n  uint256 public INITIAL_SUPPLY = 200000000 * 1 ether;\n \n  function MimiCoinToken() {\n    totalSupply = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n  }\n}\n \ncontract Crowdsale is Ownable {\n    \n  using SafeMath for uint;\n    \n  address multisig;\n \n  uint restrictedPercent;\n \n  address restricted;\n \n  MimiCoinToken public token = new MimiCoinToken();\n \n  uint start;\n    \n  uint period;\n \n  uint rate;\n \n  function Crowdsale() {\n    multisig = 0xab6d8603ce4acca9666E53Db68535FD2608F4E78;\n    restricted = 0x4f8bb0EB3bDb5B0E2cD763Fb6d52Eb5961AcE453;\n    restrictedPercent = 10;\n    rate = 100000000000000000000;\n    start = 1557446400;\n    period = 426;\n  }\n \n  modifier saleIsOn() {\n    require(now > start && now < start + period * 1 days);\n    _;\n  }\n \n  function createTokens() saleIsOn payable {\n    multisig.transfer(msg.value);\n    uint tokens = rate.mul(msg.value).div(1 ether);\n    uint bonusTokens = 0;\n    if(now < start + (period * 1 days).div(4)) {\n      bonusTokens = tokens.div(4);\n    } else if(now >= start + (period * 1 days).div(4) && now < start + (period * 1 days).div(4).mul(2)) {\n      bonusTokens = tokens.div(10);\n    } else if(now >= start + (period * 1 days).div(4).mul(2) && now < start + (period * 1 days).div(4).mul(3)) {\n      bonusTokens = tokens.div(20);\n    }\n    uint tokensWithBonus = tokens.add(bonusTokens);\n    token.transfer(msg.sender, tokensWithBonus);\n    uint restrictedTokens = tokens.mul(restrictedPercent).div(100 - restrictedPercent);\n    token.transfer(restricted, restrictedTokens);\n  }\n \n  function() external payable {\n    createTokens();\n  }\n}",
  "bytecode": "60606040526aa56fa5b99019a5c8000000600355341561001e57600080fd5b5b600354600081905550600354600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b610cfb8061007f6000396000f300606060405236156100ad576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100b2578063095ea7b31461014157806318160ddd1461019b57806323b872dd146101c45780632ff2e9dc1461023d578063313ce5671461026657806342966c681461029b57806370a08231146102be57806395d89b411461030b578063a9059cbb1461039a578063dd62ed3e146103f4575b600080fd5b34156100bd57600080fd5b6100c5610460565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101065780820151818401525b6020810190506100ea565b50505050905090810190601f1680156101335780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014c57600080fd5b610181600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610499565b604051808215151515815260200191505060405180910390f35b34156101a657600080fd5b6101ae610621565b6040518082815260200191505060405180910390f35b34156101cf57600080fd5b610223600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610627565b604051808215151515815260200191505060405180910390f35b341561024857600080fd5b6102506108d8565b6040518082815260200191505060405180910390f35b341561027157600080fd5b6102796108de565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b34156102a657600080fd5b6102bc60048080359060200190919050506108e3565b005b34156102c957600080fd5b6102f5600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506109ef565b6040518082815260200191505060405180910390f35b341561031657600080fd5b61031e610a39565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035f5780820151818401525b602081019050610343565b50505050905090810190601f16801561038c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103a557600080fd5b6103da600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a72565b604051808215151515815260200191505060405180910390f35b34156103ff57600080fd5b61044a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c0e565b6040518082815260200191505060405180910390f35b6040805190810160405280600f81526020017f4d694d6920436f696e20546f6b656e000000000000000000000000000000000081525081565b60008082148061052557506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561053057600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b60005481565b600080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506106fb83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c9690919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061079083600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610cb590919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107e68382610cb590919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505b509392505050565b60035481565b601281565b600080821115156108f357600080fd5b33905061094882600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610cb590919063ffffffff16565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109a082600054610cb590919063ffffffff16565b600081905550818173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca560405160405180910390a35b5050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6040805190810160405280600681526020017f4d694d694d69000000000000000000000000000000000000000000000000000081525081565b6000610ac682600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610cb590919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b5b82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c9690919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b92915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b6000808284019050838110151515610caa57fe5b8091505b5092915050565b6000828211151515610cc357fe5b81830390505b929150505600a165627a7a7230582099c5faa79eaaccaa126b9438152e1fc8d3d48a7bbea45790a949423a16ab5b200029"
}