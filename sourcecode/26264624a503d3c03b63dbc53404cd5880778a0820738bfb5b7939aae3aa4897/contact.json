{
  "address": "0x7ab3954a04c15187249f835d0428fc4ae28327b3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "mix",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-10\n*/\n\npragma solidity ^0.4.24;\n\n\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) { \n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    } \n}\n\n library SafeMath8{\n     function add(uint8 a, uint8 b) internal pure returns (uint8) {\n        uint8 c = a + b;\n        require(c >= a);\n\n        return c;\n    } \n\n    function sub(uint8 a, uint8 b) internal pure returns (uint8) {\n        require(b <= a);\n        uint8 c = a - b;\n        return c;\n    }\n\n }\n\n library SafeMath16{\n     function add(uint16 a, uint16 b) internal pure returns (uint16) {\n        uint16 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    function sub(uint16 a, uint16 b) internal pure returns (uint16) {\n        require(b <= a);\n        uint16 c = a - b;\n        return c;\n    }\n\n     function mul(uint16 a, uint16 b) internal pure returns (uint16) {\n        if (a == 0) {\n            return 0;\n        }\n        uint16 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n    function div(uint16 a, uint16 b) internal pure returns (uint16) {\n        require(b > 0);\n        uint16 c = a / b;\n        return c;\n    }\n }\n\nlibrary Address {\n\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\ninterface master{\n    function inquire_location(address _address) external view returns(uint16, uint16);\n    function inquire_slave_address(uint16 _slave) external view returns(address);\n    function inquire_land_info(uint16 _city, uint16 _id) external view returns(uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8);\n    function domain_attribute(uint16 _city,uint16 _id, uint8 _index) external;\n    \n    function inquire_tot_attribute(uint16 _slave, uint16 _domain) external view returns(uint8[5]);\n     \n    function inquire_owner(uint16 _city, uint16 id) external view returns(address);\n    \n}\n\n interface material{\n     function control_burn(uint8 boxIndex, uint8 materialIndex, address target, uint256 amount) external;\n }\n \n\ncontract owned{\n\n    address public manager;\n\n    constructor() public{\n        manager = msg.sender;\n    }\n\n    modifier onlymanager{\n        require(msg.sender == manager);\n        _;\n    } \n\n    function transferownership(address _new_manager) public onlymanager {\n        manager = _new_manager;\n    }\n\n}\n\ncontract mix is owned{   \n    \n    event mix_result(address indexed player, bool result, uint16 rate); \n\n    address arina_address = 0xe6987cd613dfda0995a95b3e6acbabececd41376;\n    address master_address = 0x0ac10bf0342fa2724e93d250751186ba5b659303;\n    \n    address material_contract = 0x65844f2e98495b6c8780f689c5d13bb7f4975d65;  \n    \n    uint16[5] paramA;\n    uint16[5] paramB; \n    uint16[5] paramC; \n    uint16[5] paramD;\n    uint16[5] paramE; \n    uint16[5] paramF;\n\n    \n    constructor() public{\n        paramA=[50,30,10,5,1];\n        paramB=[100,50,30,10,5]; \n        paramC=[200,100,50,30,10];\n        paramD=[300,150,100,50,30];\n        paramE=[400,200,150,100,50];\n        paramF=[500,300,200,150,100]; \n\n    } \n     \n    using SafeMath for uint256;\n    using SafeMath16 for uint16;\n    using SafeMath8 for uint8;\n    using Address for address;\n    \n    function set_material_contract(address _material_contract) public onlymanager{\n        material_contract = _material_contract;\n    }\n    \n    function set_master(address _new_master) public onlymanager {\n        master_address = _new_master;\n    } \n    \n     \n    \n    function materialMix(uint16 city,uint16 id,uint8 proIndex, uint8[] mixArray) public {\n    \n        require(msg.sender == master(master_address).inquire_owner(city,id));\n        (uint16 _city,uint16 _id) = master(master_address).inquire_location(msg.sender);\n        require(city == _city && id == _id);\n         \n        uint8 produce;        \n        uint8 attribute; \n        uint8 index2;         \n        uint16 total = 0;     \n        uint16 random = uint16((keccak256(abi.encodePacked(now, mixArray.length))));\n  \n         \n        if(proIndex == 1){\n            (produce,,,,,,,,,) = master(master_address).inquire_land_info(city,id);\n             \n        }else if(proIndex == 2){\n            (,produce,,,,,,,,) = master(master_address).inquire_land_info(city,id);\n        }else if(proIndex == 3){\n            (,,produce,,,,,,,) = master(master_address).inquire_land_info(city,id);\n        }else if(proIndex == 4){\n            (,,,produce,,,,,,) = master(master_address).inquire_land_info(city,id);\n        }else{\n            (,,,,produce,,,,,) = master(master_address).inquire_land_info(city,id);\n        }\n\n        attribute = produce.add(master(master_address).inquire_tot_attribute(city,id)[(proIndex-1)]);\n        \n        require(attribute>=0 && attribute < 10);\n         \n        \n        if( attribute < 2)\n            index2 = 0;\n        else if(attribute > 1 && attribute < 4)\n            index2 = 1; \n        else if(attribute > 3 && attribute < 6)\n            index2 = 2;\n        else if(attribute > 5 && attribute < 8)\n            index2 = 3;\n        else\n            index2 = 4; \n            \n        for( i=0;i<mixArray.length;i++){          \n            total = total.add(getParam(mixArray[i],index2));\n        }    \n  \n        for(uint8 i=0;i < mixArray.length; i++){                        \n            \n            if(proIndex == 2){\n                mixArray[i] = mixArray[i]%30;\n            }else if(proIndex == 3){\n                mixArray[i] = mixArray[i]%40;\n            }else if(proIndex == 4){\n                mixArray[i] = mixArray[i]%60;\n            }else if(proIndex == 5){\n                mixArray[i] = mixArray[i]%68;\n            }\n\n\n             material(material_contract).control_burn((proIndex-1),(mixArray[i]-1),msg.sender,1);\n        }  \n\n        \n\n\n        if((random%1000) <= total){\n            \n            master(master_address).domain_attribute(city, id, (proIndex-1));\n            emit mix_result(msg.sender,true,total);\n            \n        } else{\n            emit mix_result(msg.sender,false,total);\n        }\n    \n    }\n    \n     \n    function getParam(uint index1,uint16 index2) private view returns(uint16){     \n           \n           if(index1<6 || index1==31 || index1==32 || (index1>40 && index1<46) || index1==61 || index1==62 || (index1>68 && index1<74)){\n               return paramA[index2];\n           }else if((index1>5 && index1<11) || index1==33 || index1==34 || (index1>45 && index1<51) || index1==63 || index1==64 || (index1>73 && index1<79)){\n               return paramB[index2];\n           }else if((index1>10 && index1<16) || index1==35 || index1==36 || (index1>50 && index1<56) || index1==65 || index1==66 || (index1>78 && index1<84)){\n               return paramC[index2];\n           }else if((index1>15 && index1<21) || index1==37 || index1==38 || (index1>55 && index1<61)|| (index1>83 && index1<89)){\n               return paramD[index2];\n           }else if((index1>25 && index1<31) || index1==39 || index1==40 || index1==67 || index1==68){\n               return paramF[index2];\n           }else{\n               return paramE[index2];\n           }\n    }\n    \n\n    \n    \n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_material_contract\",\"type\":\"address\"}],\"name\":\"set_material_contract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_master\",\"type\":\"address\"}],\"name\":\"set_master\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"city\",\"type\":\"uint16\"},{\"name\":\"id\",\"type\":\"uint16\"},{\"name\":\"proIndex\",\"type\":\"uint8\"},{\"name\":\"mixArray\",\"type\":\"uint8[]\"}],\"name\":\"materialMix\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_manager\",\"type\":\"address\"}],\"name\":\"transferownership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint16\"}],\"name\":\"mix_result\",\"type\":\"event\"}]",
  "bytecode": "608060405260018054600160a060020a031990811673e6987cd613dfda0995a95b3e6acbabececd4137617909155600280548216730ac10bf0342fa2724e93d250751186ba5b659303179055600380549091167365844f2e98495b6c8780f689c5d13bb7f4975d651790553480156200007757600080fd5b5060008054600160a060020a031916331790556040805160a08101825260328152601e6020820152600a9181019190915260056060820181905260016080830152620000c69160049162000200565b506040805160a0810182526064815260326020820152601e91810191909152600a606082015260056080820181905262000101918162000200565b506040805160a08101825260c8815260646020820152603291810191909152601e6060820152600a60808201526200013e90600690600562000200565b506040805160a08101825261012c81526096602082015260649181019190915260326060820152601e60808201526200017c9060079060056200029c565b506040805160a081018252610190815260c860208201526096918101919091526064606082015260326080820152620001ba9060089060056200029c565b506040805160a0810182526101f4815261012c602082015260c8918101919091526096606082015260646080820152620001f99060099060056200029c565b506200031a565b6001830191839082156200028a5791602002820160005b838211156200025857835183826101000a81548161ffff021916908360ff160217905550926020019260020160208160010104928301926001030262000217565b8015620002885782816101000a81549061ffff021916905560020160208160010104928301926001030262000258565b505b5062000298929150620002f5565b5090565b6001830191839082156200028a5791602002820160005b838211156200025857835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302620002b3565b6200031791905b808211156200029857805461ffff19168155600101620002fc565b90565b610f82806200032a6000396000f3006080604052600436106100535763ffffffff60e060020a600035041663481c6a758114610058578063771c81ed1461008957806386795e8d146100ac578063a703a423146100cd578063e8b5b7961461013f575b600080fd5b34801561006457600080fd5b5061006d610160565b60408051600160a060020a039092168252519081900360200190f35b34801561009557600080fd5b506100aa600160a060020a036004351661016f565b005b3480156100b857600080fd5b506100aa600160a060020a03600435166101b5565b3480156100d957600080fd5b5060408051606435600481810135602081810285810182019096528185526100aa9561ffff8435811696602480359092169660ff604435169636969095608495939492909201929091829190850190849080828437509497506101fb9650505050505050565b34801561014b57600080fd5b506100aa600160a060020a0360043516610c77565b600054600160a060020a031681565b600054600160a060020a0316331461018657600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031633146101cc57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254604080517f4c0c15c400000000000000000000000000000000000000000000000000000000815261ffff80881660048301528616602482015290516000928392839283928392839283928392600160a060020a0390911691634c0c15c49160448082019260209290919082900301818787803b15801561027d57600080fd5b505af1158015610291573d6000803e3d6000fd5b505050506040513d60208110156102a757600080fd5b5051600160a060020a031633146102bd57600080fd5b600254604080517fa42199fb0000000000000000000000000000000000000000000000000000000081523360048201528151600160a060020a039093169263a42199fb926024808401939192918290030181600087803b15801561032057600080fd5b505af1158015610334573d6000803e3d6000fd5b505050506040513d604081101561034a57600080fd5b508051602090910151909850965061ffff8c811690891614801561037557508661ffff168b61ffff16145b151561038057600080fd5b6000925042895160405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083106103dc5780518252601f1990920191602091820191016103bd565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912094505050600160ff8c16141590506104c257600260009054906101000a9004600160a060020a0316600160a060020a031663ec4f5f6a8d8d6040518363ffffffff1660e060020a028152600401808361ffff1661ffff1681526020018261ffff1661ffff1681526020019250505061014060405180830381600087803b15801561048e57600080fd5b505af11580156104a2573d6000803e3d6000fd5b505050506040513d6101408110156104b957600080fd5b5051955061079a565b8960ff166002141561057c57600260009054906101000a9004600160a060020a0316600160a060020a031663ec4f5f6a8d8d6040518363ffffffff1660e060020a028152600401808361ffff1661ffff1681526020018261ffff1661ffff1681526020019250505061014060405180830381600087803b15801561054557600080fd5b505af1158015610559573d6000803e3d6000fd5b505050506040513d61014081101561057057600080fd5b5060200151955061079a565b8960ff166003141561063657600260009054906101000a9004600160a060020a0316600160a060020a031663ec4f5f6a8d8d6040518363ffffffff1660e060020a028152600401808361ffff1661ffff1681526020018261ffff1661ffff1681526020019250505061014060405180830381600087803b1580156105ff57600080fd5b505af1158015610613573d6000803e3d6000fd5b505050506040513d61014081101561062a57600080fd5b5060400151955061079a565b8960ff16600414156106f057600260009054906101000a9004600160a060020a0316600160a060020a031663ec4f5f6a8d8d6040518363ffffffff1660e060020a028152600401808361ffff1661ffff1681526020018261ffff1661ffff1681526020019250505061014060405180830381600087803b1580156106b957600080fd5b505af11580156106cd573d6000803e3d6000fd5b505050506040513d6101408110156106e457600080fd5b5060600151955061079a565b600260009054906101000a9004600160a060020a0316600160a060020a031663ec4f5f6a8d8d6040518363ffffffff1660e060020a028152600401808361ffff1661ffff1681526020018261ffff1661ffff1681526020019250505061014060405180830381600087803b15801561076757600080fd5b505af115801561077b573d6000803e3d6000fd5b505050506040513d61014081101561079257600080fd5b506080015195505b610874600260009054906101000a9004600160a060020a0316600160a060020a0316632affdab08e8e6040518363ffffffff1660e060020a028152600401808361ffff1661ffff1681526020018261ffff1661ffff1681526020019250505060a060405180830381600087803b15801561081357600080fd5b505af1158015610827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060a081101561084c57600080fd5b5060ff6000198d01166005811061085f57fe5b602002015160ff88169063ffffffff610cbd16565b945060008560ff161015801561088d5750600a8560ff16105b151561089857600080fd5b60028560ff1610156108ad576000935061091e565b60018560ff161180156108c3575060048560ff16105b156108d1576001935061091e565b60038560ff161180156108e7575060068560ff16105b156108f5576002935061091e565b60058560ff1611801561090b575060088560ff16105b15610919576003935061091e565b600493505b5060005b88518160ff1610156109765761096c61095b8a8360ff1681518110151561094557fe5b9060200190602002015160ff168660ff16610cdc565b61ffff85169063ffffffff610f3d16565b9250600101610922565b5060005b88518160ff161015610b30578960ff16600214156109e357601e898260ff168151811015156109a557fe5b9060200190602002015160ff168115156109bb57fe5b06898260ff168151811015156109cd57fe5b60ff909216602092830290910190910152610a7a565b8960ff1660031415610a02576028898260ff168151811015156109a557fe5b8960ff1660041415610a2157603c898260ff168151811015156109a557fe5b8960ff1660051415610a7a576044898260ff16815181101515610a4057fe5b9060200190602002015160ff16811515610a5657fe5b06898260ff16815181101515610a6857fe5b60ff9092166020928302909101909101525b6003548951600160a060020a0390911690634771e579906000198d01906001908d9060ff8716908110610aa957fe5b602090810290910101516040805160e060020a63ffffffff871602815260ff948516600482015292909103929092166024820152336044820152600160648201529051608480830192600092919082900301818387803b158015610b0c57600080fd5b505af1158015610b20573d6000803e3d6000fd5b50506001909201915061097a9050565b61ffff8381166103e88483160690911611610c2a57600260009054906101000a9004600160a060020a0316600160a060020a031663680ae9d28d8d60018e036040518463ffffffff1660e060020a028152600401808461ffff1661ffff1681526020018361ffff1661ffff1681526020018260ff1660ff1681526020019350505050600060405180830381600087803b158015610bcc57600080fd5b505af1158015610be0573d6000803e3d6000fd5b5050604080516001815261ffff8716602082015281513394507f01da62a98e6d0b80cebc418379f430a20beb54b0d2366d4d3e19fb72ea13e1c593509081900390910190a2610c69565b604080516000815261ffff85166020820152815133927f01da62a98e6d0b80cebc418379f430a20beb54b0d2366d4d3e19fb72ea13e1c5928290030190a25b505050505050505050505050565b600054600160a060020a03163314610c8e57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082820160ff8085169082161015610cd557600080fd5b9392505050565b60006006831080610ced575082601f145b80610cf85750826020145b80610d0e5750602883118015610d0e5750602e83105b80610d19575082603d145b80610d24575082603e145b80610d3a5750604483118015610d3a5750604a83105b15610d7157600461ffff831660058110610d5057fe5b601091828204019190066002029054906101000a900461ffff169050610f37565b600583118015610d815750600b83105b80610d8c5750826021145b80610d975750826022145b80610dad5750602d83118015610dad5750603383105b80610db8575082603f145b80610dc35750826040145b80610dd95750604983118015610dd95750604f83105b15610dee57600561ffff8316818110610d5057fe5b600a83118015610dfe5750601083105b80610e095750826023145b80610e145750826024145b80610e2a5750603283118015610e2a5750603883105b80610e355750826041145b80610e405750826042145b80610e565750604e83118015610e565750605483105b15610e6c57600661ffff831660058110610d5057fe5b600f83118015610e7c5750601583105b80610e875750826025145b80610e925750826026145b80610ea85750603783118015610ea85750603d83105b80610ebe5750605383118015610ebe5750605983105b15610ed457600761ffff831660058110610d5057fe5b601983118015610ee45750601f83105b80610eef5750826027145b80610efa5750826028145b80610f055750826043145b80610f105750826044145b15610f2657600961ffff831660058110610d5057fe5b600861ffff831660058110610d5057fe5b92915050565b600082820161ffff8085169082161015610cd557600080fd00a165627a7a72305820567b94dacd745b613668af5a9b46f4006e72c142bcbd5213821cf50b6b7611c90029"
}