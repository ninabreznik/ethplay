{
  "address": "0x85eade0b7433545c63a23c4b72587e8653e01798",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CnusUpToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "500",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-13\n*/\n\n// File: openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\n\npragma solidity ^0.4.24;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\IERC20.sol\n\npragma solidity ^0.4.24;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: node_modules\\openzeppelin-solidity\\contracts\\math\\SafeMath.sol\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\n// File: contracts\\CnusUpToken.sol\n\npragma solidity ^0.4.24;\n\n\n\n\n/** @title CnusUp Token\n  * An ERC20-compliant token.\n  */\ncontract CnusUpToken is ERC20, Ownable {\n    using SafeMath for uint256;\n\n    bool public transfersEnabled = false;\n\n    string public name = \"CoinUs CnusUp\";\n    string public symbol = \"CNUSUP\";\n    uint256 public decimals = 18;\n\n    event TransfersAllowed(bool _transfersEnabled);\n\n    modifier transfersAllowed {\n        require(transfersEnabled);\n        _;\n    }\n\n    // validates an address - currently only checks that it isn't null\n    modifier validAddress(address _address) {\n        require(_address != address(0));\n        _;\n    }\n\n    // verifies that the address is different than this contract address\n    modifier notThis(address _address) {\n        require(_address != address(this));\n        _;\n    }\n\n    function disableTransfers(bool _disable) public onlyOwner {\n        transfersEnabled = !_disable;\n        emit TransfersAllowed(transfersEnabled);\n    }\n\n    function batchIssue(address[] memory _to, uint256[] memory _amount)\n        public\n        onlyOwner\n    {\n        require(_to.length == _amount.length);\n        for(uint i = 0; i < _to.length; i++) {\n            require(_to[i] != address(0));\n            require(_to[i] != address(this));\n            _mint(_to[i], _amount[i]);\n        }\n    }\n\n    function checkMisplacedTokenBalance(\n        address _tokenAddress\n    )\n    public\n    view\n    returns (uint256)\n    {\n        ERC20 unknownToken = ERC20(_tokenAddress);\n        return unknownToken.balanceOf(address(this));\n    }\n\n    // Allow transfer of accidentally sent ERC20 tokens\n    function refundMisplacedToken(\n        address _recipient,\n        address _tokenAddress,\n        uint256 _value\n    )\n    public\n    onlyOwner\n    {\n        _transferMisplacedToken(_recipient, _tokenAddress, _value);\n    }\n\n    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool success) {\n        assert(super.transfer(_to, _value));\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool success) {\n        assert(super.transferFrom(_from, _to, _value));\n        return true;\n    }\n\n    function _transferMisplacedToken(\n        address _recipient,\n        address _tokenAddress,\n        uint256 _value\n    )\n    internal\n    {\n        require(_recipient != address(0));\n        ERC20 unknownToken = ERC20(_tokenAddress);\n        require(unknownToken.balanceOf(address(this)) >= _value, \"Insufficient token balance.\");\n        require(unknownToken.transfer(_recipient, _value));\n    }\n}",
  "bytecode": "6003805460a060020a60ff021916905560c0604052600d60808190527f436f696e557320436e757355700000000000000000000000000000000000000060a090815261004e91600491906100ea565b506040805180820190915260068082527f434e5553555000000000000000000000000000000000000000000000000000006020909201918252610093916005916100ea565b50601260065560038054600160a060020a031916331790819055604051600160a060020a0391909116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3610185565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012b57805160ff1916838001178555610158565b82800160010185558215610158579182015b8281111561015857825182559160200191906001019061013d565b50610164929150610168565b5090565b61018291905b80821115610164576000815560010161016e565b90565b610f9980620001956000396000f3006080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610116578063095ea7b3146101a05780631608f18f146101d857806318160ddd146101f457806323b872dd1461021b578063313ce56714610245578063395093511461025a5780634eb99f141461027e578063565dc0ed1461029f57806370a08231146102c9578063715018a6146102ea57806378ac81c6146102ff5780638da5cb5b1461038d5780638f32d59b146103be57806395d89b41146103d3578063a457c2d7146103e8578063a9059cbb1461040c578063bef97c8714610430578063dd62ed3e14610445578063f2fde38b1461046c575b600080fd5b34801561012257600080fd5b5061012b61048d565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016557818101518382015260200161014d565b50505050905090810190601f1680156101925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ac57600080fd5b506101c4600160a060020a036004351660243561051b565b604080519115158252519081900360200190f35b3480156101e457600080fd5b506101f26004351515610599565b005b34801561020057600080fd5b5061020961062a565b60408051918252519081900360200190f35b34801561022757600080fd5b506101c4600160a060020a0360043581169060243516604435610630565b34801561025157600080fd5b50610209610679565b34801561026657600080fd5b506101c4600160a060020a036004351660243561067f565b34801561028a57600080fd5b50610209600160a060020a036004351661072f565b3480156102ab57600080fd5b506101f2600160a060020a03600435811690602435166044356107c7565b3480156102d557600080fd5b50610209600160a060020a03600435166107ea565b3480156102f657600080fd5b506101f2610805565b34801561030b57600080fd5b50604080516020600480358082013583810280860185019096528085526101f295369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061086f9650505050505050565b34801561039957600080fd5b506103a261093c565b60408051600160a060020a039092168252519081900360200190f35b3480156103ca57600080fd5b506101c461094b565b3480156103df57600080fd5b5061012b61095c565b3480156103f457600080fd5b506101c4600160a060020a03600435166024356109b7565b34801561041857600080fd5b506101c4600160a060020a0360043516602435610a02565b34801561043c57600080fd5b506101c4610a49565b34801561045157600080fd5b50610209600160a060020a0360043581169060243516610a6a565b34801561047857600080fd5b506101f2600160a060020a0360043516610a95565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105135780601f106104e857610100808354040283529160200191610513565b820191906000526020600020905b8154815290600101906020018083116104f657829003601f168201915b505050505081565b6000600160a060020a038316151561053257600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b6105a161094b565b15156105ac57600080fd5b60038054740100000000000000000000000000000000000000008315810274ff0000000000000000000000000000000000000000199092169190911791829055604080519190920460ff161515815290517f5854ddf9a9b69cf8f2802ec78fb8d6bbf299e949955d9361212e652f4fec0e829181900360200190a150565b60025490565b60035460009074010000000000000000000000000000000000000000900460ff16151561065c57600080fd5b610667848484610ab4565b151561066f57fe5b5060019392505050565b60065481565b6000600160a060020a038316151561069657600080fd5b336000908152600160209081526040808320600160a060020a03871684529091529020546106ca908363ffffffff610b4716565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000918391600160a060020a038316916370a0823191602480830192602092919082900301818887803b15801561079457600080fd5b505af11580156107a8573d6000803e3d6000fd5b505050506040513d60208110156107be57600080fd5b50519392505050565b6107cf61094b565b15156107da57600080fd5b6107e5838383610b60565b505050565b600160a060020a031660009081526020819052604090205490565b61080d61094b565b151561081857600080fd5b600354604051600091600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600061087961094b565b151561088457600080fd5b815183511461089257600080fd5b5060005b82518110156107e55782516000908490839081106108b057fe5b60209081029091010151600160a060020a031614156108ce57600080fd5b825130908490839081106108de57fe5b60209081029091010151600160a060020a031614156108fc57600080fd5b610934838281518110151561090d57fe5b90602001906020020151838381518110151561092557fe5b90602001906020020151610d2f565b600101610896565b600354600160a060020a031690565b600354600160a060020a0316331490565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105135780601f106104e857610100808354040283529160200191610513565b6000600160a060020a03831615156109ce57600080fd5b336000908152600160209081526040808320600160a060020a03871684529091529020546106ca908363ffffffff610dd916565b60035460009074010000000000000000000000000000000000000000900460ff161515610a2e57600080fd5b610a388383610df0565b1515610a4057fe5b50600192915050565b60035474010000000000000000000000000000000000000000900460ff1681565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b610a9d61094b565b1515610aa857600080fd5b610ab181610dfd565b50565b600160a060020a0383166000908152600160209081526040808320338452909152812054821115610ae457600080fd5b600160a060020a0384166000908152600160209081526040808320338452909152902054610b18908363ffffffff610dd916565b600160a060020a038516600090815260016020908152604080832033845290915290205561066f848484610e7b565b600082820183811015610b5957600080fd5b9392505050565b6000600160a060020a0384161515610b7757600080fd5b50604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905183918391600160a060020a038416916370a082319160248083019260209291908290030181600087803b158015610bdd57600080fd5b505af1158015610bf1573d6000803e3d6000fd5b505050506040513d6020811015610c0757600080fd5b50511015610c7657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f496e73756666696369656e7420746f6b656e2062616c616e63652e0000000000604482015290519081900360640190fd5b80600160a060020a031663a9059cbb85846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610cf257600080fd5b505af1158015610d06573d6000803e3d6000fd5b505050506040513d6020811015610d1c57600080fd5b50511515610d2957600080fd5b50505050565b600160a060020a0382161515610d4457600080fd5b600254610d57908263ffffffff610b4716565b600255600160a060020a038216600090815260208190526040902054610d83908263ffffffff610b4716565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008083831115610de957600080fd5b5050900390565b6000610a40338484610e7b565b600160a060020a0381161515610e1257600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038316600090815260208190526040902054811115610ea057600080fd5b600160a060020a0382161515610eb557600080fd5b600160a060020a038316600090815260208190526040902054610ede908263ffffffff610dd916565b600160a060020a038085166000908152602081905260408082209390935590841681522054610f13908263ffffffff610b4716565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35050505600a165627a7a7230582045395dcdc0ed3eb25b09923e37f99518023013a8013ebd2a0fe21b3d1c7063da0029"
}