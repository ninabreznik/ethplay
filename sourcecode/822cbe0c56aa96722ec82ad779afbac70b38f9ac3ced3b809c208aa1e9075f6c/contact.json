{
  "address": "0xe7fad78cf9034b36b6a7dc2951e5acf8d28e4dc7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoAngel",
  "compilerVersion": "v0.4.19-nightly.2017.10.18+commit.f7ca2421",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-20\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n\ncontract CryptoAngelConstants {\n\n  string constant TOKEN_NAME = \"CryptoAngel\";\n  string constant TOKEN_SYMBOL = \"ANGEL\";\n  uint constant TOKEN_DECIMALS = 18;\n  uint8 constant TOKEN_DECIMALS_UINT8 = uint8(TOKEN_DECIMALS);\n  uint constant TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS;\n\n  uint constant TEAM_TOKENS =   18000000 * TOKEN_DECIMAL_MULTIPLIER;\n  uint constant HARD_CAP_TOKENS =   88000000 * TOKEN_DECIMAL_MULTIPLIER;\n  uint constant MINIMAL_PURCHASE = 0.05 ether;\n  uint constant RATE = 1000; // 1ETH = 1000ANGEL\n\n  address constant TEAM_ADDRESS = 0x6941A0FD30198c70b3872D4d1b808e4bFc5A07E1;\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    require(_value > 0);\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n}\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n      require(_value > 0);\n      require(_value <= balances[msg.sender]);\n      // no need to require value <= totalSupply, since that would imply the\n      // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n      address burner = msg.sender;\n      balances[burner] = balances[burner].sub(_value);\n      totalSupply = totalSupply.sub(_value);\n      Burn(burner, _value);\n  }\n\n  /**\n   * @dev Burn tokens from the specified address.\n   * @param _from address The address which you want to burn tokens from.\n   * @param _value uint The amount of tokens to be burned.\n   */\n  function burnFrom(address _from, uint256 _value) public returns (bool) {\n      require(_value > 0);\n      var allowance = allowed[_from][msg.sender];\n      require(allowance >= _value);\n      balances[_from] = balances[_from].sub(_value);\n      totalSupply = totalSupply.sub(_value);\n      allowed[_from][msg.sender] = allowance.sub(_value);\n      Burn(_from, _value);\n      return true;\n  }\n}\n\n\ncontract CryptoAngel is CryptoAngelConstants, MintableToken, BurnableToken {\n\n  mapping (address => bool) public frozenAccount;\n\n  event FrozenFunds(address target, bool frozen);\n\n  /**\n   * @param target Address to be frozen\n   * @param freeze either to freeze it or not\n   */\n  function freezeAccount(address target, bool freeze) public onlyOwner {\n      frozenAccount[target] = freeze;\n      FrozenFunds(target, freeze);\n  }\n    \n  /**\n   * @dev Returns token's name.\n   */\n  function name() pure public returns (string _name) {\n      return TOKEN_NAME;\n  }\n\n  /**\n   * @dev Returns token's symbol.\n   */\n  function symbol() pure public returns (string _symbol) {\n      return TOKEN_SYMBOL;\n  }\n\n  /**\n   * @dev Returns number of decimals.\n   */\n  function decimals() pure public returns (uint8 _decimals) {\n      return TOKEN_DECIMALS_UINT8;\n  }\n\n  /**\n    * @dev Function to mint tokens\n    * @param _to The address that will receive the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n  */\n    function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\n        require(!frozenAccount[_to]);\n        super.mint(_to, _amount);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(!frozenAccount[msg.sender]);\n        return super.transfer(_to, _value);\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(!frozenAccount[_from]);\n        require(!frozenAccount[_to]);\n        return super.transferFrom(_from, _to, _value);\n    }\n}\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet\n * as they arrive.\n */\ncontract Crowdsale is CryptoAngelConstants{\n  using SafeMath for uint256;\n\n  // The token being sold\n  CryptoAngel public token;\n\n  // start and end timestamps where investments are allowed (both inclusive)\n  uint256 public startTime;\n  uint256 public endTime;\n\n  // address where funds are collected\n  address public wallet;\n\n  // how many token units a buyer gets per wei\n  uint256 public rate;\n\n  // amount of raised money in wei\n  uint256 public weiRaised;\n\n  // maximum amount of tokens to mint.\n  uint public hardCap;\n\n  /**\n   * event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n\n  function Crowdsale(uint256 _startTime, uint256 _endTime, address _wallet) public {\n    require(_startTime >= now);\n    require(_endTime >= _startTime);\n    require(_wallet != address(0));\n\n    token = createTokenContract();\n    startTime = _startTime;\n    endTime = _endTime;\n    hardCap = HARD_CAP_TOKENS;\n    wallet = _wallet;\n    rate = RATE;\n  }\n\n  // creates the token to be sold.\n  function createTokenContract() internal returns (CryptoAngel) {\n    return new CryptoAngel();\n  }\n\n  // fallback function can be used to buy tokens\n  function() public payable {\n    buyTokens(msg.sender, msg.value);\n  }\n\n  // low level token purchase function\n  function buyTokens(address beneficiary, uint256 weiAmount) internal {\n    require(beneficiary != address(0));\n    require(validPurchase(weiAmount, token.totalSupply()));\n\n    // calculate token amount to be created\n    uint256 tokens = calculateTokens(token.totalSupply(), weiAmount);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    token.mint(beneficiary, tokens);\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n    forwardFunds(weiAmount);\n  }\n\n  // @return number of tokens which should be created\n  function calculateTokens(uint256 totalTokens, uint256 weiAmount) internal view returns (uint256) {\n\n    uint256 numOfTokens = weiAmount.mul(RATE);\n\n    if (totalTokens <= hardCap.mul(30).div(100)) { // first 30% of available tokens\n        numOfTokens += numOfTokens.mul(30).div(100);\n    }\n    else if (totalTokens <= hardCap.mul(45).div(100)) { // 30-45% of available tokens\n        numOfTokens += numOfTokens.mul(20).div(100);\n    }\n    else if (totalTokens <= hardCap.mul(60).div(100)) { // 45-60% of available tokens\n        numOfTokens += numOfTokens.mul(10).div(100);\n    }  \n   return numOfTokens;\n  }\n\n  // send ether to the fund collection wallet\n  // override to create custom fund forwarding mechanisms\n  function forwardFunds(uint amountWei) internal {\n    wallet.transfer(amountWei);\n  }\n\n  // @return true if the transaction can buy tokens\n  function validPurchase(uint _amountWei, uint _totalSupply) internal view returns (bool) {\n    bool withinPeriod = now >= startTime && now <= endTime;\n    bool nonMinimalPurchase = _amountWei >= MINIMAL_PURCHASE;\n    bool hardCapNotReached = _totalSupply <= hardCap;\n    return withinPeriod && nonMinimalPurchase && hardCapNotReached;\n  }\n\n  // @return true if crowdsale event has ended\n  function hasEnded() internal view returns (bool) {\n    return now > endTime;\n  }\n}\n\n\n/**\n * @title FinalizableCrowdsale\n * @dev Extension of Crowdsale where an owner can do extra work\n * after finishing.\n */\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\n  using SafeMath for uint256;\n\n  bool public isFinalized = false;\n\n  event Finalized();\n\n  function FinalizableCrowdsale(uint _startTime, uint _endTime, address _wallet) public\n            Crowdsale(_startTime, _endTime, _wallet) {\n    }\n\n  /**\n   * @dev Must be called after crowdsale ends, to do some extra finalization\n   * work. Calls the contract's finalization function.\n   */\n  function finalize() onlyOwner public {\n    require(!isFinalized);\n    require(hasEnded());\n    isFinalized = true;\n    token.finishMinting();\n    token.transferOwnership(owner);\n    Finalized();\n  }\n\n  modifier notFinalized() {\n    require(!isFinalized);\n    _;\n  }\n}\n\n\ncontract CryptoAngelCrowdsale is CryptoAngelConstants, FinalizableCrowdsale {\n\n    function CryptoAngelCrowdsale(\n            uint _startTime,\n            uint _endTime,\n            address _wallet\n    ) public\n        FinalizableCrowdsale(_startTime, _endTime, _wallet) {\n        token.mint(TEAM_ADDRESS, TEAM_TOKENS);\n    }\n\n  /**\n   * @dev Allows the current owner to set the new start time if crowdsale is not finalized.\n   * @param _startTime new end time.\n   */\n    function setStartTime(uint256 _startTime) public onlyOwner notFinalized {\n        require(_startTime < endTime);\n        startTime = _startTime;\n    }\n\n  /**\n   * @dev Allows the current owner to set the new end time if crowdsale is not finalized.\n   * @param _endTime new end time.\n   */\n    function setEndTime(uint256 _endTime) public onlyOwner notFinalized {\n        require(_endTime > startTime);\n        endTime = _endTime;\n    }\n\n  /**\n   * @dev Allows the current owner to change the hard cap if crowdsale is not finalized.\n   * @param _hardCapTokens new hard cap.\n   */\n    function setHardCap(uint256 _hardCapTokens) public onlyOwner notFinalized {\n        require(_hardCapTokens * TOKEN_DECIMAL_MULTIPLIER > hardCap);\n        hardCap = _hardCapTokens * TOKEN_DECIMAL_MULTIPLIER;\n    }\n}",
  "bytecode": ""
}