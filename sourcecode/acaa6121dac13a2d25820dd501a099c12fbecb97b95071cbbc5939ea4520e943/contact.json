{
  "address": "0x06778e4bd396be8a0a161acc3762ae94b8d68537",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LottodaoToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-24\n*/\n\npragma solidity 0.4.24;\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: contracts/lottodaotoken.sol\n\ncontract LottodaoTemplate {\n    function fund(uint256 withdrawn) public payable;\n    function redeem(address account, uint256 amount) public;\n}\n\ncontract LottodaoToken is BasicToken {\n    string public name = \"Lottodao Token\";\n    string public symbol = \"LDAO\";\n    uint8 public decimals = 0;\n    uint256 public cap = 5000000;\n\n    uint256 public raised;\n    \n    address public owner;\n    uint256 public initialTokenPrice;\n\n    uint256 public ethBalance;\n    address private _lottodaoAddress;\n    uint256 private _withdrawLimit = 80 ether;\n    uint256 private _withdrawn;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event Mint(address indexed to, uint256 amount);\n    event TokenPurchase(address indexed to, uint256 units);\n    event Redeem(address indexed to, uint256 units);\n\n    constructor (address _owner, uint256 _initialTokenPrice) public {\n        initialTokenPrice = _initialTokenPrice;\n        owner = _owner;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\n        require(totalSupply_ + _amount <= cap);\n\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        \n        return true;\n    }\n\n    function _mint(address _to, uint256 _amount) private returns (bool) {\n        require(_amount>0 && totalSupply_ + _amount <= cap);\n\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        \n        return true;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n    function setLottodaoAddress(address lottodaoAddress) public onlyOwner {\n        _lottodaoAddress = lottodaoAddress;\n    }\n\n    /*\n        transfer funds to Lottodo smart contract\n    */\n    function transferFundsToContract() public onlyOwner {\n        require(_lottodaoAddress!=0x0000000000000000000000000000000000000000 && ethBalance>0);\n        LottodaoTemplate t = LottodaoTemplate(_lottodaoAddress);\n        uint256 bal = ethBalance;\n        ethBalance = 0;\n        t.fund.value(bal)(_withdrawn);\n    }\n\n    function getWithdrawalLimit() public view returns (uint256){\n        uint8 tranch = getTranch(totalSupply_);\n        uint256 max = _withdrawLimit.mul(tranch);\n        uint256 bal = max-_withdrawn;\n        if(bal>ethBalance){\n            bal = ethBalance;\n        }\n        return bal;\n    }\n\n    function withdrawFunds(address to, uint256 amount) public onlyOwner {\n        uint256 available = getWithdrawalLimit();\n        require(amount<=available);\n        _withdrawn = _withdrawn.add(amount);\n        ethBalance = ethBalance.sub(amount);\n        to.transfer(amount);\n    }\n\n\n    function redeem(address account) public{\n        require(_lottodaoAddress!=0x0000000000000000000000000000000000000000 && (msg.sender==owner || msg.sender==account) && balances[account]>0);\n        uint256 bal = balances[account];\n        balances[account] = 0;\n        balances[_lottodaoAddress].add(bal);\n        LottodaoTemplate t = LottodaoTemplate(_lottodaoAddress);\n        t.redeem(account, bal);\n        emit Redeem(account, bal);\n    }\n\n \n    function getTranchEnd(uint8 tranch) public view returns (uint256){\n        if(tranch==1){\n            return cap.div(2).add(cap.div(8));\n        }\n        else if(tranch==2){\n            return cap.div(8).add(getTranchEnd(1));\n        }\n        else if(tranch==3){\n            return cap.div(8).add(getTranchEnd(2));\n        }\n        else{\n            return cap;\n        }\n    }\n\n    function getTranch(uint256 units) public view returns (uint8){\n        if(units<getTranchEnd(1)){\n            return 1;\n        }\n        else if(units<getTranchEnd(2)){\n            return 2;\n        }\n        else if(units<getTranchEnd(3)){\n            return 3;\n        }\n        else{\n            return 4;\n        }\n    }\n\n    function getTokenPriceForTranch(uint8 tranch) public view returns (uint256){\n        \n        if(tranch==1){\n            return initialTokenPrice;\n        }\n        else if(tranch==2){\n            return initialTokenPrice.mul(5).div(10).add(getTokenPriceForTranch(1));\n        }\n        else if(tranch==3){\n             return initialTokenPrice.mul(5).div(10).add(getTokenPriceForTranch(2));\n        }\n        else{\n             return initialTokenPrice.mul(5).div(10).add(getTokenPriceForTranch(3));\n        }\n    }\n\n    function getNumTokensForEth(uint256 eth) public view returns (uint256 units, uint256 balance){\n       uint8 tranch = getTranch(totalSupply_);\n       uint256 start = totalSupply_;\n       uint256 _units = 0;\n       uint256 bal = eth;\n       while(tranch<=4 && bal>0){\n            uint256 tranchEnd = getTranchEnd(tranch);\n            uint256 unitLimit = tranchEnd.sub(start);\n            uint256 price = getTokenPriceForTranch(tranch);\n            uint256 tranchUnits = bal.div(price);\n            if(tranchUnits>unitLimit){\n                tranchUnits = unitLimit;\n            }\n            _units = _units.add(tranchUnits);\n            bal = bal.sub(tranchUnits.mul(price));\n            start = tranchEnd;\n            tranch += 1;\n       }\n       units = _units;\n       balance = bal;\n       \n       if(_units.add(totalSupply_)<=cap){\n            units = _units;\n            balance = bal;\n       }\n       else{\n           uint256 dif = _units.add(totalSupply_).sub(cap);\n           units = _units.sub(dif);\n           balance = bal.add(dif);\n       }\n       \n\n    }\n\n    function purchase() public payable{\n        (uint256 units, uint256 remainder) = getNumTokensForEth(msg.value);\n        if(units>0){\n            _mint(msg.sender,units);\n            if(remainder>0){\n                uint256 amnt = msg.value.sub(remainder);\n                ethBalance = ethBalance.add(amnt);\n                raised = raised.add(amnt);\n                msg.sender.transfer(remainder);\n            }\n            else{\n                ethBalance = ethBalance.add(msg.value);\n                raised = raised.add(msg.value);\n            }\n        }\n        else{\n            if(remainder>0){\n                msg.sender.transfer(remainder);\n            }\n        }\n        \n    }\n\n    function() public payable {\n        ethBalance.add(msg.value);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tranch\",\"type\":\"uint8\"}],\"name\":\"getTranchEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tranch\",\"type\":\"uint8\"}],\"name\":\"getTokenPriceForTranch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"getNumTokensForEth\",\"outputs\":[{\"name\":\"units\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferFundsToContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lottodaoAddress\",\"type\":\"address\"}],\"name\":\"setLottodaoAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWithdrawalLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"getTranch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_initialTokenPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526040805190810160405280600e81526020017f4c6f74746f64616f20546f6b656e00000000000000000000000000000000000081525060029080519060200190620000519291906200015b565b506040805190810160405280600481526020017f4c44414f00000000000000000000000000000000000000000000000000000000815250600390805190602001906200009f9291906200015b565b506000600460006101000a81548160ff021916908360ff160217905550624c4b406005556804563918244f400000600b55348015620000dd57600080fd5b5060405160408062001edf83398101806040528101908080519060200190929190805190602001909291905050508060088190555081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200020a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019e57805160ff1916838001178555620001cf565b82800160010185558215620001cf579182015b82811115620001ce578251825591602001919060010190620001b1565b5b509050620001de9190620001e2565b5090565b6200020791905b8082111562000203576000816000905550600101620001e9565b5090565b90565b611cc5806200021a6000396000f300608060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461014b5780630f4131da146101db57806318160ddd1461021f5780632ca0228a1461024a578063313ce56714610275578063355274ea146102a65780633633b5ca146102d157806340c10f19146103155780634e6630b01461037a578063518e55d0146103a557806357f5c3fd146103ed57806364edfbf01461040457806370a082311461040e5780638da5cb5b1461046557806395a2251f146104bc57806395d89b41146104ff578063a9059cbb1461058f578063b3c237d9146105f4578063b73dfadd14610637578063c107532914610662578063ed76a82b146106af578063f0ea4bfc146106f6578063f2fde38b14610721575b6101483460095461076490919063ffffffff16565b50005b34801561015757600080fd5b50610160610780565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101a0578082015181840152602081019050610185565b50505050905090810190601f1680156101cd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e757600080fd5b50610209600480360381019080803560ff16906020019092919050505061081e565b6040518082815260200191505060405180910390f35b34801561022b57600080fd5b50610234610903565b6040518082815260200191505060405180910390f35b34801561025657600080fd5b5061025f61090d565b6040518082815260200191505060405180910390f35b34801561028157600080fd5b5061028a610913565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102b257600080fd5b506102bb610926565b6040518082815260200191505060405180910390f35b3480156102dd57600080fd5b506102ff600480360381019080803560ff16906020019092919050505061092c565b6040518082815260200191505060405180910390f35b34801561032157600080fd5b50610360600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a3e565b604051808215151515815260200191505060405180910390f35b34801561038657600080fd5b5061038f610c1d565b6040518082815260200191505060405180910390f35b3480156103b157600080fd5b506103d060048036038101908080359060200190929190505050610c23565b604051808381526020018281526020019250505060405180910390f35b3480156103f957600080fd5b50610402610d91565b005b61040c610f1c565b005b34801561041a57600080fd5b5061044f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611075565b6040518082815260200191505060405180910390f35b34801561047157600080fd5b5061047a6110bd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104c857600080fd5b506104fd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110e3565b005b34801561050b57600080fd5b50610514611449565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610554578082015181840152602081019050610539565b50505050905090810190601f1680156105815780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561059b57600080fd5b506105da600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114e7565b604051808215151515815260200191505060405180910390f35b34801561060057600080fd5b50610635600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611706565b005b34801561064357600080fd5b5061064c6117a6565b6040518082815260200191505060405180910390f35b34801561066e57600080fd5b506106ad600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506117f3565b005b3480156106bb57600080fd5b506106da600480360381019080803590602001909291905050506118ec565b604051808260ff1660ff16815260200191505060405180910390f35b34801561070257600080fd5b5061070b611946565b6040518082815260200191505060405180910390f35b34801561072d57600080fd5b50610762600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061194c565b005b6000818301905082811015151561077757fe5b80905092915050565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108165780601f106107eb57610100808354040283529160200191610816565b820191906000526020600020905b8154815290600101906020018083116107f957829003601f168201915b505050505081565b600060018260ff161415610870576108696108456008600554611aa490919063ffffffff16565b61085b6002600554611aa490919063ffffffff16565b61076490919063ffffffff16565b90506108fe565b60028260ff1614156108b4576108ad610889600161081e565b61089f6008600554611aa490919063ffffffff16565b61076490919063ffffffff16565b90506108fe565b60038260ff1614156108f8576108f16108cd600261081e565b6108e36008600554611aa490919063ffffffff16565b61076490919063ffffffff16565b90506108fe565b60055490505b919050565b6000600154905090565b60085481565b600460009054906101000a900460ff1681565b60055481565b600060018260ff161415610944576008549050610a39565b60028260ff16141561099b5761099461095d600161092c565b610986600a6109786005600854611aba90919063ffffffff16565b611aa490919063ffffffff16565b61076490919063ffffffff16565b9050610a39565b60038260ff1614156109f2576109eb6109b4600261092c565b6109dd600a6109cf6005600854611aba90919063ffffffff16565b611aa490919063ffffffff16565b61076490919063ffffffff16565b9050610a39565b610a366109ff600361092c565b610a28600a610a1a6005600854611aba90919063ffffffff16565b611aa490919063ffffffff16565b61076490919063ffffffff16565b90505b919050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a9c57600080fd5b600554826001540111151515610ab157600080fd5b610ac68260015461076490919063ffffffff16565b600181905550610b1d826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461076490919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60095481565b6000806000806000806000806000806000610c3f6001546118ec565b98506001549750600096508b95505b60048960ff1611158015610c625750600086115b15610cfd57610c708961081e565b9450610c858886611af290919063ffffffff16565b9350610c908961092c565b9250610ca58387611aa490919063ffffffff16565b915083821115610cb3578391505b610cc6828861076490919063ffffffff16565b9650610ced610cde8484611aba90919063ffffffff16565b87611af290919063ffffffff16565b9550849750600189019850610c4e565b869a50859950600554610d1b6001548961076490919063ffffffff16565b111515610d2d57869a50859950610d83565b610d56600554610d486001548a61076490919063ffffffff16565b611af290919063ffffffff16565b9050610d6b8188611af290919063ffffffff16565b9a50610d80818761076490919063ffffffff16565b99505b505050505050505050915091565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610df057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015610e5157506000600954115b1515610e5c57600080fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600954905060006009819055508173ffffffffffffffffffffffffffffffffffffffff1663ca1d209d82600c546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808281526020019150506000604051808303818588803b158015610eff57600080fd5b505af1158015610f13573d6000803e3d6000fd5b50505050505050565b6000806000610f2a34610c23565b92509250600083111561101e57610f413384611b0b565b506000821115610fe257610f5e8234611af290919063ffffffff16565b9050610f758160095461076490919063ffffffff16565b600981905550610f908160065461076490919063ffffffff16565b6006819055503373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610fdc573d6000803e3d6000fd5b50611019565b610ff73460095461076490919063ffffffff16565b6009819055506110123460065461076490919063ffffffff16565b6006819055505b611070565b600082111561106f573373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561106d573d6000803e3d6000fd5b505b5b505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600073ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156111c85750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806111c757508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b5b8015611212575060008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b151561121d57600080fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915060008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061131582600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461076490919063ffffffff16565b50600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16631e9a695084846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156113de57600080fd5b505af11580156113f2573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff167f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a6836040518082815260200191505060405180910390a2505050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114df5780601f106114b4576101008083540402835291602001916114df565b820191906000526020600020905b8154815290600101906020018083116114c257829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561152457600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561157157600080fd5b6115c2826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611af290919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611655826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461076490919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561176257600080fd5b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000806117b76001546118ec565b92506117d18360ff16600b54611aba90919063ffffffff16565b9150600c54820390506009548111156117ea5760095490505b80935050505090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561185157600080fd5b6118596117a6565b905080821115151561186a57600080fd5b61187f82600c5461076490919063ffffffff16565b600c8190555061189a82600954611af290919063ffffffff16565b6009819055508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156118e6573d6000803e3d6000fd5b50505050565b60006118f8600161081e565b8210156119085760019050611941565b611912600261081e565b8210156119225760029050611941565b61192c600361081e565b82101561193c5760039050611941565b600490505b919050565b60065481565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119a857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156119e457600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008183811515611ab157fe5b04905092915050565b600080831415611acd5760009050611aec565b8183029050818382811515611ade57fe5b04141515611ae857fe5b8090505b92915050565b6000828211151515611b0057fe5b818303905092915050565b60008082118015611b225750600554826001540111155b1515611b2d57600080fd5b611b428260015461076490919063ffffffff16565b600181905550611b99826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461076490919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050929150505600a165627a7a72305820c3ccf82dc507ff556e34585d164a06438de88f27f7893d56d39747c9249c378f0029000000000000000000000000d3da12a3ef577f9d6f9b33c5f0db5d64ddfdf6f000000000000000000000000000000000000000000000000000060a24181e4000",
  "constructorArguments": "000000000000000000000000d3da12a3ef577f9d6f9b33c5f0db5d64ddfdf6f000000000000000000000000000000000000000000000000000060a24181e4000"
}