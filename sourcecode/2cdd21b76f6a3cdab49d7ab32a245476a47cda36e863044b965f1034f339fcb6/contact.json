{
  "address": "0xa9f6e3e1f9eb08c3dbf833dde2db1fcfe52ab8d2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "StandardToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-25\n*/\n\npragma solidity ^0.4.11;\n/**\n * Math operations with safety checks\n */\nlibrary SafeMath {\n  function mul(uint a, uint b) internal pure returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint a, uint b) internal pure returns (uint) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint a, uint b) internal pure returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal pure returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal pure  returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  \n}\ncontract ERC20Interface {\n    function totalSupply() public view returns (uint supply);\n    function balanceOf( address owner ) public view returns (uint value);\n    function allowance( address owner, address spender ) public view returns (uint _allowance);\n\n    function transfer( address to, uint value) public returns (bool success);\n    function transferFrom( address from, address to, uint value) public returns (bool success);\n    function approve( address spender, uint value ) public returns (bool success);\n\n    event Transfer( address indexed from, address indexed to, uint value);\n    event Approval( address indexed owner, address indexed spender, uint value);\n}\n\ncontract StandardAuth is ERC20Interface {\n    address      public  owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function setOwner(address _newOwner) public onlyOwner{\n        owner = _newOwner;\n    }\n\n    modifier onlyOwner() {\n      require(msg.sender == owner);\n      _;\n    }\n}\n\ncontract StandardToken is StandardAuth {\n    using SafeMath for uint;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping (address => uint256)) allowed;\n    mapping(address => bool) optionPoolMembers;\n    mapping(address => uint) optionPoolMemberApproveTotal;\n    string public name;\n    string public symbol;\n    uint8 public decimals = 9;\n    uint256 public totalSupply;\n    uint256 public optionPoolLockTotal = 500000000;\n    uint [2][7] public optionPoolMembersUnlockPlans = [\n        [1596211200,15],    //2020-08-01 00:00:00 unlock 15%\n        [1612108800,30],    //2021-02-01 00:00:00 unlock 30%\n        [1627747200,45],    //2021-08-01 00:00:00 unlock 45%\n        [1643644800,60],    //2022-02-01 00:00:00 unlock 60%\n        [1659283200,75],    //2022-08-01 00:00:00 unlock 75%\n        [1675180800,90],    //2023-02-01 00:00:00 unlock 90%\n        [1690819200,100]    //2023-08-01 00:00:00 unlock 100%\n    ];\n    \n    constructor(uint256 _initialAmount, string _tokenName, string _tokenSymbol) public  {\n        balances[msg.sender] = _initialAmount;               \n        totalSupply = _initialAmount;                        \n        name = _tokenName;                                   \n        symbol = _tokenSymbol;\n        optionPoolMembers[0x36b4F89608B5a5d5bd675b13a9d1075eCb64C2B5] = true;\n        optionPoolMembers[0xDdcEb1A0c975Da8f0E0c457e06D6eBfb175570A7] = true;\n        optionPoolMembers[0x46b6bA8ff5b91FF6B76964e143f3573767a20c1C] = true;\n        optionPoolMembers[0xBF95141188dB8FDeFe85Ce2412407A9266d96dA3] = true;\n    }\n\n    modifier verifyTheLock(uint _value) {\n        if(optionPoolMembers[msg.sender] == true) {\n            if(balances[msg.sender] - optionPoolMemberApproveTotal[msg.sender] - _value < optionPoolMembersLockTotalOf(msg.sender)) {\n                revert();\n            } else {\n                _;\n            }\n        } else {\n            _;\n        }\n    }\n    \n    // Function to access name of token .\n    function name() public view returns (string _name) {\n        return name;\n    }\n    // Function to access symbol of token .\n    function symbol() public view returns (string _symbol) {\n        return symbol;\n    }\n    // Function to access decimals of token .\n    function decimals() public view returns (uint8 _decimals) {\n        return decimals;\n    }\n    // Function to access total supply of tokens .\n    function totalSupply() public view returns (uint _totalSupply) {\n        return totalSupply;\n    }\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n    function balanceOf(address _owner) public view returns (uint balance) {\n        return balances[_owner];\n    }\n    function verifyOptionPoolMembers(address _add) public view returns (bool _verifyResults) {\n        return optionPoolMembers[_add];\n    }\n    \n    function optionPoolMembersLockTotalOf(address _memAdd) public view returns (uint _optionPoolMembersLockTotal) {\n        if(optionPoolMembers[_memAdd] != true){\n            return 0;\n        }\n        \n        uint unlockPercent = 0;\n        \n        for (uint8 i = 0; i < optionPoolMembersUnlockPlans.length; i++) {\n            if(now >= optionPoolMembersUnlockPlans[i][0]) {\n                unlockPercent = optionPoolMembersUnlockPlans[i][1];\n            } else {\n                break;\n            }\n        }\n        \n        return optionPoolLockTotal * (100 - unlockPercent) / 100;\n    }\n    \n    function transfer(address _to, uint _value) public verifyTheLock(_value) returns (bool success) {\n        assert(_value > 0);\n        assert(balances[msg.sender] >= _value);\n        assert(msg.sender != _to);\n        \n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        \n        emit Transfer(msg.sender, _to, _value);\n\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        assert(balances[_from] >= _value);\n        assert(allowed[_from][msg.sender] >= _value);\n\n        if(optionPoolMembers[_from] == true) {\n            optionPoolMemberApproveTotal[_from] = optionPoolMemberApproveTotal[_from].sub(_value);\n        }\n        \n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n\n        return true;\n        \n    }\n\n    function approve(address _spender, uint256 _value) public verifyTheLock(_value) returns (bool success) {\n        assert(_value > 0);\n        assert(msg.sender != _spender);\n        \n        if(optionPoolMembers[msg.sender] == true) {\n            \n            if(allowed[msg.sender][_spender] > 0){\n                optionPoolMemberApproveTotal[msg.sender] = optionPoolMemberApproveTotal[msg.sender].sub(allowed[msg.sender][_spender]);\n            }\n            \n            optionPoolMemberApproveTotal[msg.sender] = optionPoolMemberApproveTotal[msg.sender].add(_value);\n        }\n        \n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        \n        return true;\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionPoolMembersUnlockPlans\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"optionPoolLockTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"verifyOptionPoolMembers\",\"outputs\":[{\"name\":\"_verifyResults\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_memAdd\",\"type\":\"address\"}],\"name\":\"optionPoolMembersLockTotalOf\",\"outputs\":[{\"name\":\"_optionPoolMembersLockTotal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6007805460ff191660099081178255631dcd65009055635f244000610160908152600f610180526080908152636016d4006101a0908152601e6101c05260a05263610573806101e0908152602d6102005260c0526361f80780610220908152603c6102405260e0526362e6a700610260908152604b61028052610100526363d93b006102a0908152605a6102c052610120526103206040526364c7da806102e090815260646103005261014052620000bb91600a919062000219565b50348015620000c957600080fd5b506040516200109f3803806200109f83398101604090815281516020808401518385015160008054600160a060020a031916339081178255815260018452949094208390556008839055840180519294909301916200012f91600591908501906200026b565b508051620001459060069060208401906200026b565b5050600360205250507fd5c5cb53beccd93505096e21248fe3e7da2ff91f401ca9b449ea5e523864846c8054600160ff1991821681179092557f2256974c3fdf8048b15ef62a808e7cb27cbc8f342c1b1ad2cfe3ccd8e8ec82f580548216831790557fddde01fdde358bcf22e137a926f5c3b15db0c9207d47b87934dee1775b68caf4805482168317905573bf95141188db8fdefe85ce2412407a9266d96da36000527fd78bc346881c9b5f154b57fcb81e81a5907322d88faab14cfc6caba90ff3538b805490911690911790556200037b565b600e8301918390821562000259579160200282015b8281111562000259578251620002489083906002620002ec565b50916020019190600201906200022e565b506200026792915062000325565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002ae57805160ff1916838001178555620002de565b82800160010185558215620002de579182015b82811115620002de578251825591602001919060010190620002c1565b506200026792915062000350565b8260028101928215620002de579160200282015b82811115620002de578251829063ffffffff1690559160200191906001019062000300565b6200034d91905b80821115620002675760006200034382826200036d565b506002016200032c565b90565b6200034d91905b8082111562000267576000815560010162000357565b506000815560010160009055565b610d14806200038b6000396000f3006080604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100df578063095ea7b31461016957806313af4035146101a157806318160ddd146101c457806319cbbda2146101eb57806323b872dd146102065780632a9278c514610230578063313ce567146102455780634147e15e1461027057806370a08231146102915780638da5cb5b146102b257806395d89b41146102e3578063a9059cbb146102f8578063c7e210c31461031c578063dd62ed3e1461033d575b600080fd5b3480156100eb57600080fd5b506100f4610364565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012e578181015183820152602001610116565b50505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017557600080fd5b5061018d600160a060020a03600435166024356103fa565b604080519115158252519081900360200190f35b3480156101ad57600080fd5b506101c2600160a060020a03600435166106e6565b005b3480156101d057600080fd5b506101d961072c565b60408051918252519081900360200190f35b3480156101f757600080fd5b506101d9600435602435610732565b34801561021257600080fd5b5061018d600160a060020a0360043581169060243516604435610759565b34801561023c57600080fd5b506101d961091c565b34801561025157600080fd5b5061025a610922565b6040805160ff9092168252519081900360200190f35b34801561027c57600080fd5b5061018d600160a060020a036004351661092b565b34801561029d57600080fd5b506101d9600160a060020a0360043516610949565b3480156102be57600080fd5b506102c7610964565b60408051600160a060020a039092168252519081900360200190f35b3480156102ef57600080fd5b506100f4610973565b34801561030457600080fd5b5061018d600160a060020a03600435166024356109d4565b34801561032857600080fd5b506101d9600160a060020a0360043516610bf4565b34801561034957600080fd5b506101d9600160a060020a0360043581169060243516610c95565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103f05780601f106103c5576101008083540402835291602001916103f0565b820191906000526020600020905b8154815290600101906020018083116103d357829003601f168201915b5050505050905090565b33600090815260036020526040812054829060ff161515600114156105985761042233610bf4565b3360009081526004602090815260408083205460019092529091205403829003101561044d57600080fd5b6000831161045757fe5b33600160a060020a038516141561046a57fe5b3360009081526003602052604090205460ff1615156001141561053157336000908152600260209081526040808320600160a060020a0388168452909152812054111561050057336000818152600260209081526040808320600160a060020a038916845282528083205493835260049091529020546104ef9163ffffffff610cc016565b336000908152600460205260409020555b33600090815260046020526040902054610520908463ffffffff610cd216565b336000908152600460205260409020555b336000818152600260209081526040808320600160a060020a03891680855290835292819020879055805187815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a3600191506106df565b600083116105a257fe5b33600160a060020a03851614156105b557fe5b3360009081526003602052604090205460ff1615156001141561067c57336000908152600260209081526040808320600160a060020a0388168452909152812054111561064b57336000818152600260209081526040808320600160a060020a0389168452825280832054938352600490915290205461063a9163ffffffff610cc016565b336000908152600460205260409020555b3360009081526004602052604090205461066b908463ffffffff610cd216565b336000908152600460205260409020555b336000818152600260209081526040808320600160a060020a03891680855290835292819020879055805187815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a3600191505b5092915050565b600054600160a060020a031633146106fd57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60085490565b600a826007811061073f57fe5b600202018160028110151561075057fe5b01549150829050565b600160a060020a03831660009081526001602052604081205482111561077b57fe5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156107a857fe5b600160a060020a03841660009081526003602052604090205460ff1615156001141561081157600160a060020a0384166000908152600460205260409020546107f7908363ffffffff610cc016565b600160a060020a0385166000908152600460205260409020555b600160a060020a0384166000908152600260209081526040808320338452909152902054610845908363ffffffff610cc016565b600160a060020a038516600081815260026020908152604080832033845282528083209490945591815260019091522054610886908363ffffffff610cc016565b600160a060020a0380861660009081526001602052604080822093909355908516815220546108bb908363ffffffff610cd216565b600160a060020a0380851660008181526001602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b60095481565b60075460ff1690565b600160a060020a031660009081526003602052604090205460ff1690565b600160a060020a031660009081526001602052604090205490565b600054600160a060020a031681565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103f05780601f106103c5576101008083540402835291602001916103f0565b33600090815260036020526040812054829060ff16151560011415610b0d576109fc33610bf4565b33600090815260046020908152604080832054600190925290912054038290031015610a2757600080fd5b60008311610a3157fe5b33600090815260016020526040902054831115610a4a57fe5b33600160a060020a0385161415610a5d57fe5b33600090815260016020526040902054610a7d908463ffffffff610cc016565b3360009081526001602052604080822092909255600160a060020a03861681522054610aaf908463ffffffff610cd216565b600160a060020a0385166000818152600160209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3600191506106df565b60008311610b1757fe5b33600090815260016020526040902054831115610b3057fe5b33600160a060020a0385161415610b4357fe5b33600090815260016020526040902054610b63908463ffffffff610cc016565b3360009081526001602052604080822092909255600160a060020a03861681522054610b95908463ffffffff610cd216565b600160a060020a0385166000818152600160209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b600160a060020a0381166000908152600360205260408120548190819060ff161515600114610c265760009250610c8e565b5060009050805b60078160ff161015610c8057600a60ff821660078110610c4957fe5b60020201544210610c7357600a60ff821660078110610c6457fe5b60020201600101549150610c78565b610c80565b600101610c2d565b600954606490838203020492505b5050919050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600082821115610ccc57fe5b50900390565b600082820183811015610ce157fe5b93925050505600a165627a7a72305820e7c004d138fe03254f5d4b074eb80fddc0598f96f4ee464368f2d724b5c5f7280029000000000000000000000000000000000000000000000000a688906bd8b00000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003455641000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034556410000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000a688906bd8b00000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003455641000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034556410000000000000000000000000000000000000000000000000000000000"
}