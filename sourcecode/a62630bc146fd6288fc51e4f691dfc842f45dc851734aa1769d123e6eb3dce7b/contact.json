{
  "address": "0x2531b930065e6107268042d1dc992bc0657f9316",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MavroOrg",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-03\n*/\n\npragma solidity 0.4.25;\n\n/**\n*\n* MAVRO.ORG\n*\n* YouTube          - https://www.youtube.com/mavroorg\n* Telegram_channel - https://t.me/MavroOrg\n* Twitter          - https://twitter.com/Sergey_Mavrody\n* VK               - https://vk.com/mavro_official\n*\n*  - GAIN PER 24 HOURS:\n*     -- Contract balance  < 200 Ether: 0.7 %\n*     -- Contract balance >= 200 Ether: 0.8 %\n*     -- Contract balance >= 400 Ether: 0.9 %\n*     -- Contract balance >= 600 Ether: 1 %\n*     -- Contract balance >= 800 Ether: 1.1 %\n*     -- Contract balance >= 1000 Ether: 1.2 %\n*  - Life-long payments\n*  - Minimal contribution 0.01 eth\n*  - Currency and payment - ETH\n*  - Contribution allocation schemes:\n*    -- 85% payments\n*    -- 15% Marketing + Operating Expenses\n*\n* ---How to use:\n*  1. Send from ETH wallet to the smart contract address\n*     any amount from 0.01 ETH.\n*  2. Verify your transaction in the history of your application or etherscan.io, specifying the address\n*     of your wallet.\n*  3. Claim your profit by sending 0 ether transaction (every day, every week, i don't care unless you're\n*      spending too much on GAS)\n*\n* RECOMMENDED GAS LIMIT: 150000\n* RECOMMENDED GAS PRICE: https://ethgasstation.info/\n* You can check the payments on the etherscan.io site, in the \"Internal Txns\" tab of your wallet.\n*\n*/\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\nlibrary Percent {\n\n  struct percent {\n    uint num;\n    uint den;\n  }\n  function mul(percent storage p, uint a) internal view returns (uint) {\n    if (a == 0) {\n      return 0;\n    }\n    return a*p.num/p.den;\n  }\n\n  function div(percent storage p, uint a) internal view returns (uint) {\n    return a/p.num*p.den;\n  }\n\n  function sub(percent storage p, uint a) internal view returns (uint) {\n    uint b = mul(p, a);\n    if (b >= a) return 0;\n    return a - b;\n  }\n\n  function add(percent storage p, uint a) internal view returns (uint) {\n    return a + mul(p, a);\n  }\n}\n\ncontract MavroOrg{\n\n    using SafeMath for uint;\n    using Percent for Percent.percent;\n    // array containing information about beneficiaries\n    mapping (address => uint) public balances;\n    //array containing information about the time of payment\n    mapping (address => uint) public time;\n\n    //The marks of the balance on the contract after which the percentage of payments will change\n    uint step1 = 200;\n    uint step2 = 400;\n    uint step3 = 600;\n    uint step4 = 800;\n    uint step5 = 1000;\n\n    //the time through which dividends will be paid\n    uint dividendsTime = 1 days;\n\n    event NewInvestor(address indexed investor, uint deposit);\n    event PayOffDividends(address indexed investor, uint value);\n    event NewDeposit(address indexed investor, uint value);\n\n    uint public allDeposits;\n    uint public allPercents;\n    uint public allBeneficiaries;\n    uint public lastPayment;\n\n    uint public constant minInvesment = 10 finney;\n\n    address public commissionAddr = 0x2eB660298263C5dd82b857EA26360dacd5fbB34d;\n\n    Percent.percent private m_adminPercent = Percent.percent(15, 100);\n\n    /**\n     * The modifier checking the positive balance of the beneficiary\n    */\n    modifier isIssetRecepient(){\n        require(balances[msg.sender] > 0, \"Deposit not found\");\n        _;\n    }\n\n    /**\n     * modifier checking the next payout time\n     */\n    modifier timeCheck(){\n         require(now >= time[msg.sender].add(dividendsTime), \"Too fast payout request. The time of payment has not yet come\");\n         _;\n    }\n\n    function getDepositMultiplier()public view returns(uint){\n        uint percent = getPercent();\n\n        uint rate = balances[msg.sender].mul(percent).div(10000);\n\n        uint depositMultiplier = now.sub(time[msg.sender]).div(dividendsTime);\n\n        return(rate.mul(depositMultiplier));\n    }\n\n    function receivePayment()isIssetRecepient timeCheck private{\n\n        uint depositMultiplier = getDepositMultiplier();\n        time[msg.sender] = now;\n        msg.sender.transfer(depositMultiplier);\n\n        allPercents+=depositMultiplier;\n        lastPayment =now;\n        emit PayOffDividends(msg.sender, depositMultiplier);\n    }\n\n    /**\n     * @return bool\n     */\n    function authorizationPayment()public view returns(bool){\n\n        if (balances[msg.sender] > 0 && now >= (time[msg.sender].add(dividendsTime))){\n            return (true);\n        }else{\n            return(false);\n        }\n    }\n\n    /**\n     * @return uint percent\n     */\n    function getPercent() public view returns(uint){\n\n        uint contractBalance = address(this).balance;\n\n        uint balanceStep1 = step1.mul(1 ether);\n        uint balanceStep2 = step2.mul(1 ether);\n        uint balanceStep3 = step3.mul(1 ether);\n        uint balanceStep4 = step4.mul(1 ether);\n        uint balanceStep5 = step5.mul(1 ether);\n\n        if(contractBalance < balanceStep1){\n            return(70);\n        }\n        if(contractBalance >= balanceStep1 && contractBalance < balanceStep2){\n            return(80);\n        }\n        if(contractBalance >= balanceStep2 && contractBalance < balanceStep3){\n            return(90);\n        }\n        if(contractBalance >= balanceStep3 && contractBalance < balanceStep4){\n            return(100);\n        }\n        if(contractBalance >= balanceStep4 && contractBalance < balanceStep5){\n            return(110);\n        }\n        if(contractBalance >= balanceStep5){\n            return(120);\n        }\n    }\n\n    function createDeposit() private{\n\n        if(msg.value > 0){\n\n            require(msg.value >= minInvesment, \"msg.value must be >= minInvesment\");\n\n            if (balances[msg.sender] == 0){\n                emit NewInvestor(msg.sender, msg.value);\n                allBeneficiaries+=1;\n            }\n\n            // commission\n            commissionAddr.transfer(m_adminPercent.mul(msg.value));\n\n            if(getDepositMultiplier() > 0 && now >= time[msg.sender].add(dividendsTime) ){\n                receivePayment();\n            }\n\n            balances[msg.sender] = balances[msg.sender].add(msg.value);\n            time[msg.sender] = now;\n\n            allDeposits+=msg.value;\n            emit NewDeposit(msg.sender, msg.value);\n\n        }else{\n            receivePayment();\n        }\n    }\n\n    /**\n     * function that is launched when transferring money to a contract\n     */\n    function() external payable{\n        createDeposit();\n    }\n}",
  "bytecode": "60c86002556101906003556102586004556103206005556103e860065562015180600755600c8054600160a060020a031916732eb660298263c5dd82b857ea26360dacd5fbb34d17905560c0604052600f6080819052606460a0819052600d91909155600e5534801561007157600080fd5b50610956806100816000396000f3006080604052600436106100ae5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631d5e970d81146100b857806327e235e3146100df5780632a6dd8c91461010d5780633a2d8784146101225780633d7ac9f814610137578063576570811461014c5780637c67a3e21461016157806381e170de1461018f578063b5d29f21146101a4578063b9c797f6146101cd578063e1f5acf6146101e2575b6100b6610220565b005b3480156100c457600080fd5b506100cd610443565b60408051918252519081900360200190f35b3480156100eb57600080fd5b506100cd73ffffffffffffffffffffffffffffffffffffffff60043516610449565b34801561011957600080fd5b506100cd61045b565b34801561012e57600080fd5b506100cd6105b1565b34801561014357600080fd5b506100cd61063b565b34801561015857600080fd5b506100cd610646565b34801561016d57600080fd5b506100cd73ffffffffffffffffffffffffffffffffffffffff6004351661064c565b34801561019b57600080fd5b506100cd61065e565b3480156101b057600080fd5b506101b9610664565b604080519115158252519081900360200190f35b3480156101d957600080fd5b506100cd6106b7565b3480156101ee57600080fd5b506101f76106bd565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600034111561043957662386f26fc100003410156102c557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f6d73672e76616c7565206d757374206265203e3d206d696e496e7665736d656e60448201527f7400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b33600090815260208190526040902054151561031b5760408051348152905133917f3ea43d7cccef4082f1b722579c174bffc4fed08469258b70da775c6909aa7b28919081900360200190a2600a805460010190555b600c5473ffffffffffffffffffffffffffffffffffffffff166108fc610348600d3463ffffffff6106d916565b6040518115909202916000818181858888f19350505050158015610370573d6000803e3d6000fd5b50600061037b6105b1565b1180156103a95750600754336000908152600160205260409020546103a59163ffffffff61070616565b4210155b156103b6576103b661071c565b336000908152602081905260409020546103d6903463ffffffff61070616565b3360008181526020818152604080832094909455600181529083902042905560088054349081019091558351908152925191927f2cb77763bc1e8490c1a904905c4d74b4269919aca114464f4bb4d911e60de364929081900390910190a2610441565b61044161071c565b565b60095481565b60006020819052908152604090205481565b60008060008060008060003073ffffffffffffffffffffffffffffffffffffffff1631955061049d670de0b6b3a76400006002546108dd90919063ffffffff16565b6003549095506104bb90670de0b6b3a764000063ffffffff6108dd16565b6004549094506104d990670de0b6b3a764000063ffffffff6108dd16565b6005549093506104f790670de0b6b3a764000063ffffffff6108dd16565b60065490925061051590670de0b6b3a764000063ffffffff6108dd16565b90508486101561052857604696506105a8565b84861015801561053757508386105b1561054557605096506105a8565b83861015801561055457508286105b1561056257605a96506105a8565b82861015801561057157508186105b1561057f57606496506105a8565b81861015801561058e57508086105b1561059c57606e96506105a8565b8086106105a857607896505b50505050505090565b6000806000806105bf61045b565b336000908152602081905260409020549093506105f690612710906105ea908663ffffffff6108dd16565b9063ffffffff61090116565b60075433600090815260016020526040902054919350610621916105ea90429063ffffffff61091816565b9050610633828263ffffffff6108dd16565b935050505090565b662386f26fc1000081565b60085481565b60016020526000908152604090205481565b600b5481565b33600090815260208190526040812054811080156106a357506007543360009081526001602052604090205461069f9163ffffffff61070616565b4210155b156106b0575060016106b4565b5060005b90565b600a5481565b600c5473ffffffffffffffffffffffffffffffffffffffff1681565b60008115156106ea57506000610700565b6001830154835483028115156106fc57fe5b0490505b92915050565b60008282018381101561071557fe5b9392505050565b33600090815260208190526040812054811061079957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4465706f736974206e6f7420666f756e64000000000000000000000000000000604482015290519081900360640190fd5b600754336000908152600160205260409020546107bb9163ffffffff61070616565b42101561084f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f546f6f2066617374207061796f757420726571756573742e205468652074696d60448201527f65206f66207061796d656e7420686173206e6f742079657420636f6d65000000606482015290519081900360840190fd5b6108576105b1565b3360008181526001602052604080822042905551929350909183156108fc0291849190818181858888f19350505050158015610897573d6000803e3d6000fd5b50600980548201905542600b5560408051828152905133917f38b3cd63b7181dfb8515c2b900548258df82fee21db5246ce3818c0efdf51685919081900360200190a250565b60008282028315806108f957508284828115156108f657fe5b04145b151561071557fe5b600080828481151561090f57fe5b04949350505050565b60008282111561092457fe5b509003905600a165627a7a72305820cd52712e176e4b5972bbd6289f79cb8275cea2712f5e0159341d906ba2f4b9e40029"
}