{
  "address": "0x2167f0f96499808e0b62af7b2a0ee5cafc573a25",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RocketCash",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-03\n*/\n\npragma solidity ^0.4.25;\n\n/**\n* https://rocket.cash\n*\n* RECOMMENDED GAS LIMIT: 350000\n* RECOMMENDED GAS PRICE: https://ethgasstation.info/\n*/\ncontract RocketCash\n{\n    uint constant public start = 1541678400;// The time Rocket.cash will start working (Thu Nov 08 2018 12:00:00 UTC)\n    // Notice: you can make an investment, but you will not get your dividends until the project has started\n    address constant public administrationFund = 0x97a121027a529B96f1a71135457Ab8e353060811;// For advertising (13%) and support (2%)\n    mapping (address => uint) public invested;// Investors and their investments\n    mapping (address => uint) private lastInvestmentTime;// Last investment time for each investor\n    mapping (address => uint) private collected;// Collected amounts for each investor\n    uint public investedTotal;// Invested sum (for statistics)\n    uint public investorsCount;// Investors count (for statistics)\n\n    event investment(address addr, uint amount, uint invested);// Investment event (for statistics)\n    event withdraw(address addr, uint amount, uint invested);// Withdraw event (for statistics)\n\n    function () external payable// This function has called every time someone makes a transaction to the Rocket.cash\n    {\n        if (msg.value > 0 ether)// If the sent value of ether is more than 0 - this is an investment\n        {\n            if (start < now)// If the project has started\n            {\n                if (invested[msg.sender] != 0) // If the investor has already invested to the Rocket.cash\n                {\n                    collected[msg.sender] = availableDividends(msg.sender);// Calculate dividends of the investor and remember it\n                    // Notice: you can rise up your daily percentage by making an additional investment\n                }\n                //else// If the investor hasn't ever invested to the Rocket.cash - he has no percent to collect yet\n\n                lastInvestmentTime[msg.sender] = now;// Save the last investment time for the investor\n            }\n            else// If the project hasn't started yet\n            {\n                lastInvestmentTime[msg.sender] = start;// Save the last investment time for the investor as the time of the project start\n            }\n\n            if (invested[msg.sender] == 0) investorsCount++;// Increase the investors counter (for statistics)\n            investedTotal += msg.value;// Increase the invested value (for statistics)\n\n            invested[msg.sender] += msg.value;// Increase the invested value for the investor\n\n            administrationFund.transfer(msg.value * 15 / 100);// Transfer the Rocket.cash commission (15% - for advertising (13%) and support (2%))\n\n            emit investment(msg.sender, msg.value, invested[msg.sender]);// Emit the Investment event (for statistics)\n        }\n        else// If the sent value of ether is 0 - this is an ask to get dividends or money back\n        // WARNING! Any investor can only ask to get dividends or money back ONCE! Once the investor has got his dividends or money he would be excluded from the project!\n        {\n            uint withdrawalAmount = availableWithdraw(msg.sender);\n\n            if (withdrawalAmount != 0)// If withdrawal amount is not 0\n            {\n                emit withdraw(msg.sender, withdrawalAmount, invested[msg.sender]);// Emit the Withdraw event (for statistics)\n\n                msg.sender.transfer(withdrawalAmount);// Transfer the investor's money back minus the Rocket.cash commission or his dividends and bonuses\n\n                lastInvestmentTime[msg.sender] = 0;// Remove investment information about the investor after he has got his money and have been excluded from the Project\n                invested[msg.sender]           = 0;// Remove investment information about the investor after he has got his money and have been excluded from the Project\n                collected[msg.sender]          = 0;// Remove investment information about the investor after he has got his money and have been excluded from the Project\n            }\n            //else// If withdrawal amount is 0 - do nothing\n        }\n    }\n\n    function availableWithdraw (address investor) public view returns (uint)// This function calculate an available amount for withdrawal\n    {\n        if (start < now)// If the project has started\n        {\n            if (invested[investor] != 0)// If the investor of the Rocket.cash hasn't been excluded from the project and ever have been in it\n            {\n                uint dividends = availableDividends(investor);// Calculate dividends of the investor\n                uint canReturn = invested[investor] - invested[investor] * 15 / 100;// The investor can get his money back minus the Rocket.cash commission\n\n                if (canReturn < dividends)// If the investor has dividends more than he has invested minus the Rocket.cash commission\n                {\n                    return dividends;\n                }\n                else// If the investor has dividends less than he has invested minus the Rocket.cash commission\n                {\n                    return canReturn;\n                }\n            }\n            else// If the investor of the Rocket.cash have been excluded from the project or never have been in it - available amount for withdraw = 0\n            {\n                return 0;\n            }\n        }\n        else// If the project hasn't started yet - available amount for withdraw = 0\n        {\n            return 0;\n        }\n    }\n\n    function availableDividends (address investor) private view returns (uint)// This function calculate available for withdraw amount\n    {\n        return collected[investor] + dailyDividends(investor) * (now - lastInvestmentTime[investor]) / 1 days;// Already collected amount plus Calculated daily dividends (depends on the invested amount) are multiplied by the count of spent days from the last investment\n    }\n\n    function dailyDividends (address investor) public view returns (uint)// This function calculate daily dividends (depends on the invested amount)\n    {\n        if (invested[investor] < 1 ether)// If the invested amount is lower than 1 ether\n        {\n            return invested[investor] * 222 / 10000;// The interest would be 2.22% (payback in 45 days)\n        }\n        else if (1 ether <= invested[investor] && invested[investor] < 5 ether)// If the invested amount is higher than 1 ether but lower than 5 ether\n        {\n            return invested[investor] * 255 / 10000;// The interest would be 2.55% (payback in 40 days)\n        }\n        else// If the invested amount is higher than 5 ether\n        {\n            return invested[investor] * 288 / 10000;// The interest would be 2.88% (payback in 35 days)\n        }\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50610b7c806100206000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806307c23e02146105765780632b711051146105cd5780633df2c6d3146105f85780635e7dc7c11461064f57806366b3f6bf1461067a578063bc751507146106d1578063be9a655514610728575b6000803411156103965742635be4254010156101775760008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561012e576100ea33610753565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b42600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506101c0565b635be42540600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561021a576004600081548092919060010191905055505b34600360008282540192505081905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507397a121027a529b96f1a71135457ab8e35306081173ffffffffffffffffffffffffffffffffffffffff166108fc6064600f34028115156102b357fe5b049081150290604051600060405180830381858888f193505050501580156102df573d6000803e3d6000fd5b507f971eb7525752a0b8db59d16d6b8c9a48fb36c590be3cc1cb935e0a311460a1ab33346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a1610573565b61039f336107f7565b9050600081141515610572577fb5c5f6724bdc9de2302196ac349f18e17fc199e7f3e9a1adbb788e22b98d429833826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a13373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156104a2573d6000803e3d6000fd5b506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b50005b34801561058257600080fd5b506105b7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610918565b6040518082815260200191505060405180910390f35b3480156105d957600080fd5b506105e2610b0c565b6040518082815260200191505060405180910390f35b34801561060457600080fd5b50610639600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107f7565b6040518082815260200191505060405180910390f35b34801561065b57600080fd5b50610664610b12565b6040518082815260200191505060405180910390f35b34801561068657600080fd5b506106bb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b18565b6040518082815260200191505060405180910390f35b3480156106dd57600080fd5b506106e6610b30565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561073457600080fd5b5061073d610b48565b6040518082815260200191505060405180910390f35b600062015180600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442036107a484610918565b028115156107ae57fe5b04600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054019050919050565b600080600042635be42540101561090c5760008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415156109035761085984610753565b91506064600f6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054028115156108a857fe5b046000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054039050818110156108fb57819250610911565b809250610911565b60009250610911565b600092505b5050919050565b6000670de0b6b3a76400006000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156109be5761271060de6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054028115156109b657fe5b049050610b07565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054670de0b6b3a764000011158015610a595750674563918244f400006000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b15610ab45761271060ff6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205402811515610aac57fe5b049050610b07565b6127106101206000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205402811515610b0357fe5b0490505b919050565b60045481565b60035481565b60006020528060005260406000206000915090505481565b7397a121027a529b96f1a71135457ab8e35306081181565b635be42540815600a165627a7a723058200b670b923bddc82f6cc7919c906c089fb370f19e87c9952fb1881ce8124c781b0029"
}