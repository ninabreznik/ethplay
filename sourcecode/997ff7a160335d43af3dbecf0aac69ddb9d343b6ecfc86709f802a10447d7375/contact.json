{
  "address": "0x666df8689b6a81bd2beea5f5bdb608b419006881",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KFToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-06\n*/\n\npragma solidity ^0.4.24;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b > 0);\n    uint256 c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract owned {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ncontract KFToken is owned{\n    using SafeMath for uint256;\n    \n    // Public variables of the token\n    string constant public name = \"KF Token\";\n    string constant public symbol = \"KT\";\n    uint8 constant public decimals = 18;\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    constructor(\n        uint256 initialSupply\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n    }\n    \n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to].add(_value) >= balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        // Add the same to the recipient\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from]+balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` on behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) onlyOwner public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\n        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) onlyOwner public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\n        totalSupply = totalSupply.sub(_value);                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610a2d833981016040908152905160008054600160a060020a031916339081178255670de0b6b3a76400009092026001819055918152600260205291909120556109c7806100666000396000f3006080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d4578063095ea7b31461015e57806318160ddd1461019657806323b872dd146101bd578063313ce567146101e757806342966c681461021257806370a082311461022a57806379cc67901461024b5780638da5cb5b1461026f57806395d89b41146102a0578063a9059cbb146102b5578063cae9ca51146102db578063dd62ed3e14610344578063f2fde38b1461036b575b600080fd5b3480156100e057600080fd5b506100e961038c565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012357818101518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016a57600080fd5b50610182600160a060020a03600435166024356103c3565b604080519115158252519081900360200190f35b3480156101a257600080fd5b506101ab6103f0565b60408051918252519081900360200190f35b3480156101c957600080fd5b50610182600160a060020a03600435811690602435166044356103f6565b3480156101f357600080fd5b506101fc610493565b6040805160ff9092168252519081900360200190f35b34801561021e57600080fd5b50610182600435610498565b34801561023657600080fd5b506101ab600160a060020a0360043516610550565b34801561025757600080fd5b50610182600160a060020a0360043516602435610562565b34801561027b57600080fd5b5061028461063f565b60408051600160a060020a039092168252519081900360200190f35b3480156102ac57600080fd5b506100e961064e565b3480156102c157600080fd5b506102d9600160a060020a0360043516602435610685565b005b3480156102e757600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610182948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506106949650505050505050565b34801561035057600080fd5b506101ab600160a060020a03600435811690602435166107ad565b34801561037757600080fd5b506102d9600160a060020a03600435166107ca565b60408051808201909152600881527f4b4620546f6b656e000000000000000000000000000000000000000000000000602082015281565b336000908152600360209081526040808320600160a060020a039590951683529390529190912055600190565b60015481565b600160a060020a038316600090815260036020908152604080832033845290915281205482111561042657600080fd5b600160a060020a038416600090815260036020908152604080832033845290915290205461045a908363ffffffff61081016565b600160a060020a0385166000908152600360209081526040808320338452909152902055610489848484610822565b5060019392505050565b601281565b60008054600160a060020a031633146104b057600080fd5b336000908152600260205260409020548211156104cc57600080fd5b336000908152600260205260409020546104ec908363ffffffff61081016565b3360009081526002602052604090205560015461050f908363ffffffff61081016565b60015560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2506001919050565b60026020526000908152604090205481565b60008054600160a060020a0316331461057a57600080fd5b600160a060020a03831660009081526002602052604090205482111561059f57600080fd5b600160a060020a0383166000908152600260205260409020546105c8908363ffffffff61081016565b600160a060020a0384166000908152600260205260409020556001546105f4908363ffffffff61081016565b600155604080518381529051600160a060020a038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250600192915050565b600054600160a060020a031681565b60408051808201909152600281527f4b54000000000000000000000000000000000000000000000000000000000000602082015281565b610690338383610822565b5050565b6000836106a181856103c3565b156107a5576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b83811015610739578181015183820152602001610721565b50505050905090810190601f1680156107665780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561078857600080fd5b505af115801561079c573d6000803e3d6000fd5b50505050600191505b509392505050565b600360209081526000928352604080842090915290825290205481565b600054600160a060020a031633146107e157600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282111561081c57fe5b50900390565b6000600160a060020a038316151561083957600080fd5b600160a060020a03841660009081526002602052604090205482111561085e57600080fd5b600160a060020a038316600090815260026020526040902054610887818463ffffffff61098816565b101561089257600080fd5b50600160a060020a03808316600090815260026020526040808220549286168252902054908101906108ca908363ffffffff61081016565b600160a060020a0380861660009081526002602052604080822093909355908516815220546108ff908363ffffffff61098816565b600160a060020a0380851660008181526002602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3600160a060020a0380841660009081526002602052604080822054928716825290205401811461098257fe5b50505050565b8181018281101561099557fe5b929150505600a165627a7a7230582062d3d252b2dddbd0075fc95d72afc25c5e7b385eaeb6149c8320ba59777ef15c0029000000000000000000000000000000000000000000000000000000003b9aca00",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000003b9aca00"
}