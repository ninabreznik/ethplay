{
  "address": "0xfc44ec51c80e35a87bc2140299b1636ec83dfb04",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VoltToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-21\n*/\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;   \n    }\n}\n\ncontract BasicToken {\n    string private token_name;\n    string private token_symbol;\n    uint256 private token_decimals;\n\n    uint256 private total_supply;\n    uint256 private remaining_supply;\n\n    mapping (address => uint256) private balance_of;\n    mapping (address => mapping(address => uint256)) private allowance_of;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approve(address indexed target, address indexed spender, uint256 value);\n\n    function BasicToken (\n        string tokenName,\n        string tokenSymbol,\n        uint256 tokenDecimals,\n        uint256 tokenSupply\n    ) public {\n        token_name = tokenName;\n        token_symbol = tokenSymbol;\n        token_decimals = tokenDecimals;\n        total_supply = tokenSupply * (10 ** uint256(token_decimals));\n        remaining_supply = total_supply;\n    }\n\n    function name() public view returns (string) {\n        return token_name;\n    }\n\n    function symbol() public view returns (string) {\n        return token_symbol;\n    }\n\n    function decimals() public view returns (uint256) {\n        return token_decimals;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return total_supply;\n    }\n\n    function remainingSupply() internal view returns (uint256) {\n        return remaining_supply;\n    }\n\n    function balanceOf(\n        address client_address\n    ) public view returns (uint256) {\n        return balance_of[client_address];\n    }\n\n    function setBalance(\n        address client_address,\n        uint256 value\n    ) internal returns (bool) {\n        require(client_address != address(0));\n        balance_of[client_address] = value;\n    }\n\n    function allowance(\n        address target_address,\n        address spender_address\n    ) public view returns (uint256) {\n        return allowance_of[target_address][spender_address];\n    }\n\n    function approve(\n        address spender_address,\n        uint256 value\n    ) public returns (bool) {\n        require(value >= 0);\n        require(msg.sender != address(0));\n        require(spender_address != address(0));\n\n        setApprove(msg.sender, spender_address, value);\n        Approve(msg.sender, spender_address, value);\n        return true;\n    }\n    \n    function setApprove(\n        address target_address,\n        address spender_address,\n        uint256 value\n    ) internal returns (bool) {\n        require(value >= 0);\n        require(msg.sender != address(0));\n        require(spender_address != address(0));\n\n        allowance_of[target_address][spender_address] = value;\n        return true;\n    }\n\n    function changeTokenName(\n        string newTokenName\n    ) internal returns (bool) {\n        token_name = newTokenName;\n        return true;\n    }\n\n    function changeTokenSymbol(\n        string newTokenSymbol\n    ) internal returns (bool) {\n        token_symbol = newTokenSymbol;\n        return true;\n    }\n\n    function changeTokenDecimals(\n        uint256 newTokenDecimals\n    ) internal returns (bool) {\n        token_decimals = newTokenDecimals;\n        return true;\n    }\n\n    function changeTotalSupply(\n        uint256 newTotalSupply\n    ) internal returns (bool) {\n        total_supply = newTotalSupply;\n        return true;\n    }\n\n    function changeRemainingSupply(\n        uint256 newRemainingSupply\n    ) internal returns (bool) {\n        remaining_supply = newRemainingSupply;\n        return true;\n    }\n}\n\n\ncontract VoltOwned {\n    mapping (address => uint) private voltOwners;\n    address[] private ownerList;\n\n    mapping (address => uint256) private voltFreeze;\n\n    modifier onlyOwner {\n        require(voltOwners[msg.sender] == 99);\n        _;\n    }\n\n    modifier noFreeze {\n        require(now >= voltFreeze[msg.sender]);\n        _;\n    }\n\n    function VoltOwned(address firstOwner) public {\n        voltOwners[firstOwner] = 99;\n        ownerList.push(firstOwner);\n    }\n\n    function isOwner(address who) internal view returns (bool) {\n        if (voltOwners[who] == 99) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function addOwner(address newVoltOwnerAddress) public onlyOwner noFreeze {\n        require(newVoltOwnerAddress != address(0));\n        voltOwners[newVoltOwnerAddress] = 99;\n        ownerList.push(newVoltOwnerAddress);\n    }\n\n    function removeOwner(address removeVoltOwnerAddress) public onlyOwner noFreeze {\n        require(removeVoltOwnerAddress != address(0));\n        require(ownerList.length > 1);\n\n        voltOwners[removeVoltOwnerAddress] = 0;\n        for (uint256 i = 0; i != ownerList.length; i++) {\n            if (removeVoltOwnerAddress == ownerList[i]) {\n                delete ownerList[i];\n                break;\n            }\n        }\n    }\n\n    function getOwners() public onlyOwner noFreeze returns (address[]) {\n        return ownerList;\n    }\n\n    function isFreeze(address who) internal view returns (bool) {\n        if (now >= voltFreeze[who]) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    function setFreeze(\n        address freezeAddress,\n        uint256 timestamp\n    ) public onlyOwner noFreeze returns (bool) {\n        require(freezeAddress != address(0));\n        voltFreeze[freezeAddress] = timestamp;\n    }\n\n    function getFreezeTimestamp(\n        address who\n    ) public onlyOwner noFreeze returns (uint256) {\n        return voltFreeze[who];\n    }\n}\n\ncontract VoltToken is BasicToken, VoltOwned {\n    using SafeMath for uint256;\n\n    bool private mintStatus;\n\n    event Deposit(address indexed from, address indexed to, uint256 value);\n    event Mint(address indexed to, uint256 value);\n    event Burn(address indexed target, uint256 value);\n\n    function VoltToken () public BasicToken (\n        \"VOLT\", \"ACDC\", 18, 4000000000\n    ) VoltOwned(\n        msg.sender\n    ) {\n        mintStatus = true;\n    }\n\n    modifier canMint {\n        require(mintStatus == true);\n        _;\n    }\n\n    function mint(\n        address to,\n        uint256 value,\n        uint256 freezeTimestamp\n    ) public onlyOwner noFreeze canMint {\n        uint256 ts = totalSupply();\n        uint256 rs = remainingSupply();\n        require(ts >= rs);\n\n        superMint(to, value);\n        setFreeze(to, freezeTimestamp);\n    }\n\n    function superMint(address to, uint256 value) public onlyOwner noFreeze {\n        uint256 rs = remainingSupply();\n        require(rs >= value);\n\n        uint256 currentBalance = balanceOf(to);\n        setBalance(to, currentBalance.add(value));\n        setRemainingSupply(rs.sub(value));\n        Transfer(0x0, to, value);\n        Mint(to, value);\n    }\n\n    function mintOpen() public onlyOwner noFreeze returns (bool) {\n        require(mintStatus == false);\n        mintStatus = true;\n        return true;\n    }\n\n    function mintClose() public onlyOwner noFreeze returns (bool) {\n        require(mintStatus == true);\n        mintStatus = false;\n        return true;\n    }\n\n    function transfer(\n        address to,\n        uint256 value\n    ) public noFreeze returns (bool) {\n        require(value > 0);\n        require(msg.sender != address(0));\n        require(to != address(0));\n\n        require(balanceOf(msg.sender) >= value);\n        require(balanceOf(to).add(value) >= balanceOf(to));\n\n        voltTransfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) public noFreeze returns(bool) {\n        require(value > 0);\n        require(msg.sender != address(0));\n        require(from != address(0));\n        require(to != address(0));\n\n        require(isFreeze(from) == false);\n        require(allowance(from, msg.sender) >= value);\n        require(balanceOf(from) >= value);\n        require(balanceOf(to).add(value) >= balanceOf(to));\n\n        voltTransfer(from, to, value);\n\n        uint256 remaining = allowance(from, msg.sender).sub(value);\n        setApprove(from, msg.sender, remaining);\n        return true;\n    }\n\n    function voltTransfer(\n        address from,\n        address to,\n        uint256 value\n    ) private noFreeze returns (bool) {\n        uint256 preBalance = balanceOf(from);\n        setBalance(from, balanceOf(from).sub(value));\n        setBalance(to, balanceOf(to).add(value));\n        Transfer(from, to, value);\n        assert(balanceOf(from).add(value) == preBalance);\n        return true;\n    }\n\n    function setTokenName(\n        string newTokenName\n    ) public onlyOwner noFreeze returns (bool) {\n        return changeTokenName(newTokenName);\n    }\n\n    function setTokenSymbol(\n        string newTokenSymbol\n    ) public onlyOwner noFreeze returns (bool) {\n        return changeTokenSymbol(newTokenSymbol);\n    }\n\n    function setTotalSupply(\n        uint256 newTotalSupply\n    ) public onlyOwner noFreeze returns (bool) {\n        return changeTotalSupply(newTotalSupply);\n    }\n\n    function setRemainingSupply(\n        uint256 newRemainingSupply\n    ) public onlyOwner noFreeze returns (bool) {\n        return changeRemainingSupply(newRemainingSupply);\n    }\n\n    function getRemainingSupply() public onlyOwner noFreeze returns (uint256) {\n        return remainingSupply();\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender_address\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRemainingSupply\",\"type\":\"uint256\"}],\"name\":\"setRemainingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"freezeTimestamp\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"removeVoltOwnerAddress\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"freezeAddress\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newVoltOwnerAddress\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"client_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getFreezeTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintClose\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenName\",\"type\":\"string\"}],\"name\":\"setTokenName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenSymbol\",\"type\":\"string\"}],\"name\":\"setTokenSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target_address\",\"type\":\"address\"},{\"name\":\"spender_address\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRemainingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"setTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"superMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approve\",\"type\":\"event\"}]",
  "bytecode": "606060405234156200001057600080fd5b33604080519081016040908152600482527f564f4c540000000000000000000000000000000000000000000000000000000060208301528051908101604052600481527f41434443000000000000000000000000000000000000000000000000000000006020820152601263ee6b28006000848051620000959291602001906200012f565b506001838051620000ab9291602001906200012f565b506002829055600a9190910a0260038190556004555050600160a060020a0381166000908152600760205260409020606390556008805460018101620000f28382620001b4565b5060009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600a805460ff1916600117905562000200565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200017257805160ff1916838001178555620001a2565b82800160010185558215620001a2579182015b82811115620001a257825182559160200191906001019062000185565b50620001b0929150620001e0565b5090565b815481835581811511620001db57600083815260209020620001db918101908301620001e0565b505050565b620001fd91905b80821115620001b05760008155600101620001e7565b90565b61136880620002106000396000f3006060604052600436106101325763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610137578063095ea7b3146101c15780630c1b33d2146101f7578063156e29f61461020d578063173825d91461023457806318160ddd1461025357806323b872dd1461027857806324bbd049146102a0578063313ce567146102b3578063376db394146102c65780637065cb48146102e857806370a082311461030757806395d89b41146103265780639c4b9c8a14610339578063a0214c1c14610358578063a0e67e2b1461036b578063a4f29aad146103d1578063a9059cbb14610422578063ba51b1b414610444578063dd62ed3e14610495578063e4b7fb73146104ba578063f7ea7a3d146104cd578063fa6171e4146104e3575b600080fd5b341561014257600080fd5b61014a610505565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561018657808201518382015260200161016e565b50505050905090810190601f1680156101b35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101cc57600080fd5b6101e3600160a060020a03600435166024356105ae565b604051901515815260200160405180910390f35b341561020257600080fd5b6101e3600435610643565b341561021857600080fd5b610232600160a060020a036004351660243560443561069e565b005b341561023f57600080fd5b610232600160a060020a036004351661073b565b341561025e57600080fd5b610266610842565b60405190815260200160405180910390f35b341561028357600080fd5b6101e3600160a060020a0360043581169060243516604435610848565b34156102ab57600080fd5b6101e3610965565b34156102be57600080fd5b6102666109d3565b34156102d157600080fd5b6101e3600160a060020a03600435166024356109d9565b34156102f357600080fd5b610232600160a060020a0360043516610a55565b341561031257600080fd5b610266600160a060020a0360043516610b1b565b341561033157600080fd5b61014a610b36565b341561034457600080fd5b610266600160a060020a0360043516610ba9565b341561036357600080fd5b6101e3610c0f565b341561037657600080fd5b61037e610c7d565b60405160208082528190810183818151815260200191508051906020019060200280838360005b838110156103bd5780820151838201526020016103a5565b505050509050019250505060405180910390f35b34156103dc57600080fd5b6101e360046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610d2e95505050505050565b341561042d57600080fd5b6101e3600160a060020a0360043516602435610d81565b341561044f57600080fd5b6101e360046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610e2895505050505050565b34156104a057600080fd5b610266600160a060020a0360043581169060243516610e7b565b34156104c557600080fd5b610266610ea6565b34156104d857600080fd5b6101e3600435610efd565b34156104ee57600080fd5b610232600160a060020a0360043516602435610f50565b61050d611269565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105a35780601f10610578576101008083540402835291602001916105a3565b820191906000526020600020905b81548152906001019060200180831161058657829003601f168201915b505050505090505b90565b6000808210156105bd57600080fd5b33600160a060020a031615156105d257600080fd5b600160a060020a03831615156105e757600080fd5b6105f2338484611073565b5082600160a060020a031633600160a060020a03167f6e11fb1b7f119e3f2fa29896ef5fdf8b8a2d0d4df6fe90ba8668e7d8b2ffa25e8460405190815260200160405180910390a350600192915050565b600160a060020a03331660009081526007602052604081205460631461066857600080fd5b600160a060020a03331660009081526009602052604090205442101561068d57600080fd5b610696826110dc565b90505b919050565b600160a060020a03331660009081526007602052604081205481906063146106c557600080fd5b600160a060020a0333166000908152600960205260409020544210156106ea57600080fd5b600a5460ff1615156001146106fe57600080fd5b610706610842565b91506107106110e4565b90508082101561071f57600080fd5b6107298585610f50565b61073385846109d9565b505050505050565b600160a060020a03331660009081526007602052604081205460631461076057600080fd5b600160a060020a03331660009081526009602052604090205442101561078557600080fd5b600160a060020a038216151561079a57600080fd5b600854600190116107aa57600080fd5b50600160a060020a03811660009081526007602052604081208190555b600854811461083e5760088054829081106107de57fe5b600091825260209091200154600160a060020a038381169116141561083657600880548290811061080b57fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916905561083e565b6001016107c7565b5050565b60035490565b600160a060020a033316600090815260096020526040812054819042101561086f57600080fd5b6000831161087c57600080fd5b33600160a060020a0316151561089157600080fd5b600160a060020a03851615156108a657600080fd5b600160a060020a03841615156108bb57600080fd5b6108c4856110ea565b156108ce57600080fd5b826108d98633610e7b565b10156108e457600080fd5b826108ee86610b1b565b10156108f957600080fd5b61090284610b1b565b61091b8461090f87610b1b565b9063ffffffff61111916565b101561092657600080fd5b61093185858561112c565b5061094c836109408733610e7b565b9063ffffffff6111e916565b9050610959853383611073565b50600195945050505050565b600160a060020a03331660009081526007602052604081205460631461098a57600080fd5b600160a060020a0333166000908152600960205260409020544210156109af57600080fd5b600a5460ff16156109bf57600080fd5b50600a805460ff1916600190811790915590565b60025490565b600160a060020a0333166000908152600760205260408120546063146109fe57600080fd5b600160a060020a033316600090815260096020526040902054421015610a2357600080fd5b600160a060020a0383161515610a3857600080fd5b600160a060020a0390921660009081526009602052604090205590565b600160a060020a033316600090815260076020526040902054606314610a7a57600080fd5b600160a060020a033316600090815260096020526040902054421015610a9f57600080fd5b600160a060020a0381161515610ab457600080fd5b600160a060020a0381166000908152600760205260409020606390556008805460018101610ae2838261127b565b506000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a031660009081526005602052604090205490565b610b3e611269565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105a35780601f10610578576101008083540402835291602001916105a3565b600160a060020a033316600090815260076020526040812054606314610bce57600080fd5b600160a060020a033316600090815260096020526040902054421015610bf357600080fd5b50600160a060020a031660009081526009602052604090205490565b600160a060020a033316600090815260076020526040812054606314610c3457600080fd5b600160a060020a033316600090815260096020526040902054421015610c5957600080fd5b600a5460ff161515600114610c6d57600080fd5b50600a805460ff19169055600190565b610c85611269565b600160a060020a033316600090815260076020526040902054606314610caa57600080fd5b600160a060020a033316600090815260096020526040902054421015610ccf57600080fd5b60088054806020026020016040519081016040528092919081815260200182805480156105a357602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610d07575050505050905090565b600160a060020a033316600090815260076020526040812054606314610d5357600080fd5b600160a060020a033316600090815260096020526040902054421015610d7857600080fd5b610696826111fb565b600160a060020a033316600090815260096020526040812054421015610da657600080fd5b60008211610db357600080fd5b33600160a060020a03161515610dc857600080fd5b600160a060020a0383161515610ddd57600080fd5b81610de733610b1b565b1015610df257600080fd5b610dfb83610b1b565b610e088361090f86610b1b565b1015610e1357600080fd5b610e1e33848461112c565b5060019392505050565b600160a060020a033316600090815260076020526040812054606314610e4d57600080fd5b600160a060020a033316600090815260096020526040902054421015610e7257600080fd5b61069682611218565b600160a060020a03918216600090815260066020908152604080832093909416825291909152205490565b600160a060020a033316600090815260076020526040812054606314610ecb57600080fd5b600160a060020a033316600090815260096020526040902054421015610ef057600080fd5b610ef86110e4565b905090565b600160a060020a033316600090815260076020526040812054606314610f2257600080fd5b600160a060020a033316600090815260096020526040902054421015610f4757600080fd5b6106968261122d565b600160a060020a0333166000908152600760205260408120548190606314610f7757600080fd5b600160a060020a033316600090815260096020526040902054421015610f9c57600080fd5b610fa46110e4565b915082821015610fb357600080fd5b610fbc84610b1b565b9050610fd784610fd2838663ffffffff61111916565b611235565b50610ff0610feb838563ffffffff6111e916565b610643565b5083600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405190815260200160405180910390a383600160a060020a03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968858460405190815260200160405180910390a250505050565b60008082101561108257600080fd5b33600160a060020a0316151561109757600080fd5b600160a060020a03831615156110ac57600080fd5b50600160a060020a0392831660009081526006602090815260408083209490951682529290925291902055600190565b600455600190565b60045490565b600160a060020a038116600090815260096020526040812054421061111157506000610699565b506001610699565b8181018281101561112657fe5b92915050565b600160a060020a033316600090815260096020526040812054819042101561115357600080fd5b61115c85610b1b565b905061116f85610fd28561094089610b1b565b5061118184610fd28561090f88610b1b565b5083600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405190815260200160405180910390a3806111d78461090f88610b1b565b146111de57fe5b506001949350505050565b6000828211156111f557fe5b50900390565b60008082805161120f9291602001906112a4565b50600192915050565b6000600182805161120f9291602001906112a4565b600355600190565b6000600160a060020a038316151561124c57600080fd5b600160a060020a0390921660009081526005602052604090205590565b60206040519081016040526000815290565b81548183558181151161129f5760008381526020902061129f918101908301611322565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106112e557805160ff1916838001178555611312565b82800160010185558215611312579182015b828111156113125782518255916020019190600101906112f7565b5061131e929150611322565b5090565b6105ab91905b8082111561131e57600081556001016113285600a165627a7a723058203847ef2247276de789ee98c57a34fbfdbc1aeae639e262b4eb5fb21c7f23aad80029"
}