{
  "address": "0xbbab6e539936666549ff950028006702d7b2e867",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WEED",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-15\n*/\n\npragma solidity ^0.5.4;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20 {\n\n    /// total amount of tokens\n    uint256 public totalSupply;\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) view public returns (uint256 balance);\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n}\n\ncontract BasicToken is ERC20 {\n    using SafeMath for uint;\n\n    mapping (address => uint256) balances; /// balance amount of tokens for address\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        // Prevent transfer to 0x0 address.\n        require(_to != address(0x0));\n        // Check if the sender has enough\n        require(balances[msg.sender] >= _value);\n        // Check for overflows\n        require(balances[_to].add(_value) > balances[_to]);\n\n        uint previousBalances = balances[msg.sender].add(balances[_to]);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balances[msg.sender].add(balances[_to]) == previousBalances);\n\n        return true;\n    }\n\n    function balanceOf(address _owner) view public returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n\ncontract WEED is BasicToken {\n\n    function () external payable {\n        //if ether is sent to this address, send it back.\n        //throw;\n        require(false);\n    }\n\n    string public constant name = \"WEED\";\n    string public constant symbol = \"WEED\";\n    uint256 private constant _INITIAL_SUPPLY = 400000000;\n    uint8 public decimals = 9;\n    uint256 public totalSupply;\n    string public version = \"WEED 1.0\";\n\n    string public agreement = \"https://www.tenjove.com/weed/subscriptionagreement.txt\";\n    string public disclaimer = \"https://etherscan.io/tx/0xa35e89443df2abbe4f62dfc213b7cd98d5d5922c24a581a339857cf6255356dd\";\n\n    constructor() public {\n        // init\n        totalSupply = _INITIAL_SUPPLY * 10 ** uint256(decimals);\n        balances[msg.sender] = totalSupply;\n    }\n}",
  "bytecode": "6002805460ff1916600917905560c0604052600860808190527f5745454420312e3000000000000000000000000000000000000000000000000060a090815261004b91600491906100e0565b506060604051908101604052806036815260200161074960369139805161007a916005916020909101906100e0565b50608060405190810160405280605a815260200161077f605a913980516100a9916006916020909101906100e0565b503480156100b657600080fd5b5060025460ff16600a0a6317d784000260038190553360009081526001602052604090205561017b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012157805160ff191683800117855561014e565b8280016001018555821561014e579182015b8281111561014e578251825591602001919060010190610133565b5061015a92915061015e565b5090565b61017891905b8082111561015a5760008155600101610164565b90565b6105bf8061018a6000396000f3fe6080604052600436106100a3576000357c01000000000000000000000000000000000000000000000000000000009004806354fd4d501161007657806354fd4d501461019957806370a08231146101ae5780637db3a946146101e157806395d89b41146100a8578063a9059cbb146101f6576100a3565b806306fdde03146100a857806318160ddd14610132578063313ce567146101595780634214f62a14610184575b600080fd5b3480156100b457600080fd5b506100bd610243565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f75781810151838201526020016100df565b50505050905090810190601f1680156101245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013e57600080fd5b5061014761027a565b60408051918252519081900360200190f35b34801561016557600080fd5b5061016e610280565b6040805160ff9092168252519081900360200190f35b34801561019057600080fd5b506100bd610289565b3480156101a557600080fd5b506100bd610317565b3480156101ba57600080fd5b50610147600480360360208110156101d157600080fd5b5035600160a060020a0316610372565b3480156101ed57600080fd5b506100bd61038d565b34801561020257600080fd5b5061022f6004803603604081101561021957600080fd5b50600160a060020a0381351690602001356103e8565b604080519115158252519081900360200190f35b60408051808201909152600481527f5745454400000000000000000000000000000000000000000000000000000000602082015281565b60035481565b60025460ff1681565b6006805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561030f5780601f106102e45761010080835404028352916020019161030f565b820191906000526020600020905b8154815290600101906020018083116102f257829003601f168201915b505050505081565b6004805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561030f5780601f106102e45761010080835404028352916020019161030f565b600160a060020a031660009081526001602052604090205490565b6005805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561030f5780601f106102e45761010080835404028352916020019161030f565b6000600160a060020a03831615156103ff57600080fd5b3360009081526001602052604090205482111561041b57600080fd5b600160a060020a038316600090815260016020526040902054610444818463ffffffff61056b16565b1161044e57600080fd5b600160a060020a038316600090815260016020526040808220543383529082205461047e9163ffffffff61056b16565b336000908152600160205260409020549091506104a1908463ffffffff61058116565b3360009081526001602052604080822092909255600160a060020a038616815220546104d3908463ffffffff61056b16565b600160a060020a0385166000818152600160209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3600160a060020a03841660009081526001602052604080822054338352912054829161055a919063ffffffff61056b16565b1461056157fe5b5060019392505050565b60008282018381101561057a57fe5b9392505050565b60008282111561058d57fe5b5090039056fea165627a7a7230582046063e6fdc969fef93b5bf9f0e0371631a3192f8c4e4dad699a9a6161514f5df002968747470733a2f2f7777772e74656e6a6f76652e636f6d2f776565642f737562736372697074696f6e61677265656d656e742e74787468747470733a2f2f65746865727363616e2e696f2f74782f307861333565383934343364663261626265346636326466633231336237636439386435643539323263323461353831613333393835376366363235353335366464",
  "constructorArguments": "68747470733a2f2f7777772e74656e6a6f76652e636f6d2f776565642f737562736372697074696f6e61677265656d656e742e74787468747470733a2f2f65746865727363616e2e696f2f74782f307861333565383934343364663261626265346636326466633231336237636439386435643539323263323461353831613333393835376366363235353335366464"
}