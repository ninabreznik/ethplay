{
  "address": "0x3896fcffff3a48c24ad1b2c2a0ba9e9a32ae982d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DepositAsset",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-22\n*/\n\npragma solidity 0.5.0; /*\n\n___________________________________________________________________\n  _      _                                        ______           \n  |  |  /          /                                /              \n--|-/|-/-----__---/----__----__---_--_----__-------/-------__------\n  |/ |/    /___) /   /   ' /   ) / /  ) /___)     /      /   )     \n__/__|____(___ _/___(___ _(___/_/_/__/_(___ _____/______(___/__o_o_\n\n                                                           \n                                                           \nDDDDDDDDDDDDD                            AAA               \nD::::::::::::DDD                        A:::A              \nD:::::::::::::::DD                     A:::::A             \nDDD:::::DDDDD:::::D                   A:::::::A            \n  D:::::D    D:::::D                 A:::::::::A           \n  D:::::D     D:::::D               A:::::A:::::A          \n  D:::::D     D:::::D              A:::::A A:::::A         \n  D:::::D     D:::::D             A:::::A   A:::::A        \n  D:::::D     D:::::D            A:::::A     A:::::A       \n  D:::::D     D:::::D           A:::::AAAAAAAAA:::::A      \n  D:::::D     D:::::D          A:::::::::::::::::::::A     \n  D:::::D    D:::::D          A:::::AAAAAAAAAAAAA:::::A    \nDDD:::::DDDDD:::::D          A:::::A             A:::::A   \nD:::::::::::::::DD          A:::::A               A:::::A  \nD::::::::::::DDD           A:::::A                 A:::::A \nDDDDDDDDDDDDD             AAAAAAA                   AAAAAAA\n                                                           \n                                                           \n                                                           \n// ----------------------------------------------------------------------------\n// 'Deposit Asset' Token contract with following functionalities:\n//      => Higher control of owner\n//      => SafeMath implementation \n//\n// Name             : Deposit Asset\n// Symbol           : DA\n// Decimals         : 15\n//\n// Copyright (c) 2018 FIRST DECENTRALIZED DEPOSIT PLATFORM ( https://fddp.io )\n// Contract designed by: EtherAuthority ( https://EtherAuthority.io ) \n// ----------------------------------------------------------------------------\n*/ \n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n    \n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;  \n  mapping(address => uint256) public holdersWithdrows;\n  \n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    uint256 _buffer = holdersWithdrows[msg.sender].mul(_value).div(balances[msg.sender]);\n    holdersWithdrows[_to] += _buffer;\n    holdersWithdrows[msg.sender] -= _buffer;\n    \n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n   \n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    uint256 _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n    require(_value != 0);\n    uint256 _buffer = holdersWithdrows[msg.sender].mul(_value).div(balances[msg.sender]);\n    holdersWithdrows[_to] += _buffer;\n    holdersWithdrows[msg.sender] -= _buffer;\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    \n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n  \n}\n/**\n * TheStocksTokens\n * \n */\ncontract DepositAsset is StandardToken {\n    \n    using SafeMath for uint256;\n    \n    string public constant name = \"Deposit Asset\";\n  \n    string public constant symbol = \"DA\";\n  \n    uint32 public constant decimals = 6;\n\n    uint256 private _totalSupply = 200000000000000; // stocks\n    \n    uint public _totalWithdrow  = 0;\n    \n    uint public total_withdrows  = 0;\n    \n    constructor () public {\n        balances[msg.sender] = _totalSupply;\n        emit Transfer(address(0x0), msg.sender, _totalSupply);\n    }\n\n\tfunction totalSupply() public view returns(uint256 total) {\n        return _totalSupply;\n    }\n    \n    // get any ethers to contract\n    function () external payable {\n        if (msg.value == 1 wei) {\n            require(balances[msg.sender] > 0);\n        \n            uint256 _totalDevidends = devidendsOf(msg.sender);\n            holdersWithdrows[msg.sender] += _totalDevidends;\n            _totalWithdrow += _totalDevidends;\n            \n            msg.sender.transfer(_totalDevidends);\n        }\n    }\n    \n    /* TEST / function holdersWithdrowsOf(address _owner) public constant returns(uint256 hw) {\n        return holdersWithdrows[_owner];\n    }//*/\n    function getDevidends() public returns (bool success){\n        require(balances[msg.sender] > 0);\n        \n        uint256 _totalDevidends = devidendsOf(msg.sender);\n        holdersWithdrows[msg.sender] += _totalDevidends;\n        _totalWithdrow += _totalDevidends;\n        \n        msg.sender.transfer(_totalDevidends);\n        \n        return true;\n    }\n    function devidendsOf(address _owner) public view returns (uint256 devidends) {\n        address self = address(this);\n        // определить сумму всех начисленых средств, определить долю и отминусовать ранее снятые дивиденды\n        return self.balance\n            .add(_totalWithdrow)\n            .mul(balances[_owner])\n            .div(_totalSupply)\n            .sub(holdersWithdrows[_owner]);\n    }\n   \n    function fund() public payable returns(bool success) {\n        success = true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_withdrows\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"devidendsOf\",\"outputs\":[{\"name\":\"devidends\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holdersWithdrows\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalWithdrow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getDevidends\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "608060405265b5e620f480006003556000600455600060055534801561002457600080fd5b5060035433600081815260208181526040808320859055805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a36109a58061007e6000396000f3fe6080604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610158578063095ea7b3146101e257806318160ddd1461022f57806323b872dd14610256578063313ce567146102995780634840b07c146102c757806350e08ddb146102dc57806370a082311461030f578063896aa79a1461034257806389acb9111461037557806395d89b411461038a578063a9059cbb1461039f578063b60d4288146103d8578063dd62ed3e146103e0578063efa251961461041b575b34600114156101565733600090815260208190526040812054116100fd57600080fd5b600061010833610430565b33600081815260016020526040808220805485019055600480548501905551929350909183156108fc0291849190818181858888f19350505050158015610153573d6000803e3d6000fd5b50505b005b34801561016457600080fd5b5061016d6104a7565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a757818101518382015260200161018f565b50505050905090810190601f1680156101d45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ee57600080fd5b5061021b6004803603604081101561020557600080fd5b50600160a060020a0381351690602001356104de565b604080519115158252519081900360200190f35b34801561023b57600080fd5b50610244610580565b60408051918252519081900360200190f35b34801561026257600080fd5b5061021b6004803603606081101561027957600080fd5b50600160a060020a03813581169160208101359091169060400135610586565b3480156102a557600080fd5b506102ae6106f8565b6040805163ffffffff9092168252519081900360200190f35b3480156102d357600080fd5b506102446106fd565b3480156102e857600080fd5b50610244600480360360208110156102ff57600080fd5b5035600160a060020a0316610430565b34801561031b57600080fd5b506102446004803603602081101561033257600080fd5b5035600160a060020a0316610703565b34801561034e57600080fd5b506102446004803603602081101561036557600080fd5b5035600160a060020a031661071e565b34801561038157600080fd5b50610244610730565b34801561039657600080fd5b5061016d610736565b3480156103ab57600080fd5b5061021b600480360360408110156103c257600080fd5b50600160a060020a03813516906020013561076d565b61021b610873565b3480156103ec57600080fd5b506102446004803603604081101561040357600080fd5b50600160a060020a0381358116916020013516610878565b34801561042757600080fd5b5061021b6108a3565b600160a060020a038116600090815260016020908152604080832054600354928490529083205460045430936104a0939261049492610488919061047c9088319063ffffffff61091d16565b9063ffffffff61092c16565b9063ffffffff61095016565b9063ffffffff61096716565b9392505050565b60408051808201909152600d81527f4465706f73697420417373657400000000000000000000000000000000000000602082015281565b600081158061050e5750336000908152600260209081526040808320600160a060020a0387168452909152902054155b151561051957600080fd5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60035490565b600160a060020a03831660009081526002602090815260408083203384529091528120548215156105b657600080fd5b336000908152602081815260408083205460019092528220546105e49190610488908763ffffffff61092c16565b600160a060020a038616600081815260016020908152604080832080548601905533835280832080548690039055928252819052205490915061062d908563ffffffff61091d16565b600160a060020a038087166000908152602081905260408082209390935590881681522054610662908563ffffffff61096716565b600160a060020a03871660009081526020819052604090205561068b828563ffffffff61096716565b600160a060020a03808816600081815260026020908152604080832033845282529182902094909455805188815290519289169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600195945050505050565b600681565b60055481565b600160a060020a031660009081526020819052604090205490565b60016020526000908152604090205481565b60045481565b60408051808201909152600281527f4441000000000000000000000000000000000000000000000000000000000000602082015281565b33600090815260208181526040808320546001909252822054829161079c91610488908663ffffffff61092c16565b600160a060020a038516600090815260016020908152604080832080548501905533835280832080548590039055908290529020549091506107e4908463ffffffff61096716565b3360009081526020819052604080822092909255600160a060020a03861681522054610816908463ffffffff61091d16565b600160a060020a038516600081815260208181526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b600190565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b3360009081526020819052604081205481106108be57600080fd5b60006108c933610430565b33600081815260016020526040808220805485019055600480548501905551929350909183156108fc0291849190818181858888f19350505050158015610914573d6000803e3d6000fd5b50600191505090565b6000828201838110156104a057fe5b6000828202831580610948575082848281151561094557fe5b04145b15156104a057fe5b600080828481151561095e57fe5b04949350505050565b60008282111561097357fe5b5090039056fea165627a7a72305820a03d69d5f8a18c6225bde1ad11248d1c5bb13c221ba9daee6158c2c26cb837370029"
}