{
  "address": "0x29789c9abebc185f1876af10c38ee47ee0c6ed48",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Crafting",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-05\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * \n * World War Goo - Competitive Idle Game\n * \n * https://ethergoo.io\n * \n */\n\ncontract Crafting {\n\n    Clans clans = Clans(0x0);\n    Inventory constant inventory = Inventory(0xb545507080b0f63df02ff9bd9302c2bb2447b826);\n    Material constant clothMaterial = Material(0x8a6014227138556a259e7b2bf1dce668f9bdfd06);\n    Material constant woodMaterial = Material(0x6804bbb708b8af0851e2980c8a5e9abb42adb179);\n    Material constant metalMaterial = Material(0xb334f68bf47c1f1c1556e7034954d389d7fbbf07);\n\n    address owner;\n    mapping(uint256 => Recipe) public recipeList;\n    mapping(address => bool) operator;\n\n    struct Recipe {\n        uint256 id;\n        uint256 itemId;\n\n        uint256 clothRequired;\n        uint256 woodRequired;\n        uint256 metalRequired;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function setClans(address clansContract) external {\n        require(msg.sender == owner); // TODO hardcode for launch?\n        clans = Clans(clansContract);\n    }\n\n    function setOperator(address gameContract, bool isOperator) external {\n        require(msg.sender == owner);\n        operator[gameContract] = isOperator;\n    }\n\n    function craftItem(uint256 recipeId) external {\n        Recipe memory recipe = recipeList[recipeId];\n        require(recipe.itemId > 0); // Valid recipe\n\n        // Clan discount\n        uint224 upgradeDiscount = clans.getPlayersClanUpgrade(msg.sender, 2); // class 2 = crafting discount\n\n        // Burn materials\n        if (recipe.clothRequired > 0) {\n            clothMaterial.burn(recipe.clothRequired - ((recipe.clothRequired * upgradeDiscount) / 100), msg.sender);\n        }\n        if (recipe.woodRequired > 0) {\n            woodMaterial.burn(recipe.woodRequired - ((recipe.woodRequired * upgradeDiscount) / 100), msg.sender);\n        }\n        if (recipe.metalRequired > 0) {\n            metalMaterial.burn(recipe.metalRequired - ((recipe.metalRequired * upgradeDiscount) / 100), msg.sender);\n        }\n\n        // Mint item\n        inventory.mintItem(recipe.itemId, msg.sender);\n    }\n\n    function addRecipe(uint256 id, uint256 itemId, uint256 clothRequired, uint256 woodRequired, uint256 metalRequired) external {\n        require(operator[msg.sender]);\n        recipeList[id] = Recipe(id, itemId, clothRequired, woodRequired, metalRequired);\n    }\n\n}\n\n\ncontract Clans {\n    function getPlayersClanUpgrade(address player, uint256 upgradeClass) external view returns (uint224 upgradeGain);\n}\n\ncontract Inventory {\n    function mintItem(uint256 itemId, address player) external;\n}\n\ncontract Material {\n    function burn(uint256 amount, address player) public;\n}",
  "bytecode": "608060405260008054600160a060020a031916905534801561002057600080fd5b5060018054600160a060020a03191633179055610697806100426000396000f30060806040526004361061006c5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663558a729781146100715780637309cbbd1461009957806399560187146100b1578063f40b26bd146100f4578063f9c3899914610115575b600080fd5b34801561007d57600080fd5b50610097600160a060020a03600435166024351515610139565b005b3480156100a557600080fd5b5061009760043561017b565b3480156100bd57600080fd5b506100c960043561054c565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561010057600080fd5b50610097600160a060020a036004351661057b565b34801561012157600080fd5b506100976004356024356044356064356084356105c1565b600154600160a060020a0316331461015057600080fd5b600160a060020a03919091166000908152600360205260409020805460ff1916911515919091179055565b61018361063b565b506000818152600260208181526040808420815160a08101835281548152600182015493810184905293810154918401919091526003810154606084015260040154608083015290919081106101d857600080fd5b60008054604080517fa8be8329000000000000000000000000000000000000000000000000000000008152336004820152600260248201529051600160a060020a039092169263a8be8329926044808401936020939083900390910190829087803b15801561024657600080fd5b505af115801561025a573d6000803e3d6000fd5b505050506040513d602081101561027057600080fd5b50516040830151909150600010156103365760408281015181517ffcd3533c00000000000000000000000000000000000000000000000000000000815260647bffffffffffffffffffffffffffffffffffffffffffffffffffffffff851683020490910360048201523360248201529051738a6014227138556a259e7b2bf1dce668f9bdfd069163fcd3533c91604480830192600092919082900301818387803b15801561031d57600080fd5b505af1158015610331573d6000803e3d6000fd5b505050505b6000826060015111156103f7576060820151604080517ffcd3533c00000000000000000000000000000000000000000000000000000000815260647bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8516840204909203600483015233602483015251736804bbb708b8af0851e2980c8a5e9abb42adb1799163fcd3533c91604480830192600092919082900301818387803b1580156103de57600080fd5b505af11580156103f2573d6000803e3d6000fd5b505050505b6000826080015111156104b8576080820151604080517ffcd3533c00000000000000000000000000000000000000000000000000000000815260647bffffffffffffffffffffffffffffffffffffffffffffffffffffffff851684020490920360048301523360248301525173b334f68bf47c1f1c1556e7034954d389d7fbbf079163fcd3533c91604480830192600092919082900301818387803b15801561049f57600080fd5b505af11580156104b3573d6000803e3d6000fd5b505050505b6020820151604080517f4dc936c000000000000000000000000000000000000000000000000000000000815260048101929092523360248301525173b545507080b0f63df02ff9bd9302c2bb2447b82691634dc936c091604480830192600092919082900301818387803b15801561052f57600080fd5b505af1158015610543573d6000803e3d6000fd5b50505050505050565b600260208190526000918252604090912080546001820154928201546003830154600490930154919392909185565b600154600160a060020a0316331461059257600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b3360009081526003602052604090205460ff1615156105df57600080fd5b6040805160a0810182528681526020808201968752818301958652606082019485526080820193845260009788526002908190529190962095518655935160018601559151928401929092559051600383015551600490910155565b60a060405190810160405280600081526020016000815260200160008152602001600081526020016000815250905600a165627a7a72305820b46506b9e2609d7e5a6566b5502d089dc384c6c515a45206d1d0f7d2976eb3bd0029"
}