{
  "address": "0xc4d43af0518c4ac875b01848f1087c435c42659b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthToSmthSwaps",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-17\n*/\n\npragma solidity ^0.5.0;\n\ncontract EthToSmthSwaps {\n\n  using SafeMath for uint;\n\n  address public owner;\n  address public ratingContractAddress;\n  uint256 SafeTime = 1 hours; // atomic swap timeOut\n\n  struct Swap {\n    address payable targetWallet;\n    bytes32 secret;\n    bytes20 secretHash;\n    uint256 createdAt;\n    uint256 balance;\n  }\n\n  // ETH Owner => BTC Owner => Swap\n  mapping(address => mapping(address => Swap)) public swaps;\n  mapping(address => mapping(address => uint)) public participantSigns;\n\n  constructor () public {\n    owner = msg.sender;\n  }\n\n  event CreateSwap(address _buyer, address _seller, uint256 _value, bytes20 _secretHash, uint256 createdAt);\n\n  // ETH Owner creates Swap with secretHash\n  // ETH Owner make token deposit\n  function createSwap(bytes20 _secretHash, address payable _participantAddress) public payable {\n    require(msg.value > 0);\n    require(swaps[msg.sender][_participantAddress].balance == uint256(0));\n\n    swaps[msg.sender][_participantAddress] = Swap(\n      _participantAddress,\n      bytes32(0),\n      _secretHash,\n      now,\n      msg.value\n    );\n\n    emit CreateSwap(_participantAddress, msg.sender, msg.value, _secretHash, now);\n  }\n\n  // ETH Owner creates Swap with secretHash\n  // ETH Owner make token deposit\n  function createSwapTarget(bytes20 _secretHash, address payable _participantAddress, address payable _targetWallet) public payable {\n    require(msg.value > 0);\n    require(swaps[msg.sender][_participantAddress].balance == uint256(0));\n\n    swaps[msg.sender][_participantAddress] = Swap(\n      _targetWallet,\n      bytes32(0),\n      _secretHash,\n      now,\n      msg.value\n    );\n\n    emit CreateSwap(_participantAddress, msg.sender, msg.value, _secretHash, now);\n  }\n\n  function getBalance(address _ownerAddress) public view returns (uint256) {\n    return swaps[_ownerAddress][msg.sender].balance;\n  }\n\n  // Get target wallet (buyer check)\n  function getTargetWallet(address _ownerAddress) public view returns (address) {\n      return swaps[_ownerAddress][msg.sender].targetWallet;\n  }\n\n  event Withdraw(address _buyer, address _seller, bytes20 _secretHash, uint256 withdrawnAt);\n\n  // BTC Owner withdraw money and adds secret key to swap\n  // BTC Owner receive +1 reputation\n  function withdraw(bytes32 _secret, address _ownerAddress) public {\n    Swap memory swap = swaps[_ownerAddress][msg.sender];\n\n    require(swap.secretHash == ripemd160(abi.encodePacked(_secret)));\n    require(swap.balance > uint256(0));\n    require(swap.createdAt.add(SafeTime) > now);\n\n    swap.targetWallet.transfer(swap.balance);\n\n    swaps[_ownerAddress][msg.sender].balance = 0;\n    swaps[_ownerAddress][msg.sender].secret = _secret;\n\n    emit Withdraw(msg.sender, _ownerAddress, swap.secretHash, now);\n  }\n  // BTC Owner withdraw money and adds secret key to swap\n  // BTC Owner receive +1 reputation\n  function withdrawNoMoney(bytes32 _secret, address participantAddress) public {\n    Swap memory swap = swaps[msg.sender][participantAddress];\n\n    require(swap.secretHash == ripemd160(abi.encodePacked(_secret)));\n    require(swap.balance > uint256(0));\n    require(swap.createdAt.add(SafeTime) > now);\n\n    swap.targetWallet.transfer(swap.balance);\n\n    swaps[msg.sender][participantAddress].balance = 0;\n    swaps[msg.sender][participantAddress].secret = _secret;\n\n    emit Withdraw(participantAddress, msg.sender, swap.secretHash, now);\n  }\n  // BTC Owner withdraw money and adds secret key to swap\n  // BTC Owner receive +1 reputation\n  function withdrawOther(bytes32 _secret, address _ownerAddress, address participantAddress) public {\n    Swap memory swap = swaps[_ownerAddress][participantAddress];\n\n    require(swap.secretHash == ripemd160(abi.encodePacked(_secret)));\n    require(swap.balance > uint256(0));\n    require(swap.createdAt.add(SafeTime) > now);\n\n    swap.targetWallet.transfer(swap.balance);\n\n    swaps[_ownerAddress][participantAddress].balance = 0;\n    swaps[_ownerAddress][participantAddress].secret = _secret;\n\n    emit Withdraw(participantAddress, _ownerAddress, swap.secretHash, now);\n  }\n\n  // ETH Owner receive secret\n  function getSecret(address _participantAddress) public view returns (bytes32) {\n    return swaps[msg.sender][_participantAddress].secret;\n  }\n\n  event Close(address _buyer, address _seller);\n\n\n\n  event Refund(address _buyer, address _seller, bytes20 _secretHash);\n\n  // ETH Owner refund money\n  // BTC Owner gets -1 reputation\n  function refund(address _participantAddress) public {\n    Swap memory swap = swaps[msg.sender][_participantAddress];\n\n    require(swap.balance > uint256(0));\n    require(swap.createdAt.add(SafeTime) < now);\n\n    msg.sender.transfer(swap.balance);\n\n    clean(msg.sender, _participantAddress);\n\n    emit Refund(_participantAddress, msg.sender, swap.secretHash);\n  }\n\n  function clean(address _ownerAddress, address _participantAddress) internal {\n    delete swaps[_ownerAddress][_participantAddress];\n    delete participantSigns[_ownerAddress][_participantAddress];\n  }\n}\n\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_secret\",\"type\":\"bytes32\"},{\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_participantAddress\",\"type\":\"address\"}],\"name\":\"getSecret\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"participantSigns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secret\",\"type\":\"bytes32\"},{\"name\":\"participantAddress\",\"type\":\"address\"}],\"name\":\"withdrawNoMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secretHash\",\"type\":\"bytes20\"},{\"name\":\"_participantAddress\",\"type\":\"address\"},{\"name\":\"_targetWallet\",\"type\":\"address\"}],\"name\":\"createSwapTarget\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"swaps\",\"outputs\":[{\"name\":\"targetWallet\",\"type\":\"address\"},{\"name\":\"secret\",\"type\":\"bytes32\"},{\"name\":\"secretHash\",\"type\":\"bytes20\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secretHash\",\"type\":\"bytes20\"},{\"name\":\"_participantAddress\",\"type\":\"address\"}],\"name\":\"createSwap\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secret\",\"type\":\"bytes32\"},{\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"name\":\"participantAddress\",\"type\":\"address\"}],\"name\":\"withdrawOther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratingContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"getTargetWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participantAddress\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_secretHash\",\"type\":\"bytes20\"},{\"indexed\":false,\"name\":\"createdAt\",\"type\":\"uint256\"}],\"name\":\"CreateSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_secretHash\",\"type\":\"bytes20\"},{\"indexed\":false,\"name\":\"withdrawnAt\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"Close\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_secretHash\",\"type\":\"bytes20\"}],\"name\":\"Refund\",\"type\":\"event\"}]",
  "bytecode": "6080604052610e1060025534801561001657600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061215e806100666000396000f3fe6080604052600436106100df576000357c01000000000000000000000000000000000000000000000000000000009004806399caf9751161009c578063dcb5930a11610076578063dcb5930a1461051b578063e03ec01d14610572578063f8b2cb4f14610603578063fa89401a14610668576100df565b806399caf97514610358578063a543bae714610443578063d348b5a4146104a0576100df565b80631b258d50146100e4578063284180fc1461013f5780634d025fdf146101a45780635721b89a146102295780638da5cb5b1461028457806393716de8146102db575b600080fd5b3480156100f057600080fd5b5061013d6004803603604081101561010757600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106b9565b005b34801561014b57600080fd5b5061018e6004803603602081101561016257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b3d565b6040518082815260200191505060405180910390f35b3480156101b057600080fd5b50610213600480360360408110156101c757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bc6565b6040518082815260200191505060405180910390f35b34801561023557600080fd5b506102826004803603604081101561024c57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610beb565b005b34801561029057600080fd5b5061029961106f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610356600480360360608110156102f157600080fd5b8101908080356bffffffffffffffffffffffff19169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611094565b005b34801561036457600080fd5b506103c76004803603604081101561037b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611379565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001846bffffffffffffffffffffffff19166bffffffffffffffffffffffff191681526020018381526020018281526020019550505050505060405180910390f35b61049e6004803603604081101561045957600080fd5b8101908080356bffffffffffffffffffffffff19169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113f5565b005b3480156104ac57600080fd5b50610519600480360360608110156104c357600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116d9565b005b34801561052757600080fd5b50610530611b5e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561057e57600080fd5b506105c16004803603602081101561059557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b84565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561060f57600080fd5b506106526004803603602081101561062657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c2d565b6040518082815260200191505060405180910390f35b34801561067457600080fd5b506106b76004803603602081101561068b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cb6565b005b6106c16120da565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a90046c01000000000000000000000000026bffffffffffffffffffffffff19166bffffffffffffffffffffffff19168152602001600382015481526020016004820154815250509050600383604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b6020831015156108575780518252602082019150602081019050602083039250610832565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa158015610899573d6000803e3d6000fd5b505050604051516c01000000000000000000000000026bffffffffffffffffffffffff191681604001516bffffffffffffffffffffffff19161415156108de57600080fd5b600081608001511115156108f157600080fd5b4261090b6002548360600151611f5090919063ffffffff16565b11151561091757600080fd5b806000015173ffffffffffffffffffffffffffffffffffffffff166108fc82608001519081150290604051600060405180830381858888f19350505050158015610965573d6000803e3d6000fd5b506000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018190555082600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055507fa670cc0e4f281aa123c418dd3959d0c502e351098b68a58a4a395f7208a3aeeb3383836040015142604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001836bffffffffffffffffffffffff19166bffffffffffffffffffffffff1916815260200182815260200194505050505060405180910390a1505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b6004602052816000526040600020602052806000526040600020600091509150505481565b610bf36120da565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a90046c01000000000000000000000000026bffffffffffffffffffffffff19166bffffffffffffffffffffffff19168152602001600382015481526020016004820154815250509050600383604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083101515610d895780518252602082019150602081019050602083039250610d64565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa158015610dcb573d6000803e3d6000fd5b505050604051516c01000000000000000000000000026bffffffffffffffffffffffff191681604001516bffffffffffffffffffffffff1916141515610e1057600080fd5b60008160800151111515610e2357600080fd5b42610e3d6002548360600151611f5090919063ffffffff16565b111515610e4957600080fd5b806000015173ffffffffffffffffffffffffffffffffffffffff166108fc82608001519081150290604051600060405180830381858888f19350505050158015610e97573d6000803e3d6000fd5b506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018190555082600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055507fa670cc0e4f281aa123c418dd3959d0c502e351098b68a58a4a395f7208a3aeeb8233836040015142604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001836bffffffffffffffffffffffff19166bffffffffffffffffffffffff1916815260200182815260200194505050505060405180910390a1505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000341115156110a357600080fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015414151561113157600080fd5b60a0604051908101604052808273ffffffffffffffffffffffffffffffffffffffff16815260200160006001028152602001846bffffffffffffffffffffffff1916815260200142815260200134815250600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c010000000000000000000000009004021790555060608201518160030155608082015181600401559050507f67984a2c2da3fe41a664c2f5d2d644b1c822e267ad1b6d70545f2370dd72661c8233348642604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001836bffffffffffffffffffffffff19166bffffffffffffffffffffffff191681526020018281526020019550505050505060405180910390a1505050565b6003602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a90046c0100000000000000000000000002908060030154908060040154905085565b60003411151561140457600080fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015414151561149257600080fd5b60a0604051908101604052808273ffffffffffffffffffffffffffffffffffffffff16815260200160006001028152602001836bffffffffffffffffffffffff1916815260200142815260200134815250600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c010000000000000000000000009004021790555060608201518160030155608082015181600401559050507f67984a2c2da3fe41a664c2f5d2d644b1c822e267ad1b6d70545f2370dd72661c8133348542604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001836bffffffffffffffffffffffff19166bffffffffffffffffffffffff191681526020018281526020019550505050505060405180910390a15050565b6116e16120da565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a90046c01000000000000000000000000026bffffffffffffffffffffffff19166bffffffffffffffffffffffff19168152602001600382015481526020016004820154815250509050600384604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b6020831015156118775780518252602082019150602081019050602083039250611852565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa1580156118b9573d6000803e3d6000fd5b505050604051516c01000000000000000000000000026bffffffffffffffffffffffff191681604001516bffffffffffffffffffffffff19161415156118fe57600080fd5b6000816080015111151561191157600080fd5b4261192b6002548360600151611f5090919063ffffffff16565b11151561193757600080fd5b806000015173ffffffffffffffffffffffffffffffffffffffff166108fc82608001519081150290604051600060405180830381858888f19350505050158015611985573d6000803e3d6000fd5b506000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018190555083600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055507fa670cc0e4f281aa123c418dd3959d0c502e351098b68a58a4a395f7208a3aeeb8284836040015142604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001836bffffffffffffffffffffffff19166bffffffffffffffffffffffff1916815260200182815260200194505050505060405180910390a150505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401549050919050565b611cbe6120da565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a90046c01000000000000000000000000026bffffffffffffffffffffffff19166bffffffffffffffffffffffff1916815260200160038201548152602001600482015481525050905060008160800151111515611e1057600080fd5b42611e2a6002548360600151611f5090919063ffffffff16565b101515611e3657600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc82608001519081150290604051600060405180830381858888f19350505050158015611e80573d6000803e3d6000fd5b50611e8b3383611f71565b7f7d398516b5972c69dadc977fbce748582045eecd7ecb320ec0cf6d837856078282338360400151604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff19166bffffffffffffffffffffffff19168152602001935050505060405180910390a15050565b6000808284019050838110151515611f6757600080fd5b8091505092915050565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382016000905560048201600090555050600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090555050565b60a060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000801916815260200160006bffffffffffffffffffffffff191681526020016000815260200160008152509056fea165627a7a7230582083f9c560b25460339d7c746b6f29a9e919d41a6787c64b53113dcc66b0d0bdf00029"
}