{
  "address": "0xbf4a29269bf3a5c351c2af3a9c9ed81b07129ce4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-30\n*/\n\npragma solidity ^0.4.15;\n\n/*\n    ERC20 Standard Token interface\n*/\ncontract IERC20Token {\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\n    function name() public constant returns (string) { name; }\n    function symbol() public constant returns (string) { symbol; }\n    function decimals() public constant returns (uint8) { decimals; }\n    function totalSupply() public constant returns (uint256) { totalSupply; }\n    function balanceOf(address _owner) public constant returns (uint256 balance) { _owner; balance; }\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) { _owner; _spender; remaining; }\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n}\n\n/*\n    Utilities & Common Modifiers\n*/\ncontract Utils {\n    /**\n        constructor\n    */\n    function Utils() {\n    }\n\n    // validates an address - currently only checks that it isn't null\n    modifier validAddress(address _address) {\n        require(_address != 0x0);\n        _;\n    }\n\n    // verifies that the address is different than this contract address\n    modifier notThis(address _address) {\n        require(_address != address(this));\n        _;\n    }\n\n    // Overflow protected math functions\n\n    /**\n        @dev returns the sum of _x and _y, asserts if the calculation overflows\n\n        @param _x   value 1\n        @param _y   value 2\n\n        @return sum\n    */\n    function safeAdd(uint256 _x, uint256 _y) internal returns (uint256) {\n        uint256 z = _x + _y;\n        assert(z >= _x);\n        return z;\n    }\n\n    /**\n        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\n\n        @param _x   minuend\n        @param _y   subtrahend\n\n        @return difference\n    */\n    function safeSub(uint256 _x, uint256 _y) internal returns (uint256) {\n        assert(_x >= _y);\n        return _x - _y;\n    }\n\n    /**\n        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\n\n        @param _x   factor 1\n        @param _y   factor 2\n\n        @return product\n    */\n    function safeMul(uint256 _x, uint256 _y) internal returns (uint256) {\n        uint256 z = _x * _y;\n        assert(_x == 0 || z / _x == _y);\n        return z;\n    }\n}\n\n/*\n    Owned contract interface\n*/\ncontract IOwned {\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\n    function owner() public constant returns (address) { owner; }\n\n    function transferOwnership(address _newOwner) public;\n    function acceptOwnership() public;\n}\n\n/*\n    Provides support and utilities for contract ownership\n*/\ncontract Owned is IOwned {\n    address public owner;\n    address public newOwner;\n\n    event OwnerUpdate(address _prevOwner, address _newOwner);\n\n    /**\n        @dev constructor\n    */\n    function Owned() {\n        owner = msg.sender;\n    }\n\n    // allows execution by the owner only\n    modifier ownerOnly {\n        assert(msg.sender == owner);\n        _;\n    }\n\n    /**\n        @dev allows transferring the contract ownership\n        the new owner still needs to accept the transfer\n        can only be called by the contract owner\n\n        @param _newOwner    new contract owner\n    */\n    function transferOwnership(address _newOwner) public ownerOnly {\n        require(_newOwner != owner);\n        newOwner = _newOwner;\n    }\n\n    /**\n        @dev used by a new owner to accept an ownership transfer\n    */\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = 0x0;\n    }\n}\n\n/*\n    Token Holder interface\n*/\ncontract ITokenHolder is IOwned {\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public;\n}\n\n/*\n    We consider every contract to be a 'token holder' since it's currently not possible\n    for a contract to deny receiving tokens.\n\n    The TokenHolder's contract sole purpose is to provide a safety mechanism that allows\n    the owner to send tokens that were sent to the contract by mistake back to their sender.\n*/\ncontract TokenHolder is ITokenHolder, Owned, Utils {\n    /**\n        @dev constructor\n    */\n    function TokenHolder() {\n    }\n\n    /**\n        @dev withdraws tokens held by the contract and sends them to an account\n        can only be called by the owner\n\n        @param _token   ERC20 token contract address\n        @param _to      account to receive the new amount\n        @param _amount  amount to withdraw\n    */\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount)\n        public\n        ownerOnly\n        validAddress(_token)\n        validAddress(_to)\n        notThis(_to)\n    {\n        assert(_token.transfer(_to, _amount));\n    }\n}\n\n/**\n    ERC20 Standard Token implementation\n*/\ncontract ERC20Token is IERC20Token, Utils {\n    string public standard = \"Token 0.1\";\n    string public name = \"\";\n    string public symbol = \"\";\n    uint8 public decimals = 0;\n    uint256 public totalSupply = 0;\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    /**\n        @dev constructor\n\n        @param _name        token name\n        @param _symbol      token symbol\n        @param _decimals    decimal points, for display purposes\n    */\n    function ERC20Token(string _name, string _symbol, uint8 _decimals) {\n        require(bytes(_name).length > 0 && bytes(_symbol).length > 0); // validate input\n\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    /**\n        @dev send coins\n        throws on any error rather then return a false flag to minimize user errors\n\n        @param _to      target address\n        @param _value   transfer amount\n\n        @return true if the transfer was successful, false if it wasn't\n    */\n    function transfer(address _to, uint256 _value)\n        public\n        validAddress(_to)\n        returns (bool success)\n    {\n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n        @dev an account/contract attempts to get the coins\n        throws on any error rather then return a false flag to minimize user errors\n\n        @param _from    source address\n        @param _to      target address\n        @param _value   transfer amount\n\n        @return true if the transfer was successful, false if it wasn't\n    */\n    function transferFrom(address _from, address _to, uint256 _value)\n        public\n        validAddress(_from)\n        validAddress(_to)\n        returns (bool success)\n    {\n        allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender], _value);\n        balanceOf[_from] = safeSub(balanceOf[_from], _value);\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n        @dev allow another account/contract to spend some tokens on your behalf\n        throws on any error rather then return a false flag to minimize user errors\n\n        also, to minimize the risk of the approve/transferFrom attack vector\n        (see https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/), approve has to be called twice\n        in 2 separate transactions - once to change the allowance to 0 and secondly to change it to the new allowance value\n\n        @param _spender approved address\n        @param _value   allowance amount\n\n        @return true if the approval was successful, false if it wasn't\n    */\n    function approve(address _spender, uint256 _value)\n        public\n        validAddress(_spender)\n        returns (bool success)\n    {\n        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n}\n\ncontract Token is ERC20Token, TokenHolder {\n\n    function Token(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply, address _tokenHolder) ERC20Token(_name, _symbol, _decimals)\n    {\n        totalSupply = _totalSupply * 1 ether;\n        \n        if (_tokenHolder == 0x0) {\n            _tokenHolder = msg.sender;\n        }\n        owner = _tokenHolder;\n        balanceOf[_tokenHolder] = _totalSupply * 1 ether;\n    }\n\n    function deliverPresaleTokens(address[] _batchOfAddresses, uint256[] _amountOfTokens) public ownerOnly returns (bool success) {\n        for (uint256 i = 0; i < _batchOfAddresses.length; i++) {\n            transfer(_batchOfAddresses[i], _amountOfTokens[i]);            \n        }\n        return true;\n    }\n}",
  "bytecode": "606060405260408051908101604052600981527f546f6b656e20302e310000000000000000000000000000000000000000000000602082015260029080516200004d929160200190620001d5565b50602060405190810160405260008152600390805162000072929160200190620001d5565b50602060405190810160405260008152600490805162000097929160200190620001d5565b506005805460ff1916905560006006553415620000b357600080fd5b60405162000fb638038062000fb68339810160405280805182019190602001805182019190602001805191906020018051919060200180519150505b5b8484845b5b5b60008054600160a060020a03191633600160a060020a03161790555b5b6000835111801562000126575060008251115b15156200013257600080fd5b600383805162000147929160200190620001d5565b5060048280516200015d929160200190620001d5565b506005805460ff191660ff83161790555b5050505b670de0b6b3a76400008202600655600160a060020a0381161515620001945750335b60008054600160a060020a031916600160a060020a03831690811782558152600760205260409020670de0b6b3a7640000830290555b50505050506200027f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200021857805160ff191683800117855562000248565b8280016001018555821562000248579182015b82811115620002485782518255916020019190600101906200022b565b5b50620002579291506200025b565b5090565b6200027c91905b8082111562000257576000815560010162000262565b5090565b90565b610d27806200028f6000396000f300606060405236156100e35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100e8578063095ea7b31461017357806318160ddd146101a957806318b7fed8146101ce57806323b872dd14610271578063313ce567146102ad5780635a3b7e42146102d65780635e35359e1461036157806370a082311461038b57806379ba5097146103bc5780638da5cb5b146103d157806395d89b4114610400578063a9059cbb1461048b578063d4ee1d90146104c1578063dd62ed3e146104f0578063f2fde38b14610527575b600080fd5b34156100f357600080fd5b6100fb610548565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101385780820151818401525b60200161011f565b50505050905090810190601f1680156101655780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017e57600080fd5b610195600160a060020a03600435166024356105e6565b604051901515815260200160405180910390f35b34156101b457600080fd5b6101bc6106a6565b60405190815260200160405180910390f35b34156101d957600080fd5b6101956004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437509496506106ac95505050505050565b604051901515815260200160405180910390f35b341561027c57600080fd5b610195600160a060020a036004358116906024351660443561071f565b604051901515815260200160405180910390f35b34156102b857600080fd5b6102c0610855565b60405160ff909116815260200160405180910390f35b34156102e157600080fd5b6100fb61085e565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101385780820151818401525b60200161011f565b50505050905090810190601f1680156101655780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561036c57600080fd5b610389600160a060020a03600435811690602435166044356108fc565b005b341561039657600080fd5b6101bc600160a060020a0360043516610a08565b60405190815260200160405180910390f35b34156103c757600080fd5b610389610a1a565b005b34156103dc57600080fd5b6103e4610ac2565b604051600160a060020a03909116815260200160405180910390f35b341561040b57600080fd5b6100fb610ad1565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101385780820151818401525b60200161011f565b50505050905090810190601f1680156101655780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561049657600080fd5b610195600160a060020a0360043516602435610b6f565b604051901515815260200160405180910390f35b34156104cc57600080fd5b6103e4610c3e565b604051600160a060020a03909116815260200160405180910390f35b34156104fb57600080fd5b6101bc600160a060020a0360043581169060243516610c4d565b60405190815260200160405180910390f35b341561053257600080fd5b610389600160a060020a0360043516610c6a565b005b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105de5780601f106105b3576101008083540402835291602001916105de565b820191906000526020600020905b8154815290600101906020018083116105c157829003601f168201915b505050505081565b600082600160a060020a03811615156105fe57600080fd5b82158061062e5750600160a060020a03338116600090815260086020908152604080832093881683529290522054155b151561063957600080fd5b600160a060020a03338116600081815260086020908152604080832094891680845294909152908190208690557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a3600191505b5b5092915050565b60065481565b60008054819033600160a060020a039081169116146106c757fe5b5060005b8351811015610712576107088482815181106106e357fe5b906020019060200201518483815181106106f957fe5b90602001906020020151610b6f565b505b6001016106cb565b600191505b5b5092915050565b600083600160a060020a038116151561073757600080fd5b83600160a060020a038116151561074d57600080fd5b600160a060020a038087166000908152600860209081526040808320339094168352929052205461077e9085610cca565b600160a060020a0380881660008181526008602090815260408083203390951683529381528382209490945590815260079092529020546107bf9085610cca565b600160a060020a0380881660009081526007602052604080822093909355908716815220546107ee9085610ce1565b600160a060020a03808716600081815260076020526040908190209390935591908816907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9087905190815260200160405180910390a3600192505b5b505b509392505050565b60055460ff1681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105de5780601f106105b3576101008083540402835291602001916105de565b820191906000526020600020905b8154815290600101906020018083116105c157829003601f168201915b505050505081565b60005433600160a060020a0390811691161461091457fe5b82600160a060020a038116151561092a57600080fd5b82600160a060020a038116151561094057600080fd5b8330600160a060020a031681600160a060020a03161415151561096257600080fd5b85600160a060020a031663a9059cbb86866000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156109d857600080fd5b6102c65a03f115156109e957600080fd5b5050506040518051905015156109fb57fe5b5b5b505b505b505b505050565b60076020526000908152604090205481565b60015433600160a060020a03908116911614610a3557600080fd5b6000546001547f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a91600160a060020a039081169116604051600160a060020a039283168152911660208201526040908101905180910390a1600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a038416179091551690555b565b600054600160a060020a031681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105de5780601f106105b3576101008083540402835291602001916105de565b820191906000526020600020905b8154815290600101906020018083116105c157829003601f168201915b505050505081565b600082600160a060020a0381161515610b8757600080fd5b600160a060020a033316600090815260076020526040902054610baa9084610cca565b600160a060020a033381166000908152600760205260408082209390935590861681522054610bd99084610ce1565b600160a060020a0380861660008181526007602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b5b5092915050565b600154600160a060020a031681565b600860209081526000928352604080842090915290825290205481565b60005433600160a060020a03908116911614610c8257fe5b600054600160a060020a0382811691161415610c9d57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600081831015610cd657fe5b508082035b92915050565b600082820183811015610cf057fe5b8091505b50929150505600a165627a7a72305820c020b5385f99a0af6099363253aa7d4975434d1b0918b113ea82b55c7fcd350b002900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000005b7ffe471a3f5bcd15f703b288961749e961c3ff00000000000000000000000000000000000000000000000000000000000000084b656e20436f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034b454e0000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000005b7ffe471a3f5bcd15f703b288961749e961c3ff00000000000000000000000000000000000000000000000000000000000000084b656e20436f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034b454e0000000000000000000000000000000000000000000000000000000000"
}