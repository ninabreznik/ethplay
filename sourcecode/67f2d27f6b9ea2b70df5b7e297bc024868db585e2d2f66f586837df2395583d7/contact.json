{
  "address": "0x0abefb7611cb3a01ea3fad85f33c3c934f8e2cf4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "FaradToken",
  "contractName": "FaradCryptoken",
  "compilerVersion": "v0.4.12+commit.194ff033",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-17\n*/\n\n/**\n * Copyright (C) Virtue Fintech FZ-LLC, Dubai\n * All rights reserved.\n * Author: [emailÂ protected]\n *\n * This code is adapted from OpenZeppelin Project.\n * more at http://openzeppelin.org.\n *\n * MIT License\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy \n * of this software and associated documentation files (the \"\"Software\"\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or \n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions: \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN \n * THE SOFTWARE.\n *\n */\npragma solidity ^0.4.11;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Guarded {\n\n    modifier isValidAmount(uint256 _amount) { \n        require(_amount > 0); \n        _; \n    }\n\n    // ensure address not null, and not this contract address\n    modifier isValidAddress(address _address) {\n        require(_address != 0x0 && _address != address(this));\n        _;\n    }\n\n}\n\ncontract Ownable {\n    address public owner;\n\n    /** \n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner. \n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to. \n     */\n    function transferOwnership(address newOwner) onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n\n}\n\ncontract Claimable is Ownable {\n    address public pendingOwner;\n\n    /**\n     * @dev Modifier throws if called by any account other than the pendingOwner. \n     */\n    modifier onlyPendingOwner() {\n        require(msg.sender == pendingOwner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to set the pendingOwner address. \n     * @param newOwner The address to transfer ownership to. \n     */\n    function transferOwnership(address newOwner) onlyOwner {\n        pendingOwner = newOwner;\n    }\n\n    /**\n     * @dev Allows the pendingOwner address to finalize the transfer.\n     */\n    function claimOwnership() onlyPendingOwner {\n        owner = pendingOwner;\n        pendingOwner = 0x0;\n    }\n}\n\ncontract ERC20 {\n    \n    /// total amount of tokens\n    uint256 public totalSupply;\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) constant returns (uint256 balance);\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) returns (bool success);\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of tokens to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) returns (bool success);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\n\ncontract ERC20Token is ERC20 {\n    using SafeMath for uint256;\n\n    string public standard = 'Cryptoken 0.1.1';\n\n    string public name = '';            // the token name\n    string public symbol = '';          // the token symbol\n    uint8 public decimals = 0;          // the number of decimals\n\n    // mapping of our users to balance\n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) public allowed;\n\n    // our constructor. We have fixed everything above, and not as \n    // parameters in the constructor.\n    function ERC20Token(string _name, string _symbol, uint8 _decimals) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    // get token balance\n    function balanceOf(address _owner) \n        public constant \n        returns (uint256 balance) \n    {\n        return balances[_owner];\n    }    \n\n    /**\n     * make a transfer. This can be called from the token holder.\n     * e.g. Token holder Alice, can issue somethign like this to Bob\n     *      Alice.transfer(Bob, 200);     // to transfer 200 to Bob\n     */\n    /// Initiate a transfer to `_to` with value `_value`?\n    function transfer(address _to, uint256 _value) \n        public returns (bool success) \n    {\n        // sanity check\n        require(_to != address(this));\n\n        // // check for overflows\n        // require(_value > 0 &&\n        //   balances[msg.sender] < _value &&\n        //   balances[_to] + _value < balances[_to]);\n\n        // \n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        \n        // emit transfer event\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * make an approved transfer to another account from vault. This operation\n     * should be called after approved operation below.\n     * .e.g Alice allow Bob to spend 30 by doing:\n     *      Alice.approve(Bob, 30);                 // allow 30 to Bob\n     *\n     * and Bob can claim, say 10, from that by doing\n     *      Bob.transferFrom(Alice, Bob, 10);       // spend only 10\n     * and Bob's balance shall be 20 in the allowance.\n     */\n    /// Initiate a transfer of `_value` from `_from` to `_to`\n    function transferFrom(address _from, address _to, uint256 _value)         \n        public returns (bool success) \n    {    \n        // sanity check\n        require(_to != 0x0 && _from != 0x0);\n        require(_from != _to && _to != address(this));\n\n        // check for overflows\n        // require(_value > 0 &&\n        //   balances[_from] >= _value &&\n        //   allowed[_from][_to] <= _value &&\n        //   balances[_to] + _value < balances[_to]);\n\n        // update public balance\n        allowed[_from][_to] = allowed[_from][_to].sub(_value);        \n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        // emit transfer event\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * This method is explained further in https://goo.gl/iaqxBa on the\n     * possible attacks. As such, we have to make sure the value is\n     * drained, before any Alice/Bob can approve each other to\n     * transfer on their behalf.\n     * @param _spender  - the recipient of the value\n     * @param _value    - the value allowed to be spent \n     *\n     * This can be called by the token holder\n     * e.g. Alice can allow Bob to spend 30 on her behalf\n     *      Alice.approve(Bob, 30);     // gives 30 to Bob.\n     */\n    /// Approve `_spender` to claim/spend `_value`?\n    function approve(address _spender, uint256 _value)          \n        public returns (bool success) \n    {\n        // sanity check\n        require(_spender != 0x0 && _spender != address(this));            \n\n        // if the allowance isn't 0, it can only be updated to 0 to prevent \n        // an allowance change immediately after withdrawal\n        require(allowed[msg.sender][_spender] == 0);\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * Check the allowance that has been approved previously by owner.\n     */\n    /// check allowance approved from `_owner` to `_spender`?\n    function allowance(address _owner, address _spender)          \n        public constant returns (uint remaining) \n    {\n        // sanity check\n        require(_spender != 0x0 && _owner != 0x0);\n        require(_owner != _spender && _spender != address(this));            \n\n        // constant op. Just return the balance.\n        return allowed[_owner][_spender];\n    }\n\n}\n\ncontract FaradCryptoken is ERC20Token, Guarded, Claimable {\n\n    uint256 public SUPPLY = 1600000000 ether;   // 1.6b ether;\n\n    // our constructor, just supply the total supply.\n    function FaradCryptoken() \n        ERC20Token('FARAD', 'FRD', 18) \n    {\n        totalSupply = SUPPLY;\n        balances[msg.sender] = SUPPLY;\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "606060405260408051908101604052600f81527f43727970746f6b656e20302e312e310000000000000000000000000000000000602082015260019080516200004d929160200190620001ab565b50602060405190810160405260008152600290805162000072929160200190620001ab565b50602060405190810160405260008152600390805162000097929160200190620001ab565b506004805460ff191690556b052b7d2dcc80cd2e400000006009553415620000be57600080fd5b5b5b604080519081016040908152600582527f464152414400000000000000000000000000000000000000000000000000000060208301528051908101604052600381527f4652440000000000000000000000000000000000000000000000000000000000602082015260125b600283805162000140929160200190620001ab565b50600382805162000156929160200190620001ab565b506004805460ff191660ff83161790555b505060078054600160a060020a03191633600160a060020a0316179055505b6009546000818155600160a060020a0333168152600560205260409020555b62000255565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001ee57805160ff19168380011785556200021e565b828001600101855582156200021e579182015b828111156200021e57825182559160200191906001019062000201565b5b506200022d92915062000231565b5090565b6200025291905b808211156200022d576000815560010162000238565b5090565b90565b610c3180620002656000396000f300606060405236156100ee5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f3578063095ea7b31461017e57806318160ddd146101b457806323b872dd146101d957806327e235e314610215578063313ce567146102465780634e71e0c81461026f5780635a3b7e42146102845780635c6581651461030f57806370a08231146103465780638da5cb5b1461037757806395d89b41146103a6578063a9059cbb14610431578063c50497ae14610467578063dd62ed3e1461048c578063e30c3978146104c3578063f2fde38b146104f2575b600080fd5b34156100fe57600080fd5b610106610513565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101435780820151818401525b60200161012a565b50505050905090810190601f1680156101705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018957600080fd5b6101a0600160a060020a03600435166024356105b1565b604051901515815260200160405180910390f35b34156101bf57600080fd5b6101c7610682565b60405190815260200160405180910390f35b34156101e457600080fd5b6101a0600160a060020a0360043581169060243516604435610688565b604051901515815260200160405180910390f35b341561022057600080fd5b6101c7600160a060020a0360043516610807565b60405190815260200160405180910390f35b341561025157600080fd5b610259610819565b60405160ff909116815260200160405180910390f35b341561027a57600080fd5b610282610822565b005b341561028f57600080fd5b610106610873565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101435780820151818401525b60200161012a565b50505050905090810190601f1680156101705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561031a57600080fd5b6101c7600160a060020a0360043581169060243516610911565b60405190815260200160405180910390f35b341561035157600080fd5b6101c7600160a060020a036004351661092e565b60405190815260200160405180910390f35b341561038257600080fd5b61038a61094d565b604051600160a060020a03909116815260200160405180910390f35b34156103b157600080fd5b61010661095c565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101435780820151818401525b60200161012a565b50505050905090810190601f1680156101705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561043c57600080fd5b6101a0600160a060020a03600435166024356109fa565b604051901515815260200160405180910390f35b341561047257600080fd5b6101c7610add565b60405190815260200160405180910390f35b341561049757600080fd5b6101c7600160a060020a0360043581169060243516610ae3565b60405190815260200160405180910390f35b34156104ce57600080fd5b61038a610b7d565b604051600160a060020a03909116815260200160405180910390f35b34156104fd57600080fd5b610282600160a060020a0360043516610b8c565b005b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105a95780601f1061057e576101008083540402835291602001916105a9565b820191906000526020600020905b81548152906001019060200180831161058c57829003601f168201915b505050505081565b6000600160a060020a038316158015906105dd575030600160a060020a031683600160a060020a031614155b15156105e857600080fd5b600160a060020a033381166000908152600660209081526040808320938716835292905220541561061857600080fd5b600160a060020a03338116600081815260066020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b6000600160a060020a038316158015906106aa5750600160a060020a03841615155b15156106b557600080fd5b82600160a060020a031684600160a060020a0316141580156106e9575030600160a060020a031683600160a060020a031614155b15156106f457600080fd5b600160a060020a0380851660009081526006602090815260408083209387168352929052205461072a908363ffffffff610bd416565b600160a060020a0380861660008181526006602090815260408083209489168352938152838220949094559081526005909252902054610770908363ffffffff610bd416565b600160a060020a0380861660009081526005602052604080822093909355908516815220546107a5908363ffffffff610beb16565b600160a060020a03808516600081815260056020526040908190209390935591908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b9392505050565b60056020526000908152604090205481565b60045460ff1681565b60085433600160a060020a0390811691161461083d57600080fd5b600880546007805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a038416179091551690555b5b565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105a95780601f1061057e576101008083540402835291602001916105a9565b820191906000526020600020905b81548152906001019060200180831161058c57829003601f168201915b505050505081565b600660209081526000928352604080842090915290825290205481565b600160a060020a0381166000908152600560205260409020545b919050565b600754600160a060020a031681565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105a95780601f1061057e576101008083540402835291602001916105a9565b820191906000526020600020905b81548152906001019060200180831161058c57829003601f168201915b505050505081565b600030600160a060020a031683600160a060020a031614151515610a1d57600080fd5b600160a060020a033316600090815260056020526040902054610a46908363ffffffff610bd416565b600160a060020a033381166000908152600560205260408082209390935590851681522054610a7b908363ffffffff610beb16565b600160a060020a0380851660008181526005602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b60095481565b6000600160a060020a03821615801590610b055750600160a060020a03831615155b1515610b1057600080fd5b81600160a060020a031683600160a060020a031614158015610b44575030600160a060020a031682600160a060020a031614155b1515610b4f57600080fd5b50600160a060020a038083166000908152600660209081526040808320938516835292905220545b92915050565b600854600160a060020a031681565b60075433600160a060020a03908116911614610ba757600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600082821115610be057fe5b508082035b92915050565b600082820183811015610bfa57fe5b8091505b50929150505600a165627a7a723058205b460ef952616fb15bcb7cda2d08cf0272a9180657b3bdda02fc4f17ca629f3a0029"
}