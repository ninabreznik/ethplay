{
  "address": "0xbe056a72d2924295503117c3022215da9f829f69",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CliffTokenVesting",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-14\n*/\n\npragma solidity ^0.5.2;\n\ncontract ERC20TokenInterface {\n\n    function totalSupply () external view returns (uint);\n    function balanceOf (address tokenOwner) external view returns (uint balance);\n    function transfer (address to, uint tokens) external returns (bool success);\n    function transferFrom (address from, address to, uint tokens) external returns (bool success);\n\n}\n\nlibrary SafeMath {\n\n    function mul (uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b);\n        return c;\n    }\n    \n    function div (uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n    \n    function sub (uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add (uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n}\n\n/**\n * @title Permanent, linearly-distributed vesting with cliff for specified token.\n * Vested accounts can check how many tokens they can withdraw from this smart contract by calling\n * `releasableAmount` function. If they want to withdraw these tokens, they create a transaction\n * to a `release` function, specifying the account to release tokens from as an argument.\n */\ncontract CliffTokenVesting {\n\n    using SafeMath for uint256;\n\n    event Released(address beneficiary, uint256 amount);\n\n    /**\n     * Vesting records.\n     */\n    struct Beneficiary {\n        uint256 start;\n        uint256 duration;\n        uint256 cliff;\n        uint256 totalAmount;\n        uint256 releasedAmount;\n    }\n    mapping (address => Beneficiary) public beneficiary;\n\n    /**\n     * Token address.\n     */\n    ERC20TokenInterface public token;\n\n    uint256 public nonce = 142816;\n\n    /**\n     * Whether an account was vested.\n     */\n    modifier isVestedAccount (address account) { require(beneficiary[account].start != 0); _; }\n\n    /**\n    * Cliff vesting for specific token.\n    */\n    constructor (ERC20TokenInterface tokenAddress) public {\n        require(tokenAddress != ERC20TokenInterface(0x0));\n        token = tokenAddress;\n    }\n\n    /**\n    * Calculates the releaseable amount of tokens at the current time.\n    * @param account Vested account.\n    * @return Withdrawable amount in decimals.\n    */\n    function releasableAmount (address account) public view returns (uint256) {\n        return vestedAmount(account).sub(beneficiary[account].releasedAmount);\n    }\n\n    /**\n    * Transfers available vested tokens to the beneficiary.\n    * @notice The transaction fails if releasable amount = 0, or tokens for `account` are not vested.\n    * @param account Beneficiary account.\n    */\n    function release (address account) public isVestedAccount(account) {\n        uint256 unreleased = releasableAmount(account);\n        require(unreleased > 0);\n        beneficiary[account].releasedAmount = beneficiary[account].releasedAmount.add(unreleased);\n        token.transfer(account, unreleased);\n        emit Released(account, unreleased);\n        if (beneficiary[account].releasedAmount == beneficiary[account].totalAmount) { // When done, clean beneficiary info\n            delete beneficiary[account];\n        }\n    }\n\n    /**\n     * Allows to vest tokens for beneficiary.\n     * @notice Tokens for vesting will be withdrawn from `msg.sender`'s account. Sender must first approve this amount\n     * for the smart contract.\n     * @param account Account to vest tokens for.\n     * @param start The absolute date of vesting start in unix seconds.\n     * @param duration Duration of vesting in seconds.\n     * @param cliff Cliff duration in seconds.\n     * @param amount How much tokens in decimals to withdraw.\n     */\n    function addBeneficiary (\n        address account,\n        uint256 start,\n        uint256 duration,\n        uint256 cliff,\n        uint256 amount\n    ) public {\n        require(amount != 0 && start != 0 && account != address(0x0) && cliff < duration && beneficiary[account].start == 0);\n        require(token.transferFrom(msg.sender, address(this), amount));\n        beneficiary[account] = Beneficiary({\n            start: start,\n            duration: duration,\n            cliff: start.add(cliff),\n            totalAmount: amount,\n            releasedAmount: 0\n        });\n    }\n\n    /**\n    * Calculates the amount that is vested.\n    * @param account Vested account.\n    * @return Amount in decimals.\n    */\n    function vestedAmount (address account) private view returns (uint256) {\n        if (block.timestamp < beneficiary[account].cliff) {\n            return 0;\n        } else if (block.timestamp >= beneficiary[account].start.add(beneficiary[account].duration)) {\n            return beneficiary[account].totalAmount;\n        } else {\n            return beneficiary[account].totalAmount.mul(\n                block.timestamp.sub(beneficiary[account].start)\n            ).div(beneficiary[account].duration);\n        }\n    }\n\n}",
  "bytecode": "608060405262022de060025534801561001757600080fd5b506040516020806107748339810180604052602081101561003757600080fd5b5051600160a060020a038116151561004e57600080fd5b60018054600160a060020a031916600160a060020a03929092169190911790556106f78061007d6000396000f3fe608060405234801561001057600080fd5b506004361061007e577c010000000000000000000000000000000000000000000000000000000060003504631726cbc8811461008357806319165587146100bb57806355119b1a146100e35780638100856814610121578063affed0e014610172578063fc0c546a1461017a575b600080fd5b6100a96004803603602081101561009957600080fd5b5035600160a060020a031661019e565b60408051918252519081900360200190f35b6100e1600480360360208110156100d157600080fd5b5035600160a060020a03166101db565b005b6100e1600480360360a08110156100f957600080fd5b50600160a060020a03813516906020810135906040810135906060810135906080013561039f565b6101476004803603602081101561013757600080fd5b5035600160a060020a0316610527565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b6100a9610556565b61018261055c565b60408051600160a060020a039092168252519081900360200190f35b600160a060020a0381166000908152602081905260408120600401546101d3906101c78461056b565b9063ffffffff61066016565b90505b919050565b600160a060020a0381166000908152602081905260409020548190151561020157600080fd5b600061020c8361019e565b90506000811161021b57600080fd5b600160a060020a038316600090815260208190526040902060040154610247908263ffffffff61067a16565b600160a060020a0380851660008181526020818152604080832060049081019690965560015481517fa9059cbb000000000000000000000000000000000000000000000000000000008152968701949094526024860187905251929093169363a9059cbb93604480830194919391928390030190829087803b1580156102cc57600080fd5b505af11580156102e0573d6000803e3d6000fd5b505050506040513d60208110156102f657600080fd5b505060408051600160a060020a03851681526020810183905281517fb21fb52d5749b80f3182f8c6992236b5e5576681880914484d7f4c9b062e619e929181900390910190a1600160a060020a03831660009081526020819052604090206003810154600490910154141561039a57600160a060020a0383166000908152602081905260408120818155600181018290556002810182905560038101829055600401555b505050565b80158015906103ad57508315155b80156103c15750600160a060020a03851615155b80156103cc57508282105b80156103ee5750600160a060020a038516600090815260208190526040902054155b15156103f957600080fd5b600154604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b15801561046c57600080fd5b505af1158015610480573d6000803e3d6000fd5b505050506040513d602081101561049657600080fd5b505115156104a357600080fd5b6040805160a081018252858152602081018590529081016104ca868563ffffffff61067a16565b815260208082019390935260006040918201819052600160a060020a039097168752868352958690208151815591810151600183015594850151600282015560608501516003820155608090940151600490940193909355505050565b600060208190529081526040902080546001820154600283015460038401546004909401549293919290919085565b60025481565b600154600160a060020a031681565b600160a060020a038116600090815260208190526040812060020154421015610596575060006101d6565b600160a060020a0382166000908152602081905260409020600181015490546105c49163ffffffff61067a16565b42106105ec5750600160a060020a0381166000908152602081905260409020600301546101d6565b600160a060020a038216600090815260208190526040902060018101549054610659919061064d9061062590429063ffffffff61066016565b600160a060020a0386166000908152602081905260409020600301549063ffffffff61068a16565b9063ffffffff6106b616565b90506101d6565b60008282111561066f57600080fd5b508082035b92915050565b8181018281101561067457600080fd5b600082151561069b57506000610674565b508181028183828115156106ab57fe5b041461067457600080fd5b600081838115156106c357fe5b04939250505056fea165627a7a72305820b68a8629df1ca74d5c021ba8cdee4687bcbbec54ba33d0352286408c9172fcd2002900000000000000000000000082f4ded9cec9b5750fbff5c2185aee35afc16587",
  "constructorArguments": "00000000000000000000000082f4ded9cec9b5750fbff5c2185aee35afc16587"
}