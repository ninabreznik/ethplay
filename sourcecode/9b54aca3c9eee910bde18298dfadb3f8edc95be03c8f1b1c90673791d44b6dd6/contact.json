{
  "address": "0xaf8eabf89f5664a2bc82ca415a4337821cd54d65",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AFIToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-16\n*/\n\npragma solidity ^0.4.23;\n\n// File: contracts/Ownable.sol\n\ncontract Ownable {\n    address public owner;\n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require((msg.sender == owner) || (tx.origin == owner));\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n// File: contracts/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n// File: contracts/Bonus.sol\n\ncontract Bonus is Ownable {\n    using SafeMath for uint256;\n    mapping(address => uint256) public buyerBonus;\n    mapping(address => bool) hasBought;\n    address[] public buyerList;\n    \n    function _addBonus(address _beneficiary, uint256 _bonus) internal {\n        if(hasBought[_beneficiary]){\n            buyerBonus[_beneficiary] = buyerBonus[_beneficiary].add(_bonus);\n        } else {\n            hasBought[_beneficiary] = true;\n            buyerList.push(_beneficiary);\n            buyerBonus[_beneficiary] = _bonus;\n        }\n    }\n}\n\n// File: contracts/ERC20Basic.sol\n\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts/ERC20.sol\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/CrowdSale.sol\n\ncontract Crowdsale is Bonus {\n    using SafeMath for uint256;\n\n    // The token being sold\n    ERC20 public token;\n\n    // Address where funds are collected\n    address public wallet;\n\n    // ICO exchange rate\n    uint256 public rate;\n\n    // ICO Time\n    uint256 public openingTimePeriodOne;\n    uint256 public closingTimePeriodOne;\n    uint256 public openingTimePeriodTwo;\n    uint256 public closingTimePeriodTwo;\n    uint256 public bonusDeliverTime;\n\n    // Diff bonus rate decided by time\n    uint256 public bonusRatePrivateSale;\n    uint256 public bonusRatePeriodOne;\n    uint256 public bonusRatePeriodTwo;\n\n    // Token decimal\n    uint256 decimals;\n    uint256 public tokenUnsold;\n    uint256 public bonusUnsold;\n    uint256 public constant minPurchaseAmount = 0.1 ether;\n\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n    event TokenBonus(address indexed purchaser, address indexed beneficiary, uint256 bonus);\n\n    modifier onlyWhileOpen {\n        require(block.timestamp <= closingTimePeriodTwo);\n        _;\n    }\n\n    constructor (uint256 _openingTimePeriodOne, uint256 _closingTimePeriodOne, uint256 _openingTimePeriodTwo, uint256 _closingTimePeriodTwo, uint256 _bonusDeliverTime,\n        uint256 _rate, uint256 _bonusRatePrivateSale, uint256 _bonusRatePeriodOne, uint256 _bonusRatePeriodTwo, \n        address _wallet, ERC20 _token, uint256 _decimals, uint256 _tokenUnsold, uint256 _bonusUnsold) public {\n        require(_wallet != address(0));\n        require(_token != address(0));\n        require(_openingTimePeriodOne >= block.timestamp);\n        require(_closingTimePeriodOne >= _openingTimePeriodOne);\n        require(_openingTimePeriodTwo >= _closingTimePeriodOne);\n        require(_closingTimePeriodTwo >= _openingTimePeriodTwo);\n\n        wallet = _wallet;\n        token = _token;\n        openingTimePeriodOne = _openingTimePeriodOne;\n        closingTimePeriodOne = _closingTimePeriodOne;\n        openingTimePeriodTwo = _openingTimePeriodTwo;\n        closingTimePeriodTwo = _closingTimePeriodTwo;\n        bonusDeliverTime = _bonusDeliverTime;\n        rate = _rate;\n        bonusRatePrivateSale = _bonusRatePrivateSale;\n        bonusRatePeriodOne = _bonusRatePeriodOne;\n        bonusRatePeriodTwo = _bonusRatePeriodTwo;\n        tokenUnsold = _tokenUnsold;\n        bonusUnsold = _bonusUnsold;\n        decimals = _decimals;\n    }\n\n    function () external payable {\n        buyTokens(msg.sender);\n    }\n\n    function buyTokens(address _beneficiary) public payable {\n        uint256 weiAmount = msg.value;\n        _preValidatePurchase(_beneficiary, weiAmount);\n\n        // calculate token amount to be sent\n        uint256 tokens = _getTokenAmount(weiAmount);\n        _processPurchase(_beneficiary, tokens);\n        emit TokenPurchase(\n            msg.sender,\n            _beneficiary,\n            weiAmount,\n            tokens\n        );\n\n        // calculate bonus amount to be sent\n        uint256 bonus = _getTokenBonus(weiAmount);\n        _addBonus(_beneficiary, bonus);\n        bonusUnsold = bonusUnsold.sub(bonus);\n        emit TokenBonus(\n            msg.sender,\n            _beneficiary,\n            bonus\n        );\n        _forwardFunds();\n    }\n\t\n    function isClosed() public view returns (bool) {\n        return block.timestamp > closingTimePeriodTwo;\n    }\n\n    function isOpened() public view returns (bool) {\n        return (block.timestamp < closingTimePeriodOne && block.timestamp > openingTimePeriodOne) || (block.timestamp < closingTimePeriodTwo && block.timestamp > openingTimePeriodTwo);\n    }\n\n    function privateCrowdsale(address _beneficiary, uint256 _ethAmount) external onlyOwner{\n        _preValidatePurchase(_beneficiary, _ethAmount);\n\n        // calculate token amount to be sent\n        uint256 tokens = _getTokenAmount(_ethAmount);\n        _processPurchase(_beneficiary, tokens);\n        emit TokenPurchase(\n            msg.sender,\n            _beneficiary,\n            _ethAmount,\n            tokens\n        );\n\n        // calculate bonus amount to be sent\n        uint256 bonus = _ethAmount.mul(10 ** uint256(decimals)).div(1 ether).mul(bonusRatePrivateSale);\n        _addBonus(_beneficiary, bonus);\n        bonusUnsold = bonusUnsold.sub(bonus);\n        emit TokenBonus(\n            msg.sender,\n            _beneficiary,\n            bonus\n        );\n    }\n    \n    function returnToken() external onlyOwner{\n        require(block.timestamp > closingTimePeriodTwo);\n        require(tokenUnsold > 0);\n        token.transfer(wallet,tokenUnsold);\n        tokenUnsold = tokenUnsold.sub(tokenUnsold);\n    }\n\n    /**\n     * WARNING: Make sure that user who owns bonus is still in whitelist!!!\n     */\n    function deliverBonus() public onlyOwner {\n        require(bonusDeliverTime <= block.timestamp);\n        for (uint i = 0; i<buyerList.length; i++){\n            uint256 amount = buyerBonus[buyerList[i]];\n            token.transfer(buyerList[i], amount);\n            buyerBonus[buyerList[i]] = 0;\n        }\n    }\n\n    function returnBonus() external onlyOwner{\n        require(block.timestamp > bonusDeliverTime);\n        require(bonusUnsold > 0);\n        token.transfer(wallet, bonusUnsold);\n        bonusUnsold = bonusUnsold.sub(bonusUnsold);\n    }\n\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view onlyWhileOpen\n    {\n        require(_beneficiary != address(0));\n        require(_weiAmount >= minPurchaseAmount);\n    }\n\n    function _validateMaxSellAmount(uint256 _tokenAmount) internal view onlyWhileOpen {\n        require(tokenUnsold >= _tokenAmount);\n    }\n\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n        token.transfer(_beneficiary, _tokenAmount);\n        tokenUnsold = tokenUnsold.sub(_tokenAmount);\n    }\n\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n        _validateMaxSellAmount(_tokenAmount);\n        _deliverTokens(_beneficiary, _tokenAmount);\n    }\n\n    function _getTokenAmount( uint256 _weiAmount) internal view returns (uint256) {\n        return _weiAmount.mul(10 ** uint256(decimals)).div(1 ether).mul(rate);\n    }\n\n    function _getTokenBonus(uint256 _weiAmount) internal view returns (uint256) {\n        uint256 bonusRate = 0;\n        if(block.timestamp > openingTimePeriodOne && block.timestamp < closingTimePeriodOne){\n            bonusRate = bonusRatePeriodOne;\n        } else if(block.timestamp > openingTimePeriodTwo && block.timestamp < closingTimePeriodTwo){\n            bonusRate = bonusRatePeriodTwo;\n        }\n        return _weiAmount.mul(10 ** uint256(decimals)).div(1 ether).mul(bonusRate);\n    }\n\n    function _forwardFunds() internal {\n        wallet.transfer(msg.value);\n    }\n}\n\n// File: contracts/StandardToken.sol\n\ncontract StandardToken is ERC20, Ownable {\n    using SafeMath for uint256;\n    mapping(address => uint256) balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n    uint256 totalSupply_;\n    bool public transferOpen = true;\n\n    modifier onlyWhileTransferOpen {\n        require(transferOpen);\n        _;\n    }\n\n    function setTransfer(bool _open) external onlyOwner{\n        transferOpen = _open;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    function transfer(address _to, uint256 _value) public onlyWhileTransferOpen returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public onlyWhileTransferOpen returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\n// File: contracts/Whitelist.sol\n\ncontract Whitelist is Ownable {\n\n    using SafeMath for uint256;\n    mapping(address => bool) public whitelist;\n    mapping(address => uint256) whitelistIndexMap;\n    address[] public whitelistArray;\n    uint256 public whitelistLength = 0;\n\n    modifier isWhitelisted(address _beneficiary) {\n        require(whitelist[_beneficiary]);\n        _;\n    }\n\n    function addToWhitelist(address _beneficiary) external onlyOwner {\n        whitelist[_beneficiary] = true;\n        if (whitelistIndexMap[_beneficiary] == 0){\n            if (whitelistArray.length <= whitelistLength){\n                whitelistArray.push(_beneficiary);\n            } else {\n                whitelistArray[whitelistLength] = _beneficiary;\n            }\n            whitelistLength = whitelistLength.add(1);\n            whitelistIndexMap[_beneficiary] = whitelistLength;\n        }\n    }\n\n    function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n            whitelist[_beneficiaries[i]] = true;\n        }\n    }\n\n    function removeFromWhitelist(address _beneficiary) external onlyOwner {\n        whitelist[_beneficiary] = false;\n        if (whitelistIndexMap[_beneficiary] > 0){\n            uint index = whitelistIndexMap[_beneficiary]-1;\n            whitelistArray[index] = whitelistArray[whitelistLength-1];\n            whitelistArray[whitelistLength-1] = 0;\n            whitelistIndexMap[_beneficiary] = 0;\n            whitelistLength = whitelistLength.sub(1);\n        }\n    }\n}\n\n// File: contracts/AFIToken.sol\n\ncontract AFIToken is StandardToken, Crowdsale, Whitelist {\n    using SafeMath for uint256;\n    string public constant name = \"AlchemyCoin\";\n    string public constant symbol = \"AFI\";\n    uint8 public constant decimals = 8;\n    uint256 constant INITIAL_SUPPLY = 125000000 * (10 ** uint256(decimals));\n    uint256 constant ICO_SUPPLY = 50000000 * (10 ** uint256(decimals));\n    uint256 constant ICO_BONUS = 12500000 * (10 ** uint256(decimals));\n    uint256 public minRevenueToDeliver = 0;\n    address public assignRevenueContract;\n    uint256 public snapshotBlockHeight;\n    mapping(address => uint256) public snapshotBalance;\n    // Custom Setting values ---------------------------------\n    uint256 constant _openingTimePeriodOne = 1531713600;\n    uint256 constant _closingTimePeriodOne = 1534132800;\n    uint256 constant _openingTimePeriodTwo = 1535342400;\n    uint256 constant _closingTimePeriodTwo = 1536552000;\n    uint256 constant _bonusDeliverTime = 1552276800;\n    address _wallet = 0x2Dc02F830072eB33A12Da0852053eAF896185910;\n    address _afiWallet = 0x991E2130f5bF113E2282A5F58E626467D2221599;\n    // -------------------------------------------------------\n    uint256 constant _rate = 1000;\n    uint256 constant _bonusRatePrivateSale = 250;\n    uint256 constant _bonusRatePeriodOne = 150;\n    uint256 constant _bonusRatePeriodTwo = 50;\n    \n\n    constructor() public \n    Crowdsale(_openingTimePeriodOne, _closingTimePeriodOne, _openingTimePeriodTwo, _closingTimePeriodTwo, _bonusDeliverTime,\n        _rate, _bonusRatePrivateSale, _bonusRatePeriodOne, _bonusRatePeriodTwo, \n        _wallet, this, decimals, ICO_SUPPLY, ICO_BONUS)\n    {\n        totalSupply_ = INITIAL_SUPPLY;\n        emit Transfer(0x0, _afiWallet, INITIAL_SUPPLY - ICO_SUPPLY - ICO_BONUS);\n        emit Transfer(0x0, this, ICO_SUPPLY);\n        balances[_afiWallet] = INITIAL_SUPPLY - ICO_SUPPLY - ICO_BONUS;\n        \n        // add admin\n        whitelist[_afiWallet] = true;\n        whitelistArray.push(_afiWallet);\n        whitelistLength = whitelistLength.add(1);\n        whitelistIndexMap[_afiWallet] = whitelistLength;\n        \n        // add contract\n        whitelist[this] = true;\n        whitelistArray.push(this);\n        whitelistLength = whitelistLength.add(1);\n        whitelistIndexMap[this] = whitelistLength;\n        balances[this] = ICO_SUPPLY + ICO_BONUS;\n    }\n\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view isWhitelisted(_beneficiary){\n        super._preValidatePurchase(_beneficiary, _weiAmount);\n    }\n\n    function transfer(address _to, uint256 _value) public isWhitelisted(_to) isWhitelisted(msg.sender) returns (bool) {\n        super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public isWhitelisted(_to) isWhitelisted(_from)  returns (bool){\n        super.transferFrom(_from, _to, _value);\n    }\n\n    function setRevenueContract(address _contract) external onlyOwner{\n        assignRevenueContract = _contract;\n    }\n\n    function createBalanceSnapshot() external onlyOwner {\n        snapshotBlockHeight = block.number;\n        for(uint256 i = 0; i < whitelistLength; i++) {\n            snapshotBalance[whitelistArray[i]] = balances[whitelistArray[i]];\n        }\n    }\n\n    function setMinRevenue(uint256 _minRevenue) external onlyOwner {\n        minRevenueToDeliver = _minRevenue;\n    }\n\n    function assignRevenue(uint256 _totalRevenue) external onlyOwner{\n        address contractAddress = assignRevenueContract;\n\n        for (uint256 i = 0; i<whitelistLength; i++){\n            if(whitelistArray[i] == address(this)){\n                continue;\n            }\n            uint256 amount = _totalRevenue.mul(snapshotBalance[whitelistArray[i]]).div(INITIAL_SUPPLY);\n            if(amount > minRevenueToDeliver){\n                bool done = contractAddress.call(bytes4(keccak256(\"transferRevenue(address,uint256)\")),whitelistArray[i],amount);\n                require(done == true);\n            }\n        }\n    }\n}",
  "bytecode": "60806040526001600460006101000a81548160ff02191690831515021790555060006019556000601a55732dc02f830072eb33a12da0852053eaf896185910601e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073991e2130f5bf113e2282a5f58e626467d2221599601f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550348015620000e057600080fd5b50635b4c1840635b710240635b837740635b95ec40635c85dd406103e860fa60966032601e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630600860ff16600860ff16600a0a6302faf08002600860ff16600a0a62bebc2002336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614151515620001c457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156200020157600080fd5b428e101515156200021157600080fd5b8d8d101515156200022157600080fd5b8c8c101515156200023157600080fd5b8b8b101515156200024157600080fd5b84600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508d600b819055508c600c819055508b600d819055508a600e8190555089600f8190555088600a819055508760108190555086601181905550856012819055508160148190555080601581905550826013819055505050505050505050505050505050600860ff16600a0a630773594002600381905550601f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600860ff16600a0a62bebc2002600860ff16600a0a6302faf08002600860ff16600a0a63077359400203036040518082815260200191505060405180910390a33073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600860ff16600a0a6302faf080026040518082815260200191505060405180910390a3600860ff16600a0a62bebc2002600860ff16600a0a6302faf08002600860ff16600a0a630773594002030360016000601f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160166000601f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506018601f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620005ea6001601954620007ed6401000000000262003f67179091906401000000009004565b60198190555060195460176000601f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001601660003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060183090806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200073c6001601954620007ed6401000000000262003f67179091906401000000009004565b601981905550601954601760003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600860ff16600a0a62bebc2002600860ff16600a0a6302faf0800201600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506200080a565b600081830190508281101515156200080157fe5b80905092915050565b61415c806200081a6000396000f300608060405260043610610272576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063044c93661461027d57806306132a94146102ca57806306fdde0314610337578063095ea7b3146103c75780630ac2a1c71461042c5780630cadc5b3146104575780630ce4c9901461046e57806318160ddd1461049957806323b872dd146104c45780632978b8261461054957806329e46d3f146105765780632c4e722e146105a15780632e4a3657146105cc578063313ce567146105e35780633573522614610614578063360f1d071461062b5780633a7749c014610656578063498a6de7146106815780634f85769a146106c4578063521eb273146106ef57806353537303146107465780636618846314610771578063692aa97e146107d65780636f5b286d1461080557806370a08231146108305780637659de231461088757806378bb5164146108b25780638ab1d681146108dd5780638c10671c146109205780638da5cb5b1461095b57806395d89b41146109b25780639b19251a14610a42578063a296b32314610a9d578063a9059cbb14610acc578063a9825b7c14610b31578063b07fa05414610b5c578063b47dbf2214610bb3578063c2b6b58c14610bde578063c3a1fa0114610c0d578063c8a73eca14610c64578063c909b92914610c93578063d251fefc14610cbe578063d73dd62314610d2b578063d8152cbc14610d90578063da257cb414610da7578063dd62ed3e14610dd4578063e43252d714610e4b578063ec67e37a14610e8e578063ec8ac4d814610ee5578063f2fde38b14610f1b578063fc0c546a14610f5e578063feb088ab14610fb5575b61027b33610fe0565b005b34801561028957600080fd5b506102c8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611117565b005b3480156102d657600080fd5b506102f560048036038101908080359060200190929190505050611330565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561034357600080fd5b5061034c61136e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561038c578082015181840152602081019050610371565b50505050905090810190601f1680156103b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103d357600080fd5b50610412600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113a7565b604051808215151515815260200191505060405180910390f35b34801561043857600080fd5b50610441611499565b6040518082815260200191505060405180910390f35b34801561046357600080fd5b5061046c61149f565b005b34801561047a57600080fd5b506104836117bb565b6040518082815260200191505060405180910390f35b3480156104a557600080fd5b506104ae6117c1565b6040518082815260200191505060405180910390f35b3480156104d057600080fd5b5061052f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506117cb565b604051808215151515815260200191505060405180910390f35b34801561055557600080fd5b5061057460048036038101908080359060200190929190505050611894565b005b34801561058257600080fd5b5061058b611bf8565b6040518082815260200191505060405180910390f35b3480156105ad57600080fd5b506105b6611bfe565b6040518082815260200191505060405180910390f35b3480156105d857600080fd5b506105e1611c04565b005b3480156105ef57600080fd5b506105f8611e1b565b604051808260ff1660ff16815260200191505060405180910390f35b34801561062057600080fd5b50610629611e20565b005b34801561063757600080fd5b50610640612037565b6040518082815260200191505060405180910390f35b34801561066257600080fd5b5061066b61203d565b6040518082815260200191505060405180910390f35b34801561068d57600080fd5b506106c2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612043565b005b3480156106d057600080fd5b506106d9612139565b6040518082815260200191505060405180910390f35b3480156106fb57600080fd5b5061070461213f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561075257600080fd5b5061075b612165565b6040518082815260200191505060405180910390f35b34801561077d57600080fd5b506107bc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061216b565b604051808215151515815260200191505060405180910390f35b3480156107e257600080fd5b506107eb6123fc565b604051808215151515815260200191505060405180910390f35b34801561081157600080fd5b5061081a61242e565b6040518082815260200191505060405180910390f35b34801561083c57600080fd5b50610871600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612434565b6040518082815260200191505060405180910390f35b34801561089357600080fd5b5061089c61247d565b6040518082815260200191505060405180910390f35b3480156108be57600080fd5b506108c7612483565b6040518082815260200191505060405180910390f35b3480156108e957600080fd5b5061091e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612489565b005b34801561092c57600080fd5b5061095960048036038101908080359060200190820180359060200191909192939192939050505061277c565b005b34801561096757600080fd5b506109706128d4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109be57600080fd5b506109c76128f9565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a075780820151818401526020810190506109ec565b50505050905090810190601f168015610a345780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610a4e57600080fd5b50610a83600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612932565b604051808215151515815260200191505060405180910390f35b348015610aa957600080fd5b50610aca600480360381019080803515159060200190929190505050612952565b005b348015610ad857600080fd5b50610b17600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612a21565b604051808215151515815260200191505060405180910390f35b348015610b3d57600080fd5b50610b46612ae8565b6040518082815260200191505060405180910390f35b348015610b6857600080fd5b50610b9d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612aee565b6040518082815260200191505060405180910390f35b348015610bbf57600080fd5b50610bc8612b06565b6040518082815260200191505060405180910390f35b348015610bea57600080fd5b50610bf3612b12565b604051808215151515815260200191505060405180910390f35b348015610c1957600080fd5b50610c4e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b1e565b6040518082815260200191505060405180910390f35b348015610c7057600080fd5b50610c79612b36565b604051808215151515815260200191505060405180910390f35b348015610c9f57600080fd5b50610ca8612b49565b6040518082815260200191505060405180910390f35b348015610cca57600080fd5b50610ce960048036038101908080359060200190929190505050612b4f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610d3757600080fd5b50610d76600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612b8d565b604051808215151515815260200191505060405180910390f35b348015610d9c57600080fd5b50610da5612d89565b005b348015610db357600080fd5b50610dd260048036038101908080359060200190929190505050612f58565b005b348015610de057600080fd5b50610e35600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613014565b6040518082815260200191505060405180910390f35b348015610e5757600080fd5b50610e8c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061309b565b005b348015610e9a57600080fd5b50610ea3613329565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610f19600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fe0565b005b348015610f2757600080fd5b50610f5c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061334f565b005b348015610f6a57600080fd5b50610f736134fb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610fc157600080fd5b50610fca613521565b6040518082815260200191505060405180910390f35b6000806000349250610ff28484613527565b610ffb8361358f565b915061100784836135de565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188585604051808381526020018281526020019250505060405180910390a361107d836135f5565b90506110898482613687565b61109e8160155461387a90919063ffffffff16565b6015819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8e8bc816f87d50bb7f680a86eb83fb8699e5fa1f08cc369aaf963247aea13602836040518082815260200191505060405180910390a3611111613893565b50505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806111c157506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b15156111cc57600080fd5b6111d68484613527565b6111df8361358f565b91506111eb84836135de565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188585604051808381526020018281526020019250505060405180910390a361129e601054611290670de0b6b3a7640000611282601354600a0a886138fe90919063ffffffff16565b61393690919063ffffffff16565b6138fe90919063ffffffff16565b90506112aa8482613687565b6112bf8160155461387a90919063ffffffff16565b6015819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8e8bc816f87d50bb7f680a86eb83fb8699e5fa1f08cc369aaf963247aea13602836040518082815260200191505060405180910390a350505050565b60078181548110151561133f57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600b81526020017f416c6368656d79436f696e00000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600f5481565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061154957506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b151561155457600080fd5b42600f541115151561156557600080fd5b600091505b6007805490508210156117b7576005600060078481548110151561158a57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60078481548110151561163f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156116f057600080fd5b505af1158015611704573d6000803e3d6000fd5b505050506040513d602081101561171a57600080fd5b81019080805190602001909291905050505060006005600060078581548110151561174157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550818060010192505061156a565b5050565b601a5481565b6000600354905090565b600082601660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561182657600080fd5b84601660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561187f57600080fd5b61188a86868661394c565b5050509392505050565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061194157506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b151561194c57600080fd5b601b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169350600092505b601954831015611bf1573073ffffffffffffffffffffffffffffffffffffffff166018848154811015156119a657fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156119f257611be4565b611a9c600860ff16600a0a630773594002611a8e601d6000601888815481101515611a1957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054886138fe90919063ffffffff16565b61393690919063ffffffff16565b9150601a54821115611be3578373ffffffffffffffffffffffffffffffffffffffff1660405180807f7472616e73666572526576656e756528616464726573732c75696e7432353629815250602001905060405180910390207c01000000000000000000000000000000000000000000000000000000009004601885815481101515611b2457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506000604051808303816000875af192505050905060011515811515141515611be257600080fd5b5b5b8280600101935050611976565b5050505050565b600b5481565b600a5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611cab57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b1515611cb657600080fd5b600e5442111515611cc657600080fd5b6000601454111515611cd757600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166014546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611dc057600080fd5b505af1158015611dd4573d6000803e3d6000fd5b505050506040513d6020811015611dea57600080fd5b810190808051906020019092919050505050611e1360145460145461387a90919063ffffffff16565b601481905550565b600881565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611ec757506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b1515611ed257600080fd5b600f5442111515611ee257600080fd5b6000601554111515611ef357600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166015546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611fdc57600080fd5b505af1158015611ff0573d6000803e3d6000fd5b505050506040513d602081101561200657600080fd5b81019080805190602001909291905050505061202f60155460155461387a90919063ffffffff16565b601581905550565b60105481565b60125481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806120ea57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b15156120f557600080fd5b80601b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600c5481565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60115481565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083111561227c576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612310565b61228f838261387a90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600c54421080156124105750600b5442115b806124295750600e54421080156124285750600d5442115b5b905090565b60145481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b601c5481565b60195481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061253257506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b151561253d57600080fd5b6000601660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000601760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115612778576001601760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054039050601860016019540381548110151561263657fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660188281548110151561267057fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060186001601954038154811015156126ce57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000601760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612771600160195461387a90919063ffffffff16565b6019819055505b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061282557506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b151561283057600080fd5b600090505b828290508110156128cf57600160166000858585818110151561285457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050612835565b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f414649000000000000000000000000000000000000000000000000000000000081525081565b60166020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806129f957506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b1515612a0457600080fd5b80600460006101000a81548160ff02191690831515021790555050565b600082601660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515612a7c57600080fd5b33601660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515612ad557600080fd5b612adf8585613d27565b50505092915050565b60155481565b60056020528060005260406000206000915090505481565b67016345785d8a000081565b6000600e544211905090565b601d6020528060005260406000206000915090505481565b600460009054906101000a900460ff1681565b600e5481565b601881815481101515612b5e57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000612c1e82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613f6790919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612e3257506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b1515612e3d57600080fd5b43601c81905550600090505b601954811015612f555760016000601883815481101515612e6657fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601d6000601884815481101515612edf57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508080600101915050612e49565b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612fff57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b151561300a57600080fd5b80601a8190555050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061314257506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b151561314d57600080fd5b6001601660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000601760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415613326576019546018805490501115156132685760188190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506132c3565b80601860195481548110151561327a57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6132d96001601954613f6790919063ffffffff16565b601981905550601954601760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b50565b601b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806133f657506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b151561340157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561343d57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d5481565b81601660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561358057600080fd5b61358a8383613f83565b505050565b60006135d7600a546135c9670de0b6b3a76400006135bb601354600a0a876138fe90919063ffffffff16565b61393690919063ffffffff16565b6138fe90919063ffffffff16565b9050919050565b6135e781613feb565b6135f18282614010565b5050565b60008060009050600b544211801561360e5750600c5442105b1561361d57601154905061363b565b600d544211801561362f5750600e5442105b1561363a5760125490505b5b61367f81613671670de0b6b3a7640000613663601354600a0a886138fe90919063ffffffff16565b61393690919063ffffffff16565b6138fe90919063ffffffff16565b915050919050565b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156137735761372b81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613f6790919063ffffffff16565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613876565b6001600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060078290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5050565b600082821115151561388857fe5b818303905092915050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156138fb573d6000803e3d6000fd5b50565b6000808314156139115760009050613930565b818302905081838281151561392257fe5b0414151561392c57fe5b8090505b92915050565b6000818381151561394357fe5b04905092915050565b6000600460009054906101000a900460ff16151561396957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156139a557600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156139f357600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515613a7e57600080fd5b613ad082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461387a90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613b6582600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613f6790919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613c3782600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461387a90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000600460009054906101000a900460ff161515613d4457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515613d8057600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515613dce57600080fd5b613e2082600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461387a90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613eb582600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613f6790919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60008183019050828110151515613f7a57fe5b80905092915050565b600e544211151515613f9457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515613fd057600080fd5b67016345785d8a00008110151515613fe757600080fd5b5050565b600e544211151515613ffc57600080fd5b806014541015151561400d57600080fd5b50565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156140d557600080fd5b505af11580156140e9573d6000803e3d6000fd5b505050506040513d60208110156140ff57600080fd5b8101908080519060200190929190505050506141268160145461387a90919063ffffffff16565b60148190555050505600a165627a7a7230582007003d53033ee861163c8608793900918a852649996f849cf5c796f4e51368d50029"
}