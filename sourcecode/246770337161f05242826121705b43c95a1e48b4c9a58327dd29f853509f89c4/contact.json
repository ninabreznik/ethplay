{
  "address": "0x466fbff54d2123c36e9cfaf90298ba436250c043",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Multicall",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-05\n*/\n\npragma solidity ^0.4.25;\n\n/// @title Multicall - Aggregate multiple constant function call results into one\n/// @author Michael Elliot - <[email protected]>\n/// @author Joshua Levine - <[email protected]>\n\ncontract Multicall {\n    function aggregate(bytes memory data) public view returns (bytes memory) {\n        uint256 malloc;\n        assembly { malloc := add(mul(mload(add(data, 0x20)), 0x20), 0x20) }\n        bytes memory results = new bytes(malloc);\n        uint256 _block = block.number;\n        assembly {\n            mstore(add(results, 0x20), _block)\n            let ptr := mload(0x40)\n            let cur := 0x40\n            let inc := 2\n            let len := mload(data)\n            for { } lt(cur, len) { } {\n                let _target     := mload(add(data, cur))\n                let _retLen     := mul(mload(add(data, add(cur, 0x20))), 0x20)\n                let _dataLength := mload(add(data, add(cur, 0x60)))\n                let _data       := add(data, add(cur, 0x80))\n                if eq(call(gas, _target, 0, _data, _dataLength, ptr, _retLen), 0)\n                    { revert(0, 0) }\n                for { let offset := 0 } lt(offset, _retLen) { offset := add(offset, 0x20) }\n                    { mstore(add(results, add(mul(inc, 0x20), offset)), mload(add(ptr, offset))) }\n                inc := add(inc, mload(add(data, add(cur, 0x20))))\n                cur := add(cur, add(0x80, _dataLength))\n            }\n        }\n        return results;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"aggregate\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
  "bytecode": "608060405234801561001057600080fd5b50610219806100206000396000f3006080604052600436106100405763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416639af53fc68114610045575b600080fd5b34801561005157600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261009e9436949293602493928401919081908401838280828437509497506101139650505050505050565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100d85781810151838201526020016100c0565b50505050905090810190601f1680156101055780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6060600060606000602080602087015102019250826040519080825280601f01601f191660200182016040528015610155578160200160208202803883390190505b5091504390508060208301526040516040600287515b808310156101e0578883018051602080830151606084015192939102919060800160008389848484895af114156101a157600080fd5b60005b838110156101c457808901518160208902018c01526020810190506101a4565b50508b86016020015195016080019493909301925061016b9050565b50939796505050505050505600a165627a7a72305820ef1f91796aa2d83067e40ea7a6ec051fbb6d73e40a56ca8026bdbd41275e23cc0029"
}