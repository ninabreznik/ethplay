{
  "address": "0x4c2e198cf5ee4ca4d6e9e0c1b2b954f9101c7fc1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GFCToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-16\n*/\n\npragma solidity ^0.4.13;\n\ncontract owned {\n    /* Owner definition. */\n    address public owner; // Owner address.\n    function owned() internal {\n        owner = msg.sender;\n    }\n    modifier onlyOwner {\n        require(msg.sender == owner); _;\n    }\n    function transferOwnership(address newOwner) onlyOwner public{\n        owner = newOwner;\n    }\n}\n\ncontract token { \n    /* Base token definition. */\n    string public name; // Name for the token.\n    string public symbol; // Symbol for the token.\n    uint8 public decimals; // Number of decimals of the token.\n    uint256 public totalSupply; // Total of tokens created.\n\n    // Array containing the balance foreach address.\n    mapping (address => uint256) public balanceOf;\n    // Array containing foreach address, an array containing each approved address and the amount of tokens it can spend.\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* This generates a public event on the blockchain that will notify about a transfer done. */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* Initializes the contract */\n    function token(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol) internal {\n        balanceOf[msg.sender] = initialSupply; // Gives the creator all initial tokens.\n        totalSupply = initialSupply; // Update total supply.\n        name = tokenName; // Set the name for display purposes.\n        symbol = tokenSymbol; // Set the symbol for display purposes.\n        decimals = decimalUnits; // Amount of decimals for display purposes.\n    }\n\n    /* Internal transfer, only can be called by this contract. */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != 0x0); // Prevent transfer to 0x0 address.\n        require(balanceOf[_from] > _value); // Check if the sender has enough.\n        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows.\n        balanceOf[_from] -= _value; // Subtract from the sender.\n        balanceOf[_to]   += _value; // Add the same to the recipient.\n        Transfer(_from, _to, _value); // Notifies the blockchain about the transfer.\n    }\n\n    /// @notice Send `_value` tokens to `_to` from your account.\n    /// @param _to The address of the recipient.\n    /// @param _value The amount to send.\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /// @notice Send `_value` tokens to `_to` in behalf of `_from`.\n    /// @param _from The address of the sender.\n    /// @param _to The address of the recipient.\n    /// @param _value The amount to send.\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]); // Check allowance.\n        allowance[_from][msg.sender] -= _value; // Update the allowance array, substracting the amount sent.\n        _transfer(_from, _to, _value); // Makes the transfer.\n        return true;\n    }\n\n    /// @notice Allows `_spender` to spend a maximum of `_value` tokens in your behalf.\n    /// @param _spender The address authorized to spend.\n    /// @param _value The max amount they can spend.\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value; // Adds a new register to allowance, permiting _spender to use _value of your tokens.\n        return true;\n    }\n}\n\ncontract GFCToken is owned, token {\n    /* Specific token definition for -GFC Token- company. */\n    uint256 public sellPrice = 1; // Price applied when selling a token.\n    uint256 public buyPrice = 1; // Price applied when buying a token.\n    bool public closeBuy = false; // If true, nobody will be able to buy.\n    bool public closeSell = false; // If true, nobody will be able to sell.\n    address public commissionGetter = 0xCd8bf69ad65c5158F0cfAA599bBF90d7f4b52Bb0; // The address that gets the commissions paid.\n    mapping (address => bool) public frozenAccount; // Array containing foreach address if it's frozen or not.\n\n    /* This generates a public event on the blockchain that will notify about an address being freezed. */\n    event FrozenFunds(address target, bool frozen);\n    /* This generates a public event on the blockchain that will notify about an addition of Ether to the contract. */\n    event LogDeposit(address sender, uint amount);\n    /* This generates a public event on the blockchain that will notify about a Withdrawal of Ether from the contract. */\n    event LogWithdrawal(address receiver, uint amount);\n\n    /* Initializes the contract */\n    function GFCToken(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol) public token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}\n\n    /* Overrides Internal transfer due to frozen accounts check */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != 0x0); // Prevent transfer to 0x0 address.\n        require(balanceOf[_from] >= _value); // Check if the sender has enough.\n        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows.\n        require(!frozenAccount[_from]); // Check if sender is frozen.\n        require(!frozenAccount[_to]); // Check if recipient is frozen.\n\t\tbalanceOf[_from] -= _value; // Subtracts _value tokens from the sender.\n        balanceOf[_to] += _value; // Adds the same amount to the recipient.\n        Transfer(_from, _to, _value); // Notifies the blockchain about the transfer.\n    }\n\n    /* Sends GFC from the owner to the smart-contract */\n    function refillTokens(uint256 _value) public onlyOwner{\n        _transfer(msg.sender, this, _value);\n    }\n\n    /* Overrides basic transfer function due to commission value */\n    function transfer(address _to, uint256 _value) public {\n        uint market_value = _value * sellPrice; //Market value for this amount\n        uint commission = market_value * 1 / 100; //Calculates the commission for this transaction\n        require(this.balance >= commission); // The smart-contract pays commission, else the transfer is not possible.\n        commissionGetter.transfer(commission); // Transfers commission to the commissionGetter.\n        _transfer(msg.sender, _to, _value); // Makes the transfer of tokens.\n    }\n\n    /* Overrides basic transferFrom function due to commission value */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]); // Check allowance.\n        uint market_value = _value * sellPrice; //Market value for this amount\n        uint commission = market_value * 1 / 100; //Calculates the commission for this transaction\n        require(this.balance >= commission); // The smart-contract pays commission, else the transfer is not possible.\n        commissionGetter.transfer(commission); // Transfers commission to the commissionGetter.\n        allowance[_from][msg.sender] -= _value; // Update the allowance array, substracting the amount sent.\n        _transfer(_from, _to, _value); // Makes the transfer of tokens.\n        return true;\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens.\n    /// @param target Address to be frozen.\n    /// @param freeze Either to freeze target or not.\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze; // Sets the target status. True if it's frozen, False if it's not.\n        FrozenFunds(target, freeze); // Notifies the blockchain about the change of state.\n    }\n\n    /// @notice Allow addresses to pay `newBuyPrice`ETH when buying and receive `newSellPrice`ETH when selling, foreach token bought/sold.\n    /// @param newSellPrice Price applied when an address sells its tokens, amount in WEI (1ETH = 10¹⁸WEI).\n    /// @param newBuyPrice Price applied when an address buys tokens, amount in WEI (1ETH = 10¹⁸WEI).\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice; // Update the buying price.\n        buyPrice = newBuyPrice; // Update the selling price.\n    }\n\n    /// @notice Sets the state of buy and sell operations\n    /// @param isClosedBuy True if buy operations are closed, False if opened.\n    /// @param isClosedSell True if sell operations are closed, False if opened.\n    function setStatus(bool isClosedBuy, bool isClosedSell) onlyOwner public {\n        closeBuy = isClosedBuy; // Update the state of buy operations.\n        closeSell = isClosedSell; // Update the state of sell operations.\n    }\n\n    /// @notice Deposits Ether to the contract\n    function deposit() payable public returns(bool success) {\n        require((this.balance + msg.value) > this.balance); // Checks for overflows.\n        LogDeposit(msg.sender, msg.value); // Notifies the blockchain about the Ether received.\n        return true;\n    }\n\n    /// @notice The owner withdraws Ether from the contract.\n    /// @param amountInWeis Amount of ETH in WEI which will be withdrawed.\n    function withdraw(uint amountInWeis) onlyOwner public {\n        LogWithdrawal(msg.sender, amountInWeis); // Notifies the blockchain about the withdrawal.\n        owner.transfer(amountInWeis); // Sends the Ether to owner address.\n    }\n\n    /// @notice Buy tokens from contract by sending Ether.\n    function buy() public payable {\n        require(!closeBuy); //Buy operations must be opened\n        uint amount = msg.value / buyPrice; //Calculates the amount of tokens to be sent\n        uint market_value = amount * buyPrice; //Market value for this amount\n        uint commission = market_value * 1 / 100; //Calculates the commission for this transaction\n        require(this.balance >= commission); //The token smart-contract pays commission, else the operation is not possible.\n        commissionGetter.transfer(commission); //Transfers commission to the commissionGetter.\n        _transfer(this, msg.sender, amount); //Makes the transfer of tokens.\n    }\n\n    /// @notice Sell `amount` tokens to the contract.\n    /// @param amount amount of tokens to be sold.\n    function sell(uint256 amount) public {\n        require(!closeSell); //Sell operations must be opened\n        uint market_value = amount * sellPrice; //Market value for this amount\n        uint commission = market_value * 1 / 100; //Calculates the commission for this transaction\n        uint amount_weis = market_value + commission; //Total in weis that must be paid\n        require(this.balance >= amount_weis); //Contract must have enough weis\n        commissionGetter.transfer(commission); //Transfers commission to the commissionGetter\n        _transfer(msg.sender, this, amount); //Makes the transfer of tokens, the contract receives the tokens.\n        msg.sender.transfer(market_value); //Sends Ether to the seller.\n    }\n\n    /// Default function, sender buys tokens by sending ether to the contract\n    function () public payable { buy(); }\n}",
  "bytecode": "60606040526001600781905560085560098054600160b060020a03191675cd8bf69ad65c5158f0cfaa599bbf90d7f4b52bb00000179055341561004157600080fd5b604051610e10380380610e1083398101604052808051919060200180518201919060200180519190602001805160008054600160a060020a033316600160a060020a0319909116811782558152600560205260409020869055600486905590910190508383838360018380516100bb9291602001906100f1565b5060028180516100cf9291602001906100f1565b50506003805460ff191660ff929092169190911790555061018c945050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061013257805160ff191683800117855561015f565b8280016001018555821561015f579182015b8281111561015f578251825591602001919060010190610144565b5061016b92915061016f565b5090565b61018991905b8082111561016b5760008155600101610175565b90565b610c758061019b6000396000f3006060604052600436106101485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305fefda7811461015257806306fdde031461016b578063095ea7b3146101f557806318160ddd1461022b57806323b872dd146102505780632e1a7d4d14610278578063313ce5671461028e5780633651b401146102b75780634b750334146102e657806370a08231146102f95780637ef5b6ea146103185780638620410b1461032e5780638da5cb5b1461034157806395d89b4114610354578063a6f2ae3a14610148578063a9059cbb14610367578063b3c2eac114610389578063b414d4b6146103a6578063ba83c970146103c5578063c6ab5cdc146103d8578063d0e30db0146103eb578063dd62ed3e146103f3578063e4849b3214610418578063e724529c1461042e578063f2fde38b14610452575b610150610471565b005b341561015d57600080fd5b610150600435602435610507565b341561017657600080fd5b61017e61052d565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101ba5780820151838201526020016101a2565b50505050905090810190601f1680156101e75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561020057600080fd5b610217600160a060020a03600435166024356105cb565b604051901515815260200160405180910390f35b341561023657600080fd5b61023e6105fb565b60405190815260200160405180910390f35b341561025b57600080fd5b610217600160a060020a0360043581169060243516604435610601565b341561028357600080fd5b6101506004356106da565b341561029957600080fd5b6102a161076f565b60405160ff909116815260200160405180910390f35b34156102c257600080fd5b6102ca610778565b604051600160a060020a03909116815260200160405180910390f35b34156102f157600080fd5b61023e61078d565b341561030457600080fd5b61023e600160a060020a0360043516610793565b341561032357600080fd5b6101506004356107a5565b341561033957600080fd5b61023e6107cb565b341561034c57600080fd5b6102ca6107d1565b341561035f57600080fd5b61017e6107e0565b341561037257600080fd5b610150600160a060020a036004351660243561084b565b341561039457600080fd5b610150600435151560243515156108b6565b34156103b157600080fd5b610217600160a060020a03600435166108f4565b34156103d057600080fd5b610217610909565b34156103e357600080fd5b610217610917565b610217610920565b34156103fe57600080fd5b61023e600160a060020a0360043581169060243516610986565b341561042357600080fd5b6101506004356109a3565b341561043957600080fd5b610150600160a060020a03600435166024351515610a5c565b341561045d57600080fd5b610150600160a060020a0360043516610ae8565b6009546000908190819060ff161561048857600080fd5b6008543481151561049557fe5b600854919004935083029150506064810430600160a060020a031631819010156104be57600080fd5b600954620100009004600160a060020a03166108fc82150282604051600060405180830381858888f1935050505015156104f757600080fd5b610502303385610b32565b505050565b60005433600160a060020a0390811691161461052257600080fd5b600791909155600855565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105c35780601f10610598576101008083540402835291602001916105c3565b820191906000526020600020905b8154815290600101906020018083116105a657829003601f168201915b505050505081565b600160a060020a033381166000908152600660209081526040808320938616835292905220819055600192915050565b60045481565b600160a060020a038084166000908152600660209081526040808320339094168352929052908120548190819084111561063a57600080fd5b505060075482026064810430600160a060020a0316318190101561065d57600080fd5b600954620100009004600160a060020a03166108fc82150282604051600060405180830381858888f19350505050151561069657600080fd5b600160a060020a03808716600090815260066020908152604080832033909416835292905220805485900390556106ce868686610b32565b50600195945050505050565b60005433600160a060020a039081169116146106f557600080fd5b7fb4214c8c54fc7442f36d3682f59aebaf09358a4431835b30efb29d52cf9e1e913382604051600160a060020a03909216825260208201526040908101905180910390a1600054600160a060020a031681156108fc0282604051600060405180830381858888f19350505050151561076c57600080fd5b50565b60035460ff1681565b600954620100009004600160a060020a031681565b60075481565b60056020526000908152604090205481565b60005433600160a060020a039081169116146107c057600080fd5b61076c333083610b32565b60085481565b600054600160a060020a031681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105c35780601f10610598576101008083540402835291602001916105c3565b60075481026064810430600160a060020a0316318190101561086c57600080fd5b600954620100009004600160a060020a03166108fc82150282604051600060405180830381858888f1935050505015156108a557600080fd5b6108b0338585610b32565b50505050565b60005433600160a060020a039081169116146108d157600080fd5b6009805460ff19169215159290921761ff00191661010091151591909102179055565b600a6020526000908152604090205460ff1681565b600954610100900460ff1681565b60095460ff1681565b6000600160a060020a0330168031903134011161093c57600080fd5b7f1b851e1031ef35a238e6c67d0c7991162390df915f70eaf9098dbf0b175a61983334604051600160a060020a03909216825260208201526040908101905180910390a150600190565b600660209081526000928352604080842090915290825290205481565b60095460009081908190610100900460ff16156109bf57600080fd5b5050600754820290506064810480820130600160a060020a031631819010156109e757600080fd5b600954620100009004600160a060020a03166108fc83150283604051600060405180830381858888f193505050501515610a2057600080fd5b610a2b333086610b32565b600160a060020a03331683156108fc0284604051600060405180830381858888f1935050505015156108b057600080fd5b60005433600160a060020a03908116911614610a7757600080fd5b600160a060020a0382166000908152600a602052604090819020805460ff19168315151790557f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b60005433600160a060020a03908116911614610b0357600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0382161515610b4757600080fd5b600160a060020a03831660009081526005602052604090205481901015610b6d57600080fd5b600160a060020a03821660009081526005602052604090205481810111610b9357600080fd5b600160a060020a0383166000908152600a602052604090205460ff1615610bb957600080fd5b600160a060020a0382166000908152600a602052604090205460ff1615610bdf57600080fd5b600160a060020a038084166000818152600560205260408082208054869003905592851680825290839020805485019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35050505600a165627a7a72305820c5f48c057dd2e624a08ecc20503f7adfd8642c0d3bbdb0b1291420b4bcfe755300290000000000000000000000000000000000000000000000000000000002faf0800000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000002b47464320652d61756374696f6e20706c6174666f726d20666f7220416772692d636f6d6d6f64697469657300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034746430000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000002faf0800000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000002b47464320652d61756374696f6e20706c6174666f726d20666f7220416772692d636f6d6d6f64697469657300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034746430000000000000000000000000000000000000000000000000000000000"
}