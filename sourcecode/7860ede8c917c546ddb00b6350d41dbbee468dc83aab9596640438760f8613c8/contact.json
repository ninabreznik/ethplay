{
  "address": "0x8faa741875f26ba44375c0983fa8d33eb75f3d66",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenFRT",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-06\n*/\n\n// File: @gnosis.pm/util-contracts/contracts/Proxy.sol\n\npragma solidity ^0.5.2;\n\n/// @title Proxied - indicates that a contract will be proxied. Also defines storage requirements for Proxy.\n/// @author Alan Lu - <[email protected]>\ncontract Proxied {\n    address public masterCopy;\n}\n\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\n/// @author Stefan George - <[email protected]>\ncontract Proxy is Proxied {\n    /// @dev Constructor function sets address of master copy contract.\n    /// @param _masterCopy Master copy address.\n    constructor(address _masterCopy) public {\n        require(_masterCopy != address(0), \"The master copy is required\");\n        masterCopy = _masterCopy;\n    }\n\n    /// @dev Fallback function forwards all transactions and returns all received return data.\n    function() external payable {\n        address _masterCopy = masterCopy;\n        assembly {\n            calldatacopy(0, 0, calldatasize)\n            let success := delegatecall(not(0), _masterCopy, 0, calldatasize, 0, 0)\n            returndatacopy(0, 0, returndatasize)\n            switch success\n                case 0 {\n                    revert(0, returndatasize)\n                }\n                default {\n                    return(0, returndatasize)\n                }\n        }\n    }\n}\n\n// File: @gnosis.pm/util-contracts/contracts/Token.sol\n\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\npragma solidity ^0.5.2;\n\n/// @title Abstract token contract - Functions to be implemented by token contracts\ncontract Token {\n    /*\n     *  Events\n     */\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n\n    /*\n     *  Public functions\n     */\n    function transfer(address to, uint value) public returns (bool);\n    function transferFrom(address from, address to, uint value) public returns (bool);\n    function approve(address spender, uint value) public returns (bool);\n    function balanceOf(address owner) public view returns (uint);\n    function allowance(address owner, address spender) public view returns (uint);\n    function totalSupply() public view returns (uint);\n}\n\n// File: @gnosis.pm/util-contracts/contracts/Math.sol\n\npragma solidity ^0.5.2;\n\n/// @title Math library - Allows calculation of logarithmic and exponential functions\n/// @author Alan Lu - <[email protected]>\n/// @author Stefan George - <[email protected]>\nlibrary GnosisMath {\n    /*\n     *  Constants\n     */\n    // This is equal to 1 in our calculations\n    uint public constant ONE = 0x10000000000000000;\n    uint public constant LN2 = 0xb17217f7d1cf79ac;\n    uint public constant LOG2_E = 0x171547652b82fe177;\n\n    /*\n     *  Public functions\n     */\n    /// @dev Returns natural exponential function value of given x\n    /// @param x x\n    /// @return e**x\n    function exp(int x) public pure returns (uint) {\n        // revert if x is > MAX_POWER, where\n        // MAX_POWER = int(mp.floor(mp.log(mpf(2**256 - 1) / ONE) * ONE))\n        require(x <= 2454971259878909886679);\n        // return 0 if exp(x) is tiny, using\n        // MIN_POWER = int(mp.floor(mp.log(mpf(1) / ONE) * ONE))\n        if (x < -818323753292969962227) return 0;\n        // Transform so that e^x -> 2^x\n        x = x * int(ONE) / int(LN2);\n        // 2^x = 2^whole(x) * 2^frac(x)\n        //       ^^^^^^^^^^ is a bit shift\n        // so Taylor expand on z = frac(x)\n        int shift;\n        uint z;\n        if (x >= 0) {\n            shift = x / int(ONE);\n            z = uint(x % int(ONE));\n        } else {\n            shift = x / int(ONE) - 1;\n            z = ONE - uint(-x % int(ONE));\n        }\n        // 2^x = 1 + (ln 2) x + (ln 2)^2/2! x^2 + ...\n        //\n        // Can generate the z coefficients using mpmath and the following lines\n        // >>> from mpmath import mp\n        // >>> mp.dps = 100\n        // >>> ONE =  0x10000000000000000\n        // >>> print('\\n'.join(hex(int(mp.log(2)**i / mp.factorial(i) * ONE)) for i in range(1, 7)))\n        // 0xb17217f7d1cf79ab\n        // 0x3d7f7bff058b1d50\n        // 0xe35846b82505fc5\n        // 0x276556df749cee5\n        // 0x5761ff9e299cc4\n        // 0xa184897c363c3\n        uint zpow = z;\n        uint result = ONE;\n        result += 0xb17217f7d1cf79ab * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0x3d7f7bff058b1d50 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0xe35846b82505fc5 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0x276556df749cee5 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0x5761ff9e299cc4 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0xa184897c363c3 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0xffe5fe2c4586 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0x162c0223a5c8 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0x1b5253d395e * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0x1e4cf5158b * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0x1e8cac735 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0x1c3bd650 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0x1816193 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0x131496 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0xe1b7 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0x9c7 * zpow / ONE;\n        if (shift >= 0) {\n            if (result >> (256 - shift) > 0) return (2 ** 256 - 1);\n            return result << shift;\n        } else return result >> (-shift);\n    }\n\n    /// @dev Returns natural logarithm value of given x\n    /// @param x x\n    /// @return ln(x)\n    function ln(uint x) public pure returns (int) {\n        require(x > 0);\n        // binary search for floor(log2(x))\n        int ilog2 = floorLog2(x);\n        int z;\n        if (ilog2 < 0) z = int(x << uint(-ilog2));\n        else z = int(x >> uint(ilog2));\n        // z = x * 2^-⌊log₂x⌋\n        // so 1 <= z < 2\n        // and ln z = ln x - ⌊log₂x⌋/log₂e\n        // so just compute ln z using artanh series\n        // and calculate ln x from that\n        int term = (z - int(ONE)) * int(ONE) / (z + int(ONE));\n        int halflnz = term;\n        int termpow = term * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 3;\n        termpow = termpow * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 5;\n        termpow = termpow * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 7;\n        termpow = termpow * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 9;\n        termpow = termpow * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 11;\n        termpow = termpow * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 13;\n        termpow = termpow * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 15;\n        termpow = termpow * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 17;\n        termpow = termpow * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 19;\n        termpow = termpow * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 21;\n        termpow = termpow * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 23;\n        termpow = termpow * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 25;\n        return (ilog2 * int(ONE)) * int(ONE) / int(LOG2_E) + 2 * halflnz;\n    }\n\n    /// @dev Returns base 2 logarithm value of given x\n    /// @param x x\n    /// @return logarithmic value\n    function floorLog2(uint x) public pure returns (int lo) {\n        lo = -64;\n        int hi = 193;\n        // I use a shift here instead of / 2 because it floors instead of rounding towards 0\n        int mid = (hi + lo) >> 1;\n        while ((lo + 1) < hi) {\n            if (mid < 0 && x << uint(-mid) < ONE || mid >= 0 && x >> uint(mid) < ONE) hi = mid;\n            else lo = mid;\n            mid = (hi + lo) >> 1;\n        }\n    }\n\n    /// @dev Returns maximum of an array\n    /// @param nums Numbers to look through\n    /// @return Maximum number\n    function max(int[] memory nums) public pure returns (int maxNum) {\n        require(nums.length > 0);\n        maxNum = -2 ** 255;\n        for (uint i = 0; i < nums.length; i++) if (nums[i] > maxNum) maxNum = nums[i];\n    }\n\n    /// @dev Returns whether an add operation causes an overflow\n    /// @param a First addend\n    /// @param b Second addend\n    /// @return Did no overflow occur?\n    function safeToAdd(uint a, uint b) internal pure returns (bool) {\n        return a + b >= a;\n    }\n\n    /// @dev Returns whether a subtraction operation causes an underflow\n    /// @param a Minuend\n    /// @param b Subtrahend\n    /// @return Did no underflow occur?\n    function safeToSub(uint a, uint b) internal pure returns (bool) {\n        return a >= b;\n    }\n\n    /// @dev Returns whether a multiply operation causes an overflow\n    /// @param a First factor\n    /// @param b Second factor\n    /// @return Did no overflow occur?\n    function safeToMul(uint a, uint b) internal pure returns (bool) {\n        return b == 0 || a * b / b == a;\n    }\n\n    /// @dev Returns sum if no overflow occurred\n    /// @param a First addend\n    /// @param b Second addend\n    /// @return Sum\n    function add(uint a, uint b) internal pure returns (uint) {\n        require(safeToAdd(a, b));\n        return a + b;\n    }\n\n    /// @dev Returns difference if no overflow occurred\n    /// @param a Minuend\n    /// @param b Subtrahend\n    /// @return Difference\n    function sub(uint a, uint b) internal pure returns (uint) {\n        require(safeToSub(a, b));\n        return a - b;\n    }\n\n    /// @dev Returns product if no overflow occurred\n    /// @param a First factor\n    /// @param b Second factor\n    /// @return Product\n    function mul(uint a, uint b) internal pure returns (uint) {\n        require(safeToMul(a, b));\n        return a * b;\n    }\n\n    /// @dev Returns whether an add operation causes an overflow\n    /// @param a First addend\n    /// @param b Second addend\n    /// @return Did no overflow occur?\n    function safeToAdd(int a, int b) internal pure returns (bool) {\n        return (b >= 0 && a + b >= a) || (b < 0 && a + b < a);\n    }\n\n    /// @dev Returns whether a subtraction operation causes an underflow\n    /// @param a Minuend\n    /// @param b Subtrahend\n    /// @return Did no underflow occur?\n    function safeToSub(int a, int b) internal pure returns (bool) {\n        return (b >= 0 && a - b <= a) || (b < 0 && a - b > a);\n    }\n\n    /// @dev Returns whether a multiply operation causes an overflow\n    /// @param a First factor\n    /// @param b Second factor\n    /// @return Did no overflow occur?\n    function safeToMul(int a, int b) internal pure returns (bool) {\n        return (b == 0) || (a * b / b == a);\n    }\n\n    /// @dev Returns sum if no overflow occurred\n    /// @param a First addend\n    /// @param b Second addend\n    /// @return Sum\n    function add(int a, int b) internal pure returns (int) {\n        require(safeToAdd(a, b));\n        return a + b;\n    }\n\n    /// @dev Returns difference if no overflow occurred\n    /// @param a Minuend\n    /// @param b Subtrahend\n    /// @return Difference\n    function sub(int a, int b) internal pure returns (int) {\n        require(safeToSub(a, b));\n        return a - b;\n    }\n\n    /// @dev Returns product if no overflow occurred\n    /// @param a First factor\n    /// @param b Second factor\n    /// @return Product\n    function mul(int a, int b) internal pure returns (int) {\n        require(safeToMul(a, b));\n        return a * b;\n    }\n}\n\n// File: @gnosis.pm/util-contracts/contracts/GnosisStandardToken.sol\n\npragma solidity ^0.5.2;\n\n\n\n\n/**\n * Deprecated: Use Open Zeppeling one instead\n */\ncontract StandardTokenData {\n    /*\n     *  Storage\n     */\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowances;\n    uint totalTokens;\n}\n\n/**\n * Deprecated: Use Open Zeppeling one instead\n */\n/// @title Standard token contract with overflow protection\ncontract GnosisStandardToken is Token, StandardTokenData {\n    using GnosisMath for *;\n\n    /*\n     *  Public functions\n     */\n    /// @dev Transfers sender's tokens to a given address. Returns success\n    /// @param to Address of token receiver\n    /// @param value Number of tokens to transfer\n    /// @return Was transfer successful?\n    function transfer(address to, uint value) public returns (bool) {\n        if (!balances[msg.sender].safeToSub(value) || !balances[to].safeToAdd(value)) {\n            return false;\n        }\n\n        balances[msg.sender] -= value;\n        balances[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success\n    /// @param from Address from where tokens are withdrawn\n    /// @param to Address to where tokens are sent\n    /// @param value Number of tokens to transfer\n    /// @return Was transfer successful?\n    function transferFrom(address from, address to, uint value) public returns (bool) {\n        if (!balances[from].safeToSub(value) || !allowances[from][msg.sender].safeToSub(\n            value\n        ) || !balances[to].safeToAdd(value)) {\n            return false;\n        }\n        balances[from] -= value;\n        allowances[from][msg.sender] -= value;\n        balances[to] += value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    /// @dev Sets approved amount of tokens for spender. Returns success\n    /// @param spender Address of allowed account\n    /// @param value Number of approved tokens\n    /// @return Was approval successful?\n    function approve(address spender, uint value) public returns (bool) {\n        allowances[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /// @dev Returns number of allowed tokens for given address\n    /// @param owner Address of token owner\n    /// @param spender Address of token spender\n    /// @return Remaining allowance for spender\n    function allowance(address owner, address spender) public view returns (uint) {\n        return allowances[owner][spender];\n    }\n\n    /// @dev Returns number of tokens owned by given address\n    /// @param owner Address of token owner\n    /// @return Balance of owner\n    function balanceOf(address owner) public view returns (uint) {\n        return balances[owner];\n    }\n\n    /// @dev Returns total supply of tokens\n    /// @return Total supply\n    function totalSupply() public view returns (uint) {\n        return totalTokens;\n    }\n}\n\n// File: contracts/TokenFRT.sol\n\npragma solidity ^0.5.2;\n\n\n\n\n/// @title Standard token contract with overflow protection\ncontract TokenFRT is Proxied, GnosisStandardToken {\n    address public owner;\n\n    string public constant symbol = \"MGN\";\n    string public constant name = \"Magnolia Token\";\n    uint8 public constant decimals = 18;\n\n    struct UnlockedToken {\n        uint amountUnlocked;\n        uint withdrawalTime;\n    }\n\n    /*\n     *  Storage\n     */\n    address public minter;\n\n    // user => UnlockedToken\n    mapping(address => UnlockedToken) public unlockedTokens;\n\n    // user => amount\n    mapping(address => uint) public lockedTokenBalances;\n\n    /*\n     *  Public functions\n     */\n\n    // @dev allows to set the minter of Magnolia tokens once.\n    // @param   _minter the minter of the Magnolia tokens, should be the DX-proxy\n    function updateMinter(address _minter) public {\n        require(msg.sender == owner, \"Only the minter can set a new one\");\n        require(_minter != address(0), \"The new minter must be a valid address\");\n\n        minter = _minter;\n    }\n\n    // @dev the intention is to set the owner as the DX-proxy, once it is deployed\n    // Then only an update of the DX-proxy contract after a 30 days delay could change the minter again.\n    function updateOwner(address _owner) public {\n        require(msg.sender == owner, \"Only the owner can update the owner\");\n        require(_owner != address(0), \"The new owner must be a valid address\");\n        owner = _owner;\n    }\n\n    function mintTokens(address user, uint amount) public {\n        require(msg.sender == minter, \"Only the minter can mint tokens\");\n\n        lockedTokenBalances[user] = add(lockedTokenBalances[user], amount);\n        totalTokens = add(totalTokens, amount);\n    }\n\n    /// @dev Lock Token\n    function lockTokens(uint amount) public returns (uint totalAmountLocked) {\n        // Adjust amount by balance\n        uint actualAmount = min(amount, balances[msg.sender]);\n\n        // Update state variables\n        balances[msg.sender] = sub(balances[msg.sender], actualAmount);\n        lockedTokenBalances[msg.sender] = add(lockedTokenBalances[msg.sender], actualAmount);\n\n        // Get return variable\n        totalAmountLocked = lockedTokenBalances[msg.sender];\n    }\n\n    function unlockTokens() public returns (uint totalAmountUnlocked, uint withdrawalTime) {\n        // Adjust amount by locked balances\n        uint amount = lockedTokenBalances[msg.sender];\n\n        if (amount > 0) {\n            // Update state variables\n            lockedTokenBalances[msg.sender] = sub(lockedTokenBalances[msg.sender], amount);\n            unlockedTokens[msg.sender].amountUnlocked = add(unlockedTokens[msg.sender].amountUnlocked, amount);\n            unlockedTokens[msg.sender].withdrawalTime = now + 24 hours;\n        }\n\n        // Get return variables\n        totalAmountUnlocked = unlockedTokens[msg.sender].amountUnlocked;\n        withdrawalTime = unlockedTokens[msg.sender].withdrawalTime;\n    }\n\n    function withdrawUnlockedTokens() public {\n        require(unlockedTokens[msg.sender].withdrawalTime < now, \"The tokens cannot be withdrawn yet\");\n        balances[msg.sender] = add(balances[msg.sender], unlockedTokens[msg.sender].amountUnlocked);\n        unlockedTokens[msg.sender].amountUnlocked = 0;\n    }\n\n    function min(uint a, uint b) public pure returns (uint) {\n        if (a < b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n    \n    /// @dev Returns whether an add operation causes an overflow\n    /// @param a First addend\n    /// @param b Second addend\n    /// @return Did no overflow occur?\n    function safeToAdd(uint a, uint b) public pure returns (bool) {\n        return a + b >= a;\n    }\n\n    /// @dev Returns whether a subtraction operation causes an underflow\n    /// @param a Minuend\n    /// @param b Subtrahend\n    /// @return Did no underflow occur?\n    function safeToSub(uint a, uint b) public pure returns (bool) {\n        return a >= b;\n    }\n\n    /// @dev Returns sum if no overflow occurred\n    /// @param a First addend\n    /// @param b Second addend\n    /// @return Sum\n    function add(uint a, uint b) public pure returns (uint) {\n        require(safeToAdd(a, b), \"It must be a safe adition\");\n        return a + b;\n    }\n\n    /// @dev Returns difference if no overflow occurred\n    /// @param a Minuend\n    /// @param b Subtrahend\n    /// @return Difference\n    function sub(uint a, uint b) public pure returns (uint) {\n        require(safeToSub(a, b), \"It must be a safe substraction\");\n        return a - b;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50610e66806100206000396000f3fe608060405234801561001057600080fd5b5060043610610190576000357c010000000000000000000000000000000000000000000000000000000090048063836115fe116100fb578063a9059cbb116100b4578063dd62ed3e1161008e578063dd62ed3e146104b2578063e31c71c4146104e0578063f0dda65c14610503578063f968f4931461052f57610190565b8063a9059cbb1461045b578063b67d77c514610487578063c17ccc6c146104aa57610190565b8063836115fe146103b8578063880cdc31146103f75780638b525d0c1461041d5780638da5cb5b1461044357806395d89b411461044b578063a619486e1461045357610190565b80634e30a66c1161014d5780634e30a66c146102e45780634eb03f6e146103075780636e27d8891461032f57806370a082311461034c578063771602f7146103725780637ae2b5c71461039557610190565b806306fdde03146101955780630754617214610212578063095ea7b31461023657806318160ddd1461027657806323b872dd14610290578063313ce567146102c6575b600080fd5b61019d610537565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101d75781810151838201526020016101bf565b50505050905090810190601f1680156102045780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61021a61056e565b60408051600160a060020a039092168252519081900360200190f35b6102626004803603604081101561024c57600080fd5b50600160a060020a03813516906020013561057d565b604080519115158252519081900360200190f35b61027e6105e4565b60408051918252519081900360200190f35b610262600480360360608110156102a657600080fd5b50600160a060020a038135811691602081013590911690604001356105ea565b6102ce610717565b6040805160ff9092168252519081900360200190f35b610262600480360360408110156102fa57600080fd5b508035906020013561071c565b61032d6004803603602081101561031d57600080fd5b5035600160a060020a0316610723565b005b61027e6004803603602081101561034557600080fd5b50356107e8565b61027e6004803603602081101561036257600080fd5b5035600160a060020a0316610861565b61027e6004803603604081101561038857600080fd5b508035906020013561087c565b61027e600480360360408110156103ab57600080fd5b50803590602001356108e3565b6103de600480360360208110156103ce57600080fd5b5035600160a060020a03166108fb565b6040805192835260208301919091528051918290030190f35b61032d6004803603602081101561040d57600080fd5b5035600160a060020a0316610914565b61027e6004803603602081101561043357600080fd5b5035600160a060020a03166109d9565b61021a6109eb565b61019d6109fa565b61021a610a31565b6102626004803603604081101561047157600080fd5b50600160a060020a038135169060200135610a40565b61027e6004803603604081101561049d57600080fd5b5080359060200135610b0d565b61032d610b75565b61027e600480360360408110156104c857600080fd5b50600160a060020a0381358116916020013516610c0e565b610262600480360360408110156104f657600080fd5b5080359060200135610c39565b61032d6004803603604081101561051957600080fd5b50600160a060020a038135169060200135610c3e565b6103de610cf0565b60408051808201909152600e81527f4d61676e6f6c696120546f6b656e000000000000000000000000000000000000602082015281565b600554600160a060020a031681565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b60035490565b600160a060020a038316600090815260016020526040812054610613908363ffffffff610c3916565b15806106505750600160a060020a038416600090815260026020908152604080832033845290915290205461064e908363ffffffff610c3916565b155b806106815750600160a060020a03831660009081526001602052604090205461067f908363ffffffff61071c16565b155b1561068e57506000610710565b600160a060020a0380851660008181526001602081815260408084208054899003905560028252808420338552825280842080548990039055948816808452918152918490208054870190558351868152935190937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92908290030190a35060015b9392505050565b601281565b8101101590565b600454600160a060020a0316331461076f5760405160e560020a62461bcd028152600401808060200182810382526021815260200180610d8a6021913960400191505060405180910390fd5b600160a060020a03811615156107b95760405160e560020a62461bcd028152600401808060200182810382526026815260200180610dd06026913960400191505060405180910390fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b3360009081526001602052604081205481906108059084906108e3565b336000908152600160205260409020549091506108229082610b0d565b33600090815260016020908152604080832093909355600790522054610848908261087c565b3360009081526007602052604090208190559392505050565b600160a060020a031660009081526001602052604090205490565b6000610888838361071c565b15156108de576040805160e560020a62461bcd02815260206004820152601960248201527f4974206d757374206265206120736166652061646974696f6e00000000000000604482015290519081900360640190fd5b500190565b6000818310156108f45750816105de565b50806105de565b6006602052600090815260409020805460019091015482565b600454600160a060020a031633146109605760405160e560020a62461bcd028152600401808060200182810382526023815260200180610df66023913960400191505060405180910390fd5b600160a060020a03811615156109aa5760405160e560020a62461bcd028152600401808060200182810382526025815260200180610dab6025913960400191505060405180910390fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60076020526000908152604090205481565b600454600160a060020a031681565b60408051808201909152600381527f4d474e0000000000000000000000000000000000000000000000000000000000602082015281565b600054600160a060020a031681565b33600090815260016020526040812054610a60908363ffffffff610c3916565b1580610a925750600160a060020a038316600090815260016020526040902054610a90908363ffffffff61071c16565b155b15610a9f575060006105de565b33600081815260016020908152604080832080548790039055600160a060020a03871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600192915050565b6000610b198383610c39565b1515610b6f576040805160e560020a62461bcd02815260206004820152601e60248201527f4974206d7573742062652061207361666520737562737472616374696f6e0000604482015290519081900360640190fd5b50900390565b336000908152600660205260409020600101544211610bc85760405160e560020a62461bcd028152600401808060200182810382526022815260200180610e196022913960400191505060405180910390fd5b33600090815260016020908152604080832054600690925290912054610bee919061087c565b336000908152600160209081526040808320939093556006905290812055565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b111590565b600554600160a060020a03163314610ca0576040805160e560020a62461bcd02815260206004820152601f60248201527f4f6e6c7920746865206d696e7465722063616e206d696e7420746f6b656e7300604482015290519081900360640190fd5b600160a060020a038216600090815260076020526040902054610cc3908261087c565b600160a060020a038316600090815260076020526040902055600354610ce9908261087c565b6003555050565b33600090815260076020526040812054819081811115610d695733600090815260076020526040902054610d249082610b0d565b33600090815260076020908152604080832093909355600690522054610d4a908261087c565b3360009081526006602052604090209081556201518042016001909101555b50503360009081526006602052604090208054600190910154909290915056fe4f6e6c7920746865206d696e7465722063616e207365742061206e6577206f6e65546865206e6577206f776e6572206d75737420626520612076616c69642061646472657373546865206e6577206d696e746572206d75737420626520612076616c696420616464726573734f6e6c7920746865206f776e65722063616e2075706461746520746865206f776e657254686520746f6b656e732063616e6e6f742062652077697468647261776e20796574a165627a7a72305820f7af336ead4f18a32ed0802ae6f635f68af97219a82ff3423f048a6aabf4b3320029"
}