{
  "address": "0xd53370acf66044910bb49cbcfe8f3cd020337f60",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SEN",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-27\n*/\n\npragma solidity ^0.4.18;\n\n/*\n  Copyright 2017, Anton Egorov (Mothership Foundation)\n  Copyright 2017, An Hoang Phan Ngo (Mothership Foundation)\n  Copyright 2017, Joel Mislav Kunst (Mothership Fundation)\n  Copyright 2016, Jordi Baylina\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// File: contracts/interface/ApproveAndCallFallBack.sol\n\ncontract ApproveAndCallFallBack {\n  function receiveApproval(\n    address _from,\n    uint256 _amount,\n    address _token,\n    bytes _data) public;\n}\n\n// File: contracts/interface/Controlled.sol\n\ncontract Controlled {\n  /// @notice The address of the controller is the only address that can call\n  ///  a function with this modifier\n  modifier onlyController {\n    require(msg.sender == controller);\n    _;\n  }\n\n  address public controller;\n\n  function Controlled() public { controller = msg.sender; }\n\n  /// @notice Changes the controller of the contract\n  /// @param _newController The new controller of the contract\n  function changeController(address _newController) public onlyController {\n    controller = _newController;\n  }\n}\n\n// File: contracts/interface/Burnable.sol\n\n/// @dev Burnable introduces a burner role, which could be used to destroy\n///  tokens. The burner address could be changed by himself.\ncontract Burnable is Controlled {\n  address public burner;\n\n  /// @notice The function with this modifier could be called by a controller\n  /// as well as by a burner. But burner could use the onlt his/her address as\n  /// a target.\n  modifier onlyControllerOrBurner(address target) {\n    assert(msg.sender == controller || (msg.sender == burner && msg.sender == target));\n    _;\n  }\n\n  modifier onlyBurner {\n    assert(msg.sender == burner);\n    _;\n  }\n\n  /// Contract creator become a burner by default\n  function Burnable() public { burner = msg.sender;}\n\n  /// @notice Change a burner address\n  /// @param _newBurner The new burner address\n  function changeBurner(address _newBurner) public onlyBurner {\n    burner = _newBurner;\n  }\n}\n\n// File: contracts/interface/ERC20Token.sol\n\n// @dev Abstract contract for the full ERC 20 Token standard\n//  https://github.com/ethereum/EIPs/issues/20\ncontract ERC20Token {\n  /// total amount of tokens\n  function totalSupply() public view returns (uint256 balance);\n\n  /// @param _owner The address from which the balance will be retrieved\n  /// @return The balance\n  function balanceOf(address _owner) public view returns (uint256 balance);\n\n  /// @notice send `_value` token to `_to` from `msg.sender`\n  /// @param _to The address of the recipient\n  /// @param _value The amount of token to be transferred\n  /// @return Whether the transfer was successful or not\n  function transfer(address _to, uint256 _value) public returns (bool success);\n\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n  /// @param _from The address of the sender\n  /// @param _to The address of the recipient\n  /// @param _value The amount of token to be transferred\n  /// @return Whether the transfer was successful or not\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n  /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n  /// @param _spender The address of the account able to transfer the tokens\n  /// @param _value The amount of tokens to be approved for transfer\n  /// @return Whether the approval was successful or not\n  function approve(address _spender, uint256 _value) public returns (bool success);\n\n  /// @param _owner The address of the account owning tokens\n  /// @param _spender The address of the account able to transfer the tokens\n  /// @return Amount of remaining tokens allowed to spent\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n// File: contracts/interface/MiniMeTokenI.sol\n\n/// @dev MiniMeToken interface. Using this interface instead of whole contracts\n///  will reduce contract sise and gas cost\ncontract MiniMeTokenI is ERC20Token, Burnable {\n\n  string public name;                //The Token's name: e.g. DigixDAO Tokens\n  uint8 public decimals;             //Number of decimals of the smallest unit\n  string public symbol;              //An identifier: e.g. REP\n  string public version = \"MMT_0.1\"; //An arbitrary versioning scheme\n\n///////////////////\n// ERC20 Methods\n///////////////////\n\n  /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n  ///  its behalf, and then a function is triggered in the contract that is\n  ///  being approved, `_spender`. This allows users to use their tokens to\n  ///  interact with contracts in one function call instead of two\n  /// @param _spender The address of the contract able to transfer the tokens\n  /// @param _amount The amount of tokens to be approved for transfer\n  /// @return True if the function call was successful\n  function approveAndCall(\n    address _spender,\n    uint256 _amount,\n    bytes _extraData) public returns (bool success);\n\n////////////////\n// Query balance and totalSupply in History\n////////////////\n\n  /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n  /// @param _owner The address from which the balance will be retrieved\n  /// @param _blockNumber The block number when the balance is queried\n  /// @return The balance at `_blockNumber`\n  function balanceOfAt(\n    address _owner,\n    uint _blockNumber) public constant returns (uint);\n\n  /// @notice Total amount of tokens at a specific `_blockNumber`.\n  /// @param _blockNumber The block number when the totalSupply is queried\n  /// @return The total amount of tokens at `_blockNumber`\n  function totalSupplyAt(uint _blockNumber) public constant returns(uint);\n\n////////////////\n// Generate and destroy tokens\n////////////////\n\n  /// @notice Generates `_amount` tokens that are assigned to `_owner`\n  /// @param _owner The address that will be assigned the new tokens\n  /// @param _amount The quantity of tokens generated\n  /// @return True if the tokens are generated correctly\n  function mintTokens(address _owner, uint _amount) public returns (bool);\n\n\n  /// @notice Burns `_amount` tokens from `_owner`\n  /// @param _owner The address that will lose the tokens\n  /// @param _amount The quantity of tokens to burn\n  /// @return True if the tokens are burned correctly\n  function destroyTokens(address _owner, uint _amount) public returns (bool);\n\n/////////////////\n// Finalize \n////////////////\n  function finalize() public;\n\n//////////\n// Safety Methods\n//////////\n\n  /// @notice This method can be used by the controller to extract mistakenly\n  ///  sent tokens to this contract.\n  /// @param _token The address of the token contract that you want to recover\n  ///  set to 0 in case you want to extract ether.\n  function claimTokens(address _token) public;\n\n////////////////\n// Events\n////////////////\n\n  event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n}\n\n// File: contracts/interface/TokenController.sol\n\n/// @dev The token controller contract must implement these functions\ncontract TokenController {\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n    /// @param _owner The address that sent the ether to create tokens\n    /// @return True if the ether is accepted, false if it throws\n  function proxyMintTokens(\n    address _owner, \n    uint _amount,\n    bytes32 _paidTxID) public returns(bool);\n\n    /// @notice Notifies the controller about a token transfer allowing the\n    ///  controller to react if desired\n    /// @param _from The origin of the transfer\n    /// @param _to The destination of the transfer\n    /// @param _amount The amount of the transfer\n    /// @return False if the controller does not authorize the transfer\n  function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n\n    /// @notice Notifies the controller about an approval allowing the\n    ///  controller to react if desired\n    /// @param _owner The address that calls `approve()`\n    /// @param _spender The spender in the `approve()` call\n    /// @param _amount The amount in the `approve()` call\n    /// @return False if the controller does not authorize the approval\n  function onApprove(address _owner, address _spender, uint _amount) public\n    returns(bool);\n}\n\n// File: contracts/MiniMeToken.sol\n\n/// @title MiniMeToken Contract\n/// @dev The actual token contract, the default controller is the msg.sender\n///  that deploys the contract, so usually this token will be deployed by a\n///  token controller contract, which Giveth will call a \"Campaign\"\ncontract MiniMeToken is MiniMeTokenI {\n\n  /// @dev `Checkpoint` is the structure that attaches a block number to a\n  ///  given value, the block number attached is the one that last changed the\n  ///  value\n  struct Checkpoint {\n\n    // `fromBlock` is the block number that the value was generated from\n    uint128 fromBlock;\n\n    // `value` is the amount of tokens at a specific block number\n    uint128 value;\n  }\n\n  // `parentToken` is the Token address that was cloned to produce this token;\n  //  it will be 0x0 for a token that was not cloned\n  MiniMeToken public parentToken;\n\n  // `parentSnapShotBlock` is the block number from the Parent Token that was\n  //  used to determine the initial distribution of the Clone Token\n  uint public parentSnapShotBlock;\n\n  // `creationBlock` is the block number that the Clone Token was created\n  uint public creationBlock;\n\n  // `balances` is the map that tracks the balance of each address, in this\n  //  contract when the balance changes the block number that the change\n  //  occurred is also included in the map\n  mapping (address => Checkpoint[]) balances;\n\n  // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n  mapping (address => mapping (address => uint256)) allowed;\n\n  // Tracks the history of the `totalSupply` of the token\n  Checkpoint[] totalSupplyHistory;\n\n\n  bool public finalized;\n\n  modifier notFinalized() {\n    require(!finalized);\n    _;\n  }\n\n////////////////\n// Constructor\n////////////////\n\n  /// @notice Constructor to create a MiniMeToken\n  /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n  ///  new token\n  /// @param _parentSnapShotBlock Block of the parent token that will\n  ///  determine the initial distribution of the clone token, set to 0 if it\n  ///  is a new token\n  /// @param _tokenName Name of the new token\n  /// @param _decimalUnits Number of decimals of the new token\n  /// @param _tokenSymbol Token Symbol for the new token\n  function MiniMeToken(\n    address _parentToken,\n    uint _parentSnapShotBlock,\n    string _tokenName,\n    uint8 _decimalUnits,\n    string _tokenSymbol\n  ) public\n  {\n    name = _tokenName;                                 // Set the name\n    decimals = _decimalUnits;                          // Set the decimals\n    symbol = _tokenSymbol;                             // Set the symbol\n    parentToken = MiniMeToken(_parentToken);\n    parentSnapShotBlock = _parentSnapShotBlock;\n    creationBlock = block.number;\n  }\n\n///////////////////\n// ERC20 Methods\n///////////////////\n\n  /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n  /// @param _to The address of the recipient\n  /// @param _amount The amount of tokens to be transferred\n  /// @return Whether the transfer was successful or not\n  function transfer(address _to, uint256 _amount) public returns (bool success) {\n    return doTransfer(msg.sender, _to, _amount);\n  }\n\n  /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n  ///  is approved by `_from`\n  /// @param _from The address holding the tokens being transferred\n  /// @param _to The address of the recipient\n  /// @param _amount The amount of tokens to be transferred\n  /// @return True if the transfer was successful\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n    // The standard ERC 20 transferFrom functionality\n    require(allowed[_from][msg.sender] >= _amount);\n    allowed[_from][msg.sender] -= _amount;\n\n    return doTransfer(_from, _to, _amount);\n  }\n\n  /// @dev This is the actual transfer function in the token contract, it can\n  ///  only be called by other functions in this contract.\n  /// @param _from The address holding the tokens being transferred\n  /// @param _to The address of the recipient\n  /// @param _amount The amount of tokens to be transferred\n  /// @return True if the transfer was successful\n  function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\n    if (_amount == 0) {\n      return true;\n    }\n\n    require(parentSnapShotBlock < block.number);\n\n    // Do not allow transfer to 0x0 or the token contract itself\n    require((_to != 0) && (_to != address(this)));\n\n    // If the amount being transfered is more than the balance of the\n    //  account the transfer returns false\n    var previousBalanceFrom = balanceOfAt(_from, block.number);\n    if (previousBalanceFrom < _amount) {\n      return false;\n    }\n\n    // Alerts the token controller of the transfer\n    // Check for transfer enable from controller\n    if (isContract(controller)) {\n      require(TokenController(controller).onTransfer(_from, _to, _amount));\n    }\n\n    // First update the balance array with the new value for the address\n    //  sending the tokens\n    updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n\n    // Then update the balance array with the new value for the address\n    //  receiving the tokens\n    var previousBalanceTo = balanceOfAt(_to, block.number);\n    require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n    updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n\n    // An event to make the transfer easy to find on the blockchain\n    Transfer(_from, _to, _amount);\n\n    return true;\n  }\n\n  /// @param _owner The address that's balance is being requested\n  /// @return The balance of `_owner` at the current block\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balanceOfAt(_owner, block.number);\n  }\n\n  /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n  ///  its behalf. This is a modified version of the ERC20 approve function\n  ///  to be a little bit safer\n  /// @param _spender The address of the account able to transfer the tokens\n  /// @param _amount The amount of tokens to be approved for transfer\n  /// @return True if the approval was successful\n  function approve(address _spender, uint256 _amount) public returns (bool success) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender,0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n    // Alerts the token controller of the approve function call\n    if (isContract(controller)) {\n      require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n    }\n\n    allowed[msg.sender][_spender] = _amount;\n    Approval(msg.sender, _spender, _amount);\n    return true;\n  }\n\n  /// @dev This function makes it easy to read the `allowed[]` map\n  /// @param _owner The address of the account that owns the token\n  /// @param _spender The address of the account able to transfer the tokens\n  /// @return Amount of remaining tokens of _owner that _spender is allowed\n  ///  to spend\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n  ///  its behalf, and then a function is triggered in the contract that is\n  ///  being approved, `_spender`. This allows users to use their tokens to\n  ///  interact with contracts in one function call instead of two\n  /// @param _spender The address of the contract able to transfer the tokens\n  /// @param _amount The amount of tokens to be approved for transfer\n  /// @return True if the function call was successful\n  function approveAndCall(address _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\n    require(approve(_spender, _amount));\n\n    ApproveAndCallFallBack(_spender).receiveApproval(\n      msg.sender,\n      _amount,\n      this,\n      _extraData\n    );\n\n    return true;\n  }\n\n  /// @dev This function makes it easy to get the total number of tokens\n  /// @return The total number of tokens\n  function totalSupply() public view returns (uint) {\n    return totalSupplyAt(block.number);\n  }\n\n////////////////\n// Query balance and totalSupply in History\n////////////////\n\n  /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n  /// @param _owner The address from which the balance will be retrieved\n  /// @param _blockNumber The block number when the balance is queried\n  /// @return The balance at `_blockNumber`\n  function balanceOfAt(address _owner, uint _blockNumber) public view returns (uint) {\n\n    // These next few lines are used when the balance of the token is\n    //  requested before a check point was ever created for this token, it\n    //  requires that the `parentToken.balanceOfAt` be queried at the\n    //  genesis block for that token as this contains initial balance of\n    //  this token\n    if ((balances[_owner].length == 0) ||\n        (balances[_owner][0].fromBlock > _blockNumber)) {\n      if (address(parentToken) != 0) {\n        return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n      } else {\n        // Has no parent\n        return 0;\n      }\n\n        // This will return the expected balance during normal situations\n     } else {\n      return getValueAt(balances[_owner], _blockNumber);\n     }\n  }\n\n  /// @notice Total amount of tokens at a specific `_blockNumber`.\n  /// @param _blockNumber The block number when the totalSupply is queried\n  /// @return The total amount of tokens at `_blockNumber`\n  function totalSupplyAt(uint _blockNumber) public view returns(uint) {\n\n    // These next few lines are used when the totalSupply of the token is\n    //  requested before a check point was ever created for this token, it\n    //  requires that the `parentToken.totalSupplyAt` be queried at the\n    //  genesis block for this token as that contains totalSupply of this\n    //  token at this block number.\n    if ((totalSupplyHistory.length == 0) ||\n        (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n      if (address(parentToken) != 0) {\n        return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n      } else {\n        return 0;\n      }\n\n        // This will return the expected totalSupply during normal situations\n     } else {\n      return getValueAt(totalSupplyHistory, _blockNumber);\n     }\n  }\n\n////////////////\n// Mint and destroy tokens\n////////////////\n\n  /// @notice Mint `_amount` tokens that are assigned to `_owner`\n  /// @param _owner The address that will be assigned the new tokens\n  /// @param _amount The quantity of tokens minted\n  /// @return True if the tokens are minted correctly\n  function mintTokens(address _owner, uint _amount) public onlyController notFinalized returns (bool) {\n    uint curTotalSupply = totalSupply();\n    require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n    uint previousBalanceTo = balanceOf(_owner);\n    require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n    updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n    updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n    Transfer(0, _owner, _amount);\n    return true;\n  }\n\n  /// @notice Burns `_amount` tokens from `_owner`\n  /// @param _owner The address that will lose the tokens\n  /// @param _amount The quantity of tokens to burn\n  /// @return True if the tokens are burned correctly\n  function destroyTokens(address _owner, uint _amount) public onlyControllerOrBurner(_owner) returns (bool) {\n    uint curTotalSupply = totalSupply();\n    require(curTotalSupply >= _amount);\n    uint previousBalanceFrom = balanceOf(_owner);\n    require(previousBalanceFrom >= _amount);\n    updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n    updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n    Transfer(_owner, 0, _amount);\n    return true;\n  }\n\n////////////////\n// Internal helper functions to query and set a value in a snapshot array\n////////////////\n\n  /// @dev `getValueAt` retrieves the number of tokens at a given block number\n  /// @param checkpoints The history of values being queried\n  /// @param _block The block number to retrieve the value at\n  /// @return The number of tokens being queried\n  function getValueAt(Checkpoint[] storage checkpoints, uint _block) internal view returns (uint) {\n    if (checkpoints.length == 0)\n      return 0;\n\n    // Shortcut for the actual value\n    if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n      return checkpoints[checkpoints.length-1].value;\n    if (_block < checkpoints[0].fromBlock)\n      return 0;\n\n    // Binary search of the value in the array\n    uint min = 0;\n    uint max = checkpoints.length-1;\n    while (max > min) {\n      uint mid = (max + min + 1) / 2;\n      if (checkpoints[mid].fromBlock<=_block) {\n        min = mid;\n      } else {\n        max = mid-1;\n      }\n    }\n    return checkpoints[min].value;\n  }\n\n  /// @dev `updateValueAtNow` used to update the `balances` map and the\n  ///  `totalSupplyHistory`\n  /// @param checkpoints The history of data being updated\n  /// @param _value The new number of tokens\n  function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\n    if ((checkpoints.length == 0) ||\n      (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\n      Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\n      newCheckPoint.fromBlock = uint128(block.number);\n      newCheckPoint.value = uint128(_value);\n    } else {\n      Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n      oldCheckPoint.value = uint128(_value);\n    }\n  }\n\n  /// @dev Internal function to determine if an address is a contract\n  /// @param _addr The address being queried\n  /// @return True if `_addr` is a contract\n  function isContract(address _addr) internal view returns(bool) {\n    uint size;\n    if (_addr == 0)\n      return false;\n    assembly {\n      size := extcodesize(_addr)\n    }\n    return size>0;\n  }\n\n  /// @dev Helper function to return a min betwen the two uints\n  function min(uint a, uint b) pure internal returns (uint) {\n    return a < b ? a : b;\n  }\n\n//////////\n// Safety Methods\n//////////\n\n  /// @notice This method can be used by the controller to extract mistakenly\n  ///  sent tokens to this contract.\n  /// @param _token The address of the token contract that you want to recover\n  ///  set to 0 in case you want to extract ether.\n  function claimTokens(address _token) public onlyController {\n    if (_token == 0x0) {\n      controller.transfer(this.balance);\n      return;\n    }\n\n    ERC20Token otherToken = ERC20Token(_token);\n    uint balance = otherToken.balanceOf(this);\n    otherToken.transfer(controller, balance);\n    ClaimedTokens(_token, controller, balance);\n  }\n\n  function finalize() public onlyController notFinalized {\n    finalized = true;\n  }\n\n////////////////\n// Events\n////////////////\n\n  event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n  event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n  event Approval(\n    address indexed _owner,\n    address indexed _spender,\n    uint256 _amount\n  );\n\n}\n\n// File: contracts/SEN.sol\n\ncontract SEN is MiniMeToken {\n  function SEN() public MiniMeToken(\n    0x0,                // no parent token\n    0,                  // no snapshot block number from parent\n    \"Consensus Token\",  // Token name\n    18,                 // Decimals\n    \"SEN\"              // Symbolh\n  )\n  {}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBurner\",\"type\":\"address\"}],\"name\":\"changeBurner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentSnapShotBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526040805190810160405280600781526020017f4d4d545f302e31000000000000000000000000000000000000000000000000008152506005908051906020019062000051929190620001f7565b5034156200005e57600080fd5b6000806040805190810160405280600f81526020017f436f6e73656e73757320546f6b656e000000000000000000000000000000000081525060126040805190810160405280600381526020017f53454e0000000000000000000000000000000000000000000000000000000000815250336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826002908051906020019062000168929190620001f7565b5081600360006101000a81548160ff021916908360ff16021790555080600490805190602001906200019c929190620001f7565b5084600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600781905550436008819055505050505050620002a6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200023a57805160ff19168380011785556200026b565b828001600101855582156200026b579182015b828111156200026a5782518255916020019190600101906200024d565b5b5090506200027a91906200027e565b5090565b620002a391905b808211156200029f57600081600090555060010162000285565b5090565b90565b6125ff80620002b66000396000f300606060405260043610610149576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461014e578063095ea7b3146101dc578063176345141461023657806318160ddd1461025f57806323b872dd1461028857806327810b6e14610301578063313ce567146103565780633cebb823146103855780634bb278f3146103be5780634ee2cd7e146103d357806354fd4d501461042957806370a08231146104b757806380a540011461050457806380b022e81461055957806395d89b4114610592578063981b24d014610620578063a9059cbb14610657578063b3f05b97146106b1578063c5bcc4f1146106de578063cae9ca5114610707578063d3ce77fe146107a4578063dd62ed3e146107fe578063df8de3e71461086a578063f0dda65c146108a3578063f77c4791146108fd575b600080fd5b341561015957600080fd5b610161610952565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101a1578082015181840152602081019050610186565b50505050905090810190601f1680156101ce5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101e757600080fd5b61021c600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109f0565b604051808215151515815260200191505060405180910390f35b341561024157600080fd5b610249610ccd565b6040518082815260200191505060405180910390f35b341561026a57600080fd5b610272610cd3565b6040518082815260200191505060405180910390f35b341561029357600080fd5b6102e7600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ce3565b604051808215151515815260200191505060405180910390f35b341561030c57600080fd5b610314610e0e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561036157600080fd5b610369610e34565b604051808260ff1660ff16815260200191505060405180910390f35b341561039057600080fd5b6103bc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e47565b005b34156103c957600080fd5b6103d1610ee5565b005b34156103de57600080fd5b610413600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f79565b6040518082815260200191505060405180910390f35b341561043457600080fd5b61043c6111ee565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561047c578082015181840152602081019050610461565b50505050905090810190601f1680156104a95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104c257600080fd5b6104ee600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061128c565b6040518082815260200191505060405180910390f35b341561050f57600080fd5b61051761129f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561056457600080fd5b610590600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506112c5565b005b341561059d57600080fd5b6105a5611362565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105e55780820151818401526020810190506105ca565b50505050905090810190601f1680156106125780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561062b57600080fd5b6106416004808035906020019091905050611400565b6040518082815260200191505060405180910390f35b341561066257600080fd5b610697600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611589565b604051808215151515815260200191505060405180910390f35b34156106bc57600080fd5b6106c461159e565b604051808215151515815260200191505060405180910390f35b34156106e957600080fd5b6106f16115b1565b6040518082815260200191505060405180910390f35b341561071257600080fd5b61078a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506115b7565b604051808215151515815260200191505060405180910390f35b34156107af57600080fd5b6107e4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611730565b604051808215151515815260200191505060405180910390f35b341561080957600080fd5b610854600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611904565b6040518082815260200191505060405180910390f35b341561087557600080fd5b6108a1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061198b565b005b34156108ae57600080fd5b6108e3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611cbc565b604051808215151515815260200191505060405180910390f35b341561090857600080fd5b610910611e22565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109e85780601f106109bd576101008083540402835291602001916109e8565b820191906000526020600020905b8154815290600101906020018083116109cb57829003601f168201915b505050505081565b600080821480610a7c57506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515610a8757600080fd5b610ab16000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611e47565b15610bdd576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da682aeb3385856000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1515610bb657600080fd5b6102c65a03f11515610bc757600080fd5b505050604051805190501515610bdc57600080fd5b5b81600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60085481565b6000610cde43611400565b905090565b600081600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610d7057600080fd5b81600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610e05848484611e83565b90509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ea257600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f4057600080fd5b600c60009054906101000a900460ff16151515610f5c57600080fd5b6001600c60006101000a81548160ff021916908315150217905550565b600080600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490501480611053575081600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548110151561101457fe5b906000526020600020900160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b1561119d576000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561119457600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ee2cd7e846110e58560075461219e565b6000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561117257600080fd5b6102c65a03f1151561118357600080fd5b5050506040518051905090506111e8565b600090506111e8565b6111e5600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020836121b7565b90505b92915050565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112845780601f1061125957610100808354040283529160200191611284565b820191906000526020600020905b81548152906001019060200180831161126757829003601f168201915b505050505081565b60006112988243610f79565b9050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561131e57fe5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113f85780601f106113cd576101008083540402835291602001916113f8565b820191906000526020600020905b8154815290600101906020018083116113db57829003601f168201915b505050505081565b600080600b805490501480611460575081600b600081548110151561142157fe5b906000526020600020900160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b15611576576000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561156d57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663981b24d06114f18460075461219e565b6000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b151561154b57600080fd5b6102c65a03f1151561155c57600080fd5b505050604051805190509050611584565b60009050611584565b611581600b836121b7565b90505b919050565b6000611596338484611e83565b905092915050565b600c60009054906101000a900460ff1681565b60075481565b60006115c384846109f0565b15156115ce57600080fd5b8373ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156116c35780820151818401526020810190506116a8565b50505050905090810190601f1680156116f05780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561171157600080fd5b6102c65a03f1151561172257600080fd5b505050600190509392505050565b6000806000846000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806118155750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614801561181457508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b5b151561181d57fe5b611825610cd3565b925084831015151561183657600080fd5b61183f8661128c565b915084821015151561185057600080fd5b61185d600b8685036123cb565b6118a7600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208684036123cb565b60008673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a36001935050505092915050565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119e957600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff161415611a85576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515611a8057600080fd5b611cb7565b8291508173ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515611b2b57600080fd5b6102c65a03f11515611b3c57600080fd5b5050506040518051905090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515611c1457600080fd5b6102c65a03f11515611c2557600080fd5b50505060405180519050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c836040518082815260200191505060405180910390a35b505050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d1c57600080fd5b600c60009054906101000a900460ff16151515611d3857600080fd5b611d40610cd3565b91508184830110151515611d5357600080fd5b611d5c8561128c565b90508084820110151515611d6f57600080fd5b611d7c600b8584016123cb565b611dc6600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208583016123cb565b8473ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff161415611e725760009150611e7d565b823b90506000811191505b50919050565b600080600080841415611e995760019250612195565b43600754101515611ea957600080fd5b60008573ffffffffffffffffffffffffffffffffffffffff1614158015611efc57503073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b1515611f0757600080fd5b611f118643610f79565b915083821015611f245760009250612195565b611f4e6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611e47565b1561207a576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a3931498787876000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b151561205357600080fd5b6102c65a03f1151561206457600080fd5b50505060405180519050151561207957600080fd5b5b6120c4600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208584036123cb565b6120ce8543610f79565b905080848201101515156120e157600080fd5b61212b600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208583016123cb565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3600192505b50509392505050565b60008183106121ad57816121af565b825b905092915050565b6000806000806000868054905014156121d357600093506123c2565b8560018780549050038154811015156121e857fe5b906000526020600020900160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16851015156122865785600187805490500381548110151561224257fe5b906000526020600020900160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1693506123c2565b85600081548110151561229557fe5b906000526020600020900160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168510156122e257600093506123c2565b60009250600186805490500391505b8282111561237457600260018484010181151561230a57fe5b04905084868281548110151561231c57fe5b906000526020600020900160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff161115156123685780925061236f565b6001810391505b6122f1565b858381548110151561238257fe5b906000526020600020900160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1693505b50505092915050565b6000806000848054905014806124315750438460018680549050038154811015156123f257fe5b906000526020600020900160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16105b156124de578384805480919060010161244a9190612542565b81548110151561245657fe5b90600052602060002090019150438260000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550828260000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555061253c565b8360018580549050038154811015156124f357fe5b90600052602060002090019050828160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b50505050565b81548183558181151161256957818360005260206000209182019101612568919061256e565b5b505050565b6125d091905b808211156125cc57600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556000820160106101000a8154906fffffffffffffffffffffffffffffffff021916905550600101612574565b5090565b905600a165627a7a72305820961970359a87b0c5d3ae00d286d3e5a7763abbdca189879bafd1c13739a022fb0029"
}