{
  "address": "0x84178d97a442cab8b584917cbab6342ab9a1e137",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Dogezer Token",
  "contractName": "DGZToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-15\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function add(uint256 x, uint256 y) pure internal returns (uint256) {\n        uint256 z = x + y;\n        assert((z >= x) && (z >= y));\n        return z;\n    }\n\n    function sub(uint256 x, uint256 y) pure internal returns (uint256) {\n        assert(x >= y);\n        uint256 z = x - y;\n        return z;\n    }\n\n    function mul(uint256 x, uint256 y) pure internal returns (uint256) {\n        uint256 z = x * y;\n        assert((x == 0) || (z / x == y));\n        return z;\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n}\n/*\n * Haltable\n *\n * Abstract contract that allows children to implement an\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\n *\n *\n * Originally envisioned in FirstBlood ICO contract.\n */\ncontract Haltable is Ownable {\n  bool public halted;\n\n  modifier stopInEmergency {\n    require (!halted);\n    _;\n  }\n\n  modifier onlyInEmergency {\n    require (halted);\n    _;\n  }\n\n  // called by the owner on emergency, triggers stopped state\n  function halt() external onlyOwner {\n    halted = true;\n  }\n\n  // called by the owner on end of emergency, returns to normal state\n  function unhalt() external onlyOwner onlyInEmergency {\n    halted = false;\n  }\n\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\ncontract DGZToken is StandardToken {\n    using SafeMath for uint256;\n\n    /*/ Public variables of the token /*/\n    string public constant name = \"Dogezer DGZ Token\";\n    string public constant symbol = \"DGZ\";\n    uint8 public decimals = 8;\n    uint256 public totalSupply = 100 * 0.1 finney;\n\n    /*/ Initializes contract with initial supply tokens to the creator of the contract /*/\n    function DGZToken() public\n    {\n        balances[msg.sender] = totalSupply;              // Give the creator all initial tokens\n    }\n}\n\n\ncontract DogezerICOPrivateCrowdSale is Haltable{\n    using SafeMath for uint;\n    string public name = \"Dogezer Private Sale ITO\";\n\n    address public beneficiary;\n    uint public startTime;\n    uint public duration;\n    uint public tokensContractBalance;\n    uint public price; \n    uint public discountPrice; \n    DGZToken public tokenReward;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => bool) public whiteList;\n\n    event FundTransfer(address backer, uint amount, bool isContribution);\n    \n    bool public crowdsaleClosed = false;\n    uint public tokenOwnerNumber = 0;\n    uint public constant tokenOwnerNumberMax = 120;\n    uint public constant minPurchase = 25.0 * 1 ether;\n    uint public constant discountValue = 100.0 * 1 ether;\n\n    /*  at initialization, setup the owner */\n    function DogezerICOPrivateCrowdSale(\n        address addressOfTokenUsedAsReward,\n\t\taddress addressOfBeneficiary\n    ) public\n    {\n        beneficiary = addressOfBeneficiary;\n        startTime = 1516021200;\n        duration = 744 hours;\n\t\ttokensContractBalance =  500000000000000;\n        price = 5000000;\n        discountPrice = 4500000;\n        tokenReward = DGZToken(addressOfTokenUsedAsReward);\n    }\n\n    modifier onlyAfterStart() {\n        require (now >= startTime);\n        _;\n    }\n\n    modifier onlyBeforeEnd() {\n        require (now <= startTime + duration);\n        _;\n    }\n\n    /* The function without name is the default function that is called whenever anyone sends funds to a contract */\n    function () payable stopInEmergency onlyAfterStart onlyBeforeEnd public\n    {\n        require (msg.value >= minPurchase);\n        require (crowdsaleClosed == false);\n        require (tokensContractBalance > 0);\n        require (whiteList[msg.sender] == true);\n\t\t\n\t\tuint currentPrice = price;\n\t\t\n        if (balanceOf[msg.sender] == 0)\n        {\n            require (tokenOwnerNumber < tokenOwnerNumberMax);\n            tokenOwnerNumber++;\n        }\n\n        if (msg.value >= discountValue)\n        {\n            currentPrice = discountPrice;\n        }\t\t\n\t\t\n\t\tuint amountSendTokens = msg.value / currentPrice;\n\t\t\n\t\tif (amountSendTokens > tokensContractBalance)\n\t\t{\n\t\t\tuint refund = msg.value - (tokensContractBalance * currentPrice);\n\t\t\tamountSendTokens = tokensContractBalance;\n\t\t\tmsg.sender.transfer(refund);\n\t\t\tFundTransfer(msg.sender, refund, true);\n\t\t\tbalanceOf[msg.sender] += (msg.value - refund);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tbalanceOf[msg.sender] += msg.value;\n\t\t}\n\t\t\n\t\ttokenReward.transfer(msg.sender, amountSendTokens);\n\t\tFundTransfer(msg.sender, amountSendTokens, true);\n\t\t\n\t\ttokensContractBalance -= amountSendTokens;\n\n    }\n\n    function joinWhiteList (address _address) public onlyOwner\n    {\n        if (_address != address(0)) \n        {\n            whiteList[_address] = true;\n        }\n    }\n\t\n    function finalizeSale () public onlyOwner\n    {\n       require (crowdsaleClosed == false);\n       crowdsaleClosed = true;\n    }\n\n    function reopenSale () public onlyOwner\n    {\n       crowdsaleClosed = false;\n    }\n\n    function setPrice (uint _price) public onlyOwner\n    {\n        if (_price != 0)\n        {\n            price = _price;\n        }\n    }\n\n    function setDiscount (uint _discountPrice) public onlyOwner\n    {\n        if (_discountPrice != 0)\n        {\n            discountPrice = _discountPrice;\n        }\n    }\n\t\n    function fundWithdrawal (uint _amount) public onlyOwner\n    {\n        beneficiary.transfer(_amount);\n    }\n   \n    function tokenWithdrawal (uint _amount) public onlyOwner\n    {\n        tokenReward.transfer(beneficiary, _amount);\n\t\ttokensContractBalance -= _amount;\n    }\n\t\n    function changeBeneficiary(address _newBeneficiary) public onlyOwner \n\t{\n        if (_newBeneficiary != address(0)) {\n            beneficiary = _newBeneficiary;\n        }\n\t}\t\n}",
  "bytecode": "60606040526003805460ff19166008179055662386f26fc10000600455341561002757600080fd5b600454600160a060020a0333166000908152600160205260409020556105eb806100526000396000f3006060604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461009d578063095ea7b31461012757806318160ddd1461015d57806323b872dd14610182578063313ce567146101aa57806370a08231146101d357806395d89b41146101f2578063a9059cbb14610205578063dd62ed3e14610227575b600080fd5b34156100a857600080fd5b6100b061024c565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100ec5780820151838201526020016100d4565b50505050905090810190601f1680156101195780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013257600080fd5b610149600160a060020a0360043516602435610283565b604051901515815260200160405180910390f35b341561016857600080fd5b610170610329565b60405190815260200160405180910390f35b341561018d57600080fd5b610149600160a060020a036004358116906024351660443561032f565b34156101b557600080fd5b6101bd610442565b60405160ff909116815260200160405180910390f35b34156101de57600080fd5b610170600160a060020a036004351661044b565b34156101fd57600080fd5b6100b0610466565b341561021057600080fd5b610149600160a060020a036004351660243561049d565b341561023257600080fd5b610170600160a060020a036004358116906024351661055c565b60408051908101604052601181527f446f67657a65722044475a20546f6b656e000000000000000000000000000000602082015281565b60008115806102b55750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b15156102c057600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60045481565b600160a060020a038084166000908152600260209081526040808320338516845282528083205493861683526001909152812054909190610376908463ffffffff61058716565b600160a060020a0380861660009081526001602052604080822093909355908716815220546103ab908463ffffffff6105ab16565b600160a060020a0386166000908152600160205260409020556103d4818463ffffffff6105ab16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b60035460ff1681565b600160a060020a031660009081526001602052604090205490565b60408051908101604052600381527f44475a0000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a0333166000908152600160205260408120546104c6908363ffffffff6105ab16565b600160a060020a0333811660009081526001602052604080822093909355908516815220546104fb908363ffffffff61058716565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600082820183811080159061059c5750828110155b15156105a457fe5b9392505050565b600080828410156105b857fe5b50509003905600a165627a7a72305820ac31efc4e92dcd4bb9384c62a44600af641eb1897234ad67059c93731f1700660029"
}