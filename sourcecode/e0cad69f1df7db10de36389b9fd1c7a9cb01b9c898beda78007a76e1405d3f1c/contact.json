{
  "address": "0x04bba664ea822924ff435ce1b3fad3e8dcc69481",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KingOfEth",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-13\n*/\n\n// File: contracts/GodMode.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n/// @title God Mode\n/// @author Anthony Burzillo <[email protected]>\n/// @dev This contract provides a basic interface for God\n///  in a contract as well as the ability for God to pause\n///  the contract\ncontract GodMode {\n    /// @dev Is the contract paused?\n    bool public isPaused;\n\n    /// @dev God's address\n    address public god;\n\n    /// @dev Only God can run this function\n    modifier onlyGod()\n    {\n        require(god == msg.sender);\n        _;\n    }\n\n    /// @dev This function can only be run while the contract\n    ///  is not paused\n    modifier notPaused()\n    {\n        require(!isPaused);\n        _;\n    }\n\n    /// @dev This event is fired when the contract is paused\n    event GodPaused();\n\n    /// @dev This event is fired when the contract is unpaused\n    event GodUnpaused();\n\n    constructor() public\n    {\n        // Make the creator of the contract God\n        god = msg.sender;\n    }\n\n    /// @dev God can change the address of God\n    /// @param _newGod The new address for God\n    function godChangeGod(address _newGod) public onlyGod\n    {\n        god = _newGod;\n    }\n\n    /// @dev God can pause the game\n    function godPause() public onlyGod\n    {\n        isPaused = true;\n\n        emit GodPaused();\n    }\n\n    /// @dev God can unpause the game\n    function godUnpause() public onlyGod\n    {\n        isPaused = false;\n\n        emit GodUnpaused();\n    }\n}\n\n// File: contracts/KingOfEthAuctionsAbstractInterface.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n/// @title King of Eth: Auctions Abstract Interface\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Abstract interface contract for auctions of houses\ncontract KingOfEthAuctionsAbstractInterface {\n    /// @dev Determines if there is an auction at a particular location\n    /// @param _x The x coordinate of the auction\n    /// @param _y The y coordinate of the auction\n    /// @return true if there is an existing auction\n    function existingAuction(uint _x, uint _y) public view returns(bool);\n}\n\n// File: contracts/KingOfEthBlindAuctionsReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Blind Auctions Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev This contract provides a reference to the blind auctions contract\ncontract KingOfEthBlindAuctionsReferencer is GodMode {\n    /// @dev The address of the blind auctions contract\n    address public blindAuctionsContract;\n\n    /// @dev Only the blind auctions contract can run this\n    modifier onlyBlindAuctionsContract()\n    {\n        require(blindAuctionsContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can set a new blind auctions contract\n    /// @param _blindAuctionsContract the address of the blind auctions\n    ///  contract\n    function godSetBlindAuctionsContract(address _blindAuctionsContract)\n        public\n        onlyGod\n    {\n        blindAuctionsContract = _blindAuctionsContract;\n    }\n}\n\n// File: contracts/KingOfEthOpenAuctionsReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Open Auctions Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev This contract provides a reference to the open auctions contract\ncontract KingOfEthOpenAuctionsReferencer is GodMode {\n    /// @dev The address of the auctions contract\n    address public openAuctionsContract;\n\n    /// @dev Only the open auctions contract can run this\n    modifier onlyOpenAuctionsContract()\n    {\n        require(openAuctionsContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can set a new auctions contract\n    function godSetOpenAuctionsContract(address _openAuctionsContract)\n        public\n        onlyGod\n    {\n        openAuctionsContract = _openAuctionsContract;\n    }\n}\n\n// File: contracts/KingOfEthAuctionsReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n/// @title King of Eth: Auctions Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev This contract provides a reference to the auctions contracts\ncontract KingOfEthAuctionsReferencer is\n      KingOfEthBlindAuctionsReferencer\n    , KingOfEthOpenAuctionsReferencer\n{\n    /// @dev Only an auctions contract can run this\n    modifier onlyAuctionsContract()\n    {\n        require(blindAuctionsContract == msg.sender\n             || openAuctionsContract == msg.sender);\n        _;\n    }\n}\n\n// File: contracts/KingOfEthAbstractInterface.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n/// @title King of Eth Abstract Interface\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Abstract interface contract for titles and taxes\ncontract KingOfEthAbstractInterface {\n    /// @dev The address of the current King\n    address public king;\n\n    /// @dev The address of the current Wayfarer\n    address public wayfarer;\n\n    /// @dev Anyone can pay taxes\n    function payTaxes() public payable;\n}\n\n// File: contracts/KingOfEthReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Functionality to allow contracts to reference the king contract\ncontract KingOfEthReferencer is GodMode {\n    /// @dev The address of the king contract\n    address public kingOfEthContract;\n\n    /// @dev Only the king contract can run this\n    modifier onlyKingOfEthContract()\n    {\n        require(kingOfEthContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can change the king contract\n    /// @param _kingOfEthContract The new address\n    function godSetKingOfEthContract(address _kingOfEthContract)\n        public\n        onlyGod\n    {\n        kingOfEthContract = _kingOfEthContract;\n    }\n}\n\n// File: contracts/KingOfEthBoard.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n\n\n/// @title King of Eth: Board\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Contract for board\ncontract KingOfEthBoard is\n      GodMode\n    , KingOfEthAuctionsReferencer\n    , KingOfEthReferencer\n{\n    /// @dev x coordinate of the top left corner of the boundary\n    uint public boundX1 = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef;\n\n    /// @dev y coordinate of the top left corner of the boundary\n    uint public boundY1 = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef;\n\n    /// @dev x coordinate of the bottom right corner of the boundary\n    uint public boundX2 = 0x800000000000000000000000000000000000000000000000000000000000000f;\n\n    /// @dev y coordinate of the bottom right corner of the boundary\n    uint public boundY2 = 0x800000000000000000000000000000000000000000000000000000000000000f;\n\n    /// @dev Number used to divide the total number of house locations\n    /// after any expansion to yield the number of auctions that  will be\n    /// available to start for the expansion's duration\n    uint public constant auctionsAvailableDivisor = 10;\n\n    /// @dev Amount of time the King must wait between increasing the board\n    uint public constant kingTimeBetweenIncrease = 2 weeks;\n\n    /// @dev Amount of time the Wayfarer must wait between increasing the board\n    uint public constant wayfarerTimeBetweenIncrease = 3 weeks;\n\n    /// @dev Amount of time that anyone but the King or Wayfarer must wait\n    ///  before increasing the board\n    uint public constant plebTimeBetweenIncrease = 4 weeks;\n\n    /// @dev The last time the board was increased in size\n    uint public lastIncreaseTime;\n\n    /// @dev The direction of the next increase\n    uint8 public nextIncreaseDirection;\n\n    /// @dev The number of auctions that players may choose to start\n    ///  for this expansion\n    uint public auctionsRemaining;\n\n    constructor() public\n    {\n        // Game is paused as God must start it\n        isPaused = true;\n\n        // Set the auctions remaining\n        setAuctionsAvailableForBounds();\n    }\n\n    /// @dev Fired when the board is increased in size\n    event BoardSizeIncreased(\n          address initiator\n        , uint newBoundX1\n        , uint newBoundY1\n        , uint newBoundX2\n        , uint newBoundY2\n        , uint lastIncreaseTime\n        , uint nextIncreaseDirection\n        , uint auctionsRemaining\n    );\n\n    /// @dev Only the King can run this\n    modifier onlyKing()\n    {\n        require(KingOfEthAbstractInterface(kingOfEthContract).king() == msg.sender);\n        _;\n    }\n\n    /// @dev Only the Wayfarer can run this\n    modifier onlyWayfarer()\n    {\n        require(KingOfEthAbstractInterface(kingOfEthContract).wayfarer() == msg.sender);\n        _;\n    }\n\n    /// @dev Set the total auctions available\n    function setAuctionsAvailableForBounds() private\n    {\n        uint boundDiffX = boundX2 - boundX1;\n        uint boundDiffY = boundY2 - boundY1;\n\n        auctionsRemaining = boundDiffX * boundDiffY / 2 / auctionsAvailableDivisor;\n    }\n\n    /// @dev Increase the board's size making sure to keep steady at\n    ///  the maximum outer bounds\n    function increaseBoard() private\n    {\n        // The length of increase\n        uint _increaseLength;\n\n        // If this increase direction is right\n        if(0 == nextIncreaseDirection)\n        {\n            _increaseLength = boundX2 - boundX1;\n            uint _updatedX2 = boundX2 + _increaseLength;\n\n            // Stay within bounds\n            if(_updatedX2 <= boundX2 || _updatedX2 <= _increaseLength)\n            {\n                boundX2 = ~uint(0);\n            }\n            else\n            {\n                boundX2 = _updatedX2;\n            }\n        }\n        // If this increase direction is down\n        else if(1 == nextIncreaseDirection)\n        {\n            _increaseLength = boundY2 - boundY1;\n            uint _updatedY2 = boundY2 + _increaseLength;\n\n            // Stay within bounds\n            if(_updatedY2 <= boundY2 || _updatedY2 <= _increaseLength)\n            {\n                boundY2 = ~uint(0);\n            }\n            else\n            {\n                boundY2 = _updatedY2;\n            }\n        }\n        // If this increase direction is left\n        else if(2 == nextIncreaseDirection)\n        {\n            _increaseLength = boundX2 - boundX1;\n\n            // Stay within bounds\n            if(boundX1 <= _increaseLength)\n            {\n                boundX1 = 0;\n            }\n            else\n            {\n                boundX1 -= _increaseLength;\n            }\n        }\n        // If this increase direction is up\n        else if(3 == nextIncreaseDirection)\n        {\n            _increaseLength = boundY2 - boundY1;\n\n            // Stay within bounds\n            if(boundY1 <= _increaseLength)\n            {\n                boundY1 = 0;\n            }\n            else\n            {\n                boundY1 -= _increaseLength;\n            }\n        }\n\n        // The last increase time is now\n        lastIncreaseTime = now;\n\n        // Set the next increase direction\n        nextIncreaseDirection = (nextIncreaseDirection + 1) % 4;\n\n        // Reset the auctions available\n        setAuctionsAvailableForBounds();\n\n        emit BoardSizeIncreased(\n              msg.sender\n            , boundX1\n            , boundY1\n            , boundX2\n            , boundY2\n            , now\n            , nextIncreaseDirection\n            , auctionsRemaining\n        );\n    }\n\n    /// @dev God can start the game\n    function godStartGame() public onlyGod\n    {\n        // Reset increase times\n        lastIncreaseTime = now;\n\n        // Unpause the game\n        godUnpause();\n    }\n\n    /// @dev The auctions contracts can decrement the number\n    ///  of auctions that are available to be started\n    function auctionsDecrementAuctionsRemaining()\n        public\n        onlyAuctionsContract\n    {\n        auctionsRemaining -= 1;\n    }\n\n    /// @dev The auctions contracts can increment the number\n    ///  of auctions that are available to be started when\n    ///  an auction ends wihout a winner\n    function auctionsIncrementAuctionsRemaining()\n        public\n        onlyAuctionsContract\n    {\n        auctionsRemaining += 1;\n    }\n\n    /// @dev The King can increase the board much faster than the plebs\n    function kingIncreaseBoard()\n        public\n        onlyKing\n    {\n        // Require enough time has passed since the last increase\n        require(lastIncreaseTime + kingTimeBetweenIncrease < now);\n\n        increaseBoard();\n    }\n\n    /// @dev The Wayfarer can increase the board faster than the plebs\n    function wayfarerIncreaseBoard()\n        public\n        onlyWayfarer\n    {\n        // Require enough time has passed since the last increase\n        require(lastIncreaseTime + wayfarerTimeBetweenIncrease < now);\n\n        increaseBoard();\n    }\n\n    /// @dev Any old pleb can increase the board\n    function plebIncreaseBoard() public\n    {\n        // Require enough time has passed since the last increase\n        require(lastIncreaseTime + plebTimeBetweenIncrease < now);\n\n        increaseBoard();\n    }\n}\n\n// File: contracts/KingOfEthBoardReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Board Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Functionality to allow contracts to reference the board contract\ncontract KingOfEthBoardReferencer is GodMode {\n    /// @dev The address of the board contract\n    address public boardContract;\n\n    /// @dev Only the board contract can run this\n    modifier onlyBoardContract()\n    {\n        require(boardContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can change the board contract\n    /// @param _boardContract The new address\n    function godSetBoardContract(address _boardContract)\n        public\n        onlyGod\n    {\n        boardContract = _boardContract;\n    }\n}\n\n// File: contracts/KingOfEthHousesAbstractInterface.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n/// @title King of Eth: Houses Abstract Interface\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Abstract interface contract for houses\ncontract KingOfEthHousesAbstractInterface {\n    /// @dev Get the owner of the house at some location\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @return The address of the owner\n    function ownerOf(uint _x, uint _y) public view returns(address);\n\n    /// @dev Get the level of the house at some location\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @return The level of the house\n    function level(uint _x, uint _y) public view returns(uint8);\n\n    /// @dev The auctions contracts can set the owner of a house after an auction\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _owner The new owner of the house\n    function auctionsSetOwner(uint _x, uint _y, address _owner) public;\n\n    /// @dev The house realty contract can transfer house ownership\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _from The previous owner of house\n    /// @param _to The new owner of house\n    function houseRealtyTransferOwnership(\n          uint _x\n        , uint _y\n        , address _from\n        , address _to\n    ) public;\n}\n\n// File: contracts/KingOfEthHousesReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Houses Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides functionality to reference the houses contract\ncontract KingOfEthHousesReferencer is GodMode {\n    /// @dev The houses contract's address\n    address public housesContract;\n\n    /// @dev Only the houses contract can run this function\n    modifier onlyHousesContract()\n    {\n        require(housesContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can set the realty contract\n    /// @param _housesContract The new address\n    function godSetHousesContract(address _housesContract)\n        public\n        onlyGod\n    {\n        housesContract = _housesContract;\n    }\n}\n\n// File: contracts/KingOfEthHouseRealty.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n/// @title King of Eth: House Realty\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Contract for controlling sales of houses\ncontract KingOfEthHouseRealty is\n      GodMode\n    , KingOfEthHousesReferencer\n    , KingOfEthReferencer\n{\n    /// @dev The number that divides the amount payed for any sale to produce\n    ///  the amount payed in taxes\n    uint public constant taxDivisor = 25;\n\n    /// @dev Mapping from the x, y coordinates of a house to the current sale\n    ///  price (0 if there is no sale)\n    mapping (uint => mapping (uint => uint)) housePrices;\n\n    /// @dev Fired when there is a new house for sale\n    event HouseForSale(\n          uint x\n        , uint y\n        , address owner\n        , uint amount\n    );\n\n    /// @dev Fired when the owner changes the price of a house\n    event HousePriceChanged(uint x, uint y, uint amount);\n\n    /// @dev Fired when a house is sold\n    event HouseSold(\n          uint x\n        , uint y\n        , address from\n        , address to\n        , uint amount\n        , uint8 level\n    );\n\n    /// @dev Fired when the sale for a house is cancelled by the owner\n    event HouseSaleCancelled(\n          uint x\n        , uint y\n        , address owner\n    );\n\n    /// @dev Only the owner of the house at a location can run this\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    modifier onlyHouseOwner(uint _x, uint _y)\n    {\n        require(KingOfEthHousesAbstractInterface(housesContract).ownerOf(_x, _y) == msg.sender);\n        _;\n    }\n\n    /// @dev This can only be run if there is *not* an existing sale for a house\n    ///  at a location\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    modifier noExistingHouseSale(uint _x, uint _y)\n    {\n        require(0 == housePrices[_x][_y]);\n        _;\n    }\n\n    /// @dev This can only be run if there is an existing sale for a house\n    ///  at a location\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    modifier existingHouseSale(uint _x, uint _y)\n    {\n        require(0 != housePrices[_x][_y]);\n        _;\n    }\n\n    /// @param _kingOfEthContract The address of the king contract\n    constructor(address _kingOfEthContract) public\n    {\n        kingOfEthContract = _kingOfEthContract;\n    }\n\n    /// @dev The houses contract can cancel a sale when a house is transfered\n    ///  to another player\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    function housesCancelHouseSale(uint _x, uint _y)\n        public\n        onlyHousesContract\n    {\n        // If there is indeed a sale\n        if(0 != housePrices[_x][_y])\n        {\n            // Cancel the sale\n            housePrices[_x][_y] = 0;\n\n            emit HouseSaleCancelled(_x, _y, msg.sender);\n        }\n    }\n\n    /// @dev The owner of a house can start a sale\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _askingPrice The price that must be payed by another player\n    ///  to purchase the house\n    function startHouseSale(uint _x, uint _y, uint _askingPrice)\n        public\n        notPaused\n        onlyHouseOwner(_x, _y)\n        noExistingHouseSale(_x, _y)\n    {\n        // Require that the price is at least 0\n        require(0 != _askingPrice);\n\n        // Record the price\n        housePrices[_x][_y] = _askingPrice;\n\n        emit HouseForSale(_x, _y, msg.sender, _askingPrice);\n    }\n\n    /// @dev The owner of a house can change the price of a sale\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _askingPrice The new price that must be payed by another\n    ///  player to purchase the house\n    function changeHousePrice(uint _x, uint _y, uint _askingPrice)\n        public\n        notPaused\n        onlyHouseOwner(_x, _y)\n        existingHouseSale(_x, _y)\n    {\n        // Require that the price is at least 0\n        require(0 != _askingPrice);\n\n        // Record the price\n        housePrices[_x][_y] = _askingPrice;\n\n        emit HousePriceChanged(_x, _y, _askingPrice);\n    }\n\n    /// @dev Anyone can purchase a house as long as the sale exists\n    /// @param _x The y coordinate of the house\n    /// @param _y The y coordinate of the house\n    function purchaseHouse(uint _x, uint _y)\n        public\n        payable\n        notPaused\n        existingHouseSale(_x, _y)\n    {\n        // Require that the exact price was paid\n        require(housePrices[_x][_y] == msg.value);\n\n        // End the sale\n        housePrices[_x][_y] = 0;\n\n        // Calculate the taxes to be paid\n        uint taxCut = msg.value / taxDivisor;\n\n        // Pay the taxes\n        KingOfEthAbstractInterface(kingOfEthContract).payTaxes.value(taxCut)();\n\n        KingOfEthHousesAbstractInterface _housesContract = KingOfEthHousesAbstractInterface(housesContract);\n\n        // Determine the previous owner\n        address _oldOwner = _housesContract.ownerOf(_x, _y);\n\n        // Send the buyer the house\n        _housesContract.houseRealtyTransferOwnership(\n              _x\n            , _y\n            , _oldOwner\n            , msg.sender\n        );\n\n        // Send the previous owner his share\n        _oldOwner.transfer(msg.value - taxCut);\n\n        emit HouseSold(\n              _x\n            , _y\n            , _oldOwner\n            , msg.sender\n            , msg.value\n            , _housesContract.level(_x, _y)\n        );\n    }\n\n    /// @dev The owner of a house can cancel a sale\n    /// @param _x The y coordinate of the house\n    /// @param _y The y coordinate of the house\n    function cancelHouseSale(uint _x, uint _y)\n        public\n        notPaused\n        onlyHouseOwner(_x, _y)\n        existingHouseSale(_x, _y)\n    {\n        // Cancel the sale\n        housePrices[_x][_y] = 0;\n\n        emit HouseSaleCancelled(_x, _y, msg.sender);\n    }\n}\n\n// File: contracts/KingOfEthHouseRealtyReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: House Realty Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides functionality to reference the house realty contract\ncontract KingOfEthHouseRealtyReferencer is GodMode {\n    /// @dev The realty contract's address\n    address public houseRealtyContract;\n\n    /// @dev Only the house realty contract can run this function\n    modifier onlyHouseRealtyContract()\n    {\n        require(houseRealtyContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can set the house realty contract\n    /// @param _houseRealtyContract The new address\n    function godSetHouseRealtyContract(address _houseRealtyContract)\n        public\n        onlyGod\n    {\n        houseRealtyContract = _houseRealtyContract;\n    }\n}\n\n// File: contracts/KingOfEthRoadsAbstractInterface.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n/// @title King of Eth: Roads Abstract Interface\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Abstract interface contract for roads\ncontract KingOfEthRoadsAbstractInterface {\n    /// @dev Get the owner of the road at some location\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road (either\n    ///  0 for right or 1 for down)\n    /// @return The address of the owner\n    function ownerOf(uint _x, uint _y, uint8 _direction) public view returns(address);\n\n    /// @dev The road realty contract can transfer road ownership\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    /// @param _from The previous owner of road\n    /// @param _to The new owner of road\n    function roadRealtyTransferOwnership(\n          uint _x\n        , uint _y\n        , uint8 _direction\n        , address _from\n        , address _to\n    ) public;\n}\n\n// File: contracts/KingOfEthRoadsReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Roads Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides functionality to reference the roads contract\ncontract KingOfEthRoadsReferencer is GodMode {\n    /// @dev The roads contract's address\n    address public roadsContract;\n\n    /// @dev Only the roads contract can run this function\n    modifier onlyRoadsContract()\n    {\n        require(roadsContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can set the realty contract\n    /// @param _roadsContract The new address\n    function godSetRoadsContract(address _roadsContract)\n        public\n        onlyGod\n    {\n        roadsContract = _roadsContract;\n    }\n}\n\n// File: contracts/KingOfEthEthExchangeReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Resource-to-ETH Exchange Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides functionality to interface with the\n///  ETH exchange contract\ncontract KingOfEthEthExchangeReferencer is GodMode {\n    /// @dev Address of the ETH exchange contract\n    address public ethExchangeContract;\n\n    /// @dev Only the ETH exchange contract may run this function\n    modifier onlyEthExchangeContract()\n    {\n        require(ethExchangeContract == msg.sender);\n        _;\n    }\n\n    /// @dev God may set the ETH exchange contract's address\n    /// @dev _ethExchangeContract The new address\n    function godSetEthExchangeContract(address _ethExchangeContract)\n        public\n        onlyGod\n    {\n        ethExchangeContract = _ethExchangeContract;\n    }\n}\n\n// File: contracts/KingOfEthResourceExchangeReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Resource-to-Resource Exchange Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides functionality to interface with the\n///  resource-to-resource contract\ncontract KingOfEthResourceExchangeReferencer is GodMode {\n    /// @dev Address of the resource-to-resource contract\n    address public resourceExchangeContract;\n\n    /// @dev Only the resource-to-resource contract may run this function\n    modifier onlyResourceExchangeContract()\n    {\n        require(resourceExchangeContract == msg.sender);\n        _;\n    }\n\n    /// @dev God may set the resource-to-resource contract's address\n    /// @dev _resourceExchangeContract The new address\n    function godSetResourceExchangeContract(address _resourceExchangeContract)\n        public\n        onlyGod\n    {\n        resourceExchangeContract = _resourceExchangeContract;\n    }\n}\n\n// File: contracts/KingOfEthExchangeReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n\n/// @title King of Eth: Exchange Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides functionality to interface with the exchange contract\ncontract KingOfEthExchangeReferencer is\n      GodMode\n    , KingOfEthEthExchangeReferencer\n    , KingOfEthResourceExchangeReferencer\n{\n    /// @dev Only one of the exchange contracts may\n    ///  run this function\n    modifier onlyExchangeContract()\n    {\n        require(\n               ethExchangeContract == msg.sender\n            || resourceExchangeContract == msg.sender\n        );\n        _;\n    }\n}\n\n// File: contracts/KingOfEthResourcesInterfaceReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Resources Interface Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides functionality to reference the resource interface contract\ncontract KingOfEthResourcesInterfaceReferencer is GodMode {\n    /// @dev The interface contract's address\n    address public interfaceContract;\n\n    /// @dev Only the interface contract can run this function\n    modifier onlyInterfaceContract()\n    {\n        require(interfaceContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can set the realty contract\n    /// @param _interfaceContract The new address\n    function godSetInterfaceContract(address _interfaceContract)\n        public\n        onlyGod\n    {\n        interfaceContract = _interfaceContract;\n    }\n}\n\n// File: contracts/KingOfEthResource.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n/// @title ERC20Interface\n/// @dev ERC20 token interface contract\ncontract ERC20Interface {\n    function totalSupply() public constant returns(uint);\n    function balanceOf(address _tokenOwner) public constant returns(uint balance);\n    function allowance(address _tokenOwner, address _spender) public constant returns(uint remaining);\n    function transfer(address _to, uint _tokens) public returns(bool success);\n    function approve(address _spender, uint _tokens) public returns(bool success);\n    function transferFrom(address _from, address _to, uint _tokens) public returns(bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n/// @title King of Eth: Resource\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Common contract implementation for resources\ncontract KingOfEthResource is\n      ERC20Interface\n    , GodMode\n    , KingOfEthResourcesInterfaceReferencer\n{\n    /// @dev Current resource supply\n    uint public resourceSupply;\n\n    /// @dev ERC20 token's decimals\n    uint8 public constant decimals = 0;\n\n    /// @dev mapping of addresses to holdings\n    mapping (address => uint) holdings;\n\n    /// @dev mapping of addresses to amount of tokens frozen\n    mapping (address => uint) frozenHoldings;\n\n    /// @dev mapping of addresses to mapping of allowances for an address\n    mapping (address => mapping (address => uint)) allowances;\n\n    /// @dev ERC20 total supply\n    /// @return The current total supply of the resource\n    function totalSupply()\n        public\n        constant\n        returns(uint)\n    {\n        return resourceSupply;\n    }\n\n    /// @dev ERC20 balance of address\n    /// @param _tokenOwner The address to look up\n    /// @return The balance of the address\n    function balanceOf(address _tokenOwner)\n        public\n        constant\n        returns(uint balance)\n    {\n        return holdings[_tokenOwner];\n    }\n\n    /// @dev Total resources frozen for an address\n    /// @param _tokenOwner The address to look up\n    /// @return The frozen balance of the address\n    function frozenTokens(address _tokenOwner)\n        public\n        constant\n        returns(uint balance)\n    {\n        return frozenHoldings[_tokenOwner];\n    }\n\n    /// @dev The allowance for a spender on an account\n    /// @param _tokenOwner The account that allows withdrawels\n    /// @param _spender The account that is allowed to withdraw\n    /// @return The amount remaining in the allowance\n    function allowance(address _tokenOwner, address _spender)\n        public\n        constant\n        returns(uint remaining)\n    {\n        return allowances[_tokenOwner][_spender];\n    }\n\n    /// @dev Only run if player has at least some amount of tokens\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of tokens required\n    modifier hasAvailableTokens(address _owner, uint _tokens)\n    {\n        require(holdings[_owner] - frozenHoldings[_owner] >= _tokens);\n        _;\n    }\n\n    /// @dev Only run if player has at least some amount of tokens frozen\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of frozen tokens required\n    modifier hasFrozenTokens(address _owner, uint _tokens)\n    {\n        require(frozenHoldings[_owner] >= _tokens);\n        _;\n    }\n\n    /// @dev Set up the exact same state in each resource\n    constructor() public\n    {\n        // God gets 200 to put on exchange\n        holdings[msg.sender] = 200;\n\n        resourceSupply = 200;\n    }\n\n    /// @dev The resources interface can burn tokens for building\n    ///  roads or houses\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of tokens to burn\n    function interfaceBurnTokens(address _owner, uint _tokens)\n        public\n        onlyInterfaceContract\n        hasAvailableTokens(_owner, _tokens)\n    {\n        holdings[_owner] -= _tokens;\n\n        resourceSupply -= _tokens;\n\n        // Pretend the tokens were sent to 0x0\n        emit Transfer(_owner, 0x0, _tokens);\n    }\n\n    /// @dev The resources interface contract can mint tokens for houses\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of tokens to burn\n    function interfaceMintTokens(address _owner, uint _tokens)\n        public\n        onlyInterfaceContract\n    {\n        holdings[_owner] += _tokens;\n\n        resourceSupply += _tokens;\n\n        // Pretend the tokens were sent from the interface contract\n        emit Transfer(interfaceContract, _owner, _tokens);\n    }\n\n    /// @dev The interface can freeze tokens\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of tokens to freeze\n    function interfaceFreezeTokens(address _owner, uint _tokens)\n        public\n        onlyInterfaceContract\n        hasAvailableTokens(_owner, _tokens)\n    {\n        frozenHoldings[_owner] += _tokens;\n    }\n\n    /// @dev The interface can thaw tokens\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of tokens to thaw\n    function interfaceThawTokens(address _owner, uint _tokens)\n        public\n        onlyInterfaceContract\n        hasFrozenTokens(_owner, _tokens)\n    {\n        frozenHoldings[_owner] -= _tokens;\n    }\n\n    /// @dev The interface can transfer tokens\n    /// @param _from The owner of the tokens\n    /// @param _to The new owner of the tokens\n    /// @param _tokens The amount of tokens to transfer\n    function interfaceTransfer(address _from, address _to, uint _tokens)\n        public\n        onlyInterfaceContract\n    {\n        assert(holdings[_from] >= _tokens);\n\n        holdings[_from] -= _tokens;\n        holdings[_to]   += _tokens;\n\n        emit Transfer(_from, _to, _tokens);\n    }\n\n    /// @dev The interface can transfer frozend tokens\n    /// @param _from The owner of the tokens\n    /// @param _to The new owner of the tokens\n    /// @param _tokens The amount of frozen tokens to transfer\n    function interfaceFrozenTransfer(address _from, address _to, uint _tokens)\n        public\n        onlyInterfaceContract\n        hasFrozenTokens(_from, _tokens)\n    {\n        // Make sure to deduct the tokens from both the total and frozen amounts\n        holdings[_from]       -= _tokens;\n        frozenHoldings[_from] -= _tokens;\n        holdings[_to]         += _tokens;\n\n        emit Transfer(_from, _to, _tokens);\n    }\n\n    /// @dev ERC20 transfer\n    /// @param _to The address to transfer to\n    /// @param _tokens The amount of tokens to transfer\n    function transfer(address _to, uint _tokens)\n        public\n        hasAvailableTokens(msg.sender, _tokens)\n        returns(bool success)\n    {\n        holdings[_to]        += _tokens;\n        holdings[msg.sender] -= _tokens;\n\n        emit Transfer(msg.sender, _to, _tokens);\n\n        return true;\n    }\n\n    /// @dev ERC20 approve\n    /// @param _spender The address to approve\n    /// @param _tokens The amount of tokens to approve\n    function approve(address _spender, uint _tokens)\n        public\n        returns(bool success)\n    {\n        allowances[msg.sender][_spender] = _tokens;\n\n        emit Approval(msg.sender, _spender, _tokens);\n\n        return true;\n    }\n\n    /// @dev ERC20 transfer from\n    /// @param _from The address providing the allowance\n    /// @param _to The address using the allowance\n    /// @param _tokens The amount of tokens to transfer\n    function transferFrom(address _from, address _to, uint _tokens)\n        public\n        hasAvailableTokens(_from, _tokens)\n        returns(bool success)\n    {\n        require(allowances[_from][_to] >= _tokens);\n\n        holdings[_to]          += _tokens;\n        holdings[_from]        -= _tokens;\n        allowances[_from][_to] -= _tokens;\n\n        emit Transfer(_from, _to, _tokens);\n\n        return true;\n    }\n}\n\n// File: contracts/KingOfEthResourceType.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n/// @title King of Eth: Resource Type\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides enum to choose resource types\ncontract KingOfEthResourceType {\n    /// @dev Enum describing a choice of a resource\n    enum ResourceType {\n          ETH\n        , BRONZE\n        , CORN\n        , GOLD\n        , OIL\n        , ORE\n        , STEEL\n        , URANIUM\n        , WOOD\n    }\n}\n\n// File: contracts/KingOfEthResourcesInterface.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n\n/// @title King of Eth: Resources Interface\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Contract for interacting with resources\ncontract KingOfEthResourcesInterface is\n      GodMode\n    , KingOfEthExchangeReferencer\n    , KingOfEthHousesReferencer\n    , KingOfEthResourceType\n    , KingOfEthRoadsReferencer\n{\n    /// @dev Amount of resources a user gets for building a house\n    uint public constant resourcesPerHouse = 3;\n\n    /// @dev Address for the bronze contract\n    address public bronzeContract;\n\n    /// @dev Address for the corn contract\n    address public cornContract;\n\n    /// @dev Address for the gold contract\n    address public goldContract;\n\n    /// @dev Address for the oil contract\n    address public oilContract;\n\n    /// @dev Address for the ore contract\n    address public oreContract;\n\n    /// @dev Address for the steel contract\n    address public steelContract;\n\n    /// @dev Address for the uranium contract\n    address public uraniumContract;\n\n    /// @dev Address for the wood contract\n    address public woodContract;\n\n    /// @param _bronzeContract The address of the bronze contract\n    /// @param _cornContract The address of the corn contract\n    /// @param _goldContract The address of the gold contract\n    /// @param _oilContract The address of the oil contract\n    /// @param _oreContract The address of the ore contract\n    /// @param _steelContract The address of the steel contract\n    /// @param _uraniumContract The address of the uranium contract\n    /// @param _woodContract The address of the wood contract\n    constructor(\n          address _bronzeContract\n        , address _cornContract\n        , address _goldContract\n        , address _oilContract\n        , address _oreContract\n        , address _steelContract\n        , address _uraniumContract\n        , address _woodContract\n    )\n        public\n    {\n        bronzeContract  = _bronzeContract;\n        cornContract    = _cornContract;\n        goldContract    = _goldContract;\n        oilContract     = _oilContract;\n        oreContract     = _oreContract;\n        steelContract   = _steelContract;\n        uraniumContract = _uraniumContract;\n        woodContract    = _woodContract;\n    }\n\n    /// @dev Return the particular address for a certain resource type\n    /// @param _type The resource type\n    /// @return The address for that resource\n    function contractFor(ResourceType _type)\n        public\n        view\n        returns(address)\n    {\n        // ETH does not have a contract\n        require(ResourceType.ETH != _type);\n\n        if(ResourceType.BRONZE == _type)\n        {\n            return bronzeContract;\n        }\n        else if(ResourceType.CORN == _type)\n        {\n            return cornContract;\n        }\n        else if(ResourceType.GOLD == _type)\n        {\n            return goldContract;\n        }\n        else if(ResourceType.OIL == _type)\n        {\n            return oilContract;\n        }\n        else if(ResourceType.ORE == _type)\n        {\n            return oreContract;\n        }\n        else if(ResourceType.STEEL == _type)\n        {\n            return steelContract;\n        }\n        else if(ResourceType.URANIUM == _type)\n        {\n            return uraniumContract;\n        }\n        else if(ResourceType.WOOD == _type)\n        {\n            return woodContract;\n        }\n    }\n\n    /// @dev Determine the resource type of a tile\n    /// @param _x The x coordinate of the top left corner of the tile\n    /// @param _y The y coordinate of the top left corner of the tile\n    function resourceType(uint _x, uint _y)\n        public\n        pure\n        returns(ResourceType resource)\n    {\n        uint _seed = (_x + 7777777) ^  _y;\n\n        if(0 == _seed % 97)\n        {\n          return ResourceType.URANIUM;\n        }\n        else if(0 == _seed % 29)\n        {\n          return ResourceType.OIL;\n        }\n        else if(0 == _seed % 23)\n        {\n          return ResourceType.STEEL;\n        }\n        else if(0 == _seed % 17)\n        {\n          return ResourceType.GOLD;\n        }\n        else if(0 == _seed % 11)\n        {\n          return ResourceType.BRONZE;\n        }\n        else if(0 == _seed % 5)\n        {\n          return ResourceType.WOOD;\n        }\n        else if(0 == _seed % 2)\n        {\n          return ResourceType.CORN;\n        }\n        else\n        {\n          return ResourceType.ORE;\n        }\n    }\n\n    /// @dev Lookup the number of resource points for a certain\n    ///  player\n    /// @param _player The player in question\n    function lookupResourcePoints(address _player)\n        public\n        view\n        returns(uint)\n    {\n        uint result = 0;\n\n        result += KingOfEthResource(bronzeContract).balanceOf(_player);\n        result += KingOfEthResource(goldContract).balanceOf(_player)    * 3;\n        result += KingOfEthResource(steelContract).balanceOf(_player)   * 6;\n        result += KingOfEthResource(oilContract).balanceOf(_player)     * 10;\n        result += KingOfEthResource(uraniumContract).balanceOf(_player) * 44;\n\n        return result;\n    }\n\n    /// @dev Burn the resources necessary to build a house\n    /// @param _count the number of houses being built\n    /// @param _player The player who is building the house\n    function burnHouseCosts(uint _count, address _player)\n        public\n        onlyHousesContract\n    {\n        // Costs 2 corn per house\n        KingOfEthResource(contractFor(ResourceType.CORN)).interfaceBurnTokens(\n              _player\n            , 2 * _count\n        );\n\n        // Costs 2 ore per house\n        KingOfEthResource(contractFor(ResourceType.ORE)).interfaceBurnTokens(\n              _player\n            , 2 * _count\n        );\n\n        // Costs 1 wood per house\n        KingOfEthResource(contractFor(ResourceType.WOOD)).interfaceBurnTokens(\n              _player\n            , _count\n        );\n    }\n\n    /// @dev Burn the costs of upgrading a house\n    /// @param _currentLevel The level of the house before the upgrade\n    /// @param _player The player who is upgrading the house\n    function burnUpgradeCosts(uint8 _currentLevel, address _player)\n        public\n        onlyHousesContract\n    {\n        // Do not allow upgrades after level 4\n        require(5 > _currentLevel);\n\n        // Burn the base house cost\n        burnHouseCosts(1, _player);\n\n        if(0 == _currentLevel)\n        {\n            // Level 1 costs bronze\n            KingOfEthResource(contractFor(ResourceType.BRONZE)).interfaceBurnTokens(\n                  _player\n                , 1\n            );\n        }\n        else if(1 == _currentLevel)\n        {\n            // Level 2 costs gold\n            KingOfEthResource(contractFor(ResourceType.GOLD)).interfaceBurnTokens(\n                  _player\n                , 1\n            );\n        }\n        else if(2 == _currentLevel)\n        {\n            // Level 3 costs steel\n            KingOfEthResource(contractFor(ResourceType.STEEL)).interfaceBurnTokens(\n                  _player\n                , 1\n            );\n        }\n        else if(3 == _currentLevel)\n        {\n            // Level 4 costs oil\n            KingOfEthResource(contractFor(ResourceType.OIL)).interfaceBurnTokens(\n                  _player\n                , 1\n            );\n        }\n        else if(4 == _currentLevel)\n        {\n            // Level 5 costs uranium\n            KingOfEthResource(contractFor(ResourceType.URANIUM)).interfaceBurnTokens(\n                  _player\n                , 1\n            );\n        }\n    }\n\n    /// @dev Mint resources for a house and distribute all to its owner\n    /// @param _owner The owner of the house\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _level The new level of the house\n    function distributeResources(address _owner, uint _x, uint _y, uint8 _level)\n        public\n        onlyHousesContract\n    {\n        // Calculate the count of resources for this level\n        uint _count = resourcesPerHouse * uint(_level + 1);\n\n        // Distribute the top left resource\n        KingOfEthResource(contractFor(resourceType(_x - 1, _y - 1))).interfaceMintTokens(\n            _owner\n          , _count\n        );\n\n        // Distribute the top right resource\n        KingOfEthResource(contractFor(resourceType(_x, _y - 1))).interfaceMintTokens(\n            _owner\n          , _count\n        );\n\n        // Distribute the bottom right resource\n        KingOfEthResource(contractFor(resourceType(_x, _y))).interfaceMintTokens(\n            _owner\n          , _count\n        );\n\n        // Distribute the bottom left resource\n        KingOfEthResource(contractFor(resourceType(_x - 1, _y))).interfaceMintTokens(\n            _owner\n          , _count\n        );\n    }\n\n    /// @dev Burn the costs necessary to build a road\n    /// @param _length The length of the road\n    /// @param _player The player who is building the house\n    function burnRoadCosts(uint _length, address _player)\n        public\n        onlyRoadsContract\n    {\n        // Burn corn\n        KingOfEthResource(cornContract).interfaceBurnTokens(\n              _player\n            , _length\n        );\n\n        // Burn ore\n        KingOfEthResource(oreContract).interfaceBurnTokens(\n              _player\n            , _length\n        );\n    }\n\n    /// @dev The exchange can freeze tokens\n    /// @param _type The type of resource\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of tokens to freeze\n    function exchangeFreezeTokens(ResourceType _type, address _owner, uint _tokens)\n        public\n        onlyExchangeContract\n    {\n        KingOfEthResource(contractFor(_type)).interfaceFreezeTokens(_owner, _tokens);\n    }\n\n    /// @dev The exchange can thaw tokens\n    /// @param _type The type of resource\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of tokens to thaw\n    function exchangeThawTokens(ResourceType _type, address _owner, uint _tokens)\n        public\n        onlyExchangeContract\n    {\n        KingOfEthResource(contractFor(_type)).interfaceThawTokens(_owner, _tokens);\n    }\n\n    /// @dev The exchange can transfer tokens\n    /// @param _type The type of resource\n    /// @param _from The owner of the tokens\n    /// @param _to The new owner of the tokens\n    /// @param _tokens The amount of tokens to transfer\n    function exchangeTransfer(ResourceType _type, address _from, address _to, uint _tokens)\n        public\n        onlyExchangeContract\n    {\n        KingOfEthResource(contractFor(_type)).interfaceTransfer(_from, _to, _tokens);\n    }\n\n    /// @dev The exchange can transfer frozend tokens\n    /// @param _type The type of resource\n    /// @param _from The owner of the tokens\n    /// @param _to The new owner of the tokens\n    /// @param _tokens The amount of frozen tokens to transfer\n    function exchangeFrozenTransfer(ResourceType _type, address _from, address _to, uint _tokens)\n        public\n        onlyExchangeContract\n    {\n        KingOfEthResource(contractFor(_type)).interfaceFrozenTransfer(_from, _to, _tokens);\n    }\n}\n\n// File: contracts/KingOfEthHouses.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/// @title King of Eth: Houses\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Contract for houses\ncontract KingOfEthHouses is\n      GodMode\n    , KingOfEthAuctionsReferencer\n    , KingOfEthBoardReferencer\n    , KingOfEthHouseRealtyReferencer\n    , KingOfEthHousesAbstractInterface\n    , KingOfEthReferencer\n    , KingOfEthRoadsReferencer\n    , KingOfEthResourcesInterfaceReferencer\n{\n    /// @dev ETH cost to build or upgrade a house\n    uint public houseCost = 0.001 ether;\n\n    /// @dev Struct to hold info about a house location on the board\n    struct LocationInfo {\n        /// @dev The owner of the house at this location\n        address owner;\n\n        /// @dev The level of the house at this location\n        uint8 level;\n    }\n\n    /// @dev Mapping from the (x, y) coordinate of the location to its info\n    mapping (uint => mapping (uint => LocationInfo)) locationInfo;\n\n    /// @dev Mapping from a player's address to his points\n    mapping (address => uint) pointCounts;\n\n    /// @param _blindAuctionsContract The address of the blind auctions contract\n    /// @param _boardContract The address of the board contract\n    /// @param _kingOfEthContract The address of the king contract\n    /// @param _houseRealtyContract The address of the house realty contract\n    /// @param _openAuctionsContract The address of the open auctions contract\n    /// @param _roadsContract The address of the roads contract\n    /// @param _interfaceContract The address of the resources\n    ///  interface contract\n    constructor(\n          address _blindAuctionsContract\n        , address _boardContract\n        , address _kingOfEthContract\n        , address _houseRealtyContract\n        , address _openAuctionsContract\n        , address _roadsContract\n        , address _interfaceContract\n    )\n        public\n    {\n        blindAuctionsContract = _blindAuctionsContract;\n        boardContract         = _boardContract;\n        kingOfEthContract     = _kingOfEthContract;\n        houseRealtyContract   = _houseRealtyContract;\n        openAuctionsContract  = _openAuctionsContract;\n        roadsContract         = _roadsContract;\n        interfaceContract     = _interfaceContract;\n    }\n\n    /// @dev Fired when new houses are built\n    event NewHouses(address owner, uint[] locations);\n\n    /// @dev Fired when a house is sent from one player to another\n    event SentHouse(uint x, uint y, address from, address to, uint8 level);\n\n    /// @dev Fired when a house is upgraded\n    event UpgradedHouse(uint x, uint y, address owner, uint8 newLevel);\n\n    /// @dev Get the owner of the house at some location\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @return The address of the owner\n    function ownerOf(uint _x, uint _y) public view returns(address)\n    {\n        return locationInfo[_x][_y].owner;\n    }\n\n    /// @dev Get the level of the house at some location\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @return The level of the house\n    function level(uint _x, uint _y) public view returns(uint8)\n    {\n        return locationInfo[_x][_y].level;\n    }\n\n    /// @dev Get the number of points held by a player\n    /// @param _player The player's address\n    /// @return The number of points\n    function numberOfPoints(address _player) public view returns(uint)\n    {\n        return pointCounts[_player];\n    }\n\n    /// @dev Helper function to build a house at a location\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    function buildHouseInner(uint _x, uint _y) private\n    {\n        // Lookup the info about the house\n        LocationInfo storage _locationInfo = locationInfo[_x][_y];\n\n        KingOfEthBoard _boardContract = KingOfEthBoard(boardContract);\n\n        // Require the house to be within the current bounds of the game\n        require(_boardContract.boundX1() <= _x);\n        require(_boardContract.boundY1() <= _y);\n        require(_boardContract.boundX2() > _x);\n        require(_boardContract.boundY2() > _y);\n\n        // Require the spot to be empty\n        require(0x0 == _locationInfo.owner);\n\n        KingOfEthRoadsAbstractInterface _roadsContract = KingOfEthRoadsAbstractInterface(roadsContract);\n\n        // Require either either the right, bottom, left or top road\n        // to be owned by the player\n        require(\n                _roadsContract.ownerOf(_x, _y, 0) == msg.sender\n             || _roadsContract.ownerOf(_x, _y, 1) == msg.sender\n             || _roadsContract.ownerOf(_x - 1, _y, 0) == msg.sender\n             || _roadsContract.ownerOf(_x, _y - 1, 1) == msg.sender\n        );\n\n        // Require that there is no existing blind auction at the location\n        require(!KingOfEthAuctionsAbstractInterface(blindAuctionsContract).existingAuction(_x, _y));\n\n        // Require that there is no existing open auction at the location\n        require(!KingOfEthAuctionsAbstractInterface(openAuctionsContract).existingAuction(_x, _y));\n\n        // Set new owner\n        _locationInfo.owner = msg.sender;\n\n        // Update player's points\n        ++pointCounts[msg.sender];\n\n        // Distribute resources to the player\n        KingOfEthResourcesInterface(interfaceContract).distributeResources(\n              msg.sender\n            , _x\n            , _y\n            , 0 // Level 0\n        );\n    }\n\n    /// @dev God can change the house cost\n    /// @param _newHouseCost The new cost of a house\n    function godChangeHouseCost(uint _newHouseCost)\n        public\n        onlyGod\n    {\n        houseCost = _newHouseCost;\n    }\n\n    /// @dev The auctions contracts can set the owner of a house after an auction\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _owner The new owner of the house\n    function auctionsSetOwner(uint _x, uint _y, address _owner)\n        public\n        onlyAuctionsContract\n    {\n        // Lookup the info about the house\n        LocationInfo storage _locationInfo = locationInfo[_x][_y];\n\n        // Require that nobody already owns the house.\n        // Note that this would be an assert if only the blind auctions\n        // contract used this code, but the open auctions contract\n        // depends on this require to save space.\n        require(0x0 == _locationInfo.owner);\n\n        // Set the house's new owner\n        _locationInfo.owner = _owner;\n\n        // Give the player a point for the house\n        ++pointCounts[_owner];\n\n        // Distribute the resources for the house\n        KingOfEthResourcesInterface(interfaceContract).distributeResources(\n              _owner\n            , _x\n            , _y\n            , 0 // Level 0\n        );\n\n        // Set up the locations for the event\n        uint[] memory _locations = new uint[](2);\n        _locations[0] = _x;\n        _locations[1] = _y;\n\n        emit NewHouses(_owner, _locations);\n    }\n\n    /// @dev The house realty contract can transfer house ownership\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _from The previous owner of house\n    /// @param _to The new owner of house\n    function houseRealtyTransferOwnership(\n          uint _x\n        , uint _y\n        , address _from\n        , address _to\n    )\n        public\n        onlyHouseRealtyContract\n    {\n        // Lookup the info about the house\n        LocationInfo storage _locationInfo = locationInfo[_x][_y];\n\n        // Assert that the previous owner still has the house\n        assert(_locationInfo.owner == _from);\n\n        // Set the new owner\n        _locationInfo.owner = _to;\n\n        // Calculate the total points of the house\n        uint _points = _locationInfo.level + 1;\n\n        // Update the point counts\n        pointCounts[_from] -= _points;\n        pointCounts[_to]   += _points;\n    }\n\n    /// @dev Build multiple houses at once\n    /// @param _locations An array of coordinates for the houses. These\n    ///  are specified sequentially like [x1, y1, x2, y2] representing\n    ///  location (x1, y1) and location (x2, y2).\n    function buildHouses(uint[] _locations)\n        public\n        payable\n    {\n        // Require that there are an even number of locations\n        require(0 == _locations.length % 2);\n\n        uint _count = _locations.length / 2;\n\n        // Require the house cost\n        require(houseCost * _count == msg.value);\n\n        // Pay taxes\n        KingOfEthAbstractInterface(kingOfEthContract).payTaxes.value(msg.value)();\n\n        // Burn the required resource costs for the houses\n        KingOfEthResourcesInterface(interfaceContract).burnHouseCosts(\n              _count\n            , msg.sender\n        );\n\n        // Build a house at each one of the locations\n        for(uint i = 0; i < _locations.length; i += 2)\n        {\n            buildHouseInner(_locations[i], _locations[i + 1]);\n        }\n\n        emit NewHouses(msg.sender, _locations);\n    }\n\n    /// @dev Send a house to another player\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _to The recipient of the house\n    function sendHouse(uint _x, uint _y, address _to) public\n    {\n        // Lookup the info about the house\n        LocationInfo storage _locationInfo = locationInfo[_x][_y];\n\n        // Require that the sender is the owner\n        require(_locationInfo.owner == msg.sender);\n\n        // Set the new owner\n        _locationInfo.owner = _to;\n\n        // Calculate the points of the house\n        uint _points = _locationInfo.level + 1;\n\n        // Update point counts\n        pointCounts[msg.sender] -= _points;\n        pointCounts[_to]        += _points;\n\n        // Cancel any sales that exist\n        KingOfEthHouseRealty(houseRealtyContract).housesCancelHouseSale(_x, _y);\n\n        emit SentHouse(_x, _y, msg.sender, _to, _locationInfo.level);\n    }\n\n    /// @dev Upgrade a house\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    function upgradeHouse(uint _x, uint _y) public payable\n    {\n        // Lookup the info about the house\n        LocationInfo storage _locationInfo = locationInfo[_x][_y];\n\n        // Require that the sender is the owner\n        require(_locationInfo.owner == msg.sender);\n\n        // Require the house cost be payed\n        require(houseCost == msg.value);\n\n        // Pay the taxes\n        KingOfEthAbstractInterface(kingOfEthContract).payTaxes.value(msg.value)();\n\n        // Burn the resource costs of the upgrade\n        KingOfEthResourcesInterface(interfaceContract).burnUpgradeCosts(\n              _locationInfo.level\n            , msg.sender\n        );\n\n        // Update the house's level\n        ++locationInfo[_x][_y].level;\n\n        // Update the owner's points\n        ++pointCounts[msg.sender];\n\n        // Distribute the resources for the house\n        KingOfEthResourcesInterface(interfaceContract).distributeResources(\n              msg.sender\n            , _x\n            , _y\n            , _locationInfo.level\n        );\n\n        emit UpgradedHouse(_x, _y, msg.sender, _locationInfo.level);\n    }\n}\n\n// File: contracts/KingOfEthRoadRealty.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n/// @title King of Eth: Road Realty\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Contract for controlling sales of roads\ncontract KingOfEthRoadRealty is\n      GodMode\n    , KingOfEthReferencer\n    , KingOfEthRoadsReferencer\n{\n    /// @dev The number that divides the amount payed for any sale to produce\n    ///  the amount payed in taxes\n    uint public constant taxDivisor = 25;\n\n    /// @dev Mapping from the x, y coordinates and the direction (0 for right and\n    ///  1 for down) of a road to the  current sale price (0 if there is no sale)\n    mapping (uint => mapping (uint => uint[2])) roadPrices;\n\n    /// @dev Fired when there is a new road for sale\n    event RoadForSale(\n          uint x\n        , uint y\n        , uint8 direction\n        , address owner\n        , uint amount\n    );\n\n    /// @dev Fired when the owner changes the price of a road\n    event RoadPriceChanged(\n          uint x\n        , uint y\n        , uint8 direction\n        , uint amount\n    );\n\n    /// @dev Fired when a road is sold\n    event RoadSold(\n          uint x\n        , uint y\n        , uint8 direction\n        , address from\n        , address to\n        , uint amount\n    );\n\n    /// @dev Fired when the sale for a road is cancelled by the owner\n    event RoadSaleCancelled(\n          uint x\n        , uint y\n        , uint8 direction\n        , address owner\n    );\n\n    /// @dev Only the owner of the road at a location can run this\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    modifier onlyRoadOwner(uint _x, uint _y, uint8 _direction)\n    {\n        require(KingOfEthRoadsAbstractInterface(roadsContract).ownerOf(_x, _y, _direction) == msg.sender);\n        _;\n    }\n\n    /// @dev This can only be run if there is *not* an existing sale for a road\n    ///  at a location\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    modifier noExistingRoadSale(uint _x, uint _y, uint8 _direction)\n    {\n        require(0 == roadPrices[_x][_y][_direction]);\n        _;\n    }\n\n    /// @dev This can only be run if there is an existing sale for a house\n    ///  at a location\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    modifier existingRoadSale(uint _x, uint _y, uint8 _direction)\n    {\n        require(0 != roadPrices[_x][_y][_direction]);\n        _;\n    }\n\n    /// @param _kingOfEthContract The address of the king contract\n    constructor(address _kingOfEthContract) public\n    {\n        kingOfEthContract = _kingOfEthContract;\n    }\n\n    /// @dev The roads contract can cancel a sale when a road is transfered\n    ///  to another player\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    function roadsCancelRoadSale(uint _x, uint _y, uint8 _direction)\n        public\n        onlyRoadsContract\n    {\n        // If there is indeed a sale\n        if(0 != roadPrices[_x][_y][_direction])\n        {\n            // Cancel the sale\n            roadPrices[_x][_y][_direction] = 0;\n\n            emit RoadSaleCancelled(_x, _y, _direction, msg.sender);\n        }\n    }\n\n    /// @dev The owner of a road can start a sale\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    /// @param _askingPrice The price that must be payed by another player\n    ///  to purchase the road\n    function startRoadSale(\n          uint _x\n        , uint _y\n        , uint8 _direction\n        , uint _askingPrice\n    )\n        public\n        notPaused\n        onlyRoadOwner(_x, _y, _direction)\n        noExistingRoadSale(_x, _y, _direction)\n    {\n        // Require that the price is at least 0\n        require(0 != _askingPrice);\n\n        // Record the price\n        roadPrices[_x][_y][_direction] = _askingPrice;\n\n        emit RoadForSale(_x, _y, _direction, msg.sender, _askingPrice);\n    }\n\n    /// @dev The owner of a road can change the price of a sale\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    /// @param _askingPrice The new price that must be payed by another\n    ///  player to purchase the road\n    function changeRoadPrice(\n          uint _x\n        , uint _y\n        , uint8 _direction\n        , uint _askingPrice\n    )\n        public\n        notPaused\n        onlyRoadOwner(_x, _y, _direction)\n        existingRoadSale(_x, _y, _direction)\n    {\n        // Require that the price is at least 0\n        require(0 != _askingPrice);\n\n        // Record the price\n        roadPrices[_x][_y][_direction] = _askingPrice;\n\n        emit RoadPriceChanged(_x, _y, _direction, _askingPrice);\n    }\n\n    /// @dev Anyone can purchase a road as long as the sale exists\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    function purchaseRoad(uint _x, uint _y, uint8 _direction)\n        public\n        payable\n        notPaused\n        existingRoadSale(_x, _y, _direction)\n    {\n        // Require that the exact price was paid\n        require(roadPrices[_x][_y][_direction] == msg.value);\n\n        // End the sale\n        roadPrices[_x][_y][_direction] = 0;\n\n        // Calculate the taxes to be paid\n        uint taxCut = msg.value / taxDivisor;\n\n        // Pay the taxes\n        KingOfEthAbstractInterface(kingOfEthContract).payTaxes.value(taxCut)();\n\n        KingOfEthRoadsAbstractInterface _roadsContract = KingOfEthRoadsAbstractInterface(roadsContract);\n\n        // Determine the previous owner\n        address _oldOwner = _roadsContract.ownerOf(_x, _y, _direction);\n\n        // Send the buyer the house\n        _roadsContract.roadRealtyTransferOwnership(\n              _x\n            , _y\n            , _direction\n            , _oldOwner\n            , msg.sender\n        );\n\n        // Send the previous owner his share\n        _oldOwner.transfer(msg.value - taxCut);\n\n        emit RoadSold(\n              _x\n            , _y\n            , _direction\n            , _oldOwner\n            , msg.sender\n            , msg.value\n        );\n    }\n\n    /// @dev The owner of a road can cancel a sale\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    function cancelRoadSale(uint _x, uint _y, uint8 _direction)\n        public\n        notPaused\n        onlyRoadOwner(_x, _y, _direction)\n        existingRoadSale(_x, _y, _direction)\n    {\n        // Cancel the sale\n        roadPrices[_x][_y][_direction] = 0;\n\n        emit RoadSaleCancelled(_x, _y, _direction, msg.sender);\n    }\n}\n\n// File: contracts/KingOfEthRoadRealtyReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Road Realty Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides functionality to reference the road realty contract\ncontract KingOfEthRoadRealtyReferencer is GodMode {\n    /// @dev The realty contract's address\n    address public roadRealtyContract;\n\n    /// @dev Only the road realty contract can run this function\n    modifier onlyRoadRealtyContract()\n    {\n        require(roadRealtyContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can set the road realty contract\n    /// @param _roadRealtyContract The new address\n    function godSetRoadRealtyContract(address _roadRealtyContract)\n        public\n        onlyGod\n    {\n        roadRealtyContract = _roadRealtyContract;\n    }\n}\n\n// File: contracts/KingOfEthRoads.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n\n\n\n\n\n\n\n/// @title King of Eth: Roads\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Contract for roads\ncontract KingOfEthRoads is\n      GodMode\n    , KingOfEthBoardReferencer\n    , KingOfEthHousesReferencer\n    , KingOfEthReferencer\n    , KingOfEthResourcesInterfaceReferencer\n    , KingOfEthRoadRealtyReferencer\n    , KingOfEthRoadsAbstractInterface\n{\n    /// @dev ETH cost to build a road\n    uint public roadCost = 0.0002 ether;\n\n    /// @dev Mapping from the x, y, direction coordinate of the location to its owner\n    mapping (uint => mapping (uint => address[2])) owners;\n\n    /// @dev Mapping from a players address to his road counts\n    mapping (address => uint) roadCounts;\n\n    /// @param _boardContract The address of the board contract\n    /// @param _roadRealtyContract The address of the road realty contract\n    /// @param _kingOfEthContract The address of the king contract\n    /// @param _interfaceContract The address of the resources\n    ///  interface contract\n    constructor(\n          address _boardContract\n        , address _roadRealtyContract\n        , address _kingOfEthContract\n        , address _interfaceContract\n    )\n        public\n    {\n        boardContract      = _boardContract;\n        roadRealtyContract = _roadRealtyContract;\n        kingOfEthContract  = _kingOfEthContract;\n        interfaceContract  = _interfaceContract;\n    }\n\n    /// @dev Fired when new roads are built\n    event NewRoads(\n          address owner\n        , uint x\n        , uint y\n        , uint8 direction\n        , uint length\n    );\n\n    /// @dev Fired when a road is sent from one player to another\n    event SentRoad(\n          uint x\n        , uint y\n        , uint direction\n        , address from\n        , address to\n    );\n\n    /// @dev Get the owner of the road at some location\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road (either\n    ///  0 for right or 1 for down)\n    /// @return The address of the owner\n    function ownerOf(uint _x, uint _y, uint8 _direction)\n        public\n        view\n        returns(address)\n    {\n        // Only 0 or 1 is a valid direction\n        require(2 > _direction);\n\n        return owners[_x][_y][_direction];\n    }\n\n    /// @dev Get the number of roads owned by a player\n    /// @param _player The player's address\n    /// @return The number of roads\n    function numberOfRoads(address _player) public view returns(uint)\n    {\n        return roadCounts[_player];\n    }\n\n    /// @dev Only the owner of a road can run this\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    modifier onlyRoadOwner(uint _x, uint _y, uint8 _direction)\n    {\n        require(owners[_x][_y][_direction] == msg.sender);\n        _;\n    }\n\n    /// @dev Build houses to the right\n    /// @param _x The x coordinate of the starting point of the first road\n    /// @param _y The y coordinate of the starting point of the first road\n    /// @param _length The length to build\n    function buildRight(uint _x, uint _y, uint _length) private\n    {\n        // Require that nobody currently owns the road\n        require(0x0 == owners[_x][_y][0]);\n\n        KingOfEthHousesAbstractInterface _housesContract = KingOfEthHousesAbstractInterface(housesContract);\n\n        // Require that either the player owns the house at the\n        // starting location, the road below it, the road to the\n        // left of it, or the road above it\n        address _houseOwner = _housesContract.ownerOf(_x, _y);\n        require(_houseOwner == msg.sender || (0x0 == _houseOwner && (\n               owners[_x][_y][1] == msg.sender\n            || owners[_x - 1][_y][0] == msg.sender\n            || owners[_x][_y - 1][1] == msg.sender\n        )));\n\n        // Set the new owner\n        owners[_x][_y][0] = msg.sender;\n\n        for(uint _i = 1; _i < _length; ++_i)\n        {\n            // Require that nobody currently owns the road\n            require(0x0 == owners[_x + _i][_y][0]);\n\n            // Require that either the house location is empty or\n            // that it is owned by the player\n            require(\n                   _housesContract.ownerOf(_x + _i, _y) == 0x0\n                || _housesContract.ownerOf(_x + _i, _y) == msg.sender\n            );\n\n            // Set the new owner\n            owners[_x + _i][_y][0] = msg.sender;\n        }\n    }\n\n    /// @dev Build houses downwards\n    /// @param _x The x coordinate of the starting point of the first road\n    /// @param _y The y coordinate of the starting point of the first road\n    /// @param _length The length to build\n    function buildDown(uint _x, uint _y, uint _length) private\n    {\n        // Require that nobody currently owns the road\n        require(0x0 == owners[_x][_y][1]);\n\n        KingOfEthHousesAbstractInterface _housesContract = KingOfEthHousesAbstractInterface(housesContract);\n\n        // Require that either the player owns the house at the\n        // starting location, the road to the right of it, the road to\n        // the left of it, or the road above it\n        address _houseOwner = _housesContract.ownerOf(_x, _y);\n        require(_houseOwner == msg.sender || (0x0 == _houseOwner && (\n               owners[_x][_y][0] == msg.sender\n            || owners[_x - 1][_y][0] == msg.sender\n            || owners[_x][_y - 1][1] == msg.sender\n        )));\n\n        // Set the new owner\n        owners[_x][_y][1] = msg.sender;\n\n        for(uint _i = 1; _i < _length; ++_i)\n        {\n            // Require that nobody currently owns the road\n            require(0x0 == owners[_x][_y + _i][1]);\n\n            // Require that either the house location is empty or\n            // that it is owned by the player\n            require(\n                   _housesContract.ownerOf(_x, _y + _i) == 0x0\n                || _housesContract.ownerOf(_x, _y + _i) == msg.sender\n            );\n\n            // Set the new owner\n            owners[_x][_y + _i][1] = msg.sender;\n        }\n    }\n\n    /// @dev Build houses to the left\n    /// @param _x The x coordinate of the starting point of the first road\n    /// @param _y The y coordinate of the starting point of the first road\n    /// @param _length The length to build\n    function buildLeft(uint _x, uint _y, uint _length) private\n    {\n        // Require that nobody currently owns the road\n        require(0x0 == owners[_x - 1][_y][0]);\n\n        KingOfEthHousesAbstractInterface _housesContract = KingOfEthHousesAbstractInterface(housesContract);\n\n        // Require that either the player owns the house at the\n        // starting location, the road to the right of it, the road\n        // below it, or the road above it\n        address _houseOwner = _housesContract.ownerOf(_x, _y);\n        require(_houseOwner == msg.sender || (0x0 == _houseOwner && (\n               owners[_x][_y][0] == msg.sender\n            || owners[_x][_y][1] == msg.sender\n            || owners[_x][_y - 1][1] == msg.sender\n        )));\n\n        // Set the new owner\n        owners[_x - 1][_y][0] = msg.sender;\n\n        for(uint _i = 1; _i < _length; ++_i)\n        {\n            // Require that nobody currently owns the road\n            require(0x0 == owners[_x - _i - 1][_y][0]);\n\n            // Require that either the house location is empty or\n            // that it is owned by the player\n            require(\n                   _housesContract.ownerOf(_x - _i, _y) == 0x0\n                || _housesContract.ownerOf(_x - _i, _y) == msg.sender\n            );\n\n            // Set the new owner\n            owners[_x - _i - 1][_y][0] = msg.sender;\n        }\n    }\n\n    /// @dev Build houses upwards\n    /// @param _x The x coordinate of the starting point of the first road\n    /// @param _y The y coordinate of the starting point of the first road\n    /// @param _length The length to build\n    function buildUp(uint _x, uint _y, uint _length) private\n    {\n        // Require that nobody currently owns the road\n        require(0x0 == owners[_x][_y - 1][1]);\n\n        KingOfEthHousesAbstractInterface _housesContract = KingOfEthHousesAbstractInterface(housesContract);\n\n        // Require that either the player owns the house at the\n        // starting location, the road to the right of it, the road\n        // below it, or the road to the left of it\n        address _houseOwner = _housesContract.ownerOf(_x, _y);\n        require(_houseOwner == msg.sender || (0x0 == _houseOwner && (\n               owners[_x][_y][0] == msg.sender\n            || owners[_x][_y][1] == msg.sender\n            || owners[_x - 1][_y][0] == msg.sender\n        )));\n\n        // Set the new owner\n        owners[_x][_y - 1][1] = msg.sender;\n\n        for(uint _i = 1; _i < _length; ++_i)\n        {\n            // Require that nobody currently owns the road\n            require(0x0 == owners[_x][_y - _i - 1][1]);\n\n            // Require that either the house location is empty or\n            // that it is owned by the player\n            require(\n                   _housesContract.ownerOf(_x, _y - _i) == 0x0\n                || _housesContract.ownerOf(_x, _y - _i) == msg.sender\n            );\n\n            // Set the new owner\n            owners[_x][_y - _i - 1][1] = msg.sender;\n        }\n    }\n\n    /// @dev God can change the road cost\n    /// @param _newRoadCost The new cost of a road\n    function godChangeRoadCost(uint _newRoadCost)\n        public\n        onlyGod\n    {\n        roadCost = _newRoadCost;\n    }\n\n    /// @dev The road realty contract can transfer road ownership\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    /// @param _from The previous owner of road\n    /// @param _to The new owner of road\n    function roadRealtyTransferOwnership(\n          uint _x\n        , uint _y\n        , uint8 _direction\n        , address _from\n        , address _to\n    )\n        public\n        onlyRoadRealtyContract\n    {\n        // Assert that the previous owner still has the road\n        assert(owners[_x][_y][_direction] == _from);\n\n        // Set the new owner\n        owners[_x][_y][_direction] = _to;\n\n        // Update the road counts\n        --roadCounts[_from];\n        ++roadCounts[_to];\n    }\n\n    /// @dev Build a road in a direction from a location\n    /// @param _x The x coordinate of the starting location\n    /// @param _y The y coordinate of the starting location\n    /// @param _direction The direction to build (right is 0, down is 1,\n    ///  2 is left, and 3 is up)\n    /// @param _length The number of roads to build\n    function buildRoads(\n          uint _x\n        , uint _y\n        , uint8 _direction\n        , uint _length\n    )\n        public\n        payable\n    {\n        // Require at least one road to be built\n        require(0 < _length);\n\n        // Require that the cost for each road was payed\n        require(roadCost * _length == msg.value);\n\n        KingOfEthBoard _boardContract = KingOfEthBoard(boardContract);\n\n        // Require that the start is within bounds\n        require(_boardContract.boundX1() <= _x);\n        require(_boardContract.boundY1() <= _y);\n        require(_boardContract.boundX2() > _x);\n        require(_boardContract.boundY2() > _y);\n\n        // Burn the resource costs for each road\n        KingOfEthResourcesInterface(interfaceContract).burnRoadCosts(\n              _length\n            , msg.sender\n        );\n\n        // If the direction is right\n        if(0 == _direction)\n        {\n            // Require that the roads will be in bounds\n            require(_boardContract.boundX2() > _x + _length);\n\n            buildRight(_x, _y, _length);\n        }\n        // If the direction is down\n        else if(1 == _direction)\n        {\n            // Require that the roads will be in bounds\n            require(_boardContract.boundY2() > _y + _length);\n\n            buildDown(_x, _y, _length);\n        }\n        // If the direction is left\n        else if(2 == _direction)\n        {\n            // Require that the roads will be in bounds\n            require(_boardContract.boundX1() < _x - _length - 1);\n\n            buildLeft(_x, _y, _length);\n        }\n        // If the direction is up\n        else if(3 == _direction)\n        {\n            // Require that the roads will be in bounds\n            require(_boardContract.boundY1() < _y - _length - 1);\n\n            buildUp(_x, _y, _length);\n        }\n        else\n        {\n            // Revert if the direction is invalid\n            revert();\n        }\n\n        // Update the number of roads of the player\n        roadCounts[msg.sender] += _length;\n\n        // Pay taxes\n        KingOfEthAbstractInterface(kingOfEthContract).payTaxes.value(msg.value)();\n\n        emit NewRoads(msg.sender, _x, _y, _direction, _length);\n    }\n\n    /// @dev Send a road to another player\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    /// @param _to The recipient of the road\n    function sendRoad(uint _x, uint _y, uint8 _direction, address _to)\n        public\n        onlyRoadOwner(_x, _y, _direction)\n    {\n        // Set the new owner\n        owners[_x][_y][_direction] = _to;\n\n        // Update road counts\n        --roadCounts[msg.sender];\n        ++roadCounts[_to];\n\n        // Cancel any sales that exist\n        KingOfEthRoadRealty(roadRealtyContract).roadsCancelRoadSale(\n              _x\n            , _y\n            , _direction\n        );\n\n        emit SentRoad(_x, _y, _direction, msg.sender, _to);\n    }\n}\n\n// File: contracts/KingOfEth.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n\n\n/// @title King of Eth\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Contract for titles, and taxes\ncontract KingOfEth is\n      GodMode\n    , KingOfEthHousesReferencer\n    , KingOfEthRoadsReferencer\n    , KingOfEthResourcesInterfaceReferencer\n{\n    /// @dev Number used to divide the taxes to yield the King's share\n    uint public constant kingsTaxDivisor = 5;\n\n    /// @dev Number used to divide the taxes to yield the Wayfarer's share\n    uint public constant wayfarersTaxDivisor = 20;\n\n    /// @dev Number used to divide the taxes to yield Parliament's share\n    uint public constant parliamentsTaxDivisor = 4;\n\n    /// @dev Amount of time the King, Wayfarer, and Paliament must wait\n    ///  between claiming/distributing their taxes\n    uint public constant timeBetweenClaims = 2 weeks;\n\n    /// @dev Amount of time the King or Parliement has to claim/distribute\n    ///  their taxes before the other side is able to overthrow them\n    uint public constant gracePeriod = 1 days;\n\n    /// @dev The address of the current King\n    address public king;\n\n    /// @dev The amount of taxes currently reserved for the King\n    uint public kingsTaxes;\n\n    /// @dev The last time that the King claimed his taxes\n    uint public kingsTaxesLastClaimed;\n\n    /// @dev The address of the current Wayfarer\n    address public wayfarer;\n\n    /// @dev The amount of taxes currently reserved for the Wayfarer\n    uint public wayfarersTaxes;\n\n    /// @dev The last time that the Wayfarer claimed his taxes\n    uint public wayfarersTaxesLastClaimed;\n\n    /// @dev Relevant data for each seat of Parliament\n    struct ParliamentSeatData {\n        /// @dev The number of resource points the seat holds\n        uint points;\n\n        /// @dev The amount of unclaimed taxes the seat has\n        ///  and can claim at any time\n        uint unclaimedTaxes;\n    }\n\n    /// @dev The 10 seats of Parliament\n    address[10] public parliamentSeats;\n\n    /// @dev Mapping from an arbitrary address to data about a seat\n    ///  of Parliament (this data exists only for the current seats)\n    mapping (address => ParliamentSeatData) parliamentSeatData;\n\n    /// @dev The number of taxes currently reserved for Parliament\n    uint public parliamentsTaxes;\n\n    /// @dev The last time that Parliament's taxes were distributed\n    uint public parliamentsTaxesLastDistributed;\n\n    /// @param _interfaceContract The address for the resources\n    ///  interface contract\n    constructor(address _interfaceContract) public\n    {\n        interfaceContract = _interfaceContract;\n\n        // Game is paused as God must start it\n        isPaused = true;\n    }\n\n    /// @dev Fired when the King's taxes are claimed\n    event KingsTaxesClaimed(address king, uint claimedTime);\n\n    /// @dev Fired when the Wayfarer's taxes are claimed\n    event WayfarersTaxesClaimed(address wayfarer, uint claimedTime);\n\n    /// @dev Fired when a seat in Parliament claims their\n    ///  unclaimed taxes\n    event ParliamentTaxesClaimed(address seat);\n\n    /// @dev Fired when a new King claims the throne\n    event NewKing(address king);\n\n    /// @dev Fired when a new Wayfarer claims the title\n    event NewWayfarer(address wayfarer);\n\n    /// @dev Fired when a player claims a seat in Parliament\n    event ParliamentSeatClaimed(address seat, uint points);\n\n    /// @dev Fired when a successful inquest is made against a\n    ///  seat of Parliament\n    event ParliamentInquest(address seat, uint points);\n\n    /// @dev Fired when Parliament's taxes are distributed\n    event ParliamentsTaxesDistributed(\n          address distributor\n        , uint share\n        , uint distributedTime\n    );\n\n    /// @dev Fired when Parliament is overthrown by the king\n    event ParliamentOverthrown(uint overthrownTime);\n\n    /// @dev Fired when the King is overthrown by Parliament\n    event KingOverthrown(uint overthrownTime);\n\n    /// @dev Only the King can run this\n    modifier onlyKing()\n    {\n        require(king == msg.sender);\n        _;\n    }\n\n    /// @dev Only the Wayfarer can run this\n    modifier onlyWayfarer()\n    {\n        require(wayfarer == msg.sender);\n        _;\n    }\n\n    /// @dev Only a Parliament seat can run this\n    modifier onlyParliamentSeat()\n    {\n        require(0 != parliamentSeatData[msg.sender].points);\n        _;\n    }\n\n    /// @dev God can withdraw his taxes\n    function godWithdrawTaxes()\n        public\n        onlyGod\n    {\n        // Add up each Parliament seat's unclaimed taxes\n        uint _parliamentsUnclaimed = 0;\n        for(uint8 _i = 0; _i < 10; ++_i)\n        {\n            _parliamentsUnclaimed += parliamentSeatData[parliamentSeats[_i]].unclaimedTaxes;\n        }\n\n        // God's share is the balance minus the king's, the wayfarer's,\n        //  Parliament's, as well as any of Parliament's seat's unclaimed taxes\n        uint taxes = address(this).balance - kingsTaxes - wayfarersTaxes\n                   - parliamentsTaxes - _parliamentsUnclaimed;\n\n        god.transfer(taxes);\n    }\n\n    /// @dev God can start the game\n    function godStartGame() public onlyGod\n    {\n        // Reset time title taxes were last claimed\n        kingsTaxesLastClaimed           = now;\n        wayfarersTaxesLastClaimed       = now;\n        parliamentsTaxesLastDistributed = now;\n\n        // Unpause the game\n        isPaused = false;\n    }\n\n    /// @dev The King can claim his taxes\n    function kingWithdrawTaxes()\n        public\n        onlyKing\n    {\n        // Require that enought time has passed since the King's last claim\n        require(kingsTaxesLastClaimed + timeBetweenClaims < now);\n\n        // The last claim time is now\n        kingsTaxesLastClaimed = now;\n\n        // Temporarily save the King's taxes\n        uint _taxes = kingsTaxes;\n\n        // Reset the King's taxes\n        kingsTaxes = 0;\n\n        king.transfer(_taxes);\n\n        emit KingsTaxesClaimed(msg.sender, now);\n    }\n\n    /// @dev The Wayfarer can claim his taxes\n    function wayfarerWithdrawTaxes()\n        public\n        onlyWayfarer\n    {\n        // Require that enough time has passed since the Wayfarer's last claim\n        require(wayfarersTaxesLastClaimed + timeBetweenClaims < now);\n\n        // The last claim time is now\n        wayfarersTaxesLastClaimed = now;\n\n        // Temporarily save the Wayfarer's taxes\n        uint _taxes = wayfarersTaxes;\n\n        // Reset the Wayfarer's taxes\n        wayfarersTaxes = 0;\n\n        wayfarer.transfer(_taxes);\n\n        emit WayfarersTaxesClaimed(msg.sender, now);\n    }\n\n    /// @dev A seat of Parliament can withdraw any unclaimed taxes\n    function parliamentWithdrawTaxes()\n        public\n    {\n        // Lookup the data on the sender\n        ParliamentSeatData storage _senderData = parliamentSeatData[msg.sender];\n\n        // If the sender does indeed have unclaimed taxes\n        if(0 != _senderData.unclaimedTaxes)\n        {\n            // Temporarily save the taxes\n            uint _taxes = _senderData.unclaimedTaxes;\n\n            // Mark the taxes as claimed\n            _senderData.unclaimedTaxes = 0;\n\n            // Send the sender the unclaimed taxes\n            msg.sender.transfer(_taxes);\n        }\n\n        emit ParliamentTaxesClaimed(msg.sender);\n    }\n\n    /// @dev Claim the King's throne\n    function claimThrone() public\n    {\n        KingOfEthHouses _housesContract = KingOfEthHouses(housesContract);\n\n        // Require the claimant to have more points than the King\n        require(_housesContract.numberOfPoints(king) < _housesContract.numberOfPoints(msg.sender));\n\n        // Save the new King\n        king = msg.sender;\n\n        emit NewKing(msg.sender);\n    }\n\n    /// @dev Claim the Wayfarer's title\n    function claimWayfarerTitle() public\n    {\n        KingOfEthRoads _roadsContract = KingOfEthRoads(roadsContract);\n\n        // Require the claimant to have more roads than the wayfarer\n        require(_roadsContract.numberOfRoads(wayfarer) < _roadsContract.numberOfRoads(msg.sender));\n\n        // Save the new Wayfarer\n        wayfarer = msg.sender;\n\n        emit NewWayfarer(msg.sender);\n    }\n\n    /// @dev Claim a seat in Parliament\n    function claimParliamentSeat() public\n    {\n        // Lookup the sender's data\n        ParliamentSeatData storage _senderData = parliamentSeatData[msg.sender];\n\n        // If the sender is not already in Parliament\n        if(0 == _senderData.points)\n        {\n            // Determine the points of the sender\n            uint _points\n                = KingOfEthResourcesInterface(interfaceContract).lookupResourcePoints(msg.sender);\n\n            // Lookup the lowest seat in parliament (the last seat)\n            ParliamentSeatData storage _lastSeat = parliamentSeatData[parliamentSeats[9]];\n\n            // If the lowest ranking seat has fewer points than the sender\n            if(_lastSeat.points < _points)\n            {\n                // If the lowest ranking seat has unclaimed taxes\n                if(0 != _lastSeat.unclaimedTaxes)\n                {\n                    // Put them back into Parliament's pool\n                    parliamentsTaxes += _lastSeat.unclaimedTaxes;\n                }\n\n                // Delete the lowest seat's data\n                delete parliamentSeatData[parliamentSeats[9]];\n\n                // Record the sender's points\n                _senderData.points = _points;\n\n                // Record the new seat's temporary standing\n                parliamentSeats[_i] = msg.sender;\n\n                uint8 _i;\n\n                // Move the new seat up until they are in the correct position\n                for(_i = 8; _i >= 0; --_i)\n                {\n                    // If the seat above has fewer points than the new seat\n                    if(parliamentSeatData[parliamentSeats[_i]].points < _points)\n                    {\n                        // Move the seat above down\n                        parliamentSeats[_i + 1] = parliamentSeats[_i];\n                    }\n                    else\n                    {\n                        // We have found the new seat's position\n                        parliamentSeats[_i] = msg.sender;\n\n                        break;\n                    }\n                }\n\n                emit ParliamentSeatClaimed(msg.sender, _points);\n            }\n        }\n    }\n\n    /// @dev Question the standing of a current seat in Parliament\n    /// @param _seat The seat to run the inquest on\n    function parliamentInquest(address _seat) public\n    {\n        // Grab the seat's data\n        ParliamentSeatData storage _seatData = parliamentSeatData[_seat];\n\n        // Ensure that the account in question is actually in Parliament\n        if(0 != _seatData.points)\n        {\n            // Determine the current points held by the seat\n            uint _newPoints\n                = KingOfEthResourcesInterface(interfaceContract).lookupResourcePoints(_seat);\n\n            uint _i;\n\n            // If the seat has more points than before\n            if(_seatData.points < _newPoints)\n            {\n                // Find the seat's current location\n                _i = 9;\n                while(_seat != parliamentSeats[_i])\n                {\n                    --_i;\n                }\n\n                // For each seat higher than the seat in question\n                for(; _i > 0; --_i)\n                {\n                    // If the higher seat has fewer points than the seat in question\n                    if(parliamentSeatData[parliamentSeats[_i - 1]].points < _newPoints)\n                    {\n                        // Move the seat back\n                        parliamentSeats[_i] = parliamentSeats[_i - 1];\n                    }\n                    else\n                    {\n                        // Record the seat's (new) position\n                        parliamentSeats[_i] = _seat;\n\n                        break;\n                    }\n                }\n            }\n            // If the seat has the same number of points\n            else if(_seatData.points == _newPoints)\n            {\n                revert();\n            }\n            // If the seat has fewer points than before\n            else\n            {\n                // Find the seat's current position\n                _i = 0;\n                while(_seat != parliamentSeats[_i])\n                {\n                    ++_i;\n                }\n\n                // For each seat lower than the seat in question\n                for(; _i < 10; ++_i)\n                {\n                    // If the lower seat has more points than the seat in question\n                    if(parliamentSeatData[parliamentSeats[_i + 1]].points > _newPoints)\n                    {\n                        // Move the lower seat up\n                        parliamentSeats[_i] = parliamentSeats[_i + 1];\n                    }\n                    else\n                    {\n                        // Record the seat's (new) position\n                        parliamentSeats[_i] = _seat;\n\n                        break;\n                    }\n                }\n            }\n\n            // Save the seat in question's points\n            _seatData.points = _newPoints;\n\n            emit ParliamentInquest(_seat, _newPoints);\n        }\n    }\n\n    /// @dev Distribute the taxes set aside for Parliament to\n    ///  the seats of Parliament\n    function distributeParliamentTaxes()\n        public\n        onlyParliamentSeat\n    {\n        // Require enough time has passed since Parliament's last taxes\n        // were distributed\n        require(parliamentsTaxesLastDistributed + timeBetweenClaims < now);\n\n        // Determine the share for each seat of Parliament (plus an additional\n        // share for the distributor)\n        uint _share = parliamentsTaxes / 11;\n\n        // Calculate the distributor's share\n        uint _distributorsShare = parliamentsTaxes - _share * 9;\n\n        // Reset Parliament's claimable taxes\n        parliamentsTaxes = 0;\n\n        // For each seat of Parliament\n        for(uint8 _i = 0; _i < 10; ++_i)\n        {\n            // If the distributor is not the seat in question\n            if(msg.sender != parliamentSeats[_i])\n            {\n                // Add the share to the seat's unclaimedTaxes\n                parliamentSeatData[parliamentSeats[_i]].unclaimedTaxes += _share;\n            }\n        }\n\n        // Set the last time the taxes were distributed to now\n        parliamentsTaxesLastDistributed = now;\n\n        // Send the distributor their double share\n        msg.sender.transfer(_distributorsShare);\n\n        emit ParliamentsTaxesDistributed(msg.sender, _share, now);\n    }\n\n    /// @dev If the grace period has elapsed, the king can overthrow\n    ///  Parliament and claim their taxes\n    function overthrowParliament()\n        public\n        onlyKing\n    {\n        // Require that the time between claims plus\n        //  the grace period has elapsed\n        require(parliamentsTaxesLastDistributed + timeBetweenClaims + gracePeriod < now);\n\n        // The king can now claim Parliament's taxes as well\n        kingsTaxes += parliamentsTaxes;\n\n        // Parliament has lost their taxes\n        parliamentsTaxes = 0;\n\n        // Parliament must wait before distributing their taxes again\n        parliamentsTaxesLastDistributed = now;\n\n        emit ParliamentOverthrown(now);\n    }\n\n    /// @dev If the grace period has elapsed, Parliament can overthrow\n    ///  the king and claim his taxes\n    function overthrowKing()\n        public\n        onlyParliamentSeat\n    {\n        // Require the time between claims plus\n        // the grace period has elapsed\n        require(kingsTaxesLastClaimed + timeBetweenClaims + gracePeriod < now);\n\n        // Parliament can now claim the King's taxes as well\n        parliamentsTaxes += kingsTaxes;\n\n        // The King has lost his taxes\n        kingsTaxes = 0;\n\n        // The King must wait before claiming his taxes again\n        kingsTaxesLastClaimed = now;\n\n        emit KingOverthrown(now);\n    }\n\n    /// @dev Anyone can pay taxes\n    function payTaxes() public payable\n    {\n        // Add the King's share\n        kingsTaxes += msg.value / kingsTaxDivisor;\n\n        // Add the Wayfarer's share\n        wayfarersTaxes += msg.value / wayfarersTaxDivisor;\n\n        // Add Parliament's share\n        parliamentsTaxes += msg.value / parliamentsTaxDivisor;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405160208061163583398101604052516000805460038054600160a060020a031916600160a060020a039094169390931790925561010060a860020a031990911633610100021760ff191660011781556115c390819061007290396000f3006080604052600436106101d75763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663121e0d4e81146101dc57806313284652146101f357806321924964146102145780633a71e7521461023b5780633f815d6914610250578063401ddd5d1461026557806369deb7b71461027a57806372d52e631461028f5780637d22026a146102a45780637fad7bba146102b957806387e8a980146102ce5780638814134d146102ef5780638816c9961461030457806389641ac014610319578063954969f61461032e578063994d1ee91461034f578063a06db7dc14610364578063a52cd44014610379578063a71a13e1146103aa578063a7304287146103bf578063b187bd26146103d4578063b8cebc79146103fd578063ba56f6ee14610412578063bfd2af7814610427578063c47a66071461043c578063c5b0d06314610451578063cc181ca814610466578063ccacb4351461047b578063d9b92ef414610490578063dad4a7d3146104b1578063deb63d4f146104c6578063e10e384a146104db578063ef50c988146104e3578063f208eb53146104f8578063f46f4fc114610510578063f5e7f75e14610525578063f67714b31461053a578063f9140f7f1461055b575b600080fd5b3480156101e857600080fd5b506101f1610570565b005b3480156101ff57600080fd5b506101f1600160a060020a03600435166105c2565b34801561022057600080fd5b506102296108c7565b60408051918252519081900360200190f35b34801561024757600080fd5b506102296108cc565b34801561025c57600080fd5b506101f16108d2565b34801561027157600080fd5b506101f1610a04565b34801561028657600080fd5b506101f1610a94565b34801561029b57600080fd5b506101f1610c10565b3480156102b057600080fd5b506101f1610c87565b3480156102c557600080fd5b50610229610d69565b3480156102da57600080fd5b506101f1600160a060020a0360043516610d6f565b3480156102fb57600080fd5b506101f1610dc0565b34801561031057600080fd5b506101f1610df6565b34801561032557600080fd5b5061022961104d565b34801561033a57600080fd5b506101f1600160a060020a0360043516611053565b34801561035b57600080fd5b506101f1611091565b34801561037057600080fd5b5061022961120c565b34801561038557600080fd5b5061038e611213565b60408051600160a060020a039092168252519081900360200190f35b3480156103b657600080fd5b5061038e611222565b3480156103cb57600080fd5b506101f1611231565b3480156103e057600080fd5b506103e9611280565b604080519115158252519081900360200190f35b34801561040957600080fd5b506101f1611289565b34801561041e57600080fd5b5061038e611304565b34801561043357600080fd5b50610229611318565b34801561044857600080fd5b5061022961131e565b34801561045d57600080fd5b50610229611324565b34801561047257600080fd5b5061038e611329565b34801561048757600080fd5b50610229611338565b34801561049c57600080fd5b506101f1600160a060020a036004351661133d565b3480156104bd57600080fd5b506101f161137b565b3480156104d257600080fd5b5061038e611432565b6101f1611441565b3480156104ef57600080fd5b5061022961146a565b34801561050457600080fd5b5061038e600435611470565b34801561051c57600080fd5b506101f161148c565b34801561053157600080fd5b5061038e611543565b34801561054657600080fd5b506101f1600160a060020a0360043516611552565b34801561056757600080fd5b50610229611590565b6000546101009004600160a060020a0316331461058c57600080fd5b6000805460ff191660011781556040517f02b2464d82b27b9e05464c651333aa75ab50f9ab9bc79a218dd84c200c6fc7999190a1565b600160a060020a038116600090815260146020526040812080549091908190156108c157600354604080517f8405fba8000000000000000000000000000000000000000000000000000000008152600160a060020a03878116600483015291519190921691638405fba89160248083019260209291908290030181600087803b15801561064e57600080fd5b505af1158015610662573d6000803e3d6000fd5b505050506040513d602081101561067857600080fd5b5051835490925082111561077d575060095b600a8181811061069657fe5b0154600160a060020a038581169116146106b3576000190161068a565b6000811115610778578160146000600a60001985018181106106d157fe5b0154600160a060020a03168152602081019190915260400160002054101561073e57600a600019820181811061070357fe5b0154600160a060020a0316600a8281811061071a57fe5b018054600160a060020a031916600160a060020a039290921691909117905561076f565b83600a8281811061074b57fe5b018054600160a060020a031916600160a060020a0392909216919091179055610778565b600019016106b3565b610879565b825482141561078b57600080fd5b5060005b600a8181811061079b57fe5b0154600160a060020a038581169116146107b75760010161078f565b600a811015610879578160146000600a600185018181106107d457fe5b0154600160a060020a03168152602081019190915260400160002054111561084057600a6001820181811061080557fe5b0154600160a060020a0316600a8281811061081c57fe5b018054600160a060020a031916600160a060020a0392909216919091179055610871565b83600a8281811061084d57fe5b018054600160a060020a031916600160a060020a0392909216919091179055610879565b6001016107b7565b81835560408051600160a060020a03861681526020810184905281517f7a00c84f70b260113194e98d61189f9e5eab6980a5ce1f849279113060680951929181900390910190a15b50505050565b600581565b60065481565b336000908152601460205260408120548190819015156108f157600080fd5b42621275006016540110151561090657600080fd5b505060158054600091829055600b81049250600983029003905b600a8160ff16101561098e57600a60ff821681811061093b57fe5b0154600160a060020a03163314610986578260146000600a60ff851681811061096057fe5b0154600160a060020a031681526020810191909152604001600020600101805490910190555b600101610920565b42601655604051339083156108fc029084906000818181858888f193505050501580156109bf573d6000803e3d6000fd5b506040805133815260208101859052428183015290517f523a72d96e576ed3f83f2ef428c838648461862e4e5a84dbaf51c5bc8ce443519181900360600190a1505050565b336000908152601460205260408120600181015490919015610a5d57506001810180546000918290556040519091339183156108fc0291849190818181858888f19350505050158015610a5b573d6000803e3d6000fd5b505b6040805133815290517f472c9de4b3267e3fa9e7dc5f8995ff39ebe57d0a063fe06eb8cadff5263e1e9f9181900360200190a15050565b600154604080517fa0dfbaf90000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0390921691829163a0dfbaf99160248083019260209291908290030181600087803b158015610afb57600080fd5b505af1158015610b0f573d6000803e3d6000fd5b505050506040513d6020811015610b2557600080fd5b505160048054604080517fa0dfbaf9000000000000000000000000000000000000000000000000000000008152600160a060020a0392831693810193909352519084169163a0dfbaf99160248083019260209291908290030181600087803b158015610b9057600080fd5b505af1158015610ba4573d6000803e3d6000fd5b505050506040513d6020811015610bba57600080fd5b505110610bc657600080fd5b60048054600160a060020a0319163390811790915560408051918252517f6cd8d790853c0b38da6686db770a36ba2c38653bf63c343f3bb93c738c2f89da9181900360200190a150565b600454600160a060020a03163314610c2757600080fd5b601654426213c68090910110610c3c57600080fd5b601580546005805490910190556000905542601681905560408051918252517f56d31658f78fd61b88c06baab3ecd0b6ab3ee821f1660f972fe05c8c731fec6a9181900360200190a1565b60008054819081906101009004600160a060020a03163314610ca857600080fd5b60009250600091505b600a8260ff161015610d005760146000600a60ff8516818110610cd057fe5b0154600160a060020a03168152602081019190915260400160002060019081015493909301929190910190610cb1565b8260155460085460055430600160a060020a031631030303039050600060019054906101000a9004600160a060020a0316600160a060020a03166108fc829081150290604051600060405180830381858888f193505050501580156108c1573d6000803e3d6000fd5b60085481565b6000546101009004600160a060020a03163314610d8b57600080fd5b60008054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b6000546101009004600160a060020a03163314610ddc57600080fd5b42600681905560098190556016556000805460ff19169055565b33600090815260146020526040812080549091908190819015156108c157600354604080517f8405fba80000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0390921691638405fba8916024808201926020929091908290030181600087803b158015610e7a57600080fd5b505af1158015610e8e573d6000803e3d6000fd5b505050506040513d6020811015610ea457600080fd5b5051601354600160a060020a03166000908152601460205260409020805491945092508311156108c157600182015415610ee75760018201546015805490910190555b601354600160a060020a031660009081526014602052604081208181556001015582845533600a60ff8316818110610f1b57fe5b018054600160a060020a031916600160a060020a03929092169190911790555060085b600060ff82161061100c578260146000600a60ff8516818110610f5d57fe5b0154600160a060020a031681526020810191909152604001600020541015610fcf57600a60ff8216818110610f8e57fe5b0154600160a060020a0316600a60ff6001840116818110610fab57fe5b018054600160a060020a031916600160a060020a0392909216919091179055611003565b33600a60ff8316818110610fdf57fe5b018054600160a060020a031916600160a060020a039290921691909117905561100c565b60001901610f3e565b604080513381526020810185905281517ff54eff199fed1567f848f26813a1cd09c4b51fc8d6100eb7fafde39cb512ed4f929181900390910190a150505050565b60055481565b6000546101009004600160a060020a0316331461106f57600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b600254604080517f2c7288d70000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a03909216918291632c7288d79160248083019260209291908290030181600087803b1580156110f857600080fd5b505af115801561110c573d6000803e3d6000fd5b505050506040513d602081101561112257600080fd5b5051600754604080517f2c7288d7000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152905191841691632c7288d7916024808201926020929091908290030181600087803b15801561118c57600080fd5b505af11580156111a0573d6000803e3d6000fd5b505050506040513d60208110156111b657600080fd5b5051106111c257600080fd5b60078054600160a060020a0319163390811790915560408051918252517f13cc91e5bbce1a5ccc1237d8f1d33b18e374ecd578a5228fddf4de5e499cb4889181900360200190a150565b6201518081565b600254600160a060020a031681565b600354600160a060020a031681565b6000546101009004600160a060020a0316331461124d57600080fd5b6000805460ff191681556040517f0f0519ab053b7af599830cff5b49ec5284889db5b2dfcfdad2838d25e281e83c9190a1565b60005460ff1681565b3360009081526014602052604090205415156112a457600080fd5b600654426213c680909101106112b957600080fd5b600580546015805490910190556000905542600681905560408051918252517f23aeca8473936f373aa214ab410192b83cd36b60f58e2e4be544201238ee02f59181900360200190a1565b6000546101009004600160a060020a031681565b60095481565b60165481565b601481565b600454600160a060020a031681565b600481565b6000546101009004600160a060020a0316331461135957600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b600454600090600160a060020a0316331461139557600080fd5b4262127500600654011015156113aa57600080fd5b5042600655600580546000918290556004546040519192600160a060020a039091169183156108fc0291849190818181858888f193505050501580156113f4573d6000803e3d6000fd5b506040805133815242602082015281517fe9ad1cd7363ac65313eaf80975bb6b1d38a3180ea899efe34bfb05c4336fd557929181900390910190a150565b600154600160a060020a031681565b600580543482810490910190915560088054601483040190556015805460049092049091019055565b60155481565b600a8181811061147c57fe5b0154600160a060020a0316905081565b600754600090600160a060020a031633146114a657600080fd5b4262127500600954011015156114bb57600080fd5b5042600955600880546000918290556007546040519192600160a060020a039091169183156108fc0291849190818181858888f19350505050158015611505573d6000803e3d6000fd5b506040805133815242602082015281517f83506c4dcd6ff635b8892fa6c4c6ca7c61f14ad804918b6036f2f43a4c5a85fe929181900390910190a150565b600754600160a060020a031681565b6000546101009004600160a060020a0316331461156e57600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b62127500815600a165627a7a72305820ddc9dadbeea293423ca9cf187ee444bdb07bca0af85636741aaa3813039fecd800290000000000000000000000008183703e9df90ed76bec0b0b8fad33f2c024be59",
  "constructorArguments": "0000000000000000000000008183703e9df90ed76bec0b0b8fad33f2c024be59"
}